#Область СлужебныеПроцедурыИФункции
// Директива вместо, минимально вмешиваемся в типовой код, SonarCube потерпит
// BSLLS:EmptyStatement-off 
// BSLLS:MissingSpace-off
&НаСервере
&Вместо("ОбъектыПоКритериюОтбора")
Функция гф_ОбъектыПоКритериюОтбора(ЗначениеКритерияОтбора)

	Результат = ПродолжитьВызов(ЗначениеКритерияОтбора); 
	
	Если Не Метаданные.КритерииОтбора.гф_СвязанныеДокументы.Тип.СодержитТип(ТипЗнч(ЗначениеКритерияОтбора))  Тогда
		Возврат Результат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
// BSLLS:VirtualTableCallWithoutParameters-off
	Запрос.Текст = "ВЫБРАТЬ
	|	СвязанныеДокументы.Ссылка
	|ИЗ
	|	КритерийОтбора.гф_СвязанныеДокументы(&ЗначениеКритерияОтбора) КАК СвязанныеДокументы";
// BSLLS:VirtualTableCallWithoutParameters-on
	
	Запрос.УстановитьПараметр("ЗначениеКритерияОтбора", ЗначениеКритерияОтбора);  
	
	РезультатВыполненияЗапроса = Запрос.Выполнить();
	
	Если РезультатВыполненияЗапроса.Пустой() Тогда
	
		Возврат Результат;
		
	ИначеЕсли ЗначениеЗаполнено(Результат) Тогда
		
		ТаблицаРезультат = Новый ТаблицаЗначений;
		
		ТаблицаРезультат.Колонки.Добавить("Ссылка");
		
		Для Каждого СтрокаРезультата Из Результат Цикл
			
			СтрокаТаблицыРезультата = ТаблицаРезультат.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРезультата, СтрокаРезультата);
			
		КонецЦикла;	
		
		Выборка = РезультатВыполненияЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаТаблицыРезультата = ТаблицаРезультат.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРезультата, Выборка);
			
		КонецЦикла;	 
		
		Возврат ТаблицаРезультат;
		
	Иначе	
	
		Возврат РезультатВыполненияЗапроса.Выгрузить();;
	
	КонецЕсли;
	
КонецФункции
// BSLLS:EmptyStatement-on
// BSLLS:MissingSpace-on

// Типовая процедура, поэтому экранируем
//
// Небольшой список требований от SonarCube на которые плевать разработчикам фирмы 1С
//
// BSLLS:CognitiveComplexity-off 
// BSLLS:CyclomaticComplexity-off
// BSLLS:IfElseIfEndsWithElse-off      
// BSLLS:LineLength-off 
// BSLLS:IfConditionComplexity-off  
// BSLLS:MissingSpace-off     
&НаСервере
&ИзменениеИКонтроль("ВывестиРодительскиеОбъекты")
Процедура гф_ВывестиРодительскиеОбъекты(ТекущийОбъект, ДеревоРодитель, ВыведенныеОбъекты, СлужебныеОбъекты, ИндексСвязейОбъектов)
	
	МетаданныеОбъекта = ТекущийОбъект.Метаданные();
	СписокРеквизитов  = Новый Массив;
	
	Если СлужебныеОбъекты = Неопределено Тогда 
		СлужебныеОбъекты = Новый Соответствие;
	КонецЕсли;
	
	Если ИндексСвязейОбъектов = Неопределено Тогда 
		ИндексСвязейОбъектов = Новый Соответствие;
	КонецЕсли;
	
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		
		#Удаление
		Если Не Метаданные.КритерииОтбора.СвязанныеДокументы.Состав.Содержит(Реквизит) Тогда
			Продолжить;
		КонецЕсли;
		#КонецУдаления
		#Вставка
		Если Не Метаданные.КритерииОтбора.СвязанныеДокументы.Состав.Содержит(Реквизит) 
			И Не Метаданные.КритерииОтбора.гф_СвязанныеДокументы.Состав.Содержит(Реквизит) Тогда
			Продолжить;
		КонецЕсли;
		#КонецВставки
		
		Для Каждого ТекущийТип Из Реквизит.Тип.Типы() Цикл
			
			МетаданныеРеквизита = МетаданныеТипаРеквизита(ТекущийТип);
			Если МетаданныеРеквизита.Метаданные = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеРеквизита = ТекущийОбъект[Реквизит.Имя];
			Если ЗначениеЗаполнено(ЗначениеРеквизита)
				И ТипЗнч(ЗначениеРеквизита) = ТекущийТип
				И ЗначениеРеквизита <> ТекущийОбъект
				И СписокРеквизитов.Найти(ЗначениеРеквизита) = Неопределено Тогда
				
				СписокРеквизитов.Добавить(ЗначениеРеквизита);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		
		ИменаРеквизитов = "";
		СодержимоеТЧ = ТекущийОбъект[ТабличнаяЧасть.Имя].Выгрузить(); // ТаблицаЗначений
		Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл

		#Удаление
			Если Не Метаданные.КритерииОтбора.СвязанныеДокументы.Состав.Содержит(Реквизит) Тогда
				Продолжить;
			КонецЕсли;
		#КонецУдаления
		#Вставка
		Если Не Метаданные.КритерииОтбора.СвязанныеДокументы.Состав.Содержит(Реквизит)
			И Не Метаданные.КритерииОтбора.гф_СвязанныеДокументы.Состав.Содержит(Реквизит) Тогда
				Продолжить;
			КонецЕсли;
		#КонецВставки
				
			Для Каждого ТекущийТип Из Реквизит.Тип.Типы() Цикл
				МетаданныеРеквизита = МетаданныеТипаРеквизита(ТекущийТип);
				Если МетаданныеРеквизита.Метаданные = Неопределено Тогда
					Продолжить;
				КонецЕсли;
	
				ИменаРеквизитов = ИменаРеквизитов + ?(ИменаРеквизитов = "", "", ", ") + Реквизит.Имя;
				Прервать;
			КонецЦикла;
			
		КонецЦикла;
		
		СодержимоеТЧ.Свернуть(ИменаРеквизитов);
		Для Каждого КолонкаТЧ Из СодержимоеТЧ.Колонки Цикл
			
			Для Каждого СтрокаТЧ Из СодержимоеТЧ Цикл
			
				ЗначениеРеквизита = СтрокаТЧ[КолонкаТЧ.Имя];
				МетаданныеЗначения = МетаданныеТипаРеквизита(ТипЗнч(ЗначениеРеквизита));
				Если МетаданныеЗначения.Метаданные = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеРеквизита = ТекущийОбъект
					Или СписокРеквизитов.Найти(ЗначениеРеквизита) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СписокРеквизитов.Добавить(ЗначениеРеквизита);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если СписокРеквизитов.Количество() > 0 Тогда
		ВыводимыеОбъекты = ЗапросПоРеквизитамОбъектов(СписокРеквизитов).Выполнить().Выгрузить();
		ВыводимыеОбъекты.Сортировать("Дата");
		Для каждого ВыводимыйОбъект Из ВыводимыеОбъекты Цикл 
			
			Если ИндексСвязейОбъектов[ТекущийОбъект] = ВыводимыйОбъект.Ссылка Тогда 
				Продолжить;
			КонецЕсли;
			
			ИндексСвязейОбъектов[ТекущийОбъект] = ВыводимыйОбъект.Ссылка;
			
			НоваяСтрока = ДобавитьСтрокуВДерево(ДеревоРодитель, ВыводимыйОбъект, ВыведенныеОбъекты);			
			Если НоваяСтрока <> Неопределено
				И Не ДобавляемыйОбъектИмеетсяСредиРодителей(ДеревоРодитель, ВыводимыйОбъект.Ссылка) Тогда
				
				// @skip-check query-in-loop - Рекурсивный алгоритм обработки дерева.
				ВывестиРодительскиеОбъекты(ВыводимыйОбъект.Ссылка, НоваяСтрока, ВыведенныеОбъекты,
					СлужебныеОбъекты, ИндексСвязейОбъектов);
				
			ИначеЕсли СлужебныеОбъекты[ВыводимыйОбъект.Ссылка] = Неопределено Тогда 
				
				СлужебныеОбъекты[ВыводимыйОбъект.Ссылка] = Истина;
				// @skip-check query-in-loop - Рекурсивный алгоритм обработки дерева.
				ВывестиРодительскиеОбъекты(ВыводимыйОбъект.Ссылка, ДеревоРодитель, ВыведенныеОбъекты,
					СлужебныеОбъекты, ИндексСвязейОбъектов);
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры   
// BSLLS:MissingSpace-on
// BSLLS:CyclomaticComplexity-on
// BSLLS:CognitiveComplexity-on
// BSLLS:IfElseIfEndsWithElse-on
// BSLLS:LineLength-on 
// BSLLS:IfConditionComplexity-on
#КонецОбласти