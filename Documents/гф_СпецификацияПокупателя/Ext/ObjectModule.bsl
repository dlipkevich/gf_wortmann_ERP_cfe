#Область ОбработчикиСобытий

&После("ОбработкаПроведения")
Процедура гф_ОбработкаПроведения(Отказ, РежимПроведения)

	ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ);
	
	МассивОтличий = ПроверитьСтатусыЗаказов(ПредопределенноеЗначение("Справочник.гф_СтатусРаботыСЗаказомИ5.Подтвержден"));
	
	Если МассивОтличий.Количество()>0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В спецификации не все заказы имели статус «Подтвержден»:");
		
		Для Каждого Отличие Из МассивОтличий Цикл
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Отличие);
			
		КонецЦикла;	
		
	КонецЕсли;	
	
	УстановитьСтатусыЗаказов(ПредопределенноеЗначение("Справочник.гф_СтатусРаботыСЗаказомИ5.ВыпущенаСпецификация"));
	
КонецПроцедуры

&После("ОбработкаУдаленияПроведения")
Процедура гф_ОбработкаУдаленияПроведения(Отказ)

	ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);

	УстановитьСтатусыЗаказов(ПредопределенноеЗначение("Справочник.гф_СтатусРаботыСЗаказомИ5.Подтвержден"));
	
КонецПроцедуры

&После("ПередЗаписью")
Процедура гф_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда

		Возврат;

	КонецЕсли;
	
	ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	Если ПометкаУдаления Тогда
		
		Счета = ПолучитьПроверитьСчетаНаОплату();   
		
		Если Счета.Оплаченные.Количество()>0 Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("По спецификации " +
			?(Счета.Оплаченные.Количество()>1, "созданы и оплачены Счета", "создан и оплачен Счет") +
			" на аванс:");
			
			Для Каждого Счет Из Счета.Оплаченные Цикл
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Счет);
				
			КонецЦикла;
			
			Отказ = Истина;
			
		Иначе			

			Для Каждого Счет Из Счета.Неоплаченные Цикл
				
				СчетОбъект = Счет.ПолучитьОбъект();
				
				Если Не СчетОбъект.ПометкаУдаления Тогда
					
					СчетОбъект.УстановитьПометкуУдаления(Истина);
					
				КонецЕсли;	
					
			КонецЦикла;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

&После("ПриЗаписи")
Процедура гф_ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти  

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьСтатусыЗаказов(НовыйСтатусЗаказа)
	
	Для Каждого СтрокаЗаказа Из ЗаказыКлиентов Цикл 
		
		Если СтрокаЗаказа.ЗаказКлиента.гф_СтатусРаботыСЗаказомИ5 <> НовыйСтатусЗаказа Тогда
			
			ЗаказОбъект = СтрокаЗаказа.ЗаказКлиента.ПолучитьОбъект();
			
			ЗаказОбъект.ОбменДанными.Загрузка = Истина;
			
			ЗаказОбъект.гф_СтатусРаботыСЗаказомИ5 = НовыйСтатусЗаказа;
			
			ЗаказОбъект.Записать();
			
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры

Функция ПроверитьСтатусыЗаказов(СтатусЗаказа)                       
	
	МассивОтличий = Новый Массив;

	Для Каждого СтрокаЗаказа Из ЗаказыКлиентов Цикл 
		
		Если СтрокаЗаказа.ЗаказКлиента.гф_СтатусРаботыСЗаказомИ5 <> СтатусЗаказа Тогда 
			
			МассивОтличий.Добавить(Строка(СтрокаЗаказа.ЗаказКлиента) + 
					" статус «" + СтрокаЗаказа.ЗаказКлиента.гф_СтатусРаботыСЗаказомИ5 + "»");
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат МассивОтличий;	
	
КонецФункции

Функция ПолучитьПроверитьСчетаНаОплату()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СчетНаОплатуКлиенту.Ссылка КАК Счет,
	|	ПоступлениеБезналичныхДенежныхСредств.Ссылка ЕСТЬ NULL
	|		ИЛИ ПоступлениеБезналичныхДенежныхСредств.ПометкаУдаления КАК МожноУдалять
	|ПОМЕСТИТЬ ВТ_Счета
	|ИЗ
	|	Документ.СчетНаОплатуКлиенту КАК СчетНаОплатуКлиенту
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеБезналичныхДенежныхСредств КАК ПоступлениеБезналичныхДенежныхСредств
	|		ПО СчетНаОплатуКлиенту.Ссылка = ПоступлениеБезналичныхДенежныхСредств.ДокументОснование
	|ГДЕ
	|	СчетНаОплатуКлиенту.гф_СпецификацияПокупателя = &гф_СпецификацияПокупателя
	|	И НЕ СчетНаОплатуКлиенту.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетНаОплатуКлиенту.Ссылка,
	|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка ЕСТЬ NULL
	|		ИЛИ ПоступлениеБезналичныхДенежныхСредств.ПометкаУдаления
	|ИЗ
	|	Документ.СчетНаОплатуКлиенту КАК СчетНаОплатуКлиенту
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеБезналичныхДенежныхСредств КАК ПоступлениеБезналичныхДенежныхСредств
	|			ПО ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка = ПоступлениеБезналичныхДенежныхСредств.Ссылка
	|		ПО СчетНаОплатуКлиенту.Ссылка = ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.ОснованиеПлатежа
	|ГДЕ
	|	СчетНаОплатуКлиенту.гф_СпецификацияПокупателя = &гф_СпецификацияПокупателя
	|	И НЕ СчетНаОплатуКлиенту.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Счета.Счет КАК Счет
	|ИЗ
	|	ВТ_Счета КАК ВТ_Счета
	|ГДЕ
	|	Не ВТ_Счета.МожноУдалять
	|	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Счета.Счет КАК Счет
	|ИЗ
	|	ВТ_Счета КАК ВТ_Счета
	|ГДЕ
	|	ВТ_Счета.МожноУдалять";  
	
	Запрос.Параметры.Вставить("гф_СпецификацияПокупателя", Ссылка);
	
	РезультатПакет = Запрос.ВыполнитьПакет();
	
	ИндексОплаченные	= 1;
	ИндексНеОплаченные	= 2;
	
	РезультатОплаченные		= РезультатПакет[ИндексОплаченные];
	РезультатНеоплаченные	= РезультатПакет[ИндексНеОплаченные];
	
	Если РезультатОплаченные.Пустой() Тогда
		
		Оплаченные = Новый Массив;
		
	Иначе
		
		Оплаченные = РезультатОплаченные.Выгрузить().ВыгрузитьКолонку("Счет");
		
	КонецЕсли;	
	
	Если РезультатНеоплаченные.Пустой() Тогда
		
		Неоплаченные = Новый Массив;
		
	Иначе
		
		Неоплаченные = РезультатНеоплаченные.Выгрузить().ВыгрузитьКолонку("Счет");
		
	КонецЕсли;	

	
	СчетаНаОплату = Новый Структура; 
	
	СчетаНаОплату.Вставить("Оплаченные", Оплаченные);
	СчетаНаОплату.Вставить("Неоплаченные", Неоплаченные);
	
	Возврат СчетаНаОплату;	
	
КонецФункции

#КонецОбласти

