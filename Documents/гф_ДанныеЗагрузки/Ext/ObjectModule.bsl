#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных
Перем НаборЗаписейТэгов; // РегистрСведений.гф_СтрокиДокументаДанныеЗагрузки
Перем ЗагруженныеСтроки; // ТЗ с выгруженными данными из РегистрыСведений.гф_СтрокиДокументаДанныеЗагрузки
Перем ТекущийРежимЗаписи; // режим записи документа
Перем ПараметрыДокументыСоСтатусомИзменениеИзИ5; // ТЗ со значениями реквизитов из Документ.ЗаказКлиента
Перем ТЧДокументаДоСтатусаИзменениеИзИ5; // ТЗ со значениями ТЧ из Документ.ЗаказКлиента
Перем НомерОшибки; // число (для записи в РС гф_ОшибкиЗагрузки)
Перем ТекстыОшибок; // ТЗ для записи в РС гф_ОшибкиЗагрузки 
Перем СтавкаНДС; // Значение для документа ЗаказКлиента
Перем ФункцияДокумента; // Функция документа ORDRSP для ЗаказКлиента
#КонецОбласти

#Область ПрограммныйИнтерфейс

// #wortmann { 
// Экспортная процедура по созданию номенклатуры и установки цен 
// Галфинд_Домнышева 2022/09/12
//
// Параметры:
//	Отказ - параметр системы 
//	СоздаватьНоменклатуру - Булево - признак создания новой номенклатурной позиции
//	СоздаватьУстановкуЦен - Булево - признак создания установки цен
//
Процедура СоздатьНоменклатуру(Отказ = Ложь, СоздаватьНоменклатуру = Истина, СоздаватьУстановкуЦен = Ложь) Экспорт
	
	ТекстыОшибок = Новый ТаблицаЗначений;
	ТекстыОшибок.Колонки.Добавить("Дата");
	ТекстыОшибок.Колонки.Добавить("ПутьФайла");
	ТекстыОшибок.Колонки.Добавить("Номер");
	ТекстыОшибок.Колонки.Добавить("ТекстОшибки");
	ТекстыОшибок.Колонки.Добавить("Организация");
	ТекстыОшибок.Колонки.Добавить("Интерфейс");
	
	Если Не ЗначениеЗаполнено(НомерОшибки) Тогда
		НомерОшибки = 1;
	КонецЕсли;
	
	Если НЕ Интерфейс = Перечисления.гф_Интерфейсы.PRICAT Тогда
		Возврат;	
	КонецЕсли;
	
	ПолучитьНаборЗаписейРегистраСтрок();
	
	Если СоздаватьНоменклатуру Тогда
		// BSLLS:Typo-off
		ПроведениеИнтерфейсаPricat(НаборЗаписейТэгов, Отказ, Истина);
		// BSLLS:Typo-on
		Если НЕ Отказ Тогда
			СтатусДокумента = Перечисления.гф_СтатусыДокументовЗагрузки.НоменклатураЗагружена;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураЦен = ПолучитьСтруктуруЦен();
	
	Если СоздаватьУстановкуЦен И СтатусДокумента = Перечисления.гф_СтатусыДокументовЗагрузки.НоменклатураЗагружена 
		И СтруктураЦен <> Неопределено Тогда
		СозданиеПроведениеУстановкиЦен(НаборЗаписейТэгов, СтруктураЦен, Отказ);
		Если НЕ Отказ Тогда
			СтатусДокумента = Перечисления.гф_СтатусыДокументовЗагрузки.СозданыЦеныНоменклатуры;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекстыОшибок.Количество() > 0 Тогда
		ЗаписатьОшибку(ТекстыОшибок);
	КонецЕсли;
	
КонецПроцедуры// } #wortmann

#КонецОбласти

#Область ОбработчикиСобытий

&Вместо("ОбработкаПроведения")
Процедура гф_ОбработкаПроведения(Отказ, РежимПроведения)
    // #wortmann { 
	// Внесение изменений в обработку проведения, для проведения документов с интерфейсом PRICAT согласно
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=811dbcee7bda45d711ecf78ee2ff45f8
	// Галфинд_Домнышева 2022/09/12
	Если Интерфейс = Перечисления.гф_Интерфейсы.PRICAT Тогда
		Если НЕ (СтатусДокумента = Перечисления.гф_СтатусыДокументовЗагрузки.НоменклатураЗагружена
			ИЛИ СтатусДокумента = Перечисления.гф_СтатусыДокументовЗагрузки.СозданыЦеныНоменклатуры) Тогда
			Отказ = Истина;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Попытка
		НаборЗаписейТэгов.Записать(Истина);
	Исключение
	    СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + 
		". Описание ошибки: Не удалось внести изменения в регистр сведений ""СтрокиДокументаДанныеЗагрузки"" !";
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
	КонецПопытки;
	// } #wortmann

КонецПроцедуры

&Вместо("ПередЗаписью")
Процедура гф_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	// #wortmann { 
	// Внесение изменений в процедуру перед записью согласно
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=811dbcee7bda45d711ecf78ee2ff45f8
	// Галфинд_Домнышева 2022/09/12
    
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;            
	
	ТекущийРежимЗаписи = РежимЗаписи;
	// } #wortmann

КонецПроцедуры

&Вместо("ПриЗаписи")
Процедура гф_ПриЗаписи(Отказ)
	
	// #wortmann { 
	// Внесение изменений в процедуру при записи согласно
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=811dbcee7bda45d711ecf78ee2ff45f8
	// Галфинд_Домнышева 2022/09/12
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
		
	Если ЭтоНовый() ИЛИ Не ТекущийРежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
  	
	Если ЭтотОбъект.СтатусДокумента = Перечисления.гф_СтатусыДокументовЗагрузки.ЗагруженоСОшибками Тогда
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, 
		"Документ " + ЭтотОбъект + " имеет статус ""Загружено с ошибками""! Документ не проведен.");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	// #wortmann { 
	// Заполняем НомерОшибки и объявляем ТекстыОшибок для дальнейшей загрузки текстов ошибки в РС гф_ОшибкиЗагрузки 
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=811dbcee7bda45d711ecf78ee2ff45f8
	// Галфинд_Домнышева 2022/10/14
	Если Не ЗначениеЗаполнено(НомерОшибки) Тогда
		НомерОшибки = 1;
	КонецЕсли;
	
	ТекстыОшибок = Новый ТаблицаЗначений;
	ТекстыОшибок.Колонки.Добавить("Дата");
	ТекстыОшибок.Колонки.Добавить("ПутьФайла");
	ТекстыОшибок.Колонки.Добавить("Номер");
	ТекстыОшибок.Колонки.Добавить("ТекстОшибки");
	ТекстыОшибок.Колонки.Добавить("Организация");
	ТекстыОшибок.Колонки.Добавить("Интерфейс");
	// } #wortmann
	ПолучитьНаборЗаписейРегистраСтрок();
	
	Если Интерфейс <> Перечисления.гф_Интерфейсы.PRICAT Тогда
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		Попытка
			Если Интерфейс = Перечисления.гф_Интерфейсы.ORDRSP Тогда
				
				ПроведениеИнтерфейсаORDRSP(НаборЗаписейТэгов, Отказ); 
			ИначеЕсли Интерфейс = Перечисления.гф_Интерфейсы.PRICAT_SORT Тогда
				СоздатьВариантКомплектации(НаборЗаписейТэгов, Отказ); 
			Иначе
				// Будут располагаться процедуру для обработки др. интрефейсов
				Возврат;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
	КонецЕсли;
	// #wortmann { 
	// Загружаем в ДополнительныеСвойства ТекстыОшибок для дальнейшей загрузки текстов ошибки в РС гф_ОшибкиЗагрузки 
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=811dbcee7bda45d711ecf78ee2ff45f8
	// Галфинд_Домнышева 2022/10/14
	Если ТекстыОшибок.Количество() > 0 Тогда
		ДополнительныеСвойства.Вставить("ТекстыОшибок", ТекстыОшибок);
	КонецЕсли;
	// } #wortmann
	// } #wortmann
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
 
// #wortmann { 
// Проведение документов с интерфейсом ORDRSP:
// Галфинд_Домнышева 2022/09/12
//
// Параметры:
//  ТабличнаяЧасть - ТаблицаЗначений - выгрузка РС гф_СтрокиДокументаДанныеЗагрузки по данному Объекту.
//  Отказ - параметр системы
// BSLLS:LatinAndCyrillicSymbolInWord-off
Процедура ПроведениеИнтерфейсаORDRSP(ТабличнаяЧасть, Отказ)
// BSLLS:LatinAndCyrillicSymbolInWord-on	

	НовыйДокумент = Неопределено;
	
	СтавкаНДСПоУмолчанию = НайтиЗначениеПоРеквизитуСправочника ("СтавкиНДС", "Наименование", "20%");
	СтавкаНДС = СтавкаНДСПоУмолчанию;
   	ЦенаВключаетНДС = Истина;
	ФлагЗаписиДокумента = Истина;
	
	ОписаниеСтроки = Новый ОписаниеТипов("Строка");
	ТаблицаРасхождений = Новый ТаблицаЗначений;
	ТаблицаРасхождений.Колонки.Добавить("Реквизит", ОписаниеСтроки);
	ТаблицаРасхождений.Колонки.Добавить("ЗначениеТекущее", ОписаниеСтроки);
	ТаблицаРасхождений.Колонки.Добавить("ЗначениеИзИ5", ОписаниеСтроки);
	
	ТекущаяДата = ТекущаяДатаСеанса();

	ПроходимЦиклПоТЭГ(НовыйДокумент, ТабличнаяЧасть, ТекущаяДата, ТаблицаРасхождений, Отказ, ФлагЗаписиДокумента);
	
	Если ФлагЗаписиДокумента И НовыйДокумент <> Неопределено И НЕ Отказ Тогда
		
		НовыйДокумент.ЦенаВключаетНДС = Истина;
		НовыйДокумент.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;		
		
		ЗаполнитьСтавкиНДС(НовыйДокумент, СтавкаНДС);
		
		ЗаполнитьСуммы(НовыйДокумент);
		// Ставим флаг "СкидкиРасчитаны" для записи документа, без расчитанных скидок запись не проходит.			
		НовыйДокумент.СкидкиРассчитаны = Истина;
		НовыйДокумент.Приоритет = _омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначение("гф_ПриоритетЗаказКлиента");
		НовыйДокумент.ОбменДанными.Загрузка = Ложь;
		
		Попытка			 
			НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
			Если НЕ НовыйДокумент.ПометкаУдаления И Не НовыйДокумент.ДополнительныеСвойства.Свойство("НеПроводить") Тогда
				НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			КонецЕсли;
			ЗаполнитьИзмененияЗначений(ТаблицаРасхождений, НовыйДокумент, ТекущаяДата);
		Исключение
			СообщениеОбОшибке = "Произошли ошибки при проведении документа  " + НовыйДокумент
			+ " не проведен." + ОписаниеОшибки(); 
			ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке);
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
		КонецПопытки;
		
	ИначеЕсли НовыйДокумент.гф_СтатусРаботыСЗаказомИ5 = Справочники.гф_СтатусРаботыСЗаказомИ5.ИзменениеИзИ5 Тогда
		ТаблицаСравненийДляЗаписиВРегистр = СравнитьДокументы(НовыйДокумент);
		Для Каждого Строка Из ТаблицаСравненийДляЗаписиВРегистр Цикл 
			ЗаполнитьЗначенияСвойств(ТаблицаРасхождений.Добавить(), Строка); 
		КонецЦикла;
		ЗаполнитьИзмененияЗначений(ТаблицаРасхождений, НовыйДокумент, ТекущаяДата);
	Иначе
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры// } #wortmann

// #wortmann { 
// Обход строк ТЧ РегистрСведений.гф_СтрокиДокументаДанныеЗагрузки для Проведения документов с интерфейсом ORDRSP:
// Галфинд_Домнышева 2022/10/21
//
// Параметры:
//	НовыйДокумент - ДокументОбъект.ЗаказКлиента - Создаваемый документ (в начале Неопределено)
//  ТабличнаяЧасть - ТаблицаЗначений - выгрузка РС гф_СтрокиДокументаДанныеЗагрузки по данному Объекту.
//	ТекущаяДата - Дата - единая дата для записей в РС
//	ТаблицаРасхождений - ТаблицаЗначений - содержит колонки "Реквизит", "ЗначениеТекущее", "ЗначениеИзИ5".  
//  Отказ - параметр системы 
//	ФлагЗаписиДокумента - Булево
Процедура ПроходимЦиклПоТЭГ(НовыйДокумент, ТабличнаяЧасть, ТекущаяДата, ТаблицаРасхождений, Отказ, ФлагЗаписиДокумента) 
	
	Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл 				// Цикл по тегам XML
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЧ.ПолеЗагрузки) Тогда
			
			// Тэг создания нового документа
			Если СтрНайти(СтрокаТЧ.Тэг, "Message_Header") > 0 Тогда
				
				ОпределяемШапкуЗаказаКлиента(СтрокаТЧ, НовыйДокумент, ФлагЗаписиДокумента, ТекущаяДата, Отказ);
				// BSLLS:Typo-off
				// тэг добавления позиции в тч Товары	
			ИначеЕсли СтрНайти(СтрокаТЧ.Тэг, "Message_Position") > 0  Тогда
                // BSLLS:Typo-on
				НовыйЭлементТоварыВКоробах = НовыйДокумент.гф_ТоварыВКоробах.Добавить();
				// остальные тэги	
			Иначе 
				Если СтрокаТЧ.ПолеЗагрузки.ТипОбъекта = "Заказ клиента" И НовыйДокумент <> Неопределено Тогда
					ЗаполнитьРеквизитыДокумента(СтрокаТЧ, НовыйДокумент, НовыйЭлементТоварыВКоробах, ФлагЗаписиДокумента,
												ТаблицаРасхождений, Отказ);
				КонецЕсли;
			КонецЕсли; // Тэг создания нового документа
		КонецЕсли;
	КонецЦикла;				// Цикл по тегам XML
	
КонецПроцедуры

// #wortmann { 
// Процедура вызывает процедуру по созданию документа ЗаказКлиента и 
// заполняеет его основные реквизиты.
// Галфинд_Домнышева 2022/10/21
//
// Параметры:
//	СтрокаТЧ - строка табличной части из РегистрСведений.гф_СтрокиДокументаДанныеЗагрузки
//	НовыйДокумент - ДокументОбъект.ЗаказКлиента - Создаваемый документ (в начале Неопределено)
//	ФлагЗаписиДокумента - Булево
//	ТекущаяДата - Дата - единая дата для записей в РС
//  Отказ - параметр системы 
Процедура ОпределяемШапкуЗаказаКлиента(СтрокаТЧ, НовыйДокумент, ФлагЗаписиДокумента, ТекущаяДата, Отказ)
	
	НомерСтрокиРодителя = СтрокаТЧ.НомерСтрокиРодителя;
	
	ИмяЗаказа = НайтиИмяЗаказа("Customer_order_number", СтрокаТЧ);
	
	Если НЕ НовыйДокумент = Неопределено Тогда
		СменаСтатусовДокумента(НовыйДокумент, Отказ);
	КонецЕсли;
	
	НомерДокумента = НайтиСтрокуДереваПоТэгуОтПорядкового("Supplier_order_number", Отказ, СтрокаТЧ);
	ДатаДокумента = НайтиСтрокуДереваПоТэгуОтПорядкового("Supplier_order_date", Отказ, СтрокаТЧ);
	ФункцияДокумента = НайтиСтрокуДереваПоТэгуОтПорядкового("Document_function", Отказ, СтрокаТЧ);
	
	Если ЗначениеЗаполнено(НомерДокумента) И ЗначениеЗаполнено(ДатаДокумента) Тогда
		
		НовыйДокумент = ИщемИСоздаемНовыйДокумент(НомерДокумента, ДатаДокумента, 
		 ТекущаяДата, СтрокаТЧ, ФлагЗаписиДокумента, Отказ);
		
		Если НовыйДокумент = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		СообщениеОбОшибке = СформироватьСообщение(НомерДокумента, ДатаДокумента);
		ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	НовыйДокумент.гф_ВидЦены = 
		_омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначение("гф_ГлобальныеЗначенияОптоваяЗакупочнаяЦена");
	НовыйДокумент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	НовыйДокумент.гф_СезонныйЗаказ = Истина;
	
	ВалютаДокумента = _омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначение("гф_ВалютаЗагрузкаИзИ5");
	Если ВалютаДокумента = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;  
	
	НовыйДокумент.Валюта = ВалютаДокумента;
	
	Если ЗначениеЗаполнено(ИмяЗаказа) Тогда
		НовыйДокумент.гф_ИмяЗаказа = ИмяЗаказа;
	КонецЕсли;
	
КонецПроцедуры

// #wortmann { 
// Функция ищет или создает документ ЗаказКлиента
// Если ТЭГ "Document_function" = 46, создается новый документ ЗаказКлиента
// Если ТЭГ "Document_function" = 4, вносятся изменения в ранее созданный документ
// Если ТЭГ "Document_function" = 27, ранее созданный документ помечается на удаление
// Галфинд_Домнышева 2022/10/21
//
// Параметры:
//	НомерДокумента - Строка
//	ДатаДокумента - Дата
//	ТекущаяДата - Дата - единая дата для записей в РС
//	СтрокаТЧ - строка табличной части из РегистрСведений.гф_СтрокиДокументаДанныеЗагрузки
//	ФлагЗаписиДокумента - Булево
//  Отказ - параметр системы
//
// Возвращаемое значение:
//	НовыйДокумент - ДокументОбъект.ЗаказКлиента - Создаваемый документ 
//	Неопределено - если документ есть в системе, но в файле XML указано не верное значение ТЭГ "Document_function" 
Функция ИщемИСоздаемНовыйДокумент(НомерДокумента, ДатаДокумента, ТекущаяДата, СтрокаТЧ, 
									ФлагЗаписиДокумента, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Документы.Ссылка КАК Документ
	|ИЗ
	|	Документ.ЗаказКлиента КАК Документы
	|ГДЕ
	|	Документы.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И Документы.Номер = &Номер";
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(Дата(ДатаДокумента)));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(Дата(ДатаДокумента)));
	Запрос.УстановитьПараметр("Номер", НомерДокумента);
	Результат = Запрос.Выполнить().Выбрать();
	
	// Найден ранее созданный документ ЗаказПокупателя...
	Если Результат.Следующий() Тогда
		
		НовыйДокумент = Результат.Документ.ПолучитьОбъект();
		НовыйДокумент.ОбменДанными.Загрузка = Истина;
		
		ИзменяемСтатусНайденногоДокумента(НовыйДокумент);
		
		НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		
		Если СокрЛП(ФункцияДокумента) = "27" Тогда
			
			НовыйДокумент.ОбменДанными.Загрузка = Истина;
			НовыйДокумент.Комментарий = "Документ помечен на удаление согласно " + ЭтотОбъект + "."; 
			НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
			НовыйДокумент.ОбменДанными.Загрузка = Ложь;
			НовыйДокумент.УстановитьПометкуУдаления(Истина);
			
			// Добавим запись об изменении значения ПометкиУдаления
			НаборЗаписей = РегистрыСведений.гф_ИзменениеЗначенийИзI5.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Документ.Установить(НовыйДокумент.Ссылка); 
			НаборЗаписей.Отбор.Период.Установить(ТекущаяДата);
			
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Период = ТекущаяДата;
			НоваяЗапись.Документ = НовыйДокумент.Ссылка; 
			НоваяЗапись.Реквизит = "Пометка Удаления"; 
			НоваяЗапись.ЗначениеТекущее = "Ложь/Истина";
			НоваяЗапись.ЗначениеИзИ5 = "Истина";
			НаборЗаписей.Записать();
			
			ИзменитьКомментарийВРегистре(СтрокаТЧ.ПорядковыйНомерСтроки, СтрокаТЧ.Тэг, 
										"Документ помечен на удаление согласно " + ЭтотОбъект + ".");
			СообщениеОбОшибке = "Документ " + НовыйДокумент + " помечен на удаление.";
			ЗаписьЖурналаРегистрации("Информация", УровеньЖурналаРегистрации.Информация, ЭтотОбъект, ЭтотОбъект, 
									СообщениеОбОшибке);
			// Возврат Неопределено;
			
		ИначеЕсли СокрЛП(ФункцияДокумента) =  "46" ИЛИ СокрЛП(ФункцияДокумента) = "4" Тогда
			
			Если ЕстьПроведенныеПодчиненныеДокументы(НовыйДокумент.Ссылка)  Тогда
				СообщениеОбОшибке = "При проведении документа " + ЭтотОбъект + ", обнаружены проведенные подчиненные документы для "
									+ СокрЛП(НовыйДокумент) + ". Заказ не откорректирован!";
				ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке);
				ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
				Отказ = Истина;
				Возврат Неопределено;
			КонецЕсли;
			
			НовыйДокумент.Товары.Очистить();
			НовыйДокумент.гф_ТоварыВКоробах.Очистить();
			
			Если ФлагЗаписиДокумента Тогда
				
				НовыйДокумент.ПометкаУдаления = Ложь;
				НовыйДокумент.ОбменДанными.Загрузка = Истина;
				
				НовыйДокумент.гф_ДатаОбновленияИзИ5 = ТекущаяДатаСеанса(); // от _01_02_23_Галфинд_ДомнышеваКР
				НовыйДокумент.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
                НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
				НовыйДокумент.ОбменДанными.Загрузка = Ложь;
				
				СообщениеОбОшибке = "При проведении документа " + ЭтотОбъект + " Откорректирован документ " + СокрЛП(НовыйДокумент);
				ЗаписьЖурналаРегистрации("Информация", УровеньЖурналаРегистрации.Информация, ЭтотОбъект, ЭтотОбъект, 
				СообщениеОбОшибке);
			КонецЕсли; 
		Иначе
			// BSLLS:Typo-off
			СообщениеОбОшибке = "Произошли ошибки при проведении документа " + НовыйДокумент 
								+ ".|Неверное значение тэга Document_function.";
			// BSLLS:Typo-on
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
			Возврат Неопределено;
		КонецЕсли;
		
		// ЗаказПокупателя не найден - создаем новый...	
	Иначе
		
		НовыйДокумент = Документы.ЗаказКлиента.СоздатьДокумент();
		НовыйДокумент.Номер = НомерДокумента;
		НовыйДокумент.Дата = ДатаДокумента;
		НовыйДокумент.гф_ДатаОбновленияИзИ5 = ТекущаяДатаСеанса();
		
		НовыйДокумент.Организация = Организация;
		
		НовыйДокумент.гф_ВидЦены = 
			_омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначение("гф_ГлобальныеЗначенияОптоваяЗакупочнаяЦена");
		ЗаполнитьСкладДляЗаказаКлиента(НовыйДокумент);
		
		НовыйДокумент.гф_СтатусРаботыСЗаказомИ5 = Справочники.гф_СтатусРаботыСЗаказомИ5.ТребуетсяПодтверждение;
		НовыйДокумент.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
		
		ПроверимФункциюДокументаДляУдаления(НовыйДокумент, СтрокаТЧ);

	КонецЕсли;
	
	Возврат НовыйДокумент; 
	
КонецФункции

// #wortmann { 
// Находит соответствие организации по названию папки с файлами для загрузки 
// Галфинд_Домнышева 2022/11/28
// 
// Параметры:
//	ПолноеИмя - Строка - полное имя Файла или путь папки с файлами.
//
// Возвращаемое значение:
//	СправочникСсылка.Организации - Ссылка на Организацию если соответствие найдено,
//	Неопределено - если соответствие не найдено
Функция ОрганизацияПоПапке(ПолноеИмя)
	
	Если СтрНайти(ПолноеИмя, "WORTMANN") Тогда
		ИНН = "7705855199";
	ИначеЕсли СтрНайти(ПолноеИмя, "CAPRICE") Тогда
		ИНН = "7705856435";
	ИначеЕсли СтрНайти(ПолноеИмя, "VENDEL") Тогда
		ИНН = "7705993537";
	ИначеЕсли СтрНайти(ПолноеИмя, "SHOE") Тогда
		ИНН = "7705993544";
	ИначеЕсли СтрНайти(ПолноеИмя, "JANA") Тогда
		ИНН = "7705993551";
	Иначе                                               
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ИНН = &ИНН";
	
	Запрос.УстановитьПараметр("ИНН", ИНН);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Не РезультатЗапроса.Пустой() Тогда
	Выборка.Следующий(); 
    Возврат Выборка.Ссылка;
	КонецЕсли;

КонецФункции

// #wortmann { 
// Процедура помечает документ на удаление в случае если ТЭГ "Document_function" = 27
// Галфинд_Домнышева 2022/10/21
//
// Параметры:
//	НовыйДокумент - ДокументОбъект.ЗаказКлиента - Создаваемый документ
//	СтрокаТЧ - строка табличной части из РегистрСведений.гф_СтрокиДокументаДанныеЗагрузки
//
Процедура ПроверимФункциюДокументаДляУдаления(НовыйДокумент, СтрокаТЧ)
	
	Если СокрЛП(ФункцияДокумента) = "27" Тогда
		Попытка
			
			НовыйДокумент.ОбменДанными.Загрузка = Истина;
			НовыйДокумент.Комментарий = "Документ помечен на удаление согласно " + ЭтотОбъект + "."; 
			
			НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
			
			НовыйДокумент.ОбменДанными.Загрузка = Ложь;
			НовыйДокумент.УстановитьПометкуУдаления(Истина);
			
			ИзменитьКомментарийВРегистре(СтрокаТЧ.ПорядковыйНомерСтроки, СтрокаТЧ.Тэг, 
			"Документ помечен на удаление согласно " + ЭтотОбъект + ".");
		Исключение
			СообщениеОбОшибке = "Не удалось установить пометку удаления для документа " + СокрЛП(НовыйДокумент);
			ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке);
			ЗаписьЖурналаРегистрации("Информация", УровеньЖурналаРегистрации.Информация, ЭтотОбъект, ЭтотОбъект, 
			СообщениеОбОшибке);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// #wortmann { 
// Процедура изменяет реквизит гф_СтатусРаботыСЗаказомИ5
// Галфинд_Домнышева 2022/10/21
//
// Параметры:
//	НовыйДокумент - ДокументОбъект.ЗаказКлиента - Создаваемый документ
//
Процедура ИзменяемСтатусНайденногоДокумента(НовыйДокумент)
	
	Если НовыйДокумент.гф_СтатусРаботыСЗаказомИ5 = Справочники.гф_СтатусРаботыСЗаказомИ5.ТребуетсяПодтверждение 
		ИЛИ НЕ ЗначениеЗаполнено(НовыйДокумент.гф_СтатусРаботыСЗаказомИ5) Тогда
		НовыйДокумент.гф_СтатусРаботыСЗаказомИ5 = Справочники.гф_СтатусРаботыСЗаказомИ5.ТребуетсяПодтверждение;
	ИначеЕсли НовыйДокумент.гф_СтатусРаботыСЗаказомИ5 = Справочники.гф_СтатусРаботыСЗаказомИ5.ТребуетсяИзменение Тогда
		НовыйДокумент.гф_СтатусРаботыСЗаказомИ5 = Справочники.гф_СтатусРаботыСЗаказомИ5.Изменен;
	Иначе
		НовыйДокумент.гф_СтатусРаботыСЗаказомИ5 = Справочники.гф_СтатусРаботыСЗаказомИ5.ИзменениеИзИ5;
		ФлагЗаписиДокумента = Ложь;
		ПолучитьДанныеДокумента(НовыйДокумент.Ссылка);
	КонецЕсли;
	
КонецПроцедуры 

// #wortmann { 
// Процедура получает значение Склада и заполняет соответствующий реквизит
// Галфинд_Домнышева 2022/10/21
//
// Параметры:
//	НовыйДокумент - ДокументОбъект.ЗаказКлиента - Создаваемый документ
//
Процедура ЗаполнитьСкладДляЗаказаКлиента(НовыйДокумент)
	
	Склады = _омОбщегоНазначенияКлиентСервер.ПолучитьГлобальноеЗначениеМассив("гф_ГлобальныеЗначенияОсновнойСклад");
	
	Для каждого Склад Из Склады Цикл
		Если Склад.гф_Организация = НовыйДокумент.Организация Тогда
			НовыйДокумент.Склад = Склад;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры 

// #wortmann { 
// Функция определяет имя табличной части документа ЗаказКлиента
// Галфинд_Домнышева 2022/10/21
//
// Параметры:
//	СтрокаТЧ - строка табличной части из РегистрСведений.гф_СтрокиДокументаДанныеЗагрузки
//
// Возвращаемое значение:
//	ИмяТЧ - Строка 
Функция ОпределитьИмяТЧ(СтрокаТЧ)
	ИмяТЧ = Сред(СтрокаТЧ.ПолеЗагрузки.Объект, СтрНайти(СтрокаТЧ.ПолеЗагрузки.Объект, "(") + 1);
	Если СтрНайти(ИмяТЧ, ")") > 0 Тогда	
		ПозицияСкобки = СтрНайти(ИмяТЧ, ")"); 
		ИмяТЧ = Лев(ИмяТЧ, ПозицияСкобки - 1); 
	КонецЕсли;
	Возврат ИмяТЧ;
КонецФункции

// #wortmann { 
// Процедура заполняет реквизиты документа ЗаказКлиента 
// Галфинд_Домнышева 2022/10/21
//
// Параметры:
//	СтрокаТЧ - строка табличной части из РегистрСведений.гф_СтрокиДокументаДанныеЗагрузки
//	НовыйДокумент - ДокументОбъект.ЗаказКлиента - Создаваемый документ
//	НовыйЭлементТоварыВКоробах - Строка ТЧ ТоварыВКоробах документа ЗаказКлиента
//	ФлагЗаписиДокумента - Булево
//	ТаблицаРасхождений - ТаблицаЗначений - содержит колонки "Реквизит", "ЗначениеТекущее", "ЗначениеИзИ5".
//  Отказ - параметр системы 
Процедура ЗаполнитьРеквизитыДокумента(СтрокаТЧ, НовыйДокумент, НовыйЭлементТоварыВКоробах,
										ФлагЗаписиДокумента, ТаблицаРасхождений, Отказ)
	
	Если СтрНайти(СтрокаТЧ.ПолеЗагрузки.Объект, "(") > 0 Тогда
		
		ИмяТЧ = ОпределитьИмяТЧ(СтрокаТЧ);
		
		ИмяРеквизита = Лев(СтрокаТЧ.ПолеЗагрузки.Объект, СтрНайти(СтрокаТЧ.ПолеЗагрузки.Объект, "(") - 1);
		
		Если  ИмяТЧ = "гф_ТоварыВКоробах" И НовыйЭлементТоварыВКоробах <> Неопределено Тогда
			Объект = НовыйЭлементТоварыВКоробах[ИмяРеквизита];
			ТипОбъекта = Документы.ЗаказКлиента.ПустаяСсылка().Метаданные().ТабличныеЧасти[ИмяТЧ].Реквизиты[ИмяРеквизита].Тип;
			
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		
		ИмяТЧ = Неопределено;
		ИмяРеквизита = СтрокаТЧ.ПолеЗагрузки.Объект;
		Объект = НовыйДокумент[ИмяРеквизита];
		
		ТипОбъекта = ОпределимТипОбъекта(ИмяРеквизита, СтрокаТЧ);
		
	КонецЕсли;
	
	Если ИмяРеквизита = "Контрагент" Тогда   // Тэг - GLN_customer
		
		НайдемКонтрагента(СтрокаТЧ, НовыйДокумент); 
		
	ИначеЕсли ИмяРеквизита = "ВариантКомплектации" Тогда
		
		ОбработкаВариантаКомплектацииИРасхождений(НовыйДокумент, НовыйЭлементТоварыВКоробах,
		СтрокаТЧ, ТаблицаРасхождений, Отказ);
		
	ИначеЕсли ИмяРеквизита = "АдресДоставки" Тогда
		
		ЗаполняемПеревозчикаИАдрес(НовыйДокумент, СтрокаТЧ);
		
	ИначеЕсли Строка(ТипОбъекта) = "Строка" Тогда
		
		Объект = СтрокаТЧ.Значение; 
		
	ИначеЕсли Строка(ТипОбъекта) = "Число" Тогда
		
		Объект = Число(СтрокаТЧ.Значение);
		
	ИначеЕсли Строка(ТипОбъекта) = "Дата" Тогда 
		
		Объект = Дата(СтрокаТЧ.Значение);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект) И СтрНайти(СтрокаТЧ.ПолеЗагрузки.Объект, "(") = 0 Тогда
		НовыйДокумент[ИмяРеквизита] = Объект;
	КонецЕсли; 
		
КонецПроцедуры 

// #wortmann { 
// Процедура определяет тип объекта по данным из выгрузки РС гф_СтрокиДокументаДанныеЗагрузки 
// Галфинд_Домнышева 2022/10/21
//
// Параметры:
//	ИмяРеквизита - Строка - табличной части из РегистрСведений.гф_СтрокиДокументаДанныеЗагрузки
//	СтрокаТЧ - строка табличной части из РегистрСведений.гф_СтрокиДокументаДанныеЗагрузки
//
// Возвращаемое значение:
//	ТипОбъекта - возможные типы реквизитов для документа ЗаказКлиента
Функция ОпределимТипОбъекта(ИмяРеквизита, СтрокаТЧ)
	
	Если ИмяРеквизита = "Номер" Тогда
		ТипОбъекта = Документы.ЗаказКлиента.ПустаяСсылка().Метаданные().ТипНомера;
	ИначеЕсли ИмяРеквизита = "Дата" Тогда
		ТипОбъекта = Тип("Дата");
	Иначе	
		ТипОбъекта = Документы.ЗаказКлиента.ПустаяСсылка().Метаданные().Реквизиты[СтрокаТЧ.ПолеЗагрузки.Объект].Тип;
	КонецЕсли;
	
	Возврат ТипОбъекта;
КонецФункции

// #wortmann { 
// Процедура заполняет реквизиты "ПеревозчикПартнер" и "СпособДоставки" 
// Галфинд_Домнышева 2022/10/21
//
// Параметры:
//	НовыйДокумент - ДокументОбъект.ЗаказКлиента - Создаваемый документ
//	СтрокаТЧ - строка табличной части из РегистрСведений.гф_СтрокиДокументаДанныеЗагрузки
Процедура ЗаполняемПеревозчикаИАдрес(НовыйДокумент, СтрокаТЧ)
	
	СпособДоставки = 
	_омОбщегоНазначенияКлиентСервер.ПолучитьГлобальноеЗначение("гф_СпособДоставкиЗагрузкаXML");
	
	Если  ЗначениеЗаполнено(СпособДоставки) Тогда
		НовыйДокумент.СпособДоставки = СпособДоставки;
	Иначе
		НовыйДокумент.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТЧ.Значение) Тогда
		НайденныйАдресДоставки = НайтиЗначениеПоРеквизитуСправочника ("гф_АдресаДоставки", "GLNНомер", 
		СтрокаТЧ.Значение);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НайденныйАдресДоставки) Тогда
		НовыйДокумент.АдресДоставки = НайденныйАдресДоставки;
		НовыйДокумент.ПеревозчикПартнер = НайденныйАдресДоставки.ТК.Партнер;
	Иначе
		НайденныйПеревозчик = _омОбщегоНазначенияКлиентСервер.ПолучитьГлобальноеЗначение("гф_ПеревозчикЗагрузкаXML");
		
		НовыйДокумент.ПеревозчикПартнер = НайденныйПеревозчик;
		
		СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + " в строке №"
		+ СтрокаТЧ.ПорядковыйНомерСтроки 
		+ ". Описание ошибки: Не найден соответствующий адрес доставки ""GLN delivery party"" "
		+ СокрЛП(СтрокаТЧ.Значение);
		ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
	КонецЕсли;
	
КонецПроцедуры

// #wortmann { 
// Процедура заполняет ТЧ ТоварыВКоробах документа ЗаказКлиента и ищет расхождение по суммам
// из РС ЦеныНоменклатуры25 и из файла XML
// Галфинд_Домнышева 2022/10/21
//
// Параметры:
//	НовыйДокумент - ДокументОбъект.ЗаказКлиента - Создаваемый документ
//	НовыйЭлементТоварыВКоробах - Строка ТЧ ТоварыВКоробах документа ЗаказКлиента
//	СтрокаТЧ - строка табличной части из РегистрСведений.гф_СтрокиДокументаДанныеЗагрузки
//	ТаблицаРасхождений - ТаблицаЗначений - содержит колонки "Реквизит", "ЗначениеТекущее", "ЗначениеИзИ5".
//  Отказ - параметр системы 
Процедура ОбработкаВариантаКомплектацииИРасхождений(НовыйДокумент, НовыйЭлементТоварыВКоробах,
	СтрокаТЧ, ТаблицаРасхождений, Отказ)
	
	НайденныйВариантКомплектации =  НайтиЗначениеПоРеквизитуСправочника ("ВариантыКомплектацииНоменклатуры", 
									"гф_Штрихкод", СтрокаТЧ.Значение);

	Если ЗначениеЗаполнено(НайденныйВариантКомплектации) Тогда
		
		НовыйЭлементТоварыВКоробах.ВариантКомплектации = НайденныйВариантКомплектации;
		НовыйЭлементТоварыВКоробах.Артикул = НайденныйВариантКомплектации.Владелец.Артикул;
		НовыйЭлементТоварыВКоробах.Количество = НайтиСтрокуДереваПоТэгу("Ordered_quantity", Отказ, СтрокаТЧ);
		ДатаДоставки = НайтиСтрокуДереваПоТэгу("Delivery_date", Отказ, СтрокаТЧ);
		НовыйЭлементТоварыВКоробах.ВидЦены = 
			_омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначение("гф_ГлобальныеЗначенияОптоваяЗакупочнаяЦена");	
		
		ЦенаКоробаИз5 = НайтиСтрокуДереваПоТэгу("Effective_purchase_price", Отказ, СтрокаТЧ);	
			
		ЗагрузитьТЧТовары(НайденныйВариантКомплектации, НовыйЭлементТоварыВКоробах, 
							НовыйДокумент, ДатаДоставки, ЦенаКоробаИз5);
		
		АбсолютноеРасхождение = 
							_омОбщегоНазначенияКлиентСервер.ПолучитьГлобальноеЗначение("гф_ГлобальныеЗначенияРазрешенноеРасхождениеИ5");
		// BSLLS:Typo-off
		Толеранс = _омОбщегоНазначенияКлиентСервер.ПолучитьГлобальноеЗначение("гф_ГлобальныеЗначенияТолеранс");
		// BSLLS:Typo-on
        		
		СтоПроцентов = 100;	
		НовыйЭлементТоварыВКоробах.ЦенаКоробаСоСкидкой = 
								НовыйЭлементТоварыВКоробах.ЦенаКороба * (1 - НовыйЭлементТоварыВКоробах.Скидка / СтоПроцентов);
		НовыйЭлементТоварыВКоробах.Сумма = 
								НовыйЭлементТоварыВКоробах.Количество * НовыйЭлементТоварыВКоробах.ЦенаКоробаСоСкидкой;
		НовыйЭлементТоварыВКоробах.СтавкаНДС = СтавкаНДС;
		НовыйЭлементТоварыВКоробах.СуммаНДС =  НовыйЭлементТоварыВКоробах.Сумма * (СтавкаНДС.Ставка / СтоПроцентов);
		
		НовыйЭлементТоварыВКоробах.СуммаСНДС = НовыйЭлементТоварыВКоробах.СуммаНДС + НовыйЭлементТоварыВКоробах.Сумма;
		НовыйЭлементТоварыВКоробах.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению;
		
		Расхождение = ЦенаКоробаИз5 - НовыйЭлементТоварыВКоробах.ЦенаКороба;
		Расхождение = ?(Расхождение >= 0, Расхождение, -Расхождение);
		
		Если Расхождение > АбсолютноеРасхождение Тогда
			НоваяЗапись = ТаблицаРасхождений.Добавить();
			
			НоваяЗапись.Реквизит = "Цена" + НайденныйВариантКомплектации + "(Абсолютное расхождение)"; 
			НоваяЗапись.ЗначениеТекущее = НовыйЭлементТоварыВКоробах.ЦенаКороба;
			НоваяЗапись.ЗначениеИзИ5 = ЦенаКоробаИз5;
			
		КонецЕсли;
		Сто = 100;
		Если НовыйЭлементТоварыВКоробах.ЦенаКороба > 0 Тогда
			// BSLLS:Typo-off
			Если (Расхождение / НовыйЭлементТоварыВКоробах.ЦенаКороба) * Сто > Толеранс Тогда
			// BSLLS:Typo-on	
				НоваяЗапись = ТаблицаРасхождений.Добавить();
				
				НоваяЗапись.Реквизит = "Цена" + НайденныйВариантКомплектации + "(Относительное расхождение)"; 
				НоваяЗапись.ЗначениеТекущее = НовыйЭлементТоварыВКоробах.ЦенаКороба;
				НоваяЗапись.ЗначениеИзИ5 = ЦенаКоробаИз5;
				
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		НовыйДокумент.гф_ТоварыВКоробах.Удалить(НовыйЭлементТоварыВКоробах);
		НовыйЭлементТоварыВКоробах = Неопределено;
		// в комментарий запись
		НовыйДокумент.Комментарий = НовыйДокумент.Комментарий 
								+ "Отсутствует в базе вариант комплектации со ШтрихКодом " + СтрокаТЧ.Значение + Символы.ПС;
		НовыйДокумент.ДополнительныеСвойства.Вставить("НеПроводить", Истина);
		
		СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + " в строке №" + СтрокаТЧ.ПорядковыйНомерСтроки 
							+ ". Описание ошибки: Не найден соответствующий вариант комплектации с ШК: " + СокрЛП(СтрокаТЧ.Значение);
		ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
	КонецЕсли;
	
КонецПроцедуры

// #wortmann { 
// Процедура ищет и записывает в документ значение Контрагента по  Тэг - GLN_customer.
// Если значение не найдено ФлагЗаписиДокумента = Ложь 
// Галфинд_Домнышева 2022/10/21
//
// Параметры:
//	СтрокаТЧ - строка табличной части из РегистрСведений.гф_СтрокиДокументаДанныеЗагрузки 
//	НовыйДокумент - ДокументОбъект.ЗаказКлиента - Создаваемый документ
Процедура НайдемКонтрагента(СтрокаТЧ, НовыйДокумент) 
	
	НайденныйКонтрагент = НайтиЗначениеПоРеквизитуСправочника ("Контрагенты", "гф_GLN_номер", СтрокаТЧ.Значение);
	
	Если ЗначениеЗаполнено(НайденныйКонтрагент) Тогда
		НовыйДокумент.Контрагент = НайденныйКонтрагент;
		НовыйДокумент.Партнер =  
						НайтиЗначениеПоРеквизитуСправочника("Партнеры", "Наименование", НайденныйКонтрагент.Наименование);
		ДоговорДляКонтрагента(НовыйДокумент);
		
	Иначе
		СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + " в строке №"
							+ СтрокаТЧ.ПорядковыйНомерСтроки + ". Описание ошибки: Не найден соответствующий контрагент с GLN номером " 
							+ СокрЛП(СтрокаТЧ.Значение) + ".  Документ не может быть проведен."; 								
		ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке);
		НовыйДокумент.Комментарий = НовыйДокумент.Комментарий 
								+ "Отсутствует в базе контрагент с GLN " + СтрокаТЧ.Значение + Символы.ПС;
		НовыйДокумент.ДополнительныеСвойства.Вставить("НеПроводить", Истина);
		
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
	КонецЕсли;
КонецПроцедуры

// #wortmann { 
// Процедура меняет реквизит гф_СтатусРаботыСЗаказомИ5 и производит Запись документа
// Галфинд_Домнышева 2022/10/21
//
// Параметры:
//	НовыйДокумент - ДокументОбъект.ЗаказКлиента - Создаваемый документ
//  Отказ - параметр системы 
Процедура СменаСтатусовДокумента(НовыйДокумент, Отказ)
	
	Попытка	
		НовыйДокумент.ЦенаВключаетНДС = Истина;	
		
		Если НовыйДокумент.гф_СтатусРаботыСЗаказомИ5 = Справочники.гф_СтатусРаботыСЗаказомИ5.ТребуетсяПодтверждение 
			ИЛИ НЕ ЗначениеЗаполнено(НовыйДокумент.гф_СтатусРаботыСЗаказомИ5) Тогда
			НовыйДокумент.гф_СтатусРаботыСЗаказомИ5 = Справочники.гф_СтатусРаботыСЗаказомИ5.ТребуетсяПодтверждение;
		ИначеЕсли НовыйДокумент.гф_СтатусРаботыСЗаказомИ5 = Справочники.гф_СтатусРаботыСЗаказомИ5.ТребуетсяИзменение Тогда
			НовыйДокумент.гф_СтатусРаботыСЗаказомИ5 = Справочники.гф_СтатусРаботыСЗаказомИ5.Изменен;
		Иначе
			НовыйДокумент.гф_СтатусРаботыСЗаказомИ5 = Справочники.гф_СтатусРаботыСЗаказомИ5.ИзменениеИзИ5;
			ФлагЗаписиДокумента = Ложь;
		КонецЕсли;
		
		Если ФлагЗаписиДокумента Тогда
			
			НовыйДокумент.ОбменДанными.Загрузка = Истина; 
			
			ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(НовыйДокумент, Отказ);
			
			РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(НовыйДокумент, Отказ, Истина);
			
			ДоставкаТоваров.ОтразитьСостояниеДоставки(НовыйДокумент.Ссылка, Отказ, Истина);
			
			РегистрыСведений.СтатусыСборкиИДоставки.ЗаписатьСтатусИзРаспоряжения(НовыйДокумент.Ссылка, Отказ, Истина);
			Если НовыйДокумент.ПометкаУдаления Тогда
				НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
			Иначе
				НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			КонецЕсли;
			НовыйДокумент.ОбменДанными.Загрузка = Ложь;
			
		КонецЕсли;
		
	Исключение
		СообщениеОбОшибке = "Произошли ошибки при проведении документа " + НовыйДокумент + ". Описание ошибки: " 
							+ ОписаниеОшибки();
		ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
	КонецПопытки;
КонецПроцедуры

// #wortmann { 
// Процедура заполняет реквизит СтавкаНДС в ТЧ Товары
// Галфинд_Домнышева 2022/10/21
//
// Параметры:
//	НовыйДокумент - ДокументОбъект.ЗаказКлиента - Создаваемый документ
//  СтавкаНДС - СправочникСсылка.СтавкиНДС 
Процедура ЗаполнитьСтавкиНДС(НовыйДокумент, СтавкаНДС)
	
	Для Каждого СтрокаТоваров Из НовыйДокумент.Товары Цикл
		
		Если ЗначениеЗаполнено(СтрокаТоваров.Номенклатура.СтавкаНДС) Тогда
			СтрокаТоваров.СтавкаНДС = СтрокаТоваров.Номенклатура.СтавкаНДС;
		Иначе
			СтрокаТоваров.СтавкаНДС = СтавкаНДС;
		КонецЕсли;
		
		УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(СтрокаТоваров.Сумма, СтавкаНДС);
		
	КонецЦикла;
	
КонецПроцедуры 
	
// #wortmann {
// Функция формирует сообщение об ошибке в зависимости от заполненных реквизитов
// Галфинд_Домнышева 2022/10/20
//
// Параметры:
//	НомерДокумента - Строка - номер документа ЗаказКлиента.
//  ДатаДокумента - Дата - дата документа ЗаказКлиента.
//
// Возвращаемое значение:
//  СообщениеОбОшибке - Строка
Функция СформироватьСообщение (НомерДокумента, ДатаДокумента) 
	// BSLLS:Typo-off
	Если (НЕ ЗначениеЗаполнено(НомерДокумента)) И (НЕ ЗначениеЗаполнено(ДатаДокумента)) Тогда
		СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект  
							+ ". Описание ошибки: Не заполнены тэги ""Document_number"" и ""Document_date"".";
	ИначеЕсли	НЕ ЗначениеЗаполнено(НомерДокумента) Тогда
		СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект  
							+ ". Описание ошибки: Не заполнены тэг ""Document_number"".";	
	ИначеЕсли	НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда	
		СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект  
							+ ". Описание ошибки: Не заполнены тэг  ""Document_date"".";	
	Иначе 				// Невероятный вариант, но все же ...	)))
		СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект ;		
	КонецЕсли;
	Возврат СообщениеОбОшибке;
	// BSLLS:Typo-on
КонецФункции

// #wortmann {
// Функция получает подчиненные документы
// Галфинд_Домнышева 2022/09/12
//
// Параметры:
//	ДокументСсылка - ДокументСсылка.ЗаказКлиента - ссылка на найденный Заказ Клиента.
//
// Возвращаемое значение:
//  Массив - массив документов, если есть подчиненные документы
//  ТаблицаЗначений - пустая ТЗ, если текстзапроса пустой
Функция ПолучитьМассивПодчиненныхДокументов(ДокументСсылка)
	
	ТекущийДокумент = ДокументСсылка;
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	
	Для Каждого ЭлементСостава Из Метаданные.КритерииОтбора["гф_СвязанныеДокументы"].Состав Цикл
		
		Если Не ЭлементСостава.Тип.СодержитТип(ТипЗнч(ТекущийДокумент)) Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьКДанным = ЭлементСостава.ПолноеИмя();
		СтруктураПутьКДанным = РазобратьПутьКОбъектуМетаданных(ПутьКДанным, ЭлементСостава.Родитель());
		
		ИмяОбъекта = СтруктураПутьКДанным.ТипОбъекта + "." + СтруктураПутьКДанным.ВидОбъекта;
		Псевдоним = СтруктураПутьКДанным.ТипОбъекта + "_" + СтруктураПутьКДанным.ВидОбъекта 
							+ "_" + СтруктураПутьКДанным.ИмяТаблЧасти;
		
		ТекущаяСтрокаГДЕ = "ГДЕ " + Псевдоним + "." + СтруктураПутьКДанным.ИмяРеквизита + " = &ЗначениеКритерияОтбора";
			
		ИмяТЧ = Лев(СтруктураПутьКДанным.ИмяРеквизита, СтрНайти(СтруктураПутьКДанным.ИмяРеквизита, ".") - 1);
		ИмяРеквизита = Лев(СтруктураПутьКДанным.ИмяРеквизита, СтрНайти(СтруктураПутьКДанным.ИмяРеквизита, ".") - 1);
		ТекстЗапроса = ТекстЗапроса + (?(ТекстЗапроса = "", "ВЫБРАТЬ", "ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ") + "
		|" + Псевдоним + ".Ссылка ИЗ " + ИмяОбъекта + "." + СтруктураПутьКДанным.ИмяТаблЧасти + " КАК " + Псевдоним + "
		|" + СтрЗаменить(ТекущаяСтрокаГДЕ, "..", ".") + "
		|");
		
	КонецЦикла;
	
	Если ТекстЗапроса = "" Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ЗначениеКритерияОтбора", ТекущийДокумент);
	
	мМассивПочиненных = Запрос.Выполнить().Выгрузить();
    	
	Возврат мМассивПочиненных;
КонецФункции// } #wortmann

// #wortmann {
// Функция разбирает строку вида
// ТипОбъектаМетаданных.ИмяДокумента.ТабличнаяЧасть.ИмяТабличнойЧасти.Реквизит.ИмяРеквизита.
// ТипОбъектаМетаданных должен быть Справочник или Документ.
// Галфинд_Домнышева 2022/09/12
//
// Параметры:
//  ПутьКДанным - строка.
//  МетаданныеОбъекта - Объект метаданных
//
// Возвращаемое значение:
//  Структура - путь к объекту метаданных
Функция РазобратьПутьКОбъектуМетаданных(ПутьКДанным, МетаданныеОбъекта = Неопределено)
	
	Структура = Новый Структура;
	
	СоответствиеИмен = Новый Массив();
	СоответствиеИмен.Добавить("ТипОбъекта");
	СоответствиеИмен.Добавить("ВидОбъекта");
	СоответствиеИмен.Добавить("ПутьКДанным");
	СоответствиеИмен.Добавить("ИмяТаблЧасти");
	СоответствиеИмен.Добавить("ИмяРеквизита");
	
	Для индекс = 1 По 3 Цикл
		
		Точка = СтрНайти(ПутьКДанным, ".");
		ТекущееЗначение = Лев(ПутьКДанным, Точка - 1);
		Структура.Вставить(СоответствиеИмен[индекс - 1], ТекущееЗначение);
		ПутьКДанным = Сред(ПутьКДанным, Точка + 1);
		
	КонецЦикла;
	
	ПутьКДанным = СтрЗаменить(ПутьКДанным, "Реквизит.", "");
	
	Если Структура.ПутьКДанным = "ТабличнаяЧасть" Тогда
		
		Для индекс = 4 По 5  Цикл 
			
			Точка = СтрНайти(ПутьКДанным, ".");
			Если Точка = 0 Тогда
				ТекущееЗначение = ПутьКДанным;
			Иначе
				ТекущееЗначение = Лев(ПутьКДанным, Точка - 1);
			КонецЕсли;
			
			Структура.Вставить(СоответствиеИмен[индекс - 1], ТекущееЗначение);
			ПутьКДанным = Сред(ПутьКДанным,  Точка + 1);
			
		КонецЦикла;
		
	Иначе
		
		Структура.Вставить(СоответствиеИмен[3], "");
		Структура.Вставить(СоответствиеИмен[4], ПутьКДанным);
		
	КонецЕсли;
	
	Если МетаданныеОбъекта <> Неопределено Тогда
		Структура.Вставить("Метаданные", МетаданныеОбъекта);
	Иначе
		Если Структура.ТипОбъекта = "Документ" Тогда
			Структура.Вставить("Метаданные", Метаданные.Документы[Структура.ВидОбъекта]);
		Иначе
			Структура.Вставить("Метаданные", Метаданные.Справочники[Структура.ВидОбъекта]);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции// } #wortmann

// #wortmann { 
// Нахождение имени заказа
// Галфинд_Домнышева 2022/09/12
//
// Параметры:
//	ДокументСсылка - ДокументСсылка.ЗаказКлиента - ссылка на найденный Заказ Клиента
//
// Возвращаемое значение:
//	Булево - Истина если найдены подчиненные документы, Ложь - нет
Функция ЕстьПроведенныеПодчиненныеДокументы(ДокументСсылка)
	
	Нашли = Ложь;
	мМассивПодчиненных = ПолучитьМассивПодчиненныхДокументов(ДокументСсылка);
	Для каждого ЭлементМассива Из мМассивПодчиненных Цикл
		Если ЗначениеЗаполнено(ЭлементМассива.Ссылка) И ЭлементМассива.Ссылка.Проведен Тогда
			Нашли = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Нашли;

КонецФункции// } #wortmann

// #wortmann { 
// Нахождение имени заказа
// Галфинд_Домнышева 2022/09/12
//
// Параметры:
//  Тэг - Строка - имя ТЭГа из файла
//  СтрокаТЧ - Тип.СтрокаТЧ - строка табличной части для которой ищется предок с заданным именем
//
// Возвращаемое значение:
//  - Строка - значение ТЭГа по порядковому номеру строки родителя для текущей строки
Функция НайтиИмяЗаказа(Тэг, СтрокаТЧ = Неопределено)
	СтруктураОтбора = Новый Структура;
	// BSLLS:Typo-off
	СтруктураОтбора.Вставить("Тэг", Тэг);
	// BSLLS:Typo-on
	Если СтрокаТЧ <> Неопределено Тогда
		СтруктураОтбора.Вставить("НомерСтрокиРодителя", СтрокаТЧ.ПорядковыйНомерСтроки);
	КонецЕсли;
	НайденноеЗначение = ЗагруженныеСтроки.НайтиСтроки(СтруктураОтбора);
	Если НайденноеЗначение.Количество() > 0 Тогда
		Если ЗначениеЗаполнено(НайденноеЗначение[0].Значение) Тогда
			Возврат НайденноеЗначение[0].Значение;
		КонецЕсли;
	КонецЕсли;
КонецФункции// } #wortmann

// #wortmann { 
// Получение набора записей РС гф_СтрокиДокументаДанныеЗагрузки 
// Галфинд_Домнышева 2022/09/12
Процедура ПолучитьНаборЗаписейРегистраСтрок()

	НаборЗаписейТэгов = РегистрыСведений.гф_СтрокиДокументаДанныеЗагрузки.СоздатьНаборЗаписей();
	НаборЗаписейТэгов.Отбор.Документ.Значение = ЭтотОбъект.Ссылка;
	НаборЗаписейТэгов.Отбор.Документ.Использование = Истина;
	НаборЗаписейТэгов.Прочитать();

	ЗагруженныеСтроки = НаборЗаписейТэгов.Выгрузить();
			
КонецПроцедуры// } #wortmann

// #wortmann { 
// Проведение документов с интерфейсом Pricat, создание номенклатуры 
// Галфинд_Домнышева 2022/09/12
//
// Параметры:
//	ТабличнаяЧасть - ТаблицаЗначений - выгрузка РС гф_СтрокиДокументаДанныеЗагрузки по данному Объекту.
//	Отказ - параметр системы 
//	ВыводитьПрогрессор - Булево - выводит гф_ФормаПрогрессора при значении Истина
// BSLLS:LatinAndCyrillicSymbolInWord-off
Процедура ПроведениеИнтерфейсаPricat(ТабличнаяЧасть, Отказ, ВыводитьПрогрессор = Ложь)
// BSLLS:LatinAndCyrillicSymbolInWord-on		
	НовыйЭлемент 			= Неопределено;
	флЗаписиНоменклатуры	= Истина;
	НомерСтрокиРодителя 	= 1;
	
	ЗапросПоНаименованию = Новый Запрос(
	"ВЫБРАТЬ
	|	ArticlrDescriptions.NameRU,
	|	ArticlrDescriptions.Product_group КАК Product_group,
	|	ArticlrDescriptions.GLN_Supplier КАК GLN_Supplier,
	|	ArticlrDescriptions.ВидНоменклатуры,
	// #wortmann { 
	// Вытаскиваем значение Пола Номенклатуры
	// Галфинд_Домнышева 2022/10/10
	|	ArticlrDescriptions.ПолНоменклатуры КАК ПолНоменклатуры,
	// } #wortmann
	|	ArticlrDescriptions.Родитель,
	|	ArticlrDescriptions.ЕдиницаИзмеренияПоКлассификатору,
	|	ArticlrDescriptions.СтавкаНДС
	|ИЗ
	|	РегистрСведений.гф_ArticlrDescriptions КАК ArticlrDescriptions
	|
	|УПОРЯДОЧИТЬ ПО
	|	Product_group,
	|	GLN_Supplier
	|АВТОУПОРЯДОЧИВАНИЕ");							 
	// BSLLS:LatinAndCyrillicSymbolInWord-off
	ТаблицаРегистраСоответствияСвойств = ЗапросПоНаименованию.Выполнить().Выгрузить();
	// BSLLS:LatinAndCyrillicSymbolInWord-on
		
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Попытка
		ОбработкаСтрокДокументаПоСозданиюНоменклатуры(ТабличнаяЧасть, ТаблицаРегистраСоответствияСвойств, Отказ);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;

	Сообщение = Формат(ТекущаяДатаСеанса(), "ДЛФ=T") + " - окончание создания номенклатуры";
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
	
КонецПроцедуры// } #wortmann

// #wortmann { 
// Обход строк ТЧ РегистрСведений.гф_СтрокиДокументаДанныеЗагрузки для создания номенклатуры 
// Галфинд_Домнышева 2022/10/21
//
// Параметры:
//	ТабличнаяЧасть - ТаблицаЗначений - выгрузка РС гф_СтрокиДокументаДанныеЗагрузки по данному Объекту.
//	ТаблицаРегистраСоответствияСвойств - ТаблицаЗначений - выгрузка из РегистрСведений.гф_ArticlrDescriptions
//	Отказ - параметр системы 
//	ФормаПрогрессора - гф_ФормаПрогрессора, форма документа гф_ДанныеЗагрузки
Процедура ОбработкаСтрокДокументаПоСозданиюНоменклатуры(ТабличнаяЧасть, ТаблицаРегистраСоответствияСвойств,
														Отказ, ФормаПрогрессора = Неопределено)
	
	флЗаписиНоменклатуры = Истина;													
	НомерПредыдущегоРодителя = "0";
    ТЭГАртикулПрошлый = "";
	
	Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл 
				
		Если ЗначениеЗаполнено(СтрокаТЧ.ПолеЗагрузки) И СтрокаТЧ.НомерСтрокиРодителя <> НомерПредыдущегоРодителя 
			И СтрокаТЧ.ПолеЗагрузки.ТипОбъекта = "Номенклатура" Тогда
				
				НайденноеЗначение = ПоискАртикулаВЗагруженныхСтроках(СтрокаТЧ);
				НайденныйНомерЦвета = ПоискЦветаВЗагруженныхСтроках(СтрокаТЧ);
				
				Если НайденноеЗначение.Количество() > 0 Тогда
					Артикул = НайденноеЗначение[0].Значение + "-" + НайденныйНомерЦвета;
					
					НоваяНоменклатура = ПолучитьНоменклатуруПоАртикулу(Артикул);
					
					НовыйЭлемент = ПолучитьНовуюНоменклатуруСАртикулом(НоваяНоменклатура, Артикул, СтрокаТЧ, Отказ); 
					
					ТЭГШтрихКодаТек = НайтиСтрокуДереваПоТэгу("EAN", Отказ, СтрокаТЧ);
					ТЭГАртикулТек = НайтиСтрокуДереваПоТэгу("Suppliers_article_number", Отказ, СтрокаТЧ);
					
					Если ТЭГАртикулТек = ТЭГАртикулПрошлый Тогда
						СоздатьШтрихкод(СтрокаТч, НовыйЭлемент, ТЭГШтрихкодаТек, НовыйЭлемент.ЕдиницаИзмерения);
						
						Продолжить;
					КонецЕсли;
					
					ТЭГАртикулПрошлый = ТЭГАртикулТек; 
					
					НомерПредыдущегоРодителя = СтрокаТЧ.НомерСтрокиРодителя;

				Иначе
					СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + " в строке №" + СтрокаТЧ.НомерСтрокиРодителя
										+ ". Описание ошибки: " + ОписаниеОшибки();
					ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке);
					ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
					
					НовыйЭлемент = Справочники.Номенклатура.СоздатьЭлемент();
					ВременноеНаименование = Строка("Обувь без Артикула!" + СтрокаТЧ.НомерСтрокиРодителя);
					НовыйЭлемент.ВидНоменклатуры = 
									НайтиЗначениеПоРеквизитуСправочника("ВидыНоменклатуры", "Наименование", "Обувь импортная");
					НовыйЭлемент.ЕдиницаИзмерения =	 НайтиЗначениеПоРеквизитуСправочника("УпаковкиЕдиницыИзмерения",
													"Наименование", "пар");
					НовыйЭлемент.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
					НовыйЭлемент.ВестиУчетПоГТД = Истина;
					НовыйЭлемент.ВестиУчетСертификатовНоменклатуры = Истина;
					НовыйЭлемент.ИспользованиеХарактеристик = 
															Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры;
					НовыйЭлемент.Качество = Перечисления.ГрадацииКачества.Новый;
					НовыйЭлемент.СтавкаНДС = НайтиЗначениеПоРеквизитуСправочника ("СтавкиНДС", "Наименование", "20%"); 
					НовыйЭлемент.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
					НовыйЭлемент.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция;
					НовыйЭлемент.Наименование = ВременноеНаименование;
					// #wortmann { 
					// Заполняем сезон
					// Галфинд_Домнышева 2022/10/10
					НовыйЭлемент.КоллекцияНоменклатуры = УстановитьСезон(СтрокаТЧ, Отказ);
					// } #wortmann
					
					НовыйЭлемент.Записать();
					
					НомерПредыдущегоРодителя = СтрокаТЧ.НомерСтрокиРодителя;
				КонецЕсли;
				
				ОпределимПометкуУдаленияДляДокумента(СтрокаТЧ, НовыйЭлемент, Отказ);
				
				ДополнитьРеквизитыЭлементаНоменклатуры(СтрокаТЧ, Отказ, НовыйЭлемент, ТаблицаРегистраСоответствияСвойств);

		КонецЕсли;	
		
		ИтоговаяЗаписьЭлемента(СтрокаТЧ, НовыйЭлемент, ТабличнаяЧасть.Количество(), Отказ);				
	КонецЦикла; 
	
КонецПроцедуры

// #wortmann { 
// Процедура создает новую Номенклатуру иили присваивает значение НоваяНоменклатура  
// Галфинд_Домнышева 2022/10/21
//
// Параметры:
//	НоваяНоменклатура - СправочникОбъект.Номенклатура - если она найдено, Неопределено в ином случае.
//	Артикул - Строка - артикул номенклатуры из файла XML
//	СтрокаТЧ - строка табличной части из РегистрСведений.гф_СтрокиДокументаДанныеЗагрузки 
//	Отказ - параметр системы
//
// Возвращаемое значение:
//  НовыйЭлемент - СправочникОбъект.Номенклатура
Функция ПолучитьНовуюНоменклатуруСАртикулом(НоваяНоменклатура, Артикул, СтрокаТЧ, Отказ) 
	
	Если НоваяНоменклатура = Неопределено Тогда
		ВременноеНаименование = Строка("Обувь" + Артикул);
		НовыйЭлемент = Справочники.Номенклатура.СоздатьЭлемент();
		НовыйЭлемент.Артикул = Артикул;
		НовыйЭлемент.ВидНоменклатуры = НайтиЗначениеПоРеквизитуСправочника("ВидыНоменклатуры", "Наименование",
		"Обувь в парах импортная");
		НовыйЭлемент.ЕдиницаИзмерения =	НайтиЗначениеПоРеквизитуСправочника("УпаковкиЕдиницыИзмерения",
		"Наименование", "пар");
		
		НовыйЭлемент.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
		НовыйЭлемент.ВестиУчетПоГТД = Истина;
		НовыйЭлемент.ВестиУчетСертификатовНоменклатуры = Истина;
		НовыйЭлемент.ИспользованиеХарактеристик = 
		Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры;
		НовыйЭлемент.Качество = Перечисления.ГрадацииКачества.Новый;
		НовыйЭлемент.СтавкаНДС = НайтиЗначениеПоРеквизитуСправочника ("СтавкиНДС", "Наименование", "20%");
		НовыйЭлемент.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
		НовыйЭлемент.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция;
		НовыйЭлемент.Наименование = ВременноеНаименование;
		// #wortmann { 
		// Заполняем сезон
		// Галфинд_Домнышева 2022/10/10
		НовыйЭлемент.КоллекцияНоменклатуры = УстановитьСезон(СтрокаТЧ, Отказ);
		// } #wortmann
		НовыйЭлемент.Записать();
		
	Иначе
		НовыйЭлемент = НоваяНоменклатура;
		// иногда не правильно стоит в уже загруженной номенклатуре сезон
		НовыйЭлемент.ИспользованиеХарактеристик = 
		Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры;
		НовыйЭлемент.ВестиУчетСертификатовНоменклатуры = Истина;
        //
		Если Не ЗначениеЗаполнено(НовыйЭлемент.КоллекцияНоменклатуры) Тогда
			НовыйЭлемент.КоллекцияНоменклатуры = УстановитьСезон(СтрокаТЧ, Отказ);
        КонецЕсли;
	КонецЕсли;
	
	Возврат НовыйЭлемент;
КонецФункции 

// #wortmann { 
// Процедура записывает ранее созданную или полученную Номенклатуру  
// Галфинд_Домнышева 2022/10/21
//
// Параметры:
//	СтрокаТЧ - строка табличной части из РегистрСведений.гф_СтрокиДокументаДанныеЗагрузки
//	НовыйЭлемент - СправочникОбъект.Номенклатура - если она найдено, Неопределено в ином случае.
//	КоличествоСтрок - Число - кол-во строк в выгруженной ТЗ из РС гф_СтрокиДокументаДанныеЗагрузки
//	Отказ - параметр системы
Процедура ИтоговаяЗаписьЭлемента(СтрокаТЧ, НовыйЭлемент, КоличествоСтрок, Отказ)
	
	Если НовыйЭлемент <> Неопределено Тогда
		
		GLN_manufacturer	= НайтиСтрокуДереваПоТэгу("GLN_manufacturer", Отказ);
		ДописатьСвойствоGLN_manufacturer(НовыйЭлемент, GLN_manufacturer, СтрокаТЧ);
		
		// Перед записью предварительно проверим содержимое следующего по порядку тэга (следующей строки)
		// и убедимся что это тэг с новой "Message_Position"  или последняя строка
		МенеджерЗаписейСтрок		= РегистрыСведений.гф_СтрокиДокументаДанныеЗагрузки.СоздатьМенеджерЗаписи();
		МенеджерЗаписейСтрок.Документ 				= СтрокаТЧ.Документ;
		// BSLLS:Typo-off
		МенеджерЗаписейСтрок.Тэг 					= "Message_Position";
		// BSLLS:Typo-on
		МенеджерЗаписейСтрок.ПорядковыйНомерСтроки 	= СтрокаТЧ.НомерСтрокиРодителя; 
		МенеджерЗаписейСтрок.Прочитать();
		Если МенеджерЗаписейСтрок.Выбран() ИЛИ СтрокаТЧ.ПорядковыйНомерСтроки = КоличествоСтрок Тогда
			
			Попытка
				
				НовыйЭлемент.Записать();
				НовыйЭлемент 			= Неопределено;
				
			Исключение
				НовыйЭлемент 			= Неопределено;
				Отказ = Истина;
				СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + " в строке №" + СтрокаТЧ.НомерСтрокиРодителя
				+ ". Описание ошибки: " + ОписаниеОшибки();
				ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке);
				ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
				флЗаписиНоменклатуры = Ложь;
			КонецПопытки;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// #wortmann { 
// Процедура находит ТЭГ "Position_action" и по необходимости ставит НовомуЭлементу пометку на удаление.  
// Галфинд_Домнышева 2022/10/21
//
// Параметры:
//	СтрокаТЧ - строка табличной части из РегистрСведений.гф_СтрокиДокументаДанныеЗагрузки
//	НовыйЭлемент - СправочникОбъект.Номенклатура - если она найдено, Неопределено в ином случае.
//	Отказ - параметр системы
Процедура ОпределимПометкуУдаленияДляДокумента(СтрокаТЧ, НовыйЭлемент, Отказ)
	
	Position_action = НайтиСтрокуДереваПоТэгу("Position_action", Отказ, СтрокаТЧ);
	Если ЗначениеЗаполнено(Position_action) Тогда
		Если СокрЛП(Position_action) = "2" Тогда
			НовыйЭлемент.ПометкаУдаления = Истина;
		Иначе
			НовыйЭлемент.ПометкаУдаления = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// #wortmann { 
// Ищет сезон из справочника КоллекцииНоменклатуры по наименованию ТЭГа "Supplier_season"
// Галфинд_Домнышева 2022/10/10
//
// Параметры:
//	СтрокаТЧ - Тип.СтрокаТЧ - текущая строка табличной части НаборЗаписейТэгов
//	Отказ - параметр системы
//
// Возвращаемое значение:
//	СтрокаТЧ - СправочникСсылка.КоллекцииНоменклатуры - Ссылка на найденный сезон 
//	Неопределено - если Сезон не найден
Функция УстановитьСезон(СтрокаТЧ, Отказ)
	
	Сезон = НайтиСтрокуДереваПоТэгу("Supplier_season", Отказ, СтрокаТЧ);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КоллекцииНоменклатуры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КоллекцииНоменклатуры КАК КоллекцииНоменклатуры
		|ГДЕ
		|	КоллекцииНоменклатуры.Код = &Сезон";
	
	Запрос.УстановитьПараметр("Сезон", Сезон);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка.Следующий();	
		Возврат Выборка.Ссылка;		
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции// } #wortmann

// #wortmann { 
// Возвращает строку родителя, либо саму строку-параметр, если родителя не нашлось.
// Галфинд_Домнышева 2022/09/12
//
// Параметры:
//	СтрокаТЧ - Тип.СтрокаТЧ - строка табличной части по которой ищется ПорядковыйНомерСтроки родителя
//
// Возвращаемое значение:
//	Строка - если найден порядковый номер строки родителя 
//	СтрокаТЧ - строка табличной части по которой ищется ПорядковыйНомерСтроки родителя
Функция СтрокаРодитель(СтрокаТЧ)
	НайденноеЗначение = ЗагруженныеСтроки.Найти(СтрокаТЧ.НомерСтрокиРодителя, "ПорядковыйНомерСтроки");
	Если НайденноеЗначение = Неопределено Тогда
		Возврат СтрокаТЧ;
	Иначе
		Возврат НайденноеЗначение;
	КонецЕсли;
КонецФункции// } #wortmann

// #wortmann { 
// Создание и Проведение документа УстановкаЦенНоменклатуры 
// Не доработана, в связи с недостатком информации
// Галфинд_Домнышева 2022/10/12
//
// Параметры:
//	ТабличнаяЧасть - ТаблицаЗначений - выгрузка РС гф_СтрокиДокументаДанныеЗагрузки по данному Объекту.
//	СтруктураЦен - Структура - значения ТЭГов и глобальных значений
//	Отказ - параметр системы 
Процедура СозданиеПроведениеУстановкиЦен(ТабличнаяЧасть, СтруктураЦен, Отказ) 
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	МассивЭлементовНоменклатуры = Новый Массив;
	ДокументУстановкаЦен = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
	ДокументУстановкаЦен.Дата = Дата(НайтиСтрокуДереваПоТэгу("Document_date", Отказ));
	ДокументУстановкаЦен.Согласован = Ложь;
	ДокументУстановкаЦен.Статус = Перечисления.СтатусыУстановокЦенНоменклатуры.Согласован;

	ДокументУстановкаЦен.Ответственный = Пользователи.ТекущийПользователь();
	УстанавливатьЦены = Истина;
			
	НовыйЭлемент = Неопределено;
	
	СоответствиеЦен		= Новый Соответствие;
	СоответствиеЦен.Вставить("Suggested_retail_price",		СтруктураЦЕН.СПР_ТипЦен_СПР);
	СоответствиеЦен.Вставить("Effective_purchase_price",	СтруктураЦЕН.СПР_ТипЦен_ЕПП);
	
	УстанавливатьЦены = СтруктураЦЕН.УстанавливатьЦены;
	
	Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл 
		
		УсловиеСоздания = ЗначениеЗаполнено(СтрокаТЧ.ПолеЗагрузки) 
		И (СтрокаТЧ.ПолеЗагрузки.ТипОбъекта = "Установка цен номенклатуры") 
		И УстанавливатьЦены И (СтрокаТЧ.ПолеЗагрузки = СтруктураЦЕН.СПР_ТЭГ_СПР 
		ИЛИ СтрокаТЧ.ПолеЗагрузки = СтруктураЦЕН.СПР_ТЭГ_ЕПП);
		
		Если УсловиеСоздания  Тогда

			НайденноеЗначение = ПоискАртикулаВЗагруженныхСтроках(СтрокаТЧ);
			НайденныйНомерЦвета = ПоискЦветаВЗагруженныхСтроках(СтрокаТЧ);
								
			ЭлементНоменклатуры = ПоискЭлементаНоменклатурыДляУстановкиЦен(НайденноеЗначение, НайденныйНомерЦвета, СтрокаТЧ);
			Если ЭлементНоменклатуры = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ВалютаДокумента = ОпределяемВалютуДокумента(Отказ);	
			Если ВалютаДокумента = Неопределено Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			ВидЦеныСтроки = СоответствиеЦен.Получить(СтрокаТЧ.ПолеЗагрузки.Наименование); 
			СтрокаУникальна = СтрокаТовары2_5Уникальная(ДокументУстановкаЦен.Товары2_5, ЭлементНоменклатуры, ВидЦеныСтроки);
			
			Если СтрокаУникальна Тогда
				СделатьЗаписьУстановкиЦен(ЭлементНоменклатуры, ВидЦеныСтроки, ДокументУстановкаЦен, 
											СтрокаТЧ, ВалютаДокумента, Отказ);
			КонецЕсли;	
		КонецЕсли;		// устанавливать цены
		
	КонецЦикла;
	
	ЗапишемДокументУстановкиЦен(УстанавливатьЦены, ДокументУстановкаЦен);

КонецПроцедуры// } #wortmann 

// #wortmann { 
// Ищет номенклатуру по Артикулу
// Галфинд_Домнышева 2022/10/21
//
// Параметры:
//	НайденноеЗначение - Массив - Получееный массив по ТЭГ "Suppliers_article_number" из ЗагруженныеСтроки
//	НайденныйНомерЦвета - Строка - номер цвета
//	СтрокаТЧ - строка табличной части из РегистрСведений.гф_СтрокиДокументаДанныеЗагрузки
//
// Возвращаемое значение:
//	ЭлементНоменклатуры - СправочникСсылка.Номенклатура 
//	Неопределено - если не найден ТЭГ "Suggested_retail_price" или Номенклатура по артикулу
Функция ПоискЭлементаНоменклатурыДляУстановкиЦен(НайденноеЗначение, НайденныйНомерЦвета, СтрокаТЧ)
	
	Если НайденноеЗначение.Количество() > 0 Тогда
		Артикул = НайденноеЗначение[0].Значение + "-" + НайденныйНомерЦвета;
		
		НайденныйЭлемент = ПолучитьНоменклатуруПоАртикулу(Артикул);
		
		Если НайденныйЭлемент <> Неопределено Тогда
			ЭлементНоменклатуры = НайденныйЭлемент.Ссылка; 
			Возврат ЭлементНоменклатуры;
		Иначе
			СообщениеОбОшибке = "Установка цен номенклатуры. Не удалось найти номенклатуру для строки " 
			+ СтрокаТЧ.НомерСтрокиРодителя;
			ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке);
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
			Возврат Неопределено;
		КонецЕсли;
	Иначе	
		СообщениеОбОшибке = "Установка цен номенклатуры. Не удалось найти Suggested_retail_price для узла (строки) № "
		+ СтрокаТЧ.НомерСтрокиРодителя;
		ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции 

// #wortmann { 
// Определяет валюту документа
// Галфинд_Домнышева 2022/10/21
//
// Параметры:
//	Отказ - параметр системы
//
// Возвращаемое значение:
//	ВалютаДокумента - СправочникСсылка.Валюты - если значение есть в справочнике 
//	Неопределено - если не найден ТЭГ "Suggested_retail_price" или Номенклатура по артикулу
Функция ОпределяемВалютуДокумента(Отказ) 
	
	СтрНазваниеВалюты = НайтиСтрокуДереваПоТэгуОтПорядкового("Currency", Отказ);	
	Если Отказ Или НЕ ЗначениеЗаполнено(СтрНазваниеВалюты) Тогда
		// BSLLS:Typo-off
		СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект 
		+ ". Описание ошибки: Не найден или не заполнен тэг Currency.";
		// BSLLS:Typo-on
		ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
		Возврат Неопределено;
	Иначе
		ВалютаДокумента = НайтиЗначениеПоРеквизитуСправочника ("Валюты", "Наименование", СокрЛП(СтрНазваниеВалюты));
		Возврат ВалютаДокумента;
	КонецЕсли;	
	
КонецФункции

// #wortmann { 
// Определяет артикул 
// Галфинд_Домнышева 2022/10/21
//
// Параметры:
//	СтрокаТЧ - строка табличной части из РегистрСведений.гф_СтрокиДокументаДанныеЗагрузки
//
// Возвращаемое значение:
//	НайденноеЗначение - Массив - массив со значением артикула 
Функция ПоискАртикулаВЗагруженныхСтроках(СтрокаТЧ)
	
	НомерСтрокиРодителя = СтрокаТЧ.НомерСтрокиРодителя;
	СтруктураОтбора = Новый Структура;
	// BSLLS:Typo-off
	СтруктураОтбора.Вставить("Тэг", "Suppliers_article_number");
	// BSLLS:Typo-on
	ТекущаяСтрокаРодителя   = СтрокаТЧ.ПорядковыйНомерСтроки;
	СтруктураОтбора.Вставить("НомерСтрокиРодителя", НомерСтрокиРодителя);
	
	НайденноеЗначение = ЗагруженныеСтроки.НайтиСтроки(СтруктураОтбора);
	
	Возврат НайденноеЗначение;
	
КонецФункции 

// #wortmann { 
// Определяет номер цвета 
// Галфинд_Домнышева 2022/10/21
//
// Параметры:
//	СтрокаТЧ - строка табличной части из РегистрСведений.гф_СтрокиДокументаДанныеЗагрузки
//
// Возвращаемое значение:
//	НайденныйНомерЦвета - Строка - номер цвета
Функция ПоискЦветаВЗагруженныхСтроках(СтрокаТЧ)
	
	НомерСтрокиРодителя = СтрокаТЧ.НомерСтрокиРодителя;
		
	СтруктураОтбораЦвета = Новый Структура;
	// BSLLS:Typo-off
	СтруктураОтбораЦвета.Вставить("Тэг", "Colour_code_supplier");
	// BSLLS:Typo-on
	СтруктураОтбораЦвета.Вставить("НомерСтрокиРодителя", НомерСтрокиРодителя);
	
	НомерЦвета = ЗагруженныеСтроки.НайтиСтроки(СтруктураОтбораЦвета);
	НайденныйНомерЦвета = НомерЦвета[0].Значение;
	
	Возврат НайденныйНомерЦвета;
	
КонецФункции 

// #wortmann { 
// Запись и Проведение документа УстановкаЦенНоменклатуры 
// Не доработана, в связи с недостатком информации
// Галфинд_Домнышева 2022/10/21
//
// Параметры:
//	УстанавливатьЦены - Булево 
//	ДокументУстановкаЦен - ДокументСсылка.УстановкаЦенНоменклатуры - создаваемый документ
Процедура ЗапишемДокументУстановкиЦен(УстанавливатьЦены, ДокументУстановкаЦен)
	
	Если УстанавливатьЦены И ДокументУстановкаЦен.Товары2_5.Количество() > 0 Тогда
		
		ВидЦены = ДокументУстановкаЦен.Товары2_5.Выгрузить(, "ВидЦены");
		ВидЦены.Свернуть("ВидЦены");
		ДокументУстановкаЦен.ВидыЦен.Загрузить(ВидЦены);
		ДокументУстановкаЦен.Записать(РежимЗаписиДокумента.Запись);
		
		НачатьТранзакцию();
		
		Попытка
			ДокументУстановкаЦен.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			СообщениеОбОшибке = "Произошли ошибки при проведении документа " + ДокументУстановкаЦен + ".|" + ОписаниеОшибки();
			ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке);
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
		КонецПопытки;
	КонецЕсли; 
	
КонецПроцедуры

// #wortmann { 
// Получает структуру цен необходимую для создания документа УстановкаЦенНоменклатуры
// Галфинд_Домнышева 2022/10/21
//
// Возвращаемое значение:
//	СтруктураЦен - Структура - содержащая элементы "СПР_ТЭГ_СПР", "СПР_ТЭГ_ЕПП", "СПР_ТипЦен_СПР",
//								"СПР_ТипЦен_ЕПП", "УстанавливатьЦены"
//	Неопределено - если при поиске хотя бы одного элемента был Отказ
Функция ПолучитьСтруктуруЦен()
	
	УстанавливатьЦены = Истина;
	Отказ = Ложь;
	// Проверяем наличие соответствующих тэгов по наименованию в настройках загружаемых данных
	СПР_ТЭГ_СПР			= НайтиЗначениеНастройкиЗагружаемыхДанных("Suggested_retail_price");
	Если СПР_ТЭГ_СПР	= Неопределено ИЛИ СПР_ТЭГ_СПР = Справочники.гф_НастройкаЗагружаемыхДанных.ПустаяСсылка() Тогда
		СообщениеОбОшибке = "Установка цен номенклатуры. Не удалось найти в настройках загружаемых данных 
							|тэг с наименованием Suggested_retail_price";
		ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
		Отказ 				= Истина;
		УстанавливатьЦены = Ложь;	
	КонецЕсли;	
	СПР_ТЭГ_ЕПП			= НайтиЗначениеНастройкиЗагружаемыхДанных("Effective_purchase_price");
	Если СПР_ТЭГ_ЕПП	= Неопределено ИЛИ СПР_ТЭГ_ЕПП = Справочники.гф_НастройкаЗагружаемыхДанных.ПустаяСсылка() Тогда
		СообщениеОбОшибке = "Установка цен номенклатуры. Не удалось найти в настройках загружаемых данных 
							|тэг с наименованием Suggested_retail_price";
		ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
		Отказ 				= Истина;
		УстанавливатьЦены = Ложь;	
	КонецЕсли;	
	//
	// Проверяем наличие типов цен по наименованию
	СПР_ТипЦен_СПР			=  _омОбщегоНазначенияКлиентСервер.ПолучитьГлобальноеЗначение("гф_ГлобальныеЗначенияРозничнаяЦена");
	Если СПР_ТипЦен_СПР	= Неопределено Тогда
		СообщениеОбОшибке = "Установка цен номенклатуры. Не задано глобальное значение гф_ГлобальныеЗначенияРозничнаяЦена";
		ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
		Отказ 				= Истина;
		УстанавливатьЦены = Ложь;	
	КонецЕсли;	
	
	СПР_ТипЦен_ЕПП			= 
							_омОбщегоНазначенияКлиентСервер.ПолучитьГлобальноеЗначение("гф_ГлобальныеЗначенияОптоваяЗакупочнаяЦена");
	Если СПР_ТипЦен_ЕПП	= Неопределено Тогда
		СообщениеОбОшибке = "Установка цен номенклатуры. Не задано глобальное значение 
							|гф_ГлобальныеЗначенияОптоваяЗакупочнаяЦена";
		ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
		Отказ 				= Истина;
		УстанавливатьЦены = Ложь;	
	КонецЕсли;
	
	СтруктураЦен = Новый Структура;
	СтруктураЦен.Вставить("СПР_ТЭГ_СПР", СПР_ТЭГ_СПР);
	СтруктураЦен.Вставить("СПР_ТЭГ_ЕПП", СПР_ТЭГ_ЕПП);
	СтруктураЦен.Вставить("СПР_ТипЦен_СПР", СПР_ТипЦен_СПР);
	СтруктураЦен.Вставить("СПР_ТипЦен_ЕПП", СПР_ТипЦен_ЕПП);
	СтруктураЦен.Вставить("УстанавливатьЦены", УстанавливатьЦены);
	
	Если НЕ Отказ Тогда
		Возврат СтруктураЦен;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// #wortmann { 
// Проверяет уникальсть будущей строки в ТЧ Товары2_5
// Галфинд_Домнышева 2022/10/12
//
// Параметры:
//	Товары - ТЧ - табличная часть Товары2_5 документа УстановкаЦенНоменклатуры
//	Номенклатура - СправочникСсылка.Номенклатура - загружаемая номенклатура в ТЧ
//	ВидЦены - СправочникСсылка.ВидыЦен - загружаемый ВидЦен в ТЧ 
// 
// Возвращаемое значение:
//	Булево - Истина, если в ТЧ еще нет строки с такими параметрами, иначе Ложь 
Функция СтрокаТовары2_5Уникальная(Товары, Номенклатура, ВидЦены)
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура", Номенклатура);
	ПараметрыОтбора.Вставить("ВидЦены", ВидЦены);

	ТоварыНайдены = Товары.НайтиСтроки(ПараметрыОтбора);
	
	Если ТоварыНайдены.Количество() > 0 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции// } #wortmann

// #wortmann { 
// Находит необходимый элемент спр гф_НастройкаЗагружаемыхДанных по Наименованию с интерфейсом PRICAT
// Галфинд_Домнышева 2022/10/12
//
// Параметры:
//	Значение - Строка - Наименование элемента в спр гф_НастройкаЗагружаемыхДанных 
// 
// Возвращаемое значение:
//	СправочникСсылка.гф_НастройкаЗагружаемыхДанных - В случае нахождения элемента по заданному наименованию
//	Неопределено - В случае отсутствия элемента в спр гф_НастройкаЗагружаемыхДанных 
Функция НайтиЗначениеНастройкиЗагружаемыхДанных(Значение)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
		|	гф_НастройкаЗагружаемыхДанных.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.гф_НастройкаЗагружаемыхДанных КАК гф_НастройкаЗагружаемыхДанных
		|ГДЕ
		|	гф_НастройкаЗагружаемыхДанных.Интерфейс = &Интерфейс
		|	И гф_НастройкаЗагружаемыхДанных.Наименование = &Значение";
	
	Запрос.УстановитьПараметр("Значение", Значение);
	Запрос.УстановитьПараметр("Интерфейс", Перечисления.гф_Интерфейсы.PRICAT);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции// } #wortmann 

// #wortmann { 
// Добавляет запись в табличную часть Товары2_5 документа УстановкаЦенНоменклатуры
// Галфинд_Домнышева 2022/10/12
//
// Параметры:
//	пар_Номенклатура - СправочникСсылка.Номенклатура - загружаемая номенклатура в ТЧ
//	пар_ТипЦен - СправочникСсылка.ВидыЦен - загружаемый ВидЦен в ТЧ 
//	пар_ДокУстановкиЦен - ДокументСсылка.УстановкаЦенаНоменклатуры - создаваемый документ
//	СтрокаТЧ - Тип.СтрокаТЧ - текущая строка табличной части НаборЗаписейТэгов 
//	ВалютаДокумента - СправочникСсылка.Валюты
//	Отказ - системный параметр
Процедура СделатьЗаписьУстановкиЦен(пар_Номенклатура, пар_ТипЦен, пар_ДокУстановкиЦен, СтрокаТЧ, ВалютаДокумента, Отказ)

	ИспользуетсяЦенообразование25 = ПолучитьФункциональнуюОпцию("ИспользуетсяЦенообразование25");
	
	СтруктураВходПар 		= Новый Структура;
	СтруктураВходПар.Вставить("Период", 				пар_ДокУстановкиЦен.Дата);						
	СтруктураВходПар.Вставить("Номенклатура", 		пар_Номенклатура.Ссылка);
	СтруктураВходПар.Вставить("ТипЦен", 				пар_ТипЦен);
	
	Если ЕстьЗаписьСТакимиПараметрамиВЦенах(СтруктураВходПар) Тогда
		СообщениеОбОшибке = "Для EAN " + пар_Номенклатура.Код + " в периоде " + Формат(пар_ДокУстановкиЦен.Дата, "ДЛФ=Д") 
							+ " цена уже записана. Не обрабатывается";
		ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
		Возврат;
	КонецЕсли;	
	
	НоваяСтрока 			= пар_ДокУстановкиЦен.Товары2_5.Добавить();
	НоваяСтрока.Номенклатура 		= пар_Номенклатура.Ссылка;
	НоваяСтрока.ВидЦены 	= пар_ТипЦен;
	НоваяСтрока.Валюта 	= ВалютаДокумента;
	
	НоваяСтрока.Цена = Число(СтрокаТЧ.Значение);

КонецПроцедуры// } #wortmann

// #wortmann { 
// Проверка существования в регистре "Цены номенклатуры 25" записи
// с указанными ключевыми параметрами
// Галфинд_Домнышева 2022/10/12
//
// Параметры:
//	СтруктураВходПар - Структура - Структура состоит из данных записываемой строки в ТЧ Товары2_5 
// 
// Возвращаемое значение:
//	Булево - Истина, если в РС есть запись с такими параметрами, иначе Ложь
Функция ЕстьЗаписьСТакимиПараметрамиВЦенах(СтруктураВходПар)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЦеныНоменклатуры25.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатуры25.ВидЦены КАК ВидЦены
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры25 КАК ЦеныНоменклатуры25
		|ГДЕ
		|	ЦеныНоменклатуры25.Период = &Период
		|	И ЦеныНоменклатуры25.Номенклатура = &Номенклатура
		|	И ЦеныНоменклатуры25.ВидЦены = &ВидЦены";
	
	Запрос.УстановитьПараметр("ВидЦены", СтруктураВходПар.ТипЦен);
	Запрос.УстановитьПараметр("Номенклатура", СтруктураВходПар.Номенклатура);
	Запрос.УстановитьПараметр("Период", СтруктураВходПар.Период);

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;	
	Возврат Ложь;
	
КонецФункции// } #wortmann	

// #wortmann { 
// Создание варианта комплектации
// Галфинд_Домнышева 2022/09/12
//
// Параметры:
//	НаборЗаписейТэгов - ТаблицаЗначений - выгрузка РС гф_СтрокиДокументаДанныеЗагрузки по данному Объекту.
//	Отказ - параметр системы
Процедура СоздатьВариантКомплектации(НаборЗаписейТэгов, Отказ)
			
	Если Не ПроверкаПравильности_PricatSort() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;   
	
	ВариантКомплектации = Неопределено;
	НомерСтрокиРодителя = 0;
	
	Для Каждого СтрокаТЧ Из НаборЗаписейТэгов Цикл 				// Цикл по тегам XML
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
		
		Если СтрНайти(СтрокаТЧ.Тэг, "Message_Position") > 0 Тогда

			Suppliers_article_number = НайтиСтрокуДереваПоТэгуОтПорядкового("Suppliers_article_number", Отказ, СтрокаТЧ);
			Colour_code_supplier = НайтиСтрокуДереваПоТэгуОтПорядкового("Colour_code_supplier", Отказ, СтрокаТЧ);
			
			// Разбираем строку из XML на необходимые значения
			ПозицияПервогоТире = СтрНайти(Suppliers_article_number, "-"); 
			НаименованиеБезСО = Сред(Suppliers_article_number, ПозицияПервогоТире + 1); 
			ПозицияВторогоТире = СтрНайти(НаименованиеБезСО, "-");
			Характеристика = Лев(НаименованиеБезСО, ПозицияВторогоТире - 1);
			Наименование = Сред(НаименованиеБезСО, ПозицияВторогоТире + 1); 
			НаименованиеВарианта = Наименование + "-" + Colour_code_supplier + "/" + Характеристика;
			Артикул = Наименование + "-" + Colour_code_supplier;
			Вариант = НайтиЗначениеПоРеквизитуСправочника("ВариантыКомплектацииНоменклатуры",
			"Наименование", НаименованиеВарианта);
			
			ВариантКомплектации = СозданиеВариантаКомплектации(Вариант, Артикул, НаименованиеВарианта, Характеристика,
									СтрокаТЧ, Отказ);
			Если ВариантКомплектации = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
		ИначеЕсли СтрНайти(СтрокаТЧ.Тэг, "Message_Sub_Position") > 0
			И ВариантКомплектации <> Неопределено Тогда
			НоваяСтрока = ВариантКомплектации.Товары.Добавить();
			EAN = НайтиСтрокуДереваПоТэгуОтПорядкового("EAN", Отказ, СтрокаТЧ);
			Отбор = Новый Структура("Штрихкод", EAN);
			СтруктураНоменклатуры = РегистрыСведений.ШтрихкодыНоменклатуры.Получить(Отбор);
			НоваяСтрока.Номенклатура = СтруктураНоменклатуры.Номенклатура;
			НоваяСтрока.Характеристика = СтруктураНоменклатуры.Характеристика;
			НоваяСтрока.Количество = НайтиСтрокуДереваПоТэгуОтПорядкового("Quantity", Отказ, СтрокаТЧ);
			НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
			НоваяСтрока.Упаковка = СтруктураНоменклатуры.Упаковка;
			ВариантКомплектации.Записать();	
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если Отказ Тогда
			СообщениеОбОшибке = "Произошли ошибки при записи Варианта комплектации " + ВариантКомплектации 
			+ ".|" + ОписаниеОшибки();
			ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке);
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
			
		КонецЕсли;
		
	КонецЦикла;				
	
КонецПроцедуры// } #wortmann

// #wortmann { 
// Создание или получение варианта комплектации
// Галфинд_Домнышева 2022/09/12
//
// Параметры:
//	Вариант - СправочникСсылка.ВариантыКомплектацииНоменклатуры или Неопределено
//	Артикул - Строка - значение артикула составленное из данных ТЭГов
//	НаименованиеВарианта - Строка - значение наименования варианта составленное из данных ТЭГов
//	Характеристика - Строка - значение характеристики номенклатуры из ТЭГов 
//	СтрокаТЧ - Тип.СтрокаТЧ - строка табличной части которая обрабатывается в данный момент
//	Отказ - параметр системы
//	
// Возвращаемое значение:
//	ВариантКомплектации - СправочникСсылка.ВариантыКомплектацииНоменклатуры. 
Функция СозданиеВариантаКомплектации(Вариант, Артикул, НаименованиеВарианта, Характеристика, СтрокаТЧ, Отказ)
	
	Если Вариант <> Неопределено Тогда
		// #wortmann {
		// Галфинд_Домнышева 27.01.23
		// Если нашли Вариант, проверяем штрихкод, если Штрихкод совпал - говорим ай-ай, 
		// если нет, перезапишем вариант с данными из XML
		
		Если Вариант.гф_Штрихкод <> НайтиСтрокуДереваПоТэгуОтПорядкового("EAN", Отказ, СтрокаТЧ) Тогда
			
			ВариантКомплектации = Вариант.ПолучитьОбъект();
		// } #wortmann	
		Иначе
			СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект 
			+ ". Описание ошибки: Вариант комплектации уже существует - " + НаименованиеВарианта;
			ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке);
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		ВариантКомплектации = Справочники.ВариантыКомплектацииНоменклатуры.СоздатьЭлемент();
		ВариантКомплектации.Наименование = НаименованиеВарианта;
		ВариантКомплектации.Характеристика = НайтиЗначениеПоРеквизитуСправочника("ХарактеристикиНоменклатуры",
										"Наименование", Характеристика);
	КонецЕсли;	
	
	// или перезапишем данные или заполним новый вариант
	Номенклатура = ПолучитьНоменклатуруПоАртикулу(Артикул);
	Если Номенклатура <> Неопределено Тогда
		ВариантКомплектации.Владелец = Номенклатура.Ссылка;
	Иначе
		СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект 
		+ ". Описание ошибки: Не найдена номенклатура с артикулом - " + Артикул;
		ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
		Возврат Неопределено;
	КонецЕсли;
	
	ВариантКомплектации.Количество = НайтиСтрокуДереваПоТэгуОтПорядкового("Quantity_per_packing_unit", Отказ, СтрокаТЧ);
	ВариантКомплектации.КоличествоУпаковок = ВариантКомплектации.Количество; 
	ВариантКомплектации.гф_Штрихкод = НайтиСтрокуДереваПоТэгуОтПорядкового("EAN", Отказ, СтрокаТЧ);
	ВесКороба = НайтиСтрокуДереваПоТэгуОтПорядкового("Weight", Отказ, СтрокаТЧ);
	ЕдиницаИзмеренияВеса = НайтиСтрокуДереваПоТэгуОтПорядкового("WeightUnit", Отказ, СтрокаТЧ);
	
	К = ?(ЕдиницаИзмеренияВеса = "g", 1000, 1);
	
	// В спр ВариантКомплектации Вес указывается в граммах 
	ВариантКомплектации.гф_ВесКороба = ?(ВесКороба = 0, 0, ВесКороба / К); 
	ВариантКомплектации.гф_ДлинаКороба = НайтиСтрокуДереваПоТэгуОтПорядкового("Length", Отказ, СтрокаТЧ);
	ВариантКомплектации.гф_ШиринаКороба = НайтиСтрокуДереваПоТэгуОтПорядкового("Width", Отказ, СтрокаТЧ);
	ВариантКомплектации.гф_ВысотаКороба = НайтиСтрокуДереваПоТэгуОтПорядкового("Height", Отказ, СтрокаТЧ);
	ВариантКомплектации.Записать();
	
	Возврат ВариантКомплектации;		
		
КонецФункции// } #wortmann
		
// #wortmann { 
// Проверяет наличие всех значений тэгов EAN в РС Штрихкоды номенклатуры
// Галфинд_Домнышева 2022/09/12
//
// Параметры:
//	ВыводитьПрогрессор - Булево - выводит форму Прогрессора при значении Истина
//	СтрокаНаименованиеТэга - Тип.СтрокаТЧ - строка табличной части для которой ищется предок с заданным именем
//
// Возвращаемое значение:
//	Результат - Булево - Возврат Истина, если в базе найдены все Штрихкоды номенклатуры, 
//                      - Ложь - если не найдено хоть одно значение штрихкода номенклатуры 
// BSLLS:LatinAndCyrillicSymbolInWord-off
Функция ПроверкаПравильности_PricatSort(ВыводитьПрогрессор = Ложь, СтрокаНаименованиеТэга = "Group_type")
// BSLLS:LatinAndCyrillicSymbolInWord-on
	Отказ = Ложь;
	Group_type = НайтиСтрокуДереваПоТэгу(СтрокаНаименованиеТэга, Отказ);

	Если Отказ Тогда
		// BSLLS:Typo-off
		СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + ". Описание ошибки: Не найден тэг Group_type.";
		// BSLLS:Typo-on
		ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
		Возврат Ложь;
	КонецЕсли;
	
	Если СокрЛП(Group_type) = "10E" Тогда								// Это Pricat Sort - производим проверку
		
		СтруктураОтбора = Новый Структура;
		// BSLLS:Typo-off
		СтруктураОтбора.Вставить("Тэг", "EAN");        					// Отбираем все строки тэгов EAN 
		// BSLLS:Typo-on
		СтрокиШтрихКоды = ЗагруженныеСтроки.НайтиСтроки(СтруктураОтбора);
				
		// Артикулы не прошедшие проверку будем запишем в массив в массив
		МассивНеНайденнойНоменклатуры = ПолучитьМассивНеНайденнойНоменклатуры(СтрокиШтрихКоды, Отказ);
		
		// Обход массива артикулов не прошедших проверку с выдачей сообщения об ошибке
		Если МассивНеНайденнойНоменклатуры.Количество() > 0 Тогда
			СтрокаПереченьНеНайденнойНоменклатуры = "";
			Для каждого ЭлементМассиваEAN Из МассивНеНайденнойНоменклатуры Цикл      
				СтрокаПереченьНеНайденнойНоменклатуры = ?(СтрокаПереченьНеНайденнойНоменклатуры = "", "", 
				СтрокаПереченьНеНайденнойНоменклатуры + "; ") + Символы.ПС
				+ Строка(ЭлементМассиваEAN.Штрихкод + " для артикула " + ЭлементМассиваEAN.АртикулНоменклатуры);			
			КонецЦикла; 
			СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект 
								+ ". Описание ошибки: При проверке номенклатуры для Pricat_Sort не обнаружена номенклатура для EAN: "
								+ СтрокаПереченьНеНайденнойНоменклатуры;
			ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке);
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
			Результат = Ложь;					// Определено отсутствие как минимум одой пары из комплекта - проверка не прошла!
		Иначе	
			Результат = Истина;					// нашли номенклатуру для каждой Message_Sub_Position 
		КонецЕсли;
        				
		Возврат Результат;
		
	Иначе										// Это НЕ Pricat Sort -  проверку не производим!
		Возврат Истина;
	КонецЕсли; 
	
КонецФункции// } #wortmann 

// #wortmann { 
// Проверяет наличие всех значений тэгов EAN в РС Штрихкоды номенклатуры
// Галфинд_Домнышева 2022/10/21
//
// Параметры:
//	СтрокиШтрихКоды - Массив - массив из ЗагруженныеСтроки по ТЭГ EAN
//	Отказ - параметр системы
//
// Возвращаемое значение:
//	МассивНеНайденнойНоменклатуры - Массив - со значениями ШтрихКодов
Функция ПолучитьМассивНеНайденнойНоменклатуры(СтрокиШтрихКоды, Отказ)
	
	МассивНеНайденнойНоменклатуры = Новый ТаблицаЗначений;
	МассивНеНайденнойНоменклатуры.Колонки.Добавить("Штрихкод");
	МассивНеНайденнойНоменклатуры.Колонки.Добавить("АртикулНоменклатуры");	
	
	Для каждого СтрокаШтрихкод Из СтрокиШтрихКоды Цикл
		
		СтрокаРодителя	= СтрокаРодитель(СтрокаШтрихкод);
		// Тэги с артикулами не относящиеся к Sub_Position пропускаем
		Если НЕ СтрокаРодителя.Тэг	= "Message_Sub_Position" Тогда
			Продолжить;
		КонецЕсли;
		
		Suppliers_article_number = НайтиСтрокуДереваПоТэгу("Suppliers_article_number", Отказ, СтрокаРодителя);
		Colour_code_supplier = НайтиСтрокуДереваПоТэгу("Colour_code_supplier", Отказ, СтрокаРодителя);
		ПозицияПервогоТире = СтрНайти(Suppliers_article_number, "-"); 
		НаименованиеБезСО = Сред(Suppliers_article_number, ПозицияПервогоТире + 1); 
		ПозицияВторогоТире = СтрНайти(НаименованиеБезСО, "-");
		Наименование = Сред(НаименованиеБезСО, ПозицияВторогоТире + 1); 
		Артикул = Наименование + "-" + Colour_code_supplier;	
		
		EAN	= СокрЛП(СтрокаШтрихкод.Значение);
		Отбор = Новый Структура("Штрихкод", EAN);
		НайденныйЭлемент = РегистрыСведений.ШтрихкодыНоменклатуры.Получить(Отбор).Номенклатура;
		
		ОтборВМассиве = Новый Структура;
		ОтборВМассиве.Вставить("Штрихкод", EAN);
		ОтборВМассиве.Вставить("АртикулНоменклатуры", Артикул);
		
		Если (НайденныйЭлемент = Неопределено ИЛИ НайденныйЭлемент.Пустая()) 
			И МассивНеНайденнойНоменклатуры.Найти(ОтборВМассиве) = Неопределено Тогда
			НоваяСтрокаМассива = МассивНеНайденнойНоменклатуры.Добавить();
			НоваяСтрокаМассива.Штрихкод = EAN;
			НоваяСтрокаМассива.АртикулНоменклатуры = Артикул;
		КонецЕсли;
		
	КонецЦикла;
	Возврат МассивНеНайденнойНоменклатуры;
	
КонецФункции

// #wortmann { 
// Заполнение дополнительных свойств номенклатуры
// Галфинд_Домнышева 2022/09/12
//
// Параметры:
//	СтрокаТЧ - Тип.СтрокаТЧ - строка табличной части для которой ищется предок с заданным именем
//	Отказ - параметр системы
//	НовыйЭлемент - СправочникОбъект.Номенклатура - созданный объект справочника Номенклатура
//	ТаблицаРегистраСоответствияСвойств - Таблица Значений - выгрузка РегистрСведений_гф_ArticlrDescriptions
Процедура ДополнитьРеквизитыЭлементаНоменклатуры(СтрокаТЧ, Отказ, НовыйЭлемент, ТаблицаРегистраСоответствияСвойств)
	
	Product_group_supplier	= Неопределено;
	GLN_supplier			= Неопределено;
	
	СтруктураСвойств	= ВыбратьВсеТэгиСвойствПоСтрокеАртикулу(СтрокаТЧ);
	
	GLN_supplier = НайтиСтрокуДереваПоТэгу("GLN_supplier", Отказ);	
	Если Отказ Тогда
		// BSLLS:Typo-off
		СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект 
							+ ". Описание ошибки: Не найден тэг GLN_supplier.";
		// BSLLS:Typo-on
		ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
		Возврат;
	КонецЕсли;
	
	НайденноеЗначение	= Неопределено;
	СвойствоНайдено = СтруктураСвойств.Свойство("Product_group_supplier", НайденноеЗначение);
	Если СвойствоНайдено Тогда
		Product_group_supplier = НайденноеЗначение;
	КонецЕсли;
	
	// ----------------------------------------------------------------
	// 1. Формируем наименование
	// ----------------------------------------------------------------
	ФормированиеНаименования(НовыйЭлемент, СтрокаТЧ, Product_group_supplier, GLN_supplier,
							ТаблицаРегистраСоответствияСвойств);	
	// ----------------------------------------------------------------
	// 2. Формируем базовую единицу измерения
	// ----------------------------------------------------------------
	Если ЗначениеЗаполнено(Product_group_supplier) И ЗначениеЗаполнено(GLN_supplier) Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Product_group", Product_group_supplier);
		СтруктураОтбора.Вставить("GLN_Supplier", GLN_supplier);
		СтрокиНаименований	= ТаблицаРегистраСоответствияСвойств.НайтиСтроки(СтруктураОтбора);		
		Если СтрокиНаименований.Количество() > 0 Тогда
			ЕИКлассификатор	= СтрокиНаименований[0].ЕдиницаИзмеренияПоКлассификатору;
			// проверка на измененеие и если необходимо - запись
			Если НЕ НовыйЭлемент.ЕдиницаИзмерения = ЕИКлассификатор Тогда
				НовыйЭлемент.ЕдиницаИзмерения = ЕИКлассификатор;
				флЗаписиНоменклатуры	= Истина;					
			КонецЕсли;
		Иначе
			СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект 
								+ ". Описание ошибки: В регистре ""ArticlrDescriptions"" не удалось найти единицу измерения для "
								+ СокрЛП(Product_group_supplier);
			ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке);
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	Иначе
		СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект 
							+ ". Описание ошибки: Не удалось определить свойство ""Product_group_supplier"" для Articl:"
							+ СокрЛП(НовыйЭлемент.Артикул);
		ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
		Отказ = Истина;
		Возврат;	
	КонецЕсли;
	// ----------------------------------------------------------------
	// 3. Добавляем значения производителя и марки 
	// ----------------------------------------------------------------
	
	ФормированиеПроизводителяИМарки(НовыйЭлемент, СтрокаТЧ, Отказ);
	
	// ----------------------------------------------------------------
	// 4. Записываем дополнительные свойства объекта 
	// ----------------------------------------------------------------
	ФормированиеДополнительныхРеквизитов(НовыйЭлемент, СтрокаТЧ, GLN_supplier);                              
	
КонецПроцедуры// } #wortmann

// #wortmann { 
// Процедура формирует наименование для созданной или полученной Номенклатуры
// Галфинд_Домнышева 2022/10/21
//
// Параметры:
//	НовыйЭлемент - СправочникОбъект.Номенклатура - созданный объект справочника Номенклатура
//	СтрокаТЧ - Тип.СтрокаТЧ - строка табличной части для которой ищется предок с заданным именем
//	Product_group_supplier - Строка - значение ТЭГ "Product_group_supplier"
//	GLN_supplier - Строка - значение ТЭГ "GLN_supplier"
//	ТаблицаРегистраСоответствияСвойств - Таблица Значений - выгрузка РегистрСведений_гф_ArticlrDescriptions
Процедура ФормированиеНаименования(НовыйЭлемент, СтрокаТЧ, Product_group_supplier, GLN_supplier,
									ТаблицаРегистраСоответствияСвойств)
		
	Если ЗначениеЗаполнено(Product_group_supplier) Тогда
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Product_group", Product_group_supplier);
		СтруктураОтбора.Вставить("GLN_Supplier", GLN_supplier);
		СтрокиНаименований	= ТаблицаРегистраСоответствияСвойств.НайтиСтроки(СтруктураОтбора);		
		Если СтрокиНаименований.Количество() > 0 Тогда
			
			СтрокаН = СтрокиНаименований[0];			
			
			РусскоеНаименование	 = СтрокаН.NameRU;
			// проверка наименования 
			ИскомоеНаименование = РусскоеНаименование + " " + НовыйЭлемент.КоллекцияНоменклатуры;
			Если СокрЛП(НовыйЭлемент.Наименование) <> ИскомоеНаименование Тогда
								
				НовыйЭлемент.Наименование = ИскомоеНаименование;
			КонецЕсли;
			
			Если СокрЛП(НовыйЭлемент.НаименованиеПолное) <> ИскомоеНаименование Тогда
				НовыйЭлемент.НаименованиеПолное = ИскомоеНаименование;
			КонецЕсли;
						
			// если указан родитель, помещаем в эту группу
			Родитель = СтрокаН.Родитель;
			Если НЕ НовыйЭлемент.Родитель = Родитель Тогда
				НовыйЭлемент.Родитель = Родитель;
			КонецЕсли;
			
			// проверка вида номенклатуры, по умолчанию присваиваем "Обувь в парах импортная"	
			ФормированиеВидаНоменклатурыПолСтавки(НовыйЭлемент, СтрокаН, СтрокаТЧ);
			
			НовыйЭлемент.Записать(); // Галфинд_Домнышева 30.01.23_запишем элемент чтобы обновилась ссылка на новое наименование
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// #wortmann { 
// Процедура формирует ВидНоменклатуры, Пол, СтавкиНДС
// Галфинд_Домнышева 2022/10/21
//
// Параметры:
//	НовыйЭлемент - СправочникОбъект.Номенклатура - созданный объект справочника Номенклатура
//	СтрокаН - ЭлементМассива - Элемент Массива отобранного из РегистрСведений_гф_ArticlrDescriptions 
//	СтрокаТЧ - Тип.СтрокаТЧ - строка табличной части для которой ищется предок с заданным именем
Процедура ФормированиеВидаНоменклатурыПолСтавки(НовыйЭлемент, СтрокаН, СтрокаТЧ) 
	
	СтавкаНДСПоУмолчанию = НайтиЗначениеПоРеквизитуСправочника ("СтавкиНДС", "Наименование", "20%");
	ВидНоменклатуры = СтрокаН.ВидНоменклатуры;
	Если НЕ НовыйЭлемент.ВидНоменклатуры = ВидНоменклатуры Тогда
		НовыйЭлемент.ВидНоменклатуры = ВидНоменклатуры;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаН.СтавкаНДС) Тогда
		СтавкаНДС = СтрокаН.СтавкаНДС;
	Иначе
		СтавкаНДС = СтавкаНДСПоУмолчанию;
	КонецЕсли;
	
	Если НЕ НовыйЭлемент.СтавкаНДС = СтавкаНДС Тогда
		НовыйЭлемент.СтавкаНДС = СтавкаНДС;
	КонецЕсли;

	Если ЗначениеЗаполнено (СтрокаН.ПолНоменклатуры) Тогда
		ЗаписатьПолНоменклатуры(СтрокаН.ПолНоменклатуры, НовыйЭлемент, СтрокаТЧ);
	КонецЕсли;

КонецПроцедуры

// #wortmann { 
// Процедура формирует Производителя и Марку
// Галфинд_Домнышева 2022/10/21
//
// Параметры:
//	НовыйЭлемент - СправочникОбъект.Номенклатура - созданный объект справочника Номенклатура
//	СтрокаТЧ - Тип.СтрокаТЧ - строка табличной части для которой ищется предок с заданным именем
//	Отказ - параметр системы
Процедура ФормированиеПроизводителяИМарки(НовыйЭлемент, СтрокаТЧ, Отказ)
	
	СтранаПроисхождения = НайтиСтрокуДереваПоТэгу("Country_of_origin", Отказ, СтрокаТЧ);	
	Если ЗначениеЗаполнено(СтранаПроисхождения) Тогда
		НайденныйЭлемент = Справочники.СтраныМира.НайтиПоРеквизиту("КодАльфа2", СокрЛП(СтранаПроисхождения));
		
		Если ЗначениеЗаполнено(НайденныйЭлемент) Тогда
			
			Если НовыйЭлемент.СтранаПроисхождения <> НайденныйЭлемент Тогда
				НовыйЭлемент.СтранаПроисхождения = НайденныйЭлемент;
			КонецЕсли;
		Иначе
			СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + " в строке №" + СтрокаТЧ.ПорядковыйНомерСтроки 
			+ ". Описание ошибки: В классификаторе стран мира не найдено указанное значение";
			ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке);
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
		КонецЕсли;
	Иначе
		СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + " в строке №" + СтрокаТЧ.ПорядковыйНомерСтроки
		+ ". Описание ошибки: Не заполнено значение страны происхождения";
		ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
	КонецЕсли;
	
	// (н)Галфинд_ДомнышеваКР_02_02_31
	Марка = НайтиСтрокуДереваПоТэгу("Brand_name", Отказ, СтрокаТЧ);
	Если ЗначениеЗаполнено(Марка) Тогда
		НайденныйЭлемент = НайтиЗначениеПоРеквизитуСправочника("Марки", "Наименование", Марка);
		
		Если ЗначениеЗаполнено(НайденныйЭлемент) Тогда
			
			Если НовыйЭлемент.Марка <> НайденныйЭлемент Тогда
				НовыйЭлемент.Марка = НайденныйЭлемент;
			КонецЕсли;
		Иначе
			СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + " в строке №" + СтрокаТЧ.ПорядковыйНомерСтроки 
			+ ". Описание ошибки: В справочнике Марки не найдено указанное значение";
			ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке);
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
		КонецЕсли;
	КонецЕсли;
	// (к)Галфинд_ДомнышеваКР_02_02_31
КонецПроцедуры

// #wortmann { 
// Процедура формирует дополнительные реквизиты хранящиеся в РегистрСведений.ДополнительныеСведения
// Галфинд_Домнышева 2022/10/21
//
// Параметры:
//	НовыйЭлемент - СправочникОбъект.Номенклатура - созданный объект справочника Номенклатура
//	СтрокаТЧ - Тип.СтрокаТЧ - строка табличной части для которой ищется предок с заданным именем
//	GLN_supplier - Строка - значение ТЭГ "GLN_supplier"
Процедура ФормированиеДополнительныхРеквизитов(НовыйЭлемент, СтрокаТЧ, GLN_supplier)  
	
	Если НовыйЭлемент <> Неопределено Тогда
		
		СтруктураОтбора = Новый Структура;	
		СтруктураОтбора.Вставить("НомерСтрокиРодителя", СтрокаТЧ.НомерСтрокиРодителя);	
		СтруктураОтбора.Вставить("СтатусПоля", Перечисления.гф_СтатусыПоля.Информационное);
		
		ДополнительныеРеквизиты = ЗагруженныеСтроки.НайтиСтроки(СтруктураОтбора); 
		
		СтруктураОтбора = Новый Структура;	
		СтруктураОтбора.Вставить("НомерСтрокиРодителя", СтрокаТЧ.НомерСтрокиРодителя);	
		СтруктураОтбора.Вставить("СтатусПоля", Перечисления.гф_СтатусыПоля.Обязательное);
		ОбязательныеРеквизиты = ЗагруженныеСтроки.НайтиСтроки(СтруктураОтбора); 
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДополнительныеРеквизиты, ОбязательныеРеквизиты);
		
		СтруктураОтбора = Новый Структура;	
		СтруктураОтбора.Вставить("НомерСтрокиРодителя", СтрокаТЧ.НомерСтрокиРодителя);	
		СтруктураОтбора.Вставить("СтатусПоля", Перечисления.гф_СтатусыПоля.Критическое);
		КритическиеРеквизиты = ЗагруженныеСтроки.НайтиСтроки(СтруктураОтбора); 
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДополнительныеРеквизиты, КритическиеРеквизиты);		
		
		ЗначенияСвойств = Новый Массив;
		
		ЗаполнитьЗначенияСвойствНовогоЭлемента(НовыйЭлемент, ДополнительныеРеквизиты, СтрокаТЧ, ЗначенияСвойств);		
		
		Если ЗначениеЗаполнено(GLN_supplier) Тогда
			Свойство_НомерОрганизации = НайтиДополнительныйРеквизитПоНаименованию("GLN_supplier"); 
			Значение = Новый Структура("Свойство, Значение", Свойство_НомерОрганизации, GLN_supplier);
			ЗначенияСвойств.Добавить(Значение);
		КонецЕсли;
		
		Если ЗначенияСвойств.Количество() > 0 Тогда
			ЗаписатьНаборСвойствВРегистр(НовыйЭлемент.Ссылка, ЗначенияСвойств, СтрокаТЧ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры 

// #wortmann { 
// Процедура заполняет оставшиеся реквизиты и заполняет массив ЗначенияСвойств
// Галфинд_Домнышева 2022/10/21
//
// Параметры:
//	НовыйЭлемент - СправочникОбъект.Номенклатура - созданный объект справочника Номенклатура
//	ДополнительныеРеквизиты - ТаблицаЗначений - возможные для заполнения дополнительные реквизиты Номенклатуры
//	СтрокаТЧ - Тип.СтрокаТЧ - строка табличной части для которой ищется предок с заданным именем
//	ЗначенияСвойств - Массив
Процедура ЗаполнитьЗначенияСвойствНовогоЭлемента(НовыйЭлемент, ДополнительныеРеквизиты, СтрокаТЧ, ЗначенияСвойств)
	
	Для каждого Реквизит Из ДополнительныеРеквизиты Цикл 
		ИндексЗначения = Реквизит.ПолеЗагрузки.Объект;
		
		Если Реквизит.ПолеЗагрузки.ТипОбъекта = "Номенклатура" 
			И Реквизит.ПолеЗагрузки.Объект <> "Артикул" Тогда
			ТипРеквизита = ТипЗнч(НовыйЭлемент[ИндексЗначения]);
			МетаданныеОбъекта = НовыйЭлемент[ИндексЗначения].Метаданные();
			
			ЗаписатьПростыеТипы(НовыйЭлемент, ТипРеквизита, Реквизит, ИндексЗначения, МетаданныеОбъекта);
			Если Реквизит.Тэг = "Customs_tarif_number" ИЛИ Реквизит.Тэг = "Brand_name" Тогда												
				Свойство = НайтиДополнительныйРеквизитПоНаименованию(Реквизит.Тэг);
				Значение = Новый Структура("Свойство, Значение", Свойство, Реквизит.Значение);
				ЗначенияСвойств.Добавить(Значение);	
			КонецЕсли;
		ИначеЕсли ТипЗнч(Реквизит.ПолеЗагрузки.ТипОбъекта)
			= Тип("СправочникСсылка.НаборыДополнительныхРеквизитовИСведений") Тогда												
			Значение = Новый Структура("Свойство, Значение", Реквизит.ПолеЗагрузки.Объект, Реквизит.Значение);
			ЗначенияСвойств.Добавить(Значение);
			Если Реквизит.Тэг = "Picture_name"  Тогда
				ПоискИЗаписьКартинки(Реквизит.Значение, СтрокаТЧ, НовыйЭлемент);
			КонецЕсли;
		ИначеЕсли Реквизит.Тэг = "EAN" Тогда
			СоздатьШтрихкод(СтрокаТч, НовыйЭлемент, Реквизит.Значение, НовыйЭлемент.ЕдиницаИзмерения );
		Иначе
			Продолжить;
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

// #wortmann { 
// Записывает в НовыйЭлемент значения простых реквизитов
// Галфинд_Домнышева 2022/10/21
//
// Параметры:
//	НовыйЭлемент - СправочникОбъект.Номенклатура - созданный объект справочника Номенклатура
//	ТипРеквизита - тип значения по индексуЗначения 
//	Реквизит - ЭлементТаблицыЗначений - элемент ТЗ ДополнительныеРеквизиты 
//	ИндексЗначения - Строка - возможные типы значений из реквизита Объект спр гф_НастройкаЗагружаемыхДанных 
//	МетаданныеОбъекта - ОбъектМетаданных 
Процедура ЗаписатьПростыеТипы(НовыйЭлемент, ТипРеквизита, Реквизит, ИндексЗначения, МетаданныеОбъекта)
	
	Если ТипРеквизита = Тип("Строка") Тогда
		НовыйЭлемент[ИндексЗначения] = Строка(Реквизит.Значение);
	ИначеЕсли ТипРеквизита = Тип("Число") Тогда
		НовыйЭлемент[ИндексЗначения] = Число(Реквизит.Значение);
	ИначеЕсли ТипРеквизита = Тип("Дата") Тогда
		НовыйЭлемент[ИндексЗначения] = Дата(Реквизит.Значение);
	ИначеЕсли СтрНайти(МетаданныеОбъекта.ПолноеИмя(), "Справочник") > 0 Тогда	
		ЗначениеСправочника = Справочники[МетаданныеОбъекта.Имя].НайтиПоКоду(Реквизит.Значение);
		Если ЗначениеЗаполнено(ЗначениеСправочника) Тогда
			НовыйЭлемент[ИндексЗначения] = ЗначениеСправочника;
		Иначе ЗначениеСправочника = Справочники[МетаданныеОбъекта.Имя].НайтиПоНаименованию(Реквизит.Значение); 
			Если ЗначениеЗаполнено(ЗначениеСправочника) И МетаданныеОбъекта.ПолноеИмя() <> "Справочник.КлассификаторТНВЭД" Тогда
				НовыйЭлемент[ИндексЗначения] = ЗначениеСправочника;
			Иначе
				ИзменитьКомментарийВРегистре(Реквизит.ПорядковыйНомерСтроки, Реквизит.Тэг, "Значение в базе не найдено");
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// #wortmann { 
// Находит значение в ПВХ ДополнительныеРеквизитыИСведения по наименованию 
// Галфинд_Домнышева 2022/10/19
//
// Параметры:
//	Наименование - Строка - имя искомого реквизита.
//
// Возвращаемое значение:
//	ПланВидовХарактеристикСсылка - если значение найдено, 
//	Неопределено - если значение реквизита не найдено.
//
Функция НайтиДополнительныйРеквизитПоНаименованию(Наименование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
		|ГДЕ
		|	ДополнительныеРеквизитыИСведения.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// #wortmann { 
// Дописывает дополнительное свойство GLN_manufacturer объекта в РС ДополнительныеСведения
// Галфинд_Домнышева 2022/10/10
//
// Параметры:
//	ПолНоменклатуры - ПеречислениеСсылка.гф_ПолНоменклатуры - Значение Пола Номенклатуры из ArticlrDescriptions
//	НовыйЭлемент - СправочникОбъект.Номенклатура - создоваемый объект справочника Номенклатура
//	СтрокаТЧ - Тип.СтрокаТЧ - строка табличной части для которой ищется предок с заданным именем
Процедура ЗаписатьПолНоменклатуры(ПолНоменклатуры, НовыйЭлемент, СтрокаТЧ)
	
	ЗначенияСвойств = Новый Массив;
	Свойство_Пол = НайтиДополнительныйРеквизитПоНаименованию("Пол");
	Значение = Новый Структура("Свойство, Значение", Свойство_Пол, ПолНоменклатуры);
	ЗначенияСвойств.Добавить(Значение);
	ЗаписатьНаборСвойствВРегистр(НовыйЭлемент.Ссылка, ЗначенияСвойств, СтрокаТЧ);
	
КонецПроцедуры

// #wortmann { 
// выбирает значение ТЭГа по порядковому номеру строки родителя для текущей строки
// Галфинд_Домнышева 2022/09/12
//
// Параметры:
//	Тэг - Строка - имя ТЭГа из файла
//	Отказ - параметр системы
//	СтрокаТЧ - Тип.СтрокаТЧ - строка табличной части для которой ищется предок с заданным именем
//
// Возвращаемое значение:
//	Строка - значение ТЭГа по порядковому номеру строки родителя для текущей строки
//	Неопределено - если по указанному ТЭГу нет значений или этого ТЭГа нет в файле
Функция НайтиСтрокуДереваПоТэгу(Тэг, Отказ, СтрокаТЧ = Неопределено)
	
	СтруктураОтбора = Новый Структура;
	// BSLLS:Typo-off
	СтруктураОтбора.Вставить("Тэг", Тэг);
	// BSLLS:Typo-on
	Если Не СтрокаТЧ = Неопределено Тогда
		СтруктураОтбора.Вставить("НомерСтрокиРодителя", СтрокаТЧ.НомерСтрокиРодителя);
	КонецЕсли;
	НайденноеЗначение = ЗагруженныеСтроки.НайтиСтроки(СтруктураОтбора);
	Если НайденноеЗначение.Количество() > 0 Тогда
		Если ЗначениеЗаполнено(НайденноеЗначение[0].Значение) Тогда
			Возврат НайденноеЗначение[0].Значение;
		Иначе
			Если СтрокаТЧ = Неопределено Тогда
				// BSLLS:Typo-off
				СообщениеОбОшибке = "Ошибка при проведении документа " + Ссылка + ". Описание ошибки: Не заполнен тэг " + Тэг;
				ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке);
			Иначе
				СообщениеОбОшибке = "Ошибка при проведении документа " + Ссылка + " в строке №" + СтрокаТЧ.ПорядковыйНомерСтроки 
									+ ". Описание ошибки: Не заполнено значение строки " + Тэг;
				ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке);
			КонецЕсли;
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, Ссылка, Ссылка, СообщениеОбОшибке);
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		СообщениеОбОшибке = "Ошибка при проведении документа " + Ссылка + ". Описание ошибки: Не найден тэг " + Тэг;
		// BSLLS:Typo-on
		ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, Ссылка, Ссылка, СообщениеОбОшибке);
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции// } #wortmann 

// #wortmann { 
// выбирает значение ТЭГа по порядковому номеру текущей строки
// Галфинд_Домнышева 2022/09/12
//
// Параметры:
//	Тэг - Строка - имя ТЭГа из файла
//	Отказ - параметр системы
//	СтрокаТЧ - Тип.СтрокаТЧ - строка табличной части для которой ищется предок с заданным именем
//
// Возвращаемое значение:
//	Строка - значение ТЭГа по порядковому номеру текущей строки
//	Неопределено - если по указанному ТЭГу нет значений или этого ТЭГа нет в файле
Функция НайтиСтрокуДереваПоТэгуОтПорядкового(Тэг, Отказ,  СтрокаТЧ = Неопределено)
	
	СтруктураОтбора = Новый Структура; 
	// BSLLS:Typo-off
	СтруктураОтбора.Вставить("Тэг", Тэг);
	Если Не СтрокаТЧ = Неопределено Тогда
		СтруктураОтбора.Вставить("НомерСтрокиРодителя", СтрокаТЧ.ПорядковыйНомерСтроки);
	КонецЕсли;
	НайденноеЗначение = ЗагруженныеСтроки.НайтиСтроки(СтруктураОтбора);
	Если НайденноеЗначение.Количество() > 0 Тогда
		Если ЗначениеЗаполнено(НайденноеЗначение[0].Значение) Тогда
			Возврат НайденноеЗначение[0].Значение;
		Иначе
			Если СтрокаТЧ = Неопределено Тогда
				СообщениеОбОшибке = "Ошибка при проведении документа " + Ссылка + ". Описание ошибки: Не заполнен тэг " + Тэг;
				ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке);
			Иначе
				СообщениеОбОшибке = "Ошибка при проведении документа " + Ссылка + " в строке №" + СтрокаТЧ.ПорядковыйНомерСтроки 
									+ ". Описание ошибки: Не заполнено значение строки " + Тэг;
				ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке);
			КонецЕсли;
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, Ссылка, Ссылка, СообщениеОбОшибке);
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		СообщениеОбОшибке = "Ошибка при проведении документа " + Ссылка + ". Описание ошибки: Не найден тэг " + Тэг;
		// BSLLS:Typo-on
		ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, Ссылка, Ссылка, СообщениеОбОшибке);
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции// } #wortmann

// #wortmann { 
// выбирает все тэги по номеру строки родителя
// Галфинд_Домнышева 2022/09/12
//
// Параметры:
//	СтрокаТЧ - Тип.СтрокаТЧ - строка табличной части для которой ищется предок с заданным именем
//
// Возвращаемое значение:
//	Структура - структура тэгов по найденных по номеру строки родителя
Функция ВыбратьВсеТэгиСвойствПоСтрокеАртикулу(СтрокаТЧ)
	
	Результат = Новый Структура;
	
    СтруктураОтбора = Новый Структура;
	Если СтрокаТЧ <> Неопределено Тогда
		СтруктураОтбора.Вставить("НомерСтрокиРодителя", СтрокаТЧ.НомерСтрокиРодителя);
	Иначе
		Возврат Результат;
	КонецЕсли;
	
	МассивСвойств = ЗагруженныеСтроки.НайтиСтроки(СтруктураОтбора);
	Для каждого Свойство Из МассивСвойств Цикл
		Результат.Вставить(Свойство.Тэг, Свойство.Значение);
	КонецЦикла;
	
    Возврат Результат;

КонецФункции// } #wortmann

// #wortmann { 
// Записывает дополнительные свойства объекта в РС ДополнительныеСведения
// Галфинд_Домнышева 2022/09/12
//
// Параметры:
//	Ссылка - СправочникСсылка.Номенклатура - ссылка на создоваемый объект справочника Номенклатура
//	ЗначенияСвойств - Структура - набор записываемых свойств объекта
//	СтрокаТЧ - Тип.СтрокаТЧ - строка табличной части для которой ищется предок с заданным именем
Процедура ЗаписатьНаборСвойствВРегистр(Ссылка, ЗначенияСвойств, СтрокаТЧ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДополнительныеСведения");
		ЭлементБлокировки.УстановитьЗначение("Объект", Ссылка);
		Блокировка.Заблокировать();
																			   
		Набор = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
		Набор.Отбор.Объект.Установить(Ссылка);
		Набор.Прочитать();
		ТекущиеЗначения = Набор.Выгрузить();                             
		
		Для Каждого Строка Из ЗначенияСвойств Цикл
			Если НЕ ЗначениеЗаполнено(Строка.Значение) Тогда
				Продолжить;
			КонецЕсли;
			Запись = ТекущиеЗначения.Найти(Строка.Свойство, "Свойство");
			Если Запись = Неопределено Тогда
				Запись = ТекущиеЗначения.Добавить();
				Запись.Свойство = Строка.Свойство;
				Если Не ЗначениеЗаполнено(Запись.Свойство) Тогда
					Продолжить;
				КонецЕсли;
				Запись.Объект   = Ссылка;
			КонецЕсли;
			Запись.Значение = Строка.Значение;
			
		КонецЦикла;
		Набор.Загрузить(ТекущиеЗначения);
		Набор.Записать();
		
	Исключение
		СообщениеОбОшибке = "Ошибка при проведении документа " + Ссылка + " в строке №" + СтрокаТЧ.ПорядковыйНомерСтроки 
							+ ". Описание ошибки: Не удалось загрузить дополнительные сведения. " ;
		ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, Ссылка, Ссылка, СообщениеОбОшибке);		
	КонецПопытки;
	
КонецПроцедуры// } #wortmann 

// #wortmann { 
// Создает записи в РС ШтрихкодыНоменклатуры
// Галфинд_Домнышева 2022/09/12
//
// Параметры:
//	СтрокаТЧ - Тип.СтрокаТЧ - строка табличной части для которой ищется предок с заданным именем
//	НовыйЭлемент - СправочникОбъект.Номенклатура - создоваемый объект справочника Номенклатура
//	EAN - Строка - значение Тэга "EAN"
//	ЕИКлассификатор - СправочникСсылка.УпаковкиЕдиницыИзмерения - единица измерения нового элемента
Процедура СоздатьШтрихкод(СтрокаТЧ, НовыйЭлемент, EAN, ЕИКлассификатор) 
	Характеристика = Неопределено;
	
	Размер =  НайтиСтрокуДереваПоТэгу("Size", , СтрокаТЧ);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|   ХарактеристикиНоменклатуры.Владелец = &Владелец
	|	И ХарактеристикиНоменклатуры.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Владелец", НовыйЭлемент.ВидНоменклатуры);
	Запрос.УстановитьПараметр("Наименование", Размер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка.Следующий();
		Характеристика = Выборка.Ссылка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
		|	И ШтрихкодыНоменклатуры.Характеристика = &Характеристика";
	
	Запрос.УстановитьПараметр("Номенклатура", НовыйЭлемент.Ссылка);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();

	Если НЕ РезультатЗапроса.Пустой() Тогда
        Выборка.Следующий();
		
		НайденныйШтрихкод = Выборка.Штрихкод;
		Если НайденныйШтрихкод <> EAN Тогда
			
        ТекЗапись = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
        ТекЗапись.Штрихкод = НайденныйШтрихкод;
        ТекЗапись.Прочитать();
        
        ТекЗапись.Штрихкод  = EAN;
        Попытка
            ТекЗапись.Записать();
		Исключение
			СообщениеОбОшибке = "Ошибка при проведении документа " + НовыйЭлемент.Ссылка + " в строке №" 
								+ СтрокаТЧ.ПорядковыйНомерСтроки + ". Описание ошибки: Не удалось загрузить ШтрихКоды " + ОписаниеОшибки();
			ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке);
		КонецПопытки;
	    КонецЕсли;
       	
	Иначе
		Попытка	
			МенеджерЗаписиШтрихКода = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
			МенеджерЗаписиШтрихКода.Номенклатура   = НовыйЭлемент.Ссылка;
			МенеджерЗаписиШтрихКода.Характеристика = Характеристика;
			МенеджерЗаписиШтрихКода.Упаковка       = ЕИКлассификатор;
			МенеджерЗаписиШтрихКода.Штрихкод       = EAN;
			МенеджерЗаписиШтрихКода.Записать();
		Исключение
			СообщениеОбОшибке = "Ошибка при проведении документа " + Ссылка + " в строке №" + СтрокаТЧ.ПорядковыйНомерСтроки 
								+ ". Описание ошибки: Не удалось загрузить ШтрихКоды " + ОписаниеОшибки();
			ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке);
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, Ссылка, Ссылка, СообщениеОбОшибке);		
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры// } #wortmann

// #wortmann { 
// Дописывает дополнительное свойство GLN_manufacturer объекта в РС ДополнительныеСведения
// Галфинд_Домнышева 2022/09/12
//
// Параметры:
//	НовыйЭлемент - СправочникОбъект.Номенклатура - создоваемый объект справочника Номенклатура
//	GLN_manufacturer - Строка - значение ТЭГа GLN_manufacturer
//	СтрокаТЧ - Тип.СтрокаТЧ - строка табличной части для которой ищется предок с заданным именем
// BSLLS:LatinAndCyrillicSymbolInWord-off
Процедура ДописатьСвойствоGLN_manufacturer(НовыйЭлемент, GLN_manufacturer, СтрокаТЧ) 
// BSLLS:LatinAndCyrillicSymbolInWord-on	
	Если НЕ ЗначениеЗаполнено(GLN_manufacturer) Тогда
		Возврат;
	КонецЕсли;
	ЗначенияСвойств = Новый Массив;
	Свойство_Производителя =  НайтиДополнительныйРеквизитПоНаименованию("GLN_manufacturer");
	Значение = Новый Структура("Свойство, Значение", Свойство_Производителя, GLN_manufacturer);
	ЗначенияСвойств.Добавить(Значение);
	
	ЗаписатьНаборСвойствВРегистр(НовыйЭлемент.Ссылка, ЗначенияСвойств, СтрокаТЧ);
	
	НовыйЭлемент.ПроизводительИмпортерКонтрагент = НайтиЗначениеПоРеквизитуСправочника("Контрагенты", 
																	"гф_GLN_номер", GLN_manufacturer);
КонецПроцедуры// } #wortmann

// #wortmann { 
// заполняет ТЧ Товары элемента спр ВариантыКомплектации
// Галфинд_Домнышева 2022/09/12
//
// Параметры:
//	ПорядковыйНомерСтроки - Строка
//	Тэг - Строка - имя ТЭГа из файла
//	Комментарий - Строка - строка табличной части НовогоДокумента
// BSLLS:Typo-off
Процедура ИзменитьКомментарийВРегистре(ПорядковыйНомерСтроки, Тэг, Комментарий)
	
	НаборЗаписейПоТэгу = РегистрыСведений.гф_СтрокиДокументаДанныеЗагрузки.СоздатьНаборЗаписей();
	НаборЗаписейПоТэгу.Отбор.Документ.Значение = ЭтотОбъект.Ссылка;
	НаборЗаписейПоТэгу.Отбор.Документ.Использование = Истина;
	НаборЗаписейПоТэгу.Отбор.ПорядковыйНомерСтроки.Значение = ПорядковыйНомерСтроки;
	НаборЗаписейПоТэгу.Отбор.ПорядковыйНомерСтроки.Использование = Истина;
	НаборЗаписейПоТэгу.Отбор.Тэг.Значение = Тэг;
	НаборЗаписейПоТэгу.Отбор.Тэг.Использование = Истина;
	
	НаборЗаписейПоТэгу.Прочитать();
	
	Для каждого Запись Из НаборЗаписейПоТэгу Цикл
		Запись.Комментарий = Комментарий;
	КонецЦикла;
	НаборЗаписейПоТэгу.Записать();	
// BSLLS:Typo-on	
КонецПроцедуры// } #wortmann

// #wortmann { 
// поиск картинки и запись в базу ее номера
// Галфинд_Домнышева 2022/09/12
//
// Параметры:
//	РеквизитЗначение - Строка - Значение ТЭГа "Picture_name" 
//	СтрокаТЧ - Тип.СтрокаТЧ - строка табличной части для которой ищется предок с заданным именем
//	НовыйЭлемент - СправочникОбъект.Номенклатура> - создоваемый объект справочника Номенклатура
Процедура ПоискИЗаписьКартинки(РеквизитЗначение, СтрокаТЧ, НовыйЭлемент)
	
	КартинкаОсновноеИзображение = Неопределено;
	
	Если Не ЗначениеЗаполнено(РеквизитЗначение) Тогда
		СообщениеОбОшибке = "Ошибка при загрузке поля " + ЭтотОбъект + " в строке №" + СтрокаТЧ.ПорядковыйНомерСтроки
							+ ". Описание ошибки: Не заполнено значение Picture_Name";
		ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
	Иначе	
		ЗначениеКартинки = НРег(СокрЛП(РеквизитЗначение));
			
		Картинка = НайтиЗначениеПоРеквизитуСправочника("НоменклатураПрисоединенныеФайлы",
													"Наименование", ЗначениеКартинки);
		Если ЗначениеЗаполнено(Картинка) Тогда
			КартинкаОсновноеИзображение = Картинка;
		КонецЕсли;
		
		Если НЕ НовыйЭлемент.ФайлКартинки = КартинкаОсновноеИзображение 
			И КартинкаОсновноеИзображение <> Неопределено Тогда	
			НовыйЭлемент.ФайлКартинки = КартинкаОсновноеИзображение;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры// } #wortmann

// #wortmann { 
// Подбирает и записывает в документ договор для заданного Контрагента
// Галфинд_Домнышева 2022/09/12
//                               
// Параметры:
//	НовыйДокумент - ДокументОбъект.ЗаказКлиента - Создаваемый документ
//
Процедура ДоговорДляКонтрагента(НовыйДокумент)	
	
	КомиссионныеПродажи25 = ?(ЗначениеЗаполнено(НовыйДокумент.Соглашение)
	И НовыйДокумент.Соглашение.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
	И НовыйДокумент.Соглашение.КомиссионныеПродажи25, Истина, Ложь);	
	
	Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(НовыйДокумент, 
	НовыйДокумент.ХозяйственнаяОперация, 
	НовыйДокумент.Валюта, , 
	КомиссионныеПродажи25);	
	
	Если Договор <> НовыйДокумент.Договор Тогда
		НовыйДокумент.Договор = Договор;
		
		НовыйДокумент.ГруппаФинансовогоУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НовыйДокумент.Договор,
												"ГруппаФинансовогоУчета");
		ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(НовыйДокумент.Договор, НовыйДокумент.БанковскийСчет, 
														НовыйДокумент.БанковскийСчетКонтрагента);
		
	КонецЕсли;
		
КонецПроцедуры// } #wortmann

// #wortmann { 
// заполняет ТЧ Товары элемента спр ВариантыКомплектации
// Галфинд_Домнышева 2022/09/12
//
// Параметры:
//	НайденныйВариантКомплектации - СправочникСсылка.ВариантыКомплектацииНоменклатуры
//	НовыйЭлементТоварыВКоробах - ТЧ.гф_ТоварыВКоробах> строка табличной части НовогоДокумента
//	НовыйДокумент - ДокументОбъект.ЗаказКлиента - Создаваемый документ
//	ДатаОтгрузки - Дата - дата доставки по ТЭГу Delivery_date
//	ЦенаКоробаИз5 - Число - значение ТЭГа "Effective_purchase_price" по текущей строке 
Процедура ЗагрузитьТЧТовары(НайденныйВариантКомплектации, НовыйЭлементТоварыВКоробах, НовыйДокумент,
							ДатаОтгрузки, ЦенаКоробаИз5)
	
	ТипЦеныЗакупочная = ПланыВидовХарактеристик.гф_ГлобальныеЗначения.НайтиПоРеквизиту("Ключ",
														"гф_ГлобальныеЗначенияОптоваяЗакупочнаяЦена").Значение;
	
	ВременнаяТаблицаТЧТовары = Новый ТаблицаЗначений;
	ВременнаяТаблицаТЧТовары.Колонки.Добавить("Номенклатура");
	ВременнаяТаблицаТЧТовары.Колонки.Добавить("Характеристика");
	ВременнаяТаблицаТЧТовары.Колонки.Добавить("КоличествоУпаковок"); 

	Для каждого СтрокаСостава Из НайденныйВариантКомплектации.Товары Цикл
		
		НоваяСтрока = ВременнаяТаблицаТЧТовары.Добавить();
		НоваяСтрока.Номенклатура = СтрокаСостава.Номенклатура;
		НоваяСтрока.Характеристика = СтрокаСостава.Характеристика;
		НоваяСтрока.КоличествоУпаковок = СтрокаСостава.КоличествоУпаковок;
		
	КонецЦикла;	
	
	ВременнаяТаблицаТЧТовары.Свернуть("Номенклатура, Характеристика", "КоличествоУпаковок");
	МассивЦен = Новый Массив;
		
	Для каждого Строка Из ВременнаяТаблицаТЧТовары Цикл
		СтруктураВыборки = Новый Структура("Номенклатура, Характеристика");
		
		ЗаполнитьЗначенияСвойств(СтруктураВыборки, Строка);
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", Строка.Номенклатура);			
		Отбор.Вставить("ВидЦены", ТипЦеныЗакупочная);		
		
		Цена = РегистрыСведений.ЦеныНоменклатуры25.ПолучитьПоследнее(НовыйДокумент.Дата, Отбор).Цена;
		
		Если Цена = 0 И ФункцияДокумента = "4" Тогда 
			
			Цена = ЦенаКоробаИз5 / НайденныйВариантКомплектации.КоличествоУпаковок; 
			
			Если НЕ НовыйДокумент.ДополнительныеСвойства.Свойство("гф_ОбработкаОтгрузкаПоЗаказам") Тогда
			
			НовыйДокумент.Комментарий = "Цены коробов взяты из I5";

			НовыйДокумент.ДополнительныеСвойства.Вставить("гф_ОбработкаОтгрузкаПоЗаказам", Истина); 
			
			КонецЕсли;
			
		КонецЕсли;
		
		ЦенаСтроки = Цена * Строка.КоличествоУпаковок;
			
		МассивЦен.Добавить(ЦенаСтроки);
		
		Если НовыйДокумент.Товары.НайтиСтроки(СтруктураВыборки).Количество() = 0 Тогда
			НоваяСтрока = НовыйДокумент.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка); 
			
			НоваяСтрока.Количество = Строка.КоличествоУпаковок;
			НоваяСтрока.КоличествоУпаковок = Строка.КоличествоУпаковок;
			НоваяСтрока.Цена = Цена;
			НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению;
			НоваяСтрока.ДатаОтгрузки = ДатаОтгрузки; 
			НоваяСтрока.ВидЦены = ТипЦеныЗакупочная;
			// 12_10_2022
			// по замечаниям от Златы
			НоваяСтрока.Обособленно = Истина;
			//
		Иначе 
			НовыйДокумент.Товары.НайтиСтроки(СтруктураВыборки)[0].Количество = 
										НовыйДокумент.Товары.НайтиСтроки(СтруктураВыборки)[0].Количество + Строка.КоличествоУпаковок;
			НовыйДокумент.Товары.НайтиСтроки(СтруктураВыборки)[0].КоличествоУпаковок = 
										НовыйДокумент.Товары.НайтиСтроки(СтруктураВыборки)[0].Количество + Строка.КоличествоУпаковок; 
		КонецЕсли;
				 
	КонецЦикла;
	ЦенаКороба = 0;
	Для Индекс = 0 По МассивЦен.ВГраница() Цикл
		ЦенаКороба = ЦенаКороба + МассивЦен[Индекс];
	КонецЦикла;
	НовыйЭлементТоварыВКоробах.ЦенаКороба = ЦенаКороба;
	   	   
КонецПроцедуры// } #wortmann 

// #wortmann { 
// заполняет Суммы по документы, типовой механизм
// Галфинд_Домнышева 2022/09/12
//
// Параметры:
//	НовыйДокумент - ДокументОбъект.ЗаказКлиента - Создаваемый документ
Процедура ЗаполнитьСуммы(НовыйДокумент) 
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(НовыйДокумент);
	ПараметрыЗаполненияСтавки = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(НовыйДокумент, Истина);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ПараметрыЗаполненияСтавки);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(НовыйДокумент.Товары, СтруктураДействий, Неопределено);
	
КонецПроцедуры// } #wortmann 

// #wortmann { 
// Получает номенклатуру по артикулу
// Галфинд_Домнышева 2022/09/12
//
// Параметры:
//	Артикул - Строка - артикул номенклатуры из файла
//
// Возвращаемое значение:
//	СправочникОбъект.Номенклатура - объект справочника Номенклатура
//	Неопределено - если по указанному артикулу нет номенклатуры
Функция ПолучитьНоменклатуруПоАртикулу(Артикул)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Артикул ПОДОБНО &Артикул";
	
	Запрос.УстановитьПараметр("Артикул", Артикул);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка.Следующий();
		Возврат Выборка.Ссылка.ПолучитьОбъект();
	КонецЕсли;

КонецФункции// } #wortmann

// #wortmann { 
// Заполняет переменные ПараметрыДокументыСоСтатусомИзменениеИзИ5 и ТЧДокументаСоСтатусомИзменениеИзИ5
// для сравнения значений из i5.
// Галфинд_Домнышева 2022/09/12
//
// Параметры:
//	СсылкаДокумента - ДокументСсылка.ЗаказКлиента - Найденный документ со статусом гф_СтатусРаботыСЗаказомИ5 
//					не ТребуетсяПодтверждение и не ТребуетсяИзменение 
Процедура ПолучитьДанныеДокумента(СсылкаДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказКлиента.Номер КАК Номер,
		|	ЗаказКлиента.Дата КАК Дата,
		|	ЗаказКлиента.Партнер КАК Партнер,
		|	ЗаказКлиента.Контрагент КАК Контрагент,
		|	ЗаказКлиента.Валюта КАК Валюта,
		|	ЗаказКлиента.ДатаОтгрузки КАК ДатаОтгрузки,
		|	ЗаказКлиента.АдресДоставки КАК АдресДоставки
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();
	ПараметрыДокументыСоСтатусомИзменениеИзИ5 = Новый ТаблицаЗначений;
	ПараметрыДокументыСоСтатусомИзменениеИзИ5 = РезультатЗапроса.Выгрузить(); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказКлиентагф_ТоварыВКоробах.ВариантКомплектации КАК ВариантКомплектации,
		|	ЗаказКлиентагф_ТоварыВКоробах.НомерСтроки КАК НомерСтроки,
		|	ЗаказКлиентагф_ТоварыВКоробах.Количество КАК Количество,
		|	ЗаказКлиентагф_ТоварыВКоробах.ЦенаКороба КАК ЦенаКороба
		|ИЗ
		|	Документ.ЗаказКлиента.гф_ТоварыВКоробах КАК ЗаказКлиентагф_ТоварыВКоробах
		|ГДЕ
		|	ЗаказКлиентагф_ТоварыВКоробах.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТЧДокументаДоСтатусаИзменениеИзИ5 = Новый ТаблицаЗначений;
	ТЧДокументаДоСтатусаИзменениеИзИ5 = РезультатЗапроса.Выгрузить();
	
КонецПроцедуры// } #wortmann

// #wortmann { 
// Получает таблицу значений после сравнения полностью документов из базы и из i5 
// Галфинд_Домнышева 2022/09/12
//
// Параметры:
//	НовыйДокумент - ДокументОбъект.ЗаказКлиента - Создаваемый документ
//
// Возвращаемое значение:
//	ТЗДляЗаписи - ТаблицаЗначений - каждая строка которой содержит наименование реквизита
// 				и отличающиеся значения.
Функция СравнитьДокументы(НовыйДокумент)
	
    ОписаниеСтроки = Новый ОписаниеТипов("Строка");
	ТЗДляЗаписи = Новый ТаблицаЗначений;
	ТЗДляЗаписи.Колонки.Добавить("Реквизит", ОписаниеСтроки);
	ТЗДляЗаписи.Колонки.Добавить("ЗначениеТекущее", ОписаниеСтроки);
	ТЗДляЗаписи.Колонки.Добавить("ЗначениеИзИ5", ОписаниеСтроки);

	Если ПараметрыДокументыСоСтатусомИзменениеИзИ5[0].Партнер <> НовыйДокумент.Партнер Тогда
		СтрокаДляЗаписи = ТЗДляЗаписи.Добавить();
		СтрокаДляЗаписи.Реквизит = "Клиент";
		СтрокаДляЗаписи.ЗначениеТекущее = НовыйДокумент.Партнер;
		СтрокаДляЗаписи.ЗначениеИзИ5 = ПараметрыДокументыСоСтатусомИзменениеИзИ5[0].Партнер;
	КонецЕсли;    
	
	Если ПараметрыДокументыСоСтатусомИзменениеИзИ5[0].Валюта <> НовыйДокумент.Валюта Тогда
		СтрокаДляЗаписи = ТЗДляЗаписи.Добавить();
		СтрокаДляЗаписи.Реквизит = "Валюта";
		СтрокаДляЗаписи.ЗначениеТекущее = НовыйДокумент.Валюта;
		СтрокаДляЗаписи.ЗначениеИзИ5 = ПараметрыДокументыСоСтатусомИзменениеИзИ5[0].Валюта;
	КонецЕсли;
	
	Если ПараметрыДокументыСоСтатусомИзменениеИзИ5[0].ДатаОтгрузки <> НовыйДокумент.ДатаОтгрузки Тогда
		СтрокаДляЗаписи = ТЗДляЗаписи.Добавить();
		СтрокаДляЗаписи.Реквизит = "Дата Отгрузки";
		СтрокаДляЗаписи.ЗначениеТекущее = НовыйДокумент.ДатаОтгрузки;
		СтрокаДляЗаписи.ЗначениеИзИ5 = ПараметрыДокументыСоСтатусомИзменениеИзИ5[0].ДатаОтгрузки;
	КонецЕсли;
	
	Если ПараметрыДокументыСоСтатусомИзменениеИзИ5[0].АдресДоставки <> НовыйДокумент.АдресДоставки Тогда
		СтрокаДляЗаписи = ТЗДляЗаписи.Добавить();
		СтрокаДляЗаписи.Реквизит = "Адрес Доставки";
		СтрокаДляЗаписи.ЗначениеТекущее = НовыйДокумент.АдресДоставки;
		СтрокаДляЗаписи.ЗначениеИзИ5 = ПараметрыДокументыСоСтатусомИзменениеИзИ5[0].АдресДоставки;
	КонецЕсли;	
	
	Если ТЧДокументаДоСтатусаИзменениеИзИ5.Количество() <> НовыйДокумент.гф_ТоварыВКоробах.Количество() Тогда
		СтрокаДляЗаписи = ТЗДляЗаписи.Добавить();
		СтрокаДляЗаписи.Реквизит = "Кол-во строк в ТЧ Товары в коробах";
		СтрокаДляЗаписи.ЗначениеТекущее = ТЧДокументаДоСтатусаИзменениеИзИ5.Количество();
		СтрокаДляЗаписи.ЗначениеИзИ5 =  НовыйДокумент.гф_ТоварыВКоробах.Количество();			
	КонецЕсли;
		
	ТаблицаСтрок = ИщемОдинаковыеСтроки (НовыйДокумент.гф_ТоварыВКоробах.Выгрузить(), ТЧДокументаДоСтатусаИзменениеИзИ5);
	
	Для Каждого Строка Из ТаблицаСтрок Цикл 
		ЗаполнитьЗначенияСвойств(ТЗДляЗаписи.Добавить(), Строка); 
	КонецЦикла;

	Возврат ТЗДляЗаписи;

КонецФункции 

// #wortmann { 
// Получает таблицу значений после сравнения табличных частей документов из базы и из i5 
// Галфинд_Домнышева 2022/09/12
//
// Параметры:
//	Выгружаемая - ТаблицаЗначений - ТЧ гф_ТоварыВКоробах при внесении изменений из И5.
//	Текущая - ТаблицаЗначений - ТЧ гф_ТоварыВКоробах до внесения изменений из И5.
//
// Возвращаемое значение:
//	ТЗДляЗаписи - ТаблицаЗначений - каждая строка которой содержит наименование реквизита
// 				и отличающиеся значения.
//
Функция ИщемОдинаковыеСтроки (Выгружаемая, Текущая)
	
	ОписаниеСтроки = Новый ОписаниеТипов("Строка");
	ТЗДляЗаписи = Новый ТаблицаЗначений;
	ТЗДляЗаписи.Колонки.Добавить("Реквизит", ОписаниеСтроки);
	ТЗДляЗаписи.Колонки.Добавить("ЗначениеТекущее", ОписаниеСтроки);
	ТЗДляЗаписи.Колонки.Добавить("ЗначениеИзИ5", ОписаниеСтроки);
	
	Для каждого СтрВыгружаемая Из Выгружаемая Цикл
		СтруктураОтбора = Новый Структура("ВариантКомплектации");		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрВыгружаемая);
		МассивНайденныхВариантов = Текущая.НайтиСтроки(СтруктураОтбора);
		Если МассивНайденныхВариантов.Количество() > 0 Тогда
			СтруктураКоличества = Новый Структура("ВариантКомплектации, Количество");
			ЗаполнитьЗначенияСвойств(СтруктураКоличества, СтрВыгружаемая);
			МассивКоличества = Текущая.НайтиСтроки(СтруктураКоличества);
			Если МассивКоличества.Количество() = 0 Тогда
				СтрокаДляЗаписи = ТЗДляЗаписи.Добавить();
				СтрокаДляЗаписи.Реквизит = "Количество упаковок для " + СтрВыгружаемая.ВариантКомплектации;
				СтрокаДляЗаписи.ЗначениеТекущее = МассивКоличества[0].Количество;
				СтрокаДляЗаписи.ЗначениеИзИ5 = СтрВыгружаемая.Количество;	
			КонецЕсли;	 
		Иначе
			СтрокаДляЗаписи = ТЗДляЗаписи.Добавить();
			СтрокаДляЗаписи.Реквизит = "ВариантКомплектации " + СтрВыгружаемая.ВариантКомплектации;
			СтрокаДляЗаписи.ЗначениеТекущее = "нет";
			СтрокаДляЗаписи.ЗначениеИзИ5 = "В количестве " + СтрВыгружаемая.Количество;					
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрТекущая Из Текущая Цикл
		СтруктураОтбора = Новый Структура("ВариантКомплектации");		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрТекущая);
		МассивНайденныхВариантов = Выгружаемая.НайтиСтроки(СтруктураОтбора);
		Если МассивНайденныхВариантов.Количество() = 0 Тогда
			СтрокаДляЗаписи = ТЗДляЗаписи.Добавить();
			СтрокаДляЗаписи.Реквизит = "ВариантКомплектации " + СтрТекущая.ВариантКомплектации;
			СтрокаДляЗаписи.ЗначениеТекущее = "В количестве " + СтрТекущая.Количество;
			СтрокаДляЗаписи.ЗначениеИзИ5 = "нет";					
		КонецЕсли;
	КонецЦикла;	
	
	Возврат ТЗДляЗаписи;
	
КонецФункции

// #wortmann { 
// Находит значение в справочнике по указанному реквизиту 
// Галфинд_Домнышева 2022/10/14
//
// Параметры:
//	Справочник - Строка - имя справочника.
//	Реквизит - Строка - имя реквизита.
//	Значение - Строка - Значение искомого реквизита.
//
// Возвращаемое значение:
//	СправочникСсылка - если значение найдено, 
//	Неопределено - если значение реквизита в указанном справочнике не найдено.
//
Функция НайтиЗначениеПоРеквизитуСправочника(Справочник, Реквизит, Значение)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Спр.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник." + Справочник + " КАК Спр
		|ГДЕ
		|	Спр." + Реквизит + " = &Значение
		| И Спр.ПометкаУдаления = Ложь";
	
	Запрос.УстановитьПараметр("Значение", Значение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
    Возврат Неопределено;
КонецФункции

// #wortmann { 
// Записывает ошибки в РС гф_ОшибкиЗагрузки по заполненой ТЗ ТекстыОшибок 
// Галфинд_Домнышева 2022/10/14
// Параметры:
//	ТекстыОшибок - ТаблицаЗначений - содержит колонки "Дата, ПутьФайла, Номер, ТекстОшибки"
//
Процедура ЗаписатьОшибку(ТекстыОшибок)

	Попытка	
		НаборЗаписей = РегистрыСведений.гф_ОшибкиЗагрузки.СоздатьНаборЗаписей(); 
		Для каждого Элемент Из ТекстыОшибок Цикл
			
			НаборЗаписей.Отбор.Дата.Установить(Элемент.Дата); 
			НаборЗаписей.Отбор.Номер.Установить(Элемент.Номер);
			НаборЗаписей.Отбор.ПутьФайла.Установить(Элемент.ПутьФайла);
			НаборЗаписей.Отбор.Организация.Установить(Элемент.Организация);
			НаборЗаписей.Отбор.Интерфейс.Установить(Элемент.Интерфейс);
			
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Дата = Элемент.Дата; 
			НоваяЗапись.ПутьФайла = Элемент.ПутьФайла; 
			НоваяЗапись.Номер = Элемент.Номер;
			НоваяЗапись.ТекстОшибки = Элемент.ТекстОшибки;
			НоваяЗапись.Организация = Элемент.Организация;
			НоваяЗапись.Интерфейс = Элемент.Интерфейс;
			
		КонецЦикла;
		НаборЗаписей.Записать();  
		
	Исключение
		СообщениеОбОшибке = "Ошибка при проведении документа " + Ссылка  
		+ ". Описание ошибки: Не удалось загрузить ТекстОшибки в РС гф_ОшибкиЗагрузки. " + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, Ссылка, Ссылка, СообщениеОбОшибке);		
	КонецПопытки;

КонецПроцедуры

// #wortmann { 
// Заполняет ТЗ ТекстыОшибок 
// Галфинд_Домнышева 2022/10/14
//
// Параметры:
//	СообщениеОбОшибке - Строка - текущая ошибка
//
Процедура ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке)
	
	СтрокаОшибки = ТекстыОшибок.Добавить();
	СтрокаОшибки.Дата = ЭтотОбъект.Дата;
	СтрокаОшибки.ПутьФайла = ЭтотОбъект.ПолноеИмяФайла;
	СтрокаОшибки.Номер = НомерОшибки;
	СтрокаОшибки.ТекстОшибки = СообщениеОбОшибке;
	НомерОшибки = НомерОшибки + 1; 
	СтрокаОшибки.Организация = ЭтотОбъект.Организация;
	СтрокаОшибки.Интерфейс = ЭтотОбъект.Интерфейс;
			
КонецПроцедуры

// #wortmann { 
// Заполняет ТЗ ТекстыОшибок 
// Галфинд_Домнышева 2022/10/14
//
// Параметры:
//	ТаблицаРасхождений - ТаблицаЗначений - ТЗ с колонками "Реквизит, ЗначениеТекущее, ЗначениеИзИ5"
//	НовыйДокумент - ДокументОбъект.ЗаказКлиента - Создаваемый документ
//	ТекущаяДата - Дата
//
Процедура ЗаполнитьИзмененияЗначений(ТаблицаРасхождений, НовыйДокумент, ТекущаяДата)
	
	Если ЗначениеЗаполнено(ТаблицаРасхождений) Тогда
		НаборЗаписей = РегистрыСведений.гф_ИзменениеЗначенийИзI5.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(НовыйДокумент.Ссылка); 
		НаборЗаписей.Отбор.Период.Установить(ТекущаяДата);
		Для каждого Запись Из ТаблицаРасхождений Цикл
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Период = ТекущаяДата;
			НоваяЗапись.Документ = НовыйДокумент.Ссылка; 
			НоваяЗапись.Реквизит = Запись.Реквизит; 
			НоваяЗапись.ЗначениеТекущее = Запись.ЗначениеТекущее;
			НоваяЗапись.ЗначениеИзИ5 = Запись.ЗначениеИзИ5;
		КонецЦикла;
		
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#КонецЕсли