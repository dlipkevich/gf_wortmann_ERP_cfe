#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных
Перем НаборЗаписейТэговXML;
Перем СоответствиеТиповОбъектов;
Перем ЗагруженныеСтроки;
Перем мУдалятьДвижения;
Перем ТекущийРежимЗаписи;
Перем ПараметрыДокументыСоСтатусомИзменениеИзИ5;
Перем ТЧДокументаДоСтатусаИзменениеИзИ5;
#КонецОбласти

#Область ПрограммныйИнтерфейс

// #wortmann { 
// Экспортная процедура по созданию номенклатуры и установки цен 
// Галфинд_Домнышева 2022/09/12
//
// Параметры
//  Отказ - параметр системы 
// СоздаватьНоменклатуру - <Булево> - признак создания новой номенклатурной позиции
// СоздаватьУстановкуЦен - <Булево> - признак создания установки цен
//  ВыводитьПрогрессор – <Булево> – выводит форму Прогрессора при значении Истина
Процедура СоздатьНоменклатуру(Отказ = Ложь, СоздаватьНоменклатуру = Истина, СоздаватьУстановкуЦен = Ложь, 
	ВыводитьПрогрессор = Ложь) Экспорт
	
	Если НЕ Интерфейс = Перечисления.гф_Интерфейсы.PRICAT Тогда
		Возврат;	
	КонецЕсли;
	
	ПолучитьНаборЗаписейРегистраСтрок();
	
	Если СоздаватьНоменклатуру Тогда
		ПроведениеИнтерфейсаPricat(НаборЗаписейТэговXML, Отказ, Истина);
		Если НЕ Отказ Тогда
			СтатусДокумента = Перечисления.гф_СтатусыДокументовЗагрузки.НоменклатураЗагружена;
		КонецЕсли;
    КонецЕсли;
	Если СоздаватьУстановкуЦен И СтатусДокумента = Перечисления.гф_СтатусыДокументовЗагрузки.НоменклатураЗагружена Тогда
		СозданиеПроведениеУстановкиЦен(НаборЗаписейТэговXML, Отказ);
		//Если НЕ Отказ Тогда
		//	СтатусДокумента = Перечисления.гф_СтатусыДокументовЗагрузки.СозданыЦеныНоменклатуры;
		//КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры// } #wortmann

#КонецОбласти

#Область ОбработчикиСобытий

&Вместо("ОбработкаПроведения")
Процедура гф_ОбработкаПроведения(Отказ, РежимПроведения)
    // #wortmann { 
	// Внесение изменений в обработку проведения, для проведения документов с интерфейсом PRICAT согласно
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=811dbcee7bda45d711ecf78ee2ff45f8
	// Галфинд_Домнышева 2022/09/12
	Если Интерфейс = Перечисления.гф_Интерфейсы.PRICAT Тогда
		Если НЕ (СтатусДокумента = Перечисления.гф_СтатусыДокументовЗагрузки.НоменклатураЗагружена
			ИЛИ СтатусДокумента = Перечисления.гф_СтатусыДокументовЗагрузки.СозданыЦеныНоменклатуры) Тогда
			Отказ = Истина;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Попытка
		НаборЗаписейТэговXML.Записать(Истина);
	Исключение
	    СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + 
		". Описание ошибки: Не удалось внести изменения в регистр сведений ""СтрокиДокументаДанныеЗагрузки"" !";
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
	КонецПопытки;
	// } #wortmann

КонецПроцедуры

&Вместо("ПередЗаписью")
Процедура гф_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	// #wortmann { 
	// Внесение изменений в процедуру перед записью согласно
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=811dbcee7bda45d711ecf78ee2ff45f8
	// Галфинд_Домнышева 2022/09/12

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;            
	
	ТекущийРежимЗаписи = РежимЗаписи;
	// } #wortmann

КонецПроцедуры

&Вместо("ПриЗаписи")
Процедура гф_ПриЗаписи(Отказ)
	
	// #wortmann { 
	// Внесение изменений в процедуру при записи согласно
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=811dbcee7bda45d711ecf78ee2ff45f8
	// Галфинд_Домнышева 2022/09/12
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
		
	Если ЭтоНовый() или Не ТекущийРежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
  	
	Если ЭтотОбъект.СтатусДокумента = Перечисления.гф_СтатусыДокументовЗагрузки.ЗагруженоСОшибками Тогда
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, 
		"Документ " + ЭтотОбъект + " имеет статус ""Загружено с ошибками""! Документ не проведен.");
		Отказ = Истина;
			возврат;
	КонецЕсли;
	
	ПолучитьНаборЗаписейРегистраСтрок();
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Если Интерфейс = Перечисления.гф_Интерфейсы.ORDRSP Тогда
		ПроведениеИнтерфейсаORDRSP(НаборЗаписейТэговXML, Отказ); 
		
	ИначеЕсли Интерфейс = Перечисления.гф_Интерфейсы.PRICAT_SORT Тогда
		СоздатьВариантКомплектации(НаборЗаписейТэговXML, Отказ); 	

	КонецЕсли;
	
	Если Не Отказ Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
	// } #wortmann
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
 
// #wortmann { 
// Проведение документов с интерфейсом ORDRSP:
// Если ТЭГ "Document_function" = 46, создается новый документ ЗаказКлиента
// Если ТЭГ "Document_function" = 4, вносятся изменения в ранее созданный документ
// Если ТЭГ "Document_function" = 27, ранее созданный документ помечается на удаление
// Галфинд_Домнышева 2022/09/12
//
// Параметры
//  ТабличнаяЧасть	– <ТаблицаЗначений> – выгрузка РС гф_СтрокиДокументаДанныеЗагрузки по данному Объекту.
//  Отказ - параметр системы 
Процедура ПроведениеИнтерфейсаORDRSP(ТабличнаяЧасть, Отказ)
	
	НовыйЭлемент = Неопределено;
	НовыйДокумент = Неопределено;
	
	СтавкаНДСПоУмолчанию = Справочники.СтавкиНДС.НайтиПоНаименованию("20%");
	СтавкаНДС = СтавкаНДСПоУмолчанию;
   	ЦенаВключаетНДС = Истина;
	ФлагЗаписиДокумента = Истина;
	
	ОписаниеСтроки = Новый ОписаниеТипов("Строка");
	ТаблицаРасхождений = Новый ТаблицаЗначений;
	ТаблицаРасхождений.Колонки.Добавить("Реквизит", ОписаниеСтроки);
	ТаблицаРасхождений.Колонки.Добавить("ЗначениеТекущее", ОписаниеСтроки);
	ТаблицаРасхождений.Колонки.Добавить("ЗначениеИзИ5", ОписаниеСтроки);
	
	ТекущаяДата = ТекущаяДатаСеанса();

	Для Каждого СтрокаТЧ из ТабличнаяЧасть Цикл 				//Цикл по тегам XML
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТЧ.ПолеЗагрузки) Тогда
			
			//Тэг создания нового документа
			Если Найти(СтрокаТЧ.Тэг, "Message_Header")>0 Тогда
				НомерСтрокиРодителя = СтрокаТЧ.НомерСтрокиРодителя;
				
				ИмяЗаказа = НайтиИмяЗаказа("Customer_order_number", СтрокаТЧ);
				
				Если НЕ НовыйДокумент = Неопределено Тогда
					Попытка	
						НовыйДокумент.ЦенаВключаетНДС = Истина;	
						Если НовыйДокумент.гф_СтатусРаботыСЗаказомИ5 = Справочники.гф_СтатусРаботыСЗаказомИ5.ТребуетсяПодтверждение 
							ИЛИ НЕ ЗначениеЗаполнено(НовыйДокумент.гф_СтатусРаботыСЗаказомИ5) Тогда
							НовыйДокумент.гф_СтатусРаботыСЗаказомИ5 = Справочники.гф_СтатусРаботыСЗаказомИ5.ТребуетсяПодтверждение;
						ИначеЕсли НовыйДокумент.гф_СтатусРаботыСЗаказомИ5 = Справочники.гф_СтатусРаботыСЗаказомИ5.ТребуетсяИзменение Тогда
							НовыйДокумент.гф_СтатусРаботыСЗаказомИ5 = Справочники.гф_СтатусРаботыСЗаказомИ5.Изменен;
						Иначе
							НовыйДокумент.гф_СтатусРаботыСЗаказомИ5 = Справочники.гф_СтатусРаботыСЗаказомИ5.ИзменениеИзИ5;
							ФлагЗаписиДокумента = Ложь;
						КонецЕсли;

						Если ФлагЗаписиДокумента Тогда
							
							НовыйДокумент.ОбменДанными.Загрузка = Истина; 
							
							ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(НовыйДокумент, Отказ);
							
							РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(НовыйДокумент, Отказ, Истина);
							
							ДоставкаТоваров.ОтразитьСостояниеДоставки(НовыйДокумент.Ссылка, Отказ, Истина);
							
							РегистрыСведений.СтатусыСборкиИДоставки.ЗаписатьСтатусИзРаспоряжения(НовыйДокумент.Ссылка, Отказ, Истина);
							Если НовыйДокумент.ПометкаУдаления Тогда
								НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
							Иначе
								НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
							КонецЕсли;
							НовыйДокумент.ОбменДанными.Загрузка = Ложь;
							
						КонецЕсли;
											
					Исключение
						СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + ". Описание ошибки: " + ОписаниеОшибки() ;
						ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, "Произошли ошибки при проведении документа " + НовыйДокумент + ".|" + ОписаниеОшибки());
					КонецПопытки;
				КонецЕсли;

				НомерДокумента = НайтиСтрокуДереваПоТэгуОтПорядкового("Supplier_order_number", СтрокаТЧ, Отказ);
				ДатаДокумента = НайтиСтрокуДереваПоТэгуОтПорядкового("Supplier_order_date", СтрокаТЧ, Отказ);
				ФункцияДокумента = НайтиСтрокуДереваПоТэгуОтПорядкового("Document_function", СтрокаТЧ, Отказ);
								
				Если ЗначениеЗаполнено(НомерДокумента) и ЗначениеЗаполнено(ДатаДокумента) Тогда
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					|	Документы.Ссылка КАК Документ
					|ИЗ
					|	Документ.ЗаказКлиента КАК Документы
					|ГДЕ
					|	Документы.Дата МЕЖДУ &ДатаНач И &ДатаКон
					|	И Документы.Номер = &Номер";
					Запрос.УстановитьПараметр("ДатаНач", НачалоДня(Дата(ДатаДокумента)));
					Запрос.УстановитьПараметр("ДатаКон", КонецДня(Дата(ДатаДокумента)));
					Запрос.УстановитьПараметр("Номер", НомерДокумента);
					Результат = Запрос.Выполнить().Выбрать();
					
					// Найден ранее созданный документ ЗаказПокупателя...
					Если Результат.Следующий() Тогда
						
						НовыйДокумент = Результат.Документ.ПолучитьОбъект();
						
						НовыйДокумент.ОбменДанными.Загрузка = Истина;
						Если НовыйДокумент.гф_СтатусРаботыСЗаказомИ5 = Справочники.гф_СтатусРаботыСЗаказомИ5.ТребуетсяПодтверждение 
							ИЛИ НЕ ЗначениеЗаполнено(НовыйДокумент.гф_СтатусРаботыСЗаказомИ5) Тогда
							НовыйДокумент.гф_СтатусРаботыСЗаказомИ5 = Справочники.гф_СтатусРаботыСЗаказомИ5.ТребуетсяПодтверждение;
						ИначеЕсли НовыйДокумент.гф_СтатусРаботыСЗаказомИ5 = Справочники.гф_СтатусРаботыСЗаказомИ5.ТребуетсяИзменение Тогда
							НовыйДокумент.гф_СтатусРаботыСЗаказомИ5 = Справочники.гф_СтатусРаботыСЗаказомИ5.Изменен;
						Иначе
							НовыйДокумент.гф_СтатусРаботыСЗаказомИ5 = Справочники.гф_СтатусРаботыСЗаказомИ5.ИзменениеИзИ5;
							ФлагЗаписиДокумента = Ложь;
							ПолучитьДанныеДокумента(НовыйДокумент.Ссылка);
						КонецЕсли;
						
						НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
						
						Если СокрЛП(ФункцияДокумента) = "27" Тогда
							
							НовыйДокумент.ОбменДанными.Загрузка = Истина;
							НовыйДокумент.Комментарий = "Документ помечен на удаление согласно " + ЭтотОбъект + "."; 
							НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
							НовыйДокумент.ОбменДанными.Загрузка = Ложь;
							НовыйДокумент.УстановитьПометкуУдаления(Истина);
							
							// Добавим запись об изменении значения ПометкиУдаления
							НаборЗаписей = РегистрыСведений.гф_ИзменениеЗначенийИзI5.СоздатьНаборЗаписей();
							НаборЗаписей.Отбор.Документ.Установить(НовыйДокумент.Ссылка); 
							НаборЗаписей.Отбор.Период.Установить(ТекущаяДата);
							
							НоваяЗапись = НаборЗаписей.Добавить(); 
							НоваяЗапись.Период = ТекущаяДата;
							НоваяЗапись.Документ = НовыйДокумент.Ссылка; 
							НоваяЗапись.Реквизит = "Пометка Удаления"; 
							НоваяЗапись.ЗначениеТекущее = "Ложь/Истина";
							НоваяЗапись.ЗначениеИзИ5 = "Истина";
							НаборЗаписей.Записать();
							
							ИзменитьКомментарийВРегистре(СтрокаТЧ.ПорядковыйНомерСтроки, СтрокаТЧ.Тэг, "Документ помечен на удаление согласно " + ЭтотОбъект + ".");
							
							ЗаписьЖурналаРегистрации("Информация", УровеньЖурналаРегистрации.Информация, ЭтотОбъект, ЭтотОбъект, "Документ " +НовыйДокумент+ " помечен на удаление.");
							Возврат;
							
						ИначеЕсли СокрЛП(ФункцияДокумента) =  "46" или СокрЛП(ФункцияДокумента) = "4" Тогда
							
							Если ЕстьПроведенныеПодчиненныеДокументы(НовыйДокумент.Ссылка)  Тогда
								СообщениеОбОшибке = "При проведении документа " + ЭтотОбъект + ", обнаружены проведенные подчиненные документы для " + СокрЛП(НовыйДокумент)+ ". Заказ не откорректирован!";
								ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
								Отказ = Истина;
								Возврат;
							КонецЕсли;
							
							НовыйДокумент.Товары.Очистить();
							НовыйДокумент.гф_ТоварыВКоробах.Очистить();
							
							Если ФлагЗаписиДокумента Тогда
								
								Если ТипЗнч(НовыйДокумент) = Тип("ДокументОбъект.ЗаказКлиента") Тогда
									Если ЗначениеЗаполнено(ИмяЗаказа) Тогда
										НовыйДокумент.гф_ИмяЗаказа = ИмяЗаказа;
									КонецЕсли; 
								КонецЕсли;  							
								
								НовыйДокумент.ПометкаУдаления = Ложь;
								НовыйДокумент.ОбменДанными.Загрузка = Истина;
								НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
								НовыйДокумент.ОбменДанными.Загрузка = Ложь;
								
								СообщениеОбОшибке = "При проведении документа " + ЭтотОбъект + " Откорректирован документ " + СокрЛП(НовыйДокумент);
								ЗаписьЖурналаРегистрации("Информация", УровеньЖурналаРегистрации.Информация, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
							КонецЕсли; 
						Иначе
							ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, "Произошли ошибки при проведении документа " + НовыйДокумент + ".|Неверное значение тэга Document_function.");
							возврат;
						КонецЕсли;
												
						//ЗаказПокупателя не найден - создаем новый...	
					Иначе
						
						НовыйДокумент = Документы.ЗаказКлиента.СоздатьДокумент();
						НовыйДокумент.Номер = НомерДокумента;
						НовыйДокумент.Дата = ДатаДокумента;
						НовыйДокумент.гф_ДатаОбновленияИзИ5 = ТекущаяДатаСеанса();
						
						НовыйДокумент.Организация = Справочники.Организации.НайтиПоНаименованию("ВОРТМАНН ВОСТОК ООО");
						
						Склады = _омОбщегоНазначенияКлиентСервер.ПолучитьГлобальноеЗначениеМассив("гф_ГлобальныеЗначенияОсновнойСклад");
						
						Для каждого Склад из Склады Цикл
							Если Склад.гф_Организация = НовыйДокумент.Организация Тогда
								НовыйДокумент.Склад = Склад;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						 						
						НовыйДокумент.гф_СтатусРаботыСЗаказомИ5 = Справочники.гф_СтатусРаботыСЗаказомИ5.ТребуетсяПодтверждение;
						НовыйДокумент.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
						
						Если ЗначениеЗаполнено(ИмяЗаказа) Тогда
							НовыйДокумент.гф_ИмяЗаказа = ИмяЗаказа;
						КонецЕсли; 

						Если СокрЛП(ФункцияДокумента) = "27" Тогда
							Попытка
																
								НовыйДокумент.ОбменДанными.Загрузка = Истина;
								НовыйДокумент.Комментарий = "Документ помечен на удаление согласно " + ЭтотОбъект + "."; 
								
								НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
								
								НовыйДокумент.ОбменДанными.Загрузка = Ложь;
								НовыйДокумент.УстановитьПометкуУдаления(Истина);
								
								ИзменитьКомментарийВРегистре(СтрокаТЧ.ПорядковыйНомерСтроки, СтрокаТЧ.Тэг, "Документ помечен на удаление согласно " + ЭтотОбъект + ".")
							Исключение
								СообщениеОбОшибке = "Не удалось установить пометку удаления для документа " + СокрЛП(НовыйДокумент);
								ЗаписьЖурналаРегистрации("Информация", УровеньЖурналаРегистрации.Информация, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
							КонецПопытки;
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					Если (НЕ ЗначениеЗаполнено(НомерДокумента)) И (НЕ ЗначениеЗаполнено(ДатаДокумента)) Тогда
						СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект  + ". Описание ошибки: Не заполнены тэги ""Document_number"" и ""Document_date"".";
					ИначеЕсли	НЕ ЗначениеЗаполнено(НомерДокумента) Тогда
						СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект  + ". Описание ошибки: Не заполнены тэг ""Document_number"".";	
					ИначеЕсли	НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда	
						СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект  + ". Описание ошибки: Не заполнены тэг  ""Document_date"".";	
					Иначе 				//Невероятный вариант, но все же ...	)))
						СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект ;		
					КонецЕсли;
					
					ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
					Отказ = Истина;
					Возврат;
				КонецЕсли;
				
				НовыйДокумент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
				СтрНазваниеВалюты = НайтиСтрокуДереваПоТэгуОтПорядкового("Currency", , Отказ);	
				Если Отказ или НЕ ЗначениеЗаполнено(СтрНазваниеВалюты) Тогда
					СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + ". Описание ошибки: Не найден или не заполнен тэг Currency.";
					ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
					Отказ = Истина;
					Возврат;
				КонецЕсли;
				Если СтрНазваниеВалюты = "RUB" Тогда
					СтрНазваниеВалюты = "руб." 
				КонецЕсли;
				ВалютаДокумента = Справочники.Валюты.НайтиПоНаименованию(СокрЛП(СтрНазваниеВалюты));

				НовыйДокумент.Валюта = ВалютаДокумента;
				
				//тэг добавления позиции в тч Товары	
			ИначеЕсли Найти(СтрокаТЧ.Тэг, "Message_Position")>0  Тогда

				НовыйЭлементТоварыВКоробах = НовыйДокумент.гф_ТоварыВКоробах.Добавить();
				//остальные тэги	
			Иначе 
				Если СтрокаТЧ.ПолеЗагрузки.ТипОбъекта = "Заказ клиента" Тогда
					Если Найти(СтрокаТЧ.ПолеЗагрузки.Объект, "(")>0 Тогда
						Если НовыйДокумент = Неопределено 
							Или НовыйЭлементТоварыВКоробах = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						Если Не ТипЗнч(НовыйДокумент) = Тип("ДокументОбъект.ЗаказКлиента") Тогда
							продолжить;
						КонецЕсли;
						ИмяТЧ = Сред(СтрокаТЧ.ПолеЗагрузки.Объект, Найти(СтрокаТЧ.ПолеЗагрузки.Объект, "(")+1);
						Если Найти(ИмяТЧ, ")")>0 Тогда	
							ПозицияСкобки = Найти(ИмяТЧ, ")"); 
							ИмяТЧ = Лев(ИмяТЧ, ПозицияСкобки - 1); 
						КонецЕсли;								
						ИмяРеквизита = Лев(СтрокаТЧ.ПолеЗагрузки.Объект, Найти(СтрокаТЧ.ПолеЗагрузки.Объект, "(")-1);
						Если  ИмяТЧ = "гф_ТоварыВКоробах" Тогда
							Объект = НовыйЭлементТоварыВКоробах[ИмяРеквизита]; 
						КонецЕсли;
						ТипОбъекта = Документы.ЗаказКлиента.ПустаяСсылка().Метаданные().ТабличныеЧасти[ИмяТЧ].Реквизиты[ИмяРеквизита].Тип;
					Иначе
						Если НовыйДокумент = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						ИмяТЧ = Неопределено;
						ИмяРеквизита = СтрокаТЧ.ПолеЗагрузки.Объект;
						Объект = НовыйДокумент[ИмяРеквизита];
						Если ИмяРеквизита = "Номер" Тогда
							ТипОбъекта = Документы.ЗаказКлиента.ПустаяСсылка().Метаданные().ТипНомера;
						ИначеЕсли ИмяРеквизита = "Дата" Тогда
							ТипОбъекта = Тип("Дата");
						Иначе	
							ТипОбъекта = Документы.ЗаказКлиента.ПустаяСсылка().Метаданные().Реквизиты[СтрокаТЧ.ПолеЗагрузки.Объект].Тип;
						КонецЕсли;
					КонецЕсли;
					
					Если ИмяРеквизита = "Контрагент" Тогда   //Тэг - GLN_customer
						
						НайденныйКонтрагент = Справочники.Контрагенты.НайтиПоРеквизиту("гф_GLN_номер", СтрокаТЧ.Значение);
						Если ЗначениеЗаполнено(НайденныйКонтрагент) Тогда
							НовыйДокумент.Контрагент = НайденныйКонтрагент;
							НовыйДокумент.Партнер = Справочники.Партнеры.НайтиПоНаименованию(НайденныйКонтрагент.Наименование);
							ДоговорДляКонтрагента(НовыйДокумент);
							
						Иначе
							СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + " в строке №" + СтрокаТЧ.ПорядковыйНомерСтроки + 
							". Описание ошибки: Не найден соответствующий контрагент с GLN номером "+СокрЛП(СтрокаТЧ.Значение)+".  Документ не может быть проведен."; 								
							ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
						КонецЕсли;
						
					ИначеЕсли ИмяРеквизита = "ВариантКомплектации" Тогда
						НайденныйВариантКомплектации = Справочники.ВариантыКомплектацииНоменклатуры.НайтиПоРеквизиту("гф_Штрихкод", СтрокаТЧ.Значение);
						Если ЗначениеЗаполнено(НайденныйВариантКомплектации) Тогда
							
							НовыйЭлементТоварыВКоробах.ВариантКомплектации = НайденныйВариантКомплектации;
							НовыйЭлементТоварыВКоробах.Артикул = НайденныйВариантКомплектации.Владелец.Артикул;
							НовыйЭлементТоварыВКоробах.Количество = НайтиСтрокуДереваПоТэгу("Ordered_quantity", СтрокаТЧ, Отказ);
							ДатаДоставки = НайтиСтрокуДереваПоТэгу("Delivery_date", СтрокаТЧ, Отказ);
							
							ЗагрузитьТЧТовары(НайденныйВариантКомплектации, НовыйЭлементТоварыВКоробах, НовыйДокумент, ДатаДоставки);
							НовыйЭлементТоварыВКоробах.Сумма = НовыйЭлементТоварыВКоробах.Количество * НовыйЭлементТоварыВКоробах.ЦенаКороба;
							
							ЦенаКоробаИз5 = НайтиСтрокуДереваПоТэгу("Effective_purchase_price", СтрокаТЧ, Отказ);
							АбсолютноеРасхождение = _омОбщегоНазначенияКлиентСервер.ПолучитьГлобальноеЗначение("гф_ГлобальныеЗначенияРазрешенноеРасхождениеИ5");
							Толеранс = _омОбщегоНазначенияКлиентСервер.ПолучитьГлобальноеЗначение("гф_ГлобальныеЗначенияТолеранс");
							
							Расхождение = ЦенаКоробаИз5 - НовыйЭлементТоварыВКоробах.ЦенаКороба;
							Расхождение = ?(Расхождение >= 0, Расхождение, -Расхождение);
							
							Если Расхождение > АбсолютноеРасхождение Тогда
								НоваяЗапись = ТаблицаРасхождений.Добавить();
	
								НоваяЗапись.Реквизит = "Цена" + НайденныйВариантКомплектации + "(Абсолютное расхождение)"; 
								НоваяЗапись.ЗначениеТекущее = НовыйЭлементТоварыВКоробах.ЦенаКороба;
								НоваяЗапись.ЗначениеИзИ5 = ЦенаКоробаИз5;

							КонецЕсли;
							Если НовыйЭлементТоварыВКоробах.ЦенаКороба > 0 Тогда
								Если (Расхождение/НовыйЭлементТоварыВКоробах.ЦенаКороба)*100 > Толеранс Тогда
									НоваяЗапись = ТаблицаРасхождений.Добавить();
								
									НоваяЗапись.Реквизит = "Цена" + НайденныйВариантКомплектации + "(Относительное расхождение)"; 
									НоваяЗапись.ЗначениеТекущее = НовыйЭлементТоварыВКоробах.ЦенаКороба;
									НоваяЗапись.ЗначениеИзИ5 = ЦенаКоробаИз5;
									
								КонецЕсли;
							КонецЕсли;
						Иначе
							
							НовыйДокумент.гф_ТоварыВКоробах.Удалить(НовыйЭлементТоварыВКоробах);
                            НовыйЭлементТоварыВКоробах = Неопределено;

							СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + " в строке №" + СтрокаТЧ.ПорядковыйНомерСтроки + ". Описание ошибки: Не найдена соответствующая номенклатура скодом " +СокрЛП(СтрокаТЧ.Значение);
							ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
						КонецЕсли;
					ИначеЕсли ИмяРеквизита = "АдресДоставки" Тогда
						НовыйДокумент.СпособДоставки = _омОбщегоНазначенияКлиентСервер.ПолучитьГлобальноеЗначение("гф_СпособДоставкиЗагрузкаXML");
						
						Если ЗначениеЗаполнено(СтрокаТЧ.Значение) Тогда
							НайденныйАдресДоставки = Справочники.гф_АдресаДоставки.НайтиПоРеквизиту("GLNНомер", СтрокаТЧ.Значение);
						КонецЕсли;
						
						Если ЗначениеЗаполнено(НайденныйАдресДоставки) Тогда
							Объект = НайденныйАдресДоставки;
							НовыйДокумент.ПеревозчикПартнер = НайденныйАдресДоставки.ТК.Партнер;
						Иначе
							НовыйДокумент.ПеревозчикПартнер = _омОбщегоНазначенияКлиентСервер.ПолучитьГлобальноеЗначение("гф_ПеревозчикЗагрузкаXML");
							СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + " в строке №" + СтрокаТЧ.ПорядковыйНомерСтроки + ". Описание ошибки: Не найден соответствующий адрес доставки ""GLN delivery party"" "+СокрЛП(СтрокаТЧ.Значение);
							ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
						КонецЕсли;
					ИначеЕсли Строка(ТипОбъекта) = "Строка" Тогда
						Объект = СтрокаТЧ.Значение;
					ИначеЕсли Строка(ТипОбъекта) = "Число" Тогда
						Попытка
							Объект = Число(СтрокаТЧ.Значение);
						Исключение
							СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + " в строке №" + СтрокаТЧ.ПорядковыйНомерСтроки + ". Описание ошибки: " + ОписаниеОшибки();
							ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
						КонецПопытки;
					ИначеЕсли Строка(ТипОбъекта) = "Дата" Тогда
						Попытка
							Объект = Дата(СтрокаТЧ.Значение);
						Исключение
							СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + " в строке №" + СтрокаТЧ.ПорядковыйНомерСтроки + ". Описание ошибки: "+ ОписаниеОшибки();
							ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
						КонецПопытки;
						
					КонецЕсли;
					Если ЗначениеЗаполнено(Объект) Тогда
						Если Найти(СтрокаТЧ.ПолеЗагрузки.Объект, "(")>0 Тогда
							//НовыйЭлемент[ИмяРеквизита] = Объект;
						Иначе
							НовыйДокумент[ИмяРеквизита] = Объект;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;		//Тэг создания нового документа
		КонецЕсли;
	КонецЦикла;				//Цикл по тегам XML
	Если ФлагЗаписиДокумента Тогда
		Если НЕ НовыйДокумент = Неопределено И НЕ Отказ Тогда
			
			НовыйДокумент.ЦенаВключаетНДС = Истина;
			НовыйДокумент.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;		
			Для Каждого СтрокаТоваров Из НовыйДокумент.Товары Цикл
				
				Если ЗначениеЗаполнено(СтрокаТоваров.Номенклатура.СтавкаНДС) Тогда
					СтрокаТоваров.СтавкаНДС = СтрокаТоваров.Номенклатура.СтавкаНДС;
				Иначе
					СтрокаТоваров.СтавкаНДС = СтавкаНДС;
				КонецЕсли;
				
				УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(СтрокаТоваров.Сумма, СтавкаНДС);
			КонецЦикла;
			
			ЗаполнитьСуммы(НовыйДокумент);
			// Ставим флаг "СкидкиРасчитаны" для записи документа, без расчитанных скидок запись не проходит.			
			НовыйДокумент.СкидкиРассчитаны = Истина;
			НовыйДокумент.Приоритет = Справочники.Приоритеты.НайтиПоНаименованию("Средний");
			НовыйДокумент.ОбменДанными.Загрузка = Ложь;
			
			Попытка			 
				Если НовыйДокумент.ПометкаУдаления Тогда
					НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
				Иначе
					НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				КонецЕсли;
			Исключение
				ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, "Произошли ошибки при проведении документа " + НовыйДокумент + ".|" + ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
	Иначе
		ТаблицаСравненийДляЗаписиВРегистр = СравнитьДокументы(НовыйДокумент);
		Для Каждого Строка Из ТаблицаСравненийДляЗаписиВРегистр Цикл 
			ЗаполнитьЗначенияСвойств(ТаблицаРасхождений.Добавить(), Строка); 
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТаблицаРасхождений) Тогда
		НаборЗаписей = РегистрыСведений.гф_ИзменениеЗначенийИзI5.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(НовыйДокумент.Ссылка); 
		НаборЗаписей.Отбор.Период.Установить(ТекущаяДата);
		Для каждого Запись из ТаблицаРасхождений Цикл
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Период = ТекущаяДата;
			НоваяЗапись.Документ = НовыйДокумент.Ссылка; 
			НоваяЗапись.Реквизит = Запись.Реквизит; 
			НоваяЗапись.ЗначениеТекущее = Запись.ЗначениеТекущее;
			НоваяЗапись.ЗначениеИзИ5 = Запись.ЗначениеИзИ5;
		КонецЦикла;
		
		НаборЗаписей.Записать();
	КонецЕсли

КонецПроцедуры// } #wortmann 

// #wortmann {
// Функция получает подчиненные документы
// Галфинд_Домнышева 2022/09/12
//
// Параметры:
//  ДокументСсылка -  <ДокументСсылка.ЗаказКлиента> - ссылка на найденный Заказ Клиента
//
// Возвращаемое значение:
//  Массив - массив документов, если есть подчиненные документы
//  ТаблицаЗначений - пустая ТЗ, если текстзапроса пустой
Функция ПолучитьМассивПодчиненныхДокументов(ДокументСсылка)
	
	ТекущийДокумент = ДокументСсылка;
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	
	Для Каждого ЭлементСостава ИЗ Метаданные.КритерииОтбора["гф_СвязанныеДокументы"].Состав Цикл
		
		Если Не ЭлементСостава.Тип.СодержитТип(ТипЗнч(ТекущийДокумент)) Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьКДанным = ЭлементСостава.ПолноеИмя();
		СтруктураПутьКДанным = РазобратьПутьКОбъектуМетаданных(ПутьКДанным, ЭлементСостава.Родитель());
		
		ИмяОбъекта = СтруктураПутьКДанным.ТипОбъекта + "." + СтруктураПутьКДанным.ВидОбъекта;
		ПсевдонимТаблицы = СтруктураПутьКДанным.ТипОбъекта + "_" + СтруктураПутьКДанным.ВидОбъекта + "_" + СтруктураПутьКДанным.ИмяТаблЧасти;
		
		ТекущаяСтрокаГДЕ = "ГДЕ " + ПсевдонимТаблицы + "." +СтруктураПутьКДанным.ИмяРеквизита + " = &ЗначениеКритерияОтбора";
			
		ИмяТЧ = Лев(СтруктураПутьКДанным.ИмяРеквизита, Найти(СтруктураПутьКДанным.ИмяРеквизита, ".")-1);
		ИмяРеквизита = Лев(СтруктураПутьКДанным.ИмяРеквизита, Найти(СтруктураПутьКДанным.ИмяРеквизита, ".")-1);
		ТекстЗапроса = ТекстЗапроса + (?(ТекстЗапроса = "", "ВЫБРАТЬ", "ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ") + "
		|" + ПсевдонимТаблицы + ".Ссылка ИЗ " + ИмяОбъекта + "." + СтруктураПутьКДанным.ИмяТаблЧасти + " КАК " + ПсевдонимТаблицы + "
		|" + СтрЗаменить(ТекущаяСтрокаГДЕ, "..", ".") + "
		|");
		
	КонецЦикла;
	
	Если ТекстЗапроса = "" Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ЗначениеКритерияОтбора", ТекущийДокумент);
	
	мМассивПочиненных = Запрос.Выполнить().Выгрузить();
    	
	Возврат мМассивПочиненных;
КонецФункции// } #wortmann

// #wortmann {
// Функция разбирает строку вида
// ТипОбъектаМетаданных.ИмяДокумента.ТабличнаяЧасть.ИмяТабличнойЧасти.Реквизит.ИмяРеквизита.
// ТипОбъектаМетаданных должен быть Справочник или Документ.
// Галфинд_Домнышева 2022/09/12
//
// Параметры:
//  ПутьКДанным - строка.
//  МетаданныеОбъекта - Объект метаданных
//
// Возвращаемое значение:
//  Структура - путь к объекту метаданных
Функция РазобратьПутьКОбъектуМетаданных(ПутьКДанным, МетаданныеОбъекта = Неопределено)
	
	Структура = Новый Структура;
	
	СоответствиеИмен = Новый Массив();
	СоответствиеИмен.Добавить("ТипОбъекта");
	СоответствиеИмен.Добавить("ВидОбъекта");
	СоответствиеИмен.Добавить("ПутьКДанным");
	СоответствиеИмен.Добавить("ИмяТаблЧасти");
	СоответствиеИмен.Добавить("ИмяРеквизита");
	
	Для индекс = 1 по 3 Цикл
		
		Точка = Найти(ПутьКДанным, ".");
		ТекущееЗначение = Лев(ПутьКДанным, Точка-1);
		Структура.Вставить(СоответствиеИмен[индекс-1], ТекущееЗначение);
		ПутьКДанным = Сред(ПутьКДанным, Точка+1);
		
	КонецЦикла;
	
	ПутьКДанным = СтрЗаменить(ПутьКДанным, "Реквизит.", "");
	
	Если Структура.ПутьКДанным = "ТабличнаяЧасть" Тогда
		
		Для индекс = 4 по 5  Цикл 
			
			Точка = Найти(ПутьКДанным, ".");
			Если Точка = 0 Тогда
				ТекущееЗначение = ПутьКДанным;
			Иначе
				ТекущееЗначение = Лев(ПутьКДанным, Точка-1);
			КонецЕсли;
			
			Структура.Вставить(СоответствиеИмен[индекс-1], ТекущееЗначение);
			ПутьКДанным = Сред(ПутьКДанным,  Точка+1);
			
		КонецЦикла;
		
	Иначе
		
		Структура.Вставить(СоответствиеИмен[3], "");
		Структура.Вставить(СоответствиеИмен[4], ПутьКДанным);
		
	КонецЕсли;
	
	Если МетаданныеОбъекта <> Неопределено Тогда
		Структура.Вставить("Метаданные", МетаданныеОбъекта);
	Иначе
		Если Структура.ТипОбъекта = "Документ" Тогда
			Структура.Вставить("Метаданные", Метаданные.Документы[Структура.ВидОбъекта]);
		Иначе
			Структура.Вставить("Метаданные", Метаданные.Справочники[Структура.ВидОбъекта]);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции// } #wortmann

// #wortmann { 
// Нахождение имени заказа
// Галфинд_Домнышева 2022/09/12
//
// Параметры
//  ДокументСсылка	– <ДокументСсылка.ЗаказКлиента> - ссылка на найденный Заказ Клиента
//
// Возвращаемое значение:
// Булево - Истина если найдены подчиненные документы, Ложь -нет
Функция ЕстьПроведенныеПодчиненныеДокументы(ДокументСсылка)
	
	Нашли = ложь;
	мМассивПодчиненных = ПолучитьМассивПодчиненныхДокументов(ДокументСсылка);
	Для каждого ЭлементМассива Из мМассивПодчиненных Цикл
		Если ЗначениеЗаполнено(ЭлементМассива.Ссылка) И ЭлементМассива.Ссылка.Проведен Тогда
			Нашли = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Нашли;

КонецФункции// } #wortmann

// #wortmann { 
// Нахождение имени заказа
// Галфинд_Домнышева 2022/09/12
//
// Параметры
//  Тэг	– <Строка> 	– имя ТЭГа из файла
//  СтрокаТЧ	– <Тип.СтрокаТЧ> 	– строка табличной части для которой ищется предок с заданным именем
//
// Возвращаемое значение:
//  - Строка - значение ТЭГа по порядковому номеру строки родителя для текущей строки
Функция НайтиИмяЗаказа(Тэг, СтрокаТЧ = Неопределено)
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Тэг", Тэг);
	Если СтрокаТЧ <> Неопределено Тогда
		СтруктураОтбора.Вставить("НомерСтрокиРодителя", СтрокаТЧ.ПорядковыйНомерСтроки);
	КонецЕсли;
	НайденноеЗначение = ЗагруженныеСтроки.НайтиСтроки(СтруктураОтбора);
	Если НайденноеЗначение.Количество()>0 Тогда
		Если ЗначениеЗаполнено(НайденноеЗначение[0].Значение) Тогда
			Возврат НайденноеЗначение[0].Значение;
		КонецЕсли;
	КонецЕсли;
КонецФункции// } #wortmann

// #wortmann { 
// Получение набора записей РС гф_СтрокиДокументаДанныеЗагрузки 
// Галфинд_Домнышева 2022/09/12
Процедура ПолучитьНаборЗаписейРегистраСтрок()

	НаборЗаписейТэговXML = РегистрыСведений.гф_СтрокиДокументаДанныеЗагрузки.СоздатьНаборЗаписей();
	НаборЗаписейТэговXML.Отбор.Документ.Значение = ЭтотОбъект.Ссылка;
	НаборЗаписейТэговXML.Отбор.Документ.Использование = Истина;
	НаборЗаписейТэговXML.Прочитать();

	ЗагруженныеСтроки = НаборЗаписейТэговXML.Выгрузить();
			
КонецПроцедуры// } #wortmann

// #wortmann { 
// Проведение документов с интерфейсом Pricat, создание номенклатуры 
// Галфинд_Домнышева 2022/09/12
//
// Параметры
//  ТабличнаяЧасть	– <ТаблицаЗначений> – выгрузка РС гф_СтрокиДокументаДанныеЗагрузки по данному Объекту.
//  Отказ - параметр системы 
//  ВыводитьПрогрессор – <Булево> – выводит форму Прогрессора при значении Истина
Процедура ПроведениеИнтерфейсаPricat(ТабличнаяЧасть, Отказ, ВыводитьПрогрессор = Ложь)
		
	НовыйЭлемент 			= Неопределено;
	флЗаписиНоменклатуры	= Ложь;
	НомерСтрокиРодителя 	= 1;
	
	GLN_manufacturer	= НайтиСтрокуДереваПоТэгу("GLN_manufacturer", ,Отказ);	
	#Если Клиент Тогда
		Если ВыводитьПрогрессор Тогда
			ФормаПрогрессора = ПолучитьФорму("гф_ФормаПрогрессора");
			ФормаПрогрессора.ЭлементыФормы.ЗначениеИндикатора.СтильОтображения = РежимСглаживанияИндикатора.Плавный;
		КонецЕсли;
	#КонецЕсли
	
	ЗапросПоНаименованию = Новый Запрос(
	"ВЫБРАТЬ
	|	ArticlrDescriptions.NameRU,
	|	ArticlrDescriptions.Product_group КАК Product_group,
	|	ArticlrDescriptions.GLN_Supplier КАК GLN_Supplier,
	|	ArticlrDescriptions.ВидНоменклатуры,
	|	ArticlrDescriptions.Родитель,
	|	ArticlrDescriptions.ЕдиницаИзмеренияПоКлассификатору,
	|	ArticlrDescriptions.СтавкаНДС
	|ИЗ
	|	РегистрСведений.гф_ArticlrDescriptions КАК ArticlrDescriptions
	|
	|УПОРЯДОЧИТЬ ПО
	|	Product_group,
	|	GLN_Supplier
	|АВТОУПОРЯДОЧИВАНИЕ");							 
	
	ТаблицаArticlеsDescriptions = ЗапросПоНаименованию.Выполнить().Выгрузить();                        
	ТекущаяСтрокаРодителя   = Неопределено;
	
	#Если Клиент Тогда
		Если ВыводитьПрогрессор Тогда
			ФормаПрогрессора.ЭлементыФормы.ЗначениеИндикатора.МинимальноеЗначение = 0;
			ФормаПрогрессора.ЭлементыФормы.ЗначениеИндикатора.МаксимальноеЗначение = ТабличнаяЧасть.Количество();
			ФормаПрогрессора.СтрокаПрогрессора = "Создание (изменение) номенклатуры...";
			ФормаПрогрессора.Открыть();	
		КонецЕсли;
	#КонецЕсли
	
	НомерПредидущегоРодителя = "0";
	
	Для Каждого СтрокаТЧ из ТабличнаяЧасть Цикл 
		
		Если НЕ  ТранзакцияАктивна() Тогда
			НачатьТранзакцию();				
		КонецЕсли;		
		
		#Если Клиент Тогда
			Если ВыводитьПрогрессор Тогда
				ФормаПрогрессора.ЗначениеИндикатора = ФормаПрогрессора.ЗначениеИндикатора +1;
			КонецЕсли;
		#КонецЕсли
		
		Если ЗначениеЗаполнено(СтрокаТЧ.ПолеЗагрузки) И СтрокаТЧ.НомерСтрокиРодителя <> НомерПредидущегоРодителя Тогда
						
			ТипСправочника = СтрокаТЧ.ПолеЗагрузки.ТипОбъекта;
			
			Если ТипСправочника = "Номенклатура" Тогда
				НомерСтрокиРодителя = СтрокаТЧ.НомерСтрокиРодителя;
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("Тэг", "Suppliers_article_number");
				ТекущаяСтрокаРодителя   = СтрокаТЧ.ПорядковыйНомерСтроки;
				СтруктураОтбора.Вставить("НомерСтрокиРодителя", НомерСтрокиРодителя);
				
				СтруктураОтбораЦвета = Новый Структура;
				СтруктураОтбораЦвета.Вставить("Тэг", "Colour_code_supplier");
				СтруктураОтбораЦвета.Вставить("НомерСтрокиРодителя", НомерСтрокиРодителя);
				
				НомерЦвета = ЗагруженныеСтроки.НайтиСтроки(СтруктураОтбораЦвета);
				НайденныйНомерЦвета = НомерЦвета[0].Значение;
				НайденноеЗначение = ЗагруженныеСтроки.НайтиСтроки(СтруктураОтбора);
				
				Если НайденноеЗначение.Количество()>0 Тогда
					Артикул = НайденноеЗначение[0].Значение+ "-" + НайденныйНомерЦвета;
					
					НоваяНоменклатура = ПолучитьНоменклатуруПоАртикулу(Артикул);
										
					Если НоваяНоменклатура = Неопределено Тогда
						ВременноеНаименование = Строка("Обувь" + Артикул);
						НовыйЭлемент = Справочники[ТипСправочника].СоздатьЭлемент();
						НовыйЭлемент.Артикул = Артикул;
						НовыйЭлемент.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Обувь в парах импортная");
						НовыйЭлемент.ЕдиницаИзмерения =	Справочники.УпаковкиЕдиницыИзмерения.НайтиПоНаименованию("пар");
						НовыйЭлемент.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
						НовыйЭлемент.ВестиУчетПоГТД = Истина;
						НовыйЭлемент.ВестиУчетСертификатовНоменклатуры = Истина;
						НовыйЭлемент.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры;
						НовыйЭлемент.Качество = Перечисления.ГрадацииКачества.Новый;
						НовыйЭлемент.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("20%"); 
						НовыйЭлемент.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
						НовыйЭлемент.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция;
						НовыйЭлемент.Наименование = ВременноеНаименование;
						
						НовыйЭлемент.Записать();
						
						флЗаписиНоменклатуры = Истина;
						
						НомерПредидущегоРодителя = СтрокаТЧ.НомерСтрокиРодителя;
					Иначе
						НовыйЭлемент = НоваяНоменклатура;
					КонецЕсли;
				Иначе
					СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + " в строке №" + НомерСтрокиРодителя + ". Описание ошибки: " + ОписаниеОшибки();
					
					ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
					НовыйЭлемент = Справочники[ТипСправочника].СоздатьЭлемент();
					ВременноеНаименование = Строка("Обувь без Артикула!" + СтрокаТЧ.НомерСтрокиРодителя);
					НовыйЭлемент.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоРеквизиту("Товар");
					НовыйЭлемент.ЕдиницаИзмерения =	Справочники.УпаковкиЕдиницыИзмерения.НайтиПоНаименованию("пар");
					НовыйЭлемент.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
					НовыйЭлемент.ВестиУчетПоГТД = Истина;
					НовыйЭлемент.ВестиУчетСертификатовНоменклатуры = Истина;
					НовыйЭлемент.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры;
					НовыйЭлемент.Качество = Перечисления.ГрадацииКачества.Новый;
					НовыйЭлемент.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("20%"); 
					НовыйЭлемент.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
					НовыйЭлемент.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция;
					НовыйЭлемент.Наименование = ВременноеНаименование;
					
					НовыйЭлемент.Записать();
					
					НомерПредидущегоРодителя = СтрокаТЧ.НомерСтрокиРодителя;
					флЗаписиНоменклатуры = Истина;
				КонецЕсли;
				Position_action = НайтиСтрокуДереваПоТэгу("Position_action", СтрокаТЧ, Отказ);
				Если ЗначениеЗаполнено(Position_action) Тогда
					Если СокрЛП(Position_action) = "2" Тогда
						НовыйЭлемент.ПометкаУдаления = Истина;
					Иначе
						НовыйЭлемент.ПометкаУдаления = Ложь;
					КонецЕсли;
					флЗаписиНоменклатуры	= Истина;
				КонецЕсли;
				
				ДополнитьРеквизитыЭлементаНоменклатуры(СтрокаТЧ, Отказ, НовыйЭлемент, ТаблицаArticlеsDescriptions);

			КонецЕсли;
			
		Иначе 
		 //
		КонецЕсли;	
		
		Если НовыйЭлемент <> Неопределено Тогда
			
			НовыйЭлемент.Наименование = НовыйЭлемент.Наименование + " " + НовыйЭлемент.КоллекцияНоменклатуры;
			ДописатьСвойствоGLN_manufacturer(НовыйЭлемент, GLN_manufacturer, СтрокаТЧ);
			
			//Перед записью предварительно проверим содержимое следующего по порядку тэга (следующей строки)
			//и убедимся что это тэг с новой "Message_Position"  или последняя строка
			МенеджерЗаписейСтрок		= РегистрыСведений.гф_СтрокиДокументаДанныеЗагрузки.СоздатьМенеджерЗаписи();
			МенеджерЗаписейСтрок.Документ 				= СтрокаТЧ.Документ;
			МенеджерЗаписейСтрок.Тэг 					= "Message_Position";
			МенеджерЗаписейСтрок.ПорядковыйНомерСтроки 	= СтрокаТЧ.НомерСтрокиРодителя; 
			МенеджерЗаписейСтрок.Прочитать();
			Если МенеджерЗаписейСтрок.Выбран() или СтрокаТЧ.ПорядковыйНомерСтроки = ТабличнаяЧасть.Количество() Тогда
				
				Попытка
					
					НовыйЭлемент.Записать();
					НовыйЭлемент 			= Неопределено;
					ТекущаяСтрокаРодителя   = Неопределено;
					
				Исключение
					СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + " в строке №" + НомерСтрокиРодителя + ". Описание ошибки: " + ОписаниеОшибки();
					ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
					флЗаписиНоменклатуры = Ложь;
				КонецПопытки;
				
				//--------------------------------------
				//фиксируем транзакцию
				Если НЕ Отказ И флЗаписиНоменклатуры Тогда
										
					Если ТранзакцияАктивна() Тогда
						ЗафиксироватьТранзакцию();
						флЗаписиНоменклатуры = Ложь;
					КонецЕсли;		
				Иначе
					Если ТранзакцияАктивна() Тогда
						ОтменитьТранзакцию();
						Отказ = Ложь;
					КонецЕсли;	
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	#Если Клиент Тогда
		Если ВыводитьПрогрессор И ФормаПрогрессора.Открыта() Тогда
			ФормаПрогрессора.Закрыть();
		КонецЕсли;
	#КонецЕсли	
	
	Сообщить(Формат(ТекущаяДата(),"ДЛФ=T")+ " - окончание создания номенклатуры");
	
КонецПроцедуры// } #wortmann

// #wortmann { 
// Возвращает строку родителя, либо саму строку-параметр, если родителя не нашлось.
// Галфинд_Домнышева 2022/09/12
//
// Параметры
// СтрокаТЧ	– <Тип.СтрокаТЧ> 	– строка табличной части по которой ищется ПорядковыйНомерСтроки родителя
//
// Возвращаемое значение:
// <Строка> -  если найден порядковый номер строки родителя 
// СтрокаТЧ	– строка табличной части по которой ищется ПорядковыйНомерСтроки родителя
Функция СтрокаРодитель(СтрокаТЧ)
	НайденноеЗначение = ЗагруженныеСтроки.Найти(СтрокаТЧ.НомерСтрокиРодителя,"ПорядковыйНомерСтроки");
	Если НайденноеЗначение = Неопределено Тогда
		Возврат СтрокаТЧ;
	Иначе
		Возврат НайденноеЗначение;
	КонецЕсли
КонецФункции// } #wortmann

// #wortmann { 
// Создание и Проведение документа УстановкаЦенНоменклатуры 
// Не доработана, в связи с недостатком информации
// Галфинд_Домнышева 2022/09/12
//
// Параметры
//  ТабличнаяЧасть	– <ТаблицаЗначений> – выгрузка РС гф_СтрокиДокументаДанныеЗагрузки по данному Объекту.
//  Отказ - параметр системы 
Процедура СозданиеПроведениеУстановкиЦен(ТабличнаяЧасть, Отказ) 
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//НачатьТранзакцию();	
	//МассивЭлементовНоменклатуры = Новый Массив;
	//ДокументУстановкаЦен = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
	//ДокументУстановкаЦен.Дата = ЭтотОбъект.Дата;
	//ДокументУстановкаЦен.Ответственный = Константы.rc_ОтветственныйДляДокументовВортманн.Получить();
	//УстанавливатьЦены = Истина;
	//		
	//НовыйЭлемент = Неопределено;
	//НомерСтрокиРодителя = 1;
	//
	//// Проверяем наличие соответствующих тэгов по наименованию в настройках загружаемых данных
	//СПР_ТЭГ_SRP			= Справочники.гф_НастройкаЗагружаемыхДанных.НайтиПоНаименованию("Suggested_retail_price",ИСТИНА);
	//Если СПР_ТЭГ_SRP	= НЕОПРЕДЕЛЕНО ИЛИ СПР_ТЭГ_SRP = Справочники.гф_НастройкаЗагружаемыхДанных.ПустаяСсылка() Тогда
	//	СообщениеОбОшибке = "Установка цен номенклатуры. Не удалось найти в настройках загружаемых данных тэг с наименованием Suggested_retail_price";
	//	ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
	//	Отказ 				= ИСТИНА;
	//	УстанавливатьЦены = ЛОЖЬ;	
	//КонецЕсли;	
	//СПР_ТЭГ_EPP			= Справочники.гф_НастройкаЗагружаемыхДанных.НайтиПоНаименованию("Effective_purchase_price",ИСТИНА);
	//Если СПР_ТЭГ_EPP	= НЕОПРЕДЕЛЕНО ИЛИ СПР_ТЭГ_EPP = Справочники.гф_НастройкаЗагружаемыхДанных.ПустаяСсылка() Тогда
	//	СообщениеОбОшибке = "Установка цен номенклатуры. Не удалось найти в настройках загружаемых данных тэг с наименованием Suggested_retail_price";
	//	ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
	//	Отказ 				= ИСТИНА;
	//	УстанавливатьЦены = ЛОЖЬ;	
	//КонецЕсли;	
	//
	//// Проверяем наличие типов цен по наименованию
	//СПР_ТипЦен_SRP			= Справочники.ВидыЦен.НайтиПоНаименованию("Suggested_retail_price_RU",ИСТИНА);
	//Если СПР_ТипЦен_SRP	= НЕОПРЕДЕЛЕНО ИЛИ СПР_ТипЦен_SRP = Справочники.ВидыЦен.ПустаяСсылка() Тогда
	//	СообщениеОбОшибке = "Установка цен номенклатуры. Не удалось найти в справочнике типов цен тип с наименованием Suggested_retail_price_RU";
	//	ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
	//	Отказ 				= ИСТИНА;
	//	УстанавливатьЦены = ЛОЖЬ;	
	//КонецЕсли;	
	//СПР_ТипЦен_EPP			= Справочники.ВидыЦен.НайтиПоНаименованию("Effective_purch_price_RU",ИСТИНА);
	//Если СПР_ТипЦен_EPP	= НЕОПРЕДЕЛЕНО ИЛИ СПР_ТипЦен_EPP = Справочники.ВидыЦен.ПустаяСсылка() Тогда
	//	СообщениеОбОшибке = "Установка цен номенклатуры. Не удалось найти в справочнике типов цен тип с наименованием Effective_purch_price_RU";
	//	ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
	//	Отказ 				= ИСТИНА;
	//	УстанавливатьЦены = ЛОЖЬ;	
	//КонецЕсли;	
	//
	//СоответствиеЦен		= Новый Соответствие;
	//СоответствиеЦен.Вставить("Suggested_retail_price",		СПР_ТипЦен_SRP);
	//СоответствиеЦен.Вставить("Effective_purchase_price",	СПР_ТипЦен_EPP);
	//
	//Для Каждого СтрокаТЧ из ТабличнаяЧасть Цикл 
	//	
	//	Если ЗначениеЗаполнено(СтрокаТЧ.ПолеЗагрузки) Тогда
	//			            			
	//		Если СтрокаТЧ.ПолеЗагрузки.ТипОбъекта = Перечисления.ТипыОбъектов.ДокументУстановкаЦен и СтрокаТЧ.ПолеЗагрузки.ОбъектМетаданных = "Товары.Цена" Тогда
	//			
	//			Если УстанавливатьЦены и (СтрокаТЧ.ПолеЗагрузки = СПР_ТЭГ_SRP ИЛИ СтрокаТЧ.ПолеЗагрузки = СПР_ТЭГ_EPP) Тогда
	//				
	//				НомерСтрокиРодителя = СтрокаТЧ.НомерСтрокиРодителя;
	//				СтруктураОтбора = Новый Структура;
	//				СтруктураОтбора.Вставить("Тэг", "EAN");
	//				СтруктураОтбора.Вставить("НомерСтрокиРодителя", НомерСтрокиРодителя);
	//				НайденноеЗначение = ЗагруженныеСтроки.НайтиСтроки(СтруктураОтбора);
	//				Если НайденноеЗначение.Количество()>0 Тогда
	//					Код = НайденноеЗначение[0].Значение;
	//					НайденныйЭлемент = Справочники.Номенклатура.НайтиПоКоду(Код);
	//					Если ЗначениеЗаполнено(НайденныйЭлемент) Тогда
	//						НовыйЭлемент = НайденныйЭлемент;
	//					Иначе
	//						СообщениеОбОшибке = "Установка цен номенклатуры. Не удалось найти номенклатуру для строки "+СтрокаТЧ.НомерСтрокиРодителя;
	//						ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
	//						Продолжить;
	//					КонецЕсли;
	//				Иначе	
	//					СообщениеОбОшибке = "Установка цен номенклатуры. Не удалось найти Suggested_retail_price для узла (строки) № "+СтрокаТЧ.НомерСтрокиРодителя;
	//					ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
	//					Продолжить;
	//				КонецЕсли;	
	//				
	//				
	//				СтрНазваниеВалюты 	= НайтиСтрокуДереваПоТэгу("Currency",, Отказ);	
	//				Если Отказ или НЕ ЗначениеЗаполнено(СтрНазваниеВалюты) Тогда
	//					СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + ". Описание ошибки: Не найден или не заполнен тэг Currency.";
	//					ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
	//				КонецЕсли;
	//				
	//				// Определим единицу измерения
	//				Если СтрокаТЧ.ПолеЗагрузки = СПР_ТЭГ_EPP Тогда
	//		
	//					ЕдиницаМестПоКлассификатору = Справочники.w_Настройки.ЕдиницаМестПоКлассификатору.Значение;
	//					//СделатьЗаписьУстановкиЦен(ЕдиницаМестПоКлассификатору,НовыйЭлемент,СоответствиеЦен.Получить(СтрокаТЧ.ПолеЗагрузки.Наименование),ДокументУстановкаЦен,СтрокаТЧ,Отказ);
	//					
	//				Иначе
	//					//СделатьЗаписьУстановкиЦен(НовыйЭлемент.БазоваяЕдиницаИзмерения,НовыйЭлемент,СоответствиеЦен.Получить(СтрокаТЧ.ПолеЗагрузки.Наименование),ДокументУстановкаЦен,СтрокаТЧ,Отказ);					
	//				КонецЕсли;	
	//								
	//			КонецЕсли;		//устанавливать цены
	//		
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Если УстанавливатьЦены И ДокументУстановкаЦен.Товары.Количество()>0 Тогда
	//	ДокументУстановкаЦен.Товары.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, Валюта, ЕдиницаИзмерения, ПроцентСкидкиНаценки, ТипЦен, СпособРасчетаЦены","Цена");
	//	ТипыЦен = ДокументУстановкаЦен.Товары.Выгрузить(,"ТипЦен");
	//	ТипыЦен.Свернуть("ТипЦен");
	//	ДокументУстановкаЦен.ТипыЦен.Загрузить(ТипыЦен);
	//	ДокументУстановкаЦен.Записать(РежимЗаписиДокумента.Запись);
	//	Если Константы.rc_ПроводитьДокументУстановкаЦен.Получить() Тогда
	//		Попытка
	//			ДокументУстановкаЦен.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	//		Исключение
	//			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, "Произошли ошибки при проведении документа " + ДокументУстановкаЦен + ".|" + ОписаниеОшибки());
	//		КонецПопытки;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если Не Отказ Тогда
	//	ЗафиксироватьТранзакцию();
	//Иначе
	//	ОтменитьТранзакцию();
	//КонецЕсли;
	
КонецПроцедуры

// #wortmann { 
// Создание варианта комплектации
// Галфинд_Домнышева 2022/09/12
//
// Параметры
//  НаборЗаписейТэговXML	– <ТаблицаЗначений> – выгрузка РС гф_СтрокиДокументаДанныеЗагрузки по данному Объекту.
//  Отказ - параметр системы
Процедура СоздатьВариантКомплектации(НаборЗаписейТэговXML, Отказ)
			
	Если Не ПроверкаПравильности_PricatSort() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;   
	
	ВариантКомплектации = Неопределено;
	НомерСтрокиРодителя = 0;
	
	Для Каждого СтрокаТЧ из НаборЗаписейТэговXML Цикл 				//Цикл по тегам XML
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
		
		Если Найти(СтрокаТЧ.Тэг, "Message_Position")>0 Тогда
			НомерСтрокиРодителя = СтрокаТЧ.НомерСтроки;	
			Suppliers_article_number = НайтиСтрокуДереваПоТэгуОтПорядкового("Suppliers_article_number", СтрокаТЧ, Отказ);
			Colour_code_supplier = НайтиСтрокуДереваПоТэгуОтПорядкового("Colour_code_supplier", СтрокаТЧ, Отказ);
			
			// Разбираем строку из XML на необходимые значения
			ПозицияПервогоТире = Найти(Suppliers_article_number, "-"); 
			НаименованиеБезSO = Сред(Suppliers_article_number, ПозицияПервогоТире + 1); 
			ПозицияВторогоТире = Найти(НаименованиеБезSO, "-");
			Характеристика = Лев(НаименованиеБезSO, ПозицияВторогоТире - 1);
			Наименование = Сред(НаименованиеБезSO, ПозицияВторогоТире + 1); 
			НаименованиеВарианта = Наименование + "-" + Colour_code_supplier + "/" + Характеристика;
			Артикул = Наименование + "-" + Colour_code_supplier;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВариантыКомплектацииНоменклатуры.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
			|ГДЕ
			|	ВариантыКомплектацииНоменклатуры.Наименование = &Наименование";
			
			Запрос.УстановитьПараметр("Наименование", НаименованиеВарианта);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если Не РезультатЗапроса.Пустой() Тогда
				СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + 
				". Описание ошибки: Вариант комплектации уже существует - "+ НаименованиеВарианта;
				ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
				Отказ = Истина;
				Возврат;		
			Иначе
				ВариантКомплектации = Справочники.ВариантыКомплектацииНоменклатуры.СоздатьЭлемент();
				ВариантКомплектации.Наименование = НаименованиеВарианта;
				ВариантКомплектации.Характеристика = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(Характеристика);
				Номенклатура = ПолучитьНоменклатуруПоАртикулу(Артикул);
				Если Номенклатура <> Неопределено Тогда
					ВариантКомплектации.Владелец = Номенклатура.Ссылка;
				Иначе
					СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + 
					". Описание ошибки: Не найдена номенклатура с артикулом - "+ Артикул;
					ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
					Отказ = Истина;
					Возврат;
				КонецЕсли;
				ВариантКомплектации.Количество =  НайтиСтрокуДереваПоТэгуОтПорядкового("Quantity_per_packing_unit", СтрокаТЧ, Отказ);
				ВариантКомплектации.КоличествоУпаковок = ВариантКомплектации.Количество; 
				ВариантКомплектации.гф_Штрихкод = НайтиСтрокуДереваПоТэгуОтПорядкового("EAN", СтрокаТЧ, Отказ);
				ВесКороба = НайтиСтрокуДереваПоТэгуОтПорядкового("Weight", СтрокаТЧ, Отказ);
				ЕдиницаИзмеренияВеса = НайтиСтрокуДереваПоТэгуОтПорядкового("WeightUnit", СтрокаТЧ, Отказ);
				Если ЕдиницаИзмеренияВеса = "g" Тогда
					К = 1000;
				Иначе К = 1;
				КонецЕсли;
				// В спр ВариантКомплектации Вес указывается в граммах 
				ВариантКомплектации.гф_ВесКороба = ?(ВесКороба = 0, 0, ВесКороба/К); 
				//ВариантКомплектации.гф_ОбъемКороба = НайтиСтрокуДереваПоТэгуОтПорядкового("EAN", СтрокаТЧ, Отказ);
				ВариантКомплектации.гф_ДлинаКороба = НайтиСтрокуДереваПоТэгуОтПорядкового("Length", СтрокаТЧ, Отказ);
				ВариантКомплектации.гф_ШиринаКороба = НайтиСтрокуДереваПоТэгуОтПорядкового("Width", СтрокаТЧ, Отказ);
				ВариантКомплектации.гф_ВысотаКороба = НайтиСтрокуДереваПоТэгуОтПорядкового("Height", СтрокаТЧ, Отказ);
				//ВариантКомплектации.Упаковка = Номенклатура. 
				ВариантКомплектации.Записать();
			КонецЕсли;
		ИначеЕсли Найти(СтрокаТЧ.Тэг, "Message_Sub_Position")>0
			И ВариантКомплектации <> Неопределено Тогда
			//НомерСтрокиРодителя = СтрокаТЧ.НомерСтроки;
			НоваяСтрока = ВариантКомплектации.Товары.Добавить();
			EAN = НайтиСтрокуДереваПоТэгуОтПорядкового("EAN", СтрокаТЧ, Отказ);
			Отбор = Новый Структура("Штрихкод", EAN);
			СтруктураНоменклатуры = РегистрыСведений.ШтрихкодыНоменклатуры.Получить(Отбор);
			НоваяСтрока.Номенклатура = СтруктураНоменклатуры.Номенклатура;
			НоваяСтрока.Характеристика = СтруктураНоменклатуры.Характеристика;
			НоваяСтрока.Количество = НайтиСтрокуДереваПоТэгуОтПорядкового("Quantity", СтрокаТЧ, Отказ);
			НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
			НоваяСтрока.Упаковка = СтруктураНоменклатуры.Упаковка;
			ВариантКомплектации.Записать();	
		КонецЕсли;
		
		Если Отказ Тогда
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, 
			"Произошли ошибки при записи Варианта комплектации " + ВариантКомплектации + ".|" + ОписаниеОшибки());
			
		КонецЕсли;
		
	КонецЦикла;				
	
КонецПроцедуры// } #wortmann

// #wortmann { 
// Проверяет наличие всех значений тэгов EAN в РС Штрихкоды номенклатуры
// Галфинд_Домнышева 2022/09/12
//
// Параметры
//  ВыводитьПрогрессор – <Булево> – выводит форму Прогрессора при значении Истина
//  СтрокаНаименованиеТэга	– <Тип.СтрокаТЧ> – строка табличной части для которой ищется предок с заданным именем
//
// Возвращаемое значение:
// Результат - <Булево> - Возврат Истина, если в базе найдены все Штрихкоды номенклатуры, 
//                      - Ложь - если не найдено хоть одно значение штрихкода номенклатуры
Функция ПроверкаПравильности_PricatSort(ВыводитьПрогрессор = Ложь, СтрокаНаименованиеТэга = "Group_type")

	Отказ = Ложь;
	Group_type = НайтиСтрокуДереваПоТэгу(СтрокаНаименованиеТэга,,Отказ);

	Если Отказ Тогда
		СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + ". Описание ошибки: Не найден тэг Group_type.";
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
		Возврат Ложь;
	КонецЕсли;
	
	Если СокрЛП(Group_type) = "10E" Тогда								//Это Pricat Sort - производим проверку
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Тэг", "EAN");        					//Отбираем все строки тэгов EAN
		СтрокиEAN = ЗагруженныеСтроки.НайтиСтроки(СтруктураОтбора);
        //СтрокиEAN.Удалить(0);		
		#Если Клиент Тогда
		Если ВыводитьПрогрессор Тогда
			ФормаПрогрессора = ПолучитьФорму("ФормаПрогрессора");
			ФормаПрогрессора.ЭлементыФормы.ЗначениеИндикатора.СтильОтображения = РежимСглаживанияИндикатора.Плавный;
			ФормаПрогрессора.ЭлементыФормы.ЗначениеИндикатора.МинимальноеЗначение = 0;
			ФормаПрогрессора.ЭлементыФормы.ЗначениеИндикатора.МаксимальноеЗначение = СтрокиEAN.Количество();
			ФормаПрогрессора.СтрокаПрогрессора = "Проверка ассортимента номенклатуры...";
			ФормаПрогрессора.Открыть();	
		КонецЕсли;
		#КонецЕсли
		
		//Артикулы не прошедшие проверку будем запишем в массив в массив
		МассивНеНайденнойНоменклатуры	= Новый Массив;
		Для каждого СтрокаEAN Из СтрокиEAN Цикл
			//Если СтрокаEAN = СтрокиEAN[0] Тогда
			//	Продолжить;
			//КонецЕсли;
			#Если Клиент Тогда
			Если ВыводитьПрогрессор Тогда
				ФормаПрогрессора.ЗначениеИндикатора = ФормаПрогрессора.ЗначениеИндикатора +1;
			КонецЕсли;
			#КонецЕсли
			
			СтрокаРодителя	= СтрокаРодитель(СтрокаEAN);
			//Тэги с артикулами не относящиеся к Sub_Position пропускаем
			Если НЕ СтрокаРодителя.Тэг	= "Message_Sub_Position" Тогда
				Продолжить;
			КонецЕсли;
						
			EAN	= СокрЛП(СтрокаEAN.Значение);
			//НайденныйЭлемент = Справочники.Номенклатура.НайтиПоРеквизиту(EAN);
			Отбор = Новый Структура("Штрихкод", EAN);
			НайденныйЭлемент = РегистрыСведений.ШтрихкодыНоменклатуры.Получить(Отбор).Номенклатура;

			Если (НайденныйЭлемент = Неопределено ИЛИ НайденныйЭлемент.Пустая()) И МассивНеНайденнойНоменклатуры.Найти(EAN) = Неопределено Тогда
				МассивНеНайденнойНоменклатуры.Добавить(EAN);   			
			КонецЕсли;
			
		КонецЦикла;
		
		//Обход массива артикулов не прошедших проверку с выдачей сообщения об ошибке
		Если МассивНеНайденнойНоменклатуры.Количество() > 0 Тогда
			#Если Клиент Тогда
			Если ВыводитьПрогрессор И ФормаПрогрессора.Открыта() Тогда
				ФормаПрогрессора.СтрокаПрогрессора = "Формирование списка ошибок...";
			КонецЕсли;
			#КонецЕсли
			СтрокаПереченьНеНайденнойНоменклатуры = "";
			Для каждого ЭлементМассиваEAN Из МассивНеНайденнойНоменклатуры Цикл      
				СтрокаПереченьНеНайденнойНоменклатуры = ?(СтрокаПереченьНеНайденнойНоменклатуры = "", "", СтрокаПереченьНеНайденнойНоменклатуры + "; ")+Символы.ПС+Строка(ЭлементМассиваEAN);			
			КонецЦикла; 
			СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + ". Описание ошибки: При проверке номенклатуры для Pricat_Sort не обнаружена номенклатура для EAN: "+СтрокаПереченьНеНайденнойНоменклатуры;
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
			Результат = Ложь;					//Определено отсутствие как минимум одой пары из комплекта - проверка не прошла!
		Иначе	
			Результат = Истина;					//нашли номенклатуру для каждой Message_Sub_Position 
		КонецЕсли;
        				
		#Если Клиент Тогда
		Если ВыводитьПрогрессор И ФормаПрогрессора.Открыта() Тогда
			ФормаПрогрессора.Закрыть();
		КонецЕсли;
		#КонецЕсли
		
		Возврат Результат;
		
	Иначе										//Это НЕ Pricat Sort -  проверку не производим!
		Возврат Истина;
	КонецЕсли;
	

КонецФункции// } #wortmann

// #wortmann { 
// Заполнение дополнительных свойств номенклатуры
// Галфинд_Домнышева 2022/09/12
//
// Параметры
//  СтрокаТЧ	– <Тип.СтрокаТЧ> 	– строка табличной части для которой ищется предок с заданным именем
//  Отказ - параметр системы
//  НовыйЭлемент - <СправочникОбъект.Номенклатура> - созданный объект справочника Номенклатура
//  ТаблицаArticlеsDescriptions	– <Таблица Значений> 	– выгрузка РегистрСведений_гф_ArticlrDescriptions 
Процедура ДополнитьРеквизитыЭлементаНоменклатуры(СтрокаТЧ, Отказ, НовыйЭлемент, ТаблицаArticlеsDescriptions)
	
	Product_group_supplier	= Неопределено;
	GLN_supplier			= Неопределено;
	
	СтруктураСвойств	= ВыбратьВсеТэгиСвойствПоСтрокеАртикулу(СтрокаТЧ);
	
	GLN_supplier = НайтиСтрокуДереваПоТэгу("GLN_supplier",,Отказ);	
	Если Отказ Тогда
		СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + ". Описание ошибки: Не найден тэг GLN_supplier.";
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
		Возврат;
	КонецЕсли;
	
	//----------------------------------------------------------------
	//1. Формируем наименование
	//----------------------------------------------------------------
	НайденноеЗначение	= Неопределено;
	СвойствоНайдено = СтруктураСвойств.Свойство("Product_group_supplier", НайденноеЗначение);
	Если СвойствоНайдено Тогда
		Product_group_supplier = НайденноеЗначение;
	КонецЕсли;
	
	СтавкаНДСПоУмолчанию = Справочники.СтавкиНДС.НайтиПоНаименованию("20%");
		
	НайденноеЗначение = Неопределено;
	
	Если ЗначениеЗаполнено(Product_group_supplier) Тогда
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Product_group", Product_group_supplier);
		СтруктураОтбора.Вставить("GLN_Supplier", GLN_supplier);
		СтрокиНаименований	= ТаблицаArticlеsDescriptions.НайтиСтроки(СтруктураОтбора);		
		Если СтрокиНаименований.Количество() > 0 Тогда
			
			СтрокаН = СтрокиНаименований[0];			
			
			РусскоеНаименование	 = СтрокаН.NameRU;
			//проверка наименования
			Если СокрЛП(НовыйЭлемент.Наименование) <> РусскоеНаименование Тогда
								
				НовыйЭлемент.Наименование = РусскоеНаименование;
				флЗаписиНоменклатуры = Истина;
			КонецЕсли;
			
			Если СокрЛП(НовыйЭлемент.НаименованиеПолное) <> РусскоеНаименование Тогда
				НовыйЭлемент.НаименованиеПолное = РусскоеНаименование;
				флЗаписиНоменклатуры = Истина;
			КонецЕсли;
						
			//если указан родитель, помещаем в эту группу
			Родитель = СтрокаН.Родитель;
			Если НЕ НовыйЭлемент.Родитель = Родитель Тогда
				НовыйЭлемент.Родитель = Родитель;
				флЗаписиНоменклатуры = Истина;
			КонецЕсли;
			
			//проверка вида номенклатуры, по умолчанию присваиваем "Обувь в парах импортная"	
			ВидНоменклатуры = СтрокаН.ВидНоменклатуры;
			Если НЕ НовыйЭлемент.ВидНоменклатуры = ВидНоменклатуры Тогда
				НовыйЭлемент.ВидНоменклатуры = ВидНоменклатуры;
				флЗаписиНоменклатуры = Истина;
			КонецЕсли;
	
			Если ЗначениеЗаполнено(СтрокаН.СтавкаНДС) Тогда
				СтавкаНДС = СтрокаН.СтавкаНДС;
			Иначе
				СтавкаНДС = СтавкаНДСПоУмолчанию;
			КонецЕсли;
			
			Если НЕ НовыйЭлемент.СтавкаНДС = СтавкаНДС Тогда
				НовыйЭлемент.СтавкаНДС = СтавкаНДС;
				флЗаписиНоменклатуры = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//----------------------------------------------------------------
	//2. Формируем базовую единицу измерения
	//----------------------------------------------------------------
	Если ЗначениеЗаполнено(Product_group_supplier) и ЗначениеЗаполнено(GLN_supplier) Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Product_group", Product_group_supplier);
		СтруктураОтбора.Вставить("GLN_Supplier", GLN_supplier);
		СтрокиНаименований	= ТаблицаArticlеsDescriptions.НайтиСтроки(СтруктураОтбора);		
		Если СтрокиНаименований.Количество() > 0 Тогда
			ЕИКлассификатор	= СтрокиНаименований[0].ЕдиницаИзмеренияПоКлассификатору;
			//проверка на измененеие и если необходимо - запись
			Если НЕ НовыйЭлемент.ЕдиницаИзмерения = ЕИКлассификатор Тогда
				НовыйЭлемент.ЕдиницаИзмерения = ЕИКлассификатор;
				флЗаписиНоменклатуры	= Истина;					
			КонецЕсли;
		Иначе
			СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + ". Описание ошибки: В регистре ""ArticlrDescriptions"" не удалось найти единицу измерения для "+ СокрЛП(Product_group_supplier);
			//ОбработатьОшибку(СтрокаТЧ, СообщениеОбОшибке, Отказ, Истина);
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	Иначе
		СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + ". Описание ошибки: Не удалось определить свойство ""Product_group_supplier"" для Articl:"+ СокрЛП(НовыйЭлемент.Артикул);
		//ОбработатьОшибку(СтрокаТЧ, СообщениеОбОшибке, Отказ, Истина);
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
		Отказ = Истина;
		Возврат;	
	КонецЕсли;
	//----------------------------------------------------------------
	// 3. Добавляем значения производителя и марки 
	//----------------------------------------------------------------
	СтранаПроисхождения = НайтиСтрокуДереваПоТэгу("Country_of_origin", СтрокаТЧ, Отказ);	
	Если ЗначениеЗаполнено(СтранаПроисхождения) Тогда
		НайденныйЭлемент = Справочники.СтраныМира.НайтиПоРеквизиту("КодАльфа2", СокрЛП(СтранаПроисхождения));
		Если ЗначениеЗаполнено(НайденныйЭлемент) Тогда
			НовыйЭлемент.СтранаПроисхождения = НайденныйЭлемент;
			флЗаписиНоменклатуры	= Истина;
		Иначе
			СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + " в строке №" + СтрокаТЧ.ПорядковыйНомерСтроки + ". Описание ошибки: В классификаторе стран мира не найдено указанное значение";
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
		КонецЕсли;
	Иначе
		СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + " в строке №" + СтрокаТЧ.ПорядковыйНомерСтроки + ". Описание ошибки: Не заполнено значение страны происхождения";
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
	КонецЕсли; 
	
	//----------------------------------------------------------------
	// 4. Записываем дополнительные свойства объекта 
	//----------------------------------------------------------------
	Если НовыйЭлемент <> Неопределено Тогда
		
		СтруктураОтбора = Новый Структура;	
		СтруктураОтбора.Вставить("НомерСтрокиРодителя", СтрокаТЧ.НомерСтрокиРодителя);	
		СтруктураОтбора.Вставить("СтатусПоля", Перечисления.гф_СтатусыПоля.Информационное);
        		
		ДополнительныеРеквизиты = ЗагруженныеСтроки.НайтиСтроки(СтруктураОтбора); 
		
		СтруктураОтбора = Новый Структура;	
		СтруктураОтбора.Вставить("НомерСтрокиРодителя", СтрокаТЧ.НомерСтрокиРодителя);	
		СтруктураОтбора.Вставить("СтатусПоля", Перечисления.гф_СтатусыПоля.Обязательное);
        ОбязательныеРеквизиты = ЗагруженныеСтроки.НайтиСтроки(СтруктураОтбора); 
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДополнительныеРеквизиты, ОбязательныеРеквизиты);
		
		СтруктураОтбора = Новый Структура;	
		СтруктураОтбора.Вставить("НомерСтрокиРодителя", СтрокаТЧ.НомерСтрокиРодителя);	
		СтруктураОтбора.Вставить("СтатусПоля", Перечисления.гф_СтатусыПоля.Критическое);
        КритическиеРеквизиты = ЗагруженныеСтроки.НайтиСтроки(СтруктураОтбора); 
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДополнительныеРеквизиты, КритическиеРеквизиты);		
		
		ЗначенияСвойств = Новый Массив;
		Для каждого Реквизит Из ДополнительныеРеквизиты Цикл 
			ИндексЗначения = Реквизит.ПолеЗагрузки.Объект;
			Если Реквизит.ПолеЗагрузки.ТипОбъекта = "Номенклатура" 
				И Реквизит.ПолеЗагрузки.Объект <> "Артикул" Тогда
				ТипРеквизита = ТипЗнч(НовыйЭлемент[ИндексЗначения]);
				МетаданныеОбъекта = НовыйЭлемент[ИндексЗначения].Метаданные();
				Если ТипРеквизита = Тип("Строка") Тогда
					НовыйЭлемент[ИндексЗначения] = Строка(Реквизит.Значение);
				ИначеЕсли ТипРеквизита = Тип("Число") Тогда
					НовыйЭлемент[ИндексЗначения] = Число(Реквизит.Значение);
				ИначеЕсли ТипРеквизита = Тип("Дата") Тогда
					НовыйЭлемент[ИндексЗначения] = Дата(Реквизит.Значение);
				ИначеЕсли Найти(МетаданныеОбъекта.ПолноеИмя(), "Справочник")>0 Тогда	
					ЗначениеСправочника = Справочники[МетаданныеОбъекта.Имя].НайтиПоКоду(Реквизит.Значение);
					Если ЗначениеЗаполнено(ЗначениеСправочника) Тогда
						НовыйЭлемент[ИндексЗначения] = ЗначениеСправочника;
					Иначе ЗначениеСправочника = Справочники[МетаданныеОбъекта.Имя].НайтиПоНаименованию(Реквизит.Значение); 
						Если ЗначениеЗаполнено(ЗначениеСправочника) Тогда
							НовыйЭлемент[ИндексЗначения] = ЗначениеСправочника;
						Иначе
							ИзменитьКомментарийВРегистре(Реквизит.ПорядковыйНомерСтроки, Реквизит.Тэг, "Значение в базе не найдено")
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;	
				флЗаписиНоменклатуры	= Истина; 	
			ИначеЕсли ТипЗнч(Реквизит.ПолеЗагрузки.ТипОбъекта)
				= Тип("СправочникСсылка.НаборыДополнительныхРеквизитовИСведений") Тогда												
				Значение = Новый Структура("Свойство, Значение", Реквизит.ПолеЗагрузки.Объект, Реквизит.Значение);
				ЗначенияСвойств.Добавить(Значение);
				Если Реквизит.Тэг = "Picture_name"  Тогда
					ПоискИЗаписьКартинки(Реквизит.Значение, СтрокаТЧ, НовыйЭлемент);
				КонецЕсли;
			ИначеЕсли Реквизит.Тэг = "EAN" Тогда
				СоздатьШтрихкод(СтрокаТч, ВидНоменклатуры, НовыйЭлемент, Реквизит.Значение, ЕИКлассификатор);
			КонецЕсли;
		КонецЦикла;
		
		Если Реквизит.ПолеЗагрузки.ТипОбъекта = "Номенклатура" И Реквизит.Тэг = "Supplier_season" Тогда												
				Свойство_Supplier_season = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Supplier_season");
				Значение = Новый Структура("Свойство, Значение", Свойство_Supplier_season, Реквизит.Значение);
				ЗначенияСвойств.Добавить(Значение);			
		КонецЕсли;
		Если ЗначениеЗаполнено(GLN_supplier) Тогда
			Свойство_GLN_supplier = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("GLN_supplier");
			Значение = Новый Структура("Свойство, Значение", Свойство_GLN_supplier, GLN_supplier);
			ЗначенияСвойств.Добавить(Значение);
		КонецЕсли;
		
		Если ЗначенияСвойств.Количество() > 0 Тогда
			ЗаписатьНаборСвойствВРегистр(НовыйЭлемент.Ссылка, ЗначенияСвойств, СтрокаТЧ);
			флЗаписиНоменклатуры	= Истина;
		КонецЕсли;
		
	КонецЕсли;                                  
	
КонецПроцедуры// } #wortmann

// #wortmann { 
// выбирает значение ТЭГа по порядковому номеру строки родителя для текущей строки
// Галфинд_Домнышева 2022/09/12
//
// Параметры
//  Тэг	– <Строка> 	– имя ТЭГа из файла
//  СтрокаТЧ	– <Тип.СтрокаТЧ> 	– строка табличной части для которой ищется предок с заданным именем
//  Отказ - параметр системы
//
// Возвращаемое значение:
//  - Строка - значение ТЭГа по порядковому номеру строки родителя для текущей строки
//  - Неопределено - если по указанному ТЭГу нет значений или этого ТЭГа нет в файле
Функция НайтиСтрокуДереваПоТэгу(Тэг, СтрокаТЧ = Неопределено, Отказ)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Тэг", Тэг);
	Если не СтрокаТЧ = Неопределено Тогда
		СтруктураОтбора.Вставить("НомерСтрокиРодителя", СтрокаТЧ.НомерСтрокиРодителя);
	КонецЕсли;
	НайденноеЗначение = ЗагруженныеСтроки.НайтиСтроки(СтруктураОтбора);
	Если НайденноеЗначение.Количество()>0 Тогда
		Если ЗначениеЗаполнено(НайденноеЗначение[0].Значение) Тогда
			Возврат НайденноеЗначение[0].Значение;
		иначе
			Если СтрокаТЧ = Неопределено Тогда
				СообщениеОбОшибке = "Ошибка при проведении документа " + Ссылка + ". Описание ошибки: Не заполнен тэг " + Тэг;
				//ОбработатьОшибку(, СообщениеОбОшибке, Отказ, Истина);
			Иначе
				СообщениеОбОшибке = "Ошибка при проведении документа " + Ссылка + " в строке №" + СтрокаТЧ.ПорядковыйНомерСтроки + ". Описание ошибки: Не заполнено значение строки " + Тэг;
				//ОбработатьОшибку(СтрокаТЧ, СообщениеОбОшибке, Отказ, Истина);
			КонецЕсли;
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, Ссылка, Ссылка, СообщениеОбОшибке);
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		СообщениеОбОшибке = "Ошибка при проведении документа " + Ссылка + ". Описание ошибки: Не найден тэг " + Тэг;
		//ОбработатьОшибку(, СообщениеОбОшибке, Отказ, Истина);
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, Ссылка, Ссылка, СообщениеОбОшибке);
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции// } #wortmann 

// #wortmann { 
// выбирает значение ТЭГа по порядковому номеру текущей строки
// Галфинд_Домнышева 2022/09/12
//
// Параметры
//  Тэг	– <Строка> 	– имя ТЭГа из файла
//  СтрокаТЧ	– <Тип.СтрокаТЧ> 	– строка табличной части для которой ищется предок с заданным именем
//  Отказ - параметр системы
//
// Возвращаемое значение:
//  - Строка - значение ТЭГа по порядковому номеру текущей строки
//  - Неопределено - если по указанному ТЭГу нет значений или этого ТЭГа нет в файле
Функция НайтиСтрокуДереваПоТэгуОтПорядкового(Тэг, СтрокаТЧ = Неопределено, Отказ)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Тэг", Тэг);
	Если не СтрокаТЧ = Неопределено Тогда
		СтруктураОтбора.Вставить("НомерСтрокиРодителя", СтрокаТЧ.ПорядковыйНомерСтроки);
	КонецЕсли;
	НайденноеЗначение = ЗагруженныеСтроки.НайтиСтроки(СтруктураОтбора);
	Если НайденноеЗначение.Количество()>0 Тогда
		Если ЗначениеЗаполнено(НайденноеЗначение[0].Значение) Тогда
			Возврат НайденноеЗначение[0].Значение;
		иначе
			Если СтрокаТЧ = Неопределено Тогда
				СообщениеОбОшибке = "Ошибка при проведении документа " + Ссылка + ". Описание ошибки: Не заполнен тэг " + Тэг;
				//ОбработатьОшибку(, СообщениеОбОшибке, Отказ, Истина);
			Иначе
				СообщениеОбОшибке = "Ошибка при проведении документа " + Ссылка + " в строке №" + СтрокаТЧ.ПорядковыйНомерСтроки + ". Описание ошибки: Не заполнено значение строки " + Тэг;
				//ОбработатьОшибку(СтрокаТЧ, СообщениеОбОшибке, Отказ, Истина);
			КонецЕсли;
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, Ссылка, Ссылка, СообщениеОбОшибке);
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		СообщениеОбОшибке = "Ошибка при проведении документа " + Ссылка + ". Описание ошибки: Не найден тэг " + Тэг;
		//ОбработатьОшибку(, СообщениеОбОшибке, Отказ, Истина);
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, Ссылка, Ссылка, СообщениеОбОшибке);
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции// } #wortmann

// #wortmann { 
// выбирает все тэги по номеру строки родителя
// Галфинд_Домнышева 2022/09/12
//
// Параметры
//  СтрокаТЧ	– <Тип.СтрокаТЧ> 	– строка табличной части для которой ищется предок с заданным именем
//
// Возвращаемое значение:
//   <Структура>   – структура тэгов по найденных по номеру строки родителя
Функция ВыбратьВсеТэгиСвойствПоСтрокеАртикулу(СтрокаТЧ)
	
	Результат = Новый Структура;
	
    СтруктураОтбора = Новый Структура;
	Если СтрокаТЧ <> Неопределено Тогда
		СтруктураОтбора.Вставить("НомерСтрокиРодителя", СтрокаТЧ.НомерСтрокиРодителя);
	Иначе
		Возврат Результат;
	КонецЕсли;
	
	МассивСвойств = ЗагруженныеСтроки.НайтиСтроки(СтруктураОтбора);
	Для каждого Свойство Из МассивСвойств Цикл
		Результат.Вставить(Свойство.Тэг, Свойство.Значение);
	КонецЦикла;
	
    Возврат Результат;

КонецФункции// } #wortmann

// #wortmann { 
// Записывает дополнительные свойства объекта в РС ДополнительныеСведения
// Галфинд_Домнышева 2022/09/12
//
// Параметры
//  СтрокаТЧ	– <Тип.СтрокаТЧ> 	– строка табличной части для которой ищется предок с заданным именем
//  ЗначенияСвойств - <Структура> - набор записываемых свойств объекта
//  Ссылка - <СправочникСсылка.Номенклатура> - ссылка на создоваемый объект справочника Номенклатура
Процедура ЗаписатьНаборСвойствВРегистр(Ссылка, ЗначенияСвойств, СтрокаТЧ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДополнительныеСведения");
		ЭлементБлокировки.УстановитьЗначение("Объект", Ссылка);
		Блокировка.Заблокировать();
		
		Набор = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
		Набор.Отбор.Объект.Установить(Ссылка);
		Набор.Прочитать();
		ТекущиеЗначения = Набор.Выгрузить();                             
		
		Для Каждого Строка Из ЗначенияСвойств Цикл
			Запись = ТекущиеЗначения.Найти(Строка.Свойство, "Свойство");
			Если Запись = Неопределено Тогда
				Запись = ТекущиеЗначения.Добавить();
				Запись.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(Строка.Свойство.Наименование);
				Если Не ЗначениеЗаполнено(Запись.Свойство) Тогда
					Продолжить;
				КонецЕсли;
				//Запись.Значение = Строка.Значение;
				Запись.Объект   = Ссылка;
			КонецЕсли;
			Запись.Значение = Строка.Значение;
			
			Если Не ЗначениеЗаполнено(Запись.Значение)
				Или Запись.Значение = Ложь Тогда
				ТекущиеЗначения.Удалить(Запись);
			КонецЕсли;
		КонецЦикла;
		Набор.Загрузить(ТекущиеЗначения);
		Набор.Записать();
		
	Исключение
		СообщениеОбОшибке = "Ошибка при проведении документа " + Ссылка + " в строке №" + СтрокаТЧ.ПорядковыйНомерСтроки + ". Описание ошибки: Не удалось загрузить дополнительные сведения. " ;
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, Ссылка, Ссылка, СообщениеОбОшибке);		
	КонецПопытки;
	
КонецПроцедуры// } #wortmann 

// #wortmann { 
// Создает записи в РС ШтрихкодыНоменклатуры
// Галфинд_Домнышева 2022/09/12
//
// Параметры
//  СтрокаТЧ	– <Тип.СтрокаТЧ> 	– строка табличной части для которой ищется предок с заданным именем
//  ВидНоменклатуры - <СправочникСсылка.ВидыНоменклатуры> - вид номенклатуры нового элемента
//  НовыйЭлемент - <СправочникОбъект.Номенклатура> - создоваемый объект справочника Номенклатура
//  EAN - <Строка> - значение Тэга "EAN"
//  ЕИКлассификатор - <СправочникСсылка.УпаковкиЕдиницыИзмерения> - единица измерения нового элемента
Процедура СоздатьШтрихкод(СтрокаТЧ, ВидНоменклатуры, НовыйЭлемент, EAN, ЕИКлассификатор) 
	Характеристика = Неопределено;
	
	Размер =  НайтиСтрокуДереваПоТэгу("Size", СтрокаТЧ,);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|   ХарактеристикиНоменклатуры.Владелец = &Владелец
	|	И ХарактеристикиНоменклатуры.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Владелец", ВидНоменклатуры);
	Запрос.УстановитьПараметр("Наименование", Размер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка.Следующий();
		Характеристика = Выборка.Ссылка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
		|	И ШтрихкодыНоменклатуры.Характеристика = &Характеристика";
	
	Запрос.УстановитьПараметр("Номенклатура", НовыйЭлемент.Ссылка);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();

	Если НЕ РезультатЗапроса.Пустой() Тогда
        Выборка.Следующий();

		НаборЗаписейПоСтруктуре = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписейПоСтруктуре.Отбор.Штрихкод.Значение = Выборка.Штрихкод;
		НаборЗаписейПоСтруктуре.Отбор.Штрихкод.Использование = Истина;
		НаборЗаписейПоСтруктуре.Прочитать();
		
		//ТекущиеЗначения = НаборЗаписейПоСтруктуре.Выгрузить();                             
		Если НаборЗаписейПоСтруктуре[0].Штрихкод <> EAN Тогда	
		НаборЗаписейПоСтруктуре.Штрихкод = EAN;		
		НаборЗаписейПоСтруктуре.Записать();
		КонецЕсли;
	Иначе
		Попытка	
			МенеджерЗаписиШтрихкода = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
			МенеджерЗаписиШтрихкода.Номенклатура   = НовыйЭлемент.Ссылка;
			МенеджерЗаписиШтрихкода.Характеристика = Характеристика;
			МенеджерЗаписиШтрихкода.Упаковка       = ЕИКлассификатор;
			МенеджерЗаписиШтрихкода.Штрихкод       = EAN;
			МенеджерЗаписиШтрихкода.Записать();
		Исключение
			СообщениеОбОшибке = "Ошибка при проведении документа " + Ссылка + " в строке №" + СтрокаТЧ.ПорядковыйНомерСтроки + ". Описание ошибки: Не удалось загрузить штрихкоды " ;
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, Ссылка, Ссылка, СообщениеОбОшибке);		
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры// } #wortmann

// #wortmann { 
// Дописывает дополнительное свойство GLN_manufacturer объекта в РС ДополнительныеСведения
// Галфинд_Домнышева 2022/09/12
//
// Параметры
//  СтрокаТЧ	– <Тип.СтрокаТЧ> 	– строка табличной части для которой ищется предок с заданным именем
//  НовыйЭлемент - <СправочникОбъект.Номенклатура> - создоваемый объект справочника Номенклатура
//  GLN_manufacturer - <Строка> - значение ТЭГа GLN_manufacturer
Процедура ДописатьСвойствоGLN_manufacturer(НовыйЭлемент, GLN_manufacturer, СтрокаТЧ) 
	
	Если НЕ ЗначениеЗаполнено(GLN_manufacturer) Тогда
		Возврат;
	КонецЕсли;
	ЗначенияСвойств = Новый Массив;
	Свойство_GLN_manufacturer = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("GLN_manufacturer");
	Значение = Новый Структура("Свойство, Значение", Свойство_GLN_manufacturer, GLN_manufacturer);
	ЗначенияСвойств.Добавить(Значение);
	
	ЗаписатьНаборСвойствВРегистр(НовыйЭлемент.Ссылка, ЗначенияСвойств, СтрокаТЧ);
	
	НовыйЭлемент.ПроизводительИмпортерКонтрагент = Справочники.Контрагенты.НайтиПоРеквизиту("гф_GLN_номер", GLN_manufacturer);
КонецПроцедуры// } #wortmann

// #wortmann { 
// заполняет ТЧ Товары элемента спр ВариантыКомплектации
// Галфинд_Домнышева 2022/09/12
// Параметры
//  <ПорядковыйНомерСтроки>  – <ДокументОбъект.ЗаказКлиента> – Создаваемый документ
//  <Тэг> - <СправочникСсылка.ВариантыКомплектацииНоменклатуры>
//  <Комментарий> - <Строка> строка табличной части НовогоДокумента
Процедура ИзменитьКомментарийВРегистре(ПорядковыйНомерСтроки, Тэг, Комментарий)
	
	НаборЗаписейПоТэгу = РегистрыСведений.гф_СтрокиДокументаДанныеЗагрузки.СоздатьНаборЗаписей();
	НаборЗаписейПоТэгу.Отбор.Документ.Значение = ЭтотОбъект.Ссылка;
	НаборЗаписейПоТэгу.Отбор.Документ.Использование = Истина;
	НаборЗаписейПоТэгу.Отбор.ПорядковыйНомерСтроки.Значение = ПорядковыйНомерСтроки;
	НаборЗаписейПоТэгу.Отбор.ПорядковыйНомерСтроки.Использование = Истина;
	НаборЗаписейПоТэгу.Отбор.Тэг.Значение = Тэг;
	НаборЗаписейПоТэгу.Отбор.Тэг.Использование = Истина;
	
	НаборЗаписейПоТэгу.Прочитать();
	
	//ТекущиеЗначения = НаборЗаписейПоТэгу.Выгрузить();                             
	Для каждого Запись Из НаборЗаписейПоТэгу Цикл
		Запись.Комментарий = Комментарий;
	КонецЦикла;
	НаборЗаписейПоТэгу.Записать();	
	
КонецПроцедуры// } #wortmann

// #wortmann { 
// поиск картинки и запись в базу ее номера
// Галфинд_Домнышева 2022/09/12
// Параметры
//  <РеквизитЗначение>  – <Строка> – Значение ТЭГа "Picture_name" 
//  <СтрокаТЧ> - <Тип.СтрокаТЧ> 	– строка табличной части для которой ищется предок с заданным именем
//  <НовыйЭлемент> - <СправочникОбъект.Номенклатура> - создоваемый объект справочника Номенклатура
Процедура ПоискИЗаписьКартинки(РеквизитЗначение, СтрокаТЧ, НовыйЭлемент)
	
	КартинкаОсновноеИзображение = Неопределено;
	
	Если Не ЗначениеЗаполнено(РеквизитЗначение) Тогда
		СообщениеОбОшибке = "Ошибка при загрузке поля " + ЭтотОбъект + " в строке №" + СтрокаТЧ.ПорядковыйНомерСтроки + ". Описание ошибки: Не заполнено значение Picture_Name";
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
	Иначе	
		ЗначениеКартинки = НРег(СокрЛП(РеквизитЗначение));
		ПозицияСимвола = Найти(ЗначениеКартинки, "."); 
		ЗначениеКартинкиДоТочки = Лев(ЗначениеКартинки, ПозицияСимвола - 1); 
		Расширение = Сред(ЗначениеКартинки, ПозицияСимвола + 1, СтрДлина(ЗначениеКартинки));	
		Картинка = Справочники.НоменклатураПрисоединенныеФайлы.НайтиПоНаименованию(ЗначениеКартинкиДоТочки);
		Если ЗначениеЗаполнено(Картинка) Тогда
			КартинкаОсновноеИзображение = Картинка;
		Иначе	
			////Создадим Ссылку на саму картинку, пока еще не загруженную
			//НовыйЭлементНоменклатураПрисоединенныеФайлы = Справочники.НоменклатураПрисоединенныеФайлы.СоздатьЭлемент();
			//НовыйЭлементНоменклатураПрисоединенныеФайлы.Расширение = Расширение;
			//НовыйЭлементНоменклатураПрисоединенныеФайлы.Наименование = ЗначениеКартинкиДоТочки;
			//НовыйЭлементНоменклатураПрисоединенныеФайлы.ВладелецФайла	= НовыйЭлемент.Ссылка; 		
			//НовыйЭлементНоменклатураПрисоединенныеФайлы.Записать();
			//КартинкаОсновноеИзображение = НовыйЭлементНоменклатураПрисоединенныеФайлы.Ссылка; 
		КонецЕсли;
		Если НЕ НовыйЭлемент.ФайлКартинки = КартинкаОсновноеИзображение Тогда	
			НовыйЭлемент.ФайлКартинки = КартинкаОсновноеИзображение;
			флЗаписиНоменклатуры	= Истина;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры// } #wortmann

// Подбирает и записывает в документ договор для заданного Контрагента                              
// Параметры
//  <НовыйДокумент>  – <ДокументОбъект.ЗаказКлиента> – Создаваемый документ
///
Процедура ДоговорДляКонтрагента(НовыйДокумент)	
	
	КомиссионныеПродажи25 = ?(ЗначениеЗаполнено(НовыйДокумент.Соглашение)
	И НовыйДокумент.Соглашение.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
	И НовыйДокумент.Соглашение.КомиссионныеПродажи25, Истина, Ложь);	
	
	Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(НовыйДокумент, 
	НовыйДокумент.ХозяйственнаяОперация, 
	НовыйДокумент.Валюта,,
	КомиссионныеПродажи25);	
	
	Если Договор <> НовыйДокумент.Договор Тогда
		НовыйДокумент.Договор = Договор;
		
		НовыйДокумент.ГруппаФинансовогоУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НовыйДокумент.Договор, "ГруппаФинансовогоУчета");
		ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(НовыйДокумент.Договор, НовыйДокумент.БанковскийСчет, НовыйДокумент.БанковскийСчетКонтрагента);
		
	КонецЕсли;
		
КонецПроцедуры// } #wortmann

// #wortmann { 
// заполняет ТЧ Товары элемента спр ВариантыКомплектации
// Галфинд_Домнышева 2022/09/12
// Параметры
//  <НовыйДокумент>  – <ДокументОбъект.ЗаказКлиента> – Создаваемый документ
//  <НайденныйВариантКомплектации> - <СправочникСсылка.ВариантыКомплектацииНоменклатуры>
//  <НовыйЭлементТоварыВКоробах> - <ТЧ.гф_ТоварыВКоробах> строка табличной части НовогоДокумента
//  <ДатаОтгрузки> - <Дата> - дата доставки по ТЭГу Delivery_date
Процедура ЗагрузитьТЧТовары(НайденныйВариантКомплектации, НовыйЭлементТоварыВКоробах, НовыйДокумент, ДатаОтгрузки)
	
	ТипЦеныЗакупочная = ПланыВидовХарактеристик.гф_ГлобальныеЗначения.НайтиПоРеквизиту("Ключ",
														"гф_ГлобальныеЗначенияОптоваяЗакупочнаяЦена").Значение;
    Количество = НовыйЭлементТоварыВКоробах.Количество;
	ВременнаяТаблицаТЧТовары = Новый ТаблицаЗначений;
	ВременнаяТаблицаТЧТовары.Колонки.Добавить("Номенклатура");
	ВременнаяТаблицаТЧТовары.Колонки.Добавить("Характеристика");
	ВременнаяТаблицаТЧТовары.Колонки.Добавить("КоличествоУпаковок"); 
	
	Для каждого СтрокаСостава Из НайденныйВариантКомплектации.Товары Цикл
		
		НоваяСтрока = ВременнаяТаблицаТЧТовары.Добавить();
		НоваяСтрока.Номенклатура = СтрокаСостава.Номенклатура;
		НоваяСтрока.Характеристика = СтрокаСостава.Характеристика;
		НоваяСтрока.КоличествоУпаковок = Количество * СтрокаСостава.КоличествоУпаковок;
		
	КонецЦикла;	
	
	ВременнаяТаблицаТЧТовары.Свернуть("Номенклатура,Характеристика","КоличествоУпаковок");
	МассивЦен = Новый Массив;

	Для каждого Строка из ВременнаяТаблицаТЧТовары Цикл
		СтруктураВыборки = Новый Структура("Номенклатура, Характеристика");
		
		ЗаполнитьЗначенияСвойств(СтруктураВыборки, Строка);
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", Строка.Номенклатура);			
		Отбор.Вставить("ВидЦены", ТипЦеныЗакупочная);
		
		Цена = РегистрыСведений.ЦеныНоменклатуры25.ПолучитьПоследнее(НовыйДокумент.Дата, Отбор).Цена;
		ЦенаСтроки = Цена * Строка.КоличествоУпаковок;
		
		МассивЦен.Добавить(ЦенаСтроки);
		
		Если НовыйДокумент.Товары.НайтиСтроки(СтруктураВыборки).Количество() = 0 Тогда
			НоваяСтрока = НовыйДокумент.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка); 
			
			НоваяСтрока.Количество = Строка.КоличествоУпаковок;
			НоваяСтрока.КоличествоУпаковок = Строка.КоличествоУпаковок;
			НоваяСтрока.Цена = Цена;
			НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению;
			НоваяСтрока.ДатаОтгрузки = ДатаОтгрузки;			
		ИначеЕсли НовыйДокумент.Товары.НайтиСтроки(СтруктураВыборки).Количество() > 0 Тогда	
			НовыйДокумент.Товары.НайтиСтроки(СтруктураВыборки)[0].Количество = 
										НовыйДокумент.Товары.НайтиСтроки(СтруктураВыборки)[0].Количество + Строка.КоличествоУпаковок;
			НовыйДокумент.Товары.НайтиСтроки(СтруктураВыборки)[0].КоличествоУпаковок = 
										НовыйДокумент.Товары.НайтиСтроки(СтруктураВыборки)[0].Количество + Строка.КоличествоУпаковок; 
		КонецЕсли;
				 
	КонецЦикла;
	ЦенаКороба = 0;
	Для Индекс = 0 По МассивЦен.ВГраница() Цикл
		ЦенаКороба = ЦенаКороба + МассивЦен[Индекс];
	КонецЦикла;
	НовыйЭлементТоварыВКоробах.ЦенаКороба = ЦенаКороба;
	   	   
КонецПроцедуры// } #wortmann 

// #wortmann { 
// заполняет Суммы по документы, типовой механизм
// Галфинд_Домнышева 2022/09/12
// Параметры
//  <НовыйДокумент>  – <ДокументОбъект.ЗаказКлиента> – Создаваемый документ
Процедура ЗаполнитьСуммы(НовыйДокумент) 
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(НовыйДокумент);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(
																											НовыйДокумент,
																											Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(НовыйДокумент.Товары, СтруктураДействий, Неопределено);
	
КонецПроцедуры// } #wortmann 

// #wortmann { 
// Получает номенклатуру по артикулу
// Галфинд_Домнышева 2022/09/12
// Параметры
//  <Артикул>  – <Строка> – артикул номенклатуры из файла
// Возвращаемое значение: 
//  - СправочникОбъект.Номенклатура - объект справочника Номенклатура
//  - Неопределено - если по указанному артикулу нет номенклатуры
Функция ПолучитьНоменклатуруПоАртикулу(Артикул)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Артикул ПОДОБНО &Артикул";
	
	Запрос.УстановитьПараметр("Артикул", Артикул);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка.Следующий();
		Возврат Выборка.Ссылка.ПолучитьОбъект();
	КонецЕсли;

КонецФункции// } #wortmann

// #wortmann { 
// Заполняет переменные ПараметрыДокументыСоСтатусомИзменениеИзИ5 и ТЧДокументаСоСтатусомИзменениеИзИ5
// для сравнения значений из i5.
// Галфинд_Домнышева 2022/09/12
// Параметры
// СсылкаДокумента – <ДокументСсылка.ЗаказКлиента> – Найденный документ со статусом гф_СтатусРаботыСЗаказомИ5 
// не ТребуетсяПодтверждение и не ТребуетсяИзменение 
Процедура ПолучитьДанныеДокумента(СсылкаДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказКлиента.Номер КАК Номер,
		|	ЗаказКлиента.Дата КАК Дата,
		|	ЗаказКлиента.Партнер КАК Партнер,
		|	ЗаказКлиента.Контрагент КАК Контрагент,
		|	ЗаказКлиента.Валюта КАК Валюта,
		|	ЗаказКлиента.ДатаОтгрузки КАК ДатаОтгрузки,
		|	ЗаказКлиента.АдресДоставки КАК АдресДоставки
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();
	ПараметрыДокументыСоСтатусомИзменениеИзИ5 = Новый ТаблицаЗначений;
	ПараметрыДокументыСоСтатусомИзменениеИзИ5 = РезультатЗапроса.Выгрузить(); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказКлиентагф_ТоварыВКоробах.ВариантКомплектации КАК ВариантКомплектации,
		|	ЗаказКлиентагф_ТоварыВКоробах.НомерСтроки КАК НомерСтроки,
		|	ЗаказКлиентагф_ТоварыВКоробах.Количество КАК Количество,
		|	ЗаказКлиентагф_ТоварыВКоробах.ЦенаКороба КАК ЦенаКороба
		|ИЗ
		|	Документ.ЗаказКлиента.гф_ТоварыВКоробах КАК ЗаказКлиентагф_ТоварыВКоробах
		|ГДЕ
		|	ЗаказКлиентагф_ТоварыВКоробах.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТЧДокументаДоСтатусаИзменениеИзИ5 = Новый ТаблицаЗначений;
	ТЧДокументаДоСтатусаИзменениеИзИ5 = РезультатЗапроса.Выгрузить();
	
КонецПроцедуры// } #wortmann

// #wortmann { 
// Получает таблицу значений после сравнения полностью документов из базы и из i5 
// Галфинд_Домнышева 2022/09/12
// Параметры
// 	НовыйДокумент – – <ДокументОбъект.ЗаказКлиента> – Создаваемый документ
// Возвращаемое значение: 
//  ТЗДляЗаписи - <ТаблицаЗначений> - каждая строка которой содержит наименование реквизита
// 				и отличающиеся значения.
Функция СравнитьДокументы(НовыйДокумент)
	
    ОписаниеСтроки = Новый ОписаниеТипов("Строка");
	ТЗДляЗаписи = Новый ТаблицаЗначений;
	ТЗДляЗаписи.Колонки.Добавить("Реквизит", ОписаниеСтроки);
	ТЗДляЗаписи.Колонки.Добавить("ЗначениеТекущее", ОписаниеСтроки);
	ТЗДляЗаписи.Колонки.Добавить("ЗначениеИзИ5", ОписаниеСтроки);

	Если ПараметрыДокументыСоСтатусомИзменениеИзИ5[0].Партнер <> НовыйДокумент.Партнер Тогда
		СтрокаДляЗаписи = ТЗДляЗаписи.Добавить();
		СтрокаДляЗаписи.Реквизит = "Клиент";
		СтрокаДляЗаписи.ЗначениеТекущее = НовыйДокумент.Партнер;
		СтрокаДляЗаписи.ЗначениеИзИ5 = ПараметрыДокументыСоСтатусомИзменениеИзИ5[0].Партнер;
	КонецЕсли;    
	
	Если ПараметрыДокументыСоСтатусомИзменениеИзИ5[0].Валюта <> НовыйДокумент.Валюта Тогда
		СтрокаДляЗаписи = ТЗДляЗаписи.Добавить();
		СтрокаДляЗаписи.Реквизит = "Валюта";
		СтрокаДляЗаписи.ЗначениеТекущее = НовыйДокумент.Валюта;
		СтрокаДляЗаписи.ЗначениеИзИ5 = ПараметрыДокументыСоСтатусомИзменениеИзИ5[0].Валюта;
	КонецЕсли;
	
	Если ПараметрыДокументыСоСтатусомИзменениеИзИ5[0].ДатаОтгрузки <> НовыйДокумент.ДатаОтгрузки Тогда
		СтрокаДляЗаписи = ТЗДляЗаписи.Добавить();
		СтрокаДляЗаписи.Реквизит = "Дата Отгрузки";
		СтрокаДляЗаписи.ЗначениеТекущее = НовыйДокумент.ДатаОтгрузки;
		СтрокаДляЗаписи.ЗначениеИзИ5 = ПараметрыДокументыСоСтатусомИзменениеИзИ5[0].ДатаОтгрузки;
	КонецЕсли;
	
	Если ПараметрыДокументыСоСтатусомИзменениеИзИ5[0].АдресДоставки <> НовыйДокумент.АдресДоставки Тогда
		СтрокаДляЗаписи = ТЗДляЗаписи.Добавить();
		СтрокаДляЗаписи.Реквизит = "Адрес Доставки";
		СтрокаДляЗаписи.ЗначениеТекущее = НовыйДокумент.АдресДоставки;
		СтрокаДляЗаписи.ЗначениеИзИ5 = ПараметрыДокументыСоСтатусомИзменениеИзИ5[0].АдресДоставки;
	КонецЕсли;	
	
	Если ТЧДокументаДоСтатусаИзменениеИзИ5.Количество() <> НовыйДокумент.гф_ТоварыВКоробах.Количество() Тогда
		СтрокаДляЗаписи = ТЗДляЗаписи.Добавить();
		СтрокаДляЗаписи.Реквизит = "Кол-во строк в ТЧ Товары в коробах";
		СтрокаДляЗаписи.ЗначениеТекущее = ТЧДокументаДоСтатусаИзменениеИзИ5.Количество();
		СтрокаДляЗаписи.ЗначениеИзИ5 =  НовыйДокумент.гф_ТоварыВКоробах.Количество();			
	КонецЕсли;
		
	ТаблицаСтрок = ИщемОдинаковыеСтроки (НовыйДокумент.гф_ТоварыВКоробах.Выгрузить(), ТЧДокументаДоСтатусаИзменениеИзИ5);
	
	Для Каждого Строка Из ТаблицаСтрок Цикл 
		ЗаполнитьЗначенияСвойств(ТЗДляЗаписи.Добавить(), Строка); 
	КонецЦикла;

	Возврат ТЗДляЗаписи;

КонецФункции 

// #wortmann { 
// Получает таблицу значений после сравнения табличных частей документов из базы и из i5 
// Галфинд_Домнышева 2022/09/12
// Параметры
// 	Выгружаемая – <ТаблицаЗначений> – каждая строка которой представляет собой строку из гф_ТоварыВКоробах 
//									при внесении изменений из И5; 
//  Текущая – <ТаблицаЗначений> -  каждая строка которой представляет собой строку из гф_ТоварыВКоробах 
//									до внесения изменений из И5;
// Возвращаемое значение: 
//  ТЗДляЗаписи - <ТаблицаЗначений> - каждая строка которой содержит наименование реквизита
// 				и отличающиеся значения по ТЧ.
Функция ИщемОдинаковыеСтроки (Выгружаемая, Текущая)
	
	ОписаниеСтроки = Новый ОписаниеТипов("Строка");
	ТЗДляЗаписи = Новый ТаблицаЗначений;
	ТЗДляЗаписи.Колонки.Добавить("Реквизит", ОписаниеСтроки);
	ТЗДляЗаписи.Колонки.Добавить("ЗначениеТекущее", ОписаниеСтроки);
	ТЗДляЗаписи.Колонки.Добавить("ЗначениеИзИ5", ОписаниеСтроки);
	
	Для каждого СтрВыгружаемая из Выгружаемая Цикл
		СтруктураОтбора = Новый Структура("ВариантКомплектации");		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрВыгружаемая);
		МассивНайденныхВариантов = Текущая.НайтиСтроки(СтруктураОтбора);
		Если МассивНайденныхВариантов.Количество() > 0 Тогда
			СтруктураКоличества = Новый Структура("ВариантКомплектации, Количество");
			ЗаполнитьЗначенияСвойств(СтруктураКоличества, СтрВыгружаемая);
			МассивКоличества = Текущая.НайтиСтроки(СтруктураКоличества);
			Если МассивКоличества.Количество() = 0 Тогда
				СтрокаДляЗаписи = ТЗДляЗаписи.Добавить();
				СтрокаДляЗаписи.Реквизит = "Количество упаковок для " + СтрВыгружаемая.ВариантКомплектации;
				СтрокаДляЗаписи.ЗначениеТекущее = МассивКоличества[0].Количество;
				СтрокаДляЗаписи.ЗначениеИзИ5 = СтрВыгружаемая.Количество;	
			КонецЕсли;	 
		Иначе
			СтрокаДляЗаписи = ТЗДляЗаписи.Добавить();
			СтрокаДляЗаписи.Реквизит = "ВариантКомплектации " + СтрВыгружаемая.ВариантКомплектации;
			СтрокаДляЗаписи.ЗначениеТекущее = "нет";
			СтрокаДляЗаписи.ЗначениеИзИ5 = "В количестве " + СтрВыгружаемая.Количество;					
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрТекущая из Текущая Цикл
		СтруктураОтбора = Новый Структура("ВариантКомплектации");		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрТекущая);
		МассивНайденныхВариантов = Выгружаемая.НайтиСтроки(СтруктураОтбора);
		Если МассивНайденныхВариантов.Количество() = 0 Тогда
			СтрокаДляЗаписи = ТЗДляЗаписи.Добавить();
			СтрокаДляЗаписи.Реквизит = "ВариантКомплектации " + СтрТекущая.ВариантКомплектации;
			СтрокаДляЗаписи.ЗначениеТекущее = "В количестве " + СтрТекущая.Количество;
			СтрокаДляЗаписи.ЗначениеИзИ5 = "нет";					
		КонецЕсли;
	КонецЦикла;	
	
	Возврат ТЗДляЗаписи;
	
КонецФункции

#КонецОбласти

#КонецЕсли