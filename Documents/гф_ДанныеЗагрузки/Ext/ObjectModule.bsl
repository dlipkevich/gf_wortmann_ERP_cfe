#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных
	Перем НаборЗаписейТэговXML;
	Перем СоответствиеТиповОбъектов;
	Перем ЗагруженныеСтроки;
	Перем мУдалятьДвижения;
	Перем ТекущийРежимЗаписи;
#КонецОбласти	
	
#Область ОбработчикиСобытий
 
&Вместо("ОбработкаПроведения")
Процедура гф_ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если мУдалятьДвижения Тогда
		//ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
	КонецЕсли;
		
	Если Интерфейс = Перечисления.гф_Интерфейсы.PRICAT Тогда
		Если НЕ (СтатусДокумента = Перечисления.гф_СтатусыДокументовЗагрузки.НоменклатураЗагружена
			ИЛИ СтатусДокумента = Перечисления.гф_СтатусыДокументовЗагрузки.СозданыЦеныНоменклатуры) Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Попытка
		НаборЗаписейТэговXML.Записать(Истина);
	Исключение
	    СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + ". Описание ошибки: Не удалось внести изменения в регистр сведений ""СтрокиДокументаДанныеЗагрузки"" !";
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
	КонецПопытки;
	
	Если Интерфейс = Перечисления.гф_Интерфейсы.RETURN Тогда

		//МС_ПроведениеИнтерфейсаRETURN(Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&Вместо("ПередЗаписью")
Процедура гф_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;            
	
	мУдалятьДвижения = НЕ ЭтоНовый();
		
	ТекущийРежимЗаписи = РежимЗаписи;
	                                       // ЭтотОбъект.Ссылка.Пустая()

	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписиПроведение", РежимЗаписи = РежимЗаписиДокумента.Проведение);

КонецПроцедуры

&Вместо("ПриЗаписи")
Процедура гф_ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
		
	Если ЭтоНовый() или Не ТекущийРежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
 
	Если ЭтотОбъект.СтатусДокумента = Перечисления.гф_СтатусыДокументовЗагрузки.ЗагруженоСОшибками Тогда
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, "Документ " + ЭтотОбъект + " имеет статус ""Загружено с ошибками""! Документ не проведен.");
		Отказ = Истина;
			возврат;
	КонецЕсли;
	
	ПолучитьНаборЗаписейРегистраСтрок();
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Если Интерфейс = Перечисления.гф_Интерфейсы.ORDRSP Тогда
		ПроведениеИнтерфейсаORDRSP(НаборЗаписейТэговXML, Отказ);

		//Это - INVOIC
	//ИначеЕсли Интерфейс = Перечисления.гф_Интерфейсы.INVOIC или Интерфейс = Перечисления.гф_Интерфейсы.IС_INVOIC Тогда
	//	ПроведениеИнтерфейсаINVOIC(НаборЗаписейТэговXML, Отказ);
	//	
	//	//Это - SHIPPING_LIST
	//ИначеЕсли Интерфейс = Перечисления.гф_Интерфейсы.SHIPPING_LIST Тогда
	//	ПроведениеИнтерфейсаSHIPPING_LIST(НаборЗаписейТэговXML, Отказ);
	//	
	//ИначеЕсли Интерфейс = Перечисления.гф_Интерфейсы.MIXUP Тогда
	//	ПроведениеИнтерфейсаMIXUP(Отказ);
	//	
	//ИначеЕсли Интерфейс = Перечисления.гф_Интерфейсы.DELETE Тогда
	//	ПроведениеИнтерфейсаDELETE(Отказ);
	//	
	//ИначеЕсли Интерфейс = Перечисления.гф_Интерфейсы.RETURN Тогда
			
	КонецЕсли;
	
	Если Не Отказ Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
 	
//Doc_Function:
// 46 - новый
// 4  - изменение
// 27 - удаление
Процедура ПроведениеИнтерфейсаORDRSP(ТабличнаяЧасть, Отказ, Документ =Неопределено)
	
	НовыйЭлемент = Неопределено;
	НовыйДокумент = Неопределено;

	ИдентификаторПлатежа = Прав(Лев(ИмяФайла,СтрДлина(ИмяФайла)-4),17);
	Попытка
		ИдентификаторПлатежа = Число(ИдентификаторПлатежа);
	Исключение
		СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + ". Описание ошибки: Неправильный формат имени файла" ;
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, "Неправильный формат имени файла.");
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
	СтавкаНДСПоУмолчанию = Справочники.СтавкиНДС.НайтиПоНаименованию("20%");
	
	СтавкаНДС = СтавкаНДСПоУмолчанию;
		
	Для Каждого СтрокаТЧ из ТабличнаяЧасть Цикл 				//Цикл по тегам XML
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТЧ.ПолеЗагрузки) Тогда
			
			//Тэг создания нового документа
			Если Найти(СтрокаТЧ.Тэг, "Message_Header")>0 Тогда
				НомерСтрокиРодителя = СтрокаТЧ.НомерСтрокиРодителя;
				
				ИмяЗаказа = НайтиИмяЗаказа("Customer_order_number", СтрокаТЧ);
				
				Если НЕ НовыйДокумент = Неопределено Тогда
					Попытка
						НовыйДокумент.УчитыватьНДС = Истина;
						//НовыйДокумент.СуммаВключаетНДС = СуммаВключаетНДС;
						НовыйДокумент.ОтражатьВБухгалтерскомУчете = Истина;
						НовыйДокумент.ОтражатьВНалоговомУчете = Истина;		
						Для Каждого СтрокаТоваров Из НовыйДокумент.Товары Цикл
							
							Если ЗначениеЗаполнено(СтрокаТоваров.Номенклатура.СтавкаНДС) Тогда
								СтрокаТоваров.СтавкаНДС = СтрокаТоваров.Номенклатура.СтавкаНДС;
							Иначе
								СтрокаТоваров.СтавкаНДС = СтавкаНДС;
							КонецЕсли;

							Если ЗначениеЗаполнено(СтрокаТоваров.Цена) Тогда
								//ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТоваров, НовыйДокумент);
							Иначе
								//ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТоваров, НовыйДокумент, глЗначениеПеременной("глТекущийПользователь"),,,,,"Товары");
							КонецЕсли;
								
							//ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТоваров, "Товары", Истина, Истина, НовыйДокумент);
							
							УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(СтрокаТоваров.Сумма, СтавкаНДС);
						КонецЦикла;
						//СтруктураКурсовВалют = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(?(НовыйДокумент.Дата = Дата('00010101'),ТекущаяДата(),КонецДня(НовыйДокумент.Дата)), Новый Структура("Валюта", Константы.ВалютаДляЗагрузки.Получить()));
						//НовыйДокумент.КурсВзаиморасчетов = СтруктураКурсовВалют.Курс;
						//НовыйДокумент.КратностьВзаиморасчетов = СтруктураКурсовВалют.Кратность;
						
						
						Если НовыйДокумент.гф_СтатусРаботыСЗаказомИ5 = Справочники.гф_СтатусРаботыСЗаказомИ5.ВыпущенаСпецификация Тогда
							НовыйДокумент.гф_СтатусРаботыСЗаказомИ5 = Справочники.гф_СтатусРаботыСЗаказомИ5.Изменен;
						ИначеЕсли НЕ ЗначениеЗаполнено(НовыйДокумент.гф_СтатусРаботыСЗаказомИ5) Тогда
							НовыйДокумент.гф_СтатусРаботыСЗаказомИ5 = Справочники.гф_СтатусРаботыСЗаказомИ5.ТребуетсяПодтверждение;
						КонецЕсли;						
						НовыйДокумент.ОбменДанными.Загрузка = Истина; 
						
						ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(НовыйДокумент, Отказ);
						
						РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(НовыйДокумент, Отказ, Истина);
						
						ДоставкаТоваров.ОтразитьСостояниеДоставки(НовыйДокумент.Ссылка, Отказ, Истина);
						
						РегистрыСведений.СтатусыСборкиИДоставки.ЗаписатьСтатусИзРаспоряжения(НовыйДокумент.Ссылка, Отказ, Истина);
						
						Если НовыйДокумент.ПометкаУдаления Тогда
							НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
						Иначе
							НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
						КонецЕсли;
						
						НовыйДокумент.ОбменДанными.Загрузка = Ложь;
						
					Исключение
						СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + ". Описание ошибки: " + ОписаниеОшибки() ;
						ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, "Произошли ошибки при проведении документа " + НовыйДокумент + ".|" + ОписаниеОшибки());
					КонецПопытки;
				КонецЕсли;
				
				НомерДокумента = НайтиСтрокуДереваПоТэгуОтПорядкового("Supplier_order_number", СтрокаТЧ, Отказ);
				ДатаДокумента = НайтиСтрокуДереваПоТэгуОтПорядкового("Supplier_order_date", СтрокаТЧ, Отказ);
				ФункцияДокумента = НайтиСтрокуДереваПоТэгуОтПорядкового("Document_function", СтрокаТЧ, Отказ);
								
				Если ЗначениеЗаполнено(НомерДокумента) и ЗначениеЗаполнено(ДатаДокумента) Тогда
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					|	Документы.Ссылка КАК Документ
					|ИЗ
					|	Документ.ЗаказКлиента КАК Документы
					|ГДЕ
					|	Документы.Дата МЕЖДУ &ДатаНач И &ДатаКон
					|	И Документы.Номер = &Номер";
					Запрос.УстановитьПараметр("ДатаНач", НачалоДня(Дата(ДатаДокумента)));
					Запрос.УстановитьПараметр("ДатаКон", КонецДня(Дата(ДатаДокумента)));
					Запрос.УстановитьПараметр("Номер", НомерДокумента);
					Результат = Запрос.Выполнить().Выбрать();
					
					// Найден ранее созданный документ ЗаказПокупателя...
					Если Результат.Следующий() Тогда
						Если ИдентификаторПлатежа <= Результат.Документ.ИдентификаторПлатежа Тогда
							СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + ". Описание ошибки: Попытка повторной загрузки или загрузки более ранней версии документа - "+ СокрЛП(ИдентификаторПлатежа) ;
							//ОбработатьОшибку(СтрокаТЧ, СообщениеОбОшибке, Отказ, Истина);
							ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, "Попытка повторной загрузки или загрузки более ранней версии документа - "+ СокрЛП(ИдентификаторПлатежа));
							Отказ = Истина;
							Возврат;
						КонецЕсли;
						НовыйДокумент = Результат.Документ.ПолучитьОбъект();
						
						НовыйДокумент.ОбменДанными.Загрузка = Истина;
						Если НовыйДокумент.гф_СтатусРаботыСЗаказомИ5 = Справочники.гф_СтатусРаботыСЗаказомИ5.ВыпущенаСпецификация Тогда
							НовыйДокумент.гф_СтатусРаботыСЗаказомИ5 = Справочники.гф_СтатусРаботыСЗаказомИ5.Изменен;
						ИначеЕсли НЕ ЗначениеЗаполнено(НовыйДокумент.гф_СтатусРаботыСЗаказомИ5) Тогда
							НовыйДокумент.гф_СтатусРаботыСЗаказомИ5 = Справочники.гф_СтатусРаботыСЗаказомИ5.ТребуетсяПодтверждение;
						КонецЕсли;
						
						Если СокрЛП(ФункцияДокумента) = "27" Тогда
							
							Если НовыйДокумент.Проведен Тогда
								
								НовыйДокумент.ОбменДанными.Загрузка = Истина;
								//НовыйДокумент.Товары.Очистить();
								НовыйДокумент.Комментарий = "Документ помечен на удаление согласно " + ЭтотОбъект + "."; 
								НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
								
								ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(НовыйДокумент, Отказ);
								
								РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(НовыйДокумент, Отказ, Истина);
								
								ДоставкаТоваров.ОтразитьСостояниеДоставки(НовыйДокумент.Ссылка, Отказ, Истина);
								
								РегистрыСведений.СтатусыСборкиИДоставки.ЗаписатьСтатусИзРаспоряжения(НовыйДокумент.Ссылка, Отказ, Истина);
														
								//НовыйДокумент.Проведен = Ложь;
								//ОбщегоНазначения.УдалитьДвиженияРегистратора(НовыйДокумент, Отказ);
								//НовыйДокумент.СуммаДокумента = 0;
								//НовыйДокумент.ПометкаУдаления = Истина;
								
								
								//НовыйДокумент.ОбменДанными.Загрузка = Истина;
								//НовыйДокумент.Товары.Очистить();
								//НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
								НовыйДокумент.ОбменДанными.Загрузка = Ложь;
								
								ИзменитьКомментарийВРегистре(СтрокаТЧ.ПорядковыйНомерСтроки, СтрокаТЧ.Тэг, "Документ помечен на удаление согласно " + ЭтотОбъект + ".");

								ЗаписьЖурналаРегистрации("Информация", УровеньЖурналаРегистрации.Информация, ЭтотОбъект, ЭтотОбъект, "Документ " +НовыйДокумент+ " помечен на удаление.");
								Возврат;
							КонецЕсли;
						ИначеЕсли СокрЛП(ФункцияДокумента) =  "46" или СокрЛП(ФункцияДокумента) = "4" Тогда
							
							Если ЕстьПроведенныеПодчиненныеДокументы(НовыйДокумент.Ссылка)  Тогда
								СообщениеОбОшибке = "При проведении документа " + ЭтотОбъект + ", обнаружены проведенные подчиненные документы для " + СокрЛП(НовыйДокумент)+ ". Заказ не откорректирован!";
								//ОбработатьОшибку(, СообщениеОбОшибке, Отказ, Истина);
								ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
								Отказ = Истина;
								Возврат;
							КонецЕсли;
							
							Если ТипЗнч(НовыйДокумент) = Тип("ДокументОбъект.ЗаказКлиента") Тогда
								Если ЗначениеЗаполнено(ИмяЗаказа) Тогда
									НовыйДокумент.гф_ИмяЗаказа = ИмяЗаказа;
								КонецЕсли; 
							КонецЕсли;  
							
							НовыйДокумент.Товары.Очистить();
							                                           
							Если НовыйДокумент.гф_СтатусРаботыСЗаказомИ5 = Справочники.гф_СтатусРаботыСЗаказомИ5.ВыпущенаСпецификация Тогда
								НовыйДокумент.гф_СтатусРаботыСЗаказомИ5 = Справочники.гф_СтатусРаботыСЗаказомИ5.Изменен;
							ИначеЕсли НЕ ЗначениеЗаполнено(НовыйДокумент.гф_СтатусРаботыСЗаказомИ5) Тогда
								НовыйДокумент.гф_СтатусРаботыСЗаказомИ5 = Справочники.гф_СтатусРаботыСЗаказомИ5.ТребуетсяПодтверждение;
							КонецЕсли;
							
							НовыйДокумент.ПометкаУдаления = Ложь;
							НовыйДокумент.ОбменДанными.Загрузка = Истина;
							НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
							НовыйДокумент.ОбменДанными.Загрузка = Ложь;
							
							СообщениеОбОшибке = "При проведении документа " + ЭтотОбъект + " Откорректирован документ " + СокрЛП(НовыйДокумент);
							//ОбработатьОшибку(, СообщениеОбОшибке, Отказ, Истина);
							ЗаписьЖурналаРегистрации("Информация", УровеньЖурналаРегистрации.Информация, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
						Иначе
							ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, "Произошли ошибки при проведении документа " + НовыйДокумент + ".|Неверное значение тэга Document_function.");
							возврат;
						КонецЕсли;
												
						//ЗаказПокупателя не найден - создаем новый...	
					Иначе
						НовыйДокумент = Документы.ЗаказКлиента.СоздатьДокумент();
						НовыйДокумент.Номер = НомерДокумента;
						НовыйДокумент.Дата = ДатаДокумента;
						НовыйДокумент.гф_ДатаОбновленияИзИ5 = ТекущаяДатаСеанса();
						НовыйДокумент.Склад = _омОбщегоНазначенияКлиентСервер.ПолучитьГлобальноеЗначение("СкладЗагрузкаXML");
						
						НовыйДокумент.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
						
						Если ЗначениеЗаполнено(ИмяЗаказа) Тогда
							НовыйДокумент.гф_ИмяЗаказа = ИмяЗаказа;
						КонецЕсли; 
												
						Если СокрЛП(ФункцияДокумента) = "27" Тогда
							Попытка
								//НовыйДокумент.УстановитьПометкуУдаления(Истина);
							Если НовыйДокумент.гф_СтатусРаботыСЗаказомИ5 = Справочники.гф_СтатусРаботыСЗаказомИ5.ВыпущенаСпецификация Тогда
								НовыйДокумент.гф_СтатусРаботыСЗаказомИ5 = Справочники.гф_СтатусРаботыСЗаказомИ5.Изменен;
							ИначеЕсли НЕ ЗначениеЗаполнено(НовыйДокумент.гф_СтатусРаботыСЗаказомИ5) Тогда
								НовыйДокумент.гф_СтатусРаботыСЗаказомИ5 = Справочники.гф_СтатусРаботыСЗаказомИ5.ТребуетсяПодтверждение;
							КонецЕсли;
								
							НовыйДокумент.ОбменДанными.Загрузка = Истина;
							//НовыйДокумент.Товары.Очистить();
							НовыйДокумент.Комментарий = "Документ помечен на удаление согласно " + ЭтотОбъект + "."; 
							НовыйДокумент.Проведен = Ложь;
							
							НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
							
							ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(НовыйДокумент, Отказ);
							
							РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(НовыйДокумент, Отказ, Истина);
							
							ДоставкаТоваров.ОтразитьСостояниеДоставки(НовыйДокумент.Ссылка, Отказ, Истина);
							
							РегистрыСведений.СтатусыСборкиИДоставки.ЗаписатьСтатусИзРаспоряжения(НовыйДокумент.Ссылка, Отказ, Истина);
							
							//НовыйДокумент.Проведен = Ложь;
							//ОбщегоНазначения.УдалитьДвиженияРегистратора(НовыйДокумент, Отказ);
							//НовыйДокумент.ПометкаУдаления = Истина;
							//НовыйДокумент.ОбменДанными.Загрузка = Истина;
							//НовыйДокумент.Записать();
							//НовыйДокумент.ОбменДанными.Загрузка = Ложь;
								
							НовыйДокумент.ОбменДанными.Загрузка = Ложь;
							
							ИзменитьКомментарийВРегистре(СтрокаТЧ.ПорядковыйНомерСтроки, СтрокаТЧ.Тэг, "Документ помечен на удаление согласно " + ЭтотОбъект + ".")
							Исключение
								СообщениеОбОшибке = "Не удалось установить пометку удаления для документа " + СокрЛП(НовыйДокумент);
								//ОбработатьОшибку(, СообщениеОбОшибке, Отказ, Истина);
								ЗаписьЖурналаРегистрации("Информация", УровеньЖурналаРегистрации.Информация, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
							КонецПопытки;
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					//НовыйДокумент = Документы[ТипДокумента].СоздатьДокумент();
					Если (НЕ ЗначениеЗаполнено(НомерДокумента)) И (НЕ ЗначениеЗаполнено(ДатаДокумента)) Тогда
						СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект  + ". Описание ошибки: Не заполнены тэги ""Document_number"" и ""Document_date"".";
					ИначеЕсли	НЕ ЗначениеЗаполнено(НомерДокумента) Тогда
						СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект  + ". Описание ошибки: Не заполнены тэг ""Document_number"".";	
					ИначеЕсли	НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда	
						СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект  + ". Описание ошибки: Не заполнены тэг  ""Document_date"".";	
					Иначе 				//Невероятный вариант, но все же ...	)))
						СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект ;		
					КонецЕсли;
					
					//ОбработатьОшибку(СтрокаТЧ, СообщениеОбОшибке, Отказ, Истина);
					ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
					Отказ = Истина;
					Возврат;
				КонецЕсли;
				НовыйДокумент.Организация = Справочники.Организации.НайтиПоНаименованию("ВОРТМАНН ВОСТОК ООО");
				НовыйДокумент.ИдентификаторПлатежа = ИдентификаторПлатежа;
				НовыйДокумент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
				СтрНазваниеВалюты = НайтиСтрокуДереваПоТэгуОтПорядкового("Currency", , Отказ);	
				Если Отказ или НЕ ЗначениеЗаполнено(СтрНазваниеВалюты) Тогда
					СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + ". Описание ошибки: Не найден или не заполнен тэг Currency.";
					//ОбработатьОшибку(, СообщениеОбОшибке, Отказ, Истина);
					ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
					Отказ = Истина;
					Возврат;
				КонецЕсли;
				Если СтрНазваниеВалюты = "RUB" Тогда
					СтрНазваниеВалюты = "руб." 
				КонецЕсли;
				ВалютаДокумента = Справочники.Валюты.НайтиПоНаименованию(СокрЛП(СтрНазваниеВалюты));

				НовыйДокумент.Валюта = ВалютаДокумента;
				
				//тэг добавления позиции в тч Товары	
			ИначеЕсли Найти(СтрокаТЧ.Тэг, "Message_Position")>0  Тогда
				//ТипДокумента = СоответствиеТиповОбъектов[СтрокаТЧ.ПолеЗагрузки.ТипОбъекта].Метаданные().Имя;
 				//ИмяТЧ = Лев(СтрокаТЧ.ПолеЗагрузки.ОбъектМетаданных,Найти(СтрокаТЧ.ПолеЗагрузки.ОбъектМетаданных,".")-1);
				//НовыйЭлемент = НовыйДокумент[ИмяТЧ].Добавить();
				//НовыйЭлементТовары = НовыйДокумент.Товары.Добавить(); 
				НовыйЭлементТоварыВКоробах = НовыйДокумент.гф_ТоварыВКоробах.Добавить();
				//остальные тэги	
			Иначе 
				Если СтрокаТЧ.ПолеЗагрузки.ТипОбъекта = "Заказ клиента" Тогда
					Если Найти(СтрокаТЧ.ПолеЗагрузки.Объект, "(")>0 Тогда
						Если //НовыйЭлементТовары = Неопределено ИЛИ 
							НовыйДокумент = Неопределено 
							Или НовыйЭлементТоварыВКоробах = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						Если Не ТипЗнч(НовыйДокумент) = Тип("ДокументОбъект.ЗаказКлиента") Тогда
							продолжить;
						КонецЕсли;
						ИмяТЧ = Сред(СтрокаТЧ.ПолеЗагрузки.Объект, Найти(СтрокаТЧ.ПолеЗагрузки.Объект, "(")+1);
						Если Найти(ИмяТЧ, ")")>0 Тогда	
							ПозицияСкобки = Найти(ИмяТЧ, ")"); 
							ИмяТЧ = Лев(ИмяТЧ, ПозицияСкобки - 1); 
						КонецЕсли;								
						ИмяРеквизита = Лев(СтрокаТЧ.ПолеЗагрузки.Объект, Найти(СтрокаТЧ.ПолеЗагрузки.Объект, "(")-1);
						Если ИмяТЧ = "Товары" Тогда
							//Объект = НовыйЭлементТовары[ИмяРеквизита]; 
						ИначеЕсли ИмяТЧ = "гф_ТоварыВКоробах" Тогда
							Объект = НовыйЭлементТоварыВКоробах[ИмяРеквизита]; 
						КонецЕсли;
						ТипОбъекта = Документы.ЗаказКлиента.ПустаяСсылка().Метаданные().ТабличныеЧасти[ИмяТЧ].Реквизиты[ИмяРеквизита].Тип;
					Иначе
						Если НовыйДокумент = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						ИмяТЧ = Неопределено;
						ИмяРеквизита = СтрокаТЧ.ПолеЗагрузки.Объект;
						Объект = НовыйДокумент[ИмяРеквизита];
						Если ИмяРеквизита = "Номер" Тогда
							ТипОбъекта = Документы.ЗаказКлиента.ПустаяСсылка().Метаданные().ТипНомера;
						ИначеЕсли ИмяРеквизита = "Дата" Тогда
							ТипОбъекта = Тип("Дата");
						Иначе	
							ТипОбъекта = Документы.ЗаказКлиента.ПустаяСсылка().Метаданные().Реквизиты[СтрокаТЧ.ПолеЗагрузки.Объект].Тип;
						КонецЕсли;
					КонецЕсли;
					
					Если ИмяРеквизита = "Контрагент" Тогда   //Тэг - GLN_customer
						НайденныйКонтрагент = Справочники.Контрагенты.НайтиПоРеквизиту("гф_GLN_номер", СтрокаТЧ.Значение);
						Если ЗначениеЗаполнено(НайденныйКонтрагент) Тогда
							НовыйДокумент.Контрагент = НайденныйКонтрагент;
							НовыйДокумент.Партнер = Справочники.Партнеры.НайтиПоНаименованию(НайденныйКонтрагент.Наименование);
							//времДоговор = ДоговорДляКонтрагентаНаДату(НайденныйКонтрагент, НовыйДокумент.Дата, Отказ, 1);
							//Если ЗначениеЗаполнено(времДоговор) Тогда
							//	НовыйДокумент.ДоговорКонтрагента = времДоговор;
							//КонецЕсли;
							//	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(НовыйДокумент);
						Иначе
							СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + " в строке №" + СтрокаТЧ.ПорядковыйНомерСтроки + 
							". Описание ошибки: Не найден соответствующий контрагент с GLN номером "+СокрЛП(СтрокаТЧ.Значение)+".  Документ не может быть проведен."; 								
							//ОбработатьОшибку(СтрокаТЧ, СообщениеОбОшибке, Отказ, Истина);
							ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
						КонецЕсли;
						
					ИначеЕсли ИмяРеквизита = "ВариантКомплектации" Тогда
						НайденныйВариантКомплектации = Справочники.ВариантыКомплектацииНоменклатуры.НайтиПоРеквизиту("гф_Штрихкод", СтрокаТЧ.Значение);
						Если ЗначениеЗаполнено(НайденныйВариантКомплектации) Тогда
							
							НовыйЭлементТоварыВКоробах.ВариантКомплектации = НайденныйВариантКомплектации;
							НовыйЭлементТоварыВКоробах.Количество = НайтиСтрокуДереваПоТэгу("Ordered_quantity", СтрокаТЧ, Отказ);
							НовыйЭлементТоварыВКоробах.ЦенаКороба = НайтиСтрокуДереваПоТэгу("Effective_purchase_price", СтрокаТЧ, Отказ);
						Иначе
							НовыйДокумент.гф_ТоварыВКоробах.Удалить(НовыйЭлементТоварыВКоробах);

							СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + " в строке №" + СтрокаТЧ.ПорядковыйНомерСтроки + ". Описание ошибки: Не найдена соответствующая номенклатура скодом " +СокрЛП(СтрокаТЧ.Значение);
							//ОбработатьОшибку(СтрокаТЧ, СообщениеОбОшибке, Отказ, Истина);
							ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
						КонецЕсли;
					ИначеЕсли ИмяРеквизита = "АдресДоставки" Тогда
						
						Если ЗначениеЗаполнено(СтрокаТЧ.Значение) Тогда
							НайденныйАдресДоставки = Справочники.гф_АдресаДоставки.НайтиПоРеквизиту("GLNНомер", Число(СтрокаТЧ.Значение));
						КонецЕсли;
						
						Если ЗначениеЗаполнено(НайденныйАдресДоставки) Тогда
							Объект = НайденныйАдресДоставки;
							НовыйДокумент.СпособДоставки = _омОбщегоНазначенияКлиентСервер.ПолучитьГлобальноеЗначение("СпособДоставкиЗагрузкаXML");
							НовыйДокумент.ПеревозчикПартнер = _омОбщегоНазначенияКлиентСервер.ПолучитьГлобальноеЗначение("ПеревозчикЗагрузкаXML");
						Иначе
							СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + " в строке №" + СтрокаТЧ.ПорядковыйНомерСтроки + ". Описание ошибки: Не найден соответствующий адрес доставки ""GLN delivery party"" "+СокрЛП(СтрокаТЧ.Значение);
							//ОбработатьОшибку(СтрокаТЧ, СообщениеОбОшибке, Отказ, Истина);
							ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
						КонецЕсли;
					ИначеЕсли Строка(ТипОбъекта) = "Строка" Тогда
						Объект = СтрокаТЧ.Значение;
					ИначеЕсли Строка(ТипОбъекта) = "Число" Тогда
						Попытка
							Объект = Число(СтрокаТЧ.Значение);
						Исключение
							СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + " в строке №" + СтрокаТЧ.ПорядковыйНомерСтроки + ". Описание ошибки: " + ОписаниеОшибки();
							//ОбработатьОшибку(СтрокаТЧ, СообщениеОбОшибке, Отказ, Истина);
							ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
						КонецПопытки;
					ИначеЕсли Строка(ТипОбъекта) = "Дата" Тогда
						Попытка
							Объект = Дата(СтрокаТЧ.Значение);
						Исключение
							СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + " в строке №" + СтрокаТЧ.ПорядковыйНомерСтроки + ". Описание ошибки: "+ ОписаниеОшибки();
							//ОбработатьОшибку(СтрокаТЧ, СообщениеОбОшибке, Отказ, Истина);
							ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
						КонецПопытки;
						
					КонецЕсли;
					Если ЗначениеЗаполнено(Объект) Тогда
						Если Найти(СтрокаТЧ.ПолеЗагрузки.Объект, "(")>0 Тогда
							//НовыйЭлемент[ИмяРеквизита] = Объект;
						Иначе
							НовыйДокумент[ИмяРеквизита] = Объект;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;		//Тэг создания нового документа
			КонецЕсли;
		КонецЦикла;				//Цикл по тегам XML
		
	Если НЕ НовыйДокумент = Неопределено И НЕ Отказ Тогда
		
		НовыйДокумент.ЦенаВключаетНДС = Истина;
		//НовыйДокумент.СуммаВключаетНДС = СуммаВключаетНДС;
		
		//НовыйДокумент.ОтражатьВБухгалтерскомУчете = Истина;
		//НовыйДокумент.ОтражатьВНалоговомУчете = Истина;		
		Для Каждого СтрокаТоваров Из НовыйДокумент.Товары Цикл
			//СтрокаТоваров.СтавкаНДС = СтавкаНДС;
			//Если НовыйДокумент.Контрагент.НеЯвляетсяРезидентом Тогда
			//	СтрокаТоваров.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
			//ИначеЕсли ЗначениеЗаполнено(НовыйЭлемент.Номенклатура.СтавкаНДС) Тогда
			//	СтрокаТоваров.СтавкаНДС = НовыйЭлемент.Номенклатура.СтавкаНДС;
			//ИНаче
				СтрокаТоваров.СтавкаНДС = СтавкаНДС;
			//КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТоваров.Цена) Тогда
				ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуВСтрокеТЧ(СтрокаТоваров,);
				//ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТоваров, НовыйДокумент);
				
			Иначе
				//ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТоваров, НовыйДокумент, глЗначениеПеременной("глТекущийПользователь"),,,,,"Товары");
			КонецЕсли;
			//ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТоваров, "Товары", Истина, Истина, НовыйДокумент);
			//СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ДокументОбъект, ЗаполнятьБУ, ЗаполнятьНУ, , ЗаполнятьСчетаУчетаНоменклатуры);
			
			УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(СтрокаТоваров.Сумма, СтавкаНДС);
			
		КонецЦикла;
		//СтруктураКурсовВалют = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(?(НовыйДокумент.Дата = Дата('00010101'),ТекущаяДата(),КонецДня(НовыйДокумент.Дата)), Новый Структура("Валюта", Константы.ВалютаДляЗагрузки.Получить()));
		Если ЗначениеЗаполнено(НовыйДокумент.Договор) Тогда
			//СтруктураКурсовВалют = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(?(НовыйДокумент.Дата = Дата('00010101'),ТекущаяДата(),КонецДня(НовыйДокумент.Дата)), Новый Структура("Валюта", НовыйДокумент.ДоговорКонтрагента.ВалютаВзаиморасчетов));
			//НовыйДокумент.ВалютаДокумента = НовыйДокумент.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		Иначе	
			//СтруктураКурсовВалют = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(?(НовыйДокумент.Дата = Дата('00010101'),ТекущаяДата(),КонецДня(НовыйДокумент.Дата)), Новый Структура("Валюта", Константы.ВалютаДляЗагрузки.Получить()));
			//НовыйДокумент.ВалютаДокумента = Константы.ВалютаДляЗагрузки.Получить();
		КонецЕсли;
		//
		//НовыйДокумент.КурсВзаиморасчетов = СтруктураКурсовВалют.Курс;
		//НовыйДокумент.КратностьВзаиморасчетов = СтруктураКурсовВалют.Кратность;
		
		//Inga
		//Устанавливаем основгого грузополучателя
		//НовыйДокумент.Грузополучатель = w_ОбщиеСервер.ПолучитьОсновногоГрузополучателя(НовыйДокумент.Контрагент);
	//	СтруктураПараметры = Новый Структура;
	//СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	//СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	//СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	//СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);

	//	ПримененныеСкидки = СкидкиНаценкиЗаполнениеСервер.Рассчитать(НовыйДокумент, СтруктураПараметры);
	//	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	
	НовыйДокумент.СкидкиРассчитаны = Истина;
	
	НовыйДокумент.ОбменДанными.Загрузка = Ложь;
	Попытка			 
		Если НовыйДокумент.ПометкаУдаления Тогда
				НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
			Иначе
				НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			КонецЕсли;
		Исключение
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, "Произошли ошибки при проведении документа " + НовыйДокумент + ".|" + ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры 

//Функция получает подчиненные документы
Функция ПолучитьМассивПодчиненныхДокументов1(ДокументСсылка)
	
	ТекущийДокумент = ДокументСсылка;
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	
	Для Каждого ЭлементСостава ИЗ Метаданные.КритерииОтбора["гф_СвязанныеДокументы"].Состав Цикл
		
		Если Не ЭлементСостава.Тип.СодержитТип(ТипЗнч(ТекущийДокумент)) Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьКДанным = ЭлементСостава.ПолноеИмя();
		СтруктураПутьКДанным = РазобратьПутьКОбъектуМетаданных(ПутьКДанным, ЭлементСостава.Родитель());
		
		ИмяОбъекта = СтруктураПутьКДанным.ТипОбъекта + "." + СтруктураПутьКДанным.ВидОбъекта;
		ПсевдонимТаблицы = СтруктураПутьКДанным.ТипОбъекта + "_" + СтруктураПутьКДанным.ВидОбъекта + "_" + СтруктураПутьКДанным.ИмяТаблЧасти;
		
		ТекущаяСтрокаГДЕ = "ГДЕ " + ПсевдонимТаблицы + "." +СтруктураПутьКДанным.ИмяРеквизита + " = &ЗначениеКритерияОтбора";
			
		ИмяТЧ = Лев(СтруктураПутьКДанным.ИмяРеквизита, Найти(СтруктураПутьКДанным.ИмяРеквизита, ".")-1);
		ИмяРеквизита = Лев(СтруктураПутьКДанным.ИмяРеквизита, Найти(СтруктураПутьКДанным.ИмяРеквизита, ".")-1);
		ТекстЗапроса = ТекстЗапроса + (?(ТекстЗапроса = "", "ВЫБРАТЬ", "ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ") + "
		|" + ПсевдонимТаблицы + ".Ссылка ИЗ " + ИмяОбъекта + "." + СтруктураПутьКДанным.ИмяТаблЧасти + " КАК " + ПсевдонимТаблицы + "
		|" + СтрЗаменить(ТекущаяСтрокаГДЕ, "..", ".") + "
		|");
		
	КонецЦикла;
	
	Если ТекстЗапроса = "" Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ЗначениеКритерияОтбора", ТекущийДокумент);
	
	мМассивПочиненных = Запрос.Выполнить().Выгрузить();
    	
	Возврат мМассивПочиненных;
КонецФункции

// Функция разбирает строку вида
// ТипОбъектаМетаданных.ИмяДокумента.ТабличнаяЧасть.ИмяТабличнойЧасти.Реквизит.ИмяРеквизита.
// ТипОбъектаМетаданных должен быть Справочник или Документ.
//
// Параметры:
//  ПутьКДанным - строка.
//  МетаданныеОбъекта - Объект метаданных
//
// Возвращаемое значение:
//  Структура - путь к объекту метаданных
//
Функция РазобратьПутьКОбъектуМетаданных(ПутьКДанным, МетаданныеОбъекта = Неопределено)
	
	Структура = Новый Структура;
	
	СоответствиеИмен = Новый Массив();
	СоответствиеИмен.Добавить("ТипОбъекта");
	СоответствиеИмен.Добавить("ВидОбъекта");
	СоответствиеИмен.Добавить("ПутьКДанным");
	СоответствиеИмен.Добавить("ИмяТаблЧасти");
	СоответствиеИмен.Добавить("ИмяРеквизита");
	
	Для индекс = 1 по 3 Цикл
		
		Точка = Найти(ПутьКДанным, ".");
		ТекущееЗначение = Лев(ПутьКДанным, Точка-1);
		Структура.Вставить(СоответствиеИмен[индекс-1], ТекущееЗначение);
		ПутьКДанным = Сред(ПутьКДанным, Точка+1);
		
	КонецЦикла;
	
	ПутьКДанным = СтрЗаменить(ПутьКДанным, "Реквизит.", "");
	
	Если Структура.ПутьКДанным = "ТабличнаяЧасть" Тогда
		
		Для индекс = 4 по 5  Цикл 
			
			Точка = Найти(ПутьКДанным, ".");
			Если Точка = 0 Тогда
				ТекущееЗначение = ПутьКДанным;
			Иначе
				ТекущееЗначение = Лев(ПутьКДанным, Точка-1);
			КонецЕсли;
			
			Структура.Вставить(СоответствиеИмен[индекс-1], ТекущееЗначение);
			ПутьКДанным = Сред(ПутьКДанным,  Точка+1);
			
		КонецЦикла;
		
	Иначе
		
		Структура.Вставить(СоответствиеИмен[3], "");
		Структура.Вставить(СоответствиеИмен[4], ПутьКДанным);
		
	КонецЕсли;
	
	Если МетаданныеОбъекта <> Неопределено Тогда
		Структура.Вставить("Метаданные", МетаданныеОбъекта);
	Иначе
		Если Структура.ТипОбъекта = "Документ" Тогда
			Структура.Вставить("Метаданные", Метаданные.Документы[Структура.ВидОбъекта]);
		Иначе
			Структура.Вставить("Метаданные", Метаданные.Справочники[Структура.ВидОбъекта]);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции // РазобратьПутьКОбъектуМетаданных()

Функция ЕстьПроведенныеПодчиненныеДокументы(ДокументСсылка)
	
	Нашли = ложь;
	мМассивПодчиненных = ПолучитьМассивПодчиненныхДокументов1(ДокументСсылка);
	Для каждого ЭлементМассива Из мМассивПодчиненных Цикл
		Если ЗначениеЗаполнено(ЭлементМассива.Ссылка) И ЭлементМассива.Ссылка.Проведен Тогда
			Нашли = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Нашли;

КонецФункции // ЕстьПроведенныеПодчиненныеДокументы()

Функция НайтиИмяЗаказа(Тэг, СтрокаТЧ = Неопределено)
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Тэг", Тэг);
	Если СтрокаТЧ <> Неопределено Тогда
		СтруктураОтбора.Вставить("НомерСтрокиРодителя", СтрокаТЧ.ПорядковыйНомерСтроки);
	КонецЕсли;
	НайденноеЗначение = ЗагруженныеСтроки.НайтиСтроки(СтруктураОтбора);
	Если НайденноеЗначение.Количество()>0 Тогда
		Если ЗначениеЗаполнено(НайденноеЗначение[0].Значение) Тогда
			Возврат НайденноеЗначение[0].Значение;
		иначе
		КонецЕсли;
	КонецЕсли;
КонецФункции

Процедура ЗаполнитьПоляТЧ(ИнтерактивныйРежим = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда		
		Предупреждение = "Перед заполнением полей необходимо записать документ!";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Предупреждение);
		Возврат;
	КонецЕсли;
		
	#Если Клиент Тогда
	Если ИнтерактивныйРежим Тогда
		ФормаПрогрессора = ПолучитьФорму("гф_ФормаПрогрессора");
		ФормаПрогрессора.ЭлементыФормы.ЗначениеИндикатора.СтильОтображения = РежимСглаживанияИндикатора.Плавный;
	КонецЕсли;
	#КонецЕсли
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	НастройкаЗагружаемыхДанных.СтатусПоля,
				   |	НастройкаЗагружаемыхДанных.Ссылка,
				   |	НастройкаЗагружаемыхДанных.Наименование
				   |ИЗ
				   |	Справочник.НастройкаЗагружаемыхДанных КАК НастройкаЗагружаемыхДанных
				   |ГДЕ
				   |	НастройкаЗагружаемыхДанных.Интерфейс = &Интерфейс";
	Запрос.УстановитьПараметр("Интерфейс", Интерфейс);
	
	ЗагружаемыеПоля = Запрос.Выполнить().Выгрузить();
	
		#Если Клиент Тогда
	Если ИнтерактивныйРежим Тогда
		ФормаПрогрессора.ЭлементыФормы.ЗначениеИндикатора.МинимальноеЗначение = 0;
		ФормаПрогрессора.ЭлементыФормы.ЗначениеИндикатора.МаксимальноеЗначение = ЗагружаемыеПоля.Количество();
	КонецЕсли;
	#КонецЕсли
		
	Если ЗагружаемыеПоля.Количество()>0 Тогда
		НаборЗаписей = РегистрыСведений.СтрокиДокументаДанныеЗагрузки.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Значение = ЭтотОбъект.Ссылка;
		НаборЗаписей.Отбор.Документ.Использование = Истина;
		
		НаборЗаписей.Прочитать();
        		
	
		#Если Клиент Тогда
		Если ИнтерактивныйРежим Тогда
			ФормаПрогрессора.Открыть();	
			ФормаПрогрессора.ЗначениеИндикатора = 0;
			ФормаПрогрессора.СтрокаПрогрессора = "Заполнение полей...";
		КонецЕсли;
		#КонецЕсли
		
		
		Для Каждого СтрокаТЧ Из НаборЗаписей Цикл
			НайденноеЗначение = ЗагружаемыеПоля.Найти(СтрокаТЧ.Тэг, "Наименование");
			Если НайденноеЗначение<>Неопределено Тогда
				СтрокаТЧ.ПолеЗагрузки = НайденноеЗначение.Ссылка;
				СтрокаТЧ.СтатусПоля = НайденноеЗначение.СтатусПоля;
			Иначе
				СтрокаТЧ.ПолеЗагрузки = Справочники.НастройкаЗагружаемыхДанных.ПустаяСсылка();
				СтрокаТЧ.СтатусПоля = Перечисления.СтатусПоля.ПустаяСсылка();
			КонецЕсли;
			#Если Клиент Тогда
			Если ИнтерактивныйРежим Тогда
				ФормаПрогрессора.ЗначениеИндикатора = ФормаПрогрессора.ЗначениеИндикатора +1; //Добавлено Выморков 13.04.09
			КонецЕсли;
			#КонецЕсли
		КонецЦикла;
		#Если Клиент Тогда
		Если ИнтерактивныйРежим Тогда
			ФормаПрогрессора.СтрокаПрогрессора = "Обновление набора записей в регистре...";
		КонецЕсли;
		#КонецЕсли
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
	
	
	#Если Клиент Тогда
	Если ИнтерактивныйРежим И ФормаПрогрессора.Открыта() Тогда
		ФормаПрогрессора.Закрыть();
	КонецЕсли;
	#КонецЕсли	
		
	СтатусДокумента = Перечисления.гф_СтатусыДокументовЗагрузки.Загружено;
	
КонецПроцедуры

Процедура ПолучитьНаборЗаписейРегистраСтрок()

	НаборЗаписейТэговXML = РегистрыСведений.гф_СтрокиДокументаДанныеЗагрузки.СоздатьНаборЗаписей();
	НаборЗаписейТэговXML.Отбор.Документ.Значение = ЭтотОбъект.Ссылка;
	НаборЗаписейТэговXML.Отбор.Документ.Использование = Истина;
	НаборЗаписейТэговXML.Прочитать();

	ЗагруженныеСтроки = НаборЗаписейТэговXML.Выгрузить();
			
КонецПроцедуры // ПолучитьНаборЗаписейРегистраСтрок()

Процедура СоздатьНоменклатуру(Отказ = Ложь, СоздаватьНоменклатуру = Истина, СоздаватьУстановкуЦен = Ложь, ВыводитьПрогрессор = Ложь) Экспорт
	
	Если НЕ Интерфейс = Перечисления.гф_Интерфейсы.PRICAT Тогда
		Возврат;	
	КонецЕсли;
	
	ПолучитьНаборЗаписейРегистраСтрок();
	
	Если СоздаватьНоменклатуру Тогда
		ПроведениеИнтерфейсаPricat(НаборЗаписейТэговXML, Отказ, Истина);
		Если НЕ Отказ Тогда
			СтатусДокумента = Перечисления.гф_СтатусыДокументовЗагрузки.НоменклатураЗагружена;
		КонецЕсли;
    КонецЕсли;
	Если СоздаватьУстановкуЦен И СтатусДокумента = Перечисления.гф_СтатусыДокументовЗагрузки.НоменклатураЗагружена Тогда
		//СозданиеПроведениеУстановкиЦен(НаборЗаписейТэговXML, Отказ);
		//Если НЕ Отказ Тогда
		//	СтатусДокумента = Перечисления.гф_СтатусыДокументовЗагрузки.СозданыЦеныНоменклатуры;
		//КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроведениеИнтерфейсаPricat(ТабличнаяЧасть, Отказ, ВыводитьПрогрессор = Ложь)
		
	НовыйЭлемент 			= Неопределено;
	флЗаписиНоменклатуры	= Ложь;
	НомерСтрокиРодителя 	= 1;
	ПереводВСледующийСтатусРазрешен	= Истина;	
				
	GLN_manufacturer	= НайтиСтрокуДереваПоТэгу("GLN_manufacturer", ,Отказ);	
	#Если Клиент Тогда
		Если ВыводитьПрогрессор Тогда
			ФормаПрогрессора = ПолучитьФорму("гф_ФормаПрогрессора");
			ФормаПрогрессора.ЭлементыФормы.ЗначениеИндикатора.СтильОтображения = РежимСглаживанияИндикатора.Плавный;
		КонецЕсли;
	#КонецЕсли
	
	ЗапросПоНаименованию = Новый Запрос(
	"ВЫБРАТЬ
	|	ArticlrDescriptions.NameRU,
	|	ArticlrDescriptions.Product_group КАК Product_group,
	|	ArticlrDescriptions.GLN_Supplier КАК GLN_Supplier,
	|	ArticlrDescriptions.ВидНоменклатуры,
	|	ArticlrDescriptions.Родитель,
	|	ArticlrDescriptions.ЕдиницаИзмеренияПоКлассификатору,
	|	ArticlrDescriptions.СтавкаНДС
	|ИЗ
	|	РегистрСведений.гф_ArticlrDescriptions КАК ArticlrDescriptions
	|
	|УПОРЯДОЧИТЬ ПО
	|	Product_group,
	|	GLN_Supplier
	|АВТОУПОРЯДОЧИВАНИЕ");							 
	
	ТаблицаArticlеsDescriptions = ЗапросПоНаименованию.Выполнить().Выгрузить();                        
	ТекущаяСтрокаРодителя   = Неопределено;
	
	#Если Клиент Тогда
		Если ВыводитьПрогрессор Тогда
			ФормаПрогрессора.ЭлементыФормы.ЗначениеИндикатора.МинимальноеЗначение = 0;
			ФормаПрогрессора.ЭлементыФормы.ЗначениеИндикатора.МаксимальноеЗначение = ТабличнаяЧасть.Количество();
			ФормаПрогрессора.СтрокаПрогрессора = "Создание (изменение) номенклатуры...";
			ФормаПрогрессора.Открыть();	
		КонецЕсли;
	#КонецЕсли
	
	НомерПредидущегоРодителя = "0";
	
	Для Каждого СтрокаТЧ из ТабличнаяЧасть Цикл 
		
		Если НЕ  ТранзакцияАктивна() Тогда
			НачатьТранзакцию();				
		КонецЕсли;		
		
		#Если Клиент Тогда
			Если ВыводитьПрогрессор Тогда
				ФормаПрогрессора.ЗначениеИндикатора = ФормаПрогрессора.ЗначениеИндикатора +1;
			КонецЕсли;
		#КонецЕсли
		
		Если ЗначениеЗаполнено(СтрокаТЧ.ПолеЗагрузки) И СтрокаТЧ.НомерСтрокиРодителя <> НомерПредидущегоРодителя Тогда
						
			ТипСправочника = СтрокаТЧ.ПолеЗагрузки.ТипОбъекта;
			
			Если ТипСправочника = "Номенклатура" Тогда
				НомерСтрокиРодителя = СтрокаТЧ.НомерСтрокиРодителя;
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("Тэг", "Suppliers_article_number");
				ТекущаяСтрокаРодителя   = СтрокаТЧ.ПорядковыйНомерСтроки;
				СтруктураОтбора.Вставить("НомерСтрокиРодителя", НомерСтрокиРодителя);
				
				СтруктураОтбораЦвета = Новый Структура;
				СтруктураОтбораЦвета.Вставить("Тэг", "Colour_code_supplier");
				СтруктураОтбораЦвета.Вставить("НомерСтрокиРодителя", НомерСтрокиРодителя);
				
				НомерЦвета = ЗагруженныеСтроки.НайтиСтроки(СтруктураОтбораЦвета);
				НайденныйНомерЦвета = НомерЦвета[0].Значение;
				НайденноеЗначение = ЗагруженныеСтроки.НайтиСтроки(СтруктураОтбора);
				
				Если НайденноеЗначение.Количество()>0 Тогда
					Артикул = НайденноеЗначение[0].Значение+ "-" + НайденныйНомерЦвета;
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	Номенклатура.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.Номенклатура КАК Номенклатура
					|ГДЕ
					|	Номенклатура.Артикул ПОДОБНО &Артикул";
					
					Запрос.УстановитьПараметр("Артикул", Артикул);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					Выборка = РезультатЗапроса.Выбрать();
					
					Если РезультатЗапроса.Пустой() Тогда
						ВременноеНаименование = Строка("Обувь" + Артикул);
						НовыйЭлемент = Справочники[ТипСправочника].СоздатьЭлемент();
						НовыйЭлемент.Артикул = Артикул;
						НовыйЭлемент.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Обувь в парах импортная");
						НовыйЭлемент.ЕдиницаИзмерения =	Справочники.УпаковкиЕдиницыИзмерения.НайтиПоНаименованию("пар");
						НовыйЭлемент.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
						НовыйЭлемент.ВестиУчетПоГТД = Истина;
						НовыйЭлемент.ВестиУчетСертификатовНоменклатуры = Истина;
						НовыйЭлемент.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры;
						НовыйЭлемент.Качество = Перечисления.ГрадацииКачества.Новый;
						НовыйЭлемент.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("20%"); 
						НовыйЭлемент.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
						НовыйЭлемент.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция;
						НовыйЭлемент.Наименование = ВременноеНаименование;
						
						НовыйЭлемент.Записать();
						
						флЗаписиНоменклатуры = Истина;
						
						НомерПредидущегоРодителя = СтрокаТЧ.НомерСтрокиРодителя;
					Иначе
						Выборка.Следующий();
						НовыйЭлемент = Выборка.Ссылка.ПолучитьОбъект();
					КонецЕсли;
				Иначе
					СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + " в строке №" + НомерСтрокиРодителя + ". Описание ошибки: " + ОписаниеОшибки();
					
					ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
					НовыйЭлемент = Справочники[ТипСправочника].СоздатьЭлемент();
					ВременноеНаименование = Строка("Обувь без Артикула!" + СтрокаТЧ.НомерСтрокиРодителя);
					НовыйЭлемент.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоРеквизиту("Товар");
					НовыйЭлемент.ЕдиницаИзмерения =	Справочники.УпаковкиЕдиницыИзмерения.НайтиПоНаименованию("пар");
					НовыйЭлемент.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
					НовыйЭлемент.ВестиУчетПоГТД = Истина;
					НовыйЭлемент.ВестиУчетСертификатовНоменклатуры = Истина;
					НовыйЭлемент.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры;
					НовыйЭлемент.Качество = Перечисления.ГрадацииКачества.Новый;
					НовыйЭлемент.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("20%"); 
					НовыйЭлемент.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
					НовыйЭлемент.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция;
					НовыйЭлемент.Наименование = ВременноеНаименование;
					
					НовыйЭлемент.Записать();
					
					НомерПредидущегоРодителя = СтрокаТЧ.НомерСтрокиРодителя;
					флЗаписиНоменклатуры = Истина;
				КонецЕсли;
				Position_action = НайтиСтрокуДереваПоТэгу("Position_action", СтрокаТЧ, Отказ);
				Если ЗначениеЗаполнено(Position_action) Тогда
					Если СокрЛП(Position_action) = "2" Тогда
						НовыйЭлемент.ПометкаУдаления = Истина;
					Иначе
						НовыйЭлемент.ПометкаУдаления = Ложь;
					КонецЕсли;
					флЗаписиНоменклатуры	= Истина;
				КонецЕсли;
				
				ДополнитьРеквизитыЭлементаНоменклатуры(СтрокаТЧ, Отказ, НовыйЭлемент, ТаблицаArticlеsDescriptions, ПереводВСледующийСтатусРазрешен);

			КонецЕсли;
			
		Иначе 
		 //
		КонецЕсли;	
		
		Если НовыйЭлемент <> Неопределено Тогда
			
			НовыйЭлемент.Наименование = НовыйЭлемент.Наименование + " " + НовыйЭлемент.КоллекцияНоменклатуры;
			ДописатьСвойствоGLN_manufacturer(НовыйЭлемент, GLN_manufacturer, СтрокаТЧ);
			
			//Перед записью предварительно проверим содержимое следующего по порядку тэга (следующей строки)
			//и убедимся что это тэг с новой "Message_Position"  или последняя строка
			МенеджерЗаписейСтрок		= РегистрыСведений.гф_СтрокиДокументаДанныеЗагрузки.СоздатьМенеджерЗаписи();
			МенеджерЗаписейСтрок.Документ 				= СтрокаТЧ.Документ;
			МенеджерЗаписейСтрок.Тэг 					= "Message_Position";
			МенеджерЗаписейСтрок.ПорядковыйНомерСтроки 	= СтрокаТЧ.НомерСтрокиРодителя; 
			МенеджерЗаписейСтрок.Прочитать();
			Если МенеджерЗаписейСтрок.Выбран() или СтрокаТЧ.ПорядковыйНомерСтроки = ТабличнаяЧасть.Количество() Тогда
				
				Попытка
					
					НовыйЭлемент.Записать();
					
					// Заполняю состав контейнера с помощью механизма комплектации номенклатуры
					//ЗаполнитьКомплектациюНоменклатуры(НовыйЭлемент.Ссылка, НомерСтрокиРодителя);
										
					НовыйЭлемент 			= Неопределено;
					ТекущаяСтрокаРодителя   = Неопределено;
					
				Исключение
					СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + " в строке №" + НомерСтрокиРодителя + ". Описание ошибки: " + ОписаниеОшибки();
					ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
					флЗаписиНоменклатуры = Ложь;
				КонецПопытки;
				
				//--------------------------------------
				//фиксируем транзакцию
				Если НЕ Отказ И флЗаписиНоменклатуры Тогда
					Если ТранзакцияАктивна() Тогда
						ЗафиксироватьТранзакцию();
						флЗаписиНоменклатуры = Ложь;
					КонецЕсли;		
				Иначе
					Если ТранзакцияАктивна() Тогда
						ОтменитьТранзакцию();
						Отказ = Ложь;
					КонецЕсли;	
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
		
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	#Если Клиент Тогда
		Если ВыводитьПрогрессор И ФормаПрогрессора.Открыта() Тогда
			ФормаПрогрессора.Закрыть();
		КонецЕсли;
	#КонецЕсли	
	
	Сообщить(Формат(ТекущаяДата(),"ДЛФ=T")+ " - окончание создания номенклатуры");
	
КонецПроцедуры

Процедура СоздатьУпаковочныйЛист() Экспорт
	
КонецПроцедуры  

Процедура ДополнитьРеквизитыЭлементаНоменклатуры(СтрокаТЧ, Отказ, НовыйЭлемент, ТаблицаArticlеsDescriptions, ПереводВСледующийСтатусРазрешен)
	
	Product_group_supplier	= Неопределено;
	GLN_supplier			= Неопределено;
	
	СтруктураСвойств	= ВыбратьВсеТэгиСвойствПоСтрокеАртикулу(СтрокаТЧ);
	
	GLN_supplier = НайтиСтрокуДереваПоТэгу("GLN_supplier",,Отказ);	
	Если Отказ Тогда
		СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + ". Описание ошибки: Не найден тэг GLN_supplier.";
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
		Возврат;
	КонецЕсли;
	
	//----------------------------------------------------------------
	//1. Формируем наименование
	//----------------------------------------------------------------
	НайденноеЗначение	= Неопределено;
	СвойствоНайдено = СтруктураСвойств.Свойство("Product_group_supplier", НайденноеЗначение);
	Если СвойствоНайдено Тогда
		Product_group_supplier = НайденноеЗначение;
	КонецЕсли;
	
	СтавкаНДСПоУмолчанию = Справочники.СтавкиНДС.НайтиПоНаименованию("20%");
		
	НайденноеЗначение = Неопределено;
	
	Если ЗначениеЗаполнено(Product_group_supplier) Тогда
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Product_group", Product_group_supplier);
		СтруктураОтбора.Вставить("GLN_Supplier", GLN_supplier);
		СтрокиНаименований	= ТаблицаArticlеsDescriptions.НайтиСтроки(СтруктураОтбора);		
		Если СтрокиНаименований.Количество() > 0 Тогда
			
			СтрокаН = СтрокиНаименований[0];			
			
			РусскоеНаименование	 = СтрокаН.NameRU;
			//проверка наименования
			Если СокрЛП(НовыйЭлемент.Наименование) <> РусскоеНаименование Тогда
								
				НовыйЭлемент.Наименование = РусскоеНаименование;
				флЗаписиНоменклатуры = Истина;
			КонецЕсли;
			
			Если СокрЛП(НовыйЭлемент.НаименованиеПолное) <> РусскоеНаименование Тогда
				НовыйЭлемент.НаименованиеПолное = РусскоеНаименование;
				флЗаписиНоменклатуры = Истина;
			КонецЕсли;
						
			//если указан родитель, помещаем в эту группу
			Родитель = СтрокаН.Родитель;
			Если НЕ НовыйЭлемент.Родитель = Родитель Тогда
				НовыйЭлемент.Родитель = Родитель;
				флЗаписиНоменклатуры = Истина;
			КонецЕсли;
			
			//проверка вида номенклатуры, по умолчанию присваиваем "Обувь в парах импортная"	
			ВидНоменклатуры = СтрокаН.ВидНоменклатуры;
			Если НЕ НовыйЭлемент.ВидНоменклатуры = ВидНоменклатуры Тогда
				НовыйЭлемент.ВидНоменклатуры = ВидНоменклатуры;
				флЗаписиНоменклатуры = Истина;
			КонецЕсли;
	
			Если ЗначениеЗаполнено(СтрокаН.СтавкаНДС) Тогда
				СтавкаНДС = СтрокаН.СтавкаНДС;
			Иначе
				СтавкаНДС = СтавкаНДСПоУмолчанию;
			КонецЕсли;
			
			Если НЕ НовыйЭлемент.СтавкаНДС = СтавкаНДС Тогда
				НовыйЭлемент.СтавкаНДС = СтавкаНДС;
				флЗаписиНоменклатуры = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//----------------------------------------------------------------
	//2. Формируем базовую единицу измерения
	//----------------------------------------------------------------
	Если ЗначениеЗаполнено(Product_group_supplier) и ЗначениеЗаполнено(GLN_supplier) Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Product_group", Product_group_supplier);
		СтруктураОтбора.Вставить("GLN_Supplier", GLN_supplier);
		СтрокиНаименований	= ТаблицаArticlеsDescriptions.НайтиСтроки(СтруктураОтбора);		
		Если СтрокиНаименований.Количество() > 0 Тогда
			ЕИКлассификатор	= СтрокиНаименований[0].ЕдиницаИзмеренияПоКлассификатору;
			//проверка на измененеие и если необходимо - запись
			Если НЕ НовыйЭлемент.ЕдиницаИзмерения = ЕИКлассификатор Тогда
				НовыйЭлемент.ЕдиницаИзмерения = ЕИКлассификатор;
				флЗаписиНоменклатуры	= Истина;					
			КонецЕсли;
		Иначе
			СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + ". Описание ошибки: В регистре ""ArticlrDescriptions"" не удалось найти единицу измерения для "+ СокрЛП(Product_group_supplier);
			//ОбработатьОшибку(СтрокаТЧ, СообщениеОбОшибке, Отказ, Истина);
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
			Отказ = Истина;
			ПереводВСледующийСтатусРазрешен	= Ложь;
			Возврат;
		КонецЕсли;
	Иначе
		СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + ". Описание ошибки: Не удалось определить свойство ""Product_group_supplier"" для Articl:"+ СокрЛП(НовыйЭлемент.Артикул);
		//ОбработатьОшибку(СтрокаТЧ, СообщениеОбОшибке, Отказ, Истина);
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
		Отказ = Истина;
		ПереводВСледующийСтатусРазрешен	= Ложь;
		Возврат;	
	КонецЕсли;
	//----------------------------------------------------------------
	// 3. Добавляем значения производителя и марки 
	//----------------------------------------------------------------
	СтранаПроисхождения = НайтиСтрокуДереваПоТэгу("Country_of_origin", СтрокаТЧ, Отказ);	
	Если ЗначениеЗаполнено(СтранаПроисхождения) Тогда
		НайденныйЭлемент = Справочники.СтраныМира.НайтиПоРеквизиту("КодАльфа2", СокрЛП(СтранаПроисхождения));
		Если ЗначениеЗаполнено(НайденныйЭлемент) Тогда
			НовыйЭлемент.СтранаПроисхождения = НайденныйЭлемент;
			флЗаписиНоменклатуры	= Истина;
		Иначе
			СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + " в строке №" + СтрокаТЧ.ПорядковыйНомерСтроки + ". Описание ошибки: В классификаторе стран мира не найдено указанное значение";
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
		КонецЕсли;
	Иначе
		СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + " в строке №" + СтрокаТЧ.ПорядковыйНомерСтроки + ". Описание ошибки: Не заполнено значение страны происхождения";
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
	КонецЕсли; 
	
	//----------------------------------------------------------------
	// 4. Записываем дополнительные свойства объекта 
	//----------------------------------------------------------------
	Если НовыйЭлемент <> Неопределено Тогда
		
		СтруктураОтбора = Новый Структура;	
		СтруктураОтбора.Вставить("НомерСтрокиРодителя", СтрокаТЧ.НомерСтрокиРодителя);	
		СтруктураОтбора.Вставить("СтатусПоля", Перечисления.гф_СтатусыПоля.Информационное);
        		
		ДополнительныеРеквизиты = ЗагруженныеСтроки.НайтиСтроки(СтруктураОтбора); 
		
		СтруктураОтбора = Новый Структура;	
		СтруктураОтбора.Вставить("НомерСтрокиРодителя", СтрокаТЧ.НомерСтрокиРодителя);	
		СтруктураОтбора.Вставить("СтатусПоля", Перечисления.гф_СтатусыПоля.Обязательное);
        ОбязательныеРеквизиты = ЗагруженныеСтроки.НайтиСтроки(СтруктураОтбора); 
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДополнительныеРеквизиты, ОбязательныеРеквизиты);
		
		СтруктураОтбора = Новый Структура;	
		СтруктураОтбора.Вставить("НомерСтрокиРодителя", СтрокаТЧ.НомерСтрокиРодителя);	
		СтруктураОтбора.Вставить("СтатусПоля", Перечисления.гф_СтатусыПоля.Критическое);
        КритическиеРеквизиты = ЗагруженныеСтроки.НайтиСтроки(СтруктураОтбора); 
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДополнительныеРеквизиты, КритическиеРеквизиты);		
		
		ЗначенияСвойств = Новый Массив;
		Для каждого Реквизит Из ДополнительныеРеквизиты Цикл 
			ИндексЗначения = Реквизит.ПолеЗагрузки.Объект;
			Если Реквизит.ПолеЗагрузки.ТипОбъекта = "Номенклатура" 
				И Реквизит.ПолеЗагрузки.Объект <> "Артикул" Тогда
				ТипРеквизита = ТипЗнч(НовыйЭлемент[ИндексЗначения]);
				МетаданныеОбъекта = НовыйЭлемент[ИндексЗначения].Метаданные();
				Если ТипРеквизита = Тип("Строка") Тогда
					НовыйЭлемент[ИндексЗначения] = Строка(Реквизит.Значение);
				ИначеЕсли ТипРеквизита = Тип("Число") Тогда
					НовыйЭлемент[ИндексЗначения] = Число(Реквизит.Значение);
				ИначеЕсли ТипРеквизита = Тип("Дата") Тогда
					НовыйЭлемент[ИндексЗначения] = Дата(Реквизит.Значение);
				ИначеЕсли Найти(МетаданныеОбъекта.ПолноеИмя(), "Справочник")>0 Тогда	
					ЗначениеСправочника = Справочники[МетаданныеОбъекта.Имя].НайтиПоКоду(Реквизит.Значение);
					Если ЗначениеЗаполнено(ЗначениеСправочника) Тогда
						НовыйЭлемент[ИндексЗначения] = ЗначениеСправочника;
					Иначе ЗначениеСправочника = Справочники[МетаданныеОбъекта.Имя].НайтиПоНаименованию(Реквизит.Значение); 
						Если ЗначениеЗаполнено(ЗначениеСправочника) Тогда
							НовыйЭлемент[ИндексЗначения] = ЗначениеСправочника;
						Иначе
							ИзменитьКомментарийВРегистре(Реквизит.ПорядковыйНомерСтроки, Реквизит.Тэг, "Значение в базе не найдено")
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;	
				флЗаписиНоменклатуры	= Истина; 	
			ИначеЕсли ТипЗнч(Реквизит.ПолеЗагрузки.ТипОбъекта)
				= Тип("СправочникСсылка.НаборыДополнительныхРеквизитовИСведений") Тогда												
				Значение = Новый Структура("Свойство, Значение", Реквизит.ПолеЗагрузки.Объект, Реквизит.Значение);
				ЗначенияСвойств.Добавить(Значение);
				Если Реквизит.Тэг = "Picture_name"  Тогда
					ПоискИЗаписьКартинки(Реквизит.Значение, СтрокаТЧ, НовыйЭлемент);
				КонецЕсли;
			ИначеЕсли Реквизит.Тэг = "EAN" Тогда
				СоздатьШтрихкод(СтрокаТч, ВидНоменклатуры, НовыйЭлемент, Реквизит.Значение, ЕИКлассификатор);
			КонецЕсли;
		КонецЦикла;
		
		Если Реквизит.ПолеЗагрузки.ТипОбъекта = "Номенклатура" И Реквизит.Тэг = "Supplier_season" Тогда												
				Свойство_Supplier_season = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Supplier_season");
				Значение = Новый Структура("Свойство, Значение", Свойство_Supplier_season, Реквизит.Значение);
				ЗначенияСвойств.Добавить(Значение);			
		КонецЕсли;
		Если ЗначениеЗаполнено(GLN_supplier) Тогда
			Свойство_GLN_supplier = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("GLN_supplier");
			Значение = Новый Структура("Свойство, Значение", Свойство_GLN_supplier, GLN_supplier);
			ЗначенияСвойств.Добавить(Значение);
		КонецЕсли;
		
		Если ЗначенияСвойств.Количество() > 0 Тогда
			ЗаписатьНаборСвойствВРегистр(НовыйЭлемент.Ссылка, ЗначенияСвойств, СтрокаТЧ);
			флЗаписиНоменклатуры	= Истина;
		КонецЕсли;
		
	КонецЕсли;                                  
	
КонецПроцедуры

Функция НайтиСтрокуДереваПоТэгу(Тэг, СтрокаТЧ = Неопределено, Отказ)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Тэг", Тэг);
	Если не СтрокаТЧ = Неопределено Тогда
		СтруктураОтбора.Вставить("НомерСтрокиРодителя", СтрокаТЧ.НомерСтрокиРодителя);
	КонецЕсли;
	НайденноеЗначение = ЗагруженныеСтроки.НайтиСтроки(СтруктураОтбора);
	Если НайденноеЗначение.Количество()>0 Тогда
		Если ЗначениеЗаполнено(НайденноеЗначение[0].Значение) Тогда
			Возврат НайденноеЗначение[0].Значение;
		иначе
			Если СтрокаТЧ = Неопределено Тогда
				СообщениеОбОшибке = "Ошибка при проведении документа " + Ссылка + ". Описание ошибки: Не заполнен тэг " + Тэг;
				//ОбработатьОшибку(, СообщениеОбОшибке, Отказ, Истина);
			Иначе
				СообщениеОбОшибке = "Ошибка при проведении документа " + Ссылка + " в строке №" + СтрокаТЧ.ПорядковыйНомерСтроки + ". Описание ошибки: Не заполнено значение строки " + Тэг;
				//ОбработатьОшибку(СтрокаТЧ, СообщениеОбОшибке, Отказ, Истина);
			КонецЕсли;
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, Ссылка, Ссылка, СообщениеОбОшибке);
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		СообщениеОбОшибке = "Ошибка при проведении документа " + Ссылка + ". Описание ошибки: Не найден тэг " + Тэг;
		//ОбработатьОшибку(, СообщениеОбОшибке, Отказ, Истина);
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, Ссылка, Ссылка, СообщениеОбОшибке);
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции 

Функция НайтиСтрокуДереваПоТэгуОтПорядкового(Тэг, СтрокаТЧ = Неопределено, Отказ)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Тэг", Тэг);
	Если не СтрокаТЧ = Неопределено Тогда
		СтруктураОтбора.Вставить("НомерСтрокиРодителя", СтрокаТЧ.ПорядковыйНомерСтроки);
	КонецЕсли;
	НайденноеЗначение = ЗагруженныеСтроки.НайтиСтроки(СтруктураОтбора);
	Если НайденноеЗначение.Количество()>0 Тогда
		Если ЗначениеЗаполнено(НайденноеЗначение[0].Значение) Тогда
			Возврат НайденноеЗначение[0].Значение;
		иначе
			Если СтрокаТЧ = Неопределено Тогда
				СообщениеОбОшибке = "Ошибка при проведении документа " + Ссылка + ". Описание ошибки: Не заполнен тэг " + Тэг;
				//ОбработатьОшибку(, СообщениеОбОшибке, Отказ, Истина);
			Иначе
				СообщениеОбОшибке = "Ошибка при проведении документа " + Ссылка + " в строке №" + СтрокаТЧ.ПорядковыйНомерСтроки + ". Описание ошибки: Не заполнено значение строки " + Тэг;
				//ОбработатьОшибку(СтрокаТЧ, СообщениеОбОшибке, Отказ, Истина);
			КонецЕсли;
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, Ссылка, Ссылка, СообщениеОбОшибке);
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		СообщениеОбОшибке = "Ошибка при проведении документа " + Ссылка + ". Описание ошибки: Не найден тэг " + Тэг;
		//ОбработатьОшибку(, СообщениеОбОшибке, Отказ, Истина);
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, Ссылка, Ссылка, СообщениеОбОшибке);
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции
// Функция ВыбратьВсеТэгиСвойствПоСтрокеEAN
Функция ВыбратьВсеТэгиСвойствПоСтрокеАртикулу(СтрокаТЧ)
	
	Результат = Новый Структура;
	
    СтруктураОтбора = Новый Структура;
	Если СтрокаТЧ <> Неопределено Тогда
		СтруктураОтбора.Вставить("НомерСтрокиРодителя", СтрокаТЧ.НомерСтрокиРодителя);
	Иначе
		Возврат Результат;
	КонецЕсли;
	
	МассивСвойств = ЗагруженныеСтроки.НайтиСтроки(СтруктураОтбора);
	Для каждого Свойство Из МассивСвойств Цикл
		Результат.Вставить(Свойство.Тэг, Свойство.Значение);
	КонецЦикла;
	
    Возврат Результат;

КонецФункции // ВыбратьВсеТэгиСвойствПоСтрокеEAN()

Процедура ЗаписатьНаборСвойствВРегистр(Ссылка, ЗначенияСвойств, СтрокаТЧ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДополнительныеСведения");
		ЭлементБлокировки.УстановитьЗначение("Объект", Ссылка);
		Блокировка.Заблокировать();
		
		Набор = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
		Набор.Отбор.Объект.Установить(Ссылка);
		Набор.Прочитать();
		ТекущиеЗначения = Набор.Выгрузить();                             
		
		Для Каждого Строка Из ЗначенияСвойств Цикл
			Запись = ТекущиеЗначения.Найти(Строка.Свойство, "Свойство");
			Если Запись = Неопределено Тогда
				Запись = ТекущиеЗначения.Добавить();
				Запись.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(Строка.Свойство.Наименование);
				Если Не ЗначениеЗаполнено(Запись.Свойство) Тогда
					Продолжить;
				КонецЕсли;
				Запись.Объект   = Ссылка;
			КонецЕсли;
			Запись.Значение = Строка.Значение;
			
			Если Не ЗначениеЗаполнено(Запись.Значение)
				Или Запись.Значение = Ложь Тогда
				ТекущиеЗначения.Удалить(Запись);
			КонецЕсли;
		КонецЦикла;
		Набор.Загрузить(ТекущиеЗначения);
		Набор.Записать();
		
	Исключение
		СообщениеОбОшибке = "Ошибка при проведении документа " + Ссылка + " в строке №" + СтрокаТЧ.ПорядковыйНомерСтроки + ". Описание ошибки: Не удалось загрузить дополнительные сведения. " ;
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, Ссылка, Ссылка, СообщениеОбОшибке);		
	КонецПопытки;
	
КонецПроцедуры 

Процедура СоздатьШтрихкод(СтрокаТЧ, ВидНоменклатуры, НовыйЭлемент, EAN, ЕИКлассификатор) 
	Характеристика = Неопределено;
	
	Размер =  НайтиСтрокуДереваПоТэгу("Size", СтрокаТЧ,);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|   ХарактеристикиНоменклатуры.Владелец = &Владелец
	|	И ХарактеристикиНоменклатуры.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Владелец", ВидНоменклатуры);
	Запрос.УстановитьПараметр("Наименование", Размер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка.Следующий();
		Характеристика = Выборка.Ссылка;
	КонецЕсли;
	Попытка	
		МенеджерЗаписиШтрихкода = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
		МенеджерЗаписиШтрихкода.Номенклатура   = НовыйЭлемент.Ссылка;
		МенеджерЗаписиШтрихкода.Характеристика = Характеристика;
		МенеджерЗаписиШтрихкода.Упаковка       = ЕИКлассификатор;
		МенеджерЗаписиШтрихкода.Штрихкод       = EAN;
		МенеджерЗаписиШтрихкода.Записать();
	Исключение
		СообщениеОбОшибке = "Ошибка при проведении документа " + Ссылка + " в строке №" + СтрокаТЧ.ПорядковыйНомерСтроки + ". Описание ошибки: Не удалось загрузить штрихкоды " ;
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, Ссылка, Ссылка, СообщениеОбОшибке);		
	КонецПопытки;			
КонецПроцедуры

Процедура ДописатьСвойствоGLN_manufacturer(НовыйЭлемент, GLN_manufacturer, СтрокаТЧ) 
	
	Если НЕ ЗначениеЗаполнено(GLN_manufacturer) Тогда
		Возврат;
	КонецЕсли;
	ЗначенияСвойств = Новый Массив;
	Свойство_GLN_manufacturer = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("GLN_manufacturer");
	Значение = Новый Структура("Свойство, Значение", Свойство_GLN_manufacturer, GLN_manufacturer);
	ЗначенияСвойств.Добавить(Значение);
	
	ЗаписатьНаборСвойствВРегистр(НовыйЭлемент.Ссылка, ЗначенияСвойств, СтрокаТЧ);
	
	НовыйЭлемент.ПроизводительИмпортерКонтрагент = Справочники.Контрагенты.НайтиПоРеквизиту("гф_GLN_номер", GLN_manufacturer);
КонецПроцедуры

Процедура ИзменитьКомментарийВРегистре(ПорядковыйНомерСтроки, Тэг, Комментарий)
	
	НаборЗаписейПоТэгу = РегистрыСведений.гф_СтрокиДокументаДанныеЗагрузки.СоздатьНаборЗаписей();
	НаборЗаписейПоТэгу.Отбор.Документ.Значение = ЭтотОбъект.Ссылка;
	НаборЗаписейПоТэгу.Отбор.Документ.Использование = Истина;
	НаборЗаписейПоТэгу.Отбор.ПорядковыйНомерСтроки.Значение = ПорядковыйНомерСтроки;
	НаборЗаписейПоТэгу.Отбор.ПорядковыйНомерСтроки.Использование = Истина;
	НаборЗаписейПоТэгу.Отбор.Тэг.Значение = Тэг;
	НаборЗаписейПоТэгу.Отбор.Тэг.Использование = Истина;
	
	НаборЗаписейПоТэгу.Прочитать();
	
	ТекущиеЗначения = НаборЗаписейПоТэгу.Выгрузить();                             
	Для каждого Запись Из НаборЗаписейПоТэгу Цикл
		Запись.Комментарий = Комментарий;
	КонецЦикла;
	НаборЗаписейПоТэгу.Записать();	
	
КонецПроцедуры

Процедура ПоискИЗаписьКартинки(РеквизитЗначение, СтрокаТЧ, НовыйЭлемент)
	
	КартинкаОсновноеИзображение = Неопределено;
	
	Если Не ЗначениеЗаполнено(РеквизитЗначение) Тогда
		СообщениеОбОшибке = "Ошибка при загрузке поля " + ЭтотОбъект + " в строке №" + СтрокаТЧ.ПорядковыйНомерСтроки + ". Описание ошибки: Не заполнено значение Picture_Name";
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
	Иначе	
		ЗначениеКартинки = НРег(СокрЛП(РеквизитЗначение));
		ПозицияСимвола = Найти(ЗначениеКартинки, "."); 
		ЗначениеКартинкиДоТочки = Лев(ЗначениеКартинки, ПозицияСимвола - 1); 
		Расширение = Сред(ЗначениеКартинки, ПозицияСимвола + 1, СтрДлина(ЗначениеКартинки));	
		Картинка = Справочники.НоменклатураПрисоединенныеФайлы.НайтиПоНаименованию(ЗначениеКартинкиДоТочки);
		Если ЗначениеЗаполнено(Картинка) Тогда
			КартинкаОсновноеИзображение = Картинка;
		Иначе	
			////Создадим Ссылку на саму картинку, пока еще не загруженную
			//НовыйЭлементНоменклатураПрисоединенныеФайлы = Справочники.НоменклатураПрисоединенныеФайлы.СоздатьЭлемент();
			//НовыйЭлементНоменклатураПрисоединенныеФайлы.Расширение = Расширение;
			//НовыйЭлементНоменклатураПрисоединенныеФайлы.Наименование = ЗначениеКартинкиДоТочки;
			//НовыйЭлементНоменклатураПрисоединенныеФайлы.ВладелецФайла	= НовыйЭлемент.Ссылка; 		
			//НовыйЭлементНоменклатураПрисоединенныеФайлы.Записать();
			//КартинкаОсновноеИзображение = НовыйЭлементНоменклатураПрисоединенныеФайлы.Ссылка; 
		КонецЕсли;
		Если НЕ НовыйЭлемент.ФайлКартинки = КартинкаОсновноеИзображение Тогда	
			НовыйЭлемент.ФайлКартинки = КартинкаОсновноеИзображение;
			флЗаписиНоменклатуры	= Истина;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// ДоговорДляКонтрагентаНаДату
// Подбирает и возвращает договор для заданного Контрагента на заданную Дату
// Начальные условия для успешного подбора договора:
//		- обязательно должен присутствовать Тэг "Currency" 
//		- валюта заданная тэгом "Currency" должна присутствовать как минимум в одном элементе справочника "rc_СоответствиеВалютВФайлахЗагрузки"
//		- для заданной Даты должен существовать один и только один договор с такой валютой попадающий в интервал
//		  заданный реквизитами справочника  ДоговорыКонтрагентов: rc_ДатаНачалаПериодаЗагрузкиИзФайла и rc_ДатаОкончанияПериодаЗагрузкиИзФайла
//                                          
// Параметры
//  <Контрагент>  	– <Тип.Справочник.Контрагенты> 	– Контрагент, для которого ищется договор
//  <Дата>  		– <Тип.Дата> 					– Дата на которую ищется договор
//
// Возвращаемое значение:
//   <Тип.ДоговорыКонтрагентов>   – Найденный договор, либо "Неопределено"
//
//лысов. Параметры
//  <Вариант> -  для выбора варианта поиска договора
//      0 - стандартный способ
//      1 - поиск по году и сезону для ордера
//      2 - взять из заказа покупателя для инвойса
//
Функция ДоговорДляКонтрагентаНаДату(Контрагент, ДатаИнтервала, Отказ, знач Вариант = 0)
	
	Если Вариант = 0 или Вариант = 1 Тогда
		СтрНазваниеВалюты = НайтиСтрокуДереваПоТэгу("Currency",, Отказ);	
		Если Отказ или НЕ ЗначениеЗаполнено(СтрНазваниеВалюты) Тогда
			СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + ". Описание ошибки: Не найден или не заполнен тэг Currency.";
			//ОбработатьОшибку(, СообщениеОбОшибке, Отказ, Истина);
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
			Возврат Неопределено;
		КонецЕсли;
		Если СтрНазваниеВалюты = "RUB" Тогда
			 СтрНазваниеВалюты = "руб." 
		КонецЕсли;
		Валюты = Справочники.Валюты;
		НайденнаяСсылка = Валюты.НайтиПоНаименованию(СокрЛП(СтрНазваниеВалюты));
		Если НайденнаяСсылка = Валюты.ПустаяСсылка() Тогда
			СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + ". Описание ошибки: Не найден элемент справочника ""Валюты"" с символьным кодом - " + СокрЛП(СтрНазваниеВалюты);
			//ОбработатьОшибку(, СообщениеОбОшибке, Отказ, Истина);
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
			Возврат Неопределено;	
		КонецЕсли;	
	КонецЕсли;
	
	Если Вариант = 0 Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Договоры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК Договоры
		|ГДЕ
		|	Договоры.Владелец = &Контрагент
		|	И НЕ Договоры.ПометкаУдаления
		//|	И &ДатаИнтервала МЕЖДУ Договоры.rc_ДатаНачалаПериодаЗагрузкиИзФайла И вз_Договоры.rc_ДатаОкончанияПериодаЗагрузкиИзФайла
		|	И Договоры.ВалютаВзаиморасчетов = &Валюта");
		
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("Валюта", НайденнаяСсылка.Валюта);
		//Запрос.УстановитьПараметр("ДатаИнтервала", НачалоДня(ДатаИнтервала));
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Количество() > 1 Тогда
			Отказ = Истина;
			СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + ". Описание ошибки: На дату "+ Формат(ДатаИнтервала, "ДФ=dd.MM.yyyy")+", для контрагента "+СокрЛП(Контрагент)+", в валюте "+ СокрЛП(СтрНазваниеВалюты)+ " нет уникального договора (количество договоров более чем 1)! Документ не проведен!";
			//ОбработатьОшибку(, СообщениеОбОшибке, Отказ, Истина);
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
			Возврат Неопределено;
		ИначеЕсли Результат.Количество() = 0 Тогда	
			Отказ = Истина;
			СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + ". Описание ошибки: На дату "+ Формат(ДатаИнтервала, "ДФ=dd.MM.yyyy")+", для контрагента "+СокрЛП(Контрагент)+", в валюте "+ СокрЛП(СтрНазваниеВалюты)+ " нет ни одного подходящего договора! Документ не проведен!";
			//ОбработатьОшибку(, СообщениеОбОшибке, Отказ, Истина);
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
			Возврат Неопределено;	
		КонецЕсли;
		
		Результат.Следующий();	
		
		Возврат  Результат.Ссылка;
		
	ИначеЕсли Вариант = 1 Тогда
		
		НомерСезона = НайтиСтрокуДереваПоТэгу("Saison",, Отказ);
		НомерСезона = ?(НомерСезона = Неопределено, 0, число(НомерСезона));
		
		ГодСезона = НайтиСтрокуДереваПоТэгу("SaisonYear",, Отказ);
		ГодСезона = ?(ГодСезона = Неопределено, 0, число(ГодСезона));
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Контрагент = &Контрагент
		//|	И ДоговорыКонтрагентов.Организация = &Организация
		|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &Валюта
		|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
	    |	И ВЫБОР
		|			КОГДА &Год > 0
		|				ТОГДА ДоговорыКонтрагентов.гф_Сезон.гф_Номер = &Номер
		|						И ДоговорыКонтрагентов.гф_Сезон.гф_Год = &Год
		|			ИНАЧЕ ДоговорыКонтрагентов.гф_Сезон = ЗНАЧЕНИЕ(Справочник.КоллекцииНоменклатуры.ПустаяСсылка)
		|		КОНЕЦ";
     	
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		//Запрос.УстановитьПараметр("Организация", Объект.Организация);
		
		Запрос.УстановитьПараметр("Валюта", НайденнаяСсылка.Валюта);
        Запрос.УстановитьПараметр("Номер", НомерСезона);
		Запрос.УстановитьПараметр("Год", ГодСезона);
		
		//|	И &ДатаИнтервала МЕЖДУ вз_Договоры.rc_ДатаНачалаПериодаЗагрузкиИзФайла И вз_Договоры.rc_ДатаОкончанияПериодаЗагрузкиИзФайла
		//Запрос.УстановитьПараметр("ДатаИнтервала", НачалоДня(ДатаИнтервала));
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Количество() > 1 Тогда
			Отказ = Истина;
			СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + ". Описание ошибки: На дату "+ Формат(ДатаИнтервала, "ДФ=dd.MM.yyyy")+", для контрагента "+СокрЛП(Контрагент)+", в валюте "+ СокрЛП(СтрНазваниеВалюты)+ " нет уникального договора (количество договоров более чем 1)! Документ не проведен!";
			//ОбработатьОшибку(, СообщениеОбОшибке, Отказ, Истина);
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
			Возврат Неопределено;
		ИначеЕсли Результат.Количество() = 0 Тогда	
			Отказ = Истина;
			СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + ". Описание ошибки: На дату "+ Формат(ДатаИнтервала, "ДФ=dd.MM.yyyy")+", для контрагента "+СокрЛП(Контрагент)+", в валюте "+ СокрЛП(СтрНазваниеВалюты)+ " нет ни одного подходящего договора! Документ не проведен!";
			//ОбработатьОшибку(, СообщениеОбОшибке, Отказ, Истина);
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
			Возврат Неопределено;	
		КонецЕсли;
		
		Результат.Следующий();	
		
		Возврат  Результат.Ссылка;
		
	ИначеЕсли Вариант = 2 Тогда
		
		массив = ЗагруженныеСтроки.Скопировать(Новый Структура("Тэг", "Supplier_order_number"), "Значение");
		запрос = новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗаказКлиента.ДоговорКонтрагента КАК ДоговорКонтрагента
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.Номер В(&Номер)
		|	И ЗаказКлиента.Дата МЕЖДУ &ДатаНач И &ДатаКон");
		запрос.УстановитьПараметр("Номер", массив);
		
		МесяцевДляРасчетаНачальнойДатыПоискаЗаказаEDI = Справочники.w_Настройки.КоличествоМесяцевДляРасчетаНачальнойДатыПоискаЗаказаEDI.Значение;
		ПараметрКоличествоДней = 60;
		Если ТипЗнч(МесяцевДляРасчетаНачальнойДатыПоискаЗаказаEDI) = Тип("Число") тогда
			Если МесяцевДляРасчетаНачальнойДатыПоискаЗаказаEDI > 0 тогда	
				ПараметрКоличествоДней = МесяцевДляРасчетаНачальнойДатыПоискаЗаказаEDI;		
			КонецЕсли;
		КонецЕсли;
		запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДобавитьМесяц(ДатаИнтервала, -ПараметрКоличествоДней)));
		запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаИнтервала));
		
		выборка = запрос.Выполнить().Выбрать();
		
		Если выборка.Количество() = 0 Тогда
			Отказ = Истина;
			СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + ". Описание ошибки: Не найдены заказы покупателя для договора!";
			//ОбработатьОшибку(, СообщениеОбОшибке, Отказ, Истина);
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
			Возврат Неопределено;
		ИначеЕсли выборка.Количество() > 1 Тогда
			Отказ = Истина;
			СообщениеОбОшибке = "Ошибка при проведении документа " + ЭтотОбъект + ". Описание ошибки: Найдены заказы покупателя с разными договорами!";
			//ОбработатьОшибку(, СообщениеОбОшибке, Отказ, Истина);
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
			Возврат Неопределено;
		Иначе
			выборка.Следующий();
			Возврат выборка.ДоговорКонтрагента;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // ДоговорДляКонтрагентаНаДату

#КонецОбласти


#КонецЕсли
