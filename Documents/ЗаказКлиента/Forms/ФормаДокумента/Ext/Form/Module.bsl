
#Область ОбработчикиСобытийФормы  

&НаСервере
Процедура гф_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	
	гф_СоздатьНовыеРеквизиты();
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда 
         ВидимостьСтраницыТоварыВКоробах();
	Иначе
		 Элементы.гф_СтраницаТоварыВКоробах.Видимость = Ложь;
	КонецЕсли;
	 
	гф_УстановитьУсловноеОформление(); 
	гф_СформироватьПредставлениеИДКороба();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) 
		 И ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента") Тогда
		Объект.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;	
	КонецЕсли;
	// ++ Галфинд СадомцевСА 18.10.2022
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.гф_ВидЦены = ПланыВидовХарактеристик.гф_ГлобальныеЗначения.НайтиПоРеквизиту("Ключ",
			"гф_ГлобальныеЗначенияОптоваяЗакупочнаяЦена").Значение;
	КонецЕсли;
	
	гф_ТоварыВКоробах = ЭтоТоварыВКоробах(Объект.Склад);
	Элементы.гф_ЗаполнитьТовары.Доступность = гф_ТоварыВКоробах;
	
	// Добавление команды формы
	Команда = Команды.Добавить("гф_ЗаполнитьСкидку");
	Команда.Заголовок = "Заполнить скидку";
	Команда.Действие  = "гф_ЗаполнитьСкидку";
	
	// Добавление кнопки формы
	ТипКнопкаФормы = Тип("КнопкаФормы");
	КнопкаФормы = Элементы.Добавить("гф_КнопкаЗаполнитьСкидку",
		ТипКнопкаФормы,
		Элементы.ФормаКоманднаяПанель);
	КнопкаФормы.ИмяКоманды = "гф_ЗаполнитьСкидку";
	КнопкаФормы.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	// -- Галфинд СадомцевСА 18.10.2022
	
КонецПроцедуры  

&НаКлиенте
Процедура гф_ОбработкаВыбораПосле(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.гф_АдресаДоставки.Форма.ФормаВыбора" Тогда
		
		Адрес =  ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Адрес");
		АдресЗначение = ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Значение");
		АдресЗначенияПолей = " ";
		// vvv Галфинд \ Sakovich 03.11.2022
		//ИмяРеквизитаАдресаДоставки = ДоставкаТоваровКлиентСервер.ПолучитьИмяРеквизитаАдресаДоставки(ТекущийЭлемент);
		ИмяРеквизитаАдресаДоставки = гф_ПолучитьИмяРеквизитаАдресаДоставки(ТекущийЭлемент);
		// ^^^ Галфинд \ Sakovich 03.11.2022 
		Объект[ИмяРеквизитаАдресаДоставки] = Адрес;
		Объект[ИмяРеквизитаАдресаДоставки + "Значение"] = АдресЗначение;
		Объект[ИмяРеквизитаАдресаДоставки + "ЗначенияПолей"] = АдресЗначенияПолей;
		
		Объект["гф_" + ИмяРеквизитаАдресаДоставки] = ВыбранноеЗначение;
				
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
&ИзменениеИКонтроль("АдресДоставкиОчистка")
Процедура гф_АдресДоставкиОчистка(Элемент, СтандартнаяОбработка)
	
	ИменаРеквизитовАдресовДоставки = ДоставкаТоваровКлиентСервер.ИменаРеквизитовАдресовДоставки("АдресДоставки");
	
	ДоставкаТоваровКлиент.ОчиститьПредставлениеАдреса(
		Объект[ИменаРеквизитовАдресовДоставки.ИмяРеквизитаАдресаДоставки],
		Объект[ИменаРеквизитовАдресовДоставки.ИмяРеквизитаАдресаДоставкиЗначенияПолей],
		Объект[ИменаРеквизитовАдресовДоставки.ИмяРеквизитаАдресаДоставкиЗначение]);
	#Вставка
	Объект["гф_" + ИменаРеквизитовАдресовДоставки.ИмяРеквизитаАдресаДоставки] = Неопределено;
	#КонецВставки
	
КонецПроцедуры

&НаКлиенте
&ИзменениеИКонтроль("АдресДоставкиНачалоВыбора")
Процедура гф_АдресДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	#Вставка
	СтандартнаяОбработка = Ложь;
	// vvv Галфинд \ Sakovich 03.11.2022
	//ИмяРеквизитаАдресаДоставки = ДоставкаТоваровКлиентСервер.ПолучитьИмяРеквизитаАдресаДоставки(ТекущийЭлемент);
	ИмяРеквизитаАдресаДоставки = гф_ПолучитьИмяРеквизитаАдресаДоставки(ТекущийЭлемент);
	// ^^^ Галфинд \ Sakovich 03.11.2022 
	ПараметрыФормы = Новый Структура;
	
	Если ИмяРеквизитаАдресаДоставки = "АдресДоставкиПеревозчика" Тогда
		
		КонтрагентПеревозчик = ПартнерыИКонтрагентыВызовСервера.КонтрагентПартнера(Объект.ПеревозчикПартнер); 
		ЗначениеОтбора = Новый Структура("Владелец", КонтрагентПеревозчик);		
		ПараметрыФормы.Вставить("Отбор", ЗначениеОтбора);		
		
	Иначе
		ЗначениеОтбора = Новый Структура("Владелец", Объект.Контрагент);
		ПараметрыФормы.Вставить("Отбор", ЗначениеОтбора);
	    	
	КонецЕсли;	
		
	ОткрытьФорму("Справочник.гф_АдресаДоставки.Форма.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);
		
	#КонецВставки
	#Удаление
	ИменаРеквизитовАдресовДоставки = ДоставкаТоваровКлиентСервер.ИменаРеквизитовАдресовДоставки("АдресДоставки");
	
	ДоставкаТоваровКлиент.ОткрытьФормуВыбораАдресаИОбработатьРезультат(
		Элемент,
		Объект,
		ИменаРеквизитовАдресовДоставки,
		СтандартнаяОбработка);
	#КонецУдаления
	
КонецПроцедуры

&НаКлиенте
Процедура гф_ТоварыВКоробахКоличествоЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.гф_ТаблицаТоварыВКоробах.ТекущиеДанные;
	РассчитатьСтрокуНаСервере(ТекущаяСтрока.ПолучитьИдентификатор());	
	
КонецПроцедуры	

&НаКлиенте
Процедура гф_ТоварыВКоробахСкидкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.гф_ТаблицаТоварыВКоробах.ТекущиеДанные;
	РассчитатьСтрокуНаСервере(ТекущаяСтрока.ПолучитьИдентификатор());
	
КонецПроцедуры	

&НаКлиенте
Процедура гф_ТоварыВКоробахДобавленоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.гф_ТаблицаТоварыВКоробах.ТекущиеДанные;
	
	Если Не ТекущиеДанные.Добавлено Тогда
		ТекущиеДанные.ПричинаДобавления = ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаказовКлиентов.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура гф_ТоварыВКоробахОтмененоПриИзменении(Элемент) 
	
	ТекущиеДанные = Элементы.гф_ТаблицаТоварыВКоробах.ТекущиеДанные;
	ИдентификаторСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	Если Не ТекущиеДанные.Отменено Тогда
		ТекущиеДанные.ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаказовКлиентов.ПустаяСсылка");
		гф_СформироватьПредставлениеИДКороба(ИдентификаторСтроки);
	Иначе	
		ТекущиеДанные.гф_IDКоробаПредставление = "";
	КонецЕсли;                                           
	
КонецПроцедуры 

&НаКлиенте
Процедура гф_ТоварыДобавленоПриИзменении(Элемент) 
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если Не ТекущиеДанные.гф_ДобавленоПоПричине Тогда
		ТекущиеДанные.гф_ПричинаДобавления = ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаказовКлиентов.ПустаяСсылка");
	КонецЕсли;                                           
	
КонецПроцедуры

&НаКлиенте
Процедура гф_ТоварыВКоробахИДКоробаПредставлениеНачалоВыбора(Элемент)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.гф_ТаблицаТоварыВКоробах.ТекущиеДанные;
	
	Если ТекущиеДанные.Отменено Тогда
		Возврат;	
	КонецЕсли;	
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Проведен", Истина);
	ПараметрыОтбора.Вставить("гф_Комплектация", ТекущиеДанные.ВариантКомплектации);
	ПараметрыОтбора.Вставить("гф_Заказ", Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("РежимВыбора", Ложь);
		
	ОткрытьФорму("Документ.УпаковочныйЛист.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

//- Отказ от использования ТЧ в Заказе Клиента. Аналитик Нестеровская Злата
//&НаКлиенте
//Процедура гф_ТаблицаТоварыВКоробахПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
//	
//	//Если НоваяСтрока Тогда
//	//	Элементы.гф_ТаблицаТоварыВКоробах.ТекущиеДанные.ИдентификаторСтроки = 
//	//										Строка(Новый УникальныйИдентификатор);
//	//	
//	//КонецЕсли;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура гф_ТаблицаТоварыВКоробахПередУдалением(Элемент, Отказ)

//	//ИдентификаторСтроки = Элементы.гф_ТаблицаТоварыВКоробах.ТекущиеДанные.ИдентификаторСтроки;
//	//УдалитьУпаковочныеЛистыСтроки(ИдентификаторСтроки);
//	
//КонецПроцедуры	
//- Отказ от использования ТЧ в Заказе Клиента. Аналитик Нестеровская Злата

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура гф_СоздатьНовыеРеквизиты()
	
	гф_ДобавитьРеквизиты();
		                                                          
	НовоеПолеСтраница = Элементы.Вставить("гф_СтраницаТоварыВКоробах", Тип("ГруппаФормы"),
										Элементы.ГруппаСтраницы, Элементы.ГруппаТовары);
	НовоеПолеСтраница.Вид = ВидГруппыФормы.Страница;	
	НовоеПолеСтраница.Видимость = Истина;
	НовоеПолеСтраница.Заголовок = "Товары в коробах";
	НовоеПолеСтраница.ПутьКДаннымЗаголовка = "Объект.гф_ТоварыВКоробах.КоличествоСтрок";
	
	НовоеПолеТаблица = Элементы.Добавить("гф_ТаблицаТоварыВКоробах", Тип("ТаблицаФормы"), НовоеПолеСтраница);									
	НовоеПолеТаблица.ПутьКДанным = "Объект.гф_ТоварыВКоробах"; 
	
	//- Отказ от использования ТЧ в Заказе Клиента. Аналитик Нестеровская Злата
	//НовоеПолеТаблица.УстановитьДействие("ПриНачалеРедактирования", "гф_ТаблицаТоварыВКоробахПриНачалеРедактирования"); 
	//НовоеПолеТаблица.УстановитьДействие("ПередУдалением", "гф_ТаблицаТоварыВКоробахПередУдалением"); 
	//- Отказ от использования ТЧ в Заказе Клиента. Аналитик Нестеровская Злата
	// ++ Галфинд СадомцевСА 18.10.2022
	НовоеПолеТаблица.УстановитьДействие("ПриНачалеРедактирования", "гф_ТоварыВКоробахПриНачалеРедактирования");
	НовоеПолеТаблица.УстановитьДействие("ПриИзменении", "гф_ТоварыВКоробахПриИзменении");
	// ++ Галфинд ВолковЕВ 06.12.2022
	НовоеПолеТаблица.УстановитьДействие("ПриАктивизацииСтроки", "гф_ТоварыВКоробахПриАктивацииСтроки");
	// -- Галфинд ВолковЕВ 06.12.2022
	
	НовоеПоле = Элементы.Добавить("ТоварыВКоробахНомерСтроки", Тип("ПолеФормы"), НовоеПолеТаблица);
	НовоеПоле.Заголовок = "N";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.гф_ТоварыВКоробах.НомерСтроки";
	НовоеПоле.ТолькоПросмотр = Истина;
	// -- Галфинд СадомцевСА 18.10.2022
	
	НовоеПоле = Элементы.Добавить("ТоварыВКоробахВариантКомплектации", Тип("ПолеФормы"), НовоеПолеТаблица);
	НовоеПоле.Заголовок = "Вариант комплектации";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.гф_ТоварыВКоробах.ВариантКомплектации";
	НовоеПоле.УстановитьДействие("ПриИзменении", "гф_ТоварыВКоробахВариантКомплектацииПриИзменении");
	
	НовоеПоле = Элементы.Добавить("ТоварыВКоробахАртикул", Тип("ПолеФормы"), НовоеПолеТаблица);
	НовоеПоле.Заголовок = "Артикул";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.гф_ТоварыВКоробах.ВариантКомплектации.Владелец.Артикул";
	// ++ Галфинд СадомцевСА 18.10.2022
	НовоеПоле = Элементы.Добавить("ТоварыВКоробахВариантОбеспечения", Тип("ПолеФормы"), НовоеПолеТаблица);
	НовоеПоле.Заголовок = "Действие";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.гф_ТоварыВКоробах.ВариантОбеспечения";
	// -- Галфинд СадомцевСА 18.10.2022
	
	НовоеПоле = Элементы.Добавить("ТоварыВКоробахКоличество", Тип("ПолеФормы"), НовоеПолеТаблица);
	НовоеПоле.Заголовок = "Количество";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.гф_ТоварыВКоробах.Количество";
	НовоеПоле.УстановитьДействие("ПриИзменении", "гф_ТоварыВКоробахКоличествоЦенаПриИзменении");
	// ++ Галфинд СадомцевСА 18.10.2022
	НовоеПоле = Элементы.Добавить("ТоварыВКоробахВидЦены", Тип("ПолеФормы"), НовоеПолеТаблица);
	НовоеПоле.Заголовок = "Вид цены";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.гф_ТоварыВКоробах.ВидЦены";
	НовоеПоле.УстановитьДействие("ПриИзменении", "гф_ТоварыВКоробахВидЦеныПриИзменении");
	// -- Галфинд СадомцевСА 18.10.2022
	
	НовоеПоле = Элементы.Добавить("ТоварыВКоробахЦенаКороба", Тип("ПолеФормы"), НовоеПолеТаблица);
	НовоеПоле.Заголовок = "Цена короба";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.гф_ТоварыВКоробах.ЦенаКороба";
	НовоеПоле.УстановитьДействие("ПриИзменении", "гф_ТоварыВКоробахКоличествоЦенаПриИзменении");
	// ++ Галфинд СадомцевСА 18.10.2022
	НовоеПоле = Элементы.Добавить("ТоварыВКоробахСкидка", Тип("ПолеФормы"), НовоеПолеТаблица);
	НовоеПоле.Заголовок = "% Скидки";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.гф_ТоварыВКоробах.Скидка";
	НовоеПоле.УстановитьДействие("ПриИзменении", "гф_ТоварыВКоробахСкидкаПриИзменении");
	
	НовоеПоле = Элементы.Добавить("ТоварыВКоробахЦенаКоробаСоСкидкой", Тип("ПолеФормы"), НовоеПолеТаблица);
	НовоеПоле.Заголовок = "Цена короба со скидкой";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.гф_ТоварыВКоробах.ЦенаКоробаСоСкидкой";
	НовоеПоле.ТолькоПросмотр = Истина;
	// -- Галфинд СадомцевСА 18.10.2022
	
	НовоеПоле = Элементы.Добавить("ТоварыВКоробахСумма", Тип("ПолеФормы"), НовоеПолеТаблица);
	НовоеПоле.Заголовок = "Сумма";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.гф_ТоварыВКоробах.Сумма";
	// ++ Галфинд СадомцевСА 18.10.2022
	НовоеПоле.ТолькоПросмотр = Истина;
	
	НовоеПоле = Элементы.Добавить("ТоварыВКоробахСтавкаНДС", Тип("ПолеФормы"), НовоеПолеТаблица);
	НовоеПоле.Заголовок = "Ставка НДС";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.гф_ТоварыВКоробах.СтавкаНДС";
	НовоеПоле.ТолькоПросмотр = Истина;
	
	НовоеПоле = Элементы.Добавить("ТоварыВКоробахСуммаНДС", Тип("ПолеФормы"), НовоеПолеТаблица);
	НовоеПоле.Заголовок = "НДС";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.гф_ТоварыВКоробах.СуммаНДС";
	НовоеПоле.ТолькоПросмотр = Истина;
	
	НовоеПоле = Элементы.Добавить("ТоварыВКоробахСуммаСНДС", Тип("ПолеФормы"), НовоеПолеТаблица);
	НовоеПоле.Заголовок = "Сумма с НДС";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.гф_ТоварыВКоробах.СуммаСНДС";
	НовоеПоле.ТолькоПросмотр = Истина;
	// -- Галфинд СадомцевСА 18.10.2022
		
	НовоеПоле = Элементы.Добавить("ТоварыВКоробахИДКоробаПредставление", Тип("ПолеФормы"), НовоеПолеТаблица);	
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.гф_ТоварыВКоробах.гф_IDКоробаПредставление";
	НовоеПоле.РедактированиеТекста = Ложь;
	НовоеПоле.КнопкаВыбора = Истина;
	НовоеПоле.УстановитьДействие("НачалоВыбора", "гф_ТоварыВКоробахИДКоробаПредставлениеНачалоВыбора");
	
	НоваяГруппа =  Элементы.Добавить("ГруппаОтменено", Тип("ГруппаФормы"), Элементы.гф_ТаблицаТоварыВКоробах); 
	НоваяГруппа.Вид = ВидГруппыФормы.ГруппаКолонок; 
	НоваяГруппа.Группировка = ГруппировкаКолонок.ВЯчейке;
	НоваяГруппа.ОтображатьВШапке = Ложь;
	
	НоваяГруппа =  Элементы.Добавить("ГруппаДобавлено", Тип("ГруппаФормы"), Элементы.гф_ТаблицаТоварыВКоробах); 
	НоваяГруппа.Вид = ВидГруппыФормы.ГруппаКолонок; 
	НоваяГруппа.Группировка = ГруппировкаКолонок.ВЯчейке;
	НоваяГруппа.ОтображатьВШапке = Ложь;	
	
	НовоеПоле = Элементы.Добавить("ТоварыВКоробахДобавлено", Тип("ПолеФормы"), НоваяГруппа);
	НовоеПоле.ОтображатьВШапке = Ложь;
	НовоеПоле.Вид = ВидПоляФормы.ПолеФлажка;
	НовоеПоле.ПутьКДанным = "Объект.гф_ТоварыВКоробах.Добавлено";
	НовоеПоле.УстановитьДействие("ПриИзменении", "гф_ТоварыВКоробахДобавленоПриИзменении");
	
	НовоеПоле = Элементы.Добавить("ТоварыВКоробахПричинаДобавления", Тип("ПолеФормы"), НоваяГруппа);
	НовоеПоле.Заголовок = "Добавлено по причине";
	НовоеПоле.ОтображатьВШапке = Истина;
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.гф_ТоварыВКоробах.ПричинаДобавления";	
		
	НовоеПоле = Элементы.Добавить("ТоварыВКоробахОтменено", Тип("ПолеФормы"), Элементы.ГруппаОтменено);
	НовоеПоле.ОтображатьВШапке = Ложь;
	НовоеПоле.Вид = ВидПоляФормы.ПолеФлажка;
	НовоеПоле.ПутьКДанным = "Объект.гф_ТоварыВКоробах.Отменено";
	НовоеПоле.УстановитьДействие("ПриИзменении", "гф_ТоварыВКоробахОтмененоПриИзменении");
	
	НовоеПоле = Элементы.Добавить("ТоварыВКоробахПричинаОтмены", Тип("ПолеФормы"), Элементы.ГруппаОтменено);
	НовоеПоле.Заголовок = "Отменено по причине";
	НовоеПоле.ОтображатьВШапке = Истина;
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.гф_ТоварыВКоробах.ПричинаОтмены"; 	
	// ++ Галфинд СадомцевСА 18.10.2022
	НовоеПоле = Элементы.Добавить("ТоварыВКоробахСкидкаДляРТУ", Тип("ПолеФормы"), Элементы.гф_ТаблицаТоварыВКоробах);
	НовоеПоле.Заголовок = "Скидка для РТУ";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.гф_ТоварыВКоробах.СкидкаДляРТУ";
	НовоеПоле.ТолькоПросмотр = Истина;
	
	НовоеПоле = Элементы.Добавить("ТоварыВКоробахДатаДляРТУ", Тип("ПолеФормы"), Элементы.гф_ТаблицаТоварыВКоробах);
	НовоеПоле.Заголовок = "Дата для РТУ";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.гф_ТоварыВКоробах.ДатаДляРТУ";
	НовоеПоле.ТолькоПросмотр = Истина;
	
	НовоеПоле = Элементы.Добавить("ТоварыВКоробахКомментарийРТУ", Тип("ПолеФормы"), Элементы.гф_ТаблицаТоварыВКоробах);
	НовоеПоле.Заголовок = "Комментарий РТУ";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.гф_ТоварыВКоробах.КомментарийРТУ";
	НовоеПоле.ТолькоПросмотр = Истина;
	// -- Галфинд СадомцевСА 18.10.2022
	
	НоваяГруппа =  Элементы.Добавить("гф_ГруппаДобавлено", Тип("ГруппаФормы"), Элементы.Товары); 
	НоваяГруппа.Вид = ВидГруппыФормы.ГруппаКолонок;	
	НоваяГруппа.Группировка = ГруппировкаКолонок.ВЯчейке;
	НоваяГруппа.ОтображатьВШапке = Ложь;
	
	НовоеПоле = Элементы.Добавить("гф_ДобавленоПоПричине", Тип("ПолеФормы"), НоваяГруппа);
	НовоеПоле.ОтображатьВШапке = Ложь;
	НовоеПоле.Вид = ВидПоляФормы.ПолеФлажка;
	НовоеПоле.ПутьКДанным = "Объект.Товары.гф_ДобавленоПоПричине";
	НовоеПоле.УстановитьДействие("ПриИзменении", "гф_ТоварыДобавленоПриИзменении");
	
    НовоеПоле = Элементы.Добавить("гф_ПричинаДобавления", Тип("ПолеФормы"), НоваяГруппа);
	НовоеПоле.Заголовок = "Добавлено по причине";
	НовоеПоле.ОтображатьВШапке = Истина;
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.Товары.гф_ПричинаДобавления";
	// ++ Галфинд СадомцевСА 18.10.2022
	Элементы.ТоварыПроцентРучнойСкидки.Заголовок = "%Скидки";
	Элементы.ТоварыСуммаРучнойСкидки.Заголовок = "Сумма скидки";
	
	НовоеПоле = Элементы.Вставить("гф_ЦенаСоСкидкой", Тип("ПолеФормы"), Элементы.Товары, Элементы.ТоварыСумма);
	НовоеПоле.Заголовок = "Цена со скидкой";
	НовоеПоле.ОтображатьВШапке = Истина;
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.Товары.гф_ЦенаСоСкидкой";
	НовоеПоле.ТолькоПросмотр = Истина;
	
    НовоеПоле = Элементы.Добавить("гф_СкидкаДляРТУ", Тип("ПолеФормы"), Элементы.Товары);
	НовоеПоле.Заголовок = "Скидка для РТУ";
	НовоеПоле.ОтображатьВШапке = Истина;
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.Товары.гф_СкидкаДляРТУ";
	НовоеПоле.ТолькоПросмотр = Истина;
	
    НовоеПоле = Элементы.Добавить("гф_ДатаДляРТУ", Тип("ПолеФормы"), Элементы.Товары);
	НовоеПоле.Заголовок = "Дата для РТУ";
	НовоеПоле.ОтображатьВШапке = Истина;
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.Товары.гф_ДатаДляРТУ";
	НовоеПоле.ТолькоПросмотр = Истина;
	
    НовоеПоле = Элементы.Добавить("гф_КомментарийРТУ", Тип("ПолеФормы"), Элементы.Товары);
	НовоеПоле.Заголовок = "Комментарий РТУ";
	НовоеПоле.ОтображатьВШапке = Истина;
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.Товары.гф_КомментарийРТУ";
	НовоеПоле.ТолькоПросмотр = Истина;
	// -- Галфинд СадомцевСА 18.10.2022
		
	НовоеПодменю = Элементы.Добавить("гф_Заполнить", Тип("ГруппаФормы"), НовоеПолеТаблица.КоманднаяПанель); 
	НовоеПодменю.Заголовок = "Заполнить";
	НовоеПодменю.Вид = ВидГруппыФормы.Подменю;
	
	НоваяКнопка = Элементы.Добавить("гф_ЗаполнитьИзФайла", Тип("КнопкаФормы"), НовоеПодменю);
	НоваяКнопка.вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "ЗагрузитьИзВнешнегоФайла";
	
	Команда = Команды.Добавить("гф_ЗагрузитьИзXsl");
	Команда.Заголовок = "Загрузить из xsl";
	Команда.Действие = "гф_ЗагрузитьИзЕксель";
	
	Команда = Команды.Добавить("гф_ЗаполнитьТовары");
	Команда.Заголовок = "Заполнить товары на основании товаров в коробах";	
	Команда.Действие = "гф_ЗаполнитьТоварыНаОснованииТоваровВКоробах";
	
	Команда = Команды.Добавить("гф_КомандаПодборКомплектации");
	Команда.Заголовок = "Подобрать вариант комплектации";
	Команда.Картинка = БиблиотекаКартинок.ПодобратьТовары;
	Команда.Отображение = ОтображениеКнопки.КартинкаИТекст;
	Команда.Действие = "гф_КомандаПодборКомплектации";    
	
	Команда = Команды.Добавить("гф_КомандаСкопироватьСтроки");
	Команда.Заголовок = "Скопировать строки";
	Команда.Картинка = БиблиотекаКартинок.КопированиеСтрок;
	Команда.Отображение = ОтображениеКнопки.Картинка;
	Команда.Подсказка = "Скопировать строки";
	Команда.Действие = "гф_КомандаСкопироватьСтроки";
	
	Команда = Команды.Добавить("гф_КомандаВставитьСтроки");
	Команда.Заголовок = "Вставить строки";
	Команда.Картинка = БиблиотекаКартинок.ВставкаСтрок;
	Команда.Отображение = ОтображениеКнопки.Картинка;
	Команда.Подсказка = "Вставить строки";
	Команда.Действие = "гф_КомандаВставитьСтроки";
	
	Команда = Команды.Добавить("гф_КомандаРазбитьСтроку");
	Команда.Заголовок = "Разбить строку";
	Команда.Картинка = БиблиотекаКартинок.РазбитьСтроку;
	Команда.Отображение = ОтображениеКнопки.Картинка;
	Команда.Подсказка = "Разбить строку";
	Команда.Действие = "гф_КомандаРазбитьСтроку";
	
	// ++ Галфинд СадомцевСА 01.11.2022 Заремарил кнопку
	//НоваяКнопка = Элементы.Добавить("гф_ЗагрузитьИзXsl", Тип("КнопкаФормы"), НовоеПодменю);
	//НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	//НоваяКнопка.ИмяКоманды = "гф_ЗагрузитьИзXsl";
	
	НоваяКнопка = Элементы.Добавить("гф_ЗаполнитьТовары", Тип("КнопкаФормы"), Элементы.ТоварыГруппаЗаполнить);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "гф_ЗаполнитьТовары";
	
	НоваяКнопка = Элементы.Добавить("гф_Подбор", Тип("КнопкаФормы"), НовоеПодменю);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "гф_КомандаПодборКомплектации";
	
	НоваяКнопка = Элементы.Добавить("гф_СкопироватьСтроки", Тип("КнопкаФормы"), НовоеПолеТаблица.КоманднаяПанель);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "гф_КомандаСкопироватьСтроки";  
	
	НоваяКнопка = Элементы.Добавить("гф_ВставитьСтроки", Тип("КнопкаФормы"), НовоеПолеТаблица.КоманднаяПанель);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "гф_КомандаВставитьСтроки"; 
	
	НоваяКнопка = Элементы.Добавить("гф_РазбитьСтроку", Тип("КнопкаФормы"), НовоеПолеТаблица.КоманднаяПанель);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "гф_КомандаРазбитьСтроку";
	
	Элементы.АдресДоставкиСамовывоз.КнопкаВыпадающегоСписка = Ложь;
	Элементы.АдресДоставкиСамовывоз.СписокВыбора.Очистить();
	
	// ++ Галфинд СадомцевСА 18.10.2022
	НовоеПодменю = Элементы.Добавить("гф_ЗаполнитьДействие", Тип("ГруппаФормы"), НовоеПолеТаблица.КоманднаяПанель);
	НовоеПодменю.Заголовок = "Обеспечение";
	НовоеПодменю.Вид = ВидГруппыФормы.Подменю;
	
	Команда = Команды.Добавить("гф_ЗаполнитьДействиеОтгрузить");
	Команда.Заголовок = "Отгрузить";
	Команда.Действие = "гф_ЗаполнитьДействиеОтгрузить";
	
	НоваяКнопка = Элементы.Добавить("гф_ЗаполнитьДействиеОтгрузить", Тип("КнопкаФормы"), НовоеПодменю);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "гф_ЗаполнитьДействиеОтгрузить";
	
	Команда = Команды.Добавить("гф_ЗаполнитьДействиеКОбеспечению");
	Команда.Заголовок = "К обеспечению";
	Команда.Действие = "гф_ЗаполнитьДействиеКОбеспечению";
	
	НоваяКнопка = Элементы.Добавить("гф_ЗаполнитьДействиеКОбеспечению", Тип("КнопкаФормы"), НовоеПодменю);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "гф_ЗаполнитьДействиеКОбеспечению";
	// -- Галфинд СадомцевСА 18.10.2022
	
	// ++ Галфинд ВолковЕВ 06.12.2022
	гф_ДобавитьТабличнуюЧастьПричиныИзмененияТоваровВКоробах();
	// -- Галфинд ВолковЕВ 06.12.2022
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСтрокуНаСервере(ИдентификаторСтроки)
	
	ЗначениеСто = 100;
	
	Строка = Объект.гф_ТоварыВКоробах.НайтиПоИдентификатору(ИдентификаторСтроки);
	// ++ СадомцевСА 18.10.2022 Новый алгоритм расчета Суммы
	Строка.ЦенаКоробаСоСкидкой = Строка.ЦенаКороба * (1 - Строка.Скидка / ЗначениеСто);
	Строка.Сумма = Строка.Количество * Строка.ЦенаКоробаСоСкидкой;
	Ставка = 0;
	Если ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
		Ставка = Строка.СтавкаНДС.Ставка;
	КонецЕсли;
	Строка.СуммаНДС = Строка.Сумма * (Ставка / ЗначениеСто);
	Строка.СуммаСНДС = Строка.Сумма + Строка.СуммаНДС;
	// -- СадомцевСА 18.10.2022
	
КонецПроцедуры

&НаКлиенте
Процедура гф_ЗагрузитьИзЕксель(Команда)
	
	ОткрытьФорму("Документ.ЗаказКлиента.Форма.гф_ФормаЗагрузкиИзЕксель", , ЭтотОбъект);
		
КонецПроцедуры	

&НаКлиенте
Процедура гф_КомандаПодборКомплектации(Команда)
	
	ПараметрыФормы = Новый Структура;                                     
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);                   
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	
	ОповещениеПодбора = Новый ОписаниеОповещения("ПодборЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.ВариантыКомплектацииНоменклатуры.Форма.гф_ФормаПодбора", ПараметрыФормы, ЭтотОбъект, , , ,
		ОповещениеПодбора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура гф_КомандаСкопироватьСтроки(Команда)

	Если РаботаСТабличнымиЧастямиКлиент.ВыбранаСтрокаДляВыполненияКоманды(Элементы.гф_ТаблицаТоварыВКоробах) Тогда
		СкопироватьСтрокиТоваровВКоробахНаСервере();
		РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОКопированииСтрок(
													Элементы.гф_ТаблицаТоварыВКоробах.ВыделенныеСтроки.Количество());
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиТоваровВКоробахНаСервере()
	
	РаботаСТабличнымиЧастями.СкопироватьСтрокиВБуферОбмена(Объект.гф_ТоварыВКоробах, 
															Элементы.гф_ТаблицаТоварыВКоробах.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура гф_КомандаВставитьСтроки(Команда) 
	
	КоличествоТоваровДоВставки = Объект.гф_ТоварыВКоробах.Количество();
	
	гф_ПолучитьСтрокиИзБуфераОбмена();
		
	КоличествоВставленных = Объект.гф_ТоварыВКоробах.Количество() - КоличествоТоваровДоВставки;
	РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных); 
	
КонецПроцедуры	

&НаСервере
Процедура гф_ПолучитьСтрокиИзБуфераОбмена()

	Таблица = РаботаСТабличнымиЧастями.СтрокиИзБуфераОбмена();
	
	Для каждого СтрокаБуфера Из Таблица Цикл
		ТекущаяСтрока = Объект.гф_ТоварыВКоробах.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаБуфера); 
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура гф_КомандаРазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.гф_ТаблицаТоварыВКоробах;
	ДанныеТаблицы = Объект.гф_ТоварыВКоробах;
	
	ДополнительныеПараметры = Новый Структура;
	
	ПараметрыРазбиенияСтроки = РаботаСТабличнымиЧастямиКлиент.ПараметрыРазбиенияСтроки();
	ПараметрыРазбиенияСтроки.ИмяПоляКоличество = "Количество"; 
	
	РаботаСТабличнымиЧастямиКлиент.РазбитьСтроку(ДанныеТаблицы, ТаблицаФормы, 
					Новый ОписаниеОповещения("гф_РазбитьСтрокуЗавершение", ЭтотОбъект, ДополнительныеПараметры),
					ПараметрыРазбиенияСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура гф_РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	 ТекущаяСтрока = Элементы.гф_ТаблицаТоварыВКоробах.ТекущиеДанные;
	 РассчитатьСтрокуНаСервере(ТекущаяСтрока.ПолучитьИдентификатор());
	 
	 Если НоваяСтрока <> Неопределено Тогда
		РассчитатьСтрокуНаСервере(НоваяСтрока.ПолучитьИдентификатор());	 
	 КонецЕсли;	 
	 
КонецПроцедуры	

&НаКлиенте
Процедура ПодборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ЗаполнитьПодборНаСервере(Результат);		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодборНаСервере(Результат) 
	
	ТипЦеныЗакупочная = ПланыВидовХарактеристик.гф_ГлобальныеЗначения.НайтиПоРеквизиту("Ключ",
						"гф_ГлобальныеЗначенияОптоваяЗакупочнаяЦена").Значение;
	ЗначениеСто = 100;
	
	Для каждого Вариант Из Результат Цикл
		НоваяСтрока = Объект.гф_ТоварыВКоробах.Добавить();
		НоваяСтрока.ВариантКомплектации =  Вариант;
		НоваяСтрока.Количество = 1; 
		
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", Вариант.Владелец);		
		Отбор.Вставить("ВидЦены", ТипЦеныЗакупочная);
		
		// ++ Галфинд СадомцевСА 18.10.2022 Новый алгоритм расчета Суммы
		// НоваяСтрока.ЦенаКороба = Вариант.Товары.Итог("Количество") 
		//				* РегистрыСведений.ЦеныНоменклатуры25.ПолучитьПоследнее(ТекущаяДатаСеанса(), Отбор).Цена;
		// НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.ЦенаКороба;
		НоваяСтрока.ВидЦены = Объект.гф_ВидЦены;
		НоваяСтрока.ЦенаКороба = РассчитатьЦенуКороба(НоваяСтрока.ВариантКомплектации, НоваяСтрока.ВидЦены, Объект.Дата);
		НоваяСтрока.Скидка = РассчитатьСкидку(Объект.Организация, Объект.Контрагент, Объект.Договор, Объект.Дата,
			Объект.гф_ДатаОбновленияИзИ5);
		НоваяСтрока.ЦенаКоробаСоСкидкой = НоваяСтрока.ЦенаКороба * (1 - НоваяСтрока.Скидка / ЗначениеСто);
		НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.ЦенаКоробаСоСкидкой;
		НоваяСтрока.СтавкаНДС = ЗаполнитьСтавкуНДС(Вариант);
		НоваяСтрока.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.КОбеспечению");
		Ставка = 0;
		Если ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
			Ставка = НоваяСтрока.СтавкаНДС.Ставка;
		КонецЕсли;
		НоваяСтрока.СуммаНДС = НоваяСтрока.Сумма * (Ставка / ЗначениеСто);
		НоваяСтрока.СуммаСНДС = НоваяСтрока.Сумма + НоваяСтрока.СуммаНДС;
		// -- Галфинд СадомцевСА 18.10.2022
		
	КонецЦикла;  
	
	ЗаполнитьТоварыНаСервере();
	
КонецПроцедуры	

&НаКлиенте
Процедура гф_ЗаполнитьТоварыНаОснованииТоваровВКоробах(Команда) Экспорт 
	
	Если Объект.Товары.Количество() <> 0 Тогда 
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект);	
		ПоказатьВопрос(Оповещение, "Таблица ТОВАРЫ содержит информацию. Продолжить с удалением строк?",
        																	РежимДиалогаВопрос.ДаНет );
		
	Иначе
		 ЗаполнитьТоварыНаСервере();		 
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
 
    Если Результат = КодВозвратаДиалога.Да Тогда
         ЗаполнитьТоварыНаСервере();		
    КонецЕсли;	
 
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыНаСервере()
	
	ТипЦеныЗакупочная = ПланыВидовХарактеристик.гф_ГлобальныеЗначения.НайтиПоРеквизиту("Ключ",
														"гф_ГлобальныеЗначенияОптоваяЗакупочнаяЦена").Значение;
    Форма = ЭтотОбъект;
	
	МассивВариантов = Объект.гф_ТоварыВКоробах.Выгрузить(, "ВариантКомплектации"); 
	
	// ++ Галфинд СадомцевСА 05.12.2022
	// При перезаполнении тч Товары оставляем "отгруженные" и "добавленные/отмененные" строки тч Товары
	// Объект.Товары.Очистить();
	тчТовары = Объект.Товары.Выгрузить();
	МассивУдалитьСтроки = Новый Массив;
	Для Каждого СтрокаТовары Из тчТовары Цикл
		Если СтрокаТовары["ВариантОбеспечения"] = Перечисления.ВариантыОбеспечения.Отгрузить
			ИЛИ СтрокаТовары["гф_ДобавленоПоПричине"]
			ИЛИ СтрокаТовары["Отменено"] Тогда
			Продолжить;
		КонецЕсли;
		МассивУдалитьСтроки.Добавить(СтрокаТовары);
	КонецЦикла;
	Для Каждого УдалитьСтроку Из МассивУдалитьСтроки Цикл
		тчТовары.Удалить(УдалитьСтроку);
	КонецЦикла;
	Объект.Товары.Загрузить(тчТовары);
	// -- Галфинд СадомцевСА 05.12.2022
		
	ВременнаяТаблицаТЧТовары = Новый ТаблицаЗначений;
	ВременнаяТаблицаТЧТовары.Колонки.Добавить("Номенклатура");
	ВременнаяТаблицаТЧТовары.Колонки.Добавить("Характеристика");
	ВременнаяТаблицаТЧТовары.Колонки.Добавить("КоличествоУпаковок"); 
	ВременнаяТаблицаТЧТовары.Колонки.Добавить("гф_ДобавленоПоПричине");
	ВременнаяТаблицаТЧТовары.Колонки.Добавить("гф_ПричинаДобавления");
	ВременнаяТаблицаТЧТовары.Колонки.Добавить("Отменено");
	ВременнаяТаблицаТЧТовары.Колонки.Добавить("ПричинаОтмены");
	// ++ Галфинд СадомцевСА 18.10.2022
	ВременнаяТаблицаТЧТовары.Колонки.Добавить("ВариантОбеспечения");
	ВременнаяТаблицаТЧТовары.Колонки.Добавить("ВидЦены");
	ВременнаяТаблицаТЧТовары.Колонки.Добавить("ВариантКомплектации");
	ВременнаяТаблицаТЧТовары.Колонки.Добавить("ЦенаКороба");
	ВременнаяТаблицаТЧТовары.Колонки.Добавить("ПроцентРучнойСкидки");
	// -- Галфинд СадомцевСА 18.10.2022
	Для Каждого СтрокаТоварыВКоробах Из Объект.гф_ТоварыВКоробах Цикл
		
		// ++ Галфинд СадомцевСА 05.12.2022
		// При перезаполнении тч Товары не учитываем "отгруженные" и "отмененные" строки тч Товары в коробах
		Если СтрокаТоварыВКоробах["ВариантОбеспечения"] = Перечисления.ВариантыОбеспечения.Отгрузить
			ИЛИ СтрокаТоварыВКоробах["Отменено"] Тогда
			Продолжить;
		КонецЕсли;
		// -- Галфинд СадомцевСА 05.12.2022
		
		Для Каждого СтрокаСостава Из СтрокаТоварыВКоробах.ВариантКомплектации.Товары Цикл
			
			НоваяСтрока = ВременнаяТаблицаТЧТовары.Добавить();
			НоваяСтрока.Номенклатура = СтрокаСостава.Номенклатура;
			НоваяСтрока.Характеристика = СтрокаСостава.Характеристика;
			НоваяСтрока.КоличествоУпаковок = СтрокаТоварыВКоробах.Количество * СтрокаСостава.КоличествоУпаковок;			
			//НоваяСтрока.гф_ДобавленоПоПричине = СтрокаТоварыВКоробах.Добавлено;
			//НоваяСтрока.гф_ПричинаДобавления = СтрокаТоварыВКоробах.ПричинаДобавления;
			//НоваяСтрока.Отменено = СтрокаТоварыВКоробах.Отменено;
			//НоваяСтрока.ПричинаОтмены = СтрокаТоварыВКоробах.ПричинаОтмены;
			// ++ Галфинд СадомцевСА 18.10.2022
			//НоваяСтрока.ВариантОбеспечения = СтрокаТоварыВКоробах.ВариантОбеспечения;
			НоваяСтрока.ВидЦены = СтрокаТоварыВКоробах.ВидЦены;
			НоваяСтрока.ВариантКомплектации = СтрокаТоварыВКоробах.ВариантКомплектации;
			НоваяСтрока.ЦенаКороба = СтрокаТоварыВКоробах.ЦенаКороба;
			НоваяСтрока.ПроцентРучнойСкидки = СтрокаТоварыВКоробах.Скидка;
			// -- Галфинд СадомцевСА 18.10.2022
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	// ВременнаяТаблицаТЧТовары.Свернуть(
	//			"Номенклатура,Характеристика,гф_ДобавленоПоПричине,гф_ПричинаДобавления,Отменено,ПричинаОтмены",
	//			"КоличествоУпаковок");
	ВременнаяТаблицаТЧТовары.Свернуть(
		"Номенклатура,Характеристика,гф_ДобавленоПоПричине,гф_ПричинаДобавления,Отменено,ПричинаОтмены,
		|ВариантОбеспечения,ВидЦены,ЦенаКороба,ПроцентРучнойСкидки", "КоличествоУпаковок");
	
	ЗначениеСто = 100;
	
	Для Каждого Строка Из ВременнаяТаблицаТЧТовары Цикл
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", Строка.Номенклатура);			
		// ++ Галфинд СадомцевСА 18.10.2022 используем Вид цены из ТЧ Товары в коробах
		//Отбор.Вставить("ВидЦены", ТипЦеныЗакупочная);
		Отбор.Вставить("ВидЦены", Строка.ВидЦены);
		НоваяСтрока.Количество = Строка.КоличествоУпаковок;
		Если ЗначениеЗаполнено(Строка.ВидЦены) Тогда
			НоваяСтрока.Цена = РегистрыСведений.ЦеныНоменклатуры25.ПолучитьПоследнее(Объект.Дата, Отбор).Цена;
		Иначе
			НоваяСтрока.Цена = РассчитатьЦенуПары(Строка.ВариантКомплектации, Строка.ЦенаКороба);
		КонецЕсли;
		НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению;
		НоваяСтрока.Обособленно = Истина;		
		НоваяСтрока.гф_ЦенаСоСкидкой = НоваяСтрока.Цена * (1 - НоваяСтрока.ПроцентРучнойСкидки / ЗначениеСто);
	КонецЦикла;	  
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;	
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
												Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, ПараметрыЗаполненияРеквизитов);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(
																											Объект,
																											Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	//СтруктураДействий.Вставить("ПересчитатьСумму"); 
    // ++ Галфинд СадомцевСА 01.11.2022 Заполняем Товары на основании Коробов
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
//	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
//	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами");
//	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	// --
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
		
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(Объект.Склад);
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(Объект.Склад, СкладГруппа, Объект.Товары, Ложь);
	ПриИзмененииСкладаВТабличнойЧастиСервер();
		
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, 
															ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	ОбновитьДубликатыЗависимыхРеквизитов();
		
	РассчитатьИтоговыеПоказателиЗаказа(Форма);
		
	Форма.Модифицированность = Истина;	
	
КонецПроцедуры	

// ++ Галфинд СадомцевСА 30.11.2022
// Реализовал алгоритм расчета Цены пары по Цене короба при пустом Виде цены в шапке документа

&НаСервереБезКонтекста
Функция РассчитатьЦенуПары(ВариантКомплектации, ЦенаКороба)
	Если Не ЗначениеЗаполнено(ВариантКомплектации) Тогда
		Возврат 0;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ВариантКомплектации.КоличествоУпаковок) Тогда
		Возврат 0;
	КонецЕсли;
	ЦенаПары = Окр(ЦенаКороба / ВариантКомплектации.КоличествоУпаковок, 2);
	Возврат ЦенаПары;
КонецФункции
// -- Галфинд СадомцевСА 30.11.2022

&НаСервере
Функция ПолучитьЗначениеРеквизита(Ссылка, ИмяРеквизита)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);

КонецФункции	

&НаСервере
Процедура ВидимостьСтраницыТоварыВКоробах() 
		
	ТоварыВКоробах = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("ИдентификаторДляФормул",
																						"гф_СкладыТоварыВКоробах");
	
	ТоварыВКоробахЗначение = УправлениеСвойствами.ЗначениеСвойства(Объект.Склад, ТоварыВКоробах);	
	
	Если ЗначениеЗаполнено(ТоварыВКоробахЗначение) И ТоварыВКоробахЗначение = Истина Тогда
		 Элементы.гф_СтраницаТоварыВКоробах.Видимость = Истина; 
	Иначе
		 Элементы.гф_СтраницаТоварыВКоробах.Видимость = Ложь;
		 Объект.гф_ТоварыВКоробах.Очистить();
	КонецЕсли;
	
КонецПроцедуры  

&НаКлиенте
Процедура гф_СкладПриИзмененииПосле(Элемент)
	ВидимостьСтраницыТоварыВКоробах();
КонецПроцедуры  

&НаСервере
Процедура гф_УстановитьУсловноеОформление() 
	
	ЗаказыСервер.УстановитьОформлениеОтмененнойСтроки(УсловноеОформление,
									Элементы.гф_ТаблицаТоварыВКоробах,
									Элементы.ТоварыВКоробахОтменено.Имя,
									Элементы.ТоварыВКоробахПричинаОтмены.Имя); 
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПутьКТЧ = Элементы.гф_ТаблицаТоварыВКоробах.ПутьКДанным;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыВКоробахПричинаДобавления.Имя);
		
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТЧ + ".Добавлено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
			
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПутьКТЧ = Элементы.гф_ТаблицаТоварыВКоробах.ПутьКДанным;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыВКоробахПричинаДобавления.Имя);
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;	
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТЧ + ".Добавлено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТЧ + ".ПричинаДобавления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
				
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
		
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыВКоробахПричинаДобавления.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТЧ + ".Добавлено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПутьКТЧ = Элементы.Товары.ПутьКДанным;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.гф_ПричинаДобавления.Имя);
		
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТЧ + ".гф_ДобавленоПоПричине");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
			
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПутьКТЧ = Элементы.Товары.ПутьКДанным;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.гф_ПричинаДобавления.Имя);             
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных")); 	
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;	                   
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТЧ + ".гф_ДобавленоПоПричине");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТЧ + ".гф_ПричинаДобавления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
		
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.гф_ПричинаДобавления.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТЧ + ".гф_ДобавленоПоПричине");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПутьКТЧ = Элементы.гф_ТаблицаТоварыВКоробах.ПутьКДанным;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыВКоробахПричинаОтмены.Имя);             
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных")); 	
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;	                   
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТЧ + ".Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТЧ + ".ПричинаОтмены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено; 
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

КонецПроцедуры

&НаСервере
Процедура гф_СформироватьПредставлениеИДКороба(ИдентификаторСтроки = Неопределено)

	Если ИдентификаторСтроки <> Неопределено Тогда
		
		ТекущиеДанныеСтроки = Объект.гф_ТоварыВКоробах.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если ТекущиеДанныеСтроки.Отменено Тогда
			Возврат;	
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УпаковочныйЛист.Ссылка КАК Документ
		|ИЗ
		|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
		|ГДЕ
		|	УпаковочныйЛист.Проведен = ИСТИНА
		|	И УпаковочныйЛист.гф_Заказ = &Заказ
		|	И УпаковочныйЛист.гф_Комплектация = &Комплектация";
		
		Запрос.УстановитьПараметр("Заказ", Объект.Ссылка);
		Запрос.УстановитьПараметр("Комплектация", ТекущиеДанныеСтроки.ВариантКомплектации);
		
		ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
				
		Представление = "";
		Индекс = 0;
				
		Для каждого НайденаяСтрока Из ТаблицаДокументов Цикл
			
			Если Индекс = 0 Тогда
				 Представление =  Строка(НайденаяСтрока.Документ);
				 Индекс = Индекс + 1;
				 Продолжить;
			КонецЕсли;
			 
			Представление = Представление + " , " + Строка(НайденаяСтрока.Документ);
						
		КонецЦикла;	
				
		ТекущиеДанныеСтроки.гф_IDКоробаПредставление = Представление;
		
	Иначе
		Для каждого Строка Из Объект.гф_ТоварыВКоробах Цикл
			
			ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
			гф_СформироватьПредставлениеИДКороба(ИдентификаторСтроки);
			
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура гф_ДобавитьРеквизиты()

	КвалификаторыСтроки	= Новый КвалификаторыСтроки(256);
	КвалификаторыДаты 	= Новый КвалификаторыДаты(ЧастиДаты.Дата);	
	
	ОписаниеТиповСтатусДокумента		= Новый ОписаниеТипов("ПеречислениеСсылка.гф_СтатусРаботыСЗаказомИ5");
	ОписаниеТиповВ2ВСтатуса				= Новый ОписаниеТипов("ПеречислениеСсылка.гф_В2ВСтатус");
	ОписаниеТиповСтрока 				= Новый ОписаниеТипов("Строка", , КвалификаторыСтроки); 
	ОписаниеТиповДата 	 				= Новый ОписаниеТипов("Дата", , , , , КвалификаторыДаты); 
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	РеквизитФормы_гф_СтатусДокумента		= Новый РеквизитФормы("гф_СтатусДокумента",
										ОписаниеТиповСтатусДокумента, , "Статус документа", Истина);
										
	РеквизитФормы_гф_В2ВСтатус		= Новый РеквизитФормы("гф_В2ВСтатус",
										ОписаниеТиповВ2ВСтатуса, , "В2В Статус", Истина);									

	РеквизитФормы_гф_ИмяЗаказа				= Новый РеквизитФормы("гф_ИмяЗаказа",
										ОписаниеТиповСтрока, , "Имя заказа", Истина);

	РеквизитФормы_гф_ДатаОбновленияИзИ5		= Новый РеквизитФормы("гф_ДатаОбновленияИзИ5",
										ОписаниеТиповДата, , "Дата обновления из i5", Истина);									
										
	ТоварыВКоробах_ИДКоробаПредставление    = Новый РеквизитФормы("гф_IDКоробаПредставление",
										ОписаниеТиповСтрока, "Объект.гф_ТоварыВКоробах", "ID короба", Истина);
										
	ДобавляемыеРеквизиты.Добавить(РеквизитФормы_гф_СтатусДокумента); 
	ДобавляемыеРеквизиты.Добавить(РеквизитФормы_гф_ИмяЗаказа);
	ДобавляемыеРеквизиты.Добавить(РеквизитФормы_гф_ДатаОбновленияИзИ5);
	ДобавляемыеРеквизиты.Добавить(ТоварыВКоробах_ИДКоробаПредставление);
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ТипПолеФормы = Тип("ПолеФормы");
	
	НовоеПоле = Элементы.Добавить("гф_СтатусДокумента", ТипПолеФормы,
										Элементы.ГруппаПараметрыПраво);
	
	НовоеПоле.Вид			= ВидПоляФормы.ПолеВвода;	
	НовоеПоле.Видимость		= Истина;
	НовоеПоле.ПутьКДанным	= "Объект.гф_СтатусРаботыСЗаказомИ5"; 
	
	НовоеПоле = Элементы.Добавить("гф_В2ВСтатус", ТипПолеФормы,
										Элементы.ГруппаПараметрыПраво);
	
	НовоеПоле.Вид			= ВидПоляФормы.ПолеВвода;	
	НовоеПоле.Видимость		= Истина;
	НовоеПоле.ПутьКДанным	= "Объект.гф_В2ВСтатус";
	
	НовоеПоле = Элементы.Добавить("гф_ИмяЗаказа", ТипПолеФормы,
										Элементы.ГруппаШапка);
	
	НовоеПоле.Вид			= ВидПоляФормы.ПолеВвода;	
	НовоеПоле.Видимость		= Истина;
	НовоеПоле.ПутьКДанным	= "Объект.гф_ИмяЗаказа"; 
	
	НовоеПоле = Элементы.Добавить("гф_ДатаОбновленияИзИ5", ТипПолеФормы,
										Элементы.ГруппаПараметрыПраво);
	
	НовоеПоле.Вид			= ВидПоляФормы.ПолеВвода;	
	НовоеПоле.Видимость		= Истина;
	НовоеПоле.ПутьКДанным	= "Объект.гф_ДатаОбновленияИзИ5";
	
	// ++ Галфинд СадомцевСА 18.10.2022
	НовоеПоле = Элементы.Добавить("гф_ВидЦены", ТипПолеФормы, Элементы.ГруппаСтатусПриоритет);
	НовоеПоле.Вид			= ВидПоляФормы.ПолеВвода;	
	НовоеПоле.Видимость		= Истина;
	НовоеПоле.ПутьКДанным	= "Объект.гф_ВидЦены";
	НовоеПоле.УстановитьДействие("ПриИзменении", "гф_ВидЦеныПриИзменении");
	
	НовоеПоле = Элементы.Добавить("гф_СезонныйЗаказ", ТипПолеФормы, Элементы.ГруппаПараметрыПраво);
	НовоеПоле.Вид			= ВидПоляФормы.ПолеФлажка;	
	НовоеПоле.Видимость		= Истина;
	НовоеПоле.ПутьКДанным	= "Объект.гф_СезонныйЗаказ";
	// -- Галфинд СадомцевСА 18.10.2022
	
КонецПроцедуры	

// ++ Галфинд СадомцевСА 18.10.2022
// Обработчик события
//
// Параметры:
//   Элемент - таблица формы
//   НоваяСтрока - булево
//   Копирование - булево
//
&НаКлиенте
Процедура гф_ТоварыВКоробахПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если	НоваяСтрока
		И Элемент.ТекущиеДанные <> Неопределено Тогда
		Элемент.ТекущиеДанные.ВидЦены = Объект.гф_ВидЦены;
		Элемент.ТекущиеДанные.Скидка = РассчитатьСкидку(Объект.Организация, Объект.Контрагент, Объект.Договор, Объект.Дата,
			Объект.гф_ДатаОбновленияИзИ5);
		Элемент.ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.КОбеспечению");
		Элемент.ТекущиеДанные.Количество = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура гф_ТоварыВКоробахВариантКомплектацииПриИзменении(Элемент)
	ЗначениеСто = 100;
	ТД = Элементы.гф_ТаблицаТоварыВКоробах.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТД.ЦенаКороба = РассчитатьЦенуКороба(ТД.ВариантКомплектации, ТД.ВидЦены, Объект.Дата);
	ТД.ЦенаКоробаСоСкидкой = ТД.ЦенаКороба * (1 - ТД.Скидка / ЗначениеСто);
	ТД.Сумма = ТД.Количество * ТД.ЦенаКоробаСоСкидкой;
	ТД.СтавкаНДС = ЗаполнитьСтавкуНДС(ТД.ВариантКомплектации);
	ПересчитатьСуммуСНДС(ТД.ПолучитьИдентификатор());
КонецПроцедуры

&НаКлиенте
Процедура гф_ТоварыВКоробахВидЦеныПриИзменении(Элемент)
	ЗначениеСто = 100;
	ТД = Элементы.гф_ТаблицаТоварыВКоробах.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТД.ЦенаКороба = РассчитатьЦенуКороба(ТД.ВариантКомплектации, ТД.ВидЦены, Объект.Дата);
	ТД.ЦенаКоробаСоСкидкой = ТД.ЦенаКороба * (1 - ТД.Скидка / ЗначениеСто);
	ТД.Сумма = ТД.Количество * ТД.ЦенаКоробаСоСкидкой;
	ПересчитатьСуммуСНДС(ТД.ПолучитьИдентификатор());
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммуСНДС(ИдентификаторСтроки)
	ЗначениеСто = 100;
	ТД = Объект.гф_ТоварыВКоробах.НайтиПоИдентификатору(ИдентификаторСтроки);
	Ставка = 0;
	Если ЗначениеЗаполнено(ТД.СтавкаНДС) Тогда
		Ставка = ТД.СтавкаНДС.Ставка;
	КонецЕсли;
	ТД.СуммаНДС = ТД.Сумма * (Ставка / ЗначениеСто);
	ТД.СуммаСНДС = ТД.Сумма + ТД.СуммаНДС;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьСтавкуНДС(ВариантКомплектации)
	СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
	Если ЗначениеЗаполнено(ВариантКомплектации) Тогда
		Если ЗначениеЗаполнено(ВариантКомплектации.Владелец) Тогда
			СтавкаНДС = ВариантКомплектации.Владелец.СтавкаНДС;
		КонецЕсли;
	КонецЕсли;
	Возврат СтавкаНДС;
КонецФункции

&НаСервереБезКонтекста
Функция РассчитатьЦенуКороба(ВариантКомплектации, ВидЦены, Период)
	Если Не ЗначениеЗаполнено(ВариантКомплектации) ИЛИ Не ЗначениеЗаполнено(ВидЦены) Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура КАК Номенклатура,
		|	СУММА(ВариантыКомплектацииНоменклатурыТовары.Количество) КАК Количество
		|ИЗ
		|	Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ВариантыКомплектацииНоменклатурыТовары
		|ГДЕ
		|	ВариантыКомплектацииНоменклатурыТовары.Ссылка = &ВариантКомплектации
		|
		|СГРУППИРОВАТЬ ПО
		|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура";
	Запрос.УстановитьПараметр("ВариантКомплектации", ВариантКомплектации);
	Результат = Запрос.Выполнить();
	ТЗВариантКомплектации = Результат.Выгрузить();
	Запрос.Текст = "ВЫБРАТЬ
		|	ЦеныНоменклатуры25СрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатуры25СрезПоследних.Цена КАК Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(&Период,
		|			Номенклатура В (&СписокНоменклатуры)
		|				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатуры25СрезПоследних";
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	Запрос.УстановитьПараметр("СписокНоменклатуры", ТЗВариантКомплектации.ВыгрузитьКолонку("Номенклатура"));
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ЦенаКороба = 0;
	Для Каждого СтрокаНоменклатуры Из ТЗВариантКомплектации Цикл
		СтруктураПоиска = Новый Структура("Номенклатура", СтрокаНоменклатуры.Номенклатура);
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(СтруктураПоиска) Тогда
			ЦенаКороба = ЦенаКороба + Выборка.Цена * СтрокаНоменклатуры.Количество;
		КонецЕсли;
	КонецЦикла;
	Возврат ЦенаКороба;
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьЗаполнениеПараметров(Организация, Контрагент, Договор, ДатаОбновленияИзИ5)
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Договор) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДатаОбновленияИзИ5) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции
	
&НаСервереБезКонтекста
Функция РассчитатьСкидку(Организация, Контрагент, Договор, Период, ДатаОбновленияИзИ5)
	Если Не ПроверитьЗаполнениеПараметров(Организация, Контрагент, Договор, ДатаОбновленияИзИ5) Тогда
		// проверка НЕ пройдена: есть пустые параметры
		Возврат 0;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	гф_ИсторияИзмененияСкидокСрезПоследних.Организация КАК Организация,
	|	гф_ИсторияИзмененияСкидокСрезПоследних.Сезон КАК Сезон,
	|	гф_ИсторияИзмененияСкидокСрезПоследних.Контрагент КАК Контрагент,
	|	гф_ИсторияИзмененияСкидокСрезПоследних.Договор КАК Договор,
	|	гф_ИсторияИзмененияСкидокСрезПоследних.ВидСкидки КАК ВидСкидки,
	|	гф_ИсторияИзмененияСкидокСрезПоследних.Скидка КАК Скидка
	|ИЗ
	|	РегистрСведений.гф_ИсторияИзмененияСкидок.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И Контрагент = &Контрагент
	|				И Договор = &Договор
	|				И ВидСкидки В (&ВидыСкидок)) КАК гф_ИсторияИзмененияСкидокСрезПоследних";
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Договор", Договор);
	МассивВидыСкидок = _омОбщегоНазначенияКлиентСервер.ПолучитьГлобальноеЗначениеМассив(
		"гф_ГлобальныеЗначенияСкидкиДляЗаказаКлиента");
	Запрос.УстановитьПараметр("ВидыСкидок", МассивВидыСкидок);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	Скидка = Результат.Выгрузить().Итог("Скидка");
	Возврат Скидка;
КонецФункции

&НаКлиенте
Процедура гф_ЗаполнитьДействиеОтгрузить(Команда)
	гф_ЗаполнитьДействие(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить"));
КонецПроцедуры

&НаКлиенте
Процедура гф_ЗаполнитьДействиеКОбеспечению(Команда)
	гф_ЗаполнитьДействие(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.КОбеспечению"));
КонецПроцедуры

&НаКлиенте
Процедура гф_ЗаполнитьДействие(ВариантОбеспечения)
	Для Каждого Идентификатор Из Элементы.гф_ТаблицаТоварыВКоробах.ВыделенныеСтроки Цикл
		СтрокаТЧ = Объект.гф_ТоварыВКоробах.НайтиПоИдентификатору(Идентификатор);
		Если СтрокаТЧ <> Неопределено Тогда
			СтрокаТЧ.ВариантОбеспечения = ВариантОбеспечения;
		КонецЕсли;
	КонецЦикла;
	Модифицированность = Истина;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоТоварыВКоробах(Склад)
	Если Не ЗначениеЗаполнено(Склад) Тогда
		Возврат Ложь;
	КонецЕсли;
	ТоварыВКоробах = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("ИдентификаторДляФормул",
		"гф_СкладыТоварыВКоробах");
	
	ТоварыВКоробахЗначение = УправлениеСвойствами.ЗначениеСвойства(Склад, ТоварыВКоробах);	
	
	Если ЗначениеЗаполнено(ТоварыВКоробахЗначение) И ТоварыВКоробахЗначение = Истина Тогда
		 Возврат Истина;
	Иначе
		 Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура гф_ТоварыПересчитатьЦенуСоСкидкой(ТД = Неопределено)
	ЗначениеСто = 100;
	Если ТД = Неопределено Тогда
		ТД = Элементы.Товары.ТекущиеДанные;
	КонецЕсли;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// Цена со скидкой
	ТД.гф_ЦенаСоСкидкой = ТД.Цена * (1 - ТД.ПроцентРучнойСкидки / ЗначениеСто);
КонецПроцедуры

&НаКлиенте
Процедура гф_ТоварыПересчитатьСуммуСНДС(ТД = Неопределено)
	ЗначениеСто = 100;
	Если ТД = Неопределено Тогда
		ТД = Элементы.Товары.ТекущиеДанные;
	КонецЕсли;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Ставка = 0;
	Если ЗначениеЗаполнено(ТД.СтавкаНДС) Тогда
		Ставка = ПолучитьЗначениеРеквизита(ТД.СтавкаНДС, "Ставка");
	КонецЕсли;
	ТД.Сумма = ТД.КоличествоУпаковок * ТД.гф_ЦенаСоСкидкой;
	// пересчет НДС с учетом скидки
	ТД.СуммаНДС = ТД.Сумма * (Ставка / ЗначениеСто);
	ТД.СуммаНДСБезВозвратнойТары = ТД.Сумма * (Ставка / ЗначениеСто);
	// пересчет Сумма с НДС с учетом скидки
	ТД.СуммаСНДС = ТД.Сумма + ТД.СуммаНДС;
	ТД.СуммаСНДСБезВозвратнойТары = ТД.Сумма + ТД.СуммаНДС;
КонецПроцедуры

&НаКлиенте
Процедура гф_ТоварыВКоробахПриИзменении(Элемент)
	ЗаполнитьТоварыНаСервере();
КонецПроцедуры

&НаСервере
&ИзменениеИКонтроль("ОбработкаВыбораПодборНаСервере")
Процедура гф_ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)

	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();

	НачалоДня = НачалоДня(ТекущаяДатаСеанса());
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл

		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара,
		"НоменклатураНабора,ХарактеристикаНабора,Номенклатура,Характеристика,Упаковка,Склад,ДатаОтгрузки,ВидЦены,
		|Цена,КоличествоУпаковок,СрокПоставки,ПроцентРучнойСкидки,ВариантОбеспечения,Обособленно,Серия");

		ТекущаяСтрока.ИндексНабора = ?(ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора), 1, 0);

		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Объект, Истина));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Ложь));
		ДобавитьДействияОбеспеченияНаСервере(СтруктураДействий, "СкладОбязателен,ДатаОтгрузкиОбязательна");
		СтруктураДействий.Вставить("ЗаполнитьПодразделениеВСтрокеТЧ", Новый Структура("Подразделение", Объект.Подразделение));
		Если Не ЗначениеЗаполнено(СтрокаТовара.ВариантОбеспечения) Тогда
			ДобавитьДействияОбеспеченияНаСервере(СтруктураДействий, "ВариантОбеспечения");
		КонецЕсли;

		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
		#Вставка
		// ++ Галфинд СадомцевСА 18.10.2022 Заполняем Цену
		Если ЗначениеЗаполнено(Объект.гф_ВидЦены) Тогда
			ЗаполнитьЦенуПродажи = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект);
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ЗаполнитьЦенуПродажи);
			СтруктураДействий["ЗаполнитьЦенуПродажи"].Вставить("ВидЦены", Объект.гф_ВидЦены);
		КонецЕсли;
		// -- Галфинд СадомцевСА 18.10.2022
		#КонецВставки

		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

		ТекущаяСтрока.ДатаОтгрузки = ОбеспечениеВДокументахСервер.ДатаОтгрузкиОбработкаВыбораПодбор(
		СтрокаТовара.ДатаОтгрузки,
		ТекущаяСтрока.ВариантОбеспечения,
		НачалоДня);
		#Вставка
		// ++ Галфинд СадомцевСА 18.10.2022 Заполняем Вид цены и Скидку
		ЗначениеСто = 100;
		ТекущаяСтрока.ВидЦены = Объект.гф_ВидЦены; // ???
		// Цена со скидкой
		ТекущаяСтрока.гф_ЦенаСоСкидкой = ТекущаяСтрока.Цена * (1 - ТекущаяСтрока.ПроцентРучнойСкидки / ЗначениеСто);
		// -- Галфинд СадомцевСА 18.10.2022
		#КонецВставки

	КонецЦикла;
	ОбеспечениеВДокументахСервер.АктуализироватьДатуОтгрузкиОднойДатой(
	Объект.НеОтгружатьЧастями,
	Объект.ДатаОтгрузки,
	Объект.Товары,
	"ДатаОтгрузки");
	ОбновитьКолонкуДоступноСервер();

	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);

	СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(Объект.Товары, ТаблицаСкладов, СкладГруппа);
	ВсегоСкладов = ТаблицаСкладов.Количество();
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);

	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);

КонецПроцедуры

&НаКлиенте
Процедура гф_ТоварыПриОкончанииРедактированияПосле(Элемент, НоваяСтрока, ОтменаРедактирования)
	гф_ТоварыПересчитатьЦенуСоСкидкой();
	гф_ТоварыПересчитатьСуммуСНДС();
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура гф_ТоварыПриНачалеРедактированияПосле(Элемент, НоваяСтрока, Копирование)
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	Если НоваяСтрока
		И Элемент.ТекущиеДанные <> Неопределено Тогда
		Элемент.ТекущиеДанные.ВидЦены = Объект.гф_ВидЦены;
		Элемент.ТекущиеДанные.ПроцентРучнойСкидки = РассчитатьСкидку(Объект.Организация, Объект.Контрагент, Объект.Договор,
			Объект.Дата, Объект.гф_ДатаОбновленияИзИ5);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура гф_ТоварыПроцентРучнойСкидкиПриИзмененииПосле(Элемент)
	гф_ТоварыПересчитатьЦенуСоСкидкой();
КонецПроцедуры

&НаКлиенте
Процедура гф_ВидЦеныПриИзменении(Элемент)

	гф_ТоварыВКоробах = ЭтоТоварыВКоробах(Объект.Склад);
	Если гф_ТоварыВКоробах Тогда
		гф_ЗаполнитьВидЦеныТоварыВКоробах();
	Иначе
		гф_ЗаполнитьВидЦеныТовары();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура гф_ЗаполнитьВидЦеныТоварыВКоробах()
	
	ЗначениеСто = 100;
	Для Каждого ТД Из Объект.гф_ТоварыВКоробах Цикл
		ТД.ВидЦены = Объект.гф_ВидЦены;
		Если ЗначениеЗаполнено(ТД.ВидЦены) Тогда
			ТД.ЦенаКороба = РассчитатьЦенуКороба(ТД.ВариантКомплектации, ТД.ВидЦены, Объект.Дата);
		КонецЕсли;
		ТД.ЦенаКоробаСоСкидкой = ТД.ЦенаКороба * (1 - ТД.Скидка / ЗначениеСто);
		ТД.Сумма = ТД.Количество * ТД.ЦенаКоробаСоСкидкой;
		ПересчитатьСуммуСНДС(ТД.ПолучитьИдентификатор());
	КонецЦикла;
	
	ЗаполнитьТоварыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура гф_ЗаполнитьВидЦеныТовары()
	
	Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
		ТекущаяСтрока.ВидЦены = Объект.гф_ВидЦены;
		
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
		
		СтруктураДействий = Новый Структура;
		ЗаполнитьЦенуПродажи = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект);
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ЗаполнитьЦенуПродажи);
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	//	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	//	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами");
	//	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
		
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура гф_ЗаполнитьСкидку(Команда)
	
	гф_ТоварыВКоробах = ЭтоТоварыВКоробах(Объект.Склад);
	Если гф_ТоварыВКоробах Тогда
		гф_ЗаполнитьСкидкуТоварыВКоробах();
	Иначе
		гф_ЗаполнитьСкидкуТовары();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура гф_ЗаполнитьСкидкуТоварыВКоробах()
	
	ЗначениеСто = 100;
	Для Каждого ТД Из Объект.гф_ТоварыВКоробах Цикл
		ТД.Скидка = РассчитатьСкидку(Объект.Организация, Объект.Контрагент, Объект.Договор, Объект.Дата,
			Объект.гф_ДатаОбновленияИзИ5);
		ТД.ЦенаКоробаСоСкидкой = ТД.ЦенаКороба * (1 - ТД.Скидка / ЗначениеСто);
		ТД.Сумма = ТД.Количество * ТД.ЦенаКоробаСоСкидкой;
		ПересчитатьСуммуСНДС(ТД.ПолучитьИдентификатор());
	КонецЦикла;
	
	ЗаполнитьТоварыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура гф_ЗаполнитьСкидкуТовары()
	
	Для Каждого ТД Из Объект.Товары Цикл
		ТД.ПроцентРучнойСкидки = РассчитатьСкидку(Объект.Организация, Объект.Контрагент, Объект.Договор, Объект.Дата,
			Объект.гф_ДатаОбновленияИзИ5);
		гф_ТоварыПересчитатьЦенуСоСкидкой(ТД);
		гф_ТоварыПересчитатьСуммуСНДС(ТД);
	КонецЦикла;
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
		
КонецПроцедуры

// -- Галфинд СадомцевСА 18.10.2022

// #wortmann {
// Галфинд Sakovich 2022/11/03
&НаКлиенте
Функция гф_ПолучитьИмяРеквизитаАдресаДоставки(Элемент)
	// см. типовую процедуру в версии 2.5.9.116
	// ДоставкаТоваровКлиентСервер.ПолучитьИмяРеквизитаАдресаДоставки(Элемент)
	Если СтрНайти(Элемент.Имя, "АдресДоставкиПеревозчика") > 0 Тогда
		ИмяРеквизитаАдреса = "АдресДоставкиПеревозчика";
	Иначе
		ИмяРеквизитаАдреса = "АдресДоставки";
	КонецЕсли;
	
	Возврат ИмяРеквизитаАдреса;
	
КонецФункции // } #wortmann

&НаКлиенте
Процедура гф_ТоварыВКоробахПриАктивацииСтроки(Элемент)
	
	// ++ Галфинд ВолковЕВ 06.12.2022
	ЭлементТекущиеДанные = Элемент.ТекущиеДанные;
	
	гф_ЗаполнитьОтображениеПричинИзмененияНаСервере(ЭлементТекущиеДанные.ИдентификаторСтроки, ЭлементТекущиеДанные.ВариантКомплектации, ЭлементТекущиеДанные.Скидка);
	// -- Галфинд ВолковЕВ 06.12.2022
	
КонецПроцедуры

&НаСервере
Процедура гф_ЗаполнитьОтображениеПричинИзмененияНаСервере(ИдентификаторСтроки, ВариантКомплектации, Скидка)
	
	// ++ Галфинд ВолковЕВ 06.12.2022
	Объект.гф_ОтображениеПричинИзменения.Очистить();
	
	Для Каждого СтрокаТоварыВКоробах Из Объект.гф_ПричиныИзмененияТоваровВКоробах Цикл
		
		//Если СтрокаТоварыВКоробах.ВариантКомплектации = ВариантКомплектации И СтрокаТоварыВКоробах.Скидка = Скидка Тогда
		Если СтрокаТоварыВКоробах.ИдентификаторСтроки = ИдентификаторСтроки Тогда
			НоваяСтрока = Объект.гф_ОтображениеПричинИзменения.Добавить();
			НоваяСтрока.ВариантКомплектации = СтрокаТоварыВКоробах.ВариантКомплектации;
			НоваяСтрока.Количество = СтрокаТоварыВКоробах.Количество;
			НоваяСтрока.Скидка = СтрокаТоварыВКоробах.Скидка;
			НоваяСтрока.Причина = СтрокаТоварыВКоробах.Причина;
			НоваяСтрока.Отгружено = СтрокаТоварыВКоробах.Отгружено;
			НоваяСтрока.ЦенаКороба = СтрокаТоварыВКоробах.ЦенаКороба;
			НоваяСтрока.ЦенаКоробаСоСкидкой = СтрокаТоварыВКоробах.ЦенаКоробаСоСкидкой;
			НоваяСтрока.Дата = СтрокаТоварыВКоробах.Дата;
			НоваяСтрока.Ответственный = СтрокаТоварыВКоробах.Ответственный;
			НоваяСтрока.Комментарий = СтрокаТоварыВКоробах.Комментарий;
		КонецЕсли;	
		
	КонецЦикла;
	// -- Галфинд ВолковЕВ 06.12.2022
	
КонецПроцедуры

//- Отказ от использования ТЧ в Заказе Клиента. Аналитик Нестеровская Злата
//&НаСервере
//Процедура УдалитьУпаковочныеЛистыСтроки(ИдентификаторСтроки)
//	
//	//Отбор = новый Структура;
//	//Отбор.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
//	//
//	//НайденныеСтроки = Объект.гф_УпаковочныеЛисты.НайтиСтроки(Отбор);
//	//
//	//Для каждого Строка из НайденныеСтроки Цикл
//	//	Объект.гф_УпаковочныеЛисты.Удалить(Строка);		
//	//КонецЦикла;	
//	
//КонецПроцедуры
//- Отказ от использования ТЧ в Заказе Клиента. Аналитик Нестеровская Злата

Процедура гф_ДобавитьТабличнуюЧастьПричиныИзмененияТоваровВКоробах()
	
	// ++ Галфинд ВолковЕВ 06.12.2022
	НовоеПолеТаблица = Элементы.Добавить("гф_ТаблицаОтображениеПричинИзменения", Тип("ТаблицаФормы"), Элементы.гф_СтраницаТоварыВКоробах);									
	НовоеПолеТаблица.ПутьКДанным = "Объект.гф_ОтображениеПричинИзменения"; 
	
	НовоеПоле = Элементы.Добавить("гф_ОтображениеПричинИзмененияНомерСтроки", Тип("ПолеФормы"), НовоеПолеТаблица);
	НовоеПоле.Заголовок = "N";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.гф_ОтображениеПричинИзменения.НомерСтроки";
	НовоеПоле.ТолькоПросмотр = Истина;
	
	НовоеПоле = Элементы.Добавить("гф_ОтображениеПричинИзмененияВариантКомплектации", Тип("ПолеФормы"), НовоеПолеТаблица);
	НовоеПоле.Заголовок = "Вариант комплектации";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.гф_ОтображениеПричинИзменения.ВариантКомплектации";
	
	НовоеПоле = Элементы.Добавить("гф_ОтображениеПричинИзмененияКоличество", Тип("ПолеФормы"), НовоеПолеТаблица);
	НовоеПоле.Заголовок = "Количество";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.гф_ОтображениеПричинИзменения.Количество";
		
	НовоеПоле = Элементы.Добавить("гф_ОтображениеПричинИзмененияСкидка", Тип("ПолеФормы"), НовоеПолеТаблица);
	НовоеПоле.Заголовок = "% Скидки";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.гф_ОтображениеПричинИзменения.Скидка";
	
	НовоеПоле = Элементы.Добавить("гф_ОтображениеПричинИзмененияЦенаКороба", Тип("ПолеФормы"), НовоеПолеТаблица);
	НовоеПоле.Заголовок = "Цена короба";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.гф_ОтображениеПричинИзменения.ЦенаКороба";
	НовоеПоле.ТолькоПросмотр = Истина;
	
	НовоеПоле = Элементы.Добавить("гф_ОтображениеПричинИзмененияЦенаКоробаСоСкидкой", Тип("ПолеФормы"), НовоеПолеТаблица);
	НовоеПоле.Заголовок = "Цена короба со скидкой";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.гф_ОтображениеПричинИзменения.ЦенаКоробаСоСкидкой";
	НовоеПоле.ТолькоПросмотр = Истина;
	
	НовоеПоле = Элементы.Добавить("гф_ОтображениеПричинИзмененияПричина", Тип("ПолеФормы"), НовоеПолеТаблица);
	НовоеПоле.Заголовок = "Причина";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.гф_ОтображениеПричинИзменения.Причина";
	
	НовоеПоле = Элементы.Добавить("гф_ОтображениеПричинИзмененияДата", Тип("ПолеФормы"), НовоеПолеТаблица);
	НовоеПоле.Заголовок = "Дата";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.гф_ОтображениеПричинИзменения.Дата";
		
	НовоеПоле = Элементы.Добавить("гф_ОтображениеПричинИзмененияОтветственный", Тип("ПолеФормы"), НовоеПолеТаблица);
	НовоеПоле.Заголовок = "Ответственный";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.гф_ОтображениеПричинИзменения.Ответственный";
	
	НовоеПоле = Элементы.Добавить("гф_ОтображениеПричинИзмененияКомментарий", Тип("ПолеФормы"), НовоеПолеТаблица);
	НовоеПоле.Заголовок = "Комментарий";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.гф_ОтображениеПричинИзменения.Комментарий";
 	// -- Галфинд ВолковЕВ 06.12.2022
	
КонецПроцедуры
	
#КонецОбласти  