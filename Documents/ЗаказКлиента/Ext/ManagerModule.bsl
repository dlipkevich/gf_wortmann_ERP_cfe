#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

&ИзменениеИКонтроль("ДанныеДокументаДляПроведения")
Функция гф_ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры)

	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;

	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;

	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений

		ЗаполнитьПараметрыИнициализации(Запрос, Документ);

		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		СформироватьСуммыДокументаВВалютахУчета(Запрос, ТекстыЗапроса, Регистры);

		ТекстЗапросаТаблицаЗаказыКлиентов(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаБонусныеБаллы(Запрос, ТекстыЗапроса, Регистры);
	КонецЕсли;

	ОтразитьРаспределениеЗапасовДвижения(Запрос, ТекстыЗапроса, Регистры);
	ДобавитьТекстыОтраженияВзаиморасчетов(Запрос, ТекстыЗапроса, Регистры);
	#Удаление
	ОтразитьРезерв(Запрос, ТекстыЗапроса, Регистры);
	ЗапланироватьОтгрузкуТоваров(Запрос, ТекстыЗапроса, Регистры);
	#КонецУдаления
    #Вставка
	// ++ Галфинд ВолковЕВ 16.01.2023
	Если Документ.гф_ОтгрузкаПеремещением Тогда
		ОтразитьРезервПеремещениеПоПолучателю(Запрос, ТекстыЗапроса, Регистры, Документ);
		ЗапланироватьОтгрузкуТоваровПеремещениеПоПолучателя(Запрос, ТекстыЗапроса, Регистры);
	Иначе
		ОтразитьРезерв(Запрос, ТекстыЗапроса, Регистры);
		ЗапланироватьОтгрузкуТоваров(Запрос, ТекстыЗапроса, Регистры);
	КонецЕсли;
	// -- Галфинд ВолковЕВ 16.01.2023
	#КонецВставки

	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений

	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);

КонецФункции

#КонецОбласти

Процедура ОтразитьРезервПеремещениеПоПолучателю(Запрос, ТекстыЗапроса, Регистры, Документ)
	
	ТекстЗапросаДанныхДокумента = 
	"ВЫБРАТЬ
	|	ТоварыДокумента.Ссылка				КАК Ссылка,
	|	ДанныеШапки.Дата					КАК Период,
	|	ТоварыДокумента.Ссылка				КАК Заказ,
	|	НЕОПРЕДЕЛЕНО						КАК Накладная,
	|	ЛОЖЬ								КАК Исправление,
	|	НЕОПРЕДЕЛЕНО						КАК ИсправляемыйДокумент,
	//|	ДанныеШапки.Партнер					КАК Получатель,
	|	ДанныеШапки.гф_СкладПолучатель		КАК Получатель,
	|	ТоварыДокумента.Склад				КАК Склад,
	|	ТоварыДокумента.Номенклатура		КАК Номенклатура,
	|	ТоварыДокумента.Характеристика		КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТоварыДокумента.Обособленно
	|			ТОГДА ДанныеШапки.Назначение
	|		ИНАЧЕ &НазначениеПоУмолчанию
	|	КОНЕЦ								КАК Назначение,
	|	ТоварыДокумента.Серия				КАК Серия,
	|	ТоварыДокумента.СтатусУказанияСерий	КАК СтатусУказанияСерий,
	|	ТоварыДокумента.Количество			КАК Количество,
	|	ЛОЖЬ								КАК СверхЗаказа,
	|	ТоварыДокумента.Отменено			КАК Отменено,
	|	ЛОЖЬ								КАК ЭтоНакладная,
	|	ИСТИНА								КАК ОтгрузкаПоЗаказу
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ТоварыДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ДанныеШапки
	|		ПО ТоварыДокумента.Ссылка = ДанныеШапки.Ссылка
	|
	|ГДЕ
	|	ТоварыДокумента.Ссылка В(&Ссылка)
	|	И &ИспользоватьРасширенныеВозможностиЗаказа
	|	И ДанныеШапки.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
	|	И (ТоварыДокумента.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|		ИЛИ ТоварыДокумента.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|			И ДанныеШапки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован))
	|	И ТоварыДокумента.Количество <> 0";
	
	ИспользоватьРасширенныеВозможностиЗаказа = ?(ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"),
												"ИСТИНА",
												"ЛОЖЬ");
	
	ТекстЗапросаДанныхДокумента = СтрЗаменить(ТекстЗапросаДанныхДокумента,
												"&НазначениеПоУмолчанию",
												"ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)");
	ТекстЗапросаДанныхДокумента = СтрЗаменить(ТекстЗапросаДанныхДокумента,
												"&ИспользоватьРасширенныеВозможностиЗаказа",
												ИспользоватьРасширенныеВозможностиЗаказа);
	
	СкладыСервер.ОтразитьРезерв(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаДанныхДокумента);
	
КонецПроцедуры

Процедура ЗапланироватьОтгрузкуТоваровПеремещениеПоПолучателя(Запрос, ТекстыЗапроса, Регистры)
	
	ТекстЗапросаДанныхДокумента = 
	"ВЫБРАТЬ
	|	ТоварыДокумента.Ссылка				КАК Ссылка,
	|	ТоварыДокумента.ДатаОтгрузки		КАК Период,
	|	ТоварыДокумента.Ссылка				КАК Заказ,
	|	НЕОПРЕДЕЛЕНО						КАК Накладная,
	|	ЛОЖЬ								КАК Исправление,
	|	НЕОПРЕДЕЛЕНО						КАК ИсправляемыйДокумент,
	//|	ДанныеШапки.Партнер					КАК Получатель,
	|	ДанныеШапки.гф_СкладПолучатель		КАК Получатель,
	|	ТоварыДокумента.Склад				КАК Склад,
	|	ТоварыДокумента.Номенклатура		КАК Номенклатура,
	|	ТоварыДокумента.Характеристика		КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТоварыДокумента.Обособленно
	|			ТОГДА ДанныеШапки.Назначение
	|		ИНАЧЕ &НазначениеПоУмолчанию
	|	КОНЕЦ								КАК Назначение,
	|	ТоварыДокумента.Серия				КАК Серия,
	|	ТоварыДокумента.СтатусУказанияСерий	КАК СтатусУказанияСерий,
	|	ТоварыДокумента.Количество			КАК Количество,
	|	ЛОЖЬ								КАК СверхЗаказа,
	|	ТоварыДокумента.Отменено			КАК Отменено,
	|	ЛОЖЬ								КАК ЭтоНакладная,
	|	ИСТИНА								КАК ОтгрузкаПоЗаказу
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ТоварыДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ДанныеШапки
	|		ПО ТоварыДокумента.Ссылка = ДанныеШапки.Ссылка
	|
	|ГДЕ
	|	ТоварыДокумента.Ссылка В(&Ссылка)
	|	И &ИспользоватьРасширенныеВозможностиЗаказа
	|	И ДанныеШапки.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
	|	И ДанныеШапки.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
	|	И ТоварыДокумента.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|	И ТоварыДокумента.Количество <> 0";
	
	ИспользоватьРасширенныеВозможностиЗаказа = ?(ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"),
												"ИСТИНА",
												"ЛОЖЬ");
	
	ТекстЗапросаДанныхДокумента = СтрЗаменить(ТекстЗапросаДанныхДокумента,
												"&НазначениеПоУмолчанию",
												"ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)");
	ТекстЗапросаДанныхДокумента = СтрЗаменить(ТекстЗапросаДанныхДокумента,
												"&ИспользоватьРасширенныеВозможностиЗаказа",
												ИспользоватьРасширенныеВозможностиЗаказа);
	
	СкладыСервер.ЗапланироватьОтгрузкуТоваров(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаДанныхДокумента);
	
КонецПроцедуры

// ++ Галфинд СадомцевСА 07.03.2023
// При перезаполнении тч Товары оставляем "отгруженные" и "добавленные/отмененные" строки тч Товары
Процедура гф_тчТоварыОставитьОтгруженныеСтроки(тчТовары) Экспорт
	МассивУдалитьСтроки = Новый Массив;
	Для Каждого СтрокаТовары Из тчТовары Цикл
		Если СтрокаТовары["ВариантОбеспечения"] = Перечисления.ВариантыОбеспечения.Отгрузить
		// СадомцевСА 04.10.2023 Реализовал заполнение Товаров в Заказе по Коробам с учетом "добавленных/отмененных" коробов
		// При этом, оставляем в Заказе "отгруженные" и "отмененные по причине отгрузки" товары
		// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee61214db60af6
			// ИЛИ СтрокаТовары["гф_ДобавленоПоПричине"]
			// ИЛИ СтрокаТовары["Отменено"] Тогда
			// ++ Галфинд Volkov 2024/01/30
			//ИЛИ СтрокаТовары.ПричинаОтмены = Справочники.ПричиныОтменыЗаказовКлиентов.гф_Отгружено Тогда
			Или (СтрокаТовары["Отменено"] И
			СтрокаТовары.ПричинаОтмены = Справочники.ПричиныОтменыЗаказовКлиентов.гф_ФактическоеРасхождениеНаСкладе)
			Или (СтрокаТовары["гф_ДобавленоПоПричине"] И
			СтрокаТовары.гф_ПричинаДобавления = Справочники.ПричиныОтменыЗаказовКлиентов.гф_ФактическоеРасхождениеНаСкладе
			И СтрокаТовары["ВариантОбеспечения"] = Перечисления.ВариантыОбеспечения.Отгрузить) Тогда
			// -- Галфинд Volkov 2024/01/30
			Продолжить;
		КонецЕсли;
		МассивУдалитьСтроки.Добавить(СтрокаТовары);
	КонецЦикла;
	Для Каждого УдалитьСтроку Из МассивУдалитьСтроки Цикл
		тчТовары.Удалить(УдалитьСтроку);
	КонецЦикла;
КонецПроцедуры // -- Галфинд СадомцевСА 07.03.2023

// Используется для нескольких видов работы с заказом:
// Изменение ТЧ пользователем на форме документа,
// загрузка заказов из внешних систем документом гф_ДанныеЗагрузки,
// отгрузка упаковочных листов обработкой гф_ОтгрузкаПоЗаказам,
// корректировка заказа обработкой гф_КорректировкаЗаказовРезервов. 
Процедура ЗаполнитьТоварыНаСервере(ДокОбъект, ПереходВПроцедуруИзФормы = Ложь) Экспорт
	
	// ++ Галфинд СадомцевСА 05.12.2022
	// При перезаполнении тч Товары оставляем "отгруженные" и "добавленные/отмененные" строки тч Товары
	// Товары.Очистить();
	тчТовары = ДокОбъект.Товары.Выгрузить();
	// Галфинд СадомцевСА 07.03.2023 Перенес код в отдельную процедуру
	Документы.ЗаказКлиента.гф_тчТоварыОставитьОтгруженныеСтроки(тчТовары);
	ДокОбъект.Товары.Загрузить(тчТовары);
	// -- Галфинд СадомцевСА 05.12.2022
		
	ВременнаяТаблицаТЧТовары = ПодготовитьВременнуюТаблицуТЧТовары();
	ВременнаяТаблицаТЧТовары.Колонки.Добавить("ВариантКомплектации",
		Новый ОписаниеТипов("СправочникСсылка.ВариантыКомплектацииНоменклатуры"));
	ВременнаяТаблицаТЧТовары.Колонки.Добавить("ЦенаКороба", Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаТоварыВКоробах Из ДокОбъект.гф_ТоварыВКоробах Цикл
		
		// ++ Галфинд СадомцевСА 05.12.2022
		// При перезаполнении тч Товары не учитываем "отгруженные" и "отмененные" строки тч Товары в коробах
		// СадомцевСА 04.10.2023 Реализовал заполнение Товаров в Заказе по Коробам с учетом "добавленных/отмененных" коробов
		// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee61214db60af6
		// ++ Галфинд Volkov 2024/01/30
		// Если СтрокаТоварыВКоробах["ВариантОбеспечения"] = Перечисления.ВариантыОбеспечения.Отгрузить Тогда
		//	//ИЛИ СтрокаТоварыВКоробах["Отменено"]
		Если СтрокаТоварыВКоробах["ВариантОбеспечения"] = Перечисления.ВариантыОбеспечения.Отгрузить
			Или СтрокаТоварыВКоробах["Отменено"] Тогда
		// -- Галфинд Volkov 2024/01/30
			Продолжить;
		КонецЕсли;
		// -- Галфинд СадомцевСА 05.12.2022
		// ++ Галфинд СадомцевСА 10.01.2023
		// При перезаполнении тч Товары не учитываем строки тч Товары в коробах с "нулевым" количеством
		Если Не ЗначениеЗаполнено(СтрокаТоварыВКоробах["Количество"]) Тогда
			Продолжить;
		КонецЕсли;
		// -- Галфинд СадомцевСА 10.01.2023
		
		Для Каждого СтрокаСостава Из СтрокаТоварыВКоробах.ВариантКомплектации.Товары Цикл
			
			НоваяСтрока = ВременнаяТаблицаТЧТовары.Добавить();
			НоваяСтрока.Номенклатура = СтрокаСостава.Номенклатура;
			НоваяСтрока.Характеристика = СтрокаСостава.Характеристика;
			НоваяСтрока.КоличествоУпаковок = СтрокаТоварыВКоробах.Количество * СтрокаСостава.КоличествоУпаковок;			
			
		// СадомцевСА 04.10.2023 Реализовал заполнение Товаров в Заказе по Коробам с учетом "добавленных/отмененных" коробов
		// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee61214db60af6
			НоваяСтрока.гф_ДобавленоПоПричине = СтрокаТоварыВКоробах.Добавлено;
			НоваяСтрока.гф_ПричинаДобавления = СтрокаТоварыВКоробах.ПричинаДобавления;
			НоваяСтрока.Отменено = СтрокаТоварыВКоробах.Отменено;
			НоваяСтрока.ПричинаОтмены = СтрокаТоварыВКоробах.ПричинаОтмены;
			НоваяСтрока.ВидЦены = СтрокаТоварыВКоробах.ВидЦены;
			НоваяСтрока.ВариантКомплектации = СтрокаТоварыВКоробах.ВариантКомплектации;
			НоваяСтрока.ЦенаКороба = СтрокаТоварыВКоробах.ЦенаКороба;
			НоваяСтрока.ПроцентРучнойСкидки = СтрокаТоварыВКоробах.Скидка;
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	ВременнаяТаблицаТЧТовары.Свернуть("ВариантКомплектации,Номенклатура,Характеристика,гф_ДобавленоПоПричине,гф_ПричинаДобавления,Отменено,
		|ПричинаОтмены,ВариантОбеспечения,ВидЦены,ЦенаКороба,ПроцентРучнойСкидки", "КоличествоУпаковок");
	
	тчТовары = ПодготовитьВременнуюТаблицуТЧТовары();
	НомерСтроки = 0;
	ЗначениеСто = 100;
	
	ЗапросЦен = Новый Запрос;
	ЗапросЦен.Текст =
	"ВЫБРАТЬ
	|	ЦеныСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныСрезПоследних.ВидЦены КАК ВидЦены,
	|	МАКСИМУМ(ЦеныСрезПоследних.Цена) КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(
	|			&Период,
	|			ВидЦены В (&ВидыЦен)
	|				И Номенклатура В (&Номенклатура)) КАК ЦеныСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ЦеныСрезПоследних.Номенклатура,
	|	ЦеныСрезПоследних.ВидЦены";
	ЗапросЦен.УстановитьПараметр("Период", ?(ЗначениеЗаполнено(ДокОбъект.гф_ДатаОбновленияИзИ5), ДокОбъект.гф_ДатаОбновленияИзИ5, ДокОбъект.Дата));
	ЗапросЦен.УстановитьПараметр("Номенклатура", ВременнаяТаблицаТЧТовары.ВыгрузитьКолонку("Номенклатура"));
	ЗапросЦен.УстановитьПараметр("ВидыЦен",      ВременнаяТаблицаТЧТовары.ВыгрузитьКолонку("ВидЦены"));
	ТаблицаЦен = ЗапросЦен.Выполнить().Выгрузить();
	
	Для Каждого Строка Из ВременнаяТаблицаТЧТовары Цикл
		НоваяСтрока = тчТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НомерСтроки = НомерСтроки + 1;
		НоваяСтрока.НомерСтроки = НомерСтроки;
				
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", Строка.Номенклатура);			
		Отбор.Вставить("ВидЦены", Строка.ВидЦены);
		НоваяСтрока.Количество = Строка.КоличествоУпаковок;
		Если ЗначениеЗаполнено(Строка.ВидЦены) Тогда
			
			//// ++ Галфинд_ДомнышеваКР_24_03_2023
			//ДатаДляЦены = ?(ЗначениеЗаполнено(гф_ДатаОбновленияИзИ5), гф_ДатаОбновленияИзИ5, Дата);
			//НоваяСтрока.Цена = РегистрыСведений.ЦеныНоменклатуры25.ПолучитьПоследнее(ДатаДляЦены, Отбор).Цена; 
			////НоваяСтрока.Цена = РегистрыСведений.ЦеныНоменклатуры25.ПолучитьПоследнее(Дата, Отбор).Цена;
			//// -- Галфинд_ДомнышеваКР_24_03_2023
			
			СтрокиТаблицыЦен = ТаблицаЦен.НайтиСтроки(Отбор);
			Если СтрокиТаблицыЦен.Количество() > 0 Тогда
				НоваяСтрока.Цена = СтрокиТаблицыЦен[0].Цена; 
			КонецЕсли;
			
		Иначе
			// Галфинд СадомцевСА 30.11.2022
			// Реализовал алгоритм расчета Цены пары по Цене короба при пустом Виде цены в строке документа
			НоваяСтрока.Цена = РассчитатьЦенуПары(Строка.ВариантКомплектации, Строка.ЦенаКороба);
		КонецЕсли;
		НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению;
		НоваяСтрока.Обособленно = Истина;		
		НоваяСтрока.гф_ЦенаСоСкидкой = НоваяСтрока.Цена * (1 - НоваяСтрока.ПроцентРучнойСкидки / ЗначениеСто);
	КонецЦикла;	  
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;	
	ЗаполнитьПризнакХарактеристикиИспользуются = Новый Структура("Номенклатура", "ХарактеристикиИспользуются");
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
		ЗаполнитьПризнакХарактеристикиИспользуются);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(тчТовары, ПараметрыЗаполненияРеквизитов);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ДокОбъект);
	
	СтруктураДействий = Новый Структура;
	ЗаполнитьСтавкуНДС = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(ДокОбъект, Истина);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ЗаполнитьСтавкуНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
		
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(тчТовары, СтруктураДействий, Неопределено);
	
	// ++ Галфинд ВолковЕВ 14.12.2022
	// Дублирующие строки номенклатуры
	тчТовары.Свернуть("ДатаОтгрузки, Номенклатура,Характеристика, Цена, СтавкаНДС, ПроцентРучнойСкидки, гф_ДобавленоПоПричине, гф_ПричинаДобавления,
		|Отменено,ПричинаОтмены, ВариантОбеспечения, ВидЦены, Обособленно, гф_ДобавленоПоПричине, гф_ПричинаДобавления, гф_ДатаДляРТУ,
		|гф_ЦенаСоСкидкой, ХарактеристикиИспользуются", "КоличествоУпаковок, Количество, Сумма, СуммаНДС, СуммаСНДС");
	// -- Галфинд ВолковЕВ 14.12.2022
	
	Для Каждого Строка Из тчТовары Цикл
		НоваяСтрока = ДокОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		// ++ Галфинд СадомцевСА 15.02.2024 Реализовал пересчет сумм "по цене со скидкой" в тч Товары
		// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811eeb3b027cac4c5
		НоваяСтрока.Сумма = НоваяСтрока.гф_ЦенаСоСкидкой * НоваяСтрока.Количество;
		Ставка = 0;
		Если ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
			Ставка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.СтавкаНДС, "Ставка");
		КонецЕсли;
		НоваяСтрока.СуммаНДС = Окр(НоваяСтрока.Сумма * (Ставка / ЗначениеСто), 2);
		НоваяСтрока.СуммаСНДС = НоваяСтрока.Сумма + НоваяСтрока.СуммаНДС;
		// ++ Галфинд СадомцевСА 15.02.2024
	КонецЦикла;
	
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(ДокОбъект.Склад);
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(ДокОбъект.Склад, СкладГруппа, ДокОбъект.Товары, Ложь);
	
КонецПроцедуры

Функция ПодготовитьВременнуюТаблицуТЧТовары()
	ВременнаяТаблица = Новый ТаблицаЗначений;
	МетаданныеТЧ = Метаданные.Документы.ЗаказКлиента.ТабличныеЧасти.Товары.Реквизиты;
	Для Каждого Реквизит Из МетаданныеТЧ Цикл
		ВременнаяТаблица.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла;
	ВременнаяТаблица.Колонки.Добавить("ХарактеристикиИспользуются", Новый ОписаниеТипов(""));
	ВременнаяТаблица.Колонки.Добавить("ТипНоменклатуры", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры"));
	ВременнаяТаблица.Колонки.Добавить("СуммаНДСОтмененоБезВозвратнойТары", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("СуммаСНДСОтмененоБезВозвратнойТары", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("СуммаАвтоматическойСкидкиОтмененоБезВозвратнойТары", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("СуммаРучнойСкидкиОтмененоБезВозвратнойТары", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("ВариантОформленияПродажи",
		Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОформленияПродажи"));
	ВременнаяТаблица.Колонки.Добавить("СуммаОтмененоБезВозвратнойТары", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("ОтмененоБезВозвратнойТары", Новый ОписаниеТипов("Булево"));
	ВременнаяТаблица.Колонки.Добавить("СуммаНДСБезВозвратнойТары", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("СуммаСНДСБезВозвратнойТары", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("СуммаАвтоматическойСкидкиБезВозвратнойТары", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("СуммаРучнойСкидкиБезВозвратнойТары", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("СуммаБезВозвратнойТары", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("БезВозвратнойТары", Новый ОписаниеТипов("Булево"));
	ВременнаяТаблица.Колонки.Добавить("Артикул", Новый ОписаниеТипов("Строка"));
	ВременнаяТаблица.Колонки.Добавить("СуммаСНДСОтменено", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("СуммаОтменено", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("СуммаНДСОтменено", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("СуммаАвтоматическойСкидкиОтменено", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("СуммаРучнойСкидкиОтменено", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("ИндексНабора", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("СкладОбязателен", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("ДатаОтгрузкиОбязательна", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("Доступно", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("ПерераспределятьЗапасы", Новый ОписаниеТипов("Булево"));
	ВременнаяТаблица.Колонки.Добавить("ОтгружатьЕслиДоступно", Новый ОписаниеТипов("Булево"));
	ВременнаяТаблица.Колонки.Добавить("СуммаБонусныхБалловКСписаниюВВалютеОтменено", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("СуммаБонусныхБалловКСписаниюВВалютеОтмененоБезВозвратнойТары",
		Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("СуммаБонусныхБалловКСписаниюВВалютеБезВозвратнойТары",
		Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	Возврат ВременнаяТаблица;
КонецФункции

Функция РассчитатьЦенуПары(ВариантКомплектации, ЦенаКороба)
	Если Не ЗначениеЗаполнено(ВариантКомплектации) Тогда
		Возврат 0;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ВариантКомплектации.КоличествоУпаковок) Тогда
		Возврат 0;
	КонецЕсли;
	ЦенаПары = Окр(ЦенаКороба / ВариантКомплектации.КоличествоУпаковок, 2);
	Возврат ЦенаПары;
КонецФункции

#КонецЕсли
