
#Область ОбработчикиСобытий

&После("ОбработкаПроверкиЗаполнения")
Процедура гф_ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)  
			
	Для ТекИндекс = 0 По гф_ТоварыВКоробах.Количество() - 1 Цикл
		
		СтрокаТоварыВКоробах = гф_ТоварыВКоробах[ТекИндекс]; 
		
		АдресОшибки = " " + НСтр("ru = 'в строке %НомерСтроки% списка ""Товары в коробах""';
								|en = 'in line %НомерСтроки% of the ""Goods"" list'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", СтрокаТоварыВКоробах.НомерСтроки);
		
		Если СтрокаТоварыВКоробах.Добавлено 
			И Не ЗначениеЗаполнено(СтрокаТоварыВКоробах.ПричинаДобавления) Тогда
			
			ТекстОшибки = НСтр("ru = 'Необходимо указать причину добавления';
								|en = 'Cancellation reason is required'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("гф_ТоварыВКоробах", 
								СтрокаТоварыВКоробах.НомерСтроки, "ПричинаДобавления"),	, Отказ);
				
		КонецЕсли;
		
		Если СтрокаТоварыВКоробах.Отменено 
			И Не ЗначениеЗаполнено(СтрокаТоварыВКоробах.ПричинаОтмены) Тогда
			
			ТекстОшибки = НСтр("ru = 'Необходимо указать причину отмены';
								|en = 'Cancellation reason is required'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("гф_ТоварыВКоробах", 
										СтрокаТоварыВКоробах.НомерСтроки, "ПричинаОтмены"),	, Отказ);
				
		КонецЕсли;			
		
	КонецЦикла;
	
	Для ТекИндекс = 0 По Товары.Количество() - 1 Цикл
		
		СтрокаТовары = Товары[ТекИндекс]; 
		
		АдресОшибки = " " + НСтр("ru = 'в строке %НомерСтроки% списка ""Товары""';
								|en = 'in line %НомерСтроки% of the ""Goods"" list'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", СтрокаТовары.НомерСтроки);
		
		Если СтрокаТовары.гф_ДобавленоПоПричине 
			И Не ЗначениеЗаполнено(СтрокаТовары.гф_ПричинаДобавления) Тогда
			
			ТекстОшибки = НСтр("ru = 'Необходимо указать причину добавления';
								|en = 'Cancellation reason is required'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", 
									СтрокаТовары.НомерСтроки, "гф_ПричинаДобавления"), , Отказ);
				
		КонецЕсли;
			
    КонецЦикла;
		
КонецПроцедуры

&Перед("ПередЗаписью")
Процедура гф_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	// ++ Галфинд СадомцевСА 18.10.2022 Для "коробного" склада перезаполняем ТЧ Товары
	Если ЭтоТоварыВКоробах(Склад) Тогда
		ЗаполнитьТоварыНаСервере();
	КонецЕсли;
	// -- Галфинд СадомцевСА 18.10.2022
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЭтоТоварыВКоробах(Склад)
	Если Не ЗначениеЗаполнено(Склад) Тогда
		Возврат Ложь;
	КонецЕсли;
	ТоварыВКоробах = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("ИдентификаторДляФормул", "гф_СкладыТоварыВКоробах");
	
	ТоварыВКоробахЗначение = УправлениеСвойствами.ЗначениеСвойства(Склад, ТоварыВКоробах);	
	
	Если ЗначениеЗаполнено(ТоварыВКоробахЗначение) И ТоварыВКоробахЗначение = Истина Тогда
		 Возврат Истина;
	Иначе
		 Возврат Ложь;
	КонецЕсли;
КонецФункции

// Копия процедуры из Формы Документа
Процедура ЗаполнитьТоварыНаСервере()
	
	ТипЦеныЗакупочная = ПланыВидовХарактеристик.гф_ГлобальныеЗначения.НайтиПоРеквизиту("Ключ",
														"гф_ГлобальныеЗначенияОптоваяЗакупочнаяЦена").Значение;

	Товары.Очистить();
		
	ВременнаяТаблицаТЧТовары = ПодготовитьВременнуюТаблицуТЧТовары();
	
	Для каждого СтрокаТоварыВКоробах Из гф_ТоварыВКоробах Цикл
		
		Для каждого СтрокаСостава Из СтрокаТоварыВКоробах.ВариантКомплектации.Товары Цикл
			
			НоваяСтрока = ВременнаяТаблицаТЧТовары.Добавить();
			НоваяСтрока.Номенклатура = СтрокаСостава.Номенклатура;
			НоваяСтрока.Характеристика = СтрокаСостава.Характеристика;
			НоваяСтрока.КоличествоУпаковок = СтрокаТоварыВКоробах.Количество * СтрокаСостава.КоличествоУпаковок;			
			НоваяСтрока.гф_ДобавленоПоПричине = СтрокаТоварыВКоробах.Добавлено;
			НоваяСтрока.гф_ПричинаДобавления = СтрокаТоварыВКоробах.ПричинаДобавления;
			НоваяСтрока.Отменено = СтрокаТоварыВКоробах.Отменено;
			НоваяСтрока.ПричинаОтмены = СтрокаТоварыВКоробах.ПричинаОтмены;
			НоваяСтрока.ВариантОбеспечения = СтрокаТоварыВКоробах.ВариантОбеспечения;
			НоваяСтрока.ВидЦены = СтрокаТоварыВКоробах.ВидЦены;
			НоваяСтрока.ПроцентРучнойСкидки = СтрокаТоварыВКоробах.Скидка;
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	ВременнаяТаблицаТЧТовары.Свернуть("Номенклатура,Характеристика,гф_ДобавленоПоПричине,гф_ПричинаДобавления,Отменено,ПричинаОтмены,
		|ВариантОбеспечения,ВидЦены,ПроцентРучнойСкидки", "КоличествоУпаковок");
	
	тчТовары = ПодготовитьВременнуюТаблицуТЧТовары();
	НомерСтроки = 0;
	
	Для каждого Строка из ВременнаяТаблицаТЧТовары Цикл
		НоваяСтрока = тчТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НомерСтроки = НомерСтроки + 1;
		НоваяСтрока.НомерСтроки = НомерСтроки;
				
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", Строка.Номенклатура);			
		Отбор.Вставить("ВидЦены", Строка.ВидЦены);
		НоваяСтрока.Количество = Строка.КоличествоУпаковок;
		НоваяСтрока.Цена = РегистрыСведений.ЦеныНоменклатуры25.ПолучитьПоследнее(ТекущаяДатаСеанса(), Отбор).Цена;
		НоваяСтрока.Обособленно = Истина;		
		НоваяСтрока.гф_ЦенаСоСкидкой = НоваяСтрока.Цена * (1 - НоваяСтрока.ПроцентРучнойСкидки/100);
	КонецЦикла;	  
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;	
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
												Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(тчТовары, ПараметрыЗаполненияРеквизитов);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЭтотОбъект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(
																											ЭтотОбъект,
																											Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСумму"); 
		
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(тчТовары, СтруктураДействий, Неопределено);
	Для Каждого Строка Из тчТовары Цикл
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(ЭтотОбъект.Склад);
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(ЭтотОбъект.Склад, СкладГруппа, ЭтотОбъект.Товары, Ложь);
	
КонецПроцедуры

Функция ПодготовитьВременнуюТаблицуТЧТовары()
	ВременнаяТаблица = Новый ТаблицаЗначений;
	МетаданныеТЧ = Метаданные.Документы.ЗаказКлиента.ТабличныеЧасти.Товары.Реквизиты;
	Для Каждого Реквизит Из МетаданныеТЧ Цикл
		ВременнаяТаблица.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла;
	ВременнаяТаблица.Колонки.Добавить("ХарактеристикиИспользуются", Новый ОписаниеТипов(""));
	ВременнаяТаблица.Колонки.Добавить("ТипНоменклатуры", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры"));
	ВременнаяТаблица.Колонки.Добавить("СуммаНДСОтмененоБезВозвратнойТары", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("СуммаСНДСОтмененоБезВозвратнойТары", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("СуммаАвтоматическойСкидкиОтмененоБезВозвратнойТары", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("СуммаРучнойСкидкиОтмененоБезВозвратнойТары", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("ВариантОформленияПродажи", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОформленияПродажи"));
	ВременнаяТаблица.Колонки.Добавить("СуммаОтмененоБезВозвратнойТары", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("ОтмененоБезВозвратнойТары", Новый ОписаниеТипов("Булево"));
	ВременнаяТаблица.Колонки.Добавить("СуммаНДСБезВозвратнойТары", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("СуммаСНДСБезВозвратнойТары", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("СуммаАвтоматическойСкидкиБезВозвратнойТары", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("СуммаРучнойСкидкиБезВозвратнойТары", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("СуммаБезВозвратнойТары", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("БезВозвратнойТары", Новый ОписаниеТипов("Булево"));
	ВременнаяТаблица.Колонки.Добавить("Артикул", Новый ОписаниеТипов("Строка"));
	ВременнаяТаблица.Колонки.Добавить("СуммаСНДСОтменено", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("СуммаОтменено", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("СуммаНДСОтменено", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("СуммаАвтоматическойСкидкиОтменено", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("СуммаРучнойСкидкиОтменено", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("ИндексНабора", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("СкладОбязателен", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("ДатаОтгрузкиОбязательна", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("Доступно", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("ПерераспределятьЗапасы", Новый ОписаниеТипов("Булево"));
	ВременнаяТаблица.Колонки.Добавить("ОтгружатьЕслиДоступно", Новый ОписаниеТипов("Булево"));
	ВременнаяТаблица.Колонки.Добавить("СуммаБонусныхБалловКСписаниюВВалютеОтменено", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("СуммаБонусныхБалловКСписаниюВВалютеОтмененоБезВозвратнойТары", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("СуммаБонусныхБалловКСписаниюВВалютеБезВозвратнойТары", Новый ОписаниеТипов("Число"));
	ВременнаяТаблица.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	Возврат ВременнаяТаблица;
КонецФункции

#КонецОбласти