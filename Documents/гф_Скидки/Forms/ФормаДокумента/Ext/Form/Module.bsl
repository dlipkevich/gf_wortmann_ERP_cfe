#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("ГрупповоеЗаполнениеЗавершение", ЭтотОбъект);
	ПараметрыФормы = Новый Структура();
	ОткрытьФорму("Документ.гф_Скидки.Форма.ФормаГрупповогоЗаполнения", ПараметрыФормы,
			ЭтотОбъект, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрупповоеЗаполнениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТЗСкидки.Очистить();
	Для Каждого СтрокаТЧ Из Объект.Скидки Цикл
		ЗаполнитьСтрокуТЧ(СтрокаТЧ, Результат);
	КонецЦикла;
	Для Каждого СтрокаТЗ Из ТЗСкидки Цикл
		нс = Объект.Скидки.Добавить();
		ЗаполнитьЗначенияСвойств(нс, СтрокаТЗ);
	КонецЦикла;
	Объект.Скидки.Сортировать("Контрагент, Договор, Период, ВидСкидки");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтрокуТЧ(СтрокаТЧ, Результат)
	Если ЗначениеЗаполнено(Результат["Период"]) Тогда
		СтрокаТЧ.Период = Результат["Период"];
		Модифицированность = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(Результат["ВидСкидки"]) Тогда
		СтрокаТЧ.ВидСкидки = Результат["ВидСкидки"];
		Модифицированность = Истина;
	КонецЕсли;
	Если Результат["флУстановитьСкидку"] Тогда
		СтрокаТЧ.Скидка = Результат["Скидка"];
		Модифицированность = Истина;
	КонецЕсли;
	Если Результат["флДоговор"] Тогда
		МассивДоговоры = НайтиДоговорКонтрагента(СтрокаТЧ.Контрагент, Объект.Сезон, Объект.Организация);
		Если МассивДоговоры.Количество() = 0 Тогда
			СтрокаТЧ.Договор = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
		ИначеЕсли МассивДоговоры.Количество() = 1 Тогда
			СтрокаТЧ.Договор = МассивДоговоры[0];
		Иначе
			Индекс = 1;
			Пока Индекс < МассивДоговоры.Количество() Цикл
				нс = ТЗСкидки.Добавить();
				ЗаполнитьЗначенияСвойств(нс, СтрокаТЧ);
				// Договор
				нс.Договор = МассивДоговоры[Индекс];
				Индекс = Индекс + 1;
			КонецЦикла;
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиДоговорКонтрагента(Контрагент, Сезон, Организация)
	Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДоговорыКонтрагентов.Ссылка КАК Договор
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	НЕ ДоговорыКонтрагентов.ПометкаУдаления
	               |	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	               |	И ДоговорыКонтрагентов.Контрагент = &Контрагент
	               |	И ДоговорыКонтрагентов.Организация = &Организация
	               |	И ДоговорыКонтрагентов.гф_Сезон = &Сезон";
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Сезон", Сезон);
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("Договор");
КонецФункции

&НаСервереБезКонтекста
Функция СкидкиСкидкаПриИзмененииНаСервере(Скидка, ВидСкидки)
	// здесь надо ограничить при необходимости значение Скидки
	_Скидка = Скидка;
	МинимальноеЗначение = 0;
	МаксимальноеЗначение = 0;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	гф_ДопустимыеЗначенияСкидок.МинимальноеЗначение КАК МинимальноеЗначение,
	               |	гф_ДопустимыеЗначенияСкидок.МаксимальноеЗначение КАК МаксимальноеЗначение
	               |ИЗ
	               |	РегистрСведений.гф_ДопустимыеЗначенияСкидок КАК гф_ДопустимыеЗначенияСкидок
	               |ГДЕ
	               |	гф_ДопустимыеЗначенияСкидок.ВидСкидки = &ВидСкидки";
	Запрос.УстановитьПараметр("ВидСкидки", ВидСкидки);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		МинимальноеЗначение = Выборка.МинимальноеЗначение;
		МаксимальноеЗначение = Выборка.МаксимальноеЗначение;
	КонецЕсли;
	Если _Скидка < МинимальноеЗначение Тогда
		_Скидка = МинимальноеЗначение;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Скидка = МинимальноеЗначение:" + _Скидка);
	КонецЕсли;
	Если _Скидка > МаксимальноеЗначение Тогда
		_Скидка = МаксимальноеЗначение;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Скидка = МаксимальноеЗначение:" + _Скидка);
	КонецЕсли;
	Возврат _Скидка;
КонецФункции

&НаКлиенте
Процедура СкидкиСкидкаПриИзменении(Элемент)
	ТД = Элементы.Скидки.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТД.Скидка = СкидкиСкидкаПриИзмененииНаСервере(ТД.Скидка, ТД.ВидСкидки);
КонецПроцедуры

#КонецОбласти
