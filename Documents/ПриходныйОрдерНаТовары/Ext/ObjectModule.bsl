#Если НЕ МобильныйАвтономныйСервер Тогда
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// #wortmann {
// #3.3.19 ТЗ_Приходный ордер_v2.docx
// группировка номенклатуры по Упаковочным листам,
// если они присутствуют в распоряжении.
// Галфинд Sakovich 2022/08/25
&После("ЗаполнитьТоварыПоТоварамКПоступлению")
Процедура гф_ЗаполнитьТоварыПоТоварамКПоступлению(ВидЗаполнения, ДатаПоступления)
	
	НужноЗаполнять = (ВидЗаполнения = "Номенклатура"
		Или ВидЗаполнения = "НоменклатураКоличество") 
		И ЗначениеЗаполнено(Распоряжение) 
		И (ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
		Или ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ПеремещениеТоваров"));
		
	Если НужноЗаполнять Тогда
		Запрос = Новый Запрос;
		Если ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
			ТекстЗапроса = "ВЫБРАТЬ
			|	ПТиУ.Ссылка КАК ПТиУ,
			|	УпаковочныйЛист.Ссылка КАК УпЛист
			|ПОМЕСТИТЬ УпакЛисты
			|ИЗ
			|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ПТиУ
			|		ПО (УпаковочныйЛист.гф_Поставка = ПТиУ.Ссылка)
			|ГДЕ
			|	ПТиУ.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	УпакЛисты.УпЛист КАК УпЛист,
			|	УпаковочныйЛистТовары.Номенклатура КАК Номенклатура,
			|	УпаковочныйЛистТовары.Характеристика КАК Характеристика,
			|	УпаковочныйЛистТовары.Назначение КАК Назначение,
			|	УпаковочныйЛистТовары.КоличествоУпаковок КАК КоличествоУпаковок,
			|	УпаковочныйЛистТовары.Количество КАК Количество
			|ИЗ
			|	УпакЛисты КАК УпакЛисты
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
			|		ПО УпакЛисты.УпЛист = УпаковочныйЛистТовары.Ссылка
			|ИТОГИ ПО
			|	УпЛист";
		КонецЕсли;
		
		Если ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
			ТекстЗапроса = " ВЫБРАТЬ
			|	Перемещение.УпаковочныйЛист КАК УпЛист,
			|	УпаковочныйЛистТовары.Номенклатура КАК Номенклатура,
			|	УпаковочныйЛистТовары.Характеристика КАК Характеристика,
			|	УпаковочныйЛистТовары.Назначение КАК Назначение,
			|	УпаковочныйЛистТовары.КоличествоУпаковок КАК КоличествоУпаковок,
			|	УпаковочныйЛистТовары.Количество КАК Количество
			|ИЗ
			|	Документ.ПеремещениеТоваров.гф_ТоварыВКоробах КАК Перемещение
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
			|		ПО (Перемещение.УпаковочныйЛист = УпаковочныйЛистТовары.Ссылка)
			|ГДЕ
			|	Перемещение.Ссылка = &Ссылка
			|ИТОГИ ПО
			|	УпЛист";
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Ссылка", Распоряжение);
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Товары.Очистить();
			ВыборкаУпЛист = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаУпЛист.Следующий() Цикл
				стрУпЛист = Товары.Добавить();
				стрУпЛист.УпаковочныйЛист = ВыборкаУпЛист.УпЛист;
				стрУпЛист.ЭтоУпаковочныйЛист = Истина;
				стрУпЛист.КоличествоУпаковок = 1;
				стрУпЛист.Количество = 1;
				ВыборкаДетали = ВыборкаУпЛист.Выбрать();
				Пока ВыборкаДетали.Следующий() Цикл
					стрТовары = Товары.Добавить();
					стрТовары.Номенклатура = ВыборкаДетали.Номенклатура;
					стрТовары.Характеристика = ВыборкаДетали.Характеристика;
					стрТовары.КоличествоУпаковок = ВыборкаДетали.КоличествоУпаковок;
					стрТовары.Количество = ВыборкаДетали.Количество;
					стрТовары.УпаковочныйЛистРодитель = ВыборкаУпЛист.УпЛист;
					стрТовары.ЭтоУпаковочныйЛист = Ложь;
					стрТовары.Назначение = ВыборкаДетали.Назначение;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		ВсегоМест = УпаковочныеЛистыСервер.КоличествоМестВТЧ(Товары);
	КонецЕсли;
	
КонецПроцедуры // } #wortmann

// #wortmann {
// #Монитор логиста
// Запись истории статусов ордеров
// Галфинд Окунев 2022/09/13
&После("ПриЗаписи")
Процедура гф_ПриЗаписи(Отказ)
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	гф_ИсторияСтатусовПриходныхОрдеровСрезПоследних.Статус КАК Статус
	|ИЗ
	|	РегистрСведений.гф_ИсторияСтатусовПриходныхОрдеров.СрезПоследних(, Объект = &Ссылка) КАК гф_ИсторияСтатусовПриходныхОрдеровСрезПоследних
	|ГДЕ
	|	гф_ИсторияСтатусовПриходныхОрдеровСрезПоследних.Статус = &Статус";
	
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Запрос.Параметры.Вставить("Статус", Статус);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		
		Запись = РегистрыСведений.гф_ИсторияСтатусовПриходныхОрдеров.СоздатьМенеджерЗаписи();
		
		Запись.Период			= ТекущаяДатаСеанса();
		Запись.Активность		= Истина;
		Запись.Объект			= Ссылка;
		Запись.Статус			= Статус;    
		Запись.СтатусИзменил	= Пользователи.ТекущийПользователь();
		
		Запись.Записать();
		
	КонецЕсли;	
	
КонецПроцедуры // } #wortmann

// #wortmann {
// заполнение ТЧ ШтрихкодыУпаковк из распоряжения (док. ПеремещениеТоваров)
// Галфинд Sakovich 2022/10/20
&После("ПередЗаписью")
Процедура гф_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если ЗначениеЗаполнено(Распоряжение) И ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	Перемещение.УпаковочныйЛист.гф_Агрегация КАК ШтрихкодУпаковки
			|ИЗ
			|	Документ.ПеремещениеТоваров.гф_ТоварыВКоробах КАК Перемещение
			|ГДЕ
			|	Перемещение.Ссылка = &Ссылка
			|	И НЕ Перемещение.УпаковочныйЛист.гф_Агрегация = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)");
			
			Запрос.УстановитьПараметр("Ссылка", Распоряжение);
			Результат = Запрос.Выполнить();
			
			Если Не Результат.Пустой() Тогда
				ШтрихкодыУпаковок.Загрузить(Результат.Выгрузить());
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // } #wortmann

#КонецОбласти
	
#КонецЕсли
#КонецЕсли