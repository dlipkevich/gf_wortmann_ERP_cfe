
&После("ОбработкаПроведения")
Процедура гф_ОбработкаПроведения(Отказ, РежимПроведения)
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// предварительно очищаем записи в регистре
	НаборЗаписей = РегистрыНакопления.гф_БонусыКлиентов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
	НаборЗаписей.Записать();
	
	//2.2.1.1.	Вид операции = Поступление оплаты от клиента
	Если ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента Тогда
		Возврат;
	КонецЕсли;
	
	ЦифровойКодВалюты = "978";
	Валюта = Справочники.Валюты.НайтиПоКоду(ЦифровойКодВалюты);
	СтруктураКурса = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(Валюта, Дата);
	КурсВалюты = СтруктураКурса.КурсЧислитель;
	
	Для Каждого СтрокаТЧ Из РасшифровкаПлатежа Цикл
		//2.2.1.2.	Договор.Сезон.Применять_бонусы = истина
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ОснованиеПлатежа) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ОснованиеПлатежа.гф_Сезон) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ СтрокаТЧ.ОснованиеПлатежа.гф_Сезон.гф_ПрименятьБонусы Тогда
			Продолжить;
		КонецЕсли;
		
		Сезон = СтрокаТЧ.ОснованиеПлатежа.гф_Сезон;
		СтруктураБонусЗаКурс = НайтиБонусПоИстории(Сезон, Справочники.гф_ВидыБонусов.БонусЗаКурс);
		СтруктураБонусЗаРаннююОплату = НайтиБонусПоИстории(Сезон, Справочники.гф_ВидыБонусов.БонусЗаРаннююОплату);
		
		//2.2.1.3.	Договор.ДопРеквизит.Количество дней отсрочки платежа (гф_ДоговорыКонтрагентовКоличествоДнейОтсрочкиПлатежа) > 0
		ДнейОтсрочкиПлатежа = НайтиКоличествоДнейОтсрочкиПлатежа(СтрокаТЧ.ОснованиеПлатежа);
		Если ДнейОтсрочкиПлатежа <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		//СП – сумма платежа. Сумма, указанная в документе «Поступление безналичных ДС»
		СП = СтрокаТЧ.Сумма;
		
		//СПЗ – сумма просроченной задолженности. Задолженность на дату «Поступление безналичных ДС», для которой крайняя дата оплаты (РТУ.Свойства.Срок платежа) < даты «Поступление безналичных ДС».
		СПЗ = НайтиСПЗ(Контрагент, СтрокаТЧ.ОснованиеПлатежа);
		
		Если СтруктураБонусЗаРаннююОплату <> Неопределено Тогда
			//СНПЗ – Задолженность, у которой РТУ.Свойства.Срок платежа >= даты Поступление безналичных ДС,
			//И (РТУ.Свойства.Срок платежа – РегистрСведений.гф_ИсторияИзмененияБонусов. Пороговое значение, дни/руб) <= дата ППВ
			СНПЗ = НайтиСНПЗ(Контрагент, СтрокаТЧ.ОснованиеПлатежа, СтруктураБонусЗаРаннююОплату);
			
			БонусЗаРаннююОплату = (СтрокаТЧ.Сумма - СПЗ - СНПЗ) * СтруктураБонусЗаРаннююОплату.Значение / 100;
			Если БонусЗаРаннююОплату > 0 Тогда
				нз = Движения.гф_БонусыКлиентов.ДобавитьПриход();
				нз.Период = Дата;
				нз.Организация = Организация;
				нз.Контрагент = Контрагент;
				нз.Договор = СтрокаТЧ.ОснованиеПлатежа;
				нз.ВидБонуса = Справочники.гф_ВидыБонусов.БонусЗаРаннююОплату;
				нз.Сумма = БонусЗаРаннююОплату;
				нз.КурсЕвро = КурсВалюты;
				нз.СПЗ = СПЗ;
				нз.СНПЗ = СНПЗ;
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураБонусЗаКурс <> Неопределено Тогда
			Если КурсВалюты < СтруктураБонусЗаКурс.ПороговоеЗначение Тогда
				БонусЗаКурс = (СтрокаТЧ.Сумма - СПЗ) * СтруктураБонусЗаКурс.Значение / 100;
				Если БонусЗаКурс > 0 Тогда
					нз = Движения.гф_БонусыКлиентов.ДобавитьПриход();
					нз.Период = Дата;
					нз.Организация = Организация;
					нз.Контрагент = Контрагент;
					нз.Договор = СтрокаТЧ.ОснованиеПлатежа;
					нз.ВидБонуса = Справочники.гф_ВидыБонусов.БонусЗаКурс;
					нз.Сумма = БонусЗаКурс;
					нз.КурсЕвро = КурсВалюты;
					нз.СПЗ = СПЗ;
					нз.СНПЗ = СНПЗ;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Движения.гф_БонусыКлиентов.Количество() > 0 Тогда
		Движения.гф_БонусыКлиентов.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиКоличествоДнейОтсрочкиПлатежа(Договор)
	Если Не ЗначениеЗаполнено(Договор) Тогда
		Возврат 0;
	КонецЕсли;
	ДопРеквизит = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("ИдентификаторДляФормул",
		"гф_ДоговорыКонтрагентовКоличествоДнейОтсрочкиПлатежа");
	КоличествоДнейОтсрочкиПлатежа = УправлениеСвойствами.ЗначениеСвойства(Договор, ДопРеквизит);
	Если ЗначениеЗаполнено(КоличествоДнейОтсрочкиПлатежа) Тогда
		Возврат КоличествоДнейОтсрочкиПлатежа;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Функция НайтиСПЗ(Контрагент, Договор)
	//СПЗ – сумма просроченной задолженности. Задолженность на дату «Поступление безналичных ДС», для которой крайняя дата оплаты (РТУ.Свойства.Срок платежа) < даты «Поступление безналичных ДС».
	СПЗ = 0;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("ИдентификаторДляФормул", "гф_РТУСрокПлатежа"));
	Запрос.УстановитьПараметр("ДатаПлатежа", Дата);
	Запрос.Текст = "ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ДополнительныеСведения.Значение, РеализацияТоваровУслуг.Дата) КАК РТУСрокПлатежа,
	|	РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ПО (ДополнительныеСведения.Объект = РеализацияТоваровУслуг.Ссылка)
	|		И ДополнительныеСведения.Свойство = &Свойство
	|ГДЕ
	|	РеализацияТоваровУслуг.Проведен
	|	И РеализацияТоваровУслуг.Контрагент = &Контрагент
	|	И ЕСТЬNULL(ДополнительныеСведения.Значение, РеализацияТоваровУслуг.Дата) < &ДатаПлатежа
	|	И РеализацияТоваровУслуг.Договор = &Договор";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат СПЗ;
	КонецЕсли;
	ТЗ = Результат.Выгрузить();
	Возврат ТЗ.Итог("СуммаДокумента");
КонецФункции

Функция НайтиСНПЗ(Контрагент, Договор, СтруктураБонусЗаРаннююОплату)
	//СНПЗ – Задолженность, у которой РТУ.Свойства.Срок платежа>= даты Поступление безналичных ДС,
	//И (РТУ.Свойства.Срок платежа – РегистрСведений.гф_ИсторияИзмененияБонусов. Пороговое значение, дни/руб) <= дата ППВ
	//ПРИМЕЧАНИЕ.
	//В запрос я сравниваю НЕ "Срок платежа - ДНИ". А "Срок платежа" с "дата ПбнДС + ДНИ",
	//т.к. тип значения "Срока платежа" на позволяет ДОБАВИТЬКДАТЕ в самом запросе
	Если СтруктураБонусЗаРаннююОплату = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	ПороговоеЗначение = СтруктураБонусЗаРаннююОплату["ПороговоеЗначение"];
	СНПЗ = 0;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("ИдентификаторДляФормул", "гф_РТУСрокПлатежа"));
	Запрос.УстановитьПараметр("ДатаПлатежа", Дата);
	Запрос.УстановитьПараметр("ПороговоеЗначение", ПороговоеЗначение);
	Запрос.Текст = "ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ДополнительныеСведения.Значение, РеализацияТоваровУслуг.Дата) КАК РТУСрокПлатежа,
	|	РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента
	//|ПОМЕСТИТЬ втДанныеРТУ
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ПО (ДополнительныеСведения.Объект = РеализацияТоваровУслуг.Ссылка)
	|		И ДополнительныеСведения.Свойство = &Свойство
	|ГДЕ
	|	РеализацияТоваровУслуг.Проведен
	|	И РеализацияТоваровУслуг.Контрагент = &Контрагент
	|	И ЕСТЬNULL(ДополнительныеСведения.Значение, РеализацияТоваровУслуг.Дата) >= &ДатаПлатежа
	|	И ЕСТЬNULL(ДополнительныеСведения.Значение, РеализацияТоваровУслуг.Дата) < ДОБАВИТЬКДАТЕ(&ДатаПлатежа, ДЕНЬ, &ПороговоеЗначение)
	|	И РеализацияТоваровУслуг.Договор = &Договор";
	//Результат = Запрос.Выполнить();
	//Запрос.УстановитьПараметр("ДанныеРТУ", Результат.Выгрузить());
	//
	//Запрос.Текст = "ВЫБРАТЬ
	//|	ДанныеРТУ.Ссылка КАК Ссылка,
	//|	ДанныеРТУ.РТУСрокПлатежа КАК РТУСрокПлатежа,
	////|	ДОБАВИТЬКДАТЕ(ДанныеРТУ.РТУСрокПлатежа, ДЕНЬ, &ПороговоеЗначение) КАК РТУСрокПлатежа_,
	////|	ДОБАВИТЬКДАТЕ(ДанныеРТУ.РТУДата, ДЕНЬ, 1) КАК РТУСрокПлатежа_,
	//|	ДанныеРТУ.СуммаДокумента КАК СуммаДокумента
	//|ПОМЕСТИТЬ втДанныеРТУ
	//|ИЗ &ДанныеРТУ КАК ДанныеРТУ";
	//Запрос.Выполнить();
	//
	//Запрос.Текст = "ВЫБРАТЬ
	//|	ДанныеРТУ.Ссылка КАК Ссылка,
	//|	ДанныеРТУ.РТУСрокПлатежа КАК РТУСрокПлатежа,
	//|	ДОБАВИТЬКДАТЕ(&ДатаПлатежа, ДЕНЬ, &ПороговоеЗначение) КАК ДатаПлатежа_,
	////|	ДОБАВИТЬКДАТЕ(ДанныеРТУ.РТУСрокПлатежа, ДЕНЬ, &ПороговоеЗначение) КАК РТУСрокПлатежа_,
	////|	ДОБАВИТЬКДАТЕ(ДанныеРТУ.РТУДата, ДЕНЬ, 1) КАК РТУСрокПлатежа_,
	//|	ДанныеРТУ.СуммаДокумента КАК СуммаДокумента
	//|ИЗ втДанныеРТУ КАК ДанныеРТУ";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат СНПЗ;
	КонецЕсли;
	ТЗ = Результат.Выгрузить();
	Возврат ТЗ.Итог("СуммаДокумента");
КонецФункции

Функция НайтиБонусПоИстории(Сезон, Бонус)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	гф_ИсторияИзмененияБонусовСрезПоследних.Значение КАК Значение,
	|	гф_ИсторияИзмененияБонусовСрезПоследних.ПороговоеЗначение КАК ПороговоеЗначение
	|ИЗ
	|	РегистрСведений.гф_ИсторияИзмененияБонусов.СрезПоследних(&Период) КАК гф_ИсторияИзмененияБонусовСрезПоследних
	|ГДЕ
	|	гф_ИсторияИзмененияБонусовСрезПоследних.Организация = &Организация
	|	И гф_ИсторияИзмененияБонусовСрезПоследних.Сезон = &Сезон
	//|	И гф_ИсторияИзмененияБонусовСрезПоследних.Бонус = ЗНАЧЕНИЕ(Справочник.гф_ВидыБонусов.БонусЗаКурс)";
	|	И гф_ИсторияИзмененияБонусовСрезПоследних.Бонус = &Бонус";
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Сезон", Сезон);
	Запрос.УстановитьПараметр("Бонус", Бонус);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("Значение, ПороговоеЗначение", Выборка.Значение, Выборка.ПороговоеЗначение);
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

//Функция НайтиБонусЗаРаннююОплатуДни(Сезон)
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//	|	гф_ИсторияИзмененияБонусовСрезПоследних.Значение КАК Значение,
//	|	гф_ИсторияИзмененияБонусовСрезПоследних.ПороговоеЗначение КАК ПороговоеЗначение
//	|ИЗ
//	|	РегистрСведений.гф_ИсторияИзмененияБонусов.СрезПоследних(&Период) КАК гф_ИсторияИзмененияБонусовСрезПоследних
//	|ГДЕ
//	|	гф_ИсторияИзмененияБонусовСрезПоследних.Организация = &Организация
//	|	И гф_ИсторияИзмененияБонусовСрезПоследних.Сезон = &Сезон
//	|	И гф_ИсторияИзмененияБонусовСрезПоследних.Бонус = ЗНАЧЕНИЕ(Справочник.гф_ВидыБонусов.БонусЗаРаннююОплату)";
//	Запрос.УстановитьПараметр("Период", Дата);
//	Запрос.УстановитьПараметр("Организация", Организация);
//	Запрос.УстановитьПараметр("Сезон", Сезон);
//	Результат = Запрос.Выполнить();
//	Выборка = Результат.Выбрать();
//	Если Выборка.Следующий() Тогда
//		Возврат Новый Структура("Значение, ПороговоеЗначение", Выборка.Значение, Выборка.ПороговоеЗначение);
//	КонецЕсли;
//	Возврат Неопределено;
//КонецФункции
