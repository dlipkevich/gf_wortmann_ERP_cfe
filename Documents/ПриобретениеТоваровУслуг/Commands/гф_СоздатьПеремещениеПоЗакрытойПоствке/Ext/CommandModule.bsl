#Область ОбработчикиСобытий

&НаКлиенте
Процедура ОбработкаКоманды(ПараметрКоманды, ПараметрыВыполненияКоманды)

	Если Не ЗначениеЗаполнено(ПараметрыВыполненияКоманды.Источник.Параметры.Ключ) Тогда
		ПоказатьПредупреждение(, "Для выполнения команды необходимо записать документ!", 10);
		Возврат;
	КонецЕсли;

	Ссылка = ПараметрыВыполненияКоманды.Источник.Параметры.Ключ;
	
	ПоставкаЗакрыта = ОпределитьЗакрытаЛиПоставка(Ссылка);
	Если Не ПоставкаЗакрыта Тогда
		ПоказатьПредупреждение(, "Поставка не закрыта! 
		|Команда не может быть выполнена.", 10);
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = "";
	СоздатьДокументыПоЗакрытойПоставке(Ссылка, ТекстСообщения);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СоздатьДокументыПоЗакрытойПоставке(ДокПТУ, ТекстСообщения)
	Запрос = Новый Запрос;
	
	#Область Перемещение_товаров
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПеремещениеТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.ДокументОснование = &ДокументОснование
	|	И НЕ ПеремещениеТоваров.ПометкаУдаления";
	Запрос.УстановитьПараметр("ДокументОснование", ДокПТУ);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ОбщегоНазначения.СообщитьПользователю("Уже существует документ " + Выборка["Ссылка"] + "
		|по документу-основанию " + ДокПТУ);
		Возврат;
	КонецЕсли;
	Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокПТУ, "Склад");
	УпЛисты = ДокПТУ.гф_ПродукцияВКоробах.Выгрузить();
	ДанныеЗаполнения = Новый Структура("Основание, Склад", ДокПТУ, Склад);
	обПеремещение = Документы.ПеремещениеТоваров.СоздатьДокумент();
	обПеремещение.Дата = ТекущаяДатаСеанса();
	обПеремещение.Заполнить(ДанныеЗаполнения);
	
	мСклады = _омОбщегоНазначенияКлиентСервер.ПолучитьГлобальноеЗначениеМассив("гф_ГлобальныеЗначенияОсновнойСклад");
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Склады.Ссылка КАК Склад
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Ссылка В(&мСклады)
	|	И Склады.гф_Организация = &Организация";
	Запрос.УстановитьПараметр("мСклады", мСклады);	
	Запрос.УстановитьПараметр("Организация", обПеремещение.Организация);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	обПеремещение.СкладПолучатель = Выборка["Склад"];
	обПеремещение.Статус = перечисления.СтатусыПеремещенийТоваров.Принято;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	т.IDКороба КАК УпаковочныйЛист
	|ПОМЕСТИТЬ втУЛ
	|ИЗ
	|	&УпЛисты КАК т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	докУпаковочныйЛист.Ссылка КАК УпаковочныйЛист,
	|	спрНоменклатура.Артикул КАК Артикул,
	|	докУпаковочныйЛист.Код КАК IDКороба,
	|	докУпаковочныйЛист.ВсегоМест КАК КоличествоПар
	|ИЗ
	|	втУЛ КАК вт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист КАК докУпаковочныйЛист
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК спрВариантыКомплектацииНоменклатуры
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спрНоменклатура
	|				ПО (спрВариантыКомплектацииНоменклатуры.Владелец = спрНоменклатура.Ссылка)
	|			ПО (докУпаковочныйЛист.гф_Комплектация = спрВариантыКомплектацииНоменклатуры.Ссылка)
	|		ПО (вт.УпаковочныйЛист = докУпаковочныйЛист.Ссылка)";
	Запрос.УстановитьПараметр("УпЛисты", УпЛисты);
	Результат = Запрос.Выполнить();
	обПеремещение.гф_ТоварыВКоробах.Загрузить(Результат.Выгрузить());
	Попытка
		обПеремещение.Записать(РежимЗаписиДокумента.Проведение);
		ОбщегоНазначения.СообщитьПользователю("Записан документ " + обПеремещение.Ссылка);
	Исключение
		ОбщегоНазначения.СообщитьПользователю("Не удалось создать документ ""Перемещение товаров"" " + 
		"на основании документа " + ДокПТУ);
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	#КонецОбласти
	
	НужноСоздаватьРасходныйОрдер = Ложь;
	НужноСоздаватьПриходныйОрдер = Ложь;
	
	Ссылка = обПеремещение["Ссылка"];
	Статус = обПеремещение["Статус"];
	СкладОтправитель = обПеремещение["СкладОтправитель"];
	СкладПолучатель = обПеремещение["СкладПолучатель"];
	
	СкладОтправительОрдерный = обПеремещение.ОпределитьОрдерныйЛиСклад(СкладОтправитель);
	СкладПолучательОрдерный  = обПеремещение.ОпределитьОрдерныйЛиСклад(СкладПолучатель);
	
	ЗапросТекст = "ВЫБРАТЬ
	|	регТКП.Номенклатура КАК Номенклатура,
	|	регТКП.Характеристика КАК Характеристика,
	|	регТКП.Назначение КАК Назначение,
	|	регТКП.Склад КАК Склад,
	|	регТКП.Отправитель КАК Отправитель,
	|	регТКП.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	регТКП.КОформлениюПоступленийПоРаспоряжениюПриход КАК КоличествоРОТ,
	|	регТКП.КОформлениюПоступленийПоРаспоряжениюРасход КАК КоличествоПОТ,
	|	ВЫБОР
	|		КОГДА регТКП.КОформлениюПоступленийПоРаспоряжениюПриход <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РОТ,
	|	ВЫБОР
	|		КОГДА регТКП.КОформлениюПоступленийПоРаспоряжениюРасход <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПОТ,
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	|	регТКП.Номенклатура.ЕдиницаИзмерения КАК Упаковка,
	|	&Перемещение КАК ДокументОтгрузки
	|ПОМЕСТИТЬ Обороты
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению.Обороты(, , , ДокументПоступления = &Перемещение) КАК регТКП
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО регТКП.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|			И регТКП.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	|			И регТКП.Номенклатура.ЕдиницаИзмерения = ШтрихкодыНоменклатуры.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Обороты.КоличествоРОТ), 0) КАК КоличествоРОТ,
	|	ЕСТЬNULL(СУММА(Обороты.КоличествоПОТ), 0) КАК КоличествоПОТ
	|ИЗ
	|	Обороты КАК Обороты";
	Запрос.Текст = ЗапросТекст;
	Запрос.УстановитьПараметр("Перемещение", Ссылка);
	ПакетРезультатов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	ОборотыИтоги = ПакетРезультатов[1];
	ВыборкаИтоги = ОборотыИтоги.Выбрать();
	ВыборкаИтоги.Следующий();
	ЕстьТоварыДляРОТ = ВыборкаИтоги["КоличествоРОТ"] <> 0;
	ЕстьТоварыДляПОТ = ВыборкаИтоги["КоличествоПОТ"] <> 0;
	
	
	Если СкладОтправительОрдерный Тогда
		УжеЕстьРасходныйОрдер = обПеремещение.ПроверитьНаличиеОрдераПоОснованию("РасходныйОрдерНаТовары");
		Если Не УжеЕстьРасходныйОрдер 
			И ЕстьТоварыДляРОТ Тогда
			НужноСоздаватьРасходныйОрдер = Истина;	
		КонецЕсли;
	КонецЕсли;
	
	Если СкладПолучательОрдерный Тогда
		УжеЕстьПриходныйОрдер = обПеремещение.ПроверитьНаличиеОрдераПоОснованию("ПриходныйОрдерНаТовары");
		Если Не УжеЕстьПриходныйОрдер
			И ЕстьТоварыДляПОТ Тогда
			НужноСоздаватьПриходныйОрдер = Истина;	
		КонецЕсли;
	КонецЕсли;
	
	#Область Приходный_ордер_на_товары
	Если НужноСоздаватьПриходныйОрдер Тогда
		СтруктураПолейЗаполнения = Новый Структура();
		СтруктураПолейЗаполнения.Вставить("Склад", "СкладПолучатель");
		СтруктураПолейЗаполнения.Вставить("Распоряжение", "Ссылка");
		СтруктураПолейЗаполнения.Вставить("ДатаПоступления");
		СтруктураПолейЗаполнения.Вставить("Отправитель", "СкладОтправитель");
		СтруктураПолейЗаполнения.Вставить("ДатаВходящегоДокумента", "Дата");
		СтруктураПолейЗаполнения.Вставить("НомерВходящегоДокумента", "Номер");
		СтруктураПолейЗаполнения.Вставить("ХозяйственнаяОперация");
		
		СтруктРеквизитов = Новый ФиксированнаяСтруктура(СтруктураПолейЗаполнения);
		ЗначенияРеквизитовОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, СтруктРеквизитов);
		
		ДанныеЗаполнения = Новый Структура(
		"Склад, Помещение, Распоряжение, ДатаПоступления, ЗонаПриемки, СкладскаяОперация, " + 
		"Отправитель, ДатаВходящегоДокумента, НомерВходящегоДокумента, ХозяйственнаяОперация");
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ЗначенияРеквизитовОснования);
		ДанныеЗаполнения["СкладскаяОперация"] = Перечисления.СкладскиеОперации.ПриемкаПоПеремещению;
		
		обПрОрдер = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
		обПрОрдер["Дата"] = ТекущаяДатаСеанса();
		обПрОрдер.Заполнить(ДанныеЗаполнения);
		обПрОрдер["Ответственный"] = Пользователи.АвторизованныйПользователь();
		обПрОрдер["Статус"] = Перечисления.СтатусыПриходныхОрдеров.Принят;
		
		СкладПолучательКоробочный = УправлениеСвойствами.ЗначениеСвойства(СкладПолучатель, "гф_СкладыТоварыВКоробах") = Истина;
		СкладОтправительКоробочный = УправлениеСвойствами.ЗначениеСвойства(СкладОтправитель, "гф_СкладыТоварыВКоробах") = Истина;
		
		Если СкладПолучательКоробочный Тогда
			// тч. товары заполнена в обработке заполнения и не требует изменения
		Иначе	
			обПрОрдер.Товары.Очистить();
			обПрОрдер["РежимПросмотраПоТоварам"] = 1;
			ТоварыКПоступлению = ПакетРезультатов[0].Выгрузить();
			мСтрок = ТоварыКПоступлению.НайтиСтроки(Новый Структура("ПОТ", Истина));
			обПрОрдер.ВсегоМест = ВыборкаИтоги["КоличествоПОТ"];
			Для каждого эл Из мСтрок Цикл
				нс = обПрОрдер.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(нс, эл);
				нс["КоличествоУпаковок"] =эл["КоличествоПОТ"];
				нс["Количество"] =эл["КоличествоПОТ"];
			КонецЦикла;
		КонецЕсли;
		
		Распоряжение = обПрОрдер.Распоряжение;
		ЗаполнятьШКПриходногоОрдера = Истина;
		Если СкладОтправительКоробочный И СкладПолучательКоробочный Тогда
			// заполняем Агрегатами кодов маркировки
			лТовары = обПрОрдер.Товары.Выгрузить();
			ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	т.УпаковочныйЛист КАК УпаковочныйЛист,
			|	т.ЭтоУпаковочныйЛист
			|ПОМЕСТИТЬ УпЛисты
			|ИЗ
			|	&Товары КАК т
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ШтрихкодыУпаковокТоваров.Ссылка КАК ШтрихкодУпаковки
			|ИЗ
			|	УпЛисты КАК УпЛисты
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
			|		ПО УпЛисты.УпаковочныйЛист.Код = ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода
			|ГДЕ
			|	УпЛисты.ЭтоУпаковочныйЛист
			|	И ШтрихкодыУпаковокТоваров.Ссылка ЕСТЬ НЕ NULL 
			|	И ШтрихкодыУпаковокТоваров.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка)";
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("Товары", лТовары);
			
		ИначеЕсли  СкладОтправительКоробочный И Не СкладПолучательКоробочный Тогда
			// заполняем Кодами маркировки
			ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК ШтрихкодУпаковки
			|ИЗ
			|	Документ.ПеремещениеТоваров.гф_ТоварыВКоробах КАК ПеремещениеТоваровгф_ТоварыВКоробах
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
			|		ПО ПеремещениеТоваровгф_ТоварыВКоробах.УпаковочныйЛист.Код = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка.ЗначениеШтрихкода
			|ГДЕ
			|	ПеремещениеТоваровгф_ТоварыВКоробах.Ссылка = &Распоряжение";
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
		Иначе
			ЗаполнятьШКПриходногоОрдера = Ложь;
		КонецЕсли;
		
		Если ЗаполнятьШКПриходногоОрдера Тогда
			Результат = Запрос.Выполнить();
			Если Не Результат.Пустой() Тогда
				тзШтрихкоды = Результат.Выгрузить();
				обПрОрдер.ШтрихкодыУпаковок.Загрузить(тзШтрихкоды);
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			обПрОрдер.Записать(РежимЗаписиДокумента.Проведение);
			ОбщегоНазначения.СообщитьПользователю("Записан документ " + обПрОрдер.Ссылка);
		Исключение
			ОбщегоНазначения.СообщитьПользователю("Не удалось записать документ ""Приходный ордер на товары""");
			ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	#КонецОбласти
	
КонецПроцедуры

&НаСервере 
Функция ОпределитьЗакрытаЛиПоставка(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	гф_СтатусОтгрузкиСрезПоследних.ГотовоКПодачеГТД КАК ГотовоКПодачеГТД
	|ИЗ
	|	РегистрСведений.гф_СтатусОтгрузки.СрезПоследних(, Документ = &Документ) КАК гф_СтатусОтгрузкиСрезПоследних";
	Запрос.УстановитьПараметр("Документ", Ссылка);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка["ГотовоКПодачеГТД"];
	
КонецФункции

#КонецОбласти
