#Если НЕ МобильныйАвтономныйСервер Тогда
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// #wortmann {
// #Монитор логиста
// Запись истории статусов ордеров
// Галфинд Окунев 2022/09/13
&После("ПриЗаписи")
Процедура гф_ПриЗаписи(Отказ)
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	гф_ИсторияСтатусовРасходныхОрдеровСрезПоследних.Статус КАК Статус
	               |ИЗ
	               |	РегистрСведений.гф_ИсторияСтатусовРасходныхОрдеров.СрезПоследних(, Объект = &Ссылка) КАК гф_ИсторияСтатусовРасходныхОрдеровСрезПоследних
	               |ГДЕ
	               |	гф_ИсторияСтатусовРасходныхОрдеровСрезПоследних.Статус = &Статус";
	
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Запрос.Параметры.Вставить("Статус", Статус);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		
		Запись = РегистрыСведений.гф_ИсторияСтатусовРасходныхОрдеров.СоздатьМенеджерЗаписи();
		
		Запись.Период			= ТекущаяДатаСеанса();
		Запись.Активность		= Истина;
		Запись.Объект			= Ссылка;
		Запись.Статус			= Статус;
		Запись.СтатусИзменил	= Пользователи.ТекущийПользователь();
		
		Запись.Записать();
		
	КонецЕсли;	
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Заполнение штрихкодов упаковк из распоряжений на перемещение
// Галфинд Sakovich 2022/10/22
&После("ПередЗаписью")
Процедура гф_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		гф_ЗаполнитьОтгружаемыеТовары();	
	КонецЕсли;
	
КонецПроцедуры // } #wortmann

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура гф_ЗаполнитьОтгружаемыеТовары()

	ЭтоКоробочныйСклад = УправлениеСвойствами.ЗначениеСвойства(Склад, "гф_СкладыТоварыВКоробах") = Истина;
	Если ЭтоКоробочныйСклад Тогда
		ЗаполнитьОтгружаемыеТоварыПоТоварамВКоробахПеремещения();
	Иначе
		ЗаполнитьОтгружаемыеТоварыПоТоварамПеремещения();
		//===========================^^^ КОНЕЦ ОТЛАДКИ ^^^===================01.11.2022 16:10:15=============| SBB
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьОтгружаемыеТоварыПоТоварамВКоробахПеремещения()
	
	Распоряжения = ТоварыПоРаспоряжениям.Выгрузить();
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Распоряжения.Распоряжение КАК Распоряжение
	|ПОМЕСТИТЬ Распоряжения
	|ИЗ
	|	&Распоряжения КАК Распоряжения
	|ГДЕ 
	|	ВЫРАЗИТЬ(Распоряжения.Распоряжение КАК Документ.ПеремещениеТоваров) ЕСТЬ НЕ NULL
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПеремещениеТоваровгф_ТоварыВКоробах.УпаковочныйЛист КАК УпаковочныйЛистРодитель,
	|	УпаковочныйЛистТовары.Номенклатура КАК Номенклатура,
	|	УпаковочныйЛистТовары.Характеристика КАК Характеристика,
	|	УпаковочныйЛистТовары.Упаковка КАК Упаковка,
	|	УпаковочныйЛистТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	УпаковочныйЛистТовары.Количество КАК Количество,
	|	УпаковочныйЛистТовары.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
	|	УпаковочныйЛистТовары.Назначение КАК Назначение,
	|Значение(Перечисление.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать) КАК Действие
	|ИЗ
	|	Распоряжения КАК Распоряжения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.гф_ТоварыВКоробах КАК ПеремещениеТоваровгф_ТоварыВКоробах
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
	|			ПО (ПеремещениеТоваровгф_ТоварыВКоробах.УпаковочныйЛист = УпаковочныйЛистТовары.Ссылка)
	|		ПО (Распоряжения.Распоряжение = ПеремещениеТоваровгф_ТоварыВКоробах.Ссылка)
	|ГДЕ
	|	НЕ УпаковочныйЛистТовары.ЭтоУпаковочныйЛист
	|ИТОГИ ПО
	|	УпаковочныйЛистРодитель");
	
	Запрос.УстановитьПараметр("Распоряжения", Распоряжения);
	РезультатПоУпаковочнымЛистам = Запрос.Выполнить();
	
	Если Не РезультатПоУпаковочнымЛистам.Пустой() Тогда
		ОтгружаемыеТовары.Очистить();
		ВыборкаИтогиПоУпЛист = РезультатПоУпаковочнымЛистам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаИтогиПоУпЛист.Следующий() Цикл
			нс = ОтгружаемыеТовары.Добавить();
			нс["УпаковочныйЛист"] = ВыборкаИтогиПоУпЛист.УпаковочныйЛистРодитель;
			нс["ЭтоУпаковочныйЛист"] = Истина;
			ВыборкаТовары = ВыборкаИтогиПоУпЛист.Выбрать();
			Пока ВыборкаТовары.Следующий() Цикл
				нс = ОтгружаемыеТовары.Добавить();
				ЗаполнитьЗначенияСвойств(нс, ВыборкаТовары);
			КонецЦикла;
		КонецЦикла;
		Документы.РасходныйОрдерНаТовары.ИзменитьТоварыПоРаспоряжениямПоОтгружаемымТоварам(ЭтотОбъект, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОтгружаемыеТоварыПоТоварамПеремещения()
	
	Распоряжения = ТоварыПоРаспоряжениям.Выгрузить();
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Распоряжения.Распоряжение КАК Распоряжение
	|ПОМЕСТИТЬ Распоряжения
	|ИЗ
	|	&Распоряжения КАК Распоряжения
	|ГДЕ 
	|	ВЫРАЗИТЬ(Распоряжения.Распоряжение КАК Документ.ПеремещениеТоваров) ЕСТЬ НЕ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка) КАК УпаковочныйЛистРодитель,
	|	ПеремещениеТоваровТовары.Номенклатура КАК Номенклатура,
	|	ПеремещениеТоваровТовары.Характеристика КАК Характеристика,
	|	ПеремещениеТоваровТовары.Упаковка КАК Упаковка,
	|	СУММА(ПеремещениеТоваровТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(ПеремещениеТоваровТовары.Количество) КАК Количество,
	|	ПеремещениеТоваровТовары.Назначение КАК Назначение,
	|	ЛОЖЬ КАК ЭтоУпаковочныйЛист,
	|	Значение(Перечисление.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать) КАК Действие
	|ИЗ
	|	Распоряжения КАК Распоряжения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|		ПО Распоряжения.Распоряжение = ПеремещениеТоваровТовары.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПеремещениеТоваровТовары.Номенклатура,
	|	ПеремещениеТоваровТовары.Характеристика,
	|	ПеремещениеТоваровТовары.Упаковка,
	|	ПеремещениеТоваровТовары.Назначение");
	
	Запрос.УстановитьПараметр("Распоряжения", Распоряжения);
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ОтгружаемыеТовары.Очистить();
		ВыборкаТовары = Результат.Выбрать();
		Пока ВыборкаТовары.Следующий() Цикл
			нс = ОтгружаемыеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(нс, ВыборкаТовары);
		КонецЦикла;
		Документы.РасходныйОрдерНаТовары.ИзменитьТоварыПоРаспоряжениямПоОтгружаемымТоварам(ЭтотОбъект, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
#КонецЕсли