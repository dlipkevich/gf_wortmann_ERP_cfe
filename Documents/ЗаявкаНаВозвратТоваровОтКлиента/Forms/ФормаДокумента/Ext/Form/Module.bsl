
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура гф_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	// #wortmann {
	// #1.1. Регистрация возвратов
	// Галфинд Sakovich 2022/11/11
	гф_ДобавитьЭлементыФормы();
	// } #wortmann
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура гф_ЗагрузитьТоварыИзФайла(Команда)
	Если Объект.ВозвращаемыеТовары.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Табличная часть ""Возвращаемые товары"" уже содержит строки и будет очищена. Продолжить?'");
		ДопПараметры = Новый Структура() ;
		Оповещение = Новый ОписаниеОповещения("гф_ВопросЗагрузитьТоварыИзФайлаЗавершение", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Иначе
		ЗагрузитьТоварыИзФайлаПо_ГТИН_КМ();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура гф_ВопросЗагрузитьТоварыИзФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ВозвращаемыеТовары.Очистить();
		ЗагрузитьТоварыИзФайлаПо_ГТИН_КМ();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТоварыИзФайлаПо_ГТИН_КМ()

	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = 
		"Документ.ЗаявкаНаВозвратТоваровОтКлиента.ТабличнаяЧасть.ВозвращаемыеТовары";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка списка товаров из файла'");
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", "гф_ЗагрузитьТоварыИзФайла");
	ПараметрыЗагрузки.ДополнительныеПараметры = ДополнительныеПараметры;
	Оповещение = Новый ОписаниеОповещения("гф_ЗагрузитьТоварыИзФайлаЗавершение", ЭтотОбъект);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура гф_ПроверитьКМ(Команда)
	// 1. установка служебного Назначения «Холд (временно)»
	
	// 2. заполнение в ТЧ «Товары» реквизитов «Документ продажи», «Цена», «Сумма»
	// из документа продажи для сопоставленных кодов маркировки
	// (Документ продажи устанавливается из записи РН «Движение кодов маркировки организации».
	// В случае возврата товара с кодами маркировки, которые не передавались клиенту,
	// но владельцем которых он является, устанавливается документ последней продажи клиенту товара с этим GTIN.
	
	// 3. проверка статусов и владельца принятых кодов   маркировки через ИС МП
	
	// 4. сверки принятых кодов маркировки с кодами маркировки, которые были отправлены клиенту при отгрузке товара
	// В случае возврата товара с кодами маркировки, которые не передавались клиенту, 
	// но владельцем которых он является, коды маркировки записываются в справочник «Штрихкоды товаров и упаковок»

КонецПроцедуры

&НаКлиенте
Процедура гф_СоздатьПриходныйОрдерНаТовары(Команда)
	
	Если Объект.Ссылка.Пустая()
		ИЛИ Не Объект.Проведен Тогда
		ПоказатьПредупреждение( , "Для создания Приходного ордера необходимо провести документ.", 30, "Проведение документа");
		Возврат;
	КонецЕсли;
	ОрдераПоРаспоряжению = гф_ПроверитьНаличиеПриходногоОрдераПоРаспоряжению(Объект.Ссылка);
	Если ОрдераПоРаспоряжению <> Неопределено Тогда
		ТекстВопроса = НСтр("ru='Уже существуют документы
		|(" + ОрдераПоРаспоряжению + "),
		|созданные на основании данной заявки на возврат. Продолжить?'");
		ДопПараметры = Новый Структура();
		Оповещение = Новый ОписаниеОповещения("гф_ВопросСоздатьПриходныйОрдерЗавершение", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Иначе
		СоздатьПриходныйОрдерНаТоварыНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция гф_ПроверитьНаличиеПриходногоОрдераПоРаспоряжению(Распоряжение)
	//СписокСсылок = Новый СписокЗначений;
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ПриходныйОрдерНаТовары.Ссылка) КАК Ссылка
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|ГДЕ
	|	ПриходныйОрдерНаТовары.Распоряжение = &Распоряжение
	|	И НЕ ПриходныйОрдерНаТовары.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	мСтрок = Новый Массив;
	Пока Выборка.Следующий() Цикл
		мСтрок.Добавить(Выборка["Ссылка"]);
	КонецЦикла;
	СписокСсылок = СтрСоединить(мСтрок, Символы.ПС);
	
	Возврат СписокСсылок;
	
КонецФункции


&НаКлиенте
Процедура гф_ЗаказатьКМ(Команда)
	// обработчик команды
КонецПроцедуры

&НаКлиенте
Процедура гф_ЗагрузитьТоварыИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	гф_ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных);
	
	Для каждого стрТЧ Из Объект.ВозвращаемыеТовары Цикл
		Идентификатор = стрТЧ.ПолучитьИдентификатор();
		Элементы.ВозвращаемыеТовары.ТекущаяСтрока = Идентификатор;
		ВозвращаемыеТоварыНоменклатураПриИзменении(Элементы.ВозвращаемыеТовары);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура гф_ВопросСоздатьПриходныйОрдерЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		СоздатьПриходныйОрдерНаТоварыНаСервере();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СоздатьПриходныйОрдерНаТоварыНаСервере()
	// создается документ ПриходныйОрдрерНаТовары с видом операции «Возврат не принятых получателем товаров».
	// Отправителем является Клиент. Табличная часть заполняется сопоставленными строками ТЧ «Товары» документа
	// «Заявка на возврат товаров от клиента».
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Склад", Объект.Склад);
	ДанныеЗаполнения.Вставить("Помещение");
	ДанныеЗаполнения.Вставить("Распоряжение", Объект.Ссылка);
	ДанныеЗаполнения.Вставить("ДатаПоступления", Объект.ДатаПоступления);
	ДанныеЗаполнения.Вставить("ЗонаПриемки");
	ДанныеЗаполнения.Вставить("СкладскаяОперация");
	ДанныеЗаполнения.Вставить("Отправитель", Объект.Партнер);
	ДанныеЗаполнения.Вставить("ДатаВходящегоДокумента");
	ДанныеЗаполнения.Вставить("НомерВходящегоДокумента");
	ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	ДанныеЗаполнения.Вставить("Ответственный", Пользователи.ТекущийПользователь());
	
	обПрихОрдер = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
	обПрихОрдер.Дата = ТекущаяДатаСеанса();
	ЗаполнитьЗначенияСвойств(обПрихОрдер, ДанныеЗаполнения);
	обПрихОрдер.СкладскаяОперация = 
	СкладыКлиентСервер.СкладскаяОперацияПриемкиПоХозяйственнойОперации(обПрихОрдер.ХозяйственнаяОперация);
	тзВозращаемыеТовары = Объект.ВозвращаемыеТовары.Выгрузить();
	гф_ЗаполнитьПриходныйОрдерТовары(обПрихОрдер, тзВозращаемыеТовары);
	
	ОбъектМетаданныхСтатус = обПрихОрдер.Метаданные().Реквизиты.Статус; // ОбъектМетаданныхРеквизит
	обПрихОрдер.Статус = ОбъектМетаданныхСтатус.ЗначениеЗаполнения;
	
	обПрихОрдер.Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(обПрихОрдер.Склад);
	Если ЗначениеЗаполнено(обПрихОрдер.Склад) Тогда
		Если СкладыСервер.ИспользоватьАдресноеХранение(обПрихОрдер.Склад, обПрихОрдер.Помещение, обПрихОрдер.Дата) Тогда
			обПрихОрдер.ЗонаПриемки = 
			Справочники.СкладскиеЯчейки.ЗонаПриемкиПоУмолчанию(обПрихОрдер.Склад,обПрихОрдер.Помещение,обПрихОрдер.ЗонаПриемки);
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		обПрихОрдер.Записать(РежимЗаписиДокумента.Проведение);
		ТекстСообщения = "Создан документ " + обПрихОрдер.Ссылка;
	Исключение
		ТекстСообщения = "Не удалось создать документ ""Приходный ордер на товары!""";
	КонецПопытки;
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаСервере
Процедура гф_ЗаполнитьПриходныйОрдерТовары(обОрдер, тзТовары)
	
	обОрдер.Товары.Очистить();
	ПараметрыОтбора = Новый Структура("Отменено", Ложь);
	мСтрокТовары = тзТовары.НайтиСтроки(ПараметрыОтбора);
	тзТоварыКЗаполнению = тзТовары.Скопировать(мСтрокТовары);
	
	ВыборкаШтрихкодов = гф_ПолучитьШтрихкодыНоменклатуры(тзТоварыКЗаполнению);
	
	Для каждого стрТЗ Из тзТоварыКЗаполнению Цикл
		нс = обОрдер.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(нс, стрТЗ, 
		"Номенклатура, Характеристика, Назначение, Количество, КоличествоУпаковок, гф_IDКороба");
		ВыборкаШтрихкодов.Сбросить();
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика", нс["Номенклатура"], нс["Характеристика"]);
		Если ВыборкаШтрихкодов.НайтиСледующий(СтруктураПоиска) Тогда
			нс["Штрихкод"] = ВыборкаШтрихкодов["Штрихкод"];
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Функция гф_ПолучитьШтрихкодыНоменклатуры(тзТоварыКЗаполнению)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	т.Номенклатура КАК Номенклатура,
	|	т.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТоварыКЗаполнению
	|ИЗ
	|	&тзТоварыКЗаполнению КАК т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """") КАК Штрихкод,
	|	ТоварыКЗаполнению.Номенклатура КАК Номенклатура,
	|	ТоварыКЗаполнению.Характеристика КАК Характеристика
	|ИЗ
	|	ТоварыКЗаполнению КАК ТоварыКЗаполнению
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ТоварыКЗаполнению.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|			И ТоварыКЗаполнению.Характеристика = ШтрихкодыНоменклатуры.Характеристика");
	Запрос.УстановитьПараметр("тзТоварыКЗаполнению", тзТоварыКЗаполнению);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Возврат Выборка;
		
КонецФункции

&НаСервере
Процедура гф_ДобавитьЭлементыФормы()

	ТипГруппаФормы = Тип("ГруппаФормы");
	ТипПолеФормы = Тип("ПолеФормы");
	ТипКнопкаФормы = Тип("КнопкаФормы");
	ТипТаблицаФормы = Тип("ТаблицаФормы");
	
	// статус проверки возврата
	Элементы.ГруппаСтатус.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НовыйЭлемент  = Элементы.Добавить("гф_СтатусПроверкиВозврата", ТипПолеФормы, Элементы.ГруппаСтатус);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;      
	НовыйЭлемент.ПутьКДанным = "Объект.гф_СтатусСверкиВозврата";
	
	// таблица гф_ТоварыВКоробах
	НовыйЭлемент = Элементы.Вставить("гф_СтраницаТоварыВКоробах", ТипГруппаФормы, Элементы.ГруппаСтраницы, 
					Элементы.ГруппаЗаменяющиеТовары);
	НовыйЭлемент.Вид = ВидГруппыФормы.Страница;
	НовыйЭлемент.Заголовок = "Товары в коробах";
	НовыйЭлемент.Подсказка = "Товары в коробах";
	НовыйЭлемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НовыйЭлемент.ПутьКДаннымЗаголовка = "Объект.гф_ТоварыВКоробах.КоличествоСтрок";
	
	ТаблицаФормы = Элементы.Вставить("гф_ТоварыВКоробах", ТипТаблицаФормы, Элементы.гф_СтраницаТоварыВКоробах);
	ТаблицаФормы.ПутьКДанным = "Объект.гф_ТоварыВКоробах";

	НовыйЭлемент  = Элементы.Добавить("гф_ТоварыВКоробахНомерСтроки", ТипПолеФормы, ТаблицаФормы);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;      
	НовыйЭлемент.ПутьКДанным = "Объект.гф_ТоварыВКоробах.НомерСтроки";

	НовыйЭлемент  = Элементы.Добавить("гф_ТоварыВКоробахУпаковочныйЛист", ТипПолеФормы, ТаблицаФормы);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;      
	НовыйЭлемент.ПутьКДанным = "Объект.гф_ТоварыВКоробах.УпаковочныйЛист";
	
	НовыйЭлемент  = Элементы.Добавить("гф_ТоварыВКоробахАртикул", ТипПолеФормы, ТаблицаФормы);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;      
	НовыйЭлемент.ПутьКДанным = "Объект.гф_ТоварыВКоробах.Артикул";
	
	НовыйЭлемент  = Элементы.Добавить("гф_ТоварыВКоробахIDКороба", ТипПолеФормы, ТаблицаФормы);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;      
	НовыйЭлемент.ПутьКДанным = "Объект.гф_ТоварыВКоробах.IDКороба";

	НовыйЭлемент  = Элементы.Добавить("гф_ТоварыВКоробахКоличествоПар", ТипПолеФормы, ТаблицаФормы);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;      
	НовыйЭлемент.ПутьКДанным = "Объект.гф_ТоварыВКоробах.КоличествоПар";
	
	// реквзизиты в таблице ВозвращаемыеТовары
	НовыйЭлемент  = Элементы.Добавить("гф_ВозвращаемыеТоварыIDКороба", ТипПолеФормы, Элементы.ВозвращаемыеТовары);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;      
	НовыйЭлемент.ПутьКДанным = "Объект.ВозвращаемыеТовары.гф_IDКороба";
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипУпаковки", Перечисления.ТипыУпаковок.МаркированныйТовар);
	мПараметрыВыбора = Новый Массив();
	мПараметрыВыбора.Добавить(НовыйПараметр);
	фмПараметрыВыбора = Новый ФиксированныйМассив(мПараметрыВыбора);
	
	НовыйЭлемент  = Элементы.Добавить("гф_ВозвращаемыеТоварыПринятыеКМ", ТипПолеФормы, Элементы.ВозвращаемыеТовары);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;      
	НовыйЭлемент.ПутьКДанным = "Объект.ВозвращаемыеТовары.гф_ПринятыеКМ";
	НовыйЭлемент.ПараметрыВыбора = фмПараметрыВыбора;

	НовыйЭлемент  = Элементы.Добавить("гф_ВозвращаемыеТоварыОтгруженныеКМ", ТипПолеФормы, Элементы.ВозвращаемыеТовары);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;      
	НовыйЭлемент.ПутьКДанным = "Объект.ВозвращаемыеТовары.гф_ОтгруженныеКМ";
	НовыйЭлемент.ПараметрыВыбора = фмПараметрыВыбора;
	
	НовыйЭлемент  = Элементы.Добавить("гф_ПринятСкладомОтгруженныеКМ", ТипПолеФормы, Элементы.ВозвращаемыеТовары);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлемент.Заголовок = "Принят складом";
	НовыйЭлемент.ПутьКДанным = "Объект.ВозвращаемыеТовары.гф_ПринятСкладом";

	НовыйЭлемент  = Элементы.Добавить("гф_ШтрихкодИзФайлаОтгруженныеКМ", ТипПолеФормы, Элементы.ВозвращаемыеТовары);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;      
	НовыйЭлемент.ПутьКДанным = "Объект.ВозвращаемыеТовары.гф_ШтрихкодИзФайла";
	НовыйЭлемент.Видимость = Ложь;
	
	// группа команд для регистрации возвратов
	НовыйЭлемент = Элементы.Добавить("гф_ГруппаКнопокРегистрацияВозвратов",
		ТипГруппаФормы,
		Элементы.ВозвращаемыеТовары.КоманднаяПанель);
	НовыйЭлемент.Вид = ВидГруппыФормы.Подменю;
	НовыйЭлемент.Заголовок = "Регистрация возвратов (доп.)";
		
	// команда механизма загрузки из файла
	Команда = Команды.Добавить("гф_ЗагрузитьТоварыИзФайла");
	Команда.Заголовок = "Загрузить из файла по коду маркировки и GTIN";
	Команда.Действие = "гф_ЗагрузитьТоварыИзФайла";
	Команда.ИзменяетСохраняемыеДанные = Истина;
	Команда.Картинка = Команды.ЗагрузитьВозвращаемыеТоварыИзВнешнегоФайла.Картинка;
	Команда.Отображение = ОтображениеКнопки.КартинкаИТекст;
	
	НоваяКнопка = Элементы.Вставить("гф_КнопкаЗагрузитьТоварыИзФайла", 
		ТипКнопкаФормы, 
		Элементы.гф_ГруппаКнопокРегистрацияВозвратов);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "гф_ЗагрузитьТоварыИзФайла";
	
	// команда проверки возвращаемых товаров
	Команда = Команды.Добавить("гф_ПроверитьКМ");
	Команда.Заголовок = "Проверить КМ";
	Команда.Действие = "гф_ПроверитьКМ";
	Команда.ИзменяетСохраняемыеДанные = Истина;
	
	НоваяКнопка = Элементы.Вставить("гф_КнопкаПроверитьКМ", 
		ТипКнопкаФормы,
		Элементы.гф_ГруппаКнопокРегистрацияВозвратов);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "гф_ПроверитьКМ";

	// команда создания приходного ордера
	Команда = Команды.Добавить("гф_СоздатьПриходныйОрдерНаТовары");
	Команда.Заголовок = "Создать приходный ордер на товары";
	Команда.Действие = "гф_СоздатьПриходныйОрдерНаТовары";
	Команда.ИзменяетСохраняемыеДанные = Истина;
	
	НоваяКнопка = Элементы.Вставить("гф_КнопкаСоздатьПриходныйОрдерНаТовары", 
		ТипКнопкаФормы,
		Элементы.гф_ГруппаКнопокРегистрацияВозвратов);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "гф_СоздатьПриходныйОрдерНаТовары";
	
	// команда создания заказа на эмиссию кодов маркировки
	Команда = Команды.Добавить("гф_ЗаказатьКМ");
	Команда.Заголовок = "Заказать КМ";
	Команда.Действие = "гф_ЗаказатьКМ";
	Команда.ИзменяетСохраняемыеДанные = Истина;
	
	НоваяКнопка = Элементы.Вставить("гф_КнопкаЗаказатьКМ", 
		ТипКнопкаФормы,
		Элементы.гф_ГруппаКнопокРегистрацияВозвратов);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "гф_ЗаказатьКМ";

КонецПроцедуры

&НаСервере
Процедура гф_ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);

	ТоварыДобавлены = Ложь;
	Для каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда 
			Продолжить;
		КонецЕсли;
		
		нс = Объект.ВозвращаемыеТовары.Добавить();
		нс.Номенклатура = СтрокаТаблицы.Номенклатура;
		нс.Характеристика = СтрокаТаблицы.Характеристика;
		нс.Количество = СтрокаТаблицы.Количество;
		нс.КоличествоУпаковок = СтрокаТаблицы.Количество;
		нс.гф_ПринятыеКМ = СтрокаТаблицы.гф_ПринятыеКМ;
		нс.гф_ШтрихкодИзФайла = СтрокаТаблицы.гф_ШтрихкодИзФайла;
		
		нс.ДатаПоступления = Объект.ДатаПоступления;
		ТоварыДобавлены = Истина;
	КонецЦикла;
	
		Если ТоварыДобавлены Тогда
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти