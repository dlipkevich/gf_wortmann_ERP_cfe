
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура гф_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	// #wortmann {
	// #1.1. Регистрация возвратов
	// Галфинд Sakovich 2022/11/11
	гф_ДобавитьЭлементыФормы();
	ЭтотОбъект["СтруктураЗаказНаЭмиссиюКодовМаркировки"] = Новый Структура;
	// } #wortmann
	
	// #wortmann {
	// #1.1. Регистрация возвратов
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=812ebcee7bda45d711edc9317888e8d6
	// скрываем типовые страницы "Заменяющие товары" и "Доставка замены"
	// Галфинд Sakovich 2023/03/23
	Элементы.СтраницаДоставка.Видимость = Ложь;
	Элементы.ГруппаЗаменяющиеТовары.Видимость = Ложь;
	
	// переопределяем Компенсацию (исключено значение ЗаменитьТовары)
	МассивСпособовКомпенсаций = Новый Массив;
	МассивСпособовКомпенсаций.Добавить(Перечисления.СпособыКомпенсацииВозвратовТоваров.ВернутьДенежныеСредства);
	МассивСпособовКомпенсаций.Добавить(Перечисления.СпособыКомпенсацииВозвратовТоваров.ОставитьВКачествеАванса);
	Элементы.СпособКомпенсации.СписокВыбора.ЗагрузитьЗначения(МассивСпособовКомпенсаций);
	// для нового по умолчанию устанавливаем значение способа компесации:
	Если Параметры.Ключ.Пустая() Тогда
		Объект.СпособКомпенсации = Перечисления.СпособыКомпенсацииВозвратовТоваров.ОставитьВКачествеАванса;
	КонецЕсли;
	// } #wortmann
	
	// #wortmann {
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee0388488549ea
	// Галфинд_Домнышева 2023/06/08
	ДобавитьУсловноеОформление();
	// } #wortmann
КонецПроцедуры

&НаСервере
Процедура гф_ПослеЗаписиНаСервереПосле(ТекущийОбъект, ПараметрыЗаписи)
	
	// #wortmann {
	// #1.1. Регистрация возвратов
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=812ebcee7bda45d711edc9317888e8d6
	// Галфинд Sakovich 2023/03/23
	УстановитьПривилегированныйРежим(Истина);   //Добавлено  Галфинд \ Sakovich 02.05.2023
	Если Не (ПараметрыЗаписи["РежимЗаписи"] = РежимЗаписиДокумента.Проведение И 
		ТекущийОбъект["Статус"] = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату) Тогда
		Возврат;
	КонецЕсли;
	// #wortmann {
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8131bcee7bda45d711edd37b5946b51b
	// ++ Галфинд_Домнышева_КР_20_04_2023
	ДокументыРеализации = ТекущийОбъект.ВозвращаемыеТовары.Выгрузить(, "НомерСтроки, ДокументРеализации");
	МассивСтрок = Новый Массив;
	Для каждого Стр Из ДокументыРеализации Цикл
		Если НЕ ЗначениеЗаполнено(Стр.ДокументРеализации) Тогда 
			МассивСтрок.Добавить(Стр.НомерСтроки);
		КонецЕсли;
	КонецЦикла; 
	Если МассивСтрок.Количество() > 0 Тогда
		ТекстСообщения = "Для строк " + СтрСоединить(МассивСтрок, ", ") + " не выбран Документ Продажи "
		+ " Приходный ордер не будет сформирован";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	// } #wortmann
	ТекОбъектСсылка = ТекущийОбъект.Ссылка;
	ОрдераПоРаспоряжению = гф_ПроверитьНаличиеПриходногоОрдераПоРаспоряжению(ТекОбъектСсылка);

	Если ОрдераПоРаспоряжению <> Неопределено Тогда
		ТекстСообщения = "Уже существуют документы, созданные на основании данной заявки на возврат.
		|Приходный ордер на товары НЕ СОЗДАН.";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Документы.ЗаявкаНаВозвратТоваровОтКлиента.гф_СоздатьПриходныйОрдерНаТовары(ТекОбъектСсылка);
	// } #wortmann
	ЭтотОбъект.Прочитать();
КонецПроцедуры

&НаКлиенте
Процедура гф_ВозвращаемыеТоварыПриИзмененииПосле(Элемент)
	// #wortmann {
	// #1.1. Регистрация возвратов
	// Галфинд Sakovich 2022/11/11
	ПроверитьЗаполнитьКМСтрокой();
	// } #wortmann
КонецПроцедуры

&НаКлиенте
Процедура гф_ВозвращаемыеТоварыПередУдалениемПеред(Элемент, Отказ)
	// #wortmann {
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee0388488549ea
	// Галфинд_Домнышева 2023/06/08
	Отказ = Истина;
	
	ИдентификаторыСтрок = Элемент.ВыделенныеСтроки;

	ДЛя Каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		
		НайденнаяУдаляемаяСтрока = Объект.ВозвращаемыеТовары.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если НЕ НайденнаяУдаляемаяСтрока.гф_ПринятСкладом Тогда
			Объект.ВозвращаемыеТовары.Удалить(НайденнаяУдаляемаяСтрока);  
		КонецЕсли;
	КонецЦикла;
	// } #wortmann
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура гф_ЗагрузитьТоварыИзФайла(Команда)
	Если Объект.ВозвращаемыеТовары.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Табличная часть ""Возвращаемые товары"" уже содержит строки и будет очищена. Продолжить?'");
		ДопПараметры = Новый Структура() ;
		Оповещение = Новый ОписаниеОповещения("гф_ВопросЗагрузитьТоварыИзФайлаЗавершение", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Иначе
		ЗагрузитьТоварыИзФайлаПо_ГТИН_КМ();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура гф_ВопросЗагрузитьТоварыИзФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗагрузитьТоварыИзФайлаПо_ГТИН_КМ();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТоварыИзФайлаПо_ГТИН_КМ()

	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = 
		"Документ.ЗаявкаНаВозвратТоваровОтКлиента.ТабличнаяЧасть.ВозвращаемыеТовары";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка списка товаров из файла'");
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", "гф_ЗагрузитьТоварыИзФайла");
	ПараметрыЗагрузки.ДополнительныеПараметры = ДополнительныеПараметры;
	Оповещение = Новый ОписаниеОповещения("гф_ЗагрузитьТоварыИзФайлаЗавершение", ЭтотОбъект);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура гф_ПроверитьКМ(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьПредупреждение( , "Не заполнен контрагент!", 10);
		Возврат;
	КонецЕсли;
	
	// 1. установка служебного Назначения «Холд (временно)»
	Для каждого стрТч Из Объект.ВозвращаемыеТовары Цикл
		стрТч["Назначение"] = ПредопределенноеЗначение("Справочник.Назначения.гф_Холд");
		стрТч["гф_ПроизведенаПроверкаКМ"] = Ложь;
		стрТч["гф_СтатусПроверкиКМ"] = "";
		стрТч["гф_КлиентЯвляетсяВладельцемКМ"] = Ложь;
	КонецЦикла;
	
	// 1а (доп.) - заполнение реквизита IDКороба в строках
	гф_ЗаполнитьУпаковочныеЛистыВТчВозвращаемыеТовары();
	
	// 2. проверка статусов и владельца принятых кодов   маркировки через ИС МП
	ИННВладельца = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ИНН");
	ИННВладельцаПустой = СокрЛП(ИННВладельца) = "";
	
	Если ИННВладельцаПустой Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не заполнен ИНН клиента. Невозможно проверить владельца КМ!");
		Возврат;
	КонецЕсли;
	
	#Область Вариант_проверки_с_открытием_формы_проверки
	ПараметрыОткрытия = Новый Структура;
	МассивСтруктурШтрихкодовДляПроверки = ПолучитьМассивШтрихкодов();	// массив структур
	ШтрихкодыДляПроверки = Новый Массив;
	Для каждого элМассива Из МассивСтруктурШтрихкодовДляПроверки Цикл
		ШтрихкодыДляПроверки.Добавить(элМассива["Штрихкод"]);
	КонецЦикла;
	ПараметрыОткрытия.Вставить("Организация", Объект.Организация);
	ПараметрыОткрытия.Вставить("Штрихкоды", ШтрихкодыДляПроверки);
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ФормаПроверкиШтрихкодовПриЗакрытии", ЭтотОбъект);
	ФормаПроверки = ОткрытьФорму("Обработка.ПроверкаКодовМаркировкиИСМП.Форма.ФормаПроверки", 
	ПараметрыОткрытия, ЭтотОбъект, , , , ОповещениеОЗакрытии);
	
	// данные проверки необходимо сформировать до закрытия формы проверки
	ДанныеПроверки = Новый Структура();
	ДанныеПроверки.Вставить("ДеревоКодовМаркировки", ФормаПроверки.ДеревоКодовМаркировки);
	Если ЭтоАдресВременногоХранилища(
		ФормаПроверки.КэшМаркируемойПродукции) Тогда
		ДанныеКэша = ПолучитьИзВременногоХранилища(ФормаПроверки.КэшМаркируемойПродукции);
		ДанныеПроверки.Вставить("КэшМаркируемойПродукции", ДанныеКэша); 
	Иначе
		ДанныеПроверки.Вставить("КэшМаркируемойПродукции", Неопределено); 
	КонецЕсли;
	ДанныеПроверки.Вставить("ЗагрузкаДанныхТСД", ФормаПроверки.ЗагрузкаДанныхТСД);
	
	Если ФормаПроверки.Открыта() Тогда
		ФормаПроверки.Закрыть(ДанныеПроверки);
	КонецЕсли;
	#КонецОбласти
	
	#Область Вариант_проверки_без_открытия_формы_проверки
	//// этот вариант предпочтитеьней, но нужно проверять на реальном соединении
	//МассивСтруктурШтрихкодовДляПроверки = ПолучитьМассивШтрихкодов();	// массив структур
	//ПараметрыОткрытия = Новый Структура;
	//ПараметрыОткрытия.Вставить("Организация", Объект.Организация);
	//
	//ФормаПроверки = ПолучитьФорму("Обработка.ПроверкаКодовМаркировкиИСМП.Форма.ФормаПроверки",
	//ПараметрыОткрытия, ЭтотОбъект);
	//
	//// запускаем механизм проверки КМ через ИСМП в форме проверки:
	//Оповестить("гф_ЗаявкаНаВозвратПроверкаКМ", МассивСтруктурШтрихкодовДляПроверки, ЭтотОбъект);
	//
	//// данные проверки (уже сформированы данные при обработке оповещения в форме обработки проверки КМ)
	//ДанныеПроверки = Новый Структура();
	//ДанныеПроверки.Вставить("ДеревоКодовМаркировки", ФормаПроверки.ДеревоКодовМаркировки);
	//Если ЭтоАдресВременногоХранилища(
	//	ФормаПроверки.КэшМаркируемойПродукции) Тогда
	//	ДанныеКэша = ПолучитьИзВременногоХранилища(ФормаПроверки.КэшМаркируемойПродукции);
	//	ДанныеПроверки.Вставить("КэшМаркируемойПродукции", ДанныеКэша); 
	//Иначе
	//	ДанныеПроверки.Вставить("КэшМаркируемойПродукции", Неопределено); 
	//КонецЕсли;
	//ДанныеПроверки.Вставить("ЗагрузкаДанныхТСД", ФормаПроверки.ЗагрузкаДанныхТСД);
	//
	//// данные получены, избавляемся от формы, т.к. могут быть подключены обработчики ожидания формы
	//ФормаПроверки = Неопределено;
	//
	//// дальнейшие действия по проверке КМ:
	//ДопПараметры = Новый Структура;
	//ФормаПроверкиШтрихкодовПриЗакрытии(ДанныеПроверки, ДопПараметры);
	#КонецОбласти
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаПроверкиШтрихкодовПриЗакрытии(Результат, ДополнительныеПараметры) Экспорт
	ПроверитьКМНаСервере(Результат, ДополнительныеПараметры);
	
	Для каждого элКоллекции Из Объект.ВозвращаемыеТовары Цикл
	
		Идентификатор = ЭлКоллекции.ПолучитьИдентификатор();
		Элементы.ВозвращаемыеТовары.ТекущаяСтрока = Идентификатор;
		ВозвращаемыеТоварыЦенаПриИзменении(Элементы["ВозвращаемыеТоварыЦена"]);
		ВозвращаемыеТоварыДокументРеализацииПриИзменении(Элементы["ВозвращаемыеТоварыДокументРеализации"]);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКМНаСервере(Результат, ДополнительныеПараметры)
	
	ДеревоКодовМаркировки = Результат["ДеревоКодовМаркировки"]; // ДанныеФормыДерево
	ЗагрузкаДанныхТСД = Результат["ЗагрузкаДанныхТСД"];
	КэшМаркируемойПродукции = Результат["КэшМаркируемойПродукции"]; // структура
	
	ИННВладельца = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ИНН");
	ИННВладельцаПустой = СокрЛП(ИННВладельца) = "";
	
	ЭлементыДерева = ДеревоКодовМаркировки.ПолучитьЭлементы();
	Если ЭлементыДерева.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю("Не удалось получить данные проверки КМ от сервиса ИСМП.");
	Иначе
		Для каждого ЭлДерева Из ЭлементыДерева Цикл
			Если ЭлДерева["ИННВладельца"]  = "" И ЭлДерева["Статус"] = Неопределено Тогда
				ОбщегоНазначения.СообщитьПользователю("Строка №" + (ЭлементыДерева.Индекс(ЭлДерева) + 1) +
				": не удалось получить данные проверки КМ    " + ЭлДерева["Штрихкод"]);
			Иначе
				ПараметрыОтбора = Новый Структура("гф_КМСтрокой", ЭлДерева["Штрихкод"]);
				ЭлементыВозвращаемыеТовары = Объект.ВозвращаемыеТовары.НайтиСтроки(ПараметрыОтбора);
				Для каждого ЭлементТч Из ЭлементыВозвращаемыеТовары Цикл
					ЭлементТч["гф_ПроизведенаПроверкаКМ"] = Истина;
					ЭлементТч["гф_СтатусПроверкиКМ"] =  ЭлДерева["Статус"];
					Если ИННВладельца  = ЭлДерева["ИННВладельца"] И Не ИННВладельцаПустой Тогда
						ЭлементТч["гф_КлиентЯвляетсяВладельцемКМ"] = Истина;
					Иначе
						ОбщегоНазначения.СообщитьПользователю("Строка №" + (ЭлементыДерева.Индекс(ЭлДерева) + 1) +
						": не пройдена проверка владельца КМ    " + ЭлДерева["Штрихкод"]);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// //$$$===========================vvv ОТЛАДКА vvv======================22.03.2023 18:29:46=============| SBB
	// Для каждого стрТовары Из Объект.ВозвращаемыеТовары Цикл
	// 	стрТовары["гф_КлиентЯвляетсяВладельцемКМ"] = Истина;
	// 	стрТовары["гф_ПроизведенаПроверкаКМ"] = Истина;
	// 	стрТовары["гф_СтатусПроверкиКМ"] = ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот");
	// КонецЦикла;
	// //===========================^^^ КОНЕЦ ОТЛАДКИ ^^^===================22.03.2023 18:29:46=============| SBB
	
	// 3. заполнение в ТЧ «Товары» реквизитов «Документ продажи», «Цена», «Сумма»
	// из документа продажи для сопоставленных кодов маркировки
	// (Документ продажи устанавливается из записи РН «Движение кодов маркировки организации».
	// В случае возврата товара с кодами маркировки, которые не передавались клиенту,
	// но владельцем которых он является, устанавливается документ последней продажи клиенту товара с этим GTIN.
	ТекстЗапроса = ТекстЗапросаДокументыПродажи();
	табДанные = Объект.ВозвращаемыеТовары.Выгрузить();
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("табДанные", табДанные);
	Запрос.УстановитьПараметр("КонецПериода", Объект.Дата);
	Запрос.УстановитьПараметр("Клиент", Объект.Контрагент);
	
	УстановитьПривилегированныйРежим(Истина); //Добавлено  Галфинд \ Sakovich 28.04.2023
	ПакетРезультатов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	УстановитьПривилегированныйРежим(Ложь);   //Добавлено  Галфинд \ Sakovich 28.04.2023
	
	ВыборкаДанные = ПакетРезультатов[3].Выбрать();
	ВыборкаНеПереданные = ПакетРезультатов[4].Выбрать();
	МассивКМДляЗаписи = Новый Массив;
	Для каждого стрТч Из Объект.ВозвращаемыеТовары Цикл
		ВыборкаДанные.Сбросить();
		ВыборкаНеПереданные.Сбросить();
		СтруктураОтбора = Новый Структура("НомерСтроки, КМСтрокой", стрТч["НомерСтроки"], стрТч["гф_КМСтрокой"]);
		Если ВыборкаДанные.НайтиСледующий(СтруктураОтбора) Тогда
			Если ЗначениеЗаполнено(ВыборкаДанные["ДокументРеализации"]) Тогда
				ЗаполнитьЗначенияСвойств(стрТч, ВыборкаДанные, "ДокументРеализации, Цена, СтавкаНДС, Количество, КоличествоУпаковок");
			Иначе 
				// #wortmann {
				// e1cib/data/Задача.ЗадачаИсполнителя?ref=8131bcee7bda45d711edd37b5946b51b
				// ++ Галфинд_Домнышева_КР_20_04_2023
				стрТч.Количество = 1;
				стрТч.КоличествоУпаковок = 1;
				стрТч.ДокументРеализации = НайтиДокументПродажиВРНВыручкаИСебестоимость(стрТч);
				// -- Галфинд_Домнышева_КР_20_04_2023
			КонецЕсли;
		КонецЕсли;
		Если ВыборкаНеПереданные.НайтиСледующий(СтруктураОтбора) Тогда
			Если стрТч["гф_КлиентЯвляетсяВладельцемКМ"] Тогда
				ЗаполнитьЗначенияСвойств(стрТч, ВыборкаНеПереданные, "Цена, СтавкаНДС, Количество, КоличествоУпаковок");
				СтруктураЗаписи = Новый Структура("гф_КМСтрокой, гф_ПринятыеКМ, Номенклатура, Характеристика, НомерСтроки");
				Если ЗначениеЗаполнено(стрТч["ДокументРеализации"]) Тогда
					ЗаполнитьЗначенияСвойств(СтруктураЗаписи, стрТч);
					МассивКМДляЗаписи.Добавить(СтруктураЗаписи);	
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// 4. сверка принятых кодов маркировки с кодами маркировки, которые были отправлены клиенту при отгрузке товара
	// В случае возврата товара с кодами маркировки, которые не передавались клиенту, 
	// но владельцем которых он является (и подобран документ реализации -см. описание пункта 3), коды маркировки записываются в справочник «Штрихкоды товаров и упаковок»
	СоздатьШтрихкодыУпаковокТоваров(МассивКМДляЗаписи);
		
КонецПроцедуры

// #wortmann { 
// Получение Документа Реализации в РН ВыручкаИСебестоимостьПродаж с учетом возвратов
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8131bcee7bda45d711edd201ed470fa8
// Галфинд_Домнышева 2023/04/10
//
// Параметры:
//	стрТч - Тип.СтрокаТЧ - строка табличной части для которой ищется документ продажи
//
// Возвращаемое значение:
//	ДокументСсылка.РеализацияТоваровУслуг 
&НаСервере
Функция НайтиДокументПродажиВРНВыручкаИСебестоимость(стрТч)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ВыручкаИСебестоимостьПродажОбороты.КоличествоОборот) КАК КоличествоОборот,
		|	ВыручкаИСебестоимостьПродажОбороты.ЗаказКлиента КАК ЗаказКлиента
		|ПОМЕСТИТЬ ПроверкаОбороты
		|ИЗ
		|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
		|			,
		|			&КонецПериода,
		|			Регистратор,
		|			АналитикаУчетаНоменклатуры.Номенклатура = &Номенклатура
		|				И АналитикаУчетаНоменклатуры.Характеристика = &Характеристика
		|				И ВидЗапасов.Организация = &Организация) КАК ВыручкаИСебестоимостьПродажОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ВыручкаИСебестоимостьПродажОбороты.ЗаказКлиента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВыручкаИСебестоимостьПродаж.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК ВыручкаИСебестоимостьПродаж,
		|	ПроверкаОбороты КАК ПроверкаОбороты
		|ГДЕ
		|	ВыручкаИСебестоимостьПродаж.АналитикаУчетаНоменклатуры.Номенклатура = &Номенклатура
		|	И ВыручкаИСебестоимостьПродаж.АналитикаУчетаНоменклатуры.Характеристика = &Характеристика
		|	И ВыручкаИСебестоимостьПродаж.ЗаказКлиента В
		|			(ВЫБРАТЬ
		|				ПроверкаОбороты.ЗаказКлиента
		|			ИЗ
		|				ПроверкаОбороты КАК ПроверкаОбороты)
		|	И ПроверкаОбороты.КоличествоОборот >= 1
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВыручкаИСебестоимостьПродаж.Период УБЫВ";
	
	Запрос.УстановитьПараметр("КонецПериода", Объект.Дата);
	Запрос.УстановитьПараметр("Номенклатура", стрТч.Номенклатура);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Характеристика", стрТч.Характеристика);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка.Следующий();
		Возврат Выборка.Регистратор;
	Иначе
		Возврат Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции// } #wortmann	

&НаКлиенте
Процедура гф_СоздатьПриходныйОрдерНаТовары(Команда)
	
	Если Объект.Ссылка.Пустая()
		ИЛИ Не Объект.Проведен Тогда
		ПоказатьПредупреждение( , "Для создания Приходного ордера необходимо провести документ.", 30, "Проведение документа");
		Возврат;
	КонецЕсли;
	ОрдераПоРаспоряжению = гф_ПроверитьНаличиеПриходногоОрдераПоРаспоряжению(Объект.Ссылка);
	Если ОрдераПоРаспоряжению <> Неопределено Тогда
		ТекстВопроса = НСтр("ru='Уже существуют документы
		|(" + ОрдераПоРаспоряжению + "),
		|созданные на основании данной заявки на возврат. Продолжить?'");
		ДопПараметры = Новый Структура();
		Оповещение = Новый ОписаниеОповещения("гф_ВопросСоздатьПриходныйОрдерЗавершение", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Иначе
		СоздатьПриходныйОрдерНаТоварыНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура гф_ЗаказатьКМ(Команда)
	
	СтруктураПоиска = Новый Структура("гф_ЗаказатьКМ", Истина);
	мСтрокТЧ = Объект.ВозвращаемыеТовары.НайтиСтроки(СтруктураПоиска);
	Если мСтрокТЧ.Количество() = 0 Тогда
		ПоказатьПредупреждение( , "Нет данных для заказа кодов маркировки!", 30, "Заказ кодов маркировки");
		Возврат;
	КонецЕсли;
	Если Не Объект.Проведен Тогда
		ПоказатьПредупреждение( , "Для заказа кодов маркировки документ должен быть проведен!", 30, "Проведение документа");
		Возврат;
	КонецЕсли;
	СоздатьЗаказНаЭмиссиюКодовМаркировкиНаСервере();
	ПослеСозданияЗаказаНаЭмиссиюКлиент();
	МодифицированностьКэш = ЭтотОбъект.Модифицированность;
	// ++ Галфинд_Домнышева 2023/04/10
    // по задаче Аналитика Гришиной К. не нужно сбрасывать флаг
	//Для каждого стрТч Из Объект.ВозвращаемыеТовары Цикл
	//	стрТч["гф_ЗаказатьКМ"] = Ложь;
	//КонецЦикла;
	// -- Галфинд_Домнышева 2023/04/10
	ЭтотОбъект.Модифицированность = МодифицированностьКэш;
КонецПроцедуры

&НаКлиенте
Процедура гф_ЗаказатьКМВыполнение()
	
	
КонецПроцедуры

&НаКлиенте
Процедура гф_СоздатьКорректировкиРеализаций(Команда)
	
	//ДокРеализации = гф_ПолучитьРеализацииИзТаблицыСервере();
	// ++ Галфинд_Домнышева 2023/06/13
	Если Модифицированность Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В документе есть изменения, запишите документ.");
		Возврат;
	КонецЕсли;
	// -- Галфинд_Домнышева 2023/06/13

	Если НЕ гф_ПустыеРеализацииИзТаблицыСервере() Тогда

	ТекстВопроса = НСтр("ru='Уже есть документы корректировки реализации
		//|(" + ДокРеализации + "),
		|созданные на основании данной заявки на возврат. Продолжить?'");
		ДопПараметры = Новый Структура();
		Оповещение = Новый ОписаниеОповещения("гф_ВопросСоздатьКорректировкуЗавершение", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Иначе
		гф_СоздатьКорректировкиРеализаций_возвратWMN_НаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция гф_ПустыеРеализацииИзТаблицыСервере()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТЗ.гф_ДокументКорректировкаРеализации КАК гф_ДокументКорректировкаРеализации
	                      |ПОМЕСТИТЬ ВТ
	                      |ИЗ
	                      |	&ТЗ КАК ТЗ
	                      |ГДЕ
	                      |	ТЗ.гф_ДокументКорректировкаРеализации <> ЗНАЧЕНИЕ(Документ.КорректировкаРеализации.ПустаяСсылка)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ.гф_ДокументКорректировкаРеализации КАК гф_ДокументКорректировкаРеализации
	                      |ИЗ
	                      |	ВТ КАК ВТ");
	
	Запрос.УстановитьПараметр("ТЗ", Объект.ВозвращаемыеТовары.Выгрузить());
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции                  

&НаКлиенте
Процедура гф_ВопросСоздатьКорректировкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		гф_ПометитьНаУдалениеКорректировкиНаСервере();
		гф_СоздатьКорректировкиРеализаций_возвратWMN_НаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура гф_ПометитьНаУдалениеКорректировкиНаСервере()
	
	ДокРеализации = Объект.ВозвращаемыеТовары.Выгрузить(, "гф_ДокументКорректировкаРеализации");
    ДокРеализации.Свернуть("гф_ДокументКорректировкаРеализации");
	
	Для Каждого Документ Из ДокРеализации Цикл
		Если ЗначениеЗаполнено(Документ.гф_ДокументКорректировкаРеализации) Тогда
		ДокументОбъект = Документ.гф_ДокументКорректировкаРеализации.ПолучитьОбъект();
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЗаказНаЭмиссиюКодовМаркировкиНаСервере()
	ДопПараметры = Новый Структура("ВозвращаемыеТовары", Объект.ВозвращаемыеТовары);
	СтруктураДанныеЗаказаЭмиссии = 
	гф_ЭмиссияКодовМаркировкиВызовСервера.гф_СоздатьЗаказНаЭмиссиюКодовМаркировки(Объект.Ссылка, ДопПараметры);
	
	СтруктураЗаказНаЭмиссиюКодовМаркировки = СтруктураДанныеЗаказаЭмиссии;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСозданияЗаказаНаЭмиссиюКлиент()

	ЗаказКодовВозможен = Неопределено;
	СтруктураЗаказНаЭмиссиюКодовМаркировки.Свойство("ЗаказКодовВозможен", ЗаказКодовВозможен);
	Если Не ЗаказКодовВозможен = Истина Тогда
		Возврат;	
	КонецЕсли;
	
	ЗаказНаЭмиссию = СтруктураЗаказНаЭмиссиюКодовМаркировки["ЗаказНаЭмиссиюКодовМаркировкиСУЗ"];
	
	ПараметрыОбработкиДокументов = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
	ПараметрыОбработкиДокументов.Ссылка = ЗаказНаЭмиссию;
	ПараметрыОбработкиДокументов.Организация = СтруктураЗаказНаЭмиссиюКодовМаркировки["Организация"];
	ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение(
	"Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКодыМаркировки");
	
	ВходящиеДанные = Новый Массив;
	ВходящиеДанные.Добавить(ПараметрыОбработкиДокументов);
	
	гф_ЭмиссияКодовМаркировкиКлиент.гф_ПодготовитьКПередаче(ЭтотОбъект, ВходящиеДанные);
		
	Если ЗначениеЗаполнено(ЗаказНаЭмиссию) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Создан документ " + ЗаказНаЭмиссию);
	КонецЕсли;
    ЗаписатьДокументЭмиссииВТабличнуюЧасть();
	
КонецПроцедуры

&НаКлиенте
Процедура гф_ЗагрузитьТоварыИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	гф_ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных);
	
	Для каждого стрТЧ Из Объект.ВозвращаемыеТовары Цикл
		Идентификатор = стрТЧ.ПолучитьИдентификатор();
		Элементы.ВозвращаемыеТовары.ТекущаяСтрока = Идентификатор;
		ВозвращаемыеТоварыНоменклатураПриИзменении(Элементы.ВозвращаемыеТовары);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура гф_ВопросСоздатьПриходныйОрдерЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		СоздатьПриходныйОрдерНаТоварыНаСервере();
	КонецЕсли;
КонецПроцедуры

// #wortmann {
// ++ Галфинд_ДомнышеваКР_07_06_2023
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee0383d7909af6
&НаКлиенте
Процедура гф_СоздатьПриходныйОрдерНаТоварыНеПринятых(Команда)
	
	СоздатьПриходныйОрдерНаТоварыНеПринятыеНаСервере();
	
КонецПроцедуры// } #wortmann  

// #wortmann { 
// Команда создания документа Корректировка Назначения Товаров 
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee05074993466e
// Галфинд_Домнышева 2023/06/22
&НаКлиенте
Процедура гф_ИзменитьНазначение(Команда)

	Если Объект.Статус <> ЗначениеПеречисленияТоварПеремаркирован() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Статус заявки для изменения назначения должен быть Товар перемаркирован");
		Возврат;
	КонецЕсли;
	СоздатьДокументКорректировкиНазначенияНаСервере();

КонецПроцедуры// } #wortmann 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура гф_ЗаполнитьУпаковочныеЛистыВТчВозвращаемыеТовары()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Данные.гф_ПринятыеКМ КАК гф_ПринятыеКМ,
	|	Данные.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ДанныеТЧ
	|ИЗ
	|	&Данные КАК Данные
	|ГДЕ
	|	НЕ Данные.гф_ПринятыеКМ = ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыТч.гф_ПринятыеКМ КАК гф_ПринятыеКМ,
	|	ТоварыТч.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(ШК.ЗначениеШтрихкода, """") КАК КодАгрегата,
	|	ЕСТЬNULL(УЛ.Ссылка, ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)) КАК IDКороба
	|ИЗ
	|	ДанныеТЧ КАК ТоварыТч
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ВложенныеШК
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШК
	|			ПО ВложенныеШК.Ссылка = ШК.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист КАК УЛ
	|			ПО (УЛ.Код = ШК.ЗначениеШтрихкода)
	|		ПО ТоварыТч.гф_ПринятыеКМ = ВложенныеШК.Штрихкод";
	
	Данные = Объект.ВозвращаемыеТовары.Выгрузить();
	Запрос.УстановитьПараметр("Данные", Данные);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Для каждого стрТч Из Объект.ВозвращаемыеТовары Цикл
		Если ЗначениеЗаполнено(стрТч["гф_ПринятыеКМ"]) Тогда
			Выборка.Сбросить();
			СтрПоиска = Новый Структура("НомерСтроки, гф_ПринятыеКМ", стрТч["НомерСтроки"], стрТч["гф_ПринятыеКМ"]);
			Если Выборка.НайтиСледующий(СтрПоиска) Тогда
				стрТч["гф_IDКороба"] = Выборка["IDКороба"];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция гф_ПроверитьНаличиеПриходногоОрдераПоРаспоряжению(Распоряжение)
	
	//СписокСсылок = Новый СписокЗначений;
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ПриходныйОрдерНаТовары.Ссылка) КАК Ссылка
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|ГДЕ
	|	ПриходныйОрдерНаТовары.Распоряжение = &Распоряжение
	|	И НЕ ПриходныйОрдерНаТовары.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	мСтрок = Новый Массив;
	Пока Выборка.Следующий() Цикл
		мСтрок.Добавить(Выборка["Ссылка"]);
	КонецЦикла;
	СписокСсылок = СтрСоединить(мСтрок, Символы.ПС);
	
	Возврат СписокСсылок;
	
КонецФункции 

&НаКлиенте
Функция ПолучитьМассивШтрихкодов()
	
	// см. общаяФорма ЗагрузкаКодовМаркировкиИС.КодыМаркировкиИзТабличногоДокумента()
	Результат = Новый Массив;
	мОбработанныхШтрихкодов = Новый Массив;
	Для каждого СтрТч Из Объект.ВозвращаемыеТовары Цикл
		ФорматBase64 = Ложь;
		Если ЗначениеЗаполнено(СтрТч["гф_ПринятыеКМ"]) Тогда
			Штрихкод = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(стрТч["гф_ПринятыеКМ"], "ЗначениеШтрихкода");
		Иначе
			Штрихкод = СтрТч["гф_КМСтрокой"];	
		КонецЕсли;
		
		// не допускаем создания дублей
		Если мОбработанныхШтрихкодов.Найти(Штрихкод) <> Неопределено Тогда
			Продолжить;
		Иначе
			мОбработанныхШтрихкодов.Добавить(Штрихкод);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Штрихкод) Тогда
			СодержитНедопустимыеСимволы = Ложь;
			Если РазборКодаМаркировкиИССлужебныйКлиентСервер.НайденНедопустимыйСимволXML(Штрихкод) Тогда
				СодержитНедопустимыеСимволы = Истина;
			КонецЕсли;
			
			ШтрихкодУпаковки = "";
			Если СодержитНедопустимыеСимволы Тогда
				Штрихкод = ШтрихкодированиеИСКлиентСервер.ШтрихкодВBase64(Штрихкод);
				ФорматBase64 = Истина;
			КонецЕсли;
			
			ПоляСтроки = Новый Структура;
			ПоляСтроки.Вставить("Штрихкод",                          СокрЛП(Штрихкод));
			ПоляСтроки.Вставить("Количество",                        1);
			ПоляСтроки.Вставить("ШтрихкодМаркиАлкогольнойПродукции", "");
			ПоляСтроки.Вставить("ШтрихкодУпаковки",                  ШтрихкодУпаковки);
			ПоляСтроки.Вставить("ФорматBase64",                      ФорматBase64 Или СодержитНедопустимыеСимволы);
			
			Результат.Добавить(ПоляСтроки);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции 

&НаСервере
Процедура гф_СоздатьКорректировкиРеализаций_возвратWMN_НаСервере()
	// ++ Галфинд_Домнышева_10_04_2023
	Если Объект.Статус <> Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для создания документа Корректировки статус документа Заявки"
		+ " на возврат должен быть ""К выполнению""");
		Возврат;
	КонецЕсли;
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("гф_ПринятСкладом", Истина);
	// -- Галфинд_Домнышева_10_04_2023
	// #wortmann { 
	// Предполагается смена статуса Заявки при успешном создании всех корректировок 
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee261afa1fe124
	// Галфинд_Домнышева 2023/07/19
	СозданыВсеКорректировки = Истина;
	// } #wortmann
	ВозвращаемыеТовары = Объект.ВозвращаемыеТовары.Выгрузить();
	вспТЗ = ВозвращаемыеТовары.Скопировать(СтруктураОтбора, "ДокументРеализации"); // Домнышева, добавила отбор по ПринятымСкладом
	вспТЗ.Свернуть("ДокументРеализации");
	Для каждого стрТЗ Из вспТЗ Цикл
	
		Если ЗначениеЗаполнено(стрТЗ["ДокументРеализации"]) И
			ТипЗнч(стрТЗ["ДокументРеализации"]) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда 
			// ++ Галфинд_Домнышева_13_06_2023
			Если НЕ НаличиеСчетФактурыРеализации(стрТЗ["ДокументРеализации"]) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В документе отгрузки клиенту " + стрТЗ["ДокументРеализации"] +  
				" нет оформленной счет-фактуры, создание документа Корректировки реализации невозможно.");
				Продолжить;
			КонецЕсли;
			// -- Галфинд_Домнышева_13_06_2023
			
			мСтрокТовары = ВозвращаемыеТовары.НайтиСтроки(Новый Структура("ДокументРеализации, Отменено, гф_ПринятСкладом",
															стрТЗ["ДокументРеализации"], Ложь, Истина));
			Если мСтрокТовары.Количество() > 0 Тогда
				ВозвращаемыеТоварыПоРеализации = ВозвращаемыеТовары.Скопировать(мСтрокТовары);
				ВозвращаемыеТоварыПоРеализации.Свернуть("Номенклатура, Характеристика, гф_ПринятыеКМ", "КоличествоУпаковок");
				СоздатьКорректировкуРеализации_возвратWMN(стрТЗ["ДокументРеализации"], ВозвращаемыеТоварыПоРеализации, СозданыВсеКорректировки);
			Иначе
				ОбщегоНазначения.СообщитьПользователю("Нет данных для корректировки по документу " + стрТЗ["ДокументРеализации"]);
			КонецЕсли;
		КонецЕсли; 
		
	КонецЦикла;
	// #wortmann { 
	// Предполагается смена статуса Заявки при успешном создании всех корректировок 
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee261afa1fe124
	// Галфинд_Домнышева 2023/07/19
	Если СозданыВсеКорректировки Тогда 
		ЭтаФорма.Прочитать();// Галфинд_Домнышева 2023/08/23 
		Объект.Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.гф_УКДСформирован;
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Статус документа Заявки изменен ""УКД Сформирован""");
		ЭтотОбъект.Прочитать();// Галфинд_Домнышева 2023/08/24 
	КонецЕсли;	
	// } #wortmann
КонецПроцедуры

// #wortmann {
// ++ Галфинд_ДомнышеваКР_13_06_2023 
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee09d5517af131
&НаСервере
Функция НаличиеСчетФактурыРеализации(докРеализации)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетФактураВыданный.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.ДокументОснование = &ДокументОснование
		|	И СчетФактураВыданный.Проведен = ИСТИНА";
	
	Запрос.УстановитьПараметр("ДокументОснование", докРеализации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Ложь;
	Иначе
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции// } #wortmann

&НаСервере
Процедура СоздатьКорректировкуРеализации_возвратWMN(докРеализации, ТаблицаВозвращаемыхТоваров, СозданыВсеКорректировки)
	УстановитьПривилегированныйРежим(Истина);
	обКорректировка = Документы.КорректировкаРеализации.СоздатьДокумент();
	обКорректировка.Заполнить(докРеализации);
	обКорректировка.Дата = ТекущаяДатаСеанса();
	обКорректировка.гф_возвратWMN = Истина;
	тчТовары = обКорректировка["Товары"];
	тчШтрикодыУпаковок = обКорректировка["ШтрихкодыУпаковок"]; // Добавлено Галфинд_ДомнышеваКР_22_06_2023
	мУдаляемых = Новый Массив;
	Для каждого стрВозвр Из ТаблицаВозвращаемыхТоваров Цикл
		мСтрокТовары = тчТовары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика",
		стрВозвр["Номенклатура"], стрВозвр["Характеристика"]));
		КоличествоУбрать = стрВозвр["КоличествоУпаковок"];
		Для каждого стрТовары Из мСтрокТовары Цикл
			Если КоличествоУбрать > 0 Тогда
				НужноУбрать = Мин(стрТовары["КоличествоУпаковок"], КоличествоУбрать);
				стрТовары["КоличествоУпаковок"] = стрТовары["КоличествоУпаковок"] - НужноУбрать;
				стрТовары["Количество"] = стрТовары["Количество"] - НужноУбрать;
				КоличествоУбрать = КоличествоУбрать - НужноУбрать;
				Если стрТовары["КоличествоУпаковок"] = 0 Тогда
					мУдаляемых.Добавить(стрТовары);
				Иначе
					гф_ПересчитатьСтрокуТЧ(стрТовары, обКорректировка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		// ++ Галфинд_ДомнышеваКР_22_06_2023
		// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee1018541a41f1
		СтрокаШтрихкод = тчШтрикодыУпаковок.Добавить();
		СтрокаШтрихкод.ШтрихкодУпаковки = стрВозвр["гф_ПринятыеКМ"]; 
		// -- Галфинд_ДомнышеваКР_22_06_2023
	КонецЦикла;
	Для каждого Эл Из мУдаляемых  Цикл
		тчТовары.Удалить(Эл);
	КонецЦикла;
	
	// см. Процедура ЗаполнитьРасхожденияСервер() формы документа КорректировкаРеализации
	НоменклатураСервер.ОкруглитьКоличествоШтучныхТоваров(обКорректировка);
	обКорректировка.ЗаполнитьРасхождения();
	
	Для каждого стрТч Из обКорректировка.Расхождения Цикл
		стрТч["ВариантОтражения"] = 
		Перечисления.ВариантыОтраженияКорректировокРеализаций.УменьшитьРеализациюУчестьПриИнвентаризации;
	КонецЦикла;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(обКорректировка.Расхождения, СтруктураДействий, КэшированныеЗначения);
	
	Попытка
		обКорректировка.Записать(РежимЗаписиДокумента.Проведение);
		ОбщегоНазначения.СообщитьПользователю("Создан документ " + обКорректировка.Ссылка + " на основании " +
		"документа " + обКорректировка["ДокументОснование"]);  
	Исключение
		ОбщегоНазначения.СообщитьПользователю("Не удалось создать документ ""Корректировка реализации"" на основании " +
		"документа " + обКорректировка["ДокументОснование"]);
		СозданыВсеКорректировки = Ложь; // Галфинд_Домнышева_19_07_2023
	КонецПопытки;
	
	Если ЗначениеЗаполнено(обКорректировка.Ссылка) Тогда
		СозданиеСчетФактурыВыданной(обКорректировка);
		ЗаписатьДокументКорректировкиВТабличнуюЧасть(обКорректировка.Ссылка, докРеализации); // Галфинд_Домнышева_11_04_2023
	КонецЕсли;
	
КонецПроцедуры

// #wortmann {
// ++ Галфинд_ДомнышеваКР_09_06_2023
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee038b45df260c
&НаСервере
Процедура СозданиеСчетФактурыВыданной(обКорректировка)
	
	обСчетФактураВыданный = Документы.СчетФактураВыданный.СоздатьДокумент();
	ПараметрыРегистрации = Документы.КорректировкаРеализации.ПараметрыРегистрацииСчетовФактурВыданных(Объект);
	ПараметрыСоздания = Новый Структура;
	ПараметрыСоздания.Вставить("ДокументОснование", обКорректировка.Ссылка);
	ПараметрыСоздания.Вставить("Организация",       ПараметрыРегистрации.Организация);
	ПараметрыСоздания.Вставить("Контрагент",        ПараметрыРегистрации.Контрагент);
	ПараметрыСоздания.Вставить("Исправление",       ПараметрыРегистрации.ИсправлениеОшибок);
	ПараметрыСоздания.Вставить("Корректировочный",  ПараметрыРегистрации.КорректировкаПоСогласованиюСторон);
	ПараметрыСоздания.Вставить("РеализацияЧерезКомиссионера",
	ПараметрыРегистрации.РеализацияЧерезКомиссионера);
	
	обСчетФактураВыданный.Заполнить(ПараметрыСоздания); 
	Попытка
		обСчетФактураВыданный.Записать(РежимЗаписиДокумента.Проведение);
	Исключение 
		ОбщегоНазначения.СообщитьПользователю("Не удалось создать документ ""Счет фактура выданный"" на основании " +
		"документа " + обКорректировка.Ссылка);
	КонецПопытки;
	
КонецПроцедуры// } #wortmann

&НаСервере
Процедура гф_ПересчитатьСтрокуТЧ(ТекущиеДанные, докОбъект)
	ТекущаяСтрока = Новый Структура(
	"Номенклатура, Упаковка, Количество, КоличествоУпаковок, Цена, Сумма, СтавкаНДС, СуммаНДС, СуммаСНДС");
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекущиеДанные);
	СтруктураДействий = Новый Структура;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(докОбъект);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму", "Количество");
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ТекущаяСтрока);
КонецПроцедуры

&НаСервере
Процедура СоздатьПриходныйОрдерНаТоварыНаСервере()
	// создается документ ПриходныйОрдрерНаТовары с видом операции «Возврат не принятых получателем товаров».
	// Отправителем является Клиент. Табличная часть заполняется сопоставленными строками ТЧ «Товары» документа
	// «Заявка на возврат товаров от клиента».
	Документы.ЗаявкаНаВозвратТоваровОтКлиента.гф_СоздатьПриходныйОрдерНаТовары(Объект.Ссылка);
КонецПроцедуры

&НаСервере
Процедура гф_ДобавитьЭлементыФормы()

	ТипГруппаФормы = Тип("ГруппаФормы");
	ТипПолеФормы = Тип("ПолеФормы");
	ТипКнопкаФормы = Тип("КнопкаФормы");
	ТипТаблицаФормы = Тип("ТаблицаФормы");
	
	// статус проверки возврата
	Элементы.ГруппаСтатус.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НовыйЭлемент  = Элементы.Добавить("гф_СтатусПроверкиВозврата", ТипПолеФормы, Элементы.ГруппаСтатус);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;      
	НовыйЭлемент.ПутьКДанным = "Объект.гф_СтатусСверкиВозврата";
	
	// таблица гф_ТоварыВКоробах
	НовыйЭлемент = Элементы.Вставить("гф_СтраницаТоварыВКоробах", ТипГруппаФормы, Элементы.ГруппаСтраницы, 
					Элементы.ГруппаЗаменяющиеТовары);
	НовыйЭлемент.Вид = ВидГруппыФормы.Страница;
	НовыйЭлемент.Заголовок = "Товары в коробах";
	НовыйЭлемент.Подсказка = "Товары в коробах";
	НовыйЭлемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НовыйЭлемент.ПутьКДаннымЗаголовка = "Объект.гф_ТоварыВКоробах.КоличествоСтрок";
	
	// vvv Галфинд \ Sakovich 22.03.2023
	Элементы["гф_СтраницаТоварыВКоробах"].Видимость = Ложь;
	// ^^^ Галфинд \ Sakovich 22.03.2023 
	
	ТаблицаФормы = Элементы.Вставить("гф_ТоварыВКоробах", ТипТаблицаФормы, Элементы.гф_СтраницаТоварыВКоробах);
	ТаблицаФормы.ПутьКДанным = "Объект.гф_ТоварыВКоробах";

	НовыйЭлемент  = Элементы.Добавить("гф_ТоварыВКоробахНомерСтроки", ТипПолеФормы, ТаблицаФормы);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;      
	НовыйЭлемент.ПутьКДанным = "Объект.гф_ТоварыВКоробах.НомерСтроки";

	НовыйЭлемент  = Элементы.Добавить("гф_ТоварыВКоробахУпаковочныйЛист", ТипПолеФормы, ТаблицаФормы);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;      
	НовыйЭлемент.ПутьКДанным = "Объект.гф_ТоварыВКоробах.УпаковочныйЛист";
	
	НовыйЭлемент  = Элементы.Добавить("гф_ТоварыВКоробахАртикул", ТипПолеФормы, ТаблицаФормы);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;      
	НовыйЭлемент.ПутьКДанным = "Объект.гф_ТоварыВКоробах.Артикул";
	
	НовыйЭлемент  = Элементы.Добавить("гф_ТоварыВКоробахIDКороба", ТипПолеФормы, ТаблицаФормы);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;      
	НовыйЭлемент.ПутьКДанным = "Объект.гф_ТоварыВКоробах.IDКороба";

	НовыйЭлемент  = Элементы.Добавить("гф_ТоварыВКоробахКоличествоПар", ТипПолеФормы, ТаблицаФормы);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;      
	НовыйЭлемент.ПутьКДанным = "Объект.гф_ТоварыВКоробах.КоличествоПар";
	
	// реквзизиты в таблице ВозвращаемыеТовары
	НовыйЭлемент  = Элементы.Добавить("гф_ВозвращаемыеТоварыIDКороба", ТипПолеФормы, Элементы.ВозвращаемыеТовары);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;      
	НовыйЭлемент.ПутьКДанным = "Объект.ВозвращаемыеТовары.гф_IDКороба";
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипУпаковки", Перечисления.ТипыУпаковок.МаркированныйТовар);
	мПараметрыВыбора = Новый Массив();
	мПараметрыВыбора.Добавить(НовыйПараметр);
	фмПараметрыВыбора = Новый ФиксированныйМассив(мПараметрыВыбора);
	
	НовыйЭлемент  = Элементы.Добавить("гф_ВозвращаемыеТоварыПринятыеКМ", ТипПолеФормы, Элементы.ВозвращаемыеТовары);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;      
	НовыйЭлемент.ПутьКДанным = "Объект.ВозвращаемыеТовары.гф_ПринятыеКМ";
	НовыйЭлемент.ПараметрыВыбора = фмПараметрыВыбора;

	НовыйЭлемент  = Элементы.Добавить("гф_ВозвращаемыеТоварыОтгруженныеКМ", ТипПолеФормы, Элементы.ВозвращаемыеТовары);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;      
	НовыйЭлемент.ПутьКДанным = "Объект.ВозвращаемыеТовары.гф_ОтгруженныеКМ";
	НовыйЭлемент.ПараметрыВыбора = фмПараметрыВыбора;
	НовыйЭлемент.Видимость = Ложь; // Галфинд_Домнышева_13-04-2023
	
	НовыйЭлемент  = Элементы.Добавить("гф_ВозвращаемыеТоварыПринятСкладом", ТипПолеФормы, Элементы.ВозвращаемыеТовары);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлемент.Заголовок = "Принят складом";
	НовыйЭлемент.ПутьКДанным = "Объект.ВозвращаемыеТовары.гф_ПринятСкладом";

	НовыйЭлемент  = Элементы.Добавить("гф_ВозвращаемыеТовары_КМСтрокой", ТипПолеФормы, Элементы.ВозвращаемыеТовары);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;      
	НовыйЭлемент.ПутьКДанным = "Объект.ВозвращаемыеТовары.гф_КМСтрокой";
	
	НовыйЭлемент  = Элементы.Добавить("гф_ВозвращаемыеТоварыЗаказатьКМ", ТипПолеФормы, Элементы.ВозвращаемыеТовары);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлемент.Заголовок = "Заказать КМ";
	НовыйЭлемент.ПутьКДанным = "Объект.ВозвращаемыеТовары.гф_ЗаказатьКМ";
	
	НовыйЭлемент  = Элементы.Добавить("гф_ВозвращаемыеТовары_СтатусПроверкиКМ", ТипПолеФормы, Элементы.ВозвращаемыеТовары);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;      
	НовыйЭлемент.ПутьКДанным = "Объект.ВозвращаемыеТовары.гф_СтатусПроверкиКМ";
	//НовыйЭлемент.Видимость = Ложь;
	
	НовыйЭлемент  = Элементы.Добавить("гф_ВозвращаемыеТоварыКлиентЯвляетсяВладельцемКМ", ТипПолеФормы, Элементы.ВозвращаемыеТовары);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлемент.Заголовок = "Заказать КМ";
	НовыйЭлемент.ПутьКДанным = "Объект.ВозвращаемыеТовары.гф_КлиентЯвляетсяВладельцемКМ";
	НовыйЭлемент.Видимость = Ложь;
	
	НовыйЭлемент  = Элементы.Добавить("гф_ВозвращаемыеТоварыПроизведенаПроверкаКМ", ТипПолеФормы, Элементы.ВозвращаемыеТовары);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлемент.Заголовок = "Заказать КМ";
	НовыйЭлемент.ПутьКДанным = "Объект.ВозвращаемыеТовары.гф_ПроизведенаПроверкаКМ";
	НовыйЭлемент.Видимость = Ложь;
	
	// группа команд для регистрации возвратов
	НовыйЭлемент = Элементы.Добавить("гф_ГруппаКнопокРегистрацияВозвратов",
		ТипГруппаФормы,
		Элементы.ВозвращаемыеТовары.КоманднаяПанель);
	НовыйЭлемент.Вид = ВидГруппыФормы.Подменю;
	НовыйЭлемент.Заголовок = "Регистрация возвратов (доп.)";
	// Галфинд_Домнышева_10_04_2023 - Названия кнопок изменены согласно "Доработка к ТТ по возвратам v1.0" 
	
	// команда механизма загрузки из файла
	Команда = Команды.Добавить("гф_ЗагрузитьТоварыИзФайла");
	Команда.Заголовок = "1. Загрузить возвращаемые товары из файла";
	Команда.Действие = "гф_ЗагрузитьТоварыИзФайла";
	Команда.ИзменяетСохраняемыеДанные = Истина;
	Команда.Картинка = Команды.ЗагрузитьВозвращаемыеТоварыИзВнешнегоФайла.Картинка;
	Команда.Отображение = ОтображениеКнопки.КартинкаИТекст;
	
	НоваяКнопка = Элементы.Вставить("гф_КнопкаЗагрузитьТоварыИзФайла", 
		ТипКнопкаФормы, 
		Элементы.гф_ГруппаКнопокРегистрацияВозвратов);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "гф_ЗагрузитьТоварыИзФайла";
	
	// команда проверки возвращаемых товаров
	Команда = Команды.Добавить("гф_ПроверитьКМ");
	Команда.Заголовок = "2. Проверить КМ (до формирования УКД)";
	Команда.Действие = "гф_ПроверитьКМ";
	Команда.ИзменяетСохраняемыеДанные = Истина;
	
	НоваяКнопка = Элементы.Вставить("гф_КнопкаПроверитьКМ", 
		ТипКнопкаФормы,
		Элементы.гф_ГруппаКнопокРегистрацияВозвратов);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "гф_ПроверитьКМ";
	НоваяКнопка.Картинка = БиблиотекаКартинок.ПодобратьТовары;

	// команда создания приходного ордера
	Команда = Команды.Добавить("гф_СоздатьПриходныйОрдерНаТовары");
	Команда.Заголовок = "Создать приходный ордер на товары";
	Команда.Действие = "гф_СоздатьПриходныйОрдерНаТовары";
	
	НоваяКнопка = Элементы.Вставить("гф_КнопкаСоздатьПриходныйОрдерНаТовары", 
	ТипКнопкаФормы,
	Элементы.гф_ГруппаКнопокРегистрацияВозвратов);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "гф_СоздатьПриходныйОрдерНаТовары";
	// vvv Галфинд \ Sakovich 23.03.2023
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=812ebcee7bda45d711edc9317888e8d6
	// кнопку скрываем, создание ПОТ производим автоматически при проведении документа (см. гф_ПослеЗаписиНаСервереПосле)
	НоваяКнопка.Видимость = Ложь;
	// ^^^ Галфинд \ Sakovich 23.03.2023 
	
	// команда создания документов "Корректировка реализации"
	Команда = Команды.Добавить("гф_СоздатьКорректировкиРеализаций");
	Команда.Заголовок = "3. Создать корректировку реализации по данным ""Принят складом""";
	Команда.Действие = "гф_СоздатьКорректировкиРеализаций";
	
	НоваяКнопка = Элементы.Вставить("гф_КнопкаСоздатьКорректировкиРеализаций", 
		ТипКнопкаФормы,
		Элементы.гф_ГруппаКнопокРегистрацияВозвратов);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "гф_СоздатьКорректировкиРеализаций";
	
	// ++ Галфинд_Домнышева_10_04-2023
	// команда проверки КМ, запрос в ЦРПТ 
	Команда = Команды.Добавить("гф_ПроверитьКМПослеПодписания");
	Команда.Заголовок = "4. Проверка КМ после подписания УКД";
	Команда.Действие = "гф_ПроверитьКМПослеПодписания";
	
	НоваяКнопка = Элементы.Вставить("гф_КнопкаПроверитьКМПослеПодписания", 
		ТипКнопкаФормы,
		Элементы.гф_ГруппаКнопокРегистрацияВозвратов);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "гф_ПроверитьКМПослеПодписания";
	
	// команда создания возврата товаров от клиентов
	Команда = Команды.Добавить("гф_СоздатьДокументВозврат");
	Команда.Заголовок = "5. Создать документ ""Возврат товаров от клиента""";
	Команда.Действие = "гф_СоздатьДокументВозврат";
	
	НоваяКнопка = Элементы.Вставить("гф_КнопкаСоздатьДокументВозврат", 
		ТипКнопкаФормы,
		Элементы.гф_ГруппаКнопокРегистрацияВозвратов);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "гф_СоздатьДокументВозврат";
	// -- Галфинд_Домнышева_10_04-2023  
	
	// команда создания заказа на эмиссию кодов маркировки
	Команда = Команды.Добавить("гф_ЗаказатьКМ");
	Команда.Заголовок = "6. Создать документ ""Заказ на эмиссию кодов маркировки""";
	Команда.Действие = "гф_ЗаказатьКМ";
	
	НоваяКнопка = Элементы.Вставить("гф_КнопкаЗаказатьКМ", 
		ТипКнопкаФормы,
		Элементы.гф_ГруппаКнопокРегистрацияВозвратов);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "гф_ЗаказатьКМ";
	
	// ++ Галфинд_Домнышева_10_04-2023
	
	// команда создания документа Перемаркировка товаров ИС МП
	Команда = Команды.Добавить("гф_СоздатьПеремаркировкуТовара");
	Команда.Заголовок = "7. Создать Перемаркировку товара";
	Команда.Действие = "гф_СоздатьПеремаркировкуТовара";
	
	НоваяКнопка = Элементы.Вставить("гф_КнопкаСоздатьПеремаркировкуТовара", 
		ТипКнопкаФормы,
		Элементы.гф_ГруппаКнопокРегистрацияВозвратов);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "гф_СоздатьПеремаркировкуТовара";
	
	НовыйЭлемент  = Элементы.Добавить("гф_ВозвращаемыеТоварыДокументПриходныйОрдер", ТипПолеФормы, Элементы.ВозвращаемыеТовары);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;      
	НовыйЭлемент.ПутьКДанным = "Объект.ВозвращаемыеТовары.гф_ДокументПриходныйОрдер"; 
	
	НовыйЭлемент  = Элементы.Добавить("гф_ВозвращаемыеТоварыДокументКорректировкаРеализации", ТипПолеФормы, Элементы.ВозвращаемыеТовары);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;      
	НовыйЭлемент.ПутьКДанным = "Объект.ВозвращаемыеТовары.гф_ДокументКорректировкаРеализации";
    
	НовыйЭлемент  = Элементы.Добавить("гф_ВозвращаемыеТоварыДокументЭмиссияКМ", ТипПолеФормы, Элементы.ВозвращаемыеТовары);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;      
	НовыйЭлемент.ПутьКДанным = "Объект.ВозвращаемыеТовары.гф_ДокументЭмиссияКМ";
	
	НовыйЭлемент  = Элементы.Добавить("гф_ВозвращаемыеТоварыДокументВозврат", ТипПолеФормы, Элементы.ВозвращаемыеТовары);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;      
	НовыйЭлемент.ПутьКДанным = "Объект.ВозвращаемыеТовары.гф_ДокументВозврат";
   
	НовыйЭлемент  = Элементы.Добавить("гф_ВозвращаемыеТоварыПеремаркировкаТовара", ТипПолеФормы, Элементы.ВозвращаемыеТовары);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;      
	НовыйЭлемент.ПутьКДанным = "Объект.ВозвращаемыеТовары.гф_ПеремаркировкаТовара";
	
	Элементы.ВозвращаемыеТоварыДокументРеализации.АвтоОтметкаНезаполненного = Истина;
    // -- Галфинд_Домнышева_10_04-2023
	
	// ++ Галфинд_Домнышева_22_06_2023
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee05074993466e
	НовыйЭлемент  = Элементы.Добавить("гф_ВозвращаемыеТоварыКорректировкаНазначения", ТипПолеФормы, Элементы.ВозвращаемыеТовары);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;      
	НовыйЭлемент.ПутьКДанным = "Объект.ВозвращаемыеТовары.гф_КорректировкаНазначения";
	
	// команда создания документа Корректировка назначения
	Команда = Команды.Добавить("гф_ИзменитьНазначение");
	Команда.Заголовок = "8. Изменить назначение";
	Команда.Действие = "гф_ИзменитьНазначение";
	
	НоваяКнопка = Элементы.Вставить("гф_КнопкаИзменитьНазначение", 
		ТипКнопкаФормы,
		Элементы.гф_ГруппаКнопокРегистрацияВозвратов);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "гф_ИзменитьНазначение";
    // ++ Галфинд_Домнышева_22_06_2023

	// ++ Галфинд_ДомнышеваКР_07_06_2023
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee0383d7909af6
	Команда = Команды.Добавить("гф_СоздатьПриходныйОрдерНаТоварыНеПринятых");
	Команда.Заголовок = "Создать приходный ордер (непринятые)";
	Команда.Действие = "гф_СоздатьПриходныйОрдерНаТоварыНеПринятых";
	Команда.Подсказка = "Создание приходного ордера по неотменненным и не принятым позициям складом"; 
	
	НоваяКнопка = Элементы.Вставить("гф_КнопкаСоздатьПриходныйОрдерНаТоварыНеПринятых", 
	ТипКнопкаФормы,
	Элементы.ВозвращаемыеТовары.КоманднаяПанель);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "гф_СоздатьПриходныйОрдерНаТоварыНеПринятых";
	НоваяКнопка.Видимость = Истина;
    // -- Галфинд_ДомнышеваКР_07_06_2023

КонецПроцедуры

// #wortmann {
// ++ Галфинд_ДомнышеваКР_07_06_2023
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee0383d7909af6
&НаСервере
Процедура СоздатьПриходныйОрдерНаТоварыНеПринятыеНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);   //Добавлено  Галфинд_Домнышева_КР_20_06_2023
	
	Отбор = Новый Структура;
	Отбор.Вставить("гф_ПринятСкладом", Ложь);
	ЗагружаемыеТовары = Объект.ВозвращаемыеТовары.Выгрузить(Отбор);
	
	Если ЗагружаемыеТовары.Количество() > 0 Тогда
		Документы.ЗаявкаНаВозвратТоваровОтКлиента.гф_СоздатьПриходныйОрдерНаТовары(Объект.Ссылка, ЗагружаемыеТовары);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В табличной части нет товаров не принятных складом.");
	КонецЕсли;
	
КонецПроцедуры// } #wortmann

&НаСервере
Процедура гф_ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	Объект.ВозвращаемыеТовары.Очистить();
	ТоварыДобавлены = Ложь;
	Для каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда 
			Продолжить;
		КонецЕсли;
		
		нс = Объект.ВозвращаемыеТовары.Добавить();
		нс.Номенклатура = СтрокаТаблицы.Номенклатура;
		нс.Характеристика = СтрокаТаблицы.Характеристика;
		нс.Количество = СтрокаТаблицы.Количество;
		нс.КоличествоУпаковок = СтрокаТаблицы.Количество;
		нс.гф_ПринятыеКМ = СтрокаТаблицы.гф_ПринятыеКМ;
		// #wortmann {
		// ++ Галфинд_Домнышева_25_04_2023
		// e1cib/data/Задача.ЗадачаИсполнителя?ref=8131bcee7bda45d711edd201ed470fa8		
		// нс.гф_КМСтрокой = СтрокаТаблицы.гф_КМСтроко;
		нс.гф_КМСтрокой = СтрокаТаблицы.гф_КМСтрокой;
		нс.гф_КМИзФайла = СтрокаТаблицы.гф_КМИзФайла;
		// } #wortmann
		нс.ДатаПоступления = Объект.ДатаПоступления;
		ТоварыДобавлены = Истина;
	КонецЦикла;
	
		Если ТоварыДобавлены Тогда
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнитьКМСтрокой()

	Для каждого СтрТч Из Объект.ВозвращаемыеТовары Цикл
		Если ЗначениеЗаполнено(СтрТч["гф_ПринятыеКМ"]) Тогда
		КМСтрокой = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрТч["гф_ПринятыеКМ"], "ЗначениеШтрихкода");
			СтрТч["гф_КМСтрокой"] = КМСтрокой;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ТекстЗапросаДокументыПродажи()
	
	Возврат "ВЫБРАТЬ
	|	т.НомерСтроки КАК НомерСтроки,
	|	т.гф_КМСтрокой КАК КМСтрокой,
	|	т.гф_КлиентЯвляетсяВладельцемКМ КАК КлиентЯвляетсяВладельцемКМ,
	|	т.гф_ПринятыеКМ КАК ПринятыеКМ,
	|	т.Номенклатура КАК Номенклатура,
	|	т.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ вт_Товары
	|ИЗ
	|	&табДанные КАК т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_Товары.НомерСтроки КАК НомерСтроки,
	|	вт_Товары.КМСтрокой КАК КМСтрокой,
	|	вт_Товары.КлиентЯвляетсяВладельцемКМ КАК КлиентЯвляетсяВладельцемКМ,
	|	спрШтрихкоды.Ссылка КАК ШтрихкодСсылка,
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	|	ШтрихкодыНоменклатуры.Штрихкод КАК GTIN
	|ПОМЕСТИТЬ ИскомыеШтрихкоды
	|ИЗ
	|	вт_Товары КАК вт_Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК спрШтрихкоды
	|		ПО вт_Товары.КМСтрокой = спрШтрихкоды.ЗначениеШтрихкода
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО вт_Товары.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|			И вт_Товары.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИскомыеШтрихкоды.КМСтрокой КАК КМСтрокой,
	|	ИскомыеШтрихкоды.ШтрихкодСсылка КАК КМСсылка,
	|	ИскомыеШтрихкоды.Номенклатура КАК Номенклатура,
	|	ИскомыеШтрихкоды.Характеристика КАК Характеристика,
	|	ИскомыеШтрихкоды.GTIN КАК GTIN,
	|	ВЫРАЗИТЬ(ДвижениеКодов.Регистратор КАК Документ.РеализацияТоваровУслуг) КАК Регистратор,
	|	ВЫРАЗИТЬ(ДвижениеКодов.Регистратор КАК Документ.РеализацияТоваровУслуг).Дата КАК Дата
	|ПОМЕСТИТЬ Регистраторы
	|ИЗ
	|	ИскомыеШтрихкоды КАК ИскомыеШтрихкоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ВлШтрихкоды
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.гф_ДвижениеКодовМаркировкиОрганизации.Обороты(, &КонецПериода, Регистратор, Склад = &Клиент) КАК ДвижениеКодов
	|			ПО ВлШтрихкоды.Ссылка = ДвижениеКодов.КМ
	|		ПО (ВлШтрихкоды.Штрихкод = ИскомыеШтрихкоды.ШтрихкодСсылка)
	|ГДЕ
	|	ВЫРАЗИТЬ(ДвижениеКодов.Регистратор КАК Документ.РеализацияТоваровУслуг) ЕСТЬ НЕ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИскомыеШтрихкоды.КМСтрокой,
	|	ИскомыеШтрихкоды.ШтрихкодСсылка,
	|	ИскомыеШтрихкоды.Номенклатура,
	|	ИскомыеШтрихкоды.Характеристика,
	|	ИскомыеШтрихкоды.GTIN,
	|	ВЫРАЗИТЬ(ДвижениеКодов.Регистратор КАК Документ.РеализацияТоваровУслуг),
	|	ВЫРАЗИТЬ(ДвижениеКодов.Регистратор КАК Документ.РеализацияТоваровУслуг).Дата
	|ИЗ
	|	ИскомыеШтрихкоды КАК ИскомыеШтрихкоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.гф_ДвижениеКодовМаркировкиОрганизации.Обороты(, &КонецПериода, Регистратор, Склад = &Клиент) КАК ДвижениеКодов
	|		ПО ИскомыеШтрихкоды.ШтрихкодСсылка = ДвижениеКодов.КМ
	|ГДЕ
	|	ВЫРАЗИТЬ(ДвижениеКодов.Регистратор КАК Документ.РеализацияТоваровУслуг) ЕСТЬ НЕ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КМСтрокой,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИскомыеШтрихкоды.НомерСтроки КАК НомерСтроки,
	|	ИскомыеШтрихкоды.Номенклатура КАК Номенклатура,
	|	ИскомыеШтрихкоды.Характеристика КАК Характеристика,
	|	ИскомыеШтрихкоды.GTIN КАК GTIN,
	|	ИскомыеШтрихкоды.КМСтрокой КАК КМСтрокой,
	|	ИскомыеШтрихкоды.КлиентЯвляетсяВладельцемКМ КАК КлиентЯвляетсяВладельцемКМ,
	|	Регистраторы.Регистратор КАК ДокументРеализации,
	|	Регистраторы.Дата КАК Дата,
	|	РеализацияТоваровУслугТовары.Цена КАК Цена,
	|	РеализацияТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
	|	1 КАК Количество,
	|	1 КАК КоличествоУпаковок
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	ИскомыеШтрихкоды КАК ИскомыеШтрихкоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ Регистраторы КАК Регистраторы
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|			ПО Регистраторы.Регистратор = РеализацияТоваровУслугТовары.Ссылка
	|				И Регистраторы.Номенклатура = РеализацияТоваровУслугТовары.Номенклатура
	|				И Регистраторы.Характеристика = РеализацияТоваровУслугТовары.Характеристика
	|		ПО ИскомыеШтрихкоды.КМСтрокой = Регистраторы.КМСтрокой
	|			И ИскомыеШтрихкоды.Номенклатура = Регистраторы.Номенклатура
	|			И ИскомыеШтрихкоды.Характеристика = Регистраторы.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.НомерСтроки КАК НомерСтроки,
	|	Данные.КМСтрокой КАК КМСтрокой,
	|	РеализацияТоваровУслуг.Ссылка КАК ДокументРеализации,
	|	РеализацияТоваровУслуг.Дата КАК Дата,
	|	РеализацияТоваровУслугТовары.Цена КАК Цена,
	|	РеализацияТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
	|	1 КАК Количество,
	|	1 КАК КоличествоУпаковок
	|ИЗ
	|	Данные КАК Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|			ПО (РеализацияТоваровУслугТовары.Ссылка = РеализацияТоваровУслуг.Ссылка)
	|		ПО (Данные.Номенклатура = РеализацияТоваровУслугТовары.Номенклатура)
	|			И (Данные.Характеристика = РеализацияТоваровУслугТовары.Характеристика)
	|ГДЕ
	|	Данные.КлиентЯвляетсяВладельцемКМ
	|	И Данные.ДокументРеализации ЕСТЬ NULL
	|	И РеализацияТоваровУслуг.Контрагент = &Клиент
	|	И РеализацияТоваровУслуг.Дата <= &КонецПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	КМСтрокой,
	|	Дата УБЫВ";
	
КонецФункции

&НаСервере
Процедура СоздатьШтрихкодыУпаковокТоваров(МассивКМДляЗаписи);

	Для каждого Эл Из МассивКМДляЗаписи Цикл
		
		Если Не ЗначениеЗаполнено(Эл["гф_ПринятыеКМ"]) Тогда
			
			ссШтрихкодУпаковки = Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту("ЗначениеШтрихкода", Эл["гф_КМСтрокой"]);
			Если ЗначениеЗаполнено(ссШтрихкодУпаковки) Тогда
				обШтрихкодУпаковки = ссШтрихкодУпаковки.ПолучитьОбъект();
			Иначе
				обШтрихкодУпаковки = Справочники.ШтрихкодыУпаковокТоваров.СоздатьЭлемент();
			КонецЕсли;
			
			// vvv Галфинд \ Sakovich 11.08.2023
			// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee0441749bccbe
			// ...  Если нет КМ - создать со статусом WG_НеНайден
			ЗаписатьИсториюСтатусов = Ложь;
			Если обШтрихкодУпаковки.ЭтоНовый() Тогда
				обШтрихкодУпаковки.гф_Статус = Перечисления.гф_СтатусыКМ_в_ШК.WG_НеНайден;
				ЗаписатьИсториюСтатусов = Истина;
			КонецЕсли;
			// ^^^ Галфинд \ Sakovich 11.08.2023
			
			Если обШтрихкодУпаковки.ЭтоНовый() Тогда
				обШтрихкодУпаковки.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
			КонецЕсли;
			Если обШтрихкодУпаковки.ЭтоНовый() Тогда
				обШтрихкодУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix;
			КонецЕсли;
			Если обШтрихкодУпаковки["ЗначениеШтрихкода"] <> Эл["гф_КМСтрокой"] Тогда
				обШтрихкодУпаковки["ЗначениеШтрихкода"] = Эл["гф_КМСтрокой"];
			КонецЕсли;
			Если обШтрихкодУпаковки["Номенклатура"] <> Эл["Номенклатура"] Тогда
				обШтрихкодУпаковки["Номенклатура"] = Эл["Номенклатура"];
			КонецЕсли;
			Если обШтрихкодУпаковки["Характеристика"] <> Эл["Характеристика"] Тогда
				обШтрихкодУпаковки["Характеристика"] = Эл["Характеристика"];
			КонецЕсли;
			Если Не ЗначениеЗаполнено(обШтрихкодУпаковки["Ответственный"]) Тогда
				обШтрихкодУпаковки["Ответственный"] = Пользователи.АвторизованныйПользователь();
			КонецЕсли;
			// ++ Галфинд_ДомнышеваКР_06_06_2023
			// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee037a532c5a19
			Если НЕ ЗначениеЗаполнено(обШтрихкодУпаковки["Количество"]) Тогда
				обШтрихкодУпаковки["Количество"] = 1;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(обШтрихкодУпаковки["гф_Комментарий"]) Тогда
				обШтрихкодУпаковки["гф_Комментарий"] = "Создан автоматически по возврату товара";
			Иначе
				обШтрихкодУпаковки["гф_Комментарий"] = "Изменен автоматически по возврату товара";
			КонецЕсли;
			// -- Галфинд_ДомнышеваКР_06_06_2023
			
			Если обШтрихкодУпаковки.ЭтоНовый()
				ИЛИ обШтрихкодУпаковки.Модифицированность() Тогда
				Попытка
					обШтрихкодУпаковки.Записать();
					ОбщегоНазначения.СообщитьПользователю("Записан элемент справочника ""Штрихкоды упаковок товаров"": " +
					обШтрихкодУпаковки.Ссылка);
				Исключение
					ОбщегоНазначения.СообщитьПользователю("Не удалось записать элемент справочника ""Штрихкоды упаковок товаров"" 
					|с значением штрихкода " + Эл["гф_КМСтрокой"]);
				КонецПопытки;	
			КонецЕсли;
			Если ЗначениеЗаполнено(обШтрихкодУпаковки.Ссылка) Тогда
				
				// vvv Галфинд \ Sakovich 14.08.2023
				// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee0441749bccbe
				// ...  Если нет КМ - создать со статусом WG_НеНайден
				Если ЗаписатьИсториюСтатусов Тогда
					Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
						лДокумент = Объект.Ссылка;
					Иначе
						лДокумент = "Заявка на возврат товаров от клиента";
					КонецЕсли;
					лПериод = ТекущаяДатаСеанса();
					гф_ЭмиссияКодовМаркировкиВызовСервера.ЗаписатьИсторияСтатусовКМ(
						лПериод,
						обШтрихкодУпаковки.Ссылка,
						Перечисления.гф_СтатусыКМ_в_ШК.WG_НеНайден,
						лДокумент);
				КонецЕсли;
				// ^^^ Галфинд \ Sakovich 14.08.2023
				
				// заполним поле в строке ТЧ документа	
				СтруктураОтбора = Новый Структура("НомерСтроки, гф_КМСтрокой",  Эл["НомерСтроки"], Эл["гф_КМСтрокой"]);
				мСтрокТч = Объект.ВозвращаемыеТовары.НайтиСтроки(СтруктураОтбора);
				Если мСтрокТч.Количество() > 0 Тогда
					мСтрокТч[0]["гф_ПринятыеКМ"] = обШтрихкодУпаковки.Ссылка;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// #wortmann { 
// На основе гф_ПроверитьКМ 
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8131bcee7bda45d711edd201ed470fa8
// Галфинд_Домнышева 2023/04/10
&НаКлиенте
Процедура гф_ПроверитьКМПослеПодписания(Команда)
	
	ИННВладельца = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Организация, "ИНН");
	ИННВладельцаПустой = СокрЛП(ИННВладельца) = "";
	
	Если ИННВладельцаПустой Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не заполнен ИНН организации. Невозможно проверить владельца КМ!");
		Возврат;
	КонецЕсли;
	
	#Область Вариант_проверки_с_открытием_формы_проверки
	ПараметрыОткрытия = Новый Структура;
	МассивСтруктурШтрихкодовДляПроверки = ПолучитьМассивШтрихкодов();	// массив структур
	ШтрихкодыДляПроверки = Новый Массив;
	Для каждого элМассива Из МассивСтруктурШтрихкодовДляПроверки Цикл
		ШтрихкодыДляПроверки.Добавить(элМассива["Штрихкод"]);
	КонецЦикла;
	ПараметрыОткрытия.Вставить("Организация", Объект.Организация);
	ПараметрыОткрытия.Вставить("Штрихкоды", ШтрихкодыДляПроверки);
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ФормаПроверкиШтрихкодовПослеПодписанияПриЗакрытии", ЭтотОбъект);
	ФормаПроверки = ОткрытьФорму("Обработка.ПроверкаКодовМаркировкиИСМП.Форма.ФормаПроверки", 
	ПараметрыОткрытия, ЭтотОбъект, , , , ОповещениеОЗакрытии);
	
	// данные проверки необходимо сформировать до закрытия формы проверки
	ДанныеПроверки = Новый Структура();
	ДанныеПроверки.Вставить("ДеревоКодовМаркировки", ФормаПроверки.ДеревоКодовМаркировки);
	Если ЭтоАдресВременногоХранилища(
		ФормаПроверки.КэшМаркируемойПродукции) Тогда
		ДанныеКэша = ПолучитьИзВременногоХранилища(ФормаПроверки.КэшМаркируемойПродукции);
		ДанныеПроверки.Вставить("КэшМаркируемойПродукции", ДанныеКэша); 
	Иначе
		ДанныеПроверки.Вставить("КэшМаркируемойПродукции", Неопределено); 
	КонецЕсли;
	ДанныеПроверки.Вставить("ЗагрузкаДанныхТСД", ФормаПроверки.ЗагрузкаДанныхТСД);
	
	Если ФормаПроверки.Открыта() Тогда
		ФормаПроверки.Закрыть(ДанныеПроверки);
	КонецЕсли;
	#КонецОбласти
	
КонецПроцедуры// } #wortmann

// #wortmann { 
// Вызов процедуры после закрытия формы проверки Штрихкодов 
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8131bcee7bda45d711edd201ed470fa8
// Галфинд_Домнышева 2023/04/10
&НаКлиенте
Процедура ФормаПроверкиШтрихкодовПослеПодписанияПриЗакрытии(Результат, ДополнительныеПараметры) Экспорт
	
	ПроверитьКМПослеПодписанияНаСервере(Результат, ДополнительныеПараметры);
		
КонецПроцедуры// } #wortmann

// #wortmann { 
// На основе гф_ПроверитьКМНаСервере 
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8131bcee7bda45d711edd201ed470fa8
// Галфинд_Домнышева 2023/04/10
&НаСервере
Процедура ПроверитьКМПослеПодписанияНаСервере(Результат, ДополнительныеПараметры)
	
	ДеревоКодовМаркировки = Результат["ДеревоКодовМаркировки"]; // ДанныеФормыДерево
	ЗагрузкаДанныхТСД = Результат["ЗагрузкаДанныхТСД"];
	КэшМаркируемойПродукции = Результат["КэшМаркируемойПродукции"]; // структура
	
	ИННВладельца = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Организация, "ИНН");
	ИННВладельцаПустой = СокрЛП(ИННВладельца) = "";
	
	ЭлементыДерева = ДеревоКодовМаркировки.ПолучитьЭлементы();
	Если ЭлементыДерева.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю("Не удалось получить данные проверки КМ от сервиса ИСМП.");
	Иначе
		Для каждого ЭлДерева Из ЭлементыДерева Цикл
			Если ЭлДерева["ИННВладельца"]  = "" И ЭлДерева["Статус"] = Неопределено Тогда
				ОбщегоНазначения.СообщитьПользователю("Строка №" + (ЭлементыДерева.Индекс(ЭлДерева) + 1) +
				": не удалось получить данные проверки КМ    " + ЭлДерева["Штрихкод"]);
			Иначе
				ПараметрыОтбора = Новый Структура("гф_КМСтрокой", ЭлДерева["Штрихкод"]);
				ЭлементыВозвращаемыеТовары = Объект.ВозвращаемыеТовары.НайтиСтроки(ПараметрыОтбора);
				Для каждого ЭлементТч Из ЭлементыВозвращаемыеТовары Цикл
					ЭлементТч["гф_ПроизведенаПроверкаКМ"] = Истина;
					ЭлементТч["гф_СтатусПроверкиКМ"] =  ЭлДерева["Статус"];
					Если ИННВладельца  = ЭлДерева["ИННВладельца"] И Не ИННВладельцаПустой Тогда
						ЭлементТч["гф_КлиентЯвляетсяВладельцемКМ"] = Истина;
					Иначе
						ЭлементТч["гф_ЗаказатьКМ"] = Истина;
						Модифицированность = Истина;
						ОбщегоНазначения.СообщитьПользователю("Строка №" + (ЭлементыДерева.Индекс(ЭлДерева) + 1) +
						": не пройдена проверка владельца КМ    " + ЭлДерева["Штрихкод"]);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// ++ Галфинд_Домнышева_15_06_2023 
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee044700672f31
	ЭтаФорма.Прочитать();
	Объект.Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.гф_КМПроверены;
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ЭтотОбъект.Прочитать();// Галфинд_Домнышева 2023/08/24
	Исключение
		ОбщегоНазначения.СообщитьПользователю("Не удалось провести документ с новым статусом ""КМ Проверены""."); 
		Модифицированность = Истина;
	КонецПопытки;
	// -- Галфинд_Домнышева_15_06_2023
	
КонецПроцедуры// } #wortmann

// #wortmann { 
// Команда создания документов Возврата 
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8131bcee7bda45d711edd201ed470fa8
// Галфинд_Домнышева 2023/04/10
&НаКлиенте
Процедура гф_СоздатьДокументВозврат(Команда)
	
	//++ Галфинд_Домнышева 2023/06/16
	Если УсловиеСтатусаМеньшеПроверен() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя создать документ ""Возврат товаров от клиентов"" со статусом ранее ""КМ Проверены""");
		Возврат;
	КонецЕсли;
	//-- Галфинд_Домнышева 2023/06/16

	Если НЕ гф_ПустыеВозвратыИзТаблицыСервере() ИЛИ ВозвратыСуществуют() Тогда
		
		ТекстВопроса = НСтр("ru='Уже есть документы Возврата
		|созданные на основании данной заявки на возврат. Продолжить?'");
		ДопПараметры = Новый Структура();
		Оповещение = Новый ОписаниеОповещения("гф_ВопросСоздатьВозвратЗавершение", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Иначе
		гф_СоздатьДокументыВозврата();
	КонецЕсли;
	
КонецПроцедуры// } #wortmann 

// #wortmann { 
// Функция проверки наличия документов Возврата в системе при их отсутствии в ТЧ
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8131bcee7bda45d711edd201ed470fa8
// Галфинд_Домнышева 2023/08/24
Функция ВозвратыСуществуют()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВозвратТоваровОтКлиента.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
		|ГДЕ
		|	ВозвратТоваровОтКлиента.ЗаявкаНаВозвратТоваровОтКлиента = &ЗаявкаНаВозвратТоваровОтКлиента
		|	И ВозвратТоваровОтКлиента.ПометкаУдаления = Ложь
		|	И ВозвратТоваровОтКлиента.Проведен = Истина";
	
	Запрос.УстановитьПараметр("ЗаявкаНаВозвратТоваровОтКлиента", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции// } #wortmann
// #wortmann { 
// Проверяет Статус документа на соотвтствие "меньше" гф_КМПроверены 
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee0c41dd812d6b
// Галфинд_Домнышева 2023/06/16
Функция УсловиеСтатусаМеньшеПроверен()
	
	Если Объект.Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована 
		ИЛИ Объект.Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату 
		ИЛИ Объект.Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
		
КонецФункции

// #wortmann { 
// Процедура выбора строк по которым требуется создать документы Возврата 
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8131bcee7bda45d711edd201ed470fa8
// Галфинд_Домнышева 2023/04/10
&НаСервере
Процедура гф_СоздатьДокументыВозврата()
	 
	ВозвращаемыеТовары = Объект.ВозвращаемыеТовары.Выгрузить();
	вспТЗ = ВозвращаемыеТовары.Скопировать(, "ДокументРеализации"); 
	вспТЗ.Свернуть("ДокументРеализации");
	Для каждого стрТЗ Из вспТЗ Цикл
	
		Если ЗначениеЗаполнено(стрТЗ["ДокументРеализации"]) И
			ТипЗнч(стрТЗ["ДокументРеализации"]) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда 
			ПараметрыОтбора = Новый Структура();
			ПараметрыОтбора.Вставить("ДокументРеализации",  стрТЗ["ДокументРеализации"]);
			ПараметрыОтбора.Вставить("Отменено", Ложь);
			ПараметрыОтбора.Вставить("гф_ПринятСкладом", Истина);

			мСтрокТовары = ВозвращаемыеТовары.НайтиСтроки(ПараметрыОтбора);
			Если мСтрокТовары.Количество() > 0 Тогда
				ВозвращаемыеТоварыПоРеализации = ВозвращаемыеТовары.Скопировать(мСтрокТовары);
				гф_СоздатьДокументВозвратНаСервере(стрТЗ["ДокументРеализации"], ВозвращаемыеТоварыПоРеализации);
			КонецЕсли;
		КонецЕсли; 
		
	КонецЦикла;

 КонецПроцедуры// } #wortmann
 
// #wortmann { 
// Процедура создания документа Возврата согласно ТаблицаВозвращаемыхТоваров на основе Реализации 
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8131bcee7bda45d711edd201ed470fa8
// Галфинд_Домнышева 2023/04/10
&НаСервере
Процедура гф_СоздатьДокументВозвратНаСервере(Реализация, ТаблицаВозвращаемыхТоваров)
	
	УстановитьПривилегированныйРежим(Истина);   //Добавлено  ДомнышеваКР_21_06_2023
	
	ДокументВозвратТоваров = Документы.ВозвратТоваровОтКлиента.СоздатьДокумент();
	ДокументВозвратТоваров.Заполнить(Объект.Ссылка); 
	ДокументВозвратТоваров.Дата = ТекущаяДатаСеанса();
   	ДокументВозвратТоваров.ДокументРеализации = Реализация;	
	
	СтрокиКУдалению = Новый Массив;
	
	Для Каждого Строка Из ДокументВозвратТоваров.Товары Цикл
		
		Если Строка.ДокументРеализации <> Реализация Тогда
			СтрокиКУдалению.Добавить(Строка);
		КонецЕсли;
		
	КонецЦикла;
			
	Для Каждого Строка Из СтрокиКУдалению Цикл
		ДокументВозвратТоваров.Товары.Удалить(Строка);
	КонецЦикла;
	
	// ++ Галфинд_ДомнышеваКР_23_08_2023
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee458538399a74
	тчШтрикодыУпаковок = ДокументВозвратТоваров.ШтрихкодыУпаковок;
	
	Для каждого стрВозвр Из ТаблицаВозвращаемыхТоваров Цикл
		СтрокаШтрихкод = тчШтрикодыУпаковок.Добавить();
		СтрокаШтрихкод.ШтрихкодУпаковки = стрВозвр["гф_ПринятыеКМ"]; 
	КонецЦикла;
	// -- Галфинд_ДомнышеваКР_23_08_2023

	Если ДокументВозвратТоваров.РасшифровкаПлатежа.Итог("Сумма") > ДокументВозвратТоваров.Товары.Итог("СуммаСНДС") Тогда
	     ПересчитатьРасшифровкуПлатежа(ДокументВозвратТоваров);
	КонецЕсли;
	
	Попытка
		ДокументВозвратТоваров.Записать(РежимЗаписиДокумента.Проведение);
		ОбщегоНазначения.СообщитьПользователю("Создан документ " + ДокументВозвратТоваров.Ссылка + " на основании " +
		"документа " + Объект.Ссылка);
		// ++ Галфинд_ДомнышеваКР_08_11_2023
		// убрано в отдельную процедуру для записи в тек.док.
		//Для Каждого Строка Из Объект.ВозвращаемыеТовары Цикл
		//	Если Строка["Отменено"] = Ложь И Строка["ДокументРеализации"] = Реализация Тогда 
		//		Строка["гф_ДокументВозврат"] = ДокументВозвратТоваров.Ссылка; 
		//	КонецЕсли;
		//КонецЦикла;
		//
		//Модифицированность = Истина;
		ЗаписатьДокументВозвратаВТабличнуюЧасть(ДокументВозвратТоваров.Ссылка, Реализация);
		// -- Галфинд_ДомнышеваКР_08_11_2023
		
	Исключение
		ОбщегоНазначения.СообщитьПользователю("Не удалось создать документ ""Возврат товаров от клиента"" на основании " +
		"документа " + Объект.Ссылка);
	КонецПопытки;
	
	ЗаполнитьНомераГТДПоРеализации(ДокументВозвратТоваров, Реализация);// Галфинд_Домнышева_24_08_2023
	
КонецПроцедуры// } #wortmann

// #wortmann { 
// Записывает созданный документ в ТЧ 
// Галфинд_Домнышева 2023/11/08
&НаСервере
Процедура ЗаписатьДокументВозвратаВТабличнуюЧасть(ДокументВозвратТоваров, Реализация)
	
	ЭтаФорма.Прочитать();
	Для Каждого Строка из Объект.ВозвращаемыеТовары Цикл
		Если Строка["Отменено"] = Ложь И Строка["ДокументРеализации"] = Реализация Тогда
		Строка["гф_ДокументВозврат"] = ДокументВозвратТоваров;
		КонецЕсли;
	КонецЦикла;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	ДокументОбъект.Записать(); 
	ЭтотОбъект.Прочитать();

КонецПроцедуры// } #wortmann

// #wortmann { 
// Из-за удаления ненужных строк из документа пересчитываем ТЧ РасшифровкаПлатежа
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8131bcee7bda45d711edd201ed470fa8
// Галфинд_Домнышева 2023/04/10
&НаСервере
Процедура ПересчитатьРасшифровкуПлатежа(ДокументВозвратТоваров)
	
	ДокументВозвратТоваров.РасшифровкаПлатежа.Очистить();
	Для Каждого Товар Из ДокументВозвратТоваров.Товары Цикл
		 НоваяСтрока = ДокументВозвратТоваров.РасшифровкаПлатежа.Добавить();
		 НоваяСтрока.Сумма = Товар.СуммаСНДС;
		 НоваяСтрока.ВалютаВзаиморасчетов = ДокументВозвратТоваров.Договор.ВалютаВзаиморасчетов;
	КонецЦикла;
	
КонецПроцедуры// } #wortmann

// #wortmann { 
// Заполнение Номеров ГТД (на основе проц. ЗаполнитьНомераГТДПоРаспоряжениям из МО док. ВозвратТоваровОтКлиента
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8131bcee7bda45d711edd201ed470fa8
// Галфинд_Домнышева 2023/04/10
&НаСервере
Процедура ЗаполнитьНомераГТДПоРеализации(ДокументВозвратТоваров, Реализация)  
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаОтбора.ДокументРеализации КАК ДокументРеализации,
		|	ТаблицаОтбора.Номенклатура КАК Номенклатура,
		|	ТаблицаОтбора.Характеристика КАК Характеристика,
		|	ТаблицаОтбора.Назначение КАК Назначение,
		|	ТаблицаОтбора.Серия КАК Серия,
		|	ТаблицаОтбора.Количество КАК Количество
		|ПОМЕСТИТЬ ВТВнешняяТаблица
		|ИЗ
		|	Документ.ВозвратТоваровОтКлиента.Товары КАК ТаблицаОтбора
		|ГДЕ
		|	ТаблицаОтбора.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОтбора.ДокументРеализации КАК ДокументРеализации,
		|	ТаблицаОтбора.Номенклатура КАК Номенклатура,
		|	ТаблицаОтбора.Характеристика КАК Характеристика,
		|	ТаблицаОтбора.Назначение КАК Назначение,
		|	ТаблицаОтбора.Серия КАК Серия,
		|	СУММА(ТаблицаОтбора.Количество) КАК Количество
		|ПОМЕСТИТЬ ВТТаблицаОтбора
		|ИЗ
		|	ВТВнешняяТаблица КАК ТаблицаОтбора
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОтбора.ДокументРеализации,
		|	ТаблицаОтбора.Номенклатура,
		|	ТаблицаОтбора.Характеристика,
		|	ТаблицаОтбора.Назначение,
		|	ТаблицаОтбора.Серия
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТаблицаОтбора.ДокументРеализации,
		|	ТаблицаОтбора.Номенклатура,
		|	ТаблицаОтбора.Характеристика,
		|	ТаблицаОтбора.Назначение,
		|	ТаблицаОтбора.Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НаборДанных.ДокументРеализации КАК ДокументРеализации,
		|	НаборДанных.Номенклатура КАК Номенклатура,
		|	НаборДанных.Характеристика КАК Характеристика,
		|	НаборДанных.Назначение КАК Назначение,
		|	НаборДанных.Серия КАК Серия,
		|	НаборДанных.НомерГТД КАК НомерГТД,
		|	СУММА(НаборДанных.Количество) КАК Количество
		|ПОМЕСТИТЬ ВТРеализовано
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаОтбора.ДокументРеализации КАК ДокументРеализации,
		|		ТаблицаОтбора.Номенклатура КАК Номенклатура,
		|		ТаблицаОтбора.Характеристика КАК Характеристика,
		|		ТаблицаОтбора.Назначение КАК Назначение,
		|		ТаблицаОтбора.Серия КАК Серия,
		|		ТоварыРеализации.НомерГТД КАК НомерГТД,
		|		ТоварыРеализации.Количество КАК Количество
		|	ИЗ
		|		ВТТаблицаОтбора КАК ТаблицаОтбора
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.ВидыЗапасов КАК ТоварыРеализации
		|			ПО ТаблицаОтбора.ДокументРеализации = ТоварыРеализации.Ссылка
		|				И ТаблицаОтбора.Номенклатура = ТоварыРеализации.АналитикаУчетаНоменклатуры.Номенклатура
		|				И ТаблицаОтбора.Характеристика = ТоварыРеализации.АналитикаУчетаНоменклатуры.Характеристика
		|				И ТаблицаОтбора.Серия = ТоварыРеализации.АналитикаУчетаНоменклатуры.Серия) КАК НаборДанных
		|
		|СГРУППИРОВАТЬ ПО
		|	НаборДанных.ДокументРеализации,
		|	НаборДанных.Номенклатура,
		|	НаборДанных.Характеристика,
		|	НаборДанных.Назначение,
		|	НаборДанных.Серия,
		|	НаборДанных.НомерГТД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТовары.ДокументРеализации КАК ДокументРеализации,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Характеристика КАК Характеристика,
		|	ТаблицаТовары.Назначение КАК Назначение,
		|	ТаблицаТовары.Серия КАК Серия,
		|	ТаблицаТовары.НомерГТД КАК НомерГТД,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество
		|ПОМЕСТИТЬ ВТВозвращенныеТовары
		|ИЗ
		|	ВТТаблицаОтбора КАК ТаблицаОтбора
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента.Товары КАК ТаблицаТовары
		|		ПО ТаблицаОтбора.ДокументРеализации = ТаблицаТовары.ДокументРеализации
		|			И ТаблицаОтбора.Номенклатура = ТаблицаТовары.Номенклатура
		|			И ТаблицаОтбора.Характеристика = ТаблицаТовары.Характеристика
		|			И ТаблицаОтбора.Серия = ТаблицаТовары.Серия
		|			И (ТаблицаТовары.Ссылка.Проведен)
		|			И (НЕ ТаблицаТовары.Ссылка = &Ссылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.ДокументРеализации,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Назначение,
		|	ТаблицаТовары.Серия,
		|	ТаблицаТовары.НомерГТД
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаТовары.ДокументПередачи,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Назначение,
		|	ТаблицаТовары.Серия,
		|	ТаблицаТовары.НомерГТД,
		|	СУММА(ТаблицаТовары.Количество)
		|ИЗ
		|	ВТТаблицаОтбора КАК ТаблицаОтбора
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровМеждуОрганизациями.Товары КАК ТаблицаТовары
		|		ПО ТаблицаОтбора.ДокументРеализации = ТаблицаТовары.ДокументПередачи
		|			И ТаблицаОтбора.Номенклатура = ТаблицаТовары.Номенклатура
		|			И ТаблицаОтбора.Характеристика = ТаблицаТовары.Характеристика
		|			И ТаблицаОтбора.Серия = ТаблицаТовары.Серия
		|			И (ТаблицаТовары.Ссылка.Проведен)
		|			И (НЕ ТаблицаТовары.Ссылка = &Ссылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.ДокументПередачи,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Назначение,
		|	ТаблицаТовары.Серия,
		|	ТаблицаТовары.НомерГТД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеализованныеТовары.ДокументРеализации КАК ДокументРеализации,
		|	РеализованныеТовары.Номенклатура КАК Номенклатура,
		|	РеализованныеТовары.Характеристика КАК Характеристика,
		|	РеализованныеТовары.Назначение КАК Назначение,
		|	РеализованныеТовары.Серия КАК Серия,
		|	РеализованныеТовары.НомерГТД КАК НомерГТД,
		|	ЕСТЬNULL(НомераГТД.СтранаПроисхождения, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) КАК СтранаПроисхождения,
		|	СУММА(РеализованныеТовары.Количество - ЕСТЬNULL(ВозвращенныеТовары.Количество, 0)) КАК Количество
		|ИЗ
		|	ВТРеализовано КАК РеализованныеТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВозвращенныеТовары КАК ВозвращенныеТовары
		|		ПО РеализованныеТовары.ДокументРеализации = ВозвращенныеТовары.ДокументРеализации
		|			И РеализованныеТовары.Номенклатура = ВозвращенныеТовары.Номенклатура
		|			И РеализованныеТовары.Характеристика = ВозвращенныеТовары.Характеристика
		|			И РеализованныеТовары.Серия = ВозвращенныеТовары.Серия
		|			И РеализованныеТовары.НомерГТД = ВозвращенныеТовары.НомерГТД
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК НомераГТД
		|		ПО РеализованныеТовары.НомерГТД = НомераГТД.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	РеализованныеТовары.ДокументРеализации,
		|	РеализованныеТовары.Номенклатура,
		|	РеализованныеТовары.Характеристика,
		|	РеализованныеТовары.Назначение,
		|	РеализованныеТовары.Серия,
		|	РеализованныеТовары.НомерГТД,
		|	ЕСТЬNULL(НомераГТД.СтранаПроисхождения, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка))
		|
		|ИМЕЮЩИЕ
		|	СУММА(РеализованныеТовары.Количество - ЕСТЬNULL(ВозвращенныеТовары.Количество, 0)) > 0";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументВозвратТоваров.ссылка);
	НомераГТДКЗаполнению = Запрос.Выполнить().Выгрузить();

	ПоляПоиска = "Номенклатура, Характеристика, Серия, Назначение, НомерГТД, ДокументРеализации";
	
	СтруктураПоиска = Новый Структура(ПоляПоиска);
	
	Для Каждого СтрНомерГТДКЗаполнению Из НомераГТДКЗаполнению Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрНомерГТДКЗаполнению);
		СтруктураПоиска.НомерГТД = Справочники.НомераГТД.ПустаяСсылка();
		
		СтрокиТоваров = ДокументВозвратТоваров.Товары.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрТовары Из СтрокиТоваров Цикл
						
			СтрТовары.НомерГТД = СтрНомерГТДКЗаполнению.НомерГТД;
						
		КонецЦикла;
		
	КонецЦикла;
	
	// #wortmann { 
	// Просто при записи документа Номера ГТД не идут в регистры, необходимо проведение. 
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee4245a115d440
	// Галфинд_Домнышева 2023/08/24
	Попытка
		ДокументВозвратТоваров.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		//ДокументВозвратТоваров.Записать(РежимЗаписиДокумента.Запись);
		ОбщегоНазначения.СообщитьПользователю("Не удалось записать номера ГТД в документ ""Возврат товаров от клиента"" на основании " +
		"документа " + Объект.Ссылка);
	КонецПопытки;
	// } #wortmann

КонецПроцедуры// } #wortmann

// #wortmann { 
// Команда создания документа Перемаркировки 
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8131bcee7bda45d711edd201ed470fa8
// Галфинд_Домнышева 2023/04/10
&НаКлиенте
Процедура гф_СоздатьПеремаркировкуТовара(Команда)
	// ++ Галфинд_ДомнышеваКР_13_06_2023 
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee039612724d33
	Если НЕ КодыМаркировкиЭммитированны() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заказанные коды не эмитированы, необходимо дождаться выполнения процесса.");
		Возврат;
	КонецЕсли;
	// -- Галфинд_ДомнышеваКР_13_06_2023
	СоздатьПеремаркировкиТовараНаСервере();

КонецПроцедуры// } #wortmann 

// #wortmann { 
// Проверка статуса документов ЗаказНаЭмиссиюКМ 
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee039612724d33
// Галфинд_Домнышева 2023/06/13
&НаСервере
Функция КодыМаркировкиЭммитированны()  
	
	ТЧ = Объект.ВозвращаемыеТовары.Выгрузить();
	МассивДокументов = ТЧ.ВыгрузитьКолонку("гф_ДокументЭмиссияКМ"); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатусыДокументовИСМП.Статус КАК Статус
		|ИЗ
		|	РегистрСведений.СтатусыДокументовИСМП КАК СтатусыДокументовИСМП
		|ГДЕ
		|	СтатусыДокументовИСМП.Документ В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Статус <> Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗКодыМаркировкиЭмитированы Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;

	Возврат Истина;
	
КонецФункции// } #wortmann

// #wortmann { 
// Процедура выбора строк по которым требуется создать документы Перемаркировки 
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8131bcee7bda45d711edd201ed470fa8
// Галфинд_Домнышева 2023/04/10
&НаСервере
Процедура СоздатьПеремаркировкиТовараНаСервере()
	
    СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("гф_ЗаказатьКМ", Истина);
	СоздатьПеремещения = Истина;
	ВозвращаемыеТовары = Объект.ВозвращаемыеТовары.Выгрузить();
	вспТЗ = ВозвращаемыеТовары.Скопировать(СтруктураОтбора, "гф_ДокументВозврат, гф_ПеремаркировкаТовара, гф_ДокументЭмиссияКМ"); 
	вспТЗ.Свернуть("гф_ДокументВозврат, гф_ПеремаркировкаТовара, гф_ДокументЭмиссияКМ");
	Для каждого стрТЗ Из вспТЗ Цикл
		Если ЗначениеЗаполнено(стрТЗ["гф_ПеремаркировкаТовара"]) Тогда 
			ОбщегоНазначения.СообщитьПользователю("По возврату " + стрТЗ["гф_ДокументВозврат"] 
			+ " уже создан документ Перемаркировки " + стрТЗ["гф_ПеремаркировкаТовара"]);
			Продолжить;
		КонецЕсли;	
		Если ЗначениеЗаполнено(стрТЗ["гф_ДокументВозврат"]) Тогда 
			мСтрокТовары = ВозвращаемыеТовары.НайтиСтроки(Новый Структура("гф_ДокументВозврат, гф_ЗаказатьКМ", стрТЗ["гф_ДокументВозврат"], Истина));
			Если мСтрокТовары.Количество() > 0 Тогда
				ВозвращаемыеТоварыДляПеремаркировки = ВозвращаемыеТовары.Скопировать(мСтрокТовары);
				СоздатьПеремаркировкуТовараНаСервере(стрТЗ["гф_ДокументВозврат"], ВозвращаемыеТоварыДляПеремаркировки, СоздатьПеремещения, стрТЗ["гф_ДокументЭмиссияКМ"]);
			Иначе
				ОбщегоНазначения.СообщитьПользователю("Нет данных для перемаркировки по документу " + стрТЗ["гф_ДокументВозврат"]);
			КонецЕсли;
		КонецЕсли; 
		
	КонецЦикла;
	
	Если СоздатьПеремещения Тогда
		СоздатьДокументыПеремещенияИОрдера();
	КонецЕсли;
	
КонецПроцедуры// } #wortmann 

// #wortmann { 
// Создание документы Перемаркировки товаров 
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8131bcee7bda45d711edd201ed470fa8
// Галфинд_Домнышева 2023/04/10
&НаСервере
Процедура СоздатьПеремаркировкуТовараНаСервере(Основание, ТоварыДляПеремаркировки, СоздатьПеремещения, ДокументЭмиссии)
	
	УстановитьПривилегированныйРежим(Истина);   //Добавлено  ДомнышеваКР_21_06_2023
	
    ПеремаркировкаОбъект = Документы.ПеремаркировкаТоваровИСМП.СоздатьДокумент();
	ПеремаркировкаОбъект.ДополнительныеСвойства.Вставить("НеЗаполнятьТабличнуюЧасть", Истина);
	ПеремаркировкаОбъект.Заполнить(Основание);
	ПеремаркировкаОбъект.Дата = ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗаполненияПеремаркировкиТоваровИСМПИзПрикладногоДокумента();
	
	Запрос.УстановитьПараметр("ТоварыДляПеремаркировки", ТоварыДляПеремаркировки);
	Запрос.УстановитьПараметр("ЭтаСсылка",         		 ПеремаркировкаОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", 		 Основание);
	Запрос.УстановитьПараметр("ОсобенностьУчета",  		Перечисления.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция);
	Запрос.УстановитьПараметр("ЗаказНаЭмиссию",  		ДокументЭмиссии);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		Для Счетчик = 1 По Выборка.Количество Цикл
			НоваяСтрока = ПеремаркировкаОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;

	КонецЦикла;
	
	ПеремаркировкаОбъект.ВидПродукции = Перечисления.ВидыПродукцииИС.Обувь;
  	
	Попытка
		ПеремаркировкаОбъект.Записать(РежимЗаписиДокумента.Запись);
		ОбщегоНазначения.СообщитьПользователю("Создан документ " + ПеремаркировкаОбъект.Ссылка + " на основании " +
		"документа " + ПеремаркировкаОбъект["ДокументОснование"]);
		ЗаписатьДокументПеремаркировкиВТабличнуюЧасть(ПеремаркировкаОбъект.Ссылка, Основание);
		СоздатьПеремещения = Истина;
	Исключение
		ОбщегоНазначения.СообщитьПользователю("Не удалось создать документ ""Перемаркировка товаров ИС МП"" на основании " +
		"документа " + Основание);
	КонецПопытки; 
	
КонецПроцедуры// } #wortmann

// #wortmann { 
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8131bcee7bda45d711edd201ed470fa8
// Галфинд_Домнышева 2023/04/10
// Взято за основу из ИнтеграцияИСМПУТ
&НаСервере
Функция ТекстЗапросаЗаполненияПеремаркировкиТоваровИСМПИзПрикладногоДокумента()
	
	ТекстЗапроса = 
	// изменен текст Галфинд_ДомнышеваКР_08_11-2023
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.гф_ПринятыеКМ КАК СтарыйКодМаркировки
	|ПОМЕСТИТЬ ВозвращаемыеТовары
	|ИЗ
	|	&ТоварыДляПеремаркировки КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.СтарыйКодМаркировки КАК СтарыйКодМаркировки,
	|	СУММА(Товары.КоличествоУпаковок) КАК КоличествоУпаковок
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	ВозвращаемыеТовары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|			И (СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета))
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.СтарыйКодМаркировки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПулКодовМаркировкиСУЗ.КодМаркировки КАК КодМаркировки,
	|	ПулКодовМаркировкиСУЗ.Номенклатура КАК Номенклатура,
	|	ПулКодовМаркировкиСУЗ.Характеристика КАК Характеристика,
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК Штрихкод
	|ПОМЕСТИТЬ НовыеКоды
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО ПулКодовМаркировкиСУЗ.КодМаркировки = ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода
	|ГДЕ
	|	ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию = &ЗаказНаЭмиссию
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Документ.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.РозничныйПокупатель)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратОтРозничногоПокупателя)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратОтЮридическогоЛица)
	|	КОНЕЦ КАК ПричинаПеремаркировки,
	|	ТоварыДокумента.Номенклатура КАК Номенклатура,
	|	ТоварыДокумента.Номенклатура.КодТНВЭД КАК КодТНВЭД,
	|	ТоварыДокумента.Характеристика КАК Характеристика,
	|	ТоварыДокумента.СтарыйКодМаркировки КАК КодМаркировки,
	|	ТоварыДокумента.Номенклатура КАК НоваяНоменклатура,
	|	ТоварыДокумента.Характеристика КАК НоваяХарактеристика,
	|	НовыеКоды.Штрихкод КАК НовыйКодМаркировки,
	|	СУММА(ТоварыДокумента.КоличествоУпаковок) КАК Количество
	|ИЗ
	|	Товары КАК ТоварыДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента КАК Документ
	|		ПО (Документ.Ссылка = &ДокументОснование)
	|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеКоды КАК НовыеКоды
	|		ПО (НовыеКоды.Номенклатура = ТоварыДокумента.Номенклатура)
	|			И (НовыеКоды.Характеристика = ТоварыДокумента.Характеристика)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА Документ.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.РозничныйПокупатель)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратОтРозничногоПокупателя)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратОтЮридическогоЛица)
	|	КОНЕЦ,
	|	ТоварыДокумента.Номенклатура,
	|	ТоварыДокумента.Номенклатура.КодТНВЭД,
	|	ТоварыДокумента.Характеристика,
	|	ТоварыДокумента.СтарыйКодМаркировки,
	|	НовыеКоды.Штрихкод,
	|	ТоварыДокумента.Номенклатура,
	|	ТоварыДокумента.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыДокумента.КоличествоУпаковок) > 0"; 
	
	Возврат ТекстЗапроса;
	
КонецФункции// } #wortmann

// #wortmann { 
// Создание документа Перемещения 
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8131bcee7bda45d711edd201ed470fa8
// Галфинд_Домнышева 2023/04/10
&НаСервере
Процедура СоздатьДокументыПеремещенияИОрдера()
	
	УстановитьПривилегированныйРежим(Истина);   //Добавлено  ДомнышеваКР_21_06_2023

	ВиртуальныеСклады = _омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначениеМассив("гф_ВиртуальныеСклады");
	
	Для Каждого Склад Из ВиртуальныеСклады Цикл
		Если Склад.гф_Организация = Объект.Организация Тогда
			ВиртуальныйСклад = Склад;
	        Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("гф_ЗаказатьКМ", Истина);
	
	ТоварыДляЗагрузки = Объект.ВозвращаемыеТовары.Выгрузить(СтруктураОтбора);
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Товары", ТоварыДляЗагрузки); 

	ПеремещениеОбъект1 = Документы.ПеремещениеТоваров.СоздатьДокумент();
	ПеремещениеОбъект1.Заполнить(ДанныеЗаполнения);
	ПеремещениеОбъект1.Организация = Объект.Организация;
	ПеремещениеОбъект1.СкладОтправитель = Объект.Склад; 
	ПеремещениеОбъект1.СкладПолучатель = ВиртуальныйСклад; 
	ПеремещениеОбъект1.Дата = ТекущаяДатаСеанса();
	ПеремещениеОбъект1.Статус = Перечисления.СтатусыПеремещенийТоваров.Отгружено;
	ПеремещениеОбъект1.гф_ЗаявкаНаВозврат = Объект.Ссылка; // ++ Галфинд_ДомнышеваКР_30_06_2023 
	// ++Галфинд_ДомнышеваКР_30_06_2023  
	// необходимо заполнять ТЧ ШтрихкодыУпаковок
	Для каждого Строка Из ТоварыДляЗагрузки Цикл
		нс = ПеремещениеОбъект1["гф_ШтрихкодыУпаковок"].Добавить();
		нс["ШтрихкодУпаковки"] = Строка.гф_ПринятыеКМ;
	КонецЦикла;
    // --Галфинд_ДомнышеваКР_30_06_2023 
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	ПеремещениеОбъект1.ДополнительныеСвойства.Вставить("гф_ОтгрузкаПеремещением", Истина);// ++ Галфинд_ДомнышеваКР_06_07_2023  
	Попытка
		ПеремещениеОбъект1.Записать(РежимЗаписиДокумента.Проведение);
		ПеремещениеОбъект1.гф_ПроверитьСоздатьОрдераПоПеремещению(ПеремещениеОбъект1, ПараметрыЗаписи);
		ОбщегоНазначения.СообщитьПользователю("Создан документ " + ПеремещениеОбъект1.Ссылка );
	Исключение
		ОбщегоНазначения.СообщитьПользователю("Не удалось создать документ ""Перемещение товаров""" +
		"со склада " + Объект.Склад + " на склад " + ВиртуальныйСклад + ОписаниеОшибки());
	КонецПопытки; 
	
КонецПроцедуры// } #wortmann

// #wortmann { 
// Записывает созданный документ в ТЧ 
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8131bcee7bda45d711edd201ed470fa8
// Галфинд_Домнышева 2023/04/10
&НаСервере
Процедура ЗаписатьДокументКорректировкиВТабличнуюЧасть(Корректировка, докРеализации)
	
	// ++ Галфинд_Домнышева_11_04_2023
	ЭтаФорма.Прочитать();
	Для Каждого Строка из Объект.ВозвращаемыеТовары Цикл
		Если Строка["ДокументРеализации"] = докРеализации И Строка["Отменено"] = Ложь 
			И Строка["гф_ПринятСкладом"] = Истина Тогда 
		Строка["гф_ДокументКорректировкаРеализации"] = Корректировка; 
		КонецЕсли;
	КонецЦикла;
	// ++ Галфинд_Домнышева_15_06_2023
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	ДокументОбъект.Записать();
	ЭтотОбъект.Прочитать();// Галфинд_Домнышева 2023/08/24
	// -- Галфинд_Домнышева_15_06_2023
	
	//Модифицированность = Истина;
	// --Галфинд_Домнышева_11_04_2023
КонецПроцедуры// } #wortmann 

// #wortmann { 
// Записывает созданный документ в ТЧ
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8131bcee7bda45d711edd201ed470fa8
// Галфинд_Домнышева 2023/04/10
&НаСервере
Процедура ЗаписатьДокументЭмиссииВТабличнуюЧасть()
	
	// ++ Галфинд_Домнышева_11_04_2023
	ЭтаФорма.Прочитать();
	Для Каждого Строка из Объект.ВозвращаемыеТовары Цикл
		Если Строка["гф_ЗаказатьКМ"] = Истина Тогда
		Строка["гф_ДокументЭмиссияКМ"] = СтруктураЗаказНаЭмиссиюКодовМаркировки.ЗаказНаЭмиссиюКодовМаркировкиСУЗ;
		КонецЕсли;
	КонецЦикла;
	// ++ Галфинд_Домнышева_15_06_2023
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	ДокументОбъект.Записать();   
	ЭтотОбъект.Прочитать();// Галфинд_Домнышева 2023/08/24
	// -- Галфинд_Домнышева_15_06_2023
	//Модифицированность = Истина;
	// --Галфинд_Домнышева_11_04_2023

КонецПроцедуры// } #wortmann 

// #wortmann { 
// Проверяет Табличную часть на наличие не заполненных ячеек гф_ДокументВозврат
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8131bcee7bda45d711edd201ed470fa8
// Галфинд_Домнышева 2023/04/10
&НаСервере
Функция гф_ПустыеВозвратыИзТаблицыСервере()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТЗ.гф_ДокументВозврат КАК гф_ДокументВозврат
	                      |ПОМЕСТИТЬ ВТ
	                      |ИЗ
	                      |	&ТЗ КАК ТЗ
	                      |ГДЕ
	                      |	ТЗ.гф_ДокументВозврат <> ЗНАЧЕНИЕ(Документ.ВозвратТоваровОтКлиента.ПустаяСсылка)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ.гф_ДокументВозврат КАК гф_ДокументВозврат
	                      |ИЗ
	                      |	ВТ КАК ВТ");
	
	Запрос.УстановитьПараметр("ТЗ", Объект.ВозвращаемыеТовары.Выгрузить());
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции// } #wortmann

// #wortmann { 
// Продолжение создания документов Возврата при ответе ДА 
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8131bcee7bda45d711edd201ed470fa8
// Галфинд_Домнышева 2023/04/10
&НаКлиенте
Процедура гф_ВопросСоздатьВозвратЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		гф_ПустыеВозвратыИзТаблицыСервере();
		гф_СоздатьДокументыВозврата();
	КонецЕсли;
	
КонецПроцедуры// } #wortmann

// #wortmann { 
// Записывает созданный документ в ТЧ 
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8131bcee7bda45d711edd201ed470fa8
// Галфинд_Домнышева 2023/04/10
&НаСервере
Процедура ЗаписатьДокументПеремаркировкиВТабличнуюЧасть(Перемаркировка, Основание)
	
	// ++ Галфинд_Домнышева_11_04_2023
	ЭтаФорма.Прочитать();
	Для Каждого Строка из Объект.ВозвращаемыеТовары Цикл
		Если Строка["гф_ЗаказатьКМ"] = Истина И Строка["гф_ДокументВозврат"] = Основание Тогда
		Строка["гф_ПеремаркировкаТовара"] = Перемаркировка;
		КонецЕсли;
	КонецЦикла;
	// ++ Галфинд_Домнышева_15_06_2023
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	ДокументОбъект.Записать(); 
	ЭтотОбъект.Прочитать();// Галфинд_Домнышева 2023/08/24
	// -- Галфинд_Домнышева_15_06_2023
	//Модифицированность = Истина;
	// --Галфинд_Домнышева_11_04_2023

КонецПроцедуры// } #wortmann 

// #wortmann { 
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee0388488549ea
// Галфинд_Домнышева 2023/06/08
&НаСервере
Процедура ДобавитьУсловноеОформление()
	
	ЭлементОформленияПринят = УсловноеОформление.Элементы.Добавить();
    ЭлементОформленияПринят.Использование = Истина;
    ЭлементОформленияПринят.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементОформленияПринят.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.БледноЗеленый); 
    
    ЭлементУсловияПринят                = ЭлементОформленияПринят.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементУсловияПринят.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ВозвращаемыеТовары.гф_ПринятСкладом");
    ЭлементУсловияПринят.ПравоеЗначение = Истина; 
    ЭлементУсловияПринят.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
    ЭлементУсловияПринят.Использование  = Истина;
    
    ОформляемоеПоле      = ЭлементОформленияПринят.Поля.Элементы.Добавить();
    ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ВозвращаемыеТовары");
	// #wortmann { 
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee0a97b0daa505
	// Галфинд_Домнышева 2023/06/14
	ЭлементОформленияОтменено = УсловноеОформление.Элементы.Добавить();
    ЭлементОформленияОтменено.Использование = Истина;
    ЭлементОформленияОтменено.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементОформленияОтменено.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоГрифельноСерый); 
    
    ЭлементУсловияОтменено                = ЭлементОформленияОтменено.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементУсловияОтменено.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ВозвращаемыеТовары.Отменено");
    ЭлементУсловияОтменено.ПравоеЗначение = Истина; 
    ЭлементУсловияОтменено.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
    ЭлементУсловияОтменено.Использование  = Истина;
    
	ОформляемоеПоле      = ЭлементОформленияОтменено.Поля.Элементы.Добавить();
    ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ВозвращаемыеТовары"); 
	// } #wortmann
КонецПроцедуры// } #wortmann 

// #wortmann { 
// Получение значения перечисления СтатусыЗаявокНаВозвратТоваровОтКлиентов 
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee05074993466e
// Галфинд_Домнышева 2023/06/22
&НаСервере
Функция ЗначениеПеречисленияТоварПеремаркирован() 
	Возврат Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.гф_ТоварПеремаркирован;
КонецФункции// } #wortmann

// #wortmann { 
// Процедура создания документа Корректировка Назначения по все ТЧ ВозвращаемыеТовары кроме Отмененных 
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee05074993466e
// Галфинд_Домнышева 2023/06/22
&НаСервере
Процедура СоздатьДокументКорректировкиНазначенияНаСервере() 
	
	УстановитьПривилегированныйРежим(Истина);  
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Отменено", Ложь);
	ВозвращаемыеТовары = Объект.ВозвращаемыеТовары.Выгрузить();
	ТоварыДляСмены = ВозвращаемыеТовары.Скопировать(СтруктураОтбора);
	
	ДокОбъектКорректировка = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
	
	// Корректировка назначения товаров
	ДокОбъектКорректировка.Дата 					= ТекущаяДатаСеанса();
	ДокОбъектКорректировка.Организация 				= Объект.Организация;
	ДокОбъектКорректировка.ВидОперации 				= Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв;
	//ДокОбъектКорректировка.ДокументОснование 		= Объект.Ссылка;
	ДокОбъектКорректировка.Ответственный 			= Пользователи.ТекущийПользователь();
	ДокОбъектКорректировка.Автор 					= Пользователи.ТекущийПользователь();
	ДокОбъектКорректировка.Назначение 				= Справочники.Назначения.гф_Холд;
	
	ДокОбъектКорректировка.Товары.Очистить();
	Для каждого Строка Из ТоварыДляСмены Цикл
		
		НоваяСтрока = ДокОбъектКорректировка.Товары.Добавить();
		НоваяСтрока.Номенклатура 			= Строка.Номенклатура;
		НоваяСтрока.Характеристика 			= Строка.Характеристика;
		НоваяСтрока.Серия 					= Строка.Серия;
		НоваяСтрока.Количество 				= Строка.Количество;
		НоваяСтрока.КоличествоУпаковок 		= Строка.Количество;
		НоваяСтрока.Склад 					= Объект.Склад;
		НоваяСтрока.ИсходноеНазначение 		= Строка.Назначение;
		НоваяСтрока.НовоеНазначение 		= Справочники.Назначения.ПустаяСсылка();
		НоваяСтрока.гф_IDкороба             = Строка.гф_IDКороба;
		
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(
	ДокОбъектКорректировка,
	Документы.КорректировкаНазначенияТоваров.ПараметрыУказанияСерий(ДокОбъектКорректировка));

	ДокОбъектКорректировка.Записать(РежимЗаписиДокумента.Запись);
	
	Если ЗначениеЗаполнено(ДокОбъектКорректировка.Ссылка) Тогда
		ОбщегоНазначения.СообщитьПользователю("Создан документ " + ДокОбъектКорректировка.Ссылка);
		ЗаписатьДокументКорректировкиНазначенияВТабличнуюЧасть(ДокОбъектКорректировка.Ссылка);
	КонецЕсли;
	
КонецПроцедуры// } #wortmann

// #wortmann { 
// Записывает созданный документ в ТЧ 
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee05074993466e
// Галфинд_Домнышева 2023/06/22
&НаСервере
Процедура ЗаписатьДокументКорректировкиНазначенияВТабличнуюЧасть(Корректировка)
	
	ЭтаФорма.Прочитать();
	Для Каждого Строка из Объект.ВозвращаемыеТовары Цикл
		Если Строка["Отменено"] = Ложь Тогда
		Строка["гф_КорректировкаНазначения"] = Корректировка;
		КонецЕсли;
	КонецЦикла;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	ДокументОбъект.Записать();
	ЭтотОбъект.Прочитать();// Галфинд_Домнышева 2023/08/24

КонецПроцедуры// } #wortmann 

#КонецОбласти