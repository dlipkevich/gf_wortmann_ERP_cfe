#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// Переопределяет параметры загрузки данных из файла.
//
// Параметры:
//  Параметры - Структура:
//   * ИмяМакетаСШаблоном - Строка - наименование макета. Например, "ЗагрузкаИзФайла".
//   * ИмяТабличнойЧасти - Строка - полное имя табличной части. Например, "Документ._ДемоСчетНаОплатуПокупателю.ТабличнаяЧасть.Товары"
//   * ОбязательныеКолонки - Массив из Строка - наименования обязательных для заполнения колонок.
//   * ТипДанныхКолонки - Соответствие из КлючИЗначение:
//      * Ключ - Строка - имя колонки;
//      * Значение - ОписаниеТипов - тип колонки загружаемых данных.
//   * ДополнительныеПараметры - Структура
//
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(Параметры) Экспорт
	
	Возврат; // не используем, т.к загрузка производится в единственную таб.часть  Галфинд \ Sakovich 23.03.2023
	
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры["ДополнительныеПараметры"], 
		"Команда") = "гф_ЗагрузитьТоварыИзФайла" 
		И ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ИмяТабличнойЧасти") = 
		"Документ.ЗаявкаНаВозвратТоваровОтКлиента.ТабличнаяЧасть.ВозвращаемыеТовары" Тогда
		Параметры["ИмяМакетаСШаблоном"] = "ЗагрузкаИзФайлаВозвращаемыеТовары";
	КонецЕсли;
КонецПроцедуры

// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
// СписокНеоднозначностей содержит список неоднозначных значений, для которых в ИБ имеется несколько
// подходящих вариантов.
//
// Параметры:
//   АдресЗагружаемыхДанных    - Строка - адрес временного хранилища с таблицей значений, в которой
//                                        находятся загруженные данные из файла. Состав колонок:
//     * Идентификатор - Число - порядковый номер строки.
//       Остальные колонки соответствуют колонкам макета ЗагрузкаИзФайла.
//   АдресТаблицыСопоставления - Строка - адрес временного хранилища с пустой таблицей значений,
//                                        являющейся копией табличной части документа, 
//                                        которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//   СписокНеоднозначностей - ТаблицаЗначений - список неоднозначных значений:
//     * Колонка       - Строка - имя колонки, в которой была обнаружена неоднозначность.
//     * Идентификатор - Число - идентификатор строки, в которой была обнаружена неоднозначность.
//   ПолноеИмяТабличнойЧасти   - Строка - полное имя табличной части, в которую загружаются данные.
//   ДополнительныеПараметры   - Произвольный - любые дополнительные сведения.
//
Процедура СопоставитьЗагружаемыеДанные(
	АдресЗагружаемыхДанных, 
	АдресТаблицыСопоставления, 
	СписокНеоднозначностей, 
	ПолноеИмяТабличнойЧасти, 
	ДополнительныеПараметры) Экспорт
	
	Товары = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления); // ТаблицаЗначений
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных); // ТаблицаЗначений
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	СОКРЛП(ВЫРАЗИТЬ(ДанныеДляСопоставления.гф_GTIN КАК СТРОКА(200))) КАК GTIN,
	|	ПОДСТРОКА(СОКРЛП(ВЫРАЗИТЬ(ДанныеДляСопоставления.гф_GTIN КАК СТРОКА(200))), 1, 14) КАК GTIN_1_14,
	|	ПОДСТРОКА(СОКРЛП(ВЫРАЗИТЬ(ДанныеДляСопоставления.гф_GTIN КАК СТРОКА(200))), 2, 13) КАК GTIN_2_13,
	|	СОКРЛП(ВЫРАЗИТЬ(ДанныеДляСопоставления.гф_КМСтрокой КАК СТРОКА(200))) КАК КМ,
	|	ДанныеДляСопоставления.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ДанныеДляСопоставления
	|ИЗ
	|	&ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляСопоставления.GTIN КАК GTIN_из_Файла,
	|	ВЫБОР
	|		КОГДА ШтрихкодыНоменклатуры_1_14.Штрихкод ЕСТЬ НЕ NULL 
	|			ТОГДА ШтрихкодыНоменклатуры_1_14.Штрихкод
	|		КОГДА ШтрихкодыНоменклатуры_2_13.Штрихкод ЕСТЬ НЕ NULL 
	|			ТОГДА ШтрихкодыНоменклатуры_2_13.Штрихкод
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК GTIN,
	|	ВЫБОР
	|		КОГДА ШтрихкодыНоменклатуры_1_14.Штрихкод ЕСТЬ НЕ NULL 
	|			ТОГДА ШтрихкодыНоменклатуры_1_14.Номенклатура
	|		КОГДА ШтрихкодыНоменклатуры_2_13.Штрихкод ЕСТЬ НЕ NULL 
	|			ТОГДА ШтрихкодыНоменклатуры_2_13.Номенклатура
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ШтрихкодыНоменклатуры_1_14.Штрихкод ЕСТЬ НЕ NULL 
	|			ТОГДА ШтрихкодыНоменклатуры_1_14.Характеристика
	|		КОГДА ШтрихкодыНоменклатуры_2_13.Штрихкод ЕСТЬ НЕ NULL 
	|			ТОГДА ШтрихкодыНоменклатуры_2_13.Характеристика
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Характеристика,
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК гф_ПринятыеКМ,
	|	ДанныеДляСопоставления.КМ КАК гф_КМСтрокой,
	|	ДанныеДляСопоставления.Идентификатор КАК Идентификатор
	|ИЗ
	|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры_1_14
	|		ПО ДанныеДляСопоставления.GTIN_1_14 = ШтрихкодыНоменклатуры_1_14.Штрихкод
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры_2_13
	|		ПО ДанныеДляСопоставления.GTIN_2_13 = ШтрихкодыНоменклатуры_2_13.Штрихкод
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО (ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода = ДанныеДляСопоставления.КМ)";
	
	Запрос.УстановитьПараметр("ДанныеДляСопоставления", ЗагружаемыеДанные);
	ТаблицаНоменклатура = Запрос.Выполнить().Выгрузить(); // ТаблицаЗначений
	
	Для каждого СтрокаТаблицы Из ТаблицаНоменклатура Цикл
		нс = Товары.Добавить();
		нс.Количество = 1;
		ЗаполнитьЗначенияСвойств(нс, СтрокаТаблицы);
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Товары, АдресТаблицыСопоставления);
	
КонецПроцедуры

// Возвращает список подходящих объектов ИБ для неоднозначного значения ячейки.
// 
// Параметры:
//   ПолноеИмяТабличнойЧасти   - Строка - полное имя табличной части, в которую загружаются данные.
//   СписокНеоднозначностей    - Массив из СправочникСсылка.Номенклатура - массив для заполнения с неоднозначными данными.
//   ИмяКолонки                - Строка - имя колонки, в который возникла неоднозначность.
//   ЗагружаемыеЗначенияСтрока - Строка - загружаемые данные на основании которых возникла неоднозначность.
//   ДополнительныеПараметры   - Произвольный - любые дополнительные сведения.
//
Процедура ЗаполнитьСписокНеоднозначностей(ПолноеИмяТабличнойЧасти, СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры) Экспорт
	Возврат;
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// vvv Галфинд \ Sakovich 23.03.2023
// создается документ ПриходныйОрдрерНаТовары с видом операции «Возврат не принятых получателем товаров».
// Отправителем является Клиент. Табличная часть заполняется сопоставленными строками ТЧ «Товары» документа
// «Заявка на возврат товаров от клиента».
//
// Параметры: - ОбъектИлиСсылка - Тип:
//				- ДокументОбъект.ЗаявкаНаВозвратТоваровОтКлиента
//				- ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента
Процедура гф_СоздатьПриходныйОрдерНаТоварыНаСервере(ОбъектИлиСсылка) Экспорт
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Склад", ОбъектИлиСсылка.Склад);
	ДанныеЗаполнения.Вставить("Помещение");
	ДанныеЗаполнения.Вставить("Распоряжение", ОбъектИлиСсылка.Ссылка);
	ДанныеЗаполнения.Вставить("ДатаПоступления", ОбъектИлиСсылка.ДатаПоступления);
	ДанныеЗаполнения.Вставить("ЗонаПриемки");
	ДанныеЗаполнения.Вставить("СкладскаяОперация");
	ДанныеЗаполнения.Вставить("Отправитель", ОбъектИлиСсылка.Партнер);
	ДанныеЗаполнения.Вставить("ДатаВходящегоДокумента");
	ДанныеЗаполнения.Вставить("НомерВходящегоДокумента");
	ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", ОбъектИлиСсылка.ХозяйственнаяОперация);
	ДанныеЗаполнения.Вставить("Ответственный", Пользователи.ТекущийПользователь());
	
	обПрихОрдер = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
	обПрихОрдер.Дата = ТекущаяДатаСеанса();
	ЗаполнитьЗначенияСвойств(обПрихОрдер, ДанныеЗаполнения);
	
	// vvv Галфинд \ Sakovich 23.03.2023
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=812ebcee7bda45d711edc9317888e8d6
	//обПрихОрдер.СкладскаяОперация = 
	//СкладыКлиентСервер.СкладскаяОперацияПриемкиПоХозяйственнойОперации(обПрихОрдер.ХозяйственнаяОперация);
	обПрихОрдер.СкладскаяОперация = Перечисления.СкладскиеОперации.ВозвратНеПринятыхТоваров;
	// ^^^ Галфинд \ Sakovich 23.03.2023 
	
	тзВозвращаемыеТовары = ОбъектИлиСсылка.ВозвращаемыеТовары.Выгрузить();
	гф_ЗаполнитьПриходныйОрдерТовары(обПрихОрдер, тзВозвращаемыеТовары);
	
	ОбъектМетаданныхСтатус = обПрихОрдер.Метаданные().Реквизиты.Статус; // ОбъектМетаданныхРеквизит
	обПрихОрдер.Статус = ОбъектМетаданныхСтатус.ЗначениеЗаполнения;
	
	обПрихОрдер.Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(обПрихОрдер.Склад);
	Если ЗначениеЗаполнено(обПрихОрдер.Склад) Тогда
		Если СкладыСервер.ИспользоватьАдресноеХранение(обПрихОрдер.Склад, обПрихОрдер.Помещение, обПрихОрдер.Дата) Тогда
			обПрихОрдер.ЗонаПриемки = 
			Справочники.СкладскиеЯчейки.ЗонаПриемкиПоУмолчанию(
			обПрихОрдер.Склад, 
			обПрихОрдер.Помещение, 
			обПрихОрдер.ЗонаПриемки);
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		обПрихОрдер.Записать(РежимЗаписиДокумента.Проведение);
		ТекстСообщения = "Создан документ " + обПрихОрдер.Ссылка;
	Исключение
		ТекстСообщения = "Не удалось создать документ ""Приходный ордер на товары!""";
	КонецПопытки;
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры // ^^^ Галфинд \ Sakovich 23.03.2023 

Процедура гф_ЗаполнитьПриходныйОрдерТовары(обОрдер, тзТовары)
	
	обОрдер.Товары.Очистить();
	ПараметрыОтбора = Новый Структура("Отменено", Ложь);
	мСтрокТовары = тзТовары.НайтиСтроки(ПараметрыОтбора);
	тзТоварыКЗаполнению = тзТовары.Скопировать(мСтрокТовары);
	
	ВыборкаШтрихкодов = гф_ПолучитьШтрихкодыНоменклатуры(тзТоварыКЗаполнению);
	
	Для каждого стрТЗ Из тзТоварыКЗаполнению Цикл
		нс = обОрдер.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(нс, стрТЗ, 
		"Номенклатура, Характеристика, Назначение, Количество, КоличествоУпаковок, гф_IDКороба");
		ВыборкаШтрихкодов.Сбросить();
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика", нс["Номенклатура"], нс["Характеристика"]);
		Если ВыборкаШтрихкодов.НайтиСледующий(СтруктураПоиска) Тогда
			нс["Штрихкод"] = ВыборкаШтрихкодов["Штрихкод"];
		КонецЕсли;
	КонецЦикла; 
	
	обОрдер["ВсегоМест"] = обОрдер.Товары.Итог("Количество");
КонецПроцедуры

Функция гф_ПолучитьШтрихкодыНоменклатуры(тзТоварыКЗаполнению)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	т.Номенклатура КАК Номенклатура,
	|	т.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТоварыКЗаполнению
	|ИЗ
	|	&тзТоварыКЗаполнению КАК т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """") КАК Штрихкод,
	|	ТоварыКЗаполнению.Номенклатура КАК Номенклатура,
	|	ТоварыКЗаполнению.Характеристика КАК Характеристика
	|ИЗ
	|	ТоварыКЗаполнению КАК ТоварыКЗаполнению
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ТоварыКЗаполнению.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|			И ТоварыКЗаполнению.Характеристика = ШтрихкодыНоменклатуры.Характеристика");
	Запрос.УстановитьПараметр("тзТоварыКЗаполнению", тзТоварыКЗаполнению);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Возврат Выборка;
		
КонецФункции

#КонецОбласти

#КонецЕсли