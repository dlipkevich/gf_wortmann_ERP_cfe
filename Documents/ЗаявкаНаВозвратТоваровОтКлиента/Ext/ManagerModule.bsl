#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// Переопределяет параметры загрузки данных из файла.
//
// Параметры:
//  Параметры - Структура:
//   * ИмяМакетаСШаблоном - Строка - наименование макета. Например, "ЗагрузкаИзФайла".
//   * ИмяТабличнойЧасти - Строка - полное имя табличной части. Например, "Документ._ДемоСчетНаОплатуПокупателю.ТабличнаяЧасть.Товары"
//   * ОбязательныеКолонки - Массив из Строка - наименования обязательных для заполнения колонок.
//   * ТипДанныхКолонки - Соответствие из КлючИЗначение:
//      * Ключ - Строка - имя колонки;
//      * Значение - ОписаниеТипов - тип колонки загружаемых данных.
//   * ДополнительныеПараметры - Структура
//
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(Параметры) Экспорт
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры["ДополнительныеПараметры"], 
		"Команда") = "гф_ЗагрузитьТоварыИзФайла" 
		И ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ИмяТабличнойЧасти") = 
		"Документ.ЗаявкаНаВозвратТоваровОтКлиента.ТабличнаяЧасть.ВозвращаемыеТовары" Тогда
		Параметры["ИмяМакетаСШаблоном"] = "ЗагрузкаИзФайлаВозвращаемыеТовары";
	КонецЕсли;
КонецПроцедуры

// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
// СписокНеоднозначностей содержит список неоднозначных значений, для которых в ИБ имеется несколько
// подходящих вариантов.
//
// Параметры:
//   АдресЗагружаемыхДанных    - Строка - адрес временного хранилища с таблицей значений, в которой
//                                        находятся загруженные данные из файла. Состав колонок:
//     * Идентификатор - Число - порядковый номер строки.
//       Остальные колонки соответствуют колонкам макета ЗагрузкаИзФайла.
//   АдресТаблицыСопоставления - Строка - адрес временного хранилища с пустой таблицей значений,
//                                        являющейся копией табличной части документа, 
//                                        которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//   СписокНеоднозначностей - ТаблицаЗначений - список неоднозначных значений:
//     * Колонка       - Строка - имя колонки, в которой была обнаружена неоднозначность.
//     * Идентификатор - Число - идентификатор строки, в которой была обнаружена неоднозначность.
//   ПолноеИмяТабличнойЧасти   - Строка - полное имя табличной части, в которую загружаются данные.
//   ДополнительныеПараметры   - Произвольный - любые дополнительные сведения.
//
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
	
	
	Товары = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления); // ТаблицаЗначений
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных); // ТаблицаЗначений
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ДанныеДляСопоставления.гф_GTIN КАК Строка(200)) КАК GTIN,
		|	ВЫРАЗИТЬ(ДанныеДляСопоставления.гф_ПринятыеКМ КАК Строка(200)) КАК КМ,
		|	ДанныеДляСопоставления.Номенклатура КАК Номенклатура,
		|	ДанныеДляСопоставления.Характеристика КАК Характеристика,
		|	ДанныеДляСопоставления.Идентификатор КАК Идентификатор
		|ПОМЕСТИТЬ ДанныеДляСопоставления
		|ИЗ
		|	&ДанныеДляСопоставления КАК ДанныеДляСопоставления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДляСопоставления.GTIN КАК GTIN,
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
		|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
		|	ШтрихкодыУпаковокТоваров.Ссылка КАК гф_ПринятыеКМ,
		|	ДанныеДляСопоставления.КМ КАК гф_ШтрихкодИзФайла,
		|	ДанныеДляСопоставления.Идентификатор КАК Идентификатор
		//|ПОМЕСТИТЬ СопоставленнаяНоменклатураПоШтрихкоду
		|ИЗ
		|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ПО (ШтрихкодыНоменклатуры.Штрихкод = ДанныеДляСопоставления.GTIN)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|		ПО (ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода = ДанныеДляСопоставления.КМ)";
	  //|
	  //  |ИНДЕКСИРОВАТЬ ПО
	  //  |	Идентификатор
	  //  |;
	  //  |
	  //  |////////////////////////////////////////////////////////////////////////////////";
	//	|ВЫБРАТЬ
	//	|	ДанныеДляСопоставления.Номенклатура КАК Номенклатура,
	//	|	ДанныеДляСопоставления.Идентификатор КАК Идентификатор
	//	|ПОМЕСТИТЬ ДанныеДляСопоставленияПоНаименованию
	//	|ИЗ
	//	|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ СопоставленнаяНоменклатураПоШтрихкоду КАК СопоставленнаяНоменклатураПоШтрихкоду
	//	|		ПО ДанныеДляСопоставления.Идентификатор = СопоставленнаяНоменклатураПоШтрихкоду.Идентификатор
	//	|ГДЕ СопоставленнаяНоменклатураПоШтрихкоду.Идентификатор ЕСТЬ NULL
	//	|
	//	|ИНДЕКСИРОВАТЬ ПО
	//	|	Идентификатор
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	МАКСИМУМ(_ДемоНоменклатура.Ссылка) КАК Ссылка,
	//	|	ДанныеДляСопоставленияПоНаименованию.Идентификатор КАК Идентификатор,
	//	|	КОЛИЧЕСТВО(ДанныеДляСопоставленияПоНаименованию.Идентификатор) КАК Количество
	//	|ИЗ
	//	|	ДанныеДляСопоставленияПоНаименованию КАК ДанныеДляСопоставленияПоНаименованию
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник._ДемоНоменклатура КАК _ДемоНоменклатура
	//	|		ПО (_ДемоНоменклатура.Наименование = (ВЫРАЗИТЬ(ДанныеДляСопоставленияПоНаименованию.Номенклатура КАК СТРОКА(500))))
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	ДанныеДляСопоставленияПоНаименованию.Идентификатор
	//	|
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ
	//	|	МАКСИМУМ(СопоставленнаяНоменклатураПоШтрихкоду.Ссылка),
	//	|	СопоставленнаяНоменклатураПоШтрихкоду.Идентификатор,
	//	|	КОЛИЧЕСТВО(СопоставленнаяНоменклатураПоШтрихкоду.Идентификатор)
	//	|ИЗ
	//	|	СопоставленнаяНоменклатураПоШтрихкоду КАК СопоставленнаяНоменклатураПоШтрихкоду
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	СопоставленнаяНоменклатураПоШтрихкоду.Идентификатор";

	Запрос.УстановитьПараметр("ДанныеДляСопоставления", ЗагружаемыеДанные);
	//РезультатыЗапросов = Запрос.ВыполнитьПакет(); // Массив из РезультатЗапроса
	//
	//ТаблицаНоменклатура = РезультатыЗапросов[3].Выгрузить(); // ТаблицаЗначений
	ТаблицаНоменклатура = Запрос.Выполнить().Выгрузить(); // ТаблицаЗначений
	
	//ФункциональнаяОпцияХарактеристика = ?(ЗагружаемыеДанные.Колонки.Найти("Характеристика") <> Неопределено, Истина, Ложь);
	Для каждого СтрокаТаблицы Из ТаблицаНоменклатура Цикл
		нс = Товары.Добавить();
		//Товар.Идентификатор = СтрокаТаблицы.Идентификатор;
		нс.Количество = 1;
		ЗаполнитьЗначенияСвойств(нс, СтрокаТаблицы);
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Товары, АдресТаблицыСопоставления);
	
КонецПроцедуры

// Возвращает список подходящих объектов ИБ для неоднозначного значения ячейки.
// 
// Параметры:
//   ПолноеИмяТабличнойЧасти   - Строка - полное имя табличной части, в которую загружаются данные.
//   СписокНеоднозначностей    - Массив из СправочникСсылка.Номенклатура - массив для заполнения с неоднозначными данными.
//   ИмяКолонки                - Строка - имя колонки, в который возникла неоднозначность.
//   ЗагружаемыеЗначенияСтрока - Строка - загружаемые данные на основании которых возникла неоднозначность.
//   ДополнительныеПараметры   - Произвольный - любые дополнительные сведения.
//
Процедура ЗаполнитьСписокНеоднозначностей(ПолноеИмяТабличнойЧасти, СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры) Экспорт
	Возврат;
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла#КонецОбласти

#КонецОбласти

#КонецЕсли