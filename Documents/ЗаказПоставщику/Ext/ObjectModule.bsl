#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

&После("ПередЗаписью")
Процедура гф_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// vvv Галфинд \ Sakovich 29.03.2023
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	// ^^^ Галфинд \ Sakovich 29.03.2023 
	
	// #wortmann {
	// Галфинд Sakovich 2022/12/11
	гф_УстановитьПризнакЗаказатьКМ(Отказ, РежимЗаписи)
	// } #wortmann
КонецПроцедуры

&После("ПриКопировании")
Процедура гф_ПриКопировании(ОбъектКопирования)
	// #wortmann {
	// Галфинд Sakovich 2022/12/11
	гф_ЗаказатьКМ = Ложь;
	гф_КМЭмитированы = Ложь;
	// } #wortmann
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьВидЦеныПоставщика(ВладелецЦены) Экспорт
	Если ТипЗнч(ВладелецЦены) = Тип("СправочникСсылка.Контрагенты") Тогда
		ВладелецЦены = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецЦены, "Партнер");	
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыЦенПоставщиков.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыЦенПоставщиков КАК ВидыЦенПоставщиков
	|ГДЕ
	|	НЕ ВидыЦенПоставщиков.ПометкаУдаления
	|	И ВидыЦенПоставщиков.Владелец = &ВладелецЦены
	|	И ВидыЦенПоставщиков.ДоступноДляЗакупки";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВладелецЦены", ВладелецЦены);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Справочники.ВидыЦенПоставщиков.ПустаяСсылка();
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка["Ссылка"];
	
КонецФункции

Функция ПолучитьПараметрыЗаполненияЦены(ВладелецЦены) Экспорт

	ПараметрыЗаполненияЦены = ЦеныПартнеровЗаполнениеСервер.НовыйПараметрыЗаполненияЗаполнитьЦены();
	ЗаполнитьЗначенияСвойств(ПараметрыЗаполненияЦены, ЭтотОбъект);
	ПараметрыЗаполненияЦены["ВидЦеныПоставщика"] = ПолучитьВидЦеныПоставщика(ВладелецЦены);
	Возврат ПараметрыЗаполненияЦены;
	
КонецФункции

Процедура ЗаполнитьЦеныТоваров(ВладелецЦены) Экспорт
	
	ПараметрыЗаполнения = ПолучитьПараметрыЗаполненияЦены(ВладелецЦены);
	ЦеныПартнеровЗаполнениеСервер.ЗаполнитьЦены(Товары, , ПараметрыЗаполнения);
	
КонецПроцедуры


Процедура гф_ПересчитатьТЧТоварыНаОсновнииКоробов() Экспорт
	
	ВременнаяТаблицаТовары = Товары.Выгрузить();
	
	ВременнаяТаблицаТовары.Очистить();
	
	Для каждого СтрокаВКоробах из гф_ПродукцияВКоробах Цикл
		
		Если ЗначениеЗаполнено(СтрокаВКоробах.IDКороба) Тогда
			
			гф_ДобавитьСтрокиПоУпаковочномуЛисту(СтрокаВКоробах, ВременнаяТаблицаТовары);
			
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаВКоробах.ВариантКомплектации) Тогда 
			
			гф_ДобавитьСтрокиПоВариантуКомплектации(СтрокаВКоробах, ВременнаяТаблицаТовары);
			
		Иначе
			Прервать;
		КонецЕсли;	
		
	КонецЦикла;	
	
	ВременнаяТаблицаТовары.Свернуть("Номенклатура, Характеристика, Назначение, Упаковка, Цена",
	"КоличествоУпаковок, Количество, Сумма");
	
	Товары.Загрузить(ВременнаяТаблицаТовары);
	
	// vvv Галфинд \ Sakovich 15.12.2022
	ВладелецЦены = Неопределено;
	Если ЗначениеЗаполнено(Партнер) Тогда
		ВладелецЦены = Партнер;
	Иначе
		ВладелецЦены = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "Партнер");
	КонецЕсли;
	Если ЗначениеЗаполнено(ВладелецЦены) Тогда
		ЗаполнитьЦеныТоваров(ВладелецЦены);
	КонецЕсли;
	// ^^^ Галфинд \ Sakovich 15.12.2022 
	
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(Склад, Ложь, Товары, Истина);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЭтотОбъект);
	
	СтруктураДействий = Новый Структура; 
	
	Если ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту Тогда
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", 
		ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(ЭтотОбъект, Истина));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	// vvv Галфинд \ Sakovich 15.12.2022
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	// ^^^ Галфинд \ Sakovich 15.12.2022 
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Товары, СтруктураДействий, Неопределено);
	
	// vvv Галфинд \ Sakovich 08.02.2023
	гф_ПересчитатьСуммыТчТоваровВКоробахПоТчТовары();
	// ^^^ Галфинд \ Sakovich 08.02.2023 
КонецПроцедуры

Процедура гф_ПересчитатьСуммыТчТоваровВКоробахПоТчТовары() Экспорт
	тзТовары = Товары.Выгрузить();
	тзКороба = гф_ПродукцияВКоробах.Выгрузить();
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	т.номенклатура КАК номенклатура,
	|	т.Характеристика КАК Характеристика,
	|	т.Упаковка КАК Упаковка,
	|	т.КоличествоУпаковок КАК КоличествоУпаковок,
	|	т.Количество КАК Количество,
	|	т.Цена КАК Цена,
	|	т.Сумма КАК Сумма,
	|	т.СуммаНДС КАК СуммаНДС,
	|	т.СуммаСНДС КАК СуммаСНДС
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	&тзТовары КАК т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	т.ВариантКомплектации КАК ВариантКомплектации,
	|	т.КоличествоКОробов КАК КоличествоКОробов,
	|	т.IDКороба КАК IDКороба,
	|	т.СтоимостьКороба КАК СтоимостьКороба
	|ПОМЕСТИТЬ втКороба
	|ИЗ
	|	&тзКороба КАК т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКороба.ВариантКомплектации КАК ВариантКомплектации,
	|	втКороба.КоличествоКОробов КАК КоличествоКОробов,
	|	втКороба.IDКороба КАК IDКороба,
	|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура КАК Номенклатура,
	|	ВариантыКомплектацииНоменклатурыТовары.Характеристика КАК Характеристика,
	|	ВариантыКомплектацииНоменклатурыТовары.Упаковка КАК Упаковка,
	|	ВариантыКомплектацииНоменклатурыТовары.КоличествоУпаковок КАК КоличествоУпаковок
	|ПОМЕСТИТЬ втСоставКоробов
	|ИЗ
	|	втКороба КАК втКороба
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ВариантыКомплектацииНоменклатурыТовары
	|		ПО втКороба.ВариантКомплектации = ВариантыКомплектацииНоменклатурыТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТовары.номенклатура КАК номенклатура,
	|	втТовары.Характеристика КАК Характеристика,
	|	втТовары.Упаковка КАК Упаковка,
	|	ЕСТЬNULL(втСоставКоробов.IDКороба, ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)) КАК IDКороба,
	|	ЕСТЬNULL(втСоставКоробов.КоличествоКОробов, 0) КАК КоличествоКОробов,
	|	втСоставКоробов.ВариантКомплектации КАК ВариантКомплектации,
	|	ЕСТЬNULL(втСоставКоробов.КоличествоУпаковок, 0) КАК КоличествоУпаковокВКоробе,
	|	ВЫРАЗИТЬ(втТовары.СуммаСНДС / втТовары.КоличествоУпаковок КАК ЧИСЛО(15, 0)) КАК СтоимостьУпаковки,
	|	ВЫРАЗИТЬ(втТовары.СуммаНДС / втТовары.КоличествоУпаковок * ЕСТЬNULL(втСоставКоробов.КоличествоУпаковок, 0) КАК ЧИСЛО(15, 0)) КАК НДСУпаковокВКоробе,
	|	ВЫРАЗИТЬ(втТовары.СуммаСНДС / втТовары.КоличествоУпаковок * ЕСТЬNULL(втСоставКоробов.КоличествоУпаковок, 0) КАК ЧИСЛО(15, 0)) КАК СтоимостьУпаковокВКоробе
	|ПОМЕСТИТЬ втСтоимостьУпаковокВКоробах
	|ИЗ
	|	втТовары КАК втТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСоставКоробов КАК втСоставКоробов
	|		ПО втТовары.номенклатура = втСоставКоробов.Номенклатура
	|			И втТовары.Характеристика = втСоставКоробов.Характеристика
	|			И втТовары.Упаковка = втСоставКоробов.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСтоимостьУпаковокВКоробах.ВариантКомплектации КАК ВариантКомплектации,
	|	МАКСИМУМ(втСтоимостьУпаковокВКоробах.КоличествоКОробов) КАК КоличествоКоробов,    
	|	втСтоимостьУпаковокВКоробах.IDКороба КАК IDКороба,
	|	СУММА(втСтоимостьУпаковокВКоробах.СтоимостьУпаковокВКоробе) КАК СтоимостьКороба, 
	|	СУММА(втСтоимостьУпаковокВКоробах.НДСУпаковокВКоробе) КАК НДС,
	|	СУММА(втСтоимостьУпаковокВКоробах.СтоимостьУпаковокВКоробе) * МАКСИМУМ(втСтоимостьУпаковокВКоробах.КоличествоКОробов) КАК Сумма,
	|	СУММА(втСтоимостьУпаковокВКоробах.КоличествоУпаковокВКоробе) КАК КоличествоУпаковокВКоробе
	|ИЗ
	|	втСтоимостьУпаковокВКоробах КАК втСтоимостьУпаковокВКоробах
	|
	|СГРУППИРОВАТЬ ПО
	|	втСтоимостьУпаковокВКоробах.ВариантКомплектации,
	|	втСтоимостьУпаковокВКоробах.IDКороба";
	Запрос.УстановитьПараметр("тзТовары", тзТовары);
	Запрос.УстановитьПараметр("тзКороба", тзКороба);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
	
		мСтрКороба = гф_ПродукцияВКоробах.НайтиСтроки(Новый Структура("ВариантКомплектации", Выборка["ВариантКомплектации"]));
	Для каждого Эл Из мСтрКороба Цикл
		Эл["СтоимостьКороба"] = Выборка["СтоимостьКороба"];
		Эл["НДС"] = Выборка["НДС"];
		Эл["Сумма"] = Выборка["Сумма"];
	КонецЦикла;
	КонецЦикла;
	
	
	
КонецПроцедуры


Процедура гф_ДобавитьСтрокиПоУпаковочномуЛисту(СтрокаВКоробах, ВременнаяТаблицаТовары)
	
	РабочаяТаблица = Товары.Выгрузить();
	РабочаяТаблица.Очистить();
	
	Для каждого Строка из СтрокаВКоробах.IDКороба.Товары Цикл	
		
		НоваяСтрокаРТ = РабочаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаРТ, Строка);
		
		НоваяСтрокаРТ.Количество = ?(СтрокаВКоробах["КоличествоКоробов"] =  0, 
		НоваяСтрокаРТ.Количество, НоваяСтрокаРТ.Количество * СтрокаВКоробах["КоличествоКоробов"]);
		НоваяСтрокаРТ.КоличествоУпаковок = ?(СтрокаВКоробах["КоличествоКоробов"] =  0, 
		НоваяСтрокаРТ.КоличествоУпаковок, НоваяСтрокаРТ.КоличествоУпаковок * СтрокаВКоробах["КоличествоКоробов"]);
		
	КонецЦикла;
	
	ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(СтрокаВКоробах.СтоимостьКороба * 
	?(СтрокаВКоробах["КоличествоКоробов"] =  0, 1, СтрокаВКоробах["КоличествоКоробов"] ), РабочаяТаблица, "Сумма", "КоличествоУпаковок");
	
	Для каждого Строка из РабочаяТаблица Цикл
		НоваяСтрока = ВременнаяТаблицаТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		НоваяСтрока.Цена = ?(НоваяСтрока.КоличествоУпаковок = 0, 0, НоваяСтрока.Сумма / НоваяСтрока.КоличествоУпаковок);
		
		Если ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту Тогда
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура гф_ДобавитьСтрокиПоВариантуКомплектации(СтрокаВКоробах, ВременнаяТаблицаТовары)
	
	РабочаяТаблица = Товары.Выгрузить();
	РабочаяТаблица.Очистить();
	
	Для каждого Строка из СтрокаВКоробах.ВариантКомплектации.Товары Цикл
		
		НоваяСтрокаРТ = РабочаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаРТ, Строка);
		
		НоваяСтрокаРТ.Количество = ?(СтрокаВКоробах["КоличествоКоробов"] =  0, 
		НоваяСтрокаРТ.Количество, НоваяСтрокаРТ.Количество * СтрокаВКоробах["КоличествоКоробов"]);
		НоваяСтрокаРТ.КоличествоУпаковок = ?(СтрокаВКоробах["КоличествоКоробов"] =  0, 
		НоваяСтрокаРТ.КоличествоУпаковок, НоваяСтрокаРТ.КоличествоУпаковок * СтрокаВКоробах["КоличествоКоробов"]);
		
		НоваяСтрокаРТ.Назначение = Справочники.Назначения.гф_Техническое;
		
	КонецЦикла;
	
	ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(СтрокаВКоробах.СтоимостьКороба * 
	?(СтрокаВКоробах["КоличествоКоробов"] =  0, 1, СтрокаВКоробах["КоличествоКоробов"] ), РабочаяТаблица, "Сумма", "Количество");
	
	Для каждого Строка из РабочаяТаблица Цикл
		НоваяСтрока = ВременнаяТаблицаТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		НоваяСтрока.Цена = ?(НоваяСтрока.Количество = 0, 0, НоваяСтрока.Сумма / НоваяСтрока.Количество);
		
		Если ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту Тогда
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры	

Процедура гф_УстановитьПризнакЗаказатьКМ(Отказ, РежимЗаписи)
	
	Если Не (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту) Тогда
		Возврат;
	КонецЕсли;
	тзТовары = Товары.Выгрузить();
	Если Не Документы.ПриобретениеТоваровУслуг.гф_ОпределитьНаличиеМаркируемойПродукции(тзТовары) Тогда
		Возврат;
	КонецЕсли;
	
	гф_ЗаказатьКМ = Истина;
	
КонецПроцедуры	

#КонецОбласти

#КонецЕсли