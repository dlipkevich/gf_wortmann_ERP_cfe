
#Область ОбработчикиСобытийФормы
	
&НаСервере
Процедура гф_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)

	// #wortmann {
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8127bcee7bda45d711ed77ea01e7705f
	// Создание элементов формы
	// Галфинд Sakovich 2022/12/11
	гф_СоздатьНовыеРеквизиты();
	гф_УстановитьВидимостьИДоступность();
	// } #wortmann
	
КонецПроцедуры

&НаКлиенте
Процедура гф_ПриОткрытииПосле(Отказ)
	гф_ОбновитьЗаголовокСтраницыПродукцияВКоробах();
	// ++ Галфинд_ДомнышеваКР_07_06_2023
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee01247e7e0c5a
	гф_ОбновитьЗаголовокСтраницыIDКоробов();
	// ++ Галфинд_ДомнышеваКР_07_06_2023
КонецПроцедуры

&НаКлиенте
Процедура гф_ПродукцияВКоробахПриИзменении(Элемент) 
	гф_ОбновитьЗаголовокСтраницыПродукцияВКоробах();
КонецПроцедуры

&НаКлиенте
Процедура гф_ПродукцияВКоробахIDКоробаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) 

	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.гф_ПродукцияВКоробах.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("гф_Организация",Объект.Организация);
	ПараметрыОтбора.Вставить("гф_Поставка",ПредопределенноеЗначение("Документ.ПриобретениеТоваровУслуг.ПустаяСсылка"));
		
	Если ЗначениеЗаполнено(ТекущиеДанные.ВариантКомплектации) Тогда
		 ПараметрыОтбора.Вставить("гф_Комплектация", ТекущиеДанные.ВариантКомплектации);
	КонецЕсли;
	 
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("гф_ОбработкаВыбораИДКороба", ЭтотОбъект);
	
	ОткрытьФорму("Документ.УпаковочныйЛист.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура гф_IDКоробовПриИзменении(Элемент) 
	
	гф_ОбновитьЗаголовокСтраницыIDКоробов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура гф_ОбработатьУпаковочныеЛисты(Команда)
	ОбработатьУпаковочныеЛистыНаСервере();
КонецПроцедуры 

&НаКлиенте
Процедура ПечатьКодыМаркировки(ИмяКоманды)
    // ++Галфинд_ДомнышеваКР_07_06_2023
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee01247e7e0c5a
	Если Объект.гф_IDКоробов.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не заполнены данные Упаковочных Листов в IDКоробов!");
		Возврат;
	КонецЕсли;
	
	ПечатьЭтикеткиНаКлиенте(ИмяКоманды.Имя, Ложь);
	// --Галфинд_ДомнышеваКР_07_06_2023
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура гф_СоздатьНовыеРеквизиты()
			
	ТипПолеФормы = Тип("ПолеФормы");
	ТипТаблицаФормы = Тип("ТаблицаФормы");
	ТипКнопкаФормы = Тип("КнопкаФормы");
	ТипГруппаФормы = Тип("ГруппаФормы");
	
	// тч "Товары в коробах"
	НовыйЭлемент = Элементы.Вставить("гф_ГруппаПродукцияВКоробах", ТипГруппаФормы,
		Элементы.ГруппаСтраницы, Элементы.СтраницаДоставка);
    НовыйЭлемент.Вид = ВидГруппыФормы.Страница;
	НовыйЭлемент.Заголовок = "Товары в коробах";
	//НовыйЭлемент.ПутьКДаннымЗаголовка = "Объект.гф_ПродукцияВКоробах.КоличествоСтрок";

	
	НовыйЭлемент = Элементы.Вставить("гф_ПродукцияВКоробах", ТипТаблицаФормы,
		Элементы.гф_ГруппаПродукцияВКоробах);
    НовыйЭлемент.ПутьКДанным = "Объект.гф_ПродукцияВКоробах"; 
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "гф_ПродукцияВКоробахПриИзменении");
	
	НовыйЭлемент = Элементы.Вставить("ПродукцияВКоробахНомерСтроки", ТипПолеФормы,
		Элементы.гф_ПродукцияВКоробах);
    НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
    НовыйЭлемент.ПутьКДанным = "Объект.гф_ПродукцияВКоробах.НомерСтроки";
	НовыйЭлемент.Заголовок = " N ";
	// ++Галфинд_ДомнышеваКР_07_06_2023
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee01247e7e0c5a
	//НовыйЭлемент = Элементы.Вставить("ПродукцияВКоробахIDКороба", ТипПолеФормы,
	//	Элементы.гф_ПродукцияВКоробах);
	//НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
	//НовыйЭлемент.ПутьКДанным = "Объект.гф_ПродукцияВКоробах.IDКороба"; 
	//НовыйЭлемент.Заголовок = "IDКороба";
	//НовыйЭлемент.УстановитьДействие("НачалоВыбора","гф_ПродукцияВКоробахIDКоробаНачалоВыбора");
	// --Галфинд_ДомнышеваКР_07_06_2023
	
	НовыйЭлемент = Элементы.Вставить("ПродукцияВКоробахВариантКомплектации", ТипПолеФормы,
		Элементы.гф_ПродукцияВКоробах);
    НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
    НовыйЭлемент.ПутьКДанным = "Объект.гф_ПродукцияВКоробах.ВариантКомплектации"; 
	НовыйЭлемент.Заголовок = "Артикул с ростовкой (вариант комплектации)";
    	
	НовыйЭлемент = Элементы.Вставить("ПродукцияВКоробахКоличествоКоробов", ТипПолеФормы,
		Элементы.гф_ПродукцияВКоробах);
    НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
    НовыйЭлемент.ПутьКДанным = "Объект.гф_ПродукцияВКоробах.КоличествоКоробов"; 
	НовыйЭлемент.Заголовок = "Количество коробов";
	
	НовыйЭлемент = Элементы.Вставить("ПродукцияВКоробахСтоимостьКороба", ТипПолеФормы,
		Элементы.гф_ПродукцияВКоробах);
    НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
    НовыйЭлемент.ПутьКДанным = "Объект.гф_ПродукцияВКоробах.СтоимостьКороба"; 
	НовыйЭлемент.Заголовок = "Стоимость короба";
	
	// vvv Галфинд \ Sakovich 08.02.2023
	НовыйЭлемент = Элементы.Вставить("ПродукцияВКоробахНДС", ТипПолеФормы,
		Элементы.гф_ПродукцияВКоробах);
    НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
    НовыйЭлемент.ПутьКДанным = "Объект.гф_ПродукцияВКоробах.НДС"; 
	НовыйЭлемент.Заголовок = "НДС";
	
	НовыйЭлемент = Элементы.Вставить("ПродукцияВКоробахСумма", ТипПолеФормы,
		Элементы.гф_ПродукцияВКоробах);
    НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
    НовыйЭлемент.ПутьКДанным = "Объект.гф_ПродукцияВКоробах.Сумма"; 
	НовыйЭлемент.Заголовок = "Сумма";
	// ^^^ Галфинд \ Sakovich 08.02.2023 
	
	// Эмиссия КМ
	НовыйЭлемент = Элементы.Вставить("гф_ГруппаЭмиссияКМ", ТипГруппаФормы,
		Элементы.ГруппаОсновное, Элементы.ГруппаШапка);
	НовыйЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НовыйЭлемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно;
	НовыйЭлемент.ЦветФона = WebЦвета.Перламутровый;
	НовыйЭлемент.ОтображатьЗаголовок = Ложь;
	
	НовыйЭлемент = Элементы.Вставить("гф_ЗаказатьКМ", ТипПолеФормы,
	Элементы.гф_ГруппаЭмиссияКМ);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлемент.ПутьКДанным = "Объект.гф_ЗаказатьКМ"; 
	НовыйЭлемент.Заголовок = "Заказать КМ";

	НовыйЭлемент = Элементы.Вставить("гф_КМЭмитированы", ТипПолеФормы,
	Элементы.гф_ГруппаЭмиссияКМ);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлемент.ПутьКДанным = "Объект.гф_КМЭмитированы"; 
	НовыйЭлемент.Заголовок = "КМ эмитированы";
	НовыйЭлемент.ТолькоПросмотр = Истина;
	
	// Действия
	НоваяКоманда = Команды.Добавить("гф_ОбработатьУпаковочныеЛисты");
	// ++Галфинд_ДомнышеваКР_07_06_2023
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee01247e7e0c5a
	//НоваяКоманда.Заголовок = "Обработать упаковочные листы"; 
	НоваяКоманда.Заголовок = "Агрегировать короба";
	// --Галфинд_ДомнышеваКР_07_06_2023
	НоваяКоманда.Подсказка = "Создать и заполнить упаковочные листы в строках";
	НоваяКоманда.Действие = "гф_ОбработатьУпаковочныеЛисты";
	НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
	
	НоваяКнопка = Элементы.Вставить("гф_ОбработатьУпаковочныеЛисты",
		ТипКнопкаФормы, Элементы.гф_ПродукцияВКоробах.КоманднаяПанель);
	// ++Галфинд_ДомнышеваКР_07_06_2023
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee01247e7e0c5a
	//НоваяКнопка.Заголовок = "Обработать упаковочные листы";
	НоваяКнопка.Заголовок = "Агрегировать короба";
	// --Галфинд_ДомнышеваКР_07_06_2023
	НоваяКнопка.ИмяКоманды = "гф_ОбработатьУпаковочныеЛисты";
	
	НоваяКоманда = Команды.Добавить("гф_ПересчитатьТовары");
	НоваяКоманда.Заголовок = "Пересчитать товары (по коробам)";
	НоваяКоманда.Действие = "гф_ПересчитатьТовары";
	НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
	
	НоваяКнопка = Элементы.Добавить("гф_ПересчитатьТовары", ТипКнопкаФормы, 
		Элементы.ГруппаТоварыЗаполнить);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "гф_ПересчитатьТовары";
	
	// ++ Галфинд_ДомнышеваКР_02_06_2023
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee01247e7e0c5a
	// тч "ID коробов"
	НовыйЭлемент = Элементы.Вставить("гф_ГруппаIDКоробов", ТипГруппаФормы,
		Элементы.ГруппаСтраницы, Элементы.СтраницаДоставка);
    НовыйЭлемент.Вид = ВидГруппыФормы.Страница;
	НовыйЭлемент.Заголовок = "ID коробов";
	
	НовыйЭлемент = Элементы.Вставить("гф_IDКоробов", ТипТаблицаФормы,
		Элементы.гф_ГруппаIDКоробов);
    НовыйЭлемент.ПутьКДанным = "Объект.гф_IDКоробов"; 
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "гф_IDКоробовПриИзменении");
	
	НовыйЭлемент = Элементы.Вставить("IDКоробовНомерСтроки", ТипПолеФормы,
		Элементы.гф_IDКоробов);
    НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
    НовыйЭлемент.ПутьКДанным = "Объект.гф_IDКоробов.НомерСтроки";
	НовыйЭлемент.Заголовок = " N ";
	
	НовыйЭлемент = Элементы.Вставить("IDКоробовIDКороба", ТипПолеФормы,
		Элементы.гф_IDКоробов);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
	НовыйЭлемент.ПутьКДанным = "Объект.гф_IDКоробов.IDКороба"; 
	НовыйЭлемент.Заголовок = "ID Короба";
	НовыйЭлемент.УстановитьДействие("НачалоВыбора","гф_ПродукцияВКоробахIDКоробаНачалоВыбора");
	
	НовыйЭлемент = Элементы.Вставить("IDКоробовВариантКомплектации", ТипПолеФормы,
		Элементы.гф_IDКоробов);
    НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
    НовыйЭлемент.ПутьКДанным = "Объект.гф_IDКоробов.ВариантКомплектации"; 
	НовыйЭлемент.Заголовок = "Артикул с ростовкой (вариант комплектации)";
		
	НоваяКоманда = Команды.Добавить("гф_ПечатьКодыМаркировки");
	НоваяКоманда.Заголовок = "Печать этикеток";
	НоваяКоманда.Подсказка = "Выводит на печать КМ по всем Ул указанным в IDКоробов";
	НоваяКоманда.Действие = "ПечатьКодыМаркировки";
	НоваяКоманда.ИзменяетСохраняемыеДанные = Истина; 
	
	НоваяКнопка = Элементы.Добавить("гф_ПечатьКодыМаркировки", ТипКнопкаФормы, 
		Элементы.ПодменюПечать);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "гф_ПечатьКодыМаркировки";
	
	НоваяКоманда = Команды.Добавить("гф_ПечатьКодыМаркировкиПредварительнымПросмотром");
	НоваяКоманда.Заголовок = "Печать этикеток (пред. просмотр)";
	НоваяКоманда.Подсказка = "Выводит на печать КМ по всем Ул указанным в IDКоробов";
	НоваяКоманда.Действие = "ПечатьКодыМаркировки";
	НоваяКоманда.ИзменяетСохраняемыеДанные = Истина; 	
	
	НоваяКнопка = Элементы.Добавить("гф_ПечатьКодыМаркировкиПредварительнымПросмотром", ТипКнопкаФормы, 
		Элементы.ПодменюПечать);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "гф_ПечатьКодыМаркировкиПредварительнымПросмотром";
	//-- Галфинд_ДомнышеваКР_02_06_2023

КонецПроцедуры	

&НаСервере
Процедура гф_УстановитьВидимостьИДоступность()
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда 
		ВидимостьСтраницыТоварыВКоробах();
	Иначе
		Элементы.гф_ГруппаПродукцияВКоробах.Видимость = Ложь;
	КонецЕсли;
	
	гф_ДоступностьЭлементовГруппыЭмиссияКМ();
	
КонецПроцедуры

&НаСервере
Процедура ВидимостьСтраницыТоварыВКоробах() 
		
	ТоварыВКоробах = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Товары в коробах"); 
	
	ТоварыВКоробахЗначение = УправлениеСвойствами.ЗначениеСвойства(Объект.Склад, ТоварыВКоробах);	
	
	Если ЗначениеЗаполнено(ТоварыВКоробахЗначение) И ТоварыВКоробахЗначение = Истина Тогда
		 Элементы.гф_ГруппаПродукцияВКоробах.Видимость = Истина; 
	Иначе
		 Элементы.гф_ГруппаПродукцияВКоробах.Видимость = Ложь;
		 Объект.гф_ПродукцияВКоробах.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура гф_ДоступностьЭлементовГруппыЭмиссияКМ()

	ДоступностьГруппыЭмиссияКМ = Не Объект.гф_КМЭмитированы;
	Элементы.гф_ГруппаЭмиссияКМ.Доступность = ДоступностьГруппыЭмиссияКМ;
	Если Не ДоступностьГруппыЭмиссияКМ Тогда
		Возврат;
	КонецЕсли;
	ЕстьМаркируемаяПродукция = гф_ОпределитьНаличиеМаркируемойПродукции();
	Элементы.гф_ГруппаЭмиссияКМ.Доступность = ЕстьМаркируемаяПродукция;
    Элементы.гф_ОбработатьУпаковочныеЛисты.Доступность = Объект.гф_КМЭмитированы; // Галфинд_ДомнышеваКР_07_06_2023
КонецПроцедуры

&НаСервере
Функция гф_ОпределитьНаличиеМаркируемойПродукции() Экспорт
	
	тзТовары = Объект.Товары.Выгрузить();	
	ЕстьМаркируемаяПродукция = Документы.ПриобретениеТоваровУслуг.гф_ОпределитьНаличиеМаркируемойПродукции(тзТовары);
	Возврат ЕстьМаркируемаяПродукция;
	
КонецФункции

&НаКлиенте
Процедура гф_ОбновитьЗаголовокСтраницыПродукцияВКоробах()
	
	ИтогДляВывода = Объект["гф_ПродукцияВКоробах"].Итог("КоличествоКоробов");
	КоличествоСтрок = Объект["гф_ПродукцияВКоробах"].Количество();
	
	Элементы["гф_ГруппаПродукцияВКоробах"].Заголовок = 
	?(КоличествоСтрок = 0, 
	// ++ Галфинд_ДомнышеваКР_07_06_2023
	//"Продукция в коробах",
	//"Продукция в коробах (коробов: " + ИтогДляВывода + ") (вариантов: "+ Объект["гф_ПродукцияВКоробах"].Количество() + ")");
	"Товары в коробах",
	"Товары в коробах ( "+ КоличествоСтрок + ")");
	// -- Галфинд_ДомнышеваКР_07_06_2023
КонецПроцедуры

&НаСервере
Функция ЗначениеРеквизитаОбъекта(Объект,ИмяРеквизита)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект,ИмяРеквизита);	
КонецФункции

&НаКлиенте
Процедура гф_ОбработкаВыбораИДКороба(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		Элементы.гф_ПродукцияВКоробах.ТекущиеДанные.IDКороба = ВыбранноеЗначение;
		Элементы.гф_ПродукцияВКоробах.ТекущиеДанные.ВариантКомплектации = 
										ЗначениеРеквизитаОбъекта(ВыбранноеЗначение,"гф_Комплектация");
		Элементы.гф_ПродукцияВКоробах.ТекущиеДанные.КоличествоКоробов = 1;
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура гф_ПослеПересчетаТоваров()
	
	Для каждого Строка Из Объект.Товары Цикл 
		КэшСтроки = Новый Структура("Цена, СуммаСНДС, СуммаНДС, Сумма, Назначение", 
		Строка["Цена"], Строка["СуммаСНДС"], Строка["СуммаНДС"], Строка["Сумма"], Строка["Назначение"]);
		Элементы.Товары.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
		ТоварыНоменклатураПриИзменении(Элементы.ТоварыНоменклатура);
		ЗаполнитьЗначенияСвойств(Строка, КэшСтроки);
	КонецЦикла;
	СуммаЗаказанныхСтрок = ПолучитьСуммуДокументаНаСервере();
	Объект.СуммаДокумента = СуммаЗаказанныхСтрок;
	СуммаЗаказаноСЗалоговойТарой = СуммаЗаказанныхСтрок;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСуммуДокументаНаСервере()
	докОбъект = РеквизитФормыВЗначение("Объект");
	СуммаЗаказанныхСтрок = докОбъект.ПолучитьСуммуЗаказанныхСтрок();
	Возврат СуммаЗаказанныхСтрок;
КонецФункции


&НаКлиенте
Процедура гф_ПересчитатьТовары(Команда)
	
	Если Объект.Товары.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Табличная часть ""Товары"" будет очищена. Продолжить?'");
		ДопПараметры = Новый Структура() ;
		Оповещение = Новый ОписаниеОповещения("гф_ВопросПересчитатьТоварыЗавершение", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Иначе
		гф_ОбработатьТоврыПриЗагрузкеИзФайла();
		гф_ПослеПересчетаТоваров();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура гф_ВопросПересчитатьТоварыЗавершение (Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Товары.Очистить();
		гф_ОбработатьТоврыПриЗагрузкеИзФайла();
		гф_ПослеПересчетаТоваров();
	КонецЕсли;

КонецПроцедуры	

&НаСервере
Процедура гф_ОбработатьТоврыПриЗагрузкеИзФайла()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.гф_ПересчитатьТЧТоварыНаОсновнииКоробов();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект"); 
			
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУпаковочныеЛистыНаСервере()
	
	тзПродукцияВКоробах = Объект.гф_ПродукцияВКоробах.Выгрузить();
	// ++ Галфинд_ДомнышеваКР_07_06_2023
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee01247e7e0c5a
	тзIDКоробов =  Объект.гф_IDКоробов.Выгрузить(); 
    // -- Галфинд_ДомнышеваКР_07_06_2023
	мСтрокДляСозданияУпЛистов = Новый Массив;
	мСтрокДляРазмножения = Новый Массив;
	Для каждого стрТз Из тзПродукцияВКоробах Цикл
		// ++ Галфинд_ДомнышеваКР_07_06_2023
		// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee01247e7e0c5a
		
		//Если ЗначениеЗаполнено(стрТз["ВариантКомплектации"]) И стрТз["КоличествоКоробов"] > 1 Тогда
		//	мСтрокДляРазмножения.Добавить(стрТз);
		//КонецЕсли;
		Если ЗначениеЗаполнено(стрТз["ВариантКомплектации"]) И ЗначениеЗаполнено(стрТз["КоличествоКоробов"]) Тогда
			Если тзIDКоробов.Количество()>0 И 
				УпаковочныеЛистыСозданыВсе(стрТз["ВариантКомплектации"], стрТз["КоличествоКоробов"]) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("По всем вариантам комплектации короба сагрегированы.");
			Иначе
				мСтрокДляРазмножения.Добавить(стрТз);
			КонецЕсли;
		КонецЕсли;
        // -- Галфинд_ДомнышеваКР_07_06_2023
	КонецЦикла;
	
	Для каждого Эл Из мСтрокДляРазмножения Цикл
		Для Сч = 1 По Эл["КоличествоКоробов"] Цикл
			// ++ Галфинд_ДомнышеваКР_07_06_2023
			// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee01247e7e0c5a
			//нс = тзПродукцияВКоробах.Вставить(тзПродукцияВКоробах.Индекс(Эл));
			нс = тзIDКоробов.Вставить(тзПродукцияВКоробах.Индекс(Эл));
            // -- Галфинд_ДомнышеваКР_07_06_2023
			ЗаполнитьЗначенияСвойств(нс, Эл);
			//нс["КоличествоКоробов"] = 1; // Галфинд_ДомнышеваКР_07_06_2023
			Если Сч > 1 Тогда
				нс["IDКороба"] = "";
			КонецЕсли;
		КонецЦикла;
		//тзПродукцияВКоробах.Удалить(Эл); // Галфинд_ДомнышеваКР_07_06_2023
	КонецЦикла;
	// ++ Галфинд_ДомнышеваКР_07_06_2023
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee01247e7e0c5a
	//Для каждого стрТз Из тзПродукцияВКоробах Цикл
	Для каждого стрТз Из тзIDКоробов Цикл 
	// -- Галфинд_ДомнышеваКР_07_06_2023	
		Если Не ЗначениеЗаполнено(стрТз["IDКороба"]) Тогда
			мСтрокДляСозданияУпЛистов.Добавить(стрТз);
		КонецЕсли;
	КонецЦикла;
	
	ОшибкаПодбораСерийногоНомера = Ложь;
	мЗадействованныхСерийныхНомеров = Новый Массив;
	ОрганизацияУпЛиста = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "Организация");
	СлужебноеНазначение = Справочники.Назначения.гф_Техническое;
	
	Для каждого строкаУпЛист Из мСтрокДляСозданияУпЛистов Цикл
		
		РезультатЗапроса = ПолучитьСвободныеСерийныеНомера();
		
		Если РезультатЗапроса.Пустой() Тогда
			ОбщегоНазначения.СообщитьПользователю("Не найден свободный Серийный номер для создания УпаковочногоЛиста");
			ОшибкаПодбораСерийногоНомера = Истина;
			Продолжить;
		КонецЕсли;
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		мЗадействованныхСерийныхНомеров.Добавить(Выборка["Наименование"]);
		МенеджерЗаписи = РегистрыСведений.гф_ЗагруженныеСерийныеНомера.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Наименование = Выборка["Наименование"];
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Использован = Истина;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
		ДокУпЛист = Документы.УпаковочныйЛист.СоздатьДокумент();
		ДокУпЛист.Дата = ТекущаяДатаСеанса();
		ДокУпЛист.Код = Выборка["Наименование"];
		ДокУпЛист.Вид = Перечисления.ВидыУпаковочныхЛистов.Входящий;
		ДокУпЛист.гф_СостояниеКороба = Справочники.гф_СостянияКоробов.ПолныйКомплект;
		ДокУпЛист.гф_Комплектация = строкаУпЛист.ВариантКомплектации;
		ДокУпЛист.гф_Организация = ОрганизацияУпЛиста;
		ДокУпЛист.гф_Поставка = Объект.Ссылка;
		тчВариантКомплектации = строкаУпЛист["ВариантКомплектации"]["Товары"].Выгрузить();
		Для каждого стрТч Из тчВариантКомплектации Цикл
			нс = ДокУпЛист.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(нс, стрТч, "Номенклатура, Характеристика, Упаковка, КоличествоУпаковок");
			нс.ЭтоУпаковочныйЛист = Ложь;
			нс.Назначение = СлужебноеНазначение;
		КонецЦикла;
		
		Попытка
			ДокУпЛист.Записать(РежимЗаписиДокумента.Проведение);
			строкаУпЛист["IDКороба"] = ДокУпЛист.Ссылка;
		Исключение
			
			Попытка
				ДокУпЛист.Записать(РежимЗаписиДокумента.Запись);
				строкаУпЛист["IDКороба"] = ДокУпЛист.Ссылка;
			Исключение
				МенеджерЗаписи = РегистрыСведений.гф_ЗагруженныеСерийныеНомера.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Наименование = Выборка["Наименование"];
				МенеджерЗаписи.Прочитать();
				Если МенеджерЗаписи.Выбран() Тогда
					МенеджерЗаписи.Использован = Ложь;
					МенеджерЗаписи.Записать();
				КонецЕсли;
			КонецПопытки;
			
		КонецПопытки;
		
	КонецЦикла;	
	
	// ++ Галфинд_ДомнышеваКР_07_06_2023
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee01247e7e0c5a
	//Объект.гф_ПродукцияВКоробах.Загрузить(тзПродукцияВКоробах);
	Объект.гф_IDКоробов.Загрузить(тзIDКоробов); 
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	Записать(ПараметрыЗаписи); 
	//-- Галфинд_ДомнышеваКР_07_06_2023

КонецПроцедуры

&НаСервере
Функция ПолучитьСвободныеСерийныеНомера()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	гф_ЗагруженныеСерийныеНомера.Наименование КАК Наименование
	|ИЗ
	|	РегистрСведений.гф_ЗагруженныеСерийныеНомера КАК гф_ЗагруженныеСерийныеНомера
	|ГДЕ
	|	НЕ гф_ЗагруженныеСерийныеНомера.Использован
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции 

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee01247e7e0c5a
// Галфинд_ДомнышеваКР_07_06_2023
&НаСервере
Функция УпаковочныеЛистыСозданыВсе(ВариантКомплектации, КоличествоКоробов)
	тзIDКоробов =  Объект.гф_IDКоробов.Выгрузить(); 
	Отбор = Новый Структура;
	Отбор.Вставить("ВариантКомплектации", ВариантКомплектации);
	
	МассивСтрокПоВарианту = тзIDКоробов.НайтиСтроки(Отбор);
	
	Если МассивСтрокПоВарианту.Количество() = КоличествоКоробов Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции// } #wortmann

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee01247e7e0c5a
// Галфинд_ДомнышеваКР_07_06_2023
&НаКлиенте
Процедура ПечатьЭтикеткиНаКлиенте(ИмяКоманды, ПисатьВРегистрВремениПечати = Истина)
	
	НастройкиСвойствПечати = _омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначение("гф_НастройкиПечатиРусскаяЗима");
	
	Если Не ЗначениеЗаполнено(НастройкиСвойствПечати) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не назначены настройки для печати в Глобальных Значениях");
		Возврат;
	КонецЕсли;
	АдресРезультата = ПечатьЭтикетки(Неопределено);
		
	ТабДок = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если ТабДок = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	Если ИмяКоманды = "гф_ПечатьКодыМаркировкиПредварительнымПросмотром" Тогда
		// предварительный просмотр	
		ТабДок.Показать("Печать этикеток"); 
		Возврат;
		
	ИначеЕсли ИмяКоманды = "гф_ПечатьКодыМаркировки" Тогда
		// напечатать с диалогом выбора принтера
		ТабДок.Вывод = ИспользованиеВывода.Разрешить;
		ТабДок.Напечатать(РежимИспользованияДиалогаПечати.Использовать);
		Возврат;
		
	Иначе

	КонецЕсли;
	
КонецПроцедуры

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee01247e7e0c5a
// Галфинд_ДомнышеваКР_07_06_2023
&НаСервере
Функция НайтиШтрикходУпаковкиТоваровИУпаковочныйЛистПоNVE()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтрихкодыУпаковокТоваров.Ссылка КАК ШтрихКодУпаковки,
		|	УпаковочныйЛист.Ссылка КАК УпаковочныйЛист
		|ИЗ
		|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|		ПО УпаковочныйЛист.гф_Агрегация = ШтрихкодыУпаковокТоваров.Ссылка
		|ГДЕ
		|	УпаковочныйЛист.Ссылка В(&МассивУЛ)
		|	И ШтрихкодыУпаковокТоваров.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка)
		|";

	Запрос.УстановитьПараметр("МассивУЛ", Объект.гф_IDКоробов.Выгрузить(, "IDКороба"));
	
	РезультатЗапроса = Запрос.Выполнить();
		
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат РезультатЗапроса.Выгрузить();
	КонецЕсли;
	
КонецФункции// } #wortmann

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee01247e7e0c5a
// Галфинд_ДомнышеваКР_07_06_2023
&НаСервере
Процедура ЗанестиВРС_ВремяПечати()
	Если ПустаяСтрока(Объект.NVE) ИЛИ Объект.Номенклатура.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТекДата = ТекущаяДатаСеанса();

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Пул.ДокументОснование КАК ДокументОснование,
	|	Пул.ЗаказНаЭмиссию КАК ЗаказНаЭмиссию,
	|	Пул.КодМаркировки КАК КодМаркировки,
	|	Пул.ХешСуммаКодаМаркировки КАК ХешСуммаКодаМаркировки
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК Пул
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК Штрихкоды
	|		ПО Пул.ШтрихкодУпаковки = Штрихкоды.Ссылка
	|ГДЕ
	|	Пул.Номенклатура = &Номенклатура
	|	И Штрихкоды.ЗначениеШтрихкода = &NVE";
	Запрос.УстановитьПараметр("Номенклатура", Объект.Номенклатура);
	Запрос.УстановитьПараметр("NVE", Объект.NVE);
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Набор = РегистрыСведений.ПулКодовМаркировкиСУЗ.СоздатьНаборЗаписей();
			Отбор = Набор.Отбор;
			Для каждого Колонка Из Результат.Колонки Цикл
				ЭлОтбора = Отбор[Колонка.Имя];
				ЭлОтбора.Установить(Выборка[Колонка.Имя]);
			КонецЦикла;
			Набор.Прочитать();
			Для каждого Запись Из Набор Цикл
				Запись["ДатаПечатиУниверсальная"] = ТекДата;
			КонецЦикла;
			Попытка
				Набор.Записать();
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
				ОбщегоНазначения.СообщитьПользователю(
				"Не удалось записать сведения в ""Пул кодов маркировки"" о времени печати NVE по причине: " + ОписаниеОшибки);
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	Агрегат = Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту("ЗначениеШтрихкода", Объект.NVE);
	Если Агрегат.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	НЗ = РегистрыСведений.гф_ВремяПечатиNVE.СоздатьНаборЗаписей();
	
	НЗ.Отбор.NVE.Установить(Агрегат);
	НовСтр = НЗ.Добавить();
	НовСтр.NVE = Агрегат;
	НовСтр.ВремяПечати 	= ТекДата;
	
	Попытка
		НЗ.Записать();
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю("Не удалось записать данные о времени печати NVE по причине: " + ОписаниеОшибки);
	КонецПопытки;

КонецПроцедуры// } #wortmann

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee01247e7e0c5a
// Галфинд_ДомнышеваКР_07_06_2023
&НаКлиенте
Процедура РаспечататьДокументыНаПринтер(ТабличныйДок)
	ТабличныеДокументы = Новый СписокЗначений();
	ТабличныеДокументы.Добавить(ТабличныйДок);
	УправлениеПечатьюКлиент.РаспечататьТабличныеДокументы(
	ТабличныеДокументы, Новый СписокЗначений, , 1);
КонецПроцедуры// } #wortmann

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee01247e7e0c5a
// Галфинд_ДомнышеваКР_07_06_2023
 &НаСервере
Функция ПечатьЭтикетки(МассивКМДляПечати = Неопределено)
	
	ТаблицаШтрихкодУпаковочныйЛист = НайтиШтрикходУпаковкиТоваровИУпаковочныйЛистПоNVE();
	
	ЕстьNVEСкладе = ПроверитьНаличиеNVEНаСкладе(ТаблицаШтрихкодУпаковочныйЛист.ВыгрузитьКолонку("ШтрихКодУпаковки"));
	Если Не ЕстьNVEСкладе Тогда
		ОбщегоНазначения.СообщитьПользователю("На складе " + Объект.Склад + " не найдены NVE по УЛ из таблицы IDКоробов");
		Возврат Неопределено;
	КонецЕсли;
	
	обДокумент = РеквизитФормыВЗначение("Объект");

	ТД = Новый ТабличныйДокумент;
	
	Макет = обДокумент.ПолучитьМакет("Этикетка");
	
	ПервыйЛист = Истина;

	Для каждого СтрокаШУл Из ТаблицаШтрихкодУпаковочныйЛист Цикл
		
		Если Не ПервыйЛист Тогда
			ТД.ВывестиГоризонтальныйРазделительСтраниц();
		Иначе
			ПервыйЛист = Ложь;
		КонецЕсли;
		тзТовары = ЗаполнитьТаблицуТоваров(СтрокаШУл);
		
		ПараметрыЗаголовка =  ПараметрыЗаголовкаПечатьNVE(тзТовары[0]);
		
		Если Не МассивКМДляПечати = Неопределено Тогда
			Для Каждого СтрокаТЧ Из тзТовары Цикл
				
				СтрокаТЧ.Пометка = Ложь;
				
				Если Не МассивКМДляПечати.Найти(СтрокаТЧ.КМ) = Неопределено Тогда
					СтрокаТЧ.Пометка = Истина;
				КонецЕсли;	
				
			КонецЦикла;
		КонецЕсли;
		
		ДеревоТовары = ПолучитьДеревоДанных(тзТовары);
				
		ГраницаМакета 		= 13;
		КоличествоСтрок 	= 2;
		КоличествоКолонок 	= 6;
		ЭтикетокНаЛисте 	= КоличествоСтрок * КоличествоКолонок;
		ИндексЭтикетки 		= 0;
		ВсегоНужноНапечататьЭтикеток = тзТовары.Итог("КоличествоЭтикеток");
					
		ПечатьЗаголовка(ТД, Макет, ПараметрыЗаголовка);
		
		ИндексСтроки = 1;
		ИндексКолонки = 1;
		
		ВывелиПодвал = Ложь;
				
		Для Каждого строка Из тзТовары Цикл
			
			Если Не Строка["Пометка"] Тогда
				Продолжить;
			КонецЕсли;		
			
			мНоменклатура = строка.Номенклатура;
			
			ОписаниеТовара = Строка(мНоменклатура) + " (" + строка.Артикул + ")";
			
			Нашли = ДеревоТовары.строки.Найти(мНоменклатура);
			Если Нашли = Неопределено Тогда
				Текст = "" + мНоменклатура + " не найдены свойства для печати этикетки!";
				ОбщегоНазначения.СообщитьПользователю(Текст);
				Продолжить;
			Иначе
				таб = Нашли.Строки;
			КонецЕсли;
			
			ОбластьОсновная = Макет.ПолучитьОбласть("ОбластьОсновная");
			ОбластьОсновная.Параметры.Размер = "" + Строка["Характеристика"];
			Этикетка = "";
			РисунокШтрихкод = ОбластьОсновная.Рисунки.Штрихкод;
			
			Если строка.КМ.Пустая() Тогда
				ОбластьОсновная.Рисунки.Удалить(РисунокШтрихкод);
			Иначе
				ОбластьОсновная.Рисунки.Удалить(ОбластьОсновная.Рисунки.eac);
				Штрихкод = строка["ПолныйКодМаркировки"];
				ШтрихКодНаПечать = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(строка.КМ, "ЗначениеШтрихкода");
				
				ТипКода = 24;
				Ширина = 220;
				Высота = 220;
				УголПоворота = 0;
				УровеньКоррекцииQR = 0;
				
				ПараметрыШтрихкода = ГенерацияШтрихкода.ПараметрыГенерацииШтрихкода();
				ПараметрыШтрихкода["Ширина"] = Ширина;
				ПараметрыШтрихкода["Высота"] = Высота;
				ПараметрыШтрихкода["ТипКода"] = ТипКода;
				ПараметрыШтрихКода["ОтображатьТекст"] = Истина;
				ПараметрыШтрихкода["РазмерШрифта"] = 10;
				ПараметрыШтрихкода["УголПоворота"] = УголПоворота;
				
				ПараметрыШтрихкода["Штрихкод"] = Штрихкод;
				ПараметрыШтрихкода["ПрозрачныйФон"] = Истина;
				ПараметрыШтрихкода["УровеньКоррекцииQR"] = УровеньКоррекцииQR;
				ПараметрыШтрихКода["ТипВходныхДанных"] = 1;
				СтруктураКартинки = ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыШтрихкода);    		
				
				РисунокШтрихкод.Картинка = СтруктураКартинки.Картинка;
				РисунокШтрихкод.ГраницаСверху = Ложь;
				РисунокШтрихкод.ГраницаСлева = Ложь;
				РисунокШтрихкод.ГраницаСнизу = Ложь;
				РисунокШтрихкод.ГраницаСправа = Ложь;
				РисунокШтрихкод.Защита = Ложь;
				ШтрихКодНаПечать = СтрЗаменить(ШтрихКодНаПечать, "(", "");
				ШтрихКодНаПечать = СтрЗаменить(ШтрихКодНаПечать, ")", "");
				ОбластьОсновная.Параметры.КодМаркировки = ШтрихКодНаПечать;
				
			КонецЕсли;
			
			ЕстьОписание = Ложь;
			СтрокаОписание = Неопределено;
			ЗначениеОписание = Неопределено;
			
			ДатаИзготовления = ПолучитьДатуИзготовленияКМ(тзТовары, Строка); 
			Этикетка = ПолучитьДанныеЭтикетки(мНоменклатура, ДатаИзготовления);
			ОбластьОсновная.Параметры.Этикетка = Этикетка;
			
			ВывелиПодвал = Ложь; 
			
			Для а = 1 По строка.КоличествоЭтикеток Цикл
				
				ИндексЭтикетки = ИндексЭтикетки + 1;
				
				Если ИндексКолонки = 1 Тогда
					ТД.Вывести(ОбластьОсновная);
				Иначе	
					ТД.Присоединить(ОбластьОсновная);
				КонецЕсли;
				
				Если ИндексКолонки = КоличествоКолонок Тогда
					ИндексКолонки = 1;
					ИндексСтроки = ИндексСтроки + 1;
				Иначе
					ИндексКолонки = ИндексКолонки + 1;
				КонецЕсли;
				
				Если ИндексЭтикетки = ЭтикетокНаЛисте или ИндексСтроки > КоличествоСтрок Тогда
					
					ПечатьПодвала(ТД, Макет, ПараметрыЗаголовка, ИндексСтроки - 1);
					ВывелиПодвал = Истина;
					
					Если Не (ИндексЭтикетки  = ВсегоНужноНапечататьЭтикеток) Тогда
						ТД.ВывестиГоризонтальныйРазделительСтраниц();
						ПечатьЗаголовка(ТД, Макет, ПараметрыЗаголовка);
					КонецЕсли;
					
					ИндексСтроки = 1;
					ИндексЭтикетки = 0;
				Иначе
					ВывелиПодвал = Ложь;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		Если НЕ ВывелиПодвал Тогда
			
			НадоСделатьВывод = Ложь;
			Если ИндексСтроки = 1 И ИндексЭтикетки < 6 Тогда
				
				ИндексЭтикетки = ИндексЭтикетки + 1;
				
				ОбластьОсновная = Макет.ПолучитьОбласть("ОбластьОсновная");
				ОбластьОсновная.Рисунки.Удалить(ОбластьОсновная.Рисунки.Штрихкод);
				ОбластьОсновная.Рисунки.Удалить(ОбластьОсновная.Рисунки.eac);
				
				Пока ИндексЭтикетки <= 6 Цикл
					ОбластьОсновная.Параметры.Размер 		= "";
					ОбластьОсновная.Параметры.Этикетка 		= "";
					ОбластьОсновная.Параметры.КодМаркировки = "";
					ТД.Присоединить(ОбластьОсновная);
					ИндексЭтикетки = ИндексЭтикетки + 1;
				КонецЦикла;
				
				ИндексСтроки = ИндексСтроки + 1;
				НадоСделатьВывод = Истина;
				
			ИначеЕсли ИндексСтроки = 2 И ИндексЭтикетки = 6 Тогда
				ИндексЭтикетки = ИндексЭтикетки + 1;
				НадоСделатьВывод = Истина;
			КонецЕсли;
			
			Если ИндексСтроки = 2 И ИндексЭтикетки < 12 Тогда
				
				ОбластьОсновная = Макет.ПолучитьОбласть("ОбластьОсновная");
				ОбластьОсновная.Рисунки.Удалить(ОбластьОсновная.Рисунки.Штрихкод);
				ОбластьОсновная.Рисунки.Удалить(ОбластьОсновная.Рисунки.eac);
				
				Если НадоСделатьВывод Тогда
					
					ОбластьОсновная.Параметры.Размер 		= "";
					ОбластьОсновная.Параметры.Этикетка 		= "";
					ОбластьОсновная.Параметры.КодМаркировки = "";
					ТД.Вывести(ОбластьОсновная);
					ИндексЭтикетки = ИндексЭтикетки + 1;
				КонецЕсли;
				
				Пока ИндексЭтикетки < 12 Цикл
					ОбластьОсновная.Параметры.Размер 		= "";
					ОбластьОсновная.Параметры.Этикетка 		= "";
					ОбластьОсновная.Параметры.КодМаркировки = "";
					ТД.Присоединить(ОбластьОсновная);
					ИндексЭтикетки = ИндексЭтикетки + 1;
				КонецЦикла;
			КонецЕсли;
			
			ПечатьПодвала(ТД, Макет, ПараметрыЗаголовка);
			ВывелиПодвал = Истина;
		КонецЕсли;	
	КонецЦикла;
	
	УстановитьПараметрыТабличногоДокумента(ТД);
	
	АдресРезультата = ПоместитьВоВременноеХранилище(ТД, Новый УникальныйИдентификатор);

	Возврат АдресРезультата;
	
КонецФункции// } #wortmann

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee01247e7e0c5a
// Галфинд_ДомнышеваКР_07_06_2023
&НаСервере
Функция ПараметрыЗаголовкаПечатьNVE(СтрТЗ)
	ПараметрыЗаголовка = Новый Структура("NVE, АртикулУпаковки",
	СтрТЗ["NVE"], СтрТЗ["АртикулУпаковки"]);
	Возврат ПараметрыЗаголовка;
КонецФункции// } #wortmann 

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee01247e7e0c5a
// Галфинд_ДомнышеваКР_07_06_2023
&НаСервере
Процедура ПечатьЗаголовка(ТД, Макет, ПараметрыЗаголовка)
	Область = Макет.ПолучитьОбласть("НомерСерии");
	Область.Параметры.НомерСерии = ПараметрыЗаголовка["NVE"];
	Область.Параметры.Артикул = ПараметрыЗаголовка["АртикулУпаковки"];
	
	ПараметрыШтрихкода = ГенерацияШтрихкода.ПараметрыГенерацииШтрихкода();
	ПараметрыШтрихкода.ТипКода = 99;
	ПараметрыШтрихкода.Штрихкод = ПараметрыЗаголовка["NVE"];
	ПараметрыШтрихкода.Ширина = 350;
	ПараметрыШтрихкода.Высота = 150;
	ПараметрыШтрихкода.ПрозрачныйФон = Истина;
	ПараметрыШтрихкода.ОтображатьТекст = Ложь;
	СтруктураКартинки = ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыШтрихкода);
	Область.Рисунки.штрих_серии_подвал.Картинка = СтруктураКартинки.Картинка;
	
	ТД.Вывести(Область);
КонецПроцедуры// } #wortmann

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee01247e7e0c5a
// Галфинд_ДомнышеваКР_07_06_2023
&НаСервере
Процедура ПечатьПодвала(ТД, Макет, ПараметрыЗаголовка, ЧислоЛинийQR = 2)
	ПустаяСтрока 	= Макет.ПолучитьОбласть("ПустаяСтрока");
	ТестоваяСтрока 	= Макет.ПолучитьОбласть("ТестоваяСтрока");
	
	Область = Макет.ПолучитьОбласть("НомерСерииПодвал");
	Область.Параметры.НомерСерии 				= ПараметрыЗаголовка["NVE"];
	Если ЧислоЛинийQR = 1 Тогда
		КолвоПустыхСтрок = 0;
		Пока ТД.ВысотаТаблицы % 37 <> 0 Цикл
			КолвоПустыхСтрок = КолвоПустыхСтрок + 1;
			ТД.Вывести(ПустаяСтрока);
		КонецЦикла;
	Иначе
		КолвоПустыхСтрок = 0;
		Пока ТД.ВысотаТаблицы % 40 <> 0 Цикл
			КолвоПустыхСтрок = КолвоПустыхСтрок + 1;
			ТД.Вывести(ПустаяСтрока);
		КонецЦикла;
	КонецЕсли;
	
	ТД.Вывести(Область);
	
КонецПроцедуры// } #wortmann

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee01247e7e0c5a
// Галфинд_ДомнышеваКР_07_06_2023
&НаСервере
Функция ПолучитьДеревоДанных(ТаблицаТоваров = Неопределено)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Т
	|ГДЕ
	|	Т.Пометка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	С.Ссылка КАК Объект,
	|	С.Свойство КАК Свойство,
	|	С.Значение КАК Значение
	|ПОМЕСТИТЬ Свойства
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК С
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Товары КАК Товары
	|		ПО С.Ссылка = Товары.Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Номенклатура,
	|	ДополнительныеСведения.Свойство,
	|	ДополнительныеСведения.Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Товары КАК Товары
	|		ПО (Товары.Номенклатура = ДополнительныеСведения.Объект)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Свойства.Свойство КАК Свойство,
	|	Свойства.Значение КАК Значение
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Свойства КАК Свойства
	|		ПО Товары.Номенклатура = Свойства.Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Свойство
	|ИТОГИ ПО
	|	Номенклатура");
	
	Если ТаблицаТоваров = Неопределено Тогда
		тчТовары = Объект.Товары.Выгрузить();
		Запрос.УстановитьПараметр("Товары", тчТовары);
	Иначе
		Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции// } #wortmann

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee01247e7e0c5a
// Галфинд_ДомнышеваКР_07_06_2023
&НаСервере
Функция ПолучитьДанныеЭтикетки(Номенклатура, ДатаИзготовления)
	
	ПустоеСвойствоЭтикеткиСтрокой = "";
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(вз.Реквизит) = ТИП(СТРОКА)
		|			ТОГДА ВЫРАЗИТЬ(вз.Реквизит КАК СТРОКА(300))
		|		ИНАЧЕ вз.Реквизит
		|	КОНЕЦ КАК РеквизитСтрока,
		|	вз.ТипДопСведения КАК ТипДопСведения,
		|	вз.ПорядокПоТипуДопСведения КАК ПорядокПоТипуДопСведения,
		|	вз.Порядок КАК Порядок,
		|	ВЫРАЗИТЬ(ДополнительныеСведения.Значение КАК СТРОКА(300)) КАК ЗначениеСвойства
		|ПОМЕСТИТЬ БЕЗПЕРЕВОДА
		|ИЗ
		|	(ВЫБРАТЬ
		|		гф_НастройкиПечатиСвойствЭтикеток.Ссылка КАК Ссылка,
		|		гф_НастройкиПечатиСвойствЭтикетокРеквизиты.Реквизит КАК Реквизит,
		|		""Реквизит"" КАК ТипДопСведения,
		|		1 КАК ПорядокПоТипуДопСведения,
		|		гф_НастройкиПечатиСвойствЭтикетокРеквизиты.Порядок КАК Порядок
		|	ИЗ
		|		Справочник.гф_НастройкиПечатиСвойствЭтикеток КАК гф_НастройкиПечатиСвойствЭтикеток
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гф_НастройкиПечатиСвойствЭтикеток.Реквизиты КАК гф_НастройкиПечатиСвойствЭтикетокРеквизиты
		|			ПО гф_НастройкиПечатиСвойствЭтикеток.Ссылка = гф_НастройкиПечатиСвойствЭтикетокРеквизиты.Ссылка
		|	ГДЕ
		|		гф_НастройкиПечатиСвойствЭтикеток.Ссылка = &Ссылка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		гф_НастройкиПечатиСвойствЭтикеток.Ссылка,
		|		гф_НастройкиПечатиСвойствЭтикетокДополнительныеСведения.Свойство,
		|		""Свойство"",
		|		2,
		|		гф_НастройкиПечатиСвойствЭтикетокДополнительныеСведения.Порядок
		|	ИЗ
		|		Справочник.гф_НастройкиПечатиСвойствЭтикеток КАК гф_НастройкиПечатиСвойствЭтикеток
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гф_НастройкиПечатиСвойствЭтикеток.ДополнительныеСведения КАК гф_НастройкиПечатиСвойствЭтикетокДополнительныеСведения
		|			ПО гф_НастройкиПечатиСвойствЭтикеток.Ссылка = гф_НастройкиПечатиСвойствЭтикетокДополнительныеСведения.Ссылка
		|	ГДЕ
		|		гф_НастройкиПечатиСвойствЭтикеток.Ссылка = &Ссылка) КАК вз
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|		ПО (ДополнительныеСведения.Объект = &Ном)
		|			И вз.Реквизит = ДополнительныеСведения.Свойство
		|ГДЕ
		|	вз.Реквизит ЕСТЬ НЕ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БЕЗПЕРЕВОДА.РеквизитСтрока КАК РеквизитИлиСвойство,
		|	БЕЗПЕРЕВОДА.ТипДопСведения КАК ТипДопСведения,
		|	БЕЗПЕРЕВОДА.ПорядокПоТипуДопСведения КАК ПорядокПоТипуДопСведения,
		|	БЕЗПЕРЕВОДА.Порядок КАК Порядок,
		|	БЕЗПЕРЕВОДА.ЗначениеСвойства КАК ЗначениеСвойства,
		|	гф_ПереводЗначенийРеквизитовИСвойств.Значение КАК НаименованиеРеквизита
		|ПОМЕСТИТЬ ПереводНаименований
		|ИЗ
		|	БЕЗПЕРЕВОДА КАК БЕЗПЕРЕВОДА
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гф_ПереводЗначенийРеквизитовИСвойств КАК гф_ПереводЗначенийРеквизитовИСвойств
		|		ПО (гф_ПереводЗначенийРеквизитовИСвойств.Объект = БЕЗПЕРЕВОДА.РеквизитСтрока)
		|			И (гф_ПереводЗначенийРеквизитовИСвойств.Язык = &Этикетки)
		|ГДЕ
		|	БЕЗПЕРЕВОДА.ТипДопСведения = ""Свойство""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	БЕЗПЕРЕВОДА.РеквизитСтрока,
		|	БЕЗПЕРЕВОДА.ТипДопСведения,
		|	БЕЗПЕРЕВОДА.ПорядокПоТипуДопСведения,
		|	БЕЗПЕРЕВОДА.Порядок,
		|	БЕЗПЕРЕВОДА.ЗначениеСвойства,
		|	""""
		|ИЗ
		|	БЕЗПЕРЕВОДА КАК БЕЗПЕРЕВОДА
		|ГДЕ
		|	БЕЗПЕРЕВОДА.ТипДопСведения = ""Реквизит""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПереводНаименований.РеквизитИлиСвойство КАК РеквизитИлиСвойство,
		|	ПереводНаименований.ТипДопСведения КАК ТипДопСведения,
		|	ПереводНаименований.ПорядокПоТипуДопСведения КАК ПорядокПоТипуДопСведения,
		|	ПереводНаименований.Порядок КАК Порядок,
		|	ПереводНаименований.ЗначениеСвойства КАК ЗначениеСвойства,
		|	ВЫРАЗИТЬ(ПереводНаименований.НаименованиеРеквизита КАК СТРОКА(300)) КАК НаименованиеРеквизита,
		|	ВЫРАЗИТЬ(гф_ПереводЗначенийРеквизитовИСвойств.Значение КАК СТРОКА(300)) КАК Значение
		|ПОМЕСТИТЬ ИТОГО
		|ИЗ
		|	ПереводНаименований КАК ПереводНаименований
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гф_ПереводЗначенийРеквизитовИСвойств КАК гф_ПереводЗначенийРеквизитовИСвойств
		|		ПО (гф_ПереводЗначенийРеквизитовИСвойств.Объект = ПереводНаименований.ЗначениеСвойства)
		|			И (гф_ПереводЗначенийРеквизитовИСвойств.Язык = &НацКаталог)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ИТОГО.НаименованиеРеквизита <> """"
		|			ТОГДА ИТОГО.НаименованиеРеквизита
		|		ИНАЧЕ ИТОГО.РеквизитИлиСвойство
		|	КОНЕЦ КАК РеквизитИлиСвойство,
		|	ИТОГО.ТипДопСведения КАК ТипДопСведения,
		|	ИТОГО.ПорядокПоТипуДопСведения КАК ПорядокПоТипуДопСведения,
		|	ИТОГО.Порядок КАК Порядок,
		|	ВЫБОР
		|		КОГДА ИТОГО.Значение <> """"
		|			ТОГДА ИТОГО.Значение
		|		ИНАЧЕ ИТОГО.ЗначениеСвойства
		|	КОНЕЦ КАК ЗначениеСвойства
		|ИЗ
		|	ИТОГО КАК ИТОГО
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	ПорядокПоТипуДопСведения");
	
	Запрос.УстановитьПараметр("Ссылка", _омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначение("гф_НастройкиПечатиРусскаяЗима"));
	Запрос.УстановитьПараметр("Ном", Номенклатура);
	Запрос.УстановитьПараметр("НацКаталог", Справочники.гф_ВидыЯзыков.НацКаталог);
	Запрос.УстановитьПараметр("Этикетки", Справочники.гф_ВидыЯзыков.Этикетки);

	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат ПустоеСвойствоЭтикеткиСтрокой;
	КонецЕсли;
	
	ЗапросТипаАдреса = Новый Запрос ("ВЫБРАТЬ
		|	гф_НастройкиПечатиСвойствЭтикеток.ТипАдреса КАК ТипАдреса
		|ИЗ
		|	Справочник.гф_НастройкиПечатиСвойствЭтикеток КАК гф_НастройкиПечатиСвойствЭтикеток
		|ГДЕ
		|	гф_НастройкиПечатиСвойствЭтикеток.Ссылка = &Ссылка");
	
	ЗапросТипаАдреса.УстановитьПараметр("Ссылка", _омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначение("гф_НастройкиПечатиРусскаяЗима"));
	
	РезультатЗапроса = ЗапросТипаАдреса.Выполнить();
	
	ВыборкаТипаАдреса = РезультатЗапроса.Выбрать();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаТипаАдреса.Следующий();
		ТипАдреса = ВыборкаТипаАдреса.ТипАдреса;
	Иначе
		ТипАдреса = Неопределено;
	КонецЕсли;

	тз = Результат.Выгрузить();
	мСвойств = Новый Массив;
	Для каждого стрТЗ Из тз Цикл
		Если стрТЗ["ТипДопСведения"] = "Реквизит" Тогда 
			Если стрТЗ["РеквизитИлиСвойство"] = Null Тогда
				Продолжить;	
			Иначе
				Если стрТЗ["РеквизитИлиСвойство"] = "Производитель (импортер)" Тогда
					Реквизит = Метаданные.Справочники.Номенклатура.Реквизиты.ПроизводительИмпортерКонтрагент;
					Если ТипАдреса <> Неопределено Тогда
						
					КонецЕсли;
                Иначе
					Реквизит = ОпределитьРеквизит(стрТЗ["РеквизитИлиСвойство"]);
				КонецЕсли;	
				стрТЗ["ЗначениеСвойства"] = Строка(Номенклатура[Реквизит.Имя]);
				Перевод = ПереводРеквизита(стрТЗ["РеквизитИлиСвойство"]);
				Если ЗначениеЗаполнено(Перевод) Тогда
					стрТЗ["РеквизитИлиСвойство"] = Перевод;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ЗначениеСвойства = ?(ЗначениеЗаполнено(стрТЗ["ЗначениеСвойства"]), стрТЗ["ЗначениеСвойства"], "");
		мСвойств.Добавить("" + стрТЗ["РеквизитИлиСвойство"]	+ ": " + ЗначениеСвойства); 
		Если (СтрНачинаетсяС(стрТЗ["РеквизитИлиСвойство"], "Производитель")
			ИЛИ СтрНачинаетсяС(стрТЗ["РеквизитИлиСвойство"], "Импортер")) И ТипАдреса <> Неопределено Тогда 
			ЗначениеАдреса = ПолучитьАдрес(Номенклатура[Реквизит.Имя], ТипАдреса);
			мСвойств.Добавить("" + "Адрес" + ": " + ЗначениеАдреса);
			                                                                               
		КонецЕсли;
	КонецЦикла;
	
	мСвойств.Добавить("" + "Дата Изготовления" + ": " + ДатаИзготовления);	            
	СвойствоЭтикеткиСтрокой = СтрСоединить(мСвойств, ", ");
	Возврат СвойствоЭтикеткиСтрокой + Символы.ПС; 
	
КонецФункции// } #wortmann

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee01247e7e0c5a
// Галфинд_ДомнышеваКР_07_06_2023
&НаСервере
Функция ПолучитьДатуИзготовленияКМ(тзТовары, Строка)
	
	// Получение дат изготовления КМ
	ЗапросКМ = Новый Запрос;
	ЗапросКМ.Текст = 
	"ВЫБРАТЬ
	|	ТЧ.Номенклатура КАК Номенклатура,
	|	ТЧ.Характеристика КАК Характеристика,
	|	ТЧ.КМ КАК КМ
	|ПОМЕСТИТЬ ВТ_ТЧ
	|ИЗ
	|	&ТЧ КАК ТЧ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТЧ.Номенклатура КАК Номенклатура,
	|	ВТ_ТЧ.Характеристика КАК Характеристика,
	|	ВТ_ТЧ.КМ КАК КМ,
	|	ЕСТЬNULL(ПулКодовМаркировкиСУЗ.ДатаЭмиссииУниверсальная, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаИзготовленияКМ
	|ИЗ
	|	ВТ_ТЧ КАК ВТ_ТЧ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
	|			ПО (ПулКодовМаркировкиСУЗ.КодМаркировки = ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода)
	|		ПО ВТ_ТЧ.КМ = ШтрихкодыУпаковокТоваров.Ссылка";
	ЗапросКМ.УстановитьПараметр("ТЧ", тзТовары);
	
	ТаблицаСДатами = ЗапросКМ.Выполнить().Выгрузить();
	ТаблицаСДатами.Индексы.Добавить("Номенклатура, Характеристика, КМ");
	
	СтруктураПоискаДаты = Новый Структура("Номенклатура, Характеристика, КМ");
	
	СтруктураПоискаДаты.Номенклатура = Строка.Номенклатура;
	СтруктураПоискаДаты.Характеристика = Строка.Характеристика;
	СтруктураПоискаДаты.КМ = Строка.КМ;
	СтрокаСДатой = ТаблицаСДатами.НайтиСтроки(СтруктураПоискаДаты);
	Если СтрокаСДатой.Количество() > 0 Тогда
		ДатаИзготовления = СтрокаСДатой[0].ДатаИзготовленияКМ;
	Иначе
		ДатаИзготовления = Дата(1,1,1);
	КонецЕсли;
	Возврат ДатаИзготовления;
	
КонецФункции// } #wortmann

// #wortmann { 
// Получает перевод значения реквизита из РС гф_ПереводЗначенийРеквизитовИСвойств 
// Галфинд_Домнышева 2023/04/24
&НаСервере
Функция ПереводРеквизита(Реквизит)  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	гф_ПереводЗначенийРеквизитовИСвойств.Значение КАК Наименование
		|ИЗ
		|	РегистрСведений.гф_ПереводЗначенийРеквизитовИСвойств КАК гф_ПереводЗначенийРеквизитовИСвойств
		|ГДЕ
		|	гф_ПереводЗначенийРеквизитовИСвойств.Объект = &Реквизит
		|	И гф_ПереводЗначенийРеквизитовИСвойств.Язык = &Этикетки";
	
	Запрос.УстановитьПараметр("Реквизит", Реквизит);
	Запрос.УстановитьПараметр("Этикетки",  Справочники.гф_ВидыЯзыков.НайтиПоНаименованию("Этикетки"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка.Следующий();
		Возврат Выборка.Наименование;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции// } #wortmann

// #wortmann { 
// Получает Реквизит по Синониму 
// Галфинд_Домнышева 2023/04/24
&НаСервере
Функция ОпределитьРеквизит(Синоним) 
	
	Для каждого Реквизит Из Метаданные.Справочники.Номенклатура.Реквизиты Цикл
		Если Реквизит.Синоним = Синоним Тогда
			Возврат Реквизит;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции// } #wortmann

// #wortmann { 
// Получает соответствующего вида адрес для Контрагента  
// Галфинд_Домнышева 2023/04/24
&НаСервере
Функция ПолучитьАдрес(Получатель, ВидАдреса) 
	
	Если ТипЗнч(Получатель) = Тип("СправочникСсылка.Контрагенты") Тогда
		ИскомыйКонтрагент = Получатель;
	Иначе
		ИскомыйКонтрагент = ПолучитьКонтрагентПоПроизводителю(Получатель);
	КонецЕсли;	
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтрагентыКонтактнаяИнформация.Представление КАК Адрес
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|ГДЕ
		|	КонтрагентыКонтактнаяИнформация.Вид = &Вид
		|	И КонтрагентыКонтактнаяИнформация.Тип = &Тип
		|	И КонтрагентыКонтактнаяИнформация.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Вид", ВидАдреса);
	Запрос.УстановитьПараметр("Ссылка", ИскомыйКонтрагент);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка.Следующий();
		Возврат Выборка.Адрес;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции// } #wortmann

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee01247e7e0c5a
// Галфинд_ДомнышеваКР_07_06_2023
&НаСервере
Функция ПолучитьКонтрагентПоПроизводителю(Производитель)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	гф_СоответствиеОрганизацииГруппеДступаИСписка.Контрагент КАК Контрагент
		|ИЗ
		|	РегистрСведений.гф_СоответствиеОрганизацииГруппеДступаИСписка КАК гф_СоответствиеОрганизацииГруппеДступаИСписка
		|ГДЕ
		|	гф_СоответствиеОрганизацииГруппеДступаИСписка.Производитель = &Производитель";
	
	Запрос.УстановитьПараметр("Производитель", Производитель);

	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка.Следующий();
		Возврат Выборка.Контрагент;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции// } #wortmann 

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee01247e7e0c5a
// Галфинд_ДомнышеваКР_07_06_2023
&НаСервере
Функция ПроверитьНаличиеNVEНаСкладе(КМ)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ОстаткиКМ.КМ КАК КМ,
	|	ОстаткиКМ.Склад КАК Склад,
	|	ОстаткиКМ.КоличествоОстаток КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.гф_ДвижениеКодовМаркировкиОрганизации.Остатки(
	|			,
	|			Склад  = &Склад
	|				И КМ В (&КМ)) КАК ОстаткиКМ
	|ГДЕ
	|	ОстаткиКМ.КоличествоОстаток >= 1");
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	Запрос.УстановитьПараметр("КМ", КМ);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции// } #wortmann

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee01247e7e0c5a
// Галфинд_ДомнышеваКР_07_06_2023
&НаСервере
Функция ЗаполнитьТаблицуТоваров(СтруктураШК_УЛ)
	
	ШтрихКод = СтруктураШК_УЛ["ШтрихКодУпаковки"];
	УпаковочныйЛист = СтруктураШК_УЛ["УпаковочныйЛист"];
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УпаковочныйЛист.Ссылка КАК УпаковочныйЛист,
	|	УпаковочныйЛист.гф_Комплектация КАК АртикулУпаковки,
	|	УпаковочныйЛист.Код КАК КодУпЛиста,
	|	УпаковочныйЛист.гф_Агрегация КАК Агрегат
	|ПОМЕСТИТЬ УпЛист
	|ИЗ
	|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
	|ГДЕ
	|	УпаковочныйЛист.Ссылка = &УпаковочныйЛист
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТчВложенныеШтрихкоды.Ссылка КАК Агрегат,
	|	СпрНоменклатура.Артикул КАК Артикул,
	|	СпрШтрихкоды.Номенклатура КАК Номенклатура,
	|	СпрШтрихкоды.Характеристика КАК Характеристика,
	|	1 КАК КоличествоБазЕдиниц,
	|	СпрНоменклатура.ЕдиницаИзмерения КАК ЕдИзмБазовая,
	|	СпрНоменклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|	СпрШтрихкоды.Ссылка КАК КМ
	|ПОМЕСТИТЬ Штрихкоды
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ТчВложенныеШтрихкоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК СпрШтрихкоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|			ПО (СпрНоменклатура.Ссылка = СпрШтрихкоды.Номенклатура)
	|		ПО ТчВложенныеШтрихкоды.Штрихкод = СпрШтрихкоды.Ссылка
	|ГДЕ
	|	ТчВложенныеШтрихкоды.Ссылка = &Агрегат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК Пометка,
	|	УпЛист.АртикулУпаковки КАК АртикулУпаковки,
	|	Штрихкоды.Артикул КАК Артикул,
	|	Штрихкоды.Номенклатура КАК Номенклатура,
	|	Штрихкоды.Характеристика КАК Характеристика,
	|	Штрихкоды.КоличествоБазЕдиниц КАК КоличествоБазЕдиниц,
	|	Штрихкоды.ЕдИзмБазовая КАК ЕдИзмБазовая,
	|	Штрихкоды.Агрегат КАК NVE,
	|	Штрихкоды.СтранаПроисхождения КАК СтранаПроисхождения,
	|	Штрихкоды.КМ КАК КМ,
	|	1 КАК КоличествоЭтикеток,
	|	ВЫБОР
	|		КОГДА ПулКодов.ПолныйКодМаркировки ЕСТЬ НЕ NULL 
	|			ТОГДА ПулКодов.ПолныйКодМаркировки
	|		ИНАЧЕ Штрихкоды.КМ.ЗначениеШтрихкода
	|	КОНЕЦ КАК ПолныйКодМаркировки
	|ИЗ
	|	Штрихкоды КАК Штрихкоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ УпЛист КАК УпЛист
	|		ПО Штрихкоды.Агрегат = УпЛист.Агрегат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодов
	|		ПО Штрихкоды.КМ.ЗначениеШтрихкода = ПулКодов.КодМаркировки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Штрихкоды.Агрегат,
	|	Штрихкоды.Характеристика.Наименование";
	
	Запрос.УстановитьПараметр("УпаковочныйЛист", УпаковочныйЛист);
	Запрос.УстановитьПараметр("Агрегат", ШтрихКод);
	Результат = Запрос.Выполнить();
	Таблица = Результат.Выгрузить();
	Возврат Таблица;
	
КонецФункции// } #wortmann

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee01247e7e0c5a
// Галфинд_ДомнышеваКР_07_06_2023
&НаСервереБезКонтекста
Процедура УстановитьПараметрыТабличногоДокумента(ТД)

	ТД.РазмерСтраницы = "A4";
	ТД.АвтоМасштаб = Ложь;
	ТД.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТД.ПолеСверху = 10; 
	ТД.ПолеСнизу = 10;
	ТД.ПолеСлева = 21; 
	ТД.ПолеСправа = 20;
	ТД.КоличествоЭкземпляров = 1;
	ТД.Защита = Истина;
	
	ТД.ТолькоПросмотр = Истина;
	ТД.ОтображатьСетку = Ложь;
	ТД.ОтображатьЗаголовки = Ложь;
	ТД.КлючПараметровПечати = "ПЕЧАТЬ_ЭТИКЕТОК_РМК";

КонецПроцедуры// } #wortmann

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811ee01247e7e0c5a
// Галфинд_ДомнышеваКР_07_06_2023
&НаКлиенте
Процедура гф_ОбновитьЗаголовокСтраницыIDКоробов()
КоличествоСтрок = Объект["гф_IDКоробов"].Количество();
	
	Элементы["гф_ГруппаIDКоробов"].Заголовок = 
	?(КоличествоСтрок = 0, 
	"ID Коробов",
	"ID Коробов ( "+ КоличествоСтрок + ")");
КонецПроцедуры// } #wortmann

#КонецОбласти