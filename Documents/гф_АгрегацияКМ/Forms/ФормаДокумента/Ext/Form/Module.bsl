
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура гф_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура гф_ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
КонецПроцедуры

&НаСервере
Процедура гф_ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
КонецПроцедуры

&НаКлиенте
Процедура гф_ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура гф_ПослеЗаписи(ПараметрыЗаписи)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// vvv Галфинд \ Sakovich 31.01.2023
	Если ПараметрыЗаписи["РежимЗаписи"] = РежимЗаписиДокумента.Проведение Тогда
		ДопПараметры = Новый Структура;
		Оповещение = Новый ОписаниеОповещения("ПроверитьНеобходимостьВводаНачальныхОстатковКМ", ЭтотОбъект, ДопПараметры);
		ВыполнитьОбработкуОповещения(Оповещение, Истина);
	КонецЕсли;
	// ^^^ Галфинд \ Sakovich 31.01.2023 
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеобходимостьВводаНачальныхОстатковКМ(Результат, ДополнительныеПараметры) Экспорт
	
	мКМДляСоздания = Новый Массив;
	Для каждого стрТч Из Объект.Товары Цикл
		Если стрТч["Движение"] = ПредопределенноеЗначение("Перечисление.гф_ВидДвиженияАгрегацииКМ.Приход") 
			И стрТч["КМ"] = ПредопределенноеЗначение("Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка") 
			И СокрЛП(стрТч["ЗначениеШтрихкода"]) <> "" Тогда
			
			// нужна ли еще проверка существования агрегата в строке ТЧ?
			мКМДляСоздания.Добавить(стрТч["ЗначениеШтрихкода"]);
		КонецЕсли;
	КонецЦикла;
	
	Если мКМДляСоздания.ВГраница() > -1 Тогда
		ДопПараметры = Новый Структура();
		ДопПараметры.Вставить("мКМДляСоздания", мКМДляСоздания);
		Склад = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "Склад");
		ДопПараметры.Вставить("Склад", Склад);
		ДопПараметры.Вставить("Организация", Объект.Организация);
		Оповещение = Новый ОписаниеОповещения("ВопросВводНачальныхОстатковЗавершение", ЭтотОбъект, ДопПараметры);	
		ПоказатьВопрос(Оповещение, 
		"Есть коды маркировки, не найденные в справочнике. 
		|Добавить в документ ""Ввод начальных остатков кодов маркировки""?",
		РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросВводНачальныхОстатковЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат  = КодВозвратаДиалога.Да Тогда
		СоздатьДокументВводНачальныхОстатков(ДополнительныеПараметры);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументВводНачальныхОстатков(Параметры)
	ФормаДокумента = ПолучитьФорму("Документ.гф_ВводНачальныхОстатковКМ.Форма.гф_ФормаДокумента");
	ОбъектФормы = ФормаДокумента.Объект;
	ЗаполнитьЗначенияСвойств(ОбъектФормы, Параметры);
	ОбъектФормы["Ответственный"] = ПользователиКлиент.АвторизованныйПользователь();
	тчФормы = ОбъектФормы.ШтрихкодыУпаковокТоваров;
	Для каждого Эл Из Параметры["мКМДляСоздания"] Цикл
		нс = тчФормы.Добавить();
		нс["ЗначениеШтрихкода"] = Эл;
	КонецЦикла;
	ФормаДокумента.Открыть();
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура гф_ЗагрузитьИзВнешнегоФайлаВместо(Команда)
	Если Объект.Товары.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Табличная часть ""Товары"" будет очищена. Продолжить?'");
		ДопПараметры = Новый Структура() ;
		Оповещение = Новый ОписаниеОповещения("гф_ВопросЗагрузитьТоварыЗавершение", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Иначе
		гф_ЗагрузитьИзВнешнегоФайлаТоварыПродолжение();
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте 
Процедура гф_ВопросЗагрузитьТоварыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		гф_ЗагрузитьИзВнешнегоФайлаТоварыПродолжение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура гф_ЗагрузитьИзВнешнегоФайлаТоварыПродолжение()
	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "гф_АгрегацияКМ.Товары";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка данных из файла'");
	ДополнительныеПараметры = Новый Структура();
	ПараметрыЗагрузки.ДополнительныеПараметры = ДополнительныеПараметры;
	Оповещение = Новый ОписаниеОповещения("гф_ЗагрузитьИзВнешнегоФайлаТоварыЗавершение", ЭтотОбъект);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура гф_ЗагрузитьИзВнешнегоФайлаТоварыЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	гф_ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных);
	
КонецПроцедуры

&НаСервере
Процедура гф_ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных)
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	Если ЗагруженныеДанные.Количество() > 0 Тогда	
		Объект.Товары.Очистить();
		Модифицированность = Истина;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		НоваяСтрокаТовары = Объект.Товары.Добавить();
		НоваяСтрокаТовары.АртикулАгрегата = СтрокаТаблицы.АртикулАгрегата;
		НоваяСтрокаТовары.Агрегат = СтрокаТаблицы.Агрегат;
		НоваяСтрокаТовары.КМ = СтрокаТаблицы.КМ;
		НоваяСтрокаТовары.ЗначениеШтрихкода = СтрокаТаблицы.ЗначениеШтрихкода;
		НоваяСтрокаТовары.Движение = СтрокаТаблицы.Движение;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура гф_ТоварыКМПриИзмененииВместо(Элемент)
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ЗначШК = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ТекДанные["КМ"],
		"ЗначениеШтрихкода");
		ТекДанные["ЗначениеШтрихкода"] = ЗначШК;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура гф_ОбработкаПроверкиЗаполненияНаСервереВместо(Отказ, ПроверяемыеРеквизиты)
	Запрос = Новый Запрос;
	Запрос.Текст = Документы.гф_АгрегацияКМ.ТекстЗапросаПоТаблицеТовары();
	
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
	Результат = Запрос.Выполнить();
	
	тзПроверки = Результат.Выгрузить();
	
	стрПоиска = Новый Структура("Движение, АгрСуществует, КМСуществует");
	// 1) Расход, Агрегат (-), КМ (-)
	стрПоиска["Движение"] = Перечисления.гф_ВидДвиженияАгрегацииКМ.Расход;
	стрПоиска["АгрСуществует"] = Ложь;
	стрПоиска["КМСуществует"] = Ложь;
	мСтрокОшибок = тзПроверки.НайтиСтроки(стрПоиска);
	Шаблон = "Строка %1: Указан расход несуществующего КМ (%2) из несуществующего агрегата (%3)";
	Для каждого стрТЗ Из мСтрокОшибок Цикл
		Текст = СтрШаблон(Шаблон, стрТЗ["НомерСтроки"], стрТЗ["КМСтрокой"], стрТЗ["АгрегатСтрокой"]);
		ОбщегоНазначения.СообщитьПользователю(Текст, , , , Отказ);
	КонецЦикла;
	// 2) Расход, Агрегат (+), КМ (-)
	стрПоиска["Движение"] = Перечисления.гф_ВидДвиженияАгрегацииКМ.Расход;
	стрПоиска["АгрСуществует"] = Истина;
	стрПоиска["КМСуществует"] = Ложь;
	мСтрокОшибок = тзПроверки.НайтиСтроки(стрПоиска);
	Шаблон = "Строка %1: Указан расход несуществующего КМ [%2]";
	Для каждого стрТЗ Из мСтрокОшибок Цикл
		Текст = СтрШаблон(Шаблон, стрТЗ["НомерСтроки"], стрТЗ["КМСтрокой"]);
		ОбщегоНазначения.СообщитьПользователю(Текст, , , , Отказ);
	КонецЦикла;
	// 3) Расход, Агрегат (-), КМ (+)
	стрПоиска["Движение"] = Перечисления.гф_ВидДвиженияАгрегацииКМ.Расход;
	стрПоиска["АгрСуществует"] = Ложь;
	стрПоиска["КМСуществует"] = Истина;
	мСтрокОшибок = тзПроверки.НайтиСтроки(стрПоиска);
	Шаблон = "Строка %1: Указан расход КМ [%2] из несуществующего агрегата [%3]";
	Для каждого стрТЗ Из мСтрокОшибок Цикл
		Текст = СтрШаблон(Шаблон, стрТЗ["НомерСтроки"], стрТЗ["КМСтрокой"], стрТЗ["АгрегатСтрокой"]);
		ОбщегоНазначения.СообщитьПользователю(Текст, , , , Отказ);
	КонецЦикла;
	// 4) Расход, Агрегат (+), КМ (+), КМ не вложен в агрегат
	стрПоиска["Движение"] = Перечисления.гф_ВидДвиженияАгрегацииКМ.Расход;
	стрПоиска["АгрСуществует"] = Истина;
	стрПоиска["КМСуществует"] = Истина;
	стрПоиска.Вставить("КМВложенВАгрегат", Ложь);
	мСтрокОшибок = тзПроверки.НайтиСтроки(стрПоиска);
	Шаблон = "Строка %1: Указан расход КМ [%2], не водящего в агрегат [%3]";
	Для каждого стрТЗ Из мСтрокОшибок Цикл
		Текст = СтрШаблон(Шаблон, стрТЗ["НомерСтроки"], стрТЗ["КМСтрокой"], стрТЗ["АгрегатСтрокой"]);
		ОбщегоНазначения.СообщитьПользователю(Текст, , , , Отказ);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти