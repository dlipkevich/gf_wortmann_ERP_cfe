#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// #wortmann {
// #5.2.04
// стандартные подсистемы. Загрузка из внешнего файла
// Галфинд Sakovich 2022/08/02
//
// Параметры:
//   Параметры - Структура - переопределяемые параметры (необходимо, 
//                  если поддерживается загрузка в несколько табличных частей).
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(Параметры) Экспорт
	
	Если Параметры["ИмяТабличнойЧасти"] = "Документ.ПроизводствоБезЗаказа.ТабличнаяЧасть.ВыходныеИзделия" Тогда
		Параметры["ИмяМакетаСШаблоном"] = "ЗагрузкаИзФайлаВыходныеИзделия";
	КонецЕсли;
	Если Параметры["ИмяТабличнойЧасти"] = "Документ.ПроизводствоБезЗаказа.ТабличнаяЧасть.гф_ПродукцияВКоробах" Тогда
		Параметры["ИмяМакетаСШаблоном"] = "ЗагрузкаИзФайлагф_ПродукцияВКоробах";
	КонецЕсли;
	
КонецПроцедуры // } #wortmann

// #wortmann {
// #5.2.04
// прикладной алгоритм поиска данных в ИБ по данным, загруженным из файла
// Галфинд Sakovich 2022/08/02
// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
// СписокНеоднозначностей содержит список неоднозначных значений, для которых в ИБ имеется несколько
// подходящих вариантов.
//
// Параметры:
//   АдресЗагружаемыхДанных    - Строка - адрес временного хранилища с таблицей значений, в которой
//                                        находятся загруженные данные из файла. Состав колонок:
//     * Идентификатор - Число - порядковый номер строки.
//       Остальные колонки соответствуют колонкам макета ЗагрузкаИзФайла.
//   АдресТаблицыСопоставления - Строка - адрес временного хранилища с пустой таблицей значений,
//                                        являющейся копией табличной части документа, 
//                                        которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//   СписокНеоднозначностей - ТаблицаЗначений - список неоднозначных значений:
//     * Колонка       - Строка - имя колонки, в которой была обнаружена неоднозначность.
//     * Идентификатор - Число - идентификатор строки, в которой была обнаружена неоднозначность.
//   ПолноеИмяТабличнойЧасти   - Строка - полное имя табличной части, в которую загружаются данные.
//   ДополнительныеПараметры   - Произвольный - любые дополнительные сведения.
//
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, 
	АдресТаблицыСопоставления, 
	СписокНеоднозначностей, 
	ПолноеИмяТабличнойЧасти, 
	ДополнительныеПараметры) Экспорт

	Если ПолноеИмяТабличнойЧасти = "Документ.ПроизводствоБезЗаказа.ТабличнаяЧасть.ВыходныеИзделия" Тогда
		
		Товары = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления); // ТаблицаЗначений
		ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных); // ТаблицаЗначений
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ДанныеДляСопоставления.Артикул КАК СТРОКА(50)) КАК Артикул,
		|	ВЫРАЗИТЬ(ДанныеДляСопоставления.Характеристика КАК СТРОКА(200)) КАК Характеристика,
		|	ДанныеДляСопоставления.Номенклатура КАК Номенклатура,
		|	ДанныеДляСопоставления.Идентификатор КАК Идентификатор
		|ПОМЕСТИТЬ ДанныеДляСопоставления
		|ИЗ
		|	&ДанныеДляСопоставления КАК ДанныеДляСопоставления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДляСопоставления.Идентификатор КАК Идентификатор,
		|	ДанныеДляСопоставления.Характеристика КАК ХарактеристикаСтрокой,
		|	спрНоменклатура.Ссылка КАК Номенклатура,
		|	спрНоменклатура.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
		|	спрНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры
		|ПОМЕСТИТЬ ДанныеДляСопоставленияПоАртикулу
		|ИЗ
		|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спрНоменклатура
		|		ПО (спрНоменклатура.Артикул = ДанныеДляСопоставления.Артикул)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДляСопоставленияПоАртикулу.Идентификатор КАК Идентификатор,
		|	ДанныеДляСопоставленияПоАртикулу.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ДанныеДляСопоставленияПоАртикулу.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
		|				И ДанныеДляСопоставленияПоАртикулу.Номенклатура ЕСТЬ НЕ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		ИНАЧЕ ХарактеристикиНоменклатуры.Ссылка
		|	КОНЕЦ КАК Характеристика
		|ИЗ
		|	ДанныеДляСопоставленияПоАртикулу КАК ДанныеДляСопоставленияПоАртикулу
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО (ВЫБОР
		|				КОГДА ДанныеДляСопоставленияПоАртикулу.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|						И ДанныеДляСопоставленияПоАртикулу.ВидНоменклатуры = ХарактеристикиНоменклатуры.Владелец
		|						И ДанныеДляСопоставленияПоАртикулу.ХарактеристикаСтрокой = ХарактеристикиНоменклатуры.Наименование
		|					ТОГДА ИСТИНА
		|				КОГДА ДанныеДляСопоставленияПоАртикулу.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|						И ДанныеДляСопоставленияПоАртикулу.Номенклатура = ХарактеристикиНоменклатуры.Владелец
		|						И ДанныеДляСопоставленияПоАртикулу.ХарактеристикаСтрокой = ХарактеристикиНоменклатуры.Наименование
		|					ТОГДА ИСТИНА
		|				КОГДА ДанныеДляСопоставленияПоАртикулу.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
		|						И ДанныеДляСопоставленияПоАртикулу.ХарактеристикаСтрокой = """"
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеДляСопоставленияПоАртикулу.Идентификатор,
		|	ДанныеДляСопоставленияПоАртикулу.Номенклатура,
		|	ВЫБОР
		|		КОГДА ДанныеДляСопоставленияПоАртикулу.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
		|				И ДанныеДляСопоставленияПоАртикулу.Номенклатура ЕСТЬ НЕ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		ИНАЧЕ ХарактеристикиНоменклатуры.Ссылка
		|	КОНЕЦ";
		
		Запрос.УстановитьПараметр("ДанныеДляСопоставления", ЗагружаемыеДанные);
		РезультатыЗапросов = Запрос.ВыполнитьПакет(); // Массив из РезультатЗапроса
		
		ТаблицаНоменклатура = РезультатыЗапросов[2].Выгрузить(); // ТаблицаЗначений
		Для каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл
			
			Товар = Товары.Добавить();
			Товар.Идентификатор = СтрокаТаблицы.Идентификатор;
			Товар.КоличествоУпаковок = СтрокаТаблицы.КоличествоУпаковок;
			
			мСтрок = ТаблицаНоменклатура.НайтиСтроки(Новый Структура("Идентификатор", СтрокаТаблицы.Идентификатор));
			Если мСтрок.Количество() > 0 Тогда 
				СтрокаНоменклатура = мСтрок[0];
				
				Если СтрокаНоменклатура.Номенклатура <>  Null Тогда 
					Товар.Номенклатура = СтрокаНоменклатура.Номенклатура;
				Иначе
					СтрокаТаблицы.РезультатСопоставленияСтроки = Ложь;
					СтрокаТаблицы.ОписаниеОшибки = "Не найдена номенклатура по артикулу: " + СтрокаТаблицы.Артикул;
					ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
					ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор;
					ЗаписьОНеоднозначности.Колонка = "Номенклатура";
				КонецЕсли;
				
				Если Не (СтрокаНоменклатура.Номенклатура <>  Null И СтрокаНоменклатура.Характеристика = Null) Тогда 
					Товар.Характеристика = СтрокаНоменклатура.Характеристика;
				Иначе
					СтрокаТаблицы.РезультатСопоставленияСтроки = Ложь;
					
					СтрокаТаблицы.ОписаниеОшибки = 
					?(СтрокаНоменклатура.Номенклатура = Null,
					"Не найдена характеристика для артикула: " +  СтрокаТаблицы.Артикул,
					"Не найдена характеристика для номенклатуры: " + СтрокаНоменклатура.Номенклатура);
					
					ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
					ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор;
					ЗаписьОНеоднозначности.Колонка = "Характеристика";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если ПолноеИмяТабличнойЧасти = "Документ.ПроизводствоБезЗаказа.ТабличнаяЧасть.гф_ПродукцияВКоробах" Тогда
		
		ТоварыВКоробах = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления); // ТаблицаЗначений
		ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных); // ТаблицаЗначений
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ДанныеДляСопоставления.IDКороба КАК СТРОКА(200)) КАК IDКороба,
		|	ВЫРАЗИТЬ(ДанныеДляСопоставления.ВариантКомплектации КАК СТРОКА(100)) КАК ВариантКомплектации,
		|	ДанныеДляСопоставления.Идентификатор КАК Идентификатор
		|ПОМЕСТИТЬ ДанныеДляСопоставления
		|ИЗ
		|	&ДанныеДляСопоставления КАК ДанныеДляСопоставления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СпрВариантыКомплектацииНоменклатуры.Ссылка КАК Ссылка,
		|	ДанныеДляСопоставления.Идентификатор КАК Идентификатор
		|ПОМЕСТИТЬ СопоставлениеВариантыКомплектацииПоНаименованию
		|ИЗ
		|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК СпрВариантыКомплектацииНоменклатуры
		|		ПО (СпрВариантыКомплектацииНоменклатуры.Наименование = ДанныеДляСопоставления.ВариантКомплектации)
		|			И (ДанныеДляСопоставления.ВариантКомплектации <> """")
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокУпаковочныйЛист.Ссылка КАК Ссылка,
		|	ДанныеДляСопоставления.Идентификатор КАК Идентификатор
		|ПОМЕСТИТЬ СопоставлениеУпаковочныеЛистыПоКоду
		|ИЗ
		|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист КАК ДокУпаковочныйЛист
		|		ПО (ДокУпаковочныйЛист.Код = ДанныеДляСопоставления.IDКороба)
		|			И (ДанныеДляСопоставления.IDКороба <> """")
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(СопоставлениеВариантыКомплектацииПоНаименованию.Ссылка) КАК Ссылка,
		|	СопоставлениеВариантыКомплектацииПоНаименованию.Идентификатор КАК Идентификатор,
		|	КОЛИЧЕСТВО(СопоставлениеВариантыКомплектацииПоНаименованию.Идентификатор) КАК Количество
		|ИЗ
		|	СопоставлениеВариантыКомплектацииПоНаименованию КАК СопоставлениеВариантыКомплектацииПоНаименованию
		|
		|СГРУППИРОВАТЬ ПО
		|	СопоставлениеВариантыКомплектацииПоНаименованию.Идентификатор
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(СопоставлениеУпаковочныеЛистыПоКоду.Ссылка) КАК Ссылка,
		|	СопоставлениеУпаковочныеЛистыПоКоду.Идентификатор КАК Идентификатор,
		|	КОЛИЧЕСТВО(СопоставлениеУпаковочныеЛистыПоКоду.Идентификатор) КАК Количество
		|ИЗ
		|	СопоставлениеУпаковочныеЛистыПоКоду КАК СопоставлениеУпаковочныеЛистыПоКоду
		|
		|СГРУППИРОВАТЬ ПО
		|	СопоставлениеУпаковочныеЛистыПоКоду.Идентификатор";
		
		Запрос.УстановитьПараметр("ДанныеДляСопоставления", ЗагружаемыеДанные);
		РезультатыЗапросов = Запрос.ВыполнитьПакет(); // Массив из РезультатЗапроса
		
		ТаблицаВариантКомплектации = РезультатыЗапросов[3].Выгрузить(); // ТаблицаЗначений
		ТаблицаУпаковочныхЛистов = РезультатыЗапросов[4].Выгрузить(); // ТаблицаЗначений
		
		Для каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл
			
			Товар = ТоварыВКоробах.Добавить();
			Товар.Идентификатор = СтрокаТаблицы.Идентификатор;
			Товар.КоличествоКоробов = СтрокаТаблицы.КоличествоКоробов;
			
			СтрокаВариантКомплектации = ТаблицаВариантКомплектации.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
			Если СтрокаВариантКомплектации <> Неопределено Тогда 
				Если СтрокаВариантКомплектации.Количество = 1 Тогда 
					Товар.ВариантКомплектации = СтрокаВариантКомплектации.Ссылка; 
				КонецЕсли;
				Если СтрокаВариантКомплектации.Количество > 1 Тогда
					ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
					ЗаписьОНеоднозначности.Идентификатор = СтрокаВариантКомплектации.Идентификатор;
					ЗаписьОНеоднозначности.Колонка = "ВариантКомплектации";
				КонецЕсли;
			КонецЕсли;
			
			СтрокаИДКороба = ТаблицаУпаковочныхЛистов.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
			Если СтрокаИДКороба <> Неопределено Тогда 
				Если СтрокаИДКороба.Количество = 1 Тогда 
					Товар.IDКороба = СтрокаИДКороба.Ссылка;
				КонецЕсли;	
				Если СтрокаИДКороба.Количество > 1 Тогда
					ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
					ЗаписьОНеоднозначности.Идентификатор = СтрокаИДКороба.Идентификатор;
					ЗаписьОНеоднозначности.Колонка = "IDКороба";
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // } #wortmann

// Возвращает список подходящих объектов ИБ для неоднозначного значения ячейки.
// 
// Параметры:
//   ПолноеИмяТабличнойЧасти   - Строка - полное имя табличной части, в которую загружаются данные.
//   СписокНеоднозначностей    - Массив из СправочникСсылка.Номенклатура - массив для заполнения
//   с неоднозначными данными.
//   ИмяКолонки                - Строка - имя колонки, в который возникла неоднозначность.
//   ЗагружаемыеЗначенияСтрока - Строка - загружаемые данные на основании которых возникла неоднозначность.
//   ДополнительныеПараметры   - Произвольный - любые дополнительные сведения.
//
Процедура ЗаполнитьСписокНеоднозначностей(ПолноеИмяТабличнойЧасти, 
	СписокНеоднозначностей, 
	ИмяКолонки, 
	ЗагружаемыеЗначенияСтрока, 
	ДополнительныеПараметры) Экспорт
	
	Если ПолноеИмяТабличнойЧасти = "Документ.ПроизводствоБезЗаказа.ТабличнаяЧасть.ВыходныеИзделия" Тогда
		Если ИмяКолонки = "Номенклатура" Тогда
			Запрос = Новый Запрос;
			
			ТекстГде = "";
			Если ЗначениеЗаполнено(ЗагружаемыеЗначенияСтрока.Номенклатура) Тогда
				ТекстГде = "ГДЕ Номенклатура.Наименование = &Наименование";
				Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.Номенклатура);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЗагружаемыеЗначенияСтрока.Артикул) Тогда
				Если ЗначениеЗаполнено(ТекстГде) Тогда
					ТекстГде = ТекстГде + " ИЛИ Номенклатура.Артикул = &Артикул";
				Иначе
					ТекстГде = "Номенклатура.Артикул = &Артикул";
				КонецЕсли;
				Запрос.УстановитьПараметр("Артикул", ЗагружаемыеЗначенияСтрока.Артикул);
			КонецЕсли;
			
			Запрос.Текст = "ВЫБРАТЬ
			|	Номенклатура.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура " + ТекстГде;
			
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ПолноеИмяТабличнойЧасти = "Документ.ПроизводствоБезЗаказа.ТабличнаяЧасть.гф_ПродукцияВКоробах" Тогда
		Если ИмяКолонки = "ВариантКомплектации" Тогда
			Запрос = Новый Запрос;
			
			ТекстГде = "";
			Если ЗначениеЗаполнено(ЗагружаемыеЗначенияСтрока.ВариантКомплектации) Тогда
				ТекстГде = "ГДЕ ВариантКомплектации.Наименование = &Наименование";
				Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.ВариантКомплектации);
			КонецЕсли;
			
			Запрос.Текст = "ВЫБРАТЬ
			|	ВариантыКомплектации.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектации " + ТекстГде;
			
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
			КонецЦикла;
		КонецЕсли;
		
		Если ИмяКолонки = "IDКороба" Тогда
			Запрос = Новый Запрос;
			
			ТекстГде = "";
			Если ЗначениеЗаполнено(ЗагружаемыеЗначенияСтрока.ВариантКомплектации) Тогда
				ТекстГде = "ГДЕ УпаковочныйЛист.Код = &Код";
				Запрос.УстановитьПараметр("Код", ЗагружаемыеЗначенияСтрока.IDКороба);
			КонецЕсли;
			
			Запрос.Текст = "ВЫБРАТЬ
			|	УпаковочныйЛист.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.УпаковочныйЛист КАК УпаковочныйЛист " + ТекстГде;
			
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
			КонецЦикла;
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
// 	Ссылка - ДокумментСсылка.ПроизводствоБезЗаказа
Процедура гф_ПроверитьСоздатьПриходныеОрдера(Ссылка) Экспорт
	
	Если Не Ссылка.Проведен Тогда
		Возврат;	
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(тч.Получатель КАК Справочник.Склады) КАК Склад,
	|	тч.Ссылка КАК ПроизводствоБезЗаказа
	|ПОМЕСТИТЬ Склады
	|ИЗ
	|	Документ.ПроизводствоБезЗаказа.ВыходныеИзделия КАК тч
	|ГДЕ
	|	тч.Ссылка = &Ссылка
	|	И ВЫРАЗИТЬ(тч.Получатель КАК Справочник.Склады) ЕСТЬ НЕ NULL 
	|	И НЕ (ВЫРАЗИТЬ(тч.Получатель КАК Справочник.Склады)) = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Склады.Склад КАК Склад
	|ИЗ
	|	Склады КАК Склады
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерНаТовары КАК ПОТ
	|		ПО Склады.Склад = ПОТ.Склад
	|			И Склады.ПроизводствоБезЗаказа = ПОТ.Распоряжение
	|			И (НЕ ПОТ.ПометкаУдаления)
	|ГДЕ
	|	ПОТ.Ссылка ЕСТЬ NULL");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	// vvv Галфинд \ Sakovich 10.02.2023
	СкладОрдерный = СкладыСервер.ИспользоватьОрдернуюСхемуПриПоступлении(Выборка.Склад, ТекущаяДатаСеанса());
	Если Не СкладОрдерный Тогда
		Возврат;
	КонецЕсли;
	// ^^^ Галфинд \ Sakovich 10.02.2023
	
	Основание = Ссылка;
	Склад = Выборка.Склад;
	СтруктураПолейЗаполнения = Новый Структура();
	СтруктураПолейЗаполнения.Вставить("Распоряжение", "Ссылка");
	СтруктураПолейЗаполнения.Вставить("ДатаПоступления");
	СтруктураПолейЗаполнения.Вставить("Отправитель", "Подразделение");
	СтруктураПолейЗаполнения.Вставить("ДатаВходящегоДокумента", "Дата");
	СтруктураПолейЗаполнения.Вставить("НомерВходящегоДокумента", "Номер");
	
	СтруктРеквизитов = Новый ФиксированнаяСтруктура(СтруктураПолейЗаполнения);
	ЗначенияРеквизитовОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, СтруктРеквизитов);
	
	ДанныеЗаполнения = Новый Структура(
	"Склад, Помещение, Распоряжение, ДатаПоступления, ЗонаПриемки, СкладскаяОперация, " + 
	"Отправитель, ДатаВходящегоДокумента, НомерВходящегоДокумента, ХозяйственнаяОперация");
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ЗначенияРеквизитовОснования);
	ДанныеЗаполнения["СкладскаяОперация"] = Перечисления.СкладскиеОперации.ПриемкаПродукцииИзПроизводства;
	ДанныеЗаполнения["Склад"] =Склад;
	ДанныеЗаполнения["ХозяйственнаяОперация"] =Перечисления.ХозяйственныеОперации.ВыпускПродукции;
	
	обПрОрдер = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
	обПрОрдер["Дата"] = ТекущаяДатаСеанса();
	обПрОрдер.Заполнить(ДанныеЗаполнения);
	обПрОрдер["Ответственный"] = Пользователи.АвторизованныйПользователь();
	обПрОрдер["Статус"] = Перечисления.СтатусыПриходныхОрдеров.КПоступлению;
	обПрОрдер["РежимПросмотраПоТоварам"] = 1;
	
	обПрОрдер.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

// Параметры:
// 	Ссылка - ДокумментСсылка.ПроизводствоБезЗаказа
Процедура гф_ПроверитьЗаписатьПоставкуВУпаковочныеЛисты(Ссылка) Экспорт
	
	ПродукцияВКоробах = Ссылка.гф_ПродукцияВКоробах;
	Для каждого стрТч Из ПродукцияВКоробах Цикл
		Если ЗначениеЗаполнено(стрТч["IDКороба"]) Тогда
			Поставка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(стрТч["IDКороба"], "гф_Поставка");
			Если Не ЗначениеЗаполнено(Поставка) Тогда
				обУЛ = стрТч["IDКороба"].ПолучитьОбъект();
				
				// vvv Галфинд \ Sakovich 31.10.2023
				//РежимЗаписи = ?(обУл.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
				обУЛ.ДополнительныеСвойства.Вставить("ПроизводствоБезЗаказаРусскаяЗима", Истина);
				ПроизводствоБезЗаказаРусскаяЗима = Неопределено;
				обУл.ДополнительныеСвойства.Свойство("ПроизводствоБезЗаказаРусскаяЗима", ПроизводствоБезЗаказаРусскаяЗима);
				Если обУЛ <> Неопределено Тогда
					обУЛ["гф_Поставка"] = Ссылка;
					Если ПроизводствоБезЗаказаРусскаяЗима = Истина Тогда
						РежимЗаписи = РежимЗаписиДокумента.Проведение;
					Иначе
						РежимЗаписи = ?(обУл.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
					КонецЕсли;
					// ^^^ Галфинд \ Sakovich 31.10.2023
					
					обУЛ.Записать(РежимЗаписи);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
