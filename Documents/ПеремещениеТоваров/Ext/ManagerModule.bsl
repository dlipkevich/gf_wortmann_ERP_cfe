#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

&ИзменениеИКонтроль("ДанныеДокументаДляПроведения")
Функция гф_ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры)

	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;

	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;

	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений

		ЗаполнитьПараметрыИнициализации(Запрос, Документ);

		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса

		ТекстЗапросаТаблицаЗаказыНаПеремещение(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаТоварыОрганизацийКПередаче(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаТоварыКОформлениюОтчетовКомитенту(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДвиженияНоменклатураНоменклатура(Запрос, ТекстыЗапроса, Регистры);
		#Вставка
		Если ЗначениеЗаполнено(Документ.гф_ЗаказКлиента) Тогда
			гф_ТекстЗапросаТаблицаЗаказыКлиентов(Запрос, ТекстыЗапроса, Регистры)
		КонецЕсли;
		#КонецВставки

		РасчетСебестоимостиПроведениеДокументов.ОтразитьВМеханизмеУчетаЗатратИСебестоимости(Документ, Запрос, ТекстыЗапроса, Регистры);

		ПеремещениеТоваровЛокализация.ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры);
	КонецЕсли;

	ОтразитьРаспределениеЗапасовДвижения(Запрос, ТекстыЗапроса, Регистры);
	ОформитьПриобретениеТоваровПоДвухходовке(Запрос, ТекстыЗапроса, Регистры);
	ОформитьПоступлениеТоваровПоДвухходовке(Запрос, ТекстыЗапроса, Регистры);
	ЗапланироватьПоступлениеТоваров(Запрос, ТекстыЗапроса, Регистры);
	ЗапланироватьОтгрузкуТоваров(Запрос, ТекстыЗапроса, Регистры);
	ОформитьОтгрузкуТоваров(Запрос, ТекстыЗапроса, Регистры);
	#Вставка
	Если ЗначениеЗаполнено(Документ.гф_ЗаказКлиента) Тогда
		//гф_ОтразитьРаспределениеОтгрузкиПеремещением(Запрос, ТекстыЗапроса, Регистры);
	КонецЕсли;
	#КонецВставки

	ПроведениеДокументов.ДобавитьЗапросыСторноДвижений(
	Запрос, ТекстыЗапроса, Регистры, Метаданные.Документы.ПеремещениеТоваров);

	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений

	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);

КонецФункции

Процедура гф_ОтразитьРаспределениеОтгрузкиПеремещением(Запрос, ТекстыЗапроса, Регистры)
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабЧасть.Ссылка                  КАК Ссылка,
		|	ТабЧасть.Ссылка.Дата             КАК Период,
		|	ТабЧасть.Номенклатура            КАК Номенклатура,
		|	ТабЧасть.Характеристика          КАК Характеристика,
		|	ТабЧасть.Ссылка.СкладОтправитель КАК Склад,
		|	ТабЧасть.НазначениеОтправителя   КАК Назначение,
		|	ТабЧасть.Количество              КАК Количество,
		|	НЕОПРЕДЕЛЕНО                     КАК ЗапланированныйРасходРаспределенногоЗапаса,
		|	ИСТИНА                           КАК КонтрольСвободногоОстатка,
		|	ЛОЖЬ                             КАК ИгнорироватьРезервыПриКонтролеОстатков
		|ИЗ
		|	Документ.ПеремещениеТоваров.Товары КАК ТабЧасть
		|ГДЕ
		|	ТабЧасть.КодСтроки = 0";
	
	РаспределениеЗапасовДвижения.РасходЗапаса(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаТабЧасть);
	
	ТекстЗапросаТабЧасть =
		// Приход на неордерном складе или по старым назначениям.
		"ВЫБРАТЬ
		|	ТабЧасть.Ссылка                                                КАК Ссылка,
		|	ТабЧасть.Ссылка.Дата                                           КАК Период,
		|	ТабЧасть.Номенклатура                                          КАК Номенклатура,
		|	ТабЧасть.Характеристика                                        КАК Характеристика,
		|	ТабЧасть.Ссылка.СкладПолучатель                                КАК Склад,
		|	ТабЧасть.Назначение                                            КАК Назначение,
		|	ТабЧасть.Количество                                            КАК Количество,
		|	ТабЧасть.Ссылка.ПеремещениеПоЗаказам И ТабЧасть.КодСтроки <> 0 КАК ПоГрафику,
		|	ТабЧасть.ЗаказНаПеремещение КАК РаспоряжениеВГрафике
		|ИЗ
		|	Документ.ПеремещениеТоваров.Товары КАК ТабЧасть
		|ГДЕ
		|	ТабЧасть.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещенийТоваров.Принято)
		|		И (НЕ ТабЧасть.Ссылка.СкладПолучатель.ИспользоватьОрдернуюСхемуПриПоступлении
		|			ИЛИ ТабЧасть.Ссылка.СкладПолучатель.ДатаНачалаОрдернойСхемыПриПоступлении > ТабЧасть.Ссылка.Дата
		|			ИЛИ ТабЧасть.Назначение.ДвиженияПоСкладскимРегистрам = ЛОЖЬ)";
	
	РаспределениеЗапасовДвижения.ПриходЗапаса(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаТабЧасть);
	
	ТекстЗапросаТабЧасть =
		// Сторно приходного ордера по старым назначениям.
		"ВЫБРАТЬ
		|	ТабЧасть.Ссылка                              КАК Ссылка,
		|	ТабЧасть.Ссылка.Дата                         КАК Период,
		|	ТабЧасть.Номенклатура                        КАК Номенклатура,
		|	ТабЧасть.Характеристика                      КАК Характеристика,
		|	ТабЧасть.Ссылка.СкладПолучатель              КАК Склад,
		|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
		|	-ТабЧасть.Количество                         КАК Количество,
		|	ЛОЖЬ                                         КАК ПоГрафику,
		|	НЕОПРЕДЕЛЕНО                                 КАК РаспоряжениеВГрафике
		|ИЗ
		|	Документ.ПеремещениеТоваров.Товары КАК ТабЧасть
		|ГДЕ
		|	ТабЧасть.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещенийТоваров.Принято)
		|		И ТабЧасть.Назначение.ДвиженияПоСкладскимРегистрам = ЛОЖЬ
		|		И ТабЧасть.Ссылка.СкладПолучатель.ИспользоватьОрдернуюСхемуПриПоступлении
		|		И ТабЧасть.Ссылка.СкладПолучатель.ДатаНачалаОрдернойСхемыПриПоступлении <= ТабЧасть.Ссылка.Дата";
	
	РаспределениеЗапасовДвижения.ПриходЗапаса(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаТабЧасть);
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабЧасть.Ссылка                                                КАК Ссылка,
		|	ТабЧасть.Ссылка.Дата                                           КАК Период,
		|	ТабЧасть.Номенклатура                                          КАК Номенклатура,
		|	ТабЧасть.Характеристика                                        КАК Характеристика,
		|	ТабЧасть.Ссылка.СкладПолучатель                                КАК Склад,
		|	
		|	ВЫБОР КОГДА ТабЧасть.Назначение.ДвиженияПоСкладскимРегистрам = ЛОЖЬ ТОГДА
		|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			ИНАЧЕ
		|				ТабЧасть.Назначение
		|		КОНЕЦ КАК Назначение,
		|	
		|	ТабЧасть.Количество                                            КАК Количество,
		|	
		|	ВЫБОР КОГДА ТабЧасть.Ссылка.ПеремещениеПоЗаказам
		|					И ТабЧасть.Ссылка.ВариантПриемкиТоваров
		|						<> ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным) ТОГДА
		|				ТабЧасть.ЗаказНаПеремещение
		|			ИНАЧЕ
		|				ТабЧасть.Ссылка
		|		КОНЕЦ КАК Заказ,
		|	
		|	ВЫБОР КОГДА ТабЧасть.Ссылка.ДатаПоступления <> ДАТАВРЕМЯ(1, 1, 1) ТОГДА
		|				ТабЧасть.Ссылка.ДатаПоступления
		|			ИНАЧЕ
		|				ТабЧасть.Ссылка.Дата
		|		КОНЕЦ КАК ДатаПоступления,
		|	
		|	ИСТИНА                                                         КАК ДоступенДляРасхода,
		|	ТабЧасть.Ссылка.ПеремещениеПоЗаказам И ТабЧасть.КодСтроки <> 0 КАК ПоГрафику,
		|	ТабЧасть.ЗаказНаПеремещение                                    КАК РаспоряжениеВГрафике,
		|	ТабЧасть.Количество                                            КАК КоличествоВГрафике
		|ИЗ
		|	Документ.ПеремещениеТоваров.Товары КАК ТабЧасть
		|ГДЕ
		|	ТабЧасть.Ссылка.СкладПолучатель.ИспользоватьОрдернуюСхемуПриПоступлении
		|			И ТабЧасть.Ссылка.СкладПолучатель.ДатаНачалаОрдернойСхемыПриПоступлении <= ТабЧасть.Ссылка.Дата
		|			И (ТабЧасть.Ссылка.ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным)
		|				ИЛИ НЕ ТабЧасть.Ссылка.ПеремещениеПоЗаказам
		|				ИЛИ ТабЧасть.КодСтроки = 0)
		|		ИЛИ ТабЧасть.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещенийТоваров.Отгружено)
		|			И(НЕ ТабЧасть.Ссылка.ПеремещениеПоЗаказам
		|				ИЛИ ТабЧасть.КодСтроки = 0)";
	
	РаспределениеЗапасовДвижения.ЗапланироватьПриходЗапаса(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаТабЧасть);
	
КонецПроцедуры

Функция гф_ТекстЗапросаТаблицаЗаказыКлиентов(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ЗаказыКлиентов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаТовары.Ссылка.Дата КАК Период,
	|	ПеремещениеТоваров.гф_ЗаказКлиента КАК ЗаказКлиента,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерий В (10, 14)
	|			ТОГДА ТаблицаТовары.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Серия,
	|	ТаблицаТовары.КодСтроки КАК КодСтроки,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
	|	0 КАК Заказано,
	|	ТаблицаТовары.Количество КАК КОформлению,
	|	0 КАК Сумма
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|		ПО ТаблицаТовары.Ссылка = ПеремещениеТоваров.Ссылка
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.КодСтроки <> 0
	|	И &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещенийТоваров.Принято)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаТовары.Ссылка.Дата,
	|	ПеремещениеТоваров.гф_ЗаказКлиента,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерий В (10, 14)
	|			ТОГДА ТаблицаТовары.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаТовары.КодСтроки,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка),
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.Количество,
	|	0
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|		ПО ТаблицаТовары.Ссылка = ПеремещениеТоваров.Ссылка
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.КодСтроки <> 0
	|	И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещенийТоваров.Принято)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаТовары.Ссылка.Дата,
	|	ПеремещениеТоваров.гф_ЗаказКлиента,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерий В (10, 14)
	|			ТОГДА ТаблицаТовары.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаТовары.КодСтроки,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка),
	|	0,
	|	ТаблицаТовары.Количество,
	|	0
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|		ПО ТаблицаТовары.Ссылка = ПеремещениеТоваров.Ссылка
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.КодСтроки = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаТовары.Ссылка.Дата,
	|	ПеремещениеТоваров.гф_ЗаказКлиента,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерий В (10, 14)
	|			ТОГДА ТаблицаТовары.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаТовары.КодСтроки,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка),
	|	0,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.СуммаВзаиморасчетов
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|		ПО ТаблицаТовары.Ссылка = ПеремещениеТоваров.Ссылка
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.КодСтроки = 0";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьНомерПоставкиИзПеремещения(ПеремещениеСсылка) Экспорт
	
	НомерПоставки = "";
	
	// Галфинд ВолковЕВ нет такого реквизита
	//Если ЗначениеЗаполнено(ПеремещениеСсылка.rc_УпаковочныйЛист) тогда
	//	ЗапросПоставка = Новый Запрос;
	//	ЗапросПоставка.Текст = 
	//	"ВЫБРАТЬ
	//	|	ПоступлениеТоваровУслуг.Номер КАК НомерПТУ
	//	|ИЗ
	//	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	//	|ГДЕ
	//	|	ПоступлениеТоваровУслуг.rc_УпаковочныйЛист = &УЛ";
	//	ЗапросПоставка.УстановитьПараметр("УЛ", СокрЛП(ПеремещениеСсылка.rc_УпаковочныйЛист));
	//	
	//Иначе //ищем поставку по серийному номеру	
		ЗапросПоставка = Новый Запрос;
		ЗапросПоставка.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПеремещениеТоваровТовары.СерияНоменклатуры,
		|	ПоступлениеТоваровУслугТовары.Ссылка.Номер КАК НомерПТУ,
		|	ПоступлениеТоваровУслугТовары.Ссылка.Ссылка КАК Поставка
		|ИЗ
		|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		|		ПО ПеремещениеТоваровТовары.Номенклатура = ПоступлениеТоваровУслугТовары.Номенклатура
		|			И ПеремещениеТоваровТовары.СерияНоменклатуры = ПоступлениеТоваровУслугТовары.СерияНоменклатуры
		|ГДЕ
		|	ПеремещениеТоваровТовары.Ссылка = &ПеремещениеСсылка";
		
		ЗапросПоставка.УстановитьПараметр("ПеремещениеСсылка", ПеремещениеСсылка);

	//КонецЕсли;
	
	ВыборкаПоставка = ЗапросПоставка.Выполнить().Выбрать();
	Пока ВыборкаПоставка.Следующий() цикл
		НомерПоставки = СокрЛП(ВыборкаПоставка.НомерПТУ);
	КонецЦикла;
	
	Возврат НомерПоставки;	

КонецФункции

// Для расход переупаковка
Функция ПолучитьЦену(Номенклатура, ТипЦен, Дата)
	ответ = новый Структура("Цена, Валюта, ЕдиницаИзмерения", 0);
	запрос = новый Запрос(
	"ВЫБРАТЬ
	|	а.Цена КАК Цена,
	|	а.Валюта КАК Валюта,
	|	а.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&ДатаЦены,
	|			ТипЦен = &ТипЦен
	|				И Номенклатура = &Номенклатура) КАК а");
	запрос.УстановитьПараметр("ДатаЦены", Дата);
	запрос.УстановитьПараметр("ТипЦен", ТипЦен);
	запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	выборка = запрос.Выполнить().Выбрать();
	Если выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ответ, выборка);
	КонецЕсли;
	возврат ответ;
КонецФункции // ПолучитьЦену()

#КонецЕсли
&ИзменениеИКонтроль("СформироватьПечатнуюФормуНакладнойНаПеремещениеТоваров")
Функция гф_СформироватьПечатнуюФормуНакладнойНаПеремещениеТоваров(МассивОбъектов, ОбъектыПечати)

	УстановитьПривилегированныйРежим(Истина);

	КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов();
	ИмяКолонкиКодов = КолонкаКодов.ИмяКолонки;
	ПредставлениеКолонкиКодов = КолонкаКодов.ПредставлениеКолонки;
	ВыводитьКоды = ЗначениеЗаполнено(ИмяКолонкиКодов);

	ИспользоватьУпаковкиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_Накладная";
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПеремещениеТоваров.ПФ_MXL_НакладнаяНаПеремещение");

	ОбластьЗаголовкаПеремещение         = Макет.ПолучитьОбласть("ЗаголовокПеремещение");
	ОбластьЗаголовкаВнутренняяПередача  = Макет.ПолучитьОбласть("ЗаголовокВнутренняяПередача");

	Если ВыводитьКоды Тогда
		ОбластьКодовШапка  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьКодовШапка.Параметры.ИмяКолонкиКодов = ПредставлениеКолонкиКодов;

		ОбластьКодовСтрока = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
		ОбластьКодовПодвал = Макет.ПолучитьОбласть("Подвал|КолонкаКодов");
	Иначе
		ОбластьТовары = Макет.Область("Товар");
		ОбластьТовары.ШиринаКолонки = ОбластьТовары.ШиринаКолонки + Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;

	Если ИспользоватьУпаковкиНоменклатуры Тогда
		ОбластьУпаковокШапка  =  Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаУпаковок");
		ОбластьУпаковокСтрока =  Макет.ПолучитьОбласть("Строка|КолонкаУпаковок");
		ОбластьУпаковокПодвал =  Макет.ПолучитьОбласть("Подвал|КолонкаУпаковок");
	Иначе
		ОбластьТовары = Макет.Область("Товар");
		ОбластьТовары.ШиринаКолонки = ОбластьТовары.ШиринаКолонки 
		+ Макет.Область("КолонкаУпаковокКоличество").ШиринаКолонки
		+ Макет.Область("КолонкаУпаковокПредставление").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомераШапка = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьДанныхШапка = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
	ОбластьКонецСтрокиШапка = Макет.ПолучитьОбласть("ШапкаТаблицы|КонецСтроки");

	ОбластьНомераСтрока = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьДанныхСтрока = Макет.ПолучитьОбласть("Строка|Товар");
	ОбластьКонецСтрокиСтрока = Макет.ПолучитьОбласть("Строка|КонецСтроки");

	ОбластьНомераПодвал = Макет.ПолучитьОбласть("Подвал|НомерСтроки");
	ОбластьДанныхПодвал = Макет.ПолучитьОбласть("Подвал|Товар");
	ОбластьКонецСтрокиПодвал = Макет.ПолучитьОбласть("Подвал|КонецСтроки");

	ОбластьПодписей = Макет.ПолучитьОбласть("Подписи");

	ЗапросПоШапке = Новый Запрос;
	ЗапросПоШапке.Текст = 
	"ВЫБРАТЬ
	|	ПеремещениеТоваров.Ссылка                              КАК Ссылка,
	|	ПеремещениеТоваров.Номер                               КАК Номер,
	|	ПеремещениеТоваров.Дата                                КАК Дата,
	|	ПеремещениеТоваров.ИсправляемыйДокумент.Номер          КАК НомерИсправляемогоДокумента,
	|	ПеремещениеТоваров.ИсправляемыйДокумент.Дата           КАК ДатаИсправляемогоДокумента,
	|	ПеремещениеТоваров.Организация.Префикс                 КАК Префикс,
	|	ПеремещениеТоваров.ХозяйственнаяОперация               КАК ХозяйственнаяОперация,
	|	ПеремещениеТоваров.СкладОтправитель.Представление      КАК ОтправительПредставление,
	|	ПеремещениеТоваров.СкладПолучатель.Представление       КАК ПолучательПредставление,
	|	ВЫБОР КОГДА ПеремещениеТоваров.Организация.НаименованиеСокращенное = """" ТОГДА
	|		ПеремещениеТоваров.Организация.Наименование
	|	ИНАЧЕ
	|		ПеремещениеТоваров.Организация.НаименованиеСокращенное
	|	КОНЕЦ                                                  КАК ОрганизацияПредставление,
	|	ВЫБОР КОГДА ПеремещениеТоваров.ОрганизацияПолучатель.НаименованиеСокращенное = """" ТОГДА
	|		ПеремещениеТоваров.ОрганизацияПолучатель.Наименование
	|	ИНАЧЕ
	|		ПеремещениеТоваров.ОрганизацияПолучатель.НаименованиеСокращенное
	|	КОНЕЦ                                                  КАК ОрганизацияПолучательПредставление,
	|	ВЫБОР КОГДА ПеремещениеТоваров.СкладОтправитель.ИспользоватьСерииНоменклатуры
	|	 ИЛИ ПеремещениеТоваров.СкладПолучатель.ИспользоватьСерииНоменклатуры ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьСерииНоменклатуры
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Дата
	|ИТОГИ ПО
	|	ИспользоватьСерииНоменклатуры
	|";

	ЗапросПоШапке.УстановитьПараметр("МассивДокументов", МассивОбъектов);

	ДеревоОбъектов = ЗапросПоШапке.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);

	ПерваяСтрокаОбъектов = Истина;  // В дереве объектов может быть максимум 2 строки, эта переменная для 
	// определения того, что началась вторая строка для вывода разделителя границ

	Для Каждого ИспользованиеСерий Из ДеревоОбъектов.Строки Цикл

		ЗапросПоТоварам = Новый Запрос;
		ЗапросПоТоварам.УстановитьПараметр("МассивОбъектов", ИспользованиеСерий.Строки.ВыгрузитьКолонку("Ссылка"));

		Если ИспользованиеСерий.ИспользоватьСерииНоменклатуры Тогда

			ТекстЗапросаПоТоварам = 
			"ВЫБРАТЬ
			|	ТаблицаТовары.Ссылка КАК Ссылка,
			|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
			|	ТаблицаТовары.Номенклатура КАК Номенклатура,
			|	ТаблицаТовары.Характеристика КАК Характеристика,
			|	ВЫБОР
			|		КОГДА ТаблицаТовары.СтатусУказанияСерий В(10, 14)
			|			ТОГДА ТаблицаТовары.Серия
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
			|	КОНЕЦ КАК Серия,
			|	ТаблицаТовары.Упаковка КАК Упаковка,
			|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
			|	ТаблицаТовары.Количество КАК Количество
			|ПОМЕСТИТЬ ТаблицаТоваров
			|ИЗ
			|	Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
			|ГДЕ
			|	ТаблицаТовары.Ссылка В(&МассивОбъектов)
			|	И НЕ ТаблицаТовары.СтатусУказанияСерий В (2, 4, 6, 8)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаСерии.Ссылка,
			|	МИНИМУМ(ТаблицаТовары.НомерСтроки),
			|	ТаблицаСерии.Номенклатура,
			|	ТаблицаСерии.Характеристика,
			|	ТаблицаСерии.Серия,
			|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка),
			|	ТаблицаСерии.Количество,
			|	ТаблицаСерии.Количество
			|ИЗ
			|	Документ.ПеремещениеТоваров.Серии КАК ТаблицаСерии
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
			|		ПО ТаблицаСерии.Ссылка = ТаблицаТовары.Ссылка
			|			И ТаблицаСерии.Номенклатура = ТаблицаТовары.Номенклатура
			|			И ТаблицаСерии.Характеристика = ТаблицаТовары.Характеристика
			|ГДЕ
			|	ТаблицаСерии.Ссылка В(&МассивОбъектов)
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаСерии.Ссылка,
			|	ТаблицаСерии.Номенклатура,
			|	ТаблицаСерии.Характеристика,
			|	ТаблицаСерии.Серия,
			|	ТаблицаСерии.Количество,
			|	ТаблицаСерии.Количество
			|
			|ИМЕЮЩИЕ
			|	МАКСИМУМ(ТаблицаТовары.СтатусУказанияСерий) В (2, 4, 6, 8)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаТоваров.Ссылка,
			|	МИНИМУМ(ТаблицаТоваров.НомерСтроки) КАК НомерСтроки,
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Характеристика,
			|	ВЫБОР
			|		КОГДА ТаблицаТоваров.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
			|			ТОГДА ТаблицаТоваров.Номенклатура.ЕдиницаИзмерения
			|		ИНАЧЕ ТаблицаТоваров.Упаковка
			|	КОНЕЦ КАК Упаковка,
			|	СУММА(ТаблицаТоваров.КоличествоУпаковок) КАК КоличествоУпаковок,
			|	СУММА(ТаблицаТоваров.Количество) КАК Количество,
			|	ВЫБОР
			|		КОГДА ТаблицаТоваров.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
			|			ТОГДА NULL
			|		ИНАЧЕ ТаблицаТоваров.Серия
			|	КОНЕЦ КАК Серия
			|ПОМЕСТИТЬ СуммированнаяТаблицаТоваров
			|ИЗ
			|	ТаблицаТоваров КАК ТаблицаТоваров
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаТоваров.Ссылка,
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Характеристика,
			|	ВЫБОР
			|		КОГДА ТаблицаТоваров.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
			|			ТОГДА ТаблицаТоваров.Номенклатура.ЕдиницаИзмерения
			|		ИНАЧЕ ТаблицаТоваров.Упаковка
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА ТаблицаТоваров.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
			|			ТОГДА NULL
			|		ИНАЧЕ ТаблицаТоваров.Серия
			|	КОНЕЦ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаТовары.Ссылка КАК Ссылка,
			|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
			|	ТаблицаТовары.Номенклатура КАК Товар,
			|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
			|	ТаблицаТовары.Номенклатура.Код КАК Код,
			|	ТаблицаТовары.Номенклатура.Артикул КАК Артикул,
			|	ТаблицаТовары.Характеристика.НаименованиеПолное КАК ХарактеристикаНаименование,
			|	ТаблицаТовары.Характеристика КАК Характеристика,
			|	ТаблицаТовары.Серия КАК Серия,
			|	ВЫБОР
			|		КОГДА ТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА ПРЕДСТАВЛЕНИЕССЫЛКИ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения)
			|		ИНАЧЕ ПРЕДСТАВЛЕНИЕССЫЛКИ(ТаблицаТовары.Упаковка)
			|	КОНЕЦ КАК ПредставлениеЕдининицыИзмеренияУпаковки,
			|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
			|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
			|	ТаблицаТовары.Количество КАК Количество,
			|	ТаблицаТовары.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий КАК НастройкаИспользованияСерий
			|ИЗ
			|	СуммированнаяТаблицаТоваров КАК ТаблицаТовары
			|
			|УПОРЯДОЧИТЬ ПО
			|	Ссылка,
			|	НомерСтроки,
			|	Товар,
			|	Характеристика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаТоваров.Ссылка КАК Ссылка,
			|	МИНИМУМ(ТаблицаТоваров.НомерСтроки) КАК НомерСтроки,
			|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
			|	ТаблицаТоваров.Характеристика КАК Характеристика,
			|	ТаблицаТоваров.Серия.Наименование КАК ПредставлениеСерии
			|ИЗ
			|	ТаблицаТоваров КАК ТаблицаТоваров
			|ГДЕ
			|	ТаблицаТоваров.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
			|	И НЕ ТаблицаТоваров.Серия ЕСТЬ NULL 
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаТоваров.Ссылка,
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Характеристика,
			|	ТаблицаТоваров.Серия.Наименование
			|
			|УПОРЯДОЧИТЬ ПО
			|	Ссылка,
			|	НомерСтроки,
			|	Номенклатура,
			|	Характеристика,
			|	ПредставлениеСерии";

			ЗапросПоТоварам.Текст = ТекстЗапросаПоТоварам;
			РезультатЗапроса		 = ЗапросПоТоварам.ВыполнитьПакет();
			ВыборкаПоТоварам		 = РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ВыборкаПоСериям 		 = РезультатЗапроса[3].Выбрать();

		Иначе

			ТекстЗапросаПоТоварам = 
			"ВЫБРАТЬ
			|	ТаблицаТовары.Ссылка КАК Ссылка,
			|	ТаблицаТовары.Номенклатура КАК Товар,
			|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
			|	ТаблицаТовары.Номенклатура.Код КАК Код,
			|	ТаблицаТовары.Номенклатура.Артикул КАК Артикул,
			|	ТаблицаТовары.Характеристика.НаименованиеПолное КАК ХарактеристикаНаименование,
			|	ТаблицаТовары.Характеристика КАК Характеристика,
			|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
			|	ВЫБОР
			|		КОГДА ТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА ПРЕДСТАВЛЕНИЕССЫЛКИ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения)
			|		ИНАЧЕ ПРЕДСТАВЛЕНИЕССЫЛКИ(ТаблицаТовары.Упаковка)
			|	КОНЕЦ КАК ПредставлениеЕдининицыИзмеренияУпаковки,
			|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
			|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
			|	ТаблицаТовары.Количество КАК Количество,
			|	ЛОЖЬ КАК НастройкаИспользованияСерий,
			|	ТаблицаТовары.НомерСтроки
			|ИЗ
			|	Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
			|ГДЕ
			|	ТаблицаТовары.Ссылка В(&МассивОбъектов)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Ссылка,
			|	ТаблицаТовары.НомерСтроки,
			|	Товар,
			|	Характеристика";

			ЗапросПоТоварам.Текст = ТекстЗапросаПоТоварам;
			ВыборкаПоТоварам = ЗапросПоТоварам.Выполнить().Выбрать();

		КонецЕсли;

		ПервыйДокумент = Истина;

		Для Каждого Шапка Из ИспользованиеСерий.Строки Цикл

			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			Если Не ПервыйДокумент ИЛИ (ПервыйДокумент И НЕ ПерваяСтрокаОбъектов) Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ПервыйДокумент = Ложь;

			// Выводим шапку накладной
			Если Шапка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров Тогда

				ОбластьЗаголовка  = ОбластьЗаголовкаПеремещение;

			Иначе //Шапка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами

				ОбластьЗаголовка = ОбластьЗаголовкаВнутренняяПередача;

			КонецЕсли;

			НазваниеДокумента = НСтр("ru = 'Накладная на перемещение';
			|en = 'Transfer note'", ОбщегоНазначения.КодОсновногоЯзыка());
			ОбластьЗаголовка.Параметры.ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(Шапка,
			НазваниеДокумента);
			ОбластьЗаголовка.Параметры.Заполнить(Шапка);
			ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьЗаголовка, Шапка.Ссылка);
			ТабличныйДокумент.Вывести(ОбластьЗаголовка);

			ТабличныйДокумент.Вывести(ОбластьНомераШапка);

			Если ВыводитьКоды Тогда
				ТабличныйДокумент.Присоединить(ОбластьКодовШапка);
			КонецЕсли;

			ТабличныйДокумент.Присоединить(ОбластьДанныхШапка);

			Если ИспользоватьУпаковкиНоменклатуры Тогда
				ТабличныйДокумент.Присоединить(ОбластьУпаковокШапка);
			КонецЕсли;

			ТабличныйДокумент.Присоединить(ОбластьКонецСтрокиШапка);

			// Выборка товаров

			НомерСтроки = 1;
			#Вставка
			//++ ЕсиповАВ Галфинд 09.06.2023
			СуммаИтогоМест       = 0;
			СуммаИтогоКоличество = 0;
			ОбластьКодКлиента = Макет.ПолучитьОбласть("Строка|КодКлиента");
			ОбластьКодКлиентаШапка = Макет.ПолучитьОбласть("ШапкаТаблицы|КодКлиента");
			ТабличныйДокумент.Присоединить(ОбластьКодКлиентаШапка);
			//-- ЕсиповАВ Галфинд 09.06.2023
			#КонецВставки

			Пока ВыборкаПоТоварам.НайтиСледующий(Новый Структура("Ссылка",Шапка.Ссылка)) Цикл

				ОбластьНомераСтрока.Параметры.НомерСтроки = НомерСтроки;
				ТабличныйДокумент.Вывести(ОбластьНомераСтрока);

				Если ВыводитьКоды Тогда
					ОбластьКодовСтрока.Параметры.Артикул = ВыборкаПоТоварам[ИмяКолонкиКодов];
					ТабличныйДокумент.Присоединить(ОбластьКодовСтрока);
				КонецЕсли;

				Если ВыборкаПоТоварам.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара Тогда

					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("Ссылка", ВыборкаПоТоварам.Ссылка);
					СтруктураПоиска.Вставить("НомерСтроки", ВыборкаПоТоварам.НомерСтроки);
					СтруктураПоиска.Вставить("Номенклатура", ВыборкаПоТоварам.Товар);
					СтруктураПоиска.Вставить("Характеристика", ВыборкаПоТоварам.Характеристика);

					СтрокаСерий = "";
					Пока ВыборкаПоСериям.НайтиСледующий(СтруктураПоиска) Цикл
						СтрокаСерий = СтрокаСерий + ВыборкаПоСериям.ПредставлениеСерии + ", ";
					КонецЦикла;

					Если СтрДлина(СтрокаСерий) <> 0 Тогда
						СтрокаСерий = Лев(СтрокаСерий, СтрДлина(СтрокаСерий) - 2);
					КонецЕсли;

				Иначе

					СтрокаСерий = ВыборкаПоТоварам.Серия;

				КонецЕсли;

				ДопПараметрыПредставлениеНоменклатуры = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
				ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();

				ОбластьДанныхСтрока.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				СокрЛП(ВыборкаПоТоварам.ТоварНаименование),
				СокрЛП(ВыборкаПоТоварам.ХарактеристикаНаименование),
				, // Упаковка
				СокрЛП(СтрокаСерий),
				ДопПараметрыПредставлениеНоменклатуры);

				ТабличныйДокумент.Присоединить(ОбластьДанныхСтрока);

				Если ИспользоватьУпаковкиНоменклатуры Тогда
					ОбластьУпаковокСтрока.Параметры.Заполнить(ВыборкаПоТоварам);
					ТабличныйДокумент.Присоединить(ОбластьУпаковокСтрока);
				КонецЕсли;

				ОбластьКонецСтрокиСтрока.Параметры.Заполнить(ВыборкаПоТоварам);
				ТабличныйДокумент.Присоединить(ОбластьКонецСтрокиСтрока);

				НомерСтроки = НомерСтроки + 1;
				#Вставка
				//++ ЕсиповАВ Галфинд 09.06.2023
				СуммаИтогоМест = СуммаИтогоМест + ВыборкаПоТоварам.Количество;
				СуммаИтогоКоличество = СуммаИтогоКоличество + ВыборкаПоТоварам.КоличествоУпаковок;
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	ПеремещениеТоваров.Ссылка КАК Ссылка,
				|	ПеремещениеТоваров.ПеревозчикПартнер КАК ПеревозчикПартнер
				|ИЗ
				|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
				|ГДЕ
				|	ПеремещениеТоваров.Ссылка = &Ссылка";
				Запрос.Параметры.Вставить("Ссылка", ВыборкаПоТоварам.Ссылка);
				ТабСсылка = Запрос.Выполнить().Выгрузить();
				ОбластьКодКлиента.Параметры.КодКлиента = ТабСсылка[0].ПеревозчикПартнер.Код;
				//ОбластьКонецСтрокиСтрока.Параметры.Заполнить(ТабСсылка[0].ПеревозчикПартнер.Код);
				ТабличныйДокумент.Присоединить(ОбластьКодКлиента);
				//ТабличныйДокумент.Вывести(ОбластьКодКлиента);
				//-- ЕсиповАВ Галфинд 09.06.2023
				#КонецВставки

			КонецЦикла;


			ТабличныйДокумент.Вывести(ОбластьНомераПодвал);

			Если ВыводитьКоды Тогда
				ТабличныйДокумент.Присоединить(ОбластьКодовПодвал);
			КонецЕсли;

			ТабличныйДокумент.Присоединить(ОбластьДанныхПодвал);

			Если ИспользоватьУпаковкиНоменклатуры Тогда
				ТабличныйДокумент.Присоединить(ОбластьУпаковокПодвал);
			КонецЕсли;

			ТабличныйДокумент.Присоединить(ОбластьКонецСтрокиПодвал);

			// Вывести подписи.
			#Вставка
			//++ ЕсиповАВ Галфинд 09.06.2023
			ОбластьПодписей.Параметры.ИтогоМест       = СуммаИтогоМест;
			ОбластьПодписей.Параметры.ИтогоКоличество = СуммаИтогоКоличество;
			ОбластьКодКлиентаПодвал = Макет.ПолучитьОбласть("Подвал|КодКлиента");
			ТабличныйДокумент.Присоединить(ОбластьКодКлиентаПодвал);
			//-- ЕсиповАВ Галфинд 09.06.2023
			#КонецВставки
			ТабличныйДокумент.Вывести(ОбластьПодписей);

			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);

		КонецЦикла;

		ПерваяСтрокаОбъектов = Ложь;

	КонецЦикла;

	ТабличныйДокумент.АвтоМасштаб = Истина;

	Возврат ТабличныйДокумент;

КонецФункции

#Область Печать

&После ("ДобавитьКомандыПечати")
Процедура гф_ДобавитьКомандыПечати(КомандыПечати)
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "гф_МастерДанныеПеремещениеHellmann";
	КомандаПечати.Представление = НСтр("ru = 'Мастер данные перемещение Hellmann';
	|en = 'Item code list Hellmann'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 10;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "гф_МастерДанныеПереупаковкаHellmann";
	КомандаПечати.Представление = НСтр("ru = 'Мастер данные переупаковка Hellmann';
	|en = 'Item code list Hellmann'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 10;
	
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "гф_ЗаявкаНаПриходПеремещениеHellmann";
	КомандаПечати.Представление = НСтр("ru = 'Заявка на приход перемещение Hellmann';
	|en = 'Item code list Hellmann'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 10;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "гф_ЗаявкаНаПриходПереупаковкаHellmann";
	КомандаПечати.Представление = НСтр("ru = 'Заявка на приход переупаковка Hellmann';
	|en = 'Item code list Hellmann'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 10;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "гф_ЗаявкаНаРасходПеремещениеHellmann";
	КомандаПечати.Представление = НСтр("ru = 'Заявка на расход перемещение Hellmann';
	|en = 'Item code list Hellmann'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 10;
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "гф_ЗаявкаНаРасходПереупаковкаHellmann";
	КомандаПечати.Представление = НСтр("ru = 'Заявка на расход переупаковка Hellmann';
	|en = 'Item code list Hellmann'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 10;
	
КонецПроцедуры

&После ("Печать")
Процедура гф_Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "гф_МастерДанныеПеремещениеHellmann") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"гф_МастерДанныеПеремещениеHellmann",
		НСтр("ru = 'Мастер данные перемещение Hellmann';
		|en = 'Item code list'"),
			гф_СформироватьПечатнуюФормуМастерДанныеПеремещениеHellmann(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.ПеремещениеТоваров.гф_МастерДанныеПеремещениеHellmann");
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "гф_МастерДанныеПереупаковкаHellmann") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"гф_МастерДанныеПереупаковкаHellmann",
		НСтр("ru = 'Мастер данные переупаковка Hellmann';
		|en = 'Item code list'"),
			гф_СформироватьПечатнуюФормуМастерДанныеПереупаковкаHellmann(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.ПеремещениеТоваров.гф_МастерДанныеПереупаковкаHellmann");
	КонецЕсли;
		
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "гф_ЗаявкаНаПриходПеремещениеHellmann") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"гф_ЗаявкаНаПриходПеремещениеHellmann",
		НСтр("ru = 'Заявка на приход перемещение Hellmann';
		|en = 'Item code list'"),
			гф_СформироватьПечатнуюФормуЗаявкаНаПриходПеремещениеHellmann(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.ПеремещениеТоваров.гф_ЗаявкаНаПриходПеремещениеHellmann");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "гф_ЗаявкаНаПриходПереупаковкаHellmann") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"гф_ЗаявкаНаПриходПереупаковкаHellmann",
		НСтр("ru = 'Заявка на приход переупаковка Hellmann';
		|en = 'Item code list'"),
			гф_СформироватьПечатнуюФормуЗаявкаНаПриходПереупаковкаHellmann(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.ПеремещениеТоваров.гф_ЗаявкаНаПриходПереупаковкаHellmann");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "гф_ЗаявкаНаРасходПеремещениеHellmann") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"гф_ЗаявкаНаРасходПеремещениеHellmann",
		НСтр("ru = 'Заявка на расход перемещение Hellmann';
		|en = 'Item code list'"),
			гф_СформироватьПечатнуюФормуЗаявкаНаРасходПеремещениеHellmann(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.ПеремещениеТоваров.гф_ЗаявкаНаРасходПеремещениеHellmann");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "гф_ЗаявкаНаРасходПереупаковкаHellmann") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"гф_ЗаявкаНаРасходПереупаковкаHellmann",
		НСтр("ru = 'Заявка на расход переупаковка Hellmann';
		|en = 'Item code list'"),
			гф_СформироватьПечатнуюФормуМастерДанныеПереупаковкаHellmann(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.ПеремещениеТоваров.гф_ЗаявкаНаРасходПереупаковкаHellmann");
	КонецЕсли;
	
КонецПроцедуры

Функция гф_СформироватьПечатнуюФормуМастерДанныеПереупаковкаHellmann(МассивОбъектов, ОбъектыПечати) Экспорт
	
	Перем КодНайден;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ДефектнаяВедомостьЗаявкаНаРемонт";
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		
		Если ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.ВнутреннееПотребление") Тогда
			Если ТипЗнч(ТекущийДокумент.Заказчик) = Тип("СправочникСсылка.Склады") Тогда
				КодКлиента = гф_ПолучитьКодКлиента(ТекущийДокумент.Заказчик, КодНайден);
			Иначе
				КодКлиента = "";
				КодНайден = Ложь;
			КонецЕсли;
			НомерПоставки = "";
		Иначе
			КодКлиента = гф_ПолучитьКодКлиента(ТекущийДокумент.СкладПолучатель, КодНайден);
			// Галфинд ВолковЕВ не понятно откуда брать номер поставки, из какого реквизита
			//НомерПоставки = ПолучитьНомерПоставкиИзПеремещения(ТекущийДокумент);
			НомерПоставки = Неопределено;
		КонецЕсли;
		
		НомерЗаявки = КодКлиента + "_"  + НомерПоставки + "-P_";
		
		запрос = новый Запрос(
		"ВЫБРАТЬ
		|	таб.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ таб
		|ИЗ
		|	&таб КАК таб
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	таб.Номенклатура КАК Номенклатура,
		|	свойствоДлина.Значение КАК Длина,
		|	свойствШирина.Значение КАК Ширина,
		|	свойствоВысота.Значение КАК Высота,
		|	(ВЫРАЗИТЬ(свойствВес.Значение КАК ЧИСЛО(17, 3))) / 1000 КАК Вес
		|ИЗ
		|	таб КАК таб
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК свойствоДлина
		|		ПО таб.Номенклатура = свойствоДлина.Объект
		|			И (свойствоДлина.Свойство = &длина)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК свойствШирина
		|		ПО таб.Номенклатура = свойствШирина.Объект
		|			И (свойствШирина.Свойство = &шинира)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК свойствоВысота
		|		ПО таб.Номенклатура = свойствоВысота.Объект
		|			И (свойствоВысота.Свойство = &высота)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК свойствВес
		|		ПО таб.Номенклатура = свойствВес.Объект
		|			И (свойствВес.Свойство = &вес)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура
		|АВТОУПОРЯДОЧИВАНИЕ");
		запрос.УстановитьПараметр("длина", Справочники.B2B_w_Настройки.Свойство_Carton_Length.Значение);
		запрос.УстановитьПараметр("шинира", Справочники.B2B_w_Настройки.Свойство_Carton_Width.Значение);
		запрос.УстановитьПараметр("высота", Справочники.B2B_w_Настройки.Свойство_Carton_Height.Значение);
		запрос.УстановитьПараметр("вес", Справочники.B2B_w_Настройки.Свойство_Carton_Weight.Значение);
		запрос.УстановитьПараметр("таб", ТекущийДокумент.Товары.Выгрузить(,"Номенклатура"));
		
		// Волков данные не понятно из какого регистра брать
		//выборка2 = запрос.Выполнить().Выбрать();
		// Волков
		
		//ТабличныйДокумент = Новый ТабличныйДокумент;
		//Цены
		ЗапросЦены = Новый Запрос;
		ЗапросЦены.Текст = 
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
		|	ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура.ЕдиницаИзмерения КАК НоменклатураЕдиницаИзмерения
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаДокумента, ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
		|ГДЕ
		|	ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦены";
		ЗапросЦены.УстановитьПараметр("ВидЦены", Справочники.ВидыЦен.НайтиПоНаименованию("Effective_purch_price_RU"));
		ЗапросЦены.УстановитьПараметр("ДатаДокумента", ТекущийДокумент.Дата);
		ТабЦен = ЗапросЦены.Выполнить().Выгрузить();
		
		//ТабличныйДокумент = Новый ТабличныйДокумент;
		
		//Если найти(ТекущийДокумент.СкладОтправитель.Наименование, "Основной") > 0
		//	или найти(ТекущийДокумент.СкладОтправитель.Наименование, "Свободн") > 0
		//	или найти(ТекущийДокумент.СкладОтправитель.Наименование, "Транзит") > 0 Тогда
		//	Макет = ПолучитьМакет("МастерДанные");
		//Иначе
		//	Макет = ПолучитьМакет("МастерДанныеНовый");
		//КонецЕсли;
		
		Если КодНайден Тогда
			Макет = ПолучитьМакет("гф_ПереупаковкаМастерДанныеНовый_10092019");
		Иначе
			Макет = ПолучитьМакет("гф_ПереупаковкаМастерДанные_10092019");
		КонецЕсли;
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Шапка");
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	товары.Номенклатура КАК Номенклатура,
		|	товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		// ++ Галфинд ВолковЕВ
		//|	товары.Коэффициент КАК Коэффициент,
		|	1 КАК Коэффициент,
		// -- Галфинд ВолковЕВ
		|	товары.Количество КАК Количество,
		// ++ Галфинд ВолковЕВ не понятно что за реквизиты использовать
		//|	ЕСТЬNULL(комплекты.Номенклатура, товары.Номенклатура) КАК Комплектующая,
		//|	комплекты.Количество КАК КоличествоКомплектующих
		|	товары.Номенклатура КАК Комплектующая,
		|	0 КАК КоличествоКомплектующих
		// -- Галфинд ВолковЕВ
		|ИЗ
		|	Документ.ПеремещениеТоваров.Товары КАК товары
		// ++ Галфинд ВолковЕВ
		//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КомплектацияНоменклатуры.Комплектующие КАК комплекты
		//|		ПО товары.Номенклатура = комплекты.Ссылка.Номенклатура
		
		//|			И товары.СерияНоменклатуры = комплекты.Ссылка.СерияНоменклатуры
		// -- Галфинд ВолковЕВ
		|ГДЕ
		|	товары.Ссылка = &СсылкаНаОбъект
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Комплектующая
		|АВТОУПОРЯДОЧИВАНИЕ");
		
		Если ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.ВнутреннееПотребление") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПеремещениеТоваров", "ВнутреннееПотребление");
			// ++ Галфинд ВолковЕВ
			//Запрос.Текст = СтрЗаменить(Запрос.Текст, "И товары.СерияНоменклатуры = комплекты.Ссылка.СерияНоменклатуры", "");
			// ++ Галфинд ВолковЕВ
		КонецЕсли;
		
		Запрос.УстановитьПараметр("СсылкаНаОбъект", ТекущийДокумент);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() цикл
			//Для каждого Стр из СсылкаНаОбъект.Товары цикл
			
			фыв = новый Структура("КодСклада, КодКлиента, Артикул, Описание, КороткоеОписание, ЕдИзм, ЕдИзмПары, Коэфф",
			"01", КодКлиента, Выборка.Комплектующая.Артикул, Выборка.Комплектующая.Наименование, Выборка.Комплектующая.Наименование, "упак", "пар", Выборка.Коэффициент);
			ОбластьСтрока.Параметры.Заполнить(фыв);
			
			//ОбластьСтрока.Параметры.КодСклада = "01";
			//ОбластьСтрока.Параметры.КодКлиента = КодКлиента;
			//ОбластьСтрока.Параметры.Артикул = Выборка.Комплектующая.Артикул;
			//ОбластьСтрока.Параметры.Описание = Выборка.Комплектующая.Наименование;
			//ОбластьСтрока.Параметры.ЕдИзм = "упак";
			//ОбластьСтрока.Параметры.ЕдИзмПары = "пар";
			//ОбластьСтрока.Параметры.Коэфф = Выборка.Коэффициент;
			
			Цена = "";
			МассивЦен = ТабЦен.НайтиСтроки(Новый Структура("Номенклатура",Выборка.Номенклатура));
			Для каждого Эл из МассивЦен цикл
				Цена = Эл.Цена / Выборка.Коэффициент;
			КонецЦикла;
			
			ОбластьСтрока.Параметры.Цена = СтрЗаменить(Цена, " ", "");
			
			ОбластьСтрока.Параметры.ШтрихКод = СокрЛП(Выборка.Комплектующая.Код); 
			
			//выборка2.НайтиСледующий(новый Структура("Номенклатура", Выборка.Номенклатура));
			//ОбластьСтрока.Параметры.Заполнить(выборка2);
			
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			
		КонецЦикла;
		
		ТабличныйДокумент.ОтображатьГруппировки = Ложь;
		ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
		ТабличныйДокумент.ОтображатьСетку = Ложь;
		
		ПрефиксМонокоробов = "";
		
		Если ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.ПеремещениеТоваров") и ТекущийДокумент.СкладПолучатель = Справочники.B2B_w_Настройки.СкладМонокороба.Значение
			или  ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.ВнутреннееПотребление") и ТипЗнч(ТекущийДокумент.Заказчик) = Тип("СправочникСсылка.Склады")
			и ТекущийДокумент.Заказчик = Справочники.B2B_w_Настройки.СкладМонокороба.Значение Тогда
			ПрефиксМонокоробов = "-M";
		КонецЕсли;
		
		//ИмяФайла = "item_import_wortmann_" + КодКлиента + "_"  + СокрЛП(ТекущийДокумент.Номер) + ПрефиксМонокоробов + "_"  + День(ТекущийДокумент.Дата) + "_" + Месяц(ТекущийДокумент.Дата) + "_" + Прав(Год(ТекущийДокумент.Дата),2)+".xls";
		
		//Сообщить("Имя файла МастерДанные: " + ИмяФайла);
		
		//Возврат ТабличныйДокумент;
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти
