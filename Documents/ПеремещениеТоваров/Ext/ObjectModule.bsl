#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

&Перед("ПередЗаписью")
Процедура гф_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// vvv Галфинд \ Sakovich 22.10.2022
	//иначе не изменить даже с помошью СДР
	Если Не ОбменДанными.Загрузка Тогда
	// ^^^ Галфинд \ Sakovich 22.10.2022 
		
		// #wortmann {
		// #5.2.08
		// ID запрет ручного изменения документа, при наличии свойства "ДокументОснование"
		// Галфинд Volkov 2022/08/23
		Если Не ЭтотОбъект.ДополнительныеСвойства.Свойство("ДокументОснование") И ЗначениеЗаполнено(ЭтотОбъект.ДокументОснование) Тогда
			Отказ = Истина;
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Данный документ не доступен для ручного изменения. Введен на основании %1.'"), ЭтотОбъект.ДокументОснование);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект.ДокументОснование, , , Отказ);
		КонецЕсли;
		// } #wortmann
		
	// vvv Галфинд \ Sakovich 22.10.2022	
	КонецЕсли;
	// ^^^ Галфинд \ Sakovich 22.10.2022 
	
	// #wortmann {
	// При проведении необходимо перезаполнять тч "гф_ШтрихкодыУпаковок"
	// но только в статусе "Принято"
	// Галфинд Sakovich 2022/10/22
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		гф_ЗаполнитьШтрихкодыУпаковок();
	КонецЕсли;
	// } #wortmann
	
КонецПроцедуры

&После("ОбработкаПроверкиЗаполнения")
Процедура гф_ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	// #wortmann {
	// если склад-отправитель коробной, то тч. ТоварыВКоробах должна быть заполнена
	// Галфинд Sakovich 2022/10/26
	ЭтоКоробнойСклад = УправлениеСвойствами.ЗначениеСвойства(СкладОтправитель, "гф_СкладыТоварыВКоробах") = Истина;
	Если ЭтоКоробнойСклад Тогда
		Если гф_ТоварыВКоробах.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнена табличная часть ""Товары в коробах""!.'"),
			ЭтотОбъект,
			"гф_ТоварыВКоробах",
			,
			Отказ);
		КонецЕсли;
	КонецЕсли;
	// } #wortmann
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Процедура гф_ЗаполнитьШтрихкодыУпаковок()
	
	Если Не Статус = Перечисления.СтатусыПеремещенийТоваров.Принято Тогда
		Возврат;
	КонецЕсли; 
	
	ДатаПроверкиОрдернойСхемы = ?(ЭтоНовый(), ТекущаяДатаСеанса(), Дата);
	
	СкладОтправительОрдерный = СкладыСервер.ИспользоватьОрдернуюСхемуПриОтгрузке(
		СкладОтправитель,
		ДатаПроверкиОрдернойСхемы);
	СкладПолучательОрдерный = СкладыСервер.ИспользоватьОрдернуюСхемуПриПоступлении(
		СкладПолучатель, 
		ДатаПроверкиОрдернойСхемы);
	
	Если СкладОтправительОрдерный И СкладПолучательОрдерный Тогда
		// 1. с_Ордерного_на_Ордерный
		// движения по рН "гф_ДвиженияКодовМаркировкиОрганиций" формируются приходными/расходными ордерами,
		// поэтому заполнение тч "гф_ШтрихкодыУпаковок" не производится
		Возврат;
	КонецЕсли;
	
	СкладОтправительВКоробах = УправлениеСвойствами.ЗначениеСвойства(СкладОтправитель, "гф_СкладыТоварыВКоробах");
	СкладПолучательВКоробах = УправлениеСвойствами.ЗначениеСвойства(СкладПолучатель, "гф_СкладыТоварыВКоробах");

	// 2. с_Ордерного_на_Виртуальный (УЛ из расходного ордера)
	// 	2а кор_кор (агрегаты)
	// 	2б кор_пар (пары)
	// 	2в пар_пар (пары)
	// 3. с_Виртуального_на_Ордерный (УЛ из приходного ордера)
	// 	3а кор_кор (агрегаты)
	// 	3б кор_пар (агрегаты
	// 	3в пар_пар (пары)
	// 4. с_Виртульного_на_Виртуальный (УЛ из тч гф_ТоварыВКоробах)
	// 	4а кор_кор (агрегаты)
	// 	4б кор_пар (агрегаты + пары)
	
	Если Не (СкладОтправительОрдерный ИЛИ СкладПолучательОрдерный) 
		И Не (СкладОтправительВКоробах ИЛИ СкладПолучательВКоробах) Тогда
		// 	4в пар_пар 
		// с_Виртульного_на_Виртуальный, при этом оба склада - НЕ коробочные.
		// В этом случае товаров в коробах нет
		Возврат;
	КонецЕсли;
	
	гф_ШтрихкодыУпаковок.Очистить();

	// выберем запросом и заполним Штриходы из УпЛистов, как агрегированные, так и вложенные в них,
	// а при проведении будем делать движения только по нужным типам Штрихкодов
	// см. гф_ОбработкаПроведения.ДвиженияКодовМаркировкиПеремещениеТоваров()
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УпЛисты.УпаковочныйЛист КАК УпЛист
	|ПОМЕСТИТЬ УпЛисты
	|ИЗ
	|	&ТоварыВКоробах КАК УпЛисты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Штрихкоды.Ссылка КАК ШтрихкодУпаковки
	|ИЗ
	|	УпЛисты КАК УпЛисты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК Штрихкоды
	|		ПО УпЛисты.УпЛист.Код = Штрихкоды.ЗначениеШтрихкода
	|ГДЕ
	|	Штрихкоды.Ссылка ЕСТЬ НЕ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВлШтрихкоды.Штрихкод
	|ИЗ
	|	УпЛисты КАК УпЛисты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ВлШтрихкоды
	|		ПО УпЛисты.УпЛист.Код = ВлШтрихкоды.Ссылка.ЗначениеШтрихкода
	|ГДЕ
	|	ВлШтрихкоды.Ссылка ЕСТЬ НЕ NULL ");	Запрос.УстановитьПараметр("ТоварыВКоробах", гф_ТоварыВКоробах);
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			нс = гф_ШтрихкодыУпаковок.Добавить();
			нс["ШтрихкодУпаковки"] = Выборка["ШтрихкодУпаковки"];
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли