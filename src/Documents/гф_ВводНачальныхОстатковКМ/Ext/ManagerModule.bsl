#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// Переопределяет параметры загрузки данных из файла.
//
// Параметры:
//  Параметры - Структура:
//   * ИмяМакетаСШаблоном - Строка - наименование макета. Например, "ЗагрузкаИзФайла".
//   * ИмяТабличнойЧасти - Строка - полное имя табличной части. Например, "Документ._ДемоСчетНаОплатуПокупателю.ТабличнаяЧасть.Товары"
//   * ОбязательныеКолонки - Массив из Строка - наименования обязательных для заполнения колонок.
//   * ТипДанныхКолонки - Соответствие из КлючИЗначение:
//      * Ключ - Строка - имя колонки;
//      * Значение - ОписаниеТипов - тип колонки загружаемых данных.
//   * ДополнительныеПараметры - Структура
//
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(Параметры) Экспорт
	
КонецПроцедуры

// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
// СписокНеоднозначностей содержит список неоднозначных значений, для которых в ИБ имеется несколько
// подходящих вариантов.
//
// Параметры:
//   АдресЗагружаемыхДанных    - Строка - адрес временного хранилища с таблицей значений, в которой
//                                        находятся загруженные данные из файла. Состав колонок:
//     * Идентификатор - Число - порядковый номер строки.
//       Остальные колонки соответствуют колонкам макета ЗагрузкаИзФайла.
//   АдресТаблицыСопоставления - Строка - адрес временного хранилища с пустой таблицей значений,
//                                        являющейся копией табличной части документа, 
//                                        которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//   СписокНеоднозначностей - ТаблицаЗначений - список неоднозначных значений:
//     * Колонка       - Строка - имя колонки, в которой была обнаружена неоднозначность.
//     * Идентификатор - Число - идентификатор строки, в которой была обнаружена неоднозначность.
//   ПолноеИмяТабличнойЧасти   - Строка - полное имя табличной части, в которую загружаются данные.
//   ДополнительныеПараметры   - Произвольный - любые дополнительные сведения.
//
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
	ШтрихкодыУпаковокТоваров = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления); // ТаблицаЗначений
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных); // ТаблицаЗначений
	Для каждого СтрТЗ Из ЗагружаемыеДанные Цикл
		нс = ШтрихкодыУпаковокТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(нс, СтрТЗ);
		НайтиДобавитьСтрануПроисхожденияНомерГТД(нс, СтрТЗ);
	КонецЦикла;
	ПоместитьВоВременноеХранилище(ШтрихкодыУпаковокТоваров, АдресТаблицыСопоставления);
КонецПроцедуры

// Возвращает список подходящих объектов ИБ для неоднозначного значения ячейки.
// 
// Параметры:
//   ПолноеИмяТабличнойЧасти   - Строка - полное имя табличной части, в которую загружаются данные.
//   СписокНеоднозначностей    - Массив из СправочникСсылка._ДемоНоменклатура - массив для заполнения с неоднозначными данными.
//   ИмяКолонки                - Строка - имя колонки, в который возникла неоднозначность.
//   ЗагружаемыеЗначенияСтрока - Строка - загружаемые данные на основании которых возникла неоднозначность.
//   ДополнительныеПараметры   - Произвольный - любые дополнительные сведения.
//
Процедура ЗаполнитьСписокНеоднозначностей(ПолноеИмяТабличнойЧасти, СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

Процедура НайтиДобавитьСтрануПроисхожденияНомерГТД(строкаТЧ, строкаЗагрузки)
	УстановитьПривилегированныйРежим(Истина);
	
	НомерГТД_строкой = СокрЛП(строкаЗагрузки["НомерГТД"]);
	СтранаПроисхождения_строкой = СокрЛП(строкаЗагрузки["СтранаПроисхождения"]);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НомераГТД.Ссылка КАК Ссылка,
	|	НомераГТД.Код КАК Код,
	|	НомераГТД.СтранаПроисхождения КАК СтранаПроисхождения
	|ПОМЕСТИТЬ втНомераГТД
	|ИЗ
	|	Справочник.НомераГТД КАК НомераГТД
	|ГДЕ
	|	НомераГТД.Код = &НомерГТД_строкой
	|	И НЕ НомераГТД.Код = """"
	|	И НЕ НомераГТД.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтраныМира.Ссылка КАК Ссылка,
	|	СтраныМира.Наименование КАК Наименование
	|ПОМЕСТИТЬ втСтраны
	|ИЗ
	|	Справочник.СтраныМира КАК СтраныМира
	|ГДЕ
	|	СтраныМира.Наименование = &СтранаПроисхождения_строкой
	|	И НЕ СтраныМира.Наименование = """"
	|	И НЕ СтраныМира.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	втНомераГТД.Ссылка КАК спрНомерГТД,
	|	втНомераГТД.СтранаПроисхождения КАК СтранаПроисхождения
	|ИЗ
	|	втСтраны КАК втСтраны
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНомераГТД КАК втНомераГТД
	|		ПО (втНомераГТД.СтранаПроисхождения = втСтраны.Ссылка)";
	
	Запрос.УстановитьПараметр("НомерГТД_строкой", НомерГТД_строкой);
	Запрос.УстановитьПараметр("СтранаПроисхождения_строкой", СтранаПроисхождения_строкой);
	
	ПакетРезультатов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	НомераГТД = ПакетРезультатов[0];
	СтраныМира = ПакетРезультатов[1];
	Декларация = ПакетРезультатов[2];
	
	Если НомераГТД.Пустой() Тогда
		ОбщегоНазначения.СообщитьПользователю(
		"Не найден элемент спр. ""Номера ГТД"" по номеру таможенной декларации " + НомерГТД_строкой);
	КонецЕсли;
	Если СтраныМира.Пустой() Тогда
		ОбщегоНазначения.СообщитьПользователю(
		"Не найден элемент спр. ""Страны мира"" по наименованию " + СтранаПроисхождения_строкой);
	КонецЕсли;
	Если Декларация.Пустой() Тогда
		Если Не СтраныМира.Пустой() И Не НомерГТД_строкой = "" Тогда
			ВыборкаСтраны = СтраныМира.Выбрать();
			ВыборкаСтраны.Следующий();
			строкаТч["СтранаПроисхождения"] = ВыборкаСтраны["Ссылка"];
			обГТД = справочники.НомераГТД.СоздатьЭлемент();
			обГТД["Код"] = НомерГТД_строкой;
			обГТД["РегистрационныйНомер"] = НомерГТД_строкой;
			обГТД["СтранаПроисхождения"] = ВыборкаСтраны["Ссылка"];
			обГТД["СтранаВвозаНеРФ"] = ВыборкаСтраны["Ссылка"] <> Справочники.СтраныМира.Россия;
			Попытка
				обГТД.Записать();
				строкаТЧ["спрНомерГТД"] = обГТД["Ссылка"];
				ОбщегоНазначения.СообщитьПользователю(
				"Записан новый элемент спр. ""Номера ГТД"" по номеру таможенной декларации " + 
				НомерГТД_строкой + " и стране происхождения " + СтранаПроисхождения_строкой);
			Исключение
				ОбщегоНазначения.СообщитьПользователю(
				"Не удалось записать элемент спр. ""Номера ГТД"" по номеру таможенной декларации " + 
				НомерГТД_строкой + " и стране происхождения " + СтранаПроисхождения_строкой);
			КонецПопытки;
		КонецЕсли;
	Иначе
		Выборка = Декларация.Выбрать();
		Выборка.Следующий();
		строкаТЧ["спрНомерГТД"] = Выборка["спрНомерГТД"];
		строкаТч["СтранаПроисхождения"] = Выборка["СтранаПроисхождения"];
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецЕсли