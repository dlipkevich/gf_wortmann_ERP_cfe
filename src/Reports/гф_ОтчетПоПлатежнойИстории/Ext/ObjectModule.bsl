#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция СведенияОВнешнейОбработке() Экспорт
	
	ИмяОтчета = ЭтотОбъект.Метаданные().Имя; 
    Синоним = ЭтотОбъект.Метаданные().Синоним; 
    РегистрационныеДанные = Новый Структура;
    РегистрационныеДанные.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет());
	РегистрационныеДанные.Вставить("Наименование", Синоним);
    РегистрационныеДанные.Вставить("Версия", "1.0");
    РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь);
    РегистрационныеДанные.Вставить("Информация", "Отчет "+Синоним);
    
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, Синоним, "СформироватьОтчет" , "ОткрытиеФормы", Истина, );
        
    // Сохраним таблицу команд в параметры регистрации обработки
    РегистрационныеДанные.Вставить("Команды", ТаблицаКоманд);
    
    Возврат РегистрационныеДанные;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()
    
    // Создадим пустую таблицу команд и колонки в ней
    Команды = Новый ТаблицаЗначений;

    // Как будет выглядеть описание печатной формы для пользователя
    Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

    // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
    Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

    // Тут задается, как должна вызваться команда обработки
    // Возможные варианты:
    // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
    // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
    // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
    Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

    // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
    Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

    // Для печатной формы должен содержать строку ПечатьMXL 
    Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
    Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование = "ОткрытиеФормы", ПоказыватьОповещение = Ложь, Модификатор)
    
    // Добавляем команду в таблицу команд по переданному описанию.
    // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
    НоваяКоманда = ТаблицаКоманд.Добавить();
    НоваяКоманда.Представление = Представление;
    НоваяКоманда.Идентификатор = Идентификатор;
    НоваяКоманда.Использование = Использование;
    НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
    НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры


Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	// Вставить содержимое обработчика.
КонецПроцедуры

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)  
	
	СтандартнаяОбработка=Ложь; 
	
	ПараметрыДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных; 
	НастройкиПериода=КомпоновщикНастроек.ПолучитьНастройки().ПараметрыДанных;
	Период = НастройкиПериода.Элементы.Найти("Период");
	ПараметрыДанных.УстановитьЗначениеПараметра("ДатаОкончания", Период.Значение.ДатаОкончания);
	
	// вывод первой таблицы
	
	Компоновщик = новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = Компоновщик.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки);
	ПроцессорКомпоновки = новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки);
	ПроцессорВывода = новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;                
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	// вывод второй таблицы
	
	Компоновщик = новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = Компоновщик.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(),);
	ПроцессорКомпоновки = новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,, );
	МакетКомпоновки = Компоновщик.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(),,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	таб = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	запрос = новый Запрос(
	"ВЫБРАТЬ
	|	а.ДатаДок КАК ДатаДок,
	|	а.Договор КАК Договор,
	|	а.Документ КАК Документ,
	|	а.Партнер КАК Партнер,
	|	ЕСТЬNULL(а.ОборотДт, 0) КАК ОборотДт,
	|	ЕСТЬNULL(а.ОборотКт, 0) КАК ОборотКт,
	|	а.Организация КАК Организация,
	|	ЕСТЬNULL(а.ЧислоДнейЗадолженности, 0) КАК ЧислоДнейЗадолженности,
	|	а.ДатаКор КАК ДатаКор,
	|	а.ДатаМин КАК ДатаМин,
	|	ЕСТЬNULL(а.Сальдо, 0) КАК Сальдо,
	|	ЕСТЬNULL(а.КоличествоДней, 0) КАК КоличествоДней,
	|	ЕСТЬNULL(а.СальдоКД, 0) КАК СальдоКД
	|ПОМЕСТИТЬ таб
	|ИЗ
	|	&таб КАК а
	|ГДЕ
	|	а.ДатаМин МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И а.ДатаКор <= &ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(а.ОборотДт) КАК SalesTotal,
	|	СРЕДНЕЕ(а.Сальдо) КАК SaldoAverage,
	|	МИНИМУМ(а.Сальдо) КАК SaldoMin,
	|	ВЫБОР
	|		КОГДА СУММА(а.КоличествоДней) = 0
	|			ТОГДА 0
	|		ИНАЧЕ СУММА(а.СальдоКД) / СУММА(а.КоличествоДней)
	|	КОНЕЦ КАК SaldoWeightedAverage,
	|	ВЫБОР
	|		КОГДА СУММА(а.ОборотДт) = 0
	|			ТОГДА 0
	|		ИНАЧЕ 100 * СРЕДНЕЕ(а.Сальдо) / СУММА(а.ОборотДт)
	|	КОНЕЦ КАК PaymentRateAverage,
	|	ВЫБОР
	|		КОГДА СУММА(а.ОборотДт) = 0
	|			ТОГДА 0
	|		ИНАЧЕ 100 * МИНИМУМ(а.Сальдо) / СУММА(а.ОборотДт)
	|	КОНЕЦ КАК PaymentRateMin,
	|	ВЫБОР
	|		КОГДА СУММА(а.КоличествоДней) = 0
	|				ИЛИ СУММА(а.ОборотДт) = 0
	|			ТОГДА 0
	|		ИНАЧЕ 100 * СУММА(а.СальдоКД) / СУММА(а.КоличествоДней) / СУММА(а.ОборотДт)
	|	КОНЕЦ КАК PaymentRateWeightedAverage
	|ИЗ
	|	таб КАК а");
	
	запрос.УстановитьПараметр("ДатаНачала", Период.Значение.ДатаНачала);
	запрос.УстановитьПараметр("ДатаОкончания", Период.Значение.ДатаОкончания);
	запрос.УстановитьПараметр("таб", таб);
	
	выборка = запрос.Выполнить().Выбрать();
	
	Макет = ПолучитьМакет("Макет");
	область = макет.ПолучитьОбласть("таблица");
	
	Пока выборка.Следующий() Цикл
		область.Параметры.Заполнить(выборка);
	КонецЦикла;
	
	ДокументРезультат.Вывести(область);
КонецПроцедуры  
#КонецОбласти
#КонецЕсли