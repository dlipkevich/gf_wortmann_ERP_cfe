Функция СведенияОВнешнейОбработке() Экспорт
    
    ИмяОтчета = ЭтотОбъект.Метаданные().Имя; 
    Синоним = ЭтотОбъект.Метаданные().Синоним; 
    Синоним = ?(ЗначениеЗаполнено(Синоним),Синоним, ИмяОтчета);         
    РегистрационныеДанные = Новый Структура;
    РегистрационныеДанные.Вставить("Вид","ДополнительныйОтчет"); //может быть – ПечатнаяФорма, ЗаполнениеОбъекта (для вн.обработки), ДополнительныйОтчет, СозданиеСвязанныхОбъектов… 
    РегистрационныеДанные.Вставить("Наименование", Синоним); //имя под которым обработка будет зарегестрирована в справочнике внешних обработок
    РегистрационныеДанные.Вставить("Версия", "1.0");
    РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь);
    РегистрационныеДанные.Вставить("Информация", "Отчет "+Синоним); //так будет выглядеть описание вн.отчета для пользователя
    
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, Синоним, "СформироватьОтчет" , "ОткрытиеФормы", Истина, );
        
    // Сохраним таблицу команд в параметры регистрации обработки
    РегистрационныеДанные.Вставить("Команды", ТаблицаКоманд);
    
    Возврат РегистрационныеДанные;
                                       
КонецФункции

Функция ПолучитьТаблицуКоманд()
    
    // Создадим пустую таблицу команд и колонки в ней
    Команды = Новый ТаблицаЗначений;

    // Как будет выглядеть описание печатной формы для пользователя
    Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

    // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
    Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

    // Тут задается, как должна вызваться команда обработки
    // Возможные варианты:
    // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
    // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
    // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
    Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

    // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
    Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

    // Для печатной формы должен содержать строку ПечатьMXL 
    Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
    Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование = "ОткрытиеФормы", ПоказыватьОповещение = Ложь, Модификатор = "ПечатьMXL")
    
    // Добавляем команду в таблицу команд по переданному описанию.
    // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
    НоваяКоманда = ТаблицаКоманд.Добавить();
    НоваяКоманда.Представление = Представление;
    НоваяКоманда.Идентификатор = Идентификатор;
    НоваяКоманда.Использование = Использование;
    НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
    НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры 

Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
    Настройки.События.ПриСозданииНаСервере = Истина;        
КонецПроцедуры


Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт

	ТвояКоманда = Форма.Команды.Добавить("СформироватьСтрокиПеревода");              
	ТвояКоманда.Действие  = "СформироватьСтрокиПеревода1";
	//ТвояКоманда.Действие  = "ВариантыОтчетовПереопределяемый.Хопа";
	ТвояКоманда.заголовок = "Сформировать строки перевода";
	Форма.ПостоянныеКоманды.Добавить(ТвояКоманда.Имя);
	        
	ТвояКнопка= Форма.Элементы.Добавить("СформироватьСтрокиПеревода", Тип("КнопкаФормы"), Форма.Элементы.ГруппаПрограммныйИнтерфейс);
	ТвояКнопка.ИмяКоманды = "СформироватьСтрокиПеревода";
	ТвояКнопка.ТолькоВоВсехДействиях = Ложь;

КонецПроцедуры      


// #wortmann {
// #2.3.09
// Добавление процедуры для кнопки "Сформировать строки перевода"
// XYZ Юрий 2022/09/20
&НаКлиенте
Процедура СформироватьСтрокиПеревода1(Команда) Экспорт
	
	П = Новый Структура;
	П.Вставить("МассивНоменклатур", МассивНоменклатур());
	П.Вставить("ЯзыкПеревода", ПредопределенноеЗначение("Справочник.гф_ВидыЯзыков.Russian"));
	П.Вставить("ТолькоБезПеревода", ИСТИНА);
	
	Если МассивНоменклатур() <> Неопределено Тогда
		ОткрытьФорму("Обработка.гф_ДиспетчерПереводов.Форма.ФормаПереводаОбъектов", П, ЭтаФорма);
	Иначе
		Сообщить("Нет выбранных документов!");
	КонецЕсли;
		
КонецПроцедуры // } #wortmann

// #wortmann {
// #2.3.09
// Для кнопки "Сформировать строки перевода"
// XYZ Юрий 2022/09/20
&НаСервере
Функция МассивНоменклатур()
	
	мТовары = Новый Массив;  
	кеш = новый Соответствие;
	
	ТаблицаПсевдонимовСвойств = Новый ТаблицаЗначений;
	ТаблицаПсевдонимовСвойств.Колонки.Добавить("Свойство");
	ТаблицаПсевдонимовСвойств.Колонки.Добавить("Представление");
	
	НовСтр = ТаблицаПсевдонимовСвойств.Добавить();
	НовСтр.Свойство = "Color_Name";        
	НовСтр.Представление = "Цвет";

	НовСтр = ТаблицаПсевдонимовСвойств.Добавить();
	НовСтр.Свойство = "Material lining";
	НовСтр.Представление = "МатериалПодкладки";

	НовСтр = ТаблицаПсевдонимовСвойств.Добавить();
	НовСтр.Свойство = "Material surface";
	НовСтр.Представление = "МатериалВерха";

	НовСтр = ТаблицаПсевдонимовСвойств.Добавить();
	НовСтр.Свойство = "Material bottom";
	НовСтр.Представление = "МатериалНиза";

	НовСтр = ТаблицаПсевдонимовСвойств.Добавить();
	НовСтр.Свойство = "Brand_name";
	НовСтр.Представление = "Марка";
	
	//Организация = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Организация").Значение;
	
	ПолеНоменклатура = Новый ПолеКомпоновкиДанных("Ссылка");
	Нашли = Ложь;
	Для каждого строка Из КомпоновщикНастроек.Настройки.Выбор.Элементы Цикл
		Если строка.Поле = ПолеНоменклатура Тогда
			Нашли = Истина;
		КонецЕсли;
	КонецЦикла;
	Если не Нашли Тогда
		поле = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		поле.Поле = ПолеНоменклатура;
	КонецЕсли;
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;   
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");  
	ДанныеРасшифровки=новый ДанныеРасшифровкиКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")); 
	
	//Создадим и инициализируем процессор компоновки 
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных; 
	//ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки, Истина); 
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки); 
	
	таб = новый ТаблицаЗначений;
	//Создадим и инициализируем процессор вывода результата 
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.ОтображатьПроцентВывода = Истина;
	ПроцессорВывода.УстановитьОбъект(таб);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	НетПереводов = новый Массив;
	СвойстваДляПеревода = новый Массив;    
	Выб = ПланыВидовХарактеристик.гф_ГлобальныеЗначения.НайтиПоНаименованию("Свойства с переводом");
	Для Каждого ЗначениеТЧ из Выб.Список Цикл
		СвойстваДляПеревода.Добавить(ЗначениеТЧ.Значение.Наименование);
	КонецЦикла;  
	
	прогресс = 0;
	НомерСтроки = 0;
	Размер = таб.Количество();     
	ЗанеслиСвойств = 0;
	Для каждого строка Из таб Цикл
		//ОбработкаПрерыванияПользователя();
//		//НомерСтроки = НомерСтроки + 1;
//		//Если прогресс < Окр(НомерСтроки/Размер, 4) Тогда
//		//	прогресс = Окр(НомерСтроки/Размер, 4);
//		//	Состояние("" + (прогресс*100) + "%");
//		//КонецЕсли;
//		
		ИскатьПереводы = ИскатьПереводы(строка.Ссылка);
		Если не ИскатьПереводы Тогда
			Продолжить;
		КонецЕсли;  
		
		мТовары.Добавить(строка.Ссылка);
//		
		Для каждого Колонка Из таб.Колонки Цикл
			
			ИщемПсевдоним = ТаблицаПсевдонимовСвойств.Найти(Колонка.Имя,"Представление");
			Если ИщемПсевдоним = Неопределено Тогда
				Псевдоним = Колонка.Имя;
			Иначе
			    Псевдоним = ИщемПсевдоним.Свойство;
			КонецЕсли;
			
			Если СвойстваДляПеревода.Найти(Псевдоним) <> Неопределено Тогда      
				
				Если СокрЛП(строка[Колонка.Имя]) = "" Тогда
					Продолжить;
				КонецЕсли;
				//Сообщить("Свойство: "+Колонка.Имя+"; Значение: "+строка[Колонка.Имя]); 
				
				//теперь посмотрим, может значение уже добавлено в регистр перевода
				Запр = Новый Запрос;
				Запр.Текст = "ВЫБРАТЬ
				             |	гф_ПереводЗначенийРеквизитовИСвойств.Объект КАК Объект
				             |ИЗ
				             |	РегистрСведений.гф_ПереводЗначенийРеквизитовИСвойств КАК гф_ПереводЗначенийРеквизитовИСвойств
				             |ГДЕ
				             |	гф_ПереводЗначенийРеквизитовИСвойств.Объект = &Объект
				             |	И гф_ПереводЗначенийРеквизитовИСвойств.Язык = &Язык";
				Запр.УстановитьПараметр("Объект",строка[Колонка.Имя]);
				Запр.УстановитьПараметр("Язык",ПредопределенноеЗначение("Справочник.гф_ВидыЯзыков.Russian"));
				Рез = Запр.Выполнить();
				Если рез.Пустой() Тогда
					
					мТовары.Добавить(строка[Колонка.Имя]);
					
					//Регсв = РегистрыСведений.гф_ПереводЗначенийРеквизитовИСвойств.СоздатьМенеджерЗаписи();
					//регсв.Объект = строка[Колонка.Имя];
					//регсв.Язык = ЯзыкДляПереводов;
					//регсв.Записать(Истина); 
					//ЗанеслиСвойств = ЗанеслиСвойств + 1;
					//Сообщить("Добавили в регистр перевода: свойство: "+Колонка.Имя+"; Значение: "+строка[Колонка.Имя]);
				КонецЕсли;
					
				
				
			//Иначе                     
			//	Сообщить("Имя колонки: "+Колонка.Имя+", Псевдоним: "+Псевдоним,СтатусСообщения.Важное);
			//	Сообщить("Свойство: "+Псевдоним+"; Значение: "+строка[Колонка.Имя],СтатусСообщения.Важное);
			КонецЕсли;
			//Если НадоПереводить(НРег(Колонка.Имя)) и ПолучитьПеревод(строка[Колонка.Имя], Строка.Номенклатура, Строка.ДатаЗагрузкиi5, кеш, ЯзыкДляПереводов) = "" Тогда
			//	НетПереводов.Добавить(строка[Колонка.Имя]);
			//КонецЕсли;
		КонецЦикла;
	//	Сообщить("______________________");
	КонецЦикла;	
	
	//ПомеченныеДокументы = Отчет.ТаблицаДокументы.Выгрузить(Новый Структура("Пометка", Истина));
	//
	//Если ПомеченныеДокументы.Количество() = 0 тогда	
	//	Возврат Неопределено;
	//КонецЕсли;
	//
	//Для каждого Док Из ПомеченныеДокументы.ВыгрузитьКолонку("Документ")  Цикл
	//
	//	Для каждого Товар Из Док.Товары Цикл
	//		
	//	    Если ИскатьПереводы(Товар.Номенклатура) Тогда
	//			мТовары.Добавить(Товар.Номенклатура);	
	//		КонецЕсли;
	//		
	//	КонецЦикла;	
	//
	//КонецЦикла;
	
	Возврат мТовары;

КонецФункции // } #wortmann

// #wortmann {
// #2.3.09
// Для кнопки "Сформировать строки перевода"
// XYZ Юрий 2022/09/20
&НаСервере
Функция ИскатьПереводы(Номенклатура)
	
	Запрос = новый Запрос(
	"ВЫБРАТЬ
	|	а.Объект КАК Объект,
	|	а.Свойство КАК Свойство,
	|	а.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК а
	|ГДЕ
	|	а.Объект = &Объект
	|	И а.Свойство = &Свойство");
	Запрос.УстановитьПараметр("Объект", Номенклатура);
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("имя", "гф_НоменклатураДатаОбновленияНоменклатурыИзI5"));
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Следующий();
	
КонецФункции // } #wortmann 

