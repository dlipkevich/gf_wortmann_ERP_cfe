
//&НаСервере
//Процедура СформироватьСтрокиПереводаНаСервере()
//	
//	кеш = новый Соответствие;
//	
//	ЯзыкДляПереводов = Справочники.гф_ВидыЯзыков.НацКаталог;
//	Если не ЗначениеЗаполнено(ЯзыкДляПереводов) Тогда
//		ЯзыкДляПереводов = Справочники.гф_ВидыЯзыков.Russian;
//	КонецЕсли;         
//	
//	ТаблицаПсевдонимовСвойств = Новый ТаблицаЗначений;
//	ТаблицаПсевдонимовСвойств.Колонки.Добавить("Свойство");
//	ТаблицаПсевдонимовСвойств.Колонки.Добавить("Представление");
//	
//	НовСтр = ТаблицаПсевдонимовСвойств.Добавить();
//	НовСтр.Свойство = "Color_Name";        
//	НовСтр.Представление = "Цвет";

//	НовСтр = ТаблицаПсевдонимовСвойств.Добавить();
//	НовСтр.Свойство = "Material lining";
//	НовСтр.Представление = "МатериалПодкладки";

//	НовСтр = ТаблицаПсевдонимовСвойств.Добавить();
//	НовСтр.Свойство = "Material surface";
//	НовСтр.Представление = "МатериалВерха";

//	НовСтр = ТаблицаПсевдонимовСвойств.Добавить();
//	НовСтр.Свойство = "Material bottom";
//	НовСтр.Представление = "МатериалНиза";

//	НовСтр = ТаблицаПсевдонимовСвойств.Добавить();
//	НовСтр.Свойство = "Brand_name";
//	НовСтр.Представление = "Марка";
//	
//	//Организация = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Организация").Значение;
//	
//	ПолеНоменклатура = Новый ПолеКомпоновкиДанных("Номенклатура");
//	Нашли = Ложь;
//	Для каждого строка Из Отчет.КомпоновщикНастроек.Настройки.Выбор.Элементы Цикл
//		Если строка.Поле = ПолеНоменклатура Тогда
//			Нашли = Истина;
//		КонецЕсли;
//	КонецЦикла;
//	Если не Нашли Тогда
//		поле = Отчет.КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
//		поле.Поле = ПолеНоменклатура;
//	КонецЕсли;
//	
//	НастройкиОтчета = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
//	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;   
//	СхемаКомпоновкиДанных = РеквизитФормыВЗначение("Отчет").ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
//	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")); 
//	
//	//Создадим и инициализируем процессор компоновки 
//	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных; 
//	//ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки, Истина); 
//	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки); 
//	
//	таб = новый ТаблицаЗначений;
//	//Создадим и инициализируем процессор вывода результата 
//	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
//	ПроцессорВывода.ОтображатьПроцентВывода = Истина;
//	ПроцессорВывода.УстановитьОбъект(таб);
//	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
//	
//	НетПереводов = новый Массив;
//	СвойстваДляПеревода = новый Массив;    
//	Выб = ПланыВидовХарактеристик.гф_ГлобальныеЗначения.НайтиПоНаименованию("Свойства с переводом");
//	Для Каждого ЗначениеТЧ из Выб.Список Цикл
//		//выборка = Справочники.w_Настройки.Выбрать(Справочники.w_Настройки.СвойстваДляПеревода);
//	//Пока выборка.Следующий() Цикл
//	//	Если не выборка.ПометкаУдаления Тогда
//		//Сообщить(ЗначениеТЧ.Значение.Наименование);	
//		СвойстваДляПеревода.Добавить(ЗначениеТЧ.Значение.Наименование);
//	//	КонецЕсли;
//	КонецЦикла;  
//	//Сообщить("=====================");

//	
//	прогресс = 0;
//	НомерСтроки = 0;
//	Размер = таб.Количество();     
//	ЗанеслиСвойств = 0;
//	Для каждого строка Из таб Цикл
//		//ОбработкаПрерыванияПользователя();
//		//НомерСтроки = НомерСтроки + 1;
//		//Если прогресс < Окр(НомерСтроки/Размер, 4) Тогда
//		//	прогресс = Окр(НомерСтроки/Размер, 4);
//		//	Состояние("" + (прогресс*100) + "%");
//		//КонецЕсли;
//		
//		//ИскатьПереводы = ИскатьПереводы(строка.Номенклатура);
//		//Если не ИскатьПереводы Тогда
//		//	Продолжить;
//		//КонецЕсли;
//		
//		Для каждого Колонка Из таб.Колонки Цикл
//			
//			ИщемПсевдоним = ТаблицаПсевдонимовСвойств.Найти(Колонка.Имя,"Представление");
//			Если ИщемПсевдоним = Неопределено Тогда
//				Псевдоним = Колонка.Имя;
//			Иначе
//			    Псевдоним = ИщемПсевдоним.Свойство;
//			КонецЕсли;
//			
//			Если СвойстваДляПеревода.Найти(Псевдоним) <> Неопределено Тогда      
//				
//				Если СокрЛП(строка[Колонка.Имя]) = "" Тогда
//					Продолжить;
//				КонецЕсли;
//				//Сообщить("Свойство: "+Колонка.Имя+"; Значение: "+строка[Колонка.Имя]); 
//				
//				//теперь посмотрим, может значение уже добавлено в регистр перевода
//				Запр = Новый Запрос;
//				Запр.Текст = "ВЫБРАТЬ
//				             |	гф_ПереводЗначенийРеквизитовИСвойств.Объект КАК Объект
//				             |ИЗ
//				             |	РегистрСведений.гф_ПереводЗначенийРеквизитовИСвойств КАК гф_ПереводЗначенийРеквизитовИСвойств
//				             |ГДЕ
//				             |	гф_ПереводЗначенийРеквизитовИСвойств.Объект = &Объект
//				             |	И гф_ПереводЗначенийРеквизитовИСвойств.Язык = &Язык";
//				Запр.УстановитьПараметр("Объект",строка[Колонка.Имя]);
//				Запр.УстановитьПараметр("Язык",ЯзыкДляПереводов);
//				Рез = Запр.Выполнить();
//				Если рез.Пустой() Тогда
//					Регсв = РегистрыСведений.гф_ПереводЗначенийРеквизитовИСвойств.СоздатьМенеджерЗаписи();
//					регсв.Объект = строка[Колонка.Имя];
//					регсв.Язык = ЯзыкДляПереводов;
//					регсв.Записать(Истина); 
//					ЗанеслиСвойств = ЗанеслиСвойств + 1;
//					Сообщить("Добавили в регистр перевода: свойство: "+Колонка.Имя+"; Значение: "+строка[Колонка.Имя]);
//				КонецЕсли;
//					
//				
//				
//			//Иначе                     
//			//	Сообщить("Имя колонки: "+Колонка.Имя+", Псевдоним: "+Псевдоним,СтатусСообщения.Важное);
//			//	Сообщить("Свойство: "+Псевдоним+"; Значение: "+строка[Колонка.Имя],СтатусСообщения.Важное);
//			КонецЕсли;
//			//Если НадоПереводить(НРег(Колонка.Имя)) и ПолучитьПеревод(строка[Колонка.Имя], Строка.Номенклатура, Строка.ДатаЗагрузкиi5, кеш, ЯзыкДляПереводов) = "" Тогда
//			//	НетПереводов.Добавить(строка[Колонка.Имя]);
//			//КонецЕсли;
//		КонецЦикла;
//	//	Сообщить("______________________");
//	КонецЦикла;     	
//	Если ЗанеслиСвойств = 0 Тогда
//		Сообщить("Новых значений для перевода нет");
//	Иначе
//		Сообщить("Добавили в регистр перевода "+ЗанеслиСвойств+" значений");
//	КонецЕсли;

//	
//	//Если НетПереводов.Количество() > 0 Тогда
//	//	Переводчик.ИнициализироватьСписокОбъектовДляПеревода();
//	//	Для каждого строка Из НетПереводов Цикл
//	//		Переводчик.ДобавитьОбъектДляПеревода(строка);
//	//	КонецЦикла;
//	//	Переводчик.ПроверитьДобавитьПереводОбъектов(, Справочники.RC_Язык.Russian,, Ложь, Истина);
//	//КонецЕсли;
//КонецПроцедуры

//&НаКлиенте
//Процедура СформироватьСтрокиПеревода(Команда)
//	СформироватьСтрокиПереводаНаСервере();
//КонецПроцедуры



// #wortmann {
// #2.3.09
// Добавление процедуры для кнопки "Сформировать строки перевода"
// XYZ Юрий 2022/09/20
&НаКлиенте
Процедура СформироватьСтрокиПеревода(Команда)
	
	П = Новый Структура;
	П.Вставить("МассивНоменклатур", МассивНоменклатур());
	П.Вставить("ЯзыкПеревода", ПредопределенноеЗначение("Справочник.гф_ВидыЯзыков.Russian"));
	П.Вставить("ТолькоБезПеревода", ИСТИНА);
	
	Если МассивНоменклатур() <> Неопределено Тогда
		ОткрытьФорму("Обработка.гф_ДиспетчерПереводов.Форма.ФормаПереводаОбъектов", П, ЭтаФорма);
	Иначе
		Сообщить("Нет выбранных документов!");
	КонецЕсли;
		
КонецПроцедуры // } #wortmann

// #wortmann {
// #2.3.09
// Для кнопки "Сформировать строки перевода"
// XYZ Юрий 2022/09/20
&НаСервере
Функция МассивНоменклатур()
	
	мТовары = Новый Массив;  
	кеш = новый Соответствие;
	
	ТаблицаПсевдонимовСвойств = Новый ТаблицаЗначений;
	ТаблицаПсевдонимовСвойств.Колонки.Добавить("Свойство");
	ТаблицаПсевдонимовСвойств.Колонки.Добавить("Представление");
	
	НовСтр = ТаблицаПсевдонимовСвойств.Добавить();
	НовСтр.Свойство = "Color_Name";        
	НовСтр.Представление = "Цвет";

	НовСтр = ТаблицаПсевдонимовСвойств.Добавить();
	НовСтр.Свойство = "Material lining";
	НовСтр.Представление = "МатериалПодкладки";

	НовСтр = ТаблицаПсевдонимовСвойств.Добавить();
	НовСтр.Свойство = "Material surface";
	НовСтр.Представление = "МатериалВерха";

	НовСтр = ТаблицаПсевдонимовСвойств.Добавить();
	НовСтр.Свойство = "Material bottom";
	НовСтр.Представление = "МатериалНиза";

	НовСтр = ТаблицаПсевдонимовСвойств.Добавить();
	НовСтр.Свойство = "Brand_name";
	НовСтр.Представление = "Марка";
	
	//Организация = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Организация").Значение;
	
	ПолеНоменклатура = Новый ПолеКомпоновкиДанных("Ссылка");
	Нашли = Ложь;
	Для каждого строка Из Отчет.КомпоновщикНастроек.Настройки.Выбор.Элементы Цикл
		Если строка.Поле = ПолеНоменклатура Тогда
			Нашли = Истина;
		КонецЕсли;
	КонецЦикла;
	Если не Нашли Тогда
		поле = Отчет.КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		поле.Поле = ПолеНоменклатура;
	КонецЕсли;
	
	НастройкиОтчета = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;   
	СхемаКомпоновкиДанных = РеквизитФормыВЗначение("Отчет").ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")); 
	
	//Создадим и инициализируем процессор компоновки 
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных; 
	//ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки, Истина); 
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки); 
	
	таб = новый ТаблицаЗначений;
	//Создадим и инициализируем процессор вывода результата 
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.ОтображатьПроцентВывода = Истина;
	ПроцессорВывода.УстановитьОбъект(таб);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	НетПереводов = новый Массив;
	СвойстваДляПеревода = новый Массив;    
	Выб = ПланыВидовХарактеристик.гф_ГлобальныеЗначения.НайтиПоНаименованию("Свойства с переводом");
	Для Каждого ЗначениеТЧ из Выб.Список Цикл
		СвойстваДляПеревода.Добавить(ЗначениеТЧ.Значение.Наименование);
	КонецЦикла;  
	
	прогресс = 0;
	НомерСтроки = 0;
	Размер = таб.Количество();     
	ЗанеслиСвойств = 0;
	Для каждого строка Из таб Цикл
		//ОбработкаПрерыванияПользователя();
//		//НомерСтроки = НомерСтроки + 1;
//		//Если прогресс < Окр(НомерСтроки/Размер, 4) Тогда
//		//	прогресс = Окр(НомерСтроки/Размер, 4);
//		//	Состояние("" + (прогресс*100) + "%");
//		//КонецЕсли;
//		
		ИскатьПереводы = ИскатьПереводы(строка.Ссылка);
		Если не ИскатьПереводы Тогда
			Продолжить;
		КонецЕсли;  
		
		мТовары.Добавить(строка.Ссылка);
//		
		Для каждого Колонка Из таб.Колонки Цикл
			
			ИщемПсевдоним = ТаблицаПсевдонимовСвойств.Найти(Колонка.Имя,"Представление");
			Если ИщемПсевдоним = Неопределено Тогда
				Псевдоним = Колонка.Имя;
			Иначе
			    Псевдоним = ИщемПсевдоним.Свойство;
			КонецЕсли;
			
			Если СвойстваДляПеревода.Найти(Псевдоним) <> Неопределено Тогда      
				
				Если СокрЛП(строка[Колонка.Имя]) = "" Тогда
					Продолжить;
				КонецЕсли;
				//Сообщить("Свойство: "+Колонка.Имя+"; Значение: "+строка[Колонка.Имя]); 
				
				//теперь посмотрим, может значение уже добавлено в регистр перевода
				Запр = Новый Запрос;
				Запр.Текст = "ВЫБРАТЬ
				             |	гф_ПереводЗначенийРеквизитовИСвойств.Объект КАК Объект
				             |ИЗ
				             |	РегистрСведений.гф_ПереводЗначенийРеквизитовИСвойств КАК гф_ПереводЗначенийРеквизитовИСвойств
				             |ГДЕ
				             |	гф_ПереводЗначенийРеквизитовИСвойств.Объект = &Объект
				             |	И гф_ПереводЗначенийРеквизитовИСвойств.Язык = &Язык";
				Запр.УстановитьПараметр("Объект",строка[Колонка.Имя]);
				Запр.УстановитьПараметр("Язык",ПредопределенноеЗначение("Справочник.гф_ВидыЯзыков.Russian"));
				Рез = Запр.Выполнить();
				Если рез.Пустой() Тогда
					
					мТовары.Добавить(строка[Колонка.Имя]);
					
					//Регсв = РегистрыСведений.гф_ПереводЗначенийРеквизитовИСвойств.СоздатьМенеджерЗаписи();
					//регсв.Объект = строка[Колонка.Имя];
					//регсв.Язык = ЯзыкДляПереводов;
					//регсв.Записать(Истина); 
					//ЗанеслиСвойств = ЗанеслиСвойств + 1;
					//Сообщить("Добавили в регистр перевода: свойство: "+Колонка.Имя+"; Значение: "+строка[Колонка.Имя]);
				КонецЕсли;
					
				
				
			//Иначе                     
			//	Сообщить("Имя колонки: "+Колонка.Имя+", Псевдоним: "+Псевдоним,СтатусСообщения.Важное);
			//	Сообщить("Свойство: "+Псевдоним+"; Значение: "+строка[Колонка.Имя],СтатусСообщения.Важное);
			КонецЕсли;
			//Если НадоПереводить(НРег(Колонка.Имя)) и ПолучитьПеревод(строка[Колонка.Имя], Строка.Номенклатура, Строка.ДатаЗагрузкиi5, кеш, ЯзыкДляПереводов) = "" Тогда
			//	НетПереводов.Добавить(строка[Колонка.Имя]);
			//КонецЕсли;
		КонецЦикла;
	//	Сообщить("______________________");
	КонецЦикла;	
	
	//ПомеченныеДокументы = Отчет.ТаблицаДокументы.Выгрузить(Новый Структура("Пометка", Истина));
	//
	//Если ПомеченныеДокументы.Количество() = 0 тогда	
	//	Возврат Неопределено;
	//КонецЕсли;
	//
	//Для каждого Док Из ПомеченныеДокументы.ВыгрузитьКолонку("Документ")  Цикл
	//
	//	Для каждого Товар Из Док.Товары Цикл
	//		
	//	    Если ИскатьПереводы(Товар.Номенклатура) Тогда
	//			мТовары.Добавить(Товар.Номенклатура);	
	//		КонецЕсли;
	//		
	//	КонецЦикла;	
	//
	//КонецЦикла;
	
	Возврат мТовары;

КонецФункции // } #wortmann

// #wortmann {
// #2.3.09
// Для кнопки "Сформировать строки перевода"
// XYZ Юрий 2022/09/20
&НаСервере
Функция ИскатьПереводы(Номенклатура)
	
	Запрос = новый Запрос(
	"ВЫБРАТЬ
	|	а.Объект КАК Объект,
	|	а.Свойство КАК Свойство,
	|	а.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК а
	|ГДЕ
	|	а.Объект = &Объект
	|	И а.Свойство = &Свойство");
	Запрос.УстановитьПараметр("Объект", Номенклатура);
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("имя", "гф_НоменклатураДатаОбновленияНоменклатурыИзI5"));
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Следующий();
	
КонецФункции // } #wortmann 

