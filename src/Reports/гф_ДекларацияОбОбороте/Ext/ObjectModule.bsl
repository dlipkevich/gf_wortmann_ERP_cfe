#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
	Перем МетаданныеПоДокументам;
	
	#Область ПрограммныйИнтерфейс
	
	Функция СведенияОВнешнейОбработке() Экспорт
		
		ИмяОтчета = ЭтотОбъект.Метаданные().Имя; 
		Синоним = ЭтотОбъект.Метаданные().Синоним; 
		РегистрационныеДанные = Новый Структура;
		РегистрационныеДанные.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет());
		РегистрационныеДанные.Вставить("Наименование", Синоним);
		РегистрационныеДанные.Вставить("Версия", "1.0");
		РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь);
		РегистрационныеДанные.Вставить("Информация", "Отчет "+Синоним);
		
		ТаблицаКоманд = ПолучитьТаблицуКоманд();
		
		ДобавитьКоманду(ТаблицаКоманд, Синоним, "СформироватьОтчет" , "ОткрытиеФормы", Истина, );
		
		РегистрационныеДанные.Вставить("Команды", ТаблицаКоманд);
		
		Возврат РегистрационныеДанные;
		
	КонецФункции
	
	Функция ПолучитьТаблицуКоманд()
		
		// Создадим пустую таблицу команд и колонки в ней
		Команды = Новый ТаблицаЗначений;
		
		// Как будет выглядеть описание печатной формы для пользователя
		Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 
		
		// Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
		Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
		
		// Тут задается, как должна вызваться команда обработки
		// Возможные варианты:
		// - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
		// - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
		// - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
		Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
		
		// Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
		Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
		
		// Для печатной формы должен содержать строку ПечатьMXL 
		Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
		Возврат Команды;
		
	КонецФункции
	
	Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование = "ОткрытиеФормы", ПоказыватьОповещение = Ложь, Модификатор)
		
		НоваяКоманда = ТаблицаКоманд.Добавить();
		НоваяКоманда.Представление = Представление;
		НоваяКоманда.Идентификатор = Идентификатор;
		НоваяКоманда.Использование = Использование;
		НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
		НоваяКоманда.Модификатор = Модификатор;
		
	КонецПроцедуры 
	
	#КонецОбласти 
	
	#Область СлужебныеПроцедурыИФункции  
	
	Процедура Печать(ТабДокумент) экспорт
		
		СписокСчетовСтрока = "";
		Для каждого СтрокаСчета Из СписокСчетов Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаСчета.Счет) или СтрокаСчета.УчаствуетВРасчетах = Ложь Тогда
				Продолжить;
			Иначе
				СписокСчетовСтрока = СписокСчетовСтрока + ?(ПустаяСтрока(СписокСчетовСтрока), "", ", ") + Строка(СтрокаСчета.Счет);
			КонецЕсли; 
		КонецЦикла; 
		
		ФильтрСписокСчетов = ПолучитьМассивСчетов("Хозрасчетный", СписокСчетовСтрока);
		
		Если ФильтрСписокСчетов.Количество() = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю("Неверно задан список счетов, по которым производится сверка!",,,СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ТабДокумент.Очистить();
		
		макет = ПолучитьМакет("Макет");
		
		область = макет.ПолучитьОбласть("Заголовок");
		область.Параметры.СтраховщикПеревод = ПолучитьПеревод(Страхователь);
		область.Параметры.Страховщик = Страхователь;
		область.Параметры.Стахователь = Организация.НаименованиеПолное;
		область.Параметры.ДоговорСтрахования = ПолучитьПереводДоговора(ДоговорСтрахования);
		область.Параметры.ДатаНачала = формат(ДатаНачала, "ДФ=dd.MM.yyyy");
		область.Параметры.ДатаОкончания = формат(ДатаОкончания, "ДФ=dd.MM.yyyy");
		ТабДокумент.Вывести(область);
		
		область = макет.ПолучитьОбласть("Шапка");
		ТабДокумент.Вывести(область);
		
		//-------------------------------------------------
		Если Контрагенты.Количество() = 0 Тогда
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ХозрасчетныйОбороты.Субконто1 КАК Контрагент
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор, Счет В (&ФильтрСписокСчетов), &АналитикаРасчетов, Организация = &Организация, , ) КАК ХозрасчетныйОбороты
			|ГДЕ
			|	НЕ(ХозрасчетныйОбороты.СуммаОборотДт = 0
			|				И ХозрасчетныйОбороты.СуммаОборотКт = 0)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Контрагент
			|АВТОУПОРЯДОЧИВАНИЕ");
			
			запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
			запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));
			запрос.УстановитьПараметр("ФильтрСписокСчетов", ФильтрСписокСчетов);
			запрос.УстановитьПараметр("Организация", Организация);
			
			АналитикаРасчетов = новый Массив();
			АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
			АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
			запрос.УстановитьПараметр("АналитикаРасчетов", АналитикаРасчетов);
			Контрагенты.ЗагрузитьЗначения(запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент"));
		КонецЕсли;
		
		НомерСтроки = 0;
		соответствие = новый  Соответствие;
		ИтогоДЗНачало = 0;
		ИтогоСуммаСчета = 0;
		ИтогоСуммаСчетаНепокрытая = 0;
		ИтогоСуммаСписания = 0;
		ИтогоДЗКонец = 0;
		
		Для каждого строка Из Контрагенты Цикл
			Контрагент = строка.Значение;
			#Если Клиент ТОгда
				Состояние("" + Контрагент);
			#КонецЕсли
			
			данные = ЗаполнитьПоДаннымБухгалтерскогоУчета(Контрагент, ФильтрСписокСчетов);
			
			НомерСтроки = НомерСтроки + 1;
			
			Таблица = данные.Таблица;
			ОстатокНаНачало = данные.ОстатокНаНачало;
			ОстатокНаКонец = данные.ОстатокНаКонец;
			
			Если Таблица.Количество() = 0 и ОстатокНаНачало = 0 и ОстатокНаКонец = 0 Тогда
				область = макет.ПолучитьОбласть("строка");
				область.Параметры.НомерСтроки = НомерСтроки;
				область.Параметры.Покупатель = Контрагент;
				ТабДокумент.Вывести(область);
				
				область = макет.ПолучитьОбласть("СтрокаИтог");
				ТабДокумент.Вывести(область);
				
				Продолжить;
			КонецЕсли;
			
			Если Таблица.Количество() = 0 Тогда
				Таблица.Добавить();
			КонецЕсли;
			
			Для а=0 По Таблица.Количество()-1 Цикл
				#Если Клиент ТОгда
				#КонецЕсли
				
				строка = Таблица[а];
				область = макет.ПолучитьОбласть("строка");
				
				Если а=0 Тогда
					область.Параметры.НомерСтроки = НомерСтроки;
					область.Параметры.Покупатель = Контрагент;
				КонецЕсли;
				
				Если не строка.Дебет = 0 Тогда
					Если ЗначениеЗаполнено(строка.ДокументРегистратор) Тогда
						область.Параметры.НомерСчета = ПолучитьНомер(строка.ДокументРегистратор.Номер);
						область.Параметры.ДатаСчета = строка.ДокументРегистратор.Дата;
						КоличествоДнейОтсрочки = ПолучитьДниОтсрочки(строка.ДокументРегистратор.Договор, соответствие);
						область.Параметры.ДатаПлатежа = строка.ДокументРегистратор.Дата + КоличествоДнейОтсрочки * 60*60*24;
					КонецЕсли;
					область.Параметры.СуммаСчета = строка.Дебет;
				КонецЕсли;
				
				Если не строка.СуммаНепокрытая = 0 Тогда
					Если ЗначениеЗаполнено(строка.ДокументРегистратор)  И НЕ СтрНайти(Строка(строка.ДокументРегистратор),"<Объект не найден>") > 0 Тогда
						область.Параметры.НомерСчета = ПолучитьНомер(строка.ДокументРегистратор.Номер);
						область.Параметры.ДатаСчета = строка.ДокументРегистратор.Дата;
						КоличествоДнейОтсрочки = ПолучитьДниОтсрочки(строка.ДокументРегистратор.Договор, соответствие);
						область.Параметры.ДатаПлатежа = строка.ДокументРегистратор.Дата + КоличествоДнейОтсрочки * 60*60*24;
					КонецЕсли;
					область.Параметры.СуммаНепокрытая = строка.СуммаНепокрытая;
				КонецЕсли;
				
				Если не строка.Кредит = 0 Тогда
					область.Параметры.СуммаСписания = строка.Кредит; 
					Если НЕ СтрНайти(Строка(строка.ДокументРегистратор),"<Объект не найден>") > 0 и  НЕ строка.ДокументРегистратор= неопределено Тогда
						область.Параметры.ДатаСписания = строка.ДокументРегистратор.Дата; 
					Иначе
						область.Параметры.ДатаСписания=Формат(строка.Дата,"ДФ=dd.MM.yyyy");
					КонецЕсли;
				КонецЕсли;
				
				ТабДокумент.Вывести(область);
				Если а=0 Тогда
					ТабДокумент.НачатьГруппуСтрок(строка(Контрагент), Ложь);
				КонецЕсли;
			КонецЦикла;
			
			ТабДокумент.ЗакончитьГруппуСтрок();
			
			область = макет.ПолучитьОбласть("СтрокаИтог");
			ДЗНачало = ОстатокНаНачало;
			СуммаСчета = Таблица.Итог("Дебет");
			СуммаНепокрытая = Таблица.Итог("СуммаНепокрытая");
			СуммаСписания = Таблица.Итог("Кредит");
			ДЗКонец = ОстатокНаКонец;
			
			область.Параметры.ДЗНачало = ДЗНачало;
			область.Параметры.ИтогоСуммаСчета = СуммаСчета;
			область.Параметры.ИтогоСуммаСчетаНепокрытая = СуммаНепокрытая;
			область.Параметры.ИтогоСуммаСписания = СуммаСписания;
			область.Параметры.ДЗКонец = ДЗКонец;
			ТабДокумент.Вывести(область);
			
			ИтогоДЗНачало = ИтогоДЗНачало + ДЗНачало;
			ИтогоСуммаСчета = ИтогоСуммаСчета + СуммаСчета;
			ИтогоСуммаСчетаНепокрытая = ИтогоСуммаСчетаНепокрытая + СуммаНепокрытая;
			ИтогоСуммаСписания = ИтогоСуммаСписания + СуммаСписания;
			ИтогоДЗКонец = ИтогоДЗКонец + ДЗКонец;
		КонецЦикла;
		
		//-------------------------------------------------
		
		область = макет.ПолучитьОбласть("Итог");
		область.Параметры.ИтогоДЗНачало = ИтогоДЗНачало;
		область.Параметры.ИтогоСуммаСчета = ИтогоСуммаСчета;
		область.Параметры.ИтогоСуммаСчетаНепокрытая = ИтогоСуммаСчетаНепокрытая;
		область.Параметры.ИтогоСуммаСписания = ИтогоСуммаСписания;
		область.Параметры.ИтогоДЗКонец = ИтогоДЗКонец;
		ТабДокумент.Вывести(область);
		
		область = макет.ПолучитьОбласть("Подвал");
		Область.Параметры.ДатаПодписи=Формат(ДатаОкончания ,"ДФ=dd.MM.yy"); 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтветственныеЛицаОрганизаций.Ссылка КАК Ссылка,
		|	ОтветственныеЛицаОрганизаций.Должность КАК Должность,
		|	ОтветственныеЛицаОрганизаций.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	Справочник.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаОрганизаций
		|ГДЕ
		|	ОтветственныеЛицаОрганизаций.ОтветственноеЛицо = &ОтветственноеЛицо
		|	И ОтветственныеЛицаОрганизаций.Владелец = &Владелец";
		
		Запрос.УстановитьПараметр("Владелец", Организация);
		Запрос.УстановитьПараметр("ОтветственноеЛицо", Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		Если РезультатЗапроса.Количество()<>0 Тогда
			запись  = РезультатЗапроса[0]; 
		Иначе 
			область.Параметры.Должность = "";
			область.Параметры.ГД = "";
		КонецЕсли;
		
		Если Запись<>Неопределено Тогда  
			область.Параметры.Должность = запись.Должность;
			ФизическоеЛицо = запись.ФизическоеЛицо;
			запись = РегистрыСведений.ФИОФизическихЛиц.ПолучитьПоследнее(ДатаОкончания, новый Структура("ФизическоеЛицо", запись.ФизическоеЛицо));
			область.Параметры.ГД = запись.Фамилия + " " + ?(СтрДлина(запись.Имя) > 0, лев(запись.Имя, 1) + ".", "") + ?(СтрДлина(запись.Отчество) > 0, лев(запись.Отчество, 1) + ".", "");  
		КонецЕсли;
		
		ТабДокумент.Вывести(область);  
		
	КонецПроцедуры
	
	#КонецОбласти
	
	#Область ДополнительныеПроцедурыИФункции 
	
	Функция ПолучитьМассивСчетов(ИмяПланаСчетов, Знач СчетаСтрокой = "", ИсключитьГруппы = Ложь, СообщатьОбОтсутствииСчета = Истина) Экспорт
		
		МассивСчетов = Новый Массив;
		
		// Преобразуем переданную строку в массив ссылок на план счетов
		СчетаСтрокой = СтрЗаменить(СчетаСтрокой, " ", "");
		Пока Не ПустаяСтрока(СчетаСтрокой) Цикл
			
			// Определим код очередного счета
			Поз = Найти(СчетаСтрокой, ",");
			Если Поз = 0 Тогда
				Код = СчетаСтрокой;
				СчетаСтрокой = "";
			Иначе
				Код = Лев(СчетаСтрокой, Поз - 1);
				СчетаСтрокой = Сред(СчетаСтрокой, Поз + 1);
			КонецЕсли;
			
			// Определим ссылку на счет по коду
			Счет = ПланыСчетов[ИмяПланаСчетов].НайтиПоКоду(Код);
			Если НЕ ЗначениеЗаполнено(Счет) Тогда
				Если СообщатьОбОтсутствииСчета Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Не найден счет с кодом """ + Код + """ (план счетов - " + ИмяПланаСчетов + ")");
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			МассивСчетов.Добавить(Счет);
			
		КонецЦикла;
		
		// Подготовим текст запроса
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ПланСчетов.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов.%ПланСчетов% КАК ПланСчетов
		|ГДЕ
		|	ПланСчетов.Ссылка В ИЕРАРХИИ (&МассивСчетов) И %ВключатьГруппы%
		|";
		
		Если ИсключитьГруппы Тогда
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВключатьГруппы%", 
			"ПланСчетов.Ссылка НЕ В (
			| 	ВЫБРАТЬ
			|		ПланСчетов.Родитель
			|	ИЗ
			|		ПланСчетов.%ПланСчетов% КАК ПланСчетов
			|	ГДЕ
			|		ПланСчетов.Ссылка В ИЕРАРХИИ (&МассивСчетов)
			|)");
			
		Иначе
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВключатьГруппы%", "Истина");
			
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПланСчетов%", ИмяПланаСчетов);
		
		Запрос = Новый Запрос(ТекстЗапроса);
		
		Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
		
		СписокСчетовНовый = Новый СписокЗначений;
		СписокСчетовНовый.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет"));
		
		Возврат СписокСчетовНовый;
		
	КонецФункции //ПолучитьМассивСчетов()
	
	Функция ПолучитьПеревод(Контрагент)
		
		запись = РегистрыСведений.гф_ПереводЗначенийРеквизитовИСвойств.СоздатьМенеджерЗаписи();
		запись.Объект = Контрагент;
		запись.Язык = Справочники.гф_ВидыЯзыков.English;
		запись.Прочитать();
		Если запись.Выбран() Тогда
			возврат запись.Значение;
		Иначе
			возврат Контрагент;
		КонецЕсли;
		
	КонецФункции
	
	Функция ПолучитьПереводДоговора(Договор)
		
		запись = РегистрыСведений.гф_ПереводЗначенийРеквизитовИСвойств.СоздатьМенеджерЗаписи();
		запись.Объект = Договор;
		запись.Язык = Справочники.гф_ВидыЯзыков.English;
		запись.Прочитать();
		Если запись.Выбран() Тогда
			возврат запись.Значение;
		Иначе
			возврат Договор;
		КонецЕсли;
		
	КонецФункции
	
	Функция ПолучитьНомер(знач Номер)
		
		Пока найти("0123456789", лев(Номер, 1)) = 0 и СтрДлина(Номер) > 0 Цикл
			#Если Клиент ТОгда
			#КонецЕсли
			Номер = сред(Номер, 2);
		КонецЦикла;
		
		Если СтрДлина(Номер) = 0 Тогда
			возврат "";
		Иначе
			возврат Номер;
		КонецЕсли;
		
	КонецФункции // ПолучитьНомер()
	
	Функция ПолучитьДниОтсрочки(ДоговорКонтрагента, соответствие)
		попытка
			результат = соответствие.Получить(ДоговорКонтрагента);
		исключение
		КонецПопытки;
		Если результат = Неопределено Тогда 
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДоговорыКонтрагентовДополнительныеРеквизиты.Значение КАК Значение
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов.ДополнительныеРеквизиты КАК ДоговорыКонтрагентовДополнительныеРеквизиты
			|ГДЕ
			|	ДоговорыКонтрагентовДополнительныеРеквизиты.Свойство.Наименование = &Наименование
			|	И ДоговорыКонтрагентовДополнительныеРеквизиты.Ссылка = &Ссылка";
			
			Запрос.УстановитьПараметр("Наименование", "Количество дней отсрочки платежа");
			Запрос.УстановитьПараметр("Ссылка", ДоговорКонтрагента);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если РезультатЗапроса.Пустой() Тогда
				результат=0; 
			Иначе
				ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выгрузить();
				Результат=ВыборкаДетальныеЗаписи[0].Значение;	
			КонецЕсли;
			
		КонецЕсли;
		
		возврат результат;
		
	КонецФункции
	
	Функция ОбработатьКонтрагента(Контрагент, ФильтрСписокСчетов)
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Период КАК Дата,
		|	ХозрасчетныйОбороты.Регистратор КАК ДокументРегистратор,
		|	ХозрасчетныйОбороты.Субконто1 КАК Контрагент,
		|	ХозрасчетныйОбороты.Субконто2 КАК Договор,
		|	ХозрасчетныйОбороты.СуммаОборотДт КАК Дебет,
		|	ХозрасчетныйОбороты.СуммаОборотКт КАК Кредит,
		|	ЕСТЬNULL(ХозрасчетныйОбороты.Регистратор.НомерВходящегоДокумента, НЕОПРЕДЕЛЕНО) КАК НомерВходящегоДокумента,
		|	ЕСТЬNULL(ХозрасчетныйОбороты.Регистратор.ДатаВходящегоДокумента, НЕОПРЕДЕЛЕНО) КАК ДатаВходящегоДокумента,
		|	ХозрасчетныйОбороты.КорСчет,
		|	ХозрасчетныйОбороты.КорСубконто1,
		|	ХозрасчетныйОбороты.КорСубконто2,
		|	ХозрасчетныйОбороты.КорСубконто3,
		|	ХозрасчетныйОбороты.Валюта,
		|	ХозрасчетныйОбороты.ВалютнаяСуммаОборот,
		|	ХозрасчетныйОбороты.Счет
		|ПОМЕСТИТЬ ВременнаяТаблицаДанных
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&ДатаНачала,
		|			&ДатаОкончания,
		|			Регистратор,
		|			Счет В (&ФильтрСписокСчетов),
		|			&АналитикаРасчетов,
		|			Организация = &Организация
		|				И Субконто1 = &Контрагент
		|				И НЕ Субконто2.гф_Сезон = ЗНАЧЕНИЕ(Справочник.КоллекцииНоменклатуры.ПустаяСсылка),
		|			,
		|			) КАК ХозрасчетныйОбороты
		|ГДЕ
		|	НЕ(ХозрасчетныйОбороты.СуммаОборотДт = 0
		|				И ХозрасчетныйОбороты.СуммаОборотКт = 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаДанных.Контрагент,
		|	ВременнаяТаблицаДанных.Договор КАК ДоговорКонтрагента,
		|	ВременнаяТаблицаДанных.НомерВходящегоДокумента,
		|	ВременнаяТаблицаДанных.ДатаВходящегоДокумента,
		|	ВременнаяТаблицаДанных.КорСчет,
		|	ВременнаяТаблицаДанных.Дата,
		|	ВременнаяТаблицаДанных.ДокументРегистратор,
		|	СУММА(ВременнаяТаблицаДанных.Дебет) КАК Дебет,
		|	СУММА(ВременнаяТаблицаДанных.Кредит) КАК Кредит,
		|	ВременнаяТаблицаДанных.Валюта,
		|	СУММА(ВременнаяТаблицаДанных.ВалютнаяСуммаОборот) КАК ВалютнаяСуммаОборот,
		|	ВременнаяТаблицаДанных.Счет
		|ИЗ
		|	ВременнаяТаблицаДанных КАК ВременнаяТаблицаДанных
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаДанных.Контрагент,
		|	ВременнаяТаблицаДанных.Договор,
		|	ВременнаяТаблицаДанных.НомерВходящегоДокумента,
		|	ВременнаяТаблицаДанных.ДатаВходящегоДокумента,
		|	ВременнаяТаблицаДанных.КорСчет,
		|	ВременнаяТаблицаДанных.Валюта,
		|	ВременнаяТаблицаДанных.Счет,
		|	ВременнаяТаблицаДанных.Дата,
		|	ВременнаяТаблицаДанных.ДокументРегистратор
		|
		|ИМЕЮЩИЕ
		|	НЕ(СУММА(ВременнаяТаблицаДанных.Дебет) = 0
		|			И СУММА(ВременнаяТаблицаДанных.Кредит) = 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВременнаяТаблицаДанных.Дата,
		|	ВременнаяТаблицаДанных.ДокументРегистратор");
		
		Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("ФильтрСписокСчетов", ФильтрСписокСчетов);
		
		АналитикаРасчетов = новый Массив();
		АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
		Запрос.УстановитьПараметр("АналитикаРасчетов", АналитикаРасчетов);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		НаборДвижений = ПоДаннымОрганизации.Выгрузить();
		НаборДвижений.Колонки.Добавить("Валюта", Новый описаниеТипов("СправочникСсылка.Валюты"));
		НаборДвижений.Колонки.Добавить("ВалютнаяСумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		
		МассивПрефиксов = ОбщегоНазначения.СформироватьМассивПрефиксовДляРИБИОрганизации(Организация);
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Дебет = 0 И Выборка.Кредит = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = НаборДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			МетаданныеДокумента = ПолучитьМетаданныеДокумента(Выборка.ДокументРегистратор);
			
			// Сформируем строку представления
			Представление = "";
			
			Если Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) Тогда
				//Если НЕ ЗначениеЗаполнено(Выборка.ВидпрочихДоходовИРасходов) Тогда
				//ИначеЕсли Выборка.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы Тогда
				//	Представление = "Курсовые разницы";
				//ИначеЕсли Выборка.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате Тогда
				//	Представление = "Санкции";
				//ИначеЕсли Выборка.КорСубконто1 = Справочники.ПрочиеДоходыИРасходы.СуммовыеРазницы Тогда
				//	Представление = "Суммовые разницы";
				//ИначеЕсли Выборка.КорСубконто1 = Справочники.ПрочиеДоходыИРасходы.КурсовыеРазницыПоРасчетамВУЕ Тогда
				//	Представление = "Курсовые разницы по расчетам в у.е";
				//КонецЕсли;
			КонецЕсли;
			
			Если не ПустаяСтрока(Представление) Тогда
				// Строка уже отработана
				
			ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам) 
				или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам) Тогда
				Если (Выборка.Дебет >0) Тогда
					Представление = "Возврат займа";
				ИначеЕсли (Выборка.Кредит >0)Тогда
					Представление = "Займ";
				Иначе
					Представление = "Операции по займам";
				КонецЕсли;
			ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям) 
				или Выборка.Счет = ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям
				или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямВал) 
				или Выборка.Счет = ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямВал
				или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ) 
				или Выборка.Счет = ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ
				тогда
				Представление = "Претензия";
				
			ИначеЕсли Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Касса) 
				или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетныеСчета) 
				или Выборка.КорСчет = ПланыСчетов.Хозрасчетный.РасчетныеСчета
				или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ВалютныеСчета) 
				или Выборка.КорСчет = ПланыСчетов.Хозрасчетный.ВалютныеСчета
				или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.СпециальныеСчета) 
				тогда
				
				Если (Выборка.Кредит >0) Тогда
					Если Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) Тогда
						Представление = "Возврат средств";
					ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
						Представление = "Оплата";
					Иначе
						Представление = "Перевод средств";
					КонецЕсли;
					
				ИначеЕсли (Выборка.Дебет >0) Тогда
					Если Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
						или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами)
						Тогда
						Представление = "Оплата";
					ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
						Представление = "Возврат средств";
					Иначе
						Представление = "Перевод средств";
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) 
				или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами) 
				тогда
				Если Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) 
					или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Продажи) Тогда
					Если Выборка.Дебет <> 0 Тогда
						Представление = "Оплата";
					Иначе
						Если ТипЗнч(Выборка.ДокументРегистратор) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
							Представление = "Корректировка прихода";
						Иначе
							Представление = "Приход";
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли (Выборка.Кредит <>0) Тогда
					Если ТипЗнч(Выборка.ДокументРегистратор) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
						Представление = "Корректировка прихода";
					Иначе
						Представление = "Приход";
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
				Если Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) 
					или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Продажи) Тогда
					Если ЭтоДокументДвиженияДенежныхСредств(Выборка.ДокументРегистратор) Тогда
						Представление = "Суммовая разница";
					ИначеЕсли ТипЗнч(Выборка.ДокументРегистратор) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
						Представление = "Корректировка продажи";
					ИначеЕсли ТипЗнч(Выборка.ДокументРегистратор) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И Выборка.Дебет <> 0 Тогда
						Представление = "Продажа";
					Иначе
						Если Выборка.Дебет > 0 Тогда
							Представление = "Продажа";
						ИначеЕсли Выборка.Дебет < 0 Тогда
							Представление = "Возврат";
						Иначе
							Представление = "Оплата";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ПустаяСтрока(Представление)Тогда
				Если Выборка.Дебет > 0 тогда
					Представление = "Принято";
				ИначеЕсли Выборка.Дебет < 0 тогда
					Представление = "Сторно: принято";
				ИначеЕсли Выборка.Кредит > 0 тогда
					Представление = "Передано";
				Иначе
					Представление = "Сторно: передано";
				КонецЕсли;
			КонецЕсли;
			
			Если Выборка.НомерВходящегоДокумента = Неопределено тогда
				Если Представление = "Продажа" И ТипЗнч(Выборка.ДокументРегистратор) <> Тип("ДокументСсылка.ОперацияБух") Тогда
					Представление = Представление + " (" + ОбщегоНазначения.ПолучитьНомерНаПечать(Выборка.ДокументРегистратор,МассивПрефиксов) + " от " + Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + ")";
				Иначе
					Представление = Представление + " ("+Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + ")";
				КонецЕсли;
			Иначе
				Представление = Представление +" ("+ ?(НЕ ЗначениеЗаполнено(Выборка.НомерВходящегоДокумента),"_______", Выборка.НомерВходящегоДокумента) +" от "+
				?(НЕ ЗначениеЗаполнено(Выборка.ДатаВходящегоДокумента), "'  .  .    '", Формат(Выборка.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy"))+")";
			КонецЕсли;					  
			
			НоваяСтрока.Представление = Представление;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ДатаНачала) Тогда
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ХозрасчетныйОстаткиНаНачало.СуммаОстаток КАК ОстатокНаНачало
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&ДатаНачала,
			|			Счет В (&ФильтрСписокСчетов),
			|			&АналитикаРасчетов,
			|			Организация = &Организация
			|				И Субконто1 = &Контрагент
			|				И НЕ Субконто2.w_Сезон = ЗНАЧЕНИЕ(Справочник.w_Сезоны.ПустаяСсылка)) КАК ХозрасчетныйОстаткиНаНачало";
			Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
			
			ОстатокНаНачало = Запрос.Выполнить().Выгрузить().Итог("ОстатокНаНачало");
		Иначе
			ОстатокНаНачало = 0;
		КонецЕсли;
		
		НаборДвижений.Свернуть("Дата, ДокументРегистратор, ДоговорКонтрагента, Представление, Валюта", "Дебет, Кредит, ВалютнаяСумма");
		НаборДвижений.Свернуть("Дата, ДокументРегистратор, ДоговорКонтрагента, Дебет, Кредит, ВалютнаяСумма");
		
		Для каждого СтрокаДвижений Из НаборДвижений Цикл
			Если СтрокаДвижений.ВалютнаяСумма > 0 Тогда
				СтрокаДвижений.Представление = СтрокаДвижений.Представление 
				+ " (" + Формат(СтрокаДвижений.ВалютнаяСумма, "ЧЦ=15; ЧДЦ=2") + " " + Строка(СтрокаДвижений.Валюта) + ")";
			ИначеЕсли СтрокаДвижений.ВалютнаяСумма < 0 Тогда
				Множитель = ?( (СтрокаДвижений.Дебет + СтрокаДвижений.Кредит) > 0, -1, 1);
				СтрокаДвижений.Представление = СтрокаДвижений.Представление
				+ " (" + Формат(Множитель * СтрокаДвижений.ВалютнаяСумма, "ЧЦ=15; ЧДЦ=2") + " " + Строка(СтрокаДвижений.Валюта) + ")";
			КонецЕсли;
		КонецЦикла; 
		
		НаборДвижений.Сортировать("Дата, ДокументРегистратор");	
		ОстатокНаКонец = ОстатокНаНачало + НаборДвижений.Итог("Дебет") -  НаборДвижений.Итог("Кредит");
		
		возврат новый Структура("Таблица, ОстатокНаНачало, ОстатокНаКонец", НаборДвижений, ОстатокНаНачало, ОстатокНаКонец);
		
	КонецФункции
	
	Функция ПолучитьМетаданныеДокумента(ДокументСсылка)
		
		ТипДокумента = ТипЗнч(ДокументСсылка);
		Если МетаданныеПоДокументам[ТипДокумента] = Неопределено Тогда
			Если Документы.ТипВсеСсылки().СодержитТип(ТипДокумента) Тогда
				МетаданныеПоДокументам.Вставить(ТипДокумента, ДокументСсылка.Метаданные());
			Иначе
				МетаданныеПоДокументам.Вставить(ТипДокумента, Неопределено);
			КонецЕсли;
		КонецЕсли; 
		
		Возврат МетаданныеПоДокументам[ТипДокумента];
		
	КонецФункции // ПолучитьМетаданныеДокумента()
	
	Функция ЭтоДокументДвиженияДенежныхСредств(ДокументСсылка)
		
		ТипДокумента = ТипЗнч(ДокументСсылка);
		
		Результат = 
		ТипДокумента = Тип("ДокументСсылка.АвансовыйОтчет")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ВыбытиеДенежныхДокументов")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ВнесениеДенежныхСредствВКассуККМ")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ВыемкаДенежныхСредствИзКассыККМ")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПоступлениеДенежныхДокументов")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.РасходныйКассовыйОрдер");
		
		Возврат Результат;
		
	КонецФункции 
	
	Функция ЗаполнитьПоДаннымБухгалтерскогоУчета(Контрагент, ФильтрСписокСчетов) Экспорт
		
		Если ФильтрСписокСчетов = Неопределено Тогда
			СписокСчетовСтрока = "";
			Для каждого СтрокаСчета Из СписокСчетов Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаСчета.Счет) или СтрокаСчета.УчаствуетВРасчетах = Ложь Тогда
					Продолжить;
				Иначе
					СписокСчетовСтрока = СписокСчетовСтрока + ?(ПустаяСтрока(СписокСчетовСтрока), "", ", ") + Строка(СтрокаСчета.Счет);
				КонецЕсли; 
			КонецЦикла; 
			
			ФильтрСписокСчетов = ПолучитьМассивСчетов("Хозрасчетный", СписокСчетовСтрока);
			Если ФильтрСписокСчетов.Количество() = 0 Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Неверно задан список счетов, по которым производится сверка!",,,СтатусСообщения.Важное);
				Возврат новый Структура("Таблица, ОстатокНаНачало, ОстатокНаКонец", новый ТаблицаЗначений, 0, 0);
			КонецЕсли;
		Иначе
			СписокСчетовСтрока = "";
			Для Каждого Счет ИЗ ФильтрСписокСчетов Цикл
				СписокСчетовСтрока = СписокСчетовСтрока + ?(ПустаяСтрока(СписокСчетовСтрока), "", ", ") + Строка(Счет);
			КонецЦикла;
			ФильтрСписокСчетов = ПолучитьМассивСчетов("Хозрасчетный", СписокСчетовСтрока);
		КонецЕсли; 
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	выборка.Контрагент КАК Контрагент
		|ПОМЕСТИТЬ Контрагенты
		|ИЗ
		|	РегистрСведений.гф_ЛимитыКонтрагентов КАК выборка
		|ГДЕ
		|	выборка.ВидЛимита.Источник = &Страхователь
		|	И выборка.Контрагент = &Контрагент
		|	И выборка.Статус.Активный
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ХозрасчетныйОбороты.Период КАК Дата,
		|	ХозрасчетныйОбороты.Регистратор КАК ДокументРегистратор,
		|	ХозрасчетныйОбороты.Субконто2 КАК Договор,
		|	ВЫБОР
		|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
		|			ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
		|		ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт
		|	КОНЕЦ КАК Дебет,
		|	ВЫБОР
		|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
		|			ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
		|		ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотКт
		|	КОНЕЦ КАК Кредит,
		|	ЕСТЬNULL(ХозрасчетныйОбороты.Регистратор.НомерВходящегоДокумента, НЕОПРЕДЕЛЕНО) КАК НомерВходящегоДокумента,
		|	ЕСТЬNULL(ХозрасчетныйОбороты.Регистратор.ДатаВходящегоДокумента, НЕОПРЕДЕЛЕНО) КАК ДатаВходящегоДокумента,
		|	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
		|	ХозрасчетныйОбороты.КорСубконто1 КАК КорСубконто1,
		|	ХозрасчетныйОбороты.КорСубконто2 КАК КорСубконто2,
		|	ХозрасчетныйОбороты.КорСубконто3 КАК КорСубконто3,
		|	ХозрасчетныйОбороты.Валюта КАК Валюта,
		|	ХозрасчетныйОбороты.ВалютнаяСуммаОборот КАК ВалютнаяСуммаОборот,
		|	ХозрасчетныйОбороты.Счет КАК Счет
		|ПОМЕСТИТЬ выборка
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&ДатаНачала,
		|			&ДатаОкончания,
		|			Регистратор,
		|			Счет В (&ФильтрСписокСчетов),
		|			&АналитикаРасчетов,
		|			Организация = &Организация
		|				И Субконто1 = &Контрагент,
		|			,
		|			) КАК ХозрасчетныйОбороты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Дата,
		|	ДокументРегистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	выборка.ДокументРегистратор КАК ДокументРегистратор,
		|	МАКСИМУМ(Лимиты.Период) КАК Период
		|ПОМЕСТИТЬ Периоды
		|ИЗ
		|	выборка КАК выборка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.гф_ЛимитыКонтрагентов КАК Лимиты
		|		ПО выборка.Дата >= Лимиты.Период
		|			И (Лимиты.Контрагент = &Контрагент)
		|			И (Лимиты.Статус.Активный)
		|			И (Лимиты.ВидЛимита.Источник = &Страхователь)
		|
		|СГРУППИРОВАТЬ ПО
		|	выборка.ДокументРегистратор
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументРегистратор,
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Периоды.ДокументРегистратор КАК ДокументРегистратор,
		|	Лимиты.Сумма КАК Сумма
		|ПОМЕСТИТЬ Лимиты
		|ИЗ
		|	Периоды КАК Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.гф_ЛимитыКонтрагентов КАК Лимиты
		|		ПО Периоды.Период = Лимиты.Период
		|			И (Лимиты.Контрагент = &Контрагент)
		|			И (Лимиты.Статус.Активный)
		|			И (Лимиты.ВидЛимита.Источник = &Страхователь)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументРегистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА РасчетыСКлиентамиПоСрокамОстатки.ДатаПлановогоПогашения < НАЧАЛОПЕРИОДА(&ДатаОкончания, ДЕНЬ)
		|			ТОГДА РасчетыСКлиентамиПоСрокамОстатки.ДолгОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Поле1,
		|	РасчетыСКлиентамиПоСрокамОстатки.РасчетныйДокумент КАК РасчетныйДокумент
		|ПОМЕСТИТЬ ВТРасчеты
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(&ДатаОкончания, ) КАК РасчетыСКлиентамиПоСрокамОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	выборка.Дата КАК Дата,
		|	выборка.ДокументРегистратор КАК ДокументРегистратор,
		|	выборка.Договор КАК Договор,
		|	СУММА(выборка.Дебет) КАК Дебет,
		|	СУММА(выборка.Кредит) КАК Кредит,
		|	выборка.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
		|	выборка.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	выборка.КорСчет КАК КорСчет,
		|	выборка.Валюта КАК Валюта,
		|	СУММА(выборка.ВалютнаяСуммаОборот) КАК ВалютнаяСуммаОборот,
		|	выборка.Счет КАК Счет,
		|	СУММА(ЕСТЬNULL(Лимиты.Сумма, 0)) КАК СуммаЛимита,
		|	ВТРасчеты.РасчетныйДокумент КАК РасчетныйДокумент,
		|	ВТРасчеты.Поле1 КАК СуммаДолгаПросрочено
		|ИЗ
		|	выборка КАК выборка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Лимиты КАК Лимиты
		|		ПО выборка.ДокументРегистратор = Лимиты.ДокументРегистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРасчеты КАК ВТРасчеты
		|		ПО выборка.ДокументРегистратор = ВТРасчеты.РасчетныйДокумент
		|
		|СГРУППИРОВАТЬ ПО
		|	выборка.Договор,
		|	выборка.НомерВходящегоДокумента,
		|	выборка.ДатаВходящегоДокумента,
		|	выборка.КорСчет,
		|	выборка.Валюта,
		|	выборка.Счет,
		|	выборка.Дата,
		|	выборка.ДокументРегистратор,
		|	ВТРасчеты.РасчетныйДокумент,
		|	ВТРасчеты.Поле1
		|
		|УПОРЯДОЧИТЬ ПО
		|	выборка.Дата,
		|	выборка.ДокументРегистратор");
		
		Запрос.УстановитьПараметр("ДатаНачала",?(ЗначениеЗаполнено(ДатаНачала), ДатаНачала, Неопределено));
		Запрос.УстановитьПараметр("ДатаОкончания", ?(ЗначениеЗаполнено(ДатаОкончания), КонецДня(ДатаОкончания), Неопределено));
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("Валюта", Неопределено);
		Запрос.УстановитьПараметр("ФильтрСписокСчетов", ФильтрСписокСчетов);
		
		АналитикаРасчетов = новый Массив();
		АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
		Запрос.УстановитьПараметр("АналитикаРасчетов", АналитикаРасчетов);
		
		Запрос.УстановитьПараметр("Страхователь", Страхователь);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		НаборДвижений = ПоДаннымОрганизации.Выгрузить();
		НаборДвижений.Колонки.Добавить("Валюта", Новый описаниеТипов("СправочникСсылка.Валюты"));
		НаборДвижений.Колонки.Добавить("ВалютнаяСумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));    
		НаборДвижений.Колонки.Добавить("СуммаЛимита", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));    
		НаборДвижений.Колонки.Добавить("СуммаДолгаПросрочено", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));    
		
		МассивПрефиксов = "";
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Дебет = 0 И Выборка.Кредит = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			// Сформируем строку представления
			Представление = "";
			
			Если не ПустаяСтрока(Представление) Тогда
				
			ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам) 
				или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам) Тогда
				
				Если (Выборка.Дебет >0) Тогда
					Представление = "Возврат займа";
				ИначеЕсли (Выборка.Кредит >0)Тогда
					Представление = "Займ";
				Иначе
					Представление = "Операции по займам";
				КонецЕсли;
				
			ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям) 
				или Выборка.Счет = ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям
				или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямВал) 
				или Выборка.Счет = ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямВал
				или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ) 
				или Выборка.Счет = ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ Тогда
				
				Представление = "Претензия";
				
			ИначеЕсли Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Касса) 
				или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетныеСчета) 
				или Выборка.КорСчет = ПланыСчетов.Хозрасчетный.РасчетныеСчета
				или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ВалютныеСчета) 
				или Выборка.КорСчет = ПланыСчетов.Хозрасчетный.ВалютныеСчета
				или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.СпециальныеСчета) Тогда
				
				Если Выборка.Кредит > 0 Тогда
					
					Если Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) Тогда
						Представление = "Возврат средств";
					ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
						Представление = "Оплата";
					Иначе
						Представление = "Перевод средств";
					КонецЕсли;
					
				ИначеЕсли Выборка.Дебет > 0 Тогда
					
					Если Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
						или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами) Тогда
						
						Представление = "Оплата";
						
					ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
						Представление = "Возврат средств";
					Иначе
						Представление = "Перевод средств";
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) 
				или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами) Тогда
				
				Если Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) 
					или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Продажи) Тогда
					
					Если не Выборка.Дебет = 0 Тогда
						Представление = "Оплата";
					Иначе
						Если ТипЗнч(Выборка.ДокументРегистратор) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
							Представление = "Корректировка прихода";
						Иначе
							Представление = "Приход";
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли не Выборка.Кредит = 0 Тогда
					Если ТипЗнч(Выборка.ДокументРегистратор) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
						Представление = "Корректировка прихода";
					Иначе
						Представление = "Приход";
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
				Если Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) 
					или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Продажи) Тогда
					
					Если ЭтоДокументДвиженияДенежныхСредств(Выборка.ДокументРегистратор) Тогда
						Представление = "Суммовая разница";
					ИначеЕсли ТипЗнч(Выборка.ДокументРегистратор) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
						Представление = "Корректировка продажи";
					ИначеЕсли ТипЗнч(Выборка.ДокументРегистратор) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И Выборка.Дебет <> 0 Тогда
						Представление = "Продажа";
					Иначе
						Если Выборка.Дебет > 0 Тогда
							Представление = "Продажа";
						ИначеЕсли Выборка.Дебет < 0 Тогда
							Представление = "Возврат";
						Иначе
							Представление = "Оплата";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ПустаяСтрока(Представление)Тогда
				Если Выборка.Дебет > 0 тогда
					Представление = "Принято";
				ИначеЕсли Выборка.Дебет < 0 тогда
					Представление = "Сторно: принято";
				ИначеЕсли Выборка.Кредит > 0 тогда
					Представление = "Передано";
				Иначе
					Представление = "Сторно: передано";
				КонецЕсли;
			КонецЕсли;
			
			Если Выборка.НомерВходящегоДокумента = Неопределено тогда
				Если Представление = "Продажа" И ТипЗнч(Выборка.ДокументРегистратор) <> Тип("ДокументСсылка.ОперацияБух") Тогда
					Представление = Представление + " (" + ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.ДокументРегистратор) + " от " + Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + ")";
				Иначе
					Представление = Представление + " ("+Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + ")";
				КонецЕсли;
			Иначе
				Представление = Представление + " (" + ?(НЕ ЗначениеЗаполнено(Выборка.НомерВходящегоДокумента),"_______", Выборка.НомерВходящегоДокумента) + " от " +
				?(НЕ ЗначениеЗаполнено(Выборка.ДатаВходящегоДокумента), "'  .  .    '", Формат(Выборка.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy")) + ")";
			КонецЕсли;					  
			
			Если найти(Представление, "Оплата") = 0 и найти(Представление, "Перевод средств") = 0 и Выборка.СуммаЛимита = 0 и не Выборка.Дебет = 0 Тогда
				НоваяСтрока = НаборДвижений.Добавить();
				НоваяСтрока.ДокументРегистратор = Выборка.ДокументРегистратор;
				НоваяСтрока.Дата = Выборка.Дата;
				НоваяСтрока.СуммаНепокрытая = Выборка.Дебет;
				НоваяСтрока.Валюта = Выборка.Валюта;
				НоваяСтрока.ВалютнаяСумма = Выборка.ВалютнаяСуммаОборот;
				НоваяСтрока.ДоговорКонтрагента = Выборка.Договор;
				НоваяСтрока.Представление = Представление; 
				НоваяСтрока.СуммаЛимита=Выборка.СуммаЛимита;  
				НоваяСтрока.СуммаДолгаПросрочено=Выборка.СуммаДолгаПросрочено;
			Иначе
				НоваяСтрока = НаборДвижений.Добавить();
				НоваяСтрока.ДокументРегистратор = Выборка.ДокументРегистратор;
				НоваяСтрока.Дата = Выборка.Дата;
				НоваяСтрока.Дебет = Выборка.Дебет;
				НоваяСтрока.Кредит = Выборка.Кредит;
				НоваяСтрока.Валюта = Выборка.Валюта;
				НоваяСтрока.ВалютнаяСумма = Выборка.ВалютнаяСуммаОборот;
				НоваяСтрока.ДоговорКонтрагента = Выборка.Договор;
				НоваяСтрока.Представление = Представление;   
				НоваяСтрока.СуммаЛимита=Выборка.СуммаЛимита;  
				НоваяСтрока.СуммаДолгаПросрочено=Выборка.СуммаДолгаПросрочено;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ДатаНачала) Тогда
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ХозрасчетныйОстаткиНаНачало.СуммаОстаток КАК ОстатокНаНачало
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&ДатаНачала,
			|			Счет В (&ФильтрСписокСчетов),
			|			&АналитикаРасчетов,
			|			Организация = &Организация
			|				И Субконто1 = &Контрагент) КАК ХозрасчетныйОстаткиНаНачало";
			Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
			ОстатокНаНачало = Запрос.Выполнить().Выгрузить().Итог("ОстатокНаНачало");
		Иначе
			ОстатокНаНачало = 0;
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстаткиНаКонец.СуммаОстаток КАК ОстатокНаКонец
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ДатаОкончания,
		|			Счет В (&ФильтрСписокСчетов),
		|			,
		|			Организация = &Организация
		|				И Субконто1 = &Контрагент) КАК ХозрасчетныйОстаткиНаКонец";
		Запрос.УстановитьПараметр("ДатаОкончания", ?(ЗначениеЗаполнено(ДатаОкончания), Новый Граница(КонецДня(ДатаОкончания), ВидГраницы.Включая), Неопределено));
		ОстатокНаКонец = Запрос.Выполнить().Выгрузить().Итог("ОстатокНаКонец");
		
		НаборДвижений.Свернуть("Дата, ДокументРегистратор, ДоговорКонтрагента, Представление, Валюта","Дебет, Кредит, ВалютнаяСумма, СуммаНепокрытая,СуммаЛимита,СуммаДолгаПросрочено");
		
		Для каждого СтрокаДвижений Из НаборДвижений Цикл
			Если СтрокаДвижений.ВалютнаяСумма > 0 Тогда
				СтрокаДвижений.Представление = СтрокаДвижений.Представление 
				+ " (" + Формат(СтрокаДвижений.ВалютнаяСумма, "ЧЦ=15; ЧДЦ=2") + " " + Строка(СтрокаДвижений.Валюта) + ")";
			ИначеЕсли СтрокаДвижений.ВалютнаяСумма < 0 Тогда
				Множитель = ?( (СтрокаДвижений.Дебет + СтрокаДвижений.Кредит) > 0, -1, 1);
				СтрокаДвижений.Представление = СтрокаДвижений.Представление
				+ " (" + Формат(Множитель * СтрокаДвижений.ВалютнаяСумма, "ЧЦ=15; ЧДЦ=2") + " " + Строка(СтрокаДвижений.Валюта) + ")";
			КонецЕсли;
		КонецЦикла; 
		
		НаборДвижений.Сортировать("Дата, ДокументРегистратор, Представление");	
		
		//ПоДаннымОрганизации.Загрузить(НаборДвижений);
		
		Возврат новый Структура("Таблица, ОстатокНаНачало, ОстатокНаКонец", НаборДвижений, ОстатокНаНачало, ОстатокНаКонец);
		
	КонецФункции
	
	Процедура ПечатьДебиторки(ТабДокумент) экспорт
		
		СписокСчетовСтрока = "";
		Для каждого СтрокаСчета Из СписокСчетов Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаСчета.Счет) или СтрокаСчета.УчаствуетВРасчетах = Ложь Тогда
				Продолжить;
			Иначе
				СписокСчетовСтрока = СписокСчетовСтрока + ?(ПустаяСтрока(СписокСчетовСтрока), "", ", ") + Строка(СтрокаСчета.Счет);
			КонецЕсли; 
		КонецЦикла; 
		
		ФильтрСписокСчетов = ПолучитьМассивСчетов("Хозрасчетный", СписокСчетовСтрока);
		
		Если ФильтрСписокСчетов.Количество() = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю("Неверно задан список счетов, по которым производится сверка!",,,СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ТабДокумент.Очистить();
		
		макет = ПолучитьМакет("ДебиторскаяЗадолженность");
		
		область = макет.ПолучитьОбласть("Заголовок");
		область.Параметры.Стахователь = Организация.НаименованиеПолное;
		область.Параметры.ДоговорСтрахования = ДоговорСтрахования;
		область.Параметры.ДатаНачала = формат(ДатаНачала, "ДФ=dd.MM.yyyy");
		область.Параметры.ДатаОкончания = формат(ДатаОкончания, "ДФ=dd.MM.yyyy");
		ТабДокумент.Вывести(область);
		
		область = макет.ПолучитьОбласть("Шапка");
		ТабДокумент.Вывести(область);
		
		Если Контрагенты.Количество() = 0 Тогда
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ХозрасчетныйОбороты.Субконто1 КАК Контрагент
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Обороты(
			|			&ДатаНачала,
			|			&ДатаОкончания,
			|			Регистратор,
			|			Счет В (&ФильтрСписокСчетов),
			|			&АналитикаРасчетов,
			|			Организация = &Организация
			|				И НЕ Субконто2.гф_Сезон = ЗНАЧЕНИЕ(Справочник.КоллекцииНоменклатуры.ПустаяСсылка),
			|			,
			|			) КАК ХозрасчетныйОбороты
			|ГДЕ
			|	НЕ(ХозрасчетныйОбороты.СуммаОборотДт = 0
			|				И ХозрасчетныйОбороты.СуммаОборотКт = 0)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Контрагент
			|АВТОУПОРЯДОЧИВАНИЕ");
			
			запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
			запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));
			запрос.УстановитьПараметр("ФильтрСписокСчетов", ФильтрСписокСчетов);
			запрос.УстановитьПараметр("Организация", Организация);
			
			АналитикаРасчетов = новый Массив();
			АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
			АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
			запрос.УстановитьПараметр("АналитикаРасчетов", АналитикаРасчетов);
			Контрагенты.ЗагрузитьЗначения(запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент"));
		КонецЕсли;
		
		НомерСтроки = 0;
		соответствие = новый  Соответствие;
		ИтогоДЗНачало = 0;
		ИтогоСуммаСчета = 0;
		ИтогоСуммаСчетаНепокрытая = 0;
		ИтогоСуммаСписания = 0;
		ИтогоДЗКонец = 0; 
		ИтогоСуммаДолгаПросрочено=0;
		ИтогоСуммаЛимита=0;
		
		Для каждого строка Из Контрагенты Цикл
			Контрагент = строка.Значение;
			#Если Клиент ТОгда
				Состояние("" + Контрагент);
			#КонецЕсли
			
			данные = ЗаполнитьПоДаннымБухгалтерскогоУчета(Контрагент, ФильтрСписокСчетов);
			
			НомерСтроки = НомерСтроки + 1;
			
			Таблица = данные.Таблица;
			ОстатокНаНачало = данные.ОстатокНаНачало;
			ОстатокНаКонец = данные.ОстатокНаКонец;
			
			Если Таблица.Количество() = 0 и ОстатокНаНачало = 0 и ОстатокНаКонец = 0 Тогда
				область = макет.ПолучитьОбласть("строка");
				область.Параметры.НомерСтроки = НомерСтроки;
				область.Параметры.Покупатель = Контрагент;
				ТабДокумент.Вывести(область);
				
				область = макет.ПолучитьОбласть("СтрокаИтог");
				ТабДокумент.Вывести(область);
				
				Продолжить;
			КонецЕсли;
			
			Если Таблица.Количество() = 0 Тогда
				Таблица.Добавить();
			КонецЕсли;
			
			строка = Таблица[0];
			область = макет.ПолучитьОбласть("строка");
			
			область.Параметры.НомерСтроки = НомерСтроки;
			область.Параметры.Покупатель = Контрагент;
			
			Если не строка.Дебет = 0 Тогда
				область.Параметры.СуммаСчета = строка.Дебет;
			КонецЕсли; 
			Область.Параметры.ЛимитНаДатуОтчета=строка.СуммаЛимита;
			Если НЕ СтрНайти(Строка(строка.ДокументРегистратор),"<Объект не найден>") > 0 и  НЕ строка.ДокументРегистратор= неопределено Тогда
				КоличествоДнейОтсрочки = ПолучитьДниОтсрочки(строка.ДокументРегистратор.Договор, соответствие); 
			Иначе 
				КоличествоДнейОтсрочки = 0;
			КонецЕсли;
			область.Параметры.ДЗКонец  =ОстатокНаКонец; 
			область.Параметры.СуммаПросроченная=строка.СуммаДолгаПросрочено; 
			Если ЗначениеЗаполнено(строка.СуммаДолгаПросрочено) И ЗначениеЗаполнено(ОстатокНаКонец) Тогда
				область.Параметры.СуммаНеПросроченная = Данные.ОстатокНаКонец - строка.СуммаДолгаПросрочено;
			Иначе 
				область.Параметры.СуммаНеПросроченная = 0;
			КонецЕсли;  
			Если  	КоличествоДнейОтсрочки<=30 Тогда
				область.Параметры.ДолгДо30 = строка.СуммаДолгаПросрочено;
				область.Параметры.ДолгДо60 =0;
				область.Параметры.ДолгДо90 =0;
				область.Параметры.ДолгДо120 =0;
				область.Параметры.ДолгДо180 =0;
				область.Параметры.ДолгСвыше180=0;
			ИначеЕсли КоличествоДнейОтсрочки>=31 И КоличествоДнейОтсрочки>=60 Тогда  
				область.Параметры.ДолгДо30 = 0;
				область.Параметры.ДолгДо60 =строка.СуммаДолгаПросрочено;
				область.Параметры.ДолгДо90 =0;
				область.Параметры.ДолгДо120 =0;
				область.Параметры.ДолгДо180 =0;
				область.Параметры.ДолгСвыше180=0;
			ИначеЕсли КоличествоДнейОтсрочки>=61 И КоличествоДнейОтсрочки>=90 Тогда  
				область.Параметры.ДолгДо30 = 0;
				область.Параметры.ДолгДо60 =0;
				область.Параметры.ДолгДо90 =строка.СуммаДолгаПросрочено;
				область.Параметры.ДолгДо120 =0;
				область.Параметры.ДолгДо180 =0;
				область.Параметры.ДолгСвыше180=0;
			ИначеЕсли КоличествоДнейОтсрочки>=91 И КоличествоДнейОтсрочки>=120 Тогда  
				область.Параметры.ДолгДо30 = 0;
				область.Параметры.ДолгДо60 =0;
				область.Параметры.ДолгДо90 =0;
				область.Параметры.ДолгДо120 =строка.СуммаДолгаПросрочено;
				область.Параметры.ДолгДо180 =0;
				область.Параметры.ДолгСвыше180=0;
			ИначеЕсли КоличествоДнейОтсрочки>=121 И КоличествоДнейОтсрочки>=180 Тогда  
				область.Параметры.ДолгДо30 = 0;
				область.Параметры.ДолгДо60 =0;
				область.Параметры.ДолгДо90 =0;
				область.Параметры.ДолгДо120 =0;
				область.Параметры.ДолгДо180 =строка.СуммаДолгаПросрочено;
				область.Параметры.ДолгСвыше180=0;
			ИначеЕсли КоличествоДнейОтсрочки>=181 Тогда  
				область.Параметры.ДолгДо30 = 0;
				область.Параметры.ДолгДо60 =0;
				область.Параметры.ДолгДо90 =0;
				область.Параметры.ДолгДо120 =0;
				область.Параметры.ДолгДо180 =0;
				область.Параметры.ДолгСвыше180=строка.СуммаДолгаПросрочено;
			КонецЕсли;
			ТабДокумент.Вывести(область);
			
			СуммаСчета = Таблица.Итог("Дебет");
			СуммаДолгаПросрочено = Таблица.Итог("СуммаДолгаПросрочено");
			СуммаЛимита = Таблица.Итог("СуммаЛимита");
			
			ИтогоСуммаСчета = ИтогоСуммаСчета + СуммаСчета;
			ИтогоСуммаДолгаПросрочено = ИтогоСуммаДолгаПросрочено + СуммаДолгаПросрочено;
			ИтогоСуммаЛимита = ИтогоСуммаЛимита + СуммаЛимита;
			ИтогоДЗКонец = ИтогоДЗКонец + ОстатокНаКонец; 
		КонецЦикла;
		
		область = макет.ПолучитьОбласть("Итог");
		область.Параметры.ИтогоСуммаСчета = ИтогоСуммаСчета;
		Если ЗначениеЗаполнено(ИтогоДЗКонец) И ЗначениеЗаполнено(ИтогоСуммаДолгаПросрочено) Тогда
			область.Параметры.ИтогоНеПросроченная = ИтогоДЗКонец- ИтогоСуммаДолгаПросрочено;    
		КонецЕсли;;
		область.Параметры.ИтогоЛимита = ИтогоСуммаЛимита; 
		область.Параметры.ИтогоПросроченная	 =ИтогоСуммаДолгаПросрочено;
		область.Параметры.ИтогоДЗКонец = ИтогоДЗКонец; 
		Если  	КоличествоДнейОтсрочки<=30 Тогда
			область.Параметры.ИтогДолгаДо30 = ИтогоСуммаДолгаПросрочено;
			область.Параметры.ИтогДолга60 =0;
			область.Параметры.ИтогДолга90 =0;
			область.Параметры.ИтогДолга120 =0;
			область.Параметры.ИтогДолга180 =0;
			область.Параметры.ИтогдолгаСвыше180=0;
		ИначеЕсли КоличествоДнейОтсрочки>=31 И КоличествоДнейОтсрочки>=60 Тогда  
			область.Параметры.ИтогДолга30 = 0;
			область.Параметры.ИтогДолга60 =ИтогоСуммаДолгаПросрочено;
			область.Параметры.ИтогДолга90 =0;
			область.Параметры.ИтогДолга120 =0;
			область.Параметры.ИтогДолга180 =0;
			область.Параметры.ИтогдолгаСвыше180=0;
		ИначеЕсли КоличествоДнейОтсрочки>=61 И КоличествоДнейОтсрочки>=90 Тогда  
			область.Параметры.ИтогДолга30 = 0;
			область.Параметры.ИтогДолга60 =0;
			область.Параметры.ИтогДолга90 =ИтогоСуммаДолгаПросрочено;
			область.Параметры.ИтогДолга120 =0;
			область.Параметры.ИтогДолга180 =0;
			область.Параметры.ИтогдолгаСвыше180=0;
		ИначеЕсли КоличествоДнейОтсрочки>=91 И КоличествоДнейОтсрочки>=120 Тогда  
			область.Параметры.ИтогДолга30 = 0;
			область.Параметры.ИтогДолга60 =0;
			область.Параметры.ИтогДолга90 =0;
			область.Параметры.ИтогДолга120 =ИтогоСуммаДолгаПросрочено;
			область.Параметры.ИтогДолга180 =0;
			область.Параметры.ИтогдолгаСвыше180=0;
		ИначеЕсли КоличествоДнейОтсрочки>=121 И КоличествоДнейОтсрочки>=180 Тогда  
			область.Параметры.ИтогДолга30 = 0;
			область.Параметры.ИтогДолга60 =0;
			область.Параметры.ИтогДолга90 =0;
			область.Параметры.ИтогДолга120 =0;
			область.Параметры.ИтогДолга180 =ИтогоСуммаДолгаПросрочено;
			область.Параметры.ИтогдолгаСвыше180=0;
		ИначеЕсли КоличествоДнейОтсрочки>=181 Тогда  
			область.Параметры.ИтогДолга30 = 0;
			область.Параметры.ИтогДолга60 =0;
			область.Параметры.ИтогДолга90 =0;
			область.Параметры.ИтогДолга120 =0;
			область.Параметры.ИтогДолга180 =0;
			область.Параметры.ИтогдолгаСвыше180=ИтогоСуммаДолгаПросрочено;
		КонецЕсли;
		
		ТабДокумент.Вывести(область);
		
		область = макет.ПолучитьОбласть("Подвал");
		
		Область.Параметры.ДатаПодписи=Формат(ДатаОкончания ,"ДФ=dd.MM.yy"); 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтветственныеЛицаОрганизаций.Ссылка КАК Ссылка,
		|	ОтветственныеЛицаОрганизаций.Должность КАК Должность,
		|	ОтветственныеЛицаОрганизаций.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	Справочник.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаОрганизаций
		|ГДЕ
		|	ОтветственныеЛицаОрганизаций.ОтветственноеЛицо = &ОтветственноеЛицо
		|	И ОтветственныеЛицаОрганизаций.Владелец = &Владелец";
		
		Запрос.УстановитьПараметр("Владелец", Организация);
		Запрос.УстановитьПараметр("ОтветственноеЛицо", Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		Если РезультатЗапроса.Количество()<>0 Тогда
			запись  = РезультатЗапроса[0]; 
		Иначе 
			область.Параметры.Должность = "";
			область.Параметры.ГД = "";
		КонецЕсли;
		
		Если Запись<>Неопределено Тогда  
			
			область.Параметры.Должность = запись.Должность;
			ФизическоеЛицо = запись.ФизическоеЛицо;
			запись = РегистрыСведений.ФИОФизическихЛиц.ПолучитьПоследнее(ДатаОкончания, новый Структура("ФизическоеЛицо", запись.ФизическоеЛицо));
			область.Параметры.ГД = запись.Фамилия + " " + ?(СтрДлина(запись.Имя) > 0, лев(запись.Имя, 1) + ".", "") + ?(СтрДлина(запись.Отчество) > 0, лев(запись.Отчество, 1) + ".", "");  
		КонецЕсли;
		
		ТабДокумент.Вывести(область);
		
	КонецПроцедуры
	
	#КонецОбласти
	
	МетаданныеПоДокументам = Новый Соответствие();
	
#КонецЕсли