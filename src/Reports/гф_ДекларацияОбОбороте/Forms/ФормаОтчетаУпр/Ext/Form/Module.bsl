Перем МетаданныеПоДокументам;

&НаСервере
Процедура СформироватьНаСервере()
	Документ=РеквизитФормыВЗначение("Отчет"); 
	Если НЕ ДекларацияОДебиторскойЗадолженности Тогда
		Документ.Печать(ТабДокумент);
	Иначе
		Документ.ПечатьДебиторки(ТабДокумент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	СформироватьНаСервере();
КонецПроцедуры
&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", Отчет.ДатаНачала, Отчет.ДатаОкончания);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Отчет.ДатаНачала=РезультатВыбора.НачалоПериода;
	Отчет.ДатаОкончания= РезультатВыбора.КонецПериода;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьСчета();  
	Отчет.Контрагенты.ТипЗначения=Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
КонецПроцедуры 

Процедура ЗаполнитьСчета()
	
	Отчет.СписокСчетов.Очистить();
	
	новая = Отчет.СписокСчетов.Добавить();
	новая.Счет = ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками;
	новая.УчаствуетВРасчетах = Истина;
	
	новая = Отчет.СписокСчетов.Добавить();
	новая.Счет = ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками;
	новая.УчаствуетВРасчетах = Истина;
	
	новая = Отчет.СписокСчетов.Добавить();
	новая.Счет = ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам;
	новая.УчаствуетВРасчетах = Истина;
	
	новая = Отчет.СписокСчетов.Добавить();
	новая.Счет = ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам;
	новая.УчаствуетВРасчетах = Истина;
	
	новая = Отчет.СписокСчетов.Добавить();
	новая.Счет = ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами;
	новая.УчаствуетВРасчетах = Истина;
	
КонецПроцедуры 

Функция ЭтоДокументДвиженияДенежныхСредств(ДокументСсылка)
	
	ТипДокумента = ТипЗнч(ДокументСсылка);
	
	Результат = 
	ТипДокумента = Тип("ДокументСсылка.АвансовыйОтчет")
	ИЛИ ТипДокумента = Тип("ДокументСсылка.АккредитивПереданный")
	ИЛИ ТипДокумента = Тип("ДокументСсылка.АккредитивПолученный")
	ИЛИ ТипДокумента = Тип("ДокументСсылка.ИнкассовоеПоручениеПереданное")
	ИЛИ ТипДокумента = Тип("ДокументСсылка.ИнкассовоеПоручениеПолученное")
	ИЛИ ТипДокумента = Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой")
	ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")
	ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее")
	ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежноеТребованиеВыставленное")
	ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежноеТребованиеПолученное")
	ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств")
	ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств")
	ИЛИ ТипДокумента = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
	ИЛИ ТипДокумента = Тип("ДокументСсылка.РасходныйКассовыйОрдер");
	
	Возврат Результат;
	
КонецФункции 

&НаКлиенте
Процедура ДоговорСтрахованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;   
	
	Отбор = Новый Структура;
	Партнер=ПолучитьПартнераПоКонтрагенту(Отчет.Страхователь);
	Отбор.Вставить("Партнер", Партнер);
	Если ЗначениеЗаполнено(отчет.Организация) Тогда
		Отбор.Вставить("Организация", отчет.Организация); 
	КонецЕсли;
	ПараметрыФормы = Новый Структура("Отбор", Отбор);   
	Оповещение = Новый ОписаниеОповещения("ПеренестиВыбранныйДоговор", ЭтотОбъект);
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, , , , , Оповещение); 
	
КонецПроцедуры  

&НаСервереБезКонтекста
Функция ПолучитьПартнераПоКонтрагенту(Контрагент) 
	Возврат Контрагент.Партнер
КонецФункции
&НаКлиенте
Процедура ПеренестиВыбранныйДоговор(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		отчет.ДоговорСтрахования = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекларацияОДебиторскойЗадолженностиПриИзменении(Элемент)
	Отчет.Контрагенты.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Отчет.Контрагенты.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура СтраховательПриИзменении(Элемент)
	Отчет.Контрагенты.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ДоговорСтрахованияПриИзменении(Элемент)
	Отчет.Контрагенты.Очистить();
КонецПроцедуры

МетаданныеПоДокументам = Новый Соответствие();
