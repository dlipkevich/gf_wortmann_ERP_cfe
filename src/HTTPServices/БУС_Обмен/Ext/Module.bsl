#Область JSON

// Получить из текста JSON структуру.
// 
// Параметры:
// 	ТекстJSON                    - Строка - Текст JSON.
// 	ПреобразовыватьВСоответствие - Булево - Признак преобразования в соответствие.
// Возвращаемое значение:
// 	Структура, Неопределено - Результат преобразования JSON.
Функция ТекстJSONВОбъект(ТекстJSON, ПреобразовыватьВСоответствие = Ложь ,СвойстваДата="") Экспорт
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(ТекстJSON);
	
	Попытка
		РезультатРазбора = ПрочитатьJSON(Чтение, ПреобразовыватьВСоответствие, СвойстваДата);
	Исключение
		РезультатРазбора = Неопределено;
	КонецПопытки;
	
	Возврат РезультатРазбора;
	
КонецФункции

// Формирует из структуры текст JSON
// 
// Параметры:
// 	Структура - Структура - Произвольная структура данных
// Возвращаемое значение:
// 	Строка - Текст JSON
Функция ОбъектВТекстJSON(Структура, УдалитьПробелыИПереносыСтрок = Ложь) Экспорт
	
	Если УдалитьПробелыИПереносыСтрок Тогда
		ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, "");
	Иначе
		ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, "  ");
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	ЗаписатьJSON(ЗаписьJSON, Структура);
	
	ТекстJSON = ЗаписьJSON.Закрыть();
	
	Возврат ТекстJSON;
	
КонецФункции

#КонецОбласти

Функция TestGet(Запрос)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("Result");
	ЗаписьJSON.ЗаписатьЗначение(True);
	ЗаписьJSON.ЗаписатьКонецОбъекта();	
	
	ТекстОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");	
	Ответ.УстановитьТелоИзСтроки(ТекстОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	
КонецФункции

Функция GetAvailableStockInformationGet(Запрос)
	
	ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку("UTF-8");
	
	ДанныеОбъекта = ТекстJSONВОбъект(ТелоЗапроса, Истина);
	
	МассивНоменклатуры = Новый Массив;
	
	Данные = ДанныеОбъекта.Получить("XML_ID");
	
	Для Каждого Строка Из Данные Цикл
		XML_ID = Строка;
		мРезультат = СтрРазделить(XML_ID, "#");
		Если мРезультат.Количество()<2 Тогда
			Продолжить;	
		КонецЕсли;
		Гуид = мРезультат.Получить(1);  
		
		//сначала по ГУИДу ищем в Историческом справочнике Номенклатуры
		НоменклатураУПП = Справочники.B2B_СправочникНоменклатураУПП.НайтиПоРеквизиту("GUID",Гуид);
		Если НоменклатураУПП.Пустая() Тогда
			//значит это новая номенклатура, ищем по ГУИДу
			Попытка
				Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(Гуид)));
			Исключение
				Продолжить;	
			КонецПопытки;                                 
		Иначе
			//ок, значит сопоставились по справочнику УПП, теперь берем Артикул и находим номенклатуру по артикулу 
			ПозицияДробиВАртикуле = Найти(НоменклатураУПП.Артикул,"/");
			Если ПозицияДробиВАртикуле > 0 Тогда
				АртикулНоменклатурыУПП = Лев(НоменклатураУПП.Артикул,ПозицияДробиВАртикуле-1);
			Иначе
				АртикулНоменклатурыУПП = НоменклатураУПП.Артикул;
			КонецЕсли;
			Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",АртикулНоменклатурыУПП);
			Если Номенклатура.Пустая() Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
			
		МассивНоменклатуры.Добавить(Номенклатура);
	КонецЦикла;
		
	МассивОстатков = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	гф_ДвижениеКодовМаркировкиОрганизацииОстатки.КМ.Номенклатура КАК Номенклатура,
	|	СУММА(гф_ДвижениеКодовМаркировкиОрганизацииОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	гф_ДвижениеКодовМаркировкиОрганизацииОстатки.КМ.Характеристика КАК Характеристика
	|ИЗ
	|	РегистрНакопления.гф_ДвижениеКодовМаркировкиОрганизации.Остатки(
	|			,
	|			КМ.Номенклатура В (&МассивНоменклатуры)
	|				И Склад В
	|					(ВЫБРАТЬ
	|						СкладОстатков.Склад КАК Склад
	|					ИЗ
	|						РегистрСведений.B2B_СоответствиеСкладВидНоменклатуры КАК СкладОстатков)) КАК гф_ДвижениеКодовМаркировкиОрганизацииОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	гф_ДвижениеКодовМаркировкиОрганизацииОстатки.КМ.Номенклатура,
	|	гф_ДвижениеКодовМаркировкиОрганизацииОстатки.КМ.Характеристика";
	
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураОстатки = Новый Структура;
		//СтруктураОстатки.Вставить("XML_ID", XMLСтрока(Выборка.Номенклатура.СЭ_ТипНоменклатуры) + "#" +XMLСтрока(Выборка.Номенклатура));    
		
		//теперь надо обратно заменить идентификаторы если они есть
		//ищем, есть ли у нас такая номенклатура и характеристика в историческом справочнике    
		
		НоменклатураУПП = Справочники.B2B_СЭ_ТипНоменклатуры.НайтиПоРеквизиту("Артикул",Выборка.Номенклатура.Артикул);
		Если НоменклатураУПП.Пустая() Тогда
			ИдНоменклатуры = XMLСтрока(Выборка.Номенклатура);
		Иначе
			ИдНоменклатуры = XMLСтрока(НоменклатураУПП.GUID);	
		КонецЕсли;
		ХарактеристикаУПП = Справочники.B2B_СправочникНоменклатураУПП.НайтиПоРеквизиту("Артикул",Выборка.Номенклатура.Артикул+"/"+Выборка.Характеристика.Наименование);
		Если ХарактеристикаУПП.Пустая() Тогда
			ИдХарактеристики = XMLСтрока(Выборка.Характеристика);
		Иначе
			ИдХарактеристики = XMLСтрока(ХарактеристикаУПП.GUID);	
		КонецЕсли;
		
		СтруктураОстатки.Вставить("XML_ID", ИдНоменклатуры + "#" +ИдХарактеристики);
		СтруктураОстатки.Вставить("COUNT", Выборка.КоличествоОстаток);
		
		МассивОстатков.Добавить(СтруктураОстатки);
	КонецЦикла;
	
	ТекстОтвета = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(МассивОстатков);
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");	
	Ответ.УстановитьТелоИзСтроки(ТекстОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	
КонецФункции

Функция FindCustomerGet(Запрос)
	
	Инн = Запрос.ПараметрыЗапроса.Получить("inn");
	Рез = B2B_ОбщийМодуль.НайтиКонтрагентаНаСервере(ИНН);
	
	Если Рез <> Неопределено Тогда
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();	
		
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("Code");
		ЗаписьJSON.ЗаписатьЗначение(Рез.Код);
		ЗаписьJSON.ЗаписатьИмяСвойства("Name");
		ЗаписьJSON.ЗаписатьЗначение(Рез.Наименование);
		ЗаписьJSON.ЗаписатьИмяСвойства("Guid");
		//ЗаписьJSON.ЗаписатьЗначение(СокрЛП(Рез.Ссылка.УникальныйИдентификатор()));
		ЗаписьJSON.ЗаписатьЗначение(Рез.GUID);
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
		ТекстОтвета = ЗаписьJSON.Закрыть();
		
		Ответ = Новый HTTPСервисОтвет(200);	
		Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
		
		Ответ.УстановитьТелоИзСтроки(ТекстОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Иначе
		
		Ответ = Новый HTTPСервисОтвет(400);
		//Ответ.УстановитьТелоИзСтроки("Контрагент не найден", КодировкаТекста.Системная, ИспользованиеByteOrderMark.НеИспользовать);    
		Ответ.УстановитьТелоИзСтроки("Контрагент не найден", КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

Функция CreateOrUpdateCustomerPost(Запрос)
	Ответ = Новый HTTPСервисОтвет(400);
	Ответ.УстановитьТелоИзСтроки("Контрагент не найден");
	Возврат Ответ;
КонецФункции

Функция CheckOrCreateOrderPost(Запрос)
	
	ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку("UTF-8");
	
	ДанныеЗаказа = ТекстJSONВОбъект(ТелоЗапроса, Истина);
	
	НомерБ2Б = ДанныеЗаказа.Получить("ORDER_ID");
	
	ЗаписьЖурналаРегистрации("ОбменB2B.CheckOrCreateOrder", УровеньЖурналаРегистрации.Информация,,,"Получен заказ № " + НомерБ2Б);
	Если ПолучитьЗаказПоНомеруБ2Б(НомерБ2Б) <> Неопределено Тогда
		ЗаписьЖурналаРегистрации("ОбменB2B.CheckOrCreateOrder", УровеньЖурналаРегистрации.Информация,,,"Заказ с номером: " + НомерБ2Б + " уже загружен");
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.УстановитьТелоИзСтроки("Заказ с номером: " + НомерБ2Б + " уже загружен");
		
		Возврат Ответ;

	КонецЕсли;
	
	РезультатЗД = ОбработатьЗагруженныеДанные(ДанныеЗаказа);
	ЗаписьЖурналаРегистрации("ОбменB2B.CheckOrCreateOrder", УровеньЖурналаРегистрации.Информация,,,"Данные запроса успешно обработаны, начинается создание документов");
	
	Результат = СоздатьЗаказПокупателя(РезультатЗД);
	
	ЗаписьЖурналаРегистрации("ОбменB2B.CheckOrCreateOrder", УровеньЖурналаРегистрации.Информация,,,"Создано документов " + Результат.Документ.Количество());
	
	Если Результат.Документ.Количество()=0 Тогда		
		
		ЗаписьЖурналаРегистрации("ОбменB2B.CheckOrCreateOrder", УровеньЖурналаРегистрации.Ошибка,,,Результат.ТекстОшибки);
		
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.УстановитьТелоИзСтроки(Результат.ТекстОшибки);
		
		Возврат Ответ;
		
	КонецЕсли;
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");
	
	МассивВыгруженных = ВыгрузитьДокументы(Результат.Документ);
	
	ТекстОтвета = ОбъектВТекстJSON(МассивВыгруженных);
	
	Ответ.УстановитьТелоИзСтроки(ТекстОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	
КонецФункции

Функция СоздатьЗаказПокупателя(ДанныеЗаказа)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Документ", Новый Массив());
	ВозвращаемоеЗначение.Вставить("ТекстОшибки", "");
	
	ЕстьОшибки = Ложь;
	ОписаниеОшибки = "";
			
	СвойствоДатаНачалаСкидки = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Дата начала действия");
	СвойствоДатаОкончанияСкидки = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Дата окончания действия");
	СвойствоСкидкаНоменклатуры = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Размер скидки");
	СвойствоВидСкидкиСклада = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("B2B_ВидСкидкиДляСклада");
	СвойствоРазмерМаксимальнойСкидки = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("B2B_РазмерМаксимальнойСкидки");		
	
	НомерБ2Б = ДанныеЗаказа.НомерБ2Б;
	ИмяЗаказа = ДанныеЗаказа.ИмяЗаказа;
 
	Комментарий = "";
	Если ЗначениеЗаполнено(ДанныеЗаказа.Комментарий) Тогда
		Комментарий = ДанныеЗаказа.Комментарий;
	КонецЕсли;  

	КонтактноеЛицо = ДанныеЗаказа.КонтактноеЛицо;
	Шапка = ДанныеЗаказа.Шапка;
	Тч = ДанныеЗаказа.Тч;
	ЗаписьЖурналаРегистрации("ОбменB2B.CheckOrCreateOrder", УровеньЖурналаРегистрации.Информация,,,"Начало цикла создания документов");
			
	Для Каждого СтрокаШапка из Шапка Цикл
		Заказ = Документы.ЗаказКлиента.СоздатьДокумент();
		Заказ.RC_ИмяЗаказа = ИмяЗаказа;
		Заказ.Дата = ТекущаяДата();
	//	Заказ.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ПродажаКомиссия;
	//уточнить где взять организацию
		//Заказ.Организация = Константы.ОрганизацияДляОбменаДанными.Получить();
		Заказ.Склад = СтрокаШапка.Склад;
		//Заказ.АдресДоставкиНовый = СтрокаШапка.АдресДоставки;
		Заказ.АдресДоставки = СтрокаШапка.АдресДоставки;
		Заказ.Контрагент  = СтрокаШапка.АдресДоставки.Владелец;
		Заказ.Партнер  = Заказ.Контрагент.Партнер;
		//Заказ.КодКонтрагента = Заказ.Контрагент.Код;
		//Заказ.КонтактноеЛицоКонтрагента = КонтактноеЛицо;
		Заказ.КонтактноеЛицо = КонтактноеЛицо;
				
		//Заказ.ДоговорКонтрагента = ПолучитьДоговор(Заказ.Контрагент, Заказ.Организация);
		Заказ.Договор = ПолучитьДоговор(Заказ.Контрагент, Заказ.Организация);
		
		Заказ.B2B_Сезон = Заказ.Договор.гф_Сезон;

		Заказ.гф_ВидЦены = Справочники.B2B_w_Настройки.ТипЦенОптовая.Значение;
		
		//Заказ.ОтражатьВБухгалтерскомУчете = Истина;
		//Заказ.ОтражатьВНалоговомУчете = Истина;
			
		//Заказ.Организация = Константы.ОрганизацияДляОбменаДанными.Получить();
		//УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Заказ.Дата, Заказ.Организация);
		//Если ЗначениеЗаполнено(УчетнаяПолитика) И (УчетнаяПолитика.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая) тогда
		Заказ.ЦенаВключаетНДС=Истина;
		//КонецЕсли;
		
		//Заказ.ПриИзмененииДоговора();
		
		Заказ.УстановитьНовыйНомер("BB");
		
		Заказ.Комментарий = Комментарий;
		Заказ.Автор = ПараметрыСеанса.ТекущийПользователь;
		 
		ЗаписьЖурналаРегистрации("ОбменB2B.CheckOrCreateOrder", УровеньЖурналаРегистрации.Информация,,,"Блок скидки 1 начало");
        //1БЦ++ МГ 31839
		РучнаяСкидка = 0;		
		СкидкиСкорректированыПоМаксимальной = Ложь;	
		
		ВидСкидкиСклада = B2B_ОбщиеПроцедурыИФункции.ПолучитьЗначениеСвойства(СтрокаШапка.Склад,СвойствоВидСкидкиСклада);  
		МаксимальнаяСкидка = B2B_ОбщиеПроцедурыИФункции.ПолучитьЗначениеСвойства(Заказ.Организация,СвойствоРазмерМаксимальнойСкидки);  
		Если СокрЛП(ВидСкидкиСклада) = "Обувь" Тогда
			РучнаяСкидка = B2B_ОбщиеПроцедурыИФункции.ПолучитьСкидкуПоДоговоруНаДату(Заказ.ДоговорКонтрагента, Заказ.B2B_Сезон, Заказ.Дата, Справочники.w_ТипыСкидок.НайтиПоНаименованию("b2b скидка клиента для обуви"));   	
		ИначеЕсли СокрЛП(ВидСкидкиСклада) = "Аксессуары" Тогда
			РучнаяСкидка = B2B_ОбщиеПроцедурыИФункции.ПолучитьСкидкуПоДоговоруНаДату(Заказ.ДоговорКонтрагента, Заказ.B2B_Сезон, Заказ.Дата, Справочники.w_ТипыСкидок.НайтиПоНаименованию("b2b скидка клиента для аксессуаров"));   							
		КонецЕсли;      
		//1БЦ-- МГ 31839		
		ЗаписьЖурналаРегистрации("ОбменB2B.CheckOrCreateOrder", УровеньЖурналаРегистрации.Информация,,,"Блок скидки 1 окончание");
		
		ПоискТЧ = Тч.НайтиСтроки(Новый Структура("АдресДоставки, Склад" , СтрокаШапка.АдресДоставки, СтрокаШапка.Склад));
		Для каждого строка Из ПоискТЧ Цикл
			АвтоматическаяСкидка = 0;
			РучнаяСкидкаИзм = 0;
			новая = Заказ.Товары.Добавить();
			новая.Номенклатура = строка.Номенклатура;	
			
			//ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(новая, Заказ);
			//ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(новая, Заказ, "Реализация");
			//новая.ЕдиницаИзмерения = строка.Номенклатура.ЕдиницаХраненияОстатков;
			//ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(новая, Заказ, Заказ.мВалютаРегламентированногоУчета);
			
			новая.Количество = строка.Количество;
			
			ЗаписьЖурналаРегистрации("ОбменB2B.CheckOrCreateOrder", УровеньЖурналаРегистрации.Информация,,,"Блок скидки 2 начало");
			//1БЦ++ МГ 31839
			ДатаНачалаСкидки = B2B_ОбщиеПроцедурыИФункции.ПолучитьЗначениеСвойства(новая.Номенклатура,СвойствоДатаНачалаСкидки);
			ДатаОкончанияСкидки = B2B_ОбщиеПроцедурыИФункции.ПолучитьЗначениеСвойства(новая.Номенклатура,СвойствоДатаОкончанияСкидки);
			Если ТипЗнч(ДатаНачалаСкидки) = Тип("Строка") Тогда
				ДатаНачалаСкидки = Дата(ДатаНачалаСкидки+" 0:00:00");		
			КонецЕсли;
			Если ТипЗнч(ДатаОкончанияСкидки) = Тип("Строка") Тогда
				ДатаОкончанияСкидки = Дата(ДатаОкончанияСкидки+" 23:59:59");		
			КонецЕсли;
			Если ДатаНачалаСкидки<>Неопределено и ДатаОкончанияСкидки<>Неопределено и Заказ.Дата>=ДатаНачалаСкидки и Заказ.Дата<=ДатаОкончанияСкидки Тогда				
				АвтоматическаяСкидка = B2B_ОбщиеПроцедурыИФункции.ПолучитьЗначениеСвойства(новая.Номенклатура,СвойствоСкидкаНоменклатуры);
				Если АвтоматическаяСкидка = Неопределено Тогда
					АвтоматическаяСкидка = 0;	
				КонецЕсли;
			КонецЕсли;
			новая.ПроцентРучнойСкидки = РучнаяСкидка;			
			Если МаксимальнаяСкидка<>Неопределено Тогда 
				Если РучнаяСкидка+АвтоматическаяСкидка > МаксимальнаяСкидка Тогда 
					СкидкиСкорректированыПоМаксимальной = Истина;
					Разница = РучнаяСкидка + АвтоматическаяСкидка - МаксимальнаяСкидка;
					РучнаяСкидкаИзм = РучнаяСкидка - Разница;
					Если РучнаяСкидкаИзм<0 Тогда 
						АвтоматическаяСкидка = АвтоматическаяСкидка+РучнаяСкидкаИзм;
						РучнаяСкидкаИзм = 0;
					КонецЕсли;								
					новая.ПроцентРучнойСкидки = РучнаяСкидкаИзм;
				КонецЕсли;       
			КонецЕсли;			
			новая.ПроцентАвтоматическойСкидки = АвтоматическаяСкидка;	
			
			ЗаписьЖурналаРегистрации("ОбменB2B.CheckOrCreateOrder", УровеньЖурналаРегистрации.Информация,,,"Блок скидки 2 окончание");
			
			//ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(новая, Заказ);
			//ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(новая, Заказ);
			
			//надо сделать заполнение цены-суммы и прочих полей
		КонецЦикла;
		
		Если СкидкиСкорректированыПоМаксимальной Тогда
			Заказ.Комментарий = Заказ.Комментарий+" ***Скидки скорректированы с учетом максимальной!";
		КонецЕсли; 
		
		//Заказ.СуммаДокумента = Заказ.ПолучитьСуммуСНДС();
		
		//С Суммой чтото не очень понятно
		
		//1БЦ++ АК 31929 - заполнение размещения по наличию на складе с учетом резерва
		Попытка
			мТов = Заказ.Товары.Выгрузить();
			//мТов.Колонки.Удалить("Размещение");
				
			Запрос = Новый Запрос();
			Запрос.Текст = "ВЫБРАТЬ
			               |	ЗаказПокупателяТовары.*
			               |ПОМЕСТИТЬ ТаблТов
			               |ИЗ
			               |	&ЗаказПокупателяТовары КАК ЗаказПокупателяТовары
			               |ИНДЕКСИРОВАТЬ ПО
			               |	ЗаказПокупателяТовары.Номенклатура,
			               |	ЗаказПокупателяТовары.Характеристика
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ТаблТов.Номенклатура КАК Номенклатура,
			               |	ТаблТов.Характеристика КАК Характеристика,
			               |	СУММА(ТоварыВРезервеНаСкладахОстатки.ВРезервеОстаток) КАК КоличествоВРезерве,
			               |	СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток) КАК КоличествоОстаток
			               |ПОМЕСТИТЬ ТаблОст
			               |ИЗ
			               |	ТаблТов КАК ТаблТов
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
			               |				&Дата,
			               |				Склад = &Склад
			               |					И Номенклатура В
			               |						(ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |							ТаблТов.Номенклатура
			               |						ИЗ
			               |							ТаблТов)) КАК ТоварыНаСкладахОстатки
			               |		ПО ТаблТов.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
			               |			И ТаблТов.Характеристика = ТоварыНаСкладахОстатки.Характеристика
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОтгрузке.Остатки(
			               |				&Дата,
			               |				Склад = &Склад
			               |					И Номенклатура В
			               |						(ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |							ТаблТов.Номенклатура
			               |						ИЗ
			               |							ТаблТов)) КАК ТоварыВРезервеНаСкладахОстатки
			               |		ПО ТаблТов.Характеристика = ТоварыВРезервеНаСкладахОстатки.Характеристика
			               |			И ТаблТов.Номенклатура = ТоварыВРезервеНаСкладахОстатки.Номенклатура
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ТаблТов.Номенклатура,
			               |	ТаблТов.Характеристика
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
						   |	ТаблТов.*,
						   |	ВЫБОР
						   |	КОГДА ТаблТов.Количество <= ЕСТЬNULL(ТаблОст.КоличествоОстаток, 0) - ЕСТЬNULL(ТаблОст.КоличествоВРезерве, 0)
						   |		ТОГДА &Склад
						   |	ИНАЧЕ НЕОПРЕДЕЛЕНО
						   |КОНЕЦ КАК Размещение
						   |ИЗ
						   |	ТаблТов КАК ТаблТов
						   |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблОст КАК ТаблОст
			               |		ПО ТаблТов.Номенклатура = ТаблОст.Номенклатура
			               |			И ТаблТов.Характеристика = ТаблОст.Характеристика";
			Запрос.УстановитьПараметр("Склад",Заказ.Склад);
			Запрос.УстановитьПараметр("Дата",Заказ.Дата);
			Запрос.УстановитьПараметр("ЗаказПокупателяТовары",мТов);
			Заказ.Товары.Загрузить(Запрос.Выполнить().Выгрузить());	
		Исключение
			Сообщение="Ошибка заполнения резерва";				
			ЗаписьЖурналаРегистрации("ОбменB2B.CheckOrCreateOrder", УровеньЖурналаРегистрации.Информация, , , Сообщение);						
		КонецПопытки;
		//1БЦ--
		
		
		ЗаписьЖурналаРегистрации("ОбменB2B.CheckOrCreateOrder", УровеньЖурналаРегистрации.Информация,,,"Начало записи загруженного документа");
		Попытка
			Заказ.ОбменДанными.Загрузка = Истина;
			Заказ.Записать();
			ЗаписьЖурналаРегистрации("ОбменB2B.CheckOrCreateOrder", УровеньЖурналаРегистрации.Информация,,,"Документ записан");
			
			МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Объект 	= Заказ.Ссылка;
			МенеджерЗаписи.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("B2B_Загружен");
			МенеджерЗаписи.Значение = Истина;
			МенеджерЗаписи.Записать();
			
			МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Объект 	= Заказ.Ссылка;
			МенеджерЗаписи.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("B2B_НомерЗаказа");
			МенеджерЗаписи.Значение = НомерБ2Б;
			МенеджерЗаписи.Записать();
			
			МенеджерЗаписи = РегистрыСведений.B2B_СтатусыЗаказов.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ЗаказПокупателя 	= Заказ.Ссылка;
			МенеджерЗаписи.СтатусЗаказа = Справочники.гф_В2ВСтатусЗаказаКлиента.Новый;
			МенеджерЗаписи.Период = ТекущаяДата();
			МенеджерЗаписи.Записать();
									
			ВозвращаемоеЗначение.Документ.Добавить(Заказ.Ссылка);
		Исключение
			ЕстьОшибки = Истина;
			ОписаниеОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("ОбменB2B.CheckOrCreateOrder", УровеньЖурналаРегистрации.Информация,,,"Документ НЕ записан " + ОписаниеОшибки);		
		КонецПопытки;
		
		//1БЦ++ АК 31929 - попытка проведение заказа при загрузке
		Попытка
			Если НЕ ЕстьОшибки Тогда
				Сообщение="Попытка проведения документа.";				
				ЗаписьЖурналаРегистрации("ОбменB2B.CheckOrCreateOrder", УровеньЖурналаРегистрации.Информация, , , Сообщение);				
				Заказ.ОбменДанными.Загрузка = Ложь; //включаем обычный режим записи
				Заказ.Записать(РежимЗаписиДокумента.Проведение);
				ЗаписьЖурналаРегистрации("ОбменB2B.CheckOrCreateOrder", УровеньЖурналаРегистрации.Информация,Метаданные.Документы.ЗаказПокупателя,Заказ.Ссылка,"Документ проведен при загрузке с сайта!");
			Иначе 
				Сообщение="Документ не проведен при загрузке с сайта (есть ошибки = "+СокрЛП(ЕстьОшибки)+ ": "+ ОписаниеОшибки;				
				ЗаписьЖурналаРегистрации("ОбменB2B.CheckOrCreateOrder", УровеньЖурналаРегистрации.Информация, , , Сообщение);				
			КонецЕсли;			
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("ОбменB2B.CheckOrCreateOrder", УровеньЖурналаРегистрации.Ошибка,Метаданные.Документы.ЗаказКлиента,Заказ.Ссылка,"Проведение заказа при загрузке с сайта произошло с ошибкой:" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
		//1БЦ--
		
		
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		ВозвращаемоеЗначение.ТекстОшибки = ОписаниеОшибки;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПолучитьНоменклатуруПоКоду(Код)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	а.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК а
	|ГДЕ
	|	а.Артикул = &Артикул";
	Запрос.УстановитьПараметр("Артикул", Код);
	Выборка = Запрос.Выполнить().Выбрать();
	Если выборка.Следующий() Тогда
		Возврат Выборка.Номенклатура;	
	КонецЕсли;         
	
	Возврат Неопределено;
	
КонецФункции // ()

Функция ОбработатьЗагруженныеДанные(ДанныеЗаказа)
	
	Результат = Новый Структура("НомерБ2Б, ИмяЗаказа, Комментарий, КонтактноеЛицо, Шапка, Тч");
	
	Шапка = Новый ТаблицаЗначений;
	
	Тч = Новый ТаблицаЗначений;
	Тч.Колонки.Добавить("Сезон");
	Тч.Колонки.Добавить("АдресДоставки");
	Тч.Колонки.Добавить("Склад");
	Тч.Колонки.Добавить("Номенклатура");
	Тч.Колонки.Добавить("Количество");
	
	Для каждого строка Из ДанныеЗаказа.Получить("PRODUCTS") Цикл
		
		XML_ID = строка.Получить("XML_ID");
		мРезультат = СтрРазделить(XML_ID, "#");
		Если мРезультат.Количество()<2 Тогда
			Продолжить;	
		КонецЕсли;
		Гуид = мРезультат.Получить(1); 
		
		//сначала по ГУИДу ищем в Историческом справочнике Номенклатуры
		НоменклатураУПП = Справочники.B2B_СправочникНоменклатураУПП.НайтиПоРеквизиту("GUID",Гуид);
		Если НоменклатураУПП.Пустая() Тогда
			//значит это новая номенклатура, ищем по ГУИДу
			Попытка
				Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(Гуид)));
			Исключение
				Продолжить;	
			КонецПопытки;                                 
		Иначе
			//ок, значит сопоставились по справочнику УПП, теперь берем Артикул и находим номенклатуру по артикулу 
			ПозицияДробиВАртикуле = Найти(НоменклатураУПП.Артикул,"/");
			Если ПозицияДробиВАртикуле > 0 Тогда
				АртикулНоменклатурыУПП = Лев(НоменклатураУПП.Артикул,ПозицияДробиВАртикуле-1);
			Иначе
				АртикулНоменклатурыУПП = НоменклатураУПП.Артикул;
			КонецЕсли;
			Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",АртикулНоменклатурыУПП);
			Если Номенклатура.Пустая() Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		
		СтрокаТч = Тч.Добавить();
		СтрокаТч.Сезон = ПолучитьЗначениеСвойства(Номенклатура, Справочники.B2B_w_Настройки.Свойство_Supplier_season.Значение);
		СтрокаТч.АдресДоставки = Справочники.гф_АдресаДоставки.НайтиПоРеквизиту("GLNНомер", Число(строка.Получить("ADDRESS_XML_ID"))); //Справочники.АдресаДоставки.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(строка.Получить("ADDRESS_XML_ID"))));
		СтрокаТч.Склад = ПолучитьСклад(Номенклатура);
		СтрокаТч.Номенклатура = Номенклатура;
		СтрокаТч.Количество = строка.Получить("QUANTITY");	
		
	КонецЦикла;
	
	Шапка = Тч.Скопировать();
	Шапка.Свернуть("АдресДоставки, Склад");
	
	Результат.НомерБ2Б = ДанныеЗаказа.Получить("ORDER_ID");
	Результат.ИмяЗаказа = ДанныеЗаказа.Получить("NAME_ORDER");
	Результат.Комментарий = ДанныеЗаказа.Получить("COMMENT");
	
	ГуидКЛ = ДанныеЗаказа.Получить("BUYER_XML_ID");
	Результат.КонтактноеЛицо = B2B_ОбщиеПроцедурыИФункции.НайтиОбъект(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("B2B_ИД_КонтактногоЛица"), ГуидКЛ);
	
	Результат.Шапка = Шапка;
	Результат.Тч = Тч;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЗначениеСвойства(Объект, Свойство)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	ЗначенияСвойствОбъектов.Значение
	//|ИЗ
	//|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	//|ГДЕ
	//|	ЗначенияСвойствОбъектов.Свойство = &Свойство
	//|	И ЗначенияСвойствОбъектов.Объект = &Объект";
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗначенияСвойствОбъектов.Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = &Свойство
	|	И ЗначенияСвойствОбъектов.Объект = &Объект";
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Свойство", Свойство);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Значение;
	КонецЕсли;
	
	Возврат Справочники.КоллекцииНоменклатуры.ПустаяСсылка();
	
КонецФункции

Функция ПолучитьДоговор(Контрагент, Организация)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	НЕ ДоговорыКонтрагентов.ПометкаУдаления
	|	И ДоговорыКонтрагентов.Контрагент = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ТипДоговора = &ВидДоговора
	|	И ДоговорыКонтрагентов.ДатаОкончанияДействия >= &ТекущаяДата
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоговорыКонтрагентов.ДатаОкончанияДействия";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);    
	Запрос.УстановитьПараметр("ВидДоговора", Перечисления.ТипыДоговоров.СПокупателем);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Рез = Запрос.Выполнить().Выбрать();
	
	Если Рез.Следующий() Тогда
		Возврат Рез.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();//Контрагент.ОсновнойДоговорКонтрагента;
	
КонецФункции

Функция ПолучитьЗаказПоНомеруБ2Б(Номер)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ЗначенияСвойствОбъектов.Объект КАК Объект
	//|ИЗ
	//|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	//|ГДЕ
	//|	ЗначенияСвойствОбъектов.Свойство = &Свойство
	//|	И ЗначенияСвойствОбъектов.Значение = &Значение"; 
	
	"ВЫБРАТЬ
	|	ЗаказКлиентаДополнительныеРеквизиты.Ссылка КАК Объект
	|ИЗ
	|	Документ.ЗаказКлиента.ДополнительныеРеквизиты КАК ЗаказКлиентаДополнительныеРеквизиты
	|ГДЕ
	|	ЗаказКлиентаДополнительныеРеквизиты.Свойство = &Свойство
	|	И ЗаказКлиентаДополнительныеРеквизиты.Значение = &Значение";
	
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("B2B_НомерЗаказа"));	
	Запрос.УстановитьПараметр("Значение", Номер);
	
	Рез = Запрос.Выполнить().Выбрать();
	
	Если Рез.Следующий() Тогда
		Возврат Рез.Объект;	
	КонецЕсли;
	
	Возврат неопределено;
	
КонецФункции

Функция ПолучитьСклад(Номенклатура)
	
	Результат  = Справочники.Склады.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	B2B_СоответствиеСкладВидНоменклатуры.Склад КАК Склад,
	//|	ВЫБОР КОГДА
	//|			КатегорииОбъектов.Категория ЕСТЬ НЕ NULL
	//|		ТОГДА
	//|			Истина
	//|		ИНАЧЕ
	//|			Ложь
	//|		КОНЕЦ КАК ПарныйСклад
	//|
	//|ИЗ
	//|	РегистрСведений.B2B_СоответствиеСкладВидНоменклатуры КАК B2B_СоответствиеСкладВидНоменклатуры
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
	//|		ПО B2B_СоответствиеСкладВидНоменклатуры.Склад = КатегорииОбъектов.Объект
	//|			И (КатегорииОбъектов.Категория = &Категория)
	//|ГДЕ
	//|	B2B_СоответствиеСкладВидНоменклатуры.ВидНоменклатуры = &ВидНоменклатуры";      
	"ВЫБРАТЬ
	|	B2B_СоответствиеСкладВидНоменклатуры.Склад КАК Склад,
	|	ВЫБОР
	|		КОГДА КатегорииОбъектов.Значение ЕСТЬ НЕ NULL 
	|			ТОГДА КатегорииОбъектов.Значение
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПарныйСклад
	|ИЗ
	|	РегистрСведений.B2B_СоответствиеСкладВидНоменклатуры КАК B2B_СоответствиеСкладВидНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК КатегорииОбъектов
	|		ПО B2B_СоответствиеСкладВидНоменклатуры.Склад = КатегорииОбъектов.Объект
	|			И (КатегорииОбъектов.Свойство = &Свойство)
	|ГДЕ
	|	B2B_СоответствиеСкладВидНоменклатуры.ВидНоменклатуры = &ВидНоменклатуры";
	
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", Номенклатура.ВидНоменклатуры);
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Парный склад"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.ПарныйСклад и Номенклатура.ЕдиницаХраненияОстатков.Коэффициент > 1 Тогда
			Результат = Выборка.Склад;
			Прервать;
		КонецЕсли;
		
		Результат = Выборка.Склад;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьВременныеТаблицыПоЗаказам(МассивДанных) Экспорт
	
	ОбщийЗапрос = Новый Запрос;
	
	ОбщийЗапрос.УстановитьПараметр("МассивДанных", МассивДанных);
	
	МенеджерВременныхТаблицДокументов 	= Новый МенеджерВременныхТаблиц;
	ОбщийЗапрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицДокументов;
	
	ОбщийЗапрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК Ссылка,
	|	ЗаказПокупателя.Контрагент КАК Контрагент,
	|	ЗаказПокупателя.Номер КАК Номер,
	|	ЗаказПокупателя.Дата КАК Дата,
	|	ЗаказПокупателя.Дата КАК ДатаОплаты,
	|	ЗаказПокупателя.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ЗаказПокупателя.гф_АдресДоставки КАК АдресДоставкиНовый
	|ПОМЕСТИТЬ Заказы
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказПокупателя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяТовары.Ссылка КАК Документ,
	|	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяТовары.Характеристика КАК Характеристика,
	|	ЗаказПокупателяТовары.Количество КАК Количество,
	|	ЗаказПокупателяТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказПокупателяТовары.СуммаНДС КАК СуммаНДС,
	|	ЗаказПокупателяТовары.Сумма КАК Сумма,
	|	ЗаказПокупателяТовары.Цена КАК Цена
	|ПОМЕСТИТЬ ТабТовары
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказПокупателяТовары
	|ГДЕ
	|	ЗаказПокупателяТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				Заказы.Ссылка КАК Ссылка
	|			ИЗ
	|				Заказы КАК Заказы)";
	
	ОбщийЗапрос.Выполнить();	
	
	Возврат МенеджерВременныхТаблицДокументов;
	
КонецФункции

Функция ВыгрузитьДокументы(МассивДокументов) Экспорт
	
	лМенеджерВременныхТаблиц 	= СформироватьВременныеТаблицыПоЗаказам(МассивДокументов);

	МассивВыгруженных = Новый Массив();
	Для каждого ТекДокумент из МассивДокументов Цикл
				
		Запрос = Новый Запрос();
		Запрос.МенеджерВременныхТаблиц = лМенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Заказ", ТекДокумент);
		Запрос.Текст = "ВЫБРАТЬ *
		|ИЗ
		|	Заказы КАК Заказы
		|ГДЕ
		|Заказы.Ссылка = &Заказ";
		МассивЗаказов = Запрос.Выполнить().Выгрузить();
		
		Для каждого ТекЗаказ из МассивЗаказов Цикл 
			
			СтруктураДокумента = ВыгрузитьЗаказ(лМенеджерВременныхТаблиц, ТекЗаказ.Ссылка);
			МассивВыгруженных.Добавить(СтруктураДокумента);
						
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат МассивВыгруженных;
	
КонецФункции

Функция ВыгрузитьЗаказ(МенеджерВременныхТаблиц, ТекЗаказ)
	
	Результат = Новый Структура;
	
	Результат.Вставить("ORDER_ID", СокрЛП(ТекЗаказ.Ссылка.Номер));
	Результат.Вставить("ORDER_XML_ID", СокрЛП(ТекЗаказ.Ссылка.УникальныйИдентификатор()));
	B2B_НомерЗаказа = ПолучитьЗначениеСвойства(ТекЗаказ.Ссылка, ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("B2B_НомерЗаказа"));
	Результат.Вставить("ORDER_ID_IMPORT", СокрЛП(Формат(B2B_НомерЗаказа, "ЧГ=0")));  
	
//1БЦ++ работы по задаче 32798
//	Результат.Вставить("STATUS", СокрЛП(B2B_ОбщиеПроцедурыИФункции.ПолучитьСтатусЗаказа(ТекЗаказ)));
	Статус = B2B_ОбщиеПроцедурыИФункции.ПолучитьСтатусЗаказа(ТекЗаказ,Истина);
	Результат.Вставить("STATUS",СокрЛП(Статус.Статус));
	Результат.Вставить("STATUS_DATA",Статус.Дата);
//1БЦ-- работы по задаче 32798
	
	Результат.Вставить("PARTNER_XML_ID", СокрЛП(ТекЗаказ.Контрагент.гф_GLN_номер));
	Результат.Вставить("ADDRESS_XML_ID", СокрЛП(Формат(ТекЗаказ.гф_АдресДоставки.GLNНомер, "ЧГ=0")));
	Результат.Вставить("PRODUCTS", Новый Массив());
	
	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросПоТоварам.Текст = "ВЫБРАТЬ *
	|ИЗ
	|	ТабТовары КАК ВремТабТоваров
	|ГДЕ
	|	ВремТабТоваров.Документ = &Документ";
	ЗапросПоТоварам.УстановитьПараметр("Документ", ТекЗаказ);
	МассивТоваров = ЗапросПоТоварам.Выполнить().Выгрузить();
	
	Для каждого ТекНоменклатура из МассивТоваров Цикл
		СтруктураТЧ = Новый Структура;
		СтруктураТЧ.Вставить("CML2_ARTICLE", СокрЛП(ТекНоменклатура.Номенклатура.Артикул));  
		
		//СтруктураТЧ.Вставить("XML_ID", XMLСтрока(ТекНоменклатура.Номенклатура.СЭ_ТипНоменклатуры) + "#" +XMLСтрока(ТекНоменклатура.Номенклатура));
		СтруктураТЧ.Вставить("XML_ID", XMLСтрока(B2B_ОбщиеПроцедурыИФункции.ПолучитьИдТовараДляСайта(ТекНоменклатура.Номенклатура,ТекНоменклатура.Характеристика)));
		СтруктураТЧ.Вставить("QUANTITY", СокрЛП(Формат(ТекНоменклатура.Количество, "ЧГ=0")));
				
		Всего = ?(ТекЗаказ.ЦенаВключаетНДС,ТекНоменклатура.Сумма,ТекНоменклатура.Сумма + ТекНоменклатура.СуммаНДС);
		
		PRICE = ?(ТекНоменклатура.Количество = 0,Всего,Всего/ТекНоменклатура.Количество);
		BASE_PRICE = ?(ТекЗаказ.ЦенаВключаетНДС,ТекНоменклатура.Цена ,ТекНоменклатура.Цена + ТекНоменклатура.Цена/100*ТекНоменклатура.СтавкаНДС.Ставка); 		
		DISCOUNT_PRICE = BASE_PRICE*ТекНоменклатура.Количество - Всего;
		VAT_RATE = ТекНоменклатура.СтавкаНДС.Ставка/100;
		VAT_INCLUDED  = ?(ТекЗаказ.ЦенаВключаетНДС,1,0);
		
		СтруктураТЧ.Вставить("PRICE", СокрЛП(Формат(PRICE, "ЧГ=0")));
        СтруктураТЧ.Вставить("BASE_PRICE", СокрЛП(Формат(BASE_PRICE, "ЧГ=0")));
		СтруктураТЧ.Вставить("DISCOUNT_PRICE", СокрЛП(Формат(DISCOUNT_PRICE, "ЧГ=0")));
		СтруктураТЧ.Вставить("VAT_RATE", СокрЛП(Формат(VAT_RATE, "ЧГ=0")));
		СтруктураТЧ.Вставить("VAT_INCLUDED", СокрЛП(Формат(VAT_INCLUDED, "ЧГ=0")));
	
		Результат.PRODUCTS.Добавить(СтруктураТЧ);
	КонецЦикла;
	                               
	
	Возврат Результат;
	
КонецФункции

Функция CheckSiteUpdateStatusGet(Запрос) 
	ЗаписьЖурналаРегистрации("ОбменB2B.CheckSiteUpdateStatus", УровеньЖурналаРегистрации.Информация,,,"Получен запрос");
	Попытка
		Результат = Новый Структура;
		Результат.Вставить("Состояние","Ошибка");
		Результат.Вставить("Включено","Ошибка");
		Найдено = 0;
		Регламентные = РегламентныеЗадания.ПолучитьРегламентныеЗадания();
		Для каждого Задание Из Регламентные Цикл
			Если Задание.Метаданные.Имя = "ДополнительныеСведения" Тогда
				Результат.Вставить("Включено",Задание.Использование);
				
				
				ПоследнееЗадание1 = Задание.ПоследнееЗадание;
				Отбор = Новый Структура;
				Отбор.Вставить("Ключ",Задание.Ключ);
				Отбор.Вставить("Наименование",Задание);
				Фоновые = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
				Если Фоновые.Количество() = 0 Тогда
					ПоследнееЗадание2 = неопределено;
				Иначе
					ПоследнееЗадание2 = Фоновые[0];
				КонецЕсли;
				
				Если ПоследнееЗадание1 = Неопределено И ПоследнееЗадание2 = Неопределено Тогда
					ПоследнееЗадание = неопределено;
				ИначеЕсли ПоследнееЗадание1 = Неопределено Тогда
					ПоследнееЗадание = ПоследнееЗадание2;
				ИначеЕсли ПоследнееЗадание2 = Неопределено Тогда
					ПоследнееЗадание = ПоследнееЗадание1;
				Иначе
					Если ПоследнееЗадание2.Состояние = СостояниеФоновогоЗадания.Активно Тогда
						ПоследнееЗадание = ПоследнееЗадание2;
					ИначеЕсли ПоследнееЗадание1.Состояние = СостояниеФоновогоЗадания.Активно Тогда
						ПоследнееЗадание = ПоследнееЗадание1;
					ИначеЕсли ПоследнееЗадание2.Конец > ПоследнееЗадание1.Конец Тогда
						ПоследнееЗадание = ПоследнееЗадание2;
					Иначе
						ПоследнееЗадание = ПоследнееЗадание1;
					КонецЕсли;
				КонецЕсли;
				Если ПоследнееЗадание = неопределено Тогда	
					Результат.Вставить("Состояние","НеВыполнялось");
				Иначе
					Результат.Вставить("Состояние",Строка(ПоследнееЗадание.Состояние));
					Если ПоследнееЗадание = ПоследнееЗадание2 Тогда
						Результат.Вставить("Вид","Запуск через фоновое задание");
					Иначе
						Результат.Вставить("Вид","Запуск через расписание регламентного");
					КонецЕсли;
					Результат.Вставить("Начало",ПоследнееЗадание.Начало);
					Результат.Вставить("Конец",ПоследнееЗадание.Конец);
				КонецЕсли;
						
				Найдено = Найдено + 1;
			КонецЕсли;
		КонецЦикла;
		Если Найдено =0 Тогда
			Результат.Вставить("Состояние","Ошибка");
			Результат.Вставить("Включено","Ошибка");
			Результат.Вставить("Причина","Не найдено заданий");
		КонецЕсли;		
		Если Найдено >1 Тогда
			Результат.Вставить("Состояние","Ошибка");
			Результат.Вставить("Включено","Ошибка");
			Результат.Вставить("Причина","Найдено более 2 заданий!");
		КонецЕсли;		
	Исключение
			Результат.Вставить("Состояние","Ошибка");
			Результат.Вставить("Включено","Ошибка");
			Результат.Вставить("Причина","Возникла исключительная ситуация!");
			ЗаписьЖурналаРегистрации("ОбменB2B.CheckSiteUpdateStatus", УровеньЖурналаРегистрации.Информация,,,"Ошибка:" + ОписаниеОшибки());
	КонецПопытки;
	
	ТекстОтвета = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(Результат);
	ЗаписьЖурналаРегистрации("ОбменB2B.CheckSiteUpdateStatus", УровеньЖурналаРегистрации.Информация,,,"Подготовлен ответ" + ТекстОтвета);
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");	
	Ответ.УстановитьТелоИзСтроки(ТекстОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция StartSiteUpdateGet(Запрос)
	Нашли = Ложь;
	ТекОтвет = Новый Структура;
	ТекОтвет.Вставить("Результат","Ошибка");
	ЗаписьЖурналаРегистрации("ОбменB2B.StartSiteUpdate", УровеньЖурналаРегистрации.Информация,,,"Получен запрос");
	Регламентные = РегламентныеЗадания.ПолучитьРегламентныеЗадания();
	Для каждого Задание Из Регламентные Цикл
		Если НЕ Нашли Тогда
			Если Задание.Метаданные.Имя = "ОбменССайтом" Тогда
				Нашли = Истина;
				Если Задание.Использование Тогда
					Попытка
						ФоновыеЗадания.Выполнить(Задание.Метаданные.ИмяМетода,
								Задание.Параметры, Задание.Ключ, Задание);
						ЗаписьЖурналаРегистрации("ОбменB2B.StartSiteUpdate", УровеньЖурналаРегистрации.Информация,,,"Задание запущено");
						ТекОтвет.Вставить("Результат","Успешно");
					Исключение
						ЗаписьЖурналаРегистрации("ОбменB2B.StartSiteUpdate", УровеньЖурналаРегистрации.Информация,,,"При запуске задания произошла ошибка");
						ТекОтвет.Вставить("Результат","Ошибка в процессе запуска фонового задания");
					КонецПопытки;
				Иначе
					ЗаписьЖурналаРегистрации("ОбменB2B.StartSiteUpdate", УровеньЖурналаРегистрации.Информация,,,"Запуск запрещен");
					ТекОтвет.Вставить("Результат","Запрещено");
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если НЕ Нашли Тогда
		ТекОтвет.Вставить("Результат","Задание не найдено");
	КонецЕсли;
	
	ТекстОтвета = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТекОтвет);
	ЗаписьЖурналаРегистрации("ОбменB2B.StartSiteUpdate", УровеньЖурналаРегистрации.Информация,,,"Подготовлен ответ" + ТекстОтвета);
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/json;  charset=utf-8");	
	Ответ.УстановитьТелоИзСтроки(ТекстОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Возврат Ответ;
КонецФункции

Функция StartUpdateStockGoodsGet(Запрос)

	START_UNLOADING = Запрос.ПараметрыЗапроса.Получить("START_UNLOADING");
	Если ЗначениеЗаполнено(START_UNLOADING) Тогда
		ЗаписьЖурналаРегистрации("ОбменB2B.UpdateStockGoods", УровеньЖурналаРегистрации.Информация,,,"Получен запрос на получение остатков со стороны сайта с ответом сразу");
		Попытка 
			ТекстОтвета = B2B_РегламентныеПроцедуры.B2B_ВыгрузкаОстаткаНаСайт(Истина);
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.УстановитьТелоИзСтроки(ТекстОтвета);
		Исключение   
			Ответ = Новый HTTPСервисОтвет(400);
			Ответ.УстановитьТелоИзСтроки("Error");
		КонецПопытки;
		Возврат Ответ;
	Иначе
		ЗаписьЖурналаРегистрации("ОбменB2B.UpdateStockGoods", УровеньЖурналаРегистрации.Информация,,,"Получен запрос на получение остатков со стороны сайта с ответом отдельным вызовом");
		Попытка 
			ФоновыеЗадания.Выполнить("B2B_РегламентныеПроцедуры.B2B_ВыгрузкаОстаткаНаСайт",
								Новый Массив, Новый УникальныйИдентификатор, "B2B_РегламентныеПроцедуры.B2B_ВыгрузкаОстаткаНаСайт");
			Ответ = Новый HTTPСервисОтвет(200);
			Ответ.УстановитьТелоИзСтроки("Started");
		Исключение   
			Ответ = Новый HTTPСервисОтвет(400);
			Ответ.УстановитьТелоИзСтроки("Error");
		КонецПопытки;
		Возврат Ответ;
	КонецЕсли;
	
	

КонецФункции
