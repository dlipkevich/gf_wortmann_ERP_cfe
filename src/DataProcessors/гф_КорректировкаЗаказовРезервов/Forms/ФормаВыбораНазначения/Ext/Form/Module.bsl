#Область ОбработчикиСобытийФормы 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьОтборы();
	ЗаполнитьСписокНазначений();
	АвтоЗаголовок = Ложь;
	Заголовок = "Выбор нового назначения";
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УправлениеВидимостью();
	ТекущийЭлемент = Элементы.СписокНазначений;
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостью()
	Элементы.отборВариантКомплектации.Видимость = флРезервыВКоробах;
	Элементы.отборНоменклатура.Видимость = Не флРезервыВКоробах;
	Элементы.отборХарактеристика.Видимость = Не флРезервыВКоробах;
	Если флРезервыВКоробах Тогда
		Элементы.ДанныеТекущегоЗаказа.Видимость = Ложь;
	Иначе
		Элементы.ДанныеТекущегоЗаказаКороба.Видимость = Ложь;
	КонецЕсли;
	Если флПеренестиНовоеНазначение Тогда
		Элементы.СписокНазначенийКоличество.Видимость = Ложь;
		Элементы.СписокНазначенийДоступно.Видимость = Ложь;
		Элементы.СписокНазначенийОтгружается.Видимость = Ложь;
		Элементы.СписокНазначенийНеХватает.Видимость = Ложь;
		Элементы.ДанныеТекущегоЗаказа.Видимость = Ложь;
		Элементы.ДанныеТекущегоЗаказаКороба.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьОтборы()
	мЗаказКлиента = Параметры["мЗаказКлиента"];
	отборОрганизация = мЗаказКлиента.Организация;
	отборСклад = мЗаказКлиента.Склад;
	отборВариантКомплектации = Параметры["ВариантКомплектации"];
	отборНоменклатура = Параметры["Номенклатура"];
	отборХарактеристика = Параметры["Характеристика"];
	флРезервыВКоробах = Параметры["РезервыВКоробах"];
	флПеренестиНовоеНазначение = Параметры["ПеренестиНовоеНазначение"];
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекстЗапросаВтЗаказы(Запрос)
	
	Если флРезервыВКоробах Тогда
		Запрос.Текст = ТекстЗапросаВтЗаказыТоварыВКоробах(флПеренестиНовоеНазначение, отборВариантКомплектации);
	Иначе
		Запрос.Текст = ТекстЗапросаВтЗаказыТовары(флПеренестиНовоеНазначение, отборНоменклатура, отборХарактеристика);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(отборКонтрагент) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказКлиента.Контрагент = &Контрагент", "ИСТИНА");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(отборПериод.ДатаНачала) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказКлиента.Дата >= &ДатаНачала", "ИСТИНА");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(отборПериод.ДатаОкончания) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказКлиента.Дата <= &ДатаОкончания", "ИСТИНА");
	КонецЕсли;
	Если флПеренестиНовоеНазначение Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказКлиента.Проведен", "ИСТИНА");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НЕ ЗаказКлиента.ПометкаУдаления", "ИСТИНА");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокНазначенийВКоробах(Запрос)
	
	// здесь мы имеем перечень всех заказов доступных для выбора
	Если флПеренестиНовоеНазначение Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(Назначения.Ссылка) КАК Назначение,
		|	ЗаказыКлиентов.Заказ КАК Заказ
		|ПОМЕСТИТЬ втНазначения
		|ИЗ
		|	Справочник.Назначения КАК Назначения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЗаказы КАК ЗаказыКлиентов
		|		ПО (ЗаказыКлиентов.Заказ = Назначения.Заказ)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыКлиентов.Заказ";
		Запрос.Выполнить();
		// _омОтладка.ПолучитьСодержимоеВременнойТаблицы(Запрос, "втНазначения")
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Назначения.Назначение КАК Назначение,
		|	Назначения.Заказ КАК Заказ
		|ИЗ
		|	втНазначения КАК Назначения
		|ГДЕ
		|	Назначения.Заказ <> &ТекущийЗаказ";
		Результат = Запрос.Выполнить();
		
		СписокНазначений.Загрузить(Результат.Выгрузить());
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРезервыВКоробахНаСервере(Запрос);
	// _омОтладка.ПолучитьСодержимоеВременнойТаблицы(Запрос, "втОстаткиУпаковок")
	// _омОтладка.ПолучитьСодержимоеВременнойТаблицы(Запрос, "втОстаткиКоробов")
	// _омОтладка.ПолучитьСодержимоеВременнойТаблицы(Запрос, "втРезервыКоробов")
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втЗаказы.Заказ КАК Заказ,
	|	втЗаказы.ВариантКомплектации КАК ВариантКомплектации,
	|	втЗаказы.Количество КАК Количество,
	|	втЗаказы.Отгружается КАК Отгружается,
	|	ЕСТЬNULL(втРезервыКоробов.Резерв, 0) КАК Резерв
	|ПОМЕСТИТЬ втВсеЗаказы
	|ИЗ
	|	втЗаказы КАК втЗаказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втРезервыКоробов КАК втРезервыКоробов
	|		ПО втЗаказы.Заказ = втРезервыКоробов.Заказ
	|			И втЗаказы.ВариантКомплектации = втРезервыКоробов.ВариантКомплектации
	|ГДЕ
	|	втЗаказы.Количество > 0";
	Запрос.Выполнить();
	// _омОтладка.ПолучитьСодержимоеВременнойТаблицы(Запрос, "втВсеЗаказы")
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втЗаказы.Заказ КАК Заказ,
	|	втЗаказы.ВариантКомплектации КАК ВариантКомплектации,
	|	втЗаказы.Количество КАК Количество,
	|	втЗаказы.Отгружается КАК Отгружается,
	|	ЕСТЬNULL(втРезервыКоробов.Резерв, 0) КАК Резерв
	|ПОМЕСТИТЬ втНеОбеспеченныеЗаказы
	|ИЗ
	|	втЗаказы КАК втЗаказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втРезервыКоробов КАК втРезервыКоробов
	|		ПО втЗаказы.Заказ = втРезервыКоробов.Заказ
	|			И втЗаказы.ВариантКомплектации = втРезервыКоробов.ВариантКомплектации
	|ГДЕ
	|	втЗаказы.Количество > 0
	|	И ВЫБОР
	|			КОГДА втЗаказы.Количество > ЕСТЬNULL(втРезервыКоробов.Резерв, 0)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ";
	Запрос.Выполнить();
	// _омОтладка.ПолучитьСодержимоеВременнойТаблицы(Запрос, "втНеОбеспеченныеЗаказы")
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(Назначения.Ссылка) КАК Назначение,
	|	ЗаказыКлиентов.Заказ КАК Заказ
	|ПОМЕСТИТЬ втНазначения
	|ИЗ
	|	Справочник.Назначения КАК Назначения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВсеЗаказы КАК ЗаказыКлиентов
	|		ПО (ЗаказыКлиентов.Заказ = Назначения.Заказ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыКлиентов.Заказ";
	Запрос.Выполнить();
	// _омОтладка.ПолучитьСодержимоеВременнойТаблицы(Запрос, "втНазначения")
	
	// здесь заполняем данные для текущего Заказа
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Назначения.Назначение КАК Назначение,
	|	Назначения.Заказ КАК Заказ,
	|	ЕСТЬNULL(НеОбеспеченныеЗаказы.Количество, 0) КАК Количество,
	|	ЕСТЬNULL(НеОбеспеченныеЗаказы.Отгружается, 0) КАК Отгружается,
	|	ЕСТЬNULL(НеОбеспеченныеЗаказы.Резерв, 0) КАК Доступно
	|ИЗ
	|	втНазначения КАК Назначения
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВсеЗаказы КАК НеОбеспеченныеЗаказы
	|		ПО (НеОбеспеченныеЗаказы.Заказ = Назначения.Заказ)
	|ГДЕ
	|	Назначения.Заказ = &ТекущийЗаказ";
	Запрос.УстановитьПараметр("ТекущийЗаказ", мЗаказКлиента);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		КоробовКоличество = Выборка.Количество;
		КоробовОтгружается = Выборка.Отгружается;
		КоробовДоступно = Выборка.Доступно;
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Назначения.Назначение КАК Назначение,
	|	Назначения.Заказ КАК Заказ,
	|	ЕСТЬNULL(НеОбеспеченныеЗаказы.Количество, 0) КАК Количество,
	|	ЕСТЬNULL(НеОбеспеченныеЗаказы.Отгружается, 0) КАК Отгружается,
	|	ЕСТЬNULL(НеОбеспеченныеЗаказы.Резерв, 0) КАК Доступно
	|ИЗ
	|	втНазначения КАК Назначения
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНеОбеспеченныеЗаказы КАК НеОбеспеченныеЗаказы
	|		ПО (НеОбеспеченныеЗаказы.Заказ = Назначения.Заказ)
	|ГДЕ
	|	Назначения.Заказ <> &ТекущийЗаказ";
	Результат = Запрос.Выполнить();
	
	СписокНазначений.Загрузить(Результат.Выгрузить());
	Для Каждого СтрокаТЗ Из СписокНазначений Цикл
		СтрокаТЗ["Нехватает"] = СтрокаТЗ["Количество"] - СтрокаТЗ["Отгружается"] - СтрокаТЗ["Доступно"];
		Если СтрокаТЗ["Нехватает"] < 0 Тогда
			СтрокаТЗ["Нехватает"] = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокНазначений()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	// 1. найдем все заказы по отборам
	ЗаполнитьТекстЗапросаВтЗаказы(Запрос);
	
	Запрос.УстановитьПараметр("Организация", отборОрганизация);
	Запрос.УстановитьПараметр("Склад", отборСклад);
	Запрос.УстановитьПараметр("Контрагент", отборКонтрагент);
	Запрос.УстановитьПараметр("ВариантКомплектации", отборВариантКомплектации);
	Запрос.УстановитьПараметр("Номенклатура", отборНоменклатура);
	Запрос.УстановитьПараметр("Характеристика", отборХарактеристика);
	Запрос.УстановитьПараметр("ДатаНачала", отборПериод.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(отборПериод.ДатаОкончания));
	Запрос.УстановитьПараметр("ТекущийЗаказ", мЗаказКлиента);
	Запрос.Выполнить();
	// _омОтладка.ПолучитьСодержимоеВременнойТаблицы(Запрос, "втЗаказы")
	
	//++ 21.04.2023
	Если флРезервыВКоробах Тогда
		ЗаполнитьСписокНазначенийВКоробах(Запрос);
		Возврат;
	КонецЕсли;
	
	//++ 27.04.2023 Добавил условие
	Если флПеренестиНовоеНазначение Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(Назначения.Ссылка) КАК Назначение,
		|	ЗаказыКлиентов.Заказ КАК Заказ
		|ПОМЕСТИТЬ втНазначения
		|ИЗ
		|	Справочник.Назначения КАК Назначения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЗаказы КАК ЗаказыКлиентов
		|		ПО (ЗаказыКлиентов.Заказ = Назначения.Заказ)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыКлиентов.Заказ";
		Запрос.Выполнить();
		// втНазначения

		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Назначения.Назначение КАК Назначение,
		|	Назначения.Заказ КАК Заказ
		|ИЗ
		|	втНазначения КАК Назначения
		|ГДЕ
		|	Назначения.Заказ <> &ТекущийЗаказ";
		Результат = Запрос.Выполнить();
	
		СписокНазначений.Загрузить(Результат.Выгрузить());
		Возврат;
	КонецЕсли;

	// 2. получим таблицу с товарами из заказов
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказКлиентаТовары.Ссылка КАК Заказ,
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	|	ЗаказКлиентаТовары.Характеристика КАК Характеристика,
	|	СУММА(ЗаказКлиентаТовары.КоличествоУпаковок) КАК Количество
	|ПОМЕСТИТЬ втЗаказыТовары
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				втЗаказы.Заказ
	|			ИЗ
	|				втЗаказы КАК втЗаказы)
	|	И ЗаказКлиентаТовары.Номенклатура = &Номенклатура
	|	И ЗаказКлиентаТовары.Характеристика = &Характеристика
	|	И НЕ ЗаказКлиентаТовары.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиентаТовары.Ссылка,
	|	ЗаказКлиентаТовары.Номенклатура,
	|	ЗаказКлиентаТовары.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗаказКлиентаТовары.КоличествоУпаковок) <> 0";
	Если Не ЗначениеЗаполнено(отборНоменклатура) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказКлиентаТовары.Номенклатура = &Номенклатура", "ИСТИНА");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(отборХарактеристика) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказКлиентаТовары.Характеристика = &Характеристика", "ИСТИНА");
	КонецЕсли;
	Запрос.Выполнить();
	// втЗаказыТовары
	
	// 3. найдем остатки номенклатуры
	ЗаполнитьСписокНоменклатуры();
	ТаблицаОстатки = ПолучитьТаблицуОстатков(СписокНоменклатуры, мЗаказКлиента, Истина,
	"Склад, Номенклатура, Характеристика, Назначение", "Доступно, ВНаличии");
	МассивУдалитьСтроки = Новый Массив;
	Для Каждого СтрокаТЗ Из ТаблицаОстатки Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЗ["Назначение"]) Тогда
			МассивУдалитьСтроки.Добавить(СтрокаТЗ);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдалитьСтроку Из МассивУдалитьСтроки Цикл
		ТаблицаОстатки.Удалить(УдалитьСтроку);
	КонецЦикла;
	// ТаблицаОстатки
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	т.Номенклатура КАК Номенклатура,
	|	т.Характеристика КАК Характеристика,
	|	т.Назначение КАК Назначение,
	|	т.Доступно КАК Доступно,
	|	т.ВНаличии КАК ВНаличии
	|ПОМЕСТИТЬ втОстатки
	|ИЗ
	|	&ТаблицаОстатки КАК т";
	Запрос.УстановитьПараметр("ТаблицаОстатки", ТаблицаОстатки);
	Запрос.Выполнить();
	// втОстатки
	
	// 4. найдем "не обеспеченные" остатки номенклатуры
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказКлиентаТовары.Заказ КАК Заказ,
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	|	ЗаказКлиентаТовары.Характеристика КАК Характеристика,
	|	ЗаказКлиентаТовары.Количество КАК Количество,
	|	ЕСТЬNULL(втОстатки.Доступно, 0) КАК Доступно,
	|	ЕСТЬNULL(втОстатки.ВНаличии, 0) КАК ВНаличии
	|ПОМЕСТИТЬ втНеОбеспеченныеЗаказы
	|ИЗ
	|	втЗаказыТовары КАК ЗаказКлиентаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК втОстатки
	|		ПО ЗаказКлиентаТовары.Заказ = втОстатки.Назначение.Заказ
	|			И ЗаказКлиентаТовары.Номенклатура = втОстатки.Номенклатура
	|			И ЗаказКлиентаТовары.Характеристика = втОстатки.Характеристика
	|ГДЕ
	|	ВЫБОР
	|		КОГДА ЗаказКлиентаТовары.Количество > ЕСТЬNULL(втОстатки.Доступно, 0) + ЕСТЬNULL(втОстатки.ВНаличии, 0)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ";
	Запрос.Выполнить();
	// втНеОбеспеченныеЗаказы
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(Назначения.Ссылка) КАК Назначение,
	|	ЗаказыКлиентов.Заказ КАК Заказ
	|ПОМЕСТИТЬ втНазначения
	|ИЗ
	|	Справочник.Назначения КАК Назначения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНеОбеспеченныеЗаказы КАК ЗаказыКлиентов
	|		ПО (ЗаказыКлиентов.Заказ = Назначения.Заказ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыКлиентов.Заказ";
	Запрос.Выполнить();
	// втНазначения
	
	// здесь заполняем данные для текущего Заказа
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказКлиентаТовары.Заказ КАК Заказ,
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	|	ЗаказКлиентаТовары.Характеристика КАК Характеристика,
	|	ЗаказКлиентаТовары.Количество КАК Количество,
	|	ЕСТЬNULL(втОстатки.Доступно, 0) КАК Доступно,
	|	ЕСТЬNULL(втОстатки.ВНаличии, 0) КАК Отгружается
	|ИЗ
	|	втЗаказыТовары КАК ЗаказКлиентаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК втОстатки
	|		ПО ЗаказКлиентаТовары.Заказ = втОстатки.Назначение.Заказ
	|			И ЗаказКлиентаТовары.Номенклатура = втОстатки.Номенклатура
	|			И ЗаказКлиентаТовары.Характеристика = втОстатки.Характеристика
	|ГДЕ
	|	ЗаказКлиентаТовары.Заказ = &ТекущийЗаказ";
	Запрос.УстановитьПараметр("ТекущийЗаказ", мЗаказКлиента);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Количество = Выборка.Количество;
		Отгружается = Выборка.Отгружается;
		Доступно = Выборка.Доступно;
	КонецЕсли;
	
	// здесь заполняем таблицу Список назначений
	//++ 27.04.2023 Заремарил условие
	//Если флПеренестиНовоеНазначение Тогда
	//	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//	|	Назначения.Назначение КАК Назначение,
	//	|	Назначения.Заказ КАК Заказ
	//	|ИЗ
	//	|	втНазначения КАК Назначения
	//	|ГДЕ
	//	|	Назначения.Заказ <> &ТекущийЗаказ";
	//Иначе
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Назначения.Назначение КАК Назначение,
		|	Назначения.Заказ КАК Заказ,
		|	ЕСТЬNULL(НеОбеспеченныеЗаказы.Количество, 0) КАК Количество,
		|	ЕСТЬNULL(НеОбеспеченныеЗаказы.ВНаличии, 0) КАК Отгружается,
		|	ЕСТЬNULL(НеОбеспеченныеЗаказы.Доступно, 0) КАК Доступно
		|ИЗ
		|	втНазначения КАК Назначения
		|		ЛЕВОЕ СОЕДИНЕНИЕ втНеОбеспеченныеЗаказы КАК НеОбеспеченныеЗаказы
		|		ПО (НеОбеспеченныеЗаказы.Заказ = Назначения.Заказ)
		|ГДЕ
		|	Назначения.Заказ <> &ТекущийЗаказ";
	//КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	СписокНазначений.Загрузить(Результат.Выгрузить());
	Для Каждого СтрокаТЗ Из СписокНазначений Цикл
		СтрокаТЗ["Нехватает"] = СтрокаТЗ["Количество"] - СтрокаТЗ["Отгружается"] - СтрокаТЗ["Доступно"];
		Если СтрокаТЗ["Нехватает"] < 0 Тогда
			СтрокаТЗ["Нехватает"] = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокНоменклатуры()
	
	СписокНоменклатуры.Очистить();
	
	Если флРезервыВКоробах Тогда
		Для Каждого СтрокаКомплектации Из отборВариантКомплектации.Товары Цикл
			СписокНоменклатуры.Добавить(СтрокаКомплектации.Номенклатура);
		КонецЦикла;
	Иначе
		СписокНоменклатуры.Добавить(отборНоменклатура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура отборПериодПриИзменении(Элемент)
	ЗаполнитьСписокНазначений();
КонецПроцедуры

&НаКлиенте
Процедура Выбрать(Команда)
	ТД = Элементы.СписокНазначений.ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		Если флРезервыВКоробах Тогда
			Закрыть(Новый Структура("Назначение, Количество", ТД.Назначение, Мин(КоробовДоступно, ТД.НеХватает)));
		Иначе
			Закрыть(Новый Структура("Назначение, Количество", ТД.Назначение, Мин(Доступно, ТД.НеХватает)));
		КонецЕсли;
	Иначе
		Закрыть(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокНазначенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТД = Элементы.СписокНазначений.ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		Если флРезервыВКоробах Тогда
			Закрыть(Новый Структура("Назначение, Количество", ТД.Назначение, Мин(КоробовДоступно, ТД.НеХватает)));
		Иначе
			Закрыть(Новый Структура("Назначение, Количество", ТД.Назначение, Мин(Доступно, ТД.НеХватает)));
		КонецЕсли;
	Иначе
		Закрыть(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТаблицуОстатков(СписокНоменклатуры, мЗаказКлиента, парамОбособленныеТовары, ПоляГруппировки,
			ПоляСуммирования)
	
	СхемаКомпоновкиДанных = Отчеты.ОстаткиИДоступностьТоваров.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	НастройкиОтчета = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтчета);
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	
    ГруппировкаДетальныеПоля = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
    ГруппировкаДетальныеПоля.Использование = Истина;
    ГруппировкаДетальныеПоля.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	ПолеПараметрыДанных	= Новый ПолеКомпоновкиДанных("ПараметрыДанных");
	ПолеСистемныеПоля	= Новый ПолеКомпоновкиДанных("СистемныеПоля"); 
    Для Каждого ПолеВыбора Из КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		ВыбранноеПоле = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Использование	= Не (ПолеВыбора.Поле = ПолеПараметрыДанных ИЛИ ПолеВыбора.Поле = ПолеСистемныеПоля);
		ВыбранноеПоле.Поле			= ПолеВыбора.Поле;
	КонецЦикла;	 
	
	ПараметрОбособленныеТовары = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(
		"ПоказатьОбособленныеТовары");
	Если ПараметрОбособленныеТовары <> Неопределено Тогда
		ПараметрОбособленныеТовары.Значение = парамОбособленныеТовары;
	КонецЕсли;
	
	ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Номенклатура");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ПравоеЗначение	= СписокНоменклатуры;
	
	ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Склад");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ПравоеЗначение	= мЗаказКлиента.Склад;
	
	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);

	ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.Основной.Запрос;

	ТекстЗапросаВесУпаковки = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
		"Таблица.Номенклатура.ЕдиницаИзмерения", "Таблица.Номенклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаВесНоменклатуры", ТекстЗапросаВесУпаковки);
		
	ТекстЗапросаОбъемУпаковки = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки(
		"Таблица.Номенклатура.ЕдиницаИзмерения", "Таблица.Номенклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаОбъемНоменклатуры", ТекстЗапросаОбъемУпаковки);

	СхемаКомпоновкиДанных.НаборыДанных.Основной.Запрос = ТекстЗапроса;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();    
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	ТипГенератора = Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений");
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, , , ТипГенератора);
    
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
    
    Таблица = Новый ТаблицаЗначений;
    
    ПроцессорВыводаРезультатаКомпоновкиДанных = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ПроцессорВыводаРезультатаКомпоновкиДанных.УстановитьОбъект(Таблица);
    ПроцессорВыводаРезультатаКомпоновкиДанных.Вывести(ПроцессорКомпоновкиДанных);
	
	МассивУдалитьСтроки = Новый Массив;
	Для Каждого СтрокаТЗ Из Таблица Цикл
		Если СтрокаТЗ["ТипЗаписи"] <> "Сейчас" Тогда
			МассивУдалитьСтроки.Добавить(СтрокаТЗ);
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдалитьСтроку Из МассивУдалитьСтроки Цикл
		Таблица.Удалить(УдалитьСтроку);
	КонецЦикла;
	ТаблицаОстатки = Таблица.Скопировать();
	ТаблицаОстатки.Свернуть(ПоляГруппировки, ПоляСуммирования);
	
	Возврат ТаблицаОстатки;
	
КонецФункции

&НаКлиенте
Процедура отборКонтрагентПриИзменении(Элемент)
	ЗаполнитьСписокНазначений();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстЗапросаВтЗаказыТоварыВКоробах(флПеренестиНовоеНазначение, отборВариантКомплектации)
	Если флПеренестиНовоеНазначение Тогда
		Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		               |	ЗаказКлиента.Ссылка КАК Заказ
		               |ПОМЕСТИТЬ втЗаказы
		               |ИЗ
		               |	Документ.ЗаказКлиента КАК ЗаказКлиента
		               |ГДЕ
		               |	ЗаказКлиента.Проведен
		               |	И НЕ ЗаказКлиента.ПометкаУдаления
		               |	И ЗаказКлиента.Организация = &Организация
		               |	И ЗаказКлиента.Склад = &Склад
		               |	И ЗаказКлиента.Контрагент = &Контрагент
		               |	И ЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
		               |	И ЗаказКлиента.Дата >= &ДатаНачала
		               |	И ЗаказКлиента.Дата <= &ДатаОкончания";
	Иначе
		Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		        |	ЗаказКлиентаТоварыВКоробах.Ссылка КАК Заказ,
		        |	ЗаказКлиентаТоварыВКоробах.ВариантКомплектации КАК ВариантКомплектации,
		        |	СУММА(ВЫБОР
		        |			КОГДА ЗаказКлиентаТоварыВКоробах.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.КОбеспечению)
		        |				ТОГДА ЗаказКлиентаТоварыВКоробах.Количество
		        |			ИНАЧЕ 0
		        |		КОНЕЦ) КАК Количество,
		        |	СУММА(ВЫБОР
		        |			КОГДА ЗаказКлиентаТоварыВКоробах.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
		        |				ТОГДА ЗаказКлиентаТоварыВКоробах.Количество
		        |			ИНАЧЕ 0
		        |		КОНЕЦ) КАК Отгружается
		        |ПОМЕСТИТЬ втЗаказы
		        |ИЗ
		        |	Документ.ЗаказКлиента.гф_ТоварыВКоробах КАК ЗаказКлиентаТоварыВКоробах
		        |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
		        |		ПО (ЗаказКлиента.Ссылка = ЗаказКлиентаТоварыВКоробах.Ссылка)
		        |ГДЕ
		        |	ЗаказКлиентаТоварыВКоробах.ВариантКомплектации = &ВариантКомплектации
		        |	И НЕ ЗаказКлиентаТоварыВКоробах.Отменено
		        |	И ЗаказКлиента.Проведен
		        |	И НЕ ЗаказКлиента.ПометкаУдаления
		        |	И ЗаказКлиента.Организация = &Организация
		        |	И ЗаказКлиента.Склад = &Склад
		        |	И ЗаказКлиента.Контрагент = &Контрагент
		        |	И ЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
		        |	И ЗаказКлиента.Дата >= &ДатаНачала
		        |	И ЗаказКлиента.Дата <= &ДатаОкончания
		        |
		        |СГРУППИРОВАТЬ ПО
		        |	ЗаказКлиентаТоварыВКоробах.Ссылка,
		        |	ЗаказКлиентаТоварыВКоробах.ВариантКомплектации";
		Если Не ЗначениеЗаполнено(отборВариантКомплектации) Тогда
			Текст = СтрЗаменить(Текст, "ЗаказКлиентаТоварыВКоробах.ВариантКомплектации = &ВариантКомплектации", "ИСТИНА");
		КонецЕсли;
	КонецЕсли;
	Возврат Текст;
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаВтЗаказыТовары(флПеренестиНовоеНазначение, отборНоменклатура, отборХарактеристика)
	Если флПеренестиНовоеНазначение Тогда
		Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		               |	ЗаказКлиента.Ссылка КАК Заказ
		               |ПОМЕСТИТЬ втЗаказы
		               |ИЗ
		               |	Документ.ЗаказКлиента КАК ЗаказКлиента
		               |ГДЕ
		               |	ЗаказКлиента.Проведен
		               |	И НЕ ЗаказКлиента.ПометкаУдаления
		               |	И ЗаказКлиента.Организация = &Организация
		               |	И ЗаказКлиента.Склад = &Склад
		               |	И ЗаказКлиента.Контрагент = &Контрагент
		               |	И ЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
		               |	И ЗаказКлиента.Дата >= &ДатаНачала
		               |	И ЗаказКлиента.Дата <= &ДатаОкончания";
	Иначе
		Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		               |	ЗаказКлиентаТовары.Ссылка КАК Заказ
		               |ПОМЕСТИТЬ втЗаказы
		               |ИЗ
		               |	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
		               |		ПО (ЗаказКлиента.Ссылка = ЗаказКлиентаТовары.Ссылка)
		               |ГДЕ
		               |	ЗаказКлиентаТовары.Номенклатура = &Номенклатура
		               |	И ЗаказКлиентаТовары.Характеристика = &Характеристика
		               |	И ЗаказКлиента.Проведен
		               |	И НЕ ЗаказКлиента.ПометкаУдаления
		               |	И ЗаказКлиента.Организация = &Организация
		               |	И ЗаказКлиента.Склад = &Склад
		               |	И ЗаказКлиента.Контрагент = &Контрагент
		               |	И ЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
		               |	И ЗаказКлиента.Дата >= &ДатаНачала
		               |	И ЗаказКлиента.Дата <= &ДатаОкончания";
		Если Не ЗначениеЗаполнено(отборНоменклатура) Тогда
			Текст = СтрЗаменить(Текст, "ЗаказКлиентаТовары.Номенклатура = &Номенклатура", "ИСТИНА");
		КонецЕсли;
		Если Не ЗначениеЗаполнено(отборХарактеристика) Тогда
			Текст = СтрЗаменить(Текст, "ЗаказКлиентаТовары.Характеристика = &Характеристика", "ИСТИНА");
		КонецЕсли;
	КонецЕсли;
	Возврат Текст;
КонецФункции

//++ 21.04.2023
&НаСервере
Процедура ЗаполнитьРезервыВКоробахНаСервере(Запрос)
	
	// =============
	// ТоварВРезерве
	// =============
	// _омОтладка.ПолучитьСодержимоеВременнойТаблицы(Запрос, "втЗаказы")
	Запрос.Текст = ТекстЗапросаОстаткиКоробов();
	Запрос.УстановитьПараметр("Организация", мЗаказКлиента.Организация);
	Запрос.УстановитьПараметр("Склад", мЗаказКлиента.Склад);
	Запрос.УстановитьПараметр("гф_Заказ", мЗаказКлиента);
	МассивВК = Новый Массив;
	МассивВК.Добавить(отборВариантКомплектации);
	Запрос.УстановитьПараметр("МассивВК", МассивВК);
	Результат = Запрос.Выполнить();
	// _омОтладка.ПолучитьСодержимоеВременнойТаблицы(Запрос, "втОстаткиУпаковок")
	// _омОтладка.ПолучитьСодержимоеВременнойТаблицы(Запрос, "втОстаткиКоробов")
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	втОстаткиКоробов.ВариантКомплектации КАК ВариантКомплектации,
	               |	втОстаткиКоробов.ЗаказКлиента КАК Заказ,
	               |	СУММА(втОстаткиКоробов.КоличествоОстаток) КАК Резерв
	               |ПОМЕСТИТЬ втРезервыКоробов
	               |ИЗ
	               |	втОстаткиКоробов КАК втОстаткиКоробов
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втОстаткиКоробов.ВариантКомплектации,
	               |	втОстаткиКоробов.ЗаказКлиента";
	Запрос.Выполнить();
	// _омОтладка.ПолучитьСодержимоеВременнойТаблицы(Запрос, "втРезервыКоробов")

КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстЗапросаОстаткиКоробов()
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	гф_ДвижениеКодовМаркировкиОрганизацииОстатки.Организация КАК Организация,
	        |	гф_ДвижениеКодовМаркировкиОрганизацииОстатки.Склад КАК Склад,
	        |	гф_ДвижениеКодовМаркировкиОрганизацииОстатки.КМ КАК КМ,
	        |	гф_ДвижениеКодовМаркировкиОрганизацииОстатки.КМ.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
			//|	гф_ДвижениеКодовМаркировкиОрганизацииОстатки.Резерв КАК Резерв,
	        |	гф_ДвижениеКодовМаркировкиОрганизацииОстатки.КоличествоОстаток КАК КоличествоОстаток
	        |ПОМЕСТИТЬ втОстаткиУпаковок
	        |ИЗ
	        |	РегистрНакопления.гф_ДвижениеКодовМаркировкиОрганизации.Остатки(
	        |			,
	        |			Организация = &Организация
	        |				И Склад = &Склад
	        |				И КМ.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка)) КАК гф_ДвижениеКодовМаркировкиОрганизацииОстатки
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	гф_ДвижениеКодовМаркировкиОрганизацииОстатки.Организация КАК Организация,
	        |	гф_ДвижениеКодовМаркировкиОрганизацииОстатки.Склад КАК Склад,
	        |	гф_ДвижениеКодовМаркировкиОрганизацииОстатки.КМ КАК КМ,
	        |	гф_ДвижениеКодовМаркировкиОрганизацииОстатки.КМ.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
			//|	гф_ДвижениеКодовМаркировкиОрганизацииОстатки.Резерв КАК Резерв,
	        |	гф_ДвижениеКодовМаркировкиОрганизацииОстатки.КоличествоОстаток КАК КоличествоОстаток,
	        |	УпаковочныйЛист.гф_Заказ КАК ЗаказКлиента,
	        |	УпаковочныйЛист.гф_Комплектация КАК ВариантКомплектации,
	        |	УпаковочныйЛист.Ссылка КАК УпаковочныйЛист
	        |ПОМЕСТИТЬ втОстаткиКоробов
	        |ИЗ
	        |	втОстаткиУпаковок КАК гф_ДвижениеКодовМаркировкиОрганизацииОстатки
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист КАК УпаковочныйЛист
	        |		ПО гф_ДвижениеКодовМаркировкиОрганизацииОстатки.КМ.ЗначениеШтрихкода = УпаковочныйЛист.Код
	        |			И (УпаковочныйЛист.Ссылка.Проведен)
	        |ГДЕ
			//|	УпаковочныйЛист.гф_Заказ = &гф_Заказ
	        |	УпаковочныйЛист.гф_Комплектация В(&МассивВК)
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	СУММА(втОстаткиКоробов.КоличествоОстаток) КАК КоличествоОстаток,
	        |	втОстаткиКоробов.ВариантКомплектации КАК ВариантКомплектации
	        |ИЗ
	        |	втОстаткиКоробов КАК втОстаткиКоробов
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	втОстаткиКоробов.ВариантКомплектации";
КонецФункции
//--

#КонецОбласти
