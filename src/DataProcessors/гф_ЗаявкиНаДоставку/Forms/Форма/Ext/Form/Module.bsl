#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.ГруппаОбувь) Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ВидыНоменклатуры.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		               |ГДЕ
		               |	ВидыНоменклатуры.Наименование = ""Обувь""
		               |	И ВидыНоменклатуры.ЭтоГруппа";         
		
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			
			Выборка.Следующий();
			
			Объект.ГруппаОбувь = Выборка.Ссылка;
			
		КонецЕсли;	
		
	КонецЕсли;	   
	
	Объект.ДатаВыгрузки = ТекущаяДатаСеанса();
	
// для теста	
	//Объект.ДокументыКОтправке.Очистить();
	//
	//ТК = Справочники.Контрагенты.НайтиПоНаименованию("Аверина Наталья Валерьевна");
	//
	//СтрокаДокумента = Объект.ДокументыКОтправке.Добавить();
	//
	//СтрокаДокумента.ТК			= ТК;
	//СтрокаДокумента.Документ	= Документы.РасходныйОрдерНаТовары.НайтиПоНомеру("ЦБ-00000031",'20220101');

	//СтрокаДокумента = Объект.ДокументыКОтправке.Добавить();
	//
	//СтрокаДокумента.ТК			= ТК;
	//СтрокаДокумента.Документ	= Документы.РасходныйОрдерНаТовары.НайтиПоНомеру("ЦБ-00000033",'20220101');
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)   
	
	ОрганизацияПриИзмененииНаСервере();

	УстановитьЗначенияПоУмолчанию();  
	
	СохранятьБезОтправкиПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_ЭлектронноеПисьмоИсходящее" Тогда 
		
		Для Каждого СтрокаСпискаДокументов Из СписокДокументов Цикл
					
			Если СтрокаСпискаДокументов.Письмо = Источник Тогда
				
				ОбновитьДанныеПисьмаНаСервере(Источник);
				
				Прервать;
				
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КаталогВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("КаталогВыгрузкиЗавершение", ЭтотОбъект);
	
    Режим = РежимДиалогаВыбораФайла.ВыборКаталога; 
	
    ДиалогОткрытия = Новый ДиалогВыбораФайла(Режим); 
	
    ДиалогОткрытия.Каталог				= Объект.КаталогВыгрузки;  
    ДиалогОткрытия.Заголовок			= "Выберите каталог выгрузки файлов"; 	
	ДиалогОткрытия.МножественныйВыбор	= Ложь;
	
	ДиалогОткрытия.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) И Результат.Количество()>0 Тогда
		
		Объект.КаталогВыгрузки = Результат[0];
		
	КонецЕсли;            
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	Объект.КодКомпании = Объект.Организация.Префикс;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ОрганизацияПриИзмененииНаСервере();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокДокументов

&НаКлиенте
Процедура СписокДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли;	
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле.Имя = "СписокДокументовИмяФайла" Тогда 
		
		ЗапуститьПриложение(Объект.КаталогВыгрузки + "/" + ТекущиеДанные.ИмяФайла);
		
	ИначеЕсли Поле.Имя = "СписокДокументовТК" Тогда

		ПараметрыОткрытия = Новый Структура("Ключ", ТекущиеДанные.Контрагент);
			
		ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыОткрытия);
		
	ИначеЕсли Поле.Имя = "СписокДокументовПисьмо" 
				ИЛИ Поле.Имя = "СписокДокументовПисьмоСтатусПисьма" 
				ИЛИ Поле.Имя = "СписокДокументовПисьмоДата" 
				ИЛИ Поле.Имя = "СписокДокументовПисьмоДатаОтправления"
				ИЛИ Поле.Имя = "СписокДокументовТема" Тогда

		ПараметрыОткрытия = Новый Структура("Ключ", ТекущиеДанные.Письмо);
		
		ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыОткрытия);
		
	Иначе	
		
		СтандартнаяОбработка = Истина;
			
	КонецЕсли;	

КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОтметитьВсе(Команда)
	
	Для Каждого СтрокаСписка Из СписокДокументов Цикл
		
		СтрокаСписка.Отметка = Истина;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСнятьОтметки(Команда)
	
	Для Каждого СтрокаСписка Из СписокДокументов Цикл
		
		СтрокаСписка.Отметка = Ложь;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранить(Команда)
	
	Файл = Новый Файл(Объект.КаталогВыгрузки);
	
	Если Не (Файл.Существует() И Файл.ЭтоКаталог()) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Каталог выгрузки " + Объект.КаталогВыгрузки + " не найден");
		
		Возврат;
		
	КонецЕсли;
	
	ПоместитьДокументыВХранилище();  

	УдалитьФайлы(Объект.КаталогВыгрузки, "*.*");
	
	Для Каждого ВыгружаемаяСтрока Из СписокДокументов Цикл 
		
		Если ЗначениеЗаполнено(ВыгружаемаяСтрока.ИмяФайла) И ЭтоАдресВременногоХранилища(ВыгружаемаяСтрока.Адрес) Тогда
			
			ИмяФайла = Объект.КаталогВыгрузки + "/" + ВыгружаемаяСтрока.ИмяФайла;
			
			Данные = ПолучитьИзВременногоХранилища(ВыгружаемаяСтрока.Адрес);
			
			Данные.Записать(ИмяФайла);   
			
		КонецЕсли;
		
	КонецЦикла;	
	
	ОчиститьВременныеХранилища();
	
КонецПроцедуры

&НаСервере
Процедура КомандаОтправитьСейчасНаСервере()
	
	ОтборСтрок = Новый Структура("Отметка", Истина);
	
	СтрокиПисем = СписокДокументов.НайтиСтроки(ОтборСтрок);
	
	ПисьмаКОтправке = Новый Массив;
	
	Для Каждого СтрокаПисем Из СтрокиПисем Цикл
		
		Если СтрокаПисем.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик")
			ИЛИ СтрокаПисем.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Исходящее")
			Тогда
			
			Если ПисьмаКОтправке.Найти(СтрокаПисем.Письмо) = Неопределено Тогда
				
				ПисьмаКОтправке.Добавить(СтрокаПисем.Письмо);
				
			КонецЕсли;	
			
		КонецЕсли;		
		
	КонецЦикла;    
	
	Для Каждого ПисьмоКОтправке Из ПисьмаКОтправке Цикл  
		
		ПисьмоОбъект = ПисьмоКОтправке.ПолучитьОбъект();
		
		ПараметрыПисьма = Взаимодействия.ПараметрыПисьмаДляОтправки(ПисьмоОбъект);
		
		Письмо = РаботаСПочтовымиСообщениями.ПодготовитьПисьмо(ПисьмоОбъект.УчетнаяЗапись, ПараметрыПисьма);
		
		РезультатОтправки = РаботаСПочтовымиСообщениями.ОтправитьПисьмо(ПисьмоОбъект.УчетнаяЗапись, Письмо);  
		
		ПараметрыОбработкиОшибки = УправлениеЭлектроннойПочтой.ПараметрыОбработкиОшибкиОтправки();
		ПараметрыОбработкиОшибки.ПисьмоОбъект                      = ПисьмоОбъект;
		ПараметрыОбработкиОшибки.Ссылка                            = ПисьмоОбъект.Ссылка;
		ПараметрыОбработкиОшибки.ПредставлениеПисьма               = Взаимодействия.ПредставлениеПисьма(ПисьмоОбъект.Тема, ПисьмоОбъект.Дата);
		ПараметрыОбработкиОшибки.КоличествоПопыток                 = 0;
		ПараметрыОбработкиОшибки.ИнкрементироватьКоличествоПопыток = Ложь;
		ПараметрыОбработкиОшибки.СообщатьПользователю              = Истина;
		
		Если ЗначениеЗаполнено(РезультатОтправки.ОшибочныеПолучатели) Тогда
			
			Результат = УправлениеЭлектроннойПочтой.ОбработатьОшибкуОтправкиПисьма(ПараметрыОбработкиОшибки, РезультатОтправки.ОшибочныеПолучатели);
			
			Если Не Результат.ПисьмоОтправлено Тогда
				
				Продолжить;
				
			КонецЕсли;
		КонецЕсли;
	
		ПисьмоОбъект.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено");
		
		ПисьмоОбъект.Записать();  
		
		ОбновитьДанныеПисьмаНаСервере(ПисьмоКОтправке);
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтправитьСейчас(Команда)
	
	КомандаОтправитьСейчасНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура КомандаОтправитьПоПочтеНаСервере() 
	
	ТаблицаКонтрагентов = СписокДокументов.Выгрузить(,"ТК");
	
	ТаблицаКонтрагентов.Свернуть("ТК");
	
	Для Каждого СтрокаКонтрагента Из ТаблицаКонтрагентов Цикл
		
		ОтборСтрок = Новый Структура;
		
		ОтборСтрок.Вставить("ТК", СтрокаКонтрагента.ТК);
		
		МассивСтрок = СписокДокументов.НайтиСтроки(ОтборСтрок);
		
		Если МассивСтрок.Количество() Тогда
			
			СформироватьПисьмо(МассивСтрок);
			
		КонецЕсли;	
		
	КонецЦикла;	   
	
	ТабПисем = СписокДокументов.Выгрузить();      
	
	ТабПисем.Свернуть("Отметка, ТК, Email, Письмо, СтатусПисьма, ДатаОтправления, Дата, Тема");
	
	СписокДокументов.Загрузить(ТабПисем);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтправитьПоПочте(Команда)   

	ПоместитьДокументыВХранилище();
	
	КонтрагентыБезАдресов = Новый Массив;
	
	Для Каждого СтрокаСписка Из СписокДокументов Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаСписка.Email) Тогда
			
			Контрагент = СтрокаСписка.ТК;
			
			Если КонтрагентыБезАдресов.Найти(Контрагент) = Неопределено Тогда
				
				КонтрагентыБезАдресов.Добавить(Контрагент);
				
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;	     
	
	Если КонтрагентыБезАдресов.Количество()>0 Тогда
		
		Для Каждого Контрагент Из КонтрагентыБезАдресов Цикл
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен Emai транспортной компании " + Контрагент);
			
		КонецЦикла;

		Возврат;
		
	КонецЕсли;	

	КомандаОтправитьПоПочтеНаСервере();     
	
	ОбновитьДанныеПисем();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьЗначенияПоУмолчанию()
	
	ЗначенияПоУмолчанию = Новый Структура;
	
	ЗначенияПоУмолчанию.Вставить("КонтактноеЛицо", "Леонов Игорь");
	ЗначенияПоУмолчанию.Вставить("ТелефонКонтактногоЛица", "+(903) 666–99–94");
	ЗначенияПоУмолчанию.Вставить("ТелефонКонтактногоЛица", "");
	ЗначенияПоУмолчанию.Вставить("ВесКоробаДляТК", 9.3);
	ЗначенияПоУмолчанию.Вставить("ОбъемКоробаДляТК", 0.09);
	ЗначенияПоУмолчанию.Вставить("MAILTYPE", "41");
	ЗначенияПоУмолчанию.Вставить("INDEXFROM", "102001");
	ЗначенияПоУмолчанию.Вставить("СтранаДляТК", ПредопределенноеЗначение("Справочник.СтраныМира.Россия"));
	ЗначенияПоУмолчанию.Вставить("ФормаОплатыУслугиДляТК", ПредопределенноеЗначение("Перечисление.ФормыОплаты.Безналичная"));
	ЗначенияПоУмолчанию.Вставить("КодУслугиДляТК", "PCL");
	ЗначенияПоУмолчанию.Вставить("ВариантПеревозкиДляТК", "ДД");
	ЗначенияПоУмолчанию.Вставить("TRANSPORTMODE", "3");
	ЗначенияПоУмолчанию.Вставить("PREPOSTALPREPARATION", "1");
	ЗначенияПоУмолчанию.Вставить("АдресЗабораГрузаДляТК", "143980, Россия, обл Московская, мкр Жeлезнодорожный, ул Южная, дом 21, стр. 3");
	ЗначенияПоУмолчанию.Вставить("VSDДляЗаявокВТК", "0");

	Для Каждого Элемент Из ЗначенияПоУмолчанию Цикл
		
		Если Не ЗначениеЗаполнено(Объект[Элемент.Ключ]) Тогда
			
			Объект[Элемент.Ключ] = Элемент.Значение;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура СохранятьБезОтправкиПриИзменении(Элемент = Неопределено)
	
	Элементы.ФормаКомандаСохранить.Видимость					= Объект.СохранятьБезОтправки;  
	Элементы.СписокДокументовИмяФайла.Видимость					= Объект.СохранятьБезОтправки;  
	Элементы.ФормаКомандаОтправитьПоПочте.Видимость				= Не Объект.СохранятьБезОтправки; 
	Элементы.СписокДокументовКомандаОтправитьСейчас.Видимость	= Не Объект.СохранятьБезОтправки; 
	Элементы.СписокДокументовОтметка.Видимость					= Не Объект.СохранятьБезОтправки; 
	Элементы.СписокДокументовEmail.Видимость					= Не Объект.СохранятьБезОтправки; 
	Элементы.СписокДокументовГруппаПисьмо.Видимость				= Не Объект.СохранятьБезОтправки; 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеДляФормированияДокументов()
	
	Запрос = Новый Запрос;    
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаДокументов.Документ КАК Документ,
	               |	ТаблицаДокументов.ТК КАК ТК
	               |ПОМЕСТИТЬ ВТ_Таблица
	               |ИЗ
	               |	&ТаблицаДокументов КАК ТаблицаДокументов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаДокументов.Документ КАК Документ,
	               |	ТаблицаДокументов.ТК КАК ТК,
	               |	ЕСТЬNULL(КонтрагентыКонтактнаяИнформация.Представление, """") КАК Email
	               |ПОМЕСТИТЬ ВТ_ТаблицаДокументов
	               |ИЗ
	               |	ВТ_Таблица КАК ТаблицаДокументов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	               |			ПО (КонтрагентыКонтактнаяИнформация.Ссылка = Контрагенты.Ссылка)
	               |				И (КонтрагентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailКонтрагента))
	               |		ПО ТаблицаДокументов.ТК = Контрагенты.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ТаблицаДокументов.Документ КАК Документ,
	               |	ВТ_ТаблицаДокументов.ТК КАК ТК,
	               |	РасходныйОрдерНаТовары.Номер КАК Номер,
	               |	РасходныйОрдерНаТовары.Склад КАК Склад,
	               |	РасходныйОрдерНаТоварыОтгружаемыеТовары.УпаковочныйЛистРодитель КАК УпаковочныйЛист,
	               |	РасходныйОрдерНаТовары.Получатель КАК Партнер,
	               |	0 КАК Сумма,
	               |	НоменклатураСправочник.ВидНоменклатуры В ИЕРАРХИИ (&Обувь) КАК ЭтоОбувь,
	               |	Склады.гф_ТоварыВКоробках КАК ТоварыВКоробках,
	               |	РасходныйОрдерНаТоварыОтгружаемыеТовары.УпаковочныйЛист.гф_Комплектация КАК ВариантКомплектации,
	               |	ВариантыКомплектацииНоменклатуры.гф_ВесКороба КАК ВесКороба,
	               |	ВариантыКомплектацииНоменклатуры.гф_ОбъемКороба КАК ОбъемКороба,
	               |	ISNULL(Склады.гф_КодКлиентаТК,"""") КАК КодКлиентаТК,
	               |	ВТ_ТаблицаДокументов.Email КАК Email,
	               |	НоменклатураСправочник.ВидНоменклатуры КАК ВидНоменклатуры
	               |ПОМЕСТИТЬ ВТ_Номенклатура
	               |ИЗ
	               |	ВТ_ТаблицаДокументов КАК ВТ_ТаблицаДокументов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	               |			ПО РасходныйОрдерНаТовары.Склад = Склады.Ссылка
	               |		ПО ВТ_ТаблицаДокументов.Документ = РасходныйОрдерНаТовары.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары.ОтгружаемыеТовары КАК РасходныйОрдерНаТоварыОтгружаемыеТовары
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСправочник
	               |			ПО РасходныйОрдерНаТоварыОтгружаемыеТовары.Номенклатура = НоменклатураСправочник.Ссылка
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист КАК УпаковочныйЛистДокумент
	               |				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
	               |				ПО УпаковочныйЛистДокумент.гф_Комплектация = ВариантыКомплектацииНоменклатуры.Ссылка
	               |			ПО РасходныйОрдерНаТоварыОтгружаемыеТовары.УпаковочныйЛистРодитель = УпаковочныйЛистДокумент.Ссылка
	               |		ПО ВТ_ТаблицаДокументов.Документ = РасходныйОрдерНаТоварыОтгружаемыеТовары.Ссылка
	               |			И (НЕ РасходныйОрдерНаТоварыОтгружаемыеТовары.ЭтоУпаковочныйЛист)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Номенклатура.Документ КАК Документ,
	               |	ВТ_Номенклатура.ТК КАК ТК,
	               |	ВТ_Номенклатура.Номер КАК Номер,
	               |	ВТ_Номенклатура.Склад КАК Склад,
	               |	ВТ_Номенклатура.УпаковочныйЛист КАК УпаковочныйЛист,
	               |	ВТ_Номенклатура.Партнер КАК Партнер,
	               |	СУММА(ВТ_Номенклатура.Сумма) КАК Сумма,
	               |	МАКСИМУМ(ВТ_Номенклатура.ЭтоОбувь) КАК ЭтоОбувь,
	               |	МАКСИМУМ(ВТ_Номенклатура.ТоварыВКоробках) КАК ТоварыВКоробках,
	               |	МАКСИМУМ(ЕСТЬNULL(ВТ_Номенклатура.ВесКороба, &ВесКоробаДляТК)) КАК ВесКороба,
	               |	МАКСИМУМ(ЕСТЬNULL(ВТ_Номенклатура.ОбъемКороба, &ОбъемКоробаДляТК)) КАК ОбъемКороба,
	               |	ВТ_Номенклатура.КодКлиентаТК КАК КодКлиентаТК,
	               |	ВТ_Номенклатура.Email КАК Email,
	               |	МАКСИМУМ(ВТ_Номенклатура.ВидНоменклатуры) КАК ВидНоменклатуры
	               |ПОМЕСТИТЬ ВТ_УпаковочныеЛисты
	               |ИЗ
	               |	ВТ_Номенклатура КАК ВТ_Номенклатура
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_Номенклатура.Склад,
	               |	ВТ_Номенклатура.Документ,
	               |	ВТ_Номенклатура.УпаковочныйЛист,
	               |	ВТ_Номенклатура.Номер,
	               |	ВТ_Номенклатура.Партнер,
	               |	ВТ_Номенклатура.ТК,
	               |	ВТ_Номенклатура.ВесКороба,
	               |	ВТ_Номенклатура.ОбъемКороба,
	               |	ВТ_Номенклатура.КодКлиентаТК,
	               |	ВТ_Номенклатура.Email
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_УпаковочныеЛисты.Документ КАК Документ,
	               |	ВЫБОР
	               |		КОГДА ВТ_УпаковочныеЛисты.ТК = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |			ТОГДА СправочникАдресаДоставки.ТК
	               |		ИНАЧЕ ВТ_УпаковочныеЛисты.ТК
	               |	КОНЕЦ КАК ТК,
	               |	ВТ_УпаковочныеЛисты.Номер КАК Номер,
	               |	ВТ_УпаковочныеЛисты.Склад КАК Склад,
	               |	ВТ_УпаковочныеЛисты.УпаковочныйЛист КАК УпаковочныйЛист,
	               |	УпаковочныйЛистДокумент.Код КАК IDКороба,
	               |	ВТ_УпаковочныеЛисты.Партнер КАК Партнер,
	               |	Контрагенты.Ссылка КАК Контрагент,
	               |	СправочникАдресаДоставки.КонтактноеЛицо КАК КонтактноеЛицо,
	               |	УпаковочныйЛистДокумент.гф_АдресДоставки КАК АдресДоставкиСсылка,
	               |	СправочникАдресаДоставки.Представление КАК АдресДоставки,
	               |	Контрагенты.СтранаРегистрации КАК Страна,
	               |	ВТ_УпаковочныеЛисты.ТоварыВКоробках КАК ТоварыВКоробках,
	               |	ВТ_УпаковочныеЛисты.ЭтоОбувь КАК ЭтоОбувь,
	               |	ВЫБОР
	               |		КОГДА ВТ_УпаковочныеЛисты.ЭтоОбувь
	               |				И ВТ_УпаковочныеЛисты.ТоварыВКоробках
	               |			ТОГДА ВТ_УпаковочныеЛисты.ВесКороба
	               |		ИНАЧЕ &ВесКоробаДляТК
	               |	КОНЕЦ КАК Вес,
	               |	ВЫБОР
	               |		КОГДА ВТ_УпаковочныеЛисты.ЭтоОбувь
	               |				И ВТ_УпаковочныеЛисты.ТоварыВКоробках
	               |			ТОГДА ВТ_УпаковочныеЛисты.ОбъемКороба
	               |		ИНАЧЕ &ОбъемКоробаДляТК
	               |	КОНЕЦ КАК Объем,
	               |	ВТ_УпаковочныеЛисты.КодКлиентаТК КАК КодКлиентаТК,
	               |	0 КАК Длина,
	               |	0 КАК Ширина,
	               |	0 КАК Высота,
	               |	ВТ_УпаковочныеЛисты.Email КАК Email,
	               |	ISNULL(Контрагенты.Представление,"""") КАК КонтрагентПредставление,
	               |	ВТ_УпаковочныеЛисты.Сумма КАК Сумма,
	               |	1 КАК НомерАдреса,
	               |	ISNULL(Партнеры.Код, """") КАК КодКлиента,
	               |	ВТ_УпаковочныеЛисты.ВидНоменклатуры КАК ВидНоменклатуры,
	               |	ВидыНоменклатуры.Представление КАК Содержимое
	               |ИЗ
	               |	ВТ_УпаковочныеЛисты КАК ВТ_УпаковочныеЛисты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист КАК УпаковочныйЛистДокумент
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гф_АдресаДоставки КАК СправочникАдресаДоставки
	               |			ПО УпаковочныйЛистДокумент.гф_АдресДоставки = СправочникАдресаДоставки.Ссылка
	               |		ПО ВТ_УпаковочныеЛисты.УпаковочныйЛист = УпаковочныйЛистДокумент.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	               |			ПО Контрагенты.Партнер = Партнеры.Ссылка
	               |		ПО ВТ_УпаковочныеЛисты.Партнер = Контрагенты.Партнер
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	               |		ПО ВТ_УпаковочныеЛисты.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ТК,
	               |	Документ";
	

	Запрос.Параметры.Вставить("ТаблицаДокументов",Объект.ДокументыКОтправке.Выгрузить());    
	Запрос.Параметры.Вставить("Обувь",Объект.ГруппаОбувь);    
	Запрос.Параметры.Вставить("ВесКоробаДляТК",Объект.ВесКоробаДляТК);    
	Запрос.Параметры.Вставить("ОбъемКоробаДляТК",Объект.ОбъемКоробаДляТК);    
	                                                            
	Результат = Запрос.Выполнить().Выгрузить();    
	
	Результат.Колонки.Добавить("ТелефонКонтактногоЛица");
	Результат.Колонки.Добавить("ЭлектроннаяПочта");
	
	Для Каждого СтрокаДанных Из Результат Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.КонтактноеЛицо) Тогда
			
			Продолжить;
			
		КонецЕсли;	
		
		Для Каждого СтрокаКонтактнойИнформации Из СтрокаДанных.КонтактноеЛицо.КонтактнаяИнформация Цикл
			
			Если СтрокаКонтактнойИнформации.Вид = 
				ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица") Тогда 
				
				СтрокаДанных.ТелефонКонтактногоЛица	= СтрокаКонтактнойИнформации.Представление;
				
			ИначеЕсли СтрокаКонтактнойИнформации.Вид = 
				ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailКонтактногоЛица") Тогда 
				
				СтрокаДанных.ЭлектроннаяПочта	= СтрокаКонтактнойИнформации.Представление;
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;	
			
		КонецЦикла;	     
		
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции	

&НаСервере
Процедура ПоместитьДокументыВХранилище()     
	
	СписокДокументов.Очистить();
	
	ДанныеДокументов = ПолучитьДанныеДляФормированияДокументов();
	
	ТаблицаТК = ДанныеДокументов.Скопировать(,"ТК, Email");
	
	ТаблицаТК.Свернуть("ТК, Email");
	
	Для Каждого СтрокаТК Из ТаблицаТК Цикл
		
		ОтборПоТК = Новый Структура("ТК", СтрокаТК.ТК);
		
		СтрокиПоТК = ДанныеДокументов.НайтиСтроки(ОтборПоТК);
		
		Если СтрокиПоТК.Количество() Тогда
			
			ДокументПР = СформироватьДокументПР(СтрокиПоТК);   
			
			ПоместитьФайлВХранилище(СтрокаТК.ТК , СтрокаТК.Email, ДокументПР, "ПР");
			
			ДокументDPD = СформироватьДокументDPD(СтрокиПоТК);   
			
			ПоместитьФайлВХранилище(СтрокаТК.ТК , СтрокаТК.Email, ДокументDPD, "DPD");
			
			ДокументКонсолидированный = СформироватьДокументКонсолидированный(СтрокиПоТК);   
			
			ПоместитьФайлВХранилище(СтрокаТК.ТК , СтрокаТК.Email, ДокументКонсолидированный, "Консолидированный");
			
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Функция СформироватьДокументПР(СтрокиПоТК)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Макет = ОбработкаОбъект.ПолучитьМакет("МакетПР");
	
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ОбластьШапкаТаблицы");
	ОбластьСтрока       = Макет.ПолучитьОбласть("ОбластьСтрока");  
	
	ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы); 
	
	Для Каждого СтрокаДанных Из СтрокиПоТК Цикл    
		
		ОбластьСтрока.Параметры.ADDRESSLINE   			= СтрокаДанных.АдресДоставки;
		ОбластьСтрока.Параметры.ADRESAT       	 		= СтрокаДанных.КонтрагентПредставление + ";" + СтрокаДанных.КодКлиентаТК + СтрокаДанных.Номер;
		ОбластьСтрока.Параметры.MASS          			= СтрокаДанных.Вес; 
		ОбластьСтрока.Параметры.VALUE	      			= СтрЗаменить(Формат(СтрокаДанных.Сумма, "ЧЦ=15; ЧДЦ=2; ЧРД=."),Символы.НПП,"");
		ОбластьСтрока.Параметры.COMMENT      			= СтрокаДанных.КодКлиентаТК + СтрокаДанных.Номер; 
		ОбластьСтрока.Параметры.MAILTYPE      			= Объект.MAILTYPE;
		ОбластьСтрока.Параметры.INDEXFROM     			= Объект.INDEXFROM;
		ОбластьСтрока.Параметры.VSD           			= Объект.VSDДляЗаявокВТК;
		ОбластьСтрока.Параметры.TRANSPORTMODE 			= Объект.TRANSPORTMODE;
		ОбластьСтрока.Параметры.COSTCENTER    			= СтрокаДанных.КодКлиентаТК;
		ОбластьСтрока.Параметры.PREPOSTALPREPARATION	= Объект.PREPOSTALPREPARATION;
		ОбластьСтрока.Параметры.ORDERNUM      			= СтрокаДанных.IDКороба; 
		ОбластьСтрока.Параметры.TELADDRESS				= СтрокаДанных.ТелефонКонтактногоЛица;
		                       
		ТабличныйДокумент.Вывести(ОбластьСтрока);   
		
	КонецЦикла; 
		
	Возврат ТабличныйДокумент;
	
КонецФункции	

Функция СформироватьДокументDPD(СтрокиПоТК)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Макет = ОбработкаОбъект.ПолучитьМакет("МакетDPD");
	
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ОбластьШапкаТаблицы");
	ОбластьСтрока       = Макет.ПолучитьОбласть("ОбластьСтрока"); 

	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
	
	Для Каждого СтрокаДанных Из СтрокиПоТК Цикл    
		
		ОбластьСтрока.Параметры.ДатаЗагрузки 		  	= Формат(Объект.ДатаВыгрузки,"ДФ=dd.MM.yyyy" );
		ОбластьСтрока.Параметры.ИНН			 		  	= СтрокаДанных.КодКлиентаТК;
		ОбластьСтрока.Параметры.НомерТТН     		  	= СтрокаДанных.КодКлиентаТК + СтрокаДанных.Номер;
		ОбластьСтрока.Параметры.НомерКороба 		  	= СтрокаДанных.IDКороба;
		ОбластьСтрока.Параметры.НомерАдреса  		  	= СтрокаДанных.НомерАдреса;
		ОбластьСтрока.Параметры.НазваниеКлиента 	  	= СтрокаДанных.Контрагент;
		ОбластьСтрока.Параметры.АдресКлиента 		  	= СтрокаДанных.АдресДоставки;
		ОбластьСтрока.Параметры.Вес 				  	= СтрокаДанных.Вес;;
		ОбластьСтрока.Параметры.Длина				 	= СтрокаДанных.Длина;
		ОбластьСтрока.Параметры.Ширина				  	= СтрокаДанных.Ширина;
		ОбластьСтрока.Параметры.Высота 				  	= СтрокаДанных.Высота;
		ОбластьСтрока.Параметры.Цена 				  	= СтрокаДанных.Сумма;
		ОбластьСтрока.Параметры.КодКлиента	          	= СокрЛП(СтрокаДанных.КодКлиента);
		ОбластьСтрока.Параметры.Объем 					= Формат(СтрокаДанных.Объем,"ЧЦ=15; ЧДЦ=2");
		ОбластьСтрока.Параметры.КонтактноеЛицо			= СтрокаДанных.КонтактноеЛицо; 
		ОбластьСтрока.Параметры.Страна					= СтрокаДанных.Страна;
		ОбластьСтрока.Параметры.ФормаОплатыУслуги		= Объект.ФормаОплатыУслугиДляТК;
		ОбластьСтрока.Параметры.КодУслуги				= Объект.КодУслугиДляТК;
		ОбластьСтрока.Параметры.ВариантПеревозки		= Объект.ВариантПеревозкиДляТК;
		ОбластьСтрока.Параметры.Содержимое				= ?(СтрокаДанных.Содержимое = "Accessories", "Аксессуары", СтрокаДанных.Содержимое); 
		ОбластьСтрока.Параметры.ТелефонКонтактногоЛица	= СтрокаДанных.ТелефонКонтактногоЛица;
		ОбластьСтрока.Параметры.ЭлектроннаяПочта		= СтрокаДанных.ЭлектроннаяПочта;
		ОбластьСтрока.Параметры.Опции                  	= ?(СтрокаДанных.Страна = ПредопределенноеЗначение("Справочник.СтраныМира.Россия"),
															"ПРР_ДСД", "ПРД/ВДО_ДСД");

		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции

Функция СформироватьДокументКонсолидированный(СтрокиПоТК);  
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Макет = ОбработкаОбъект.ПолучитьМакет("МакетКонсолидированный");
	
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ОбластьШапкаТаблицы");
	ОбластьСтрока       = Макет.ПолучитьОбласть("ОбластьСтрока"); 

	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
	
	ПерваяСтрока = Истина;
	
	Документ = Неопределено;
	
	Для Каждого СтрокаДанных Из СтрокиПоТК Цикл    
		
		Если СтрокаДанных.Документ  <> Документ Тогда
			
			Если Не ПерваяСтрока тогда
				
				ТабличныйДокумент.Вывести(ОбластьСтрока);
				
			КонецЕсли;
			
			ВесГруза       = 0;
			ОбъемГруза     = 0;
			КоличествоМест = 0;
			Сумма          = 0;
			
			ОбластьСтрока.Параметры.ВремяОтправки 			  		 	= Объект.ДатаВыгрузки;
			ОбластьСтрока.Параметры.АдресЗабораГруза 		 		 	= Объект.АдресЗабораГрузаДляТК;
			ОбластьСтрока.Параметры.КонтактноеЛицоОтправителя		 	= Объект.КонтактноеЛицо;
			ОбластьСтрока.Параметры.ТелефонКонтактногоЛицаОтправителя	= Объект.ТелефонКонтактногоЛица;
			ОбластьСтрока.Параметры.КонтактноеЛицо 					 	= СтрокаДанных.КонтактноеЛицо;
			ОбластьСтрока.Параметры.ТелефонКонтактногоЛица				= СтрокаДанных.ТелефонКонтактногоЛица;
			ОбластьСтрока.Параметры.ЭлектроннаяПочта					= СтрокаДанных.ЭлектроннаяПочта;
			ОбластьСтрока.Параметры.Грузополучатель   					= СтрокаДанных.Контрагент;
			ОбластьСтрока.Параметры.ТК 			    					= СтрокаДанных.ТК;
			ОбластьСтрока.Параметры.АдресДоставки 	 					= СтрокаДанных.АдресДоставки;
			ОбластьСтрока.Параметры.Водители 		 					= СтрокаДанных.ТК;
			ОбластьСтрока.Параметры.НомерЗаказа      					= СтрокаДанных.КодКлиентаТК + СтрокаДанных.Номер;
			ОбластьСтрока.Параметры.КодАдресаДоставки					= СтрокаДанных.НомерАдреса;  
			ОбластьСтрока.Параметры.Отправитель     					= Объект.Организация;
			ОбластьСтрока.Параметры.ДопПоле          					= Объект.Организация;
			ОбластьСтрока.Параметры.КодКлиента       					= СтрокаДанных.КодКлиента;
			ОбластьСтрока.Параметры.Страна 			 					= СтрокаДанных.Страна;
			ОбластьСтрока.Параметры.ФормаОплатыУслуги					= Объект.ФормаОплатыУслугиДляТК;
			ОбластьСтрока.Параметры.Содержимое 		 					= СтрокаДанных.Содержимое;
			ОбластьСтрока.Параметры.ID_номер 		 					= СтрокаДанных.КодКлиентаТК;
			ОбластьСтрока.Параметры.ДопПоле2 		 					= СтрокаДанных.КодКлиентаТК;
			ОбластьСтрока.Параметры.ID_номерCompany  					= СтрокаДанных.КодКлиентаТК+ "_" + Объект.Организация;
			
		КонецЕсли;
		
		КоличествоМест = КоличествоМест + 1;
		ВесГруза	   = ВесГруза + Число(СтрЗаменить(СтрокаДанных.Вес,",","."));
		ОбъемГруза     = ОбъемГруза + Число(СтрЗаменить(СтрокаДанных.Объем, ",","."));
		Сумма          = Сумма + СтрокаДанных.Сумма; 

		ОбластьСтрока.Параметры.КоличествоМест = КоличествоМест;
		ОбластьСтрока.Параметры.ВесГруза       = ВесГруза;
		ОбластьСтрока.Параметры.ОбъемГруза     = Формат(ОбъемГруза,"ЧЦ=15; ЧДЦ=2"); 
        ОбластьСтрока.Параметры.Сумма          = СтрЗаменить(Формат(Сумма, "ЧЦ=15; ЧДЦ=2; ЧРД=."),Символы.НПП,"");

		Документ = СтрокаДанных.Документ;
		
		ПерваяСтрока = Ложь;
		
	КонецЦикла;     
	
	ТабличныйДокумент.Вывести(ОбластьСтрока);
	
	Возврат ТабличныйДокумент;
	
КонецФункции


&НаСервере
Процедура ПоместитьФайлВХранилище(ТК, Email, ТабличныйДокумент, ВидФайла)
	
	ИмяФайла = Объект.КодКомпании + "_" + ТК.Наименование 
	+ "_" + Формат(Объект.ДатаВыгрузки,"ДФ=dd.MM.yy") + "_" + ВидФайла;  
	
	ИмяФайлаДляОтправки = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла + ".xls","");
	
	ПутьКФайлу     = КаталогВременныхФайлов() + ИмяФайлаДляОтправки;
	
	ТабличныйДокумент.Записать(ПутьКФайлу, ТипФайлаТабличногоДокумента.XLS);
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПутьКФайлу);
	
	СтрокаДокумента = СписокДокументов.Добавить();
	
	СтрокаДокумента.Отметка		= Истина;
	СтрокаДокумента.ТК			= ТК;   
	СтрокаДокумента.Email		= Email;
	СтрокаДокумента.ИмяФайла	= ИмяФайлаДляОтправки;
	СтрокаДокумента.Адрес		= ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	
	УдалитьФайлы(Объект.КаталогВыгрузки, "ПутьКФайлу");
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьВременныеХранилища()
	
	Для Каждого СтрокаДокументов Из СписокДокументов Цикл
		
		Если ЭтоАдресВременногоХранилища(СтрокаДокументов.Адрес) Тогда   
			
			УдалитьИзВременногоХранилища(СтрокаДокументов.Адрес);
			
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры	

// Производит подстановку параметров в шаблон сообщения
//
// Параметры:
//  Сообщение  - Структрура - см. ШаблоныСообщений.СформироватьСообщение
//
Процедура ВставитьПараметрыВТекстСообщения(Сообщение, МассивСтрок)

	ФайлКартинки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ФайлЛоготип");
	
	ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(ФайлКартинки);
	
	АдресКартинки = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор);
	
	ВставитьКартинкуВТекстСообщения(Сообщение, "Лого", АдресКартинки);
	
	ВставитьПараметрВТекстСообщения(Сообщение, "Наименование организации", Объект.Организация.НаименованиеПолное);    
	
	СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Объект.Организация, ТекущаяДатаСеанса());
	
	ВставитьПараметрВТекстСообщения(Сообщение, "Адрес офиса", 
		ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ЮридическийАдрес"));
	
	ВставитьПараметрВТекстСообщения(Сообщение, "Телефон организации", 
		ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "Телефоны"));
		
КонецПроцедуры // ВставитьПараметрыВТекстСообщения()

&НаСервереБезКонтекста
Процедура ВставитьПараметрВТекстСообщения(Сообщение, ИмяПараметра, ЗначениеПараметра)
	
	Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "&lt;" + ИмяПараметра + "&gt;", ЗначениеПараметра);
	
КонецПроцедуры	
  
&НаСервереБезКонтекста
Процедура ВставитьКартинкуВТекстСообщения(Сообщение, ИмяПараметра, АдресКартинки)
	
	Идентификатор = Строка(Новый УникальныйИдентификатор());
	
	Вложение = Сообщение.Вложения.Добавить();
	
	Вложение.АдресВоВременномХранилище	= АдресКартинки;
	Вложение.Представление				= ИмяПараметра;
	Вложение.Идентификатор				= Идентификатор;
	
	Сообщение.Текст = СтрЗаменить(Сообщение.Текст,
		"&lt;" + ИмяПараметра + "&gt;",
		"<img src=""cid:" + Идентификатор + """ style=""border:none;""></img>");
	
КонецПроцедуры	

// Формирует письмо по строкам списка документов
//
// Параметры:
//  МассивСтрок  - Массив
//
&НаСервере
Процедура СформироватьПисьмо(МассивСтрок)
	
	ДополнительныеПараметры	= Новый Структура;     
	
	Предмет = МассивСтрок[0].ТК;  
	
	Письмо = МассивСтрок[0].Письмо; 
	
	Сообщение = ШаблоныСообщений.СформироватьСообщение(Объект.Шаблон, Предмет, УникальныйИдентификатор, ДополнительныеПараметры);
	
	ТемаСообщения = Объект.Организация.НаименованиеПолное + ". Документы на транспортировку";
	
	Сообщение.Тема = ТемаСообщения;
	
	ВставитьПараметрыВТекстСообщения(Сообщение, МассивСтрок);

	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		
		Вложение = Сообщение.Вложения.Добавить();
		
		Вложение.АдресВоВременномХранилище	= СтрокаМассива.Адрес;
		Вложение.Представление				= СтрокаМассива.ИмяФайла;
		
	КонецЦикла;      
	
	СоздатьИлиЗаполнитьПисьмо(Письмо, Сообщение, МассивСтрок);
	
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		
		СтрокаМассива.Письмо = Письмо;
		
	КонецЦикла;                                       
	
КонецПроцедуры

Процедура СоздатьИлиЗаполнитьПисьмо(ПисьмоСсылка, Сообщение, МассивСтрок)
	
	Если ЗначениеЗаполнено(ПисьмоСсылка) Тогда
		
		Возврат;
		
	КонецЕсли;	
	
	Письмо = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент(); 
		
	Письмо.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Исходящее");
	
	ПисьмоHTML = (Сообщение.ДополнительныеПараметры.ФорматПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML);
		
	Письмо.Автор                    = Пользователи.ТекущийПользователь();
	Письмо.Ответственный            = Пользователи.ТекущийПользователь();
	Письмо.Дата                     = ТекущаяДатаСеанса();
	Письмо.Важность                 = Перечисления.ВариантыВажностиВзаимодействия.Обычная;
	Письмо.Кодировка                = "UTF-8";
	Письмо.ОтправительПредставление = Объект.Организация.НаименованиеПолное;
	Письмо.Дата						= ТекущаяДатаСеанса();
		
	Если ПисьмоHTML Тогда
		
		Письмо.ТекстHTML = Сообщение.Текст;
		Письмо.Текст     = Взаимодействия.ПолучитьОбычныйТекстИзHTML(Сообщение.Текст);
		
	Иначе
		
		Письмо.Текст = Сообщение.Текст;
		
	КонецЕсли;
		
	Письмо.Тема = Сообщение.Тема;
	Письмо.ТипТекста = ?(ПисьмоHTML, Перечисления.ТипыТекстовЭлектронныхПисем.HTML, Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
	Письмо.УчетнаяЗапись = Объект.УчетнаяЗапись;
	Письмо.ВзаимодействиеОснование = Неопределено;
	
	НастройкиПользователя = Взаимодействия.ПолучитьПараметрыРаботыПользователяДляИсходящегоЭлектронногоПисьма(
	Объект.УчетнаяЗапись, Сообщение.ДополнительныеПараметры.ФорматПисьма, Истина);
	ЗаполнитьЗначенияСвойств(Письмо, НастройкиПользователя);
	
	Письмо.УдалятьПослеОтправки = Ложь;
	Письмо.Комментарий = "Создано и отправлено по шаблону" + " - " + Сообщение.ДополнительныеПараметры.Наименование;
		
	СписокПолучателейСпискомЗначений = (ТипЗнч(Сообщение.Получатель) = Тип("СписокЗначений"));
	
	Письмо["ПолучателиПисьма"].Очистить();  
	
	Для Каждого ПолучательПисьма Из Сообщение.Получатель Цикл
		
		НоваяСтрока = Письмо["ПолучателиПисьма"].Добавить();
		
		Если СписокПолучателейСпискомЗначений Тогда    
			
			НоваяСтрока.Адрес         = ПолучательПисьма.Значение;
			НоваяСтрока.Представление = ПолучательПисьма.Представление;
			
		Иначе
			
			НоваяСтрока.Адрес         = ПолучательПисьма.Адрес;
			НоваяСтрока.Представление = ПолучательПисьма.Представление;
			НоваяСтрока.Контакт       = ПолучательПисьма.ИсточникКонтактнойИнформации;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Письмо.СписокПолучателейПисьма = ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Письмо.ПолучателиПисьма, Ложь);
	
	Письмо.ЕстьВложения = (Сообщение.Вложения.Количество() > 0);
	
	РазмерВложений  = 0;
	РазмерыВложений = Новый Соответствие;   
	
	Для Каждого Вложение Из Сообщение.Вложения Цикл
		
		Размер = ПолучитьИзВременногоХранилища(Вложение.АдресВоВременномХранилище).Размер() * 1.5;
		
		РазмерВложений = РазмерВложений + Размер;

		РазмерыВложений.Вставить(Вложение.АдресВоВременномХранилище, Размер);
		
		Если ЗначениеЗаполнено(Вложение.Идентификатор) Тогда
			
			Идентификатор = СтроковыеФункции.СтрокаЛатиницей(Вложение.Идентификатор);
			
			Письмо.ТекстHTML = СтрЗаменить(Письмо.ТекстHTML, "cid:" + Вложение.Идентификатор, "cid:" + Идентификатор);
			
			Вложение.Идентификатор = Идентификатор;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Письмо.Размер = РазмерВложений + СтрДлина(Письмо.Тема) * 2
	+ ?(ПисьмоHTML, СтрДлина(Письмо.ТекстHTML), СтрДлина(Письмо.Текст)) * 2;  
	
	Письмо.Записать();  
	
	ПисьмоСсылка = Письмо.Ссылка;     
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы КАК ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы
	               |ГДЕ
	               |	ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла";
	
	Запрос.Параметры.Вставить("ВладелецФайла", ПисьмоСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПрисоединеныйФайл = Выборка.Ссылка.ПолучитьОбъект();
		
		ПрисоединеныйФайл.Удалить();
		
	КонецЦикла;	
		
	Для Каждого Вложение Из Сообщение.Вложения Цикл
		
		ПараметрыВложения = Новый Структура;
		ПараметрыВложения.Вставить("ИмяФайла", Вложение.Представление);
		ПараметрыВложения.Вставить("Размер", РазмерыВложений[Вложение.АдресВоВременномХранилище]);
		
		Если ПустаяСтрока(Вложение.Идентификатор) Тогда
			
			УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(Письмо.Ссылка,
			Вложение.АдресВоВременномХранилище, ПараметрыВложения);
			
		ИначеЕсли ПисьмоHTML Тогда
			
			ПараметрыВложения.Вставить("ИДФайлаЭлектронногоПисьма", Вложение.Идентификатор);
			
			УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(Письмо.Ссылка,
			Вложение.АдресВоВременномХранилище, ПараметрыВложения);
			
		Иначе
			
			Продолжить; //Чтобы контроль кода не доколупался
			
		КонецЕсли;
						
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьДанныеПисем()            
	
	МассивОбновленныхПисем = Новый Массив;
	
	Для Каждого СтрокаПисем Из СписокДокументов Цикл
		
		Если ЗначениеЗаполнено(СтрокаПисем.Письмо) И МассивОбновленныхПисем.Найти(СтрокаПисем.Письмо) = Неопределено Тогда
			
			МассивОбновленныхПисем.Добавить(СтрокаПисем.Письмо);
			
			ОбновитьДанныеПисьмаНаСервере(СтрокаПисем.Письмо);
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры	

// Обновляет статус и даты письма в табличной части
//
// Параметры:
//  Письмо  - ДокументСсылка.ЭлектронноеПисьмоВходящее
//
&НаСервере
Процедура ОбновитьДанныеПисьмаНаСервере(Письмо)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ЭлектронноеПисьмоИсходящее.Дата КАК Дата,
	               |	ЭлектронноеПисьмоИсходящее.ДатаОтправления КАК ДатаОтправления,
	               |	ЭлектронноеПисьмоИсходящее.СтатусПисьма КАК СтатусПисьма,
	               |	ЭлектронноеПисьмоИсходящее.Тема КАК Тема
	               |ИЗ
	               |	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	               |ГДЕ
	               |	ЭлектронноеПисьмоИсходящее.Ссылка = &Письмо";
	
	Запрос.Параметры.Вставить("Письмо", Письмо);  
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ОтборСтрок = Новый Структура("Письмо", Письмо);
		
		СтрокиПисем = СписокДокументов.НайтиСтроки(ОтборСтрок);
		
		Для Каждого СтрокаПисем Из СтрокиПисем Цикл
			
			ЗаполнитьЗначенияСвойств(СтрокаПисем, Выборка);
			
		КонецЦикла;	                  
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
