Перем _Свойства;
Перем _Импортер;
Перем _АдресИмпортера;
Перем СписокПолейЭтикетки;

Перем НаПринтер;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Обработчики событий элементов формы
//

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Гандзюк Е. 12.08.2011
//
Процедура КоманднаяПанельТоварыВыбратьВсеСтроки(Кнопка)
	
	Для Каждого СтрокаТЧ Из ЭтотОбъект.Товары Цикл
		
		СтрокаТЧ.Пометка = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Гандзюк Е. 12.08.2011
//
Процедура КоманднаяПанельТоварыСнятьВсеОтметки(Кнопка)
	
	Для Каждого СтрокаТЧ Из ЭтотОбъект.Товары Цикл
		
		СтрокаТЧ.Пометка = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Гандзюк Е. 08.08.2011
//
Процедура КоманднаяПанельТоварыСформироватьСтрокиПеревода(Кнопка)
	
	ПроверитьПереводОбъектов(ПолучитьДеревоДанных(), Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Гандзюк Е. 01.08.2011
//
Процедура КонтрагентОчистка(Элемент, СтандартнаяОбработка)
	
	ЗаполнитьТабличнуюЧасть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Гандзюк Е. 01.08.2011
//
Процедура КонтрагентПриИзменении(Элемент)
	
	ЗаполнитьТабличнуюЧасть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Гандзюк Е. 01.08.2011
//
Процедура СезонПриИзменении(Элемент)
	
	ЗаполнитьТабличнуюЧасть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Гандзюк Е. 08.08.2011
//
Процедура СписокОбъектовПриИзменении(Элемент)
	
	ЗаполнитьТабличнуюЧасть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции
//

Функция ПолучитьСоответствие(ВидНоменклатуры, Соответствие)
	
	нашли = Соответствие.Получить(ВидНоменклатуры);
	Если нашли = Неопределено Тогда
		ПолучитьСоответствие(ВидНоменклатуры.Родитель, Соответствие);
	КонецЕсли;
	
	возврат нашли;
КонецФункции // ПолучитьСоответствие()

Процедура ЗадатьОформление(область, ОформлениеПоля)
	Если ОформлениеПоля.АвтоОтступ.Использование Тогда
		область.АвтоОтступ = ОформлениеПоля.АвтоОтступ.Значение;
	КонецЕсли;
	Если ОформлениеПоля.ВертикальноеПоложение.Использование Тогда
		область.ВертикальноеПоложение = ОформлениеПоля.ВертикальноеПоложение.Значение;
	КонецЕсли;
	Если ОформлениеПоля.ВыделятьОтрицательные.Использование Тогда
		область.ВыделятьОтрицательные = ОформлениеПоля.ВыделятьОтрицательные.Значение;
	КонецЕсли;
	Если ОформлениеПоля.ГоризонтальноеПоложение.Использование Тогда
		область.ГоризонтальноеПоложение = ОформлениеПоля.ГоризонтальноеПоложение.Значение;
	КонецЕсли;
	Если ОформлениеПоля.ОриентацияТекста.Использование Тогда
		область.ОриентацияТекста = ОформлениеПоля.ОриентацияТекста.Значение;
	КонецЕсли;
	Если ОформлениеПоля.Отступ.Использование Тогда
		область.Отступ = ОформлениеПоля.Отступ.Значение;
	КонецЕсли;
	//Если ОформлениеПоля.Текст.Использование Тогда
	//	область.Текст = ОформлениеПоля.Текст.Значение;
	//КонецЕсли;
	Если ОформлениеПоля.Формат.Использование Тогда
		область.Формат = ОформлениеПоля.Формат.Значение;
	КонецЕсли;
	Если ОформлениеПоля.ЦветТекста.Использование Тогда
		область.ЦветТекста = ОформлениеПоля.ЦветТекста.Значение;
	КонецЕсли;
	Если ОформлениеПоля.ЦветФона.Использование Тогда
		область.ЦветФона = ОформлениеПоля.ЦветФона.Значение;
	КонецЕсли;
	Если ОформлениеПоля.Шрифт.Использование Тогда
		область.Шрифт = ОформлениеПоля.Шрифт.Значение;
	КонецЕсли;
КонецПроцедуры

Процедура ПечатьЗаголовка(ТД, Макет, строкаС, ВнешняяКомпонента)
	
	Область = Макет.ПолучитьОбласть("НомерСерии");
	Область.Параметры.НомерСерии = строкаС.НомерСерии;
	Область.Параметры.Артикул = строкаС.АртикулУпаковки;
	
	Если ЗначениеЗаполнено(строкаС.НомерСерии) Тогда
		ПараметрыШтрихкода = новый Структура("ТипКода, Штрихкод, Ширина, Высота, ПрозрачныйФон, ОтображатьТекст",
		99, строкаС.НомерСерии, 300, 5, Истина, Ложь);
		
		картинка = ПолучитьКартинкуШтрихкода(ВнешняяКомпонента, ПараметрыШтрихкода);
		Область.Рисунки.Штрих2.Картинка = картинка;
	КонецЕсли;
	
	ТД.Вывести(Область);
	
КонецПроцедуры

//ЛИТ разумова 10.08.21++ пчеать серии внижу документа
Процедура ПечатьПодвала(ТД, Макет, строкаС)
	
	ПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
	ТестоваяСтрока = Макет.ПолучитьОбласть("ТестоваяСтрока");
	
	Область = Макет.ПолучитьОбласть("НомерСерииПодвал");
	Область.Параметры.НомерСерии = строкаС.НомерСерии;
	
	Пока ТД.ПроверитьВывод(ТестоваяСтрока)и ТД.ВысотаТаблицы%47<>0   цикл
		ТД.Вывести(ПустаяСтрока);
	КонецЦикла;
	 		
	ТД.Вывести(Область);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Гандзюк Е. 2012.01.26
//
Процедура ПечатьЭтикетки(НаПринтерЭтикеток)
	Перем ТекущийАртикул;
	Перем Производитель;
	Перем АдресПроизводителя;
	Перем Декларация;
	
	СоответствиеПоставщиков = новый Соответствие;
	ДеревоТовары = ПолучитьДеревоДанных();
	
	Если Не ПроверитьЗаполнениеНеобходимыхДанных(ДеревоТовары) Тогда
		Возврат
	КонецЕсли;
	
	МакетАртикул = ЭтотОбъект.ПолучитьМакет("Артикул").ПолучитьОбласть("Заголовок");
	
	ГраницаМакета = 13;
	КоличествоСтрок = 3;
	КоличествоКолонок = 6;
	//КоличествоСтрок = 5;
	//КоличествоКолонок = 4;
	ЭтикетокНаЛисте = КоличествоСтрок * КоличествоКолонок;
	ИндексЭтикетки = 0;
	
	ТД = Новый ТабличныйДокумент;
	
	запрос = новый Запрос(
	"ВЫБРАТЬ
	|	выборка.Ссылка,
	|	выборка.ХранилищеНастроек
	|ИЗ
	|	Справочник.СохраненныеНастройки КАК выборка
	|ГДЕ
	|	выборка.ТипНастройки = ЗНАЧЕНИЕ(Перечисление.ТипыНастроек.ПроизвольныеНастройки)
	|	И выборка.НастраиваемыйОбъект = ""ПечатьЭтикеток.Соответствия""");
	выборка = запрос.Выполнить().Выбрать();
	Если выборка.Следующий() Тогда
		СоответствиеНастроек = новый Соответствие;
		НастрокиСоответствия = выборка.ХранилищеНастроек.Получить();
		Для каждого строка Из НастрокиСоответствия Цикл
			СоответствиеНастроек.Вставить(строка.ВидНоменклатуры, строка.Настройка);
		КонецЦикла;
	Иначе
		ВызватьИсключение "Не заданы настройки этикеток для печати!";
	КонецЕсли;
	
	Свойство_GLN_manufacturer 	= Справочники.B2B_w_Настройки.Свойство_GLN_manufacturer.Значение;
	Свойство_Material_Surface 	= Справочники.B2B_w_Настройки.Свойство_Material_Surface.Значение;
	Свойство_Material_Lining 	= Справочники.B2B_w_Настройки.Свойство_Material_Lining.Значение;
	Свойство_Material_Bottom 	= Справочники.B2B_w_Настройки.Свойство_Material_Bottom.Значение;
	Свойство_Сезон 				= Справочники.B2B_w_Настройки.Свойство_Supplier_season.Значение;
	Свойство_Декларация 		= Справочники.B2B_w_Настройки.Свойсво_Код_Декларации.Значение;
	Свойство_Размер 			= Справочники.B2B_w_Настройки.Свойство_Size.Значение;
	
	Свойство_ДатаИзготовления 	= Справочники.B2B_w_Настройки.Свойство_Дата_Изготовления.Значение;
	
	ВнешняяКомпонента 			= ПодключитьВнешнююКомпонентуПечатиШтрихкода();
	ВнешняяКомпонента_стар 		= ПодключитьВнешнююКомпонентуПечатиШтрихкода_старый();
	
	//НАЧАЛО ИЗМЕНЕНИЙ, МАСТЕР СОФТ, АЛЕКСЕЙ, 09.06.2020
	//получим даты получения КМ
	//Состояние("Получение дат изготовления КМ...");
	//нач_запрос = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ЗапросКМ = Новый Запрос;
	ЗапросКМ.Текст = 
	"ВЫБРАТЬ
	|	ТЧ.Номенклатура КАК Номенклатура,
	|	ТЧ.КМ КАК КМ
	|ПОМЕСТИТЬ ВТ_ТЧ
	|ИЗ
	|	&ТЧ КАК ТЧ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТЧ.Номенклатура КАК Номенклатура,
	|	ВТ_ТЧ.КМ КАК КМ,
	|	ЕСТЬNULL(Т1.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаИзготовленияКМ
	|ИЗ
	|	ВТ_ТЧ КАК ВТ_ТЧ
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Т.Номенклатура КАК Номенклатура,
	|			Т.КМ КАК КМ,
	|			МИНИМУМ(Т.Период) КАК Период
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ЛИТ_ЗаказКодовМаркировкиОбороты.Номенклатура КАК Номенклатура,
	|				ЛИТ_ЗаказКодовМаркировкиОбороты.КМ КАК КМ,
	|				ЛИТ_ЗаказКодовМаркировкиОбороты.КоличествоРасход КАК КоличествоРасход,
	|				ЛИТ_ЗаказКодовМаркировкиОбороты.Период КАК Период
	|			ИЗ
	|				РегистрНакопления.ЛИТ_ЗаказКодовМаркировки.Обороты(
	|						,
	|						,
	|						День,
	|						(Номенклатура, КМ) В
	|							(ВЫБРАТЬ
	|								ВТ_ТЧ.Номенклатура,
	|								ВТ_ТЧ.КМ
	|							ИЗ
	|								ВТ_ТЧ)) КАК ЛИТ_ЗаказКодовМаркировкиОбороты
	|			ГДЕ
	|				ЛИТ_ЗаказКодовМаркировкиОбороты.КоличествоРасход > 0) КАК Т
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Т.Номенклатура,
	|			Т.КМ) КАК Т1
	|		ПО ВТ_ТЧ.Номенклатура = Т1.Номенклатура
	|			И ВТ_ТЧ.КМ = Т1.КМ";
	ЗапросКМ.УстановитьПараметр("ТЧ", ЭтотОбъект.Товары.Выгрузить(,"Номенклатура, КМ"));
	
	ТаблицаСДатами = ЗапросКМ.Выполнить().Выгрузить();
	ТаблицаСДатами.Индексы.Добавить("Номенклатура,КМ");
	//Состояние("");
	//кон_запрос = ТекущаяУниверсальнаяДатаВМиллисекундах();
	//Сообщить("Запрос КМ занял " + (кон_запрос - нач_запрос) + " мс");
	СтруктураПоискаДаты = Новый Структура("Номенклатура, КМ");
	//КОНЕЦ ИЗМЕНЕНИЙ
	
	Макет = ЭтотОбъект.ПолучитьМакет("Этикетка_Декларация4");
	
	серии = ЭтотОбъект.товары.Выгрузить(, "НомерСерии, АртикулУпаковки");
	серии.Свернуть("НомерСерии, АртикулУпаковки");
	
	Для каждого строкаС Из серии Цикл
		//ОбработкаПрерыванияПользователя();
		
		выборка = ЭтотОбъект.товары.НайтиСтроки(новый Структура("Пометка, НомерСерии, АртикулУпаковки", Истина, строкаС.НомерСерии, строкаС.АртикулУпаковки));
		
		Если выборка.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИндексЭтикетки > 0 Тогда
			ТД.ВывестиГоризонтальныйРазделительСтраниц();
			ИндексСтроки = 1;
			ИндексЭтикетки = 0;
		КонецЕсли;
		
		ПечатьЗаголовка(ТД, Макет, строкаС, ВнешняяКомпонента_стар);
		
		ИндексСтроки = 1;
		ИндексКолонки = 1;
		
		Для Каждого строка Из выборка Цикл
			//ОбработкаПрерыванияПользователя();
			
			Номенклатура = строка.Номенклатура;
			
			ОписаниеТовара = Строка(Номенклатура) + " (" + строка.Артикул + ")";
			//Состояние("Печать этикеток для номенклатуры " + ОписаниеТовара + "...");
			
			нашли = ДеревоТовары.строки.Найти(Номенклатура);
			Если нашли = Неопределено Тогда
				сообщить("" + Номенклатура + " не найдены свойства для печати этикетки!", СтатусСообщения.Важное);
				Продолжить;
			Иначе
				таб = нашли.Строки;
			КонецЕсли;
			
			// таблица настройки полей
			настройка = ПолучитьСоответствие(Номенклатура.ВидНоменклатуры, СоответствиеНастроек).ХранилищеНастроек.Получить();
			
			Если ТипЗнч(настройка) = Тип("Структура") Тогда
				НастройкаПолей = настройка.СписокПолей;
			ИначеЕсли ТипЗнч(настройка) = Тип("ТаблицаЗначений") Тогда
				НастройкаПолей = настройка;
			КонецЕсли;
			
			нашли = таб.Найти(Свойство_Размер, "Свойство");
			Если нашли = Неопределено Тогда
				нашли = найти(строка.Артикул, "/");
				Если нашли = 0 Тогда
					Размер = "";
				Иначе
					Размер = сред(строка.Артикул, нашли + 1);
				КонецЕсли;
			Иначе
				Размер = нашли.Значение
			КонецЕсли;
			
			ОбластьОсновная = Макет.ПолучитьОбласть("ОбластьОсновная");
			ОбластьОсновная.Параметры.Размер = Размер;
			
			Этикетка = "";
			
			РисунокШтрихкод = ОбластьОсновная.Рисунки.Штрихкод;
			
			Если строка.КМ.Пустая() Тогда
				ОбластьОсновная.Рисунки.Удалить(РисунокШтрихкод);
			Иначе
				ОбластьОсновная.Рисунки.Удалить(ОбластьОсновная.Рисунки.eac);
				
				Штрихкод = СтрЗаменить(строка.КМ.КМ, "\u001D", символ(29));
				Штрихкод = СтрЗаменить(Штрихкод, "\u001d", символ(29));
				
				Штрихкод = СтрЗаменить(Штрихкод, " ", символ(29));
				
				Если 1 = 0 Тогда
					
					//так раньше было, старый компонента, которая не поддерживала формирование через base64
					
					Если Найти(Штрихкод, "(")>0 OR Найти(Штрихкод, ")")>0 Тогда
						ПараметрыШтрихкода = новый Структура("ТипКода, Штрихкод, Ширина, Высота, ОтображатьТекст",
						24, Штрихкод, 120, 120, Ложь); //Юра попросил пока оставить инвалидов
						//18, Штрихкод, 220, 220, Ложь); //это просто datamatrix
					Иначе
						ПараметрыШтрихкода = новый Структура("ТипКода, Штрихкод, Ширина, Высота, ОтображатьТекст",
						//24, Штрихкод, 120, 120, Ложь);
						24, Штрихкод, 220, 220, Ложь);
					КонецЕсли;
					
				Иначе
					
					Если НЕ КодСимвола(Прав(Штрихкод, 1), 1) = 29 Тогда
						Штрихкод = Штрихкод + символ(29);
					КонецЕсли;
					
					ДвоичныеДанныеСтроки = ПолучитьДвоичныеДанныеИзСтроки(Штрихкод);
					ВходныеДанные = Base64Строка(ДвоичныеДанныеСтроки); 
					
					ТипКода = 24;
					Ширина = 220;
					Высота = 220;
					УголПоворота = 0;
					УровеньКоррекцииQR = 0;
					
					ПараметрыШтрихкода = Новый Структура;
					ПараметрыШтрихкода.Вставить("Ширина", Ширина);
					ПараметрыШтрихкода.Вставить("Высота", Высота);
					ПараметрыШтрихкода.Вставить("Штрихкод", ВходныеДанные); // Значение штрихкода передается в виде base64
					ПараметрыШтрихкода.Вставить("ТипКода", ТипКода);
					ПараметрыШтрихкода.Вставить("ОтображатьТекст", Истина);
					ПараметрыШтрихкода.Вставить("РазмерШрифта" , 10);
					ПараметрыШтрихкода.Вставить("УголПоворота" , Число(УголПоворота)); //Одно из следующих значений: 0, 90, 180, 270.
					ПараметрыШтрихкода.Вставить("ПрозрачныйФон", Истина);
					ПараметрыШтрихкода.Вставить("УровеньКоррекцииQR", УровеньКоррекцииQR); //Одно из следующих значений: 0, 1, 2, 3. Соответствует: L, M, Q, H.
					ПараметрыШтрихкода.Вставить("ТипВходныхДанных", 1); // Тип входных данных (0-Строка, 1-Base64).
					
				КонецЕсли;
				
				картинка = ПолучитьКартинкуШтрихкода(ВнешняяКомпонента, ПараметрыШтрихкода);
				
				//РисунокШтрихкод.Лево = 0;
				РисунокШтрихкод.Картинка = картинка;
				//РисунокШтрихкод.Высота = 25;
				//РисунокШтрихкод.Ширина = 25;
				РисунокШтрихкод.ГраницаСверху = Ложь;
				РисунокШтрихкод.ГраницаСлева = Ложь;
				РисунокШтрихкод.ГраницаСнизу = Ложь;
				РисунокШтрихкод.ГраницаСправа = Ложь;
				РисунокШтрихкод.Защита = Ложь;
				ОбластьОсновная.Параметры.КодМаркировки = Лев(Штрихкод, 31);
			КонецЕсли;
			
			// НАЧАЛО ИЗМЕНЕНИЙ, МАСТЕР СОФТ, ГЕННАДИЙ 19.08.2020
			
			
			//// декларация
			//нашли = таб.Найти(Свойство_Декларация, "Свойство");
			//Если не нашли = Неопределено Тогда
			//	Декларация = нашли.Значение;
			//Иначе
			//	нашли = таб.Найти(Свойство_Material_Surface, "Свойство");
			//	Если не нашли = Неопределено Тогда
			//		Декларация = нашли.Значение + " " + Номенклатура;
			//	Иначе
			//		Декларация = строка(Номенклатура);
			//	КонецЕсли;
			//	
			//	нашли = таб.Найти(Свойство_Сезон, "Свойство");
			//	Если не нашли = Неопределено Тогда
			//		Декларация = сокрЛП(СтрЗаменить(Декларация, нашли.Значение, ""));
			//	КонецЕсли;
			//	
			//	//Декларация = Переводчик.ПолучитьПереводОбъекта(Декларация, Справочники.RC_Язык.Russian);
			//	//Декларация = Обработки.RC_ДиспетчерПереводов.ПолучитьПереводОбъекта(Декларация, Справочники.RC_Язык.Russian);
			//	Декларация = Перевод(Декларация, Справочники.RC_Язык.Russian);
			//КонецЕсли;
			
			
			Декларация = строка.СерияНоменклатуры.МС_ДекларацияСоответствия;
			
			// КОНЕЦ ИЗМЕНЕНИЙ

			// обход полей
			ЕстьОписание = Ложь;
			СтрокаОписание = Неопределено;
			ЗначениеОписание = Неопределено;
			Граница = мин(НастройкаПолей.Количество(), ГраницаМакета);
			Для а=1 По Граница Цикл
				//ОбработкаПрерыванияПользователя();
				
				значение = "";
				СтрокаНастройки = НастройкаПолей[а-1];
				
				//НАЧАЛО ИЗМЕНЕНИЙ, МАСТЕР СОФТ, АЛЕКСЕЙ, 09.06.2020
				ЗаполнитьЗначенияСвойств(СтруктураПоискаДаты, Строка);
				НайденныеСтрокиИзготовленияКМ = ТаблицаСДатами.НайтиСтроки(СтруктураПоискаДаты);
				ДатаИзготовленияКМ = Дата(1,1,1);
				Если НайденныеСтрокиИзготовленияКМ.Количество() > 0 Тогда
					ДатаИзготовленияКМ = НайденныеСтрокиИзготовленияКМ[0].ДатаИзготовленияКМ;
				КонецЕсли;
				//КОНЕЦ ИЗМЕНЕНИЙ
				
				Если СтрокаНастройки.Поле = "Производитель" Тогда
					Производитель = Неопределено;
					Если не Номенклатура.Производитель.Пустая() Тогда
						Производитель = Номенклатура.Производитель;
					Иначе
						нашли = таб.Найти(Свойство_GLN_manufacturer, "Свойство");
						Если не нашли = Неопределено Тогда
							Производитель = Справочники.Контрагенты.НайтиПоРеквизиту("RC_GLN_номер", нашли.Значение);
						КонецЕсли;
					КонецЕсли;
					
					Если не Производитель = Неопределено Тогда
						АдресПроизводителя = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Производитель, "Фактический");
					КонецЕсли;
					
					значение = Производитель;
					
				ИначеЕсли СтрокаНастройки.Поле = "Адрес производителя" Тогда
					значение = АдресПроизводителя;
					
				ИначеЕсли СтрокаНастройки.Поле = "Адрес основного поставщика" Тогда
					значение = "";
					ОсновнойПоставщик = Номенклатура.ОсновнойПоставщик;
					Если не ОсновнойПоставщик.Пустая() Тогда
						значение = СоответствиеПоставщиков.Получить(ОсновнойПоставщик);
						Если значение = Неопределено Тогда
							значение = "";
							СведенияО = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ОсновнойПоставщик, ТекущаяДата());
							СведенияО.Свойство("ЮридическийАдрес", значение);
							СоответствиеПоставщиков.Вставить(ОсновнойПоставщик, значение);
						КонецЕсли;
					КонецЕсли;
					
				ИначеЕсли СтрокаНастройки.Поле = "Импортер" Тогда
					Если ЭтотОбъект.ВзятьАдресОрганизации Тогда
						значение = ЭтотОбъект.Организация;
					Иначе
						значение = Производитель;
					КонецЕсли;
					
				ИначеЕсли СтрокаНастройки.Поле = "Адрес импортера" Тогда
					Если ЭтотОбъект.ВзятьАдресОрганизации Тогда
						значение = ЭтотОбъект.Адрес;
					Иначе
						значение = АдресПроизводителя;
					КонецЕсли;
					
				ИначеЕсли СтрокаНастройки.Поле = "Декларация о соответствии" Тогда
					значение = Декларация;
					
				ИначеЕсли Найти(СтрокаНастройки.Поле, "ДополнительноеОписание") > 0 Тогда
					ЕстьОписание = Истина;
					СтрокаОписание = СтрокаНастройки;
					ЗначениеОписание = Номенклатура[СтрокаНастройки.Поле];
					Продолжить;
					
				ИначеЕсли СтрокаНастройки.Поле = "ЦенаОптовая" Тогда
					значение = НайтиЦенуПоТипу(Номенклатура, ЭтотОбъект.ТипЦенОптовая);
					
				ИначеЕсли СтрокаНастройки.Поле = "ЦенаРозничная" Тогда
					значение = НайтиЦенуПоТипу(Номенклатура, ЭтотОбъект.ТипЦенРозничная);
					
				ИначеЕсли ТипЗнч(СтрокаНастройки.Поле) = Тип("Строка") Тогда
					значение = Номенклатура[СтрокаНастройки.Поле];
				Иначе
					Если СтрокаНастройки.Поле = Свойство_GLN_manufacturer Тогда
						значение = Производитель;
						
						//ИначеЕсли ИзменитьМатериалВерх и СтрокаНастройки.Поле = Свойство_Material_Surface Тогда
						//	значение = МатериалВерх;
						//	
						//ИначеЕсли ИзменитьМатериалПодкладка и СтрокаНастройки.Поле = Свойство_Material_Lining Тогда
						//	значение = МатериалПодкладка;
						//	
						//ИначеЕсли ИзменитьМатериалПодошва и СтрокаНастройки.Поле = Свойство_Material_Bottom Тогда
						//	значение = МатериалПодошва;
						
					Иначе
						
						//НАЧАЛО ИЗМЕНЕНИЙ, МАСТЕР СОФТ, АЛЕКСЕЙ, 09.06.2020
						Если СтрокаНастройки.Поле = Свойство_ДатаИзготовления И НЕ ДатаИзготовленияКМ = Дата(1,1,1) Тогда
							значение = ДатаИзготовленияКМ;
						Иначе
							нашли = таб.Найти(СтрокаНастройки.Поле, "Свойство");
							Если не нашли = Неопределено Тогда
								значение = нашли.Значение;
								Если ТипЗнч(значение) = Тип("Строка") Тогда
									//значение = Переводчик.ПолучитьПереводОбъекта(Значение, Справочники.RC_Язык.Russian);
									//значение = Обработки.RC_ДиспетчерПереводов.ПолучитьПереводОбъекта(Значение, Справочники.RC_Язык.Russian);
									значение = Перевод(Значение, Справочники.RC_Язык.Russian);
								КонецЕсли;
							КонецЕсли;
							
						КонецЕсли;
						//КОНЕЦ ИЗМЕНЕНИЙ
					КонецЕсли;
				КонецЕсли;
				
				//ОбластьОсновная.Параметры["Поле" + а] = СтрокаНастройки.Заголовок;
				//ОбластьОсновная.Параметры["Значение" + а] = значение;
				Этикетка = Этикетка + СтрокаНастройки.Заголовок + ": ";
				
				Если ЗначениеЗаполнено(СтрокаНастройки.Маска) Тогда
					область = ОбластьОсновная.Область("R"+(а+2)+"C3");
					область.Маска = СтрокаНастройки.Маска;
					//ОбластьОсновная.Параметры["Значение" + а] = сред(значение, 1, СтрДлина(СтрокаНастройки.Маска));
					Этикетка = Этикетка + сред(значение, 1, СтрДлина(СтрокаНастройки.Маска)) + ", ";
				Иначе
					//ОбластьОсновная.Параметры["Значение" + а] = ?(ТипЗнч(значение) = Тип("Дата"), формат(значение, "ДФ=dd.MM.yyyy"), значение);
					Этикетка = Этикетка + ?(ТипЗнч(значение) = Тип("Дата"), формат(значение, "ДФ=dd.MM.yyyy"), значение) + ", ";
				КонецЕсли;
				
				//заголовок
				Если ЗначениеЗаполнено(СтрокаНастройки.ОформлениеЗаголовка) Тогда
					ЗадатьОформление(ОбластьОсновная.Область("R"+(а+2)+"C2"), СтрокаНастройки.ОформлениеЗаголовка);
					Если СтрокаНастройки.ОформлениеЗаголовка.Текст.Использование Тогда
						//ОбластьОсновная.Параметры["Поле" + а] = СтрокаНастройки.ОформлениеЗаголовка.Текст.Значение;
						Этикетка = СтрокаНастройки.ОформлениеЗаголовка.Текст.Значение + СтрокаНастройки.Заголовок + ": ";
					КонецЕсли;
				КонецЕсли;
				//значение
				Если ЗначениеЗаполнено(СтрокаНастройки.ОформлениеПоля) Тогда
					ЗадатьОформление(ОбластьОсновная.Область("R"+(а+2)+"C3"), СтрокаНастройки.ОформлениеПоля);
					Если СтрокаНастройки.ОформлениеПоля.Текст.Использование Тогда
						//ОбластьОсновная.Параметры["Значение" + а] = СтрокаНастройки.ОформлениеПоля.Текст.Значение;
						Этикетка = Этикетка + СтрокаНастройки.ОформлениеПоля.Текст.Значение + ", ";
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			ОбластьОсновная.Параметры.Этикетка = Этикетка;
			
			Для а = 1 По строка.КоличествоЭтикеток Цикл
				//ОбработкаПрерыванияПользователя();
				
				ИндексЭтикетки = ИндексЭтикетки + 1;
				
				Если ИндексКолонки = 1 Тогда
					ТД.Вывести(ОбластьОсновная);
				Иначе	
					ТД.Присоединить(ОбластьОсновная);
				КонецЕсли;
				
				Если ИндексКолонки = КоличествоКолонок Тогда
					ИндексКолонки = 1;
					ИндексСтроки = ИндексСтроки + 1;
				Иначе
					ИндексКолонки = ИндексКолонки + 1;
				КонецЕсли;
				
				Если ИндексЭтикетки = ЭтикетокНаЛисте или ИндексСтроки > КоличествоСтрок Тогда
					//ЛИТ Разумова 10.08.21++
					ПечатьПодвала(ТД, Макет, строкаС);
					//ЛИТ Разумова 10.08.21--
					ТД.ВывестиГоризонтальныйРазделительСтраниц();
					ПечатьЗаголовка(ТД, Макет, строкаС, ВнешняяКомпонента_стар);
					ИндексСтроки = 1;
					ИндексЭтикетки = 0;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		//ЛИТ Разумова 10.08.21++
		ПечатьПодвала(ТД, Макет, строкаС);
		//ЛИТ Разумова 10.08.21--

		Если НаПринтер Тогда
			ТД.Напечатать();
			ТД = Новый ТабличныйДокумент;
		Иначе
			ТД.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
	КонецЦикла;
	
	ТД.РазмерСтраницы = "A4";
	ТД.АвтоМасштаб = Ложь;
	ТД.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	//ТД.ПолеСверху = 13; ТД.ПолеСнизу = 20; ТД.ПолеСлева = 21; ТД.ПолеСправа = 20;//ЛИТ АР увеличена рабочая область сраницы
	ТД.ПолеСверху = 12; ТД.ПолеСнизу = 12; ТД.ПолеСлева = 21; ТД.ПолеСправа = 20;
	ТД.КоличествоЭкземпляров = 1;
	ТД.Защита = Истина;
	//ТД.ПолеСлева = 2;
	ТД.ТолькоПросмотр = Истина;
	ТД.ОтображатьСетку = Истина;
	ТД.ОтображатьЗаголовки = Ложь;
	//ТД.КлючПараметровПечати = "Печать этикеток";
	ЭтотОбъект.УниверсальныеМеханизмы.НапечататьДокумент(ТД,,, "Печать этикеток");
	
КонецПроцедуры

Функция НайтиЦенуПоТипу(Номенклатура, ТипЦен)
	
	запрос = новый Запрос(
	"ВЫБРАТЬ
	|	а.ТипЦен КАК ТипЦен,
	|	а.Номенклатура КАК Номенклатура,
	|	а.Цена / ЕСТЬNULL(а.ЕдиницаИзмерения.Коэффициент, 1) КАК Цена,
	|	а.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			,
	|			Номенклатура = &Номенклатура
	|				И ТипЦен = &ТипЦен) КАК а");
	запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	запрос.УстановитьПараметр("ТипЦен", ТипЦен);
	выборка = запрос.Выполнить().Выбрать();
	
	Если выборка.Следующий() Тогда
		возврат выборка.Цена;
	Иначе
		возврат 0;
	КонецЕсли;
	
КонецФункции // НайтиЦенуПоТипу()

Функция ТолькоЦифры(знач текст)
	текст = сокрЛП(текст);
	длина = СтрДлина(текст);
	результат = "";
	Для а=1 По длина Цикл
		фф = сред(текст, а, 1);
		Если найти("0123456789", фф) > 0 Тогда
			результат = результат + фф;
		КонецЕсли;
	КонецЦикла;
	возврат число(результат);
КонецФункции // ТолькоЦифры()

Функция УбратьПустыеСтроки(текст)
	
	фыв = новый ТекстовыйДокумент;
	фыв.УстановитьТекст(текст);
	
	размер = фыв.КоличествоСтрок();
	
	Для а=0 По размер-1 Цикл
		поз = размер - а;
		строка = сокрЛП(фыв.ПолучитьСтроку(поз));
		Если строка = "" Тогда
			фыв.УдалитьСтроку(поз);
		КонецЕсли;
	КонецЦикла;
	
	возврат фыв.ПолучитьТекст();
КонецФункции // УбратьПустыеСтроки()

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Гандзюк Е. 08.08.2011
//
Функция ПолучитьДеревоДанных() 
	
	//Запрос = Новый Запрос(
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	Т.Номенклатура КАК Номенклатура
	//|ПОМЕСТИТЬ Товары
	//|ИЗ
	//|	&Товары КАК Т
	//|ГДЕ
	//|	Т.Пометка
	//|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	Номенклатура
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	Т.Номенклатура КАК Номенклатура,
	//|	С.Свойство КАК Свойство,
	//|	С.Значение КАК Значение
	//|ИЗ
	//|	Товары КАК Т
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК С
	//|		ПО Т.Номенклатура = С.Объект
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	Номенклатура,
	//|	Свойство
	//|ИТОГИ ПО
	//|	Номенклатура
	//|АВТОУПОРЯДОЧИВАНИЕ");
	
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	&Товары КАК Т
		|ГДЕ
		|	Т.Пометка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Номенклатура КАК Номенклатура,
		|	НоменклатураДополнительныеРеквизиты.Свойство КАК Свойство,
		|	НоменклатураДополнительныеРеквизиты.Значение КАК Значение
		|ИЗ
		|	Товары КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|		ПО Т.Номенклатура = НоменклатураДополнительныеРеквизиты.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Свойство
		|ИТОГИ ПО
		|	Номенклатура
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	//ТаблицаУслуги=Объект.Товары.Выгрузить();  реквизитформыВзначение("Объект.Товары")
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("Объекты", Объект.СписокОбъектов);
	результат = Запрос.Выполнить();
	
	Возврат результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Гандзюк Е. 01.08.2011
// Названия некоторых свойств состоят из двух слов (Material surface) - так называть параметры макета нельзя
//
Функция ПолучитьНазваниеПараметраПоСвойству(Свойство)
	
	Если Свойство.Наименование = "Material surface" Тогда
		
		Возврат "MaterialSurface";
		
	ИначеЕсли Свойство.Наименование = "Material back" Тогда
		
		Возврат "MaterialBack";
		
		//Inga
	ИначеЕсли Свойство.Наименование = "Material lining" Тогда
		
		Возврат "MaterialLining";
		//Inga	
		
	ИначеЕсли Свойство.Наименование = "Material bottom" Тогда
		
		Возврат "MaterialBottom";
		
	Иначе
		
		Возврат Свойство.Наименование;
		
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Гандзюк Е. 12.08.2011
//
Функция ПроверитьЗаполнениеНеобходимыхДанных(Дерево)
	
	РезультатПроверки = Истина;
	
	//правка лысов
	//_Импортер = Константы.ОрганизацияДляОбменаДанными.Получить();
	_Импортер = Объект.Организация;
	//!правка
	
	Если _Импортер.Пустая() Тогда
		Сообщить(Символы.Таб + "- Не заполнена константа 'Организация для обемена данными'!", СтатусСообщения.Важное);
		РезультатПроверки = Ложь;
	КонецЕсли;
	
	//правка лысов
	//_АдресИмпортера = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(_Импортер, "Фактический");
	_АдресИмпортера = Объект.Адрес;
	//!правка
	
	Если ПустаяСтрока(_АдресИмпортера) Тогда
		Сообщить(Символы.Таб + "- Не заполнен адрес организации " + _Импортер.Наименование + "!", СтатусСообщения.Важное);
		РезультатПроверки = Ложь;
	КонецЕсли;
	
	Для Каждого СтрокаТовар Из Дерево.Строки Цикл
		//ОбработкаПрерыванияПользователя();
		
		//Состояние("Проверка заполнения свойств для товара: " + СтрокаТовар.Номенклатура + " (" + СтрокаТовар.Номенклатура.Артикул + ")...");
		
		//правка лысов
		//!??? в цикле _Свойства проверяется только свойство GLN_manufacturer
		
		//Для Каждого Свойство Из _Свойства Цикл
		//	
		//	СтрокаДереваСвойство = СтрокаТовар.Строки.Найти(Свойство, "Свойство");
		//	
		//	Если Свойство.Наименование = "Дата_изготовления" Тогда
		//		Продолжить;
		//		
		//		Если СтрокаДереваСвойство = Неопределено Или Не ЗначениеЗаполнено(СтрокаДереваСвойство.Значение) Тогда
		//			
		//			Сообщить(Символы.Таб + "- Не заполнено значение свойства " + Свойство.Наименование + "!", СтатусСообщения.Важное);
		//			РезультатПроверки = Ложь;
		//			Продолжить;
		//			
		//		КонецЕсли;
		//	КонецЕсли;
		//	
		//	Если Свойство.Наименование = "GLN_manufacturer" Тогда
		//		
		//		Производитель = Справочники.Контрагенты.НайтиПоРеквизиту("RC_GLN_номер", СтрокаДереваСвойство.Значение);
		//		
		//		Если Производитель.Пустая() Тогда
		//			Сообщить(Символы.Таб + "- Не найден контрагент по GLN номеру " + СтрокаДереваСвойство.Значение + "!", СтатусСообщения.Важное);
		//			РезультатПроверки = Ложь;
		//			Продолжить;
		//		КонецЕсли;
		//		
		//		АлресПроизводителя = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Производитель, "Фактический");
		//		
		//		Если ПустаяСтрока(АлресПроизводителя) Тогда
		//			Сообщить(Символы.Таб + "- Не заполнен адрес организации " + Производитель.Наименование + "!", СтатусСообщения.Важное);
		//			РезультатПроверки = Ложь;
		//		КонецЕсли;
		//		
		//	КонецЕсли;
		//КонецЦикла;
		
		//Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("GLN_manufacturer");
		
		// Волков
		//Производитель = СтрокаТовар.Номенклатура.ОсновнойПоставщик;
		Производитель = СтрокаТовар.Номенклатура.Производитель;
		// Волков
		Если Производитель.Пустая() Тогда
			Свойство = Справочники.B2B_w_Настройки.Свойство_GLN_manufacturer.Значение;
			СтрокаДереваСвойство = СтрокаТовар.Строки.Найти(Свойство, "Свойство");
			Если СтрокаДереваСвойство = Неопределено Тогда
				Сообщить(Символы.Таб + "- Не найдено свойство <GLN_manufacturer> !", СтатусСообщения.Важное);
				РезультатПроверки = Ложь;
				Продолжить;
			Иначе
				Значение = СтрЗаменить(СтрокаДереваСвойство.Значение, Символ(160), "");
				Производитель = Справочники.Контрагенты.НайтиПоРеквизиту("RC_GLN_номер", Значение);
				
				Если Производитель.Пустая() Тогда
					Сообщить(Символы.Таб + "- Не найден контрагент по GLN номеру " + СтрокаДереваСвойство.Значение + "!", СтатусСообщения.Важное);
					РезультатПроверки = Ложь;
					Продолжить;
				КонецЕсли;
				
				АлресПроизводителя = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Производитель, "Фактический");
				
				Если ПустаяСтрока(АлресПроизводителя) Тогда
					Сообщить(Символы.Таб + "- Не заполнен адрес организации " + Производитель.Наименование + "!", СтатусСообщения.Важное);
					РезультатПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		//!правка
		
		//Если Свойство.Наименование = "Дата_изготовления" Тогда
		//			  ДатаИ =  СтрокаДереваСвойство.Значение;
		////			  СтрокаИзг = Строка(ДатаИ);
		//			  СтрокаИзг = Формат(ДатаИ, "ДФ=dd.MM.yyyy");
		//		  ДатаИзг = СтрокаИзг.ЗначениеСвойства;
		//КонецЕсли;
		Если СтрокаТовар.Номенклатура.СтранаПроисхождения = Справочники.КлассификаторСтранМира.ПустаяСсылка() Тогда
			Сообщить(Символы.Таб + "- Не заполнено значение реизита 'Страна происхождения' для номенклатуры " + СтрокаТовар.Номенклатура, СтатусСообщения.Важное);
			РезультатПроверки = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатПроверки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Гандзюк Е. 2011.12.14
//
Функция ПроверитьПереводОбъектов(Дерево, АктивизироватьПереводчик)
	
	РезультатДополнительнойПроверки = Истина;
	
	Если Дерево.Строки.Количество() = 0 Тогда Возврат Истина КонецЕсли;
	
	РезультатПроверки = Истина;
	
	//Состояние("Проверка переводов объектов...");
	
	// проверка переводов нужных объектов
	Объект.Переводчик.ИнициализироватьСписокОбъектовДляПеревода();
	
	Для Каждого СтрокаТовары Из Дерево.Строки Цикл
		
		МатериалВерха = "";
		Производитель = Справочники.Контрагенты.ПустаяСсылка();
		
		Для Каждого СтрокаСвойство Из СтрокаТовары.Строки Цикл
			Если не ТипЗнч(СтрокаСвойство.Значение) = Тип("Строка") Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаСвойство.Свойство.Наименование = "Material surface" Тогда
				МатериалВерха = СтрокаСвойство.Значение + " " + СтрокаТовары.Номенклатура.НаименованиеПолное;
			ИначеЕсли СтрокаСвойство.Свойство.Наименование = "GLN_manufacturer" Тогда
				Производитель = Справочники.Контрагенты.НайтиПоРеквизиту("RC_GLN_номер", СтрокаСвойство.Значение);
				Продолжить;
			КонецЕсли;
			
			Если СтрокаСвойство.Свойство.Наименование = "Дата_изготовления" Тогда
				//ДатаИ =  СтрокаСвойство.Значение;
				СтрокаИзг = Строка(СтрокаСвойство.Значение);
				СтрокаИзг = Формат(СтрокаСвойство.Значение, "ДФ=dd.MM.yyyy");
				СтрокаСвойство.Значение  = СтрокаИзг;
				//ДатаИзг = СтрокаИзг.ЗначениеСвойства;
			КонецЕсли;
			
			Если НуженПеревод(СтрокаСвойство.Свойство.Наименование) и ЗначениеЗаполнено(СтрокаСвойство.Значение) Тогда
				Объект.Переводчик.ДобавитьОбъектДляПеревода(СтрокаСвойство.Значение);
			КонецЕсли;
		КонецЦикла;
		
		// хитрая схема для интерпретации ГОСТ
		Объект.Переводчик.ДобавитьОбъектДляПеревода(МатериалВерха);
		
	КонецЦикла;
	
	Объект.Переводчик.ПроверитьДобавитьПереводОбъектов(, Справочники.RC_Язык.Russian, , Ложь, АктивизироватьПереводчик);
	
	Возврат Не Объект.Переводчик.ЕстьОбъектыБезПеревода(Истина) И РезультатДополнительнойПроверки;
	
КонецФункции

Функция НуженПеревод(Свойство)
	строкапоиска = "Brand_name/Color_Name/ClossingForm/HEELTYP/Funktion/LEGFUNCT/LEGHEIGHT/Material/Material back/Material bottom/Material lining/Material surface/Material warmlining/TOE-CAP";
	возврат СтрНайти(строкапоиска, Свойство) > 0;
КонецФункции // ыап()

Функция Перевод(Объект, Язык)
	ОбъектБокс = Обработки.RC_ДиспетчерПереводов.ПолучитьСлужебныйКонтейнер(Объект);
	Значение = ?(ОбъектБокс.ЭтоДокумент,
	ПолучитьПереводПредставленияДокумента(ОбъектБокс.Объект, Язык),
	РегистрыСведений.RC_Переводы.Получить(Новый Структура("Объект, Язык", ОбъектБокс.Объект, Язык)).Значение);
	возврат Значение;
КонецФункции // Перевод()

Функция ПолучитьПереводПредставленияДокумента(Объект, Язык)
	
	Возврат Перевод(Объект.Метаданные().Синоним, Язык) + " " + Объект.Номер + " " + Перевод("от", Язык) + " " + Объект.Дата;
	
КонецФункции

//правка лысов

Процедура ОрганизацияПриИзменении(Элемент)
	
	СписокВыбора = Элементы.Адрес.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если Объект.Организация.Пустая() Тогда
		Адрес = "";
	Иначе
		//запрос = новый Запрос(
		//"ВЫБРАТЬ
		//|	данные.Объект,
		//|	данные.Тип,
		//|	данные.Вид,
		//|	данные.Представление
		//|ИЗ
		//|	РегистрСведений.КонтактнаяИнформация КАК данные
		//|ГДЕ
		//|	данные.Объект = &Объект
		//|	И данные.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)");
		//запрос.УстановитьПараметр("Объект", Объект.Организация);
		//выборка = запрос.Выполнить().Выбрать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОрганизацииКонтактнаяИнформация.Представление КАК Представление,
		|	ОрганизацииКонтактнаяИнформация.Вид КАК Вид
		|ИЗ
		|	Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформация
		|ГДЕ
		|	ОрганизацииКонтактнаяИнформация.Тип = &Тип
		|	И ОрганизацииКонтактнаяИнформация.Ссылка = &Ссылка
		|	И ОрганизацииКонтактнаяИнформация.Вид = &Вид";
		
		Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
		Запрос.УстановитьПараметр("Ссылка", Объект.Организация);
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
	    Пока Выборка.Следующий() Цикл
			//ОбработкаПрерыванияПользователя();
			СписокВыбора.Добавить(Выборка.Представление, "" + Выборка.Вид + " (" + Выборка.Представление + ")");
		КонецЦикла;
		Объект.Адрес = СписокВыбора[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	//Если не Организация.Пустая() Тогда
	//	запись = РегистрыСведений.СохраненныеНастройки.СоздатьМенеджерЗаписи();
	//	запись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	//	запись.ИмяОбъекта = "Печать этикеток Wortmann";
	//	запись.НаименованиеНастройки = "Печать этикеток Wortmann";
	//	запись.СохраненнаяНастройка = новый ХранилищеЗначения(новый Структура("Организация", Организация));
	//	запись.Записать();
	//КонецЕсли;
	
	Настройка = новый Структура("Контрагент, СписокОбъектов, Сезон, ВзятьАдресОрганизации, Организация, Адрес, АртикулыОтдельно, ТипЦенОптовая, ТипЦенРозничная");
	ЗаполнитьЗначенияСвойств(Настройка, ЭтотОбъект);
	ХранилищеОбщихНастроек.Сохранить("Печать этикеток Wortmann", "Основная", Настройка);
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	а=1;
	//нашли = Метаданные.Обработки.Найти("ЛИТ_ПечатьЭтикеток");
	//Если не нашли = Неопределено Тогда
	//	Обработки["ЛИТ_ПечатьЭтикеток"].ПолучитьФорму().Открыть();
	//	Закрыть();
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	а=1;
	//запись = РегистрыСведений.СохраненныеНастройки.СоздатьМенеджерЗаписи();
	//запись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	//запись.ИмяОбъекта = "Печать этикеток Wortmann";
	//запись.НаименованиеНастройки = "Печать этикеток Wortmann";
	//
	//запись.Прочитать();
	//
	//Если запись.Выбран() Тогда
	//	Организация = запись.СохраненнаяНастройка.Получить().Организация;
	//Иначе
	//	Организация = Константы.ОрганизацияДляОбменаДанными.Получить();
	//КонецЕсли;
	
	Если Объект.СсылкаНаОбъект = Неопределено или Объект.СсылкаНаОбъект.Пустая() Тогда
		// Волков
		//Настройка = ХранилищеОбщихНастроек.Загрузить("Печать этикеток Wortmann", "Основная");
		Настройка = Про();
		Настройка = Неопределено;
		// Волков
		Если ТипЗнч(Настройка) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(Объект, Настройка);
		КонецЕсли;
	Иначе
		//Организация = Объект.СсылкаНаОбъект.Организация;
		//Если не Объект.СсылкаНаОбъект.Метаданные().Реквизиты.Найти("Контрагент") = Неопределено Тогда
			//Контрагент = Объект.СсылкаНаОбъект.Контрагент;
			//Сезон = Объект.СсылкаНаОбъект.ДоговорКонтрагента.w_Сезон;
		//КонецЕсли;
		Объект.СписокОбъектов.Очистить();
		Объект.СписокОбъектов.Добавить(Объект.СсылкаНаОбъект);
	КонецЕсли;
	
	ОрганизацияПриИзменении(Неопределено);
	
	Если Объект.СписокОбъектов.Количество() > 0 Тогда
		ЗаполнитьТабличнуюЧасть(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Функция Про()
	
	Настройка = ХранилищеОбщихНастроек.Загрузить("Печать этикеток Wortmann", "Основная");
	Возврат Настройка;
	
КонецФункции

Процедура ВзятьАдресОрганизацииПриИзменении(Элемент)
	
	Элементы.Организация.Доступность = Объект.ВзятьАдресОрганизации;
	Элементы.Адрес.Доступность = Объект.ВзятьАдресОрганизации;
	
КонецПроцедуры

Процедура ИзменитьМатериалВерхПриИзменении(Элемент)
	Элементы.МатериалВерх.Видимость = Объект.ИзменитьМатериалВерх;
КонецПроцедуры

Процедура ИзменитьМатериалПодкладкаПриИзменении(Элемент)
	Элементы.МатериалПодкладка.Видимость = Объект.ИзменитьМатериалПодкладка;
КонецПроцедуры

Процедура ИзменитьМатериалПодошваПриИзменении(Элемент)
	Элементы.МатериалПодошва.Видимость = Объект.ИзменитьМатериалПодошва;
КонецПроцедуры

Процедура КоманднаяПанельТоварыНастройки(Кнопка)
	ЭтотОбъект.ПолучитьФорму("ФормаСпискаНастроекЭтикеток", ЭтаФорма).Открыть();
КонецПроцедуры

Процедура СписокПолейПолеНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	форма = ЭтотОбъект.ПолучитьФорму("ФормаВыбораПоля");
	форма.НачальноеЗначениеВыбора = Элементы.СписокПолей.ТекущаяСтрока.Поле;
	Значение = форма.ОткрытьМодально();
	Если не Значение = Неопределено Тогда
		Элемент.Значение = Значение;
	КонецЕсли;
КонецПроцедуры

Процедура СписокПолейПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если не ОтменаРедактирования и не ЗначениеЗаполнено(Элемент.ТекущаяСтрока.Поле) Тогда
		Сообщить("Заполните <Поле>!");
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ОсновныеДействияФормыEAC_ПечатьA(Кнопка)
	ПечатьЭтикетки(Ложь);
КонецПроцедуры


Функция ПолучитьШтрихкодПоАртикулу(Артикул)
	возврат Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", Артикул).Код;
КонецФункции // ПолучитьШтрихкодПоАртикулу()

Функция ПолучитьКартинкуШтрихкода_старый(ВнешняяКомпонента, ПараметрыШтрихкода) Экспорт
	
	Если ВнешняяКомпонента = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка подключения внешней компоненты печати штрихкода.'");
	КонецЕсли;
	
	// Зададим размер формируемой картинки.
	ВнешняяКомпонента.Ширина = Окр(ПараметрыШтрихкода.Ширина);
	ВнешняяКомпонента.Высота = Окр(ПараметрыШтрихкода.Высота);
	
	ВнешняяКомпонента.АвтоТип = Ложь;
	
	Если ПараметрыШтрихкода.ТипКода = 99 Тогда
		ТипШтрихкодаВрем = ОпределитьТипШтрихкода(ПараметрыШтрихкода.Штрихкод);
		Если ТипШтрихкодаВрем = "EAN8" Тогда
			ВнешняяКомпонента.ТипКода = 0;
		ИначеЕсли ТипШтрихкодаВрем = "EAN13" Тогда
			ВнешняяКомпонента.ТипКода = 1;
			// Если код содержит контрольный символ, обязательно указываем.
			ВнешняяКомпонента.СодержитКС = СтрДлина(ПараметрыШтрихкода.Штрихкод) = 13;
		ИначеЕсли ТипШтрихкодаВрем = "EAN128" Тогда
			ВнешняяКомпонента.ТипКода = 2;
		ИначеЕсли ТипШтрихкодаВрем = "CODE39" Тогда
			ВнешняяКомпонента.ТипКода = 3;
		ИначеЕсли ТипШтрихкодаВрем = "CODE128" Тогда
			ВнешняяКомпонента.ТипКода = 4;
		ИначеЕсли ТипШтрихкодаВрем = "ITF14" Тогда
			ВнешняяКомпонента.ТипКода = 11;
		ИначеЕсли ТипШтрихкодаВрем = "QR" Тогда
			ВнешняяКомпонента.ТипКода = 16;
		ИначеЕсли ТипШтрихкодаВрем = "EAN13Addon2" Тогда
			ВнешняяКомпонента.ТипКода = 14;
		ИначеЕсли ТипШтрихкодаВрем = "EAN13Addon5" Тогда
			ВнешняяКомпонента.ТипКода = 15;
		Иначе
			ВнешняяКомпонента.АвтоТип = Истина;
		КонецЕсли;
	Иначе
		ВнешняяКомпонента.АвтоТип = Ложь;
		ВнешняяКомпонента.ТипКода = ПараметрыШтрихкода.ТипКода;
	КонецЕсли;
	
	Если ПараметрыШтрихкода.Свойство("ПрозрачныйФон") Тогда
		ВнешняяКомпонента.ПрозрачныйФон = ПараметрыШтрихкода.ПрозрачныйФон;
	КонецЕсли;
	
	ВнешняяКомпонента.ОтображатьТекст = ПараметрыШтрихкода.ОтображатьТекст;
	
	// Формируем картинку штрихкода.
	ВнешняяКомпонента.ЗначениеКода = ПараметрыШтрихкода.Штрихкод;
	// Угол поворота штрихкода.
	ВнешняяКомпонента.УголПоворота = ?(ПараметрыШтрихкода.Свойство("УголПоворота"), ПараметрыШтрихкода.УголПоворота, 0);
	// Уровень коррекции QR кода (L=0, M=1, Q=2, H=3).
	ВнешняяКомпонента.УровеньКоррекцииQR = ?(ПараметрыШтрихкода.Свойство("УровеньКоррекцииQR"), ПараметрыШтрихкода.УровеньКоррекцииQR, 1);
	
	// Если установленная нами ширина меньше минимально допустимой для этого штрихкода.
	Если ВнешняяКомпонента.Ширина < ВнешняяКомпонента.МинимальнаяШиринаКода Тогда
		ВнешняяКомпонента.Ширина = ВнешняяКомпонента.МинимальнаяШиринаКода;
	КонецЕсли;
	
	// Если установленная нами высота меньше минимально допустимой для этого штрихкода.
	Если ВнешняяКомпонента.Высота < ВнешняяКомпонента.МинимальнаяВысотаКода Тогда
		ВнешняяКомпонента.Высота = ВнешняяКомпонента.МинимальнаяВысотаКода;
	КонецЕсли;

	Если ПараметрыШтрихкода.Свойство("РазмерШрифта") И (ПараметрыШтрихкода.РазмерШрифта > 0) 
		И (ПараметрыШтрихкода.ОтображатьТекст) И (ВнешняяКомпонента.РазмерШрифта <> ПараметрыШтрихкода.РазмерШрифта) Тогда
		ВнешняяКомпонента.РазмерШрифта = ПараметрыШтрихкода.РазмерШрифта;
	КонецЕсли;
	
	// Сформируем картинку
	ДвоичныеДанныеКартинки = ВнешняяКомпонента.ПолучитьШтрихкод();
	
	// Если картинка сформировалась.
	Если не ДвоичныеДанныеКартинки = Неопределено Тогда
		Возврат Новый Картинка(ДвоичныеДанныеКартинки);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьКартинкуШтрихкода(ВнешняяКомпонента, ПараметрыШтрихкода) Экспорт
	
	Если ВнешняяКомпонента = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка подключения внешней компоненты печати штрихкода.'");
	КонецЕсли;
	
	// Зададим размер формируемой картинки.
	ВнешняяКомпонента.Ширина = Окр(ПараметрыШтрихкода.Ширина);
	ВнешняяКомпонента.Высота = Окр(ПараметрыШтрихкода.Высота);
	ВнешняяКомпонента.АвтоТип = Ложь;
	
	ШтрихкодВрем = Строка(ПараметрыШтрихкода.Штрихкод); // Преобразуем явно в строку.
	
	Если ПараметрыШтрихкода.ТипКода = 99 Тогда
		ТипШтрихкодаВрем = ОпределитьТипШтрихкода(ШтрихкодВрем);
		Если ТипШтрихкодаВрем = "EAN8" Тогда
			ВнешняяКомпонента.ТипКода = 0;
		ИначеЕсли ТипШтрихкодаВрем = "EAN13" Тогда
			ВнешняяКомпонента.ТипКода = 1;
			// Если код содержит контрольный символ, обязательно указываем.
			ВнешняяКомпонента.СодержитКС = СтрДлина(ШтрихкодВрем) = 13;
		ИначеЕсли ТипШтрихкодаВрем = "EAN128" Тогда
			ВнешняяКомпонента.ТипКода = 2;
		ИначеЕсли ТипШтрихкодаВрем = "CODE39" Тогда
			ВнешняяКомпонента.ТипКода = 3;
		ИначеЕсли ТипШтрихкодаВрем = "CODE128" Тогда
			ВнешняяКомпонента.ТипКода = 4;
		ИначеЕсли ТипШтрихкодаВрем = "ITF14" Тогда
			ВнешняяКомпонента.ТипКода = 11;
		ИначеЕсли ТипШтрихкодаВрем = "QR" Тогда
			ВнешняяКомпонента.ТипКода = 16;
		ИначеЕсли ТипШтрихкодаВрем = "EAN13Addon2" Тогда
			ВнешняяКомпонента.ТипКода = 14;
		ИначеЕсли ТипШтрихкодаВрем = "EAN13Addon5" Тогда
			ВнешняяКомпонента.ТипКода = 15;
		Иначе
			ВнешняяКомпонента.АвтоТип = Истина;
		КонецЕсли;
	Иначе
		ВнешняяКомпонента.АвтоТип = Ложь;
		ВнешняяКомпонента.ТипКода = ПараметрыШтрихкода.ТипКода;
	КонецЕсли;
	
	Если ПараметрыШтрихкода.Свойство("ПрозрачныйФон") Тогда
		ВнешняяКомпонента.ПрозрачныйФон = ПараметрыШтрихкода.ПрозрачныйФон;
	КонецЕсли;
	
	Если ПараметрыШтрихкода.Свойство("ТипВходныхДанных") Тогда
		ВнешняяКомпонента.ТипВходныхДанных = ПараметрыШтрихкода.ТипВходныхДанных;
	КонецЕсли;
	
	Если ПараметрыШтрихкода.Свойство("GS1DatabarКоличествоСтрок") Тогда
		ВнешняяКомпонента.GS1DatabarКоличествоСтрок = ПараметрыШтрихкода.GS1DatabarКоличествоСтрок;
	КонецЕсли;
	
	ВнешняяКомпонента.ОтображатьТекст = ПараметрыШтрихкода.ОтображатьТекст;
	// Формируем картинку штрихкода.
	ВнешняяКомпонента.ЗначениеКода = ШтрихкодВрем;
	// Угол поворота штрихкода.
	ВнешняяКомпонента.УголПоворота = ?(ПараметрыШтрихкода.Свойство("УголПоворота"), ПараметрыШтрихкода.УголПоворота, 0);
	// Уровень коррекции QR кода (L=0, M=1, Q=2, H=3).
	ВнешняяКомпонента.УровеньКоррекцииQR = ?(ПараметрыШтрихкода.Свойство("УровеньКоррекцииQR"), ПараметрыШтрихкода.УровеньКоррекцииQR, 1);
	
	// Для обеспечения совместимости с предыдущими версиями БПО.
	Если Не ПараметрыШтрихкода.Свойство("Масштабировать")
		Или (ПараметрыШтрихкода.Свойство("Масштабировать") И ПараметрыШтрихкода.Масштабировать) Тогда
		
		Если Не ПараметрыШтрихкода.Свойство("СохранятьПропорции")
				Или (ПараметрыШтрихкода.Свойство("СохранятьПропорции") И Не ПараметрыШтрихкода.СохранятьПропорции) Тогда
			
			// Если установленная нами ширина меньше минимально допустимой для этого штрихкода.
			Если ВнешняяКомпонента.Ширина < ВнешняяКомпонента.МинимальнаяШиринаКода Тогда
				ВнешняяКомпонента.Ширина = ВнешняяКомпонента.МинимальнаяШиринаКода;
			КонецЕсли;
			
			// Если установленная нами высота меньше минимально допустимой для этого штрихкода.
			Если ВнешняяКомпонента.Высота < ВнешняяКомпонента.МинимальнаяВысотаКода Тогда
				ВнешняяКомпонента.Высота = ВнешняяКомпонента.МинимальнаяВысотаКода;
			КонецЕсли;
			
		ИначеЕсли ПараметрыШтрихкода.Свойство("СохранятьПропорции") И ПараметрыШтрихкода.СохранятьПропорции Тогда
			
			Пока ВнешняяКомпонента.Ширина < ВнешняяКомпонента.МинимальнаяШиринаКода 
				Или ВнешняяКомпонента.Высота < ВнешняяКомпонента.МинимальнаяВысотаКода Цикл
				
				// Если установленная нами ширина меньше минимально допустимой для этого штрихкода.
				Если ВнешняяКомпонента.Ширина < ВнешняяКомпонента.МинимальнаяШиринаКода Тогда
					ВнешняяКомпонента.Ширина = ВнешняяКомпонента.МинимальнаяШиринаКода;
					ВнешняяКомпонента.Высота = (ВнешняяКомпонента.МинимальнаяШиринаКода / Окр(ПараметрыШтрихкода.Ширина)) * Окр(ПараметрыШтрихкода.Высота);
				КонецЕсли;
				
				// Если установленная нами высота меньше минимально допустимой для этого штрихкода.
				Если ВнешняяКомпонента.Высота < ВнешняяКомпонента.МинимальнаяВысотаКода Тогда
					ВнешняяКомпонента.Высота = ВнешняяКомпонента.МинимальнаяВысотаКода;
					ВнешняяКомпонента.Ширина = (ВнешняяКомпонента.МинимальнаяВысотаКода / Окр(ПараметрыШтрихкода.Высота)) * Окр(ПараметрыШтрихкода.Ширина);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	// ВертикальноеВыравниваниеКода: 1 - по верхнему краю, 2 - по центру, 3 - по нижнему краю.
	Если ПараметрыШтрихкода.Свойство("ВертикальноеВыравнивание") И (ПараметрыШтрихкода.ВертикальноеВыравнивание > 0) Тогда
		ВнешняяКомпонента.ВертикальноеВыравниваниеКода = ПараметрыШтрихкода.ВертикальноеВыравнивание;
	Иначе
		ВнешняяКомпонента.ВертикальноеВыравниваниеКода = 2;	
	КонецЕсли;
	
	Если ПараметрыШтрихкода.Свойство("РазмерШрифта") И (ПараметрыШтрихкода.РазмерШрифта > 0) 
		И (ПараметрыШтрихкода.ОтображатьТекст) И (ВнешняяКомпонента.РазмерШрифта <> ПараметрыШтрихкода.РазмерШрифта) Тогда
		ВнешняяКомпонента.РазмерШрифта = ПараметрыШтрихкода.РазмерШрифта;
	КонецЕсли;
	
	Если ПараметрыШтрихкода.Свойство("РазмерШрифта") И ПараметрыШтрихкода.РазмерШрифта > 0
		И ПараметрыШтрихкода.Свойство("МонохромныйШрифт") Тогда
		
		Если ПараметрыШтрихкода.МонохромныйШрифт Тогда
			ВнешняяКомпонента.МаксимальныйРазмерШрифтаДляПринтеровНизкогоРазрешения = ПараметрыШтрихкода.РазмерШрифта + 1;
		Иначе
			ВнешняяКомпонента.МаксимальныйРазмерШрифтаДляПринтеровНизкогоРазрешения = -1;
		КонецЕсли;
		
	КонецЕсли;
	
	// Сформируем картинку
	ДвоичныеДанныеКартинки = ВнешняяКомпонента.ПолучитьШтрихкод();
	
	// Если картинка сформировалась.
	Если ДвоичныеДанныеКартинки <> Неопределено Тогда
		// Формируем из двоичных данных.
		Возврат Новый Картинка(ДвоичныеДанныеКартинки);
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

Функция ПодключитьВнешнююКомпонентуПечатиШтрихкода_старый() Экспорт
	
	//ПодключениеВыполнено = ПодключитьВнешнююКомпоненту(ПоместитьВоВременноеХранилище(ПолучитьМакет("КомпонентаПечатиШтрихкодов")), "КартинкаШтрихкодаOLD", ТипВнешнейКомпоненты.COM);
	ПодключениеВыполнено = ПодключитьВнешнююКомпоненту(ПоместитьВоВременноеХранилище(ЭтотОбъект.ПолучитьМакет("КомпонентаПечатиШтрихкодов_БП")), "КартинкаШтрихкодаOLD", ТипВнешнейКомпоненты.COM);
	//ПодключениеВыполнено = ПодключитьВнешнююКомпоненту(ПоместитьВоВременноеХранилище(ПолучитьМакет("КомпонентаПечатиШтрихкодов_БПО")), "КартинкаШтрихкода", ТипВнешнейКомпоненты.COM);
	
	// Создадим объект внешней компоненты.
	Если ПодключениеВыполнено Тогда
		ВнешняяКомпонента = Новый("AddIn.КартинкаШтрихкодаOLD.Barcode");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	// Если нет возможности рисовать.
	Если НЕ ВнешняяКомпонента.ГрафикаУстановлена Тогда
		// То картинку сформировать не сможем.
		Возврат Неопределено;
	Иначе
		// Установим основные параметры компоненты.
		ВнешняяКомпонента.РазмерШрифта = 12;
		ВнешняяКомпонента.ВидимостьКС = Ложь;
		ВнешняяКомпонента.ОтображатьТекст = Ложь;
		ВнешняяКомпонента.ПрозрачныйФон = Истина;
		ВнешняяКомпонента.Высота = 120;
		ВнешняяКомпонента.Ширина = 120;
		ВнешняяКомпонента.Пропорции = "1:1";
		ВнешняяКомпонента.РазделителиКода = 29;
		Возврат ВнешняяКомпонента;
	КонецЕсли;
	
КонецФункции

Функция ПодключитьВнешнююКомпонентуПечатиШтрихкода() Экспорт
	
	//ПодключениеВыполнено = ПодключитьВнешнююКомпоненту(ПоместитьВоВременноеХранилище(ПолучитьМакет("КомпонентаПечатиШтрихкодов")), "КартинкаШтрихкода", ТипВнешнейКомпоненты.COM);
	//ПодключениеВыполнено = ПодключитьВнешнююКомпоненту(ПоместитьВоВременноеХранилище(ПолучитьМакет("КомпонентаПечатиШтрихкодов_БП")), "КартинкаШтрихкода", ТипВнешнейКомпоненты.COM);
	ПодключениеВыполнено = ПодключитьВнешнююКомпоненту(ПоместитьВоВременноеХранилище(ЭтотОбъект.ПолучитьМакет("КомпонентаПечатиШтрихкодов_БПО")), "КартинкаШтрихкода", ТипВнешнейКомпоненты.COM);
	
	// Создадим объект внешней компоненты.
	Если ПодключениеВыполнено Тогда
		ВнешняяКомпонента = Новый("AddIn.КартинкаШтрихкода.Barcode");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	// Если нет возможности рисовать.
	Если НЕ ВнешняяКомпонента.ГрафикаУстановлена Тогда
		// То картинку сформировать не сможем.
		Возврат Неопределено;
	Иначе
		// Установим основные параметры компоненты.
		ВнешняяКомпонента.РазмерШрифта = 12;
		ВнешняяКомпонента.ВидимостьКС = Ложь;
		ВнешняяКомпонента.ОтображатьТекст = Ложь;
		ВнешняяКомпонента.ПрозрачныйФон = Истина;
		ВнешняяКомпонента.Высота = 120;
		ВнешняяКомпонента.Ширина = 120;
		ВнешняяКомпонента.Пропорции = "1:1";
		ВнешняяКомпонента.РазделителиКода = 29;
		Возврат ВнешняяКомпонента;
	КонецЕсли;
	
КонецФункции

Функция ОпределитьТипШтрихкода(Штрихкод) Экспорт
	
	Возврат МенеджерОборудованияКлиентСервер.ОпределитьТипШтрихкода(Штрихкод);
	
КонецФункции

Процедура ДействияФормыНаПринтер(Кнопка)
	НаПринтер = не НаПринтер;
	Элементы.ДействияФормы.Кнопки.НаПринтер.Пометка = НаПринтер;
КонецПроцедуры

Функция ПолучитьСписокПолей(СписокПолей) Экспорт
	// Волков
	//выборка = ПланыВидовХарактеристик.СвойстваОбъектов.Выбрать(, новый Структура("НазначениеСвойства", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура));
	Выборка = Неопределено;
	
	//Пока выборка.Следующий() Цикл
	//	СписокПолей.Добавить(выборка.Ссылка, выборка.Наименование);
	//КонецЦикла;
	// Волков
	Для каждого Реквизит Из Метаданные.Справочники.Номенклатура.Реквизиты Цикл
		СписокПолей.Добавить(Реквизит.Имя, Реквизит.Синоним);
	КонецЦикла;
	
	СписокПолей.Добавить("Адрес основного поставщика");
	СписокПолей.Добавить("Импортер");
	СписокПолей.Добавить("Адрес импортера");
	СписокПолей.Добавить("Изготовитель");
	СписокПолей.Добавить("Декларация о соответствии");
	СписокПолей.Добавить("ЦенаОптовая", "Цена оптовая");
	СписокПолей.Добавить("ЦенаРозничная", "Цена розничная");
	
КонецФункции

//&НаКлиенте
Процедура ЗаполнитьТабличнуюЧасть(Спрашивать = Истина) Экспорт
	
	ТекстВопроса = "";
	ЗапроситьДанные = Истина;
	
	// если нет ни одного отбора, не надо ничего выбирать
	Если Объект.Контрагент.Пустая() И Объект.СписокОбъектов.Количество() = 0 И Объект.Сезон = 0 Тогда 
		ЗапроситьДанные = Ложь; 
		ТекстВопроса = "Данные табличной части будут очищены! Продолжить?";
	КонецЕсли;
	
	Если Спрашивать и Не ОчищатьТабличнуюЧасть(Объект, "Товары", ТекстВопроса) Тогда
		Возврат
	КонецЕсли;
	
	Если Не ЗапроситьДанные Тогда
		Возврат
	КонецЕсли;
	
	//Запрос = Новый Запрос(
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	а.Номенклатура.Артикул КАК АртикулУпаковки,
	//|	а.Номенклатура КАК Номенклатура,
	////|	а.СерияНоменклатуры КАК СерияНоменклатуры,
	////|	ВЫБОР
	////|		КОГДА а.СерияНоменклатуры.СтранаПроисхождения ЕСТЬ NULL
	////|				ИЛИ а.СерияНоменклатуры.СтранаПроисхождения = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
	////|			ТОГДА а.Номенклатура.СтранаПроисхождения
	////|		ИНАЧЕ а.СерияНоменклатуры.СтранаПроисхождения
	////|	КОНЕЦ КАК СтранаПроисхождения,
	//
	//
	//|	а.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	//
	//|	СУММА(а.Количество) КАК Количество//,
	////|	а.Коэффициент КАК Коэффициент
	//|ПОМЕСТИТЬ выборка
	//|ИЗ
	//|	Документ.ПоступлениеТоваровУслуг.Товары КАК а
	//|ГДЕ
	//|	(&НеИспользоватьДокументы
	//|			ИЛИ а.Ссылка В (&СписокДокументов))
	//|	И (&НеИспользоватьКонтрагента
	//|			ИЛИ а.Ссылка.Контрагент = &Контрагент)
	//|	И (&НеИспользоватьСезон
	//|			ИЛИ ПОДСТРОКА(а.Номенклатура.Артикул, 11, 2) = &Сезон)
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	а.Номенклатура,
	////|	а.СерияНоменклатуры,
	////|	а.Коэффициент,
	//|	а.Номенклатура.Артикул,
	////|	ВЫБОР
	////|		КОГДА а.СерияНоменклатуры.СтранаПроисхождения ЕСТЬ NULL
	////|				ИЛИ а.СерияНоменклатуры.СтранаПроисхождения = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
	////|			ТОГДА а.Номенклатура.СтранаПроисхождения
	////|		ИНАЧЕ а.СерияНоменклатуры.СтранаПроисхождения
	////|	КОНЕЦ
	//
	//|	а.Номенклатура.СтранаПроисхождения
	//
	//
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	а.Номенклатура.Артикул,
	//|	а.Номенклатура,
	////|	а.СерияНоменклатуры,
	////|	ВЫБОР
	////|		КОГДА а.СерияНоменклатуры.СтранаПроисхождения ЕСТЬ NULL
	////|				ИЛИ а.СерияНоменклатуры.СтранаПроисхождения = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
	////|			ТОГДА а.Номенклатура.СтранаПроисхождения
	////|		ИНАЧЕ а.СерияНоменклатуры.СтранаПроисхождения
	////|	КОНЕЦ,
	//
	//|	а.Номенклатура.СтранаПроисхождения,

	//
	////|	СУММА(а.Количество),
	////|	а.Коэффициент
	//|ИЗ
	//|	Документ.ПеремещениеТоваров.Товары КАК а
	//|ГДЕ
	//|	(&НеИспользоватьДокументы
	//|			ИЛИ а.Ссылка В (&СписокДокументов))
	//|	И (&НеИспользоватьСезон
	//|			ИЛИ ПОДСТРОКА(а.Номенклатура.Артикул, 11, 2) = &Сезон)
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	а.Номенклатура,
	////|	а.СерияНоменклатуры,
	////|	а.Коэффициент,
	//|	а.Номенклатура.Артикул,
	////|	ВЫБОР
	////|		КОГДА а.СерияНоменклатуры.СтранаПроисхождения ЕСТЬ NULL
	////|				ИЛИ а.СерияНоменклатуры.СтранаПроисхождения = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
	////|			ТОГДА а.Номенклатура.СтранаПроисхождения
	////|		ИНАЧЕ а.СерияНоменклатуры.СтранаПроисхождения
	////|	КОНЕЦ
	//
	//|	а.Номенклатура.СтранаПроисхождения
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	а.Номенклатура.Артикул,
	//|	а.Номенклатура,
	////|	а.СерияНоменклатуры,
	////|	ВЫБОР
	////|		КОГДА а.СерияНоменклатуры.СтранаПроисхождения ЕСТЬ NULL
	////|				ИЛИ а.СерияНоменклатуры.СтранаПроисхождения = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
	////|			ТОГДА а.Номенклатура.СтранаПроисхождения
	////|		ИНАЧЕ а.СерияНоменклатуры.СтранаПроисхождения
	////|	КОНЕЦ,
	//
	//|	а.Номенклатура.СтранаПроисхождения
	//
	////|	СУММА(а.Количество),
	////|	а.Коэффициент
	//|ИЗ
	//|	Документ.РеализацияТоваровУслуг.Товары КАК а
	//|ГДЕ
	//|	(&НеИспользоватьДокументы
	//|			ИЛИ а.Ссылка В (&СписокДокументов))
	//|	И (&НеИспользоватьКонтрагента
	//|			ИЛИ а.Ссылка.Контрагент = &Контрагент)
	//|	И (&НеИспользоватьСезон
	//|			ИЛИ ПОДСТРОКА(а.Номенклатура.Артикул, 11, 2) = &Сезон)
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	а.Номенклатура,
	////|	а.СерияНоменклатуры,
	////|	а.Коэффициент,
	//|	а.Номенклатура.Артикул,
	////|	ВЫБОР
	////|		КОГДА а.СерияНоменклатуры.СтранаПроисхождения ЕСТЬ NULL
	////|				ИЛИ а.СерияНоменклатуры.СтранаПроисхождения = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
	////|			ТОГДА а.Номенклатура.СтранаПроисхождения
	////|		ИНАЧЕ а.СерияНоменклатуры.СтранаПроисхождения
	////|	КОНЕЦ
	//
	//|	а.Номенклатура.СтранаПроисхождения
	//
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	а.Номенклатура.Артикул,
	//|	а.Номенклатура,
	////|	НЕОПРЕДЕЛЕНО,
	//|	а.Номенклатура.СтранаПроисхождения,
	//|	СУММА(а.Количество),
	////|	а.Коэффициент
	//|ИЗ
	//|	Документ.ЗаказПокупателя.Товары КАК а
	//|ГДЕ
	//|	(&НеИспользоватьДокументы
	//|			ИЛИ а.Ссылка В (&СписокДокументов))
	//|	И (&НеИспользоватьКонтрагента
	//|			ИЛИ а.Ссылка.Контрагент = &Контрагент)
	//|	И (&НеИспользоватьСезон
	//|			ИЛИ ПОДСТРОКА(а.Номенклатура.Артикул, 11, 2) = &Сезон)
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	а.Номенклатура,
	////|	а.Коэффициент,
	//|	а.Номенклатура.Артикул,
	//|	а.Номенклатура.СтранаПроисхождения
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ИСТИНА КАК Пометка,
	//|	а.АртикулУпаковки КАК АртикулУпаковки,
	//|	а.Номенклатура КАК Упаковка,
	//|	г.КМ.Владелец.Артикул КАК Артикул,
	//|	г.КМ.Владелец КАК Номенклатура,
	////|	а.СерияНоменклатуры КАК СерияНоменклатуры,
	////|	а.СерияНоменклатуры.СерийныйНомер КАК НомерСерии,
	//|	а.СтранаПроисхождения КАК СтранаПроисхождения,
	//|	г.КМ.Владелец.БазоваяЕдиницаИзмерения КАК ЕдИзмБазовая,
	//|	г.КМ КАК КМ,
	//|	СУММА(а.Количество) КАК КоличествоБазЕдиниц,
	//|	СУММА(а.Количество) КАК КоличествоЭтикеток
	//|ПОМЕСТИТЬ агрегация
	//|ИЗ
	//|	выборка КАК а
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЛИТ_АгрегацияТоваров.СрезПоследних КАК г
	//|		ПО а.СерияНоменклатуры.ЛИТ_КМ = г.Агрегат
	//|ГДЕ
	//|	г.Содержит
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	а.АртикулУпаковки,
	//|	а.Номенклатура,
	//|	г.КМ.Владелец.Артикул,
	//|	г.КМ.Владелец,
	//|	а.СерияНоменклатуры,
	//|	а.СерияНоменклатуры.СерийныйНомер,
	//|	а.СтранаПроисхождения,
	//|	г.КМ.Владелец.БазоваяЕдиницаИзмерения,
	//|	г.КМ
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ИСТИНА КАК Пометка,
	//|	а.АртикулУпаковки КАК АртикулУпаковки,
	//|	а.Номенклатура КАК Упаковка,
	//|	г.Комплектующая.Артикул КАК Артикул,
	//|	г.Комплектующая КАК Номенклатура,
	////|	а.СерияНоменклатуры КАК СерияНоменклатуры,
	////|	а.СерияНоменклатуры.СерийныйНомер КАК НомерСерии,
	//|	а.СтранаПроисхождения КАК СтранаПроисхождения,
	//|	г.Комплектующая.БазоваяЕдиницаИзмерения КАК ЕдИзмБазовая,
	//|	НЕОПРЕДЕЛЕНО КАК КМ,
	//|	СУММА(а.Количество) КАК КоличествоБазЕдиниц,
	//|	СУММА(а.Количество) КАК КоличествоЭтикеток
	//|ПОМЕСТИТЬ комплекты
	//|ИЗ
	//|	выборка КАК а
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КомплектующиеНоменклатуры КАК г
	//|		ПО а.Номенклатура = г.Номенклатура
	//|ГДЕ
	//|	НЕ а.Номенклатура В
	//|				(ВЫБРАТЬ
	//|					а.Упаковка
	//|				ИЗ
	//|					агрегация КАК а)
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	а.АртикулУпаковки,
	//|	а.Номенклатура,
	//|	г.Комплектующая.Артикул,
	//|	г.Комплектующая,
	//|	а.СерияНоменклатуры,
	//|	а.СерияНоменклатуры.СерийныйНомер,
	//|	а.СтранаПроисхождения,
	//|	г.Комплектующая.БазоваяЕдиницаИзмерения
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ИСТИНА КАК Пометка,
	//|	а.АртикулУпаковки КАК АртикулУпаковки,
	//|	а.Номенклатура КАК Упаковка,
	//|	а.АртикулУпаковки КАК Артикул,
	//|	а.Номенклатура КАК Номенклатура,
	////|	а.СерияНоменклатуры КАК СерияНоменклатуры,
	////|	а.СерияНоменклатуры.СерийныйНомер КАК НомерСерии,
	//|	а.СтранаПроисхождения КАК СтранаПроисхождения,
	//|	а.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдИзмБазовая,
	//|	а.СерияНоменклатуры.ЛИТ_КМ КАК КМ,
	//|	СУММА(а.Количество) КАК КоличествоБазЕдиниц,
	//|	СУММА(а.Количество) КАК КоличествоЭтикеток
	//|ПОМЕСТИТЬ некомплекты
	//|ИЗ
	//|	выборка КАК а
	//|ГДЕ
	//|	НЕ а.Номенклатура В
	//|				(ВЫБРАТЬ
	//|					а.Упаковка
	//|				ИЗ
	//|					агрегация КАК а)
	//|	И НЕ а.Номенклатура В
	//|				(ВЫБРАТЬ
	//|					а.Упаковка
	//|				ИЗ
	//|					комплекты КАК а)
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	а.АртикулУпаковки,
	//|	а.Номенклатура,
	////|	а.СерияНоменклатуры,
	////|	а.СерияНоменклатуры.СерийныйНомер,
	//|	а.СтранаПроисхождения,
	//|	а.Номенклатура.БазоваяЕдиницаИзмерения,
	//|	а.АртикулУпаковки,
	//|	а.Номенклатура,
	//|	а.СерияНоменклатуры.ЛИТ_КМ
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	агрегация.Пометка КАК Пометка,
	//|	агрегация.АртикулУпаковки КАК АртикулУпаковки,
	//|	агрегация.Упаковка КАК Упаковка,
	//|	агрегация.Артикул КАК Артикул,
	//|	агрегация.Номенклатура КАК Номенклатура,
	////|	агрегация.СерияНоменклатуры КАК СерияНоменклатуры,
	////|	агрегация.НомерСерии КАК НомерСерии,
	//|	агрегация.СтранаПроисхождения КАК СтранаПроисхождения,
	//|	агрегация.ЕдИзмБазовая КАК ЕдИзмБазовая,
	//|	агрегация.КМ КАК КМ,
	//|	агрегация.КоличествоБазЕдиниц КАК КоличествоБазЕдиниц,
	//|	агрегация.КоличествоЭтикеток КАК КоличествоЭтикеток
	//|ИЗ
	//|	агрегация КАК агрегация
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	комплекты.Пометка,
	//|	комплекты.АртикулУпаковки,
	//|	комплекты.Упаковка,
	//|	комплекты.Артикул,
	//|	комплекты.Номенклатура,
	////|	комплекты.СерияНоменклатуры,
	////|	комплекты.НомерСерии,
	//|	комплекты.СтранаПроисхождения,
	//|	комплекты.ЕдИзмБазовая,
	//|	комплекты.КМ,
	//|	комплекты.КоличествоБазЕдиниц,
	//|	комплекты.КоличествоЭтикеток
	//|ИЗ
	//|	комплекты КАК комплекты
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	некомплекты.Пометка,
	//|	некомплекты.АртикулУпаковки,
	//|	некомплекты.Упаковка,
	//|	некомплекты.Артикул,
	//|	некомплекты.Номенклатура,
	////|	некомплекты.СерияНоменклатуры,
	////|	некомплекты.НомерСерии,
	//|	некомплекты.СтранаПроисхождения,
	//|	некомплекты.ЕдИзмБазовая,
	//|	некомплекты.КМ,
	//|	некомплекты.КоличествоБазЕдиниц,
	//|	некомплекты.КоличествоЭтикеток
	//|ИЗ
	//|	некомплекты КАК некомплекты
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	АртикулУпаковки,
	//|	Артикул
	//|АВТОУПОРЯДОЧИВАНИЕ");
	
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	а.Номенклатура.Артикул КАК АртикулУпаковки,
		|	а.Номенклатура КАК Номенклатура,
		|	а.Характеристика КАК Характеристика,
		|	а.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения,
		|	СУММА(а.Количество) КАК Количество
		|ПОМЕСТИТЬ выборка
		|ИЗ
		|	Документ.ПеремещениеТоваров.Товары КАК а
		|ГДЕ
		|	(&НеИспользоватьДокументы
		|			ИЛИ а.Ссылка В (&СписокДокументов))
		|	И (&НеИспользоватьСезон
		|			ИЛИ ПОДСТРОКА(а.Номенклатура.Артикул, 11, 2) = &Сезон)
		|
		|СГРУППИРОВАТЬ ПО
		|	а.Номенклатура,
		|	а.Номенклатура.Артикул,
		|	а.Характеристика,
		|	а.Номенклатура.СтранаПроисхождения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИСТИНА КАК Пометка,
		|	а.АртикулУпаковки КАК АртикулУпаковки,
		|	а.Номенклатура КАК Упаковка,
		|	а.АртикулУпаковки КАК Артикул,
		|	а.Номенклатура КАК Номенклатура,
		|	а.Характеристика КАК Характеристика,
		|	а.СтранаПроисхождения КАК СтранаПроисхождения,
		|	СУММА(а.Количество) КАК КоличествоБазЕдиниц,
		|	СУММА(а.Количество) КАК КоличествоЭтикеток
		|ПОМЕСТИТЬ некомплекты
		|ИЗ
		|	выборка КАК а
		|
		|СГРУППИРОВАТЬ ПО
		|	а.АртикулУпаковки,
		|	а.Номенклатура,
		|	а.СтранаПроисхождения,
		|	а.Характеристика,
		|	а.АртикулУпаковки,
		|	а.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	некомплекты.Пометка КАК Пометка,
		|	некомплекты.АртикулУпаковки КАК АртикулУпаковки,
		|	некомплекты.Упаковка КАК Упаковка,
		|	некомплекты.Артикул КАК Артикул,
		|	некомплекты.Номенклатура КАК Номенклатура,
		|	некомплекты.Характеристика КАК Характеристика,
		|	некомплекты.СтранаПроисхождения КАК СтранаПроисхождения,
		|	НЕОПРЕДЕЛЕНО КАК ЕдИзмБазовая,
		|	НЕОПРЕДЕЛЕНО КАК КМ,
		|	некомплекты.КоличествоБазЕдиниц КАК КоличествоБазЕдиниц,
		|	некомплекты.КоличествоЭтикеток КАК КоличествоЭтикеток
		|ИЗ
		|	некомплекты КАК некомплекты
		|
		|УПОРЯДОЧИТЬ ПО
		|	АртикулУпаковки,
		|	Артикул
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("НеИспользоватьДокументы", Объект.СписокОбъектов.Количество() = 0);
	Запрос.УстановитьПараметр("СписокДокументов", Объект.СписокОбъектов);
	Запрос.УстановитьПараметр("НеИспользоватьКонтрагента", Объект.Контрагент.Пустая());
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("НеИспользоватьСезон", Объект.Сезон = 0);
	Запрос.УстановитьПараметр("Сезон", Строка(Объект.Сезон));
	
	Объект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	
	//Для каждого строка Из Объект.Товары Цикл
	//	//ОбработкаПрерыванияПользователя();
	//	
	//	Если не строка.СерияНоменклатуры.Пустая() и не строка.СерияНоменклатуры.Владелец = строка.Номенклатура Тогда
	//		строка.СерияНоменклатуры = НайтиСериюНоменклатуры(строка.СерияНоменклатуры, строка.Номенклатура, строка.КМ);
	//	КонецЕсли;
	//КонецЦикла;
	
КонецПроцедуры

Функция НайтиСериюНоменклатуры(СерияНоменклатуры, Номенклатура, КМ)
	
	запрос = новый Запрос(
	"ВЫБРАТЬ
	|	СерииНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ
	|	СерииНоменклатуры.Владелец = &Владелец
	|	И СерииНоменклатуры.СерийныйНомер = &СерийныйНомер
	|	И СерииНоменклатуры.НомерГТД = &НомерГТД
	|	И СерииНоменклатуры.СтранаПроисхождения = &СтранаПроисхождения");
	запрос.УстановитьПараметр("Владелец", Номенклатура);
	запрос.УстановитьПараметр("СерийныйНомер", СерияНоменклатуры.СерийныйНомер);
	запрос.УстановитьПараметр("НомерГТД", СерияНоменклатуры.НомерГТД);
	запрос.УстановитьПараметр("СтранаПроисхождения", СерияНоменклатуры.СтранаПроисхождения);
	выборка = запрос.Выполнить().Выбрать();
	Если выборка.Следующий() Тогда
		возврат выборка.Ссылка;
	Иначе
		серия = Справочники.СерииНоменклатуры.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(серия, СерияНоменклатуры,, "Код, Родитель, ЛИТ_КМ");
		серия.Владелец = Номенклатура;
		серия.ЛИТ_КМ = КМ;
		серия.УстановитьНовыйКод();
		серия.Записать();
		возврат серия.Ссылка;
	КонецЕсли;
	
КонецФункции // НайтиСериюНоменклатуры()

Функция ОчищатьТабличнуюЧасть(Объект, ТЧ, ТекстВопроса = "") Экспорт
	
	Если Объект[ТЧ].Количество() > 0 Тогда

		//Если ТекстВопроса = "" Тогда ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?" КонецЕсли;
		
		//Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Объект.Метаданные().Имя);
		
		//Если Ответ = КодВозвратаДиалога.Да Тогда
		//	
		//	Объект[ТЧ].Очистить();
			Возврат Истина;
			
		//Иначе
		//	
		//	Возврат Ложь;
		//	
		//КонецЕсли; 
	
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.СсылкаНаОбъект = ЭтотОбъект.Параметры.ОбъектыПечати[0].Ссылка;
	Объект.Организация = ЭтотОбъект.Параметры.ОбъектыПечати[0].Организация;
	
	
	
КонецПроцедуры

&НаСервере
Процедура ОсновныеДействияФормыEAC_ПечатьAНаСервере()
	ПечатьЭтикетки(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеДействияФормыEAC_ПечатьA1(Команда)
	ОсновныеДействияФормыEAC_ПечатьAНаСервере();
КонецПроцедуры

//&НаСервере
//Процедура ВзятьАдресОрганизацииПриИзмененииНаСервере()
//	// Вставить содержимое обработчика.
//КонецПроцедуры

//&НаКлиенте
//Процедура ВзятьАдресОрганизацииПриИзменении1(Элемент)
//	ВзятьАдресОрганизацииПриИзмененииНаСервере();
//КонецПроцедуры

ВзятьАдресОрганизации = Истина;

//!правка

_Свойства = Новый Массив;

//_Свойства.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Brand_name"));
//_Свойства.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("GLN_manufacturer"));
//_Свойства.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Material surface"));
////_Свойства.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Material back"));

////Inga
//_Свойства.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Material lining"));
////Inga

//_Свойства.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Material bottom"));
//_Свойства.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Color_name"));
//_Свойства.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Дата_изготовления"));

СписокПолейЭтикетки = новый СписокЗначений;
ПолучитьСписокПолей(СписокПолейЭтикетки);

НаПринтер = Ложь;
