Перем мЖирныйШрифт;
Перем мОбычныйШрифт;
Перем мРегламентноеЗадание;  
Перем СоответствиеСвойств;   
Перем мРегламентноеЗадание2;    
//31839
//1БЦ++ МГ
Перем НастройкиВыгрузки;

&НаСервере
Процедура ЗаполнитьЗаказыНаСервере()    
	
	Если НЕ ЗначениеЗаполнено(НачалоПериода) ИЛИ НЕ ЗначениеЗаполнено(КонецПериода) Тогда
		Сообщить("Укажите период выгрузки документов");
		Возврат;
	КонецЕсли;	
	
	Если КонецПериода < НачалоПериода Тогда
		Сообщить("Конец периода меньше начала");
		Возврат;
	КонецЕсли;
	
	Запрос = ПолучитьЗапросПоЗаказам();
	
	Результат = Запрос.Выполнить();
	
	ДанныеВыгрузки = Результат.Выгрузить();
	
	Объект.ТаблицаЗаказов.Загрузить(ДанныеВыгрузки);  
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗапросПоЗаказам()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект КАК Партнер
	|ПОМЕСТИТЬ тмпКонтрагенты
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = &Свойство
	|	И ЗначенияСвойствОбъектов.Значение = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Заказ.Дата КАК Дата,
	|	Заказ.Номер КАК Номер,
	|	Заказ.Ссылка КАК Регистратор,
	|	Заказ.Контрагент КАК Контрагент,
	|	Заказ.АдресДоставки КАК АдресДоставки,
	|	Заказ.СуммаДокумента КАК Сумма,
	|	B2B_СтатусыЗаказовСрезПоследних.СтатусЗаказа КАК СтатусЗаказа,
	|	Заказ.Склад КАК Склад,
	|	"""" КАК ГруппаДоступаКонтрагента,
	|	ЗначенияСвойствОбъектов.Значение КАК НомерЗаказа,
	|	СвДатаСпец1.Значение КАК ДатаСпец1,
	|	СвДатаСпец2.Значение КАК ДатаСпец2,
	|	СвДатаСчет.Значение КАК ДатаСчет
	|ИЗ
	|	Документ.ЗаказКлиента КАК Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.B2B_СтатусыЗаказов.СрезПоследних КАК B2B_СтатусыЗаказовСрезПоследних
	|		ПО Заказ.Ссылка = B2B_СтатусыЗаказовСрезПоследних.ЗаказПокупателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
	|		ПО Заказ.Ссылка = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = &СвойствоНомерЗаказа)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК СвДатаСпец1
	|		ПО Заказ.Ссылка = СвДатаСпец1.Объект
	|			И (СвДатаСпец1.Свойство = &СвДатаСпец1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК СвДатаСпец2
	|		ПО Заказ.Ссылка = СвДатаСпец2.Объект
	|			И (СвДатаСпец2.Свойство = &СвДатаСпец2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК СвДатаСчет
	|		ПО Заказ.Ссылка = СвДатаСчет.Объект
	|			И (СвДатаСчет.Свойство = &СвДатаСчет)
	|ГДЕ
	|	Заказ.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И Заказ.Партнер В
	|			(ВЫБРАТЬ
	|				тмпКонтрагенты.Партнер КАК Партнер
	|			ИЗ
	|				тмпКонтрагенты КАК тмпКонтрагенты)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(КонецПериода));       
	
	//Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("B2B_КонтрагентВыгружен"));
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");
	Запрос.УстановитьПараметр("Свойство", ЭтаОбработка.Свойство_B2B_КонтрагентВыгружен(Объект.БЦ_Организация));
	
	Запрос.УстановитьПараметр("СвойствоНомерЗаказа", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("B2B_НомерЗаказа"));
	Запрос.УстановитьПараметр("СвДатаСпец1", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("B2B_ДатаОтправки_Спец1"));
	Запрос.УстановитьПараметр("СвДатаСпец2", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("B2B_ДатаОтправки_Спец2"));
	Запрос.УстановитьПараметр("СвДатаСчет", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("B2B_ДатаОтправкиСчет"));

	Возврат Запрос;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьЗаказы(Команда)
	ЗаполнитьЗаказыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОтправитьЗаказыНаСервере()   
	
	ПоискЗаказов = Объект.ТаблицаЗаказов.НайтиСтроки(Новый Структура("Пометка", Истина));
	Если ПоискЗаказов.Количество() = 0 Тогда
		Сообщить("Выберите заказы для выгрузки. 
		|Выделено: " + ПоискЗаказов.Количество());
		Возврат;	
	КонецЕсли;
	
	МассивЗаказов = Новый Массив;
	МассивЗаказовНовые = Новый Массив;
	Для каждого Строка из ПоискЗаказов цикл
		Если Не Строка.Регистратор.Проведен Тогда
			Сообщить("Заказ: "+Строка.Регистратор+" не проведен, пропускаем");
			Продолжить;
		КонецЕсли;
		
		Если Строка.НомерЗаказа=0 Тогда
			МассивЗаказовНовые.Добавить(Строка.Регистратор);
		Иначе
			МассивЗаказов.Добавить(Строка.Регистратор);
		КонецЕсли;
	КонецЦикла;
	
	НастройкиПодключения = B2B_ОбщиеПроцедурыИФункции.ВосстановитьНастройкиПодключенияПортал();
	
	Если ТипЗнч(НастройкиПодключения) = Тип("Соответствие") Тогда
		
		Если МассивЗаказов.Количество()>0 Тогда
			B2B_ОбщиеПроцедурыИФункции.ВыгрузитьДокументы(НастройкиПодключения, МассивЗаказов);
		КонецЕсли;
		Если МассивЗаказовНовые.Количество()>0 Тогда
			B2B_ОбщиеПроцедурыИФункции.ВыгрузитьДокументы1(НастройкиПодключения, МассивЗаказовНовые);
		КонецЕсли;	
		
		ОбновитьТаблицуЗаказов();
	Иначе
		Сообщить("Ошибка получения настроек подключения");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗаказы(Команда)
	ОтправитьЗаказыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаказыОбновитьСтатусНаСервере()

	ПоискЗаказов = Объект.ТаблицаЗаказов.НайтиСтроки(Новый Структура("Пометка", Истина));
	Если ПоискЗаказов.Количество() = 0 Тогда
		Сообщить("Выберите заказы для выгрузки. 
		|Выделено: " + ПоискЗаказов.Количество());
		Возврат;	
	КонецЕсли;
	
	МассивЗаказов = Новый Массив;
	Для каждого Строка из ПоискЗаказов цикл
		Если Не Строка.Регистратор.Проведен Тогда
			Сообщить("Заказ: "+Строка.Регистратор+" не проведен, пропускаем");
			Продолжить;
		КонецЕсли;
		МассивЗаказов.Добавить(Строка.Регистратор);
	КонецЦикла;
	
	НастройкиПодключения = B2B_ОбщиеПроцедурыИФункции.ВосстановитьНастройкиПодключенияПортал();
	
	Если ТипЗнч(НастройкиПодключения) = Тип("Соответствие") Тогда
		
		Если МассивЗаказов.Количество()>0 Тогда
			B2B_ОбщиеПроцедурыИФункции.ВыгрузитьСтатусы(НастройкиПодключения, МассивЗаказов);
		КонецЕсли;
		
	Иначе
		Сообщить("Ошибка получения настроек подключения");
	КонецЕсли;       
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыОбновитьСтатус(Команда)
	ЗаказыОбновитьСтатусНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаказыВыгрузитьОстаткиНаСервере()
	
	ПоискЗаказов = Объект.ТаблицаЗаказов.НайтиСтроки(Новый Структура("Пометка", Истина));
	Если ПоискЗаказов.Количество() = 0 Тогда
		Сообщить("Выберите заказы для выгрузки. 
		|Выделено: " + ПоискЗаказов.Количество());
		Возврат;	
	КонецЕсли;
	
	МассивНоменклатуры = Новый Массив;
	Для каждого Строка из ПоискЗаказов цикл
		Для Каждого СтрТовары Из Строка.Регистратор.Товары Цикл
			МассивНоменклатуры.Добавить(СтрТовары.Номенклатура);
		КонецЦикла;
	КонецЦикла;
	
	НастройкиПодключения = B2B_ОбщиеПроцедурыИФункции.ВосстановитьНастройкиПодключенияПортал();
	
	Если ТипЗнч(НастройкиПодключения) = Тип("Соответствие") Тогда
		
		B2B_ОбщиеПроцедурыИФункции.ВыгрузитьОстатки(НастройкиПодключения, МассивНоменклатуры);
		
	Иначе
		Сообщить("Ошибка получения настроек подключения");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыВыгрузитьОстатки(Команда)
	ЗаказыВыгрузитьОстаткиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаказыОтправитьОбщуюСпеицифкаикациюНаСервере()
	
	ПоискЗаказов = Объект.ТаблицаЗаказов.НайтиСтроки(Новый Структура("Пометка", Истина));
	Если ПоискЗаказов.Количество() = 0 Тогда
		Сообщить("Выберите заказы для выгрузки. 
		|Выделено: " + ПоискЗаказов.Количество());
		Возврат;	
	КонецЕсли;
	
	МассивЗаказов = Новый Массив;
	Для каждого Строка из ПоискЗаказов цикл
		МассивЗаказов.Добавить(Строка.Регистратор);
	КонецЦикла;
	
	НастройкиПодключения = B2B_ОбщиеПроцедурыИФункции.ВосстановитьНастройкиПодключенияПортал();	
	Если ТипЗнч(НастройкиПодключения) = Тип("Соответствие") Тогда
		
		B2B_ОбщиеПроцедурыИФункции.ВыгрузитьОбщуюСпецификацию(НастройкиПодключения, МассивЗаказов);
		
	Иначе
		Сообщить("Ошибка получения настроек подключения");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыОтправитьОбщуюСпеицифкаикацию(Команда)
	ЗаказыОтправитьОбщуюСпеицифкаикациюНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаказыОтправитьСпецификациюНаСервере()

	ПоискЗаказов = Объект.ТаблицаЗаказов.НайтиСтроки(Новый Структура("Пометка", Истина));
	Если ПоискЗаказов.Количество() = 0 Тогда
		Сообщить("Выберите заказы для выгрузки. 
		|Выделено: " + ПоискЗаказов.Количество());
		Возврат;	
	КонецЕсли;
	
	МассивЗаказов = Новый Массив;
	Для каждого Строка из ПоискЗаказов цикл
		МассивЗаказов.Добавить(Строка.Регистратор);
	КонецЦикла;
	
	НастройкиПодключения = B2B_ОбщиеПроцедурыИФункции.ВосстановитьНастройкиПодключенияПортал();
	
	Если ТипЗнч(НастройкиПодключения) = Тип("Соответствие") Тогда
		
		B2B_ОбщиеПроцедурыИФункции.ВыгрузитьСпецификацию(НастройкиПодключения, МассивЗаказов);
		
	Иначе
		Сообщить("Ошибка получения настроек подключения");
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыОтправитьСпецификацию(Команда)
	ЗаказыОтправитьСпецификациюНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаказыОтправитьСчетНаСервере()
	
	ПоискЗаказов = Объект.ТаблицаЗаказов.НайтиСтроки(Новый Структура("Пометка", Истина));
	Если ПоискЗаказов.Количество() = 0 Тогда
		Сообщить("Выберите заказы для выгрузки. 
		|Выделено: " + ПоискЗаказов.Количество());
		Возврат;	
	КонецЕсли;
	
	МассивЗаказов = Новый Массив;
	Для каждого Строка из ПоискЗаказов цикл
		МассивЗаказов.Добавить(Строка.Регистратор);
	КонецЦикла;
	
	НастройкиПодключения = B2B_ОбщиеПроцедурыИФункции.ВосстановитьНастройкиПодключенияПортал();	
	Если ТипЗнч(НастройкиПодключения) = Тип("Соответствие") Тогда
		
		B2B_ОбщиеПроцедурыИФункции.ВыгрузитьСчета(НастройкиПодключения, МассивЗаказов);
		
	Иначе
		Сообщить("Ошибка получения настроек подключения");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыОтправитьСчет(Команда)
	ЗаказыОтправитьСчетНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаказыСнятьВсеВыделениеНаСервере()     
	
	Для Каждого Строка Из объект.ТаблицаЗаказов Цикл
		Строка.Пометка = Ложь;
	КонецЦикла;         
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыСнятьВсеВыделение(Команда)
	ЗаказыСнятьВсеВыделениеНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаказыВыделитьВсеНаСервере()
	Для Каждого Строка Из объект.ТаблицаЗаказов Цикл
		Строка.Пометка = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыВыделитьВсе(Команда)
	ЗаказыВыделитьВсеНаСервере();
КонецПроцедуры

&НаСервере
Процедура КонтрагентыОтправитьНаСервере()     
	
	Если не ЗначениеЗаполнено(Объект.БЦ_Сезон) Тогда	
		Сообщить("Выберите сезон для выгрузки данных");
		Возврат;
	КонецЕсли;

	МассивСсылок = Новый Массив();
	ТелоЗапроса = ПолучитьМассивКонтрагентов(МассивСсылок);
	
	ТелоЗапросаJSON = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапроса);
	
	Если Объект.Отладка Тогда
		Сообщить(ТелоЗапросаJSON);	
		вОЗВРАТ;
	КонецЕсли;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	
	HTTPЗапрос  = Новый HTTPЗапрос("local/service/CreateOrUpdateCustomer/", ЗаголовокHTTP);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапросаJSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	ЗащищенноеСоединение = ИнтеграцияИСПовтИсп.ЗащищенноеСоединение();
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
		Объект.АдресСервера,
		,
		Объект.Логин,
		Объект.Пароль,
		,
		60, ЗащищенноеСоединение);
		
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Сообщить(НСтр("ru='Ошибка отправки информации по контрагенту'") + Символы.ПС +
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат;
		
	КонецПопытки;
	
	РезультатОтправкиЗапроса = B2B_ОбщиеПроцедурыИФункции.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(
	HTTPОтвет, ТекстОшибки);
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			Для каждого Ссылка Из МассивСсылок Цикл
				
				СтруктураСвойства = Новый Структура;
				
				//СтруктураСвойства.Вставить("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("B2B_КонтрагентВыгружен"));
				ЭтаОбработка = РеквизитФормыВЗначение("Объект");     
				СтруктураСвойства.Вставить("Свойство", ЭтаОбработка.Свойство_B2B_КонтрагентВыгружен(Объект.БЦ_Организация));

				СтруктураСвойства.Вставить("Значение", Истина);    
				ОбъектОбработки = РеквизитФормыВЗначение("Объект");
				ОбъектОбработки.ЗаписатьЗначениеСвойства(Ссылка.Партнер, СтруктураСвойства);
				
			КонецЦикла;
			
			//ПроставитьСвойстваКЛ  
			ОбъектРезультат = B2B_ОбщиеПроцедурыИФункции.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Попытка
				Для каждого Строка Из ОбъектРезультат["PARTNER"] Цикл 
					
					Гуид = Строка.Значение["XML_ID"];
					Спр = Справочники.КонтактныеЛицаКонтрагентов.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(Гуид)));
					
					СтруктураСвойства = Новый Структура;
					СтруктураСвойства.Вставить("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("B2B_ИД_КонтактногоЛица"));
					СтруктураСвойства.Вставить("Значение", Строка.Значение["PARTNER_XML_ID"]); 
					
					ОбъектОбработки = РеквизитФормыВЗначение("Объект");
					ОбъектОбработки.ЗаписатьЗначениеСвойства(Спр, СтруктураСвойства);
					
				КонецЦикла;
			Исключение
				
			КонецПопытки;
			
			Сообщить("Данные успешно отправлены!");
			
		Иначе
			
			Сообщить(ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			НСтр("ru='Отправка данных о контрагентах'"),
			РезультатОтправкиЗапроса));
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		Сообщить(СтрШаблон(
		НСтр("ru='Данные о контрагентах не отправлены.
		|Текст ошибки: %1'"),
		РезультатОтправкиЗапроса.ТекстОшибки));
		
		Возврат;
		
	КонецЕсли;
     
	
КонецПроцедуры 

&НаСервере
Функция ПолучитьМассивКонтрагентов(МассивСсылок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.КПП КАК КПП,
	|	Контрагенты.Наименование КАК Наименование,
	|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное,
	|	Контрагенты.B2B_ОсновнойБанковскийСчет.БИКБанка КАК Бик,
	|	Контрагенты.B2B_ОсновноеКонтактноеЛицо.Ссылка КАК КонтактноеЛицо,
	|	Контрагенты.B2B_ОсновнойБанковскийСчет.НомерСчета КАК ОсновнойБанковскийСчетНомерСчета,
	|	Контрагенты.Партнер.БизнесРегион КАК Регион
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка В(&СписокКонтрагентов)
	|	И НЕ Контрагенты.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("СписокКонтрагентов", Объект.ТаблицаКонтрагентов.Выгрузить().ВыгрузитьКолонку("Контрагент"));
	
	Рез = Запрос.Выполнить().Выбрать();
	
	МассивКонтрагентов = Новый Массив;
	
	Пока Рез.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Рез.КонтактноеЛицо) Тогда
			Сообщить("Контрагент не выгружен: [" + Рез.Ссылка + "]. Не заполнено основное контактное лицо.");
			Продолжить;
		КонецЕсли;
		
		Email = ПолучитьКонтактнуюИнформацию(Рез.КонтактноеЛицо, Объект.ВКИПользователяEmail);
		Если ПустаяСтрока(Email) Тогда
			Сообщить("Контрагент не выгружен: [" + Рез.Ссылка + "]. Не заполнен Email основного контактного лица.");
			Продолжить;	
		КонецЕсли;
		
		СтруктураКонтрагент = Новый Структура;
		СтруктураКонтрагент.Вставить("XML_ID", СокрЛП(Рез.Ссылка.гф_GLN_номер));
		СтруктураКонтрагент.Вставить("CODE", Прав(СокрЛП(Рез.Ссылка.Код), 5));
		СтруктураКонтрагент.Вставить("INN", Рез.ИНН);
		СтруктураКонтрагент.Вставить("KPP", Рез.КПП);
		СтруктураКонтрагент.Вставить("NAME", Рез.Наименование);
		СтруктураКонтрагент.Вставить("FULL_NAME", Рез.НаименованиеПолное);
		СтруктураКонтрагент.Вставить("OGRN_OGRNIP", "");
		СтруктураКонтрагент.Вставить("BANK_BIC", СокрЛП(Рез.Бик));
		СтруктураКонтрагент.Вставить("BANK_BILL", СокрЛП(Рез.ОсновнойБанковскийСчетНомерСчета));
		Если ЗначениеЗаполнено(Рез.Регион) Тогда
			СтруктураКонтрагент.Вставить("AREA_NAME", СокрЛП(Рез.Регион.Наименование));
		КонецЕсли;

		СтруктураАдреса = ПолучитьСтруктуруАдреса();
		СтруктураАдреса.XML_ID = СокрЛП(Рез.Ссылка.гф_GLN_номер)+"#1";    
		
//			СписокПолей = "Представление, СокращенноеНаименование, ПолноеНаименование, НаименованиеДляПечатныхФорм, АдресЭлектроннойПочты, СтранаРегистрации, НалоговыйНомерВСтранеРегистрации,
//		|КодПоОКПО, КодОКВЭД, ИНН, КПП, Телефоны, ЭлектроннаяПочта, ЮридическийАдрес, ФактическийАдрес, Банк, БИК, КоррСчет, НомерСчета";

 		Сведения = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Рез.Ссылка, ТекущаяДата());

		СтруктураАдреса.NAME = Сведения.ЮридическийАдрес;
		
		СтруктураКонтрагент.Вставить("ADDRESS_LEGAL", ?(Не ПустаяСтрока(СтруктураАдреса.NAME),СтруктураАдреса,""));
		
		СтруктураАдреса = ПолучитьСтруктуруАдреса();
		СтруктураАдреса.XML_ID = СокрЛП(Рез.Ссылка.гф_GLN_номер)+"#2";
		СтруктураАдреса.NAME = Сведения.ФактическийАдрес;
		
		СтруктураКонтрагент.Вставить("ADDRESS_ACTUAL", ?(Не ПустаяСтрока(СтруктураАдреса.NAME),СтруктураАдреса,""));
		
		СтруктураКонтрагент.Вставить("SITE", "");
		СтруктураКонтрагент.Вставить("EMAIL", Сведения.АдресЭлектроннойПочты);
		СтруктураКонтрагент.Вставить("PHONE", Сведения.Телефоны);
		
		Адреса = ПолучитьМассивАдресов(Рез.Ссылка);
		
		СтруктураКонтрагент.Вставить("STORE", Адреса); 

		БЦ_ПолучитьСкидкиКонтрагента = БЦ_ПолучитьСкидкиКонтрагента(Рез.Ссылка);
		
		Контакты = ПолучитьКонтактныеЛица(Рез.Ссылка, Истина, БЦ_ПолучитьСкидкиКонтрагента);
		Если Контакты.Количество()>0 Тогда
			СтруктураКонтрагент.Вставить("REPRESENTATIV", Контакты[0]);
		КонецЕсли;
		
		Контакты = ПолучитьКонтактныеЛица(Рез.Ссылка, Ложь,БЦ_ПолучитьСкидкиКонтрагента);
		СтруктураКонтрагент.Вставить("USER", Контакты);
		
		МассивКонтрагентов.Добавить(СтруктураКонтрагент);
		
		МассивСсылок.Добавить(Рез.Ссылка);
		
	КонецЦикла;
	
	Возврат МассивКонтрагентов;
	
КонецФункции 

&НаСервере
Функция ПолучитьКонтактныеЛица(Контрагент, Основной = Истина, СкидкиКонтрагента = неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КЛКонтрагентов.Ссылка КАК Ссылка,
	|	КЛКонтрагентов.Наименование КАК ФИО,
	|	"""" КАК Имя,
	|	"""" КАК Отчество,
	|	КЛКонтрагентов.Ссылка КАК КонтактноеЛицо,
	|	ЗначенияСвойствОбъектов.Значение КАК Ид_Битрикс
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК КЛКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
	|		ПО КЛКонтрагентов.Ссылка = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = &Свойство)
	|ГДЕ
	|	КЛКонтрагентов.Владелец = &Владелец
	|	И НЕ КЛКонтрагентов.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА &Основной
	|				ТОГДА &B2B_ОсновноеКонтактноеЛицо = КЛКонтрагентов.Ссылка
	|			ИНАЧЕ &B2B_ОсновноеКонтактноеЛицо <> КЛКонтрагентов.Ссылка
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("Владелец", Контрагент.Партнер); 
	Запрос.УстановитьПараметр("B2B_ОсновноеКонтактноеЛицо", Контрагент.B2B_ОсновноеКонтактноеЛицо);
	Запрос.УстановитьПараметр("Основной", Основной);
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("B2B_ИД_КонтактногоЛица"));
	
	Рез = Запрос.Выполнить().Выбрать();
	
	МассивПользователей = Новый Массив;
	
	Пока Рез.Следующий() Цикл                     		
		Email = ПолучитьКонтактнуюИнформацию(Рез.Ссылка, Объект.ВКИПользователяEmail);
		Телефон = ПолучитьКонтактнуюИнформацию(Рез.Ссылка, Объект.ВКИПользователяТелефон);
		Если ПустаяСтрока(Email) Тогда
			Продолжить;	
		КонецЕсли;
		СтруктураПользователя = Новый Структура;
		СтруктураПользователя.Вставить("XML_ID", СокрЛП(Рез.Ссылка.УникальныйИдентификатор()));
		СтруктураПользователя.Вставить("PARTNER_XML_ID", СокрЛП(Рез.Ид_Битрикс));    
		Фамилия = "";
		Имя = "";
		Отчество = "";
		ФИО = СокрЛП(Рез.ФИО);
		Если Найти(ФИО," ")>0 Тогда
			Фамилия = Лев(ФИО,Найти(ФИО," ")-1);
			ФИО = Прав(ФИО,СтрДлина(Фио)-Найти(ФИО," "));
		ИНаче
			Фамилия = ФИО;
		КонецЕсли;
		Если Найти(ФИО," ")>0 Тогда
			Имя = Лев(ФИО,Найти(ФИО," ")-1);
			Отчество = Прав(ФИО,СтрДлина(Фио)-Найти(ФИО," "));
		Иначе
			Имя = СокрЛП(ФИО);
		КонецЕсли;
		СтруктураПользователя.Вставить("LAST_NAME", Фамилия);
		СтруктураПользователя.Вставить("NAME", Имя);
		СтруктураПользователя.Вставить("SECOND_NAME", Отчество);
		СтруктураПользователя.Вставить("EMAIL", Email);
		СтруктураПользователя.Вставить("PERSONAL_PHONE", Телефон);
		
		Если ЗначениеЗаполнено(СкидкиКонтрагента) Тогда			
				СтруктураПользователя.Вставить("PERSONAL_DISCOUNT_SHOES", СкидкиКонтрагента.Получить("PERSONAL_DISCOUNT_SHOES"));			
				СтруктураПользователя.Вставить("PERSONAL_DISCOUNT_ACCESSORIES", СкидкиКонтрагента.Получить("PERSONAL_DISCOUNT_ACCESSORIES"));			
		КонецЕсли;
		МассивПользователей.Добавить(СтруктураПользователя);
		
	КонецЦикла;
	
	Возврат МассивПользователей;
	
КонецФункции

&НаСервере
Функция БЦ_ПолучитьСкидкиКонтрагента(Контрагент)
	
	Скидки = Новый Соответствие;
    
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	гф_ВидыСкидок.Ссылка КАК ТипСкидки,
	|	ЕСТЬNULL(Скидки.Скидка, 0) КАК Скидка
	|ИЗ
	|	Перечисление.гф_ВидыСкидок КАК гф_ВидыСкидок
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			w_СкидкиКлиентаПоДоговоруСрезПоследних.ВидСкидки КАК ТипСкидки,
	|			w_СкидкиКлиентаПоДоговоруСрезПоследних.Скидка КАК Скидка
	|		ИЗ
	|			РегистрСведений.гф_ИсторияИзмененияСкидок.СрезПоследних(
	|					&ТекДата,
	|					Контрагент = &Контрагент
	//|						И Сезон = &Сезон) КАК w_СкидкиКлиентаПоДоговоруСрезПоследних) КАК Скидки
	|						) КАК w_СкидкиКлиентаПоДоговоруСрезПоследних) КАК Скидки
	|		ПО гф_ВидыСкидок.Ссылка = Скидки.ТипСкидки
	|ГДЕ
	|	гф_ВидыСкидок.Ссылка = &ТипСкидки";
	
	Запрос.УстановитьПараметр("ТекДата",  ТекущаяДата());
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	//Запрос.УстановитьПараметр("Сезон", Объект.БЦ_Сезон);
	Запрос.УстановитьПараметр("ТипСкидки", Объект.БЦ_ТипСкидкиДляОбуви);
	
	
	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Следующий() Тогда
		Скидки.Вставить("PERSONAL_DISCOUNT_SHOES",Рез.Скидка);
	КонецЕсли;
	Запрос.УстановитьПараметр("ТипСкидки", Объект.БЦ_ТипСкидкиДляАксессуаров);
	
	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Следующий() Тогда
		Скидки.Вставить("PERSONAL_DISCOUNT_ACCESSORIES",Рез.Скидка);
	КонецЕсли;
	
	Возврат Скидки;
	
	
КонецФункции

&НаСервере
Функция ПолучитьМассивАдресов(Контрагент)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	АдресаДоставки.Ссылка КАК Ссылка
	//|ИЗ
	//|	Справочник.гф_АдресаДоставки КАК АдресаДоставки
	//|ГДЕ
	//|	АдресаДоставки.Владелец = &Владелец
	//|	И НЕ АдресаДоставки.ПометкаУдаления"; 
	
	"ВЫБРАТЬ
	|	Контрагентыгф_АдресаДоставки.Адрес КАК Ссылка_
	|ИЗ
	|	Справочник.Контрагенты.гф_АдресаДоставки КАК Контрагентыгф_АдресаДоставки
	|ГДЕ
	|	Контрагентыгф_АдресаДоставки.Ссылка = &Владелец";	
	
	Запрос.УстановитьПараметр("Владелец", Контрагент);
	
	Рез = Запрос.Выполнить().Выбрать();
	
	МассивАдресов = Новый Массив;
	
	Пока Рез.Следующий() Цикл
		
		Попытка
			СтруктураАдрес = Новый Структура("XML_ID,CODE,NAME,COUNTRY,REGION,LOCATION,INDEX,STREET,HOUSE,ROOM");
			СтруктураАдрес.XML_ID = СокрЛП(Формат(Рез.Ссылка_.GLNНомер, "ЧГ=0"));
			СтруктураАдрес.CODE = Прав(СокрЛП(Рез.Ссылка_.НомерАдреса), 5);
			СтруктураАдрес.NAME = Рез.Ссылка_.Адрес; 
			
					                                   
			Структура = АдресныйКлассификаторСлужебный.КодыАдресаИКодыКЛАДР(Рез.Ссылка_.Адрес).КодыКЛАДР; 
			
			Если ЗначениеЗаполнено(Структура) Тогда
				СтруктураАдрес.COUNTRY = "РОССИЯ";
				СтруктураАдрес.REGION = Структура.Регион;
				СтруктураАдрес.LOCATION = Структура.Город;
				//СтруктураАдрес.INDEX = Структура.Поле1;
				СтруктураАдрес.STREET = Структура.Улица;
				//СтруктураАдрес.HOUSE = Структура.Поле7;
				//СтруктураАдрес.ROOM = Структура.поле9;
			КонецЕсли;
			
			МассивАдресов.Добавить(СтруктураАдрес);
		Исключение
			Сообщить("Не получилось выгрузить адрес: 
			|"+ОписаниеОшибки());
		Конецпопытки;
		
	КонецЦикла;
	
	Возврат МассивАдресов;
	
КонецФункции



&НаСервере
Функция ПолучитьКонтактнуюИнформацию(ОбъектСсылка, СтрокаПоиска) Экспорт
	Результат = "";
	ТзКонтакты = ПрочитатьНаборЗаписейКонтактнойИнформации(ОбъектСсылка);
	Если НЕ ТзКонтакты = Неопределено И ТзКонтакты.Количество() > 0 Тогда
		Строкатаблицы = ТзКонтакты.Найти(СтрокаПоиска, "Вид"); 
		Если  НЕ Строкатаблицы = Неопределено Тогда
			Результат = Строкатаблицы.Представление;
		КонецЕсли;
	КонецЕсли;
	Возврат(Результат);
КонецФункции  

&НаСервере
Функция ПрочитатьНаборЗаписейКонтактнойИнформации(Ссылка)
	
	Запрос = Новый Запрос;   
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид КАК Вид,
	               |	КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление КАК Представление
	               |ИЗ
	               |	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
	               |ГДЕ
	               |	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка = &Ссылка";
	//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ Справочник.Контрагенты.КонтактнаяИнформация Как Объект ГДЕ Объект = &Объект";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруАдреса()
	
	Возврат Новый Структура("XML_ID,NAME,COUNTRY,REGION,LOCATION,INDEX,STREET,HOUSE,ROOM");
	
КонецФункции



&НаСервере
Процедура ОбновитьТаблицуЗаказов()
	
	Если НЕ ЗначениеЗаполнено(НачалоПериода) ИЛИ НЕ ЗначениеЗаполнено(КонецПериода) Тогда
		Сообщить("Укажите период выгрузки документов");
		Возврат;
	КонецЕсли;	
	
	Если КонецПериода < НачалоПериода Тогда
		Сообщить("Конец периода меньше начала");
		Возврат;
	КонецЕсли;
	
	Запрос = ПолучитьЗапросПоЗаказам();
	
	Результат = Запрос.Выполнить();
	
	ДанныеВыгрузки = Результат.Выгрузить();
	
	Объект.ТаблицаЗаказов.Загрузить(ДанныеВыгрузки);	
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыОтправить(Команда)
	КонтрагентыОтправитьНаСервере();
КонецПроцедуры

&НаСервере
Процедура НастройкиПодключенияСохранияитьНаСервере()
		
	НастройкиПодключения = Новый Соответствие;
	НастройкиПодключения.Вставить("АдресСервера", Объект.АдресСервера);
	НастройкиПодключения.Вставить("Логин", Объект.Логин);
	НастройкиПодключения.Вставить("Пароль", Объект.Пароль);
	НастройкиПодключения.Вставить("Email", Объект.ВКИПользователяEmail);
	НастройкиПодключения.Вставить("Телефон", Объект.ВКИПользователяТелефон);
	НастройкиПодключения.Вставить("БЦ_ЗначениеСвойстваПол", Объект.БЦ_ЗначениеСвойстваПол);
	НастройкиПодключения.Вставить("БЦ_ИсключаемоеСвойствоПол", Объект.БЦ_ИсключаемоеСвойствоПол);
	НастройкиПодключения.Вставить("БЦ_ГлубинаПроверкиЗаказов", Объект.БЦ_ГлубинаПроверкиЗаказов);	  
	НастройкиПодключения.Вставить("ЯзыкПеревода", Объект.ЯзыкПеревода);
	НастройкиПодключения.Вставить("ПользовательскиеГруппы", Объект.ПользовательскиеГруппы);	   
	НастройкиПодключения.Вставить("ПланОбмена", Объект.ПланОбмена);	
	НастройкиПодключения.Вставить("БЦ_ТипСкидкиДляАксессуаров", Объект.БЦ_ТипСкидкиДляАксессуаров);	
	НастройкиПодключения.Вставить("БЦ_ТипСкидкиДляОбуви", Объект.БЦ_ТипСкидкиДляОбуви);	
	НастройкиПодключения.Вставить("БЦ_Организация", Объект.БЦ_Организация);	
	НастройкиПодключения.Вставить("БЦ_РазмерМаксимальнойСкидки", Объект.БЦ_РазмерМаксимальнойСкидки);	

	
	B2B_ОбщиеПроцедурыИФункции.СохранитьНастройкиПодключенияПортал(НастройкиПодключения);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("B2B_НастройкаПодключения", , НастройкиПодключения,,Объект.Портал.Наименование);
	
	Сообщить("Настройки сохранены");

КонецПроцедуры

&НаКлиенте
Процедура НастройкиПодключенияСохранияить(Команда)
	НастройкиПодключенияСохранияитьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ФормаированиеКаталога3урНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ФормаированиеКаталога3ур(Команда)
	ФормаированиеКаталога3урНаСервере();
КонецПроцедуры

&НаСервере
Процедура ФормаированиеКаталогаJanaНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ФормаированиеКаталогаJana(Команда)
	ФормаированиеКаталогаJanaНаСервере();
КонецПроцедуры

// Процедура - Регламентное нажатие
//
// Параметры:
//  Элемент	 - 	 - 
//
&НаСервере
Процедура РегламентноеНажатие()
	
	УстановитьТипНоменклатуры();
	УстановитьДопСвойстваНоменклатуры();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНоменклатуруПоАртикуу(Артикул)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Артикул Подобно &Артикул + ""%""";
	
	Запрос.УстановитьПараметр("Артикул", Артикул);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции


Функция ПолучитьРазмерныйРяд(Номенклатура)  
	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
	|		
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = &Свойство и
	|	ЗначенияСвойствОбъектов.Объект = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Свойство", Справочники.B2B_w_Настройки.Свойство_Size.Значение);
	
	Рез = Запрос.Выполнить().Выгрузить();
	
	РР = "";
	Для Каждого Строка Из Рез Цикл
		РР = Строка.Значение;		
	КонецЦикла;
	
	Возврат РР;
	
КонецФункции


&НаСервере
Процедура УстановитьДопСвойстваНоменклатуры()
	
	Запрос = Новый Запрос;	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпрНоменклатура.Ссылка КАК Ссылка,
	|	СпрНоменклатура.B2B_СЭ_ТипНоменклатуры КАК СЭ_ТипНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|ГДЕ	
	|	СпрНоменклатура.B2B_Портал = &B2B_Портал
	|";
	
	Запрос.УстановитьПараметр("B2B_Портал", Объект.Портал);
	
	Рез = Запрос.Выполнить().Выгрузить();
	
	СоответствиеАртикулов = Новый Соответствие();	
	
	Для Каждого Строка Из Рез Цикл
		СписокАрт = СтрРазделить(Строка.Ссылка.Артикул,"/");
		//
		СтруктураБитрикс = Новый Структура("ТипНоменклатуры");
		СтруктураБитрикс.ТипНоменклатуры = Строка.СЭ_ТипНоменклатуры;
		//
		Если СписокАрт.Количество()=2 Тогда
			СоответствиеАртикулов.Вставить(СписокАрт.Получить(0), СтруктураБитрикс);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Элемент Из СоответствиеАртикулов Цикл
		Артикул = Элемент.Ключ;
		
		СБ = Элемент.Значение;
		ТаблицаТоваров = ПолучитьНоменклатуруПоАртикуу(Артикул);
		
		Для Каждого Строка из ТаблицаТоваров Цикл
			Номенклатура = Строка.Номенклатура;	
			
			Если Номенклатура.ЕдиницаХраненияОстатков.Коэффициент<=1 Тогда
				Продолжить;	
			КонецЕсли;
			
			СписокАрт = СтрРазделить(Номенклатура.Артикул,"/");
			Если СписокАрт.Количество()<2 Тогда
				Продолжить;
			КонецЕсли;
			
			РазмерныйРяд = ПолучитьРазмерныйРяд(Номенклатура);
			
			Если ПустаяСтрока(РазмерныйРяд) Тогда
				Продолжить;
			КонецЕсли;
			
			//Сообщить(Номенклатура.Артикул);  
			ОбъектОбработки = РеквизитФормыВЗначение("Объект");
			
			СтруктураСвойства = Новый Структура;
			СтруктураСвойства.Вставить("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("B2B_РазмерныйРяд"));
			СтруктураСвойства.Вставить("Значение", РазмерныйРяд);
			ОбъектОбработки.ЗаписатьЗначениеСвойства(Номенклатура,СтруктураСвойства);
			
			СтруктураСвойства = Новый Структура;
			СтруктураСвойства.Вставить("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("B2B_Size"));
			СтруктураСвойства.Вставить("Значение",СписокАрт.Получить(1));
			ОбъектОбработки.ЗаписатьЗначениеСвойства(Номенклатура,СтруктураСвойства);
			
			B2B_ФильтрРазмерКороб = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("B2B_FilterSizeBox");
			//Значение_Size_Фильтр = ПолучитьРазмерныйРядДляФильтра(Номенклатура);
			Значение_Size_Фильтр = РазмерныйРяд;
			Если ЗначениеЗаполнено(Значение_Size_Фильтр) Тогда
				МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
				
				МенеджерЗаписи.Объект = Номенклатура;
				МенеджерЗаписи.Свойство = B2B_ФильтрРазмерКороб;
				МенеджерЗаписи.Значение = Значение_Size_Фильтр;
				
				МенеджерЗаписи.Записать();	
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры   

&НаСервере
Функция ПереводОбъекта(ссОбъект, Язык)
	Если Не ЗначениеЗаполнено(ссОбъект) Тогда
		Возврат "";
	КонецЕсли;
	
	запрос = Новый Запрос("ВЫБРАТЬ
	| RC_Переводы.Значение
	|ИЗ
	| РегистрСведений.гф_ПереводЗначенийРеквизитовИСвойств КАК RC_Переводы
	|ГДЕ
	| RC_Переводы.Объект = &Объект
	| И RC_Переводы.Язык = &Язык");
	запрос.УстановитьПараметр("Объект", ссОбъект);
	запрос.УстановитьПараметр("Язык", Язык);
	
	выборка = запрос.Выполнить().Выбрать();
	Если выборка.Следующий() Тогда
		Возврат выборка.Значение;
	КонецЕсли;
	
	Возврат "" + ссОбъект;	
	
КонецФункции

&НаСервере
Функция ПолучитьТаблицуОстатков(СписокСкладов)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(, Склад в Иерархии (&Склад)) КАК ТоварыНаСкладахОстатки";
	
	Запрос.УстановитьПараметр("Склад", СписокСкладов);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Процедура УстановитьТипНоменклатуры()
	
	СписокСкладов = Новый СписокЗначений;
	СписокСкладов.Добавить(Справочники.B2B_w_Настройки.ОсновнойСклад.Значение);
	
	СоотвАртикулов_ТН = Новый Соответствие;
	
	ТаблицаОстатков = ПолучитьТаблицуОстатков(СписокСкладов);
	
	Для Каждого ТекСтрока Из ТаблицаОстатков Цикл
		
		Если ТекСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент<=1 Тогда
			Продолжить;	
		КонецЕсли;
		
		Артикул = ТекСтрока.Номенклатура.Артикул;
		АртикулБезРазмера = Лев(Артикул, Найти(Артикул, "/")-1);
		
		Если ПустаяСтрока(АртикулБезРазмера) Тогда
			Продолжить;	
		КонецЕсли;
		
		Если СоотвАртикулов_ТН.Получить(АртикулБезРазмера) = Неопределено Тогда
			ТекТип = Справочники.СЭ_ТипНоменклатуры.НайтиПоРеквизиту("Артикул", АртикулБезРазмера);
			
			Если НЕ ЗначениеЗаполнено(ТекТип) Тогда
				ТекТип = Справочники.СЭ_ТипНоменклатуры.СоздатьЭлемент();
				ТекТип.Артикул = АртикулБезРазмера;
				ТекТип.Наименование = ТекСтрока.Номенклатура.НаименованиеПолное;
				ТекТип.ОбменДанными.Загрузка = Истина;
				
				Попытка
					ТекТип.Записать();
				Исключение
					//Сообщить("Ошибка записи типа номенклатуры " + АртикулБезРазмера + ": " + ОписаниеОшибки(), СтатусСообщения.Внимание);
				КонецПопытки;
			КонецЕсли;
			
			СоотвАртикулов_ТН.Вставить(АртикулБезРазмера, ТекТип.Ссылка);	
			
		Иначе 
			ТекТип = СоотвАртикулов_ТН.Получить(АртикулБезРазмера);
		КонецЕсли;
		
		Если ТекТип.Ссылка = ТекСтрока.Номенклатура.СЭ_ТипНоменклатуры Тогда 
			Продолжить;
		КонецЕсли;
		
		ТекущийОбъект = ТекСтрока.Номенклатура.ПолучитьОбъект();
		ТекущийОбъект.СЭ_ТипНоменклатуры = ТекТип.Ссылка;
		ТекущийОбъект.СЭ_НоменклатураДляВыгрузки = Истина;   
		ТекущийОбъект.B2B_Портал = Объект.Портал;
		ТекущийОбъект.ОбменДанными.Загрузка = Истина;
		ТекущийОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРазмерныйРядДляФильтра(Номенклатура)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВариантыКомплектацииНоменклатурыТовары.Характеристика.Наименование КАК Значение
	|ИЗ
	|	Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ВариантыКомплектацииНоменклатурыТовары
	|ГДЕ
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.НоменклатураОсновногоКомпонента = &НоменклатураОсновногоКомпонента";
	
	
	Запрос.УстановитьПараметр("НоменклатураОсновногоКомпонента", Номенклатура);
	//Запрос.УстановитьПараметр("Свойство", Справочники.w_Настройки.Свойство_Size.Значение);
	
	Рез = Запрос.Выполнить().Выгрузить();
	
	Миним = 0;
	Максим = 0;
	врРез = "";
	Для Каждого Строка Из Рез Цикл
		Попытка
			врЧисло = Число(Строка.Значение);
			
			Если Миним > врЧисло ИЛИ Миним = 0 Тогда
				Миним = врЧисло;
			КонецЕсли;	
			
			Если Максим < врЧисло  Тогда
				Максим = врЧисло;
			КонецЕсли;
		Исключение
			
		КонецПопытки;
	КонецЦикла;  
	Если Миним <> 0 или Максим <> 0 Тогда
		врРез = Строка(Миним) + "-" +Строка(Максим);
	КонецЕсли;   
	
	Возврат врРез;
	
КонецФункции


&НаСервере
Процедура ФормаированиеКаталогаMarkoTozziНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.Портал) Тогда
		Сообщить("Не заполнен реквизит портал");	
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПользовательскиеГруппы) Тогда
		Сообщить("Не заполнен реквизит пользовательские группы");	
		Возврат;
	КонецЕсли;
	
	РегламентноеНажатие();
	
	// Вставить содержимое обработчика.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|		Номенклатура.Ссылка КАК Ссылка,
	|		Номенклатура.ВидНоменклатуры КАК ВторойУровень,
	|		Номенклатура.НаименованиеПолное КАК НаименованиеПолное
	|	ИЗ
	|		Справочник.Номенклатура КАК Номенклатура	
	|	ГДЕ
	|		Номенклатура.B2B_Портал = &Портал";
	
	Запрос.УстановитьПараметр("Портал", Объект.Портал);
	//Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Пол"));
	Рез = Запрос.Выполнить().Выгрузить();
	
	Уровень2 = Рез.Скопировать();
	Уровень2.Свернуть("ВторойУровень");
	Уровень3 = Рез.Скопировать();
	Уровень3.Свернуть("ВторойУровень, НаименованиеПолное");
	
	
	Для Каждого СтрокаУр2 Из Уровень2 Цикл   
		
		лУникальныйИдентификатор = Новый УникальныйИдентификатор;
		лИдентификатор = Строка(лУникальныйИдентификатор);
		лНаименование = СокрЛП(ПереводОбъекта(СтрокаУр2.ВторойУровень.Наименование, Объект.ЯзыкПеревода));
		Спр1 = Справочники.Б_ПользовательскиеГруппыТоваров.НайтиПоНаименованию(лНаименование);				
		
		Если Спр1.Пустая() Тогда
			Спр1 = Справочники.Б_ПользовательскиеГруппыТоваров.СоздатьЭлемент();
			Спр1.ИдентификаторРаздела = лИдентификатор;
			Спр1.Родитель = Объект.ПользовательскиеГруппы;
			Спр1.Наименование = СокрЛП(лНаименование);
			Попытка
				Спр1.Записать();
			Исключение
				//Сообщить("Не удалось записать элемент:" + ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		
		
		ПоискУр3 = Уровень3.НайтиСтроки(Новый Структура("ВторойУровень", СтрокаУр2.ВторойУровень));
		Для Каждого СтрокаУр3 Из ПоискУр3 Цикл   
			
			лУникальныйИдентификатор = Новый УникальныйИдентификатор;
			лИдентификатор = Строка(лУникальныйИдентификатор);
			лНаименование = СокрЛП(СтрокаУр3.НаименованиеПолное);
			Спр2 = Справочники.Б_ПользовательскиеГруппыТоваров.НайтиПоНаименованию(лНаименование, , Спр1.Ссылка);				
			
			Если Спр2.Пустая() Тогда
				Спр2 = Справочники.Б_ПользовательскиеГруппыТоваров.СоздатьЭлемент();
				Спр2.ИдентификаторРаздела = лИдентификатор;
				Спр2.Родитель = Спр1.Ссылка;
				Спр2.Наименование = СокрЛП(лНаименование);
			Иначе
				Спр2 = Спр1.ПолучитьОбъект();
			КонецЕсли;
			
			ПоискВложений = Рез.НайтиСтроки(Новый Структура("ВторойУровень, НаименованиеПолное", СтрокаУр3.ВторойУровень, СтрокаУр3.НаименованиеПолное));
			
			Спр2.Товары.Очистить();
			Для Каждого Вложение Из ПоискВложений Цикл
				СтрокаТовары = Спр2.Товары.Добавить();
				СтрокаТовары.Номенклатура = Вложение.Ссылка;
			КонецЦикла;
			
			Попытка
				Спр2.Записать();
			Исключение
				//Сообщить("Не удалось записать элемент:" + ОписаниеОшибки());
			КонецПопытки;			
			
		КонецЦикла;		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ФормаированиеКаталогаMarkoTozzi(Команда)
	ФормаированиеКаталогаMarkoTozziНаСервере();
КонецПроцедуры

&НаСервере
Процедура ФормаированиеКаталогаOliverНаСервере()     
	
	Если НЕ ЗначениеЗаполнено(Объект.Портал) Тогда
		Сообщить("Не заполнен реквизит портал");	
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПользовательскиеГруппы) Тогда
		Сообщить("Не заполнен реквизит пользовательские группы");	
		Возврат;
	КонецЕсли;
	
	РегламентноеНажатие();
	
	// Вставить содержимое обработчика.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.Значение ЕСТЬ NULL
	|			ТОГДА ""Женщинам""
	|		ИНАЧЕ ВложенныйЗапрос.Значение
	|	КОНЕЦ КАК ПервыйУровень,
	|	ВложенныйЗапрос.НаименованиеПолное КАК НаименованиеПолное
	|ИЗ
	|	(ВЫБРАТЬ
	|		Номенклатура.Ссылка КАК Ссылка,
	|		ЗначенияСвойствОбъектов.Значение КАК Значение,
	|		Номенклатура.НаименованиеПолное КАК НаименованиеПолное
	|	ИЗ
	|		Справочник.Номенклатура КАК Номенклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
	|			ПО Номенклатура.Ссылка = ЗначенияСвойствОбъектов.Объект
	|				И (ЗначенияСвойствОбъектов.Свойство = &Свойство)
	|	ГДЕ
	|		Номенклатура.B2B_Портал = &Портал) КАК ВложенныйЗапрос";
	
	Запрос.УстановитьПараметр("Портал", Объект.Портал);
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Пол"));
	Рез = Запрос.Выполнить().Выгрузить();
	
	//Уровень1 = Новый ТаблицаЗначений;
	Уровень1 = Рез.Скопировать();
	Уровень1.Свернуть("ПервыйУровень");
	Уровень2 = Рез.Скопировать();
	Уровень2.Свернуть("ПервыйУровень, НаименованиеПолное");
	Для Каждого СтрокаУр1 Из Уровень1 Цикл
		лУникальныйИдентификатор = Новый УникальныйИдентификатор;
		лИдентификатор = Строка(лУникальныйИдентификатор);
		лНаименование = СокрЛП(СтрокаУр1.ПервыйУровень); 
		
		Если ВРег(лНаименование) = "МУЖЧИНЫ" Тогда
			лНаименование = "Мужчинам";	
		ИначеЕсли ВРег(лНаименование) = "ЖЕНЩИНЫ" Тогда
			лНаименование = "Женщинам";
		ИначеЕсли ВРег(лНаименование) = "ДЕТИ" Тогда 
			лНаименование = "Детям";
		КонецЕсли;
		
		Спр = Справочники.B2B_Б_ПользовательскиеГруппыТоваров.НайтиПоНаименованию(лНаименование);
		Если Спр.Пустая() Тогда
			Спр = Справочники.B2B_Б_ПользовательскиеГруппыТоваров.СоздатьЭлемент();
			Спр.ИдентификаторРаздела = лИдентификатор;
			Спр.Родитель = Объект.ПользовательскиеГруппы;
			Спр.Наименование = лНаименование;
			Попытка
				Спр.Записать();
			Исключение
				//Сообщить("Не удалось записать элемент:" + ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		
		ПоискУр2 = Уровень2.НайтиСтроки(Новый Структура("ПервыйУровень", СтрокаУр1.ПервыйУровень));
		Для Каждого СтрокаУр2 Из ПоискУр2 Цикл   
			
			лУникальныйИдентификатор = Новый УникальныйИдентификатор;
			лИдентификатор = Строка(лУникальныйИдентификатор);
			лНаименование = СокрЛП(СтрокаУр2.НаименованиеПолное);
			Спр1 = Справочники.Б_ПользовательскиеГруппыТоваров.НайтиПоНаименованию(лНаименование);				
			
			Если Спр1.Пустая() Тогда
				Спр1 = Справочники.B2B_Б_ПользовательскиеГруппыТоваров.СоздатьЭлемент();
				Спр1.ИдентификаторРаздела = лИдентификатор;
				Спр1.Родитель = Спр.Ссылка;
				Спр1.Наименование = СокрЛП(лНаименование);
			Иначе
				Спр1 = Спр1.ПолучитьОбъект();
			КонецЕсли;
			
			
			
			ПоискУр3 = Рез.НайтиСтроки(Новый Структура("ПервыйУровень, НаименованиеПолное", СтрокаУр2.ПервыйУровень, СтрокаУр2.НаименованиеПолное));
			
			Спр1.Товары.Очистить();
			Для Каждого СтрокаУр3 Из ПоискУр3 Цикл
				СтрокаТовары = Спр1.Товары.Добавить();
				СтрокаТовары.Номенклатура = СтрокаУр3.Ссылка;
			КонецЦикла;
			
			Попытка
				Спр1.Записать();
			Исключение
				//Сообщить("Не удалось записать элемент:" + ОписаниеОшибки());
			КонецПопытки;
			
		КонецЦикла;	
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ФормаированиеКаталогаOliver(Команда)
	ФормаированиеКаталогаOliverНаСервере();
КонецПроцедуры

&НаСервере
Процедура ФормаированиеКаталогаTamarisНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.Портал) Тогда
		Сообщить("Не заполнен реквизит портал");	
		Возврат;
	КонецЕсли;
	
	// Вставить содержимое обработчика.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.НаименованиеПолное КАК НаименованиеПолное,
	|	ВложенныйЗапрос.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ВложенныйЗапрос.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПОДСТРОКА(Товары.НаименованиеПолное, 1, 100) КАК НаименованиеПолное,
	|		Товары.ВидНоменклатуры КАК ВидНоменклатуры,
	|		Товары.Ссылка КАК Ссылка
	|	ИЗ
	|		Справочник.Номенклатура КАК Товары
	|	ГДЕ
	|		Товары.B2B_Портал = &Портал
	|		И Товары.ВидНоменклатуры в (&ВидНоменклатурыОбувь)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Товары.ВидНоменклатуры,
	|		ПОДСТРОКА(Товары.НаименованиеПолное, 1, 100),
	|		Товары.Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПОДСТРОКА(Товары.НаименованиеПолное, 1, 100),
	|		Товары.ВидНоменклатуры,
	|		Товары.Ссылка
	|	ИЗ
	|		Справочник.Номенклатура КАК Товары
	|	ГДЕ
	|		Товары.B2B_Портал = &Портал
	|		И НЕ Товары.ВидНоменклатуры в (&ВидНоменклатурыОбувь)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Товары.ВидНоменклатуры,
	|		Товары.Ссылка,
	|		ПОДСТРОКА(Товары.НаименованиеПолное, 1, 100)) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.НаименованиеПолное,
	|	ВложенныйЗапрос.ВидНоменклатуры,
	|	ВложенныйЗапрос.Ссылка";
	
	Запрос.УстановитьПараметр("Портал", Объект.Портал);
	
	//TODO разные коды справочника
	Запрос.УстановитьПараметр("ВидНоменклатурыОбувь", Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Обувь")); //tamaris 000000010
	Рез = Запрос.Выполнить().Выгрузить();                                                                     //marco tozzi 000000009
	
	//Уровень1 = Новый ТаблицаЗначений;
	Уровень1 = Рез.Скопировать();
	Уровень1.Свернуть("ВидНоменклатуры");
	Уровень2 = Рез.Скопировать();
	Уровень2.Свернуть("ВидНоменклатуры, НаименованиеПолное");
	Для Каждого СтрокаУр1 Из Уровень1 Цикл
		лИдентификатор = Строка(СтрокаУр1.ВидНоменклатуры.УникальныйИдентификатор())+"#";
		Спр = Справочники.B2B_Б_ПользовательскиеГруппыТоваров.НайтиПоРеквизиту("ИдентификаторРаздела",лИдентификатор);
		Если Спр.Пустая() Тогда
			СпрО = Справочники.B2B_Б_ПользовательскиеГруппыТоваров.СоздатьЭлемент();
		Иначе
			СпрО = Спр.ПолучитьОбъект();
		КонецЕсли;
		СпрО.Родитель = Объект.ПользовательскиеГруппы;
		СпрО.Наименование = СтрокаУр1.ВидНоменклатуры.Наименование;
		СпрО.ИдентификаторРаздела = лИдентификатор;
		
		Попытка
			СпрО.Записать();
		Исключение
			Сообщить("Не удалось записать элемент:" + ОписаниеОшибки());
		КонецПопытки;
		
		ПоискУр2 = Уровень2.НайтиСтроки(Новый Структура("ВидНоменклатуры", СтрокаУр1.ВидНоменклатуры));
		Для Каждого СтрокаУр2 Из ПоискУр2 Цикл         
			Если ТипЗнч(СтрокаУр2.НаименованиеПолное) = Тип("СправочникСсылка.Контрагенты") Тогда
				лИдентификатор = Строка(СтрокаУр2.НаименованиеПолное.УникальныйИдентификатор())+"#";
				лНаименование = СокрЛП(ПереводОбъекта(СтрокаУр2.НаименованиеПолное, Объект.ЯзыкПеревода));
				Спр1 = Справочники.B2B_Б_ПользовательскиеГруппыТоваров.НайтиПоРеквизиту("ИдентификаторРаздела", лИдентификатор);
				
			Иначе
				лУникальныйИдентификатор = Новый УникальныйИдентификатор;
				лИдентификатор = Строка(лУникальныйИдентификатор);
				лНаименование = СокрЛП(СтрокаУр2.НаименованиеПолное);
				Спр1 = Справочники.B2B_Б_ПользовательскиеГруппыТоваров.НайтиПоНаименованию(Строка(СтрокаУр2.НаименованиеПолное));				
			КонецЕсли;
			
			Если Спр1.Пустая() Тогда
				СпрОУр2 = Справочники.B2B_Б_ПользовательскиеГруппыТоваров.СоздатьЭлемент();
				СпрОУр2.ИдентификаторРаздела = лИдентификатор;
			Иначе
				СпрОУр2 = Спр1.ПолучитьОбъект();
			КонецЕсли;
			
			СпрОУр2.Родитель = СпрО.Ссылка;
			СпрОУр2.Наименование = СокрЛП(лНаименование);
			
			ПоискУр3 = Рез.НайтиСтроки(Новый Структура("ВидНоменклатуры, НаименованиеПолное", СтрокаУр2.ВидНоменклатуры, СтрокаУр2.НаименованиеПолное));
			
			СпрОУр2.Товары.Очистить();
			Для Каждого СтрокаУр3 Из ПоискУр3 Цикл
				СтрокаТовары = СпрОУр2.Товары.Добавить();
				СтрокаТовары.Номенклатура = СтрокаУр3.Ссылка;
			КонецЦикла;
			
			Попытка
				СпрОУр2.Записать();
			Исключение
				Сообщить("Не удалось записать элемент:" + ОписаниеОшибки());
			КонецПопытки;
			
		КонецЦикла;	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ФормаированиеКаталогаTamaris(Команда)
	ФормаированиеКаталогаTamarisНаСервере();
КонецПроцедуры 

Процедура глДополнитьТекст(ИтоговыйТекст,ДопТекст,Разделитель=" И ") Экспорт
	Если СокрЛП(ДопТекст)="" Тогда
		Возврат;
	КонецЕсли; 
	
	ИтоговыйТекст=ИтоговыйТекст+?(ИтоговыйТекст="","",Разделитель)+СокрЛП(ДопТекст);
КонецПроцедуры


&НаСервере
Процедура ФормаированиеКаталогаTamarisNewНаСервере(СписокНоменклатуры = Неопределено)
		
	Если НЕ ЗначениеЗаполнено(Объект.Портал) Тогда
		Сообщить("Не заполнен реквизит портал");	
		Возврат;
	КонецЕсли;  
	
	Если НЕ ЗначениеЗаполнено(Объект.ПользовательскиеГруппы) Тогда
		Сообщить("Не заполнен реквизит ""Пользовательские группы""");	
		Возврат;
	КонецЕсли; 
	
	ПолноеОбновление = Не ЗначениеЗаполнено(СписокНоменклатуры) или СписокНоменклатуры.Количество()=0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.B2B_СЭ_ТипНоменклатуры.Родитель КАК СЭ_ТипНоменклатурыРодитель
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	&УсловиеЗапроса = ИСТИНА";     
	
	УсловиеЗапроса = "";
	глДополнитьТекст(УсловиеЗапроса,"1=1");
	глДополнитьТекст(УсловиеЗапроса,"Номенклатура.B2B_Портал = &B2B_Портал"); 
	
	Если Не ПолноеОбновление Тогда
		глДополнитьТекст(УсловиеЗапроса,"Номенклатура.Ссылка в Иерархии (&СписокНоменклатуры)");	
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеЗапроса = ИСТИНА", УсловиеЗапроса);
	
	Запрос.УстановитьПараметр("B2B_Портал", Объект.Портал);
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	
	НоменклатураПоТипам = Запрос.Выполнить().Выгрузить();
	
	Для Каждого строка Из НоменклатураПоТипам Цикл
		Если Строка.СЭ_ТипНоменклатурыРодитель.Уровень() > 1 Тогда  
			Пока 1=1 Цикл  
				Строка.СЭ_ТипНоменклатурыРодитель = Строка.СЭ_ТипНоменклатурыРодитель.Родитель;
				Если Строка.СЭ_ТипНоменклатурыРодитель.Уровень() = 1 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Вставить содержимое обработчика.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СЭ_ТипНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.B2B_СЭ_ТипНоменклатуры КАК СЭ_ТипНоменклатуры
	|ГДЕ
	|	НЕ СЭ_ТипНоменклатуры.ПометкаУдаления
	|	И СЭ_ТипНоменклатуры.ЭтоГруппа
	|	И СЭ_ТипНоменклатуры.Ссылка В ИЕРАРХИИ(&Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СЭ_ТипНоменклатуры.Наименование
	|ИТОГИ ПО
	|	Ссылка ТОЛЬКО ИЕРАРХИЯ";   
	
	Запрос.УстановитьПараметр("Ссылка", НоменклатураПоТипам.ВыгрузитьКолонку("СЭ_ТипНоменклатурыРодитель"));
	
	Рез = Запрос.Выполнить().Выгрузить();
	
	
	Для Каждого Строка Из Рез Цикл    

		Если Строка.Ссылка.Уровень()>1 Тогда
			Продолжить;
		КонецЕсли;  
		
		лИдентификатор = Строка(Строка.Ссылка.УникальныйИдентификатор());  
		Спр = Справочники.B2B_Б_ПользовательскиеГруппыТоваров.НайтиПоРеквизиту("ИдентификаторРаздела",лИдентификатор);
		
		лИдентификаторРодитель = Строка(Строка.Ссылка.Родитель.УникальныйИдентификатор());   
		СпрР = Справочники.B2B_Б_ПользовательскиеГруппыТоваров.НайтиПоРеквизиту("ИдентификаторРаздела",лИдентификаторРодитель);	
		
		Если СпрР.Пустая() Тогда
			СпрР = Объект.ПользовательскиеГруппы;
		КонецЕсли;
		
		Если Спр.Пустая() Тогда
			СпрО = Справочники.B2B_Б_ПользовательскиеГруппыТоваров.СоздатьЭлемент();
		Иначе
			СпрО = Спр.ПолучитьОбъект();
		КонецЕсли; 
		
		СпрО.Родитель = СпрР;
		СпрО.Наименование = Строка.Ссылка.Наименование;
		СпрО.ИдентификаторРаздела = лИдентификатор;  
		
		Если ПолноеОбновление Тогда
			СпрО.Товары.Очистить();   
		КонецЕсли;
		
		ПоискТоваров = НоменклатураПоТипам.НайтиСтроки(Новый Структура("СЭ_ТипНоменклатурыРодитель", Строка.Ссылка));
		Для Каждого СтрокаПоиска Из ПоискТоваров Цикл
			СтрокаТовары = СпрО.Товары.Добавить();
			СтрокаТовары.Номенклатура = СтрокаПоиска.Ссылка;
		КонецЦикла;
		
		Попытка
			СпрО.Записать();
		Исключение
			Сообщить("Не удалось записать элемент:" + ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура ФормаированиеКаталогаTamarisNew(Команда)
	ФормаированиеКаталогаTamarisNewНаСервере();
КонецПроцедуры

&НаСервере
Функция СоздатьРеглЗаданиеНаСервере()        
	
	Если Не ЗначениеЗаполнено(Объект.ПланОбмена) Тогда
		Сообщить("Выберите план обмена для регламентного задания");
		Возврат Неопределено;
	КонецЕсли;
	
	Если мРегламентноеЗадание = Неопределено Тогда
		ОбъектЗадания = РегламентныеЗадания.СоздатьРегламентноеЗадание("B2B_НаполнениеКаталога");
		
		ОбъектЗадания.Наименование = Объект.ПланОбмена.Наименование + " (заполнение каталога  B2B)";
		ОбъектЗадания.Использование = Истина;
		
		Массив = Новый Массив();
		Массив.Добавить(Объект.ПланОбмена.Код);
		
		ОбъектЗадания.Параметры = Массив;
		ОбъектЗадания.Ключ = Строка(Новый УникальныйИдентификатор);
		ОбъектЗадания.Записать();
		
		мРегламентноеЗадание =  ОбъектЗадания;
		
		ОПланОбмена = Объект.ПланОбмена.ПолучитьОбъект();
		ОПланОбмена.B2B_РегламентноеЗадание = Строка(ОбъектЗадания.УникальныйИдентификатор);		
		ОПланОбмена.Записать();
	Иначе
		ОбъектЗадания = мРегламентноеЗадание;
	КонецЕсли;
	Возврат ОбъектЗадания;	
	
КонецФункции

&НаКлиенте
Процедура СоздатьРеглЗадание(Команда)
	ОбъектЗадания = СоздатьРеглЗаданиеНаСервере();
	Если ОбъектЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(ОбъектЗадания.Расписание);
	
	Если Диалог.ОткрытьМодально() Тогда
		
		ОбъектЗадания.Расписание = Диалог.Расписание;
		ОбъектЗадания.Записать();
		РеквизитЗадания = Строка(ОбъектЗадания.УникальныйИдентификатор);
		
	КонецЕсли;
	
	УстановитьТекстНадписиРегламентнойНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстНадписиРегламентнойНастройки()
	
	//Перем ТекстЗаголовка, ТекстРасписания, РассписаниеАктивно;
	//
	//ПроцедурыОбменаДаннымиКлиент.ПолучитьТекстЗаголовкаИРасписанияРегламентнойНастройки(мРегламентноеЗадание, ТекстЗаголовка, ТекстРасписания, РассписаниеАктивно);
	//ЭлементыФормы.НастройкаРегламента.Заголовок = ТекстЗаголовка;
	//ЭлементыФормы.НадписьРасписаниеРегламентногоЗаданияНастройки.Заголовок = ТекстРасписания;
	//ЭлементыФормы.НадписьРасписаниеРегламентногоЗаданияНастройки.Шрифт = ?(РассписаниеАктивно, мЖирныйШрифт, мОбычныйШрифт);	
	
КонецПроцедуры


&НаСервере
Процедура РасписаниеРеглЗаданияНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеРеглЗадания(Команда)
	РасписаниеРеглЗаданияНаСервере();
КонецПроцедуры

&НаСервере
Процедура СоздатьРеглЗаданиеАвторезеревированияНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРеглЗаданиеАвторезеревирования(Команда)
	СоздатьРеглЗаданиеАвторезеревированияНаСервере();
КонецПроцедуры

&НаСервере
Процедура РасписаниеРеглЗаданияАвторезервированияНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеРеглЗаданияАвторезервирования(Команда)
	РасписаниеРеглЗаданияАвторезервированияНаСервере();
КонецПроцедуры

&НаСервере
Процедура НоменклатураСохранитьНаСервере()   
	
	Если НЕ ЗначениеЗаполнено(Объект.Портал) Тогда
		Сообщить("Не заполнен реквизит портал");	
		Возврат;
	КонецЕсли;    
	
	Если НЕ ЗначениеЗаполнено(Объект.ПланОбмена) Тогда
		Сообщить("Не заполнен реквизит план обмена");	
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = "";
	
	МассивРег = Новый Массив;
	
	Для каждого Строка Из Объект.ТаблицаНоменклатуры Цикл
		Номенклатура = Строка.Номенклатура;
		
		//Если Не ЗначениеЗаполнено(Номенклатура.B2B_СЭ_ТипНоменклатуры) Тогда
		//	Сообщить("Не заполнен тип номенклатуры для сайта: " + Номенклатура.Артикул + " ,пропускаем");
		//	Продолжить;
		//КонецЕсли;
	
		Если УправлениеСвойствами.ЗначениеСвойства(Номенклатура,Справочники.B2B_w_Настройки.Свойство_B2B_Портал) <> Объект.Портал Тогда   
			ЗаписатьЗначениеСвойства(Номенклатура,Новый Структура("Свойство,Значение",Справочники.B2B_w_Настройки.Свойство_B2B_Портал,Объект.Портал));
			//СпрОбъект = Номенклатура.ПолучитьОбъект();
			//СпрОбъект.B2B_Портал = Объект.Портал;
			//Попытка
			//	СпрОбъект.Записать();
			//Исключение
			//	Сообщить("Ошибка установки признака портал '" + СпрОбъект.Артикул + "': " + ОписаниеОшибки(), СтатусСообщения.Важное);
			//КонецПопытки;
		КонецЕсли;
		
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		
		РазмерныйРяд = ПолучитьРазмерныйРяд(Номенклатура);
		Если ЗначениеЗаполнено(РазмерныйРяд) Тогда
			СтруктураСвойства = Новый Структура;
			СтруктураСвойства.Вставить("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ОбработкаОбъект.ИдентификаторСвойства_B2B_РазмерныйРяд()));
			СтруктураСвойства.Вставить("Значение", РазмерныйРяд);
			ЗаписатьЗначениеСвойства(Номенклатура,СтруктураСвойства);
		КонецЕсли;
		
		B2B_Size = "";
		Если Найти(Номенклатура.ВидНоменклатуры.Наименование,"Обувь") > 0 Тогда 
			СписокАрт = СтрРазделить(Номенклатура.Артикул,"/"); 
			Если СписокАрт.Количество()=2 Тогда	
				B2B_Size = СписокАрт.Получить(1) 
			КонецЕсли;
		Иначе
			B2B_Size = B2B_ОбщиеПроцедурыИФункции.ПолучитьЗначениеСвойства(Строка.Номенклатура, Справочники.B2B_w_Настройки.Свойство_Size.Значение);	
		КонецЕсли;
		СтруктураСвойства = Новый Структура;
		СтруктураСвойства.Вставить("Свойство",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ОбработкаОбъект.ИдентификаторСвойства_B2B_Size()));
		СтруктураСвойства.Вставить("Значение", B2B_Size);
		ЗаписатьЗначениеСвойства(Номенклатура, СтруктураСвойства);		
		
		B2B_ФильтрРазмерКороб = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ОбработкаОбъект.ИдентификаторСвойства_B2B_FilterSizeBox());
		Значение_Size_Фильтр = ПолучитьРазмерныйРядДляФильтра(Номенклатура);
		Если ЗначениеЗаполнено(Значение_Size_Фильтр) Тогда
			МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
			
			МенеджерЗаписи.Объект = Номенклатура;
			МенеджерЗаписи.Свойство = B2B_ФильтрРазмерКороб;
			МенеджерЗаписи.Значение = Значение_Size_Фильтр;
			
			МенеджерЗаписи.Записать();	
		КонецЕсли;    
		
//	
		B2B_СвойствоГруппа = Справочники.B2B_w_Настройки.Свойство_ГруппаНаСайте.Значение;
		Если ЗначениеЗаполнено(B2B_СвойствоГруппа) и
			ЗначениеЗаполнено(Объект.ПользовательскиеГруппы) Тогда
			МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
			
			МенеджерЗаписи.Объект = Номенклатура;
			МенеджерЗаписи.Свойство = B2B_СвойствоГруппа;
			МенеджерЗаписи.Значение = Объект.ПользовательскиеГруппы;
			
			МенеджерЗаписи.Записать();	
		КонецЕсли;

		
		Если ЗначениеЗаполнено(Объект.ПланОбмена) Тогда  
			МассивРег.Добавить(Номенклатура);
			//Если ЗначениеЗаполнено(Номенклатура.ФайлКартинки) Тогда   
			//	МассивРег.Добавить(Номенклатура.ФайлКартинки);
			//КонецЕсли;		
		КонецЕсли;
		
	КонецЦикла; 
	
	Попытка 
		ПланыОбмена.ЗарегистрироватьИзменения(Объект.ПланОбмена, МассивРег); 
		
	Исключение
		Сообщить(ОписаниеОшибки());	
	КонецПопытки;
	
	Сообщить("Обработка завершена. ");
	
КонецПроцедуры  

&НаСервере
Функция ЗаписатьЗначениеСвойства(Объект,СтруктураСвойства) Экспорт    
    НаборЗаписейЗначенияСвойств = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
    Если ЗначениеЗаполнено(СтруктураСвойства.Значение) Тогда
        Запись = НаборЗаписейЗначенияСвойств.Добавить();
        Запись.Объект   = Объект.Ссылка;
        Свойство=СтруктураСвойства.Свойство;
        Запись.Свойство = Свойство.Ссылка;
        Запись.Значение = СтруктураСвойства.Значение;
    КонецЕсли;
    
    НаборЗаписейЗначенияСвойств.Отбор.Объект.Установить(Объект.Ссылка);
    НаборЗаписейЗначенияСвойств.Отбор.Свойство.Установить(Свойство); //.Ссылка
    Попытка
        НаборЗаписейЗначенияСвойств.Записать();
    Исключение
        Возврат Ложь;
    КонецПопытки;
    Возврат Истина;    
КонецФункции


&НаКлиенте
Процедура НоменклатураСохранить(Команда)
	НоменклатураСохранитьНаСервере();
КонецПроцедуры

&НаСервере
Процедура НоменклатураЗагрузитьНаСервере(ТЗ_Данные,СоответствиеКолонок)     
	
	Объект.ТаблицаНоменклатуры.Очистить();
		Для СчетчикКоличестваСтрок = 1 по ТЗ_Данные.Количество() - 1 Цикл
			
			СтрДанные = ТЗ_Данные[СчетчикКоличестваСтрок];
			
			Попытка
				лАртикул = СтрДанные[СоответствиеКолонок.Получить("Артикул")]; 
			Исключение
				Сообщить("Не найдена колонка Артикул");	
				Продолжить;
			КонецПопытки;
			
			Если НЕ ЗначениеЗаполнено(лАртикул) Тогда Продолжить; КонецЕсли;
			
			НайденнаяНоменклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", лАртикул);
			Если ЗначениеЗаполнено(НайденнаяНоменклатура) Тогда
				_нстр = Объект.ТаблицаНоменклатуры.Добавить();
				_нстр.Номенклатура = НайденнаяНоменклатура;  
			Иначе
				Сообщить("Для артикула: " + лАртикул + " не найдена номенклатура!");
			КонецЕсли;                                       
			
	КонецЦикла;

КонецПроцедуры  


Функция ПрочитатьФайлНаСервере(мФайл, СоответствиеКолонок, Предзаказ = Ложь);
	
	ДвДанные = ПолучитьИзВременногоХранилища(мФайл.АдресВоВремХранилище);
	ИмяВрФайла = ПолучитьИмяВременногоФайла(мФайл.Расширение);
	ДвДанные.Записать(ИмяВрФайла);	
	НовоеИмяФайла = КаталогВременныхФайлов() + "1.xlsx";
	КопироватьФайл(ИмяВрФайла, НовоеИмяФайла);
	
	ДанныеФайлаТабличныйДокумент = Новый ТабличныйДокумент; 
	ДанныеФайлаТабличныйДокумент.Прочитать(НовоеИмяФайла);	
	
	КоличествоСтрок = ДанныеФайлаТабличныйДокумент.ВысотаТаблицы;
	КоличествоКолонок = 9; //ДанныеФайлаТабличныйДокумент.ШиринаТаблицы;
	
	ТЗ_Данные  = Новый ТаблицаЗначений;
	
	//создать колонки в ТЗ
	Для СчетчикНомерПоля = 1 По КоличествоКолонок Цикл
		ИмяКолонки = "f"+СокрЛП(СчетчикНомерПоля);
		ТЗ_Данные.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Строка"));
	КонецЦикла;
	
	Для СчетчикКоличестваСтрок = 1 по КоличествоСтрок Цикл   
		Новстрока = ТЗ_Данные.Добавить();
		Для СчетчикНомерПоля = 1 По КоличествоКолонок Цикл 
			знчЯчейки = ДанныеФайлаТабличныйДокумент.Область(СчетчикКоличестваСтрок, СчетчикНомерПоля, СчетчикКоличестваСтрок, СчетчикНомерПоля).Текст;
			ИмяКолонки = "f"+Сокрлп(СчетчикНомерПоля);
			Новстрока[ИмяКолонки] = знчЯчейки;		
		КонецЦикла;
	КонецЦикла;	
	
    СоответствиеКолонок = новый Соответствие;
	
	СтрТаблицы = ТЗ_Данные[0];
	стрГруппировки = "";
	Для Каждого _ИмяКолонки Из ТЗ_Данные.Колонки Цикл
		
		ЗначениеКолонки = СтрТаблицы[_ИмяКолонки.Имя];
		Если ЗначениеКолонки = "Код" Тогда
			 СоответствиеКолонок.Вставить("Код", _ИмяКолонки.Имя);
			 
		ИначеЕсли ЗначениеКолонки = "Артикул" Тогда
			 СоответствиеКолонок.Вставить("Артикул", _ИмяКолонки.Имя);
			 
		 КонецЕсли;
		 
		стрГруппировки = стрГруппировки + _ИмяКолонки.Имя + ",";
	КонецЦикла;
	
	УдалитьФайлы(НовоеИмяФайла);
	УдалитьФайлы(ИмяВрФайла);
	
	стрГруппировки = лев(стрГруппировки, СтрДлина(стрГруппировки) - 1);
	ТЗ_Данные.Свернуть(стрГруппировки);
	
	Если Предзаказ Тогда 
		
		Объект.ТаблицаПредзаказа.Очистить();
		Для СчетчикКоличестваСтрок = 1 по ТЗ_Данные.Количество() - 1 Цикл
			
			СтрДанные = ТЗ_Данные[СчетчикКоличестваСтрок];
				
			лАртикул = СтрДанные[СоответствиеКолонок.Получить("Артикул")]; 
			
			Если НЕ ЗначениеЗаполнено(лАртикул) Тогда Продолжить; КонецЕсли;
			
			НайденнаяНоменклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", лАртикул);
			Если ЗначениеЗаполнено(НайденнаяНоменклатура) Тогда
				_нстр = Объект.ТаблицаПредзаказа.Добавить(); 
				_нстр.Артикул = лАртикул;
				_нстр.Номенклатура = НайденнаяНоменклатура;
				_нстр.Пометка = Истина;
			Иначе
				Сообщить("Для артикула: " + лАртикул + " не найдена номенклатура!");
			КонецЕсли;                                       
			
		КонецЦикла; 		
		
	Иначе
	
		НоменклатураЗагрузитьНаСервере(ТЗ_Данные, СоответствиеКолонок);
	КонецЕсли;
	
	Возврат ""; 
	
КонецФункции


&НаКлиенте
Процедура НоменклатураЗагрузить(Команда)
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	Фильтр = НСтр("ru = 'Exel'; en = 'Exel'") + "(*.xlsx)|*.xlsx";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Выберите файл";
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда		
		ПутьКФайлу = ДиалогОткрытияФайла.ПолноеИмяФайла;
		
		Ф = Новый Файл(ПутьКФайлу);
		ДвДанные = Новый ДвоичныеДанные(ПутьКФайлу);
		АдрВремХр = ПоместитьВоВременноеХранилище(ДвДанные);
		Файл = Новый Структура("ИмяФайла,Расширение,АдресВоВремХранилище", ПутьКФайлу, Ф.Расширение, АдрВремХр);
		
		СоответствиеКолонок = Новый Структура;
		ТЗ_Данные = ПрочитатьФайлНаСервере(Файл, СоответствиеКолонок);
		
		  
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура НастройкиСкидокСохранитьНаСервере()
	
	Свойство_МаксимальнаяСкидка = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("B2B_РазмерМаксимальнойСкидки");
	
	запись = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	запись.Объект = Объект.БЦ_Организация;
	запись.Свойство = Объект.Свойство_МаксимальнаяСкидка;
	запись.Значение = Объект.БЦ_РазмерМаксимальнойСкидки;
	запись.Записать();
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();	
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("MAXIMUM_DISCOUNT");
	ЗаписьJSON.ЗаписатьЗначение(Объект.БЦ_РазмерМаксимальнойСкидки);		
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ТекстОтвета = ЗаписьJSON.Закрыть();
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	HTTPЗапрос  = Новый HTTPЗапрос("local/service/SetMaximumDiscount/", ЗаголовокHTTP);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТекстОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	ЗащищенноеСоединение = ИнтеграцияИСПовтИсп.ЗащищенноеСоединение();
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			Объект.АдресСервера,
			,
			Объект.Логин,
			Объект.Пароль,
			,
			60, Объект.ЗащищенноеСоединение);
		
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Сообщить(НСтр("ru='Ошибка отправки информации по максимальной скидке'") + Символы.ПС +
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Возврат;
		
	КонецПопытки;
	
	РезультатОтправкиЗапроса = B2B_ОбщиеПроцедурыИФункции.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(
		HTTPОтвет, ТекстОшибки);
		
	Если РезультатОтправкиЗапроса.ЗапросОтправлен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
						
			Сообщить("Данные успешно отправлены!");
			
		Иначе
			
			Сообщить(ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				НСтр("ru='Отправка данных о максимальной скидке'"),
				РезультатОтправкиЗапроса));
				
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		Сообщить(СтрШаблон(
			НСтр("ru='Данные о максимальной скидке.
				     |Текст ошибки: %1'"),
			РезультатОтправкиЗапроса.ТекстОшибки));
			
		Возврат;
		
	КонецЕсли; КонецПроцедуры

&НаКлиенте
Процедура НастройкиСкидокСохранить(Команда)
	НастройкиСкидокСохранитьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ИзображенияУдалитьНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ИзображенияУдалить(Команда)
	ИзображенияУдалитьНаСервере();
КонецПроцедуры


// Выделяет из полного пути к файлу его имя (набор символов после последней \).
//
// Параметры
//  ПутьКФайлу     – Строка, содержащая имя файла, неважно с именем каталога или без.
//
// Возвращаемое значение:
//   Строка – расширение файла.
//
Функция ПолучитьИмяФайлаИзПолногоПути(Знач ПутьКФайлу) Экспорт
	
	ИмяФайла = ПолучитьЧастьСтрокиОтделеннойСимволом(ПутьКФайлу, "\");
	Возврат ИмяФайла;
	
КонецФункции

// функция возвращает часть строки после последнего встреченного символа в строке
Функция ПолучитьЧастьСтрокиОтделеннойСимволом(Знач ИсходнаяСтрока, Знач СимволПоиска)
	
	ПозицияСимвола = СтрДлина(ИсходнаяСтрока);
	Пока ПозицияСимвола >= 1 Цикл
		
		Если Сред(ИсходнаяСтрока, ПозицияСимвола, 1) = СимволПоиска Тогда
			
			Возврат Сред(ИсходнаяСтрока, ПозицияСимвола + 1); 
			
		КонецЕсли;
		
		ПозицияСимвола = ПозицияСимвола - 1;	
	КонецЦикла;
	
	Возврат "";
	
КонецФункции


&НаСервере
Процедура ЗаписатьИзображениеНаСервере()
	
	
	Если НЕ ЗначениеЗаполнено(Объект.ПутьКФайлуКартинки) Тогда
		Сообщить("Не выбран файл");
		Возврат;
	КонецЕсли;	
	ВыбранноеИзображение = Новый Картинка(Объект.ПутьКФайлуКартинки, Ложь);
	
	ИмяФ = ПолучитьИмяФайлаИзПолногоПути(Объект.ПутьКФайлуКартинки);
	                   
	НовыйОбъект = Справочники.НоменклатураПрисоединенныеФайлы.СоздатьЭлемент();
	НовыйОбъект.Наименование = ИмяФ;
	НовыйОбъект.ТекстХранилище = Новый ХранилищеЗначения(ВыбранноеИзображение, Новый СжатиеДанных);
	НовыйОбъект.ВладелецФайла = Объект.ОсновнаяНоменклатура;
	НовыйОбъект.ПутьКФайлу = ИмяФ;
	НовыйОбъект.Записать();       
	
	ОНом = Объект.ОсновнаяНоменклатура.ПолучитьОбъект();
	ОНом.ФайлКартинки = НовыйОбъект.Ссылка;
	ОНом.ОбменДанными.Загрузка = Истина;
	ОНом.Записать();
	
	Для каждого Строка Из Объект.ТаблицаНоменклатурыК Цикл
		ОНом = Строка.Номенклатура.ПолучитьОбъект();
		ОНом.ФайлКартинки = НовыйОбъект.Ссылка;
		ОНом.ОбменДанными.Загрузка = Истина;
		ОНом.Записать();
	КонецЦикла;
	
	Сообщить("Обработка выполнена");КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИзображение(Команда)   
	
	Если Вопрос("Записать изображение?",РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	ЗаписатьИзображениеНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВыделитьВсеСвойстваНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьВсеСвойства(Команда)
	ВыделитьВсеСвойстваНаСервере();
КонецПроцедуры

&НаСервере
Процедура СнятьВсеСвойстваНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеСвойства(Команда)
	СнятьВсеСвойстваНаСервере();
КонецПроцедуры

&НаСервере
Процедура ТестНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура Тест(Команда)
	ТестНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	НастройкиПодключения = B2B_ОбщиеПроцедурыИФункции.ВосстановитьНастройкиПодключенияПортал(Объект.Портал.Наименование);
	
	Если ТипЗнч(НастройкиПодключения) = Тип("Соответствие") Тогда
		Объект.АдресСервера    = НастройкиПодключения.Получить("АдресСервера");
		Объект.Логин 			= НастройкиПодключения.Получить("Логин");
		Объект.Пароль       	= НастройкиПодключения.Получить("Пароль");
		Объект.ВКИПользователяEmail       	= НастройкиПодключения.Получить("Email");
		Объект.ВКИПользователяТелефон      = НастройкиПодключения.Получить("Телефон");
		
//1БЦ++ 32183
		Объект.БЦ_ЗначениеСвойстваПол = НастройкиПодключения.Получить("БЦ_ЗначениеСвойстваПол");
		Объект.БЦ_ИсключаемоеСвойствоПол = НастройкиПодключения.Получить("БЦ_ИсключаемоеСвойствоПол");
//31929	
		Объект.БЦ_ГлубинаПроверкиЗаказов = НастройкиПодключения.Получить("БЦ_ГлубинаПроверкиЗаказов");
		Объект.БЦ_ПроводитьЗаказыПокупателейПриЗагрузке = НастройкиПодключения.Получить("БЦ_ПроводитьЗаказыПокупателейПриЗагрузке");
//1БЦ--          
		Объект.БЦ_РазмерМаксимальнойСкидки = НастройкиПодключения.Получить("БЦ_РазмерМаксимальнойСкидки");
		Объект.БЦ_Организация = НастройкиПодключения.Получить("БЦ_Организация");
		Объект.БЦ_ТипСкидкиДляОбуви = НастройкиПодключения.Получить("БЦ_ТипСкидкиДляОбуви");
		Объект.БЦ_ТипСкидкиДляАксессуаров = НастройкиПодключения.Получить("БЦ_ТипСкидкиДляАксессуаров");
		Объект.ПланОбмена = НастройкиПодключения.Получить("ПланОбмена");
		Объект.ПользовательскиеГруппы = НастройкиПодключения.Получить("ПользовательскиеГруппы");
		Объект.ЯзыкПеревода = НастройкиПодключения.Получить("ЯзыкПеревода");
	
	КонецЕсли;
	
	СоответствиеСвойств = Новый Соответствие; 
	СоздатьСвойства();   
		
	ВКИПользователяEmail = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("B2B_mail");
	ВКИПользователяТелефон = Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица;
	
//1БЦ++ 32183
	//ОбновитьНадписьРеглЗадания2();
//1БЦ--

КонецПроцедуры 


Процедура СоздатьСвойства() 
	НаборСвойствКонтрагентыРодитель = Справочники.НаборыДополнительныхРеквизитовИСведений.НайтиПоНаименованию("Партнер");  
	НаборСвойствКонтрагенты = Справочники.НаборыДополнительныхРеквизитовИСведений.НайтиПоНаименованию("Общие",,НаборСвойствКонтрагентыРодитель);  	 
	//НаборСвойствКонтрагенты = Справочники.НаборыДополнительныхРеквизитовИСведений.НайтиПоНаименованию("Контрагенты");   
	НаборСвойствЗаказы = УправлениеСвойствами.НаборСвойствПоИмени("Документ_ЗаказКлиента");     
	НаборСвойствКЛ = УправлениеСвойствами.НаборСвойствПоИмени("Справочник_КонтактныеЛицаПартнеров");  
	
	НаборСвойствНоменклатураРодитель = Справочники.НаборыДополнительныхРеквизитовИСведений.НайтиПоНаименованию("Номенклатура");  
	НаборСвойствНоменклатура = Справочники.НаборыДополнительныхРеквизитовИСведений.НайтиПоНаименованию("Общие",,НаборСвойствНоменклатураРодитель);  	 
	
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");
	
	//B2B_КонтрагентВыгружен_Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ЭтаОбработка.ИдентификаторСвойства_B2B_КонтрагентВыгружен());
	//Если Не ЗначениеЗаполнено(B2B_КонтрагентВыгружен_Свойство) Тогда
	//	B2B_КонтрагентВыгружен_Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
	//	B2B_КонтрагентВыгружен_Свойство.Наименование = ЭтаОбработка.ИдентификаторСвойства_B2B_КонтрагентВыгружен();   
	//	B2B_КонтрагентВыгружен_Свойство.Имя = ЭтаОбработка.ИдентификаторСвойства_B2B_КонтрагентВыгружен();    
	//	B2B_КонтрагентВыгружен_Свойство.Заголовок = ЭтаОбработка.ИдентификаторСвойства_B2B_КонтрагентВыгружен();     
	//	B2B_КонтрагентВыгружен_Свойство.ИдентификаторДляФормул = ЭтаОбработка.ИдентификаторСвойства_B2B_КонтрагентВыгружен();
	//	B2B_КонтрагентВыгружен_Свойство.НаборСвойств = НаборСвойствКонтрагенты;
	//	B2B_КонтрагентВыгружен_Свойство.ТипЗначения = Новый ОписаниеТипов("Булево");
	//	B2B_КонтрагентВыгружен_Свойство.ЭтоДополнительноеСведение = Истина;
	//	Попытка
	//		B2B_КонтрагентВыгружен_Свойство.Записать();  
	//		
	//		НаборСвойствКонтрагентыОб = НаборСвойствКонтрагенты.ПолучитьОбъект();
	//		НовСтр = НаборСвойствКонтрагентыОб.ДополнительныеСведения.Добавить();
	//		НовСтр.Свойство = B2B_КонтрагентВыгружен_Свойство.Ссылка;
	//		НаборСвойствКонтрагентыОб.КоличествоСведений = Строка(НаборСвойствКонтрагентыОб.ДополнительныеСведения.Количество());
	//		НаборСвойствКонтрагентыОб.Записать();
	//		
	//	Исключение
	//		Сообщить("Не удалось записать свойство: " + ОписаниеОшибки());	
	//	КонецПопытки;
	//КонецЕсли;            
	
	B2B_КонтрагентВыгружен_Свойство_Wortmann = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",ЭтаОбработка.ИдентификаторСвойства_B2B_КонтрагентВыгружен_Wortmann());
	Если Не ЗначениеЗаполнено(B2B_КонтрагентВыгружен_Свойство_Wortmann) Тогда
		B2B_КонтрагентВыгружен_Свойство_Wortmann = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		B2B_КонтрагентВыгружен_Свойство_Wortmann.Наименование = ЭтаОбработка.ИдентификаторСвойства_B2B_КонтрагентВыгружен_Wortmann();   
		B2B_КонтрагентВыгружен_Свойство_Wortmann.Имя = ЭтаОбработка.ИдентификаторСвойства_B2B_КонтрагентВыгружен_Wortmann();    
		B2B_КонтрагентВыгружен_Свойство_Wortmann.Заголовок = ЭтаОбработка.ИдентификаторСвойства_B2B_КонтрагентВыгружен_Wortmann();     
		B2B_КонтрагентВыгружен_Свойство_Wortmann.ИдентификаторДляФормул = ЭтаОбработка.ИдентификаторСвойства_B2B_КонтрагентВыгружен_Wortmann();
		B2B_КонтрагентВыгружен_Свойство_Wortmann.НаборСвойств = НаборСвойствКонтрагенты;
		B2B_КонтрагентВыгружен_Свойство_Wortmann.ТипЗначения = Новый ОписаниеТипов("Булево");
		B2B_КонтрагентВыгружен_Свойство_Wortmann.ЭтоДополнительноеСведение = Истина;
		Попытка
			B2B_КонтрагентВыгружен_Свойство_Wortmann.Записать();  
			
			НаборСвойствКонтрагентыОб = НаборСвойствКонтрагенты.ПолучитьОбъект();
			НовСтр = НаборСвойствКонтрагентыОб.ДополнительныеСведения.Добавить();
			НовСтр.Свойство = B2B_КонтрагентВыгружен_Свойство_Wortmann.Ссылка;
			НаборСвойствКонтрагентыОб.КоличествоСведений = Строка(НаборСвойствКонтрагентыОб.ДополнительныеСведения.Количество());
			НаборСвойствКонтрагентыОб.Записать();
			
		Исключение
			Сообщить("Не удалось записать свойство: " + ОписаниеОшибки());	
		КонецПопытки;
	КонецЕсли;  
	
	СоответствиеСвойств.Вставить(ЭтаОбработка.ИдентификаторСвойства_B2B_КонтрагентВыгружен_Wortmann(), ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",ЭтаОбработка.ИдентификаторСвойства_B2B_КонтрагентВыгружен_Wortmann()));
	
	//--------------------
	B2B_КонтрагентВыгружен_Свойство_Jana = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",ЭтаОбработка.ИдентификаторСвойства_B2B_КонтрагентВыгружен_Jana());
	Если Не ЗначениеЗаполнено(B2B_КонтрагентВыгружен_Свойство_Jana) Тогда
		B2B_КонтрагентВыгружен_Свойство_Jana = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		B2B_КонтрагентВыгружен_Свойство_Jana.Наименование = ЭтаОбработка.ИдентификаторСвойства_B2B_КонтрагентВыгружен_Jana();   
		B2B_КонтрагентВыгружен_Свойство_Jana.Имя = ЭтаОбработка.ИдентификаторСвойства_B2B_КонтрагентВыгружен_Jana();    
		B2B_КонтрагентВыгружен_Свойство_Jana.Заголовок = ЭтаОбработка.ИдентификаторСвойства_B2B_КонтрагентВыгружен_Jana();     
		B2B_КонтрагентВыгружен_Свойство_Jana.ИдентификаторДляФормул = ЭтаОбработка.ИдентификаторСвойства_B2B_КонтрагентВыгружен_Jana();
		B2B_КонтрагентВыгружен_Свойство_Jana.НаборСвойств = НаборСвойствКонтрагенты;
		B2B_КонтрагентВыгружен_Свойство_Jana.ТипЗначения = Новый ОписаниеТипов("Булево");
		B2B_КонтрагентВыгружен_Свойство_Jana.ЭтоДополнительноеСведение = Истина;
		Попытка
			B2B_КонтрагентВыгружен_Свойство_Jana.Записать();  
			
			НаборСвойствКонтрагентыОб = НаборСвойствКонтрагенты.ПолучитьОбъект();
			НовСтр = НаборСвойствКонтрагентыОб.ДополнительныеСведения.Добавить();
			НовСтр.Свойство = B2B_КонтрагентВыгружен_Свойство_Jana.Ссылка;
			НаборСвойствКонтрагентыОб.КоличествоСведений = Строка(НаборСвойствКонтрагентыОб.ДополнительныеСведения.Количество());
			НаборСвойствКонтрагентыОб.Записать();
			
		Исключение
			Сообщить("Не удалось записать свойство: " + ОписаниеОшибки());	
		КонецПопытки;
	КонецЕсли;  
	
	СоответствиеСвойств.Вставить(ЭтаОбработка.ИдентификаторСвойства_B2B_КонтрагентВыгружен_Jana(), ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",ЭтаОбработка.ИдентификаторСвойства_B2B_КонтрагентВыгружен_Jana()));
	
	//--------------------
	B2B_КонтрагентВыгружен_Свойство_ShoeCom = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",ЭтаОбработка.ИдентификаторСвойства_B2B_КонтрагентВыгружен_ShoeCom());
	Если Не ЗначениеЗаполнено(B2B_КонтрагентВыгружен_Свойство_ShoeCom) Тогда
		B2B_КонтрагентВыгружен_Свойство_ShoeCom = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		B2B_КонтрагентВыгружен_Свойство_ShoeCom.Наименование = ЭтаОбработка.ИдентификаторСвойства_B2B_КонтрагентВыгружен_ShoeCom();   
		B2B_КонтрагентВыгружен_Свойство_ShoeCom.Имя = ЭтаОбработка.ИдентификаторСвойства_B2B_КонтрагентВыгружен_ShoeCom();    
		B2B_КонтрагентВыгружен_Свойство_ShoeCom.Заголовок = ЭтаОбработка.ИдентификаторСвойства_B2B_КонтрагентВыгружен_ShoeCom();     
		B2B_КонтрагентВыгружен_Свойство_ShoeCom.ИдентификаторДляФормул = ЭтаОбработка.ИдентификаторСвойства_B2B_КонтрагентВыгружен_ShoeCom();
		B2B_КонтрагентВыгружен_Свойство_ShoeCom.НаборСвойств = НаборСвойствКонтрагенты;
		B2B_КонтрагентВыгружен_Свойство_ShoeCom.ТипЗначения = Новый ОписаниеТипов("Булево");
		B2B_КонтрагентВыгружен_Свойство_ShoeCom.ЭтоДополнительноеСведение = Истина;
		Попытка
			B2B_КонтрагентВыгружен_Свойство_ShoeCom.Записать();  
			
			НаборСвойствКонтрагентыОб = НаборСвойствКонтрагенты.ПолучитьОбъект();
			НовСтр = НаборСвойствКонтрагентыОб.ДополнительныеСведения.Добавить();
			НовСтр.Свойство = B2B_КонтрагентВыгружен_Свойство_ShoeCom.Ссылка;
			НаборСвойствКонтрагентыОб.КоличествоСведений = Строка(НаборСвойствКонтрагентыОб.ДополнительныеСведения.Количество());
			НаборСвойствКонтрагентыОб.Записать();
			
		Исключение
			Сообщить("Не удалось записать свойство: " + ОписаниеОшибки());	
		КонецПопытки;
	КонецЕсли;  
	
	СоответствиеСвойств.Вставить(ЭтаОбработка.ИдентификаторСвойства_B2B_КонтрагентВыгружен_ShoeCom(), ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",ЭтаОбработка.ИдентификаторСвойства_B2B_КонтрагентВыгружен_ShoeCom()));
	
	//--------------------
	B2B_КонтрагентВыгружен_Свойство_Wendel = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",ЭтаОбработка.ИдентификаторСвойства_B2B_КонтрагентВыгружен_Wendel());
	Если Не ЗначениеЗаполнено(B2B_КонтрагентВыгружен_Свойство_Wendel) Тогда
		B2B_КонтрагентВыгружен_Свойство_Wendel = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		B2B_КонтрагентВыгружен_Свойство_Wendel.Наименование = ЭтаОбработка.ИдентификаторСвойства_B2B_КонтрагентВыгружен_Wendel();   
		B2B_КонтрагентВыгружен_Свойство_Wendel.Имя = ЭтаОбработка.ИдентификаторСвойства_B2B_КонтрагентВыгружен_Wendel();    
		B2B_КонтрагентВыгружен_Свойство_Wendel.Заголовок = ЭтаОбработка.ИдентификаторСвойства_B2B_КонтрагентВыгружен_Wendel();     
		B2B_КонтрагентВыгружен_Свойство_Wendel.ИдентификаторДляФормул = ЭтаОбработка.ИдентификаторСвойства_B2B_КонтрагентВыгружен_Wendel();
		B2B_КонтрагентВыгружен_Свойство_Wendel.НаборСвойств = НаборСвойствКонтрагенты;
		B2B_КонтрагентВыгружен_Свойство_Wendel.ТипЗначения = Новый ОписаниеТипов("Булево");
		B2B_КонтрагентВыгружен_Свойство_Wendel.ЭтоДополнительноеСведение = Истина;
		Попытка
			B2B_КонтрагентВыгружен_Свойство_Wendel.Записать();  
			
			НаборСвойствКонтрагентыОб = НаборСвойствКонтрагенты.ПолучитьОбъект();
			НовСтр = НаборСвойствКонтрагентыОб.ДополнительныеСведения.Добавить();
			НовСтр.Свойство = B2B_КонтрагентВыгружен_Свойство_Wendel.Ссылка;
			НаборСвойствКонтрагентыОб.КоличествоСведений = Строка(НаборСвойствКонтрагентыОб.ДополнительныеСведения.Количество());
			НаборСвойствКонтрагентыОб.Записать();
			
		Исключение
			Сообщить("Не удалось записать свойство: " + ОписаниеОшибки());	
		КонецПопытки;
	КонецЕсли;  
	
	СоответствиеСвойств.Вставить(ЭтаОбработка.ИдентификаторСвойства_B2B_КонтрагентВыгружен_Wendel(), ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",ЭтаОбработка.ИдентификаторСвойства_B2B_КонтрагентВыгружен_Wendel()));
	
	//--------------------
	
	B2B_НомерЗаказа_Свойство  = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",ЭтаОбработка.ИдентификаторСвойства_B2B_НомерЗаказа());
	Если Не ЗначениеЗаполнено(B2B_НомерЗаказа_Свойство) Тогда
		B2B_НомерЗаказа_Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		B2B_НомерЗаказа_Свойство.Наименование = ЭтаОбработка.ИдентификаторСвойства_B2B_НомерЗаказа();
		B2B_НомерЗаказа_Свойство.Имя = ЭтаОбработка.ИдентификаторСвойства_B2B_НомерЗаказа();
		B2B_НомерЗаказа_Свойство.НаборСвойств = НаборСвойствЗаказы;
		B2B_НомерЗаказа_Свойство.ЭтоДополнительноеСведение = Истина;   
		B2B_НомерЗаказа_Свойство.Заголовок = ЭтаОбработка.ИдентификаторСвойства_B2B_НомерЗаказа();     
		B2B_НомерЗаказа_Свойство.ИдентификаторДляФормул = ЭтаОбработка.ИдентификаторСвойства_B2B_НомерЗаказа();
		
		КЧ = Новый КвалификаторыЧисла(10,0);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Число"));
		ТЧ = Новый ОписаниеТипов(Массив,КЧ);
		
		B2B_НомерЗаказа_Свойство.ТипЗначения = ТЧ;
		Попытка
			B2B_НомерЗаказа_Свойство.Записать(); 
			
			НаборСвойствКонтрагентыОб = НаборСвойствЗаказы.ПолучитьОбъект();
			НовСтр = НаборСвойствКонтрагентыОб.ДополнительныеСведения.Добавить();
			НовСтр.Свойство = B2B_НомерЗаказа_Свойство.Ссылка;
			НаборСвойствКонтрагентыОб.КоличествоСведений = Строка(НаборСвойствКонтрагентыОб.ДополнительныеСведения.Количество());
			НаборСвойствКонтрагентыОб.Записать();
			
		Исключение
			Сообщить("Не удалось записать свойство: " + ОписаниеОшибки());	
		КонецПопытки;
	КонецЕсли;	 
	
	СоответствиеСвойств.Вставить(ЭтаОбработка.ИдентификаторСвойства_B2B_НомерЗаказа(), ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",ЭтаОбработка.ИдентификаторСвойства_B2B_НомерЗаказа()));

	//--------------------
	
	B2B_Загружен_Свойство  = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",ЭтаОбработка.ИдентификаторСвойства_B2B_Загружен());
	Если Не ЗначениеЗаполнено(B2B_Загружен_Свойство) Тогда
		B2B_Загружен_Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		B2B_Загружен_Свойство.Наименование = ЭтаОбработка.ИдентификаторСвойства_B2B_Загружен();
		B2B_Загружен_Свойство.ТипЗначения = Новый ОписаниеТипов("Булево"); 
		B2B_Загружен_Свойство.Имя = ЭтаОбработка.ИдентификаторСвойства_B2B_Загружен();
		B2B_Загружен_Свойство.НаборСвойств = НаборСвойствЗаказы;
		B2B_Загружен_Свойство.ЭтоДополнительноеСведение = Истина;    
		B2B_Загружен_Свойство.Заголовок = ЭтаОбработка.ИдентификаторСвойства_B2B_Загружен();     
		B2B_Загружен_Свойство.ИдентификаторДляФормул = ЭтаОбработка.ИдентификаторСвойства_B2B_Загружен();
		
		Попытка
			B2B_Загружен_Свойство.Записать();    
			
			НаборСвойствОб = НаборСвойствЗаказы.ПолучитьОбъект();
			НовСтр = НаборСвойствОб.ДополнительныеСведения.Добавить();
			НовСтр.Свойство = B2B_Загружен_Свойство.Ссылка;
			НаборСвойствОб.КоличествоСведений = Строка(НаборСвойствОб.ДополнительныеСведения.Количество());
			НаборСвойствОб.Записать();
			
		Исключение
			Сообщить("Не удалось записать свойство: " + ОписаниеОшибки());	
		КонецПопытки;
	КонецЕсли;   
	
	СоответствиеСвойств.Вставить(ЭтаОбработка.ИдентификаторСвойства_B2B_Загружен(), ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",ЭтаОбработка.ИдентификаторСвойства_B2B_Загружен()));
	
	B2B_ДатаОтправкиСпец1_Свойство  = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",ЭтаОбработка.ИдентификаторСвойства_B2B_ДатаОтправки_Спец1());
	Если Не ЗначениеЗаполнено(B2B_ДатаОтправкиСпец1_Свойство) Тогда
		B2B_ДатаОтправкиСпец1_Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();  
		B2B_ДатаОтправкиСпец1_Свойство.УстановитьНовыйКод("B2B");
		B2B_ДатаОтправкиСпец1_Свойство.Наименование = ЭтаОбработка.ИдентификаторСвойства_B2B_ДатаОтправки_Спец1();
		B2B_ДатаОтправкиСпец1_Свойство.Имя = ЭтаОбработка.ИдентификаторСвойства_B2B_ДатаОтправки_Спец1();
		B2B_ДатаОтправкиСпец1_Свойство.НаборСвойств = НаборСвойствЗаказы;
		B2B_ДатаОтправкиСпец1_Свойство.ЭтоДополнительноеСведение = Истина;
		B2B_ДатаОтправкиСпец1_Свойство.ТипЗначения = Новый ОписаниеТипов("Дата");   
		B2B_ДатаОтправкиСпец1_Свойство.Заголовок = ЭтаОбработка.ИдентификаторСвойства_B2B_ДатаОтправки_Спец1();     
		B2B_ДатаОтправкиСпец1_Свойство.ИдентификаторДляФормул = ЭтаОбработка.ИдентификаторСвойства_B2B_ДатаОтправки_Спец1();
		
		Попытка
			B2B_ДатаОтправкиСпец1_Свойство.Записать();  
			
			НаборСвойствОб = НаборСвойствЗаказы.ПолучитьОбъект();
			НовСтр = НаборСвойствОб.ДополнительныеСведения.Добавить();
			НовСтр.Свойство = B2B_ДатаОтправкиСпец1_Свойство.Ссылка;
			НаборСвойствОб.КоличествоСведений = Строка(НаборСвойствОб.ДополнительныеСведения.Количество());
			НаборСвойствОб.Записать();
			
		Исключение
			Сообщить("Не удалось записать свойство: " + ОписаниеОшибки());	
		КонецПопытки;
	КонецЕсли;   
	
	СоответствиеСвойств.Вставить(ЭтаОбработка.ИдентификаторСвойства_B2B_ДатаОтправки_Спец1(), ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",ЭтаОбработка.ИдентификаторСвойства_B2B_ДатаОтправки_Спец1()));
	
	B2B_ДатаОтправкиСпец2_Свойство  = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",ЭтаОбработка.ИдентификаторСвойства_B2B_ДатаОтправки_Спец2());
	Если Не ЗначениеЗаполнено(B2B_ДатаОтправкиСпец2_Свойство) Тогда
		B2B_ДатаОтправкиСпец2_Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент(); 
		B2B_ДатаОтправкиСпец2_Свойство.УстановитьНовыйКод("B2B");
		B2B_ДатаОтправкиСпец2_Свойство.Наименование = ЭтаОбработка.ИдентификаторСвойства_B2B_ДатаОтправки_Спец2();
		B2B_ДатаОтправкиСпец2_Свойство.Имя = ЭтаОбработка.ИдентификаторСвойства_B2B_ДатаОтправки_Спец2();
		B2B_ДатаОтправкиСпец2_Свойство.НаборСвойств = НаборСвойствЗаказы;
		B2B_ДатаОтправкиСпец2_Свойство.ЭтоДополнительноеСведение = Истина;
		B2B_ДатаОтправкиСпец2_Свойство.ТипЗначения = Новый ОписаниеТипов("Дата");        
		B2B_ДатаОтправкиСпец2_Свойство.Заголовок = ЭтаОбработка.ИдентификаторСвойства_B2B_ДатаОтправки_Спец2();     
		B2B_ДатаОтправкиСпец2_Свойство.ИдентификаторДляФормул = ЭтаОбработка.ИдентификаторСвойства_B2B_ДатаОтправки_Спец2();
		
		Попытка
			B2B_ДатаОтправкиСпец2_Свойство.Записать();
			
			НаборСвойствОб = НаборСвойствЗаказы.ПолучитьОбъект();
			НовСтр = НаборСвойствОб.ДополнительныеСведения.Добавить();
			НовСтр.Свойство = B2B_ДатаОтправкиСпец2_Свойство.Ссылка;
			НаборСвойствОб.КоличествоСведений = Строка(НаборСвойствОб.ДополнительныеСведения.Количество());
			НаборСвойствОб.Записать();
			
		Исключение
			Сообщить("Не удалось записать свойство: " + ОписаниеОшибки());	
		КонецПопытки;
	КонецЕсли; 
	
	СоответствиеСвойств.Вставить(ЭтаОбработка.ИдентификаторСвойства_B2B_ДатаОтправки_Спец2(), ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",ЭтаОбработка.ИдентификаторСвойства_B2B_ДатаОтправки_Спец2()));
	
	B2B_ДатаОтправкиСчет_Свойство  = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",ЭтаОбработка.ИдентификаторСвойства_B2B_ДатаОтправкиСчет());
	Если Не ЗначениеЗаполнено(B2B_ДатаОтправкиСчет_Свойство) Тогда
		B2B_ДатаОтправкиСчет_Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент(); 
		B2B_ДатаОтправкиСчет_Свойство.УстановитьНовыйКод("B2B");
		B2B_ДатаОтправкиСчет_Свойство.Наименование = ЭтаОбработка.ИдентификаторСвойства_B2B_ДатаОтправкиСчет();
		//B2B_ДатаОтправкиСчет_Свойство.НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы;  
		B2B_ДатаОтправкиСчет_Свойство.Имя = ЭтаОбработка.ИдентификаторСвойства_B2B_ДатаОтправкиСчет();
		B2B_ДатаОтправкиСчет_Свойство.НаборСвойств = НаборСвойствЗаказы;
		B2B_ДатаОтправкиСчет_Свойство.ЭтоДополнительноеСведение = Истина;
		B2B_ДатаОтправкиСчет_Свойство.ТипЗначения = Новый ОписаниеТипов("Дата"); 
		B2B_ДатаОтправкиСчет_Свойство.Заголовок = ЭтаОбработка.ИдентификаторСвойства_B2B_ДатаОтправкиСчет();     
		B2B_ДатаОтправкиСчет_Свойство.ИдентификаторДляФормул = ЭтаОбработка.ИдентификаторСвойства_B2B_ДатаОтправкиСчет();
		
		Попытка
			B2B_ДатаОтправкиСчет_Свойство.Записать(); 
			
			НаборСвойствОб = НаборСвойствЗаказы.ПолучитьОбъект();
			НовСтр = НаборСвойствОб.ДополнительныеСведения.Добавить();
			НовСтр.Свойство = B2B_ДатаОтправкиСчет_Свойство.Ссылка;
			НаборСвойствОб.КоличествоСведений = Строка(НаборСвойствОб.ДополнительныеСведения.Количество());
			НаборСвойствОб.Записать();
			
		Исключение
			Сообщить("Не удалось записать свойство: " + ОписаниеОшибки());	
		КонецПопытки;
	КонецЕсли; 
	
	СоответствиеСвойств.Вставить(ЭтаОбработка.ИдентификаторСвойства_B2B_ДатаОтправкиСчет(), ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",ЭтаОбработка.ИдентификаторСвойства_B2B_ДатаОтправкиСчет()));
	
	B2B_ИдКЛ_Свойство  = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ЭтаОбработка.ИдентификаторСвойства_B2B_ИД_КонтактногоЛица());
	Если Не ЗначениеЗаполнено(B2B_ИдКЛ_Свойство) Тогда
		B2B_ИдКЛ_Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		B2B_ИдКЛ_Свойство.Наименование = ЭтаОбработка.ИдентификаторСвойства_B2B_ИД_КонтактногоЛица();
		//B2B_ИдКЛ_Свойство.НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_КонтактныеЛицаКонтрагентов; 
		B2B_ИдКЛ_Свойство.Имя = ЭтаОбработка.ИдентификаторСвойства_B2B_ИД_КонтактногоЛица();
		B2B_ИдКЛ_Свойство.НаборСвойств = НаборСвойствКЛ;
		B2B_ИдКЛ_Свойство.ЭтоДополнительноеСведение = Истина;
		КС = Новый КвалификаторыСтроки(50);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ТС = Новый ОписаниеТипов(Массив,КС);
		
		B2B_ИдКЛ_Свойство.ТипЗначения = ТС;   
		B2B_ИдКЛ_Свойство.Заголовок = ЭтаОбработка.ИдентификаторСвойства_B2B_ИД_КонтактногоЛица();     
		B2B_ИдКЛ_Свойство.ИдентификаторДляФормул = ЭтаОбработка.ИдентификаторСвойства_B2B_ИД_КонтактногоЛица();
		
		Попытка
			B2B_ИдКЛ_Свойство.Записать();    
			
			НаборСвойствОб = НаборСвойствКЛ.ПолучитьОбъект();
			НовСтр = НаборСвойствОб.ДополнительныеСведения.Добавить();
			НовСтр.Свойство = B2B_ИдКЛ_Свойство.Ссылка;
			НаборСвойствОб.КоличествоСведений = Строка(НаборСвойствОб.ДополнительныеСведения.Количество());
			НаборСвойствОб.Записать();
			
		Исключение
			Сообщить("Не удалось записать свойство: " + ОписаниеОшибки());	
		КонецПопытки;
	КонецЕсли;
	
	СоответствиеСвойств.Вставить(ЭтаОбработка.ИдентификаторСвойства_B2B_ИД_КонтактногоЛица(), ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",ЭтаОбработка.ИдентификаторСвойства_B2B_ИД_КонтактногоЛица()));
	
	B2B_FilterSizeBox_Свойство  = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",ЭтаОбработка.ИдентификаторСвойства_B2B_FilterSizeBox());
	Если Не ЗначениеЗаполнено(B2B_FilterSizeBox_Свойство) Тогда
		B2B_FilterSizeBox_Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		B2B_FilterSizeBox_Свойство.Наименование = ЭтаОбработка.ИдентификаторСвойства_B2B_FilterSizeBox();
		//B2B_FilterSizeBox_Свойство.НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;   
		B2B_FilterSizeBox_Свойство.Имя = ЭтаОбработка.ИдентификаторСвойства_B2B_FilterSizeBox();
		B2B_FilterSizeBox_Свойство.НаборСвойств = НаборСвойствНоменклатура;
		B2B_FilterSizeBox_Свойство.ЭтоДополнительноеСведение = Истина;
		КС = Новый КвалификаторыСтроки(20);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ТС = Новый ОписаниеТипов(Массив,КС);      
		B2B_FilterSizeBox_Свойство.Заголовок = ЭтаОбработка.ИдентификаторСвойства_B2B_FilterSizeBox();     
		B2B_FilterSizeBox_Свойство.ИдентификаторДляФормул = ЭтаОбработка.ИдентификаторСвойства_B2B_FilterSizeBox();
		
		
		B2B_FilterSizeBox_Свойство.ТипЗначения = ТС;
		Попытка
			B2B_FilterSizeBox_Свойство.Записать();  
			
			НаборСвойствОб = НаборСвойствНоменклатура.ПолучитьОбъект();
			НовСтр = НаборСвойствОб.ДополнительныеСведения.Добавить();
			НовСтр.Свойство = B2B_FilterSizeBox_Свойство.Ссылка;
			НаборСвойствОб.КоличествоСведений = Строка(НаборСвойствОб.ДополнительныеСведения.Количество());
			НаборСвойствОб.Записать();
			
		Исключение
			Сообщить("Не удалось записать свойство: " + ОписаниеОшибки());	
		КонецПопытки;
	КонецЕсли;

	СоответствиеСвойств.Вставить(ЭтаОбработка.ИдентификаторСвойства_B2B_FilterSizeBox(), ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",ЭтаОбработка.ИдентификаторСвойства_B2B_FilterSizeBox()));
	
	B2B_Size_Свойство  = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",ЭтаОбработка.ИдентификаторСвойства_B2B_Size());
	Если Не ЗначениеЗаполнено(B2B_Size_Свойство) Тогда
		B2B_Size_Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		B2B_Size_Свойство.Наименование = ЭтаОбработка.ИдентификаторСвойства_B2B_Size();
		//B2B_Size_Свойство.НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;
		B2B_Size_Свойство.Имя = ЭтаОбработка.ИдентификаторСвойства_B2B_Size();
		B2B_Size_Свойство.НаборСвойств = НаборСвойствНоменклатура;
		B2B_Size_Свойство.ЭтоДополнительноеСведение = Истина;
		КС = Новый КвалификаторыСтроки(20);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ТС = Новый ОписаниеТипов(Массив,КС);
		
		B2B_Size_Свойство.ТипЗначения = ТС;     
		B2B_Size_Свойство.Заголовок = ЭтаОбработка.ИдентификаторСвойства_B2B_Size();     
		B2B_Size_Свойство.ИдентификаторДляФормул = ЭтаОбработка.ИдентификаторСвойства_B2B_Size();
		
		
		Попытка
			B2B_Size_Свойство.Записать();
			
			НаборСвойствОб = НаборСвойствНоменклатура.ПолучитьОбъект();
			НовСтр = НаборСвойствОб.ДополнительныеСведения.Добавить();
			НовСтр.Свойство = B2B_Size_Свойство.Ссылка;
			НаборСвойствОб.КоличествоСведений = Строка(НаборСвойствОб.ДополнительныеСведения.Количество());
			НаборСвойствОб.Записать();
			
		Исключение
			Сообщить("Не удалось записать свойство: " + ОписаниеОшибки());	
		КонецПопытки;
	КонецЕсли; 
	
	СоответствиеСвойств.Вставить(ЭтаОбработка.ИдентификаторСвойства_B2B_Size(), ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",ЭтаОбработка.ИдентификаторСвойства_B2B_Size()));
	
	B2B_РазмерныйРяд_Свойство  = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",ЭтаОбработка.ИдентификаторСвойства_B2B_РазмерныйРяд());
	Если Не ЗначениеЗаполнено(B2B_РазмерныйРяд_Свойство) Тогда
		B2B_РазмерныйРяд_Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		B2B_РазмерныйРяд_Свойство.Наименование = ЭтаОбработка.ИдентификаторСвойства_B2B_РазмерныйРяд();
		//B2B_РазмерныйРяд_Свойство.НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;
		B2B_РазмерныйРяд_Свойство.Имя = ЭтаОбработка.ИдентификаторСвойства_B2B_РазмерныйРяд();
		B2B_РазмерныйРяд_Свойство.НаборСвойств = НаборСвойствНоменклатура;
		B2B_РазмерныйРяд_Свойство.ЭтоДополнительноеСведение = Истина;
		B2B_РазмерныйРяд_Свойство.Заголовок = ЭтаОбработка.ИдентификаторСвойства_B2B_РазмерныйРяд();     
		B2B_РазмерныйРяд_Свойство.ИдентификаторДляФормул = ЭтаОбработка.ИдентификаторСвойства_B2B_РазмерныйРяд();
		
		КС = Новый КвалификаторыСтроки(256);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ТС = Новый ОписаниеТипов(Массив,КС);
		
		B2B_РазмерныйРяд_Свойство.ТипЗначения = ТС;
		Попытка
			B2B_РазмерныйРяд_Свойство.Записать();
			
			НаборСвойствОб = НаборСвойствНоменклатура.ПолучитьОбъект();
			НовСтр = НаборСвойствОб.ДополнительныеСведения.Добавить();
			НовСтр.Свойство = B2B_РазмерныйРяд_Свойство.Ссылка;
			НаборСвойствОб.КоличествоСведений = Строка(НаборСвойствОб.ДополнительныеСведения.Количество());
			НаборСвойствОб.Записать();
			
		Исключение
			Сообщить("Не удалось записать свойство: " + ОписаниеОшибки());	
		КонецПопытки;
	КонецЕсли; 
	
	СоответствиеСвойств.Вставить(ЭтаОбработка.ИдентификаторСвойства_B2B_РазмерныйРяд(), ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",ЭтаОбработка.ИдентификаторСвойства_B2B_РазмерныйРяд()));
	
	B2B_Предзаказ_Свойство  = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",ЭтаОбработка.ИдентификаторСвойства_B2B_Предзаказ());
	Если Не ЗначениеЗаполнено(B2B_Предзаказ_Свойство) Тогда
		B2B_Предзаказ_Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		B2B_Предзаказ_Свойство.УстановитьНовыйКод("B2B");
		B2B_Предзаказ_Свойство.Наименование = ЭтаОбработка.ИдентификаторСвойства_B2B_Предзаказ();
		//B2B_Предзаказ_Свойство.НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;   
		B2B_Предзаказ_Свойство.Имя = ЭтаОбработка.ИдентификаторСвойства_B2B_Предзаказ();
		B2B_Предзаказ_Свойство.НаборСвойств = НаборСвойствНоменклатура;
		B2B_Предзаказ_Свойство.ЭтоДополнительноеСведение = Истина;
		B2B_Предзаказ_Свойство.ТипЗначения = Новый ОписаниеТипов("Булево");       
		B2B_Предзаказ_Свойство.Заголовок = ЭтаОбработка.ИдентификаторСвойства_B2B_Предзаказ();     
		B2B_Предзаказ_Свойство.ИдентификаторДляФормул = ЭтаОбработка.ИдентификаторСвойства_B2B_Предзаказ();
		
		Попытка
			B2B_Предзаказ_Свойство.Записать(); 	

			НаборСвойствОб = НаборСвойствНоменклатура.ПолучитьОбъект();
			НовСтр = НаборСвойствОб.ДополнительныеСведения.Добавить();
			НовСтр.Свойство = B2B_Предзаказ_Свойство.Ссылка;
			НаборСвойствОб.КоличествоСведений = Строка(НаборСвойствОб.ДополнительныеСведения.Количество());
			НаборСвойствОб.Записать();
			
		Исключение
			Сообщить("Не удалось записать свойство: " + ОписаниеОшибки());	
		КонецПопытки;
	КонецЕсли;
	
	СоответствиеСвойств.Вставить(ЭтаОбработка.ИдентификаторСвойства_B2B_Предзаказ(), ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",ЭтаОбработка.ИдентификаторСвойства_B2B_Предзаказ()));
	
	B2B_Каталог_Свойство  = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",ЭтаОбработка.ИдентификаторСвойства_B2B_Каталог());
	Если Не ЗначениеЗаполнено(B2B_Каталог_Свойство) Тогда
		B2B_Каталог_Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		B2B_Каталог_Свойство.УстановитьНовыйКод("B2B");
		B2B_Каталог_Свойство.Наименование = ЭтаОбработка.ИдентификаторСвойства_B2B_Каталог();
		//B2B_Каталог_Свойство.НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;
		B2B_Каталог_Свойство.Имя = ЭтаОбработка.ИдентификаторСвойства_B2B_Каталог();
		B2B_Каталог_Свойство.НаборСвойств = НаборСвойствНоменклатура;
		B2B_Каталог_Свойство.ЭтоДополнительноеСведение = Истина;
		B2B_Каталог_Свойство.ТипЗначения = Новый ОписаниеТипов("Булево");  
		B2B_Каталог_Свойство.Заголовок = ЭтаОбработка.ИдентификаторСвойства_B2B_Каталог();     
		B2B_Каталог_Свойство.ИдентификаторДляФормул = ЭтаОбработка.ИдентификаторСвойства_B2B_Каталог();
		
		Попытка
			B2B_Каталог_Свойство.Записать(); 	

			НаборСвойствОб = НаборСвойствНоменклатура.ПолучитьОбъект();
			НовСтр = НаборСвойствОб.ДополнительныеСведения.Добавить();
			НовСтр.Свойство = B2B_Каталог_Свойство.Ссылка;
			НаборСвойствОб.КоличествоСведений = Строка(НаборСвойствОб.ДополнительныеСведения.Количество());
			НаборСвойствОб.Записать();
			
		Исключение
			Сообщить("Не удалось записать свойство: " + ОписаниеОшибки());	
		КонецПопытки;
	КонецЕсли;
	
	СоответствиеСвойств.Вставить(ЭтаОбработка.ИдентификаторСвойства_B2B_Каталог(), B2B_Каталог_Свойство.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуКартинкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=ложь;
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выберите файл";
	Диалог.ПолноеИмяФайла = ""; 
	Фильтр = "JPG (*.jpg)|*.jpg"; 
	Диалог.Фильтр = Фильтр; 
    Диалог.МножественныйВыбор = Ложь;
	Диалог.Каталог = "F:\";
	Если Диалог.Выбрать() Тогда 
		Объект.ПутьКФайлуКартинки = Диалог.ПолноеИмяФайла;
		//Элемент.значение = Диалог.ПолноеИмяФайла;
	КонецЕсли;  
	
КонецПроцедуры

&НаСервере
Процедура СвойстваЗагрузитьИзЭксельНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура СвойстваЗагрузитьИзЭксель(Команда)  
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	Фильтр = НСтр("ru = 'Exel'; en = 'Exel'") + "(*.xlsx)|*.xlsx";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Выберите файл";
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда		
		ПутьКФайлу = ДиалогОткрытияФайла.ПолноеИмяФайла;
		
		Ф = Новый Файл(ПутьКФайлу);
		ДвДанные = Новый ДвоичныеДанные(ПутьКФайлу);
		АдрВремХр = ПоместитьВоВременноеХранилище(ДвДанные);
		Файл = Новый Структура("ИмяФайла,Расширение,АдресВоВремХранилище", ПутьКФайлу, Ф.Расширение, АдрВремХр);
		
		СоответствиеКолонок = Новый Структура;
		ТЗ_Данные = ПрочитатьФайлНаСервере(Файл, СоответствиеКолонок, Истина);
		
		 
		
	КонецЕсли;  

	
	СвойстваЗагрузитьИзЭксельНаСервере();
КонецПроцедуры

&НаСервере
Процедура СвойстваЗаполнитьПоПредзаказуНаСервере()     
	
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");
	
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ЭтаОбработка.ИдентификаторСвойства_B2B_Предзаказ());
	
	Объект.ТаблицаПредзаказа.Загрузить(ЗаполнитьПоСвойству(Свойство));
	ОбновитьТаблицуПредзаказа(Свойство);

КонецПроцедуры   


Функция ЗаполнитьПоСвойству(Свойство, Значение = Истина)    
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ            
	|	ЗначенияСвойствОбъектов.Объект.Артикул КАК Артикул,
	|	ЗначенияСвойствОбъектов.Свойство КАК Свойство,
	|	ЗначенияСвойствОбъектов.Объект КАК Номенклатура
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = &Свойство
	|	И ЗначенияСвойствОбъектов.Значение = &Значение";

	Запрос.УстановитьПараметр("Свойство",  Свойство);    
	Запрос.УстановитьПараметр("Значение",  Значение);
	
	Возврат Запрос.Выполнить().Выгрузить(); 
	
КонецФункции   

Процедура УстановитьПризнакПредзаказа(Значение)
	
КонецПроцедуры

Процедура ОбновитьТаблицуПредзаказа(Свойство)  
	
	Для Каждого Строка из Объект.ТаблицаПредзаказа Цикл  
		Строка.Пометка = B2B_ОбщиеПроцедурыИФункции.ПолучитьЗначениеСвойства(Строка.Номенклатура, Свойство);
	КонецЦикла; 
	
КонецПроцедуры



&НаКлиенте
Процедура СвойстваЗаполнитьПоПредзаказу(Команда)
	СвойстваЗаполнитьПоПредзаказуНаСервере();
КонецПроцедуры

&НаСервере
Процедура СвойстваЗаполнитьПоКаталогуНаСервере()
	
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");
	
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ЭтаОбработка.ИдентификаторСвойства_B2B_Каталог());
	
	Объект.ТаблицаПредзаказа.Загрузить(ЗаполнитьПоСвойству(Свойство, Объект.Портал));
	ОбновитьТаблицуПредзаказа(Свойство);   
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваЗаполнитьПоКаталогу(Команда)
	СвойстваЗаполнитьПоКаталогуНаСервере();
КонецПроцедуры

&НаСервере
Процедура СвойстваУстановитьПризнакКаталогНаСервере()
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");	
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ЭтаОбработка.ИдентификаторСвойства_B2B_Каталог());  
	
	Для Каждого ТекСтрока Из Объект.ТаблицаПредзаказа Цикл 
		СтруктураСвойства = Новый Структура;
		СтруктураСвойства.Вставить("Свойство", Свойство);
		СтруктураСвойства.Вставить("Значение", ТекСтрока.Пометка);
		B2B_ОбщиеПроцедурыИФункции.ЗаписатьЗначениеСвойства(ТекСтрока.Номенклатура, СтруктураСвойства);	
	КонецЦикла;
	                                
	
	ОбновитьТаблицуПредзаказа(Свойство);   
КонецПроцедуры

&НаКлиенте
Процедура СвойстваУстановитьПризнакКаталог(Команда)
	СвойстваУстановитьПризнакКаталогНаСервере();
КонецПроцедуры

&НаСервере
Процедура СвойстваУстановитьПризнакПредзаказНаСервере()
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");	
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ЭтаОбработка.ИдентификаторСвойства_B2B_Предзаказ());  
	
	Для Каждого ТекСтрока Из Объект.ТаблицаПредзаказа Цикл 
		СтруктураСвойства = Новый Структура;
		СтруктураСвойства.Вставить("Свойство", Свойство);
		СтруктураСвойства.Вставить("Значение", ТекСтрока.Пометка);
		B2B_ОбщиеПроцедурыИФункции.ЗаписатьЗначениеСвойства(ТекСтрока.Номенклатура, СтруктураСвойства);	
	КонецЦикла;
	                                
	
	ОбновитьТаблицуПредзаказа(Свойство);    
	

КонецПроцедуры

&НаКлиенте
Процедура СвойстваУстановитьПризнакПредзаказ(Команда)
	СвойстваУстановитьПризнакПредзаказНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПорталПриИзмененииНаСервере()
	
	НастройкиПодключения = B2B_ОбщиеПроцедурыИФункции.ВосстановитьНастройкиПодключенияПортал(Объект.Портал.Наименование);
	
	Если ТипЗнч(НастройкиПодключения) = Тип("Соответствие") Тогда
		Объект.АдресСервера    = НастройкиПодключения.Получить("АдресСервера");
		Объект.Логин 			= НастройкиПодключения.Получить("Логин");
		Объект.Пароль       	= НастройкиПодключения.Получить("Пароль");
		Объект.ВКИПользователяEmail       	= НастройкиПодключения.Получить("Email");
		Объект.ВКИПользователяТелефон      = НастройкиПодключения.Получить("Телефон");
		
//1БЦ++ 32183
		Объект.БЦ_ЗначениеСвойстваПол = НастройкиПодключения.Получить("БЦ_ЗначениеСвойстваПол");
		Объект.БЦ_ИсключаемоеСвойствоПол = НастройкиПодключения.Получить("БЦ_ИсключаемоеСвойствоПол");
//31929	
		Объект.БЦ_ГлубинаПроверкиЗаказов = НастройкиПодключения.Получить("БЦ_ГлубинаПроверкиЗаказов");
		Объект.БЦ_ПроводитьЗаказыПокупателейПриЗагрузке = НастройкиПодключения.Получить("БЦ_ПроводитьЗаказыПокупателейПриЗагрузке");
//1БЦ--          
		Объект.БЦ_РазмерМаксимальнойСкидки = НастройкиПодключения.Получить("БЦ_РазмерМаксимальнойСкидки");
		Объект.БЦ_Организация = НастройкиПодключения.Получить("БЦ_Организация");
		Объект.БЦ_ТипСкидкиДляОбуви = НастройкиПодключения.Получить("БЦ_ТипСкидкиДляОбуви");
		Объект.БЦ_ТипСкидкиДляАксессуаров = НастройкиПодключения.Получить("БЦ_ТипСкидкиДляАксессуаров");
		Объект.ПланОбмена = НастройкиПодключения.Получить("ПланОбмена");
		Объект.ПользовательскиеГруппы = НастройкиПодключения.Получить("ПользовательскиеГруппы");
		Объект.ЯзыкПеревода = НастройкиПодключения.Получить("ЯзыкПеревода");
	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПорталПриИзменении(Элемент)
	ПорталПриИзмененииНаСервере();
КонецПроцедуры


