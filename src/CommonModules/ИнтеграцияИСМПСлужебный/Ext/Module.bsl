
&ИзменениеИКонтроль("ПодготовитьКПередачеУниверсально")
Функция гф_ПодготовитьКПередачеУниверсально(ВходящиеДанные, ПараметрыОбмена)

	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Неопределено);
	ВозвращаемоеЗначение.Вставить("ДоступныеСертификаты",           Неопределено);
	ВозвращаемоеЗначение.Вставить("ТребуетсяПодписание",            Неопределено);
	ВозвращаемоеЗначение.Вставить("КОпределениюВидаУпаковки",       Неопределено);
	ВозвращаемоеЗначение.Вставить("Изменения",                      Новый Массив);
	ВозвращаемоеЗначение.Вставить("ДлительнаяОперация",             Неопределено);
	ВозвращаемоеЗначение.Вставить("Ожидать",                        Неопределено);
	ВозвращаемоеЗначение.Вставить("АдресВоВременномХранилище",      Неопределено);
	ВозвращаемоеЗначение.Вставить(
	"ИзвлекатьДанныеЛогаЗапросов",
	ИнтеграцияИСМПКлиентСерверПовтИсп.ЭтоФоновоеЗаданиеНаСервере());

	// Собрать JSON для передаваемых документов
	// Требуется подписание документа на клиенте? Если да, то документы требуется вернуть на клиент.
	// Нужен ли запрос авторизации? Если да, то документы нужно положить в очередь и вернуться на клиент для авторизации
	// После всего - выполнить передачу и дождаться результата - изменений.
	СообщенияJSON = Новый Массив;
	Для Каждого ПараметрыОбработкиДокумента Из ВходящиеДанные Цикл

		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрыОбмена", ПараметрыОбмена);
		ДополнительныеПараметры.Вставить("ПараметрыОбработкиДокумента", ПараметрыОбработкиДокумента);

		Если ПараметрыОбработкиДокумента.ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.СогласиеОПредоставлениеИнформации Тогда

			СообщенияДокументаJSON = СообщениеКПередачеJSONСогласиеОПредоставлениеИнформации(
			ПараметрыОбработкиДокумента,
			ДополнительныеПараметры);

		Иначе

			СообщенияДокументаJSON = СообщениеКПередачеJSON(
			ПараметрыОбработкиДокумента.Ссылка,
			ПараметрыОбработкиДокумента.ДальнейшееДействие,
			ДополнительныеПараметры);

		КонецЕсли;

		Для Каждого СообщениеJSON Из СообщенияДокументаJSON Цикл
			СообщенияJSON.Добавить(СообщениеJSON);
		КонецЦикла;

	КонецЦикла;

	СертификатыДляПодписанияНаСервере = ИнтерфейсАвторизацииИСМПСлужебный.СертификатыДляПодписанияНаСервере();
	ПодписанныеСообщенияПоОрганизациям = СообщенияКПередаче(СообщенияJSON, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);

	ПроверитьКлючиСессии(ПодписанныеСообщенияПоОрганизациям, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);

	// Добавить подписанные сообщения в очередь сообщений
	ПодготовитьПодписанныеСообщенияКПередаче(
	ПодписанныеСообщенияПоОрганизациям,
	ПараметрыОбмена);

	ДатаСледующейИтерации = ОбработатьОчередьСообщений(ПараметрыОбмена);

	ЕстьОшибки = Ложь;
	Если ПараметрыОбмена.УникальныйИдентификатор <> Неопределено Тогда
		Для Каждого ИзмененияЭлементДанных Из ПараметрыОбмена.Изменения Цикл
			Если ЗначениеЗаполнено(ИзмененияЭлементДанных.ТекстОшибки) Тогда
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ТребуетсяОжидание = ДатаСледующейИтерации <> Неопределено
	Или (Не ЕстьОшибки И ПараметрыОбмена.ОчередьСообщений.Количество() > 0);

	ТребуетсяПодписание = (ПараметрыОбмена.СообщенияКПодписанию <> Неопределено
	И ПараметрыОбмена.СообщенияКПодписанию.Количество())
	Или (ПараметрыОбмена.КОбновлениюКлючейСессии <> Неопределено
	И ПараметрыОбмена.КОбновлениюКлючейСессии.Количество());

	ТребуетсяОпределениеВидаУпаковки = ПараметрыОбмена.КОпределениюВидаУпаковки <> Неопределено;

	ДоступныеСертификаты          = Неопределено;
	АдресКОпределениюВидаУпаковки = "";

	Если ТребуетсяОпределениеВидаУпаковки Тогда

		СообщенияКОпределениюВидаУпаковок = СообщенияКОпределениюВидаУпаковок(ПараметрыОбмена);

		ПроверитьКлючиСессии(
		СообщенияКОпределениюВидаУпаковок,
		СертификатыДляПодписанияНаСервере, ПараметрыОбмена);

		ДоступныеСертификаты(СообщенияКОпределениюВидаУпаковок, ДоступныеСертификаты);

		АдресКОпределениюВидаУпаковки = ШтрихкодированиеИСМПСлужебный.ДанныеКОпределениюВидаУпаковки(ПараметрыОбмена);

		Если Не ЗначениеЗаполнено(АдресКОпределениюВидаУпаковки) Тогда
			ТребуетсяОпределениеВидаУпаковки = Ложь;
			ПараметрыОбмена.КОпределениюВидаУпаковки = Неопределено;
		КонецЕсли;

	КонецЕсли;

	Если ТребуетсяОжидание И Не ТребуетсяПодписание И Не ТребуетсяОпределениеВидаУпаковки Тогда

		Если ДатаСледующейИтерации <> Неопределено Тогда
			ВремяОжидания = Окр(ДатаСледующейИтерации - ТекущаяДатаСеанса(), 0, РежимОкругления.Окр15как20);
		Иначе
			ВремяОжидания = 0;
		КонецЕсли;

		Если ПараметрыОбмена.ОжидатьНаСервере Тогда
			ИнтеграцияИС.Ожидать(ВремяОжидания, ПараметрыОбмена);
			Возврат ПродолжитьВыполнениеОбменаУниверсально(
			Неопределено,
			ПараметрыОбмена);
		ИначеЕсли Не ПараметрыОбмена.ОжидатьНаКлиенте Тогда
			Возврат ПродолжитьВыполнениеОбменаУниверсально(
			Неопределено,
			ПараметрыОбмена);
		КонецЕсли;

	КонецЕсли;

	Если (ТребуетсяОжидание Или ТребуетсяПодписание Или ТребуетсяОпределениеВидаУпаковки)
		И ПараметрыОбмена.АдресВоВременномХранилище <> Неопределено Тогда

		Если ТребуетсяПодписание Тогда

			ПроверитьКлючиСессии(
			ПараметрыОбмена.СообщенияКПодписанию,
			СертификатыДляПодписанияНаСервере, ПараметрыОбмена);

			ДоступныеСертификаты(ПараметрыОбмена.СообщенияКПодписанию,    ДоступныеСертификаты);
			ДоступныеСертификаты(ПараметрыОбмена.КОбновлениюКлючейСессии, ДоступныеСертификаты);

		КонецЕсли;

		ВозвращаемоеЗначение.ДоступныеСертификаты           = ДоступныеСертификаты;
		ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = ПараметрыОбмена.КОбновлениюКлючейСессии;
		ВозвращаемоеЗначение.ТребуетсяПодписание            = ПараметрыОбмена.СообщенияКПодписанию;
		ВозвращаемоеЗначение.КОпределениюВидаУпаковки       = АдресКОпределениюВидаУпаковки;

		// Параметры не сериализуются => не могут быть размещены во временном хранилище.
		ПараметрыОбмена.ФоновоеЗадание          = Неопределено;
		ПараметрыОбмена.КОбновлениюКлючейСессии = Неопределено;
		ПараметрыОбмена.СообщенияКПодписанию    = Неопределено;

		Для Каждого НастройкаОбменаСУЗ Из ПараметрыОбмена.НастройкиОбменаСУЗ.ОбменНаСервере Цикл
			Для Каждого НастройкаПоОрганизации Из НастройкаОбменаСУЗ.Значение Цикл
				НастройкаПоОрганизации.ФоновоеЗадание = Неопределено;
			КонецЦикла;
		КонецЦикла;

		ЗаписатьЛогЗапросовВПараметрыОбмена(ПараметрыОбмена);

		ВозвращаемоеЗначение.Ожидать                   = ИнтеграцияИС.ВремяОжидания(ВремяОжидания);
		ВозвращаемоеЗначение.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПараметрыОбмена, ПараметрыОбмена.АдресВоВременномХранилище);

	Иначе

		Если ЗначениеЗаполнено(ПараметрыОбмена.АдресВоВременномХранилище) Тогда
			УдалитьИзВременногоХранилища(ПараметрыОбмена.АдресВоВременномХранилище);
		КонецЕсли;

		ВозвращаемоеЗначение.Изменения = ПараметрыОбмена.Изменения;
		#Вставка
		ВозвращаемоеЗначение.Вставить("ПараметрыОбмена", ПараметрыОбмена);
		#КонецВставки

	КонецЕсли;

	Возврат ВозвращаемоеЗначение;

КонецФункции

Функция гф_ПроверитьЗаполнениеШтрихкодовУпаковок(Объект) Экспорт
	
	ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(Объект, Неопределено, Объект.ВидПродукции); 
	
	СписокУпаковок = Объект.ШтрихкодыУпаковок.ВыгрузитьКолонку("ШтрихкодУпаковки");
	
	ЭтоМаркировкаМолочнойПродукции = ТипЗнч(Объект) = Тип("ДокументОбъект.МаркировкаТоваровИСМП")
		И ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(Объект.ВидПродукции);

	Если ЭтоМаркировкаМолочнойПродукции Тогда
		УпаковкиБезУточнения = Объект.ШтрихкодыУпаковок.НайтиСтроки(
			Новый Структура("СрокГодности,ИдентификаторПроисхожденияВЕТИС",
				Дата(1,1,1), ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ИдентификаторПроисхожденияВЕТИС")));
		Если УпаковкиБезУточнения.Количество()<>СписокУпаковок.Количество() Тогда
			СписокУпаковок = Новый Массив;
			Для Каждого СтрокаТабличнойЧасти Из Объект.ШтрихкодыУпаковок Цикл
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СрокГодности)
						Или ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИдентификаторПроисхожденияВЕТИС) Тогда
					СписокУпаковок.Добавить(СтрокаТабличнойЧасти.ШтрихкодУпаковки);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	РезультатПроверки = ТаблицаТоварыСоответствуетСпискуУпаковокМаркируемойПродукции(Объект.Товары, СписокУпаковок, ПараметрыСканирования); 
	
	Возврат РезультатПроверки;
КонецФункции

