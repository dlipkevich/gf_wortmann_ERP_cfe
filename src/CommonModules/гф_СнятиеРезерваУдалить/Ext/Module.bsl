
////////////////////////////////////////////////////////////////////////////////
// Функции и процедуры обеспечения формирования документов по снятию резерва.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// #wortmann {
// #Автоматическое формирование документов
// описание вставки
// Галфинд Volkov 2022/08/23
//
// Осуществляет заполненнение данных документа.
//
// Параметры:
//   Источник - ДокументОбъект - Обрабатываемый объект.
//   Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//   РежимПроведения - - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура гф_РасходныйОрдерНаТоварыПроведение(Источник, Отказ, РежимПроведения) Экспорт
	
	Если Источник.СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаПоПеремещению
		И Источник.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник.Получатель, "гф_АгентскийСклад")
		И Источник.Получатель.гф_АгентскийСклад Тогда
		
		ДанныеДокументаРасходныйОрдер = ПолучитьДокументРасходныйОрдерНаТовары(Источник.Ссылка);
		
		ДанныеДокументаРасходныйОрдер.Колонки.Добавить("Номер");
		ДанныеДокументаРасходныйОрдер.Колонки.Добавить("ОтметкаОбработки");
		ДанныеДокументаРасходныйОрдер.Колонки.Добавить("ОтметкаОбработкиКорректировка");
		Номер = 0;
		Для каждого Строка Из ДанныеДокументаРасходныйОрдер Цикл
		   Строка.ОтметкаОбработки = Ложь;
		   Строка.ОтметкаОбработкиКорректировка = Ложь;
		КонецЦикла;
		
		ТоварыПоРаспоряжениям = Новый ТаблицаЗначений;
		ТоварыПоРаспоряжениям = ДанныеДокументаРасходныйОрдер.Скопировать();
		
		ТоварыПоРаспоряжениямКорректировка = Новый ТаблицаЗначений;
		ТоварыПоРаспоряжениямКорректировка = ДанныеДокументаРасходныйОрдер.Скопировать();
		
		Для Каждого Строка Из ДанныеДокументаРасходныйОрдер Цикл
			
			// ПеремещениеТоваров
			Если Строка.ОтметкаОбработки = Ложь Тогда
				
				//ДокументОснование = ПолучитьДокументОснованиеПеремещение(Источник.Ссылка, Строка.Распоряжение);
				ДокументОснование = ПолучитьДокументОснованиеЗаказКлиента(Источник.Ссылка, Строка.Распоряжение);
				
				КодСтроки = 1;
				
				Если ДокументОснование = Неопределено Тогда
					ДокументПеремещениеТоваров = Документы.ПеремещениеТоваров.СоздатьДокумент();
				Иначе	
					ДокументПеремещениеТоваров = ДокументОснование.ПолучитьОбъект();
				КонецЕсли;	
				
				ДокументПеремещениеТоваров.Дата 					= Источник.Дата;
				ДокументПеремещениеТоваров.Организация 				= Строка.Распоряжение.Организация;
				ДокументПеремещениеТоваров.СкладОтправитель 		= Источник.Склад;
				ДокументПеремещениеТоваров.СкладПолучатель 			= Источник.Получатель;
				// Так как заказ клиента то нет никакого заказа на перемещение
				//ДокументПеремещениеТоваров.ЗаказНаПеремещение 		= Строка.Распоряжение;
				ДокументПеремещениеТоваров.гф_ЗаказКлиента 			= Строка.Распоряжение;
				//ДокументПеремещениеТоваров.ПеремещениеПоЗаказам 	= Истина;
				ДокументПеремещениеТоваров.ПеремещениеПоЗаказам 	= Ложь;
				ДокументПеремещениеТоваров.ДокументОснование 		= Источник.Ссылка;
				ДокументПеремещениеТоваров.Ответственный 			= Источник.Ответственный;
				ДокументПеремещениеТоваров.Автор 					= Источник.Ответственный;
				ДокументПеремещениеТоваров.Статус 					= Перечисления.СтатусыПеремещенийТоваров.Принято;
				ДокументПеремещениеТоваров.ХозяйственнаяОперация 	= Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
				ДокументПеремещениеТоваров.СпособДоставки 			= Перечисления.СпособыДоставки.Самовывоз;
				ДокументПеремещениеТоваров.ВариантПриемкиТоваров 	= Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным;
				
				НайденнаяСтрока = ТоварыПоРаспоряжениям.Найти(Строка.НомерСтроки, "НомерСтроки");
				Если НайденнаяСтрока <> Неопределено Тогда
					НайденнаяСтрока.ОтметкаОбработки = Истина;
					ТоварыПоРаспоряжениям.Удалить(ТоварыПоРаспоряжениям.Индекс(НайденнаяСтрока));
				КонецЕсли;
				
				ДокументПеремещениеТоваров.Товары.Очистить();
				НоваяСтрока = ДокументПеремещениеТоваров.Товары.Добавить();
				НоваяСтрока.Номенклатура 			= Строка.Номенклатура;
				НоваяСтрока.Характеристика 			= Строка.Характеристика;
				НоваяСтрока.Серия 					= Строка.Серия;
				НоваяСтрока.Назначение 				= Строка.Назначение;
				НоваяСтрока.Количество 				= Строка.Количество;
				НоваяСтрока.КоличествоУпаковок 		= Строка.Количество;
				НоваяСтрока.КодСтроки 				= КодСтроки;
				НоваяСтрока.НазначениеОтправителя 	= Строка.Назначение;
				
				АналитикаУчетаНоменклатуры = ПолучитьАналитикаУчетаНоменклатуры(Строка.Номенклатура, Строка.Характеристика,
					Строка.Серия, Строка.Назначение, Источник.Склад);
					
				НоваяСтрока.АналитикаУчетаНоменклатуры 	= АналитикаУчетаНоменклатуры;
				
				Для каждого Строка2 Из ТоварыПоРаспоряжениям Цикл
					
					Если Строка2.ОтметкаОбработки = Ложь И Строка.Распоряжение = Строка2.Распоряжение и Не Строка.НомерСтроки = Строка2.НомерСтроки Тогда
						НоваяСтрока = ДокументПеремещениеТоваров.Товары.Добавить();
						НоваяСтрока.Номенклатура 			= Строка2.Номенклатура;
						НоваяСтрока.Характеристика 			= Строка2.Характеристика;
						НоваяСтрока.Серия 					= Строка2.Серия;
						НоваяСтрока.Назначение 				= Строка2.Назначение;
						НоваяСтрока.Количество 				= Строка2.Количество;
						НоваяСтрока.КоличествоУпаковок 		= Строка2.Количество;
						НоваяСтрока.КодСтроки 				= КодСтроки + 1;
						НоваяСтрока.НазначениеОтправителя 	= Строка.Назначение;
						
						АналитикаУчетаНоменклатуры = ПолучитьАналитикаУчетаНоменклатуры(Строка.Номенклатура, Строка.Характеристика,
							Строка.Серия, Строка.Назначение, Источник.Склад);
							
						НоваяСтрока.АналитикаУчетаНоменклатуры 	= АналитикаУчетаНоменклатуры;
						
						Строка2.ОтметкаОбработки = Истина;
						
						НайденнаяСтрока = ДанныеДокументаРасходныйОрдер.Найти(Строка2.НомерСтроки, "НомерСтроки");
						Если НайденнаяСтрока <> Неопределено Тогда
							НайденнаяСтрока.ОтметкаОбработки = Истина;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Строка.ОтметкаОбработки = Истина;
				ДокументПеремещениеТоваров.ДополнительныеСвойства.Вставить("ДокументОснование", Истина);
				ДокументПеремещениеТоваров.Записать(РежимЗаписиДокумента.Проведение);
				//ДокументПеремещениеТоваров.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
			// КорректировкаНазначенияТоваров
			
			Если Строка.ОтметкаОбработкиКорректировка = Ложь Тогда
				
				ДокументОснованиеКорректировка = ПолучитьДокументОснованиеКорректировка(Источник.Ссылка, Строка.Назначение);
				
				Если ДокументОснованиеКорректировка = Неопределено Тогда
					ДокументКорректировка = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
				Иначе	
					ДокументКорректировка = ДокументОснованиеКорректировка.ПолучитьОбъект();
				КонецЕсли;	
				
				ДокументКорректировка.Дата 					= Источник.Дата;
				ДокументКорректировка.Организация 			= Строка.Распоряжение.Организация;
				ДокументКорректировка.ВидОперации 			= Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв;
				ДокументКорректировка.ДокументОснование 	= Источник.Ссылка;
				ДокументКорректировка.Ответственный 		= Источник.Ответственный;
				ДокументКорректировка.Автор 				= Источник.Ответственный;
				ДокументКорректировка.Назначение 			= Строка.Назначение;
				
				НайденнаяСтрока = ТоварыПоРаспоряжениямКорректировка.Найти(Строка.НомерСтроки, "НомерСтроки");
				Если НайденнаяСтрока <> Неопределено Тогда
					НайденнаяСтрока.ОтметкаОбработкиКорректировка = Истина;
					ТоварыПоРаспоряжениямКорректировка.Удалить(ТоварыПоРаспоряжениямКорректировка.Индекс(НайденнаяСтрока));
				КонецЕсли;
				
				ДокументКорректировка.Товары.Очистить();
				НоваяСтрока = ДокументКорректировка.Товары.Добавить();
				НоваяСтрока.Номенклатура 			= Строка.Номенклатура;
				НоваяСтрока.Характеристика 			= Строка.Характеристика;
				НоваяСтрока.Серия 					= Строка.Серия;
				НоваяСтрока.Количество 				= Строка.Количество;
				НоваяСтрока.КоличествоУпаковок 		= Строка.Количество;
				НоваяСтрока.Склад 					= Источник.Получатель;
				НоваяСтрока.ИсходноеНазначение 		= Строка.Назначение;
				
				Для каждого Строка2 Из ТоварыПоРаспоряжениямКорректировка Цикл
					
					Если Строка2.ОтметкаОбработкиКорректировка = Ложь И Строка.Назначение = Строка2.Назначение и Не Строка.НомерСтроки = Строка2.НомерСтроки Тогда
						НоваяСтрока = ДокументКорректировка.Товары.Добавить();
						НоваяСтрока.Номенклатура 			= Строка2.Номенклатура;
						НоваяСтрока.Характеристика 			= Строка2.Характеристика;
						НоваяСтрока.Серия 					= Строка2.Серия;
						НоваяСтрока.Количество 				= Строка2.Количество;
						НоваяСтрока.КоличествоУпаковок 		= Строка2.Количество;
						НоваяСтрока.Склад 					= Источник.Получатель;
						НоваяСтрока.ИсходноеНазначение 		= Строка.Назначение;
						
						Строка2.ОтметкаОбработкиКорректировка = Истина;
						
						НайденнаяСтрока = ДанныеДокументаРасходныйОрдер.Найти(Строка2.НомерСтроки, "НомерСтроки");
						Если НайденнаяСтрока <> Неопределено Тогда
							НайденнаяСтрока.ОтметкаОбработкиКорректировка = Истина;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Строка.ОтметкаОбработкиКорректировка = Истина;
				ДокументКорректировка.ДополнительныеСвойства.Вставить("ДокументОснование", Истина);
				ДокументКорректировка.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			
		КонецЦикла;
				
	КонецЕсли;
	
КонецПроцедуры

// Осуществляет заполненнение данных документа.
//
// Параметры:
//   Источник - ДокументОбъект - Обрабатываемый объект.
//   Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//   РежимЗаписи - РежимЗаписиДокумента - В параметр передается текущий режим записи документа.
//					Позволяет определить в теле процедуры режим записи.
//   РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура гф_РасходныйОрдерНаТоварыПередЗаписьюПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		ВыборкаДетальныеЗаписи = ПолучитьДанныеПоДокументуКорректировкаНазначенияТоваров(Источник.Ссылка);
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Документ = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			
			Если Источник.ПометкаУдаления Тогда
				Документ.ДополнительныеСвойства.Вставить("ДокументОснование", Истина);
				Документ.УстановитьПометкуУдаления(Истина);
			Иначе
				Документ.ДополнительныеСвойства.Вставить("ДокументОснование", Истина);
				Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
				
		КонецЦикла;
		
		ВыборкаДетальныеЗаписи = ПолучитьДанныеПоДокументуПеремещениеТоваров(Источник.Ссылка);
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Документ = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			
			Если Источник.ПометкаУдаления Тогда
				Документ.ДополнительныеСвойства.Вставить("ДокументОснование", Истина);
				Документ.УстановитьПометкуУдаления(Истина);
			Иначе
				Документ.ДополнительныеСвойства.Вставить("ДокументОснование", Истина);
				Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Запись И Источник.ПометкаУдаления Тогда
		
		ВыборкаДетальныеЗаписи = ПолучитьДанныеПоДокументуКорректировкаНазначенияТоваров(Источник.Ссылка);
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Документ = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			Документ.ДополнительныеСвойства.Вставить("ДокументОснование", Истина);
			Документ.УстановитьПометкуУдаления(Истина);
			
		КонецЦикла;
		
		ВыборкаДетальныеЗаписи = ПолучитьДанныеПоДокументуПеремещениеТоваров(Источник.Ссылка);
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Документ = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			Документ.ДополнительныеСвойства.Вставить("ДокументОснование", Истина);
			Документ.УстановитьПометкуУдаления(Истина);
			
		КонецЦикла;
		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Запись И НЕ Источник.ПометкаУдаления Тогда
		
		ВыборкаДетальныеЗаписи = ПолучитьДанныеПоДокументуКорректировкаНазначенияТоваров(Источник.Ссылка);
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Документ = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			Документ.ДополнительныеСвойства.Вставить("ДокументОснование", Истина);
			Документ.УстановитьПометкуУдаления(Ложь);
			
		КонецЦикла;
		
		ВыборкаДетальныеЗаписи = ПолучитьДанныеПоДокументуПеремещениеТоваров(Источник.Ссылка);
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Документ = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			Документ.ДополнительныеСвойства.Вставить("ДокументОснование", Истина);
			Документ.УстановитьПометкуУдаления(Ложь);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьДокументРасходныйОрдерНаТовары(Источник)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка КАК Ссылка,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.НомерСтроки КАК НомерСтроки,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Номенклатура КАК Номенклатура,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Характеристика КАК Характеристика,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Назначение КАК Назначение,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Серия КАК Серия,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение КАК Распоряжение,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Количество КАК Количество
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
	|ГДЕ
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.НомерСтроки,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Номенклатура,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Характеристика,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Назначение,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Серия,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.СтатусУказанияСерий,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Количество";
	
	Запрос.УстановитьПараметр("Ссылка", Источник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеДокументаРасходныйОрдерНаТовары = РезультатЗапроса.Выгрузить();
	
	Возврат ДанныеДокументаРасходныйОрдерНаТовары;
	
КонецФункции

Функция ПолучитьДанныеПоДокументуКорректировкаНазначенияТоваров(Источник)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаНазначенияТоваров.Ссылка КАК Ссылка,
	|	КорректировкаНазначенияТоваров.ДокументОснование КАК ДокументОснование,
	|	КорректировкаНазначенияТоваров.Назначение КАК Назначение
	|ИЗ
	|	Документ.КорректировкаНазначенияТоваров КАК КорректировкаНазначенияТоваров
	|ГДЕ
	|	КорректировкаНазначенияТоваров.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", Источник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи;
	
КонецФункции

Функция ПолучитьДанныеПоДокументуПеремещениеТоваров(Источник)
Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПеремещениеТоваров.ЗаказНаПеремещение КАК ЗаказНаПеремещение,
		|	ПеремещениеТоваров.ДокументОснование КАК ДокументОснование,
		|	ПеремещениеТоваров.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		|ГДЕ
		|	ПеремещениеТоваров.ДокументОснование = &ДокументОснование";
		
		Запрос.УстановитьПараметр("ДокументОснование", Источник);
			
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
Возврат ВыборкаДетальныеЗаписи;
	
КонецФункции

Функция ПолучитьДокументОснованиеПеремещение(Источник, Распоряжение)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПеремещениеТоваров.ЗаказНаПеремещение КАК ЗаказНаПеремещение,
	|	ПеремещениеТоваров.ДокументОснование КАК ДокументОснование,
	|	ПеремещениеТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.ЗаказНаПеремещение = &ЗаказНаПеремещение
	|	И ПеремещениеТоваров.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", Источник);
	Запрос.УстановитьПараметр("ЗаказНаПеремещение", Распоряжение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьДокументОснованиеКорректировка(Источник, Назначение)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КорректировкаНазначенияТоваров.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.КорректировкаНазначенияТоваров КАК КорректировкаНазначенияТоваров
		|ГДЕ
		|	КорректировкаНазначенияТоваров.ДокументОснование = &ДокументОснование
		|	И КорректировкаНазначенияТоваров.Назначение = &Назначение";
	
	Запрос.УстановитьПараметр("ДокументОснование", Источник);
	Запрос.УстановитьПараметр("Назначение", Назначение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьАналитикаУчетаНоменклатуры(Номенклатура, Характеристика, Серия, Назначение, Склад)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлючиАналитикиУчетаНоменклатуры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КлючиАналитикиУчетаНоменклатуры КАК КлючиАналитикиУчетаНоменклатуры
		|ГДЕ
		|	КлючиАналитикиУчетаНоменклатуры.Номенклатура = &Номенклатура
		|	И КлючиАналитикиУчетаНоменклатуры.Характеристика = &Характеристика
		|	И КлючиАналитикиУчетаНоменклатуры.Серия = &Серия
		|	И КлючиАналитикиУчетаНоменклатуры.МестоХранения = &Склад
		|	И КлючиАналитикиУчетаНоменклатуры.Назначение = &Назначение";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("Серия", Серия);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Назначение", Назначение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьДокументОснованиеЗаказКлиента(Источник, Распоряжение)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПеремещениеТоваров.ЗаказНаПеремещение КАК ЗаказНаПеремещение,
	|	ПеремещениеТоваров.ДокументОснование КАК ДокументОснование,
	|	ПеремещениеТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.гф_ЗаказКлиента = &ЗаказКлиента
	|	И ПеремещениеТоваров.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", Источник);
	Запрос.УстановитьПараметр("ЗаказКлиента", Распоряжение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти
