#Область ПрограммныйИнтерфейс

#Область Трекер

// Возвращает массив записей отслеживания почтовых отправлений
//
// Параметры:
// 	УчетнаяЗапись		- СправочникСсылка
// 	ПочтовоеОтправление	- СправочникСсылка
// 	Ошибки				- Массив - Массив строк ошибок
//
//  Возвращаемое значение:
//	- Массив, Неопределено - Данные отслеживания
//
Функция ПолучитьДанныеОтслеживания(УчетнаяЗапись, ПочтовоеОтправление, Ошибки = Неопределено) Экспорт
	
	Если Ошибки = Неопределено Тогда
		
		Ошибки = Новый Массив;
		
	КонецЕсли;
	
	Если ПочтовоеОтправление.ДоставкаЗавершена И Не ПочтовоеОтправление.Отслеживать Тогда
		
		ИсторияОтслеживания = ПолучитьИсториюОтслеживания(ПочтовоеОтправление);
		
		Возврат ИсторияОтслеживания;
		
	КонецЕсли;
	
	Логин = УчетнаяЗапись.Логин;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(УчетнаяЗапись, "Пароль");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ОтветОтСервераХДТО = ПолучитьДанныеОтслеживанияСлужебный(Логин, Пароль, ПочтовоеОтправление.ТрекНомер, Ошибки);
	
	Если Ошибки.Количество() Тогда
		
		ЗаписатьОшибкиВПочтовоеОтправление(Ошибки, ПочтовоеОтправление);
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ОтветОтСервера = ДанныеОтслеживанияВМассивСтруктур(ОтветОтСервераХДТО);
	
	ЗаписатьИсториюОтслеживания(ПочтовоеОтправление, ОтветОтСервера, Ошибки);
	
	Если Ошибки.Количество() Тогда
		
		ЗаписатьОшибкиВПочтовоеОтправление(Ошибки, ПочтовоеОтправление);
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат ОтветОтСервера;
	
КонецФункции

// Запрос данных отслеживания по регламенту
Процедура ОбновитьДанныеОтслеживаемыхОтправлений() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	гф_ПочтаРоссииПочтовыеОтправления.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.гф_ПочтаРоссииПочтовыеОтправления КАК гф_ПочтаРоссииПочтовыеОтправления
	|ГДЕ
	|	гф_ПочтаРоссииПочтовыеОтправления.Отслеживать
	|	И гф_ПочтаРоссииПочтовыеОтправления.ДатаПоследнегоЗапроса <= ДОБАВИТЬКДАТЕ(&ТекущаяДата, ЧАС, -&ЧасовМеждуЗапросами)";
	
	ЧасовМеждуЗапросами = Константы.гф_ПочтаРоссииПромежутокМеждуЗапросамиКОдномуТрекНомеру.Получить();
	
	Запрос.Параметры.Вставить("ТекущаяДата",         ТекущаяДатаСеанса());
	Запрос.Параметры.Вставить("ЧасовМеждуЗапросами", ЧасовМеждуЗапросами);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	УчетнаяЗапись = Справочники.гф_ПочтаРоссииУчетныеЗаписи.Основная;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПолучитьДанныеОтслеживания(УчетнаяЗапись, Выборка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Отправка

//
//	Параметры:
//	УчетнаяЗапись	- СправочникСсылка
//	Адреса			- Массив
//	Ошибки			- Массив
//
//  Возвращаемое значение:
//	- Массив - Нормализованные адреса
//
Функция ОтправкаЗапросНормализацииАдреса(УчетнаяЗапись, Адреса, Ошибки = Неопределено) Экспорт
	
	Если Ошибки = Неопределено Тогда
		
		Ошибки = Новый Массив;
		
	КонецЕсли;
	
	МассивАдресов = ЗначениеВМассиве(Адреса);
	
	ПараметрыЗапроса = ПараметрыЗапросаНормализацияАдреса(УчетнаяЗапись);
	
	ЗаписьЖСОН = Новый ЗаписьJSON;
	
	ЗаписьЖСОН.УстановитьСтроку();
	
	ЗаписьЖСОН.ЗаписатьНачалоМассива();
	
	Ид = 1;
	
	Для Каждого Адрес Из МассивАдресов Цикл
		
		Если Не ЗначениеЗаполнено(Адрес) Тогда
			
			Ошибки.Добавить("Пустой адрес отправки");
			
			Продолжить;
			
		КонецЕсли;
		
		ЗаписьЖСОН.ЗаписатьНачалоОбъекта();
		
		ЗаписьЖСОН.ЗаписатьИмяСвойства("id");
		ЗаписьЖСОН.ЗаписатьЗначение(   Ид);
		
		ЗаписьЖСОН.ЗаписатьИмяСвойства("original-address");
		ЗаписьЖСОН.ЗаписатьЗначение(   Адрес);
		
		ЗаписьЖСОН.ЗаписатьКонецОбъекта();
		
		Ид = Ид + 1;
		
	КонецЦикла;
	
	ЗаписьЖСОН.ЗаписатьКонецМассива();
	
	ТекстЗапроса = ЗаписьЖСОН.Закрыть();
	
	Если Ошибки.Количество() Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат ЗапросКОтправкеСлужебный(ПараметрыЗапроса, ТекстЗапроса, Ошибки);
	
КонецФункции

//  Нормализация ФИО
//	Параметры:
//	УчетнаяЗапись	- СправочникСсылка
//	ФИО				- Строка
//	Ошибки			- Массив
//
//  Возвращаемое значение:
//	- Строка - Нормализованные ФИО
//
Функция ОтправкаЗапросНормализацииФИО(УчетнаяЗапись, ФИО, Ошибки = Неопределено) Экспорт
	
	Если Ошибки = Неопределено Тогда
		
		Ошибки = Новый Массив;
		
	КонецЕсли;
	
	МассивФИО = ЗначениеВМассиве(ФИО);
	
	ПараметрыЗапроса = ПараметрыЗапросаНормализацияФИО(УчетнаяЗапись);
	
	ЗаписьЖСОН = Новый ЗаписьJSON;
	
	ЗаписьЖСОН.УстановитьСтроку();
	
	ЗаписьЖСОН.ЗаписатьНачалоМассива();
	
	Ид = 1;
	
	Для Каждого ФИО Из МассивФИО Цикл
		
		Если Не ЗначениеЗаполнено(ФИО) Тогда
			
			Ошибки.Добавить("Пустые ФИО");
			
			Продолжить;
			
		КонецЕсли;
		
		ЗаписьЖСОН.ЗаписатьНачалоОбъекта();
		
		ЗаписьЖСОН.ЗаписатьИмяСвойства("id");
		ЗаписьЖСОН.ЗаписатьЗначение(   Ид);
		
		ЗаписьЖСОН.ЗаписатьИмяСвойства("original-fio");
		ЗаписьЖСОН.ЗаписатьЗначение(   ФИО);
		
		ЗаписьЖСОН.ЗаписатьКонецОбъекта();
		
		Ид = Ид + 1;
		
	КонецЦикла;
	
	ЗаписьЖСОН.ЗаписатьКонецМассива();
	
	ТекстЗапроса = ЗаписьЖСОН.Закрыть();
	
	Если Ошибки.Количество() Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат ЗапросКОтправкеСлужебный(ПараметрыЗапроса, ТекстЗапроса, Ошибки);
	
КонецФункции

//  Нормализация телефона
//	Параметры:
//	УчетнаяЗапись	- СправочникСсылка
//	Телефон				- Строка
//	Ошибки			- Массив
//
//  Возвращаемое значение:
//	- Строка - Нормализованный телефон.
//
Функция ОтправкаЗапросНормализацииТелефона(УчетнаяЗапись, Телефон, Ошибки = Неопределено) Экспорт
	
	Если Ошибки = Неопределено Тогда
		
		Ошибки = Новый Массив;
		
	КонецЕсли;
	
	МассивТелефонов = ЗначениеВМассиве(Телефон);
	
	ПараметрыЗапроса = ПараметрыЗапросаНормализацияТелефона(УчетнаяЗапись);
	
	ЗаписьЖСОН = Новый ЗаписьJSON;
	
	ЗаписьЖСОН.УстановитьСтроку();
	
	ЗаписьЖСОН.ЗаписатьНачалоМассива();
	
	Ид = 1;
	
	Для Каждого Телефон Из МассивТелефонов Цикл
		
		Если Не ЗначениеЗаполнено(Телефон) Тогда
			
			Ошибки.Добавить("Пустой телефон");
			
			Продолжить;
			
		КонецЕсли;
		
		ЗаписьЖСОН.ЗаписатьНачалоОбъекта();
		
		ЗаписьЖСОН.ЗаписатьИмяСвойства("id");
		ЗаписьЖСОН.ЗаписатьЗначение(   Ид);
		
		ЗаписьЖСОН.ЗаписатьИмяСвойства("original-phone");
		ЗаписьЖСОН.ЗаписатьЗначение(   Телефон);
		
		ЗаписьЖСОН.ЗаписатьКонецОбъекта();
		
		Ид = Ид + 1;
		
	КонецЦикла;
	
	ЗаписьЖСОН.ЗаписатьКонецМассива();
	
	ТекстЗапроса = ЗаписьЖСОН.Закрыть();
	
	Если Ошибки.Количество() Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат ЗапросКОтправкеСлужебный(ПараметрыЗапроса, ТекстЗапроса, Ошибки);
	
КонецФункции

//  Количество запросов
//
//	Параметры:
//	УчетнаяЗапись	- СправочникСсылка
//	Ошибки			- Массив
//
//  Возвращаемое значение:
//	- Число - Количество запросов
//
Функция ОтправкаЗапросКоличествоЗапросов(УчетнаяЗапись, Ошибки = Неопределено) Экспорт
	
	Если Ошибки = Неопределено Тогда
		
		Ошибки = Новый Массив;
		
	КонецЕсли;
	
	ПараметрыЗапроса = ПараметрыЗапросаКоличествоЗапросов(УчетнаяЗапись);
	
	ЗаписьЖСОН = Новый ЗаписьJSON;
	
	ЗаписьЖСОН.УстановитьСтроку();
	
	ЗаписьЖСОН.ЗаписатьНачалоМассива();
	
	ЗаписьЖСОН.ЗаписатьКонецМассива();
	
	ТекстЗапроса = ЗаписьЖСОН.Закрыть();
	
	Возврат ЗапросКОтправкеСлужебный(ПараметрыЗапроса, ТекстЗапроса, Ошибки);
	
КонецФункции

//  Создание заказа
//
//	Параметры:
//	УчетнаяЗапись	- СправочникСсылка
//	ТекстЗапроса	- Строка
//	Ошибки			- Массив
//
//  Возвращаемое значение:
//	- Строка - Текст ответа
//
Функция ОтправкаЗапросСозданиеЗаказа(УчетнаяЗапись, ТекстЗапроса, Ошибки = Неопределено) Экспорт
	
	Если Ошибки = Неопределено Тогда
		
		Ошибки = Новый Массив;
		
	КонецЕсли;
	
	ПараметрыЗапроса = ПараметрыЗапросаСозданиеЗаказа(УчетнаяЗапись);
	
	Возврат ЗапросКОтправкеСлужебный(ПараметрыЗапроса, ТекстЗапроса, Ошибки);
	
КонецФункции

//  Создание партии
//
//	Параметры:
//	УчетнаяЗапись	- СправочникСсылка
//	ТекстЗапроса	- Строка
//	Ошибки			- Массив
//
//  Возвращаемое значение:
//	- Строка - Текст ответа
//
Функция ОтправкаЗапросСозданиеПартии(УчетнаяЗапись, ТекстЗапроса, Ошибки) Экспорт
	
	Если Ошибки = Неопределено Тогда
		
		Ошибки = Новый Массив;
		
	КонецЕсли;
	
	ПараметрыЗапроса = ПараметрыЗапросаСозданиеПартии(УчетнаяЗапись);
	
	Возврат ЗапросКОтправкеСлужебный(ПараметрыЗапроса, ТекстЗапроса, Ошибки);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Трекер

// Возвращает ответ XDTO от сервера Почты России
//
// Параметры:
// Логин		- Строка
// Пароль		- Строка
// ТрекНомер	- Строка
// Ошибки		- Массив - Массив строк ошибок.
//
//	Возвращаемое значение:
// - Произвольный, Неопределено - Данные отслеживания.
//
Функция ПолучитьДанныеОтслеживанияСлужебный(Логин, Пароль, ТрекНомер, Ошибки = Неопределено) Экспорт
	
	Если Ошибки = Неопределено Тогда
		
		Ошибки = Новый Массив;
		
	КонецЕсли;
	
	URI      = "http://russianpost.org/operationhistory";
	НаименованиеВебСервиса = "OperationHistory12";
	НаименованиеПорта      = "OperationHistory12Port";
	ТипЗначенияХДТО        = "http://russianpost.org/operationhistory/data";
	ВебСервисСсылка = WSСсылки.гф_ПочтаРоссииЕдиничныйДоступКТрекеру;
	
	Соединение = Новый ЗащищенноеСоединениеOpenSSL;
	
	Попытка
		
		Прокси = ВебСервисСсылка.СоздатьWSПрокси(URI, НаименованиеВебСервиса, НаименованиеПорта, , , Соединение);
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ОписаниеОшибки = ПолучитьОписаниеОшибки(ИнформацияОбОшибке);
		
		Ошибки.Добавить(ОписаниеОшибки);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Фабрика = Прокси.ФабрикаXDTO;
	
	ЗаголовокАвторизации = Фабрика.Создать(ТипЗначенияХДТО, "AuthorizationHeader");
	
	ЗаголовокАвторизации.login    = Логин;
	ЗаголовокАвторизации.password = Пароль;
	
	ЗапросИстории = Фабрика.Создать(ТипЗначенияХДТО, "OperationHistoryRequest");
	
	ЗапросИстории.Barcode     = ТрекНомер;
	ЗапросИстории.MessageType = 0;
	ЗапросИстории.Language    = "RUS";
	
	Пакеты = Фабрика.Пакеты.Получить(URI);
	
	ПакетЗапроса = Пакеты.Получить("getOperationHistory");
	
	Запрос = Фабрика.Создать(ПакетЗапроса);
	
	Запрос.OperationHistoryRequest = ЗапросИстории;
	Запрос.AuthorizationHeader     = ЗаголовокАвторизации;
	
	Попытка
		
		ОтветОтСервера = Прокси.getOperationHistory(Запрос);
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ОписаниеОшибки = ПолучитьОписаниеОшибки(ИнформацияОбОшибке);
		
		Ошибки.Добавить(ОписаниеОшибки);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат ОтветОтСервера;
	
КонецФункции

//
// Параметры:  
// ДанныеХДТО - Структура
//
// Возвращаемое значение:
// - Массив - Массив структур
//
Функция ДанныеОтслеживанияВМассивСтруктур(ДанныеХДТО) Экспорт
	
	Результат = Новый Массив;
	
	ТаблицаКодовОпераций =
	гф_ПочтаРоссииПовтИсп.ПолучитьТаблицуКодовОпераций();
	ТаблицаКодовКатегорийПочтовыхОтправлений =
	гф_ПочтаРоссииПовтИсп.ПолучитьТаблицуКодовКатегорийПочтовыхОтправлений();
	ТаблицаКодовРазрядовПочтовыхОтправлений =
	гф_ПочтаРоссииПовтИсп.ПолучитьТаблицуКодовРазрядовПочтовыхОтправлений();
	ТаблицаКодовВидовПочтовыхОтправлений =
	гф_ПочтаРоссииПовтИсп.ПолучитьТаблицуКодовВидовПочтовыхОтправлений();
	ТаблицаКодовКатегорийОтправителей =
	гф_ПочтаРоссииПовтИсп.ПолучитьТаблицуКодовКатегорийОтправителей();
	ТаблицаКодовСтранПересылкиПочтовыхОтправлений =
	гф_ПочтаРоссииПовтИсп.ПолучитьТаблицуКодовСтранПересылкиПочтовыхОтправлений();
	ТаблицаКодовОтметокПочтовыхОтправлений =
	гф_ПочтаРоссииПовтИсп.ПолучитьТаблицуКодовОтметокПочтовыхОтправлений();
	
	Для Каждого Элемент Из ДанныеХДТО.OperationHistoryData.historyRecord Цикл
		
		Запись = ОтветОтТрекераСтруктураЗапись();
		
		Операция = ОтветОтТрекераСтруктураОперация();
		
		КодОперации = СтрокаВЧисло(Элемент.OperationParameters.OperType.id);
		КодАтрибута = СтрокаВЧисло(Элемент.OperationParameters.OperAttr.id);
		
		Операция.Дата = Элемент.OperationParameters.OperDate;
		
		Отбор = Новый Структура("КодОперации, КодАтрибута", КодОперации, КодАтрибута);
		
		СтрокиОпераций = ТаблицаКодовОпераций.НайтиСтроки(Отбор);
		
		Если СтрокиОпераций.Количество() Тогда
			
			Операция.Операция         = СтрокиОпераций[0].Ссылка;
			Операция.КонечнаяОперация = СтрокиОпераций[0].КонечнаяОперация;
			
		Иначе
			
			Операция.Операция = ПредопределенноеЗначение("Справочник.гф_ПочтаРоссииОперацииОтслеживания.ПустаяСсылка");
			
		КонецЕсли;
		
		Запись.Операция = Операция;
		
		Результат.Добавить(Запись);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Отправка

//	Параметры:
// ПараметрыЗапроса	- Структура
// ТекстЗапроса		- Строка
// Ошибки			- Массив
//
//	Возвращаемое значение:
// - Строка - Текст ответа
//
Функция ЗапросКОтправкеСлужебный(ПараметрыЗапроса, ТекстЗапроса, Ошибки = Неопределено) Экспорт
	
	Если Ошибки = Неопределено Тогда
		
		Ошибки = Новый Массив;
		
	КонецЕсли;
	
	Если Не ПараметрыЗапроса.Свойство("Токен") Тогда
		
		Ошибки.Добавить("Не заданы параметры авторизации в сервисе");
		
	КонецЕсли;
	
	Authorization      = "AccessToken " + ПараметрыЗапроса.Токен;
	XUserAuthorization = "Basic " + ПараметрыЗапроса.КлючАвторизации;
	
	Попытка
		
		Соединение = Новый HTTPСоединение("otpravka-api.pochta.ru", , , , , 30, Новый ЗащищенноеСоединениеOpenSSL);
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ОписаниеОшибки = ПолучитьОписаниеОшибки(ИнформацияОбОшибке);
		
		Ошибки.Добавить(ОписаниеОшибки);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Заголовки = Новый Соответствие;
	
	Заголовки.Вставить("X-User-Authorization", XUserAuthorization);
	Заголовки.Вставить("Authorization",        Authorization);
	Заголовки.Вставить("Content-type",         "application/json; charset=utf8");
	
	HTTPЗапрос = Новый HTTPЗапрос(ПараметрыЗапроса.Адрес, Заголовки);
	
	HTTPЗапрос.УстановитьТелоИзСтроки(ТекстЗапроса);
	
	Если ВРег(ПараметрыЗапроса.Тип) = "GET" Тогда
		
		ХТТПОтвет = Соединение.Получить(HTTPЗапрос);
		
	ИначеЕсли ВРег(ПараметрыЗапроса.Тип) = "PUT" Тогда
		
		ХТТПОтвет = Соединение.Записать(HTTPЗапрос);
		
	Иначе
		
		ХТТПОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		
	КонецЕсли;
	
	КодСостояния = ХТТПОтвет.КодСостояния; 
	
	КодУспех = 200;
	КодОшибка = 300;
	
	Если КодСостояния >= КодУспех И КодСостояния < КодОшибка Тогда
		
		Возврат ХТТПОтвет.ПолучитьТелоКакСтроку();
		
	Иначе
		
		Ошибки.Добавить("Ошибка, код состояния: " + КодСостояния);
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

Процедура ЗаписатьАдресПолучателя(ЗаписьЖСОН, Адрес) Экспорт
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("index",  "index-to");
	СоответствиеПолей.Вставить("region", "region-to");
	СоответствиеПолей.Вставить("place",  "place-to");
	СоответствиеПолей.Вставить("street", "street-to");
	СоответствиеПолей.Вставить("house",  "house-to");
	
	ЧтениеJSON = Новый ЧтениеJSON;
	
	ЧтениеJSON.УстановитьСтроку(Адрес);
	
	МассивАдресов = ПрочитатьJSON(ЧтениеJSON, Истина);
	
	НормализованныйАдрес = МассивАдресов[0];
	
	ЗаписатьСвойствоИЗначениеВЖСОН(ЗаписьЖСОН, "address-type-to", "DEFAULT");
	
	Для Каждого Поле Из СоответствиеПолей Цикл
		
		ЗначениеСвойства = НормализованныйАдрес[Поле.Ключ];
		
		Если ЗначениеЗаполнено(ЗначениеСвойства) Тогда
			
			ИмяСвойства = Поле.Значение;
			
			ЗаписатьСвойствоИЗначениеВЖСОН(ЗаписьЖСОН, ИмяСвойства, ЗначениеСвойства);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//	Параметры:
// ЗаписьЖСОН	- Произвольный
// ФИО			- Строка
//
Процедура ЗаписатьФИОПолучателя(ЗаписьЖСОН, ФИО) Экспорт
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("middle-name", "middle-name");
	СоответствиеПолей.Вставить("name",        "given-name");
	СоответствиеПолей.Вставить("surname",     "surname");
	
	ЧтениеJSON = Новый ЧтениеJSON;
	
	ЧтениеJSON.УстановитьСтроку(ФИО);
	
	МассивФИО = ПрочитатьJSON(ЧтениеJSON, Истина);
	
	НормализованныйФИО = МассивФИО[0];
	
	Для Каждого Поле Из СоответствиеПолей Цикл
		
		ЗначениеСвойства = НормализованныйФИО[Поле.Ключ];
		
		Если ЗначениеЗаполнено(ЗначениеСвойства) Тогда
			
			ИмяСвойства = Поле.Значение;
			
			ЗаписатьСвойствоИЗначениеВЖСОН(ЗаписьЖСОН, ИмяСвойства, ЗначениеСвойства);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//	Параметры:
// ЗаписьЖСОН	- Структура
// Телефон		- Строка
//
Процедура ЗаписатьТелефонПолучателя(ЗаписьЖСОН, Телефон) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	
	ЧтениеJSON.УстановитьСтроку(Телефон);
	
	МассивТелефонов = ПрочитатьJSON(ЧтениеJSON, Истина);
	
	НормализованныйТелефон = МассивТелефонов[0];
	
	ИмяСвойства = "tel-address";
	
	КодСтраны     = НормализованныйТелефон["phone-country-code"];
	КодРегиона    = НормализованныйТелефон["phone-city-code"];
	НомерТелефона = НормализованныйТелефон["phone-number"];
	
	ЗначениеСвойства = ?(ЗначениеЗаполнено(КодСтраны), "+" + КодСтраны, "") + КодРегиона + НомерТелефона;
	
	ЗаписатьСвойствоИЗначениеВЖСОН(ЗаписьЖСОН, ИмяСвойства, ЗначениеСвойства);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Трекер

//  Запись истории отслеживания
//
//	Параметры:
//	ПочтовоеОтправление	- СправочникСсылка
//	ОтветОтСервера		- Строка
//	Ошибки				- Массив
//
Процедура ЗаписатьИсториюОтслеживания(ПочтовоеОтправление, ОтветОтСервера, Ошибки = Неопределено)
	
	Если Ошибки = Неопределено Тогда
		
		Ошибки = Новый Массив;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	гф_ПочтаРоссииИсторияОтслеживанияСрезПоследних.Период КАК Период
	|ИЗ
	|	РегистрСведений.гф_ПочтаРоссииИсторияОтслеживания.СрезПоследних(,
	|	ПочтовоеОтправление = &ПочтовоеОтправление) КАК гф_ПочтаРоссииИсторияОтслеживанияСрезПоследних";
	
	Запрос.Параметры.Вставить("ПочтовоеОтправление", ПочтовоеОтправление);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		ДатаПоследнейОперации = '00010101';
		
	Иначе
		
		Выборка = Результат.Выбрать();
		
		Выборка.Следующий();
		
		ДатаПоследнейОперации = Выборка.Период;
		
	КонецЕсли;
	
	ДоставкаЗавершена = Ложь;
	
	ДатаПрисвоенияИдентификатора = Неопределено;
	
	Для Каждого СтрокаОтвета Из ОтветОтСервера Цикл
		
		Операция = СтрокаОтвета.Операция;
		
		КодОперацииПрисвоениеИдентификатора = 28;
		
		Если Операция.КонечнаяОперация Тогда
			
			ДоставкаЗавершена = Истина;
			
		КонецЕсли;
		
		Если Операция.Дата <= ДатаПоследнейОперации Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Запись = РегистрыСведений.гф_ПочтаРоссииИсторияОтслеживания.СоздатьМенеджерЗаписи();
		
		Запись.ПочтовоеОтправление = ПочтовоеОтправление;
		Запись.Период = Операция.Дата;
		Запись.Операция            = Операция.Операция;
		Запись.КонечнаяОперация    = Операция.КонечнаяОперация;
		Запись.Активность          = Истина;
		
		Запись.Записать();
		
	КонецЦикла;
	
	ПочтовоеОтправлениеОбъект = ПочтовоеОтправление.ПолучитьОбъект();
	
	ПочтовоеОтправлениеОбъект.ОшибкаПриЗапросе      = Ложь;
	ПочтовоеОтправлениеОбъект.ТекстОшибки           = Неопределено;
	ПочтовоеОтправлениеОбъект.ДатаПоследнегоЗапроса = ТекущаяДатаСеанса();
	ПочтовоеОтправлениеОбъект.ДатаСоздания          = ДатаПрисвоенияИдентификатора;
	ПочтовоеОтправлениеОбъект.ДоставкаЗавершена     = ДоставкаЗавершена;
	
	Если ДоставкаЗавершена Тогда
		
		ПочтовоеОтправлениеОбъект.Отслеживать = Ложь;
		
	КонецЕсли;
	
	ПочтовоеОтправлениеОбъект.Записать();
	
КонецПроцедуры

//  Получение истории отслеживания
//
//	Параметры:
//	ПочтовоеОтправление	- СправочникСсылка
//
//  Возвращаемое значение:
//	- Массив - Массив записей
//
Функция ПолучитьИсториюОтслеживания(ПочтовоеОтправление)
	
	МассивЗаписей = Новый Массив;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	гф_ПочтаРоссииИсторияОтслеживания.Период КАК Дата,
	|	гф_ПочтаРоссииОперацииОтслеживания.КонечнаяОперация КАК КонечнаяОперация,
	|	гф_ПочтаРоссииОперацииОтслеживания.Ссылка КАК Операция
	|ИЗ
	|	РегистрСведений.гф_ПочтаРоссииИсторияОтслеживания КАК гф_ПочтаРоссииИсторияОтслеживания
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гф_ПочтаРоссииОперацииОтслеживания КАК гф_ПочтаРоссииОперацииОтслеживания
	|		ПО гф_ПочтаРоссииИсторияОтслеживания.Операция = гф_ПочтаРоссииОперацииОтслеживания.Ссылка
	|ГДЕ
	|	гф_ПочтаРоссииИсторияОтслеживания.ПочтовоеОтправление = &ПочтовоеОтправление";
	
	Запрос.Параметры.Вставить("ПочтовоеОтправление", ПочтовоеОтправление);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Возврат МассивЗаписей;
		
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Запись   = ОтветОтТрекераСтруктураЗапись();
		Операция = ОтветОтТрекераСтруктураОперация();
		
		ЗаполнитьЗначенияСвойств(Операция, Выборка);
		
		Запись.Операция = Операция;
		
		МассивЗаписей.Добавить(Запись);
		
	КонецЦикла;
	
	Возврат МассивЗаписей;
	
КонецФункции

//  СтрокаВЧисло
//
//	Параметры:
//	Значение - Строка
//
// Возвращаемое значение:
//	- Число - Результат преобразования
//
Функция СтрокаВЧисло(Значение) Экспорт
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		
		Результат = Значение;
		
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЭтоЧисло(Значение) Тогда
		
		Результат = Число(Значение);
		
	Иначе
		
		Результат = 0;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Создает и возвращает структуру Операция
//
// Возвращаемое значение:
//	- Структура:
//		* Дата				- Дата
//      * Операция			- СправочникСсылка
//      * КонечнаяОперация	- СправочникСсылка
//
Функция ОтветОтТрекераСтруктураОперация()
	
	Результат = Новый Структура(
	"Дата,
	|Операция,
	|КонечнаяОперация");
	
	Возврат Результат;
	
КонецФункции

// Создает и возвращает структуру Запись
//
// Возвращаемое значение:
//	- Структура:
//		* ПараметрыАдреса		- СправочникСсылка
//		* ПараметрыФинансовые	- СправочникСсылка
//		* ПараметрыОтправления	- СправочникСсылка
//      * Операция				- СправочникСсылка
//      * КонечнаяОперация		- СправочникСсылка
//
Функция ОтветОтТрекераСтруктураЗапись()
	
	Результат = Новый Структура(
	"ПараметрыАдреса,
	|ПараметрыФинансовые,
	|ПараметрыОтправления,
	|Операция,
	|ПараметрыПользователя");
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//	Ошибки				- Массив
//	ПочтовоеОтправление	- ДокументСсылка
//
Процедура ЗаписатьОшибкиВПочтовоеОтправление(Ошибки, ПочтовоеОтправление)
	
	ПочтовоеОтправлениеОбъект = ПочтовоеОтправление.ПолучитьОбъект();
	
	ТекстОшибки = "";
	
	Для Каждого Ошибка Из Ошибки Цикл
		
		ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ВК + Ошибка, Ошибка);
		
	КонецЦикла;
	
	ПочтовоеОтправлениеОбъект.ОшибкаПриЗапросе      = Истина;
	ПочтовоеОтправлениеОбъект.ТекстОшибки           = ТекстОшибки;
	ПочтовоеОтправлениеОбъект.ДатаПоследнегоЗапроса = ТекущаяДатаСеанса();
	ПочтовоеОтправлениеОбъект.Отслеживать           = Ложь;
	
	ПочтовоеОтправлениеОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область Отправка

// Создает и возвращает структуру параметров запроса
//
// Параметры:
//	УчетнаяЗапись - СправочникСсылка
//
//	Возвращаемое значение:
//	- Структура - Параметры запроса
//
Функция ПараметрыЗапросаНормализацияАдреса(УчетнаяЗапись = Неопределено) Экспорт
	
	ПараметрыЗапроса = Новый Структура("Адрес, Тип", "/1.0/clean/address", "POST");
	
	ДобавитьАвторизациюВПараметрыЗапроса(ПараметрыЗапроса, УчетнаяЗапись);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

// Создает и возвращает структуру параметров запроса
//
// Параметры:
//	УчетнаяЗапись - СправочникСсылка
//
//	Возвращаемое значение:
//	- Структура - Параметры запроса
//
Функция ПараметрыЗапросаНормализацияФИО(УчетнаяЗапись = Неопределено) Экспорт
	
	ПараметрыЗапроса = Новый Структура("Адрес, Тип", "/1.0/clean/physical", "POST");
	
	ДобавитьАвторизациюВПараметрыЗапроса(ПараметрыЗапроса, УчетнаяЗапись);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

// Создает и возвращает структуру параметров запроса
//
// Параметры:
//	УчетнаяЗапись - СправочникСсылка
//
//	Возвращаемое значение:
//	- Структура - Параметры запроса
//
Функция ПараметрыЗапросаНормализацияТелефона(УчетнаяЗапись = Неопределено) Экспорт
	
	ПараметрыЗапроса = Новый Структура("Адрес, Тип", "/1.0/clean/phone", "POST");
	
	ДобавитьАвторизациюВПараметрыЗапроса(ПараметрыЗапроса, УчетнаяЗапись);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

// Создает и возвращает структуру параметров запроса
//
// Параметры:
//	УчетнаяЗапись - СправочникСсылка
//
//	Возвращаемое значение:
//	- Структура - Параметры запроса
//
Функция ПараметрыЗапросаКоличествоЗапросов(УчетнаяЗапись = Неопределено) Экспорт
	
	ПараметрыЗапроса = Новый Структура("Адрес, Тип", "/1.0/settings/limit", "GET");
	
	ДобавитьАвторизациюВПараметрыЗапроса(ПараметрыЗапроса, УчетнаяЗапись);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

// Создает и возвращает структуру параметров запроса
//
// Параметры:
//	УчетнаяЗапись - СправочникСсылка
//
//	Возвращаемое значение:
//	- Структура - Параметры запроса
//
Функция ПараметрыЗапросаСозданиеЗаказа(УчетнаяЗапись = Неопределено) Экспорт
	
	ПараметрыЗапроса = Новый Структура("Адрес, Тип", "/2.0/user/backlog", "PUT");
	
	ДобавитьАвторизациюВПараметрыЗапроса(ПараметрыЗапроса, УчетнаяЗапись);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

// Создает и возвращает структуру параметров запроса
//
// Параметры:
//	УчетнаяЗапись - СправочникСсылка
//
//	Возвращаемое значение:
//	- Структура - Параметры запроса
//
Функция ПараметрыЗапросаСозданиеПартии(УчетнаяЗапись = Неопределено)
	
	ПараметрыЗапроса = Новый Структура("Адрес, Тип", "/1.0/user/shipment", "POST");
	
	ДобавитьАвторизациюВПараметрыЗапроса(ПараметрыЗапроса, УчетнаяЗапись);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

// ДобавитьАвторизациюВПараметрыЗапроса
//
// Параметры:
//	ПараметрыЗапроса	- Структура
//	УчетнаяЗапись		- СправочникСсылка
//
Процедура ДобавитьАвторизациюВПараметрыЗапроса(ПараметрыЗапроса, УчетнаяЗапись = Неопределено)
	
	Если УчетнаяЗапись = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Токен           = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(УчетнаяЗапись, "Токен");
	КлючАвторизации = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(УчетнаяЗапись, "КлючАвторизации");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ПараметрыЗапроса.Вставить("Токен",           Токен);
	ПараметрыЗапроса.Вставить("КлючАвторизации", КлючАвторизации);
	
КонецПроцедуры

// ЗаписатьСвойствоИЗначениеВЖСОН
//
// Параметры:
//	ЗаписьЖСОН			- Стрктура
//	ИмяСвойства			- Строка
//	ЗначениеСвойства	- Произвольный
//
Процедура ЗаписатьСвойствоИЗначениеВЖСОН(ЗаписьЖСОН, ИмяСвойства, ЗначениеСвойства) Экспорт
	
	ЗаписьЖСОН.ЗаписатьИмяСвойства(ИмяСвойства);
	ЗаписьЖСОН.ЗаписатьЗначение(   ЗначениеСвойства);
	
КонецПроцедуры

#КонецОбласти

#Область Общие

// Возвращает описание ошибки самого глубокого уровня
// Для обработки ошибок при обращении с веб-сервису.
// Создает и возвращает структуру параметров запроса.
//
// Параметры:
//	ИнформацияОбОшибке - Произвольный
//
//	Возвращаемое значение:
//	- Структура - Описание ошибки
//
Функция ПолучитьОписаниеОшибки(Знач ИнформацияОбОшибке)
	
	ОписаниеОшибки = ИнформацияОбОшибке.Описание;
	
	Пока ИнформацияОбОшибке.Причина <> Неопределено Цикл
		
		ИнформацияОбОшибке = ИнформацияОбОшибке.Причина;
		
		ОписаниеОшибки = ИнформацияОбОшибке.Описание;
		
	КонецЦикла;
	
	Возврат ОписаниеОшибки;
	
КонецФункции

// Возвращает значение в массиве значений
//
//	Параметры:
//	Значение - Произвольный
//
//  Возвращаемое значение:
//	- Массив - Массив из одного элемента, переданного параметра
//
Функция ЗначениеВМассиве(Значение)
	
	Если ТипЗнч(Значение) = Тип("Массив") Тогда
		
		Результат = Значение;
		
	Иначе
		
		Результат = Новый Массив;
		
		Результат.Добавить(Значение);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
