
// vvv Галфинд \ Sakovich 28.12.2022
Процедура ОбработатьИсключенияРМКладовщика() Экспорт
	
	////$$$===========================vvv ОТЛАДКА vvv======================28.12.2022 12:43:57=============| SBB
	//_омОбщегоНазначенияВызовСервера.гф_ПаузаНаСервере(10);
	//ОбщегоНазначения.СообщитьПользователю("Выполнена серверная часть " + ТекущаяДатаСеанса());
	////===========================^^^ КОНЕЦ ОТЛАДКИ ^^^===================28.12.2022 12:43:57=============| SBB
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Таблица.Ссылка КАК Ссылка,
	|	ВЫРАЗИТЬ(Таблица.ДокументОснование КАК Документ.ПересортицаТоваров) КАК Основание
	|ИЗ
	|	Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовИСМП КАК Статусы
	|		ПО (Статусы.Документ = Таблица.Ссылка)
	|ГДЕ
	|	Таблица.Проведен
	|	И ВЫРАЗИТЬ(Таблица.ДокументОснование КАК Документ.ПересортицаТоваров) ЕСТЬ НЕ NULL
	|	И Не ВЫРАЗИТЬ(Таблица.ДокументОснование КАК Документ.ПересортицаТоваров).ПометкаУдаления
	|	И Статусы.ДальнейшееДействие1 = ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется)
	|	И Статусы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗКодыМаркировкиЭмитированы)";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Основание = Выборка["Основание"];
		Агрегат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "гф_IDКороба.гф_Агрегация");
		пNVE = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Агрегат, "ЗначениеШтрихкода");
		СозданаЗаписьСтатусовИсключений = ЗанестиВРС_ОбработкаИсключений(пNVE, ПредопределенноеЗначение("Перечисление.гф_СтатусыИсключений.КодыПолучены"));
		
		// vvv Галфинд \ Sakovich 01.06.2023
		//данные действия выполняются регламентным заданием "ОбработкаПересортицы"
		// e1cib/data/Задача.ЗадачаИсполнителя?ref=8133bcee7bda45d711edef19579361a6
		
		//Если СозданаЗаписьСтатусовИсключений  = Истина Тогда
		//	ИзменитьДанныеУпаковочныйЛистИШтрихкодУпаковки(пNVE, Выборка.Ссылка, Основание);
		//	Если Основание.Проведен Тогда
		//		Основание.Записать(РежимЗаписиДокумента.Проведение);
		//	КонецЕсли;
		//КонецЕсли;
		// ^^^ Галфинд \ Sakovich 01.06.2023 
	КонецЦикла;
	
КонецПроцедуры // ^^^ Галфинд \ Sakovich 28.12.2022 

Функция ЗанестиВРС_ОбработкаИсключений(пNVE, СтатусОбработкиИсключения)
	
	Если ПустаяСтрока(пNVE) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	ТекДата = ТекущаяДатаСеанса();
	Агрегат = Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту("ЗначениеШтрихкода", пNVE);
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	гф_ОбработкаИсключенийСрезПоследних.NVE КАК NVE
	|ИЗ
	|	РегистрСведений.гф_ОбработкаИсключений.СрезПоследних(, NVE = &Агрегат) КАК гф_ОбработкаИсключенийСрезПоследних
	|ГДЕ
	|	гф_ОбработкаИсключенийСрезПоследних.Период < &Период
	|	И гф_ОбработкаИсключенийСрезПоследних.Статус = &Статус");
	Запрос.УстановитьПараметр("Агрегат", Агрегат);
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Статус", Перечисления.гф_СтатусыИсключений.ИсключениеСоздано);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	НЗ = РегистрыСведений.гф_ОбработкаИсключений.СоздатьНаборЗаписей();
	НЗ.Отбор.NVE.Установить(Агрегат);
	НЗ.Отбор.Период.Установить(ТекДата);
	НЗ.Прочитать();
	НЗ.Очистить();
	НовЗапись = НЗ.Добавить();
	НовЗапись.Период = ТекДата;
	НовЗапись.NVE = Агрегат;
	НовЗапись.Статус = СтатусОбработкиИсключения;
	
	Попытка
		НЗ.Записать();
		Возврат Истина;
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Ошибка установки статуса Обработки исключений", УровеньЖурналаРегистрации.Предупреждение, Метаданные.РегистрыСведений.гф_ОбработкаИсключений,,ТекстОшибки);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Параметры: 
//     пNVE - Строка - значение штрихкода агрегации Упаковочного листа
//     Эмиссия - ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ
//     Пересортица - ДокументСсылка.ПересортицаТоваров
Процедура ИзменитьДанныеУпаковочныйЛистИШтрихкодУпаковки(пNVE, Эмиссия, Пересортица)
	
	Если ПустаяСтрока(пNVE) Тогда
		Возврат;
	КонецЕсли;	

	СтруктураШтрихкодУпаковочныйЛист = НайтиШтрикходУпаковкиТоваровИУпаковочныйЛистПоNVE(пNVE);
	Если СтруктураШтрихкодУпаковочныйЛист = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УЛ = СтруктураШтрихкодУпаковочныйЛист["УпаковочныйЛист"];
	Агрегат = СтруктураШтрихкодУпаковочныйЛист["ШтрихКодУпаковки"];
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	УдаляемыеШК.Пересортица КАК Пересортица,
	|	УдаляемыеШК.ШтрихкодУпаковки КАК спрШтрихкод,
	|	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ втУдаляемые
	|ИЗ
	|	РегистрСведений.гф_ПересортицаУдаляемыеШК КАК УдаляемыеШК
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО УдаляемыеШК.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваров.Ссылка
	|ГДЕ 
	|	УдаляемыеШК.Пересортица = &Пересортица
	|	И УдаляемыеШК.Пересортица.Проведен
	|	И НЕ УдаляемыеШК.Обработан
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Ссылка КАК ЗаказНаЭмиссию,
	|	ПересортицаТоваров.Ссылка КАК Пересортировка
	|ПОМЕСТИТЬ ДокументыЭмиссии
	|ИЗ
	|	Документ.ПересортицаТоваров КАК ПересортицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ КАК ЗаказНаЭмиссиюКодовМаркировкиСУЗ
	|		ПО ПересортицаТоваров.Ссылка = ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ДокументОснование
	|ГДЕ
	|	ПересортицаТоваров.Ссылка = &Пересортица
	|	И ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Ссылка = &Эмиссия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК спрШтрихкод,
	|	ПулКодовМаркировкиСУЗ.Номенклатура КАК Номенклатура,
	|	ПулКодовМаркировкиСУЗ.Характеристика КАК Характеристика,
	|	ПулКодовМаркировкиСУЗ.КодМаркировки КАК ЗначениеШтрихкода
	|ПОМЕСТИТЬ втДобавляемые
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыЭмиссии КАК ДокументыЭмиссии
	|		ПО ПулКодовМаркировкиСУЗ.ДокументОснование = ДокументыЭмиссии.Пересортировка
	|			И ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию = ДокументыЭмиссии.ЗаказНаЭмиссию
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО ПулКодовМаркировкиСУЗ.КодМаркировки = ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода");
	
	Запрос.УстановитьПараметр("Пересортица", Пересортица);
	Запрос.УстановитьПараметр("Эмиссия", Эмиссия);
	
	ПакетРезультатов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	тзУбрать = ПакетРезультатов[0].Выгрузить();
	тзДобавить = ПакетРезультатов[2].Выгрузить();
	
	обУЛ = УЛ.ПолучитьОбъект();
	обШК = Агрегат.ПолучитьОбъект();
	
	Для каждого стрУбрать Из тзУбрать Цикл
		ПараметрыОтбора = Новый Структура("Штрихкод", стрУбрать["спрШтрихкод"]);
		мСтрокШК = обШК.ВложенныеШтрихкоды.НайтиСтроки(ПараметрыОтбора);
		Для каждого Эл Из мСтрокШК Цикл
			обШК.ВложенныеШтрихкоды.Удалить(Эл);
		КонецЦикла;	
		ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика", 
		стрУбрать["Номенклатура"], 
		стрУбрать["Характеристика"]);
		мСтрокУЛ = обУЛ.Товары.НайтиСтроки(ПараметрыОтбора);
		Для каждого Эл Из мСтрокУЛ Цикл
			
			Если Макс(Эл["КоличествоУпаковок"], Эл["Количество"]) <= 1 Тогда
				обУЛ.Товары.Удалить(Эл);
				Продолжить;
			КонецЕсли;	
			
			Если Эл["КоличествоУпаковок"] > 1 Тогда
				Эл["КоличествоУпаковок"] = Эл["КоличествоУпаковок"] - 1;
			КонецЕсли;
			Если Эл["Количество"] > 1 Тогда
				Эл["Количество"] = Эл["Количество"] - 1;
			КонецЕсли;
		КонецЦикла;
		
				
		Набор = регистрыСведений.гф_ПересортицаУдаляемыеШК.СоздатьНаборЗаписей();
		Набор.Отбор.Пересортица.Установить(стрУбрать["Пересортица"]);
		Набор.Отбор.ШтрихкодУпаковки.Установить(стрУбрать["спрШтрихкод"]);
		Набор.Прочитать();
		Для каждого Запись Из Набор Цикл
			Запись.Обработан = Истина;
		КонецЦикла;
		Набор.Записать();
	КонецЦикла;
	Для каждого стрДобавить Из тзДобавить Цикл

		КМ = стрДобавить["спрШтрихкод"];
		Если Не ЗначениеЗаполнено(КМ) Тогда
			обНовыйШтрихКод = Справочники.ШтрихкодыУпаковокТоваров.СоздатьЭлемент();
			обНовыйШтрихКод["Номенклатура"] = стрДобавить["Номенклатура"];
			обНовыйШтрихКод["Характеристика"] = стрДобавить["Характеристика"];
			обНовыйШтрихКод["ЗначениеШтрихкода"] = стрДобавить["ЗначениеШтрихкода"];
			обНовыйШтрихКод.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
			обНовыйШтрихКод.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix;
			обНовыйШтрихКод.Количество = 1;
			обНовыйШтрихКод.гф_ЗначениеШтрихкодаBase64 = ШтрихкодированиеИСКлиентСервер.ШтрихкодВBase64(обНовыйШтрихКод.ЗначениеШтрихкода);
			обНовыйШтрихКод.гф_Комментарий = "Создан обработкой ""Рабочее место кладовщика""";
			обНовыйШтрихКод.Ответственный = Пользователи.АвторизованныйПользователь();
			обНовыйШтрихКод.Записать();
			КМ = обНовыйШтрихКод.Ссылка;
		КонецЕсли;
		ПараметрыОтбора = Новый Структура("Штрихкод", КМ);
		мСтрокШК = обШК.ВложенныеШтрихкоды.НайтиСтроки(ПараметрыОтбора);
		Если мСтрокШК.Количество() = 0 Тогда
			нс = обШК.ВложенныеШтрихкоды.Добавить();
			нс["Штрихкод"] = КМ;
		КонецЕсли;
		
		РеквизитыШтрихкода = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КМ, "Номенклатура, Характеристика");
		
		ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика", 
		РеквизитыШтрихкода["Номенклатура"], 
		РеквизитыШтрихкода["Характеристика"]);

		ВыборкаШтрихкодовПоРеквизитам = ПолучитьКоличествоШтрихкодовПоНоменклатуреХарактеристике(обШК, ПараметрыОтбора);
		Если ВыборкаШтрихкодовПоРеквизитам.Следующий() Тогда
			КоличествоВложенныхШтрихкодов = ВыборкаШтрихкодовПоРеквизитам["Количество"];
		Иначе
			КоличествоВложенныхШтрихкодов = 0;
		КонецЕсли;
		
		мСтрокУЛ = обУЛ.Товары.НайтиСтроки(ПараметрыОтбора);
		Если мСтрокУЛ.Количество() > 0 Тогда
			мСтрокУЛ[0]["КоличествоУпаковок"] = 
			?(мСтрокУЛ[0]["КоличествоУпаковок"] > 0 И мСтрокУЛ[0]["КоличествоУпаковок"] < КоличествоВложенныхШтрихкодов,
			мСтрокУЛ[0]["КоличествоУпаковок"] + 1, 
			мСтрокУЛ[0]["КоличествоУпаковок"]);
			
			мСтрокУЛ[0]["Количество"] = 
			?(мСтрокУЛ[0]["Количество"] > 0 И мСтрокУЛ[0]["Количество"] < КоличествоВложенныхШтрихкодов,
			мСтрокУЛ[0]["Количество"] + 1, 
			мСтрокУЛ[0]["Количество"]);
		Иначе
			Назначение = обУл.Товары[0].Назначение;
			УпаковочныйЛистРодитель = обУл.Товары[0].УпаковочныйЛистРодитель;
			нс = обУЛ.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(нс, стрДобавить);
			нс["КоличествоУпаковок"] = 1;
			нс["Количество"] = 1;
			нс["Назначение"] = Назначение;
			нс["УпаковочныйЛистРодитель"] = УпаковочныйЛистРодитель;
			нс["ЭтоУпаковочныйЛист"] = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	ПроверитьУЛПоВариантуКомплектацииИПроставитьСтатусКороба(обУЛ);
	
	// удаляем запись об упаковке из Пула кодов маркировки для удаляемых штрихкодов
	КодыМаркировки = ШтрихкодированиеИСМП.НоваяТаблицаПоискаКодаМаркировкиВПуле();
	Для каждого стрУбрать Из тзУбрать Цикл
		влШтрихКод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(стрУбрать["спрШтрихкод"], "ЗначениеШтрихкода");
		ШтрихкодированиеИСМП.ДобавитьКодМаркировкиВТаблицуДляПоискаВПуле(
		влШтрихКод,
		КодыМаркировки);
	КонецЦикла;	
	РезультатПоискаВПуле = ШтрихкодированиеИСМП.РезультатПоискаВПулеКодовМаркировки(
	КодыМаркировки,
	"ДокументОснование, ЗаказНаЭмиссию, ХешСуммаКодаМаркировки, ШтрихкодУпаковки");
	Для каждого СтрокаРезультата Из РезультатПоискаВПуле Цикл
		Набор = РегистрыСведений.ПулКодовМаркировкиСУЗ.СоздатьНаборЗаписей();
		Отбор = Набор.Отбор;
		Отбор["ДокументОснование"].Установить(СтрокаРезультата["ДокументОснование"]);
		Отбор["ЗаказНаЭмиссию"].Установить(СтрокаРезультата["ЗаказНаЭмиссию"]);
		Отбор["КодМаркировки"].Установить(СтрокаРезультата["КодМаркировки"]);
		Отбор["ХешСуммаКодаМаркировки"].Установить(СтрокаРезультата["ХешСуммаКодаМаркировки"]);
		Набор.Прочитать();
		Для каждого Запись Из Набор Цикл
			Запись["ШтрихкодУпаковки"] = Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка();
		КонецЦикла;
		Набор.Записать();
	КонецЦикла;
	
	// для обновления записей об упаковке в Пуле кодов маркировки
	обШК.ДополнительныеСвойства.Вставить("ОбработатьВложенныеШтрихкодыВПуле", Истина);
	
	обШК.Записать();
	Если обУЛ.Проведен Тогда
		обУЛ.Записать(РежимЗаписиДокумента.Проведение);
	Иначе
		обУЛ.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
КонецПроцедуры

// Сравнивает табличные части товаров Упаковочного листа и Варианта комплектации
// и проставляет в Упаковочном листе значение реквизита "гф_СостояниеКороба"
// Параметры:
//  обУЛ - ДокументОбъект.УпаковочныйЛист
Процедура ПроверитьУЛПоВариантуКомплектацииИПроставитьСтатусКороба(обУЛ) Экспорт
	
	ВариантКомплектации = ОбУЛ.гф_Комплектация;
	Если Не ЗначениеЗаполнено(ВариантКомплектации) Тогда
		Возврат;
	КонецЕсли;
	
	тзТоварыУЛ = обУЛ.Товары.Выгрузить();
	тзТоварыВК = ВариантКомплектации.Товары.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("тзТоварыУЛ", тзТоварыУЛ);
	Запрос.Параметры.Вставить("тзТоварыВК", тзТоварыВК);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	т.Номенклатура КАК Номенклатура,
	|	т.Характеристика КАК Характеристика,
	|	т.КоличествоУпаковок КАК КоличествоУпаковок
	|ПОМЕСТИТЬ втТоварыВК
	|ИЗ
	|	&тзТоварыВК КАК т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	т.Номенклатура КАК Номенклатура,
	|	т.Характеристика КАК Характеристика,
	|	т.КоличествоУпаковок КАК КоличествоУпаковок,
	|	т.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист
	|ПОМЕСТИТЬ втТоварыУЛ
	|ИЗ
	|	&тзТоварыУЛ КАК т
	|ГДЕ
	|	НЕ т.ЭтоУпаковочныйЛист
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА втТоварыВК.Номенклатура ЕСТЬ НЕ NULL 
	|			ТОГДА втТоварыВК.Номенклатура
	|		ИНАЧЕ втТоварыУЛ.Номенклатура
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА втТоварыВК.Характеристика ЕСТЬ НЕ NULL 
	|			ТОГДА втТоварыВК.Характеристика
	|		ИНАЧЕ втТоварыУЛ.Характеристика
	|	КОНЕЦ КАК Характеристика,
	|	СУММА(ЕСТЬNULL(втТоварыВК.КоличествоУпаковок, 0)) КАК КоличествоВК,
	|	СУММА(ЕСТЬNULL(втТоварыУЛ.КоличествоУпаковок, 0)) КАК КоличествоУЛ
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	втТоварыВК КАК втТоварыВК
	|		ПОЛНОЕ СОЕДИНЕНИЕ втТоварыУЛ КАК втТоварыУЛ
	|		ПО втТоварыВК.Номенклатура = втТоварыУЛ.Номенклатура
	|			И втТоварыВК.Характеристика = втТоварыУЛ.Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА втТоварыВК.Номенклатура ЕСТЬ НЕ NULL 
	|			ТОГДА втТоварыВК.Номенклатура
	|		ИНАЧЕ втТоварыУЛ.Номенклатура
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА втТоварыВК.Характеристика ЕСТЬ НЕ NULL 
	|			ТОГДА втТоварыВК.Характеристика
	|		ИНАЧЕ втТоварыУЛ.Характеристика
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(Данные.КоличествоВК) КАК ВсегоКоличествоВК,
	|	СУММА(Данные.КоличествоУЛ) КАК ВсегоКоличествоУЛ
	|ПОМЕСТИТЬ ДанныеИтоги
	|ИЗ
	|	Данные КАК Данные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.Номенклатура КАК Номенклатура,
	|	Данные.Характеристика КАК Характеристика,
	|	Данные.КоличествоВК КАК КоличествоВК,
	|	Данные.КоличествоУЛ КАК КоличествоУЛ,
	|	ВЫБОР
	|		КОГДА Данные.КоличествоУЛ < Данные.КоличествоВК
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеПолный,
	|	ВЫБОР
	|		КОГДА Данные.КоличествоУЛ > Данные.КоличествоВК
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Пересорт,
	|	ВЫБОР
	|		КОГДА Данные.КоличествоУЛ > Данные.КоличествоВК
	|			ТОГДА ВЫБОР
	|					КОГДА ДанныеИтоги.ВсегоКоличествоВК = ДанныеИтоги.ВсегоКоличествоУЛ
	|						ТОГДА ЛОЖЬ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеПолныйИПересорт,
	|	ДанныеИтоги.ВсегоКоличествоВК КАК ВсегоКоличествоВК,
	|	ДанныеИтоги.ВсегоКоличествоУЛ КАК ВсегоКоличествоУЛ
	|ПОМЕСТИТЬ ДанныеСвернуто
	|ИЗ
	|	Данные КАК Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеИтоги КАК ДанныеИтоги
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ДанныеСвернуто.Пересорт) КАК НеПолныйИПересорт,
	|	МАКСИМУМ(ДанныеСвернуто.НеПолный) КАК Пересорт,
	|	МАКСИМУМ(ДанныеСвернуто.НеПолный) КАК НеПолный
	|ИЗ
	|	ДанныеСвернуто КАК ДанныеСвернуто";
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();

	НеизменяемыеСтатусы = Новый Массив();
	НеизменяемыеСтатусы.Добавить(Справочники.гф_СостянияКоробов.Расформирован);
	НеизменяемыеСтатусы.Добавить(Справочники.гф_СостянияКоробов.Реализован);
	//НеизменяемыеСтатусы.Добавить(Справочники.гф_СостянияКоробов.Сформирован);
	
	Состояние = обУЛ.гф_СостояниеКороба;
	
	Если Выборка["НеПолныйИПересорт"] Тогда
		Состояние = Справочники.гф_СостянияКоробов.НеПолныйИПересорт;
	ИначеЕсли Выборка["Пересорт"] Тогда
		Состояние = Справочники.гф_СостянияКоробов.Пересорт;
	ИначеЕсли Выборка["НеПолный"] Тогда
		Состояние = Справочники.гф_СостянияКоробов.НеПолный;
	Иначе
		Если НеизменяемыеСтатусы.Найти(Состояние) = Неопределено Тогда
			Состояние =  Справочники.гф_СостянияКоробов.ПолныйКомплект;
		КонецЕсли;
	КонецЕсли;
	
	обУЛ.гф_СостояниеКороба = Состояние;
	
КонецПроцедуры

Функция ПолучитьКоличествоШтрихкодовПоНоменклатуреХарактеристике(обАгрегат, СтруктураРеквизитов)
	
	тзВложенныеШтрихкоды = обАгрегат.ВложенныеШтрихкоды.Выгрузить();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	т.Штрихкод КАК Штрихкод
	|ПОМЕСТИТЬ Штрихкоды
	|ИЗ
	|	&тзВложенныеШтрихкоды КАК т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика,
	|	СУММА(1) КАК Количество
	|ИЗ
	|	Штрихкоды КАК Штрихкоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО Штрихкоды.Штрихкод = ШтрихкодыУпаковокТоваров.Ссылка
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.Номенклатура = &Номенклатура
	|	И ШтрихкодыУпаковокТоваров.Характеристика = &Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	ШтрихкодыУпаковокТоваров.Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика");	
	Запрос.УстановитьПараметр("тзВложенныеШтрихкоды", тзВложенныеШтрихкоды);
	Запрос.УстановитьПараметр("Номенклатура", СтруктураРеквизитов["Номенклатура"]);
	Запрос.УстановитьПараметр("Характеристика", СтруктураРеквизитов["Характеристика"]);
	Результат= Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Возврат Выборка;
		
КонецФункции

Функция НайтиШтрикходУпаковкиТоваровИУпаковочныйЛистПоNVE(Агрегат) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК ШтрихКодУпаковки,
	|	УпаковочныйЛист.Ссылка КАК УпаковочныйЛист
	|ИЗ
	|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО (УпаковочныйЛист.гф_Агрегация = ШтрихкодыУпаковокТоваров.Ссылка)
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода = &ЗначениеШтрихкода
	|	И ШтрихкодыУпаковокТоваров.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка)";
	Запрос.УстановитьПараметр("ЗначениеШтрихкода", Агрегат);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		СтруктураОтвета = Новый Структура("ШтрихКодУпаковки, УпаковочныйЛист", Выборка.ШтрихКодУпаковки, Выборка.УпаковочныйЛист);
		Возврат СтруктураОтвета;
	КонецЕсли;
	
КонецФункции

// vvv Галфинд \ Sakovich 30.05.2023
// вызов из обработчика рЗ "гф_ОбработкаПересортицы"
Процедура ОбработкаПересортицы() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ПересортицаТоваров.Ссылка КАК Ссылка,
	|	ПересортицаТоваров.Организация КАК Организация,
	|	ПересортицаТоваров.Склад КАК Склад
	|ПОМЕСТИТЬ ДокументыПересортицы
	|ИЗ
	|	Документ.ПересортицаТоваров КАК ПересортицаТоваров
	|ГДЕ
	|	НЕ ПересортицаТоваров.Проведен
	|	И НЕ ПересортицаТоваров.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыПересортицы.Ссылка КАК Пересортица,
	|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Ссылка КАК Эмиссия
	|ПОМЕСТИТЬ ПересортицаУдаляемыеШКЭмиссия
	|ИЗ
	|	ДокументыПересортицы КАК ДокументыПересортицы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.гф_ПересортицаУдаляемыеШК КАК гф_ПересортицаУдаляемыеШК
	|		ПО ДокументыПересортицы.Ссылка = гф_ПересортицаУдаляемыеШК.Пересортица
	|			И (НЕ гф_ПересортицаУдаляемыеШК.Обработан)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ КАК ЗаказНаЭмиссиюКодовМаркировкиСУЗ
	|		ПО ДокументыПересортицы.Ссылка = ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(гф_ГлобальныеЗначенияСписок.Значение КАК Справочник.Склады) КАК Значение,
	|	ВЫРАЗИТЬ(гф_ГлобальныеЗначенияСписок.Значение КАК Справочник.Склады).гф_Организация КАК Организация
	|ПОМЕСТИТЬ ТаможенныеСклады
	|ИЗ
	|	ПланВидовХарактеристик.гф_ГлобальныеЗначения.Список КАК гф_ГлобальныеЗначенияСписок
	|ГДЕ
	|	гф_ГлобальныеЗначенияСписок.Ссылка.Ключ = ""гф_ГлобальныеЗначенияТаможенныйСклад""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыПересортицы.Ссылка КАК Пересортица,
	|	ДокументыПересортицы.Организация КАК Организация,
	|	ДокументыПересортицы.Склад КАК Склад,
	|	ДокументыПересортицы.Ссылка.гф_IDКороба КАК УЛ,
	|	УпаковочныйЛист.гф_Агрегация КАК NVE,
	|	ВЫРАЗИТЬ(УпаковочныйЛист.гф_Поставка КАК Документ.ПриобретениеТоваровУслуг) КАК ПТУ
	|ПОМЕСТИТЬ ПересортицаУЛ
	|ИЗ
	|	ДокументыПересортицы КАК ДокументыПересортицы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаможенныеСклады КАК ТаможенныеСклады
	|		ПО ДокументыПересортицы.Организация = ТаможенныеСклады.Организация
	|			И ДокументыПересортицы.Склад = ТаможенныеСклады.Значение
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист КАК УпаковочныйЛист
	|		ПО ДокументыПересортицы.Ссылка.гф_IDКороба = УпаковочныйЛист.Ссылка
	|ГДЕ
	|	ВЫРАЗИТЬ(УпаковочныйЛист.гф_Поставка КАК Документ.ПриобретениеТоваровУслуг) ЕСТЬ НЕ NULL 
	|	И ВЫРАЗИТЬ(УпаковочныйЛист.гф_Поставка КАК Документ.ПриобретениеТоваровУслуг).Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПересортицаУЛ.Пересортица КАК Пересортица,
	|	ПересортицаУЛ.Организация КАК Организация,
	|	ПересортицаУЛ.Склад КАК Склад,
	|	ПересортицаУЛ.УЛ КАК УЛ,
	|	ПересортицаУЛ.NVE КАК NVE,
	|	ПересортицаУЛ.ПТУ КАК ПТУ
	|ПОМЕСТИТЬ ПересортицаПТУ
	|ИЗ
	|	ПересортицаУЛ КАК ПересортицаУЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.гф_ОбработкаИсключений.СрезПоследних(
	|				,
	|				NVE В
	|					(ВЫБРАТЬ
	|						т.NVE
	|					ИЗ
	|						ПересортицаУЛ КАК т)) КАК гф_ОбработкаИсключенийСрезПоследних
	|		ПО (гф_ОбработкаИсключенийСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.гф_СтатусыИсключений.ЭтикеткиНаклеены))
	|			И ПересортицаУЛ.NVE = гф_ОбработкаИсключенийСрезПоследних.NVE
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПересортицаПТУ.Организация КАК Организация,
	|	ПересортицаПТУ.Склад КАК Склад,
	|	ПересортицаПТУ.Пересортица КАК Пересортица,
	|	ПересортицаПТУ.ПТУ КАК ПТУ,
	|	ТаможеннаяДекларацияИмпортТовары.Ссылка КАК ГТД,
	|	ПересортицаПТУ.УЛ КАК УЛ,
	|	ПересортицаПТУ.NVE КАК NVE,
	|	ПересортицаПТУ.NVE.ЗначениеШтрихкода КАК ЗначениеШтрихкодаNVE,
	|	ПересортицаУдаляемыеШКЭмиссия.Эмиссия КАК Эмиссия
	|ИЗ
	|	ПересортицаПТУ КАК ПересортицаПТУ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТаможеннаяДекларацияИмпортТовары
	|		ПО (ТаможеннаяДекларацияИмпортТовары.Ссылка.Проведен)
	|			И (ПересортицаПТУ.ПТУ = ТаможеннаяДекларацияИмпортТовары.ДокументПоступления)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаможенныеСклады КАК ТаможенныеСклады
	|			ПО (ПриходныйОрдерНаТовары.Склад = ТаможенныеСклады.Значение)
	|		ПО (ПересортицаПТУ.ПТУ = ПриходныйОрдерНаТовары.Распоряжение)
	|			И (ПриходныйОрдерНаТовары.Проведен)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПересортицаУдаляемыеШКЭмиссия КАК ПересортицаУдаляемыеШКЭмиссия
	|		ПО (ПересортицаПТУ.Пересортица = ПересортицаУдаляемыеШКЭмиссия.Пересортица)");
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		// Выборка - поля: Организация, Склад, Пересортица, ПТУ, ГТД, УЛ, NVE, ЗначениеШтрихкодаNVE, Эмиссия
		ОбПересортица = Выборка["Пересортица"].ПолучитьОбъект();
		Если ОбПересортица <> Неопределено Тогда
			
			ОшибкаПроведенияПересортицы = Ложь;
			ОшибкаИзмененияУпаковочныйЛистШтрихкодУпаковки = Ложь;
			Попытка
				ОбПересортица.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				ЗаписьЖурналаРегистрации("Ошибка проведения", УровеньЖурналаРегистрации.Предупреждение, Метаданные.Документы.ПересортицаТоваров, Выборка["Пересортица"], ТекстОшибки);
				ОшибкаПроведенияПересортицы = Истина;
			КонецПопытки;
			
			Если ЗначениеЗаполнено(Выборка["Эмиссия"]) И Не ОшибкаПроведенияПересортицы Тогда
				Попытка
					ИзменитьДанныеУпаковочныйЛистИШтрихкодУпаковки(
					Выборка["ЗначениеШтрихкодаNVE"], 
					Выборка["Эмиссия"], 
					Выборка["Пересортица"]);
				Исключение
					ТекстОшибки = ОписаниеОшибки();
					ЗаписьЖурналаРегистрации("Обработка пересортицы. Ошибка обработки УЛ/Агрегата", УровеньЖурналаРегистрации.Предупреждение, , Выборка["УЛ"], ТекстОшибки);
					ОшибкаИзмененияУпаковочныйЛистШтрихкодУпаковки = Истина;
				КонецПопытки;
			КонецЕсли;
			
			// vvv Галфинд \ Sakovich 01.06.2023
			// установка статуса записей гф_ПересортицаУдаляемыеШК выполняется в процедуре "ИзменитьДанныеУпаковочныйЛистИШтрихкодУпаковки"
			
			//Если Не (ОшибкаПроведенияПересортицы ИЛИ ОшибкаИзмененияУпаковочныйЛистШтрихкодУпаковки) Тогда
			//	НаборУдаляемыеШК = РегистрыСведений.гф_ПересортицаУдаляемыеШК.СоздатьНаборЗаписей();
			//	НаборУдаляемыеШК.Отбор["Пересортица"].Установить(Выборка["Пересортица"]);
			//	НаборУдаляемыеШК.Отбор["НомерЗаписи"].Установить(1);
			//	НаборУдаляемыеШК.Прочитать();
			//	Для каждого Запись Из НаборУдаляемыеШК Цикл
			//		Запись["Обработан"] = Истина;
			//	КонецЦикла;
			//	НаборУдаляемыеШК.Записать();
			//КонецЕсли;
			// ^^^ Галфинд \ Sakovich 01.06.2023 
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ^^^ Галфинд \ Sakovich 30.05.2023

// vvv Галфинд \ Sakovich 04.07.2023
// вызов из обработчика рЗ "гф_ОбработкаУдаления"
Процедура ОбработкаУдаления() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВЫРАЗИТЬ(гф_ГлобальныеЗначенияСписок.Значение КАК Справочник.Склады) КАК Склад,
	|	ВЫРАЗИТЬ(гф_ГлобальныеЗначенияСписок.Значение КАК Справочник.Склады).гф_Организация КАК Организация
	|ПОМЕСТИТЬ ОсновныеСклады
	|ИЗ
	|	ПланВидовХарактеристик.гф_ГлобальныеЗначения.Список КАК гф_ГлобальныеЗначенияСписок
	|ГДЕ
	|	гф_ГлобальныеЗначенияСписок.Ссылка.Ключ = ""гф_ГлобальныеЗначенияОсновнойСклад""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(гф_ГлобальныеЗначенияСписок.Значение КАК Справочник.Склады) КАК Склад,
	|	ВЫРАЗИТЬ(гф_ГлобальныеЗначенияСписок.Значение КАК Справочник.Склады).гф_Организация КАК Организация
	|ПОМЕСТИТЬ СкладыНедостачи
	|ИЗ
	|	ПланВидовХарактеристик.гф_ГлобальныеЗначения.Список КАК гф_ГлобальныеЗначенияСписок
	|ГДЕ
	|	гф_ГлобальныеЗначенияСписок.Ссылка.Ключ = ""гф_ГлобальныеЗначенияСкладИзлишкиНедостачи""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(гф_СтатусОтгрузкиСрезПоследних.Документ КАК Документ.ПриобретениеТоваровУслуг) КАК ПТУ,
	|	гф_СтатусОтгрузкиСрезПоследних.ГотовоКПодачеГТД КАК ГотовоКПодачеГТД,
	|	гф_СтатусОтгрузкиСрезПоследних.Отработан КАК Отработан
	|ПОМЕСТИТЬ ПТУ
	|ИЗ
	|	РегистрСведений.гф_СтатусОтгрузки.СрезПоследних КАК гф_СтатусОтгрузкиСрезПоследних
	|ГДЕ
	|	ВЫРАЗИТЬ(гф_СтатусОтгрузкиСрезПоследних.Документ КАК Документ.ПриобретениеТоваровУслуг) ЕСТЬ НЕ NULL 
	|	И ВЫРАЗИТЬ(гф_СтатусОтгрузкиСрезПоследних.Документ КАК Документ.ПриобретениеТоваровУслуг).Проведен
	|	И гф_СтатусОтгрузкиСрезПоследних.ГотовоКПодачеГТД
	|	И НЕ гф_СтатусОтгрузкиСрезПоследних.Отработан
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПТУ.ПТУ КАК ПТУ,
	|	ПеремещениеТоваров.Ссылка КАК Перемещение,
	|	ПриходныйОрдерНаТовары.Ссылка КАК ПОТ
	|ПОМЕСТИТЬ ДокументыОснования
	|ИЗ
	|	ПТУ КАК втПТУ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОсновныеСклады КАК ОсновныеСклады
	|				ПО ПриходныйОрдерНаТовары.Склад = ОсновныеСклады.Склад
	|			ПО ПеремещениеТоваров.Ссылка = ПриходныйОрдерНаТовары.Распоряжение
	|				И (ПриходныйОрдерНаТовары.Проведен)
	|				И (ПриходныйОрдерНаТовары.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриходныхОрдеров.Принят))
	|		ПО втПТУ.ПТУ = ПеремещениеТоваров.ДокументОснование
	|			И (ПеремещениеТоваров.Проведен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриобретениеТоваровУслуггф_ПродукцияВКоробах.Ссылка КАК ПТУ,
	|	ПриобретениеТоваровУслуггф_ПродукцияВКоробах.IDКороба КАК УЛ,
	|	ПриобретениеТоваровУслуггф_ПродукцияВКоробах.IDКороба.гф_Агрегация КАК Агрегат,
	|	гф_ПересортицаУдаляемыеШК.ШтрихкодУпаковки КАК КМ,
	|	гф_ПересортицаУдаляемыеШК.ШтрихкодУпаковки.Номенклатура КАК Номенклатура,
	|	гф_ПересортицаУдаляемыеШК.ШтрихкодУпаковки.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.гф_ПродукцияВКоробах КАК ПриобретениеТоваровУслуггф_ПродукцияВКоробах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыОснования КАК ДокументыОснования
	|		ПО (ДокументыОснования.ПТУ = ПриобретениеТоваровУслуггф_ПродукцияВКоробах.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.гф_ПересортицаУдаляемыеШК КАК гф_ПересортицаУдаляемыеШК
	|		ПО ПриобретениеТоваровУслуггф_ПродукцияВКоробах.IDКороба = гф_ПересортицаУдаляемыеШК.Пересортица
	|			И (гф_ПересортицаУдаляемыеШК.ШтрихкодУпаковки.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.ПТУ КАК ПТУ,
	|	Данные.УЛ КАК УпаковочныйЛист,
	|	Данные.УЛ.Код КАК IDКороба,
	|	Данные.УЛ.ВсегоМест КАК КоличествоПар,
	|	Данные.Номенклатура.Артикул КАК Артикул,
	|	Данные.Агрегат КАК Агрегат,
	|	Данные.КМ КАК КМ,
	|	Данные.Номенклатура КАК Номенклатура,
	|	Данные.Характеристика КАК Характеристика,
	|	СУММА(1) КАК Количество,
	|	СУММА(1) КАК КоличествоУпаковок
	|ИЗ
	|	Данные КАК Данные
	|
	|СГРУППИРОВАТЬ ПО
	|	Данные.ПТУ,
	|	Данные.УЛ,
	|	Данные.Агрегат,
	|	Данные.КМ,
	|	Данные.Номенклатура,
	|	Данные.Характеристика,
	|	Данные.УЛ.Код,
	|	Данные.УЛ.ВсегоМест,
	|	Данные.Номенклатура.Артикул
	|ИТОГИ ПО
	|	ПТУ,
	|	УпаковочныйЛист,
	|	Агрегат";
	
	Результат = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	ВыборкаОсновныеСклады = Результат[0].Выбрать();
	ВыборкаСкладыНедостач = Результат[1].Выбрать();
	
	тзНоменклатура = Новый ТаблицаЗначений;
	Колонки = тзНоменклатура.Колонки;
	Колонки.Добавить("Номенклатура");
	Колонки.Добавить("Характеристика");
	Колонки.Добавить("Количество");
	Колонки.Добавить("КоличествоУпаковок");
	
	тзШтрихкодыУпаковок = Новый ТаблицаЗначений;
	тзШтрихкодыУпаковок.Колонки.Добавить("ШтрихкодУпаковки");
	
	тзТоварыВКоробах = Новый ТаблицаЗначений;
	Колонки = тзТоварыВКоробах.Колонки;
	Колонки.Добавить("УпаковочныйЛист");
	Колонки.Добавить("IDКороба");
	Колонки.Добавить("КоличествоПар");
	Колонки.Добавить("Артикул");
	
	тзСоставКМДляУдаления = Новый ТаблицаЗначений;
	Колонки = тзСоставКМДляУдаления.Колонки;
	Колонки.Добавить("УпаковочныйЛист");
	Колонки.Добавить("Агрегат");
	Колонки.Добавить("КМ");
	Колонки.Добавить("Номенклатура");
	Колонки.Добавить("Характеристика");
	
	ВыборкаПТУ = Результат[5].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПТУ.Следующий() Цикл
		тзНоменклатура.Очистить();
		тзШтрихкодыУпаковок.Очистить();
		тзТоварыВКоробах.Очистить();
		тзСоставКМДляУдаления.Очистить();
		
		ОсновнойСклад = Неопределено;
		СкладНедостач = Неопределено;
		
		ДокПТУ = ВыборкаПТУ["ПТУ"];
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокПТУ, "Организация");
		стрПоискаСкладов = Новый Структура("Организация", Организация);
		ВыборкаОсновныеСклады.Сбросить();
		Если ВыборкаОсновныеСклады.НайтиСледующий(стрПоискаСкладов) Тогда
			ОсновнойСклад = ВыборкаОсновныеСклады["Склад"];
		КонецЕсли;
		ВыборкаСкладыНедостач.Сбросить();
		Если ВыборкаСкладыНедостач.НайтиСледующий(стрПоискаСкладов) Тогда
			СкладНедостач = ВыборкаСкладыНедостач["Склад"];
		КонецЕсли;
		Если ОсновнойСклад = Неопределено Или СкладНедостач = Неопределено Тогда
			// не удалось определить склад-отправитель или склад-получатель
			Продолжить;
		КонецЕсли;
		
		ВыборкаУЛ = ВыборкаПТУ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаУЛ.Следующий() Цикл
			ВыборкаАгрегат = ВыборкаУЛ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаАгрегат.Следующий() Цикл
				ВыборкаДетали = ВыборкаАгрегат.Выбрать();
				Пока ВыборкаДетали.Следующий() Цикл
					нс = тзНоменклатура.Добавить();
					ЗаполнитьЗначенияСвойств(нс, ВыборкаДетали);
					
					нсКМ = тзШтрихкодыУпаковок.Добавить();
					нсКМ["ШтрихкодУпаковки"] = ВыборкаДетали["КМ"];
					
					стрПоискаУЛ = Новый Структура("УпаковочныйЛист", ВыборкаУЛ["УпаковочныйЛист"]);
					мСтрокУЛ = тзТоварыВКоробах.НайтиСтроки(стрПоискаУЛ);
					Если мСтрокУЛ.Количество() = 0 Тогда
						нсУЛ = тзТоварыВКоробах.Добавить();
						ЗаполнитьЗначенияСвойств(нсУЛ, ВыборкаДетали);
					КонецЕсли;
					
					нсСоставКМ = тзСоставКМДляУдаления.Добавить();
					ЗаполнитьЗначенияСвойств(нсСоставКМ, ВыборкаДетали);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		ТоварыДляПеремещения = ДокПТУ.Товары.Выгрузить();
		
		тзНоменклатура.Свернуть("Номенклатура, Характеристика", "Количество, КоличествоУпаковок");
		мСтрокДляПеремещения = Новый Массив;
		мСтрокУдаляемых = Новый Массив;
		Для каждого стрНом Из тзНоменклатура Цикл
			стрПоиска = Новый Структура("Номенклатура, Характеристика", стрНом["Номенклатура"], стрНом["Характеристика"]);
			мСтрок = ТоварыДляПеремещения.НайтиСтроки(стрПоиска);
			Если мСтрок.Количество() > 0 Тогда
				строкаДляПеремещения = мСтрок[0];
				ЗаполнитьЗначенияСвойств(строкаДляПеремещения, стрНом, "Количество, КоличествоУпаковок");
				строкаДляПеремещения["АналитикаУчетаНоменклатуры"] = "";
				строкаДляПеремещения["Склад"] = "";
				мСтрокДляПеремещения.Добавить(строкаДляПеремещения);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого стрТз Из ТоварыДляПеремещения Цикл
			Если мСтрокДляПеремещения.Найти(стрТз) = Неопределено Тогда
				мСтрокУдаляемых.Добавить(стрТз);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Эл Из мСтрокУдаляемых Цикл
			ТоварыДляПеремещения.Удалить(Эл);
		КонецЦикла;
		
		#Область Перемещение
		обПеремещение = Документы.ПеремещениеТоваров.СоздатьДокумент();
		ДанныеЗаполнения = Новый Структура("Товары, Склад, Организация, СкладПолучатель", 
		ТоварыДляПеремещения,
		ОсновнойСклад,
		Организация,
		СкладНедостач);
		
		обПеремещение.Дата = ТекущаяДатаСеанса();
		обПеремещение.Заполнить(ДанныеЗаполнения);
		обПеремещение.Статус = Перечисления.СтатусыПеремещенийТоваров.Отгружено;
		обПеремещение.ДокументОснование = ДокПТУ;
		
		обПеремещение.гф_ШтрихкодыУпаковок.Загрузить(тзШтрихкодыУпаковок);
		//обПеремещение.гф_ТоварыВКоробах.Загрузить(тзТоварыВКоробах);
		
		Попытка
			обПеремещение.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Инфо = "Не удалось создать документ ""Перемещение товаров"" на основании документа " + ДокПТУ;
			ЗаписьЖурналаРегистрации("РегламентноеЗадание.ОбработкаУдаления",
			УровеньЖурналаРегистрации.Предупреждение, , , Инфо);
			Продолжить;
		КонецПопытки;
		#КонецОбласти
		
		#Область Данные_ордеров
		НужноСоздаватьРасходныйОрдер = Ложь;
		НужноСоздаватьПриходныйОрдер = Ложь;
		
		Ссылка = обПеремещение["Ссылка"];
		Статус = обПеремещение["Статус"];
		СкладОтправитель = обПеремещение["СкладОтправитель"];
		СкладПолучатель = обПеремещение["СкладПолучатель"];
		
		СкладОтправительОрдерный = обПеремещение.ОпределитьОрдерныйЛиСклад(СкладОтправитель);
		СкладПолучательОрдерный  = обПеремещение.ОпределитьОрдерныйЛиСклад(СкладПолучатель);
		СкладПолучательКоробочный = УправлениеСвойствами.ЗначениеСвойства(СкладПолучатель, "гф_СкладыТоварыВКоробах") = Истина;
		СкладОтправительКоробочный = УправлениеСвойствами.ЗначениеСвойства(СкладОтправитель, "гф_СкладыТоварыВКоробах") = Истина;
		
		ЗапросТекст = "
		|ВЫБРАТЬ
		|	регТКП.Номенклатура КАК Номенклатура,
		|	регТКП.Характеристика КАК Характеристика,
		|	регТКП.Назначение КАК Назначение,
		|	регТКП.Отправитель КАК Отправитель,
		|	регТКП.Склад КАК Получатель,
		|	регТКП.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	0 КАК КоличествоРОТ,
		|	регТКП.КОформлениюПоступленийПоРаспоряжениюПриход КАК КоличествоПОТ,
		|	ЛОЖЬ КАК РОТ,
		|	ВЫБОР
		|		КОГДА регТКП.КОформлениюПоступленийПоРаспоряжениюПриход <> 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПОТ,
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
		|	регТКП.Номенклатура.ЕдиницаИзмерения КАК Упаковка,
		|	&Перемещение КАК ДокументОтгрузки,
		|	&Перемещение КАК Распоряжение
		|ПОМЕСТИТЬ Обороты
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению.Обороты(, , , ДокументПоступления = &Перемещение) КАК регТКП
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ПО (регТКП.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура)
		|			И (регТКП.Характеристика = ШтрихкодыНоменклатуры.Характеристика)
		|			И (регТКП.Номенклатура.ЕдиницаИзмерения = ШтрихкодыНоменклатуры.Упаковка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	регТКО.Номенклатура,
		|	регТКО.Характеристика,
		|	регТКО.Назначение,
		|	регТКО.Склад,
		|	регТКО.Получатель,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка),
		|	регТКО.КОтгрузкеПриход,
		|	0,
		|	ВЫБОР
		|		КОГДА регТКО.КОтгрузкеПриход <> 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ЛОЖЬ,
		|	ШтрихкодыНоменклатуры.Штрихкод,
		|	регТКО.Номенклатура.ЕдиницаИзмерения,
		|	&Перемещение,
		|	&Перемещение
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Обороты(, , , ДокументОтгрузки = &Перемещение) КАК регТКО
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ПО регТКО.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
		|			И регТКО.Характеристика = ШтрихкодыНоменклатуры.Характеристика
		|			И регТКО.Номенклатура.ЕдиницаИзмерения = ШтрихкодыНоменклатуры.Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Обороты.Номенклатура КАК Номенклатура,
		|	Обороты.Характеристика КАК Характеристика,
		|	Обороты.Назначение КАК Назначение,
		|	Обороты.Отправитель КАК Отправитель,
		|	Обороты.Получатель КАК Получатель,
		|	МАКСИМУМ(Обороты.ХозяйственнаяОперация) КАК ХозяйственнаяОперация,
		|	СУММА(Обороты.КоличествоРОТ) КАК КоличествоРОТ,
		|	СУММА(Обороты.КоличествоПОТ) КАК КоличествоПОТ,
		|	МАКСИМУМ(Обороты.РОТ) КАК РОТ,
		|	МАКСИМУМ(Обороты.ПОТ) КАК ПОТ,
		|	Обороты.Штрихкод КАК Штрихкод,
		|	Обороты.Упаковка КАК Упаковка,
		|	Обороты.ДокументОтгрузки КАК ДокументОтгрузки,
		|	Обороты.Распоряжение КАК Распоряжение
		|ПОМЕСТИТЬ ОборотыСгруппированно
		|ИЗ
		|	Обороты КАК Обороты
		|
		|СГРУППИРОВАТЬ ПО
		|	Обороты.Номенклатура,
		|	Обороты.Характеристика,
		|	Обороты.Назначение,
		|	Обороты.Отправитель,
		|	Обороты.Получатель,
		|	Обороты.Штрихкод,
		|	Обороты.Упаковка,
		|	Обороты.ДокументОтгрузки,
		|	Обороты.Распоряжение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ОборотыСгруппированно.КоличествоРОТ), 0) КАК КоличествоРОТ,
		|	ЕСТЬNULL(СУММА(ОборотыСгруппированно.КоличествоПОТ), 0) КАК КоличествоПОТ
		|ИЗ
		|	ОборотыСгруппированно КАК ОборотыСгруппированно
		|";
		Запрос.Текст = ЗапросТекст;
		Запрос.УстановитьПараметр("Перемещение", Ссылка);
		ПакетРезультатов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
		ОборотыИтоги = ПакетРезультатов[2];
		ВыборкаИтоги = ОборотыИтоги.Выбрать();
		ВыборкаИтоги.Следующий();
		ЕстьТоварыДляРОТ = ВыборкаИтоги["КоличествоРОТ"] <> 0;
		ЕстьТоварыДляПОТ = ВыборкаИтоги["КоличествоПОТ"] <> 0;
		
		
		Если СкладОтправительОрдерный Тогда
			УжеЕстьРасходныйОрдер = обПеремещение.ПроверитьНаличиеОрдераПоОснованию("РасходныйОрдерНаТовары");
			Если Не УжеЕстьРасходныйОрдер 
				И ЕстьТоварыДляРОТ Тогда
				НужноСоздаватьРасходныйОрдер = Истина;	
			КонецЕсли;
		КонецЕсли;
		
		Если СкладПолучательОрдерный Тогда
			УжеЕстьПриходныйОрдер = обПеремещение.ПроверитьНаличиеОрдераПоОснованию("ПриходныйОрдерНаТовары");
			Если Не УжеЕстьПриходныйОрдер
				И ЕстьТоварыДляПОТ Тогда
				НужноСоздаватьПриходныйОрдер = Истина;	
			КонецЕсли;
		КонецЕсли;
		#КонецОбласти
		
		#Область Приходный_ордер_на_товары
		Если НужноСоздаватьПриходныйОрдер Тогда
			СтруктураПолейЗаполнения = Новый Структура();
			СтруктураПолейЗаполнения.Вставить("Склад", "СкладПолучатель");
			СтруктураПолейЗаполнения.Вставить("Распоряжение", "Ссылка");
			СтруктураПолейЗаполнения.Вставить("ДатаПоступления");
			СтруктураПолейЗаполнения.Вставить("Отправитель", "СкладОтправитель");
			СтруктураПолейЗаполнения.Вставить("ДатаВходящегоДокумента", "Дата");
			СтруктураПолейЗаполнения.Вставить("НомерВходящегоДокумента", "Номер");
			СтруктураПолейЗаполнения.Вставить("ХозяйственнаяОперация");
			
			СтруктРеквизитов = Новый ФиксированнаяСтруктура(СтруктураПолейЗаполнения);
			ЗначенияРеквизитовОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, СтруктРеквизитов);
			
			ДанныеЗаполнения = Новый Структура(
			"Склад, Помещение, Распоряжение, ДатаПоступления, ЗонаПриемки, СкладскаяОперация, " + 
			"Отправитель, ДатаВходящегоДокумента, НомерВходящегоДокумента, ХозяйственнаяОперация");
			ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ЗначенияРеквизитовОснования);
			ДанныеЗаполнения["СкладскаяОперация"] = Перечисления.СкладскиеОперации.ПриемкаПоПеремещению;
			
			обПрОрдер = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
			обПрОрдер["Дата"] = ТекущаяДатаСеанса();
			обПрОрдер.Заполнить(ДанныеЗаполнения);
			обПрОрдер["Ответственный"] = Пользователи.АвторизованныйПользователь();
			обПрОрдер["Статус"] = Перечисления.СтатусыПриходныхОрдеров.КПоступлению;
			
			ТоварыКПоступлению = гф_ПеремещениеСервер.ДанныеЗаполненияПриходныйОрдерНаТовары(Ссылка, Ложь);
			тзТоварыКПоступлению = ТоварыКПоступлению.Выгрузить();
			обПрОрдер.Товары.Загрузить(тзТоварыКПоступлению);
			обПрОрдер["РежимПросмотраПоТоварам"] = 1;
			обПрОрдер.ВсегоМест = обПрОрдер.Товары.Итог("КоличествоУпаковок");
			
			Распоряжение = обПрОрдер.Распоряжение;
			
			обПрОрдер.ШтрихкодыУпаковок.Загрузить(тзШтрихкодыУпаковок);
			
			ПерезаписыватьПОТ = Истина;
			Попытка
				обПрОрдер.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ПерезаписыватьПОТ = Ложь;
				Инфо = "Не удалось создать документ ""Приходный ордер на товары"" на основании документа " + Ссылка;
				ЗаписьЖурналаРегистрации("РегламентноеЗадание.ОбработкаУдаления",
				УровеньЖурналаРегистрации.Предупреждение, , , Инфо);
			КонецПопытки;
		КонецЕсли;
		#КонецОбласти
		
		#Область Расходный_ордер_на_товары
		
		Если НужноСоздаватьРасходныйОрдер Тогда
			ДатаОрдера = ТекущаяДатаСеанса();
			СтруктураЗаполнения = Новый Структура();
			СтруктураЗаполнения.Вставить("Склад", СкладОтправитель);
			СтруктураЗаполнения.Вставить("Получатель", СкладПолучатель);
			СтруктураЗаполнения.Вставить("ДатаОтгрузки", ДатаОрдера);
			СтруктураЗаполнения.Вставить("Дата", ДатаОрдера);
			СтруктураЗаполнения.Вставить("СкладскаяОперация", Перечисления.СкладскиеОперации.ОтгрузкаПоПеремещению);
			СтруктураЗаполнения.Вставить("РежимПросмотраПоТоварам", 1);
			
			обРасхОрдер = Документы.РасходныйОрдерНаТовары.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(обРасхОрдер, СтруктураЗаполнения);
			
			
			ТоварыКОтгрузке = ПакетРезультатов[1].Выгрузить();
			мСтрок = ТоварыКОтгрузке.НайтиСтроки(Новый Структура("РОТ", Истина));
			Для каждого эл Из мСтрок Цикл
				нс = обРасхОрдер.ТоварыПоРаспоряжениям.Добавить();
				ЗаполнитьЗначенияСвойств(нс, эл);
				нс["Количество"] =эл["КоличествоРОТ"];
			КонецЦикла;
			ДанныеЗаполнения = Новый Структура();
			обРасхОрдер.Заполнить(ДанныеЗаполнения);
			
			
			ОтгружаемыеТовары = гф_ПеремещениеСервер.ДанныеЗаполненияРасходныОрдерйНаТовары( 
			Ссылка, 
			Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать, 
			Ложь);
			тчОтгружаемыеТовары = ОтгружаемыеТовары.Выгрузить();
			обРасхОрдер.ОтгружаемыеТовары.Загрузить(тчОтгружаемыеТовары);
			обРасхОрдер.ВсегоМест = обРасхОрдер.ОтгружаемыеТовары.Итог("КоличествоУпаковок");
			
			// пересчет товаров по распоряжениям по отгруженным товарам
			тзОтгружаемыеТоварыПолная = обРасхОрдер.ОтгружаемыеТовары.Выгрузить();
			мСтрокТовары = тзОтгружаемыеТоварыПолная.НайтиСтроки(Новый Структура("ЭтоУпаковочныйЛист", Ложь));
			тзОтгружаемыеТовары = тзОтгружаемыеТоварыПолная.Скопировать(мСтрокТовары);
			тзОтгружаемыеТовары.Свернуть("Номенклатура, Характеристика, Назначение", "Количество");
			тзотгружаемыеТовары.Колонки.Добавить("Распоряжение");
			тзОтгружаемыеТовары.ЗаполнитьЗначения(Ссылка, "Распоряжение");
			обРасхОрдер.ТоварыПоРаспоряжениям.Загрузить(тзОтгружаемыеТовары);
			
			обРасхОрдер.ШтрихкодыУпаковок.Загрузить(тзШтрихкодыУпаковок);
			
			обРасхОрдер.Статус = Перечисления.СтатусыРасходныхОрдеров.Подготовлено;
			
			ПерезаписыватьРОТ = Истина;
			Попытка
				обРасхОрдер.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ПерезаписыватьРОТ = Ложь;
				Инфо = "Не удалось создать документ ""Расходный ордер на товары"" по распоряжению " + Ссылка;
				ЗаписьЖурналаРегистрации("РегламентноеЗадание.ОбработкаУдаления",
				УровеньЖурналаРегистрации.Предупреждение, , , Инфо);
			КонецПопытки;
			
		КонецЕсли;
		#КонецОбласти
		
		#Область Перепроведение_документов
		Если НужноСоздаватьРасходныйОрдер И ПерезаписыватьРОТ Тогда
			обРасхОрдер.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
			Попытка
				обРасхОрдер.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Инфо = "Не удалось записать документ ""Расходный ордер на товары"" в статусе ""Отгружен"".";
				ЗаписьЖурналаРегистрации("РегламентноеЗадание.ОбработкаУдаления",
				УровеньЖурналаРегистрации.Предупреждение, , обРасхОрдер.Ссылка, Инфо);
			КонецПопытки;
		КонецЕсли;
		
		Если НужноСоздаватьПриходныйОрдер И ПерезаписыватьПОТ Тогда
			обПрОрдер["Статус"] = Перечисления.СтатусыПриходныхОрдеров.Принят;
			Попытка
				обПрОрдер.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Инфо = "Не удалось записать документ ""Приходный ордер на товары"" в статусе ""Принят"".";
				ЗаписьЖурналаРегистрации("РегламентноеЗадание.ОбработкаУдаления",
				УровеньЖурналаРегистрации.Предупреждение, , обПрОрдер.Ссылка, Инфо);
			КонецПопытки;			
		КонецЕсли;
		
		обПеремещение.Статус = Перечисления.СтатусыПеремещенийТоваров.Принято;
		Попытка
			обПеремещение.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Инфо = "Не удалось записать документ ""Перемещение товаров"" в статусе ""Принято"".";
			ЗаписьЖурналаРегистрации("РегламентноеЗадание.ОбработкаУдаления",
			УровеньЖурналаРегистрации.Предупреждение, , обПеремещение.Ссылка, Инфо);
		КонецПопытки;
		
		Если обПеремещение.гф_ШтрихкодыУпаковок.Количество() = 0 Тогда
			обПеремещение.гф_ШтрихкодыУпаковок.Загрузить(тзШтрихкодыУпаковок);
		КонецЕсли;
		
		Попытка
			обПеремещение.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Инфо = "Не удалось записать документ ""Перемещение товаров"".";
			ЗаписьЖурналаРегистрации("РегламентноеЗадание.ОбработкаУдаления",
			УровеньЖурналаРегистрации.Предупреждение, , обПеремещение.Ссылка, ОписаниеОшибки());
		КонецПопытки;
		
		НаборДвижениеКМ = РегистрыНакопления.гф_ДвижениеКодовМаркировкиОрганизации.СоздатьНаборЗаписей();
		НаборДвижениеКМ.Отбор.Регистратор.Установить(Ссылка);
		Для каждого стрШК Из Ссылка.гф_ШтрихкодыУпаковок Цикл
			Запись = НаборДвижениеКМ.Добавить();
			Запись.Период = обПеремещение.Дата;
			Запись.Регистратор = Ссылка;
			Запись.Организация = обПеремещение.Организация;
			Запись.Склад =обПеремещение.СкладПолучатель;
			Запись.ВидДвижения = ВидДвиженияНакопления.Приход;
			Запись.КМ = стрШК["ШтрихкодУпаковки"];
			Запись.Количество = 1;
		КонецЦикла;
		Попытка
			НаборДвижениеКМ.Записать();
		Исключение
			Инфо = "Не удалось записать движения по рН ""гф_ДвижениеКодовМаркировкиОрганизации"".
			|по регистратору " + обПеремещение.Ссылка;
			ЗаписьЖурналаРегистрации("РегламентноеЗадание.ОбработкаУдаления",
			УровеньЖурналаРегистрации.Предупреждение, , обПеремещение.Ссылка, Инфо);
		КонецПопытки;
		
		#КонецОбласти
		
		#Область Изменение_УЛ_Агрегатов
		тзВспУл = тзСоставКМДляУдаления.Скопировать();
		тзВспУл.Свернуть("УпаковочныйЛист, Агрегат");
		Для каждого стрВспУл Из тзВспУл Цикл
			обУЛ = стрВспУл["УпаковочныйЛист"].ПолучитьОбъект();
			обШК = стрВспУл["Агрегат"].ПолучитьОбъект();
			
			мСтрУбрать = тзСоставКМДляУдаления.НайтиСтроки(
			Новый Структура("УпаковочныйЛист, Агрегат", стрВспУл["УпаковочныйЛист"], стрВспУл["Агрегат"]));
			
			Для каждого стрУбрать Из мСтрУбрать Цикл
				ПараметрыОтбора = Новый Структура("Штрихкод", стрУбрать["КМ"]);
				мСтрокШК = обШК.ВложенныеШтрихкоды.НайтиСтроки(ПараметрыОтбора);
				Для каждого Эл Из мСтрокШК Цикл
					обШК.ВложенныеШтрихкоды.Удалить(Эл);
				КонецЦикла;	
				ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика", 
				стрУбрать["Номенклатура"], 
				стрУбрать["Характеристика"]);
				мСтрокУЛ = обУЛ.Товары.НайтиСтроки(ПараметрыОтбора);
				Для каждого Эл Из мСтрокУЛ Цикл
					
					Если Макс(Эл["КоличествоУпаковок"], Эл["Количество"]) <= 1 Тогда
						обУЛ.Товары.Удалить(Эл);
						Продолжить;
					КонецЕсли;	
					
					Если Эл["КоличествоУпаковок"] > 1 Тогда
						Эл["КоличествоУпаковок"] = Эл["КоличествоУпаковок"] - 1;
					КонецЕсли;
					Если Эл["Количество"] > 1 Тогда
						Эл["Количество"] = Эл["Количество"] - 1;
					КонецЕсли;
				КонецЦикла;
				
				Набор = регистрыСведений.гф_ПересортицаУдаляемыеШК.СоздатьНаборЗаписей();
				Набор.Отбор.Пересортица.Установить(стрУбрать["УпаковочныйЛист"]);
				Набор.Отбор.ШтрихкодУпаковки.Установить(стрУбрать["КМ"]);
				Набор.Прочитать();
				Для каждого Запись Из Набор Цикл
					Запись.Обработан = Истина;
				КонецЦикла;
				
				Попытка
					Набор.Записать();
				Исключение
					Инфо = "Не удалось установить статус записи по рС ""гф_ПересортицаУдаляемыеШК"" -Статус: ""Обработан"".
					|по регистратору " + обПеремещение.Ссылка;
					ЗаписьЖурналаРегистрации("РегламентноеЗадание.ОбработкаУдаления",
					УровеньЖурналаРегистрации.Предупреждение, , стрУбрать["КМ"], Инфо);
				КонецПопытки;
				
			КонецЦикла;
			
			гф_ОбработкаИсключенийПоКоробамВызовСервера.ПроверитьУЛПоВариантуКомплектацииИПроставитьСтатусКороба(обУЛ);
			
			Попытка
				обШК.Записать();
			Исключение
				Инфо = "Не удалось записать элемент справочника ""Штрихкоды упаковок товаров"".";
				ЗаписьЖурналаРегистрации("РегламентноеЗадание.ОбработкаУдаления",
				УровеньЖурналаРегистрации.Предупреждение, , обШК.Ссылка, Инфо);
			КонецПопытки;
			
			Попытка
				обУЛ.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				Инфо = "Не удалось записать документ ""Упаковочный лист"".";
				ЗаписьЖурналаРегистрации("РегламентноеЗадание.ОбработкаУдаления",
				УровеньЖурналаРегистрации.Предупреждение, , обУЛ.Ссылка, Инфо);
			КонецПопытки;
			
		КонецЦикла;
		#КонецОбласти
		
	КонецЦикла;// цикл по ПТУ
	
КонецПроцедуры // ^^^ Галфинд \ Sakovich 04.07.2023
