#Область ПрограммныйИнтерфейс

// Возвращает массив записей отслеживания почтовых отправлений
//
// Параметры:
// УчетнаяЗапись - СправочникСсылка
// ПочтовоеОтправление - СправочникСсылка
// Ошибки - Массив - Массив строк ошибок
Функция ПолучитьДанныеОтслеживания(УчетнаяЗапись, ПочтовоеОтправление, Ошибки = Неопределено) Экспорт 
	
	Если Ошибки = Неопределено Тогда
		
		Ошибки = Новый Массив;
		
	КонецЕсли;
	
	//Если ПочтовоеОтправление.ДоставкаЗавершена Тогда
	//	
	//	ИсторияОтслеживания = ПолучитьИсториюОтслеживания(ПочтовоеОтправление);
	//	
	//	Возврат ИсторияОтслеживания;
	//	
	//КонецЕсли;	
	
	Логин = УчетнаяЗапись.Логин;
	
	УстановитьПривилегированныйРежим(Истина);
	
   	Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(УчетнаяЗапись, "Пароль");
	
	УстановитьПривилегированныйРежим(Ложь);  
	
	ОтветОтСервераXDTO = ПолучитьДанныеОтслеживанияСлужебный(Логин, Пароль, ПочтовоеОтправление.ТрекНомер, Ошибки); 
	
	ОтветОтСервера = ДанныеОтслеживанияВМассивСтруктур(ОтветОтСервераXDTO);  
	
	ЗаписатьИсториюОтслеживания(ПочтовоеОтправление, ОтветОтСервера, Ошибки);
	
	Возврат ОтветОтСервера;
	
КонецФункции	

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает ответ XDTO от сервера Почты России
//
// Параметры:
// Логин - Строка
// Пароль - Строка
// ТрекНомер - Строка
// Ошибки - Массив - Массив строк ошибок
Функция ПолучитьДанныеОтслеживанияСлужебный(Логин, Пароль, ТрекНомер, Ошибки = Неопределено) Экспорт 
	
	Если Ошибки = Неопределено Тогда
		
		Ошибки = Новый Массив;
		
	КонецЕсли;	
	
	URI						= "http://russianpost.org/operationhistory";
	НаименованиеВебСервиса	= "OperationHistory12";
	НаименованиеПорта		= "OperationHistory12Port";     
	ТипЗначенияXDTO			= "http://russianpost.org/operationhistory/data";
	WSСсылка				= WSСсылки.гф_ПочтаРоссииЕдиничныйДоступКТрекеру;
	
	Соединение = Новый ЗащищенноеСоединениеOpenSSL;
	
	Попытка
		
		Прокси = WSСсылка.СоздатьWSПрокси(URI, НаименованиеВебСервиса, НаименованиеПорта, , , Соединение);
		
	Исключение   
		
		Ошибки.Добавить(ОписаниеОшибки());
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Фабрика = Прокси.ФабрикаXDTO;        
	
	ЗаголовокАвторизации = Фабрика.Создать(ТипЗначенияXDTO, "AuthorizationHeader");
	
	ЗаголовокАвторизации.login		= Логин;
	ЗаголовокАвторизации.password	= Пароль;
	
	ЗапросИстории = Фабрика.Создать(ТипЗначенияXDTO, "OperationHistoryRequest");
	
	ЗапросИстории.Barcode		= ТрекНомер;
	ЗапросИстории.MessageType	= 0;
	ЗапросИстории.Language		= "RUS";
	
	Пакеты = Фабрика.Пакеты.Получить(URI);    
	
	ПакетЗапроса = Пакеты.Получить("getOperationHistory");
	
	Запрос = Фабрика.Создать(ПакетЗапроса);
	
	Запрос.OperationHistoryRequest	= ЗапросИстории;
	Запрос.AuthorizationHeader		= ЗаголовокАвторизации;
	
	Попытка
		
		ОтветОтСервера = Прокси.getOperationHistory(Запрос);  
		
	Исключение   
		
		Ошибки.Добавить(ОписаниеОшибки());
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат ОтветОтСервера;
	
КонецФункции	

Функция ДанныеОтслеживанияВМассивСтруктур(ДанныеXDTO) Экспорт  
	
	Результат = Новый Массив;           
	
	ТаблицаСоответствияКодовОпераций = гф_ПочтаРоссииПовтИсп.ПолучитьТаблицуСоответствияКодовОпераций();	
	
	Для Каждого Элемент Из ДанныеXDTO.OperationHistoryData.historyRecord Цикл
		
		Запись = ОтветОтТрекераСтруктураЗапись();
		
		Операция = ОтветОтТрекераСтруктураОперация();  
		
		КодОперации = СтрокаВЧисло(Элемент.OperationParameters.OperType.id);
		КодАтрибута = СтрокаВЧисло(Элемент.OperationParameters.OperAttr.id);  
		
		Операция.Дата			= Элемент.OperationParameters.OperDate;
		Операция.КодОперации	= КодОперации;
		Операция.КодАтрибута	= КодАтрибута;
													
		Отбор = Новый Структура("КодОперации, КодАтрибута", КодОперации, КодАтрибута);
		
		СтрокиОпераций = ТаблицаСоответствияКодовОпераций.НайтиСтроки(Отбор);
		
		Если СтрокиОпераций.Количество() Тогда   
			
			ЗаполнитьЗначенияСвойств(Операция, СтрокиОпераций[0]);
			
		КонецЕсли;	
		
		Запись.Операция = Операция;
		
		Результат.Добавить(Запись);
		
	КонеЦЦикла;              
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции   

Процедура ЗаписатьИсториюОтслеживания(ПочтовоеОтправление, ОтветОтСервера, Ошибки = Неопределено) 
	
	Если Ошибки = Неопределено Тогда
		
		Ошибки = Новый Массив;
		
	КонецЕсли;	

	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	гф_ПочтаРоссииИсторияОтслеживанияСрезПоследних.Период КАК Период
	|ИЗ
	|	РегистрСведений.гф_ПочтаРоссииИсторияОтслеживания.СрезПоследних(, 
	|	ПочтовоеОтправление = &ПочтовоеОтправление) КАК гф_ПочтаРоссииИсторияОтслеживанияСрезПоследних";
	
	Запрос.Параметры.Вставить("ПочтовоеОтправление", ПочтовоеОтправление);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда    
		
		ДатаПоследнейОперации = '00010101';	
		
	Иначе
		
		Выборка = Результат.Выбрать();
		
		Выборка.Следующий();
		
		ДатаПоследнейОперации = Выборка.Период;
		
	КонецЕсли;	
	
	ДоставкаЗавершена = Ложь;    
	
	ДатаПрисвоенияИдентификатора = Неопределено;
	
	Для Каждого СтрокаОтвета Из ОтветОтСервера Цикл  
		
		Операция = СтрокаОтвета.Операция;           
		
		КодОперацииПрисвоениеИдентификатора = 28;
		
		Если Операция.КодОперации = КодОперацииПрисвоениеИдентификатора Тогда
			
			ДатаПрисвоенияИдентификатора = Операция.Дата;
			
			Если ЗначениеЗаполнено(ПочтовоеОтправление.ДатаСоздания) И
				ПочтовоеОтправление.ДатаСоздания <> ДатаПрисвоенияИдентификатора Тогда
				
				Ошибки.Добавить("Дата присвоения идентификатора не совпадает с датой в справочнике.
				| Создайте новое почтовое отправление");
				
				Возврат;
				
			КонецЕсли;	
			
		КонецЕсли;	
		
		Если Операция.Дата <= ДатаПоследнейОперации Тогда
			
			Продолжить;
			
		КонецЕсли;	
		
		Запись = РегистрыСведений.гф_ПочтаРоссииИсторияОтслеживания.СоздатьМенеджерЗаписи();
		
		Запись.ПочтовоеОтправление	= ПочтовоеОтправление;
		Запись.Период				= Операция.Дата;
		Запись.Операция				= Операция.Ссылка;
		Запись.КонечнаяОперация		= Операция.КонечнаяОперация;
		Запись.Активность			= Истина;   
		
		ДоставкаЗавершена			= Операция.КонечнаяОперация;
		
		Запись.Записать();
		
	КонецЦикла;   
	
	Если ДоставкаЗавершена <> ПочтовоеОтправление.ДоставкаЗавершена 
		ИЛИ ЗначениеЗаполнено(ДатаПрисвоенияИдентификатора) Тогда
		
		ПочтовоеОтправлениеОбъект = ПочтовоеОтправление.ПолучитьОбъект();	
		
		ПочтовоеОтправлениеОбъект.ДоставкаЗавершена	= ДоставкаЗавершена;
		
		Если ДоставкаЗавершена Тогда
			
			ПочтовоеОтправлениеОбъект.Отслеживать = Ложь;
			
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(ПочтовоеОтправлениеОбъект.ДатаСоздания) Тогда
			
			ПочтовоеОтправлениеОбъект.ДатаСоздания = ДатаПрисвоенияИдентификатора;
			
		КонецЕсли;	
		
		ПочтовоеОтправлениеОбъект.Записать();  
		
	КонецЕсли;	
	
КонецПроцедуры	

Функция ПолучитьИсториюОтслеживания(ТрекНомер)
	
	Результат = Новый Массив;
	
	Возврат Результат;
	
КонецФункции

Функция СтрокаВЧисло(Значение) Экспорт
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		
		Результат = Значение;
		
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЭтоЧисло(Значение) Тогда
		
		Результат = Число(Значение);
		
	Иначе
		
		Результат = 0;
		
	КонецЕсли;	 
	
	Возврат Результат;
	
КонецФункции

Функция ОтветОтТрекераСтруктураОперация()

	Результат = Новый Структура(
	"Дата,
	|Ссылка,
	|КодОперации,
	|КодАтрибута,
	|Операция,
	|Атрибут,
	|КонечнаяОперация");	
	
	Возврат Результат;
	
КонецФункции

Функция ОтветОтТрекераСтруктураЗапись()

	Результат = Новый Структура(
	"ПараметрыАдреса,
	|ПараметрыФинансовые,
	|ПараметрыОтправления,
	|Операция,
	|ПараметрыПользователя");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
