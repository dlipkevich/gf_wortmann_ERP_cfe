#Область ПрограммныйИнтерфейс

#Область Трекер

// Возвращает массив записей отслеживания почтовых отправлений
//
// Параметры:
// УчетнаяЗапись - СправочникСсылка
// ПочтовоеОтправление - СправочникСсылка
// Ошибки - Массив - Массив строк ошибок
Функция ПолучитьДанныеОтслеживания(УчетнаяЗапись, ПочтовоеОтправление, Ошибки = Неопределено) Экспорт 
	
	Если Ошибки = Неопределено Тогда
		
		Ошибки = Новый Массив;
		
	КонецЕсли;
	
	Если ПочтовоеОтправление.ДоставкаЗавершена И Не ПочтовоеОтправление.Отслеживать Тогда
		
		ИсторияОтслеживания = ПолучитьИсториюОтслеживания(ПочтовоеОтправление);
		
		Возврат ИсторияОтслеживания;
		
	КонецЕсли;	
	
	Логин = УчетнаяЗапись.Логин;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(УчетнаяЗапись, "Пароль");
	
	УстановитьПривилегированныйРежим(Ложь);  
	
	ОтветОтСервераXDTO = ПолучитьДанныеОтслеживанияСлужебный(Логин, Пароль, ПочтовоеОтправление.ТрекНомер, Ошибки); 
	
	Если Ошибки.Количество() Тогда
		
		ЗаписатьОшибкиВПочтовоеОтправление(Ошибки, ПочтовоеОтправление);
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ОтветОтСервера = ДанныеОтслеживанияВМассивСтруктур(ОтветОтСервераXDTO);  
	
	ЗаписатьИсториюОтслеживания(ПочтовоеОтправление, ОтветОтСервера, Ошибки);
	
	Если Ошибки.Количество() Тогда
		
		ЗаписатьОшибкиВПочтовоеОтправление(Ошибки, ПочтовоеОтправление);
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
	Возврат ОтветОтСервера;
	
КонецФункции	

// Запрос данных отслеживания по регламенту
Процедура ОбновитьДанныеОтслеживаемыхОтправлений() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	гф_ПочтаРоссииПочтовыеОтправления.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.гф_ПочтаРоссииПочтовыеОтправления КАК гф_ПочтаРоссииПочтовыеОтправления
	|ГДЕ
	|	гф_ПочтаРоссииПочтовыеОтправления.Отслеживать
	|	И гф_ПочтаРоссииПочтовыеОтправления.ДатаПоследнегоЗапроса <= ДОБАВИТЬКДАТЕ(&ТекущаяДата, ЧАС, -&ЧасовМеждуЗапросами)";
	
	ЧасовМеждуЗапросами = Константы.гф_ПочтаРоссииПромежутокМеждуЗапросамиКОдномуТрекНомеру.Получить();
	
	Запрос.Параметры.Вставить("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.Параметры.Вставить("ЧасовМеждуЗапросами", ЧасовМеждуЗапросами);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;                     
	
	УчетнаяЗапись = Справочники.гф_ПочтаРоссииУчетныеЗаписи.Основная;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПолучитьДанныеОтслеживания(УчетнаяЗапись, Выборка.Ссылка);
		
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#Область Отправка

Функция ОтправкаЗапросНормализацииАдреса(УчетнаяЗапись, Адреса, Ошибки = Неопределено) Экспорт
	
	Если Ошибки = Неопределено Тогда
		
		Ошибки = Новый Массив;
		
	КонецЕсли;	
	
	МассивАдресов = ЗначениеВМассиве(Адреса);
	
	ПараметрыЗапроса = ПараметрыЗапросаНормализацияАдреса(УчетнаяЗапись);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписьJSON.ЗаписатьНачалоМассива(); 
	
	Ид = 1;
	
	Для Каждого Адрес Из МассивАдресов Цикл
		
		Если Не ЗначениеЗаполнено(Адрес) Тогда
			
			Ошибки.Добавить("Пустой адрес отправки");
			
			Продолжить;
			
		КонецЕсли;	
		
		ЗаписьJSON.ЗаписатьНачалоОбъекта();   
		
		ЗаписьJSON.ЗаписатьИмяСвойства("id");
		ЗаписьJSON.ЗаписатьЗначение(Ид);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("original-address");
		ЗаписьJSON.ЗаписатьЗначение(Адрес);
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
		Ид = Ид + 1;
		
	КонецЦикла;	
	
	ЗаписьJSON.ЗаписатьКонецМассива();
	
	ТекстЗапроса = ЗаписьJSON.Закрыть();  
	
	Если Ошибки.Количество() Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
	Возврат ЗапросКОтправкеСлужебный(ПараметрыЗапроса, ТекстЗапроса, Ошибки);
	
КонецФункции	

Функция ОтправкаЗапросНормализацииФИО(УчетнаяЗапись, ФИО, Ошибки = Неопределено) Экспорт
	
	Если Ошибки = Неопределено Тогда
		
		Ошибки = Новый Массив;
		
	КонецЕсли;	
	
	МассивФИО = ЗначениеВМассиве(ФИО);
	
	ПараметрыЗапроса = ПараметрыЗапросаНормализацияФИО(УчетнаяЗапись);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписьJSON.ЗаписатьНачалоМассива(); 
	
	Ид = 1;
	
	Для Каждого ФИО Из МассивФИО Цикл
		
		Если Не ЗначениеЗаполнено(ФИО) Тогда
			
			Ошибки.Добавить("Пустые ФИО");
			
			Продолжить;
			
		КонецЕсли;	
		
		ЗаписьJSON.ЗаписатьНачалоОбъекта();   
		
		ЗаписьJSON.ЗаписатьИмяСвойства("id");
		ЗаписьJSON.ЗаписатьЗначение(Ид);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("original-fio");
		ЗаписьJSON.ЗаписатьЗначение(ФИО);
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
		Ид = Ид + 1;
		
	КонецЦикла;	
	
	ЗаписьJSON.ЗаписатьКонецМассива();
	
	ТекстЗапроса = ЗаписьJSON.Закрыть();    
	
	Если Ошибки.Количество() Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
	Возврат ЗапросКОтправкеСлужебный(ПараметрыЗапроса, ТекстЗапроса, Ошибки);
	
КонецФункции	

Функция ОтправкаЗапросНормализацииТелефона(УчетнаяЗапись, Телефон, Ошибки = Неопределено) Экспорт
	
	Если Ошибки = Неопределено Тогда
		
		Ошибки = Новый Массив;
		
	КонецЕсли;	
	
	МассивТелефонов = ЗначениеВМассиве(Телефон);
	
	ПараметрыЗапроса = ПараметрыЗапросаНормализацияТелефона(УчетнаяЗапись);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписьJSON.ЗаписатьНачалоМассива(); 
	
	Ид = 1;
	
	Для Каждого Телефон Из МассивТелефонов Цикл
		
		Если Не ЗначениеЗаполнено(Телефон) Тогда
			
			Ошибки.Добавить("Пустой телефон");
			
			Продолжить;
			
		КонецЕсли;	
		
		ЗаписьJSON.ЗаписатьНачалоОбъекта();   
		
		ЗаписьJSON.ЗаписатьИмяСвойства("id");
		ЗаписьJSON.ЗаписатьЗначение(Ид);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("original-phone");
		ЗаписьJSON.ЗаписатьЗначение(Телефон);
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
		Ид = Ид + 1;
		
	КонецЦикла;	
	
	ЗаписьJSON.ЗаписатьКонецМассива();
	
	ТекстЗапроса = ЗаписьJSON.Закрыть();  
	
	Если Ошибки.Количество() Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
	Возврат ЗапросКОтправкеСлужебный(ПараметрыЗапроса, ТекстЗапроса, Ошибки);
	
КонецФункции	

Функция ОтправкаЗапросКоличествоЗапросов(УчетнаяЗапись, Ошибки = Неопределено) Экспорт
	
	Если Ошибки = Неопределено Тогда
		
		Ошибки = Новый Массив;
		
	КонецЕсли;	
	
	ПараметрыЗапроса = ПараметрыЗапросаКоличествоЗапросов(УчетнаяЗапись);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписьJSON.ЗаписатьНачалоМассива(); 
	
	ЗаписьJSON.ЗаписатьКонецМассива();
	
	ТекстЗапроса = ЗаписьJSON.Закрыть();  
	
	Возврат ЗапросКОтправкеСлужебный(ПараметрыЗапроса, ТекстЗапроса, Ошибки);
	
КонецФункции	

Функция ОтправкаЗапросСозданиеЗаказа(УчетнаяЗапись, ТекстЗапроса, Ошибки = Неопределено) Экспорт
	
	Если Ошибки = Неопределено Тогда
		
		Ошибки = Новый Массив;
		
	КонецЕсли;	
	
	ПараметрыЗапроса = ПараметрыЗапросаСозданиеЗаказа(УчетнаяЗапись);
	
	Возврат ЗапросКОтправкеСлужебный(ПараметрыЗапроса, ТекстЗапроса, Ошибки);
	
КонецФункции	

Функция ОтправкаЗапросСозданиеПартии(УчетнаяЗапись, ТекстЗапроса, Ошибки) Экспорт
	
	Если Ошибки = Неопределено Тогда
		
		Ошибки = Новый Массив;
		
	КонецЕсли;	
	
	ПараметрыЗапроса = ПараметрыЗапросаСозданиеПартии(УчетнаяЗапись);
	
	Возврат ЗапросКОтправкеСлужебный(ПараметрыЗапроса, ТекстЗапроса, Ошибки);
	
КонецФункции	

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Трекер

// Возвращает ответ XDTO от сервера Почты России
//
// Параметры:
// Логин - Строка
// Пароль - Строка
// ТрекНомер - Строка
// Ошибки - Массив - Массив строк ошибок
//
//	Возвращаемое значение:
// - ОбъектXDTO
//
Функция ПолучитьДанныеОтслеживанияСлужебный(Логин, Пароль, ТрекНомер, Ошибки = Неопределено) Экспорт 
	
	Если Ошибки = Неопределено Тогда
		
		Ошибки = Новый Массив;
		
	КонецЕсли;	
	
	URI						= "http://russianpost.org/operationhistory";
	НаименованиеВебСервиса	= "OperationHistory12";
	НаименованиеПорта		= "OperationHistory12Port";     
	ТипЗначенияXDTO			= "http://russianpost.org/operationhistory/data";
	WSСсылка				= WSСсылки.гф_ПочтаРоссииЕдиничныйДоступКТрекеру;
	
	Соединение = Новый ЗащищенноеСоединениеOpenSSL;
	
	Попытка
		
		Прокси = WSСсылка.СоздатьWSПрокси(URI, НаименованиеВебСервиса, НаименованиеПорта, , , Соединение);
		
	Исключение   
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ОписаниеОшибки = ПолучитьОписаниеОшибки(ИнформацияОбОшибке);
		
		Ошибки.Добавить(ОписаниеОшибки);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Фабрика = Прокси.ФабрикаXDTO;        
	
	ЗаголовокАвторизации = Фабрика.Создать(ТипЗначенияXDTO, "AuthorizationHeader");
	
	ЗаголовокАвторизации.login		= Логин;
	ЗаголовокАвторизации.password	= Пароль;
	
	ЗапросИстории = Фабрика.Создать(ТипЗначенияXDTO, "OperationHistoryRequest");
	
	ЗапросИстории.Barcode		= ТрекНомер;
	ЗапросИстории.MessageType	= 0;
	ЗапросИстории.Language		= "RUS";
	
	Пакеты = Фабрика.Пакеты.Получить(URI);    
	
	ПакетЗапроса = Пакеты.Получить("getOperationHistory");
	
	Запрос = Фабрика.Создать(ПакетЗапроса);
	
	Запрос.OperationHistoryRequest	= ЗапросИстории;
	Запрос.AuthorizationHeader		= ЗаголовокАвторизации;
	
	Попытка
		
		ОтветОтСервера = Прокси.getOperationHistory(Запрос);  
		
	Исключение   
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ОписаниеОшибки = ПолучитьОписаниеОшибки(ИнформацияОбОшибке);
		
		Ошибки.Добавить(ОписаниеОшибки);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат ОтветОтСервера;
	
КонецФункции	

//
//	Возвращаемое значение:
// - Массив 
//
Функция ДанныеОтслеживанияВМассивСтруктур(ДанныеXDTO) Экспорт  
	
	Результат = Новый Массив;           
	
	ТаблицаКодовОпераций = 
	гф_ПочтаРоссииПовтИсп.ПолучитьТаблицуКодовОпераций();	
	ТаблицаКодовКатегорийПочтовыхОтправлений = 
	гф_ПочтаРоссииПовтИсп.ПолучитьТаблицуКодовКатегорийПочтовыхОтправлений();
	ТаблицаКодовРазрядовПочтовыхОтправлений = 
	гф_ПочтаРоссииПовтИсп.ПолучитьТаблицуКодовРазрядовПочтовыхОтправлений();
	ТаблицаКодовВидовПочтовыхОтправлений = 
	гф_ПочтаРоссииПовтИсп.ПолучитьТаблицуКодовВидовПочтовыхОтправлений();
	ТаблицаКодовКатегорийОтправителей = 
	гф_ПочтаРоссииПовтИсп.ПолучитьТаблицуКодовКатегорийОтправителей();
	ТаблицаКодовСтранПересылкиПочтовыхОтправлений = 
	гф_ПочтаРоссииПовтИсп.ПолучитьТаблицуКодовСтранПересылкиПочтовыхОтправлений();
	ТаблицаКодовОтметокПочтовыхОтправлений = 
	гф_ПочтаРоссииПовтИсп.ПолучитьТаблицуКодовОтметокПочтовыхОтправлений();
	
	Для Каждого Элемент Из ДанныеXDTO.OperationHistoryData.historyRecord Цикл
		
		Запись = ОтветОтТрекераСтруктураЗапись();
		
		Операция = ОтветОтТрекераСтруктураОперация();  
		
		КодОперации = СтрокаВЧисло(Элемент.OperationParameters.OperType.id);
		КодАтрибута = СтрокаВЧисло(Элемент.OperationParameters.OperAttr.id);  
		
		Операция.Дата = Элемент.OperationParameters.OperDate;
		
		Отбор = Новый Структура("КодОперации, КодАтрибута", КодОперации, КодАтрибута);
		
		СтрокиОпераций = ТаблицаКодовОпераций.НайтиСтроки(Отбор);
		
		Если СтрокиОпераций.Количество() Тогда   
			
			Операция.Операция			= СтрокиОпераций[0].Ссылка;
			Операция.КонечнаяОперация	= СтрокиОпераций[0].КонечнаяОперация;
			
		Иначе	
			
			Операция.Операция = ПредопределенноеЗначение("Справочник.гф_ПочтаРоссииОперацииОтслеживания.ПустаяСсылка");
			
		КонецЕсли;	
		
		Запись.Операция = Операция;
		
		Результат.Добавить(Запись);
		
	КонеЦЦикла;              
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Отправка

//	Параметры:
// ПараметрыЗапроса	- Структура
// ТекстЗапроса		- Строка
// Ошибки			- Массив
//
//	Возвращаемое значение:
// - Строка
//
Функция ЗапросКОтправкеСлужебный(ПараметрыЗапроса, ТекстЗапроса, Ошибки = Неопределено) Экспорт
	
	Если Ошибки = Неопределено Тогда
		
		Ошибки = Новый Массив;
		
	КонецЕсли;	
	
	Если Не ПараметрыЗапроса.Свойство("Токен") Тогда
		
		Ошибки.Добавить("Не заданы параметры авторизации в сервисе");
		
	КонецЕсли;
	
	Authorization = "AccessToken " + ПараметрыЗапроса.Токен;
	XUserAuthorization = "Basic " + ПараметрыЗапроса.КлючАвторизации;
	
	Попытка	
		
		Соединение = Новый HTTPСоединение("otpravka-api.pochta.ru",,,,,30, Новый ЗащищенноеСоединениеOpenSSL);
		
	Исключение   
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ОписаниеОшибки = ПолучитьОписаниеОшибки(ИнформацияОбОшибке);
		
		Ошибки.Добавить(ОписаниеОшибки);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Заголовки = Новый Соответствие;     
	
	Заголовки.Вставить("X-User-Authorization", XUserAuthorization);
	Заголовки.Вставить("Authorization", Authorization);
	Заголовки.Вставить("Content-type", "application/json; charset=utf8");
	
	HTTPЗапрос = Новый HTTPЗапрос(ПараметрыЗапроса.Адрес, Заголовки);   
	
	HTTPЗапрос.УстановитьТелоИзСтроки(ТекстЗапроса);
	
	Если ВРег(ПараметрыЗапроса.Тип) = "GET" Тогда
		
		HTTPОтвет = Соединение.Получить(HTTPЗапрос); 
		
	ИначеЕсли ВРег(ПараметрыЗапроса.Тип) = "PUT" Тогда
		
		HTTPОтвет = Соединение.Записать(HTTPЗапрос); 
		
	Иначе
		
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос); 
		
	КонецЕсли;	
	
	КодСостояния = HTTPОтвет.КодСостояния;
	
	Если КодСостояния >= 200 И КодСостояния < 300 Тогда
		
		Возврат HTTPОтвет.ПолучитьТелоКакСтроку();
		
	Иначе
		
		Ошибки.Добавить("Ошибка, код состояния: " + КодСостояния); 
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
КонецФункции

Процедура ЗаписатьАдресПолучателя(ЗаписьJSON, Адрес) Экспорт  
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("index",		"index-to");
	СоответствиеПолей.Вставить("region",	"region-to");
	СоответствиеПолей.Вставить("place",		"place-to");
	СоответствиеПолей.Вставить("street",	"street-to");
	СоответствиеПолей.Вставить("house",		"house-to");
	
	ЧтениеJSON = Новый ЧтениеJSON; 
	
	ЧтениеJSON.УстановитьСтроку(Адрес); 
	
	МассивАдресов = ПрочитатьJSON(ЧтениеJSON, Истина);
	
	НормализованныйАдрес = МассивАдресов[0];
	
	ЗаписатьСвойствоИЗначениеВJSON(ЗаписьJSON, "address-type-to", "DEFAULT");
	
	Для Каждого Поле Из СоответствиеПолей Цикл
		
		ЗначениеСвойства = НормализованныйАдрес[Поле.Ключ];
		
		Если ЗначениеЗаполнено(ЗначениеСвойства) Тогда
			
			ИмяСвойства = Поле.Значение;
			
			ЗаписатьСвойствоИЗначениеВJSON(ЗаписьJSON, ИмяСвойства, ЗначениеСвойства);
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры      

Процедура ЗаписатьФИОПолучателя(ЗаписьJSON, ФИО) Экспорт
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("middle-name",	"middle-name");
	СоответствиеПолей.Вставить("name",			"given-name");
	СоответствиеПолей.Вставить("surname",		"surname");
	
	ЧтениеJSON = Новый ЧтениеJSON; 
	
	ЧтениеJSON.УстановитьСтроку(ФИО); 
	
	МассивФИО = ПрочитатьJSON(ЧтениеJSON, Истина);
	
	НормализованныйФИО = МассивФИО[0];
	
	Для Каждого Поле Из СоответствиеПолей Цикл
		
		ЗначениеСвойства = НормализованныйФИО[Поле.Ключ];
		
		Если ЗначениеЗаполнено(ЗначениеСвойства) Тогда
			
			ИмяСвойства = Поле.Значение;
			
			ЗаписатьСвойствоИЗначениеВJSON(ЗаписьJSON, ИмяСвойства, ЗначениеСвойства);
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры      

Процедура ЗаписатьТелефонПолучателя(ЗаписьJSON, Телефон) Экспорт  
	
	ЧтениеJSON = Новый ЧтениеJSON; 
	
	ЧтениеJSON.УстановитьСтроку(Телефон); 
	
	МассивТелефонов = ПрочитатьJSON(ЧтениеJSON, Истина);  
	
	НормализованныйТелефон = МассивТелефонов[0];
	
	ИмяСвойства = "tel-address";    
	
	КодСтраны		= НормализованныйТелефон["phone-country-code"]; 
	КодРегиона		= НормализованныйТелефон["phone-city-code"]; 
	НомерТелефона	= НормализованныйТелефон["phone-number"]; 
	
	ЗначениеСвойства = ?(ЗначениеЗаполнено(КодСтраны), "+" + КодСтраны, "") + КодРегиона + НомерТелефона;

	ЗаписатьСвойствоИЗначениеВJSON(ЗаписьJSON, ИмяСвойства, ЗначениеСвойства);
	
КонецПроцедуры      

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции   

#Область Трекер

Процедура ЗаписатьИсториюОтслеживания(ПочтовоеОтправление, ОтветОтСервера, Ошибки = Неопределено) 
	
	Если Ошибки = Неопределено Тогда
		
		Ошибки = Новый Массив;
		
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	гф_ПочтаРоссииИсторияОтслеживанияСрезПоследних.Период КАК Период
	|ИЗ
	|	РегистрСведений.гф_ПочтаРоссииИсторияОтслеживания.СрезПоследних(, 
	|	ПочтовоеОтправление = &ПочтовоеОтправление) КАК гф_ПочтаРоссииИсторияОтслеживанияСрезПоследних";
	
	Запрос.Параметры.Вставить("ПочтовоеОтправление", ПочтовоеОтправление);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда    
		
		ДатаПоследнейОперации = '00010101';	
		
	Иначе
		
		Выборка = Результат.Выбрать();
		
		Выборка.Следующий();
		
		ДатаПоследнейОперации = Выборка.Период;
		
	КонецЕсли;	
	
	ДоставкаЗавершена = Ложь;    
	
	ДатаПрисвоенияИдентификатора = Неопределено;
	
	Для Каждого СтрокаОтвета Из ОтветОтСервера Цикл  
		
		Операция = СтрокаОтвета.Операция;           
		
		КодОперацииПрисвоениеИдентификатора = 28;
		
		//Если Операция.Операция.КодОперации = КодОперацииПрисвоениеИдентификатора Тогда
		//	
		//	ДатаПрисвоенияИдентификатора = Операция.Дата;
		//	
		//	Если ЗначениеЗаполнено(ПочтовоеОтправление.ДатаСоздания) И
		//		ПочтовоеОтправление.ДатаСоздания <> ДатаПрисвоенияИдентификатора Тогда
		//		
		//		Ошибки.Добавить("Дата присвоения идентификатора не совпадает с датой в справочнике.
		//		| Создайте новое почтовое отправление");
		//		
		//		Возврат;
		//		
		//	КонецЕсли;	
		//	
		//КонецЕсли;	
		
		Если Операция.КонечнаяОперация Тогда
			
			ДоставкаЗавершена = Истина;
			
		КонецЕсли;	
		
		Если Операция.Дата <= ДатаПоследнейОперации Тогда
			
			Продолжить;
			
		КонецЕсли;	
		
		Запись = РегистрыСведений.гф_ПочтаРоссииИсторияОтслеживания.СоздатьМенеджерЗаписи();
		
		Запись.ПочтовоеОтправление	= ПочтовоеОтправление;
		Запись.Период				= Операция.Дата;
		Запись.Операция				= Операция.Операция;
		Запись.КонечнаяОперация		= Операция.КонечнаяОперация;
		Запись.Активность			= Истина;   
		
		Запись.Записать();
		
	КонецЦикла;   
	
	ПочтовоеОтправлениеОбъект = ПочтовоеОтправление.ПолучитьОбъект();	
	
	ПочтовоеОтправлениеОбъект.ОшибкаПриЗапросе		= Ложь;
	ПочтовоеОтправлениеОбъект.ТекстОшибки			= Неопределено;
	ПочтовоеОтправлениеОбъект.ДатаПоследнегоЗапроса	= ТекущаяДатаСеанса();
	ПочтовоеОтправлениеОбъект.ДатаСоздания			= ДатаПрисвоенияИдентификатора;
	ПочтовоеОтправлениеОбъект.ДоставкаЗавершена		= ДоставкаЗавершена;
	
	Если ДоставкаЗавершена Тогда
		
		ПочтовоеОтправлениеОбъект.Отслеживать = Ложь;
		
	КонецЕсли;	
	
	ПочтовоеОтправлениеОбъект.Записать();  
	
КонецПроцедуры	

Функция ПолучитьИсториюОтслеживания(ПочтовоеОтправление)
	
	МассивЗаписей = Новый Массив;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	гф_ПочтаРоссииИсторияОтслеживания.Период КАК Дата,
	|	гф_ПочтаРоссииОперацииОтслеживания.КонечнаяОперация КАК КонечнаяОперация,
	|	гф_ПочтаРоссииОперацииОтслеживания.Ссылка КАК Операция
	|ИЗ
	|	РегистрСведений.гф_ПочтаРоссииИсторияОтслеживания КАК гф_ПочтаРоссииИсторияОтслеживания
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гф_ПочтаРоссииОперацииОтслеживания КАК гф_ПочтаРоссииОперацииОтслеживания
	|		ПО гф_ПочтаРоссииИсторияОтслеживания.Операция = гф_ПочтаРоссииОперацииОтслеживания.Ссылка
	|ГДЕ
	|	гф_ПочтаРоссииИсторияОтслеживания.ПочтовоеОтправление = &ПочтовоеОтправление";
	
	Запрос.Параметры.Вставить("ПочтовоеОтправление", ПочтовоеОтправление);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Возврат МассивЗаписей;
		
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Запись		= ОтветОтТрекераСтруктураЗапись();
		Операция	= ОтветОтТрекераСтруктураОперация();  
		
		ЗаполнитьЗначенияСвойств(Операция, Выборка);
		
		Запись.Операция = Операция;
		
		МассивЗаписей.Добавить(Запись);
		
	КонецЦикла;	
	
	Возврат МассивЗаписей;
	
КонецФункции

Функция СтрокаВЧисло(Значение) Экспорт
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		
		Результат = Значение;
		
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЭтоЧисло(Значение) Тогда
		
		Результат = Число(Значение);
		
	Иначе
		
		Результат = 0;
		
	КонецЕсли;	 
	
	Возврат Результат;
	
КонецФункции

Функция ОтветОтТрекераСтруктураОперация()
	
	Результат = Новый Структура(
	"Дата,
	|Операция,
	|КонечнаяОперация");	
	
	Возврат Результат;
	
КонецФункции

Функция ОтветОтТрекераСтруктураЗапись()
	
	Результат = Новый Структура(
	"ПараметрыАдреса,
	|ПараметрыФинансовые,
	|ПараметрыОтправления,
	|Операция,
	|ПараметрыПользователя");
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьОшибкиВПочтовоеОтправление(Ошибки, ПочтовоеОтправление)
	
	ПочтовоеОтправлениеОбъект = ПочтовоеОтправление.ПолучитьОбъект();
	
	ТекстОшибки = "";
	
	Для Каждого Ошибка Из Ошибки Цикл
		
		ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ВК + Ошибка, Ошибка);
		
	КонецЦикла;	
	
	ПочтовоеОтправлениеОбъект.ОшибкаПриЗапросе		= Истина;
	ПочтовоеОтправлениеОбъект.ТекстОшибки			= ТекстОшибки;
	ПочтовоеОтправлениеОбъект.ДатаПоследнегоЗапроса	= ТекущаяДатаСеанса();
	ПочтовоеОтправлениеОбъект.Отслеживать 			= Ложь;
	
	ПочтовоеОтправлениеОбъект.Записать();
	
КонецПроцедуры	

#КонецОбласти

#Область Отправка

Функция ПараметрыЗапросаНормализацияАдреса(УчетнаяЗапись = Неопределено) Экспорт
	
	ПараметрыЗапроса = Новый Структура("Адрес, Тип", "/1.0/clean/address", "POST"); 
	
	ДобавитьАвторизациюВПараметрыЗапроса(ПараметрыЗапроса, УчетнаяЗапись);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция ПараметрыЗапросаНормализацияФИО(УчетнаяЗапись = Неопределено) Экспорт
	
	ПараметрыЗапроса = Новый Структура("Адрес, Тип", "/1.0/clean/physical", "POST");
	
	ДобавитьАвторизациюВПараметрыЗапроса(ПараметрыЗапроса, УчетнаяЗапись);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция ПараметрыЗапросаНормализацияТелефона(УчетнаяЗапись = Неопределено) Экспорт
	
	ПараметрыЗапроса = Новый Структура("Адрес, Тип", "/1.0/clean/phone", "POST");
	
	ДобавитьАвторизациюВПараметрыЗапроса(ПараметрыЗапроса, УчетнаяЗапись);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция ПараметрыЗапросаКоличествоЗапросов(УчетнаяЗапись = Неопределено) Экспорт
	
	ПараметрыЗапроса = Новый Структура("Адрес, Тип", "/1.0/settings/limit", "GET");
	
	ДобавитьАвторизациюВПараметрыЗапроса(ПараметрыЗапроса, УчетнаяЗапись);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция ПараметрыЗапросаСозданиеЗаказа(УчетнаяЗапись = Неопределено) Экспорт
	
	ПараметрыЗапроса = Новый Структура("Адрес, Тип", "/2.0/user/backlog", "PUT");
	
	ДобавитьАвторизациюВПараметрыЗапроса(ПараметрыЗапроса, УчетнаяЗапись);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция ПараметрыЗапросаСозданиеПартии(УчетнаяЗапись = Неопределено)
	
	ПараметрыЗапроса = Новый Структура("Адрес, Тип", "/1.0/user/shipment", "POST");
	
	ДобавитьАвторизациюВПараметрыЗапроса(ПараметрыЗапроса, УчетнаяЗапись);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Процедура ДобавитьАвторизациюВПараметрыЗапроса(ПараметрыЗапроса, УчетнаяЗапись = Неопределено)
	
	Если УчетнаяЗапись = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Токен				= ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(УчетнаяЗапись, "Токен");
	КлючАвторизации		= ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(УчетнаяЗапись, "КлючАвторизации");
	
	УстановитьПривилегированныйРежим(Ложь);                    
	
	ПараметрыЗапроса.Вставить("Токен", Токен);
	ПараметрыЗапроса.Вставить("КлючАвторизации", КлючАвторизации);
	
КонецПроцедуры

Процедура ЗаписатьСвойствоИЗначениеВJSON(ЗаписьJSON, ИмяСвойства, ЗначениеСвойства) Экспорт
	
	ЗаписьJSON.ЗаписатьИмяСвойства(ИмяСвойства);
	ЗаписьJSON.ЗаписатьЗначение(ЗначениеСвойства);
	
КонецПроцедуры	

#КонецОбласти

#Область Общие

// Возвращает описание ошибки самого глубокого уровня
// Для обработки ошибок при обращении с веб-сервису 
Функция ПолучитьОписаниеОшибки(Знач ИнформацияОбОшибке)
	
	ОписаниеОшибки = ИнформацияОбОшибке.Описание;
	
	Пока ИнформацияОбОшибке.Причина <> Неопределено Цикл
		
		ИнформацияОбОшибке = ИнформацияОбОшибке.Причина;
		
		ОписаниеОшибки = ИнформацияОбОшибке.Описание;
		
	КонецЦикла;	
	
	Возврат ОписаниеОшибки;
	
КонецФункции		

Функция ЗначениеВМассиве(Значение)
	
	Если ТипЗнч(Значение) = Тип("Массив") Тогда
		
		Результат = Значение;
		
	Иначе	
		
		Результат = Новый Массив;
		
		Результат.Добавить(Значение);
		
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
