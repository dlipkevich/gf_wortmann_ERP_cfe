Процедура глДополнитьТекст(ИтоговыйТекст,ДопТекст,Разделитель=" И ") Экспорт
	Если СокрЛП(ДопТекст)="" Тогда
		Возврат;
	КонецЕсли; 
	
	ИтоговыйТекст=ИтоговыйТекст+?(ИтоговыйТекст="","",Разделитель)+СокрЛП(ДопТекст);
КонецПроцедуры		
		
&После("B2B_НаполнениеКаталога")
Процедура B2B_B2B_НаполнениеКаталога(КодНастройки)
	
	ПланОбменаБ2Б = ПланыОбмена.Б_ОбменССайтом.НайтиПоКоду(КодНастройки);   
	
	Если Не ЗначениеЗаполнено(ПланОбменаБ2Б) Тогда
		Возврат;
	КонецЕсли; 
	
	Склад = Справочники.w_Настройки.СкладСвободныеОстатки.Значение;
		
	Если Не ЗначениеЗаполнено(Склад) Тогда
		Возврат;
	КонецЕсли; 

	Б2Б_Портал = ПланОбменаБ2Б.B2B_Портал;
	
	Если Не ЗначениеЗаполнено(Б2Б_Портал) Тогда
		Возврат;
	КонецЕсли;
	
	// Заполняем признак выгрузки на сайт B2B_Портал 
	ИмяСобытияЖурналРегистрации = НСтр("ru = 'B2B регламентное задание наполнение каталога'"); 
	
	Сообщение = НСтр("ru = 'Заполнение признака выгрузки на сайт B2B_Портал'");
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);
	
	СписокСкладов = Новый СписокЗначений;
	СписокСкладов.Добавить(Склад);
	
	СоотвАртикулов_ТН = Новый Соответствие;
	
	ТаблицаОстатков = ПолучитьТаблицуОстатков(СписокСкладов);
	
	Для Каждого ТекСтрока Из ТаблицаОстатков Цикл
		
		Если ТекСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент<=1 Тогда
			Продолжить;	
		КонецЕсли; 
		
		Артикул = ТекСтрока.Номенклатура.Артикул;
		АртикулБезРазмера = Лев(Артикул, Найти(Артикул, "/")-1);
		
		Если ПустаяСтрока(АртикулБезРазмера) Тогда
			Продолжить;	
		КонецЕсли;
		
		Если Б2Б_Портал = Справочники.B2B_Портал.Tamaris Тогда
			
        	ТекТип = Справочники.СЭ_ТипНоменклатуры.НайтиПоРеквизиту("Артикул", АртикулБезРазмера);
			
			Если НЕ ЗначениеЗаполнено(ТекТип) Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			
						
			Если СоотвАртикулов_ТН.Получить(АртикулБезРазмера) = Неопределено Тогда
				
				ТекТип = Справочники.СЭ_ТипНоменклатуры.НайтиПоРеквизиту("Артикул", АртикулБезРазмера);
				
				Если НЕ ЗначениеЗаполнено(ТекТип) Тогда 
					
					ТекТип = Справочники.СЭ_ТипНоменклатуры.СоздатьЭлемент();	
					
					ТекТип.Артикул = АртикулБезРазмера;
					ТекТип.Наименование = ТекСтрока.Номенклатура.НаименованиеПолное;
					ТекТип.ОбменДанными.Загрузка = Истина;
					
					Попытка
						ТекТип.Записать();
					Исключение
					КонецПопытки;
					
				КонецЕсли;
				
				СоотвАртикулов_ТН.Вставить(АртикулБезРазмера, ТекТип.Ссылка);	
				
			Иначе 
				ТекТип = СоотвАртикулов_ТН.Получить(АртикулБезРазмера);
			КонецЕсли;
							
		КонецЕсли; 
		
		Если ТекТип.Ссылка = ТекСтрока.Номенклатура.СЭ_ТипНоменклатуры Тогда 
			Продолжить;
		КонецЕсли;


		ТекущийОбъект = ТекСтрока.Номенклатура.ПолучитьОбъект();
		ТекущийОбъект.СЭ_ТипНоменклатуры = ТекТип.Ссылка;
		//ТекущийОбъект.СЭ_НоменклатураДляВыгрузки = Истина;   
		ТекущийОбъект.B2B_Портал = Б2Б_Портал;
		ТекущийОбъект.ОбменДанными.Загрузка = Истина;
		ТекущийОбъект.Записать();
		
	КонецЦикла; 
	
	// Заполняем свойства номенклатуры	  
	Сообщение = НСтр("ru = 'Заполнение свойств номенклатуры'");
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпрНоменклатура.Ссылка КАК Ссылка,
	|	СпрНоменклатура.СЭ_ТипНоменклатуры КАК СЭ_ТипНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|ГДЕ	
	|	СпрНоменклатура.B2B_Портал = &B2B_Портал
	|";
	
	Запрос.УстановитьПараметр("B2B_Портал", Б2Б_Портал);

	
	Рез = Запрос.Выполнить().Выгрузить();
	
	СоответствиеАртикулов = Новый Соответствие();	
	
	Для Каждого Строка Из Рез Цикл

		СписокАрт = СтрРазделить(Строка.Ссылка.Артикул,"/");
		//
		СтруктураБитрикс = Новый Структура("ТипНоменклатуры");
		СтруктураБитрикс.ТипНоменклатуры = Строка.СЭ_ТипНоменклатуры;
		//
		Если СписокАрт.Количество()=2 Тогда
			СоответствиеАртикулов.Вставить(СписокАрт.Получить(0), СтруктураБитрикс);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Элемент Из СоответствиеАртикулов Цикл
		Артикул = Элемент.Ключ;
		
		СБ = Элемент.Значение;
		ТаблицаНоменклатуры = ПолучитьНоменклатуруПоАртикуу(Артикул);
		
		Для Каждого Строка из ТаблицаНоменклатуры Цикл
			Номенклатура = Строка.Номенклатура;	
			
			Если Номенклатура.ЕдиницаХраненияОстатков.Коэффициент<=1 Тогда
				Продолжить;	
			КонецЕсли;
				
			СписокАрт = СтрРазделить(Номенклатура.Артикул,"/");
			Если СписокАрт.Количество()<2 Тогда
				Продолжить;
			КонецЕсли;
			
		    РазмерныйРяд = B2B_ОбщиеПроцедурыИФункции.ПолучитьРазмерныйРяд(Номенклатура);
			
			Если ПустаяСтрока(РазмерныйРяд) Тогда
				Продолжить;
			КонецЕсли;
			
			Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("B2B_РазмерныйРяд");
			Если ЗначениеЗаполнено(Свойство) Тогда 
				ЗначениеСвойства = B2B_ОбщиеПроцедурыИФункции.ПолучитьЗначениеСвойства(Номенклатура, Свойство);
				Если Не ЗначениеЗаполнено(ЗначениеСвойства) Тогда
					СтруктураСвойства = Новый Структура;  
					СтруктураСвойства.Вставить("Свойство", Свойство);
					СтруктураСвойства.Вставить("Значение", РазмерныйРяд);
					B2B_ОбщиеПроцедурыИФункции.ЗаписатьЗначениеСвойства(Номенклатура, СтруктураСвойства);
				КонецЕсли;
			КонецЕсли;
			
			B2B_Size = "";
			Если Номенклатура.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Обувь") ИЛИ
				Номенклатура.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Обувь производство") Тогда  
				СписокАрт = СтрРазделить(Номенклатура.Артикул,"/"); 
				Если СписокАрт.Количество()=2 Тогда	
					B2B_Size = СписокАрт.Получить(1) 
				КонецЕсли;
			Иначе
				B2B_Size = B2B_ОбщиеПроцедурыИФункции.ПолучитьЗначениеСвойства(Строка.Номенклатура, Справочники.w_Настройки.Свойство_Size.Значение);	
			КонецЕсли;
			СтруктураСвойства = Новый Структура;
			СтруктураСвойства.Вставить("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("B2B_Size"));
			СтруктураСвойства.Вставить("Значение", B2B_Size);
			B2B_ОбщиеПроцедурыИФункции.ЗаписатьЗначениеСвойства(Номенклатура, СтруктураСвойства);	
			
			Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("B2B_FilterSizeBox"); 
			Если ЗначениеЗаполнено(Свойство) Тогда
				ЗначениеСвойства = B2B_ОбщиеПроцедурыИФункции.ПолучитьЗначениеСвойства(Номенклатура, Свойство);
				Если Не ЗначениеЗаполнено(ЗначениеСвойства) Тогда   
					Значение_Size_Фильтр = B2B_ОбщиеПроцедурыИФункции.ПолучитьРазмерныйРядДляФильтра(Номенклатура);
					СтруктураСвойства = Новый Структура;
					СтруктураСвойства.Вставить("Свойство", Свойство);
					СтруктураСвойства.Вставить("Значение", Значение_Size_Фильтр);
					B2B_ОбщиеПроцедурыИФункции.ЗаписатьЗначениеСвойства(Номенклатура, СтруктураСвойства); 
				КонецЕсли;
			КонецЕсли;

		КонецЦикла;
	КонецЦикла; 	
		
	Если Б2Б_Портал = Справочники.B2B_Портал.Jana
		ИЛИ	Б2Б_Портал = Справочники.B2B_Портал.SOliver
		ИЛИ Б2Б_Портал = Справочники.B2B_Портал.MarcoTozzi Тогда 
		
		// Формируем пользовательские каталоги 
		Сообщение = НСтр("ru = 'Формирование пользовательского каталога'");
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);	
		
		ТаблицаКаталогов = ПланОбменаБ2Б.СохраненнаяТаблицаКаталогов.Получить();
		ТекКаталог = ТаблицаКаталогов[0];
		
		РодительОсновной = Справочники.Б_ПользовательскиеГруппыТоваров.НайтиПоНаименованию(ТекКаталог.ИдКаталога);

		Обновить_Каталог(Б2Б_Портал, РодительОсновной);  

		Сообщение = НСтр("ru = 'Завершение задания'");
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);	
		
	ИначеЕсли Б2Б_Портал = Справочники.B2B_Портал.Tamaris Тогда
		
		// Формируем пользовательские каталоги 
		Сообщение = НСтр("ru = 'Формирование пользовательского каталога'");
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);	
		
		ТаблицаКаталогов = ПланОбменаБ2Б.СохраненнаяТаблицаКаталогов.Получить();
		ТекКаталог = ТаблицаКаталогов[0];
		
		РодительОсновной = Справочники.Б_ПользовательскиеГруппыТоваров.НайтиПоНаименованию(ТекКаталог.ИдКаталога);

		Обновить_Tamaris(Б2Б_Портал, РодительОсновной);  

		Сообщение = НСтр("ru = 'Завершение задания'");
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);
		
	КонецЕсли; 
		
КонецПроцедуры   

Функция ПолучитьТаблицуОстатков(СписокСкладов)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(, Склад в Иерархии (&Склад)) КАК ТоварыНаСкладахОстатки";
	
	Запрос.УстановитьПараметр("Склад", СписокСкладов);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции  
  
Функция ПолучитьНоменклатуруПоАртикуу(Артикул)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Артикул Подобно &Артикул + ""%""";
	
	Запрос.УстановитьПараметр("Артикул", Артикул);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура Обновить_MarcoTozzi(Портал, ПользовательскиеГруппы) 
	
	Если НЕ ЗначениеЗаполнено(Портал) Тогда	
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПользовательскиеГруппы) Тогда
		Возврат;
	КонецЕсли;
	
	// Вставить содержимое обработчика.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|		Номенклатура.Ссылка КАК Ссылка,
	|		Номенклатура.ВидНоменклатуры КАК ВторойУровень,
	|		Номенклатура.НаименованиеПолное КАК НаименованиеПолное
	|	ИЗ
	|		Справочник.Номенклатура КАК Номенклатура	
	|	ГДЕ
	|		Номенклатура.B2B_Портал = &Портал";
	
	Запрос.УстановитьПараметр("Портал", Портал);
	//Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Пол"));
	Рез = Запрос.Выполнить().Выгрузить();
	
	Уровень2 = Рез.Скопировать();
	Уровень2.Свернуть("ВторойУровень");
	Уровень3 = Рез.Скопировать();
	Уровень3.Свернуть("ВторойУровень, НаименованиеПолное");
	
	
	Для Каждого СтрокаУр2 Из Уровень2 Цикл   
		
		лУникальныйИдентификатор = Новый УникальныйИдентификатор;
		лИдентификатор = Строка(лУникальныйИдентификатор);
		лНаименование = СокрЛП(ПереводОбъекта(СтрокаУр2.ВторойУровень.Наименование, Справочники.RC_Язык.Russian));
		Спр1 = Справочники.Б_ПользовательскиеГруппыТоваров.НайтиПоНаименованию(лНаименование);				
		
		Если Спр1.Пустая() Тогда
			Спр1 = Справочники.Б_ПользовательскиеГруппыТоваров.СоздатьЭлемент();
			Спр1.ИдентификаторРаздела = лИдентификатор;
			Спр1.Родитель = ПользовательскиеГруппы;
			Спр1.Наименование = СокрЛП(лНаименование);
			Попытка
				Спр1.Записать();
			Исключение
				//Сообщить("Не удалось записать элемент:" + ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		
		
		ПоискУр3 = Уровень3.НайтиСтроки(Новый Структура("ВторойУровень", СтрокаУр2.ВторойУровень));
		Для Каждого СтрокаУр3 Из ПоискУр3 Цикл   
			
			лУникальныйИдентификатор = Новый УникальныйИдентификатор;
			лИдентификатор = Строка(лУникальныйИдентификатор);
			лНаименование = СокрЛП(СтрокаУр3.НаименованиеПолное);
			Спр2 = Справочники.Б_ПользовательскиеГруппыТоваров.НайтиПоНаименованию(лНаименование, , Спр1.Ссылка);				
			
			Если Спр2.Пустая() Тогда
				Спр2 = Справочники.Б_ПользовательскиеГруппыТоваров.СоздатьЭлемент();
				Спр2.ИдентификаторРаздела = лИдентификатор;
				Спр2.Родитель = Спр1.Ссылка;
				Спр2.Наименование = СокрЛП(лНаименование);
			Иначе
				Спр2 = Спр1.ПолучитьОбъект();
			КонецЕсли;
			
			ПоискВложений = Рез.НайтиСтроки(Новый Структура("ВторойУровень, НаименованиеПолное", СтрокаУр3.ВторойУровень, СтрокаУр3.НаименованиеПолное));
			
			Спр2.Товары.Очистить();
			Для Каждого Вложение Из ПоискВложений Цикл
				СтрокаТовары = Спр2.Товары.Добавить();
				СтрокаТовары.Номенклатура = Вложение.Ссылка;
			КонецЦикла;
			
			Попытка
				Спр2.Записать();
			Исключение
				//Сообщить("Не удалось записать элемент:" + ОписаниеОшибки());
			КонецПопытки;			
			
		КонецЦикла;		
	КонецЦикла;	

КонецПроцедуры

Процедура Обновить_JanaOliver(Портал, ПользовательскиеГруппы)
	
	Если НЕ ЗначениеЗаполнено(Портал) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПользовательскиеГруппы) Тогда
		Возврат;
	КонецЕсли;

	// Вставить содержимое обработчика.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.Значение ЕСТЬ NULL
	|			ТОГДА ""Женщины""
	|		ИНАЧЕ ВложенныйЗапрос.Значение
	|	КОНЕЦ КАК ПервыйУровень,
	|	ВложенныйЗапрос.НаименованиеПолное КАК НаименованиеПолное
	|ИЗ
	|	(ВЫБРАТЬ
	|		Номенклатура.Ссылка КАК Ссылка,
	|		ЗначенияСвойствОбъектов.Значение КАК Значение,
	|		Номенклатура.НаименованиеПолное КАК НаименованиеПолное
	|	ИЗ
	|		Справочник.Номенклатура КАК Номенклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|			ПО Номенклатура.Ссылка = ЗначенияСвойствОбъектов.Объект
	|				И (ЗначенияСвойствОбъектов.Свойство = &Свойство)
	|	ГДЕ
	|		Номенклатура.B2B_Портал = &Портал) КАК ВложенныйЗапрос";
	
	Запрос.УстановитьПараметр("Портал", Портал);
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Пол"));
	Рез = Запрос.Выполнить().Выгрузить();
	
	//Уровень1 = Новый ТаблицаЗначений;
	Уровень1 = Рез.Скопировать();
	Уровень1.Свернуть("ПервыйУровень");
	Уровень2 = Рез.Скопировать();
	Уровень2.Свернуть("ПервыйУровень, НаименованиеПолное");
	Для Каждого СтрокаУр1 Из Уровень1 Цикл
		лУникальныйИдентификатор = Новый УникальныйИдентификатор;
		лИдентификатор = Строка(лУникальныйИдентификатор);
		лНаименование = СокрЛП(СтрокаУр1.ПервыйУровень);

		Спр = Справочники.Б_ПользовательскиеГруппыТоваров.НайтиПоНаименованию(лНаименование);
		Если Спр.Пустая() Тогда
			Спр = Справочники.Б_ПользовательскиеГруппыТоваров.СоздатьЭлемент();
			Спр.ИдентификаторРаздела = лИдентификатор;
			Спр.Родитель = ПользовательскиеГруппы;
			Спр.Наименование = лНаименование;
			Попытка
				Спр.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
								
		ПоискУр2 = Уровень2.НайтиСтроки(Новый Структура("ПервыйУровень", СтрокаУр1.ПервыйУровень));
		Для Каждого СтрокаУр2 Из ПоискУр2 Цикл   
			
			лУникальныйИдентификатор = Новый УникальныйИдентификатор;
			лИдентификатор = Строка(лУникальныйИдентификатор);
			лНаименование = СокрЛП(СтрокаУр2.НаименованиеПолное);
			Спр1 = Справочники.Б_ПользовательскиеГруппыТоваров.НайтиПоНаименованию(лНаименование);				
			
			Если Спр1.Пустая() Тогда
				Спр1 = Справочники.Б_ПользовательскиеГруппыТоваров.СоздатьЭлемент();
				Спр1.ИдентификаторРаздела = лИдентификатор;
				Спр1.Родитель = Спр.Ссылка;
				Спр1.Наименование = СокрЛП(лНаименование);
			Иначе
				Спр1 = Спр1.ПолучитьОбъект();
			КонецЕсли;			

			ПоискУр3 = Рез.НайтиСтроки(Новый Структура("ПервыйУровень, НаименованиеПолное", СтрокаУр2.ПервыйУровень, СтрокаУр2.НаименованиеПолное));
			
			Спр1.Товары.Очистить();
			Для Каждого СтрокаУр3 Из ПоискУр3 Цикл
				СтрокаТовары = Спр1.Товары.Добавить();
				СтрокаТовары.Номенклатура = СтрокаУр3.Ссылка;
			КонецЦикла;
			
			Попытка
				Спр1.Записать();
			Исключение
			КонецПопытки;
			
		КонецЦикла;	
	КонецЦикла;

КонецПроцедуры

Процедура Обновить_Tamaris(Портал, ПользовательскиеГруппы) 
	
	Если НЕ ЗначениеЗаполнено(Портал) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПользовательскиеГруппы) Тогда
		Возврат;
	КонецЕсли; 
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.СЭ_ТипНоменклатуры.Родитель КАК СЭ_ТипНоменклатурыРодитель
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	&УсловиеЗапроса = ИСТИНА";     
	
	УсловиеЗапроса = "";
	глДополнитьТекст(УсловиеЗапроса,"1=1");
	глДополнитьТекст(УсловиеЗапроса,"НЕ Номенклатура.СЭ_ТипНоменклатуры = ЗНАЧЕНИЕ(Справочник.СЭ_ТипНоменклатуры.ПустаяСсылка)");
	глДополнитьТекст(УсловиеЗапроса,"Номенклатура.B2B_Портал = &B2B_Портал"); 
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеЗапроса = ИСТИНА", УсловиеЗапроса);
	
	Запрос.УстановитьПараметр("B2B_Портал", Портал);
	
	НоменклатураПоТипам = Запрос.Выполнить().Выгрузить();
	
	Для Каждого строка Из НоменклатураПоТипам Цикл
		Если Строка.СЭ_ТипНоменклатурыРодитель.Уровень() > 1 Тогда  
			Пока 1=1 Цикл  
				Строка.СЭ_ТипНоменклатурыРодитель = Строка.СЭ_ТипНоменклатурыРодитель.Родитель;
				Если Строка.СЭ_ТипНоменклатурыРодитель.Уровень() = 1 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Вставить содержимое обработчика.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СЭ_ТипНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СЭ_ТипНоменклатуры КАК СЭ_ТипНоменклатуры
	|ГДЕ
	|	НЕ СЭ_ТипНоменклатуры.ПометкаУдаления
	|	И СЭ_ТипНоменклатуры.ЭтоГруппа
	|	И СЭ_ТипНоменклатуры.Ссылка В ИЕРАРХИИ(&Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СЭ_ТипНоменклатуры.Наименование
	|ИТОГИ ПО
	|	Ссылка ТОЛЬКО ИЕРАРХИЯ";   
	
	Запрос.УстановитьПараметр("Ссылка", НоменклатураПоТипам.ВыгрузитьКолонку("СЭ_ТипНоменклатурыРодитель"));
	
	Рез = Запрос.Выполнить().Выгрузить();
	
	
	Для Каждого Строка Из Рез Цикл    

		Если Строка.Ссылка.Уровень()>1 Тогда
			Продолжить;
		КонецЕсли;  
		
		лИдентификатор = Строка(Строка.Ссылка.УникальныйИдентификатор());  
		Спр = Справочники.Б_ПользовательскиеГруппыТоваров.НайтиПоРеквизиту("ИдентификаторРаздела",лИдентификатор);
		
		лИдентификаторРодитель = Строка(Строка.Ссылка.Родитель.УникальныйИдентификатор());   
		СпрР = Справочники.Б_ПользовательскиеГруппыТоваров.НайтиПоРеквизиту("ИдентификаторРаздела",лИдентификаторРодитель);	
		
		Если СпрР.Пустая() Тогда
			СпрР = ПользовательскиеГруппы;
		КонецЕсли;
		
		Если Спр.Пустая() Тогда
			СпрО = Справочники.Б_ПользовательскиеГруппыТоваров.СоздатьЭлемент();
		Иначе
			СпрО = Спр.ПолучитьОбъект();
		КонецЕсли; 
		
		СпрО.Родитель = СпрР;
		СпрО.Наименование = Строка.Ссылка.Наименование;
		СпрО.ИдентификаторРаздела = лИдентификатор;  
		
		СпрО.Товары.Очистить();   
		
		ПоискТоваров = НоменклатураПоТипам.НайтиСтроки(Новый Структура("СЭ_ТипНоменклатурыРодитель", Строка.Ссылка));
		Для Каждого СтрокаПоиска Из ПоискТоваров Цикл
			СтрокаТовары = СпрО.Товары.Добавить();
			СтрокаТовары.Номенклатура = СтрокаПоиска.Ссылка;
		КонецЦикла;
		
		Попытка
			СпрО.Записать();
		Исключение
			//Сообщить("Не удалось записать элемент:" + ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла; 

КонецПроцедуры

Процедура Обновить_Каталог(Портал, ПользовательскиеГруппы)
	
	Если НЕ ЗначениеЗаполнено(Портал) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПользовательскиеГруппы) Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.Значение ЕСТЬ NULL
	|			ТОГДА ""Женщины""
	|		ИНАЧЕ ВложенныйЗапрос.Значение
	|	КОНЕЦ КАК ПервыйУровень,
	|	ВложенныйЗапрос.ВидНоменклатуры КАК ВторойУровень,
	|	ВложенныйЗапрос.НаименованиеПолное КАК НаименованиеПолное
	|ИЗ
	|	(ВЫБРАТЬ
	|		Номенклатура.Ссылка КАК Ссылка,
	|		ЗначенияСвойствОбъектов.Значение КАК Значение,
	|		Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|		Номенклатура.НаименованиеПолное КАК НаименованиеПолное
	|	ИЗ
	|		Справочник.Номенклатура КАК Номенклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|			ПО Номенклатура.Ссылка = ЗначенияСвойствОбъектов.Объект
	|				И (ЗначенияСвойствОбъектов.Свойство = &Свойство)
	|	ГДЕ
	|		Номенклатура.B2B_Портал = &Портал) КАК ВложенныйЗапрос";
	
	Запрос.УстановитьПараметр("Портал", Портал);
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Пол"));
	Рез = Запрос.Выполнить().Выгрузить();
	
	//Уровень1 = Новый ТаблицаЗначений;
	Уровень1 = Рез.Скопировать();
	Уровень1.Свернуть("ПервыйУровень");
	Уровень2 = Рез.Скопировать();
	Уровень2.Свернуть("ПервыйУровень, ВторойУровень");
	Уровень3 = Рез.Скопировать();
	Уровень3.Свернуть("ПервыйУровень, ВторойУровень, НаименованиеПолное");
	
	Для Каждого СтрокаУр1 Из Уровень1 Цикл
		лУникальныйИдентификатор = Новый УникальныйИдентификатор;
		лИдентификатор = Строка(лУникальныйИдентификатор);
		лНаименование = СокрЛП(СтрокаУр1.ПервыйУровень); 
		
		Если ВРег(лНаименование) = "МУЖЧИНЫ" Тогда
			лНаименование = "Мужчинам";	
		ИначеЕсли ВРег(лНаименование) = "ЖЕНЩИНЫ" Тогда
			лНаименование = "Женщинам";
		ИначеЕсли ВРег(лНаименование) = "ДЕТИ" Тогда 
			лНаименование = "Детям";
		КонецЕсли;

		Спр = Справочники.Б_ПользовательскиеГруппыТоваров.НайтиПоНаименованию(лНаименование);
		Если Спр.Пустая() Тогда
			Спр = Справочники.Б_ПользовательскиеГруппыТоваров.СоздатьЭлемент();
			Спр.ИдентификаторРаздела = лИдентификатор;
			Спр.Родитель = ПользовательскиеГруппы;
			Спр.Наименование = лНаименование;
			Попытка
				Спр.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
								
		ПоискУр2 = Уровень2.НайтиСтроки(Новый Структура("ПервыйУровень", СтрокаУр1.ПервыйУровень));
		Для Каждого СтрокаУр2 Из ПоискУр2 Цикл   
			
			лУникальныйИдентификатор = Новый УникальныйИдентификатор;
			лИдентификатор = Строка(лУникальныйИдентификатор);
			лНаименование = СокрЛП(ПереводОбъекта(СтрокаУр2.ВторойУровень.Наименование, Справочники.RC_Язык.Russian));
			
			Спр1 = Справочники.Б_ПользовательскиеГруппыТоваров.НайтиПоНаименованию(лНаименование,,Спр.Ссылка);				
			
			Если Спр1.Пустая() Тогда
				Спр1 = Справочники.Б_ПользовательскиеГруппыТоваров.СоздатьЭлемент();
				Спр1.ИдентификаторРаздела = лИдентификатор;
				Спр1.Родитель = Спр.Ссылка;
				Спр1.Наименование = СокрЛП(лНаименование);
				Попытка
					Спр1.Записать();
				Исключение
				КонецПопытки;
			КонецЕсли;
			
			
			ПоискУр3 = Уровень3.НайтиСтроки(Новый Структура("ПервыйУровень, ВторойУровень", СтрокаУр2.ПервыйУровень, СтрокаУр2.ВторойУровень));
			Для Каждого СтрокаУр3 Из ПоискУр3 Цикл   
				
				лУникальныйИдентификатор = Новый УникальныйИдентификатор;
				лИдентификатор = Строка(лУникальныйИдентификатор);
				лНаименование = СокрЛП(СтрокаУр3.НаименованиеПолное); 
				
				Если Портал = Справочники.B2B_Портал.MarcoTozzi Тогда
					лНаименование = СтрЗаменить(лНаименование, "женские", "");
					лНаименование = СтрЗаменить(лНаименование, "женская", "");
					лНаименование = СтрЗаменить(лНаименование, "жен.", "");;
				КонецЕсли;
			
				Спр2 = Справочники.Б_ПользовательскиеГруппыТоваров.НайтиПоНаименованию(лНаименование, , Спр1.Ссылка);				
				
				Если Спр2.Пустая() Тогда
					Спр2 = Справочники.Б_ПользовательскиеГруппыТоваров.СоздатьЭлемент();
					Спр2.ИдентификаторРаздела = лИдентификатор;
					Спр2.Родитель = Спр1.Ссылка;
					Спр2.Наименование = СокрЛП(лНаименование);
				Иначе
					Спр2 = Спр2.ПолучитьОбъект();
				КонецЕсли;
				
				ПоискВложений = Рез.НайтиСтроки(Новый Структура("ПервыйУровень, ВторойУровень, НаименованиеПолное", СтрокаУр3.ПервыйУровень, СтрокаУр3.ВторойУровень, СтрокаУр3.НаименованиеПолное));
				
				Спр2.Товары.Очистить();
				Для Каждого Вложение Из ПоискВложений Цикл
					СтрокаТовары = Спр2.Товары.Добавить();
					СтрокаТовары.Номенклатура = Вложение.Ссылка;
				КонецЦикла;
				
				Попытка
					Спр2.Записать();
				Исключение
				КонецПопытки;			
				
			КонецЦикла;		
		КонецЦикла;	
	КонецЦикла;
	
КонецПроцедуры

Функция ПереводОбъекта(ссОбъект, Язык)
	Если Не ЗначениеЗаполнено(ссОбъект) Тогда
		Возврат "";
	КонецЕсли;
	
	запрос = Новый Запрос("ВЫБРАТЬ
	| RC_Переводы.Значение
	|ИЗ
	| РегистрСведений.RC_Переводы КАК RC_Переводы
	|ГДЕ
	| RC_Переводы.Объект = &Объект
	| И RC_Переводы.Язык = &Язык");
	запрос.УстановитьПараметр("Объект", ссОбъект);
	запрос.УстановитьПараметр("Язык", Язык);
	
	выборка = запрос.Выполнить().Выбрать();
	Если выборка.Следующий() Тогда
		Возврат выборка.Значение;
	КонецЕсли;
	
	Возврат "" + ссОбъект;	
	
КонецФункции

//1БЦ++ МГ 31929
Функция ОбработатьДату(ДатаПроверки)
	
	Запрос = Новый Запрос;	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря КАК ДатаКалендаря
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.Год МЕЖДУ &ГодНач И &ГодКон
	|	И РегламентированныйПроизводственныйКалендарь.ВидДня В(&МасВидДня)";
	
	Запрос.УстановитьПараметр("ГодНач",Год(ТекущаяДата())-1);
	Запрос.УстановитьПараметр("ГодКон",Год(ТекущаяДата())+1);
	
	МасВидДня = Новый Массив;
	МасВидДня.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	МасВидДня.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
	Запрос.УстановитьПараметр("МасВидДня", МасВидДня);
	
	ТзРабДней = Запрос.Выполнить().Выгрузить();
	МасРабДней = ТзРабДней.ВыгрузитьКолонку("ДатаКалендаря"); 
	
	Если ЗначениеЗаполнено(ДатаПроверки) Тогда	
		ДобавитьДней = 1;		
		Для дн = 1 По ДобавитьДней Цикл
			ДатаПроверки = ДатаПроверки + 86400;
			Добавлять = Истина;
			сч = 1;
			Пока Добавлять Цикл
				сч = сч+1;
				Если МасРабДней.Найти(НачалоДня(ДатаПроверки)) = Неопределено Тогда
					ДатаПроверки = ДатаПроверки + 86400;
					//ошибка в производственном календаре, нерабочих дней > 20 
					Если сч > 20 Тогда
						Добавлять = Ложь;
						Сообщить("Проверьте заполнение производственного календаря!");
						ДатаПроверки = ДатаПроверки + 86400; 
					КонецЕсли;
				Иначе
					Добавлять = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	Возврат ДатаПроверки; 
	
КонецФункции
//1БЦ-- МГ 31929

Процедура НеИспользуется_СнятиеРезерва() Экспорт
		
	НастройкиПодключения = B2B_ОбщиеПроцедурыИФункции.ВосстановитьНастройкиПодключенияПортал();
	//1БЦ++ МГ 31929	
	НастройкаГлубинаАнализаДней = Неопределено;
	Если ТипЗнч(НастройкиПодключения) = Тип("Соответствие") Тогда
		НастройкаГлубинаАнализаДней = НастройкиПодключения.Получить("БЦ_ГлубинаПроверкиЗаказов");
	КонецЕсли;
	Если НастройкаГлубинаАнализаДней = Неопределено или НастройкаГлубинаАнализаДней = 0 Тогда 
		НастройкаГлубинаАнализаДней=1;
		ЗаписьЖурналаРегистрации("B2B регламентное задание снятие резерва", УровеньЖурналаРегистрации.Информация, , , "Проверьте настройки значения глубины анализа");
	КонецЕсли;                          
	ДатаЗадания = ТекущаяДата();
	//1БЦ-- МГ 31929
		
	ЗаписьЖурналаРегистрации("B2B регламентное задание снятие резерва", УровеньЖурналаРегистрации.Информация, , , "Запуск этапа 1");
	//Часть 1 отмена неотгруженных заказов

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Внутр.ЗаказПокупателя КАК ЗаказПокупателя,
		|	Внутр.Период КАК Период,
		|	Внутр.Период КАК ДатаПроверки
		|ИЗ
		|	(ВЫБРАТЬ
		|		B2B_СтатусыЗаказов.ЗаказПокупателя КАК ЗаказПокупателя,
		|		B2B_СтатусыЗаказовСрезПоследних_Актуальный.СтатусЗаказа КАК АктуальныйСтатус,
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РеализацияТоваровУслуг.Ссылка) КАК КоличествоРасход,
		|		B2B_СтатусыЗаказов.Период КАК Период
		|	ИЗ
		|		РегистрСведений.B2B_СтатусыЗаказов КАК B2B_СтатусыЗаказов
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.B2B_СтатусыЗаказов.СрезПоследних КАК B2B_СтатусыЗаказовСрезПоследних_Актуальный
		|			ПО B2B_СтатусыЗаказов.ЗаказПокупателя = B2B_СтатусыЗаказовСрезПоследних_Актуальный.ЗаказПокупателя
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|			ПО B2B_СтатусыЗаказов.ЗаказПокупателя = РеализацияТоваровУслуг.CRM_Основание
		|				И (РеализацияТоваровУслуг.Проведен)
		|	ГДЕ
		|		B2B_СтатусыЗаказов.СтатусЗаказа = &СтатусЗаказаНовый
		|		И B2B_СтатусыЗаказовСрезПоследних_Актуальный.СтатусЗаказа = &СтатусЗаказаНовый
		|		И B2B_СтатусыЗаказов.ЗаказПокупателя.Ответственный.Наименование = ""B2B_User""
		|		И B2B_СтатусыЗаказов.Период > &Период
		|	
		|	СГРУППИРОВАТЬ ПО
		|		B2B_СтатусыЗаказов.ЗаказПокупателя,
		|		B2B_СтатусыЗаказовСрезПоследних_Актуальный.СтатусЗаказа,
		|		B2B_СтатусыЗаказов.Период) КАК Внутр
		|ГДЕ
		|	Внутр.АктуальныйСтатус = &СтатусЗаказаНовый
		|	И ЕСТЬNULL(Внутр.КоличествоРасход, 0) = 0
		|	И Внутр.ЗаказПокупателя.Проведен";
	
	Запрос.УстановитьПараметр("СтатусЗаказаНовый", Справочники.B2B_СтатусыЗаказов.Новый);
	Запрос.УстановитьПараметр("Период", ДобавитьМесяц(ДатаЗадания,-1));
	
	ТЗ = Запрос.Выполнить().Выгрузить(); 
	Для Каждого Стр Из ТЗ Цикл 
		Стр.ДатаПроверки = ОбработатьДату(Стр.ДатаПроверки);		
	КонецЦикла;
	
	ЗапросОтбор = Новый Запрос;
	ЗапросОтбор.Текст = 
		"ВЫБРАТЬ
		|	ТЗ.ЗаказПокупателя КАК ЗаказПокупателя,
		|	ТЗ.Период КАК Период,
		|	ТЗ.ДатаПроверки КАК ДатаПроверки
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт.ЗаказПокупателя КАК ЗаказПокупателя
		|ИЗ
		|	вт КАК вт
		|ГДЕ
		|	вт.ДатаПроверки МЕЖДУ &НачалоПериода И &КонецПериода";
	
	ЗапросОтбор.УстановитьПараметр("ТЗ", ТЗ);
	ЗапросОтбор.УстановитьПараметр("КонецПериода", ДатаЗадания);
	ЗапросОтбор.УстановитьПараметр("НачалоПериода", ДатаЗадания-НастройкаГлубинаАнализаДней*86400);
	
	РезультатЗапросОтбор = ЗапросОтбор.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапросОтбор.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокОбъект = ВыборкаДетальныеЗаписи.ЗаказПокупателя.ПолучитьОбъект();
		Для Каждого Товар Из ДокОбъект.Товары Цикл
			Товар.Размещение = неопределено;
		КонецЦикла;
		ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);			
		МассивЗаказов = Новый Массив;
		МассивЗаказов.Добавить(ДокОбъект.Ссылка);
	
		B2B_ОбщиеПроцедурыИФункции.ВыгрузитьДокументы(НастройкиПодключения, МассивЗаказов);	
		ЗаписьЖурналаРегистрации("B2B регламентное задание снятие резерва", УровеньЖурналаРегистрации.Информация, , , "Отменено размещение и проведение заказа " + ВыборкаДетальныеЗаписи.ЗаказПокупателя);
	КонецЦикла;

	//Часть 2 - Смена статуса с новый на Подтвержден, формируется к отправке если была отгрузка
	ЗаписьЖурналаРегистрации("B2B регламентное задание снятие резерва", УровеньЖурналаРегистрации.Информация, , , "Запуск этапа 2");
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказыПокупателейОбороты.Регистратор КАК Регистратор,
	               |	ЗаказыПокупателейОбороты.ЗаказПокупателя КАК ЗаказПокупателя,
	               |	ЗаказыПокупателейОбороты.КоличествоРасход КАК КоличествоРасход,
	               |	B2B_СтатусыЗаказовСрезПоследних_Актуальный.СтатусЗаказа КАК АктуальныйСтатус
	               |ИЗ
	               |	РегистрНакопления.ЗаказыПокупателей.Обороты(&Период, , Регистратор, ) КАК ЗаказыПокупателейОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.B2B_СтатусыЗаказов.СрезПоследних КАК B2B_СтатусыЗаказовСрезПоследних_Актуальный
	               |		ПО ЗаказыПокупателейОбороты.ЗаказПокупателя = B2B_СтатусыЗаказовСрезПоследних_Актуальный.ЗаказПокупателя
	               |ГДЕ
	               |	ЗаказыПокупателейОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	               |	И B2B_СтатусыЗаказовСрезПоследних_Актуальный.СтатусЗаказа = &СтатусЗаказаНовый
	               |	И ЗаказыПокупателейОбороты.КоличествоРасход > 0
				   |	И ЗаказыПокупателейОбороты.ЗаказПокупателя.Ответственный.Наименование = ""B2B_User""";
	
    Запрос.УстановитьПараметр("Период", ДатаЗадания-НастройкаГлубинаАнализаДней*86400);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НовыйСтатус = РегистрыСведений.B2B_СтатусыЗаказов.СоздатьМенеджерЗаписи();
		НовыйСтатус.Активность = Истина;
		НовыйСтатус.Период = ТекущаяДата();
		НовыйСтатус.ЗаказПокупателя = ВыборкаДетальныеЗаписи.ЗаказПокупателя;
		НовыйСтатус.СтатусЗаказа = Справочники.B2B_СтатусыЗаказов.ПодтвержденОтправка;
		НовыйСтатус.Записать();
		ЗаписьЖурналаРегистрации("B2B регламентное задание снятие резерва", УровеньЖурналаРегистрации.Информация, , , "Измене статус заказа " + ВыборкаДетальныеЗаписи.ЗаказПокупателя);
	КонецЦикла;

	ЗаписьЖурналаРегистрации("B2B регламентное задание снятие резерва", УровеньЖурналаРегистрации.Информация, , , "Задание завершено");
	
	
КонецПроцедуры   

Функция НеИспользуется_ВыгрузкаОстаткаНаСайт(ЗапросGet = Ложь) Экспорт
	
	ЗапросУзлов = Новый Запрос;
	ЗапросУзлов.Текст =
	"ВЫБРАТЬ
	|	ПланОбмена.Ссылка КАК УзелОбмена, 
	|	ПланОбмена.B2B_Портал КАК Портал, 
	|	ПланОбмена.СохраненнаяТаблицаКаталогов КАК СохраненнаяТаблицаКаталогов
	|
	|ИЗ
	|	ПланОбмена.ОбменССайтом КАК ПланОбмена
	|ГДЕ
	|	НЕ ПланОбмена.ПометкаУдаления
	|	И ПланОбмена.ОбменТоварами
	|	И ПланОбмена.Ссылка <> &ЭтотУзел";
	ЗапросУзлов.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ОбменССайтом.ЭтотУзел());
	ВыборкаУзлов = ЗапросУзлов.Выполнить().Выбрать();
	Пока ВыборкаУзлов.Следующий() Цикл
		
		Портал = ВыборкаУзлов["Портал"]; 
		
		НастройкиПодключения = B2B_ОбщиеПроцедурыИФункции.ВосстановитьНастройкиПодключенияПортал(Портал); 
		Если Не ЗначениеЗаполнено(НастройкиПодключения) Или ТипЗнч(НастройкиПодключения) <> Тип("Соответствие") Тогда
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	
	ЗаписьЖурналаРегистрации("ОбменB2B.UpdateStockGoods", УровеньЖурналаРегистрации.Информация,,,"Начало процедуры выгрузки остатков на сайт");
	Если НЕ ЗапросGet Тогда
		НастройкиПодключения = B2B_ОбщиеПроцедурыИФункции.ВосстановитьНастройкиПодключенияПортал();
		
		Если ТипЗнч(НастройкиПодключения) = Тип("Соответствие") Тогда
			АдресСервера    = НастройкиПодключения.Получить("АдресСервера");
			Логин 			= НастройкиПодключения.Получить("Логин");
			Пароль       	= НастройкиПодключения.Получить("Пароль");
		Иначе
			Возврат "Error 1";
		КонецЕсли;
		ЗаписьЖурналаРегистрации("ОбменB2B.UpdateStockGoods", УровеньЖурналаРегистрации.Информация,,,"Настройки подключения успешно получены");
	КонецЕсли;
	РЗ = Неопределено;
	Регламентные = РегламентныеЗадания.ПолучитьРегламентныеЗадания();
	Нашли = Ложь;
	Для каждого Задание Из Регламентные Цикл
		Если НЕ Нашли Тогда
			Если Задание.Метаданные.Имя = "ОбменССайтом" Тогда
				//Если Задание.Использование Тогда
					Нашли = Истина;
					РЗ = Задание;
				//КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если НЕ Нашли Тогда
		ЗаписьЖурналаРегистрации("ОбменB2B.UpdateStockGoods", УровеньЖурналаРегистрации.Информация,,,"Регламентное задание не найдено");
		Возврат "Error 2";
	КонецЕсли;
	НомерПланаОбмена = РЗ.Параметры[0];
	Настройка = ПланыОбмена.Б_ОбменССайтом.НайтиПоКоду(НомерПланаОбмена);
			
	ПараметрыОбмена = Новый Структура;
	//НастройкиУспешноДобавлены = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ДобавитьОсновныеНастройкиВПараметры(Настройка, ПараметрыОбмена);
	//НастройкиУспешноДобавлены = Б_ОбщиеПроцедурыИФункцииОбменаССайтом.ДобавитьНастройкиОбменаВПараметры(Настройка, ПараметрыОбмена, Ложь);

	Запрос = Новый Запрос;

	НомерОтбора = 1;
	ЗапросПоНом = "";
	Для Каждого СтрокаОтбораКаталога Из ПараметрыОбмена.ТаблицаОтборовКаталогов Цикл
		
		Отбор = "";		
		Для Каждого НастройкаОтбора Из СтрокаОтбораКаталога.ОтборПостроителяОтчета Цикл
			Если НастройкаОтбора.Использование = Истина И ВРЕГ(ЛЕВ(НастройкаОтбора.ПутьКДанным,12))=ВРЕГ("Номенклатура") Тогда                          
				Если ВРЕГ(НастройкаОтбора.ПутьКДанным) = ВРЕГ("Номенклатура") Тогда 
					 ПутьКДанным = "Номенклатура.Ссылка";
				Иначе
					ПутьКДанным = НастройкаОтбора.ПутьКДанным;
				КонецЕсли;
		        Если НастройкаОтбора.ВидСравнения = ВидСравнения.Равно Тогда
			        Отбор = Отбор + " И " + ПутьКДанным +" = &Отбор"+Формат(НомерОтбора,"ЧГ=");
		        ИначеЕсли НастройкаОтбора.ВидСравнения = ВидСравнения.НеРавно Тогда
			        Отбор = Отбор + " И " + ПутьКДанным +" <> &Отбор"+Формат(НомерОтбора,"ЧГ=");
		        ИначеЕсли НастройкаОтбора.ВидСравнения = ВидСравнения.ВСписке Тогда
			        Отбор = Отбор + " И " + ПутьКДанным +" В (&Отбор"+Формат(НомерОтбора,"ЧГ=")+")";
		        ИначеЕсли НастройкаОтбора.ВидСравнения = ВидСравнения.НеВСписке Тогда
			        Отбор = Отбор + " И (НЕ " + ПутьКДанным +" В (&Отбор"+Формат(НомерОтбора,"ЧГ=")+"))";
		        ИначеЕсли НастройкаОтбора.ВидСравнения = ВидСравнения.ВИерархии Тогда
			        Отбор = Отбор + " И " + ПутьКДанным +" В ИЕРАРХИИ (&Отбор"+Формат(НомерОтбора,"ЧГ=")+")";
		        ИначеЕсли НастройкаОтбора.ВидСравнения = ВидСравнения.НеВИерархии Тогда
			        Отбор = Отбор + " И ( НЕ " + ПутьКДанным +" В ИЕРАРХИИ (&Отбор"+Формат(НомерОтбора,"ЧГ=")+"))";
		        ИначеЕсли НастройкаОтбора.ВидСравнения = ВидСравнения.ВСпискеПоИерархии Тогда
			        Отбор = Отбор + " И " + ПутьКДанным +" В ИЕРАРХИИ (&Отбор"+Формат(НомерОтбора,"ЧГ=")+")";
		        ИначеЕсли НастройкаОтбора.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
			        Отбор = Отбор + " И ( НЕ " + ПутьКДанным +" В ИЕРАРХИИ (&Отбор"+Формат(НомерОтбора,"ЧГ=")+"))";
				КонецЕсли;
				Запрос.УстановитьПараметр("Отбор"+Формат(НомерОтбора,"ЧГ="),НастройкаОтбора.Значение);
				НомерОтбора = НомерОтбора + 1;
			КонецЕсли;	
		КонецЦикла;
		Если ЗапросПоНом <> "" Тогда
			ЗапросПоНом = ЗапросПоНом + "
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ Ссылка КАК Номенклатура
			|ИЗ Справочник.Номенклатура КАК Номенклатура
			|";
		Иначе
			ЗапросПоНом = "
			|ВЫБРАТЬ Ссылка КАК Номенклатура
			|ПОМЕСТИТЬ НоменклатураОбменаВрем
			|ИЗ Справочник.Номенклатура КАК Номенклатура
			|";
		КонецЕсли;
		Если Отбор <> "" Тогда
			ЗапросПоНом = ЗапросПоНом + "
			|ГДЕ " + Сред(Отбор,3);
		КонецЕсли;
	КонецЦикла;
	
	
	ОтборСклад = "";		
	Для Каждого СтрокаОтбораКаталога Из ПараметрыОбмена.ТаблицаОтборовКаталогов Цикл
		Для Каждого НастройкаОтбора Из СтрокаОтбораКаталога.ОтборПостроителяОтчета Цикл
			Если НастройкаОтбора.Использование = Истина И ВРЕГ(ЛЕВ(НастройкаОтбора.ПутьКДанным,12))=ВРЕГ("Склад") Тогда                          
				Если ВРЕГ(НастройкаОтбора.ПутьКДанным) = ВРЕГ("Номенклатура") Тогда 
					 ПутьКДанным = "Склад.Ссылка";
				Иначе
					ПутьКДанным = НастройкаОтбора.ПутьКДанным;
				КонецЕсли;
		        Если НастройкаОтбора.ВидСравнения = ВидСравнения.Равно Тогда
			        ОтборСклад = ОтборСклад + " И " + ПутьКДанным +" = &ОтборСклад"+Формат(НомерОтбора,"ЧГ=");
		        ИначеЕсли НастройкаОтбора.ВидСравнения = ВидСравнения.НеРавно Тогда
			        ОтборСклад = ОтборСклад + " И " + ПутьКДанным +" <> &ОтборСклад"+Формат(НомерОтбора,"ЧГ=");
		        ИначеЕсли НастройкаОтбора.ВидСравнения = ВидСравнения.ВСписке Тогда
			        ОтборСклад = ОтборСклад + " И " + ПутьКДанным +" В (&ОтборСклад"+Формат(НомерОтбора,"ЧГ=")+")";
		        ИначеЕсли НастройкаОтбора.ВидСравнения = ВидСравнения.НеВСписке Тогда
			        ОтборСклад = ОтборСклад + " И (НЕ " + ПутьКДанным +" В (&ОтборСклад"+Формат(НомерОтбора,"ЧГ=")+"))";
		        ИначеЕсли НастройкаОтбора.ВидСравнения = ВидСравнения.ВИерархии Тогда
			        ОтборСклад = ОтборСклад + " И " + ПутьКДанным +" В ИЕРАРХИИ (&ОтборСклад"+Формат(НомерОтбора,"ЧГ=")+")";
		        ИначеЕсли НастройкаОтбора.ВидСравнения = ВидСравнения.НеВИерархии Тогда
			        ОтборСклад = ОтборСклад + " И ( НЕ " + ПутьКДанным +" В ИЕРАРХИИ (&ОтборСклад"+Формат(НомерОтбора,"ЧГ=")+"))";
		        ИначеЕсли НастройкаОтбора.ВидСравнения = ВидСравнения.ВСпискеПоИерархии Тогда
			        ОтборСклад = ОтборСклад + " И " + ПутьКДанным +" В ИЕРАРХИИ (&ОтборСклад"+Формат(НомерОтбора,"ЧГ=")+")";
		        ИначеЕсли НастройкаОтбора.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
			        ОтборСклад = ОтборСклад + " И ( НЕ " + ПутьКДанным +" В ИЕРАРХИИ (&ОтборСклад"+Формат(НомерОтбора,"ЧГ=")+"))";
				КонецЕсли;
				Запрос.УстановитьПараметр("ОтборСклад"+Формат(НомерОтбора,"ЧГ="),НастройкаОтбора.Значение);
				НомерОтбора = НомерОтбора + 1;
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	
	
	ТекВР = ТекущаяДата();
	Запрос.Текст = ЗапросПоНом + ";" + 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	НоменклатураОбменаВрем.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ НоменклатураОбмена
		|ИЗ
		|	НоменклатураОбменаВрем КАК НоменклатураОбменаВрем
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Номенклатура.Ссылка КАК Номенклатура
		|ПОМЕСТИТЬ ВремНоменклатураОтбор
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В
		|			(ВЫБРАТЬ
		|				НоменклатураОбмена.Номенклатура
		|			ИЗ
		|				НоменклатураОбмена)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РИ_ИдентификаторыНоменклатурыБитрикс.Объект КАК Объект,
		|	РИ_ИдентификаторыНоменклатурыБитрикс.Идентификатор КАК Идентификатор
		|ПОМЕСТИТЬ ВремИдГруппБитрикс
		|ИЗ
		|	РегистрСведений.B2B_РИ_ИдентификаторыНоменклатурыБитрикс КАК РИ_ИдентификаторыНоменклатурыБитрикс
		|ГДЕ
		|	РИ_ИдентификаторыНоменклатурыБитрикс.Объект.ЭтоГруппа
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВремНоменклатураОтбор.Номенклатура КАК Объект,
		|	ВремНоменклатураОтбор.Номенклатура.ИспользованиеХарактеристик КАК ВестиУчетПоХарактеристикам,
		|	ВремНоменклатураОтбор.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(РИ_ИдентификаторыНоменклатурыБитрикс.Идентификатор, ВремНоменклатураОтбор.Номенклатура.Ссылка) КАК Идентификатор,
		|	ВремНоменклатураОтбор.Номенклатура.ЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
		|	ЕСТЬNULL(РИ_ИдентификаторыЕдиниц.Идентификатор, ВремНоменклатураОтбор.Номенклатура.БазоваяЕдиницаИзмерения.Код) КАК ИдентификаторБазовойЕдиницы,
		|	ВремНоменклатураОтбор.Номенклатура.B2B_СЭ_ТипНоменклатуры КАК НоменклатураТоварДляБитрикса
		|ПОМЕСТИТЬ ВремНоменклатура
		|ИЗ
		|	ВремНоменклатураОтбор КАК ВремНоменклатураОтбор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.B2B_РИ_ИдентификаторыОстальные КАК РИ_ИдентификаторыЕдиниц
		|		ПО ВремНоменклатураОтбор.Номенклатура.ЕдиницаИзмерения = РИ_ИдентификаторыЕдиниц.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.B2B_РИ_ИдентификаторыНоменклатурыБитрикс КАК РИ_ИдентификаторыНоменклатурыБитрикс
		|		ПО ВремНоменклатураОтбор.Номенклатура = РИ_ИдентификаторыНоменклатурыБитрикс.Объект
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ВестиУчетПоХарактеристикам
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВремНоменклатура.Номенклатура КАК Номенклатура,
		|	ВремНоменклатура.Идентификатор КАК Идентификатор,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика
		|ПОМЕСТИТЬ ВремНоменклатураСХарактеристикамиВся
		|ИЗ
		|	ВремНоменклатура КАК ВремНоменклатура
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВремНоменклатура.Номенклатура,
		|	ВремНоменклатура.Идентификатор КАК Идентификатор,
		|	ХарактеристикиНоменклатуры.Ссылка
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВремНоменклатура КАК ВремНоменклатура
		|		ПО ХарактеристикиНоменклатуры.Владелец.Ссылка = ВремНоменклатура.Номенклатура
		|			И (ВремНоменклатура.ВестиУчетПоХарактеристикам <> Значение(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Остатки.Номенклатура КАК Номенклатура,
		|	Остатки.Характеристика КАК ХарактеристикаНоменклатуры,
		|	Остатки.ВНаличииОстаток КАК КоличествоОстаток,
		|	Остатки.Склад КАК Склад
		|ПОМЕСТИТЬ ВремТоварыНаСкладахОстаткиПоСкладам
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(
		|			,
		|			Номенклатура В
		|				(ВЫБРАТЬ
		|					ВремНоменклатура.Номенклатура
		|				ИЗ
		|					ВремНоменклатура) %СКЛАД% ) КАК Остатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Остатки.Номенклатура,
		|	Остатки.Характеристика,
		|	Остатки.Склад
		|;
		|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//|	Остатки.Номенклатура КАК Номенклатура,
		//|	Остатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		//|	Остатки.КоличествоОстаток КАК КоличествоОстаток,
		//|	Остатки.Склад КАК Склад
		//|ПОМЕСТИТЬ ВремТоварыВРозницеОстаткиПоСкладам
		//|ИЗ
		//|	РегистрНакопления.ТоварыВРознице.Остатки(
		//|			,
		//|			Номенклатура В
		//|				(ВЫБРАТЬ
		//|					ВремНоменклатура.Номенклатура
		//|				ИЗ
		//|					ВремНоменклатура) %СКЛАД% ) КАК Остатки
		//|
		//|ИНДЕКСИРОВАТЬ ПО
		//|	Остатки.Номенклатура,
		//|	Остатки.ХарактеристикаНоменклатуры,
		//|	Остатки.Склад
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//|	Остатки.Номенклатура КАК Номенклатура,
		//|	Остатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		//|	Остатки.КоличествоОстаток КАК КоличествоОстаток,
		//|	Остатки.Склад КАК Склад
		//|ПОМЕСТИТЬ ВремТоварыВНТТОстаткиПоСкладам
		//|ИЗ
		//|	РегистрНакопления.ТоварыВНТТ.Остатки(
		//|			,
		//|			Номенклатура В
		//|				(ВЫБРАТЬ
		//|					ВремНоменклатура.Номенклатура
		//|				ИЗ
		//|					ВремНоменклатура) %СКЛАД% ) КАК Остатки
		//|
		//|ИНДЕКСИРОВАТЬ ПО
		//|	Остатки.Номенклатура,
		//|	Остатки.ХарактеристикаНоменклатуры,
		//|	Остатки.Склад
		//|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Остатки.Номенклатура КАК Номенклатура,
		|	Остатки.Характеристика КАК ХарактеристикаНоменклатуры,
		|	Остатки.ВРезервеОстаток КАК КоличествоОстаток,
		|	Остатки.Склад КАК Склад
		|ПОМЕСТИТЬ ВремТоварыВРезервеНаСкладахОстаткиПоСкладам
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Остатки(
		|			,
		|			Номенклатура В
		|				(ВЫБРАТЬ
		|					ВремНоменклатура.Номенклатура
		|				ИЗ
		|					ВремНоменклатура) %СКЛАД% ) КАК Остатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Остатки.Номенклатура,
		|	Остатки.Характеристика,
		|	Остатки.Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Остатки.Номенклатура КАК Номенклатура,
		|	Остатки.Характеристика КАК ХарактеристикаНоменклатуры,
		|	Остатки.КОтгрузкеОстаток КАК КоличествоОстаток,
		|	Остатки.Склад КАК Склад
		|ПОМЕСТИТЬ ВремТоварыКПередачеСоСкладовОстаткиПоСкладам
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Остатки(
		|			,
		|			Номенклатура В
		|				(ВЫБРАТЬ
		|					ВремНоменклатура.Номенклатура
		|				ИЗ
		|					ВремНоменклатура) %СКЛАД% ) КАК Остатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Остатки.Номенклатура,
		|	Остатки.Характеристика,
		|	Остатки.Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НоменклатураСХарактеристиками.Номенклатура КАК Номенклатура,
		|	НоменклатураСХарактеристиками.Характеристика КАК Характеристика,
		|	НоменклатураСХарактеристиками.Идентификатор КАК Идентификатор,
		|	ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыКПередачеСоСкладовОстатки.КоличествоОстаток, 0) КАК Остаток
		|ПОМЕСТИТЬ ВремОстатки
		|ИЗ
		|	ВремНоменклатураСХарактеристикамиВся КАК НоменклатураСХарактеристиками
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВремТоварыНаСкладахОстаткиПоСкладам КАК ТоварыОстатки
		|		ПО НоменклатураСХарактеристиками.Номенклатура = ТоварыОстатки.Номенклатура
		|			И НоменклатураСХарактеристиками.Характеристика = ТоварыОстатки.ХарактеристикаНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВремТоварыВРезервеНаСкладахОстаткиПоСкладам КАК ТоварыВРезервеНаСкладахОстатки
		|		ПО НоменклатураСХарактеристиками.Номенклатура = ТоварыВРезервеНаСкладахОстатки.Номенклатура
		|			И НоменклатураСХарактеристиками.Характеристика = ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры
		|			И (ТоварыОстатки.Склад = ТоварыВРезервеНаСкладахОстатки.Склад)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВремТоварыКПередачеСоСкладовОстаткиПоСкладам КАК ТоварыКПередачеСоСкладовОстатки
		|		ПО НоменклатураСХарактеристиками.Номенклатура = ТоварыКПередачеСоСкладовОстатки.Номенклатура
		|			И НоменклатураСХарактеристиками.Характеристика = ТоварыКПередачеСоСкладовОстатки.ХарактеристикаНоменклатуры
		|			И (ТоварыОстатки.Склад = ТоварыКПередачеСоСкладовОстатки.Склад)
		|
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ
		//|	НоменклатураСХарактеристиками.Номенклатура,
		//|	НоменклатураСХарактеристиками.Характеристика,
		//|	НоменклатураСХарактеристиками.Идентификатор КАК Идентификатор,
		//|	ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыКПередачеСоСкладовОстатки.КоличествоОстаток, 0)
		//|ИЗ
		//|	ВремНоменклатураСХарактеристикамиВся КАК НоменклатураСХарактеристиками
		//|		ЛЕВОЕ СОЕДИНЕНИЕ ВремТоварыВРозницеОстаткиПоСкладам КАК ТоварыОстатки
		//|		ПО НоменклатураСХарактеристиками.Номенклатура = ТоварыОстатки.Номенклатура
		//|			И НоменклатураСХарактеристиками.Характеристика = ТоварыОстатки.ХарактеристикаНоменклатуры
		//|		ЛЕВОЕ СОЕДИНЕНИЕ ВремТоварыВРезервеНаСкладахОстаткиПоСкладам КАК ТоварыВРезервеНаСкладахОстатки
		//|		ПО НоменклатураСХарактеристиками.Номенклатура = ТоварыВРезервеНаСкладахОстатки.Номенклатура
		//|			И НоменклатураСХарактеристиками.Характеристика = ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры
		//|			И (ТоварыОстатки.Склад = ТоварыВРезервеНаСкладахОстатки.Склад)
		//|		ЛЕВОЕ СОЕДИНЕНИЕ ВремТоварыКПередачеСоСкладовОстаткиПоСкладам КАК ТоварыКПередачеСоСкладовОстатки
		//|		ПО НоменклатураСХарактеристиками.Номенклатура = ТоварыКПередачеСоСкладовОстатки.Номенклатура
		//|			И НоменклатураСХарактеристиками.Характеристика = ТоварыКПередачеСоСкладовОстатки.ХарактеристикаНоменклатуры
		//|			И (ТоварыОстатки.Склад = ТоварыКПередачеСоСкладовОстатки.Склад)
		//|
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ
		//|	НоменклатураСХарактеристиками.Номенклатура,
		//|	НоменклатураСХарактеристиками.Характеристика,
		//|	НоменклатураСХарактеристиками.Идентификатор КАК Идентификатор,
		//|	ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыКПередачеСоСкладовОстатки.КоличествоОстаток, 0)
		//|ИЗ
		//|	ВремНоменклатураСХарактеристикамиВся КАК НоменклатураСХарактеристиками
		//|		ЛЕВОЕ СОЕДИНЕНИЕ ВремТоварыВНТТОстаткиПоСкладам КАК ТоварыОстатки
		//|		ПО НоменклатураСХарактеристиками.Номенклатура = ТоварыОстатки.Номенклатура
		//|			И НоменклатураСХарактеристиками.Характеристика = ТоварыОстатки.ХарактеристикаНоменклатуры
		//|		ЛЕВОЕ СОЕДИНЕНИЕ ВремТоварыВРезервеНаСкладахОстаткиПоСкладам КАК ТоварыВРезервеНаСкладахОстатки
		//|		ПО НоменклатураСХарактеристиками.Номенклатура = ТоварыВРезервеНаСкладахОстатки.Номенклатура
		//|			И НоменклатураСХарактеристиками.Характеристика = ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры
		//|			И (ТоварыОстатки.Склад = ТоварыВРезервеНаСкладахОстатки.Склад)
		//|		ЛЕВОЕ СОЕДИНЕНИЕ ВремТоварыКПередачеСоСкладовОстаткиПоСкладам КАК ТоварыКПередачеСоСкладовОстатки
		//|		ПО НоменклатураСХарактеристиками.Номенклатура = ТоварыКПередачеСоСкладовОстатки.Номенклатура
		//|			И НоменклатураСХарактеристиками.Характеристика = ТоварыКПередачеСоСкладовОстатки.ХарактеристикаНоменклатуры
		//|			И (ТоварыОстатки.Склад = ТоварыКПередачеСоСкладовОстатки.Склад)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВремОстатки.Номенклатура КАК Номенклатура,
		|	ВремОстатки.Номенклатура.Артикул КАК Артикул,
		|	ВремОстатки.Номенклатура.B2B_СЭ_ТипНоменклатуры КАК СЭ_ТипНоменклатуры,
		|	ВремОстатки.Характеристика КАК Характеристика,
		|	ВремОстатки.Идентификатор КАК Идентификатор,
		|	СУММА(ВремОстатки.Остаток) КАК Остаток
		|ИЗ
		|	ВремОстатки КАК ВремОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ВремОстатки.Номенклатура,
		|	ВремОстатки.Характеристика, ВремОстатки.Идентификатор";
	
	Запрос.УстановитьПараметр("Обмен", Настройка);    

	Запрос.Текст = СтрЗаменить(Запрос.Текст,"%СКЛАД%",ОтборСклад);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	РезультатМ = Новый Массив;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			лИд = XMLСтрока(ВыборкаДетальныеЗаписи.Номенклатура.СЭ_ТипНоменклатуры) + "#" + XMLСтрока(ВыборкаДетальныеЗаписи.Идентификатор); 
			СтрокаРезультата = Новый Структура;
			СтрокаРезультата.Вставить("Id",лИд);
			СтрокаРезультата.Вставить("Art",ВыборкаДетальныеЗаписи.Артикул);
			СтрокаРезультата.Вставить("InStock",ВыборкаДетальныеЗаписи.Остаток);
			РезультатМ.Добавить(СтрокаРезультата);
	КонецЦикла;

	ТекстОтвета = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(РезультатМ);	
	ЗаписьЖурналаРегистрации("ОбменB2B.UpdateStockGoods", УровеньЖурналаРегистрации.Информация,,,"Сформирован ответ из " + РезультатМ.Количество() + " позиций  за " + (ТекущаяДата()-ТекВР) + " секунд");
	
	Если ЗапросGet Тогда
		Возврат ТекстОтвета;
	КонецЕсли;

	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");

	HTTPЗапрос  = Новый HTTPЗапрос("local/service/UpdateStockGoods/", ЗаголовокHTTP);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТекстОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	ЗащищенноеСоединение = ИнтеграцияИСПовтИсп.ЗащищенноеСоединение();
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			АдресСервера,
			,
			Логин,
			Пароль,
			,100000, ЗащищенноеСоединение);
		
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		ЗаписьЖурналаРегистрации("ОбменB2B.UpdateStockGoods", УровеньЖурналаРегистрации.Информация,,,"Отправка на сайт завершена успешно");
		
	Исключение
		
		ЗаписьЖурналаРегистрации("ОбменB2B.UpdateStockGoods", УровеньЖурналаРегистрации.Информация,,,"Ошибка отправки данных на сайт: "+
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Возврат Ложь;
		
	КонецПопытки;
	
	
	
КонецФункции

&Вместо("B2B_ВыгрузкаСтатусовЗаказовНаСайт")
Функция B2B_B2B_ВыгрузкаСтатусовЗаказовНаСайт(ЗапросGet = Ложь) Экспорт
//1БЦ по задаче 32798

	ЗаписьЖурналаРегистрации("B2B регламентное задание выгрузки статусов", УровеньЖурналаРегистрации.Информация, , , "Запуск задания");
	ДатаЗадания = НачалоДня(ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказТоварыВКоробах.Ссылка КАК Заказ,
	|	МАКСИМУМ(ЗаказТоварыВКоробах.ВариантКомплектации.Владелец.B2B_Портал) КАК Портал
	|ПОМЕСТИТЬ ВтЗаказы   
	|ИЗ
	|	Документ.ЗаказКлиента.гф_ТоварыВКоробах КАК ЗаказТоварыВКоробах
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|			ПО ЗаказТоварыВКоробах.Ссылка = ДополнительныеСведения.Объект 
	|				И ДополнительныеСведения.Свойство = &СвойствоЗагружен
	|			    И ДополнительныеСведения.Значение = Истина
	|
	|ГДЕ
	|	ЗаказТоварыВКоробах.Ссылка.Проведен
	|	И ЗаказТоварыВКоробах.ВариантКомплектации.Владелец.B2B_Портал <> ЗНАЧЕНИЕ(Справочник.B2B_Портал.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказТоварыВКоробах.Ссылка";
	Запрос.УстановитьПараметр("СвойствоЗагружен", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("B2B_Загружен")); 
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Заказы.Портал КАК Портал
	|ИЗ
	|	ВтЗаказы КАК Заказы";
	ВыборкаПорталов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПорталов.Следующий() Цикл
		
		Портал = ВыборкаПорталов["Портал"]; 
		
		НастройкиПодключения = B2B_ОбщиеПроцедурыИФункции.ВосстановитьНастройкиПодключенияПортал(Портал); 
		Если Не ЗначениеЗаполнено(НастройкиПодключения) Или ТипЗнч(НастройкиПодключения) <> Тип("Соответствие") Тогда
			Продолжить;
		КонецЕсли;
		
		ГлубинаАнализаРеализацийДляОтправкиСтатусаЗаказов = НастройкиПодключения.Получить("БЦ_ГлубинаАнализаРеализацийДляОтправкиСтатусаЗаказов");
		Если Не ЗначениеЗаполнено(ГлубинаАнализаРеализацийДляОтправкиСтатусаЗаказов) Тогда 
			ГлубинаАнализаРеализацийДляОтправкиСтатусаЗаказов = 7;
			ЗаписьЖурналаРегистрации("B2B регламентное задание выгрузки статусов", УровеньЖурналаРегистрации.Предупреждение,,,
				"Проверьте настройки значения глубины анализа");
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РеализацияТоваровУслуг.ЗаказКлиента КАК Заказ
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтЗаказы КАК Заказы
		|		ПО РеализацияТоваровУслуг.ЗаказКлиента = Заказы.Заказ 
		|		И Заказы.Портал = &Портал
		|
		|ГДЕ
		|	РеализацияТоваровУслуг.Проведен
		|	И РеализацияТоваровУслуг.Дата >= &Дата";
		Запрос.УстановитьПараметр("Портал", Портал); 
		Запрос.УстановитьПараметр("Дата", ДатаЗадания - 60*60*24 * ГлубинаАнализаРеализацийДляОтправкиСтатусаЗаказов);
		
		ЗаказыКлиентов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Заказ");
		
		B2B_ОбщиеПроцедурыИФункции.ВыгрузитьСтатусы(НастройкиПодключения, ЗаказыКлиентов);
		
	КонецЦикла;
	
КонецФункции

&Вместо("B2B_СнятиеРезерва")
Процедура гф_B2B_СнятиеРезерва(Портал)

	Если Не ЗначениеЗаполнено(Портал) Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиПодключения = B2B_ОбщиеПроцедурыИФункции.ВосстановитьНастройкиПодключенияПортал(Портал);
	Если Не ЗначениеЗаполнено(НастройкиПодключения) Или ТипЗнч(НастройкиПодключения) <> Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаГлубинаАнализаДней = Неопределено;
	Если ТипЗнч(НастройкиПодключения) = Тип("Соответствие") Тогда
		НастройкаГлубинаАнализаДней = НастройкиПодключения.Получить("БЦ_ГлубинаПроверкиЗаказов");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НастройкаГлубинаАнализаДней) Тогда 
		ЗаписьЖурналаРегистрации("B2B регламентное задание снятие резерва", УровеньЖурналаРегистрации.Предупреждение, , , "Проверьте настройки значения глубины анализа");
		НастройкаГлубинаАнализаДней = 5;
	КонецЕсли; 
	
	ДатаЗадания = НачалоДня(ТекущаяДатаСеанса());
	
	ЗаписьЖурналаРегистрации("B2B регламентное задание снятие резерва", УровеньЖурналаРегистрации.Информация, , , "Запуск этапа 1");
	
	//Часть 1 отмена неотгруженных заказов

	Запрос = Новый Запрос;
	Запрос.Текст =       
	"ВЫБРАТЬ
	|	СтатусыЗаказов.ЗаказПокупателя КАК ЗаказПокупателя,
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(СтатусыЗаказов.Период, ДЕНЬ)) КАК Период
	|ПОМЕСТИТЬ ВтНовыеЗаказы
	|ИЗ
	|	РегистрСведений.B2B_СтатусыЗаказов КАК СтатусыЗаказов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.гф_ТоварыВКоробах КАК ЗаказТоварыВКоробах
	|		ПО СтатусыЗаказов.ЗаказПокупателя = ЗаказТоварыВКоробах.Ссылка
	|			И (ЗаказТоварыВКоробах.ВариантКомплектации.Владелец.B2B_Портал = &Портал)
	|ГДЕ
	|	СтатусыЗаказов.СтатусЗаказа = ЗНАЧЕНИЕ(Справочник.гф_В2ВСтатусЗаказаКлиента.Новый)
	|	И СтатусыЗаказов.ЗаказПокупателя.Проведен
	|	И СтатусыЗаказов.Период > &МесяцНазад
	|
	|СГРУППИРОВАТЬ ПО
	|	СтатусыЗаказов.ЗаказПокупателя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеЗаказы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	МАКСИМУМ(НовыеЗаказы.Период) КАК Период
	|ПОМЕСТИТЬ ВтНовыеЗаказыБезРеализаций
	|ИЗ
	|	ВтНовыеЗаказы КАК НовыеЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.B2B_СтатусыЗаказов.СрезПоследних КАК СтатусыЗаказовСрезПоследних
	|		ПО НовыеЗаказы.ЗаказПокупателя = СтатусыЗаказовСрезПоследних.ЗаказПокупателя
	|			И СтатусыЗаказовСрезПоследних.СтатусЗаказа = ЗНАЧЕНИЕ(Справочник.гф_В2ВСтатусЗаказаКлиента.Новый)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО НовыеЗаказы.ЗаказПокупателя = РеализацияТоваровУслуг.ЗаказКлиента
	|			И РеализацияТоваровУслуг.Проведен
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	НовыеЗаказы.ЗаказПокупателя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Календарь.Дата
	|ПОМЕСТИТЬ ВтКалендарь
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК Календарь
	|ГДЕ
	|	Календарь.Дата МЕЖДУ &МесяцНазад И &ТекущаяДата
	|	И (Календарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|            ИЛИ Календарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Календарь1.Дата КАК Дата,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Календарь2.Дата) КАК НомерДня
	|ПОМЕСТИТЬ ВтКалендарьСПорядком
	|ИЗ
	|	ВтКалендарь КАК Календарь1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКалендарь КАК Календарь2
	|		ПО Календарь1.Дата >= Календарь2.Дата
	|СГРУППИРОВАТЬ ПО
	|	Календарь1.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеЗаказы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	НовыеЗаказы.Период КАК Период,	
	|	МИНИМУМ(Календарь1.Дата) КАК ПервыйРабочийДень
	|ПОМЕСТИТЬ ВтНовыЗаказыПервыеРабочиеДни
	|ИЗ
	|	ВтНовыеЗаказыБезРеализаций КАК НовыеЗаказы
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтКалендарьСПорядком КАК Календарь1
	|		ПО НовыеЗаказы.Период <= Календарь1.Дата
	|		
	|СГРУППИРОВАТЬ ПО
	|	НовыеЗаказы.ЗаказПокупателя,
	|	НовыеЗаказы.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеЗаказы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	НовыеЗаказы.Период КАК Период,	
	|	НовыеЗаказы.ПервыйРабочийДень КАК ПервыйРабочийДень,
	|	Календарь2.Дата КАК ПоследнийРабочийДень 
	|ИЗ
	|	ВтНовыЗаказыПервыеРабочиеДни КАК НовыеЗаказы
	|		
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтКалендарьСПорядком КАК Календарь1
	|		ПО НовыеЗаказы.ПервыйРабочийДень = Календарь1.Дата
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтКалендарьСПорядком КАК Календарь2
	|		ПО (Календарь2.НомерДня = Календарь1.НомерДня + &ГлубинаАнализаДней)
	|	
	|ГДЕ
	|	Календарь2.Дата < &ТекущаяДата";
	
	Запрос.УстановитьПараметр("Портал", Портал);
	Запрос.УстановитьПараметр("МесяцНазад", ДобавитьМесяц(ДатаЗадания, - 1));
	Запрос.УстановитьПараметр("ТекущаяДата",  ДатаЗадания);
	Запрос.УстановитьПараметр("ГлубинаАнализаДней",  НастройкаГлубинаАнализаДней);
	
	МассивЗаказов = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		
		МассивЗаказов.Добавить(Выборка.ЗаказПокупателя);
		
		Если СоздатьОбратнуюКорректировкуНазначения(Выборка.ЗаказПокупателя) Тогда
			
			ДокОбъект = Выборка.ЗаказПокупателя.ПолучитьОбъект();
			ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);			
			
			ЗаписьЖурналаРегистрации("B2B регламентное задание снятие резерва", УровеньЖурналаРегистрации.Информация,,
				Выборка.ЗаказПокупателя, "Отменено размещение и проведение заказа");
				
		КонецЕсли;
		
	КонецЦикла;
	
	B2B_ОбщиеПроцедурыИФункции.ВыгрузитьДокументы(НастройкиПодключения, МассивЗаказов);	

	//Часть 2 - Смена статуса с новый на Подтвержден, формируется к отправке если была отгрузка
	ЗаписьЖурналаРегистрации("B2B регламентное задание снятие резерва", УровеньЖурналаРегистрации.Информация, , , "Запуск этапа 2");
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтатусыЗаказовСрезПоследних.ЗаказПокупателя КАК ЗаказПокупателя
	|ПОМЕСТИТЬ ВтНовыеЗаказы
	|ИЗ
	|	РегистрСведений.B2B_СтатусыЗаказов.СрезПоследних КАК СтатусыЗаказовСрезПоследних
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.гф_ТоварыВКоробах КАК ЗаказТоварыВКоробах
	|		ПО СтатусыЗаказовСрезПоследних.ЗаказПокупателя = ЗаказТоварыВКоробах.Ссылка
	|		И ЗаказТоварыВКоробах.ВариантКомплектации.Владелец.B2B_Портал = &Портал
	|		
	|ГДЕ
	|	СтатусыЗаказовСрезПоследних.СтатусЗаказа = ЗНАЧЕНИЕ(Справочник.гф_В2ВСтатусЗаказаКлиента.Новый)
	|	И СтатусыЗаказовСрезПоследних.ЗаказПокупателя.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	НовыеЗаказы.ЗаказПокупателя КАК ЗаказПокупателя
	|ИЗ
	|	РегистрНакопления.ЗаказыКлиентов.Обороты(&МесяцНазад, &ТекущаяДата, Регистратор, ) КАК ЗаказыКлиентовОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНовыеЗаказы КАК НовыеЗаказы
	|		ПО ЗаказыКлиентовОбороты.ЗаказКлиента = НовыеЗаказы.ЗаказПокупателя
	|ГДЕ
	|	ЗаказыКлиентовОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	|	И ЗаказыКлиентовОбороты.ЗаказаноРасход > 0";
	
	МассивЗаказов = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		МассивЗаказов.Добавить(Выборка.ЗаказПокупателя);
		
		НовыйСтатус = РегистрыСведений.B2B_СтатусыЗаказов.СоздатьМенеджерЗаписи();
		НовыйСтатус.Активность = Истина;
		НовыйСтатус.Период = ДатаЗадания;
		НовыйСтатус.ЗаказПокупателя = Выборка.ЗаказПокупателя;
		//НовыйСтатус.СтатусЗаказа = Справочники.гф_В2ВСтатусЗаказаКлиента.ПодтвержденОтправка;
		НовыйСтатус.СтатусЗаказа = Справочники.гф_В2ВСтатусЗаказаКлиента.Отгружен;
		НовыйСтатус.Записать();
		
		ЗаписьЖурналаРегистрации("B2B регламентное задание снятие резерва", УровеньЖурналаРегистрации.Информация, , Выборка.ЗаказПокупателя,
			//"Изменен статус заказа на ""Подтвержден, формируется к отправке""");
			"Изменен статус заказа на ""Отгружен""");
		
	КонецЦикла;
	
	B2B_ОбщиеПроцедурыИФункции.ВыгрузитьСтатусы(НастройкиПодключения, МассивЗаказов);

	ЗаписьЖурналаРегистрации("B2B регламентное задание снятие резерва", УровеньЖурналаРегистрации.Информация, , , "Задание завершено");

КонецПроцедуры

Функция СоздатьОбратнуюКорректировкуНазначения(Заказ)
	
	УспешноСоздана = Ложь;
	
	РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Заказ, "Организация, Склад");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
    "ВЫБРАТЬ
    |	УпаковочныйЛистТовары.Номенклатура КАК Номенклатура,
    |	УпаковочныйЛистТовары.Характеристика КАК Характеристика,
    |	УпаковочныйЛистТовары.Количество КАК Количество,
    |	УпаковочныйЛистТовары.КоличествоУпаковок КАК КоличествоУпаковок,
    |	УпаковочныйЛистТовары.Упаковка КАК Упаковка,
    |	УпаковочныйЛистТовары.Ссылка КАК гф_IDкороба,
	|	&Склад КАК Склад,
	|	&Заказ КАК ИсходныйЗаказ
    |ИЗ
    |	Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
    |ГДЕ
    |	УпаковочныйЛистТовары.Ссылка.гф_Заказ = &Заказ
	|
    |УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	Запрос.УстановитьПараметр("Заказ", Заказ);             
	Запрос.УстановитьПараметр("Склад", РеквизитыЗаказа.Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		ДокКН = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент(); 
		ДокКН.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв;
		ДокКН.ДокументОснование = Заказ;
		ДокКН.Организация = РеквизитыЗаказа.Организация;   
		ДокКН.Дата = ТекущаяДата();
		ДокКН.Комментарий = "Создан автоматически регламентным заданием B2B_СнятиеРезерва" + ДокКН.Дата;
		
		НазначениеЗаказ = Справочники.Назначения.НайтиПоРеквизиту("Заказ", Заказ);
		ДокКН.Назначение = НазначениеЗаказ;
		
		УпакЛисты = Новый Массив;
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтрокаКорректрировки = ДокКН.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКорректрировки, Выборка);
			
			СтрокаКорректрировки.ИсходноеНазначение = НазначениеЗаказ;
			СтрокаКорректрировки.ИсходноеНазначениеДвиженияПоСкладскимРегистрам = Истина;
			
			Если УпакЛисты.Найти(Выборка["гф_IDкороба"]) = Неопределено Тогда
				УпакЛисты.Добавить(Выборка["гф_IDкороба"]);
			КонецЕсли;
			
		КонецЦикла;	
		
		ДокКН.Записать(РежимЗаписиДокумента.Проведение);
		
		ЗаписьЖурналаРегистрации("B2B регламентное задание снятие резерва", УровеньЖурналаРегистрации.Информация, Метаданные.Документы.КорректировкаНазначенияТоваров,
			ДокКН.Ссылка, "Документ проведен регламентным заданием B2B_СнятиеРезерва");
	
		//Скорректируем УЛ 
		ПустойЗаказ = Документы.ЗаказКлиента.ПустаяСсылка();
		ПустоеНазначение = Справочники.Назначения.ПустаяСсылка();
		Для Каждого ЛистСсылка Из УпакЛисты Цикл
			
			УЛДок = ЛистСсылка.ПолучитьОбъект();
			УЛДок.гф_Заказ = ПустойЗаказ;
			Для каждого стрТоварыУЛДок из УЛДок.Товары Цикл
				стрТоварыУЛДок.Назначение = ПустоеНазначение;   
			КонецЦикла;
			УЛДок.Записать();
			
			ЗаписьЖурналаРегистрации("B2B регламентное задание снятие резерва", УровеньЖурналаРегистрации.Информация ,Метаданные.Документы.УпаковочныйЛист,
				УЛДок.Ссылка, "Документ обновлен регламентным заданием B2B_СнятиеРезерва!");
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию(); 
		
		УспешноСоздана = Истина;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОписаниеОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("B2B регламентное задание снятие резерва", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.КорректировкаНазначенияТоваров,,
			"При проведении документа Корректировка назначения товаров возникли ошибки! " + ОписаниеОшибки);
		
		УспешноСоздана = Ложь;
		
	КонецПопытки;
	
	Возврат УспешноСоздана;
					
КонецФункции

Процедура B2B_ВыгрузитьОстаткиНаПортал(Портал) Экспорт 
	
	Если Не ЗначениеЗаполнено(Портал) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("ОбменB2B.UpdateStockGoods", УровеньЖурналаРегистрации.Информация,,,
		"Начало процедуры выгрузки остатков на портал " + Портал); 
	
	НастройкиПодключения = B2B_ОбщиеПроцедурыИФункции.ВосстановитьНастройкиПодключенияПортал(Портал); 
	Если Не ЗначениеЗаполнено(НастройкиПодключения) Или ТипЗнч(НастройкиПодключения) <> Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("ОбменB2B.UpdateStockGoods", УровеньЖурналаРегистрации.Информация,,,
		"Настройки подключения к " + Портал + " успешно получены");
	
	ТекстОтвета = B2B_ТекстОтветаОстатков(Портал);
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");

	HTTPЗапрос  = Новый HTTPЗапрос("local/service/UpdateStockGoods/", ЗаголовокHTTP);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТекстОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	HTTPОтвет   = Неопределено;
	
	АдресСервера = НастройкиПодключения.Получить("АдресСервера");
	Логин 		 = НастройкиПодключения.Получить("Логин");
	Пароль       = НастройкиПодключения.Получить("Пароль");
	
	ЗащищенноеСоединение = ИнтеграцияИСПовтИсп.ЗащищенноеСоединение();
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			АдресСервера,
			,
			Логин,
			Пароль,
			,100000, ЗащищенноеСоединение);
		
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		
		ЗаписьЖурналаРегистрации("ОбменB2B.UpdateStockGoods", УровеньЖурналаРегистрации.Информация,,,
			"Успешно завершена отправка данных на портал " + Портал);
		
	Исключение
		
		ЗаписьЖурналаРегистрации("ОбменB2B.UpdateStockGoods", УровеньЖурналаРегистрации.Ошибка,,,
			"Ошибка отправки данных на портал " + Портал +": " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
		
КонецПроцедуры

Функция B2B_ТекстОтветаОстатков(Портал) Экспорт 
	
	Если Не ЗначениеЗаполнено(Портал) Тогда
		Возврат "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.B2B_Портал = &B2B_Портал
	|	И НЕ Номенклатура.ПометкаУдаления";
	Запрос.УстановитьПараметр("B2B_Портал", Портал);
	МассивНоменклатуры = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	
	Запрос.Текст = B2B_ОбщиеПроцедурыИФункции.ТекстЗапросаОстатковПоСпискуНоменклатуры();
	
	МассивОстатков = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураОстатки = Новый Структура;
		
		ИдТовара = B2B_ОбщиеПроцедурыИФункции.ПолучитьИдТовараДляСайта(Выборка.Номенклатура, Выборка.Характеристика);
		СтруктураОстатки.Вставить("Id", ИдТовара); 
		
		СтруктураОстатки.Вставить("Art",     Выборка.ПолныйАртикул);
		СтруктураОстатки.Вставить("InStock", Выборка.КоличествоКоробов);
		
		МассивОстатков.Добавить(СтруктураОстатки); 
		
	КонецЦикла;
	
	ТекстОтвета = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(МассивОстатков);
	
	ЗаписьЖурналаРегистрации("ОбменB2B.UpdateStockGoods", УровеньЖурналаРегистрации.Информация,,,
		"Сформирован ответ из " + МассивОстатков.Количество() + " позиций");
	
	Возврат ТекстОтвета;
		
КонецФункции