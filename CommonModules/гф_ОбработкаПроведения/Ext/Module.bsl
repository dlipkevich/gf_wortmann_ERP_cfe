
#Область ПрограммныйИнтерфейс

// #wortmann {
// #Движение КМ организаций
// описание вставки
// Галфинд Sakovich 2022/08/18
//
// Формирование движений типовых документов по рН гф_ДвижениеКодовМаркировкиОрганизации
// см. ПодпискиНаСобытия.гф_ОбработкаПроведенияДвижениеКодовМаркировкиОрганизации
// Параметры:
// Источник - ДокументОбъект - регистраторы регистра
// Отказ - Булево - отказ от записи документа
// РежимПроведения - ДокументОбъект.РежимПроведенияДокумента 
Процедура гф_ОбработкаПроведенияДвижениеКодовМаркировкиОрганизации(Источник, Отказ, РежимПроведения) Экспорт
	
	Движения = Источник.Движения.гф_ДвижениеКодовМаркировкиОрганизации;
	Движения.Записать();
	
	Движения.Записывать = Ложь;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УпаковочныйЛист") Тогда
		ДвиженияКодовМаркировкиУпаковочныйЛист(Источник, Движения);
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.МаркировкаТоваровИСМП") Тогда
		ДвиженияКодовМаркировкиМаркировкаТоваровИСМП(Источник, Движения);
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ВозвратТоваровОтКлиента") Тогда
		ДвиженияКодовМаркировкиВозвратТоваровОтКлиента(Источник, Движения);
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		ДвиженияКодовМаркировкиРеализацияТоваровУслуг(Источник, Движения);
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ВнутреннееПотребление") Тогда
		ДвиженияКодовМаркировкиВнутреннееПотребление(Источник, Движения);
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.СписаниеНедостачТоваров") Тогда
		ДвиженияКодовМаркировкиСписаниеНедостачТоваров(Источник, Движения);
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПересортицаТоваров") Тогда
		ДвиженияКодовМаркировкиПересортицаТоваров(Источник, Движения);
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
		ДвиженияКодовМаркировкиПеремещениеТоваров(Источник, Движения);
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.РасходныйОрдерНаТовары") Тогда
		ДвиженияКодовМаркировкиРасходныйОрдерНаТовары(Источник, Движения);
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПриходныйОрдерНаТовары") Тогда
		ДвиженияКодовМаркировкиПриходныйОрдерНаТовары(Источник, Движения);
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.гф_ВводНачальныхОстатковКМ") Тогда
		ДвиженияКодовМаркировкигф_ВводНачальныхОстатковКМ(Источник, Движения);
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.гф_АгрегацияКМ") Тогда
		ДвиженияКодовМаркировкигф_гф_АгрегацияКМ(Источник, Движения, Отказ);
	КонецЕсли;
	
	Движения.Записывать = Движения.Количество() > 0;
	
КонецПроцедуры

Процедура гф_АгрегироватьШтрихкодыУпаковокНоменклатуры(Ссылка) Экспорт
	// vvv Галфинд \ Sakovich 31.01.2023
	// процедура не используется
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АгрегацияКМ.АртикулАгрегата КАК АртикулАгрегата,
	|	АгрегацияКМ.Агрегат КАК АгрегатСтрокой,
	|	АгрегацияКМ.КМ КАК КМ,
	|	ВЫБОР
	|		КОГДА Штрихкоды.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК КМ_Найден,
	|	Агрегаты.Ссылка КАК НайденныйАгрегат,
	|	ВЫБОР
	|		КОГДА Агрегаты.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Агрегат_Найден,
	|	ВложШтрихкоды.Ссылка КАК КМСодержитсяВАгрегате
	|ИЗ
	|	Документ.гф_АгрегацияКМ.Товары КАК АгрегацияКМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК Агрегаты
	|		ПО (АгрегацияКМ.Агрегат = Агрегаты.ЗначениеШтрихкода)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК Штрихкоды
	|		ПО (АгрегацияКМ.КМ = Штрихкоды.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ВложШтрихкоды
	|		ПО (АгрегацияКМ.КМ = ВложШтрихкоды.Штрихкод)
	|ГДЕ
	|	АгрегацияКМ.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	АгрегацияКМ.АртикулАгрегата,
	|	АгрегацияКМ.Агрегат,
	|	АгрегацияКМ.КМ,
	|	Агрегаты.Ссылка,
	|	Штрихкоды.Ссылка,
	|	ВложШтрихкоды.Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Результат = Запрос.Выполнить();
	ТЗ = Результат.Выгрузить();
	вспТЗ = ТЗ.Скопировать(, "КМСодержитсяВАгрегате");
	вспТЗ.Свернуть("КМСодержитсяВАгрегате");
	Для каждого стрТЗ Из вспТЗ Цикл
		Если стрТЗ["КМСодержитсяВАгрегате"] = NULL Тогда
			Продолжить;
		КонецЕсли;
		ОбъектОчистки = стрТЗ["КМСодержитсяВАгрегате"].ПолучитьОбъект();
		Если ОбъектОчистки <> Неопределено Тогда
			СтрокиДляОчистки = ТЗ.НайтиСтроки(Новый Структура("КМСодержитсяВАгрегате", стрТЗ["КМСодержитсяВАгрегате"]));
			Штрихкоды = ОбъектОчистки.ВложенныеШтрихкоды.Выгрузить();
			мУдаляемых = Новый Массив;
			Для каждого Эл Из СтрокиДляОчистки Цикл
				УдаляемыеСтроки = Штрихкоды.НайтиСтроки(Новый Структура("Штрихкод", Эл["КМ"]));	
				Для каждого стрДляУдаления Из УдаляемыеСтроки Цикл
					мУдаляемых.Добавить(стрДляУдаления);
				КонецЦикла;
			КонецЦикла;
			Для каждого УдаляемаяСтрока Из мУдаляемых Цикл
				Штрихкоды.Удалить(УдаляемаяСтрока);
			КонецЦикла;	
			ОбъектОчистки.ВложенныеШтрихкоды.Загрузить(Штрихкоды);
			ОбъектОчистки.Записать();	
		КонецЕсли;
	КонецЦикла;
	вспТЗ = ТЗ.Скопировать(, "АгрегатСтрокой, НайденныйАгрегат");
	вспТЗ.Свернуть("АгрегатСтрокой, НайденныйАгрегат");
	
	Для каждого стрТЗ Из вспТЗ Цикл
		структураПоиска = Новый Структура("АгрегатСтрокой, НайденныйАгрегат", 
		стрТЗ["АгрегатСтрокой"], 
		стрТЗ["НайденныйАгрегат"]);
		строкиДляЗаполнения = ТЗ.НайтиСтроки(структураПоиска);
		
		Если стрТЗ["НайденныйАгрегат"] = NULL Тогда
			ОбъектШтрихкод = Справочники.ШтрихкодыУпаковокТоваров.СоздатьЭлемент();	
			ОбъектШтрихкод.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
			ОбъектШтрихкод.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_128;
			ОбъектШтрихкод.ЗначениеШтрихкода = строкиДляЗаполнения[0]["АгрегатСтрокой"];
			ОбъектШтрихкод.гф_АктикулАгрегата = строкиДляЗаполнения[0]["АртикулАгрегата"];
		Иначе
			ОбъектШтрихкод = стрТЗ["НайденныйАгрегат"].ПолучитьОбъект();
			Если Не ЗначениеЗаполнено(ОбъектШтрихкод.гф_АктикулАгрегата) Тогда
				ОбъектШтрихкод.гф_АктикулАгрегата = строкиДляЗаполнения[0]["АртикулАгрегата"];	
			КонецЕсли;
		КонецЕсли;
		ОбъектШтрихкод.ВложенныеШтрихкоды.Очистить();
		Для каждого Эл Из строкиДляЗаполнения Цикл
			Если Эл["КМ_Найден"] Тогда
				нС = ОбъектШтрихкод.ВложенныеШтрихкоды.Добавить();
				нС.Штрихкод = Эл["КМ"];
			КонецЕсли;
		КонецЦикла;
		ОбъектШтрихкод.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
// Ссылка - см.состав ОпределяемыйТип ОснованиеМаркировкаТоваровИСМП
Функция гф_ПолучитьСкладИзДокументаОснования(Ссылка) Экспорт
	Склад = Неопределено;
	ДокМетаданные = Ссылка.Метаданные();
	ИмяМетаданных = ДокМетаданные.Имя;
	
	ПолучатьСкладИзШапкиОснования = 
	(ИмяМетаданных = "ОприходованиеИзлишковТоваров" 
	ИЛИ	ИмяМетаданных = "ПересчетТоваров"
	ИЛИ	ИмяМетаданных = "ПоступлениеОтПереработчика"
	ИЛИ	ИмяМетаданных = "ПриобретениеТоваровУслуг"
	ИЛИ	ИмяМетаданных = "ПрочееОприходованиеТоваров"
	ИЛИ	ИмяМетаданных = "СборкаТоваров"
	ИЛИ	ИмяМетаданных = "ПоступлениеТоваровОтХранителя"
	ИЛИ ИмяМетаданных = "РасходныйОрдерНаТовары"
	ИЛИ ИмяМетаданных = "ВводОстатковТоваров"
	ИЛИ ИмяМетаданных = "ПересортицаТоваров"
	ИЛИ ИмяМетаданных = "ВнутреннееПотребление");
	
	Если ПолучатьСкладИзШапкиОснования Тогда
		Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Склад");
	КонецЕсли;
	
	Если ИмяМетаданных = "ПроизводствоБезЗаказа" 
		ИЛИ ИмяМетаданных = "ЭтапПроизводства2_2" Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВложенныйЗапрос.Склад КАК Склад,
		|	ВложенныйЗапрос.Ссылка КАК Ссылка
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫРАЗИТЬ(ПроизводствоБезЗаказаВыходныеИзделия.Получатель КАК Справочник.Склады) КАК Склад,
		|		ПроизводствоБезЗаказаВыходныеИзделия.Ссылка КАК Ссылка
		|	ИЗ
		|		Документ.ПроизводствоБезЗаказа.ВыходныеИзделия КАК ПроизводствоБезЗаказаВыходныеИзделия
		|	ГДЕ
		|		ПроизводствоБезЗаказаВыходныеИзделия.Ссылка = &Ссылка
		|		И НЕ ВЫРАЗИТЬ(ПроизводствоБезЗаказаВыходныеИзделия.Получатель КАК Справочник.Склады) ЕСТЬ NULL
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВЫРАЗИТЬ(ЭтапПроизводства2_2ВыходныеИзделия.Получатель КАК Справочник.Склады),
		|		ЭтапПроизводства2_2ВыходныеИзделия.Ссылка
		|	ИЗ
		|		Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ЭтапПроизводства2_2ВыходныеИзделия
		|	ГДЕ
		|		ЭтапПроизводства2_2ВыходныеИзделия.Ссылка = &Ссылка
		|		И НЕ ВЫРАЗИТЬ(ЭтапПроизводства2_2ВыходныеИзделия.Получатель КАК Справочник.Склады) ЕСТЬ NULL) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Склад,
		|	ВложенныйЗапрос.Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Количество() = 1  Тогда
			Выборка.Следующий();
			Склад = Выборка.Склад;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяМетаданных = "ВходящаяТранспортнаяОперацияВЕТИС" 
		ИЛИ ИмяМетаданных = "ПроизводственнаяОперацияВЕТИС" Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВложенныйЗапрос.Склад КАК Склад,
		|	ВложенныйЗапрос.Ссылка КАК Ссылка
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫРАЗИТЬ(ВходящаяТранспортнаяОперацияВЕТИС.ТорговыйОбъект КАК Справочник.Склады) КАК Склад,
		|		ВходящаяТранспортнаяОперацияВЕТИС.Ссылка КАК Ссылка
		|	ИЗ
		|		Документ.ВходящаяТранспортнаяОперацияВЕТИС КАК ВходящаяТранспортнаяОперацияВЕТИС
		|	ГДЕ
		|		ВходящаяТранспортнаяОперацияВЕТИС.Ссылка = &Ссылка
		|		И НЕ ВЫРАЗИТЬ(ВходящаяТранспортнаяОперацияВЕТИС.ТорговыйОбъект КАК Справочник.Склады) ЕСТЬ NULL
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВЫРАЗИТЬ(ПроизводственнаяОперацияВЕТИС.ТорговыйОбъект КАК Справочник.Склады),
		|		ПроизводственнаяОперацияВЕТИС.Ссылка
		|	ИЗ
		|		Документ.ПроизводственнаяОперацияВЕТИС КАК ПроизводственнаяОперацияВЕТИС
		|	ГДЕ
		|		ПроизводственнаяОперацияВЕТИС.Ссылка = &Ссылка
		|		И НЕ ВЫРАЗИТЬ(ПроизводственнаяОперацияВЕТИС.ТорговыйОбъект КАК Справочник.Склады) ЕСТЬ NULL) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Склад,
		|	ВложенныйЗапрос.Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Количество() = 1  Тогда
			Выборка.Следующий();
			Склад = Выборка.Склад;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Склад;
	
КонецФункции // } #wortmann

Функция СоздатьАгрегаты(Таблица, ПриходРасход, Отказ)
	
	СтруктураВозврата = Новый Структура("Результат, МассивАгрегатов", Истина, Новый Массив());
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	т.спрВариантыКомплектации КАК спрВариантыКомплектации,
	|	т.АгрегатСтрокой КАК АгрегатСтрокой,
	|	т.спрКМ КАК спрКМ
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	&Таблица КАК т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт.спрВариантыКомплектации КАК спрВариантыКомплектации,
	|	вт.АгрегатСтрокой КАК АгрегатСтрокой,
	|	вт.спрКМ КАК спрКМ
	|ИЗ
	|	вт КАК вт
	|ИТОГИ ПО
	|	спрВариантыКомплектации,
	|	АгрегатСтрокой";
	Запрос.УстановитьПараметр("Таблица", Таблица);
	Результат = Запрос.Выполнить();
	
	ВыборкаВариантыКомплектации = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВариантыКомплектации.Следующий() Цикл
		ВыборкаАгрегатСтрокой = ВыборкаВариантыКомплектации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаАгрегатСтрокой.Следующий() Цикл
			обАгрегат = Справочники.ШтрихкодыУпаковокТоваров.СоздатьЭлемент();
			обАгрегат = Справочники.ШтрихкодыУпаковокТоваров.СоздатьЭлемент();	
			обАгрегат.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
			обАгрегат.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_128;
			обАгрегат.ЗначениеШтрихкода = ВыборкаАгрегатСтрокой["АгрегатСтрокой"];
			обАгрегат.гф_АртикулАгрегата = ВыборкаВариантыКомплектации["спрВариантыКомплектации"];
			
			Выборка = ВыборкаАгрегатСтрокой.Выбрать();
			Пока Выборка.Следующий() Цикл
				нС = обАгрегат.ВложенныеШтрихкоды.Добавить();
				нС.Штрихкод = Выборка["спрКМ"];
			КонецЦикла;
			КоличествоНоменклатурыВВарианте = 
			ВыборкаВариантыКомплектации["спрВариантыКомплектации"].Товары.Итог("КоличествоУпаковок");
			КоличествоШтрихкодовВАгрегате = обАгрегат.ВложенныеШтрихкоды.Количество();
			Если КоличествоШтрихкодовВАгрегате > КоличествоНоменклатурыВВарианте Тогда
				СтруктураВозврата["Результат"] = Ложь;
				ОбщегоНазначения.СообщитьПользователю(
				"В Агрегации не может быть кодов маркировки больше, чем номенклатуры в варианте комплектации
				|Агрегат с значением штрихкода " + ВыборкаАгрегатСтрокой["АгрегатСтрокой"] + " не создан.", , , ,Отказ);
				Возврат СтруктураВозврата;
			КонецЕсли;
			Попытка
				обАгрегат.Записать();
				СтруктураВозврата["МассивАгрегатов"].Добавить(обАгрегат.Ссылка);
			Исключение
				ОбщегоНазначения.СообщитьПользователю(
				"Не удалось создать Агрегат со значением штрихкода " + ВыборкаАгрегатСтрокой["АгрегатСтрокой"], , , ,Отказ);
				ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
				Возврат СтруктураВозврата;
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции // ()

Функция ОбработатьАгрегатИУпаковочныйЛист(Таблица, ПриходРасход, Отказ)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	т.НомерСтроки КАК НомерСтроки,
	|	т.спрВариантыКомплектации КАК спрВариантыКомплектации,
	|	т.АгрегатСтрокой КАК АгрегатСтрокой,
	|	т.спрАгрегат КАК спрАгрегат,
	|	т.спрКМ КАК спрКМ,
	|	т.КМСтрокой КАК КМСтрокой,
	|	т.Движение КАК Движение,
	|	т.КоличествоВАгрегате КАК КоличествоВАгрегате,
	|	т.КоличествоВВарианте КАК КоличествоВВарианте,
	|	т.влШтрихкод КАК влШтрихкод,
	|	т.АгрСуществует КАК АгрСуществует,
	|	т.КМСуществует КАК КМСуществует,
	|	т.КМВложенВАгрегат КАК КМВложенВАгрегат
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	&Таблица КАК т";
	Запрос.УстановитьПараметр("Таблица", Таблица);
	Запрос.Выполнить();
	
	Если ПриходРасход = "Расход"  Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	вт.спрАгрегат КАК ШтрихКодУпаковки,
		|	вт.спрКМ КАК КМ,
		|	УпаковочныйЛист.Ссылка КАК УпаковочныйЛист,
		|	КМы.Номенклатура КАК Номенклатура,
		|	КМы.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ Данные
		|ИЗ
		|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт КАК вт
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК КМы
		|			ПО вт.спрКМ = КМы.Ссылка
		|		ПО УпаковочныйЛист.гф_Агрегация = вт.спрАгрегат
		|
		|СГРУППИРОВАТЬ ПО ГРУППИРУЮЩИМ НАБОРАМ
		|(	
		|	(вт.спрАгрегат,
		|	 вт.спрКМ),
		|	(УпаковочныйЛист.Ссылка,
		|	 КМы.Номенклатура,
		|	 КМы.Характеристика)
		|)
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|	ВЫБРАТЬ
		|	Данные.УпаковочныйЛист КАК УпаковочныйЛист,
		|	Данные.Номенклатура КАК Номенклатура,
		|	Данные.Характеристика КАК Характеристика,
		|	СУММА(ЕСТЬNULL(УпаковочныйЛистТовары.Количество, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(УпаковочныйЛистТовары.КоличествоУпаковок, 0)) КАК КоличествоУпаковок
		|ИЗ
		|	Данные КАК Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
		|		ПО (Данные.УпаковочныйЛист = УпаковочныйЛистТовары.Ссылка)
		|			И (Данные.Номенклатура = УпаковочныйЛистТовары.Номенклатура)
		|			И (Данные.Характеристика = УпаковочныйЛистТовары.Характеристика)
		|ГДЕ
		|	Данные.КМ ЕСТЬ NULL
		
		|СГРУППИРОВАТЬ ПО
		|	Данные.УпаковочныйЛист,
		|	Данные.Номенклатура,
		|	Данные.Характеристика
		|ИТОГИ ПО
		|	УпаковочныйЛист
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Данные.ШтрихКодУпаковки КАК ШтрихКодУпаковки,
		|	Данные.КМ КАК КМ
		|ИЗ
		|	Данные КАК Данные
		|ГДЕ
		|	Данные.УпаковочныйЛист ЕСТЬ NULL
		|ИТОГИ ПО
		|	ШтрихКодУпаковки";
		
		ПакетРезультатов = Запрос.ВыполнитьПакет();
		РезультатУЛ = ПакетРезультатов[1];
		РезультатАгрегат = ПакетРезультатов[2];
		
		ВыборкаАгрегат = РезультатАгрегат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаАгрегат.Следующий() Цикл
			обАгрегат = ВыборкаАгрегат["ШтрихКодУпаковки"].ПолучитьОбъект();
			ВыборкаКМ = ВыборкаАгрегат.Выбрать();
			Пока ВыборкаКМ.Следующий() Цикл
				мСтрокДляУдаления = обАгрегат.ВложенныеШтрихкоды.НайтиСтроки(Новый Структура("Штрихкод", ВыборкаКМ["КМ"]));
				Если мСтрокДляУдаления.ВГраница() > -1 Тогда
					обАгрегат.ВложенныеШтрихкоды.Удалить(мСтрокДляУдаления[0]);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ВыборкаУпаковочныйЛист = РезультатУЛ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаУпаковочныйЛист.Следующий() Цикл
			обУЛ = ВыборкаУпаковочныйЛист["УпаковочныйЛист"].ПолучитьОбъект();
			ВыборкаНоменклатура = ВыборкаУпаковочныйЛист.Выбрать();
			Пока ВыборкаНоменклатура.Следующий() Цикл
				ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика", 
				ВыборкаНоменклатура["Номенклатура"], 
				ВыборкаНоменклатура["Характеристика"]);
				мСтрокУЛ = обУЛ.Товары.НайтиСтроки(ПараметрыОтбора);
				Для каждого Эл Из мСтрокУЛ Цикл
					Если Макс(Эл["КоличествоУпаковок"], Эл["Количество"]) <= 1 Тогда
						обУЛ.Товары.Удалить(Эл);
						Продолжить;
					КонецЕсли;	
					
					Если Эл["КоличествоУпаковок"] > 1 Тогда
						Эл["КоличествоУпаковок"] = Эл["КоличествоУпаковок"] - 1;
					КонецЕсли;
					Если Эл["Количество"] > 1 Тогда
						Эл["Количество"] = Эл["Количество"] - 1;
					КонецЕсли;
				КонецЦикла;		
			КонецЦикла;
		КонецЦикла;
		
		Попытка
			обАгрегат.Записать();
		Исключение
			ОбщегоНазначения.СообщитьПользователю("Не удалось записать изменения агрегата " + обАгрегат, , , ,Отказ);
			Возврат Ложь;
		КонецПопытки;
		
		Попытка
			обУЛ.Записать();
		Исключение
			ОбщегоНазначения.СообщитьПользователю("Не удалось записать изменения документа " + обУЛ, , , ,Отказ);
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Если ПриходРасход = "Приход" Тогда
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	вт.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	вт КАК вт
		|ГДЕ вт.АгрСуществует И вт.КМСуществует И Не вт.КМВложенВАгрегат";
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Запрос.Текст = "
		|ВЫБРАТЬ   
		|	вт.спрАгрегат КАК спрАгрегат,
		|	вт.спрВариантыКомплектации КАК спрВариантыКомплектации,
		|	вт.спрКМ КАК спрКМ,
		|	УпаковочныйЛист.Ссылка КАК докУЛ,
		|	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
		|	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ Данные
		|ИЗ
		|	вт КАК вт
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист КАК УпаковочныйЛист
		|		ПО (вт.спрАгрегат = УпаковочныйЛист.Ссылка.гф_Агрегация
		|				ИЛИ вт.АгрегатСтрокой = УпаковочныйЛист.Ссылка.Код)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|		ПО (вт.спрКМ = ШтрихкодыУпаковокТоваров.Ссылка)
		|ГДЕ
		|	вт.АгрСуществует
		|	И вт.КМСуществует
		|	И НЕ вт.КМВложенВАгрегат
		|
		|СГРУППИРОВАТЬ ПО ГРУППИРУЮЩИМ НАБОРАМ
		|(	
		|	(вт.спрАгрегат,
		|	 вт.спрВариантыКомплектации,
		|	 вт.спрКМ,
		|	 ШтрихкодыУпаковокТоваров.Номенклатура,
		|	 ШтрихкодыУпаковокТоваров.Характеристика),
		|	(УпаковочныйЛист.Ссылка,
		|	 ШтрихкодыУпаковокТоваров.Номенклатура,
		|	 ШтрихкодыУпаковокТоваров.Характеристика)
		|)
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Данные.докУЛ КАК докУЛ,
		|	Данные.Номенклатура КАК Номенклатура,
		|	Данные.Характеристика КАК Характеристика
		|ИЗ
		|	Данные КАК Данные
		|ГДЕ
		|	Данные.спрКМ ЕСТЬ NULL
		|ИТОГИ ПО
		|	докУЛ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ    
		|	Данные.спрАгрегат КАК спрАгрегат,
		|	Данные.спрВариантыКомплектации КАК спрВариантыКомплектации,
		|	Данные.спрКМ КАК спрКМ,
		|	Данные.Номенклатура КАК Номенклатура,
		|	Данные.Характеристика КАК Характеристика
		|ИЗ
		|	Данные КАК Данные
		|ГДЕ
		|	Данные.спрКМ ЕСТЬ НЕ NULL 
		|ИТОГИ ПО
		|	спрАгрегат,
		|	спрВариантыКомплектации";
		ПакетРезультатов = Запрос.ВыполнитьПакет();
		РезультатУЛ = ПакетРезультатов[1];
		РезультатАгрегат = ПакетРезультатов[2];
		ВыборкаАгрегат = РезультатАгрегат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаАгрегат.Следующий() Цикл
			обАгрегат = ВыборкаАгрегат["спрАгрегат"].ПолучитьОбъект();
			ВыборкаВариантКомплектации = ВыборкаАгрегат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаВариантКомплектации.Следующий() Цикл
				КоличествоНоменклатурыВКомплектации = 
				ВыборкаВариантКомплектации["спрВариантыКомплектации"].Товары.Итог("КоличествоУпаковок");
				
				ВыборкаКМ = ВыборкаВариантКомплектации.Выбрать();
				Пока ВыборкаКМ.Следующий() Цикл
					нс = обАгрегат.ВложенныеШтрихкоды.Добавить();
					нс["Штрихкод"] = ВыборкаКМ["спрКМ"];
				КонецЦикла;
				КоличествоНоменклатурыВАгрегате = обАгрегат.ВложенныеШтрихкоды.Количество();
				Если КоличествоНоменклатурыВАгрегате  > КоличествоНоменклатурыВКомплектации Тогда
					ОбщегоНазначения.СообщитьПользователю(
					"В Агрегации не может быть кодов маркировки больше, чем номенклатуры в варианте комплектации", , , ,
					Отказ);
					Возврат Ложь;
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;
		
		ВыборкаУЛ = РезультатУЛ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаУЛ.Следующий() Цикл
			обУЛ = ВыборкаУЛ["докУЛ"].ПолучитьОбъект();
			ВыборкаТовары = ВыборкаУЛ.Выбрать();
			Пока ВыборкаТовары.Следующий() Цикл
				ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика", 
				ВыборкаТовары["Номенклатура"], 
				ВыборкаТовары["Характеристика"]);
				мСтрокУЛ = обУЛ.Товары.НайтиСтроки(ПараметрыОтбора);
				Если мСтрокУЛ.Количество() > 0 Тогда
					мСтрокУЛ[0]["КоличествоУпаковок"] = мСтрокУЛ[0]["КоличествоУпаковок"] + 1;
					мСтрокУЛ[0]["Количество"] = мСтрокУЛ[0]["Количество"] + 1;
				Иначе
					Назначение = обУл.Товары[0].Назначение;
					УпаковочныйЛистРодитель = обУл.Товары[0].УпаковочныйЛистРодитель;
					нс = обУЛ.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(нс, ВыборкаТовары);
					нс["КоличествоУпаковок"] = 1;
					нс["Количество"] = 1;
					нс["Назначение"] = Назначение;
					нс["УпаковочныйЛистРодитель"] = УпаковочныйЛистРодитель;
					нс["ЭтоУпаковочныйЛист"] = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Попытка
			обАгрегат.Записать();
		Исключение
			ОбщегоНазначения.СообщитьПользователю("Не удалось записать изменения агрегата " + обАгрегат, , , ,Отказ);
			Возврат Ложь;
		КонецПопытки;
		
		Попытка
			обУЛ.Записать();
		Исключение
			ОбщегоНазначения.СообщитьПользователю("Не удалось записать изменения документа " + обУЛ, , , ,Отказ);
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Истина; 
КонецФункции

#КонецОбласти

#Область Формирование_движений

Процедура ДвиженияКодовМаркировкиПеремещениеТоваров(Источник, Движения)
	
	Если Источник.гф_ШтрихкодыУпаковок.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	Если Не Источник.Статус = Перечисления.СтатусыПеремещенийТоваров.Принято Тогда
		Возврат;	
	КонецЕсли;
	
	ФормироватьДвиженияПоОтгрузке = Не СкладыСервер.ИспользоватьОрдернуюСхемуПриОтгрузке(
	Источник.СкладОтправитель,
	Источник.Дата);
	ФормироватьДвиженияПоПоступлению = Не СкладыСервер.ИспользоватьОрдернуюСхемуПриПоступлении(
	Источник.СкладПолучатель, 
	Источник.Дата);
	
	Если Не (ФормироватьДвиженияПоОтгрузке ИЛИ ФормироватьДвиженияПоПоступлению) Тогда
		// движения формируются приходными/расходными ордерами
		Возврат;
	КонецЕсли;
	
	СкладОтправительВКоробах = УправлениеСвойствами.ЗначениеСвойства(Источник.СкладОтправитель, "гф_СкладыТоварыВКоробах");
	СкладПолучательВКоробах = УправлениеСвойствами.ЗначениеСвойства(Источник.СкладПолучатель, "гф_СкладыТоварыВКоробах");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	Перемещение.Ссылка КАК Регистратор,
	|	Перемещение.Дата КАК Период,
	|	Перемещение.Организация КАК Организация,
	|	Перемещение.СкладПолучатель КАК Склад,
	|	Штрихкоды.ШтрихкодУпаковки КАК КМ,
	|	ЛОЖЬ КАК Резерв,
	|	1 КАК Количество
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК Перемещение
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.гф_ШтрихкодыУпаковок КАК Штрихкоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковок
	|			ПО (Штрихкоды.ШтрихкодУпаковки = ШтрихкодыУпаковок.Ссылка)
	|		ПО (Штрихкоды.Ссылка = Перемещение.Ссылка)
	|ГДЕ
	|	&ФормироватьДвиженияПоПоступлению
	|	И Перемещение.Ссылка = &Ссылка
	|	И ВЫБОР
	|			КОГДА &СкладПолучательВКоробах
	|				ТОГДА ШтрихкодыУпаковок.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка)
	|			ИНАЧЕ ШтрихкодыУпаковок.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар)
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	Перемещение.Ссылка,
	|	Перемещение.Дата,
	|	Перемещение.Организация,
	|	Перемещение.СкладОтправитель,
	|	Штрихкоды.ШтрихкодУпаковки,
	|	ЛОЖЬ,
	|	1
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК Перемещение
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.гф_ШтрихкодыУпаковок КАК Штрихкоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковок
	|			ПО Штрихкоды.ШтрихкодУпаковки = ШтрихкодыУпаковок.Ссылка
	|		ПО (Штрихкоды.Ссылка = Перемещение.Ссылка)
	|ГДЕ
	|	&ФормироватьДвиженияПоОтгрузке
	|	И Перемещение.Ссылка = &Ссылка
	|	И ВЫБОР
	|			КОГДА &СкладОтправительВКоробах   
	|				ТОГДА ШтрихкодыУпаковок.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка)
	|			ИНАЧЕ ШтрихкодыУпаковок.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар)
	|		КОНЕЦ");
	
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	Запрос.УстановитьПараметр("ФормироватьДвиженияПоПоступлению", ФормироватьДвиженияПоПоступлению);
	Запрос.УстановитьПараметр("ФормироватьДвиженияПоОтгрузке", ФормироватьДвиженияПоОтгрузке);
	Запрос.УстановитьПараметр("СкладОтправительВКоробах", СкладОтправительВКоробах);
	Запрос.УстановитьПараметр("СкладПолучательВКоробах", СкладПолучательВКоробах);
	
	Результат = Запрос.Выполнить();
	Таблица = Результат.Выгрузить();
	Движения.Загрузить(Таблица);
	
КонецПроцедуры 

Процедура ДвиженияКодовМаркировкиПересортицаТоваров(Источник, Движения)
	
	Если Источник.гф_ШтрихкодыУпаковок.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	докПересортица.Ссылка КАК докПересортица,
	|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Ссылка КАК докЭмиссия
	|ПОМЕСТИТЬ ДокументыМаркировки
	|ИЗ
	|	Документ.ПересортицаТоваров КАК докПересортица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ КАК ЗаказНаЭмиссиюКодовМаркировкиСУЗ
	|		ПО (докПересортица.Ссылка = ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ДокументОснование)
	|ГДЕ
	|	докПересортица.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	докПересортица.Ссылка КАК Регистратор,
	|	докПересортица.Дата КАК Период,
	|	докПересортица.Организация КАК Организация,
	|	докПересортица.Склад КАК Склад,
	|	гф_ПересортицаУдаляемыеШК.ШтрихкодУпаковки КАК КМ,
	|	ЛОЖЬ КАК Резерв,
	|	1 КАК Количество
	|ИЗ
	|	Документ.ПересортицаТоваров КАК докПересортица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гф_ПересортицаУдаляемыеШК КАК гф_ПересортицаУдаляемыеШК
	|		ПО докПересортица.Ссылка = гф_ПересортицаУдаляемыеШК.Пересортица
	|ГДЕ
	|	гф_ПересортицаУдаляемыеШК.Пересортица.Ссылка = &Ссылка
	|	И гф_ПересортицаУдаляемыеШК.ШтрихкодУпаковки ЕСТЬ НЕ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ДокументыМаркировки.докПересортица,
	|	ДокументыМаркировки.докПересортица.Дата,
	|	ДокументыМаркировки.докПересортица.Организация,
	|	ДокументыМаркировки.докПересортица.Склад,
	|	ШтрихкодыУпаковокТоваров.Ссылка,
	|	ЛОЖЬ,
	|	1
	|ИЗ
	|	ДокументыМаркировки КАК ДокументыМаркировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|			ПО ПулКодовМаркировкиСУЗ.КодМаркировки = ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода
	|		ПО ДокументыМаркировки.докПересортица = ПулКодовМаркировкиСУЗ.ДокументОснование
	|			И ДокументыМаркировки.докЭмиссия = ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.Ссылка ЕСТЬ НЕ NULL");
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	Результат = Запрос.Выполнить();
	Таблица = Результат.Выгрузить();
	Движения.Загрузить(Таблица);
	
КонецПроцедуры

Процедура ДвиженияКодовМаркировкиСписаниеНедостачТоваров(Источник, Движения)
	
	Если Источник.гф_ШтрихкодыУпаковок.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	Списание.Ссылка КАК Регистратор,
	|	Списание.Дата КАК Период,
	|	Списание.Организация КАК Организация,
	|	Списание.Склад КАК Склад,
	|	Штрихкоды.ШтрихкодУпаковки КАК КМ,
	|	ЛОЖЬ КАК Резерв,
	|	1 КАК Количество
	|ИЗ
	|	Документ.СписаниеНедостачТоваров КАК Списание
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеНедостачТоваров.гф_ШтрихкодыУпаковок КАК Штрихкоды
	|		ПО Штрихкоды.Ссылка = Списание.Ссылка
	|ГДЕ
	|	Списание.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	Результат = Запрос.Выполнить();
	Таблица = Результат.Выгрузить();
	Движения.Загрузить(Таблица);
	
КонецПроцедуры

Процедура ДвиженияКодовМаркировкиВнутреннееПотребление(Источник, Движения)
	
		Если Источник.гф_ШтрихкодыУпаковок.Количество() = 0 Тогда
			Возврат;	
		КонецЕсли;
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	Потребление.Ссылка КАК Регистратор,
		|	Потребление.Дата КАК Период,
		|	Потребление.Склад КАК Склад,
		|	Штрихкоды.ШтрихкодУпаковки КАК КМ,
		|	Потребление.Организация КАК Организация,
		|	ЛОЖЬ КАК Резерв,
		|	1 КАК Количество
		|ИЗ
		|	Документ.ВнутреннееПотребление КАК Потребление
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВнутреннееПотребление.гф_ШтрихкодыУпаковок КАК Штрихкоды
		|		ПО Штрихкоды.Ссылка = Потребление.Ссылка
		|ГДЕ
		|	Потребление.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
		Результат = Запрос.Выполнить();
		Таблица = Результат.Выгрузить();
		Движения.Загрузить(Таблица);

КонецПроцедуры

Процедура ДвиженияКодовМаркировкиРеализацияТоваровУслуг(Источник, Движения)
	
	Если Источник.ШтрихкодыУпаковок.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	Штрихкоды.ШтрихкодУпаковки КАК КМ,
	|	Реализация.Контрагент КАК Склад,
	|	Реализация.Организация КАК Организация,
	|	Реализация.Ссылка КАК Регистратор,
	|	Реализация.Дата КАК Период,
	|	ЛОЖЬ КАК Резерв,
	|	1 КАК Количество
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК Реализация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.ШтрихкодыУпаковок КАК Штрихкоды
	|		ПО Штрихкоды.Ссылка = Реализация.Ссылка
	|ГДЕ
	|	Реализация.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	Штрихкоды.ШтрихкодУпаковки,
	|	Реализация.Склад,
	|	Реализация.Организация,
	|	Реализация.Ссылка,
	|	Реализация.Дата,
	|	ЛОЖЬ,
	|	1
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК Реализация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.ШтрихкодыУпаковок КАК Штрихкоды
	|		ПО Штрихкоды.Ссылка = Реализация.Ссылка
	|ГДЕ
	|	Реализация.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	Результат = Запрос.Выполнить();
	Таблица = Результат.Выгрузить();
	Движения.Загрузить(Таблица);
	
КонецПроцедуры

Процедура ДвиженияКодовМаркировкиВозвратТоваровОтКлиента(Источник, Движения)
	
	Если Источник.ШтрихкодыУпаковок.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ВозвратТоваровОтКлиента.Ссылка КАК Регистратор,
	|	ВозвратТоваровОтКлиента.Дата КАК Период,
	|	ВозвратТоваровОтКлиента.Склад КАК Склад,
	|	ВозвратТоваровОтКлиента.Организация КАК Организация,
	|	Штрихкоды.ШтрихкодУпаковки КАК КМ,
	|	ЛОЖЬ КАК Резерв,
	|	1 КАК Количество
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента.ШтрихкодыУпаковок КАК Штрихкоды
	|		ПО (Штрихкоды.Ссылка = ВозвратТоваровОтКлиента.Ссылка)
	|ГДЕ
	|	ВозвратТоваровОтКлиента.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ВозвратТоваровОтКлиента.Ссылка,
	|	ВозвратТоваровОтКлиента.Дата,
	|	ВозвратТоваровОтКлиента.Контрагент,
	|	ВозвратТоваровОтКлиента.Организация,
	|	Штрихкоды.ШтрихкодУпаковки,
	|	ЛОЖЬ,
	|	1
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента.ШтрихкодыУпаковок КАК Штрихкоды
	|		ПО Штрихкоды.Ссылка = ВозвратТоваровОтКлиента.Ссылка
	|ГДЕ
	|	ВозвратТоваровОтКлиента.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	Результат = Запрос.Выполнить();
	Таблица = Результат.Выгрузить();
	Движения.Загрузить(Таблица);
	
КонецПроцедуры

Процедура ДвиженияКодовМаркировкиМаркировкаТоваровИСМП(Источник, Движения)
	
	Если Источник.ШтрихкодыУпаковок.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	Склад = Неопределено;
	СкладДляЗаполнения = Неопределено;
	Если Источник.ДополнительныеСвойства.Свойство("Склад", СкладДляЗаполнения) Тогда
		Если ЗначениеЗаполнено(СкладДляЗаполнения) Тогда
			Склад = СкладДляЗаполнения;	
		КонецЕсли;
	Иначе 
		Если ЗначениеЗаполнено(Источник.ДокументОснование) Тогда
		Склад = гф_ПолучитьСкладИзДокументаОснования(Источник.ДокументОснование);
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	Маркировка.Ссылка КАК Регистратор,
	|	Маркировка.Дата КАК Период,
	|	Маркировка.Организация КАК Организация,
	|	Штрихкоды.ШтрихкодУпаковки КАК КМ,
	|	ЛОЖЬ КАК Резерв,
	|	1 КАК Количество,
	|	&Склад КАК Склад
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП КАК Маркировка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаркировкаТоваровИСМП.ШтрихкодыУпаковок КАК Штрихкоды
	|		ПО Штрихкоды.Ссылка = Маркировка.Ссылка
	|ГДЕ
	|	Маркировка.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	Результат = Запрос.Выполнить();
	Таблица = Результат.Выгрузить();
	Движения.Загрузить(Таблица);
	
КонецПроцедуры

Процедура ДвиженияКодовМаркировкиУпаковочныйЛист(Источник, Движения)
	
		Если Источник.Товары.Количество() = 0 Тогда
			Возврат;	
		КонецЕсли;
		
		ДокументПоставки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "гф_Поставка");
		Если Не ЗначениеЗаполнено(ДокументПоставки) Тогда
			Возврат;
		КонецЕсли;
		
		Организация =ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПоставки, "Организация");
		Склад = гф_ПолучитьСкладИзДокументаОснования(ДокументПоставки);
		
        Запрос = Новый Запрос("ВЫБРАТЬ
        |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
        |	УпЛист.Ссылка КАК Регистратор,
        |	УпЛист.Дата КАК Период,
        |   ВЫБОР
        |        КОГДА НЕ УпЛист.гф_Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
        |             ТОГДА УпЛист.гф_Организация
        |      ИНАЧЕ &Организация
        |   КОНЕЦ КАК Организация,
        |	УпЛист.гф_Агрегация КАК КМ,
        |	ЛОЖЬ КАК Резерв,
        |	1 КАК Количество,
        |	&Склад КАК Склад
        |ИЗ
        |	Документ.УпаковочныйЛист КАК УпЛист
        |ГДЕ
        |	УпЛист.Ссылка = &Ссылка
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
        |	УпЛист.Ссылка,
        |	УпЛист.Дата,
        |   ВЫБОР
        |      КОГДА НЕ УпЛист.гф_Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
        |          ТОГДА УпЛист.гф_Организация
        |      ИНАЧЕ &Организация
        |   КОНЕЦ,
        |	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод,
        |	ЛОЖЬ,
        |	1,
        |	&Склад
        |ИЗ
        |	Документ.УпаковочныйЛист КАК УпЛист
        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
        |		ПО (УпЛист.Код = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка.ЗначениеШтрихкода)
        |ГДЕ
        |	УпЛист.Ссылка = &Ссылка
        |	И ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка.ТипШтрихкода = ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.GS1_128)");
        
        Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Склад", Склад);
        Результат = Запрос.Выполнить();
		Таблица = Результат.Выгрузить();
		Движения.Загрузить(Таблица);
		
КонецПроцедуры

Процедура ДвиженияКодовМаркировкиРасходныйОрдерНаТовары(Источник, Движения)
	
	Если Источник.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение КАК Документ.ПеремещениеТоваров) ЕСТЬ НЕ NULL 
		|			ТОГДА ВЫРАЗИТЬ(РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение КАК Документ.ПеремещениеТоваров).Организация
		// ++ Галфинд ВолковЕВ 07.02.2023 Отгурзка перемещением использует в качетстве распоряжения документ ЗаказКлиента
		//|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|		ИНАЧЕ 
		|			ВЫБОР
		|				КОГДА ВЫРАЗИТЬ(РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение КАК Документ.ЗаказКлиента) ЕСТЬ НЕ NULL 
		|					ТОГДА
		|			     		ВЫРАЗИТЬ(РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение КАК Документ.ЗаказКлиента).Организация
		|	   			ИНАЧЕ
		|	    			ЗНАЧЕНИЕ (Справочник.Организации.ПустаяСсылка)
		|			КОНЕЦ
		// -- Галфинд ВолковЕВ 07.02.2023
		|	КОНЕЦ КАК Организация
		|ПОМЕСТИТЬ Организации
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
		|ГДЕ
		|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	РасходныйОрдерНаТовары.Ссылка КАК Регистратор,
		|	РасходныйОрдерНаТовары.Дата КАК Период,
		|	РасходныйОрдерНаТоварыШтрихкодыУпаковок.ШтрихкодУпаковки КАК КМ,
		|	ЛОЖЬ КАК Резерв,
		|	1 КАК Количество,
		|	Организации.Организация КАК Организация,
		|	РасходныйОрдерНаТовары.Склад КАК Склад
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары.ШтрихкодыУпаковок КАК РасходныйОрдерНаТоварыШтрихкодыУпаковок
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
		|		ПО РасходныйОрдерНаТоварыШтрихкодыУпаковок.Ссылка = РасходныйОрдерНаТовары.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Организации КАК Организации
		|		ПО (ИСТИНА)
		|ГДЕ
		|	РасходныйОрдерНаТоварыШтрихкодыУпаковок.Ссылка = &Ссылка");
		
		Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
		Результат = Запрос.Выполнить();
		Таблица = Результат.Выгрузить();
		Движения.Загрузить(Таблица);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияКодовМаркировкиПриходныйОрдерНаТовары(Источник, Движения)
	
	Если Не Источник.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят Тогда
		Движения.Очистить();
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	т.ШтрихкодУпаковки КАК ШтрихкодУпаковки
	|ПОМЕСТИТЬ ПриходныйОрдерНаТоварыШтрихкодыУпаковок
	|ИЗ
	|	&тзШтрихкоды КАК т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ПриходныйОрдерНаТовары.Ссылка КАК Регистратор,
	|	ПриходныйОрдерНаТовары.Дата КАК Период,
	|	ПриходныйОрдерНаТоварыШтрихкодыУпаковок.ШтрихкодУпаковки КАК КМ,
	|	ЛОЖЬ КАК Резерв,
	|	1 КАК Количество,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ПриходныйОрдерНаТовары.Распоряжение КАК Документ.ПеремещениеТоваров) ЕСТЬ НЕ NULL 
	|			ТОГДА ВЫРАЗИТЬ(ПриходныйОрдерНаТовары.Распоряжение КАК Документ.ПеремещениеТоваров).Организация
	|		КОГДА ВЫРАЗИТЬ(ПриходныйОрдерНаТовары.Распоряжение КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента) ЕСТЬ НЕ NULL 
	|			ТОГДА ВЫРАЗИТЬ(ПриходныйОрдерНаТовары.Распоряжение КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Организация
	|		КОГДА ВЫРАЗИТЬ(ПриходныйОрдерНаТовары.Распоряжение КАК Документ.ПриобретениеТоваровУслуг) ЕСТЬ НЕ NULL 
	|			ТОГДА ВЫРАЗИТЬ(ПриходныйОрдерНаТовары.Распоряжение КАК Документ.ПриобретениеТоваровУслуг).Организация
	|		КОГДА ВЫРАЗИТЬ(ПриходныйОрдерНаТовары.Распоряжение КАК Документ.ПроизводствоБезЗаказа) ЕСТЬ НЕ NULL 
	|			ТОГДА ВЫРАЗИТЬ(ПриходныйОрдерНаТовары.Распоряжение КАК Документ.ПроизводствоБезЗаказа).Организация
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	КОНЕЦ КАК Организация,
	|	ПриходныйОрдерНаТовары.Склад КАК Склад,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка КАК Агрегат
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	ПриходныйОрдерНаТоварыШтрихкодыУпаковок КАК ПриходныйОрдерНаТоварыШтрихкодыУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО (ПриходныйОрдерНаТоварыШтрихкодыУпаковок.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод)
	|ГДЕ
	|	ПриходныйОрдерНаТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Данные.ВидДвижения КАК ВидДвижения,
	|	Данные.Регистратор КАК Регистратор,
	|	Данные.Период КАК Период,
	|	Данные.Резерв КАК Резерв,
	|	Данные.Количество КАК Количество,
	|	Данные.Организация КАК Организация,
	|	Данные.Склад КАК Склад,
	|	Данные.Агрегат КАК КМ
	|ИЗ
	|	Данные КАК Данные
	|ГДЕ
	|	Данные.Агрегат ЕСТЬ НЕ NULL");
	
	тзШтриходы = Источник.ШтрихкодыУпаковок.Выгрузить();
	
	ИсточникСсылка = Источник.Ссылка;
	Запрос.УстановитьПараметр("Ссылка", ИсточникСсылка);
	Запрос.УстановитьПараметр("тзШтрихкоды", тзШтриходы);
	
	ПакетРезультатов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	СкладКоробочный = УправлениеСвойствами.ЗначениеСвойства(Источник.Склад, "гф_СкладыТоварыВКоробах") = Истина;
	Распоряжение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсточникСсылка, "Распоряжение");
	
	Если ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		Результат = ПакетРезультатов[1]; // ПОТ по заявке на возврат - движения всегда кодами маркировки
	ИначеЕсли СкладКоробочный Тогда
		Результат = ПакетРезультатов[2];// склад коробной - движения агрегатами
	Иначе
		Результат = ПакетРезультатов[1]; // склад парный -движения кодами маркировки 
	КонецЕсли;
	
	Таблица = Результат.Выгрузить();
	Движения.Загрузить(Таблица);
	
КонецПроцедуры

Процедура ДвиженияКодовМаркировкигф_ВводНачальныхОстатковКМ(Источник, Движения)
	
	Если Источник.ШтрихкодыУпаковокТоваров.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ВводОстатков.Склад КАК Склад,
	|	ВводОстатков.Организация КАК Организация,
	|	СпрШтрихкоды.Ссылка КАК КМ,
	|	ВводОстатков.Ссылка КАК Регистратор,
	|	ВводОстатков.Дата КАК Период,
	|	ЛОЖЬ КАК Резерв,
	|	1 КАК Количество
	|ИЗ
	|	Документ.гф_ВводНачальныхОстатковКМ КАК ВводОстатков
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гф_ВводНачальныхОстатковКМ.ШтрихкодыУпаковокТоваров КАК Штрихкоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК СпрШтрихкоды
	|			ПО Штрихкоды.ЗначениеШтрихкода = СпрШтрихкоды.ЗначениеШтрихкода
	|		ПО (Штрихкоды.Ссылка = ВводОстатков.Ссылка)
	|ГДЕ
	|	ВводОстатков.Ссылка = &Ссылка
	|	И СпрШтрихкоды.Ссылка ЕСТЬ НЕ NULL");
	
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	Таблица = Результат.Выгрузить();
	Движения.Загрузить(Таблица);
	
КонецПроцедуры

Процедура ДвиженияКодовМаркировкигф_гф_АгрегацияКМ(Источник, Движения, Отказ)
	
	СтруктураРеквизитов = Новый Структура("ДокументОснование, Период, Организация, Регистратор", ,
	"Дата", , "Ссылка");
	СтруктураЗаполнения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.Ссылка, СтруктураРеквизитов);
	
	Склад = гф_ПолучитьСкладИзДокументаОснования(СтруктураЗаполнения["ДокументОснование"]);
	СтруктураЗаполнения.Вставить("Склад", Склад);
	СтруктураЗаполнения.Вставить("Резерв", Ложь);
	СтруктураЗаполнения.Вставить("Количество", 1);
	
	Запрос = Новый Запрос;
	Запрос.Текст = Документы.гф_АгрегацияКМ.ТекстЗапросаПоТаблицеТовары();
	тТовары =  Источник.Товары.Выгрузить();
	Запрос.УстановитьПараметр("Товары", тТовары);
	Результат = Запрос.Выполнить();
	тзПроверки = Результат.Выгрузить();
	
	стрПоиска = Новый Структура("Движение, АгрСуществует, КМСуществует, КМВложенВАгрегат",
	Перечисления.гф_ВидДвиженияАгрегацииКМ.Расход, Истина, Истина, Истина);
	мСтрокРасход = тзПроверки.НайтиСтроки(стрПоиска);
	Если мСтрокРасход.ВГраница() > -1 Тогда
		тзРасход = тзПроверки.Скопировать(мСтрокРасход);
		РезультатОбработкиАгрегатаИУпаковочногоЛиста = ОбработатьАгрегатИУпаковочныйЛист(тзРасход, "Расход", Отказ);
		Если Отказ Тогда
			Возврат;	
		КонецЕсли;
		Если РезультатОбработкиАгрегатаИУпаковочногоЛиста Тогда
			Для каждого Эл Из мСтрокРасход Цикл
				Движение = Движения.Добавить();
				//Период, Организация, Регистратор, Склад, Резерв, Количество
				ЗаполнитьЗначенияСвойств(Движение, СтруктураЗаполнения); 
				Движение["ВидДвижения"] = ВидДвиженияНакопления.Приход;
				Движение["КМ"] = Эл["спрКМ"];
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	стрПоиска = Новый Структура("Движение, АгрСуществует, КМСуществует",
	Перечисления.гф_ВидДвиженияАгрегацииКМ.Приход, Истина, Истина);
	мСтрокПриход = тзПроверки.НайтиСтроки(стрПоиска);
	Если мСтрокПриход.ВГраница() > -1 Тогда
		тзПриход = тзПроверки.Скопировать(мСтрокПриход);
		РезультатОбработкиАгрегатаИУпаковочногоЛиста = ОбработатьАгрегатИУпаковочныйЛист(тзПриход, "Приход", Отказ);
		Если Отказ Тогда
			Возврат;	
		КонецЕсли;
		Если РезультатОбработкиАгрегатаИУпаковочногоЛиста Тогда
			Для каждого Эл Из мСтрокПриход Цикл
				Движение = Движения.Добавить();
				// Период, Организация, Регистратор, Склад, Резерв, Количество
				ЗаполнитьЗначенияСвойств(Движение, СтруктураЗаполнения); 
				Движение["ВидДвижения"] = ВидДвиженияНакопления.Расход;
				Движение["КМ"] = Эл["спрКМ"];
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	стрПоиска = Новый Структура("Движение, АгрСуществует, КМСуществует",
	Перечисления.гф_ВидДвиженияАгрегацииКМ.Приход, Ложь, Истина);
	мСтрокПриход = тзПроверки.НайтиСтроки(стрПоиска);
	Если мСтрокПриход.ВГраница() > -1 Тогда
		тзПриход = тзПроверки.Скопировать(мСтрокПриход);
		СтруктураРезультатСозданияАгрегатов =СоздатьАгрегаты(тзПриход, "Приход", Отказ);
		Если Отказ Тогда
			Возврат;	
		КонецЕсли;
		Если СтруктураРезультатСозданияАгрегатов["Результат"] = Истина Тогда
			Для каждого Эл Из мСтрокПриход Цикл
				Движение = Движения.Добавить();
				// Период, Организация, Регистратор, Склад, Резерв, Количество
				ЗаполнитьЗначенияСвойств(Движение, СтруктураЗаполнения); 
				Движение["ВидДвижения"] = ВидДвиженияНакопления.Расход;
				Движение["КМ"] = Эл["спрКМ"];
			КонецЦикла;
			Для каждого Эл Из СтруктураРезультатСозданияАгрегатов["МассивАгрегатов"] Цикл
				Движение = Движения.Добавить();
				// Период, Организация, Регистратор, Склад, Резерв, Количество
				ЗаполнитьЗначенияСвойств(Движение, СтруктураЗаполнения); 
				Движение["ВидДвижения"] = ВидДвиженияНакопления.Приход;
				Движение["КМ"] = Эл;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	// vvv Галфинд \ Sakovich 06.02.2023
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=812bbcee7bda45d711eda3ae2bb06c49
	// убираем движения по рН "гф_ДвижениеКодовМаркировкиОрганизации"
	// т.к. нужные движения формируются при проведении Упаковочного листа.
	Движения.Очистить();
	// ^^^ Галфинд \ Sakovich 06.02.2023 

КонецПроцедуры

#КонецОбласти
