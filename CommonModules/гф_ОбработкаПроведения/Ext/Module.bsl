
#Область ПрограммныйИнтерфейс

// #wortmann {
// #Движение КМ организаций
// Галфинд Sakovich 2022/08/18
// Формирование движений типовых документов по рН гф_ДвижениеКодовМаркировкиОрганизации
// см. ПодпискиНаСобытия.гф_ОбработкаПроведенияДвижениеКодовМаркировкиОрганизации
// Параметры:
// Источник - ДокументОбъект - регистраторы регистра
// Отказ - Булево - отказ от записи документа
// РежимПроведения - ДокументОбъект.РежимПроведенияДокумента 
Процедура гф_ОбработкаПроведенияДвижениеКодовМаркировкиОрганизации(Источник, Отказ, РежимПроведения) Экспорт
	
	Движения = Источник.Движения.гф_ДвижениеКодовМаркировкиОрганизации;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказНаЭмиссиюКодовМаркировкиСУЗ") Тогда
		Движения.Записать();
		Движения.Записывать = Ложь;
		ДвиженияКодовМаркировкиЗаказНаЭмиссиюКодовМаркировкиСУЗ(Источник, Движения);
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УпаковочныйЛист") Тогда
		ДвиженияКодовМаркировкиУпаковочныйЛист(Источник, Движения);
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.МаркировкаТоваровИСМП") Тогда
		Возврат; //не используется
		
		Движения.Записать();
		Движения.Записывать = Ложь;
		ДвиженияКодовМаркировкиМаркировкаТоваровИСМП(Источник, Движения);
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ВозвратТоваровОтКлиента") Тогда
		Движения.Записать();
		Движения.Записывать = Ложь;
		ДвиженияКодовМаркировкиВозвратТоваровОтКлиента(Источник, Движения);
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		Движения.Записать();
		Движения.Записывать = Ложь;
		ДвиженияКодовМаркировкиРеализацияТоваровУслуг(Источник, Движения, Отказ);
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ВнутреннееПотребление") Тогда
		Движения.Записать();
		Движения.Записывать = Ложь;
		ДвиженияКодовМаркировкиВнутреннееПотребление(Источник, Движения, Отказ);
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.СписаниеНедостачТоваров") Тогда
		Движения.Записать();
		Движения.Записывать = Ложь;
		ДвиженияКодовМаркировкиСписаниеНедостачТоваров(Источник, Движения, Отказ);
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПересортицаТоваров") Тогда
		Движения.Записать();
		Движения.Записывать = Ложь;
		ДвиженияКодовМаркировкиПересортицаТоваров(Источник, Движения, Отказ);
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
		Движения.Записать();
		Движения.Записывать = Ложь;
		ДвиженияКодовМаркировкиПеремещениеТоваров(Источник, Движения, Отказ);
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.РасходныйОрдерНаТовары") Тогда
		//e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811edf4c28e320fef
		Возврат; //не используем проведение по регистру
		Движения.Записать();
		Движения.Записывать = Ложь;
		ДвиженияКодовМаркировкиРасходныйОрдерНаТовары(Источник, Движения);
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПриходныйОрдерНаТовары") Тогда
		//e1cib/data/Задача.ЗадачаИсполнителя?ref=8ea8b083fed1320811edf4c28e320fef
		Возврат; //не используем проведение по регистру
		Движения.Записать();
		Движения.Записывать = Ложь;
		ДвиженияКодовМаркировкиПриходныйОрдерНаТовары(Источник, Движения);
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.гф_ВводНачальныхОстатковКМ") Тогда
		Движения.Записать();
		Движения.Записывать = Ложь;
		ДвиженияКодовМаркировкигф_ВводНачальныхОстатковКМ(Источник, Движения);
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.гф_АгрегацияКМ") Тогда
		Движения.Записать();
		Движения.Записывать = Ложь;
		ДвиженияКодовМаркировкигф_гф_АгрегацияКМ(Источник, Движения, Отказ);
	КонецЕсли;
	
	Движения.Записывать = Движения.Количество() > 0;
	
КонецПроцедуры

// (не используется) Галфинд \ Sakovich 15.02.2024
Процедура гф_АгрегироватьШтрихкодыУпаковокНоменклатуры(Ссылка) Экспорт
	// vvv Галфинд \ Sakovich 31.01.2023
	// процедура не используется
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АгрегацияКМ.АртикулАгрегата КАК АртикулАгрегата,
	|	АгрегацияКМ.Агрегат КАК АгрегатСтрокой,
	|	АгрегацияКМ.КМ КАК КМ,
	|	ВЫБОР
	|		КОГДА Штрихкоды.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК КМ_Найден,
	|	Агрегаты.Ссылка КАК НайденныйАгрегат,
	|	ВЫБОР
	|		КОГДА Агрегаты.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Агрегат_Найден,
	|	ВложШтрихкоды.Ссылка КАК КМСодержитсяВАгрегате
	|ИЗ
	|	Документ.гф_АгрегацияКМ.Товары КАК АгрегацияКМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК Агрегаты
	|		ПО (АгрегацияКМ.Агрегат = Агрегаты.ЗначениеШтрихкода)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК Штрихкоды
	|		ПО (АгрегацияКМ.КМ = Штрихкоды.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ВложШтрихкоды
	|		ПО (АгрегацияКМ.КМ = ВложШтрихкоды.Штрихкод)
	|ГДЕ
	|	АгрегацияКМ.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	АгрегацияКМ.АртикулАгрегата,
	|	АгрегацияКМ.Агрегат,
	|	АгрегацияКМ.КМ,
	|	Агрегаты.Ссылка,
	|	Штрихкоды.Ссылка,
	|	ВложШтрихкоды.Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Результат = Запрос.Выполнить();
	ТЗ = Результат.Выгрузить();
	вспТЗ = ТЗ.Скопировать(, "КМСодержитсяВАгрегате");
	вспТЗ.Свернуть("КМСодержитсяВАгрегате");
	Для каждого стрТЗ Из вспТЗ Цикл
		Если стрТЗ["КМСодержитсяВАгрегате"] = NULL Тогда
			Продолжить;
		КонецЕсли;
		ОбъектОчистки = стрТЗ["КМСодержитсяВАгрегате"].ПолучитьОбъект();
		Если ОбъектОчистки <> Неопределено Тогда
			СтрокиДляОчистки = ТЗ.НайтиСтроки(Новый Структура("КМСодержитсяВАгрегате", стрТЗ["КМСодержитсяВАгрегате"]));
			Штрихкоды = ОбъектОчистки.ВложенныеШтрихкоды.Выгрузить();
			мУдаляемых = Новый Массив;
			Для каждого Эл Из СтрокиДляОчистки Цикл
				УдаляемыеСтроки = Штрихкоды.НайтиСтроки(Новый Структура("Штрихкод", Эл["КМ"]));	
				Для каждого стрДляУдаления Из УдаляемыеСтроки Цикл
					мУдаляемых.Добавить(стрДляУдаления);
				КонецЦикла;
			КонецЦикла;
			Для каждого УдаляемаяСтрока Из мУдаляемых Цикл
				Штрихкоды.Удалить(УдаляемаяСтрока);
			КонецЦикла;	
			ОбъектОчистки.ВложенныеШтрихкоды.Загрузить(Штрихкоды);
			ОбъектОчистки.Записать();	
		КонецЕсли;
	КонецЦикла;
	вспТЗ = ТЗ.Скопировать(, "АгрегатСтрокой, НайденныйАгрегат");
	вспТЗ.Свернуть("АгрегатСтрокой, НайденныйАгрегат");
	
	Для каждого стрТЗ Из вспТЗ Цикл
		структураПоиска = Новый Структура("АгрегатСтрокой, НайденныйАгрегат", 
		стрТЗ["АгрегатСтрокой"], 
		стрТЗ["НайденныйАгрегат"]);
		строкиДляЗаполнения = ТЗ.НайтиСтроки(структураПоиска);
		
		Если стрТЗ["НайденныйАгрегат"] = NULL Тогда
			ОбъектШтрихкод = Справочники.ШтрихкодыУпаковокТоваров.СоздатьЭлемент();	
			ОбъектШтрихкод.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
			ОбъектШтрихкод.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_128;
			ОбъектШтрихкод.ЗначениеШтрихкода = строкиДляЗаполнения[0]["АгрегатСтрокой"];
			ОбъектШтрихкод.гф_АктикулАгрегата = строкиДляЗаполнения[0]["АртикулАгрегата"];
		Иначе
			ОбъектШтрихкод = стрТЗ["НайденныйАгрегат"].ПолучитьОбъект();
			Если Не ЗначениеЗаполнено(ОбъектШтрихкод.гф_АктикулАгрегата) Тогда
				ОбъектШтрихкод.гф_АктикулАгрегата = строкиДляЗаполнения[0]["АртикулАгрегата"];	
			КонецЕсли;
		КонецЕсли;
		ОбъектШтрихкод.ВложенныеШтрихкоды.Очистить();
		Для каждого Эл Из строкиДляЗаполнения Цикл
			Если Эл["КМ_Найден"] Тогда
				нС = ОбъектШтрихкод.ВложенныеШтрихкоды.Добавить();
				нС.Штрихкод = Эл["КМ"];
			КонецЕсли;
		КонецЦикла;
		ОбъектШтрихкод.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
// Ссылка - см.состав ОпределяемыйТип ОснованиеМаркировкаТоваровИСМП
Функция гф_ПолучитьСкладИзДокументаОснования(Ссылка) Экспорт
	Склад = Неопределено;
	ДокМетаданные = Ссылка.Метаданные();
	ИмяМетаданных = ДокМетаданные.Имя;
	
	ПолучатьСкладИзШапкиОснования = 
	(ИмяМетаданных = "ОприходованиеИзлишковТоваров" 
	ИЛИ	ИмяМетаданных = "ПересчетТоваров"
	ИЛИ	ИмяМетаданных = "ПоступлениеОтПереработчика"
	ИЛИ	ИмяМетаданных = "ПриобретениеТоваровУслуг"
	ИЛИ	ИмяМетаданных = "ПрочееОприходованиеТоваров"
	ИЛИ	ИмяМетаданных = "СборкаТоваров"
	ИЛИ	ИмяМетаданных = "ПоступлениеТоваровОтХранителя"
	ИЛИ ИмяМетаданных = "РасходныйОрдерНаТовары"
	ИЛИ ИмяМетаданных = "ВводОстатковТоваров"
	ИЛИ ИмяМетаданных = "ПересортицаТоваров"
	ИЛИ ИмяМетаданных = "ВнутреннееПотребление"
	ИЛИ ИмяМетаданных = "ЗаказНаСборку"
	ИЛИ ИмяМетаданных = "ЗаказПереработчику2_5"
	ИЛИ ИмяМетаданных = "ЗаказПоставщику"
	ИЛИ ИмяМетаданных = "ЗаявкаНаВозвратТоваровОтКлиента"
	ИЛИ ИмяМетаданных = "ПересортицаТоваров");
	
	Если ПолучатьСкладИзШапкиОснования Тогда
		Если  ИмяМетаданных = "ЗаказПереработчику2_5" Тогда
			ИмяРеквизита = "СкладПродукции";
		Иначе
			ИмяРеквизита = "Склад";
		КонецЕсли;
		Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
		Возврат Склад;
	КонецЕсли;
	
	Если ИмяМетаданных = "ПроизводствоБезЗаказа" 
		ИЛИ ИмяМетаданных = "ЭтапПроизводства2_2"
		ИЛИ ИмяМетаданных = "ЗаказНаПроизводство2_2" 
		ИЛИ ИмяМетаданных = "ЗаказПереработчику" Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Склад КАК Склад,
		|	ВложенныйЗапрос.Ссылка КАК Ссылка
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫРАЗИТЬ(ПроизводствоБезЗаказаВыходныеИзделия.Получатель КАК Справочник.Склады) КАК Склад,
		|		ПроизводствоБезЗаказаВыходныеИзделия.Ссылка КАК Ссылка
		|	ИЗ
		|		Документ.ПроизводствоБезЗаказа.ВыходныеИзделия КАК ПроизводствоБезЗаказаВыходныеИзделия
		|	ГДЕ
		|		ПроизводствоБезЗаказаВыходныеИзделия.Ссылка = &Ссылка
		|		И НЕ ВЫРАЗИТЬ(ПроизводствоБезЗаказаВыходныеИзделия.Получатель КАК Справочник.Склады) ЕСТЬ NULL
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗаказНаПроизводство2_2Продукция.Склад,
		|		ЗаказНаПроизводство2_2Продукция.Ссылка
		|	ИЗ
		|		Документ.ЗаказНаПроизводство2_2.Продукция КАК ЗаказНаПроизводство2_2Продукция
		|	ГДЕ
		|		ЗаказНаПроизводство2_2Продукция.Ссылка = &Ссылка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВЫРАЗИТЬ(ЗаказПереработчикуПродукция.Получатель КАК Справочник.Склады),
		|		ЗаказПереработчикуПродукция.Ссылка
		|	ИЗ
		|		Документ.ЗаказПереработчику.Продукция КАК ЗаказПереработчикуПродукция
		|	ГДЕ
		|		ЗаказПереработчикуПродукция.Ссылка = &Ссылка
		|		И НЕ ВЫРАЗИТЬ(ЗаказПереработчикуПродукция.Получатель КАК Справочник.Склады) ЕСТЬ NULL
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВЫРАЗИТЬ(ЭтапПроизводства2_2ВыходныеИзделия.Получатель КАК Справочник.Склады),
		|		ЭтапПроизводства2_2ВыходныеИзделия.Ссылка
		|	ИЗ
		|		Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ЭтапПроизводства2_2ВыходныеИзделия
		|	ГДЕ
		|		ЭтапПроизводства2_2ВыходныеИзделия.Ссылка = &Ссылка
		|		И НЕ ВЫРАЗИТЬ(ЭтапПроизводства2_2ВыходныеИзделия.Получатель КАК Справочник.Склады) ЕСТЬ NULL) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Склад,
		|	ВложенныйЗапрос.Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Количество() = 1  Тогда
			Выборка.Следующий();
			Склад = Выборка.Склад;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяМетаданных = "ВходящаяТранспортнаяОперацияВЕТИС" 
		ИЛИ ИмяМетаданных = "ПроизводственнаяОперацияВЕТИС" Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВложенныйЗапрос.Склад КАК Склад,
		|	ВложенныйЗапрос.Ссылка КАК Ссылка
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫРАЗИТЬ(ВходящаяТранспортнаяОперацияВЕТИС.ТорговыйОбъект КАК Справочник.Склады) КАК Склад,
		|		ВходящаяТранспортнаяОперацияВЕТИС.Ссылка КАК Ссылка
		|	ИЗ
		|		Документ.ВходящаяТранспортнаяОперацияВЕТИС КАК ВходящаяТранспортнаяОперацияВЕТИС
		|	ГДЕ
		|		ВходящаяТранспортнаяОперацияВЕТИС.Ссылка = &Ссылка
		|		И НЕ ВЫРАЗИТЬ(ВходящаяТранспортнаяОперацияВЕТИС.ТорговыйОбъект КАК Справочник.Склады) ЕСТЬ NULL
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВЫРАЗИТЬ(ПроизводственнаяОперацияВЕТИС.ТорговыйОбъект КАК Справочник.Склады),
		|		ПроизводственнаяОперацияВЕТИС.Ссылка
		|	ИЗ
		|		Документ.ПроизводственнаяОперацияВЕТИС КАК ПроизводственнаяОперацияВЕТИС
		|	ГДЕ
		|		ПроизводственнаяОперацияВЕТИС.Ссылка = &Ссылка
		|		И НЕ ВЫРАЗИТЬ(ПроизводственнаяОперацияВЕТИС.ТорговыйОбъект КАК Справочник.Склады) ЕСТЬ NULL) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Склад,
		|	ВложенныйЗапрос.Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Количество() = 1  Тогда
			Выборка.Следующий();
			Склад = Выборка.Склад;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Склад;
	
КонецФункции // } #wortmann

// (не используется) Галфинд \ Sakovich 15.02.2024
Функция СоздатьАгрегаты(Таблица, ПриходРасход, Отказ)
	
	СтруктураВозврата = Новый Структура("Результат, МассивАгрегатов", Истина, Новый Массив());
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	т.спрВариантыКомплектации КАК спрВариантыКомплектации,
	|	т.АгрегатСтрокой КАК АгрегатСтрокой,
	|	т.спрКМ КАК спрКМ
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	&Таблица КАК т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт.спрВариантыКомплектации КАК спрВариантыКомплектации,
	|	вт.АгрегатСтрокой КАК АгрегатСтрокой,
	|	вт.спрКМ КАК спрКМ
	|ИЗ
	|	вт КАК вт
	|ИТОГИ ПО
	|	спрВариантыКомплектации,
	|	АгрегатСтрокой";
	Запрос.УстановитьПараметр("Таблица", Таблица);
	Результат = Запрос.Выполнить();
	
	ВыборкаВариантыКомплектации = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВариантыКомплектации.Следующий() Цикл
		ВыборкаАгрегатСтрокой = ВыборкаВариантыКомплектации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаАгрегатСтрокой.Следующий() Цикл
			обАгрегат = Справочники.ШтрихкодыУпаковокТоваров.СоздатьЭлемент();
			обАгрегат = Справочники.ШтрихкодыУпаковокТоваров.СоздатьЭлемент();	
			обАгрегат.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
			обАгрегат.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_128;
			обАгрегат.ЗначениеШтрихкода = ВыборкаАгрегатСтрокой["АгрегатСтрокой"];
			обАгрегат.гф_АртикулАгрегата = ВыборкаВариантыКомплектации["спрВариантыКомплектации"];
			
			Выборка = ВыборкаАгрегатСтрокой.Выбрать();
			Пока Выборка.Следующий() Цикл
				нС = обАгрегат.ВложенныеШтрихкоды.Добавить();
				нС.Штрихкод = Выборка["спрКМ"];
			КонецЦикла;
			КоличествоНоменклатурыВВарианте = 
			ВыборкаВариантыКомплектации["спрВариантыКомплектации"].Товары.Итог("КоличествоУпаковок");
			КоличествоШтрихкодовВАгрегате = обАгрегат.ВложенныеШтрихкоды.Количество();
			Если КоличествоШтрихкодовВАгрегате > КоличествоНоменклатурыВВарианте Тогда
				СтруктураВозврата["Результат"] = Ложь;
				ОбщегоНазначения.СообщитьПользователю(
				"В Агрегации не может быть кодов маркировки больше, чем номенклатуры в варианте комплектации
				|Агрегат с значением штрихкода " + ВыборкаАгрегатСтрокой["АгрегатСтрокой"] + " не создан.", , , ,Отказ);
				Возврат СтруктураВозврата;
			КонецЕсли;
			Попытка
				обАгрегат.Записать();
				СтруктураВозврата["МассивАгрегатов"].Добавить(обАгрегат.Ссылка);
			Исключение
				ОбщегоНазначения.СообщитьПользователю(
				"Не удалось создать Агрегат со значением штрихкода " + ВыборкаАгрегатСтрокой["АгрегатСтрокой"], , , ,Отказ);
				ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
				Возврат СтруктураВозврата;
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции // ()

// (не ипользуется)  Галфинд \ Sakovich 15.02.2024
Функция ОбработатьАгрегатИУпаковочныйЛист(Таблица, ПриходРасход, Отказ)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	т.НомерСтроки КАК НомерСтроки,
	|	т.спрВариантыКомплектации КАК спрВариантыКомплектации,
	|	т.АгрегатСтрокой КАК АгрегатСтрокой,
	|	т.спрАгрегат КАК спрАгрегат,
	|	т.спрКМ КАК спрКМ,
	|	т.КМСтрокой КАК КМСтрокой,
	|	т.Движение КАК Движение,
	|	т.КоличествоВАгрегате КАК КоличествоВАгрегате,
	|	т.КоличествоВВарианте КАК КоличествоВВарианте,
	|	т.влШтрихкод КАК влШтрихкод,
	|	т.АгрСуществует КАК АгрСуществует,
	|	т.КМСуществует КАК КМСуществует,
	|	т.КМВложенВАгрегат КАК КМВложенВАгрегат
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	&Таблица КАК т";
	Запрос.УстановитьПараметр("Таблица", Таблица);
	Запрос.Выполнить();
	
	Если ПриходРасход = "Расход"  Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	вт.спрАгрегат КАК ШтрихКодУпаковки,
		|	вт.спрКМ КАК КМ,
		|	УпаковочныйЛист.Ссылка КАК УпаковочныйЛист,
		|	КМы.Номенклатура КАК Номенклатура,
		|	КМы.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ Данные
		|ИЗ
		|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт КАК вт
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК КМы
		|			ПО вт.спрКМ = КМы.Ссылка
		|		ПО УпаковочныйЛист.гф_Агрегация = вт.спрАгрегат
		|
		|СГРУППИРОВАТЬ ПО ГРУППИРУЮЩИМ НАБОРАМ
		|(	
		|	(вт.спрАгрегат,
		|	 вт.спрКМ),
		|	(УпаковочныйЛист.Ссылка,
		|	 КМы.Номенклатура,
		|	 КМы.Характеристика)
		|)
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|	ВЫБРАТЬ
		|	Данные.УпаковочныйЛист КАК УпаковочныйЛист,
		|	Данные.Номенклатура КАК Номенклатура,
		|	Данные.Характеристика КАК Характеристика,
		|	СУММА(ЕСТЬNULL(УпаковочныйЛистТовары.Количество, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(УпаковочныйЛистТовары.КоличествоУпаковок, 0)) КАК КоличествоУпаковок
		|ИЗ
		|	Данные КАК Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
		|		ПО (Данные.УпаковочныйЛист = УпаковочныйЛистТовары.Ссылка)
		|			И (Данные.Номенклатура = УпаковочныйЛистТовары.Номенклатура)
		|			И (Данные.Характеристика = УпаковочныйЛистТовары.Характеристика)
		|ГДЕ
		|	Данные.КМ ЕСТЬ NULL
		
		|СГРУППИРОВАТЬ ПО
		|	Данные.УпаковочныйЛист,
		|	Данные.Номенклатура,
		|	Данные.Характеристика
		|ИТОГИ ПО
		|	УпаковочныйЛист
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Данные.ШтрихКодУпаковки КАК ШтрихКодУпаковки,
		|	Данные.КМ КАК КМ
		|ИЗ
		|	Данные КАК Данные
		|ГДЕ
		|	Данные.УпаковочныйЛист ЕСТЬ NULL
		|ИТОГИ ПО
		|	ШтрихКодУпаковки";
		
		ПакетРезультатов = Запрос.ВыполнитьПакет();
		РезультатУЛ = ПакетРезультатов[1];
		РезультатАгрегат = ПакетРезультатов[2];
		
		ВыборкаАгрегат = РезультатАгрегат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаАгрегат.Следующий() Цикл
			обАгрегат = ВыборкаАгрегат["ШтрихКодУпаковки"].ПолучитьОбъект();
			ВыборкаКМ = ВыборкаАгрегат.Выбрать();
			Пока ВыборкаКМ.Следующий() Цикл
				мСтрокДляУдаления = обАгрегат.ВложенныеШтрихкоды.НайтиСтроки(Новый Структура("Штрихкод", ВыборкаКМ["КМ"]));
				Если мСтрокДляУдаления.ВГраница() > -1 Тогда
					обАгрегат.ВложенныеШтрихкоды.Удалить(мСтрокДляУдаления[0]);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ВыборкаУпаковочныйЛист = РезультатУЛ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаУпаковочныйЛист.Следующий() Цикл
			обУЛ = ВыборкаУпаковочныйЛист["УпаковочныйЛист"].ПолучитьОбъект();
			ВыборкаНоменклатура = ВыборкаУпаковочныйЛист.Выбрать();
			Пока ВыборкаНоменклатура.Следующий() Цикл
				ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика", 
				ВыборкаНоменклатура["Номенклатура"], 
				ВыборкаНоменклатура["Характеристика"]);
				мСтрокУЛ = обУЛ.Товары.НайтиСтроки(ПараметрыОтбора);
				Для каждого Эл Из мСтрокУЛ Цикл
					Если Макс(Эл["КоличествоУпаковок"], Эл["Количество"]) <= 1 Тогда
						обУЛ.Товары.Удалить(Эл);
						Продолжить;
					КонецЕсли;	
					
					Если Эл["КоличествоУпаковок"] > 1 Тогда
						Эл["КоличествоУпаковок"] = Эл["КоличествоУпаковок"] - 1;
					КонецЕсли;
					Если Эл["Количество"] > 1 Тогда
						Эл["Количество"] = Эл["Количество"] - 1;
					КонецЕсли;
				КонецЦикла;		
			КонецЦикла;
		КонецЦикла;
		
		Попытка
			обАгрегат.Записать();
		Исключение
			ОбщегоНазначения.СообщитьПользователю("Не удалось записать изменения агрегата " + обАгрегат, , , ,Отказ);
			Возврат Ложь;
		КонецПопытки;
		
		Попытка
			обУЛ.Записать();
		Исключение
			ОбщегоНазначения.СообщитьПользователю("Не удалось записать изменения документа " + обУЛ, , , ,Отказ);
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Если ПриходРасход = "Приход" Тогда
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	вт.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	вт КАК вт
		|ГДЕ вт.АгрСуществует И вт.КМСуществует И Не вт.КМВложенВАгрегат";
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Запрос.Текст = "
		|ВЫБРАТЬ   
		|	вт.спрАгрегат КАК спрАгрегат,
		|	вт.спрВариантыКомплектации КАК спрВариантыКомплектации,
		|	вт.спрКМ КАК спрКМ,
		|	УпаковочныйЛист.Ссылка КАК докУЛ,
		|	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
		|	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ Данные
		|ИЗ
		|	вт КАК вт
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист КАК УпаковочныйЛист
		|		ПО (вт.спрАгрегат = УпаковочныйЛист.Ссылка.гф_Агрегация
		|				ИЛИ вт.АгрегатСтрокой = УпаковочныйЛист.Ссылка.Код)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|		ПО (вт.спрКМ = ШтрихкодыУпаковокТоваров.Ссылка)
		|ГДЕ
		|	вт.АгрСуществует
		|	И вт.КМСуществует
		|	И НЕ вт.КМВложенВАгрегат
		|
		|СГРУППИРОВАТЬ ПО ГРУППИРУЮЩИМ НАБОРАМ
		|(	
		|	(вт.спрАгрегат,
		|	 вт.спрВариантыКомплектации,
		|	 вт.спрКМ,
		|	 ШтрихкодыУпаковокТоваров.Номенклатура,
		|	 ШтрихкодыУпаковокТоваров.Характеристика),
		|	(УпаковочныйЛист.Ссылка,
		|	 ШтрихкодыУпаковокТоваров.Номенклатура,
		|	 ШтрихкодыУпаковокТоваров.Характеристика)
		|)
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Данные.докУЛ КАК докУЛ,
		|	Данные.Номенклатура КАК Номенклатура,
		|	Данные.Характеристика КАК Характеристика
		|ИЗ
		|	Данные КАК Данные
		|ГДЕ
		|	Данные.спрКМ ЕСТЬ NULL
		|ИТОГИ ПО
		|	докУЛ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ    
		|	Данные.спрАгрегат КАК спрАгрегат,
		|	Данные.спрВариантыКомплектации КАК спрВариантыКомплектации,
		|	Данные.спрКМ КАК спрКМ,
		|	Данные.Номенклатура КАК Номенклатура,
		|	Данные.Характеристика КАК Характеристика
		|ИЗ
		|	Данные КАК Данные
		|ГДЕ
		|	Данные.спрКМ ЕСТЬ НЕ NULL 
		|ИТОГИ ПО
		|	спрАгрегат,
		|	спрВариантыКомплектации";
		ПакетРезультатов = Запрос.ВыполнитьПакет();
		РезультатУЛ = ПакетРезультатов[1];
		РезультатАгрегат = ПакетРезультатов[2];
		ВыборкаАгрегат = РезультатАгрегат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаАгрегат.Следующий() Цикл
			обАгрегат = ВыборкаАгрегат["спрАгрегат"].ПолучитьОбъект();
			ВыборкаВариантКомплектации = ВыборкаАгрегат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаВариантКомплектации.Следующий() Цикл
				КоличествоНоменклатурыВКомплектации = 
				ВыборкаВариантКомплектации["спрВариантыКомплектации"].Товары.Итог("КоличествоУпаковок");
				
				ВыборкаКМ = ВыборкаВариантКомплектации.Выбрать();
				Пока ВыборкаКМ.Следующий() Цикл
					нс = обАгрегат.ВложенныеШтрихкоды.Добавить();
					нс["Штрихкод"] = ВыборкаКМ["спрКМ"];
				КонецЦикла;
				КоличествоНоменклатурыВАгрегате = обАгрегат.ВложенныеШтрихкоды.Количество();
				Если КоличествоНоменклатурыВАгрегате  > КоличествоНоменклатурыВКомплектации Тогда
					ОбщегоНазначения.СообщитьПользователю(
					"В Агрегации не может быть кодов маркировки больше, чем номенклатуры в варианте комплектации", , , ,
					Отказ);
					Возврат Ложь;
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;
		
		ВыборкаУЛ = РезультатУЛ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаУЛ.Следующий() Цикл
			обУЛ = ВыборкаУЛ["докУЛ"].ПолучитьОбъект();
			ВыборкаТовары = ВыборкаУЛ.Выбрать();
			Пока ВыборкаТовары.Следующий() Цикл
				ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика", 
				ВыборкаТовары["Номенклатура"], 
				ВыборкаТовары["Характеристика"]);
				мСтрокУЛ = обУЛ.Товары.НайтиСтроки(ПараметрыОтбора);
				Если мСтрокУЛ.Количество() > 0 Тогда
					мСтрокУЛ[0]["КоличествоУпаковок"] = мСтрокУЛ[0]["КоличествоУпаковок"] + 1;
					мСтрокУЛ[0]["Количество"] = мСтрокУЛ[0]["Количество"] + 1;
				Иначе
					Назначение = обУл.Товары[0].Назначение;
					УпаковочныйЛистРодитель = обУл.Товары[0].УпаковочныйЛистРодитель;
					нс = обУЛ.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(нс, ВыборкаТовары);
					нс["КоличествоУпаковок"] = 1;
					нс["Количество"] = 1;
					нс["Назначение"] = Назначение;
					нс["УпаковочныйЛистРодитель"] = УпаковочныйЛистРодитель;
					нс["ЭтоУпаковочныйЛист"] = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Попытка
			обАгрегат.Записать();
		Исключение
			ОбщегоНазначения.СообщитьПользователю("Не удалось записать изменения агрегата " + обАгрегат, , , ,Отказ);
			Возврат Ложь;
		КонецПопытки;
		
		Попытка
			обУЛ.Записать();
		Исключение
			ОбщегоНазначения.СообщитьПользователю("Не удалось записать изменения документа " + обУЛ, , , ,Отказ);
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Истина; 
КонецФункции

#КонецОбласти

#Область Формирование_движений

// (исключена)
Процедура ДвиженияКодовМаркировкиРасходныйОрдерНаТовары(Источник, Движения)
	
	Если Источник.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение КАК Документ.ПеремещениеТоваров) ЕСТЬ НЕ NULL 
		|			ТОГДА ВЫРАЗИТЬ(РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение КАК Документ.ПеремещениеТоваров).Организация
		// ++ Галфинд ВолковЕВ 07.02.2023 Отгурзка перемещением использует в качетстве распоряжения документ ЗаказКлиента
		//|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|		ИНАЧЕ 
		|			ВЫБОР
		|				КОГДА ВЫРАЗИТЬ(РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение КАК Документ.ЗаказКлиента) ЕСТЬ НЕ NULL 
		|					ТОГДА
		|			     		ВЫРАЗИТЬ(РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение КАК Документ.ЗаказКлиента).Организация
		|	   			ИНАЧЕ
		|	    			ЗНАЧЕНИЕ (Справочник.Организации.ПустаяСсылка)
		|			КОНЕЦ
		// -- Галфинд ВолковЕВ 07.02.2023
		|	КОНЕЦ КАК Организация
		|ПОМЕСТИТЬ Организации
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
		|ГДЕ
		|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	РасходныйОрдерНаТовары.Ссылка КАК Регистратор,
		|	РасходныйОрдерНаТовары.Дата КАК Период,
		|	РасходныйОрдерНаТоварыШтрихкодыУпаковок.ШтрихкодУпаковки КАК КМ,
		|	1 КАК Количество,
		|	Организации.Организация КАК Организация,
		|	РасходныйОрдерНаТовары.Склад КАК Склад
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары.ШтрихкодыУпаковок КАК РасходныйОрдерНаТоварыШтрихкодыУпаковок
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
		|		ПО РасходныйОрдерНаТоварыШтрихкодыУпаковок.Ссылка = РасходныйОрдерНаТовары.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Организации КАК Организации
		|		ПО (ИСТИНА)
		|ГДЕ
		|	РасходныйОрдерНаТоварыШтрихкодыУпаковок.Ссылка = &Ссылка");
		
		Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
		Результат = Запрос.Выполнить();
		Таблица = Результат.Выгрузить();
		Движения.Загрузить(Таблица);
		
	КонецЕсли;
	
КонецПроцедуры

// (исключена)
Процедура ДвиженияКодовМаркировкиПриходныйОрдерНаТовары(Источник, Движения)
	
	Если Не Источник.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят Тогда
		Движения.Очистить();
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	т.ШтрихкодУпаковки КАК ШтрихкодУпаковки
	|ПОМЕСТИТЬ ПриходныйОрдерНаТоварыШтрихкодыУпаковок
	|ИЗ
	|	&тзШтрихкоды КАК т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ПриходныйОрдерНаТовары.Ссылка КАК Регистратор,
	|	ПриходныйОрдерНаТовары.Дата КАК Период,
	|	ПриходныйОрдерНаТоварыШтрихкодыУпаковок.ШтрихкодУпаковки КАК КМ,
	|	1 КАК Количество,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ПриходныйОрдерНаТовары.Распоряжение КАК Документ.ПеремещениеТоваров) ЕСТЬ НЕ NULL 
	|			ТОГДА ВЫРАЗИТЬ(ПриходныйОрдерНаТовары.Распоряжение КАК Документ.ПеремещениеТоваров).Организация
	|		КОГДА ВЫРАЗИТЬ(ПриходныйОрдерНаТовары.Распоряжение КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента) ЕСТЬ НЕ NULL 
	|			ТОГДА ВЫРАЗИТЬ(ПриходныйОрдерНаТовары.Распоряжение КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Организация
	|		КОГДА ВЫРАЗИТЬ(ПриходныйОрдерНаТовары.Распоряжение КАК Документ.ПриобретениеТоваровУслуг) ЕСТЬ НЕ NULL 
	|			ТОГДА ВЫРАЗИТЬ(ПриходныйОрдерНаТовары.Распоряжение КАК Документ.ПриобретениеТоваровУслуг).Организация
	|		КОГДА ВЫРАЗИТЬ(ПриходныйОрдерНаТовары.Распоряжение КАК Документ.ПроизводствоБезЗаказа) ЕСТЬ НЕ NULL 
	|			ТОГДА ВЫРАЗИТЬ(ПриходныйОрдерНаТовары.Распоряжение КАК Документ.ПроизводствоБезЗаказа).Организация
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	КОНЕЦ КАК Организация,
	|	ПриходныйОрдерНаТовары.Склад КАК Склад,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка КАК Агрегат
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	ПриходныйОрдерНаТоварыШтрихкодыУпаковок КАК ПриходныйОрдерНаТоварыШтрихкодыУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО (ПриходныйОрдерНаТоварыШтрихкодыУпаковок.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод)
	|ГДЕ
	|	ПриходныйОрдерНаТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Данные.ВидДвижения КАК ВидДвижения,
	|	Данные.Регистратор КАК Регистратор,
	|	Данные.Период КАК Период,
	|	Данные.Количество КАК Количество,
	|	Данные.Организация КАК Организация,
	|	Данные.Склад КАК Склад,
	|	Данные.Агрегат КАК КМ
	|ИЗ
	|	Данные КАК Данные
	|ГДЕ
	|	Данные.Агрегат ЕСТЬ НЕ NULL");
	
	тзШтриходы = Источник.ШтрихкодыУпаковок.Выгрузить();
	
	ИсточникСсылка = Источник.Ссылка;
	Запрос.УстановитьПараметр("Ссылка", ИсточникСсылка);
	Запрос.УстановитьПараметр("тзШтрихкоды", тзШтриходы);
	
	ПакетРезультатов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	СкладКоробочный = УправлениеСвойствами.ЗначениеСвойства(Источник.Склад, "гф_СкладыТоварыВКоробах") = Истина;
	Распоряжение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсточникСсылка, "Распоряжение");
	
	Если ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		Результат = ПакетРезультатов[1]; // ПОТ по заявке на возврат - движения всегда кодами маркировки
	ИначеЕсли СкладКоробочный Тогда
		Результат = ПакетРезультатов[2];// склад коробной - движения агрегатами
	Иначе
		Результат = ПакетРезультатов[1]; // склад парный -движения кодами маркировки 
	КонецЕсли;
	
	Таблица = Результат.Выгрузить();
	Движения.Загрузить(Таблица);
	
КонецПроцедуры

// (не используем)
Процедура ДвиженияКодовМаркировкигф_гф_АгрегацияКМ(Источник, Движения, Отказ)
	
	СтруктураРеквизитов = Новый Структура("ДокументОснование, Период, Организация, Регистратор", ,
	"Дата", , "Ссылка");
	СтруктураЗаполнения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.Ссылка, СтруктураРеквизитов);
	
	Склад = гф_ПолучитьСкладИзДокументаОснования(СтруктураЗаполнения["ДокументОснование"]);
	СтруктураЗаполнения.Вставить("Склад", Склад);
	СтруктураЗаполнения.Вставить("Количество", 1);
	
	Запрос = Новый Запрос;
	Запрос.Текст = Документы.гф_АгрегацияКМ.ТекстЗапросаПоТаблицеТовары();
	тТовары =  Источник.Товары.Выгрузить();
	Запрос.УстановитьПараметр("Товары", тТовары);
	Результат = Запрос.Выполнить();
	тзПроверки = Результат.Выгрузить();
	
	стрПоиска = Новый Структура("Движение, АгрСуществует, КМСуществует, КМВложенВАгрегат",
	Перечисления.гф_ВидДвиженияАгрегацииКМ.Расход, Истина, Истина, Истина);
	мСтрокРасход = тзПроверки.НайтиСтроки(стрПоиска);
	Если мСтрокРасход.ВГраница() > -1 Тогда
		тзРасход = тзПроверки.Скопировать(мСтрокРасход);
		РезультатОбработкиАгрегатаИУпаковочногоЛиста = ОбработатьАгрегатИУпаковочныйЛист(тзРасход, "Расход", Отказ);
		Если Отказ Тогда
			Возврат;	
		КонецЕсли;
		Если РезультатОбработкиАгрегатаИУпаковочногоЛиста Тогда
			Для каждого Эл Из мСтрокРасход Цикл
				Движение = Движения.Добавить();
				//Период, Организация, Регистратор, Склад, Количество
				ЗаполнитьЗначенияСвойств(Движение, СтруктураЗаполнения); 
				Движение["ВидДвижения"] = ВидДвиженияНакопления.Приход;
				Движение["КМ"] = Эл["спрКМ"];
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	стрПоиска = Новый Структура("Движение, АгрСуществует, КМСуществует",
	Перечисления.гф_ВидДвиженияАгрегацииКМ.Приход, Истина, Истина);
	мСтрокПриход = тзПроверки.НайтиСтроки(стрПоиска);
	Если мСтрокПриход.ВГраница() > -1 Тогда
		тзПриход = тзПроверки.Скопировать(мСтрокПриход);
		РезультатОбработкиАгрегатаИУпаковочногоЛиста = ОбработатьАгрегатИУпаковочныйЛист(тзПриход, "Приход", Отказ);
		Если Отказ Тогда
			Возврат;	
		КонецЕсли;
		Если РезультатОбработкиАгрегатаИУпаковочногоЛиста Тогда
			Для каждого Эл Из мСтрокПриход Цикл
				Движение = Движения.Добавить();
				// Период, Организация, Регистратор, Склад, Количество
				ЗаполнитьЗначенияСвойств(Движение, СтруктураЗаполнения); 
				Движение["ВидДвижения"] = ВидДвиженияНакопления.Расход;
				Движение["КМ"] = Эл["спрКМ"];
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	стрПоиска = Новый Структура("Движение, АгрСуществует, КМСуществует",
	Перечисления.гф_ВидДвиженияАгрегацииКМ.Приход, Ложь, Истина);
	мСтрокПриход = тзПроверки.НайтиСтроки(стрПоиска);
	Если мСтрокПриход.ВГраница() > -1 Тогда
		тзПриход = тзПроверки.Скопировать(мСтрокПриход);
		СтруктураРезультатСозданияАгрегатов =СоздатьАгрегаты(тзПриход, "Приход", Отказ);
		Если Отказ Тогда
			Возврат;	
		КонецЕсли;
		Если СтруктураРезультатСозданияАгрегатов["Результат"] = Истина Тогда
			Для каждого Эл Из мСтрокПриход Цикл
				Движение = Движения.Добавить();
				// Период, Организация, Регистратор, Склад,  Количество
				ЗаполнитьЗначенияСвойств(Движение, СтруктураЗаполнения); 
				Движение["ВидДвижения"] = ВидДвиженияНакопления.Расход;
				Движение["КМ"] = Эл["спрКМ"];
			КонецЦикла;
			Для каждого Эл Из СтруктураРезультатСозданияАгрегатов["МассивАгрегатов"] Цикл
				Движение = Движения.Добавить();
				// Период, Организация, Регистратор, Склад, Количество
				ЗаполнитьЗначенияСвойств(Движение, СтруктураЗаполнения); 
				Движение["ВидДвижения"] = ВидДвиженияНакопления.Приход;
				Движение["КМ"] = Эл;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	// vvv Галфинд \ Sakovich 06.02.2023
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=812bbcee7bda45d711eda3ae2bb06c49
	// убираем движения по рН "гф_ДвижениеКодовМаркировкиОрганизации"
	// т.к. нужные движения формируются при проведении Упаковочного листа.
	Движения.Очистить();
	// ^^^ Галфинд \ Sakovich 06.02.2023 

КонецПроцедуры

// ($)
Процедура ДвиженияКодовМаркировкиЗаказНаЭмиссиюКодовМаркировкиСУЗ(Источник, Движения)

	Если Источник.Товары.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Эмиссия.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ КАК Эмиссия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовИСМП КАК Статусы
	|		ПО (Статусы.Документ = Эмиссия.Ссылка)
	|ГДЕ
	|	Эмиссия.Ссылка = &Ссылка
	|	И НЕ Эмиссия.ПометкаУдаления
	|	И Статусы.ДальнейшееДействие1 = ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется)
	|И Статусы.Статус В (
	|ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗКодыМаркировкиЭмитированы),
	|ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗКодыМаркировкиЭмитированыЧастично))";
	
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ДокументОснование");
	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	Склад = гф_ПолучитьСкладИзДокументаОснования(ДокументОснование);
	// ++ Галфинд СадомцевСА 05.12.2023 Реализовал замену склада в движениях документа Заказ на эмиссию КМ
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee92b2035ae8ad
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		СкладЭмиссииРЗ = _омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначение("гф_СкладЭмиссииРЗ");
		Если ЗначениеЗаполнено(СкладЭмиссииРЗ) Тогда
			Склад = СкладЭмиссииРЗ;
		КонецЕсли; 
	КонецЕсли;
	// -- Галфинд СадомцевСА 05.12.2023
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	Эмиссия.Ссылка КАК Регистратор,
	// ++ Галфинд_ДомнышеваКР_26_10_2023
	// Из-за более поздней даты не хватает остатков для закрытия поставки, ПФ Импорт 40.
	//|	ПулКодовМаркировкиСУЗ.ДатаЭмиссииУниверсальная КАК Период,
	|	НАЧАЛОПЕРИОДА(Эмиссия.Дата, ДЕНЬ) КАК Период,
	// -- Галфинд_ДомнышеваКР_26_10_2023,
	|	Эмиссия.Организация КАК Организация,
	|	&Склад КАК Склад,
	|	спрШтрихкоды.Ссылка КАК КМ,
	|	1 КАК Количество
	|ИЗ
	|	Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ КАК Эмиссия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК спрШтрихкоды
	|			ПО (ПулКодовМаркировкиСУЗ.КодМаркировки = спрШтрихкоды.ЗначениеШтрихкода)
	|		ПО (Эмиссия.ДокументОснование = ПулКодовМаркировкиСУЗ.ДокументОснование)
	|			И (Эмиссия.Ссылка = ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию)
	|ГДЕ
	|	Эмиссия.Ссылка = &Ссылка
	|	И ПулКодовМаркировкиСУЗ.КодМаркировки ЕСТЬ НЕ NULL 
	|	И спрШтрихкоды.Ссылка ЕСТЬ НЕ NULL");
	
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	Запрос.УстановитьПараметр("Склад", Склад);
	Результат = Запрос.Выполнить();
	Таблица = Результат.Выгрузить();
	Движения.Загрузить(Таблица);
	
КонецПроцедуры

// ($)
Процедура ДвиженияКодовМаркировкиУпаковочныйЛист(Источник, Движения)
	
	Если ЗначениеЗаполнено(Источник.гф_ДатаАгрегации) 
		И ТекущаяДатаСеанса() > Источник.гф_ДатаАгрегации
		И Не Источник.ДополнительныеСвойства.Свойство("ПровестиСДатойАгрегации") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Источник.гф_ДатаАгрегации) Тогда
		Возврат;
	КонецЕсли;
	
	Движения.Записать();
	Движения.Записывать = Ложь;

	Если Источник.Товары.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	ДокументПоставки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "гф_Поставка");
	Если Не ЗначениеЗаполнено(ДокументПоставки) Тогда
		Возврат;
	КонецЕсли;
	
	Организация =ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПоставки, "Организация");
	Склад = гф_ПолучитьСкладИзДокументаОснования(ДокументПоставки);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	УпЛист.Ссылка КАК Регистратор,
	|	&ДатаАгрегации КАК Период,
	|   ВЫБОР
	|        КОГДА НЕ УпЛист.гф_Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|             ТОГДА УпЛист.гф_Организация
	|      ИНАЧЕ &Организация
	|   КОНЕЦ КАК Организация,
	|	УпЛист.гф_Агрегация КАК КМ,
	|	1 КАК Количество,
	|	&Склад КАК Склад
	|ИЗ
	|	Документ.УпаковочныйЛист КАК УпЛист
	|ГДЕ
	|	УпЛист.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	УпЛист.Ссылка,
	|	&ДатаАгрегации,
	|   ВЫБОР
	|      КОГДА НЕ УпЛист.гф_Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|          ТОГДА УпЛист.гф_Организация
	|      ИНАЧЕ &Организация
	|   КОНЕЦ,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод,
	|	1,
	|	&Склад
	|ИЗ
	|	Документ.УпаковочныйЛист КАК УпЛист
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО (УпЛист.Код = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка.ЗначениеШтрихкода)
	|ГДЕ
	|	УпЛист.Ссылка = &Ссылка
	|	И ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка.ТипШтрихкода = ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.GS1_128)");
	
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ДатаАгрегации", Источник.гф_ДатаАгрегации);
	Результат = Запрос.Выполнить();
	Таблица = Результат.Выгрузить();
	Движения.Загрузить(Таблица);
	//
	//Если Источник.Товары.Количество() = 0 Тогда
	//	Возврат;	
	//КонецЕсли;
	//
	//ДокументПоставки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "гф_Поставка");
	//Если Не ЗначениеЗаполнено(ДокументПоставки) Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Организация =ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПоставки, "Организация");
	//Склад = гф_ПолучитьСкладИзДокументаОснования(ДокументПоставки);
	//
	//Запрос = Новый Запрос("
	//|ВЫБРАТЬ
	//|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	//|	УпЛист.Ссылка КАК Регистратор,
	//|	УпЛист.Дата КАК Период,
	//|   ВЫБОР
	//|      КОГДА НЕ УпЛист.гф_Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	//|          ТОГДА УпЛист.гф_Организация
	//|      ИНАЧЕ &Организация
	//|   КОНЕЦ КАК Организация,
	//|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка КАК Короб,
	//|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК КМ,
	//|	1 КАК Количество,
	//|	&Склад КАК Склад
	//|ИЗ
	//|	Документ.УпаковочныйЛист КАК УпЛист
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	//|		ПО (УпЛист.Код = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка.ЗначениеШтрихкода)
	//|ГДЕ
	//|	УпЛист.Ссылка = &Ссылка
	//|	И ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка.ТипШтрихкода = ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.GS1_128)");
	//
	//Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	//Запрос.УстановитьПараметр("Организация", Организация);
	//Запрос.УстановитьПараметр("Склад", Склад);
	//Результат = Запрос.Выполнить();
	//Таблица = Результат.Выгрузить();
	//Движения.Загрузить(Таблица);
	//
КонецПроцедуры

// ($)
Процедура ДвиженияКодовМаркировкиПересортицаТоваров(Источник, Движения, Отказ)
	
	Если Источник.Товары.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	// ++ Галфинд_ДомнышеваКР_10_04_2024
	Если Источник.ДополнительныеСвойства.Свойство("БезДвиженийКМ") Тогда
		Возврат;
	КонецЕсли;
	// -- Галфинд_ДомнышеваКР_10_04_2024

	СкладКоробной = УправлениеСвойствами.ЗначениеСвойства(Источник.Склад, "гф_СкладыТоварыВКоробах") = Истина;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	докПересортица.Ссылка КАК докПересортица,
	|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Ссылка КАК докЭмиссия
	|ПОМЕСТИТЬ ДокументыМаркировки
	|ИЗ
	|	Документ.ПересортицаТоваров КАК докПересортица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ КАК ЗаказНаЭмиссиюКодовМаркировкиСУЗ
	|		ПО (докПересортица.Ссылка = ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ДокументОснование)
	|ГДЕ
	|	докПересортица.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	докПересортица.Ссылка КАК Регистратор,
	|	докПересортица.Дата КАК Период,
	|	докПересортица.Организация КАК Организация,
	|	докПересортица.Склад КАК Склад,
	|	гф_ПересортицаУдаляемыеШК.ШтрихкодУпаковки КАК КМ,
	|	NULL КАК Эмиссия,
	|	1 КАК Количество
	|ПОМЕСТИТЬ Движения
	|ИЗ
	|	Документ.ПересортицаТоваров КАК докПересортица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гф_ПересортицаУдаляемыеШК КАК гф_ПересортицаУдаляемыеШК
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ВложенныеШтрихкоды
	|			ПО гф_ПересортицаУдаляемыеШК.ШтрихкодУпаковки = ВложенныеШтрихкоды.Штрихкод
	|		ПО докПересортица.Ссылка = гф_ПересортицаУдаляемыеШК.Пересортица
	|ГДЕ
	|	гф_ПересортицаУдаляемыеШК.Пересортица.Ссылка = &Ссылка
	|	И гф_ПересортицаУдаляемыеШК.ШтрихкодУпаковки ЕСТЬ НЕ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ДокументыМаркировки.докПересортица,
	|	ДокументыМаркировки.докПересортица.Дата,
	|	ДокументыМаркировки.докПересортица.Организация,
	|	ДокументыМаркировки.докПересортица.Склад,
	|	ШтрихкодыУпаковокТоваров.Ссылка,
	|	ДокументыМаркировки.докЭмиссия,
	|	1
	|ИЗ
	|	ДокументыМаркировки КАК ДокументыМаркировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК тчВложенныеШтрихкоды
	|				ПО ШтрихкодыУпаковокТоваров.Ссылка = тчВложенныеШтрихкоды.Штрихкод
	|			ПО ПулКодовМаркировкиСУЗ.КодМаркировки = ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода
	|		ПО ДокументыМаркировки.докПересортица = ПулКодовМаркировкиСУЗ.ДокументОснование
	|			И ДокументыМаркировки.докЭмиссия = ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию
	// vvv Галфинд \ Sakovich 15.02.2024
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811eec9bc4eeab8f7
	//|ГДЕ
	//|	ШтрихкодыУпаковокТоваров.Ссылка ЕСТЬ НЕ NULL
	// ^^^ Галфинд \ Sakovich 15.02.2024
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Движения.Организация КАК Организация,
	|	Движения.Склад КАК Склад,
	|	Движения.КМ КАК КМ,
	|	Движения.Эмиссия КАК Эмиссия,
	|	Движения.Количество КАК Количество
	|ПОМЕСТИТЬ ДанныеДляКонтроляОстатков
	|ИЗ
	|	Движения КАК Движения
	|ГДЕ
	|	Движения.ВидДвижения = ЗНАЧЕНИЕ(видДвиженияНакопления.Расход)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляКонтроляОстатков.Организация КАК Организация,
	|	ДанныеДляКонтроляОстатков.Склад КАК Склад,
	|	ДанныеДляКонтроляОстатков.КМ КАК КМ,
	|	ЕСТЬNULL(Остатки.КоличествоОстаток, 0) - ДанныеДляКонтроляОстатков.Количество КАК Нехватака
	|ИЗ
	|	ДанныеДляКонтроляОстатков КАК ДанныеДляКонтроляОстатков
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.гф_ДвижениеКодовМаркировкиОрганизации.Остатки(
	|				&Момент,
	|				Организация В
	|						(ВЫБРАТЬ
	|							т.Организация
	|						ИЗ
	|							ДанныеДляКонтроляОстатков КАК т)
	|					И Склад В
	|						(ВЫБРАТЬ
	|							т1.Склад
	|						ИЗ
	|							ДанныеДляКонтроляОстатков КАК т1)
	|					И КМ В
	|						(ВЫБРАТЬ
	|							т2.КМ
	|						ИЗ
	|							ДанныеДляКонтроляОстатков КАК т2)) КАК Остатки
	|		ПО ДанныеДляКонтроляОстатков.Организация = Остатки.Организация
	|			И ДанныеДляКонтроляОстатков.Склад = Остатки.Склад
	|			И ДанныеДляКонтроляОстатков.КМ = Остатки.КМ
	|ГДЕ
	|	ЕСТЬNULL(Остатки.КоличествоОстаток, 0) - ДанныеДляКонтроляОстатков.Количество < 0
	// vvv Галфинд \ Sakovich 15.02.2024
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811eec9bc4eeab8f7
	|	И ДанныеДляКонтроляОстатков.КМ ЕСТЬ НЕ NULL");
	// ^^^ Галфинд \ Sakovich 15.02.2024
	
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	Запрос.УстановитьПараметр("СкладКоробной", СкладКоробной);
	
	// ++ Галфинд_ДомнышеваКР_02_02_2024
	// момент времени должен захватывать последнюю секунду документа.
	//Запрос.УстановитьПараметр("Момент", Источник.МоментВремени());
	Запрос.УстановитьПараметр("Момент", Новый Граница(Источник.Ссылка.МоментВремени(), ВидГраницы.Включая));
	// -- Галфинд_ДомнышеваКР_02_02_2024
	
	ПакетРезультатов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	// vvv Галфинд \ Sakovich 15.02.2024
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811eec9bc4eeab8f7
	//РезультатКонтроль = ПакетРезультатов[3];
	//Если Не РезультатКонтроль.Пустой() Тогда
	//	Шаблон = "По организации %1, по складу %2 - нет остатков по списываемому коду маркировки: %3";
	//	ВыборкаКонтроль = РезультатКонтроль.Выбрать();
	//	Пока ВыборкаКонтроль.Следующий() Цикл
	//		ТекстСообщения = СтрШаблон(Шаблон, ВыборкаКонтроль["Организация"], ВыборкаКонтроль["Склад"], ВыборкаКонтроль["КМ"]);
	//		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	//	КонецЦикла;
	//	Возврат;
	//КонецЕсли;
	Событие = "Проведение документа ""Пересортица товаров"" по регистру ""Движение кодов маркировки организаций""";
	Уровень = УровеньЖурналаРегистрации.Ошибка;
	Данные = Источник.Ссылка;
	лМетаданные = Метаданные.Документы.ПересортицаТоваров;
	
	ВыборкаЭмиссий = ПакетРезультатов[0].Выбрать();
	Если ВыборкаЭмиссий.НайтиСледующий(Новый Структура("докЭмиссия", Null)) Тогда
		Отказ = Истина;
		Шаблон = "По документу %1 не найден Заказ на эмиссию кодов маркировки";
		Сообщение = СтрШаблон(Шаблон, Данные);
		ОбщегоНазначения.СообщитьПользователю(Сообщение);
		ЗаписьЖурналаРегистрации(Событие, Уровень, лМетаданные, Данные, Сообщение);
		
	Иначе
		ВыборкаДвижений = ПакетРезультатов[1].Выбрать();
		
		Если ВыборкаДвижений.НайтиСледующий(
			Новый Структура("ВидДвижения, КМ", ВидДвиженияНакопления.Расход, Null)) Тогда
			Отказ = Истина;
			Шаблон = "В пуле кодов маркировки не найден Код маркировки по документу %1";
			Сообщение = СтрШаблон(Шаблон, ВыборкаДвижений["Эмиссия"]);
			ОбщегоНазначения.СообщитьПользователю(Сообщение);
			ЗаписьЖурналаРегистрации(Событие, Уровень, лМетаданные, Данные, Сообщение);
			
		КонецЕсли;
		ВыборкаДвижений.Сбросить();
		Если ВыборкаДвижений.НайтиСледующий(
			Новый Структура("ВидДвижения, КМ", ВидДвиженияНакопления.Приход, Null)) Тогда
			Отказ = Истина;
			Шаблон = "В регистре ""Пересортица удаляемые ШК"" не найден Код маркировки по документу %1";
			Сообщение = СтрШаблон(Шаблон, ВыборкаДвижений[Данные]);
			ОбщегоНазначения.СообщитьПользователю(Сообщение);
			ЗаписьЖурналаРегистрации(Событие, Уровень, лМетаданные, Данные, Сообщение);
		КонецЕсли;
		
		Если Не Отказ Тогда
			РезультатКонтроль = ПакетРезультатов[3];
			Если Не РезультатКонтроль.Пустой() Тогда
				Отказ = Истина;
				Шаблон = "По организации %1, по складу %2 - нет остатков по списываемому коду маркировки: %3";
				ВыборкаКонтроль = РезультатКонтроль.Выбрать();
				Пока ВыборкаКонтроль.Следующий() Цикл
					Сообщение = СтрШаблон(Шаблон, ВыборкаКонтроль["Организация"],
					ВыборкаКонтроль["Склад"], ВыборкаКонтроль["КМ"]);
					ОбщегоНазначения.СообщитьПользователю(Сообщение);
					ЗаписьЖурналаРегистрации(Событие, Уровень, лМетаданные, Данные, Сообщение);
				КонецЦикла;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// ^^^ Галфинд \ Sakovich 15.02.2024
	
	РезультатДвижения = ПакетРезультатов[1];
	Таблица = РезультатДвижения.Выгрузить();
	Движения.Загрузить(Таблица);
	
КонецПроцедуры

// ($)
Процедура ДвиженияКодовМаркировкигф_ВводНачальныхОстатковКМ(Источник, Движения)
	
	Если Источник.ШтрихкодыУпаковокТоваров.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ВводОстатков.Дата КАК Период,
	|	ВводОстатков.Ссылка КАК Регистратор,
	|	ВводОстатков.Организация КАК Организация,
	|	ВводОстатков.Склад КАК Склад,
	|	СпрШтрихкоды.Ссылка КАК КМ,
	|	1 КАК Количество
	|ИЗ
	|	Документ.гф_ВводНачальныхОстатковКМ КАК ВводОстатков
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гф_ВводНачальныхОстатковКМ.ШтрихкодыУпаковокТоваров КАК Штрихкоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК СпрШтрихкоды
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК тчВложенныеШтрихкоды
	|				ПО (СпрШтрихкоды.Ссылка = тчВложенныеШтрихкоды.Штрихкод)
	|			ПО (Штрихкоды.ЗначениеШтрихкода = СпрШтрихкоды.ЗначениеШтрихкода)
	|		ПО (Штрихкоды.Ссылка = ВводОстатков.Ссылка)
	|ГДЕ
	|	ВводОстатков.Ссылка = &Ссылка
	|	И СпрШтрихкоды.Ссылка ЕСТЬ НЕ NULL");
	
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	Таблица = Результат.Выгрузить();
	Движения.Загрузить(Таблица);
	
КонецПроцедуры

// ($)
Процедура ДвиженияКодовМаркировкиПеремещениеТоваров(Источник, Движения, Отказ)
	
	Если Не Источник.Статус = Перечисления.СтатусыПеремещенийТоваров.Принято Тогда
		Возврат;	
	КонецЕсли;
	
	СкладОтправительВКоробах = УправлениеСвойствами.ЗначениеСвойства(Источник.СкладОтправитель, "гф_СкладыТоварыВКоробах") = Истина;
	СкладПолучательВКоробах = УправлениеСвойствами.ЗначениеСвойства(Источник.СкладПолучатель, "гф_СкладыТоварыВКоробах") = Истина;
	// vvv Галфинд \ Sakovich 02.04.2024
	ДопРеквизитОбработкаУдаления = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("ИдентификаторДляФормул",
	"Гф_СозданРЗОбработкаУдаления");
	ПеремещениеДляОбработкиУдаления = УправлениеСвойствами.ЗначениеСвойства(Источник.Ссылка, ДопРеквизитОбработкаУдаления) = Истина;
	// ^^^ Галфинд \ Sakovich 02.04.2024
	Если Не СкладОтправительВКоробах И Не СкладПолучательВКоробах Тогда
		// если перемещение пары-пары, тогда КМ можем взять только лишь из таб.части
		Если Источник.гф_ШтрихкодыУпаковок.Количество() = 0 Тогда
			Возврат;	
		КонецЕсли;
	КонецЕсли;
	
	МВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	докПеремещение.Ссылка КАК Ссылка,
	|	докПеремещение.Дата КАК Дата,
	|	докПеремещение.Организация КАК Организация,
	|	докПеремещение.СкладОтправитель КАК СкладОтправитель,
	|	докПеремещение.СкладПолучатель КАК СкладПолучатель,
	|	спрШтрихкодыУпаковок.Ссылка КАК КМ,
	|	1 КАК Количество
	|ПОМЕСТИТЬ КМ_Движения_короб_из_коробов
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК докПеремещение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.гф_ТоварыВКоробах КАК тчТоварыВКоробах
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист КАК докУпаковочныйЛист
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК спрШтрихкодыУпаковок
	|				ПО (докУпаковочныйЛист.гф_Агрегация = спрШтрихкодыУпаковок.Ссылка)
	|			ПО (тчТоварыВКоробах.УпаковочныйЛист = докУпаковочныйЛист.Ссылка)
	|		ПО (докПеремещение.Ссылка = тчТоварыВКоробах.Ссылка)
	|ГДЕ
	|	докПеремещение.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	докПеремещение.Ссылка КАК Ссылка,
	|	докПеремещение.Дата КАК Дата,
	|	докПеремещение.Организация КАК Организация,
	|	докПеремещение.СкладОтправитель КАК СкладОтправитель,
	|	докПеремещение.СкладПолучатель КАК СкладПолучатель,
	|	тчШтрихкоды.Штрихкод КАК КМ,
	|	1 КАК Количество
	|ПОМЕСТИТЬ КМ_Движения_пара_из_коробов
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК докПеремещение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.гф_ТоварыВКоробах КАК тчТоварыВКоробах
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист КАК докУпаковочныйЛист
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК спрШтрихкодыУпаковок
	|					ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК тчШтрихкоды
	|					ПО спрШтрихкодыУпаковок.Ссылка = тчШтрихкоды.Ссылка
	|				ПО докУпаковочныйЛист.гф_Агрегация = спрШтрихкодыУпаковок.Ссылка
	|			ПО тчТоварыВКоробах.УпаковочныйЛист = докУпаковочныйЛист.Ссылка
	|		ПО докПеремещение.Ссылка = тчТоварыВКоробах.Ссылка
	|ГДЕ
	|	докПеремещение.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	докПеремещение.Ссылка КАК Ссылка,
	|	докПеремещение.Дата КАК Дата,
	|	докПеремещение.Организация КАК Организация,
	|	докПеремещение.СкладОтправитель КАК СкладОтправитель,
	|	докПеремещение.СкладПолучатель КАК СкладПолучатель,
	|	ПеремещениеТоваровгф_ШтрихкодыУпаковок.ШтрихкодУпаковки КАК КМ,
	|	1 КАК Количество
	|ПОМЕСТИТЬ КМ_Движения_пара_из_пар
	|ИЗ
	|	Документ.ПеремещениеТоваров.гф_ШтрихкодыУпаковок КАК ПеремещениеТоваровгф_ШтрихкодыУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК докПеремещение
	|		ПО ПеремещениеТоваровгф_ШтрихкодыУпаковок.Ссылка = докПеремещение.Ссылка
	|ГДЕ
	|	докПеремещение.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	Запрос.УстановитьПараметр("СкладОтправительВКоробах", СкладОтправительВКоробах);
	Запрос.УстановитьПараметр("СкладПолучательВКоробах", СкладПолучательВКоробах);
	Запрос.УстановитьПараметр("Момент", Новый Граница(Источник.Дата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СкладОтправитель", Источник.СкладОтправитель);
	Запрос.УстановитьПараметр("Организация", Источник.Организация);
	
	//формирование ВТ
	Запрос.Выполнить();
	
	// vvv Галфинд \ Sakovich 02.04.2024
	Если Не ПеремещениеДляОбработкиУдаления Тогда
		// ^^^ Галфинд \ Sakovich 02.04.2024
		ТекстЗапроса = "
		|ВЫБРАТЬ 
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	т.Ссылка КАК Регистратор,
		|	т.Дата КАК Период,
		|	т.Организация КАК Организация,
		|	т.СкладОтправитель КАК Склад,
		|	т.КМ КАК КМ,
		|	т.Количество КАК Количество  
		|	поместить Движения
		|ИЗ
		|	@ИмяТаблицыРасход@ КАК т 
		|	
		|	Объединить Все 
		|	
		| ВЫБРАТЬ 
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	т.Ссылка КАК Регистратор,
		|	т.Дата КАК Период,
		|	т.Организация КАК Организация,
		|	т.СкладПолучатель КАК Склад,
		|	т.КМ КАК КМ,
		|	т.Количество КАК Количество
		|ИЗ
		|	@ИмяТаблицыПриход@ КАК т 
		|	
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.КМ КАК КМ,
		|	Остатки.КоличествоОстаток КАК КоличествоОстаток
		|ПОМЕСТИТЬ втОстатки
		|ИЗ
		|	РегистрНакопления.гф_ДвижениеКодовМаркировкиОрганизации.Остатки(
		|			&Момент,
		|			Организация = &Организация
		|				И Склад = &СкладОтправитель
		|				И КМ В
		|					(ВЫБРАТЬ
		|						т.КМ
		|					ИЗ
		|						@ИмяТаблицыРасход@ КАК т)) КАК Остатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Расход.Организация КАК Организация,
		|	Расход.СкладОтправитель КАК Склад,
		|	Расход.КМ КАК КМ,
		|	ЕСТЬNULL(Остатки.КоличествоОстаток, 0) - Расход.Количество КАК Нехватка
		|ИЗ
		|	@ИмяТаблицыРасход@ КАК Расход
		|		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК Остатки
		|		ПО Расход.КМ = Остатки.КМ
		|ГДЕ
		|	ЕСТЬNULL(Остатки.КоличествоОстаток, 0) - Расход.Количество < 0";
		
		// короб-короб
		Если СкладОтправительВКоробах И СкладПолучательВКоробах Тогда
			ИмяТаблицыРасход = "КМ_Движения_короб_из_коробов";
			ИмяТаблицыПриход = "КМ_Движения_короб_из_коробов";
		КонецЕсли;
		
		// короб-пара
		Если СкладОтправительВКоробах И Не СкладПолучательВКоробах Тогда
			ИмяТаблицыРасход = "КМ_Движения_короб_из_коробов";
			ИмяТаблицыПриход = "КМ_Движения_пара_из_коробов";
		КонецЕсли;
		
		// пара-пара
		Если Не СкладОтправительВКоробах И Не СкладПолучательВКоробах Тогда
			ИмяТаблицыРасход = "КМ_Движения_пара_из_пар";
			ИмяТаблицыПриход = "КМ_Движения_пара_из_пар";
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "@ИмяТаблицыРасход@", ИмяТаблицыРасход);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "@ИмяТаблицыПриход@", ИмяТаблицыПриход);
		
		Запрос.Текст = ТекстЗапроса;
		
		ПакетРезультатов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
		РезультатКонтроль = ПакетРезультатов[2];
		Если Не РезультатКонтроль.Пустой() Тогда
			Шаблон = "По организации %1, по складу %2 - нет остатков по списываемому коду маркировки: %3";
			ВыборкаКонтроль = РезультатКонтроль.Выбрать();
			Пока ВыборкаКонтроль.Следующий() Цикл
				ТекстСообщения = СтрШаблон(Шаблон, ВыборкаКонтроль["Организация"], ВыборкаКонтроль["Склад"], ВыборкаКонтроль["КМ"]);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
			КонецЦикла;
			Возврат;
		КонецЕсли;
		// vvv Галфинд \ Sakovich 02.04.2024
	Иначе
		ТекстЗапроса = "
		| ВЫБРАТЬ 
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	т.Ссылка КАК Регистратор,
		|	т.Дата КАК Период,
		|	т.Организация КАК Организация,
		|	т.СкладПолучатель КАК Склад,
		|	т.КМ КАК КМ,
		|	т.Количество КАК Количество
		|	поместить Движения
		|ИЗ
		|	КМ_Движения_пара_из_пар КАК т";
		Запрос.Текст = ТекстЗапроса;
		
		ПакетРезультатов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	КонецЕсли;
	// ^^^ Галфинд \ Sakovich 02.04.2024
	РезультатДвижения = ПакетРезультатов[0];
	Таблица = РезультатДвижения.Выгрузить();
	Движения.Загрузить(Таблица);
	
КонецПроцедуры 

// (не используем)
Процедура ДвиженияКодовМаркировкиМаркировкаТоваровИСМП(Источник, Движения)
	
	Если Источник.ШтрихкодыУпаковок.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	Склад = Неопределено;
	СкладДляЗаполнения = Неопределено;
	Если Источник.ДополнительныеСвойства.Свойство("Склад", СкладДляЗаполнения) Тогда
		Если ЗначениеЗаполнено(СкладДляЗаполнения) Тогда
			Склад = СкладДляЗаполнения;	
		КонецЕсли;
	Иначе 
		Если ЗначениеЗаполнено(Источник.ДокументОснование) Тогда
			Склад = гф_ПолучитьСкладИзДокументаОснования(Источник.ДокументОснование);
		КонецЕсли;
	КонецЕсли;
	
	СкладКоробной = УправлениеСвойствами.ЗначениеСвойства(Склад, "гф_СкладыТоварыВКоробах") = Истина;

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Маркировка.Организация КАК Организация,
	|	Штрихкоды.ШтрихкодУпаковки КАК КМ,
	|	1 КАК Количество,
	|	&Склад КАК Склад,
	|	Маркировка.Дата КАК Дата,
	|	Маркировка.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ДокТч
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП КАК Маркировка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаркировкаТоваровИСМП.ШтрихкодыУпаковок КАК Штрихкоды
	|		ПО (Штрихкоды.Ссылка = Маркировка.Ссылка)
	|ГДЕ
	|	Маркировка.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДокТч.Дата КАК Период,
	|	ДокТч.Ссылка КАК Регистратор,
	|	ДокТч.Организация КАК Организация,
	|	ДокТч.Склад КАК Склад,
	|	ДокТч.КМ КАК КМ,
	|	1 КАК Количество,
	|	ЕСТЬNULL(Остатки.КоличествоОстаток, 0) КАК КоличествоОстаток
	|ИЗ
	|	ДокТч КАК ДокТч
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.гф_ДвижениеКодовМаркировкиОрганизации.Остатки(
	|				&Момент,
	|				КМ В
	|					(ВЫБРАТЬ
	|						т1.КМ
	|					ИЗ
	|						ДокТч КАК т1)) КАК Остатки
	|		ПО ДокТч.КМ = Остатки.КМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ВложенныеШтрихкоды
	|		ПО ДокТч.КМ = ВложенныеШтрихкоды.Штрихкод
	|ГДЕ
	|	ЕСТЬNULL(Остатки.КоличествоОстаток, 0) = 0");
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	Запрос.УстановитьПараметр("Момент", Источник.МоментВремени());
	Результат = Запрос.Выполнить();
	Таблица = Результат.Выгрузить();
	Движения.Загрузить(Таблица);
	
КонецПроцедуры

// ($)
Процедура ДвиженияКодовМаркировкиВозвратТоваровОтКлиента(Источник, Движения)
	
	Если Источник.ШтрихкодыУпаковок.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;

	//при расходе остатки по складу <Контрагент> - не контролируем
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВозвратТоваровОтКлиента.Ссылка КАК Ссылка,
	|	ВозвратТоваровОтКлиента.Дата КАК Дата,
	|	ВозвратТоваровОтКлиента.Склад КАК Склад,
	|	ВозвратТоваровОтКлиента.Контрагент КАК Контрагент,
	|	ВозвратТоваровОтКлиента.Организация КАК Организация,
	|	Штрихкоды.ШтрихкодУпаковки КАК КМ,
	|	1 КАК Количество
	|ПОМЕСТИТЬ ДанныеДвижений
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента.ШтрихкодыУпаковок КАК Штрихкоды
	|		ПО (Штрихкоды.Ссылка = ВозвратТоваровОтКлиента.Ссылка)
	|ГДЕ
	|	ВозвратТоваровОтКлиента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеДвижений.Ссылка КАК Регистратор,
	|	ДанныеДвижений.Дата КАК Период,
	|	ДанныеДвижений.Склад КАК Склад,
	|	ДанныеДвижений.Организация КАК Организация,
	|	ДанныеДвижений.КМ КАК КМ,
	|	1 КАК Количество
	|ИЗ
	|	ДанныеДвижений КАК ДанныеДвижений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК тчВложенныеШтрихкоды
	|		ПО ДанныеДвижений.КМ = тчВложенныеШтрихкоды.Штрихкод
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ДанныеДвижений.Ссылка,
	|	ДанныеДвижений.Дата,
	|	ДанныеДвижений.Контрагент,
	|	ДанныеДвижений.Организация,
	|	ДанныеДвижений.КМ,
	|	1
	|ИЗ
	|	ДанныеДвижений КАК ДанныеДвижений");
	
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	Результат = Запрос.Выполнить();
	Таблица = Результат.Выгрузить();
	Движения.Загрузить(Таблица);
	
КонецПроцедуры

// ($)
Процедура ДвиженияКодовМаркировкиВнутреннееПотребление(Источник, Движения, Отказ)
	
	Если Источник.гф_ШтрихкодыУпаковок.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	СкладКоробной = УправлениеСвойствами.ЗначениеСвойства(Источник.Склад, "гф_СкладыТоварыВКоробах") = Истина;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	Потребление.Ссылка КАК Регистратор,
	|	Потребление.Дата КАК Период,
	|	Потребление.Организация КАК Организация,
	|	Потребление.Склад КАК Склад,
	|	Штрихкоды.ШтрихкодУпаковки КАК КМ,
	|	1 КАК Количество
	|ПОМЕСТИТЬ Движения
	|ИЗ
	|	Документ.ВнутреннееПотребление КАК Потребление
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВнутреннееПотребление.гф_ШтрихкодыУпаковок КАК Штрихкоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК тчВложенныеШтрихкоды
	|			ПО (Штрихкоды.ШтрихкодУпаковки = тчВложенныеШтрихкоды.Штрихкод)
	|		ПО (Штрихкоды.Ссылка = Потребление.Ссылка)
	|ГДЕ
	|	Потребление.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Движения.Организация КАК Организация,
	|	Движения.Склад КАК Склад,
	|	Движения.КМ КАК КМ,
	|	ЕСТЬNULL(Остатки.КоличествоОстаток, 0) - Движения.Количество КАК Нехватка
	|ИЗ
	|	Движения КАК Движения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.гф_ДвижениеКодовМаркировкиОрганизации.Остатки(
	|				&Момент,
	|				Организация В
	|						(ВЫБРАТЬ
	|							т.Организация
	|						ИЗ
	|							Движения КАК т)
	|					И Склад В
	|						(ВЫБРАТЬ
	|							т1.Склад
	|						ИЗ
	|							Движения КАК т1)
	|					И КМ В
	|						(ВЫБРАТЬ
	|							т2.КМ
	|						ИЗ
	|							Движения КАК т2)) КАК Остатки
	|		ПО Движения.Организация = Остатки.Организация
	|			И Движения.Склад = Остатки.Склад
	|			И Движения.КМ = Остатки.КМ
	|ГДЕ
	|	ЕСТЬNULL(Остатки.КоличествоОстаток, 0) - Движения.Количество < 0");
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	Запрос.УстановитьПараметр("Момент", Источник.МоментВремени());
	Запрос.УстановитьПараметр("СкладКоробной", СкладКоробной);
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	РезультатКонтроль = ПакетРезультатов[1];
	Если Не РезультатКонтроль.Пустой() Тогда
		Шаблон = "По организации %1, по складу %2 - нет остатков по списываемому коду маркировки: %3";
		ВыборкаКонтроль = РезультатКонтроль.Выбрать();
		Пока ВыборкаКонтроль.Следующий() Цикл
			ТекстСообщения = СтрШаблон(Шаблон, ВыборкаКонтроль["Организация"], ВыборкаКонтроль["Склад"], ВыборкаКонтроль["КМ"]);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	РезультатДвижения = ПакетРезультатов[0];
	Таблица = РезультатДвижения.Выгрузить();
	Движения.Загрузить(Таблица);

КонецПроцедуры

// ($)
Процедура ДвиженияКодовМаркировкиСписаниеНедостачТоваров(Источник, Движения, Отказ)
	
	Если Источник.гф_ШтрихкодыУпаковок.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	Списание.Ссылка КАК Регистратор,
	|	Списание.Дата КАК Период,
	|	Списание.Организация КАК Организация,
	|	Списание.Склад КАК Склад,
	|	Штрихкоды.ШтрихкодУпаковки КАК КМ,
	|	1 КАК Количество
	|ПОМЕСТИТЬ Движения
	|ИЗ
	|	Документ.СписаниеНедостачТоваров КАК Списание
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеНедостачТоваров.гф_ШтрихкодыУпаковок КАК Штрихкоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК тчВложенныеШтрихкоды
	|			ПО (Штрихкоды.ШтрихкодУпаковки = тчВложенныеШтрихкоды.Штрихкод)
	|		ПО (Штрихкоды.Ссылка = Списание.Ссылка)
	|ГДЕ
	|	Списание.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Движения.Организация КАК Организация,
	|	Движения.Склад КАК Склад,
	|	Движения.КМ КАК КМ,
	|	ЕСТЬNULL(Остатки.КоличествоОстаток, 0) - Движения.Количество КАК Нехватка
	|ИЗ
	|	Движения КАК Движения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.гф_ДвижениеКодовМаркировкиОрганизации.Остатки(
	|				&Момент,
	|				Организация В
	|						(ВЫБРАТЬ
	|							т.Организация
	|						ИЗ
	|							Движения КАК т)
	|					И Склад В
	|						(ВЫБРАТЬ
	|							т1.Склад
	|						ИЗ
	|							Движения КАК т1)
	|					И КМ В
	|						(ВЫБРАТЬ
	|							т2.КМ
	|						ИЗ
	|							Движения КАК т2)) КАК Остатки
	|		ПО Движения.Организация = Остатки.Организация
	|			И Движения.Склад = Остатки.Склад
	|			И Движения.КМ = Остатки.КМ
	|ГДЕ
	|	ЕСТЬNULL(Остатки.КоличествоОстаток, 0) - Движения.Количество < 0");
	
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	Запрос.УстановитьПараметр("Момент", Источник.МоментВремени());
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	РезультатКонтроль = ПакетРезультатов[1];
	Если Не РезультатКонтроль.Пустой() Тогда
		Шаблон = "По организации %1, по складу %2 - нет остатков по списываемому коду маркировки: %3";
		ВыборкаКонтроль = РезультатКонтроль.Выбрать();
		Пока ВыборкаКонтроль.Следующий() Цикл
			ТекстСообщения = СтрШаблон(Шаблон, ВыборкаКонтроль["Организация"], ВыборкаКонтроль["Склад"], ВыборкаКонтроль["КМ"]);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	РезультатДвижения = ПакетРезультатов[0];
	Таблица = РезультатДвижения.Выгрузить();
	Движения.Загрузить(Таблица);

КонецПроцедуры

// ($)
Процедура ДвиженияКодовМаркировкиРеализацияТоваровУслуг(Источник, Движения, Отказ)
	
	Если Источник.ШтрихкодыУпаковок.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	СкладКоробной = УправлениеСвойствами.ЗначениеСвойства(Источник.Склад, "гф_СкладыТоварыВКоробах") = Истина;
	ОтгрузкаКодовМаркировкиПарами = УправлениеСвойствами.ЗначениеСвойства(Источник.Договор, "гф_ДоговорыКонтрагентовОтгрузкаКодовМаркировкиПарами") = Истина;
	
	// vvv Галфинд \ Sakovich 23.11.2023
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee89e68d11b585
	ПервичныеДокументыВКоробах = УправлениеСвойствами.ЗначениеСвойства(Источник.Договор, "гф_ДоговорыКонтрагентовПервичныеДокументыВКоробах") = Истина;
	ПроводитьСРазукомплектовкой = Ложь;
	
	Если (СкладКоробной И ОтгрузкаКодовМаркировкиПарами)
		ИЛИ (СкладКоробной И Не ПервичныеДокументыВКоробах И Не ОтгрузкаКодовМаркировкиПарами) Тогда
		ПроводитьСРазукомплектовкой = Истина;
	КонецЕсли;
	// ^^^ Галфинд \ Sakovich 23.11.2023
	
	Запрос = Новый Запрос;
	
	// vvv Галфинд \ Sakovich 23.11.2023
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee89e68d11b585
	//Если СкладКоробной И ОтгрузкаКодовМаркировкиПарами Тогда
	Если ПроводитьСРазукомплектовкой Тогда
		// ^^^ Галфинд \ Sakovich 23.11.2023	
		
		//движения по разукомплектации с проверкой остатков разукомплектовываемых коробов
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	докРеализация.Дата КАК Период,
		|	докРеализация.Ссылка КАК Регистратор,
		|	докРеализация.Организация КАК Организация,
		|	докРеализация.Склад КАК Склад,
		|	докРеализация.Контрагент КАК Контрагент,
		|	РеализацияТоваровУслуггф_ТоварыВКоробах.УпаковочныйЛист КАК УпаковочныйЛист,
		|	докУпаковочныйЛист.гф_Агрегация КАК КМАгрегат,
		|	1 КАК Количество
		|ПОМЕСТИТЬ ДанныеКороба
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК докРеализация
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.гф_ТоварыВКоробах КАК РеализацияТоваровУслуггф_ТоварыВКоробах
		|		ПО (РеализацияТоваровУслуггф_ТоварыВКоробах.Ссылка = докРеализация.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист КАК докУпаковочныйЛист
		|		ПО (РеализацияТоваровУслуггф_ТоварыВКоробах.УпаковочныйЛист = докУпаковочныйЛист.Ссылка)
		|ГДЕ
		|	докРеализация.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеКороба.Период КАК Период,
		|	ДанныеКороба.Регистратор КАК Регистратор,
		|	ДанныеКороба.Организация КАК Организация,
		|	ДанныеКороба.Склад КАК Склад,
		|	ДанныеКороба.Контрагент КАК Контрагент,
		|	ДанныеКороба.КМАгрегат КАК КМАгрегат,
		|	ВложенныеШтрихкоды.Штрихкод КАК КМ,
		|	1 КАК Количество
		|ПОМЕСТИТЬ ДанныеШтрихкодовКороба
		|ИЗ
		|	ДанныеКороба КАК ДанныеКороба
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ВложенныеШтрихкоды
		|		ПО ДанныеКороба.КМАгрегат = ВложенныеШтрихкоды.Ссылка
		|ГДЕ
		|	ВложенныеШтрихкоды.Штрихкод ЕСТЬ НЕ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеКороба.Период КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	ДанныеКороба.Регистратор КАК Регистратор,
		|	ДанныеКороба.Организация КАК Организация,
		|	ДанныеКороба.Склад КАК Склад,
		|	ДанныеКороба.КМАгрегат КАК КМ,
		|	ДанныеКороба.Количество КАК Количество
		|ПОМЕСТИТЬ ДвиженияРазукомплектации
		|ИЗ
		|	ДанныеКороба КАК ДанныеКороба
		|
		// vvv Галфинд \ Sakovich 24.11.2023  одни и те же движения (приход/расход) - взаимосокращаются
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ
		//|	ДанныеШтрихкодовКороба.Период,
		//|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
		//|	ДанныеШтрихкодовКороба.Регистратор,
		//|	ДанныеШтрихкодовКороба.Организация,
		//|	ДанныеШтрихкодовКороба.Склад,
		//|	ДанныеШтрихкодовКороба.КМ,
		//|	ДанныеШтрихкодовКороба.Количество
		//|ИЗ
		//|	ДанныеШтрихкодовКороба КАК ДанныеШтрихкодовКороба
		//|
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ
		//|	ДанныеШтрихкодовКороба.Период,
		//|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
		//|	ДанныеШтрихкодовКороба.Регистратор,
		//|	ДанныеШтрихкодовКороба.Организация,
		//|	ДанныеШтрихкодовКороба.Склад,
		//|	ДанныеШтрихкодовКороба.КМ,
		//|	ДанныеШтрихкодовКороба.Количество
		//|ИЗ
		// ^^^ Галфинд \ Sakovich 24.11.2023
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеШтрихкодовКороба.Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
		|	ДанныеШтрихкодовКороба.Регистратор,
		|	ДанныеШтрихкодовКороба.Организация,
		|	ДанныеШтрихкодовКороба.Контрагент,
		|	ДанныеШтрихкодовКороба.КМ,
		|	ДанныеШтрихкодовКороба.Количество
		|ИЗ
		|	ДанныеШтрихкодовКороба КАК ДанныеШтрихкодовКороба
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеКороба.Организация КАК Организация,
		|	ДанныеКороба.Склад КАК Склад,
		|	ДанныеКороба.КМАгрегат КАК КМ,
		|	ЕСТЬNULL(гф_ДвижениеКодовМаркировкиОрганизацииОстатки.КоличествоОстаток, 0) - ДанныеКороба.Количество КАК Остаток
		|ИЗ
		|	ДанныеКороба КАК ДанныеКороба
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.гф_ДвижениеКодовМаркировкиОрганизации.Остатки(
		|				&Момент,
		|				Организация В
		|						(ВЫБРАТЬ
		|							т.Организация
		|						ИЗ
		|							ДанныеКороба КАК т)
		|					И Склад В
		|						(ВЫБРАТЬ
		|							т1.Склад
		|						ИЗ
		|							ДанныеКороба КАК т1)
		|					И КМ В
		|						(ВЫБРАТЬ
		|							т2.КМАгрегат
		|						ИЗ
		|							ДанныеКороба КАК т2)) КАК гф_ДвижениеКодовМаркировкиОрганизацииОстатки
		|		ПО ДанныеКороба.Организация = гф_ДвижениеКодовМаркировкиОрганизацииОстатки.Организация
		|			И ДанныеКороба.Склад = гф_ДвижениеКодовМаркировкиОрганизацииОстатки.Склад
		|			И ДанныеКороба.КМАгрегат = гф_ДвижениеКодовМаркировкиОрганизацииОстатки.КМ
		|ГДЕ
		|	ЕСТЬNULL(гф_ДвижениеКодовМаркировкиОрганизацииОстатки.КоличествоОстаток, 0) - ДанныеКороба.Количество < 0";
		Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
		Запрос.УстановитьПараметр("Момент", Новый Граница(Источник.Дата, ВидГраницы.Исключая));
		ПакетРезультатов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
		
		РезультатКонтроль = ПакетРезультатов[3];
		Если Не РезультатКонтроль.Пустой() Тогда
			Шаблон = "По организации %1, по складу %2 - нет остатков для проведения разукомплектации: %3";
			ВыборкаКонтроль = РезультатКонтроль.Выбрать();
			Пока ВыборкаКонтроль.Следующий() Цикл
				ТекстСообщения = СтрШаблон(Шаблон, ВыборкаКонтроль["Организация"], ВыборкаКонтроль["Склад"], ВыборкаКонтроль["КМ"]);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
			КонецЦикла;
			Возврат;
		КонецЕсли;
		
		РезультатДвижения = ПакетРезультатов[2];
		Таблица = РезультатДвижения.Выгрузить();
		Движения.Загрузить(Таблица);
	Иначе
		// остальные движения с контролем остатков (стандартный алгоритм)
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Реализация.Дата КАК Период,
		|	Реализация.Ссылка КАК Регистратор,
		|	Реализация.Организация КАК Организация,
		|	Реализация.Контрагент КАК Контрагент,
		|	Реализация.Склад КАК Склад,
		|	Штрихкоды.ШтрихкодУпаковки КАК КМ,
		|	1 КАК Количество
		|ПОМЕСТИТЬ Данные
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК Реализация
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.ШтрихкодыУпаковок КАК Штрихкоды
		|		ПО (Штрихкоды.Ссылка = Реализация.Ссылка)
		|ГДЕ
		|	Реализация.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////1
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Данные.Период КАК Период,
		|	Данные.Регистратор КАК Регистратор,
		|	Данные.Организация КАК Организация,
		|	Данные.Склад КАК Склад,
		|	Данные.Контрагент КАК Контрагент,
		|	Данные.КМ КАК КМ,
		|	Данные.Количество КАК Количество
		|ПОМЕСТИТЬ ДанныеДляДвижений
		|ИЗ
		|	Данные КАК Данные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////2
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	ДанныеДляДвижений.Период КАК Период,
		|	ДанныеДляДвижений.Регистратор КАК Регистратор,
		|	ДанныеДляДвижений.Организация КАК Организация,
		|	ДанныеДляДвижений.Склад КАК Склад,
		|	ДанныеДляДвижений.КМ КАК КМ,
		|	ДанныеДляДвижений.Количество КАК Количество
		|ПОМЕСТИТЬ Движения
		|ИЗ
		|	ДанныеДляДвижений КАК ДанныеДляДвижений
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
		|	ДанныеДляДвижений.Период,
		|	ДанныеДляДвижений.Регистратор,
		|	ДанныеДляДвижений.Организация,
		|	ДанныеДляДвижений.Контрагент,
		|	ДанныеДляДвижений.КМ,
		|	ДанныеДляДвижений.Количество
		|ИЗ
		|	ДанныеДляДвижений КАК ДанныеДляДвижений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////3
		|ВЫБРАТЬ
		|	ДанныеДляДвижений.Организация КАК Организация,
		|	ДанныеДляДвижений.Склад КАК Склад,
		|	ДанныеДляДвижений.КМ КАК КМ,
		|	ЕСТЬNULL(Остатки.КоличествоОстаток, 0) - ДанныеДляДвижений.Количество КАК Нехватка
		|ИЗ
		|	ДанныеДляДвижений КАК ДанныеДляДвижений
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.гф_ДвижениеКодовМаркировкиОрганизации.Остатки(
		|				&Момент,
		|				Организация В
		|						(ВЫБРАТЬ
		|							т.Организация
		|						ИЗ
		|							ДанныеДляДвижений КАК т)
		|					И Склад В
		|						(ВЫБРАТЬ
		|							т1.Склад
		|						ИЗ
		|							ДанныеДляДвижений КАК т1)
		|					И КМ В
		|						(ВЫБРАТЬ
		|							т2.КМ
		|						ИЗ
		|							ДанныеДляДвижений КАК т2)) КАК Остатки
		|		ПО ДанныеДляДвижений.Организация = Остатки.Организация
		|			И ДанныеДляДвижений.Склад = Остатки.Склад
		|			И ДанныеДляДвижений.КМ = Остатки.КМ
		|ГДЕ
		|	ЕСТЬNULL(Остатки.КоличествоОстаток, 0) - ДанныеДляДвижений.Количество < 0";
		
		Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
		Запрос.УстановитьПараметр("Момент", Новый Граница(Источник.Дата, ВидГраницы.Исключая));
		ПакетРезультатов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
		
		РезультатКонтроль = ПакетРезультатов[3];
		Если Не РезультатКонтроль.Пустой() Тогда
			Шаблон = "По организации %1, по складу %2 - нет остатков по списываемому коду маркировки: %3";
			ВыборкаКонтроль = РезультатКонтроль.Выбрать();
			Пока ВыборкаКонтроль.Следующий() Цикл
				ТекстСообщения = СтрШаблон(Шаблон, ВыборкаКонтроль["Организация"], ВыборкаКонтроль["Склад"], ВыборкаКонтроль["КМ"]);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
			КонецЦикла;
			Возврат;
		КонецЕсли;
		
		РезультатДвижения = ПакетРезультатов[2];
		Таблица = РезультатДвижения.Выгрузить();
		Движения.Загрузить(Таблица);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
