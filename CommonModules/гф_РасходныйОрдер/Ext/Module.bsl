
#Область СлужебныйПрограммныйИнтерфейс

// #wortmann {
// #Автоматическое формирование документов
// описание вставки
// Галфинд Volkov 2022/08/23
// При изменении статуса в документе "Расходный ордер", выполняется содание и запись\проведение документа "РТиУ"
// Параметры:
//	Источник - ДокументСсылка.РасходныйОрдерНаТовары - Документ расходный ордер.
//  Отказ - Булево - Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то будет выполнен отказ от продолжения работы после выполнения проверки заполнения.
//
Процедура гф_ОтгрузкаУпаковочногоЛистаОбработкаУдаленияПроведения(Источник, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УпаковочныйЛист.гф_ТекущийОрдер КАК гф_ТекущийОрдер,
	|	УпаковочныйЛист.гф_Агрегация КАК гф_Агрегация,
	|	УпаковочныйЛист.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
	|ГДЕ
	|	УпаковочныйЛист.гф_ТекущийОрдер = &гф_ТекущийОрдер";
	
	Запрос.УстановитьПараметр("гф_ТекущийОрдер", Источник.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ВыборкаДетальныеЗаписи.гф_Агрегация <> Неопределено
			И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.гф_Агрегация) Тогда
			
			// ++ Галфинд ВолковЕВ 2024/03/19
			// Агрегация = ВыборкаДетальныеЗаписи.гф_Агрегация.ПолучитьОбъект();
			// Агрегация.гф_Автодействие = Неопределено;
			Попытка
				Агрегация = ВыборкаДетальныеЗаписи.гф_Агрегация.ПолучитьОбъект();
				//Агрегация.гф_Автодействие = Неопределено;
				Агрегация.гф_Автодействие = Перечисления.гф_АвтодействияКМ.ПустаяСсылка();
			Исключение
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Агрегацию в %1 не возможно определить для корректировки.
				| Необходимо проверить агрегацию находящуюся в упаковочном листе.'"), ВыборкаДетальныеЗаписи.Ссылка);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Отказ = Истина;
				Возврат;
			КонецПопытки;
			// -- Галфинд ВолковЕВ 2024/03/19
			
			Попытка
				Агрегация.Заблокировать();
			Исключение
				ТекстСообщения = СтрШаблон(НСтр("ru = '%1 находится в процессе редактирования и не может быть изменен.'"), Агрегация);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Отказ = Истина;
				Возврат;
			КонецПопытки;
			
			Попытка
				Агрегация.Записать();
			Исключение
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось внести изменения в элемент справочника ""Штрих-коды упаковок товаров"" ""%1"".'"),
					Агрегация);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Запись в элемент справочника ""Штрих-коды упаковок товаров""'"),
					УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Отказ = Истина;
				Возврат;
			КонецПопытки;
		КонецЕсли;
		
			УпаковочныйЛист = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			
			// ++ Галфинд ВолковЕВ 2024/03/19
			// УпаковочныйЛист.гф_ТекущийОрдер = Неопределено;
			УпаковочныйЛист.гф_ТекущийОрдер = Документы.РасходныйОрдерНаТовары.ПустаяСсылка();
			
			// Для Каждого СтрокаУпаковочныйЛистНоменклатура Из УпаковочныйЛист.Товары Цикл
			//	
			//	СтрокаУпаковочныйЛистНоменклатура.гф_КодСтроки = 0;
			//	СтрокаУпаковочныйЛистНоменклатура.гф_КодСтрокиДополнительныеСведения = "";
			//	
			// КонецЦикла;
			// Очистим колонку с кодом строки перед новым заполнением 
			ТабЗнач = УпаковочныйЛист.Товары.Выгрузить();
			ТабЗнач.ЗаполнитьЗначения(0, "гф_КодСтроки");
			ТабЗнач.ЗаполнитьЗначения("", "гф_КодСтрокиДополнительныеСведения");
			УпаковочныйЛист.Товары.Загрузить(ТабЗнач);
			// ++ Галфинд ВолковЕВ 2024/03/19
			
			Попытка
				УпаковочныйЛист.Заблокировать();
			Исключение
				ТекстСообщения = СтрШаблон(НСтр("ru = '%1 находится в процессе редактирования и не может быть изменен.'"), УпаковочныйЛист);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Отказ = Истина;
				Возврат;
			КонецПопытки;
			
			Попытка
				УпаковочныйЛист.Записать();
			Исключение
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось внести изменения в ""%1"".'"), УпаковочныйЛист);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Запись в ""Упаковочный лист""'"),
					УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Отказ = Истина;
				Возврат;
			КонецПопытки;	
			
		// КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

// #wortmann {
// #Автоматическое формирование документов
// описание вставки
// Галфинд Volkov 2022/08/23
// Процедура обновляет кеш ключевых реквизитов текущей строки товаров. По ключевым реквизитам осуществляется связь
//  между ТЧ серий и ТЧ товаров.
//
// Параметры:
//  ТекущаяСтрока			 - ДанныеФормыЭлементКоллекции - строка, по которой обновляется кеш.
//  КэшированныеЗначения	 - Структура - переменная модуля формы, в которой хранятся кешируемые значения
//  ПараметрыУказанияСерий	 - см. ПараметрыУказанияСерий
//  Копирование				 - Булево - признак, что кешированная строка скопирована (параметр события ПриНачалеРедактирования).
//
Процедура ОбновитьКешированныеЗначенияДляУчетаСерий(ТекущаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий,
	Копирование = Ложь) Экспорт
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;
	
	Если ТекущаяСтрока <> Неопределено
		И (Не Копирование
		Или ПараметрыУказанияСерий.ИмяТЧТовары = ПараметрыУказанияСерий.ИмяТЧСерии) Тогда
		
		КэшированныеЗначения.Вставить("Номенклатура", ТекущаяСтрока.Номенклатура);
		КэшированныеЗначения.Вставить("Характеристика", ТекущаяСтрока.Характеристика);
		
		Если ТекущаяСтрока.Свойство(ПараметрыУказанияСерий.ИмяПоляКоличество) Тогда
			КэшированныеЗначения.Вставить(ПараметрыУказанияСерий.ИмяПоляКоличество,
				ТекущаяСтрока[ПараметрыУказанияСерий.ИмяПоляКоличество]);
		КонецЕсли;
		
		Если ТекущаяСтрока.Свойство("Отменено") Тогда
			КэшированныеЗначения.Вставить("Отменено", ТекущаяСтрока.Отменено);
		КонецЕсли;
		
		Для Каждого СтрМас Из ПараметрыУказанияСерий.ПоляСвязи Цикл
			Если ТекущаяСтрока.Свойство(СтрМас) Тогда
				КэшированныеЗначения.Вставить(СтрМас, ТекущаяСтрока[СтрМас]);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрМас Из ПараметрыУказанияСерий.ИменаПолейДополнительные Цикл
			Если ТекущаяСтрока.Свойство(СтрМас) Тогда
				КэшированныеЗначения.Вставить(СтрМас, ТекущаяСтрока[СтрМас]);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		КэшированныеЗначения.Вставить("Номенклатура", Неопределено);
		КэшированныеЗначения.Вставить("Характеристика", Неопределено);
		КэшированныеЗначения.Вставить(ПараметрыУказанияСерий.ИмяПоляКоличество , 0);
		
		Если ПараметрыУказанияСерий.ЭтоЗаказ Тогда
			КэшированныеЗначения.Вставить("Отменено", Неопределено);
		КонецЕсли;
		
		Для Каждого СтрМас Из ПараметрыУказанияСерий.ПоляСвязи Цикл
			КэшированныеЗначения.Вставить(СтрМас, Неопределено);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// #wortmann {
// #Автоматическое формирование документов
// описание вставки
// Галфинд Volkov 2022/08/23
// Обработка строки табличной части - вызывается из клиентского общего модуля при необходимости выполнения на сервере.
//
// Параметры:
//  ТекущаяСтрока	  - Структура - данные обрабатываемой строки, содержит в том числе:
//  	* НомерСтроки - Число
//  СтруктураДействий - Структура - описывает действия, где Ключ - наименование действия, Значение - Структура - параметры действия, возможно передавать следующие поля:
//		* ПроверитьХарактеристикуПоВладельцу - СправочникСсылка.ХарактеристикиНоменклатуры
//		* ПроверитьЗаполнитьУпаковкуПоВладельцу - СправочникСсылка.УпаковкиЕдиницыИзмерения
//		* ПересчитатьКоличествоЕдиниц - Неопределено
//		* ПересчитатьКоличествоЕдиницСуффикс - Строка - Суффикс
//		* ПересчитатьКоличествоУпаковок - Неопределено
//		* ПересчитатьКоличествоУпаковокСуффикс - Строка - Суффикс
//		* ПересчитатьКоличествоУпаковокСуффиксИзОтклонения - Строка - Суффикс
//		* ПересчитатьВесОбъем - Строка - Суффикс
//		* ЗаполнитьЦенуПродажи - см. ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ
//		* ЗаполнитьПомещение - Структура:
//			** Склад - СправочникСсылка.Склады
//			** Номенклатура - СправочникСсылка.Номенклатура - (Необязательный)
//			** Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - (Необязательный)
//		* ЗаполнитьПродавца - Структура:
//			** Продавец - СправочникСсылка.Пользователи
//		* ПересчитатьСумму - Строка
//		* ПересчитатьСуммуСУчетомРучнойСкидки - Структура:
//			** Очищать - Булево
//			** ПересчитыватьСуммуРучнойСкидки - Булево
//			** ИмяКоличества - Строка
//		* ПересчитатьСуммуСУчетомАвтоматическойСкидки - Структура:
//			** Очищать - Булево
//		* ПересчитатьЦенуПоСумме - Строка
//		* ПересчитатьЦенуЗаУпаковку - Число
//		* ПересчитатьСуммуНДС - см. ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ
//		* ЗаполнитьСтавкуНДС - Структура:
//			** НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС
//			** Дата - Дата
//		* ОбработатьШтрихкоды - см. ШтрихкодированиеНоменклатурыКлиентСервер.ПараметрыОбработкиШтрихкодов
//		* ЗаполнитьНоменклатуруПоНоменклатуреПартнера - Неопределено
//		* ЗаполнитьНоменклатуруПартнераПоНоменклатуре - Неопределено
//		* ЗаполнитьФлагИзлишекПорча - Неопределено
//		* ЗаполнитьФлагРасхождение - Неопределено
//		* ПересчитатьКоличествоУпаковокОтклонение - Неопределено
//		* ОчиститьСуммуВзаиморасчетов - Неопределено
//		* ПересчитатьКоличествоНеОтгружать - Неопределено
//		* ЗаполнитьПризнакАдресногоХранения - Структура:
//			** Склад - СправочникСсылка.Склады
//			** Помещение - СправочникСсылка.СкладскиеПомещения
//			** Дата - Дата
//		* ЗаполнитьСтатьюАналитикуРасходовНоменклатуры - см. ДоходыИРасходыКлиентСервер.ВставитьДействиеЗаполнитьСтатьюАналитикуРасходовНоменклатуры.СтруктураДействий
//  КэшированныеЗначения - Структура - Сохраненные значения параметров, используемых при обработке.
//
Процедура ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		КэшированныеЗначения.ПравоРегистрацииШтрихкодовНоменклатурыДоступно = ШтрихкодированиеНоменклатурыСервер.ПравоРегистрацииШтрихкодовНоменклатурыДоступно();
	КонецЕсли;
	
	// vvv Галфинд \ Sakovich 25.04.2023
	// применимость к типовому релизу 2.5.11.96
	//ОбработкаТабличнойЧастиСерверЛокализация.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// ^^^ Галфинд \ Sakovich 25.04.2023 
	
	// ПроверитьАссортиментСтроки(                             										ТекущаяСтрока, СтруктураДействий);
	// ЗаполнитьНоменклатуруПоНоменклатуреПартнераВСтрокеТЧ( 										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// ЗаполнитьНоменклатуруПартнераПоНоменклатуреВСтрокеТЧ( 										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// ПроверитьСопоставленнуюНоменклатуруПартнераВСтрокеТЧ( 										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ(     										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// ПроверитьКорректностьЗаполнитьХарактеристикиИУпаковки(  										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// ПроверитьКорректностьЗаполнитьХарактеристикиКиЗ(												ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// ПроверитьЗаполнитьСкладВСтрокеТЧ(																ТекущаяСтрока, СтруктураДействий);
	// ++ НЕ УТКА
	// ПроверитьЗаполнитьСкладПроизводстваВСтрокеТЧ(										            ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// -- НЕ УТКА
	// ПроверитьЗаполнитьОбеспечениеВСтрокеТЧДокументаПродажи(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// ЗаполнитьОтгрузитьДляВариантаОформленияЗаказПлюсРеализация(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// ++ НЕ УТКА
	// ПроверитьЗаполнитьОбеспечениеВСтрокеТЧЭтапаПроизводства(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// -- НЕ УТКА

	// ++ НЕ УТ
	// ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьНаправлениеВыпуска(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПолучателяПоНаправлениюВыпуска(					ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// ЗаполнитьПризнакЦеховаяКладовая(                            									ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// -- НЕ УТ
	// ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоНеОтгружатьСтрокеТЧ(					ТекущаяСтрока, СтруктураДействий);
	// ЗаполнитьGTINВСтроке(                                                                           ТекущаяСтрока, СтруктураДействий);
	// ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокПоФактуВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокСуффиксИзОтклоненияВСтрокеТЧ(	ТекущаяСтрока, СтруктураДействий);
	// ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоЕдиницВСтрокеТЧ(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоПоРНПТВСтрокеТЧ(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоЕдиницСуффиксВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокВСтрокеТЧ(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокСуффиксВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоОтклонение(						    ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокПоВесу(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокПоОбъему(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьВесОбъемВСтрокеТЧ(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьВидЦеныВСтрокеТЧ(									ТекущаяСтрока, СтруктураДействий); 
	// ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуЗаУпаковкуВСтрокеТЧ(							ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуЗаказаЗаУпаковкуВСтрокеТЧ(					ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// ПроверитьЗаполнитьВидЦеныВСтрокеТЧ(                              								ТекущаяСтрока, СтруктураДействий); 
	// ЗаполнитьЦенуПродажиВСтрокеТЧ(                          										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// ЗаполнитьЦенуПродажиПоАссортиментуВСтрокеТЧ(            										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// ЗаполнитьЦенуЗакупкиВСтрокеТЧ(                          										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// ЗаполнитьУсловияПродажВСтрокеТЧ(                        										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// ЗаполнитьУсловияРозничныхПродажВСтрокеТЧ(               										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// ЗаполнитьУсловияЗакупокВСтрокеТЧ(                       										ТекущаяСтрока, СтруктураДействий);
	// ++ НЕ УТКА
	// ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьДатуПроизводства(                                  ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// УстановитьПризнакИспользованияПлановойСтоимостиВСтрокеТЧ(        								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// ПроверитьЗаполнитьЦенуВыпускаВСтрокеТЧ(        													ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// -- НЕ УТКА

	// ++ НЕ УТ
	// ЗаполнитьЦенуПередачиПродукцииДавальцуВСтрокеТЧ(        										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// -- НЕ УТ
	// СкорректироватьСтавкуНДСВСтрокеТЧ(                            									ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// ЗаполнитьСтавкуНДСВСтрокеТЧ(                            										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// ЗаполнитьКодТНВЭДПоНоменклатуреВСтрокеТЧ(               										ТекущаяСтрока, СтруктураДействий);
	ПересчитатьЦенуСНДС(                                    										ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтавкуНДСВозвратнойТарыВСтрокеТЧ(					ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуРучнойСкидкиВСтрокеТЧ(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуАвтоматическойСкидкиВСтрокеТЧ(
		ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьПроцентРучнойСкидкиВСтрокеТЧ(					ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// ++ НЕ УТКА
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуУслугиВСтрокеТЧЗаказДавальца(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуВСтрокеТЧЗаказДавальца(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// -- НЕ УТКА
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуВСтрокеТЧ(									ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСуффиксВСтрокеТЧ(							ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуВСтрокеТЧРасхождения(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуСкидкуПоСуммеВПродажахВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуСкидкуПоСуммеВЗакупкахВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуПоСуммеВСтрокеТЧ(							ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// ++ НЕ УТКА
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуПоСуммеВСтрокеТЧЗаказДавальца(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// -- НЕ УТКА
	ПересчитатьСуммуПродажиПоСуммеСНДС(                     										ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуПродажиПоСуммеПродажиВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСУчетомАвтоматическойСкидкиВСтрокеТЧ(		ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСУчетомРучнойСкидкиВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСУчетомСкидкиБонуснымиБалламиВСтрокеТЧ(		ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуСУчетомПогрешностиОкругленияВСтрокеТЧ(  										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуНДСВСтрокеТЧ(                           										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуНДССуффиксВСтрокеТЧ(															ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСНДСВСтрокеТЧ(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСНДССуффиксВСтрокеТЧ(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуБезНДСВСтрокеТЧ(							ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуРеглВСтрокеТЧ(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуПРВСтрокеТЧ(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуНУВСтрокеТЧ(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуВРВСтрокеТЧ(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьНДСРеглВСтрокеТЧ(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуПродажиВСтрокеТЧ(							ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуПродажиНДСВСтрокеТЧ(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ОчиститьСуммуВознагражденияВСтрокеТЧ(                   	ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.УстановитьАктивностьСтроки(                             	ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// //++ НЕ УТ
	// ОбработкаТабличнойЧастиКлиентСервер.ПроверитьЗаполнитьСпецификацию(                             ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// ПроверитьЗаполнитьДолюСтоимости(                                                                ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьДолюСтоимостиВСтрокеТЧ(                          ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьТипМестаХраненияПоУмолчанию(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// -- НЕ УТ
	// ПроверитьПолучитьВариантКомплектации(                   										ТекущаяСтрока, СтруктураДействий);
	// ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьФлагиРасхождениеИИзлишекПорча(                 	ТекущаяСтрока, СтруктураДействий);
	// ОбработкаТабличнойЧастиКлиентСервер.ОчиститьСуммуВзаиморасчетовВСтрокеТЧ(                   	ТекущаяСтрока, СтруктураДействий);
	// ОбработкаТабличнойЧастиКлиентСервер.ОчиститьАвтоматическуюСкидкуВСтрокеТЧ(                  	ТекущаяСтрока, СтруктураДействий);
	// ЗаполнитьСодержаниеУслуги(                              										ТекущаяСтрока, СтруктураДействий);
	// ЗаполнитьСтатьюАналитикуРасходовНоменклатуры(            										ТекущаяСтрока, СтруктураДействий);
	// ОчиститьСтатьюАналитикуРасходов(            													ТекущаяСтрока, СтруктураДействий);
	// ИнициализироватьСтатьюИАналитикуПослеДобавленияСтроки(                                          ТекущаяСтрока, СтруктураДействий);
	// ЗаполнитьНастройкуСчетовУчетаПоУмолчанию(                                                       ТекущаяСтрока, СтруктураДействий);
	// ЗаполнитьПредставлениеНастройкиСчетовУчета(                                                     ТекущаяСтрока, СтруктураДействий);
	// ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПартнера(                                      	ТекущаяСтрока, СтруктураДействий);
	// ЗаполнитьПомещение(                                     										ТекущаяСтрока, СтруктураДействий);
	// ЗаполнитьПродавца(                                      										ТекущаяСтрока, СтруктураДействий);
	// ЗаполнитьУчетноеКоличествоНоменклатуры(                 										ТекущаяСтрока, СтруктураДействий);
	// ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно(										ТекущаяСтрока, СтруктураДействий);
	// ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакБезВозвратнойТары(	                     	ТекущаяСтрока, СтруктураДействий);
	// ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакОтмененоБезВозвратнойТары(              	ТекущаяСтрока, СтруктураДействий);
	// ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакАктивностьБезВозвратнойТары(            	ТекущаяСтрока, СтруктураДействий);
	// ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьДубликатыЗависимыхРеквизитов(                  	ТекущаяСтрока, СтруктураДействий);
	// ПроверитьСериюРассчитатьСтатус(                         										ТекущаяСтрока, СтруктураДействий);
	// ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСверхЗаказаВСтрокеТЧ(                   	ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// УстановитьПризнакДляЗаполненияТекстовогоОписания(       										ТекущаяСтрока, СтруктураДействий);
	// ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьВариантОтраженияКорректировкиРеализации(       	ТекущаяСтрока, СтруктураДействий);
	// ОбработкаТабличнойЧастиКлиентСервер.НоменклатураПриИзмененииПереопределяемый(               	ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// ОбработкаТабличнойЧастиКлиентСервер.ХарактеристикаПриИзмененииПереопределяемый(             	ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// ЗаполнитьПризнакПринимаетсяКНУ(           														ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	// ЗаполнитьПризнакАдресногоХранения(                     											ТекущаяСтрока, СтруктураДействий);
	// ЗаполнитьПризнакИспользованияПомещений(															ТекущаяСтрока, СтруктураДействий);
	// ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьРасхожденияПослеОтгрузки(                          ТекущаяСтрока, СтруктураДействий);
	// ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьРасхожденияПослеПриемки(                           ТекущаяСтрока, СтруктураДействий);
	// ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьРасхождения(                                       ТекущаяСтрока, СтруктураДействий);
	// ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакНаличияКомментарияПриемка(                  ТекущаяСтрока, СтруктураДействий);
	// ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакНаличияКомментарияОтгрузка(                 ТекущаяСтрока, СтруктураДействий);
	// ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакНаличияКомментария(							ТекущаяСтрока, СтруктураДействий);
	// ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакТоварногоМестаТребуетсяОбработка(			ТекущаяСтрока, СтруктураДействий);
	// ЗаполнитьПризнакДвиженияПоСкладскимРегистрам(ТекущаяСтрока, СтруктураДействий);	
//	ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения(ТекущаяСтрока, СтруктураДействий);
//	ПриИзмененииТипаНоменклатуры(ТекущаяСтрока, СтруктураДействий);
//	ЗаполнитьСлужебныеРеквизитыПоНазначениюВСтрокеТЧ(           									ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
//	ОбработкаТабличнойЧастиКлиентСервер.ПроверитьЗаполнитьНазначениеВСтрокеТЧ(                  	ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
//	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьФлагОбособленноПоНазначению(                       ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
//	//++ НЕ УТКА
//	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства(           ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
//	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьНазначениеВЭтапеПроизводства(                      ТекущаяСтрока, СтруктураДействий);
//	//-- НЕ УТКА
//	ОбработкаТабличнойЧастиКлиентСервер.ПриИзмененииНазначенияВСтрокеТЧ(                            ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
//	ЗаполнитьСтрануПроисхожденияДляНомераГТД(                                                       ТекущаяСтрока, СтруктураДействий);
//	ЗаполнитьСтрануПроисхожденияНоменклатуры(                                                       ТекущаяСтрока, СтруктураДействий);
//	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСпособОпределенияСебестоимости(                    ТекущаяСтрока, СтруктураДействий);
//	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСпособОпределенияСебестоимостиСтрокой(             ТекущаяСтрока, СтруктураДействий);
// //++ НЕ УТКА
//	ОбработкаТабличнойЧастиКлиентСервер.ПроверитьЗаполнитьКлючСвязиСпецификации(                    ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
//	ЗаполнитьНазначениеМатериалыВСтрокеСверхЗаказа(                                                 ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
//	ЗаполнитьПризнакДоступноОформлениеОтчетаДавальцу(              									ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
// //-- НЕ УТКА
//	ЗаполнитьНаправлениеДеятельности(																ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
//	ЗаполнитьПодразделениеВСтрокеТЧ(																ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
//	ПроверитьНеобходимостьОбновленияКолонкиДоступно(ТекущаяСтрока, СтруктураДействий);
//	ЗаполнитьКолонкуДоступно(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
//	ОбновитьКэшНоменклатура(ТекущаяСтрока, СтруктураДействий);
//	ЗаполнитьДанныеПоДокументуПриобретенияВОтчетеКомитентуОЗакупках(								ТекущаяСтрока, СтруктураДействий);
//	ЗаполнитьПризнакРасхождениеЗаказ(                                                               ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
//	
//	ЗаполнитьПризнакиКатегорииЭксплуатации(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
//	
//	//++ НЕ УТ
//	ЗаполнитьПартиюТМЦВЭксплуатации(ТекущаяСтрока, СтруктураДействий);
//	//-- НЕ УТ
	
КонецПроцедуры

// #wortmann {
// #Автоматическое формирование документов
// описание вставки
// Галфинд Volkov 2022/08/23
// При изменении статуса в документе "Расходный ордер", выполняется содание и запись (проведение) документа "РТиУ"
// Параметры:
//	Источник - ДокументСсылка.РасходныйОрдерНаТовары - Документ расходный ордер.
//  Отказ - Булево - Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то будет выполнен отказ от продолжения работы после выполнения проверки заполнения.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура гф_РасходныйОрдерУдалениеОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Для Каждого Строка Из Источник.ТоварыПоРаспоряжениям Цикл
		ЗаказКлиента = Строка.Распоряжение;
		Прервать
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслуг.Проведен КАК Проведен,
	|	РеализацияТоваровУслуг.ЗаказКлиента КАК ЗаказКлиента,
	|	РеализацияТоваровУслуг.гф_РасходныйОрдер КАК гф_РасходныйОрдер
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.гф_РасходныйОрдер = &гф_РасходныйОрдер";
	
	Запрос.УстановитьПараметр("гф_РасходныйОрдер", Источник.Ссылка);
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ДокументРеализация = Неопределено;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокументРеализация = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Если ДокументРеализация <> Неопределено Тогда
		ДокОбъект = ДокументРеализация.Получитьобъект();
		ДокОбъект.гф_РасходныйОрдер = Неопределено;
		ДокОбъект.ПометкаУдаления = Истина;
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
		
КонецПроцедуры

// #wortmann {
// #Автоматическое формирование документов
// описание вставки
// Галфинд Volkov 2022/08/23
//
// При изменении статуса в документе "Расходный ордер", выполняется содание и запись\проведение документа "РТиУ"
// Параметры:
//	Источник - ДокументСсылка.РасходныйОрдерНаТовары - Документ расходный ордер.
//  Отказ - Булево - Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то будет выполнен отказ от продолжения работы после выполнения проверки заполнения.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура гф_РасходныйОрдерИзменениеСтатусаОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Если Источник.СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаКлиенту
		И (Источник.Статус = Перечисления.СтатусыРасходныхОрдеров.Проверен
		Или Источник.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтгрузке
		Или Источник.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен) Тогда
		
		гф_РасходныйОрдерОтгрузкаРеализацией(Источник, Отказ, РежимПроведения);
		
		// ++ Галфинд ВолковЕВ 2024/03/19
		Если Не Отказ
			И Источник.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтгрузке Тогда
			ВыполнитьКорректировкуЗаказаНеОтгружатьПоРасходномуОрдеру(Источник);
		КонецЕсли;
		// -- Галфинд ВолковЕВ 2024/03/19
		
	ИначеЕсли Источник.СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаПоПеремещению
		И (Источник.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен
		Или Источник.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтгрузке)
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник.Получатель, "гф_АгентскийСклад")
		И Источник.Получатель.гф_АгентскийСклад Тогда
		
		гф_РасходныйОрдерОтгрузкаПеремещением(Источник, Отказ, РежимПроведения);
		
	ИначеЕсли Источник.СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаНаВнутренниеНужды
		И Источник.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтгрузке Тогда
		
		гф_РасходныйОрдерОтгрузкаНаВнутренниеНужды(Источник, Отказ, РежимПроведения);
		
	// ++ Галфинд ВолковЕВ 2024/03/19
	ИначеЕсли Источник.СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаКлиенту
		И (Источник.Статус = Перечисления.СтатусыРасходныхОрдеров.Отменен) Тогда	
		
		Если Не Отказ Тогда
			
			ВыполнитьКорректировкуРеализацияСчетФактураПоРасходномуОрдеру(Источник);
			
			ВыполнитьКорректировкуЗаказаНеОтгружатьПоРасходномуОрдеру(Источник);
			
		КонецЕсли;
	// -- Галфинд ВолковЕВ 2024/03/19	
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// #wortmann {
// #Автоматическое формирование документов
// описание вставки
// Галфинд Volkov 2022/08/23
// 
// Осуществляет заполненнение данных документа.
// Параметры:
//   Источник - ДокументОбъект - Обрабатываемый объект.
//   Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//   РежимЗаписи - РежимЗаписиДокумента - В параметр передается текущий режим записи документа.
//					Позволяет определить в теле процедуры режим записи.
//   РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура гф_РасходныйОрдерНаТоварыПередЗаписьюПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		ВыборкаДетальныеЗаписи = ПолучитьДанныеПоДокументуКорректировкаНазначенияТоваров(Источник.Ссылка);
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Документ = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			
			Если Источник.ПометкаУдаления Тогда
				// Добавляем свойство для возможности провести документ при записи
				Документ.ДополнительныеСвойства.Вставить("гф_ДокументОснование", Истина);
				Документ.УстановитьПометкуУдаления(Истина);
			Иначе
				// Добавляем свойство для возможности провести документ при записи
				Документ.ДополнительныеСвойства.Вставить("гф_ДокументОснование", Истина);
				Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
				
		КонецЦикла;
		
		ВыборкаДетальныеЗаписи = ПолучитьДанныеПоДокументуПеремещениеТоваров(Источник.Ссылка);
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Документ = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			
			Если Источник.ПометкаУдаления Тогда
				// Добавляем свойство для возможности провести документ при записи
				Документ.ДополнительныеСвойства.Вставить("гф_ДокументОснование", Истина);
				Документ.УстановитьПометкуУдаления(Истина);
			Иначе
				// Добавляем свойство для возможности провести документ при записи
				Документ.ДополнительныеСвойства.Вставить("гф_ДокументОснование", Истина);
				Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Запись И Источник.ПометкаУдаления Тогда
		
		ВыборкаДетальныеЗаписи = ПолучитьДанныеПоДокументуКорректировкаНазначенияТоваров(Источник.Ссылка);
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Документ = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			// Добавляем свойство для возможности провести документ при записи
			Документ.ДополнительныеСвойства.Вставить("гф_ДокументОснование", Истина);
			Документ.УстановитьПометкуУдаления(Истина);
			
		КонецЦикла;
		
		ВыборкаДетальныеЗаписи = ПолучитьДанныеПоДокументуПеремещениеТоваров(Источник.Ссылка);
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Документ = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			// Добавляем свойство для возможности провести документ при записи
			Документ.ДополнительныеСвойства.Вставить("гф_ДокументОснование", Истина);
			Документ.УстановитьПометкуУдаления(Истина);
			
		КонецЦикла;
		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Запись И НЕ Источник.ПометкаУдаления Тогда
		
		ВыборкаДетальныеЗаписи = ПолучитьДанныеПоДокументуКорректировкаНазначенияТоваров(Источник.Ссылка);
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Документ = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			// Добавляем свойство для возможности провести документ при записи
			Документ.ДополнительныеСвойства.Вставить("гф_ДокументОснование", Истина);
			Документ.УстановитьПометкуУдаления(Ложь);
			
		КонецЦикла;
		
		ВыборкаДетальныеЗаписи = ПолучитьДанныеПоДокументуПеремещениеТоваров(Источник.Ссылка);
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Документ = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			// Добавляем свойство для возможности провести документ при записи
			Документ.ДополнительныеСвойства.Вставить("гф_ДокументОснование", Истина);
			Документ.УстановитьПометкуУдаления(Ложь);
			
		КонецЦикла;
		
	Иначе
		Возврат;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура гф_РасходныйОрдерОтгрузкаРеализацией(Источник, Отказ, РежимПроведения)
	
	// ++ Галфинд Волков 06.03.2023 код ниже нужно выполнять в любом случае, ниже добавлены/есть условия по дополнительным свойствам
	// // vvv Галфинд \ Sakovich 02.03.2023
	// ДопСвойствоЗаказ = Неопределено;
	// Источник.ДополнительныеСвойства.Свойство("гф_Заказ", ДопСвойствоЗаказ);
	// Если ДопСвойствоЗаказ = Неопределено Тогда
	//	Возврат;
	// КонецЕсли;
	// // ^^^ Галфинд \ Sakovich 02.03.2023
	// -- Галфинд Волков 06.03.2023
	
	// Если документ не удовлетворяет условиям, то не проверяем возможность его записи
	// ЗаписатьДокумент = Ложь;
	СкладскаяОперация = Источник.СкладскаяОперация;
	
	УпаковочныеЛисты = Новый СписокЗначений;
	ЕстьУпаковочныйЛист = Ложь;
	
	Для Каждого Строка Из Источник.ОтгружаемыеТовары Цикл
		
		Если ЗначениеЗаполнено(Строка.УпаковочныйЛист) Тогда
			УпаковочныеЛисты.Добавить(Строка.УпаковочныйЛист, "УпаковочныйЛист");
			ЕстьУпаковочныйЛист = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// Используется для отгрузки не коробной продукции
	МассивЗаказов = Новый Массив;
	
	ТипДокЗаказКлиента = Ложь;
	
	Для Каждого Строка Из Источник.ТоварыПоРаспоряжениям Цикл
		Если Не ТипЗнч(Строка.Распоряжение) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			
			ТекстСообщения = СтрШаблон(НСтр("ru = '""%1"" В табличной части есть распоряжения по типу документа (не заказ клиента) не подходящие для отгрузки реализацией'"), Источник);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ТипДокЗаказКлиента = Ложь;	
			Прервать;
		КонецЕсли;
		
		Если Не ЕстьУпаковочныйЛист Тогда
			МассивЗаказов.Добавить(Строка.Распоряжение);
		КонецЕсли;
		
		ЗаказКлиента = Источник.ТоварыПоРаспоряжениям[0].Распоряжение;
		ТипДокЗаказКлиента = Истина;
	КонецЦикла;
	
	Если ТипДокЗаказКлиента Тогда
		
		ДокСсылкаОснование = Неопределено;
		
		ДокСсылкаОснование = ПолучитьДанныеПоДокументуРеализацияТоваровИУслуг(Источник);
		
		Если ДокСсылкаОснование <> Неопределено Тогда
			
			ДокОбъект = ДокСсылкаОснование.Получитьобъект();
			ЗаблокироватьДокумент(ДокОбъект);
			ПроверитьПометкуУдаленияИСнятьПометкуУдаления(ДокОбъект);
			
			Если ДокОбъект.Ссылка.Проведен И Не Источник.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен Тогда
				ПроверитьПроведениеИОтменитьПроведение(ДокОбъект);
			КонецЕсли;
			
			Если ДокОбъект.Ссылка.Проведен И Источник.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен Тогда
			
				// vvv Галфинд \ Sakovich 25.01.2024
				// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811eebaf6aa3e4284
				// Необходимо исключить проведение и перепроведение РТУ при проведении РО в статус Отгружен
				//ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
				//
				//ТекстСообщения = СтрШаблон(НСтр("ru = 'Перепроведен документ ""%1"" с актуальной датой отгрузки.'"), ДокСсылкаОснование);
				//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				// ^^^ Галфинд \ Sakovich 25.01.2024
				Возврат;
				
			ИначеЕсли Источник.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен Тогда	
				
				// vvv Галфинд \ Sakovich 25.01.2024
				// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811eebaf6aa3e4284
				//Необходимо исключить проведение и перепроведение РТУ при проведении РО в статус Отгружен
				//ДокОбъект.Дата = ТекущаяДатаСеанса();
				//
				//ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
				//
				//ТекстСообщения = СтрШаблон(НСтр("ru = 'Перепроведен документ ""%1"" с актуальной датой отгрузки.'"), ДокСсылкаОснование);
				//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				// ^^^ Галфинд \ Sakovich 25.01.2024
				Возврат;
				
			КонецЕсли;
			
		Иначе
			ДокОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
			ДокОбъект.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
			// Чтобы Автор в новом документе не перезаписывался типовым механизмом процедуры "УстановитьАвтораОбъектаПередЗаписью"
			// в общем модуле "ЗаполнениеОбъектовПоСтатистике", устанавливаем загрузку "Истина" для возврата из процедуры
			ДокОбъект.ДополнительныеСвойства.Вставить("гф_НеИспользоватьПерезаписьАвтора", Истина);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДокОбъект, ЗаказКлиента, , "Номер, Проведен, Автор, Дата");
		
		// ++ Галфинд ВолковЕВ 2024/02/07 Не менять дату, если уже сформирована счет-фактура.
		// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811eec506f07f91b3
		// Если Не ЗначениеЗаполнено(ДокОбъект.Дата) Или Источник.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтгрузке Тогда
		// 	ДокОбъект.Дата = ТекущаяДатаСеанса();
		// КонецЕсли;
		Если Не ЗначениеЗаполнено(ДокОбъект.Дата) Тогда
			
			ДокОбъект.Дата = ТекущаяДатаСеанса();
			
		ИначеЕсли Источник.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтгрузке Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	СчетФактураВыданный.Ссылка КАК Ссылка
				|ИЗ
				|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
				|ГДЕ
				|	СчетФактураВыданный.ДокументОснование = &ДокументОснование";
				
				Запрос.УстановитьПараметр("ДокументОснование", ДокОбъект.Ссылка);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Если ВыборкаДетальныеЗаписи.Количество() = 0 Тогда
					ДокОбъект.Дата = ТекущаяДатаСеанса();
				КонецЕсли;
			
		КонецЕсли;
		 // -- Галфинд ВолковЕВ 2024/02/07
		 
		ДокОбъект.РеализацияПоЗаказам 			= Истина;
		ДокОбъект.гф_РасходныйОрдер 			= Источник.Ссылка;
		ДокОбъект.ЗаказКлиента 					= ЗаказКлиента;
		ДокОбъект.ВариантОформленияПродажи 		= Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
		ДокОбъект.КурсЗнаменатель 				= 1;
		ДокОбъект.КурсЧислитель 				= 1;
		ДокОбъект.Статус 						= Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
		ДокОбъект.Согласован 					= Истина;
		ДокОбъект.СуммаВзаиморасчетов 			= ДокОбъект.СуммаДокумента;
		ДокОбъект.ВалютаВзаиморасчетов 			= ДокОбъект.Валюта;
		
		// ++ Галфинд ВолковЕВ 2024/03/18
		Если Значениезаполнено(ЗаказКлиента.Договор) И Значениезаполнено(ЗаказКлиента.Договор.НалогообложениеНДС) Тогда
			ДокОбъект.НалогообложениеНДС = ЗаказКлиента.Договор.НалогообложениеНДС;
		КонецЕсли;
		// -- Галфинд ВолковЕВ 2024/03/18
		
		ДокОбъект.Товары.Очистить();
		ДокОбъект.гф_ТоварыВКоробах.Очистить();
		ДокОбъект.ВидыЗапасов.Очистить();
		ДокОбъект.ШтрихкодыУпаковок.Очистить();
		//++ Галфинд ЕсиповАВ 21.03.2023 Перезапись автора документа
		ДокОбъект.Автор = Источник.Ответственный;
		//-- Галфинд ЕсиповАВ 21.03.2023
		
		// Заполнение табличной части документа в зависимости от вида отгрузки, в коробах или парах (штучный товар)
		Если ЕстьУпаковочныйЛист Тогда
			// vvv Галфинд \ Sakovich 01.02.2024
			// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811eec0f7f83d91b1
			Если Источник.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтгрузке
				Или Источник.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен Тогда // на всякий случай еще раз проверим статус
				УпаковочныеЛисты.Очистить();
				Для Каждого Строка Из Источник.ОтгружаемыеТовары Цикл
					Если ЗначениеЗаполнено(Строка.УпаковочныйЛист) И Строка.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить Тогда
						УпаковочныеЛисты.Добавить(Строка.УпаковочныйЛист, "УпаковочныйЛист");
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			// ^^^ Галфинд \ Sakovich 01.02.2024
			ЗаполнитьДанныеПоУпаковочнымЛистамРеализация(Источник, ДокОбъект, УпаковочныеЛисты, СкладскаяОперация, Источник.Статус);
		Иначе
			ЗаполнитьДанныеПоНоменклатуреРеализация(Источник, ДокОбъект, МассивЗаказов);
		КонецЕсли;
		
		НаличиеСтрокиНеОтгружать = Источник.ОтгружаемыеТовары.НайтиСтроки(Новый Структура("Действие", Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.НеОтгружать));
		
		Если НаличиеСтрокиНеОтгружать.Количество() > 0 Тогда
			ДокОбъект.Комментарий = ДокОбъект.Комментарий + " Отгрузка неполная.";
		КонецЕсли;
		
		ДокументЗаблокирован = Ложь;
		
		Если Источник.Статус = Перечисления.СтатусыРасходныхОрдеров.Проверен Тогда
			
			Если ДокОбъект.ДополнительныеСвойства.Свойство("ЭтоНовый") Или ДокОбъект.Заблокирован() Тогда
				ЗаписатьПровестиОтменитьПроведениеДокумента(ДокОбъект, РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
			// Отправить письмо на почту
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Создан ЧЕРНОВИК ""Планируемая отгрузка"" по реализации ""%1"" от ""%2"".
			|Финальная версия документов будет выслана посредством ЭДО по факту сборки товаров на складе!'"), ДокОбъект.Номер, ДокОбъект.Дата);
			ОтправитьПисьмо(ДокОбъект, ТекстСообщения, Ложь);
			
		ИначеЕсли Источник.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтгрузке
			// vvv Галфинд \ Sakovich 25.01.2024
			// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811eebaf6aa3e4284
			// Необходимо исключить проведение и перепроведение РТУ при проведении РО в статус Отгружен
			//Или Источник.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен
			// ^^^ Галфинд \ Sakovich 25.01.2024
			Тогда
			
			Если ДокОбъект.ДополнительныеСвойства.Свойство("ЭтоНовый") Или ДокОбъект.Заблокирован() Тогда
				ЗаписатьПровестиОтменитьПроведениеДокумента(ДокОбъект, РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			
			// Запускает распределение запасов после проведения
			ОбеспечениеВДокументахСервер.ПроверитьЗапуститьФоновоеЗаданиеРаспределенияЗапасов();
			
			// Отправить письмо на почту
			// СадомцевСА 07.12.2023 Перенес код "требуется/НЕ требуется создание Маркировки товаров ИСМП" в общий модуль
			// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee92d1eb947016
			//// Галфинд СадомцевСА 04.07.2023 Добавил условие для отправки письма: если НЕ требуется создание Маркировки товаров ИСМП
			//// Документ требуется создавать только если склад отгрузки в РТУ имеет признак "Товары в коробах"=Да,
			//// а Договор в РТУ имеет признак "Отгрузка кодов маркировки парами" =Нет.
			////e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee166b434dc8ce
			//флТоварыВКоробах = УправлениеСвойствами.ЗначениеСвойства(ДокОбъект.Склад, "гф_СкладыТоварыВКоробах"); 
			//флОтгрузкаПарами = УправлениеСвойствами.ЗначениеСвойства(ДокОбъект.Договор, "гф_ДоговорыКонтрагентовОтгрузкаКодовМаркировкиПарами"); 
			//Если Не ЗначениеЗаполнено(флТоварыВКоробах)
			//	ИЛИ ЗначениеЗаполнено(флОтгрузкаПарами) Тогда
			флСоздатьМаркировкаТоваровИСМП = гф_РеализацияТоваровУслуг.флСоздатьМаркировкаТоваровИСМП(ДокОбъект.Склад, ДокОбъект.Договор);
			Если флСоздатьМаркировкаТоваровИСМП = Ложь Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Документы по отгрузке ""%1"", ""%2"" готовы к выгрузке'"), ДокОбъект.Контрагент, ДокОбъект.Номер);
				// Галфинд СадомцевСА 07.12.2023 Изменил текст сообщения
				// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee92d1eb947016
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Документы по отгрузке клиенту ""%1"", № ""%2"" готовы к выгрузке по ЭДО'"), ДокОбъект.Контрагент, ДокОбъект.Номер);
				ОтправитьПисьмо(ДокОбъект, ТекстСообщения, Истина);
			КонецЕсли;
			
			//++ Галфинд ЕсиповАВ 20.03.2023 Заполнение СФ при статусе Ро КОтгрузке
			гф_ЗаполнитьСчетФактуруПоРТУ(Источник, ДокОбъект);
			//-- Галфинд ЕсиповАВ 20.03.2023
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура гф_ЗаполнитьСчетФактуруПоРТУ(Источник, ДокОбъект)
	
	Если Источник.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтгрузке Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|СчетФактураВыданный.Ссылка КАК Ссылка,
		|СчетФактураВыданный.Проведен КАК Проведен,
		|СчетФактураВыданный.ДокументОснование КАК ДокументОснование
		|ИЗ
		|Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|СчетФактураВыданный.ДокументОснование = &ДокументОснование";
		
		Запрос.УстановитьПараметр("ДокументОснование", ДокОбъект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ДокументОснование = Неопределено;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ДокументОснование = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
		
		Если ДокументОснование <> Неопределено Тогда
			ДокОбъектСФ = ДокументОснование.Получитьобъект();
			
			Если ДокОбъектСФ.ПометкаУдаления Тогда
				ДокОбъектСФ.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			
			Если Источник.Статус <> Перечисления.СтатусыРасходныхОрдеров.КОтгрузке Тогда
				
				ДокОбъектСФ.Записать(РежимЗаписиДокумента.Проведение);
				
				Возврат;
			КонецЕсли;
		Иначе
			ДокОбъектСФ = Документы.СчетФактураВыданный.СоздатьДокумент();
			
		КонецЕсли;
		
		// ++ Галфинд ЕсиповАВ 04.05.2023
		// ДокОбъектСФ = Документы.СчетФактураВыданный.СоздатьДокумент();
		ДокОбъектСФ.ДокументОснование = ДокОбъект.Ссылка;
		// -- Галфинд ЕсиповАВ 04.05.2023
		ДокОбъектСФ.Дата = ДокОбъект.Дата;
		ДокОбъектСФ.Контрагент = ДокОбъект.Контрагент;
		ДокОбъектСФ.Организация = ДокОбъект.Организация;
		ДокОбъектСФ.Валюта = ДокОбъект.Валюта;
		ДокОбъектСФ.ИННКонтрагента = ДокОбъект.Контрагент.ИНН;
		ДокОбъектСФ.КППКонтрагента = ДокОбъект.Контрагент.КПП;
		ДокОбъектСФ.ИдентификаторПлатежа = ДокОбъект.ИдентификаторПлатежа;
		ДокОбъектСФ.Автор = ДокОбъект.Автор;
		ДокОбъектСФ.Ответственный = ДокОбъект.Автор;
		// ++ Галфинд ЕсиповАВ 04.05.2023
		ДокОбъектСФ.Договор = ДокОбъект.Договор;
		ДокОбъектСФ.КППКонтрагента = ДокОбъект.Контрагент.КПП;
		// ДокОбъектСФ.КодВидаОперации
		// ДокОбъектСФ.КодВидаОперацииНаУменьшение
		ДокОбъектСФ.Партнер = ДокОбъект.Партнер;
		ДокОбъектСФ.Склад = ДокОбъект.Склад;
		//++ Галфинд ЕсиповАВ 12.19.2023
		ДокОбъектСФ.Подразделение = ДокОбъект.Подразделение;
		ДокОбъектСФ.КодВидаОперации = "01";
		ДокОбъектСФ.ДатаВыставления = ДокОбъект.Дата;
		//-- Галфинд ЕсиповАВ 12.19.2023
		НоваяСтрока = ДокОбъектСФ.ДокументыОснования.Добавить();
		НоваяСтрока.ДокументОснование = ДокОбъект.Ссылка;
		// ++ Галфинд ЕсиповАВ 04.05.2023
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		
		"ВЫБРАТЬ
		|ОтветственныеЛицаОрганизаций.Владелец КАК Владелец,
		|ОтветственныеЛицаОрганизаций.Ссылка КАК Ссылка,
		|ОтветственныеЛицаОрганизаций.ОтветственноеЛицо КАК ОтветственноеЛицо,
		|ОтветственныеЛицаОрганизаций.Наименование КАК Наименование
		|ИЗ
		|Справочник.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаОрганизаций
		|ГДЕ
		|ОтветственныеЛицаОрганизаций.Владелец = &ВладелецОрганизация";
		
		Запрос.УстановитьПараметр("ВладелецОрганизация", ДокОбъект.Организация);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаОрганизации = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаОрганизации.Следующий() Цикл
			ОтветственныеЛица = ВыборкаОрганизации.Ссылка;
			Если ВыборкаОрганизации.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер Тогда
				ДокОбъектСФ.ГлавныйБухгалтер = ОтветственныеЛица;
			КонецЕсли;
			Если ВыборкаОрганизации.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда
				ДокОбъектСФ.Руководитель = ОтветственныеЛица;
			КонецЕсли; 
		КонецЦикла;
		// ++ Галфинд ЕсиповАВ 04.05.2023 Отладка
		//ДокОбъектСФ.Записать(РежимЗаписиДокумента.Проведение);
		СФПровести = Истина;
		Если СФПровести Тогда
			ДокОбъектСФ.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ДокОбъектСФ.Записать(РежимЗаписиДокумента.Запись); 
		КонецЕсли;
		//Ключ = Новый Структура("Ключ", ДокОбъект.Ссылка);
		//Форма = ПолучитьФорму("Документы.РеализацияТоваровУслуг.ФормаОбъекта", Ключ);
		//ПараметрыРегистрации = УчетНДСУПКлиентСервер.ПараметрыРегистрацииСчетовФактурВыданных();
		//
		//ПараметрыРегистрации.Ссылка					= ДокОбъект.Ссылка;
		//ПараметрыРегистрации.Дата					= ДокОбъект.Дата;
		//ПараметрыРегистрации.Организация			= ДокОбъект.Организация;
		//ПараметрыРегистрации.Контрагент				= ДокОбъект.Контрагент;
		//ПараметрыРегистрации.НалогообложениеНДС		= ДокОбъект.НалогообложениеНДС;
		//ПараметрыРегистрации.РеализацияЧерезКомиссионера =
		//КомиссионнаяТорговляСервер.РеализацияЧерезКомиссионера(ДокОбъект.ХозяйственнаяОперация);
		//
		//ИспользоватьСтатусыРеализацийТоваровУслуг = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыРеализацийТоваровУслуг");
		//
		//Если (НЕ ИспользоватьСтатусыРеализацийТоваровУслуг) ИЛИ 
		//	(ИспользоватьСтатусыРеализацийТоваровУслуг И 
		//	ДокОбъект.Статус <> Перечисления.СтатусыРеализацийТоваровУслуг.КПредоплате) Тогда
		//	
		//	Если ДокОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
		//		ПараметрыРегистрации.ПередачаНаКомиссию = Истина;
		//	Иначе
		//		ПараметрыРегистрации.РеализацияТоваров = Истина;
		//		ПараметрыРегистрации.РеализацияРаботУслуг = Истина;
		//	КонецЕсли;
		//КонецЕсли;
		//
		//СчетаФактурыВыданныеНаОсновании = УчетНДСУП.СчетаФактурыВыданныеНаОсновании(ПараметрыРегистрации);
		//
		//ТекстСчетаФактурыВыданные = ПродажиСервер.СформироватьПредставлениеКомандФормированияСчетаФактурыНаОсновании(ДокОбъект.Ссылка, СчетаФактурыВыданныеНаОсновании);
		//
		//ДокОбъект.ТекстыПоляДокументыНаОсновании.Добавить(ТекстСчетаФактурыВыданные);
		// -- Галфинд ЕсиповАВ 04.05.2023
	КонецЕсли;	
					
КонецПроцедуры	

Процедура гф_РасходныйОрдерОтгрузкаПеремещением(Источник, Отказ, РежимПроведения)
	
	// Проверяем наличие в Расходном ордере упаковочных листов и сразу их запоминаем
	УпаковочныеЛисты = Новый СписокЗначений;
	
	ЕстьУпаковочныйЛист = Ложь;
	
	Для Каждого Строка Из Источник.ОтгружаемыеТовары Цикл
		
		Если ЗначениеЗаполнено(Строка.УпаковочныйЛист) Тогда
			УпаковочныеЛисты.Добавить(Строка.УпаковочныйЛист, "УпаковочныйЛист");
			ЕстьУпаковочныйЛист = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// Получаем таблицу с данными Расходного ордера для последующего контроля по отметкам обработанных данных
	ДанныеДокументаРасходныйОрдер = ПолучитьДанныеДокументаРасходныйОрдерНаТовары(Источник.Ссылка);
	
	ДанныеДокументаРасходныйОрдер.Колонки.Добавить("Номер");
	ДанныеДокументаРасходныйОрдер.Колонки.Добавить("ОтметкаОбработкиПеремещение");
	ДанныеДокументаРасходныйОрдер.Колонки.Добавить("ОтметкаОбработкиКорректировка");
	
	Для Каждого Строка Из ДанныеДокументаРасходныйОрдер Цикл
		Строка.ОтметкаОбработкиПеремещение = Ложь;
		Строка.ОтметкаОбработкиКорректировка = Ложь;
	КонецЦикла;
	
	// Получаем распоряжение, оно одинаковое для всех строк документа, достаточно первого, выходим из цикла
	Для Каждого Строка Из ДанныеДокументаРасходныйОрдер Цикл
		
		// Корректировка назначения товаров
		
		// Предварительно получаем документ, именно Корректировка и отменяем проведение, иначе
		// Корректировка держит остатки и документ Перемещение не проводится
		ДокСсылкаОснованиеКорректировка = ПолучитьДокументОснованиеКорректировка(Источник.Ссылка, Строка.Назначение);
		
		Если ДокСсылкаОснованиеКорректировка <> Неопределено Тогда
			
			ДокОбъектКорректировка = ДокСсылкаОснованиеКорректировка.Получитьобъект();
			ЗаблокироватьДокументКорректировка(ДокОбъектКорректировка);
			
			// Добавление свойства, запрет ручного изменения документа, при наличии провести документ.
			ДокОбъектКорректировка.ДополнительныеСвойства.Вставить("гф_ДокументСозданАвтоматически", Истина);
			
			ПроверитьПометкуУдаленияИСнятьПометкуУдаления(ДокОбъектКорректировка);
			ПроверитьПроведениеИОтменитьПроведение(ДокОбъектКорректировка);
			
		Иначе
			ДокОбъектКорректировка = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
			ДокОбъектКорректировка.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		КонецЕсли;
		
		// Перемещение товаров
		
		ДокСсылкаОснованиеПеремещение = ПолучитьДокументОснованиеПоЗаказуКлиента(Источник.Ссылка, Строка.Распоряжение);
		
		Если ДокСсылкаОснованиеПеремещение <> Неопределено Тогда
			
			ДокОбъектПеремещение = ДокСсылкаОснованиеПеремещение.Получитьобъект();
			ЗаблокироватьДокументПеремещение(ДокОбъектПеремещение);
			
			// Добавление свойства, что бы табличная часть "гф_ШтрихкодыУпаковок" не очищалась типовым механизмом перед записью
			ДокОбъектПеремещение.ДополнительныеСвойства.Вставить("гф_ОтгрузкаПеремещением", Истина);
			
			ПроверитьПометкуУдаленияИСнятьПометкуУдаления(ДокОбъектПеремещение);
			ПроверитьПроведениеИОтменитьПроведение(ДокОбъектПеремещение);
			
		Иначе
			ДокОбъектПеремещение = Документы.ПеремещениеТоваров.СоздатьДокумент();
			ДокОбъектПеремещение.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		КонецЕсли;
		
		// Перемещение товаров
		
		// ++ Галфинд ВолковЕВ 2024/02/21
		// ДокОбъектПеремещение.Дата 						= Источник.Дата;
		ДокОбъектПеремещение.Дата 						= ТекущаяДата();
		
		Если ТипЗнч(ДокОбъектПеремещение) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Создано автоматически при отгрузке перемещением по ""%1"".'"),
			Источник);
			
			ДокОбъектПеремещение.Комментарий 			= ТекстСообщения;
		КонецЕсли;
		// -- Галфинд ВолковЕВ 2024/02/21
		
		ДокОбъектПеремещение.Организация 				= Строка.Распоряжение.Организация;
		ДокОбъектПеремещение.СкладОтправитель 			= Источник.Склад;
		ДокОбъектПеремещение.СкладПолучатель 			= Источник.Получатель;
		ДокОбъектПеремещение.гф_ЗаказКлиента 			= Строка.Распоряжение;
		ДокОбъектПеремещение.ПеремещениеПоЗаказам 		= Ложь;
		ДокОбъектПеремещение.ДокументОснование 			= Источник.Ссылка;
		ДокОбъектПеремещение.Ответственный 				= Источник.Ответственный;
		ДокОбъектПеремещение.Автор 						= Источник.Ответственный;
		ДокОбъектПеремещение.Статус 					= Перечисления.СтатусыПеремещенийТоваров.Принято;
		ДокОбъектПеремещение.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
		ДокОбъектПеремещение.СпособДоставки 			= Перечисления.СпособыДоставки.Самовывоз;
		ДокОбъектПеремещение.ВариантПриемкиТоваров 		= Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным;
		ДокОбъектПеремещение.гф_КонтрагентПолучатель 	= Строка.Распоряжение.Контрагент;
		ДокОбъектПеремещение.АдресДоставки 				= Строка.Распоряжение.АдресДоставки;
		
		ДокОбъектПеремещение.Товары.Очистить();
		ДокОбъектПеремещение.гф_ТоварыВКоробах.Очистить();
		ДокОбъектПеремещение.гф_ШтрихкодыУпаковок.Очистить();
		
		// Корректировка назначения товаров
		
		// ++ Галфинд ВолковЕВ 2024/02/21
		// ДокОбъектКорректировка.Дата 					= Источник.Дата;
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Создано автоматически при отгрузке перемещением по ""%1"".'"),
			Источник);
		
		ДокОбъектКорректировка.Дата 					= ТекущаяДата();
		ДокОбъектКорректировка.Комментарий 				= ТекстСообщения;
		// -- Галфинд ВолковЕВ 2024/02/21
		ДокОбъектКорректировка.Организация 				= Строка.Распоряжение.Организация;
		ДокОбъектКорректировка.ВидОперации 				= Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв;
		ДокОбъектКорректировка.ДокументОснование 		= Источник.Ссылка;
		ДокОбъектКорректировка.Ответственный 			= Источник.Ответственный;
		ДокОбъектКорректировка.Автор 					= Источник.Ответственный;
		ДокОбъектКорректировка.Назначение 				= Строка.Назначение;
		
		ДокОбъектКорректировка.Товары.Очистить();	
		
		Прервать;	
		
	КонецЦикла;	
			
	Если ЕстьУпаковочныйЛист Тогда
		
		// ПеремещениеТоваров
		ЗаполнитьДанныеПоУпаковочнымЛистамПеремещение(Источник, ДокОбъектПеремещение, УпаковочныеЛисты, Источник.СкладскаяОперация, Источник.Статус);
		
		// КорректировкаНазначенияТоваров
		ЗаполнитьДанныеПоУпаковочнымЛистамКорректировка(Источник, ДокОбъектКорректировка, УпаковочныеЛисты, Источник.СкладскаяОперация, Источник.Статус);
		
	Иначе
		
		// Вспомогательные таблицы для отметки номенклатуры, которая была обработана и добавлена в документы Перемещение и Корректировка
		ТоварыПоРаспоряжениямПеремещение = Новый ТаблицаЗначений;
		ТоварыПоРаспоряжениямПеремещение = ДанныеДокументаРасходныйОрдер.Скопировать();
		
		ТоварыПоРаспоряжениямКорректировка = Новый ТаблицаЗначений;
		ТоварыПоРаспоряжениямКорректировка = ДанныеДокументаРасходныйОрдер.Скопировать();
		
		Для Каждого Строка Из ДанныеДокументаРасходныйОрдер Цикл
			
			КодСтроки = 1;
			
			// ПеремещениеТоваров
			Если Не Строка.ОтметкаОбработкиПеремещение Тогда	
				
				НайденнаяСтрока = ТоварыПоРаспоряжениямПеремещение.Найти(Строка.НомерСтроки, "НомерСтроки");
				
				Если НайденнаяСтрока <> Неопределено Тогда
					НайденнаяСтрока.ОтметкаОбработкиПеремещение = Истина;
					ТоварыПоРаспоряжениямПеремещение.Удалить(ТоварыПоРаспоряжениямПеремещение.Индекс(НайденнаяСтрока));
				КонецЕсли;
				
				НоваяСтрока = ДокОбъектПеремещение.Товары.Добавить();
				НоваяСтрока.Номенклатура 			= Строка.Номенклатура;
				НоваяСтрока.Характеристика 			= Строка.Характеристика;
				НоваяСтрока.Серия 					= Строка.Серия;
				НоваяСтрока.Назначение 				= Строка.Назначение;
				НоваяСтрока.Количество 				= Строка.Количество;
				НоваяСтрока.КоличествоУпаковок 		= Строка.Количество;
				НоваяСтрока.КодСтроки 				= КодСтроки;
				НоваяСтрока.НазначениеОтправителя 	= Строка.Назначение;
				
				АналитикаУчетаНоменклатуры = ПолучитьАналитикаУчетаНоменклатуры(Строка.Номенклатура, Строка.Характеристика,
				Строка.Серия, Строка.Назначение, Источник.Склад);
				
				НоваяСтрока.АналитикаУчетаНоменклатуры 	= АналитикаУчетаНоменклатуры;
				
				Для Каждого СтрокаТПР Из ТоварыПоРаспоряжениямПеремещение Цикл
					
					Если СтрокаТПР.ОтметкаОбработкиПеремещение = Ложь
						И Строка.Распоряжение = СтрокаТПР.Распоряжение
						И Не Строка.НомерСтроки = СтрокаТПР.НомерСтроки Тогда
						
						НоваяСтрока = ДокОбъектПеремещение.Товары.Добавить();
						НоваяСтрока.Номенклатура 			= СтрокаТПР.Номенклатура;
						НоваяСтрока.Характеристика 			= СтрокаТПР.Характеристика;
						НоваяСтрока.Серия 					= СтрокаТПР.Серия;
						НоваяСтрока.Назначение 				= СтрокаТПР.Назначение;
						НоваяСтрока.Количество 				= СтрокаТПР.Количество;
						НоваяСтрока.КоличествоУпаковок 		= СтрокаТПР.Количество;
						НоваяСтрока.КодСтроки 				= КодСтроки + 1;
						НоваяСтрока.НазначениеОтправителя 	= Строка.Назначение;
						
						АналитикаУчетаНоменклатуры = ПолучитьАналитикаУчетаНоменклатуры(Строка.Номенклатура, Строка.Характеристика,
							Строка.Серия, Строка.Назначение, Источник.Склад);
						
						НоваяСтрока.АналитикаУчетаНоменклатуры 	= АналитикаУчетаНоменклатуры;
						
						СтрокаТПР.ОтметкаОбработкиПеремещение = Истина;
						
						НайденнаяСтрока = ДанныеДокументаРасходныйОрдер.Найти(СтрокаТПР.НомерСтроки, "НомерСтроки");
						
						Если НайденнаяСтрока <> Неопределено Тогда
							НайденнаяСтрока.ОтметкаОбработкиПеремещение = Истина;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			// Отмечаем что отработали Перемещение по данной позиции номенклатуры, которая указана
			// в строке таблицы "ДанныеДокументаРасходныйОрдер" полученной из Расходного Ордера
			Строка.ОтметкаОбработкиПеремещение = Истина;
			ДокОбъектПеремещение.ДополнительныеСвойства.Вставить("гф_ДокументОснование", Истина);
			
			// КорректировкаНазначенияТоваров
			Если Не Строка.ОтметкаОбработкиКорректировка Тогда
			
			НайденнаяСтрока = ТоварыПоРаспоряжениямКорректировка.Найти(Строка.НомерСтроки, "НомерСтроки");
			Если НайденнаяСтрока <> Неопределено Тогда
				НайденнаяСтрока.ОтметкаОбработкиКорректировка = Истина;
				ТоварыПоРаспоряжениямКорректировка.Удалить(ТоварыПоРаспоряжениямКорректировка.Индекс(НайденнаяСтрока));
			КонецЕсли;
			
			ДокОбъектКорректировка.Товары.Очистить();
			НоваяСтрока = ДокОбъектКорректировка.Товары.Добавить();
			НоваяСтрока.Номенклатура 			= Строка.Номенклатура;
			НоваяСтрока.Характеристика 			= Строка.Характеристика;
			НоваяСтрока.Серия 					= Строка.Серия;
			НоваяСтрока.Количество 				= Строка.Количество;
			НоваяСтрока.КоличествоУпаковок 		= Строка.Количество;
			НоваяСтрока.Склад 					= Источник.Получатель;
			НоваяСтрока.ИсходноеНазначение 		= Строка.Назначение;
			
			Для каждого СтрокаТПР Из ТоварыПоРаспоряжениямКорректировка Цикл
				
				Если СтрокаТПР.ОтметкаОбработкиКорректировка = Ложь
					И Строка.Назначение = СтрокаТПР.Назначение
					И Не Строка.НомерСтроки = СтрокаТПР.НомерСтроки Тогда
					
					НоваяСтрока = ДокОбъектКорректировка.Товары.Добавить();
					НоваяСтрока.Номенклатура 			= СтрокаТПР.Номенклатура;
					НоваяСтрока.Характеристика 			= СтрокаТПР.Характеристика;
					НоваяСтрока.Серия 					= СтрокаТПР.Серия;
					НоваяСтрока.Количество 				= СтрокаТПР.Количество;
					НоваяСтрока.КоличествоУпаковок 		= СтрокаТПР.Количество;
					НоваяСтрока.Склад 					= Источник.Получатель;
					НоваяСтрока.ИсходноеНазначение 		= Строка.Назначение;
					
					СтрокаТПР.ОтметкаОбработкиКорректировка = Истина;
					
					НайденнаяСтрока = ДанныеДокументаРасходныйОрдер.Найти(СтрокаТПР.НомерСтроки, "НомерСтроки");
					
					Если НайденнаяСтрока <> Неопределено Тогда
						НайденнаяСтрока.ОтметкаОбработкиКорректировка = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Строка.ОтметкаОбработкиКорректировка = Истина;
			ДокОбъектКорректировка.ДополнительныеСвойства.Вставить("гф_ДокументОснование", Истина);
			
			КонецЕсли;
		
		КонецЦикла;
		
		// Заполнение таблицы штрихкодов у документа, таблица предварительно очищается ранее
		ДанныеТаблицыШтрихкодыУпаковокДокументаРасходныйОрдер = ПолучитьДанныеТаблицыШтрихкодыУпаковокДокументаРасходныйОрдерНаТовары(Источник.Ссылка);
		ДокОбъектПеремещение.гф_ШтрихкодыУпаковок.Загрузить(ДанныеТаблицыШтрихкодыУпаковокДокументаРасходныйОрдер);
		
	КонецЕсли;
	
	// ПеремещениеТоваров
	// Исключающая ситуация в Иначе, когда документ не новый и не заблокировался, вывести сообщение
	Если ДокОбъектПеремещение.ДополнительныеСвойства.Свойство("ЭтоНовый") Или ДокОбъектПеремещение.Заблокирован() Тогда
		
		// Добавление свойства, что бы табличная часть "гф_ШтрихкодыУпаковок" не очищалась типовым механизмом перед записью
		ДокОбъектПеремещение.ДополнительныеСвойства.Вставить("гф_ОтгрузкаПеремещением", Истина);
		
		Если Источник.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен Тогда
			ЗаписатьПровестиОтменитьПроведениеДокумента(ДокОбъектПеремещение, РежимЗаписиДокумента.Проведение);
		Иначе
			ЗаписатьПровестиОтменитьПроведениеДокумента(ДокОбъектПеремещение, РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
	КонецЕсли;
	
	// КорректировкаНазначенияТоваров
	// Исключающая ситуация в Иначе, когда документ не новый и не заблокировался, вывести сообщение
	Если ДокОбъектКорректировка.ДополнительныеСвойства.Свойство("ЭтоНовый") Или ДокОбъектКорректировка.Заблокирован() Тогда
		
		// Добавление свойство, что бы провести документ. Запрет ручного изменения документа, при наличии свойства
		ДокОбъектКорректировка.ДополнительныеСвойства.Вставить("гф_ДокументСозданАвтоматически", Истина);
		
		// Для отладки
		ПровестиДокумент = Истина;
		Если Источник.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен Тогда
			Если ПровестиДокумент Тогда
				ЗаписатьПровестиОтменитьПроведениеДокумента(ДокОбъектКорректировка, РежимЗаписиДокумента.Проведение);
			Иначе
				ЗаписатьПровестиОтменитьПроведениеДокумента(ДокОбъектКорректировка, РежимЗаписиДокумента.Запись);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура гф_УстановитьДанныеУпаковочногоЛиста(ТекущаяСтрока, ДокОбъект)
	
	// Используется для документов Реализация и Перемещение
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УпаковочныйЛистШапка.Ссылка КАК УпаковочныйЛист,
	|	УпаковочныйЛистШапка.гф_Заказ КАК гф_Заказ,
	|	УпаковочныйЛистШапка.гф_Комплектация КАК гф_Комплектация,
	|	СУММА(УпаковочныйЛистТовары.Количество) КАК Количество,
	|	МАКСИМУМ(УпаковочныйЛистТовары.Номенклатура.Артикул) КАК Артикул
	|ПОМЕСТИТЬ ВТ_УпаковочныйЛист
	|ИЗ
	|	Документ.УпаковочныйЛист КАК УпаковочныйЛистШапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСправочник
	|			ПО УпаковочныйЛистТовары.Номенклатура = НоменклатураСправочник.Ссылка
	|		ПО УпаковочныйЛистШапка.Ссылка = УпаковочныйЛистТовары.Ссылка
	|ГДЕ
	|	УпаковочныйЛистШапка.Ссылка = &Ссылка
	|	И НЕ УпаковочныйЛистТовары.ЭтоУпаковочныйЛист
	|
	|СГРУППИРОВАТЬ ПО
	|	УпаковочныйЛистШапка.Ссылка,
	|	УпаковочныйЛистШапка.гф_Заказ,
	|	УпаковочныйЛистШапка.гф_Комплектация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА СУММА(ЗаказКлиентаТовары.Количество) = 0
	|			ТОГДА СУММА(ЗаказКлиентаТовары.СуммаСНДС) - СУММА(ЗаказКлиентаТовары.СуммаНДС)
	|		ИНАЧЕ (СУММА(ЗаказКлиентаТовары.СуммаСНДС) - СУММА(ЗаказКлиентаТовары.СуммаНДС)) / СУММА(ЗаказКлиентаТовары.Количество)
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА СУММА(ЗаказКлиентаТовары.Количество) = 0
	|			ТОГДА СУММА(ЗаказКлиентаТовары.СуммаНДС)
	|		ИНАЧЕ СУММА(ЗаказКлиентаТовары.СуммаНДС) / СУММА(ЗаказКлиентаТовары.Количество)
	|	КОНЕЦ КАК НДС
	|ПОМЕСТИТЬ ВТ_Цены
	|ИЗ
	|	ВТ_УпаковочныйЛист КАК ВТ_УпаковочныйЛист
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|		ПО ВТ_УпаковочныйЛист.гф_Заказ = ЗаказКлиентаТовары.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиентаТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(УпаковочныйЛистТовары.Количество * ЕСТЬNULL(ВТ_Цены.Цена, 0)) КАК Цена,
	|	СУММА(УпаковочныйЛистТовары.Количество * ЕСТЬNULL(ВТ_Цены.НДС, 0)) КАК НДС
	|ПОМЕСТИТЬ ВТ_ЦенаНДС
	|ИЗ
	|	Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Цены КАК ВТ_Цены
	|		ПО УпаковочныйЛистТовары.Номенклатура = ВТ_Цены.Номенклатура
	|ГДЕ
	|	УпаковочныйЛистТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВТ_УпаковочныйЛист.УпаковочныйЛист КАК УпаковочныйЛист,
	|	ВТ_УпаковочныйЛист.Артикул КАК Артикул,
	|	ВТ_УпаковочныйЛист.Количество КАК КоличествоПар,
	|	ВЫБОР
	|		КОГДА СУММА(ЕСТЬNULL(ВариантыКомплектацииНоменклатурыТовары.Количество, 0)) = 0
	|			ТОГДА 1
	|		ИНАЧЕ ВТ_УпаковочныйЛист.Количество / СУММА(ЕСТЬNULL(ВариантыКомплектацииНоменклатурыТовары.Количество, 0))
	|	КОНЕЦ КАК Коэффициент,
	|	ВТ_ЦенаНДС.Цена КАК ЦенаКороба,
	|	ВТ_ЦенаНДС.НДС КАК НДС
	|ИЗ
	|	ВТ_УпаковочныйЛист КАК ВТ_УпаковочныйЛист
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ВариантыКомплектацииНоменклатурыТовары
	|		ПО ВТ_УпаковочныйЛист.гф_Комплектация = ВариантыКомплектацииНоменклатурыТовары.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЦенаНДС КАК ВТ_ЦенаНДС
	|		ПО (ИСТИНА)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_УпаковочныйЛист.УпаковочныйЛист,
	|	ВТ_УпаковочныйЛист.Артикул,
	|	ВТ_УпаковочныйЛист.Количество,
	|	ВТ_ЦенаНДС.Цена,
	|	ВТ_ЦенаНДС.НДС";
	
	Если ТипЗнч(ДокОбъект) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
		Запрос.Параметры.Вставить("Ссылка", ТекущаяСтрока.УпаковочныйЛист);
	ИначеЕсли ТипЗнч(ДокОбъект) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		Запрос.Параметры.Вставить("Ссылка", ТекущаяСтрока.УпаковочныйЛист);
	Иначе
		// Возможно процедура будет использоваться для другого документа с другим наименованием колонки в строке 
		Запрос.Параметры.Вставить("Ссылка", Неопределено);
		
		ТекстСообщения = НСтр("ru = 'Не правильно установлен параметр в запрос в ""Процедура гф_УстановитьДанныеУпаковочногоЛиста"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Результат = Запрос.Выполнить(); 
	
	Если Результат.Пустой() Тогда
		
		ТекущаяСтрока.Артикул		= "";
		ТекущаяСтрока.КоличествоПар	= 0;
		ТекущаяСтрока.Коэффициент	= 0;
		ТекущаяСтрока.ЦенаКороба	= "";
		ТекущаяСтрока.НДС			= "";
		
	Иначе
		
		Выборка = Результат.Выбрать();
		
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Выборка);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьАналитикаУчетаНоменклатуры(Номенклатура, Характеристика, Серия, Назначение, Склад)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КлючиАналитикиУчетаНоменклатуры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КлючиАналитикиУчетаНоменклатуры КАК КлючиАналитикиУчетаНоменклатуры
		|ГДЕ
		|	КлючиАналитикиУчетаНоменклатуры.Номенклатура = &Номенклатура
		|	И КлючиАналитикиУчетаНоменклатуры.Характеристика = &Характеристика
		|	И КлючиАналитикиУчетаНоменклатуры.Серия = &Серия
		|	И КлючиАналитикиУчетаНоменклатуры.МестоХранения = &Склад
		|	И КлючиАналитикиУчетаНоменклатуры.Назначение = &Назначение";
	
	Запрос.УстановитьПараметр("Номенклатура", 		Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", 	Характеристика);
	Запрос.УстановитьПараметр("Серия", 				Серия);
	Запрос.УстановитьПараметр("Склад", 				Склад);
	Запрос.УстановитьПараметр("Назначение", 		Назначение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ЗависимыеРеквизиты()
	
	Возврат Новый Структура(
		"БезВозвратнойТары",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки,СуммаБонусныхБалловКСписаниюВВалюте");
	
КонецФункции

Функция ПолучитьтекстзапросаСКодомиСтрокПоУпаковочнымЛистамСЗаказом(УпаковочныйЛист, Заказ, СписокКодовСтроки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&СсылкаЗаказКлиента КАК Ссылка,
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	|	ЗаказКлиентаТовары.Характеристика КАК Характеристика,
	|	ЗаказКлиентаТовары.Серия КАК Серия,
	|	ЗаказКлиентаТовары.Цена КАК Цена,
	|	ЗаказКлиентаТовары.ВидЦены КАК ВидЦены,
	|	ЗаказКлиентаТовары.Сумма КАК Сумма,
	|	ЗаказКлиентаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказКлиентаТовары.СуммаНДС КАК СуммаНДС,
	|	ЗаказКлиентаТовары.СуммаСНДС КАК СуммаСНДС,
	|	ЗаказКлиентаТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ЗаказКлиентаТовары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ЗаказКлиентаТовары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ЗаказКлиентаТовары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ЗаказКлиентаТовары.Склад КАК Склад,
	|	ЗаказКлиентаТовары.СрокПоставки КАК СрокПоставки,
	|	ЗаказКлиентаТовары.Содержание КАК Содержание,
	|	ЗаказКлиентаТовары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ЗаказКлиентаТовары.НоменклатураНабора КАК НоменклатураНабора,
	|	ЗаказКлиентаТовары.Обособленно КАК Обособленно,
	|	ЗаказКлиентаТовары.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ЗаказКлиентаТовары.ВариантОбеспеченияДоИзмененияОбновлениемИБ КАК ВариантОбеспеченияДоИзмененияОбновлениемИБ,
	|	ЗаказКлиентаТовары.Подразделение КАК Подразделение,
	|	ЗаказКлиентаТовары.НоменклатураПартнера КАК НоменклатураПартнера,
	|	ЗаказКлиентаТовары.Количество КАК Количество,
	|	ЗаказКлиентаТовары.КодСтроки КАК КодСтроки,
	|	ЗаказКлиентаТовары.гф_СкидкаДляРТУ КАК гф_СкидкаДляРТУ,
	|	ЗаказКлиентаТовары.гф_ДатаДляРТУ КАК гф_ДатаДляРТУ,
	|	ЗаказКлиентаТовары.гф_КомментарийРТУ КАК гф_КомментарийРТУ,
	|	ЗаказКлиентаТовары.гф_ЦенаСоСкидкой КАК гф_ЦенаСоСкидкой,
	|	ЗаказКлиентаТовары.гф_ПрайсЛистДляРТУ КАК гф_ПрайсЛистДляРТУ
	|ПОМЕСТИТЬ ВТ_ЗаказКлиента
	|ИЗ
	|	&ЗаказКлиентаТовары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	НЕ ЗаказКлиентаТовары.Отменено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписокКодовСтроки.КодСтроки КАК КодСтроки,
	|	СписокКодовСтроки.Количество КАК Количество,
	|	СписокКодовСтроки.Номенклатура КАК Номенклатура,
	|	СписокКодовСтроки.УпаковочныйЛист КАК УпаковочныйЛист,
	|	СписокКодовСтроки.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВТ_СписокКодовСтроки
	|ИЗ
	|	&СписокКодовСтроки КАК СписокКодовСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УпаковочныйЛист.гф_Заказ КАК гф_Заказ,
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	|	ЗаказКлиентаТовары.Характеристика КАК Характеристика,
	|	ЗаказКлиентаТовары.Серия КАК Серия,
	|	ЗаказКлиентаТовары.Цена КАК Цена,
	|	ЗаказКлиентаТовары.ВидЦены КАК ВидЦены,
	|	СУММА(ЗаказКлиентаТовары.Сумма) КАК Сумма,
	|	ЗаказКлиентаТовары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ЗаказКлиентаТовары.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ЗаказКлиентаТовары.СуммаСНДС) КАК СуммаСНДС,
	|	ЗаказКлиентаТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ЗаказКлиентаТовары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ЗаказКлиентаТовары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ЗаказКлиентаТовары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ЗаказКлиентаТовары.Склад КАК Склад,
	|	ЗаказКлиентаТовары.СрокПоставки КАК СрокПоставки,
	|	ЗаказКлиентаТовары.Содержание КАК Содержание,
	|	ЗаказКлиентаТовары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ЗаказКлиентаТовары.НоменклатураНабора КАК НоменклатураНабора,
	|	ЗаказКлиентаТовары.Обособленно КАК Обособленно,
	|	ЗаказКлиентаТовары.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ЗаказКлиентаТовары.ВариантОбеспеченияДоИзмененияОбновлениемИБ КАК ВариантОбеспеченияДоИзмененияОбновлениемИБ,
	|	ЗаказКлиентаТовары.Подразделение КАК Подразделение,
	|	ЗаказКлиентаТовары.НоменклатураПартнера КАК НоменклатураПартнера,
	|	СУММА(ЗаказКлиентаТовары.Количество) КАК Количество,
	|	ЗаказКлиентаТовары.КодСтроки КАК КодСтроки,
	|	ЗаказКлиентаТовары.гф_СкидкаДляРТУ КАК гф_СкидкаДляРТУ,
	|	ЗаказКлиентаТовары.гф_ДатаДляРТУ КАК гф_ДатаДляРТУ,
	|	ЗаказКлиентаТовары.гф_КомментарийРТУ КАК гф_КомментарийРТУ,
	|	ЗаказКлиентаТовары.гф_ЦенаСоСкидкой КАК гф_ЦенаСоСкидкой,
	|	ЗаказКлиентаТовары.гф_ПрайсЛистДляРТУ КАК гф_ПрайсЛистДляРТУ
	|ПОМЕСТИТЬ ВТ_Заказ
	|ИЗ
	|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗаказКлиента КАК ЗаказКлиентаТовары
	|		ПО УпаковочныйЛист.гф_Заказ = ЗаказКлиентаТовары.Ссылка
	|ГДЕ
	|	УпаковочныйЛист.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиентаТовары.Номенклатура,
	|	ЗаказКлиентаТовары.Характеристика,
	|	УпаковочныйЛист.гф_Заказ,
	|	ЗаказКлиентаТовары.Серия,
	|	ЗаказКлиентаТовары.Цена,
	|	ЗаказКлиентаТовары.ВидЦены,
	|	ЗаказКлиентаТовары.ПроцентРучнойСкидки,
	|	ЗаказКлиентаТовары.СуммаРучнойСкидки,
	|	ЗаказКлиентаТовары.ПроцентАвтоматическойСкидки,
	|	ЗаказКлиентаТовары.СуммаАвтоматическойСкидки,
	|	ЗаказКлиентаТовары.Склад,
	|	ЗаказКлиентаТовары.СрокПоставки,
	|	ЗаказКлиентаТовары.Содержание,
	|	ЗаказКлиентаТовары.СтатусУказанияСерий,
	|	ЗаказКлиентаТовары.НоменклатураНабора,
	|	ЗаказКлиентаТовары.Обособленно,
	|	ЗаказКлиентаТовары.ХарактеристикаНабора,
	|	ЗаказКлиентаТовары.ВариантОбеспеченияДоИзмененияОбновлениемИБ,
	|	ЗаказКлиентаТовары.Подразделение,
	|	ЗаказКлиентаТовары.НоменклатураПартнера,
	|	ЗаказКлиентаТовары.СтавкаНДС,
	|	ЗаказКлиентаТовары.КодСтроки,
	|	ЗаказКлиентаТовары.гф_СкидкаДляРТУ,
	|	ЗаказКлиентаТовары.гф_ДатаДляРТУ,
	|	ЗаказКлиентаТовары.гф_КомментарийРТУ,
	|	ЗаказКлиентаТовары.гф_ЦенаСоСкидкой,
	|	ЗаказКлиентаТовары.гф_ПрайсЛистДляРТУ 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УпаковочныйЛистТовары.НомерСтроки КАК НомерСтроки,
	|	УпаковочныйЛистТовары.Номенклатура КАК Номенклатура,
	|	УпаковочныйЛистТовары.Номенклатура.Артикул КАК НоменклатураАртикул,
	|	УпаковочныйЛистТовары.Характеристика КАК Характеристика,
	|	УпаковочныйЛистТовары.Серия КАК Серия,
	|	УпаковочныйЛистТовары.Упаковка КАК Упаковка,
	|	УпаковочныйЛистТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	УпаковочныйЛистТовары.Количество КАК Количество,
	|	УпаковочныйЛистТовары.УпаковочныйЛист КАК УпаковочныйЛист,
	|	УпаковочныйЛистТовары.НоменклатураПартнера КАК НоменклатураПартнера,
	|	УпаковочныйЛистТовары.Комментарий КАК Комментарий,
	|	УпаковочныйЛистТовары.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
	|	УпаковочныйЛистТовары.ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста КАК ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста,
	|	УпаковочныйЛистТовары.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
	|	УпаковочныйЛистТовары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	УпаковочныйЛистТовары.Назначение КАК Назначение,
	|	ВТ_Заказ.Цена КАК Цена,
	|	ВТ_Заказ.ВидЦены КАК ВидЦены,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_Заказ.Количество, 0) = 0
	|			ТОГДА ВТ_Заказ.Сумма
	|		ИНАЧЕ ВТ_Заказ.Сумма / ВТ_Заказ.Количество * УпаковочныйЛистТовары.Количество
	|	КОНЕЦ КАК Сумма,
	|	ВТ_Заказ.СтавкаНДС КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_Заказ.Количество, 0) = 0
	|			ТОГДА ВТ_Заказ.СуммаНДС
	|		ИНАЧЕ ВТ_Заказ.СуммаНДС / ВТ_Заказ.Количество * УпаковочныйЛистТовары.Количество
	|	КОНЕЦ КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_Заказ.Количество, 0) = 0
	|			ТОГДА ВТ_Заказ.СуммаСНДС
	|		ИНАЧЕ ВТ_Заказ.СуммаСНДС / ВТ_Заказ.Количество * УпаковочныйЛистТовары.Количество
	|	КОНЕЦ КАК СуммаСНДС,
	|	ВТ_Заказ.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_Заказ.Количество, 0) = 0
	|			ТОГДА ВТ_Заказ.СуммаРучнойСкидки
	|		ИНАЧЕ ВТ_Заказ.СуммаРучнойСкидки / ВТ_Заказ.Количество * УпаковочныйЛистТовары.Количество
	|	КОНЕЦ КАК СуммаРучнойСкидки,
	|	ВТ_Заказ.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_Заказ.Количество, 0) = 0
	|			ТОГДА ВТ_Заказ.СуммаАвтоматическойСкидки
	|		ИНАЧЕ ВТ_Заказ.СуммаАвтоматическойСкидки / ВТ_Заказ.Количество * УпаковочныйЛистТовары.Количество
	|	КОНЕЦ КАК СуммаАвтоматическойСкидки,
	|	ВТ_Заказ.Склад КАК Склад,
	|	ВТ_Заказ.СрокПоставки КАК СрокПоставки,
	|	ВТ_Заказ.Содержание КАК Содержание,
	|	ВТ_Заказ.НоменклатураНабора КАК НоменклатураНабора,
	|	ВТ_Заказ.Обособленно КАК Обособленно,
	|	ВТ_Заказ.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ВТ_Заказ.ВариантОбеспеченияДоИзмененияОбновлениемИБ КАК ВариантОбеспеченияДоИзмененияОбновлениемИБ,
	|	ВТ_Заказ.Подразделение КАК Подразделение,
	|	ЕСТЬNULL(ВТ_Заказ.Количество, 0) КАК КоличествоВЗаказе,
	|	ВТ_Заказ.КодСтроки КАК КодСтроки,
	|	ЕСТЬNULL(ВТ_Заказ.гф_СкидкаДляРТУ, 0) КАК гф_СкидкаДляРТУ,
	|	ЕСТЬNULL(ВТ_Заказ.гф_ДатаДляРТУ, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК гф_ДатаДляРТУ,
	|	ВТ_Заказ.гф_КомментарийРТУ КАК гф_КомментарийРТУ,
	|	ВТ_Заказ.гф_ЦенаСоСкидкой КАК гф_ЦенаСоСкидкой,
	|	ЕСТЬNULL(ВТ_Заказ.гф_ПрайсЛистДляРТУ,Значение(Справочник.ВидыЦен.ПустаяСсылка)) КАК гф_ПрайсЛистДляРТУ
	|ПОМЕСТИТЬ ВТ_Итог
	|ИЗ
	|	Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Заказ КАК ВТ_Заказ
	|		ПО УпаковочныйЛистТовары.Номенклатура = ВТ_Заказ.Номенклатура
	|			И УпаковочныйЛистТовары.Характеристика = ВТ_Заказ.Характеристика
	|			И УпаковочныйЛистТовары.Серия = ВТ_Заказ.Серия
	|ГДЕ
	|	УпаковочныйЛистТовары.Ссылка = &Ссылка
	|	И НЕ УпаковочныйЛистТовары.ЭтоУпаковочныйЛист
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Итог.НомерСтроки КАК НомерСтроки,
	|	ВТ_Итог.Номенклатура КАК Номенклатура,
	|	ВТ_Итог.НоменклатураАртикул КАК НоменклатураАртикул,
	|	ВТ_Итог.Характеристика КАК Характеристика,
	|	ВТ_Итог.Серия КАК Серия,
	|	ВТ_Итог.Упаковка КАК Упаковка,
	|	ВТ_Итог.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВТ_Итог.Количество КАК Количество,
	|	ВТ_Итог.УпаковочныйЛист КАК УпаковочныйЛист,
	|	ВТ_Итог.НоменклатураПартнера КАК НоменклатураПартнера,
	|	ВТ_Итог.Комментарий КАК Комментарий,
	|	ВТ_Итог.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
	|	ВТ_Итог.ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста КАК ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста,
	|	ВТ_Итог.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
	|	ВТ_Итог.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ВТ_Итог.Назначение КАК Назначение,
	|	ВТ_Итог.Цена КАК Цена,
	|	ВТ_Итог.ВидЦены КАК ВидЦены,
	|	ВТ_Итог.Сумма КАК Сумма,
	|	ВТ_Итог.СтавкаНДС КАК СтавкаНДС,
	|	ВТ_Итог.СуммаНДС КАК СуммаНДС,
	|	ВТ_Итог.СуммаСНДС КАК СуммаСНДС,
	|	ВТ_Итог.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ВТ_Итог.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ВТ_Итог.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ВТ_Итог.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ВТ_Итог.Склад КАК Склад,
	|	ВТ_Итог.СрокПоставки КАК СрокПоставки,
	|	ВТ_Итог.Содержание КАК Содержание,
	|	ВТ_Итог.НоменклатураНабора КАК НоменклатураНабора,
	|	ВТ_Итог.Обособленно КАК Обособленно,
	|	ВТ_Итог.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ВТ_Итог.ВариантОбеспеченияДоИзмененияОбновлениемИБ КАК ВариантОбеспеченияДоИзмененияОбновлениемИБ,
	|	ВТ_Итог.Подразделение КАК Подразделение,
	|	ВТ_Итог.КоличествоВЗаказе КАК КоличествоВЗаказе,
	|	ВТ_Итог.КодСтроки КАК КодСтроки,
	|	ВТ_Итог.гф_СкидкаДляРТУ КАК гф_СкидкаДляРТУ,
	|	ВТ_Итог.гф_ДатаДляРТУ КАК гф_ДатаДляРТУ,
	|	ВТ_Итог.гф_КомментарийРТУ КАК гф_КомментарийРТУ,
	|	ВТ_Итог.гф_ЦенаСоСкидкой КАК гф_ЦенаСоСкидкой,
	|	ВТ_Итог.гф_ПрайсЛистДляРТУ КАК гф_ПрайсЛистДляРТУ  
	|ИЗ
	|	ВТ_СписокКодовСтроки КАК ВТ_СписокКодовСтроки
	|		Левое СОЕДИНЕНИЕ ВТ_Итог КАК ВТ_Итог
	|		ПО ВТ_СписокКодовСтроки.КодСтроки = ВТ_Итог.КодСтроки";
	
	Запрос.Параметры.Вставить("Ссылка", УпаковочныйЛист);
	Запрос.Параметры.Вставить("СсылкаЗаказКлиента", Заказ.Ссылка);
	// Измененная таблица с учетом огружаемой номенклатуры
	Запрос.Параметры.Вставить("ЗаказКлиентаТовары", Заказ.Товары.Выгрузить());
	// Список кодов строки необходим для связи отгружаемой номенклатуры из заказа с упаковочным листом, строки которого пока еще не содержат коды строк из заказа
	// Коды строк добавляются в упаковочный лист после записи расходного ордера, поэтому 
	Запрос.Параметры.Вставить("СписокКодовСтроки", СписокКодовСтроки);
	
	ВыборкаДанные = Запрос.Выполнить().Выгрузить();
	
	Возврат ВыборкаДанные;
	
КонецФункции

Функция ПолучитьтекстзапросаСКодомиСтрокПоУпаковочнымЛистам(УпаковочныйЛист)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УпаковочныйЛист.гф_Заказ КАК гф_Заказ,
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	|	ЗаказКлиентаТовары.Характеристика КАК Характеристика,
	|	ЗаказКлиентаТовары.Серия КАК Серия,
	|	ЗаказКлиентаТовары.Цена КАК Цена,
	|	ЗаказКлиентаТовары.ВидЦены КАК ВидЦены,
	|	СУММА(ЗаказКлиентаТовары.Сумма) КАК Сумма,
	|	ЗаказКлиентаТовары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ЗаказКлиентаТовары.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ЗаказКлиентаТовары.СуммаСНДС) КАК СуммаСНДС,
	|	ЗаказКлиентаТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ЗаказКлиентаТовары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ЗаказКлиентаТовары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ЗаказКлиентаТовары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ЗаказКлиентаТовары.Склад КАК Склад,
	|	ЗаказКлиентаТовары.СрокПоставки КАК СрокПоставки,
	|	ЗаказКлиентаТовары.Содержание КАК Содержание,
	|	ЗаказКлиентаТовары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ЗаказКлиентаТовары.НоменклатураНабора КАК НоменклатураНабора,
	|	ЗаказКлиентаТовары.Обособленно КАК Обособленно,
	|	ЗаказКлиентаТовары.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ЗаказКлиентаТовары.ВариантОбеспеченияДоИзмененияОбновлениемИБ КАК ВариантОбеспеченияДоИзмененияОбновлениемИБ,
	|	ЗаказКлиентаТовары.Подразделение КАК Подразделение,
	|	ЗаказКлиентаТовары.НоменклатураПартнера КАК НоменклатураПартнера,
	|	СУММА(ЗаказКлиентаТовары.Количество) КАК Количество,
	|	ЗаказКлиентаТовары.КодСтроки КАК КодСтроки,
	|	ЗаказКлиентаТовары.гф_СкидкаДляРТУ КАК гф_СкидкаДляРТУ,
	|	ЗаказКлиентаТовары.гф_ДатаДляРТУ КАК гф_ДатаДляРТУ,
	|	ЗаказКлиентаТовары.гф_КомментарийРТУ КАК гф_КомментарийРТУ,
	|	ЗаказКлиентаТовары.гф_ЦенаСоСкидкой КАК гф_ЦенаСоСкидкой,
	|	ЗаказКлиентаТовары.гф_ПрайсЛистДляРТУ КАК гф_ПрайсЛистДляРТУ
	|ПОМЕСТИТЬ ВТ_Заказ
	|ИЗ
	|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|		ПО УпаковочныйЛист.гф_Заказ = ЗаказКлиентаТовары.Ссылка
	|ГДЕ
	|	УпаковочныйЛист.Ссылка = &Ссылка
	|	И ЗаказКлиентаТовары.ВариантОбеспечения = &ВариантОбеспечения
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиентаТовары.Номенклатура,
	|	ЗаказКлиентаТовары.Характеристика,
	|	УпаковочныйЛист.гф_Заказ,
	|	ЗаказКлиентаТовары.Серия,
	|	ЗаказКлиентаТовары.Цена,
	|	ЗаказКлиентаТовары.ВидЦены,
	|	ЗаказКлиентаТовары.ПроцентРучнойСкидки,
	|	ЗаказКлиентаТовары.СуммаРучнойСкидки,
	|	ЗаказКлиентаТовары.ПроцентАвтоматическойСкидки,
	|	ЗаказКлиентаТовары.СуммаАвтоматическойСкидки,
	|	ЗаказКлиентаТовары.Склад,
	|	ЗаказКлиентаТовары.СрокПоставки,
	|	ЗаказКлиентаТовары.Содержание,
	|	ЗаказКлиентаТовары.СтатусУказанияСерий,
	|	ЗаказКлиентаТовары.НоменклатураНабора,
	|	ЗаказКлиентаТовары.Обособленно,
	|	ЗаказКлиентаТовары.ХарактеристикаНабора,
	|	ЗаказКлиентаТовары.ВариантОбеспеченияДоИзмененияОбновлениемИБ,
	|	ЗаказКлиентаТовары.Подразделение,
	|	ЗаказКлиентаТовары.НоменклатураПартнера,
	|	ЗаказКлиентаТовары.СтавкаНДС,
	|	ЗаказКлиентаТовары.КодСтроки,
	|	ЗаказКлиентаТовары.гф_СкидкаДляРТУ,
	|	ЗаказКлиентаТовары.гф_ДатаДляРТУ,
	|	ЗаказКлиентаТовары.гф_КомментарийРТУ,
	|	ЗаказКлиентаТовары.гф_ЦенаСоСкидкой,
	|	ЗаказКлиентаТовары.гф_ПрайсЛистДляРТУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УпаковочныйЛистТовары.НомерСтроки КАК НомерСтроки,
	|	УпаковочныйЛистТовары.Номенклатура КАК Номенклатура,
	|	УпаковочныйЛистТовары.Характеристика КАК Характеристика,
	|	УпаковочныйЛистТовары.Серия КАК Серия,
	|	УпаковочныйЛистТовары.Упаковка КАК Упаковка,
	|	УпаковочныйЛистТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	УпаковочныйЛистТовары.Количество КАК Количество,
	|	УпаковочныйЛистТовары.УпаковочныйЛист КАК УпаковочныйЛист,
	|	УпаковочныйЛистТовары.НоменклатураПартнера КАК НоменклатураПартнера,
	|	УпаковочныйЛистТовары.Комментарий КАК Комментарий,
	|	УпаковочныйЛистТовары.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
	|	УпаковочныйЛистТовары.ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста КАК ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста,
	|	УпаковочныйЛистТовары.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
	|	УпаковочныйЛистТовары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	УпаковочныйЛистТовары.Назначение КАК Назначение,
	|	ВТ_Заказ.Цена КАК Цена,
	|	ВТ_Заказ.ВидЦены КАК ВидЦены,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_Заказ.Количество, 0) = 0
	|			ТОГДА ВТ_Заказ.Сумма
	|		ИНАЧЕ ВТ_Заказ.Сумма / ВТ_Заказ.Количество * УпаковочныйЛистТовары.Количество
	|	КОНЕЦ КАК Сумма,
	|	ВТ_Заказ.СтавкаНДС КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_Заказ.Количество, 0) = 0
	|			ТОГДА ВТ_Заказ.СуммаНДС
	|		ИНАЧЕ ВТ_Заказ.СуммаНДС / ВТ_Заказ.Количество * УпаковочныйЛистТовары.Количество
	|	КОНЕЦ КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_Заказ.Количество, 0) = 0
	|			ТОГДА ВТ_Заказ.СуммаСНДС
	|		ИНАЧЕ ВТ_Заказ.СуммаСНДС / ВТ_Заказ.Количество * УпаковочныйЛистТовары.Количество
	|	КОНЕЦ КАК СуммаСНДС,
	|	ВТ_Заказ.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_Заказ.Количество, 0) = 0
	|			ТОГДА ВТ_Заказ.СуммаРучнойСкидки
	|		ИНАЧЕ ВТ_Заказ.СуммаРучнойСкидки / ВТ_Заказ.Количество * УпаковочныйЛистТовары.Количество
	|	КОНЕЦ КАК СуммаРучнойСкидки,
	|	ВТ_Заказ.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_Заказ.Количество, 0) = 0
	|			ТОГДА ВТ_Заказ.СуммаАвтоматическойСкидки
	|		ИНАЧЕ ВТ_Заказ.СуммаАвтоматическойСкидки / ВТ_Заказ.Количество * УпаковочныйЛистТовары.Количество
	|	КОНЕЦ КАК СуммаАвтоматическойСкидки,
	|	ВТ_Заказ.Склад КАК Склад,
	|	ВТ_Заказ.СрокПоставки КАК СрокПоставки,
	|	ВТ_Заказ.Содержание КАК Содержание,
	|	ВТ_Заказ.НоменклатураНабора КАК НоменклатураНабора,
	|	ВТ_Заказ.Обособленно КАК Обособленно,
	|	ВТ_Заказ.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ВТ_Заказ.ВариантОбеспеченияДоИзмененияОбновлениемИБ КАК ВариантОбеспеченияДоИзмененияОбновлениемИБ,
	|	ВТ_Заказ.Подразделение КАК Подразделение,
	|	ЕСТЬNULL(ВТ_Заказ.Количество, 0) КАК КоличествоВЗаказе,
	|	ВТ_Заказ.КодСтроки КАК КодСтроки,
	|	ВТ_Заказ.гф_СкидкаДляРТУ КАК гф_СкидкаДляРТУ,
	|	ЕСТЬNULL(ВТ_Заказ.гф_ДатаДляРТУ, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК гф_ДатаДляРТУ,
	|	ВТ_Заказ.гф_КомментарийРТУ КАК гф_КомментарийРТУ,
	|	ВТ_Заказ.гф_ЦенаСоСкидкой КАК гф_ЦенаСоСкидкой,
	|	ВТ_Заказ.гф_ПрайсЛистДляРТУ КАК гф_ПрайсЛистДляРТУ
	|ИЗ
	|	Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Заказ КАК ВТ_Заказ
	|		ПО УпаковочныйЛистТовары.Номенклатура = ВТ_Заказ.Номенклатура
	|			И УпаковочныйЛистТовары.Характеристика = ВТ_Заказ.Характеристика
	|			И УпаковочныйЛистТовары.Серия = ВТ_Заказ.Серия
	|			И УпаковочныйЛистТовары.гф_КодСтроки = ВТ_Заказ.КодСтроки
	|ГДЕ
	|	УпаковочныйЛистТовары.Ссылка = &Ссылка
	|	И НЕ УпаковочныйЛистТовары.ЭтоУпаковочныйЛист";
	
	Запрос.Параметры.Вставить("Ссылка", УпаковочныйЛист);
	Запрос.Параметры.Вставить("ВариантОбеспечения", Перечисления.ВариантыОбеспечения.Отгрузить);
	
	ВыборкаДанные = Запрос.Выполнить().Выгрузить();
	
	Возврат ВыборкаДанные;
	
КонецФункции

// Процедура пересчитывает статусы указания серий в строках товаров, если это необходимо,
//  переподчиняет строки серий другим строкам ТЧ "Товары".
//
// Параметры:
//  Объект						 - ДанныеФормыСтруктура	 - основной реквизит формы документа.
//  ПараметрыУказанияСерий		 - Структура - структура параметров указания серий, возвращаемая соответствующей процедурой модуля менеджера документа.
//  ТекущаяСтрокаИдентификатор	 - Число - идентификатор текущей строки товаров в форме документа.
//  КэшированныеЗначения		 - Структура - структура кеша реквизитов текущей строки товаров.
//
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект,
																			ПараметрыУказанияСерий,
																			ТекущаяСтрокаИдентификатор,
																			КэшированныеЗначения) Экспорт
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.ИмяТЧТовары = ПараметрыУказанияСерий.ИмяТЧСерии Тогда
		// Если ТЧ Серии нет, тогда все статусы пересчитываются при изменении реквизитов ТЧ, а не при окончании редактирования
		Возврат; 
	КонецЕсли;
	
	Если ТекущаяСтрокаИдентификатор <> Неопределено Тогда
		 // ДокументТабличнаяЧастьСтрока.АктОРасхожденияхПослеПриемки.Товары - указано для типизации
		ТекущаяСтрока = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор);
	Иначе
		// Ситуация когда строку удалили
		ТекущаяСтрока = Неопределено; 
	КонецЕсли;
	
	ТекстПоляСвязи = "";
	
	Для Каждого СтрМас Из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстПоляСвязи = ТекстПоляСвязи + "," + СтрМас  ;
	КонецЦикла;
	
	ЕстьУпаковки = ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено; 
	
	// Если строка новая (в т.ч. скопированная) или используется разделение по вариантам продажи - будет закешированно Неопределено
	// Тогда не нужно искать строки со старыми значениями.
	Если КэшированныеЗначения.Номенклатура <> Неопределено Тогда
		
		СтруктураПоискаСтарыеЗначения = Новый Структура("Номенклатура,Характеристика" + ТекстПоляСвязи);
		ЗаполнитьЗначенияСвойств(СтруктураПоискаСтарыеЗначения, КэшированныеЗначения);
		
		НайденныеСтрокиТоваров 	= Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиСтроки(СтруктураПоискаСтарыеЗначения);
		НайденныеСтрокиСерий 	= Объект[ПараметрыУказанияСерий.ИмяТЧСерии].НайтиСтроки(СтруктураПоискаСтарыеЗначения);
	Иначе
		НайденныеСтрокиТоваров 	= Новый Массив;
		НайденныеСтрокиСерий 	= Новый Массив;
	КонецЕсли;
	
	// Если поменялись ключевые поля:
	// - возможно нужно переподчинять серии
	// - статус указания серий нужно пересчитывать в строках по новым ключевым полям и по старым.
	Если ТекущаяСтрока <> Неопределено 
		И Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(КэшированныеЗначения, ТекущаяСтрока, "Номенклатура,Характеристика"+ТекстПоляСвязи) Тогда
		
		УчитыватьОстатки 		= Ложь;
		ПереподчинитьСерии 		= Ложь;
		ПересчитатьКоличество 	= Ложь;
		
		// Определим, нужно ли переподчинять серии. Это нужно если:
		// - серии относились только к одной строке
		// - новые и старые ключевые поля поддерживают одну политику учета
		// - серии относились к нескольким строкам, но изменилось значение действия по отражению расхождения со строкой
		// Если строки нужно переподчинять, то определим, нужно ли пересчитывать количество.
		Если КэшированныеЗначения.Номенклатура <> Неопределено
			И ((КэшированныеЗначения.Свойство("Действие")
					И КэшированныеЗначения.Действие <> ТекущаяСтрока.Действие)
				Или НайденныеСтрокиТоваров.Количество() = 0) Тогда // т.к. строк с такими ключевыми полями не осталось, значит такая строка была одна
			
			Если НайденныеСтрокиТоваров.Количество() > 0 Тогда
				УчитыватьОстатки 		= Истина;
				ПереподчинитьСерии 		= Истина;
			ИначеЕсли КэшированныеЗначения.Номенклатура = ТекущаяСтрока.Номенклатура Тогда // т.е. изменились поля, от которых политика учета не зависит
				ПереподчинитьСерии 		= Истина;
			Иначе // будем переподчинять, если не поменялся вид номенклатуры
				ВидНоменклатурыТекущий 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КэшированныеЗначения.Номенклатура,"ВидНоменклатуры");
				ВидНоменклатурыНовый 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Номенклатура, "ВидНоменклатуры");
				
				ПереподчинитьСерии = (ВидНоменклатурыТекущий = ВидНоменклатурыНовый);
			КонецЕсли;
			
			Если ПереподчинитьСерии
				И ЕстьУпаковки
				И КэшированныеЗначения.Упаковка <> ТекущаяСтрока.Упаковка Тогда
				
				ПересчитатьКоличество = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Если строка удалена, то в качестве текущих значений будет передано Неопределено
		// Тогда не нужно искать строки с новыми значениями.
		СтруктураПоискаНовыеЗначения = Новый Структура("Номенклатура,Характеристика" + ТекстПоляСвязи);
		ЗаполнитьЗначенияСвойств(СтруктураПоискаНовыеЗначения, ТекущаяСтрока);
		
		НайденныеСтрокиТоваровНовые = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиСтроки(СтруктураПоискаНовыеЗначения);
		
		// Добавим строки по новым ключевым полям в массив строк для пересчета статуса указания серий.
		
		// При объединении массивов будем обходить меньший массив
		Если НайденныеСтрокиТоваров.Количество() < НайденныеСтрокиТоваровНовые.Количество() Тогда
			Для Каждого СтрМас Из НайденныеСтрокиТоваров Цикл
				НайденныеСтрокиТоваровНовые.Добавить(СтрМас);
			КонецЦикла;
			НайденныеСтрокиТоваров = НайденныеСтрокиТоваровНовые;
		Иначе
			Для Каждого СтрМас Из НайденныеСтрокиТоваровНовые Цикл
				НайденныеСтрокиТоваров.Добавить(СтрМас);
			КонецЦикла;
		КонецЕсли;
		
		// Определим массив строк серий, который должен участвовать в пересчете статусов,
		Если ПереподчинитьСерии Тогда
			// Сначала переподчиним серии
			
			Если УчитыватьОстатки Тогда
				Если ТекущаяСтрока.КоличествоПоДокументу > ТекущаяСтрока.Количество Тогда
					КоличествоОстаток = ТекущаяСтрока.Количество;
				Иначе
					
					ЕстьНовыеСерии = Ложь;
					
					КоличествоСтрокСИзлишками = 0;
					
					Для Каждого СтрМас Из НайденныеСтрокиСерий Цикл
						Если СтрМас.КоличествоПоДокументу = 0 Тогда
							ЕстьНовыеСерии = Истина;
						ИначеЕсли СтрМас.КоличествоПоДокументу < СтрМас.Количество Тогда
							КоличествоСтрокСИзлишками = КоличествоСтрокСИзлишками + 1;
						КонецЕсли;
					КонецЦикла;
					
					Если ЕстьНовыеСерии
						И КоличествоСтрокСИзлишками > 0 Тогда // Переподчиним количество серий за вычетом количества строк с излишками
						
						КоличествоОстаток = ТекущаяСтрока.КоличествоПоДокументу - КоличествоСтрокСИзлишками;
						
					ИначеЕсли ЕстьНовыеСерии Тогда // Переподчиним количество серий равное количеству серий в документе
						КоличествоОстаток = ТекущаяСтрока.КоличествоПоДокументу;
					Иначе // Переподчиним количество серий равное фактическому количеству серий в обрабатываемой строке
						КоличествоОстаток = ТекущаяСтрока.КоличествоПоДокументу
											- (ТекущаяСтрока.Количество - ТекущаяСтрока.КоличествоПоДокументу);
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого СтрМас Из НайденныеСтрокиСерий Цикл
				
				Если УчитыватьОстатки Тогда
					Если КоличествоОстаток > 0
						Или СтрМас.Количество <> СтрМас.КоличествоПоДокументу Тогда
						
						КоличествоОстаток = КоличествоОстаток - СтрМас.Количество;
						
						ЗаполнитьЗначенияСвойств(СтрМас, ТекущаяСтрока, ТекстПоляСвязи);
					КонецЕсли;
				Иначе
					ЗаполнитьЗначенияСвойств(СтрМас, ТекущаяСтрока, "Номенклатура,Характеристика" + ТекстПоляСвязи);
				КонецЕсли;
				
				Если ПересчитатьКоличество Тогда
					// Набор действий для пересчета, список большой действий по которому в общем модуле "ОбработкаТабличнойЧастиСервер"
					// выполняется своя процедура, находится по имени действия
					СтруктураДействий = Новый Структура;
					СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрМас,СтруктураДействий,КэшированныеЗначения);
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не УчитыватьОстатки Тогда
				// Если серии переподчинены, то достаточно произвести поиск по новым полям поиска
				НайденныеСтрокиСерий = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].НайтиСтроки(СтруктураПоискаНовыеЗначения);
			КонецЕсли;
			
		Иначе
			НайденныеСтрокиСерийНовые = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].НайтиСтроки(СтруктураПоискаНовыеЗначения);
			
			// Если серии не переподчинены, то к строкам по старым ключевым полям нужно добавить строки по новым ключевым полям.
			
			// При объединении массивов будем обходить меньший массив
			Если НайденныеСтрокиСерий.Количество() < НайденныеСтрокиСерийНовые.Количество() Тогда
				Для Каждого СтрМас Из НайденныеСтрокиСерий Цикл
					НайденныеСтрокиСерийНовые.Добавить(СтрМас);
				КонецЦикла;
				НайденныеСтрокиСерий = НайденныеСтрокиСерийНовые;
			Иначе
				Для Каждого СтрМас Из НайденныеСтрокиСерийНовые Цикл
					НайденныеСтрокиСерий.Добавить(СтрМас);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Рекурсивно обходит строки упаковочного листа, используется для получения или удаления всех строк в иерархии
// Параметры:
//	ТЧТовары - ДанныеФормыКоллекция - табличная часть, в которой отображаются товары и упаковочные листы,
//	УпаковочныйЛист - ДокументСсылка.УпаковочныйЛист - упаковочный лист для обхода строк,
//	ТЧСерии - ДанныеФормыКоллекция - табличная часть с сериями товаров, по умолчанию Неопределено,
//	СтрокиОбъединяемые - Массив - состоит из элементов ДанныеФормыЭлементКоллекции, куда собираются строки ТЧ,
//		подчиненные упаковочному листу, по умолчанию Неопределено,
//	Действие - Строка - "Объединить" или "Удалить", по умолчанию "Объединить".
//
Процедура РекурсивноОбойтиПодчиненныеСтроки(ТЧТовары,
	УпаковочныйЛист, ТЧСерии = Неопределено, СтрокиОбъединяемые = Неопределено, Действие = "Объединить") Экспорт
	
	НайденныеСтроки = ТЧТовары.НайтиСтроки(Новый Структура("УпаковочныйЛистРодитель", УпаковочныйЛист));
	Для Каждого Стр Из НайденныеСтроки Цикл
		Если Действие = "Удалить" Тогда
			ТЧТовары.Удалить(Стр);
			Если Не ТЧСерии = Неопределено Тогда
				НайденныеСтрокиСерий = ТЧСерии.НайтиСтроки(Новый Структура("УпаковочныйЛистРодитель", УпаковочныйЛист));
				Для Каждого СтрокаСерий Из НайденныеСтрокиСерий Цикл
					ТЧСерии.Удалить(СтрокаСерий);
				КонецЦикла;
			КонецЕсли;
		Иначе
			СтрокиОбъединяемые.Добавить(Стр);
		КонецЕсли;
		Если Стр.ЭтоУпаковочныйЛист Тогда
			РекурсивноОбойтиПодчиненныеСтроки(ТЧТовары, Стр.УпаковочныйЛист, ТЧСерии, СтрокиОбъединяемые, Действие);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПересчитатьЦенуСНДС(ТекущаяСтрока, СтруктураДействий)
	
	Перем СтруктураПараметровДействия;
	Перем СтавкаНДС;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСНДС", СтруктураПараметровДействия) Тогда
		
		Если СтруктураПараметровДействия = Неопределено
		 Или СтруктураПараметровДействия.Свойство("СтавкаНДС", СтавкаНДС) = Ложь Тогда
			СтавкаНДС = ТекущаяСтрока.СтавкаНДС;
		КонецЕсли;
		
		ПроцентНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтавкаНДС);
		ТекущаяСтрока.Цена = ТекущаяСтрока.Цена * (ПроцентНДС + 100)/100;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммуПродажиПоСуммеСНДС(ТекущаяСтрока, СтруктураДействий) 
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПродажиПоСуммеСНДС", СтруктураПараметровДействия) Тогда
		
		ТекущаяСтрока.СуммаПродажи = ТекущаяСтрока.СуммаСНДС;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммуСУчетомПогрешностиОкругленияВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Погрешность = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомПогрешностиОкругления", Погрешность) Тогда
		
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Сумма + Погрешность;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммуНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДС", СтруктураПараметровДействия) Тогда
		
		НалогообложениеНДС = Неопределено;
		СтруктураПараметровДействия.Свойство("НалогообложениеНДС", НалогообложениеНДС);
		
		СтавкаНДС = Неопределено;
		Если НЕ (СтруктураПараметровДействия <> Неопределено И СтруктураПараметровДействия.Свойство("СтавкаНДС", СтавкаНДС)) Тогда
			СтавкаНДС = ТекущаяСтрока.СтавкаНДС;
		КонецЕсли;
		
		Если КэшированныеЗначения.Свойство("ПроцентыСтавокНДС") Тогда
			ТекПроцентНДС = КэшированныеЗначения.ПроцентыСтавокНДС[СтавкаНДС];
		Иначе
			КэшированныеЗначения.Вставить("ПроцентыСтавокНДС", Новый Соответствие);
			ТекПроцентНДС = Неопределено;
		КонецЕсли;
		
		Если ТекПроцентНДС = Неопределено Тогда
			
			ТекПроцентНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтавкаНДС);
			КэшированныеЗначения.ПроцентыСтавокНДС.Вставить(СтавкаНДС, ТекПроцентНДС);
			
		КонецЕсли;
		
		ТекущаяСтрока.СуммаНДС = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(ТекущаяСтрока.Сумма,
																		ТекПроцентНДС,
																		СтруктураПараметровДействия.ЦенаВключаетНДС,
																		НалогообложениеНДС);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммуНДССуффиксВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем СтруктураПараметровДействия;
	Перем СтавкаНДС;
		
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДССуффикс", СтруктураПараметровДействия) Тогда
		
		НалогообложениеНДС = Неопределено;
		СтруктураПараметровДействия.Свойство("НалогообложениеНДС", НалогообложениеНДС);
		
		Если Не (СтруктураПараметровДействия <> Неопределено
				И СтруктураПараметровДействия.Свойство("СтавкаНДС", СтавкаНДС)) Тогда
			
			СтавкаНДС = ТекущаяСтрока.СтавкаНДС;
			
		КонецЕсли;
		
		Если КэшированныеЗначения.Свойство("ПроцентыСтавокНДС") Тогда
			ТекПроцентНДС = КэшированныеЗначения.ПроцентыСтавокНДС[СтавкаНДС];
		Иначе
			ТекПроцентНДС = Неопределено;
			
			КэшированныеЗначения.Вставить("ПроцентыСтавокНДС", Новый Соответствие);
		КонецЕсли;
		
		Если ТекПроцентНДС = Неопределено Тогда
			
			ТекПроцентНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтавкаНДС);
			КэшированныеЗначения.ПроцентыСтавокНДС.Вставить(СтавкаНДС, ТекПроцентНДС);
			
		КонецЕсли;
		
		Суффикс = "";
		
		Если СтруктураПараметровДействия.Свойство("Суффикс", Суффикс)
			И Не ЗначениеЗаполнено(Суффикс) Тогда
			Суффикс = "";
		КонецЕсли;
		
		СуммаССуффиксом = ОбработкаТабличнойЧастиКлиентСервер.СуммаССуффиксом(Суффикс);
		
		ТекущаяСтрока[СуммаССуффиксом.СуммаНДС] = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(
			ТекущаяСтрока[СуммаССуффиксом.Сумма],
			ТекПроцентНДС,
			СтруктураПараметровДействия.ЦенаВключаетНДС,
			НалогообложениеНДС);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьПисьмо(ДокОбъект, ТекстПисьма, ПроведениеДокумента)
	
	УчетнаяЗаписьПочты	= Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	ПрофильПочты		= РаботаСПочтовымиСообщениямиСлужебный.ИнтернетПочтовыйПрофиль(УчетнаяЗаписьПочты);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаКонтактнойИнформации.АдресЭП КАК АдресЭП
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ТаблицаКонтактнойИнформации
	|ГДЕ
	|	ТаблицаКонтактнойИнформации.Ссылка = &Ссылка";
	
	// ++ Галфинд ЕсиповАВ 04.05.2023
	//Запрос.УстановитьПараметр("Ссылка", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("Ссылка", ДокОбъект.Автор);
	// -- Галфинд ЕсиповАВ 04.05.2023
	
	ВыборкаДанные = Запрос.Выполнить().Выгрузить();
	
	Если ВыборкаДанные.Количество() > 0 Тогда
		EmailПользователя = Строка(ВыборкаДанные[0].АдресЭП);
	Иначе
		ТекстСообщения = НСтр("ru = 'У пользователя не заполнен почтовый адрес, невозможно отправить сообщение об изменении статуса.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СообщениеПочты = Новый ИнтернетПочтовоеСообщение;
	СообщениеПочты.Кодировка = "utf-8";
	СообщениеПочты.Тема = "Проведена Отгрузка.";
	СообщениеПочты.Отправитель = Строка(УчетнаяЗаписьПочты.АдресЭлектроннойПочты);
	СообщениеПочты.ИмяОтправителя = "Рассылка 1С";
	СообщениеПочты.Получатели.Добавить(EmailПользователя);
	
	ТекстСообщения = 
	"<style>
	| body {font-family: Verdana, sans-serif;}
	|</style>
	|<h5 style=""padding: 0 0 15px 0; margin: 0 0 0 0;"">Добрый день!</h5>
	|<h5 style=""padding: 0 0 15px 0; margin: 0 0 0 0;"">%Содержимое%</h5>";
	
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Содержимое%", ТекстПисьма);
	
	ТекстСообщенияПочты = СообщениеПочты.Тексты.Добавить(ТекстСообщения, ТипТекстаПочтовогоСообщения.HTML);
	
	Если Не ПроведениеДокумента Тогда
		
		СообщениеПочты.Тема = "Создан ЧЕРНОВИК «Планируемая отгрузка» клиенту " + ДокОбъект.Контрагент.Наименование + ".";
		
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(ДокОбъект.Ссылка);
		
		ОбъектыПечати = Новый СписокЗначений;
		//++ Галфинд ЕсиповАВ 24.03.2023
		
		//СоздатьПечатнуюФорму(МассивОбъектов, ТекстПисьма, СообщениеПочты, ОбъектыПечати, "РасходнаяНакладная", "ЧЕРНОВИК Расходная накладная ", "РасходнаяНакладная");
		//
		//СоздатьПечатнуюФорму(МассивОбъектов, ТекстПисьма, СообщениеПочты, ОбъектыПечати, "УПД", "ЧЕРНОВИК УПД ", "УПД");
		//
		//СоздатьПечатнуюФорму(МассивОбъектов, ТекстПисьма, СообщениеПочты, ОбъектыПечати, "СписокКМ", "ЧЕРНОВИК Список КМ ", "СписокКМ");
		
		СоздатьПечатнуюФорму(МассивОбъектов, ТекстПисьма, СообщениеПочты, ОбъектыПечати, "РасходнаяНакладнаяЧерновик", "ЧЕРНОВИК Расходная накладная ", "РасходнаяНакладнаяЧерновик");
		
		СоздатьПечатнуюФорму(МассивОбъектов, ТекстПисьма, СообщениеПочты, ОбъектыПечати, "УПДЧерновик", "ЧЕРНОВИК УПД ", "УПДЧерновик");
		
		СоздатьПечатнуюФорму(МассивОбъектов, ТекстПисьма, СообщениеПочты, ОбъектыПечати, "СписокКМЧерновик", "ЧЕРНОВИК Список КМ ", "СписокКМЧерновик");
		//++ Галфинд ЕсиповАВ 24.03.2023
	Иначе 
		// Галфинд СадомцевСА 04.07.2023 Исправил "тему" письма: вместо Автора использую Контрагента
		СообщениеПочты.Тема = "Создана «Планируемая отгрузка» клиенту " + ДокОбъект.Контрагент.Наименование + ".";
		// Галфинд СадомцевСА 07.12.2023 Исправил "тему" письма
		// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee92d1eb947016
		СообщениеПочты.Тема = "Проведена отгрузка клиенту " + ДокОбъект.Контрагент.Наименование + " № " + ДокОбъект.Номер;
		
		// Галфинд СадомцевСА 07.12.2023 Убрал вложения
		// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee92d1eb947016
		//МассивОбъектов = Новый Массив;
		//МассивОбъектов.Добавить(ДокОбъект.Ссылка);
		//
		//ОбъектыПечати = Новый СписокЗначений;
		//
		//СоздатьПечатнуюФорму(МассивОбъектов, ТекстПисьма, СообщениеПочты, ОбъектыПечати, "РасходнаяНакладная", "Расходная накладная ", "РасходнаяНакладная");
		//
		//СоздатьПечатнуюФорму(МассивОбъектов, ТекстПисьма, СообщениеПочты, ОбъектыПечати, "УПД", "УПД ", "УПД");
		//
		//СоздатьПечатнуюФорму(МассивОбъектов, ТекстПисьма, СообщениеПочты, ОбъектыПечати, "СписокКМ", "Список КМ ", "СписокКМ");
		
		//-- Галфинд ЕсиповАВ 24.03.2023
		
	КонецЕсли;
	
	ИнтернетПочта = Новый ИнтернетПочта;
	
	Попытка
		ИнтернетПочта.Подключиться(ПрофильПочты);
		ИнтернетПочта.Послать(СообщениеПочты);
		ИнтернетПочта.Отключиться();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура СоздатьПечатнуюФорму(МассивОбъектов, ТекстПисьма, СообщениеПочты, ОбъектыПечати, Представление, ЧастьИмениФайла, ИмяМетода)
	
	Таб = Новый ТабличныйДокумент;
	
	Попытка
		
		Если ИмяМетода = "РасходнаяНакладная" Тогда
			Таб = СформироватьПечатнуюФормуРасходнаяНакладная(МассивОбъектов, ОбъектыПечати);
		ИначеЕсли ИмяМетода = "УПД" Тогда
			
			СтруктураТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивОбъектов);
			ПараметрыПечати = Новый Структура; 
			ПараметрыПечати.Вставить("ДополнитьКомплектВнешнимиПечатнымиФормами", Ложь);
			
			Таб = Обработки.ПечатьОбщихФорм.СформироватьПечатнуюФормуУПД(СтруктураТипов, ОбъектыПечати, ПараметрыПечати);
		ИначеЕсли ИмяМетода = "СписокКМ" Тогда
			Таб = СформироватьПечатнуюФормуСписокКМ(МассивОбъектов, ОбъектыПечати);
		//++ Галфинд ЕсиповАВ 24.03.2023
		ИначеЕсли ИмяМетода = "РасходнаяНакладнаяЧерновик" Тогда
			Таб = СформироватьПечатнуюФормуРасходнаяНакладная(МассивОбъектов, ОбъектыПечати);
		ИначеЕсли ИмяМетода = "УПДЧерновик" Тогда
			
			СтруктураТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивОбъектов);
			ПараметрыПечати = Новый Структура; 
			ПараметрыПечати.Вставить("ДополнитьКомплектВнешнимиПечатнымиФормами", Ложь);
			 
			Таб = Обработки.гф_УПДЧерновик.СформироватьПечатнуюФормуУПДЧерновик(СтруктураТипов, ОбъектыПечати, ПараметрыПечати);
		ИначеЕсли ИмяМетода = "СписокКМЧерновик" Тогда
			Таб = СформироватьПечатнуюФормуСписокКМ(МассивОбъектов, ОбъектыПечати);
			//-- Галфинд ЕсиповАВ 24.03.2023
		Иначе
			ТекстПисьма = ТекстПисьма + "Ошибка при создании отчета! " + ОписаниеОшибки() + Символы.ПС;
		КонецЕсли;
		
	Исключение
		
		ТекстПисьма = ТекстПисьма + "Ошибка при создании отчета! " + ОписаниеОшибки() + Символы.ПС;
		
	КонецПопытки;
	
	ПутьКФайлу = КаталогВременныхФайлов(); 
	ИмяФайла = ЧастьИмениФайла + Лев(Строка(ТекущаяДатаСеанса()), 10) + ".xls";
	// ++ Галфинд СадомцевСА 21.11.2023 Изменил имя файла
	// Ожидаемое решение: необходимо добавлять в название файла с черновиком УПД наименование контрагента и номер документа РТУ.
	// Например: "Черновик УПД ООО РАНДЕВУ № 0100-000523 от 17.11.2023"
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee87a9f11ce57a
	Если ИмяМетода = "УПДЧерновик" Тогда
		ДокСсылка = МассивОбъектов[0];
		Если ТипЗнч(ДокСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ИмяФайла = ЧастьИмениФайла + СокрЛП(ДокСсылка.Контрагент.Наименование)
				+ " " + СокрЛП(ДокСсылка.Номер) + " " + Лев(Строка(ДокСсылка.Дата), 10) + ".xls";
		КонецЕсли;
	КонецЕсли;
	// -- Галфинд СадомцевСА 21.11.2023
	ПолноеИмяФайла = ПутьКФайлу+ИмяФайла;
	
	ВыгрузитьТДвФайл(Таб, ПолноеИмяФайла, ТекстПисьма);
	
	Попытка
		СообщениеПочты.Вложения.Добавить(ПолноеИмяФайла, Представление);
	Исключение
		ТекстПисьма = ТекстПисьма + "Не удалось добавить вложение! " + ОписаниеОшибки() + Символы.ПС;
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыгрузитьТДвФайл(Таб, ПолноеИмяФайла, ТекстПисьма)
	
	Попытка
		Таб.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.XLS);
	
	Исключение
		ТекстПисьма = ТекстПисьма + "Не удалось создать файл! " + ОписаниеОшибки() + Символы.ПС;
	КонецПопытки;
	
КонецПроцедуры

Функция СформироватьПечатнуюФормуРасходнаяНакладная(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_РасходнаяНакладная";
	
	КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов();
	ИмяКолонкиКодов = КолонкаКодов.ИмяКолонки;
	ПредставлениеКолонкиКодов = КолонкаКодов.ПредставлениеКолонки;
	ВыводитьКоды = ЗначениеЗаполнено(ИмяКолонкиКодов);
	
	ИспользоватьРучныеСкидки         = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	ИспользоватьУпаковки             = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
	ЗапросПоСкладам = Новый Запрос;
	ЗапросПоСкладам.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслугТовары.Склад КАК Склад,
	|	ЕСТЬNULL(РеализацияТоваровУслугТовары.Склад.ИспользоватьСерииНоменклатуры, ЛОЖЬ) КАК ИспользоватьСерииНоменклатуры
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка В(&МассивОбъектов)
	|	И РеализацияТоваровУслугТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|
	|ИТОГИ ПО
	|	Ссылка,
	|	ИспользоватьСерииНоменклатуры";
	
	ЗапросПоСкладам.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	// Создание массива для проверки: какие из докуметов не попали в выборку
	МассивПроверки = Новый Массив;
	Для Каждого Ссылка Из МассивОбъектов Цикл
		МассивПроверки.Добавить(Ссылка);
	КонецЦикла;
	
	ДеревоОбъектов = ЗапросПоСкладам.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для Каждого СтрокаДокумента Из ДеревоОбъектов.Строки Цикл
		
		НомерСтрокиНачало = Неопределено;
		
		Для Каждого ИспользованиеСерий Из СтрокаДокумента.Строки Цикл
			
			ЗапросПоТоварам = Новый Запрос;
			ЗапросПоТоварам.УстановитьПараметр("МассивОбъектов", СтрокаДокумента.Ссылка);
			ЗапросПоТоварам.УстановитьПараметр("МассивСкладов",  ИспользованиеСерий.Строки.ВыгрузитьКолонку("Склад"));
			
			Если ИспользованиеСерий.ИспользоватьСерииНоменклатуры Тогда
				
				ТекстЗапросаПоТоварам = 
				"ВЫБРАТЬ
				|	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
				|	РеализацияТоваровУслугТовары.Склад КАК Склад,
				|	РеализацияТоваровУслугТовары.КоличествоУпаковок КАК КоличествоУпаковок,
				|	РеализацияТоваровУслугТовары.Количество КАК Количество,
				|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
				|	РеализацияТоваровУслугТовары.Характеристика КАК Характеристика,
				|	РеализацияТоваровУслугТовары.Упаковка КАК Упаковка,
				|	"""" КАК Серия
				|ПОМЕСТИТЬ ТаблицаТоваров
				|ИЗ
				|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
				|ГДЕ
				|	РеализацияТоваровУслугТовары.Ссылка В(&МассивОбъектов)
				|	И РеализацияТоваровУслугТовары.Склад В(&МассивСкладов)
				|	И НЕ(РеализацияТоваровУслугТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
				|				И РеализацияТоваровУслугТовары.СтатусУказанияСерий В (2, 4, 6, 8))
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	РеализацияТоваровУслугСерии.Ссылка,
				|	РеализацияТоваровУслугСерии.Склад,
				|	РеализацияТоваровУслугСерии.Количество,
				|	РеализацияТоваровУслугСерии.Количество,
				|	РеализацияТоваровУслугСерии.Номенклатура,
				|	РеализацияТоваровУслугСерии.Характеристика,
				|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка),
				|	РеализацияТоваровУслугСерии.Серия
				|ИЗ
				|	Документ.РеализацияТоваровУслуг.Серии КАК РеализацияТоваровУслугСерии
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаТовары
				|		ПО РеализацияТоваровУслугСерии.Ссылка = ТаблицаТовары.Ссылка
				|			И РеализацияТоваровУслугСерии.Номенклатура = ТаблицаТовары.Номенклатура
				|			И РеализацияТоваровУслугСерии.Характеристика = ТаблицаТовары.Характеристика
				|			И РеализацияТоваровУслугСерии.Склад = ТаблицаТовары.Склад
				|ГДЕ
				|	РеализацияТоваровУслугСерии.Ссылка В(&МассивОбъектов)
				|	И РеализацияТоваровУслугСерии.Склад В(&МассивСкладов)
				|	И РеализацияТоваровУслугСерии.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
				|
				|СГРУППИРОВАТЬ ПО
				|	РеализацияТоваровУслугСерии.Ссылка,
				|	РеализацияТоваровУслугСерии.Склад,
				|	РеализацияТоваровУслугСерии.Номенклатура,
				|	РеализацияТоваровУслугСерии.Характеристика,
				|	РеализацияТоваровУслугСерии.Серия,
				|	РеализацияТоваровУслугСерии.Количество,
				|	РеализацияТоваровУслугСерии.Количество
				|
				|ИМЕЮЩИЕ
				|	МАКСИМУМ(ТаблицаТовары.СтатусУказанияСерий) В (2, 4, 6, 8, 10)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ТаблицаТоваров.Ссылка,
				|	ТаблицаТоваров.Склад,
				|	СУММА(ТаблицаТоваров.КоличествоУпаковок) КАК КоличествоУпаковок,
				|	СУММА(ТаблицаТоваров.Количество) КАК Количество,
				|	ТаблицаТоваров.Номенклатура,
				|	ТаблицаТоваров.Характеристика,
				|	ТаблицаТоваров.Упаковка,
				|	ВЫБОР
				|		КОГДА ТаблицаТоваров.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
				|			ТОГДА NULL
				|		ИНАЧЕ ТаблицаТоваров.Серия
				|	КОНЕЦ КАК Серия
				|ПОМЕСТИТЬ СуммированнаяТаблицаТоваров
				|ИЗ
				|	ТаблицаТоваров КАК ТаблицаТоваров
				|
				|СГРУППИРОВАТЬ ПО
				|	ТаблицаТоваров.Ссылка,
				|	ТаблицаТоваров.Склад,
				|	ТаблицаТоваров.Номенклатура,
				|	ТаблицаТоваров.Характеристика,
				|	ТаблицаТоваров.Упаковка,
				|	ВЫБОР
				|		КОГДА ТаблицаТоваров.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
				|			ТОГДА NULL
				|		ИНАЧЕ ТаблицаТоваров.Серия
				|	КОНЕЦ
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ТаблицаТоваров.Ссылка КАК Ссылка,
				|	ТаблицаТоваров.Ссылка.Организация КАК Организация,
				|	ТаблицаТоваров.Ссылка.Контрагент КАК Контрагент,
				|	ТаблицаТоваров.Ссылка.Номер КАК Номер,
				|	ТаблицаТоваров.Ссылка.Дата КАК Дата,
				|	ТаблицаТоваров.Ссылка.Организация.Префикс КАК Префикс,
				|	ТаблицаТоваров.Склад КАК Склад,
				|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ПредставлениеЕдининицыИзмеренияУпаковки,
				|	ПРЕДСТАВЛЕНИЕ(ТаблицаТоваров.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
				|	ТаблицаТоваров.КоличествоУпаковок КАК КоличествоУпаковок,
				|	ТаблицаТоваров.Количество КАК Количество,
				|	ТаблицаТоваров.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий КАК НастройкаИспользованияСерий,
				|	ТаблицаТоваров.Номенклатура.Код КАК Код,
				|	ТаблицаТоваров.Номенклатура.Артикул КАК Артикул,
				|	ТаблицаТоваров.Номенклатура.НаименованиеПолное КАК ПредставлениеНоменклатуры,
				|	ТаблицаТоваров.Характеристика.НаименованиеПолное КАК ПредставлениеХарактеристики,
				|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
				|	ТаблицаТоваров.Характеристика КАК Характеристика,
				|	ВЫБОР
				|		КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) = 1
				|			ТОГДА НЕОПРЕДЕЛЕНО
				|		ИНАЧЕ ТаблицаТоваров.Упаковка.Наименование
				|	КОНЕЦ КАК Упаковка,
				|	ТаблицаТоваров.Серия.Наименование КАК ПредставлениеСерии,
				|	ВЫБОР
				|		КОГДА ТаблицаТоваров.Ссылка.ВернутьМногооборотнуюТару
				|				И ТаблицаТоваров.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК ЭтоВозвратнаяТара
				|ИЗ
				|	СуммированнаяТаблицаТоваров КАК ТаблицаТоваров
				|
				|ИТОГИ ПО
				|	Ссылка,
				|	Склад,
				|	Номенклатура,
				|	Характеристика
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ТаблицаТоваров.Ссылка КАК Ссылка,
				|	ТаблицаТоваров.Склад КАК Склад,
				|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
				|	ТаблицаТоваров.Характеристика КАК Характеристика,
				|	ТаблицаТоваров.Серия.Наименование КАК ПредставлениеСерии
				|ИЗ
				|	ТаблицаТоваров КАК ТаблицаТоваров
				|ГДЕ
				|	ТаблицаТоваров.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
				|	И НЕ ТаблицаТоваров.Серия ЕСТЬ NULL 
				|";
				
				ТекстЗапросаПоТоварам = СтрЗаменить(ТекстЗапросаПоТоварам, "&ТекстЗапросаКоэффициентУпаковки",
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
						"ТаблицаТоваров.Упаковка",
						"ТаблицаТоваров.Номенклатура"));
						
				ТекстЗапросаПоТоварам = СтрЗаменить(ТекстЗапросаПоТоварам, "&ТекстЗапросаНаименованиеЕдиницыИзмерения",
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
						"Наименование",
						"ТаблицаТоваров.Упаковка",
						"ТаблицаТоваров.Номенклатура"));
				
				ЗапросПоТоварам.Текст	 = ТекстЗапросаПоТоварам;
				МассивРезультатов		 = ЗапросПоТоварам.ВыполнитьПакет();
				
				РезультатДанныеПечати		= МассивРезультатов[2]; // РезультатЗапроса
				РезультатВыборкаПоСериям	= МассивРезультатов[3]; // РезультатЗапроса
				
				ДанныеПечати				= РезультатДанныеПечати.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				ВыборкаПоСериям 			= РезультатВыборкаПоСериям.Выбрать();
				
			Иначе
				
				ТекстЗапросаПоТоварам = 
				"ВЫБРАТЬ
				|	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
				|	РеализацияТоваровУслугТовары.Ссылка.Организация КАК Организация,
				|	РеализацияТоваровУслугТовары.Ссылка.Контрагент КАК Контрагент,
				|	РеализацияТоваровУслугТовары.Ссылка.Номер КАК Номер,
				|	РеализацияТоваровУслугТовары.Ссылка.Дата КАК Дата,
				|	РеализацияТоваровУслугТовары.Ссылка.Организация.Префикс КАК Префикс,
				|	РеализацияТоваровУслугТовары.Склад КАК Склад,
				|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ПредставлениеЕдининицыИзмеренияУпаковки,
				|	ПРЕДСТАВЛЕНИЕ(РеализацияТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
				|	РеализацияТоваровУслугТовары.КоличествоУпаковок КАК КоличествоУпаковок,
				|	РеализацияТоваровУслугТовары.Количество КАК Количество,
				|	РеализацияТоваровУслугТовары.Номенклатура.Код КАК Код,
				|	РеализацияТоваровУслугТовары.Номенклатура.Артикул КАК Артикул,
				|	РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное КАК ПредставлениеНоменклатуры,
				|	РеализацияТоваровУслугТовары.Характеристика.НаименованиеПолное КАК ПредставлениеХарактеристики,
				|	"""" КАК ПредставлениеСерии,
				|	ВЫБОР
				|		КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) = 1
				|			ТОГДА НЕОПРЕДЕЛЕНО
				|		ИНАЧЕ РеализацияТоваровУслугТовары.Упаковка.Наименование
				|	КОНЕЦ КАК Упаковка,
				|	ВЫБОР
				|		КОГДА РеализацияТоваровУслугТовары.Ссылка.ВернутьМногооборотнуюТару
				|				И РеализацияТоваровУслугТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК ЭтоВозвратнаяТара,
				|	NULL КАК НастройкаИспользованияСерий,
				|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
				|	РеализацияТоваровУслугТовары.Характеристика КАК Характеристика
				|ИЗ
				|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
				|ГДЕ
				|	РеализацияТоваровУслугТовары.Ссылка В(&МассивОбъектов)
				|	И РеализацияТоваровУслугТовары.Склад В(&МассивСкладов)
				|	И РеализацияТоваровУслугТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
				|
				|ИТОГИ ПО
				|	Ссылка,
				|	Склад,
				|	Номенклатура,
				|	Характеристика";
				
				ТекстЗапросаПоТоварам = СтрЗаменить(ТекстЗапросаПоТоварам, "&ТекстЗапросаКоэффициентУпаковки",
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
						"РеализацияТоваровУслугТовары.Упаковка",
						"РеализацияТоваровУслугТовары.Номенклатура"));
						
				ТекстЗапросаПоТоварам = СтрЗаменить(ТекстЗапросаПоТоварам, "&ТекстЗапросаНаименованиеЕдиницыИзмерения",
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
						"Наименование",
						"РеализацияТоваровУслугТовары.Упаковка",
						"РеализацияТоваровУслугТовары.Номенклатура"));
				
				ЗапросПоТоварам.Текст = ТекстЗапросаПоТоварам;
				ДанныеПечати = ЗапросПоТоварам.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
			КонецЕсли;
			
			ПервыйДокумент = Истина;
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РеализацияТоваровУслуг.ПФ_MXL_РасходнаяНакладная");
			
			ШиринаОтсутствующихОбластей = 0;
			Если НЕ ВыводитьКоды Тогда
				ШиринаОтсутствующихОбластей = Макет.Область("КолонкаКодов").ШиринаКолонки;
			КонецЕсли;
			
			Если Не ИспользоватьУпаковки Тогда
				
				ШиринаОтсутствующихОбластей = ШиринаОтсутствующихОбластей + Макет.Область("КолонкаКоличестваУпаковок").ШиринаКолонки;
				ШиринаОтсутствующихОбластей = ШиринаОтсутствующихОбластей + Макет.Область("КолонкаПредставленияУпаковок").ШиринаКолонки;
				
			КонецЕсли;
			
			// Раздвинуть колонку "КолонкаТоваров" на ширину отсутствующих областей
			Макет.Область("КолонкаТоваров").ШиринаКолонки = Макет.Область("КолонкаТоваров").ШиринаКолонки + ШиринаОтсутствующихОбластей;
			
			РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс, Представление");
	
			Пока ДанныеПечати.Следующий() Цикл
				
				ИндексМассиваПроверки = МассивПроверки.Найти(ДанныеПечати.Ссылка);
				Если ИндексМассиваПроверки <> Неопределено Тогда
					МассивПроверки.Удалить(ИндексМассиваПроверки);
				КонецЕсли;
				
				Если НомерСтрокиНачало = Неопределено Тогда
					НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ДанныеПечати);
				
				ВыборкаПоСкладам = ДанныеПечати.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоСкладам.Следующий() Цикл
					
					Если Не ПервыйДокумент Тогда
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					
					ПервыйДокумент = Ложь;
					
					Область = Макет.ПолучитьОбласть("Заголовок");
					СтруктураДанныхЗаголовок = Новый Структура;
					СтруктураДанныхЗаголовок.Вставить("ТекстЗаголовка", НСтр("ru = 'Расходная накладная';
																			|en = 'Sales invoice'", ОбщегоНазначения.КодОсновногоЯзыка()));
					ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, Область, ДанныеПечати.Ссылка);
					Область.Параметры.Заполнить(СтруктураДанныхЗаголовок);
					ТабличныйДокумент.Вывести(Область);
					
					Область = Макет.ПолучитьОбласть("Шапка");
					СтруктураДанныхШапка = Новый Структура;
					СтруктураДанныхШапка.Вставить("ПредставлениеРаспоряжения", ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(
						РеквизитыДокумента, НСтр("ru = 'Реализация товаров';
												|en = 'Goods sales'", ОбщегоНазначения.КодОсновногоЯзыка())));
					СтруктураДанныхШапка.Вставить("ПредставлениеСклада", ВыборкаПоСкладам.Склад);
					СтруктураДанныхШапка.Вставить("Склад", ВыборкаПоСкладам.Склад);
					Область.Параметры.Заполнить(СтруктураДанныхШапка);
					ТабличныйДокумент.Вывести(Область);
					
					Область = Макет.ПолучитьОбласть("Поставщик");
					СтруктураДанныхПоставщик = Новый Структура;
					СтруктураДанныхПоставщик.Вставить("ПредставлениеОрганизации", 
						ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ВыборкаПоСкладам.Организация, ВыборкаПоСкладам.Дата), 
							"ПолноеНаименование"));
					СтруктураДанныхПоставщик.Вставить("Организация", ВыборкаПоСкладам.Организация);
					Область.Параметры.Заполнить(СтруктураДанныхПоставщик);
					ТабличныйДокумент.Вывести(Область);
					
					Область = Макет.ПолучитьОбласть("Покупатель");
					СтруктураДанныхПокупатель = Новый Структура;
					СтруктураДанныхПоставщик.Вставить("ПредставлениеПартнера", 
						ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ВыборкаПоСкладам.Контрагент, ВыборкаПоСкладам.Дата),
							"ПолноеНаименование"));
					СтруктураДанныхПоставщик.Вставить("Контрагент", ВыборкаПоСкладам.Контрагент);
					Область.Параметры.Заполнить(СтруктураДанныхПоставщик);
					ТабличныйДокумент.Вывести(Область);
					
					Область = Макет.ПолучитьОбласть("ШапкаТаблицы|НачалоСтроки");
					ТабличныйДокумент.Вывести(Область);
					Если ВыводитьКоды Тогда
						Область = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
						СтруктураДанныхКоды = Новый Структура("ИмяКолонкиКодов", ПредставлениеКолонкиКодов);
						Область.Параметры.Заполнить(СтруктураДанныхКоды);
						ТабличныйДокумент.Присоединить(Область);
					КонецЕсли;
					Область = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаТоваров");
					ТабличныйДокумент.Присоединить(Область);
					Если ИспользоватьУпаковки Тогда
						Область = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкиУпаковок");
						ТабличныйДокумент.Присоединить(Область);
					КонецЕсли;
					Область = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкиКоличества");
					ТабличныйДокумент.Присоединить(Область);
					
					ОбластьНачалоСтроки		 = Макет.ПолучитьОбласть("СтрокаТаблицы|НачалоСтроки");
					ОбластьКолонкаКодов		 = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
					ОбластьКолонкаТоваров	 = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаТоваров");
					ОбластьКолонкаУпаковок	 = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкиУпаковок");
					ОбластьКолонкаКоличества = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкиКоличества");
	
					СчетСтрок = 1;
	
					ВыборкаПоСсылкамТЧ = ВыборкаПоСкладам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
					Пока ВыборкаПоСсылкамТЧ.Следующий() Цикл
	
						ВыборкаПоНоменклатуреТЧ = ВыборкаПоСсылкамТЧ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
						Пока ВыборкаПоНоменклатуреТЧ.Следующий() Цикл
	
							ВыборкаПоСтрокамТЧ = ВыборкаПоНоменклатуреТЧ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
							
							ПерваяСтрока = Истина;
							СтрокаУпаковок = "";
							СтрокаКоличесткаУпаковок = "";
							СтрокаЕдиницИзмерений = "";
							СтрокаКоличества = "";
							
							Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
								
								Если ВыборкаПоСтрокамТЧ.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара Тогда
									
									Если ПерваяСтрока Тогда
										
										СтруктураДанныхНомерСтроки = Новый Структура("НомерСтроки", СчетСтрок);
										ОбластьНачалоСтроки.Параметры.Заполнить(СтруктураДанныхНомерСтроки);
										СчетСтрок = СчетСтрок + 1;
										ТабличныйДокумент.Вывести(ОбластьНачалоСтроки);
										Если ВыводитьКоды Тогда
											СтруктураДанныхКоды = Новый Структура("ЗначениеКода", ВыборкаПоСтрокамТЧ[ИмяКолонкиКодов]);
											ОбластьКолонкаКодов.Параметры.Заполнить(СтруктураДанныхКоды);
											ТабличныйДокумент.Присоединить(ОбластьКолонкаКодов);
										КонецЕсли;
										
										СтруктураПоиска = Новый Структура;
										СтруктураПоиска.Вставить("Ссылка", ВыборкаПоСтрокамТЧ.Ссылка);
										СтруктураПоиска.Вставить("Склад", ВыборкаПоСтрокамТЧ.Склад);
										СтруктураПоиска.Вставить("Номенклатура", ВыборкаПоСтрокамТЧ.Номенклатура);
										СтруктураПоиска.Вставить("Характеристика", ВыборкаПоСтрокамТЧ.Характеристика);
										
										СтрокаСерий = "";
										Пока ВыборкаПоСериям.НайтиСледующий(СтруктураПоиска) Цикл
											СтрокаСерий = СтрокаСерий + ВыборкаПоСериям.ПредставлениеСерии + ", ";
										КонецЦикла;
										
										Если СтрДлина(СтрокаСерий) <> 0 Тогда
											СтрокаСерий = Лев(СтрокаСерий, СтрДлина(СтрокаСерий) - 2);
										КонецЕсли;
										
										ДополнительныеПараметрыПолученияНаименованияДляПечати = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
										ДополнительныеПараметрыПолученияНаименованияДляПечати.ВозвратнаяТара = ВыборкаПоСтрокамТЧ.ЭтоВозвратнаяТара;
										ДополнительныеПараметрыПолученияНаименованияДляПечати.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
										
										Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
											ВыборкаПоСтрокамТЧ.ПредставлениеНоменклатуры,
											ВыборкаПоСтрокамТЧ.ПредставлениеХарактеристики,
											,
											СтрокаСерий,
											ДополнительныеПараметрыПолученияНаименованияДляПечати);
										
										СтруктураДанныхТовар = Новый Структура("Товар", Товар);
										ОбластьКолонкаТоваров.Параметры.Заполнить(СтруктураДанныхТовар);
										
										ТабличныйДокумент.Присоединить(ОбластьКолонкаТоваров);
										
										ПерваяСтрока = Ложь;
										
									КонецЕсли;
									
									Если ИспользоватьУпаковки Тогда
										СтрокаУпаковок = СтрокаУпаковок + ВыборкаПоСтрокамТЧ.ПредставлениеЕдининицыИзмеренияУпаковки + Символы.ПС;
										СтрокаКоличесткаУпаковок = СтрокаКоличесткаУпаковок + ВыборкаПоСтрокамТЧ.КоличествоУпаковок + Символы.ПС;
									КонецЕсли;
									
									СтрокаЕдиницИзмерений = СтрокаЕдиницИзмерений + ВыборкаПоСтрокамТЧ.ПредставлениеБазовойЕдиницыИзмерения + Символы.ПС;
									СтрокаКоличества = СтрокаКоличества + ВыборкаПоСтрокамТЧ.Количество + Символы.ПС;
									
									ТоварССериейЭкземпляром = Истина;
									
								Иначе	
									
									СтруктураДанныхНомерСтроки = Новый Структура("НомерСтроки", СчетСтрок);
									ОбластьНачалоСтроки.Параметры.Заполнить(СтруктураДанныхНомерСтроки);
									СчетСтрок = СчетСтрок + 1;
									ТабличныйДокумент.Вывести(ОбластьНачалоСтроки);
									
									Если ВыводитьКоды Тогда
										СтруктураДанныхКоды = Новый Структура("ЗначениеКода", ВыборкаПоСтрокамТЧ[ИмяКолонкиКодов]);
										ОбластьКолонкаКодов.Параметры.Заполнить(СтруктураДанныхКоды);
										ТабличныйДокумент.Присоединить(ОбластьКолонкаКодов);
									КонецЕсли;
									
									ДополнительныеПараметрыПолученияНаименованияДляПечати = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
									ДополнительныеПараметрыПолученияНаименованияДляПечати.ВозвратнаяТара = ВыборкаПоСтрокамТЧ.ЭтоВозвратнаяТара;
									ДополнительныеПараметрыПолученияНаименованияДляПечати.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
									
									Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
										ВыборкаПоСтрокамТЧ.ПредставлениеНоменклатуры,
										ВыборкаПоСтрокамТЧ.ПредставлениеХарактеристики,
										,
										ВыборкаПоСтрокамТЧ.ПредставлениеСерии,
										ДополнительныеПараметрыПолученияНаименованияДляПечати);
										
									СтруктураДанныхТовар = Новый Структура("Товар", Товар);
									ОбластьКолонкаТоваров.Параметры.Заполнить(СтруктураДанныхТовар);
									
									ТабличныйДокумент.Присоединить(ОбластьКолонкаТоваров);
									
									Если ИспользоватьУпаковки Тогда
										ОбластьКолонкаУпаковок.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
										ТабличныйДокумент.Присоединить(ОбластьКолонкаУпаковок);
									КонецЕсли;
									
									ОбластьКолонкаКоличества.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
									ТабличныйДокумент.Присоединить(ОбластьКолонкаКоличества);
									
									ТоварССериейЭкземпляром = Ложь;
									
								КонецЕсли;
								
							КонецЦикла;
							
							Если ТоварССериейЭкземпляром Тогда
								Если ИспользоватьУпаковки Тогда
									СтруктураДанныхКолонкаУпаковок = Новый Структура;
									СтруктураДанныхКолонкаУпаковок.Вставить("КоличествоУпаковок", СтрокаКоличесткаУпаковок);
									СтруктураДанныхКолонкаУпаковок.Вставить("ПредставлениеЕдининицыИзмеренияУпаковки", СтрокаУпаковок);
									ОбластьКолонкаУпаковок.Параметры.Заполнить(СтруктураДанныхКолонкаУпаковок);
									ТабличныйДокумент.Присоединить(ОбластьКолонкаУпаковок);
								КонецЕсли;
								
								СтруктураДанныхКолонкаКоличества = Новый Структура;
								СтруктураДанныхКолонкаКоличества.Вставить("Количество", СтрокаКоличества);
								СтруктураДанныхКолонкаКоличества.Вставить("ПредставлениеБазовойЕдиницыИзмерения", СтрокаЕдиницИзмерений);
								ОбластьКолонкаКоличества.Параметры.Заполнить(СтруктураДанныхКолонкаКоличества);
								ТабличныйДокумент.Присоединить(ОбластьКолонкаКоличества);
								
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЦикла;
					
					Область = Макет.ПолучитьОбласть("ПодвалТаблицы|НачалоСтроки");
					ТабличныйДокумент.Вывести(Область);
					Если ВыводитьКоды Тогда
						Область = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
						ТабличныйДокумент.Присоединить(Область);
					КонецЕсли;
					Область = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаТоваров");
					ТабличныйДокумент.Присоединить(Область);
					Если ИспользоватьУпаковки Тогда
						Область = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкиУпаковок");
						ТабличныйДокумент.Присоединить(Область);
					КонецЕсли;
					Область = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкиКоличества");
					ТабличныйДокумент.Присоединить(Область);
					
					Область = Макет.ПолучитьОбласть("Подписи");
					ТекстИтоговойСтроки = НСтр("ru = 'Всего наименований %ВсегоНаименований%';
												|en = 'Total items %ВсегоНаименований%'", ОбщегоНазначения.КодОсновногоЯзыка());
					ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%ВсегоНаименований%", СчетСтрок-1);
					СтруктураДанныхИтоговаяСтрока = Новый Структура;
					СтруктураДанныхЗаголовок.Вставить("ИтоговаяСтрока", ТекстИтоговойСтроки);
					Область.Параметры.Заполнить(СтруктураДанныхЗаголовок);
					ТабличныйДокумент.Вывести(Область);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если Не НомерСтрокиНачало = Неопределено Тогда
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, СтрокаДокумента.Ссылка);
		КонецЕсли;
	
	КонецЦикла;
	
	Для Каждого Ссылка Из МассивПроверки Цикл
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В документе %1 отсутствуют товары. Печать расходной накладной не требуется.';
				|en = 'Goods are missing in document %1. Printing of a sales invoice is not required.'"),
			Ссылка);
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			Ссылка);
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция СформироватьПечатнуюФормуСписокКМ(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	//Если МассивОбъектов.Количество() = 0 Тогда
	//	Возврат ТабДок;
	//КонецЕсли;
	
	Для каждого МассивОбъект из МассивОбъектов Цикл
		
		МакетОбработки = Документы.РеализацияТоваровУслуг.ПолучитьМакет("гф_СписокКодовМаркировки");
		
		ОбластьШапки = МакетОбработки.ПолучитьОбласть("Шапка");
		ОбластьСтроки = МакетОбработки.ПолучитьОбласть("СтрокаТЧ");
		
		ОбластьШапки.Параметры.НомерРеализации = МассивОбъект.Номер;
		ОбластьШапки.Параметры.Дата = Формат(МассивОбъект.Дата, "ДЛФ=DD");
		
		ТабДок.Вывести(ОбластьШапки);
		Номер = 0;
		
		Если МассивОбъект.гф_ТоварыВКоробах.Количество() = 0 Тогда 
			
			Для Каждого СтрокаТовар Из МассивОбъект.Товары Цикл
				
				Для Каждого СторкаШтрихкод Из МассивОбъект.ШтрихкодыУпаковок Цикл
					Если СторкаШтрихкод.ШтрихкодУпаковки.Номенклатура.Артикул = СтрокаТовар.Номенклатура.Артикул И СторкаШтрихкод.ШтрихкодУпаковки.Характеристика.Наименование = СтрокаТовар.Характеристика.Наименование Тогда
						ЗначениеКМ  = СторкаШтрихкод.ШтрихкодУпаковки.ЗначениеШтрихкода;
						ЗначениеГТД = СторкаШтрихкод.ШтрихкодУпаковки.гф_НомерГТД.Код;
						Прервать;
					Иначе
						ЗначениеКМ  = "--";
						ЗначениеГТД = "--";
					КонецЕсли;
				КонецЦикла;
				
				//Для Каждого СторкаГТД Из МассивОбъект.ВидыЗапасов Цикл
				//	Если СторкаГТД.АналитикаУчетаНоменклатуры.Номенклатура.Артикул = СтрокаТовар.Номенклатура.Артикул И СторкаГТД.АналитикаУчетаНоменклатуры.Характеристика.Наименование = СтрокаТовар.Характеристика.Наименование Тогда
				//		ЗначениеГТД = СторкаГТД.НомерГТД.Код;
				//		Прервать;
				//	Иначе
				//		ЗначениеГТД = "--";
				//	КонецЕсли;
				//КонецЦикла; 
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
				|	ШтрихкодыНоменклатуры.Номенклатура.Наименование КАК НоменклатураНаименование
				|ИЗ
				|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
				|ГДЕ
				|	ШтрихкодыНоменклатуры.Номенклатура.Ссылка = &Ссылка
				|	И ШтрихкодыНоменклатуры.Характеристика = &Характеристика";
				Запрос.Параметры.Вставить("Ссылка", СтрокаТовар.Номенклатура);
				Запрос.Параметры.Вставить("Характеристика", СтрокаТовар.Характеристика);
				ТабШтрих = Запрос.Выполнить().Выгрузить();
				Если Не ТабШтрих.Количество() = 0 Тогда 
					ТабШтрихкод = ТабШтрих[0].Штрихкод;
				Иначе
					ТабШтрихкод = "--";
				КонецЕсли;
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЗаказКлиента.гф_ИмяЗаказа КАК гф_ИмяЗаказа,
				|	ЗаказКлиента.Номер КАК Номер
				|ИЗ
				|	Документ.ЗаказКлиента КАК ЗаказКлиента
				|ГДЕ
				|	ЗаказКлиента.Ссылка = &Ссылка";
				Запрос.Параметры.Вставить("Ссылка", СтрокаТовар.ЗаказКлиента);
				ТабКлиент = Запрос.Выполнить().Выгрузить();
				Если Не ТабКлиент.Количество() = 0 Тогда
					Если ТабКлиент[0].гф_ИмяЗаказа = "" Тогда
						ИмяЗаказаКлиента = "--";
					Иначе
						ИмяЗаказаКлиента = ТабКлиент[0].гф_ИмяЗаказа;
					КонецЕсли;
					КодЗаказаКлиента = ТабКлиент[0].Номер;
				Иначе
					ИмяЗаказаКлиента = "--";
					КодЗаказаКлиента = "--";
				КонецЕсли;
				
				Номер = Номер + 1;
				ОбластьСтроки.Параметры.НомерСтроки           = Номер;
				ОбластьСтроки.Параметры.Упаковка              = "--";
				ОбластьСтроки.Параметры.Агрегации             = "--";
				ОбластьСтроки.Параметры.АртикулХарактеристика = СтрокаТовар.Номенклатура.Артикул + "/" + СтрокаТовар.Характеристика.Наименование;
				ОбластьСтроки.Параметры.Штрихкод              = ТабШтрихкод;
				ОбластьСтроки.Параметры.Код                   = ЗначениеКМ; 
				ОбластьСтроки.Параметры.Наименование          = СтрокаТовар.Номенклатура.НаименованиеПолное;
				ОбластьСтроки.Параметры.НомерГТД              = ЗначениеГТД;
				ОбластьСтроки.Параметры.ИмяЗаказа             = ИмяЗаказаКлиента;
				ОбластьСтроки.Параметры.НомерЗаказа           = КодЗаказаКлиента;
				
				ТабДок.Вывести(ОбластьСтроки);
				
			КонецЦикла;
			
		Иначе
			Для Каждого СтрокаТовараВКоробах Из МассивОбъект.гф_ТоварыВКоробах Цикл
				
				ОбъектУЛ = СтрокаТовараВКоробах.УпаковочныйЛист.ПолучитьОбъект();
				
				ОбластьСтроки.Параметры.Упаковка = ОбъектУЛ.гф_Комплектация;
				АртикулУЛ = СтрокаТовараВКоробах.Артикул;
				
				ОбъектШк = ОбъектУл.гф_Агрегация.ПолучитьОбъект(); 
				Для Каждого СтрокаАгрегации Из ОбъектШк.ВложенныеШтрихкоды Цикл 
					
					Запрос = Новый Запрос;
					Запрос.Текст =
					
					"ВЫБРАТЬ
					|	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
					|	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика,
					|	ШтрихкодыУпаковокТоваров.ПометкаУдаления КАК ПометкаУдаления
					|ИЗ
					|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
					|ГДЕ
					|	ШтрихкодыУпаковокТоваров.Ссылка = &Ссылка";
					
					Запрос.Параметры.Вставить("Ссылка",СтрокаАгрегации.Штрихкод);
					
					ТабСпр = Запрос.Выполнить().Выгрузить();
					КолТабСпр = ТабСпр.Количество();
					Если Не КолТабСпр = 0 Тогда
						ТабСпрХарактеристика = ТабСпр[0].Характеристика;
					Иначе
						ТабСпрХарактеристика = "--"
					КонецЕсли;
					
					НайденыеСтр = ТабСпр.НайтиСтроки(Новый Структура("ПометкаУдаления", Ложь));
					Если НайденыеСтр.Количество() > 0 Тогда
						
						ОбластьСтроки.Параметры.АртикулХарактеристика = "" + АртикулУЛ + "/" + НайденыеСтр[0].Характеристика;
					Иначе 
						ОбластьСтроки.Параметры.АртикулХарактеристика = "" + АртикулУЛ + "/" + ТабСпрХарактеристика;
					КонецЕсли; 
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	ЗаказКлиента.гф_ИмяЗаказа КАК гф_ИмяЗаказа,
					|	ЗаказКлиента.Номер КАК Номер
					|ИЗ
					|	Документ.ЗаказКлиента КАК ЗаказКлиента
					|ГДЕ
					|	ЗаказКлиента.Ссылка = &Ссылка";
					
					Запрос.Параметры.Вставить("Ссылка",ОбъектУЛ.гф_Заказ);
					
					ТабКлиент = Запрос.Выполнить().Выгрузить();
					
					Запрос = Новый Запрос;
					Запрос.Текст =
					"ВЫБРАТЬ
					|	Номенклатура.НаименованиеПолное КАК НаименованиеПолное
					|ИЗ
					|	Справочник.Номенклатура КАК Номенклатура
					|ГДЕ
					|	Номенклатура.Ссылка = &Ссылка";
					
					Запрос.Параметры.Вставить("Ссылка",СтрокаАгрегации.Штрихкод.Номенклатура);
					
					ТабНоменклатура = Запрос.Выполнить().Выгрузить();
					КолТабНоменклатура = ТабНоменклатура.Количество();
					Если Не КолТабНоменклатура = 0 Тогда
						ТабНомНаим = ТабНоменклатура[0].НаименованиеПолное;
					Иначе
						ТабНомНаим = "--"
					КонецЕсли;
					
					Если Не ТабКлиент.Количество() = 0 Тогда
						Если ТабКлиент[0].гф_ИмяЗаказа = "" Тогда
							ИмяЗаказаКлиента = "--";
						Иначе
							ИмяЗаказаКлиента = ТабКлиент[0].гф_ИмяЗаказа;
						КонецЕсли;
						КодЗаказаКлиента = ТабКлиент[0].Номер;
					Иначе
						ИмяЗаказаКлиента = "--";
						КодЗаказаКлиента = "--";
					КонецЕсли;
					
					Запрос = Новый Запрос;
					Запрос.Текст =
					"ВЫБРАТЬ
					|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
					|	ШтрихкодыНоменклатуры.Номенклатура.Наименование КАК НоменклатураНаименование
					|ИЗ
					|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
					|ГДЕ
					|	ШтрихкодыНоменклатуры.Номенклатура.Ссылка = &Ссылка
					|	И ШтрихкодыНоменклатуры.Характеристика = &Характеристика";
					Запрос.Параметры.Вставить("Ссылка",СтрокаАгрегации.Штрихкод.Номенклатура);
					Запрос.Параметры.Вставить("Характеристика",СтрокаАгрегации.Штрихкод.Характеристика);
					ТабШтрих = Запрос.Выполнить().Выгрузить();
					КолТабШтрих = ТабШтрих.Количество();
					Если Не КолТабШтрих = 0 Тогда 
						ТабШтрихкод = ТабШтрих[0].Штрихкод;
					Иначе
						ТабШтрихкод = "--";
					КонецЕсли;
					
					Номер = Номер + 1;
					ОбластьСтроки.Параметры.НомерСтроки  = Номер;
					ОбластьСтроки.Параметры.Агрегации    = ОбъектУЛ.Код;
					ОбластьСтроки.Параметры.НомерГТД     = СтрокаАгрегации.Штрихкод.гф_НомерГТД.Код;
					ОбластьСтроки.Параметры.НомерЗаказа  = КодЗаказаКлиента;
					ОбластьСтроки.Параметры.ИмяЗаказа    = ИмяЗаказаКлиента;
					ОбластьСтроки.Параметры.Наименование = ТабНомНаим;
					ОбластьСтроки.Параметры.Код          = СтрокаАгрегации.Штрихкод;
					ОбластьСтроки.Параметры.Штрихкод     = ТабШтрихкод;
					
					ТабДок.Вывести(ОбластьСтроки);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции

Функция ПолучитьДанныеДокументаРасходныйОрдерНаТовары(Источник)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка КАК Ссылка,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.НомерСтроки КАК НомерСтроки,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Номенклатура КАК Номенклатура,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Характеристика КАК Характеристика,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Назначение КАК Назначение,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Серия КАК Серия,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение КАК Распоряжение,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Количество КАК Количество
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
	|ГДЕ
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.НомерСтроки,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Номенклатура,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Характеристика,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Назначение,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Серия,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.СтатусУказанияСерий,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Количество";
	
	Запрос.УстановитьПараметр("Ссылка", Источник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеДокументаРасходныйОрдерНаТовары = РезультатЗапроса.Выгрузить();
	
	Возврат ДанныеДокументаРасходныйОрдерНаТовары;
	
КонецФункции

Функция ПолучитьДанныеПоДокументуКорректировкаНазначенияТоваров(Источник)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаНазначенияТоваров.Ссылка КАК Ссылка,
	|	КорректировкаНазначенияТоваров.ДокументОснование КАК ДокументОснование,
	|	КорректировкаНазначенияТоваров.Назначение КАК Назначение
	|ИЗ
	|	Документ.КорректировкаНазначенияТоваров КАК КорректировкаНазначенияТоваров
	|ГДЕ
	|	КорректировкаНазначенияТоваров.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", Источник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи;
	
КонецФункции

Функция ПолучитьДанныеПоДокументуПеремещениеТоваров(Источник)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПеремещениеТоваров.ЗаказНаПеремещение КАК ЗаказНаПеремещение,
	|	ПеремещениеТоваров.ДокументОснование КАК ДокументОснование,
	|	ПеремещениеТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", Источник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи;
	
КонецФункции

Функция ПолучитьДокументОснованиеКорректировка(Источник, Назначение)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КорректировкаНазначенияТоваров.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.КорректировкаНазначенияТоваров КАК КорректировкаНазначенияТоваров
		|ГДЕ
		|	КорректировкаНазначенияТоваров.ДокументОснование = &ДокументОснование
		|	И КорректировкаНазначенияТоваров.Назначение = &Назначение";
	
	Запрос.УстановитьПараметр("ДокументОснование", Источник);
	Запрос.УстановитьПараметр("Назначение", Назначение);
	
	Результат = ОбработатьВыборкуСсылкиНаДокумент(Запрос);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДокументОснованиеПоЗаказуКлиента(Источник, Распоряжение)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПеремещениеТоваров.ЗаказНаПеремещение КАК ЗаказНаПеремещение,
	|	ПеремещениеТоваров.ДокументОснование КАК ДокументОснование,
	|	ПеремещениеТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.гф_ЗаказКлиента = &ЗаказКлиента
	|	И ПеремещениеТоваров.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", Источник);
	Запрос.УстановитьПараметр("ЗаказКлиента", Распоряжение);
	
	Результат = ОбработатьВыборкуСсылкиНаДокумент(Запрос);
	
	Возврат Результат;
	
КонецФункции

Процедура гф_ДобавитьТоварыПоУпаковочномуЛистуРеализация(УпаковочныйЛист, ТоварыВКоробах, ВидыЗапасов, ДокОбъект,
	КлючСвязи, КодСтроки, ОбщаяСуммаПоУпаковочногоЛиста, СкладскаяОперация, Заказ, Источник
	, НДСУпаковочногоЛиста, СтавкаНДСУпаковочногоЛиста); // СадомцевСА 19.01.2024 Добавил параметр. ВолковЕВ 18.03.2024 Добавил параметр

	// ++ Галфинд Волков 06.03.2023 код ниже нужно выполнять в любом случае, ниже добавлены/есть условия по дополнительным свойствам
	//// vvv Галфинд \ Sakovich 02.03.2023
	//ДопСвойствоУпаковочныйЛист = Неопределено;
	//Источник.ДополнительныеСвойства("гф_УпаковочныйЛист", ДопСвойствоУпаковочныйЛист);
	//Если ДопСвойствоУпаковочныйЛист = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//// ^^^ Галфинд \ Sakovich 02.03.2023 
	//Источник.ДополнительныеСвойства.Свойство("гф_УпаковочныйЛист", ДопСвойствоУпаковочныйЛист);
	// -- Галфинд Волков 06.03.2023
	
	// При выполнении обработки "Отгрузка по заказам" передаем коды строк номенклатуры через дополнительные свойства, так как упаковочный лист еще
	// не записан, поэтому коды строк тянем из заказа.
	// А при интерактивном проведении ордера коды строк номенклатуры вытаскиваем по ссылке из упаковочного листа, из его табличной части
	Если Источник.ДополнительныеСвойства.Свойство("гф_УпаковочныйЛист") Тогда
		
		НайтиСтроки = Источник.ДополнительныеСвойства.гф_УпаковочныйЛист.НайтиСтроки(Новый Структура("УпаковочныйЛист", УпаковочныйЛист));
		
		// Типизируем колонки таблицы значений для работы с запросом
		СписокКодовСтроки = Новый ТаблицаЗначений;
		СписокКодовСтроки.Колонки.Добавить("КодСтроки", Новый ОписаниеТипов("Число"));
		СписокКодовСтроки.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
		СписокКодовСтроки.Колонки.Добавить("УпаковочныйЛист", Новый ОписаниеТипов("ДокументСсылка.УпаковочныйЛист"));
		СписокКодовСтроки.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		СписокКодовСтроки.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		
		Если НайтиСтроки.Количество() > 0 Тогда
			Для каждого Стр Из НайтиСтроки[0].СписокКодовСтроки Цикл
				
				// Получаем коды строк из заказа по номенклатуре которую требуется отгружать по упаковочному листу
				ЗаполнитьЗначенияСвойств(СписокКодовСтроки.Добавить(), Стр);
				
			КонецЦикла;
		КонецЕсли;
		
		ВыборкаДанные = ПолучитьТекстзапросаСКодомиСтрокПоУпаковочнымЛистамСЗаказом(УпаковочныйЛист, Заказ, СписокКодовСтроки)
		
	Иначе
		
		ВыборкаДанные = ПолучитьТекстзапросаСКодомиСтрокПоУпаковочнымЛистам(УпаковочныйЛист)
		
	КонецЕсли;
		
	КэшированныеЗначения = Неопределено;
	
	Для Каждого Выборка Из ВыборкаДанные Цикл
		
		НоваяСтрока = ТоварыВКоробах.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		// ++ Галфинд ВолковЕВ 01.02.2023
		// Документ Перемещение не содержит реквизит "Склад" в отличии документа "Реализация"
		//ДокументСодержитСклад = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокОбъект, "Склад");
		
		//Если СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаКлиенту И ДокументСодержитСклад Тогда
			// vvv Галфинд \ Sakovich 09.01.2023
			Если ЗначениеЗаполнено(ДокОбъект["Склад"]) И Не ЗначениеЗаполнено(НоваяСтрока["Склад"]) Тогда
				НоваяСтрока["Склад"] = ДокОбъект["Склад"];
			КонецЕсли;	
			// ^^^ Галфинд \ Sakovich 09.01.2023
			Склад = НоваяСтрока.Склад;
		//Иначе
		//	Склад = Неопределено;
		//КонецЕсли;
		// -- Галфинд ВолковЕВ 01.02.2023
		ЗаказКлиента = УпаковочныйЛист.гф_Заказ;
		
		// Документ Перемещение не содержит реквизит "ЗаказКлиента" в отличии документа "Реализация"
		НоваяСтрокаСодержитЗаказКлиента = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокОбъект, "ЗаказКлиента");
		
		Если СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаКлиенту И НоваяСтрокаСодержитЗаказКлиента Тогда
			НоваяСтрока.ЗаказКлиента = ЗаказКлиента;
		КонецЕсли;
	
		Для Каждого СтрокаУпаковочныйЛистНоменклатура Из УпаковочныйЛист.Товары Цикл
			
			Если НоваяСтрока.Номенклатура = СтрокаУпаковочныйЛистНоменклатура.Номенклатура
				И НоваяСтрока.Характеристика = СтрокаУпаковочныйЛистНоменклатура.Характеристика 
				И НоваяСтрока.Количество = СтрокаУпаковочныйЛистНоменклатура.Количество Тогда
				
				//Если Не СтрокаУпаковочныйЛистНоменклатура.гф_КодСтрокиДополнительныеСведения = "" И НоваяСтрока.Количество > 1 Тогда
				//	
				//	// Получить массив с разделителем
				//	МассивКодовСтрок = СтрРазделить(СтрокаУпаковочныйЛистНоменклатура.гф_КодСтрокиДополнительныеСведения, ",");
				//	
				//	ЗапомнитьКоличество = НоваяСтрока.Количество;
				//	НоваяСтрока.Количество = 1;
				//	НоваяСтрока.КоличествоУпаковок = 1;
				//	
				//	Для Каждого ЭлементМассива Из МассивКодовСтрок Цикл
				//		
				//		Стр = ТоварыВКоробах.Добавить();
				//		ЗаполнитьЗначенияСвойств(Стр, НоваяСтрока);
				//		Стр.Количество = 1;
				//		Стр.КоличествоУпаковок = 1;
				//		
				//		Стр.КодСтроки = Число(ЭлементМассива);
				//		
				//		Стр.КлючСвязи = КлючСвязи + 1;
				//		
				//		Стр.АналитикаУчетаНоменклатуры = ПолучитьАналитикаУчетаНоменклатуры(Стр.Номенклатура, Стр.Характеристика,
				//		Стр.Серия, Стр.Назначение, Стр.Склад);
				//		
				//	КонецЦикла;
				//	НоваяСтрока.КодСтроки = СтрокаУпаковочныйЛистНоменклатура.гф_КодСтроки;
				//	
				//	Прервать;
				//	
				//Иначе
					НоваяСтрока.КодСтроки = СтрокаУпаковочныйЛистНоменклатура.гф_КодСтроки;
					ДокОбъект.Комментарий = Выборка.гф_КомментарийРТУ;
						
					Если НоваяСтрокаСодержитЗаказКлиента Тогда
						
						НоваяСтрока.ПроцентРучнойСкидки = 0;
						
		// ++ Галфинд ОкуневАА 28.12.2023
						//Если Не ЗаказКлиента.гф_СезонныйЗаказ Тогда
						//	Если ЗначениеЗаполнено(Выборка.гф_СкидкаДляРТУ) <> 0 Тогда
						//		НоваяСтрока.Цена = (Выборка.Цена * Выборка.гф_СкидкаДляРТУ / 100 - Выборка.Цена) * (-1);
						//	КонецЕсли;
						//Иначе
		// -- Галфинд ОкуневАА 28.12.2023
							
							// Необходимо оптимизировать получение цены для одинаковой номенкатуры
							//ЦенаПоВидуНоменклатуры = ПолучитьЦенуНоменклатуры();
							
							// ++ Галфинд ОкуневАА 26.11.2023
							Если ЗначениеЗаполнено(Выборка.гф_ПрайсЛистДляРТУ) Тогда
								Запрос = Новый Запрос;
								Запрос.Текст = 
								"ВЫБРАТЬ РАЗРЕШЕННЫЕ
								|	ЦеныНоменклатуры25СрезПоследних.Номенклатура КАК Номенклатура,
								|	ЦеныНоменклатуры25СрезПоследних.Цена КАК Цена,
								|	ЦеныНоменклатуры25СрезПоследних.ВидЦены КАК ВидЦены
								|ИЗ
								|	РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(
								|			&Период,
								|			Номенклатура = &Номенклатура
								|				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатуры25СрезПоследних";
								
								Запрос.УстановитьПараметр("ВидЦены", Выборка.гф_ПрайсЛистДляРТУ);
								Запрос.УстановитьПараметр("Номенклатура", НоваяСтрока.Номенклатура);
								Запрос.УстановитьПараметр("Период", КонецДня(Выборка.гф_ДатаДляРТУ));
								
								РезультатЗапроса = Запрос.Выполнить();
								
								ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
								
								Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
									НоваяСтрока.Цена = ВыборкаДетальныеЗаписи.Цена;
									Прервать;
								КонецЦикла;
							КонецЕсли;
							// -- Галфинд ОкуневАА 26.11.2023
							
							Если ЗначениеЗаполнено(Выборка.гф_СкидкаДляРТУ) <> 0 Тогда
								НоваяСтрока.Цена = (НоваяСтрока.Цена * Выборка.гф_СкидкаДляРТУ / 100 - НоваяСтрока.Цена) * (-1);
							КонецЕсли;
							
		// ++ Галфинд ОкуневАА 28.12.2023
						//КонецЕсли;
		// -- Галфинд ОкуневАА 28.12.2023
						
						ОбщаяСуммаПоУпаковочногоЛиста = ОбщаяСуммаПоУпаковочногоЛиста + НоваяСтрока.Цена * НоваяСтрока.Количество;
						
						// Ниже используется части типового кода для обработки пересчета сумм в строках, взяты из документов где пересчитываются данные в ТЧ
						ТекущаяСтрока = НоваяСтрока;
						
						КэшированныеЗначения = Неопределено;
						
						СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ДокОбъект);
						// Минимальный набор действий при котором выполняется пересчет в общем модуле
						СтруктураДействий = Новый Структура;
						СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
						СтруктураДействий.Вставить("ПересчитатьСумму");
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами");
						СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
						// vvv Галфинд \ Sakovich 25.04.2023
						// закомментировано - применимость к типовому релизу 2.5.11.96
						//СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
						// ^^^ Галфинд \ Sakovich 25.04.2023
						
						// ++ Галфинд Волков 27.04.2023 Возврат к общему модулю после обновления новым релизом 2.5.11.96
						//СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
						//	ДокОбъект.РеализацияПоЗаказам, ДокОбъект.ТребуетсяЗалогЗаТару));
						
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
						//ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
						// ++ Галфинд Волков 27.04.2023
					//КонецЕсли;
						// СадомцевСА 19.01.2024 Исправил расчет суммы НДС с учетом скидки для короба в РТУ
						НДСУпаковочногоЛиста = НДСУпаковочногоЛиста + ТекущаяСтрока.СуммаНДС;
						
						// ++ Галфинд ВолковЕВ 2024/03/19
						СтавкаНДСУпаковочногоЛиста = НоваяСтрока.СтавкаНДС;
						// -- Галфинд ВолковЕВ 2024/03/19
					Прервать;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаКлиенту Тогда
			НоваяСтрока.КлючСвязи = КлючСвязи + 1;
		КонецЕсли;
	
		НоваяСтрока.АналитикаУчетаНоменклатуры = ПолучитьАналитикаУчетаНоменклатуры(НоваяСтрока.Номенклатура, НоваяСтрока.Характеристика,
			НоваяСтрока.Серия, НоваяСтрока.Назначение, Склад);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура гф_ДобавитьТоварыПоУпаковочномуЛистуПеремещение(УпаковочныйЛист, ТоварыВКоробах, ВидыЗапасов, ДокОбъект,
	КлючСвязи, КодСтроки, ОбщаяСуммаПоУпаковочногоЛиста, СкладскаяОперация, Заказ, Источник)      
	
	// ++ Галфинд Волков 06.03.2023 код ниже нужно выполнять в любом случае, ниже добавлены/есть условия по дополнительным свойствам
	//// vvv Галфинд \ Sakovich 02.03.2023
	//ДопСвойствоУпаковочныйЛист = Неопределено;
	//Источник.ДополнительныеСвойства("гф_УпаковочныйЛист", ДопСвойствоУпаковочныйЛист);
	//Если ДопСвойствоУпаковочныйЛист = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//// ^^^ Галфинд \ Sakovich 02.03.2023 
	//Источник.ДополнительныеСвойства.Свойство("гф_УпаковочныйЛист", ДопСвойствоУпаковочныйЛист);
	// -- Галфинд Волков 06.03.2023
	
	// При выполнении обработки "Отгрузка по заказам" передаем коды строк номенклатуры через дополнительные свойства, так как упаковочный лист еще
	// не записан, поэтому коды строк тянем из заказа.
	// А при интерактивном проведении ордера коды строк номенклатуры вытаскиваем по ссылке из упаковочного листа, из его табличной части
	Если Источник.ДополнительныеСвойства.Свойство("гф_УпаковочныйЛист") Тогда
		
		НайтиСтроки = Источник.ДополнительныеСвойства.гф_УпаковочныйЛист.НайтиСтроки(Новый Структура("УпаковочныйЛист", УпаковочныйЛист));
		
		// Типизируем колонки таблицы значений для работы с запросом
		СписокКодовСтроки = Новый ТаблицаЗначений;
		СписокКодовСтроки.Колонки.Добавить("КодСтроки", Новый ОписаниеТипов("Число"));
		СписокКодовСтроки.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
		СписокКодовСтроки.Колонки.Добавить("УпаковочныйЛист", Новый ОписаниеТипов("ДокументСсылка.УпаковочныйЛист"));
		СписокКодовСтроки.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		СписокКодовСтроки.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		
		Если НайтиСтроки.Количество() > 0 Тогда
			Для каждого Стр Из НайтиСтроки[0].СписокКодовСтроки Цикл
				
				// Получаем коды строк из заказа по номенклатуре которую требуется отгружать по упаковочному листу
				ЗаполнитьЗначенияСвойств(СписокКодовСтроки.Добавить(), Стр);
				
			КонецЦикла;
		КонецЕсли;
		
		ВыборкаДанные = ПолучитьТекстзапросаСКодомиСтрокПоУпаковочнымЛистамСЗаказом(УпаковочныйЛист, Заказ, СписокКодовСтроки)
		
	Иначе
		
		ВыборкаДанные = ПолучитьТекстзапросаСКодомиСтрокПоУпаковочнымЛистам(УпаковочныйЛист)
		
	КонецЕсли;
		
	КэшированныеЗначения = Неопределено;
	
	Для Каждого Выборка Из ВыборкаДанные Цикл
		
		НоваяСтрока = ТоварыВКоробах.Добавить();
		
		// ++ Галфинд ВолковЕВ 28.07.2023 в документе "Перемещение" отсутсвует комментарий
		//ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка,,"Комментарий");
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		// -- Галфинд ВолковЕВ 28.07.2023
		// ++ Галфинд ВолковЕВ 21.02.2024 в документе "Перемещение" заполнение НазначениеОтправителя для проведения по регситру
		Если Не ЗначениеЗаполнено(НоваяСтрока.НазначениеОтправителя) Тогда
			НоваяСтрока.НазначениеОтправителя = Выборка.Назначение;
		КонецЕсли;
		// -- Галфинд ВолковЕВ 21.02.2024
		// ++ Галфинд ВолковЕВ 01.02.2023
		// Документ Перемещение не содержит реквизит "Склад" в отличии документа "Реализация"
		ДокументСодержитСклад = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокОбъект, "Склад");
		
		Если СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаКлиенту И ДокументСодержитСклад Тогда
			// vvv Галфинд \ Sakovich 09.01.2023
			Если ЗначениеЗаполнено(ДокОбъект["Склад"]) И Не ЗначениеЗаполнено(НоваяСтрока["Склад"]) Тогда
				НоваяСтрока["Склад"] = ДокОбъект["Склад"];
			КонецЕсли;	
			// ^^^ Галфинд \ Sakovich 09.01.2023
			Склад = НоваяСтрока.Склад;
		ИначеЕсли СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаПоПеремещению И 
			ТипЗнч(ДокОбъект) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
			Склад = ДокОбъект["СкладОтправитель"];
		Иначе	
			Склад = Неопределено;
		КонецЕсли;
		// -- Галфинд ВолковЕВ 01.02.2023
		ЗаказКлиента = УпаковочныйЛист.гф_Заказ; // Условие только для док Реализация
		
		// Документ Перемещение не содержит реквизит "ЗаказКлиента" в отличии документа "Реализация"
		НоваяСтрокаСодержитЗаказКлиента = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокОбъект, "ЗаказКлиента");
		// Условие только для док Реализация
		Если СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаКлиенту И НоваяСтрокаСодержитЗаказКлиента Тогда
			НоваяСтрока.ЗаказКлиента = ЗаказКлиента;
		КонецЕсли;
	
		Для Каждого СтрокаУпаковочныйЛистНоменклатура Из УпаковочныйЛист.Товары Цикл
			
			Если НоваяСтрока.Номенклатура = СтрокаУпаковочныйЛистНоменклатура.Номенклатура
				И НоваяСтрока.Характеристика = СтрокаУпаковочныйЛистНоменклатура.Характеристика 
				И НоваяСтрока.Количество = СтрокаУпаковочныйЛистНоменклатура.Количество Тогда
				
				Если Не СтрокаУпаковочныйЛистНоменклатура.гф_КодСтрокиДополнительныеСведения = "" И НоваяСтрока.Количество > 1 Тогда
					
					// Получить массив с разделителем
					МассивКодовСтрок = СтрРазделить(СтрокаУпаковочныйЛистНоменклатура.гф_КодСтрокиДополнительныеСведения, ",");
					
					ЗапомнитьКоличество = НоваяСтрока.Количество;
					НоваяСтрока.Количество = 1;
					НоваяСтрока.КоличествоУпаковок = 1;
					
					Для Каждого ЭлементМассива Из МассивКодовСтрок Цикл
						
						Стр = ТоварыВКоробах.Добавить();
						ЗаполнитьЗначенияСвойств(Стр, НоваяСтрока);
						Стр.Количество = 1;
						Стр.КоличествоУпаковок = 1;
						
						Стр.КодСтроки = Число(ЭлементМассива);
						Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Стр, "КлючСвязи") Тогда
							Стр.КлючСвязи = КлючСвязи + 1;
						КонецЕсли;
						
						Если  ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Стр, "Склад") Тогда
							Стр.АналитикаУчетаНоменклатуры = ПолучитьАналитикаУчетаНоменклатуры(Стр.Номенклатура, Стр.Характеристика,
							Стр.Серия, Стр.Назначение, Стр.Склад);
						Иначе
							Если ЗначениеЗаполнено(Склад) Тогда
								Стр.АналитикаУчетаНоменклатуры = ПолучитьАналитикаУчетаНоменклатуры(Стр.Номенклатура, Стр.Характеристика,
								Стр.Серия, Стр.Назначение, Склад);
							КонецЕсли;
						КонецЕсли;
						
					КонецЦикла;
					НоваяСтрока.КодСтроки = СтрокаУпаковочныйЛистНоменклатура.гф_КодСтроки;
					
					Прервать;
					
				Иначе
					НоваяСтрока.КодСтроки = СтрокаУпаковочныйЛистНоменклатура.гф_КодСтроки;
					
					// ++ Галфинд ВолковЕВ 2024/02/21
					// ДокОбъект.Комментарий = Выборка.гф_КомментарийРТУ;
					Если ТипЗнч(ДокОбъект) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
						ДокОбъект.Комментарий = Выборка.гф_КомментарийРТУ;
					КонецЕсли;
					// -- Галфинд ВолковЕВ 2024/02/21
					
					// Условие только для док Реализация	
					Если НоваяСтрокаСодержитЗаказКлиента Тогда
						
						НоваяСтрока.ПроцентРучнойСкидки = 0;
						
		// ++ Галфинд ОкуневАА 28.12.2023
						//Если Не ЗаказКлиента.гф_СезонныйЗаказ Тогда
						//	Если ЗначениеЗаполнено(Выборка.гф_СкидкаДляРТУ) <> 0 Тогда
						//		НоваяСтрока.Цена = (Выборка.Цена * Выборка.гф_СкидкаДляРТУ / 100 - Выборка.Цена) * (-1);
						//	КонецЕсли;
						//Иначе
		// -- Галфинд ОкуневАА 28.12.2023
							
							// Необходимо оптимизировать получение цены для одинаковой номенкатуры
							//ЦенаПоВидуНоменклатуры = ПолучитьЦенуНоменклатуры();
							
							// ++ Галфинд ОкуневАА 26.11.2023
							Если ЗначениеЗаполнено(Выборка.гф_ПрайсЛистДляРТУ) Тогда
								Запрос = Новый Запрос;
								Запрос.Текст = 
								"ВЫБРАТЬ РАЗРЕШЕННЫЕ
								|	ЦеныНоменклатуры25СрезПоследних.Номенклатура КАК Номенклатура,
								|	ЦеныНоменклатуры25СрезПоследних.Цена КАК Цена,
								|	ЦеныНоменклатуры25СрезПоследних.ВидЦены КАК ВидЦены
								|ИЗ
								|	РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(
								|			&Период,
								|			Номенклатура = &Номенклатура
								|				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатуры25СрезПоследних";
								
								Запрос.УстановитьПараметр("ВидЦены", Выборка.гф_ПрайсЛистДляРТУ);
								Запрос.УстановитьПараметр("Номенклатура", НоваяСтрока.Номенклатура);
								Запрос.УстановитьПараметр("Период", КонецДня(Выборка.гф_ДатаДляРТУ));
								
								РезультатЗапроса = Запрос.Выполнить();
								
								ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
								
								Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
									НоваяСтрока.Цена = ВыборкаДетальныеЗаписи.Цена;
									Прервать;
								КонецЦикла;
							КонецЕсли;
							// -- Галфинд ОкуневАА 26.11.2023
							
							Если ЗначениеЗаполнено(Выборка.гф_СкидкаДляРТУ) <> 0 Тогда
								НоваяСтрока.Цена = (НоваяСтрока.Цена * Выборка.гф_СкидкаДляРТУ / 100 - НоваяСтрока.Цена) * (-1);
							КонецЕсли;
							
		// ++ Галфинд ОкуневАА 28.12.2023
						//КонецЕсли;
		// -- Галфинд ОкуневАА 28.12.2023
						
						ОбщаяСуммаПоУпаковочногоЛиста = ОбщаяСуммаПоУпаковочногоЛиста + НоваяСтрока.Цена * НоваяСтрока.Количество;
						
						// Ниже используется части типового кода для обработки пересчета сумм в строках, взяты из документов где пересчитываются данные в ТЧ
						ТекущаяСтрока = НоваяСтрока;
						
						КэшированныеЗначения = Неопределено;
						
						СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ДокОбъект);
						// Минимальный набор действий при котором выполняется пересчет в общем модуле
						СтруктураДействий = Новый Структура;
						СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
						СтруктураДействий.Вставить("ПересчитатьСумму");
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами");
						СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
						// vvv Галфинд \ Sakovich 25.04.2023
						// закомментировано - применимость к типовому релизу 2.5.11.96
						//СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
						// ^^^ Галфинд \ Sakovich 25.04.2023
						
						// ++ Галфинд Волков 27.04.2023 Возврат к общему модулю после обновления новым релизом 2.5.11.96
						//СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
						//	ДокОбъект.РеализацияПоЗаказам, ДокОбъект.ТребуетсяЗалогЗаТару));
						
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
						//ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
						// ++ Галфинд Волков 27.04.2023
					КонецЕсли;
					
					Прервать;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		// Условие для Реализации
		Если СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаКлиенту Тогда
			НоваяСтрока.КлючСвязи = КлючСвязи + 1;
		КонецЕсли;
	    // Получаем Аналитику только для реализации здесь, так как Склад при Перемещении пустой подставляется вверху и запрос не отрабатывает
		НоваяСтрока.АналитикаУчетаНоменклатуры = ПолучитьАналитикаУчетаНоменклатуры(НоваяСтрока.Номенклатура, НоваяСтрока.Характеристика,
			НоваяСтрока.Серия, НоваяСтрока.Назначение, Склад);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура гф_ДобавитьТоварыПоУпаковочномуЛистуКорректировка(УпаковочныйЛист, ТоварыВКоробах, Заказ, Источник)
		
	//Если Источник.ДополнительныеСвойства.Свойство("гф_УпаковочныйЛист") Тогда
	//	
	//	НайтиСтроки = Источник.ДополнительныеСвойства.гф_УпаковочныйЛист.НайтиСтроки(Новый Структура("УпаковочныйЛист", УпаковочныйЛист));
	//	
	//	// Типизируем колонки таблицы значений для работы с запросом
	//	СписокКодовСтроки = Новый ТаблицаЗначений;
	//	СписокКодовСтроки.Колонки.Добавить("КодСтроки", 		Новый ОписаниеТипов("Число"));
	//	СписокКодовСтроки.Колонки.Добавить("Количество", 		Новый ОписаниеТипов("Число"));
	//	СписокКодовСтроки.Колонки.Добавить("УпаковочныйЛист", 	Новый ОписаниеТипов("ДокументСсылка.УпаковочныйЛист"));
	//	СписокКодовСтроки.Колонки.Добавить("Номенклатура", 		Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	//	СписокКодовСтроки.Колонки.Добавить("Характеристика", 	Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	//	
	//	Если НайтиСтроки.Количество() > 0 Тогда
	//		Для каждого Стр Из НайтиСтроки[0].СписокКодовСтроки Цикл
	//			
	//			// Получаем коды строк из заказа по номенклатуре которую требуется отгружать по упаковочному листу
	//			ЗаполнитьЗначенияСвойств(СписокКодовСтроки.Добавить(), Стр);
	//			
	//		КонецЦикла;
	//	КонецЕсли;
	//	
	//	ВыборкаДанные = ПолучитьТекстзапросаСКодомиСтрокПоУпаковочнымЛистамСЗаказом(УпаковочныйЛист, Заказ, СписокКодовСтроки)
	//	
	//Иначе
		
		ВыборкаДанные = ПолучитьТекстзапросаСКодомиСтрокПоУпаковочнымЛистам(УпаковочныйЛист);
		
	//КонецЕсли;
		
	Для Каждого Выборка Из ВыборкаДанные Цикл
		
		НоваяСтрока = ТоварыВКоробах.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, , "Склад");
		
		НоваяСтрока.Склад = Источник.Получатель;
		НоваяСтрока.гф_IDкороба = УпаковочныйЛист;
		НоваяСтрока.ИсходныйЗаказ = УпаковочныйЛист.гф_Заказ;
		НоваяСтрока.ИсходноеНазначение = Выборка.Назначение;
		
		НоваяСтрока.АналитикаУчетаНоменклатуры = ПолучитьАналитикаУчетаНоменклатуры(НоваяСтрока.Номенклатура, НоваяСтрока.Характеристика,
			НоваяСтрока.Серия, Выборка.Назначение, НоваяСтрока.Склад);
		
	КонецЦикла;	
		
КонецПроцедуры	

Функция ПолучитьДанныеТаблицыШтрихкодыУпаковокДокументаРасходныйОрдерНаТовары(Источник)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходныйОрдерНаТоварыШтрихкодыУпаковок.ШтрихкодУпаковки КАК ШтрихкодУпаковки
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.ШтрихкодыУпаковок КАК РасходныйОрдерНаТоварыШтрихкодыУпаковок
	|ГДЕ
	|	РасходныйОрдерНаТоварыШтрихкодыУпаковок.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Источник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеДокументаРасходныйОрдерНаТовары = РезультатЗапроса.Выгрузить();
	
	Возврат ДанныеДокументаРасходныйОрдерНаТовары;
	
КонецФункции

Процедура ЗаполнитьДанныеПоУпаковочнымЛистамРеализация(Источник, ДокОбъект, УпаковочныеЛисты, Знач СкладскаяОперация, Знач Статус)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УпаковочныйЛист.Ссылка КАК Ссылка,
	|	УпаковочныйЛист.Товары.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура КАК Номенклатура,
	|		Характеристика КАК Характеристика,
	|		Серия КАК Серия,
	|		Упаковка КАК Упаковка,
	|		КоличествоУпаковок КАК КоличествоУпаковок,
	|		Количество КАК Количество,
	|		УпаковочныйЛист КАК УпаковочныйЛист,
	|		НоменклатураПартнера КАК НоменклатураПартнера,
	|		Комментарий КАК Комментарий,
	|		ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
	|		ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста КАК ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста,
	|		УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
	|		СтатусУказанияСерий КАК СтатусУказанияСерий,
	|		Назначение КАК Назначение
	|	) КАК Товары
	|ИЗ
	|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
	|ГДЕ
	|	УпаковочныйЛист.Ссылка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", УпаковочныеЛисты);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	КлючСвязи = 0;
	КодСтроки = 0;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЗаписатьДокумент = Истина;
		
		УпаковочныйЛист = ВыборкаДетальныеЗаписи.Ссылка;
		
		НоваяСтрока 					= ДокОбъект.гф_ТоварыВКоробах.Добавить();
		НоваяСтрока.УпаковочныйЛист 	= УпаковочныйЛист;
		
		гф_УстановитьДанныеУпаковочногоЛиста(НоваяСтрока, ДокОбъект);
		
		ОтгрузкаКодовМаркировкиПарами = Ложь;
		ПервичныеДокументыВКоробах = Ложь; // СадомцевСА 28.11.2023 Добавил переменную
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентовДополнительныеРеквизиты.Ссылка КАК Ссылка,
		|	ДоговорыКонтрагентовДополнительныеРеквизиты.НомерСтроки КАК НомерСтроки,
		|	ДоговорыКонтрагентовДополнительныеРеквизиты.Свойство КАК Свойство,
		|	ДоговорыКонтрагентовДополнительныеРеквизиты.Значение КАК Значение,
		|	ДоговорыКонтрагентовДополнительныеРеквизиты.ТекстоваяСтрока КАК ТекстоваяСтрока
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов.ДополнительныеРеквизиты КАК ДоговорыКонтрагентовДополнительныеРеквизиты
		|ГДЕ
		|	ДоговорыКонтрагентовДополнительныеРеквизиты.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДокОбъект.Договор);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписиДоговор = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписиДоговор.Следующий() Цикл
			
			Если ВыборкаДетальныеЗаписиДоговор.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту
				("Имя", "гф_ДоговорыКонтрагентовОтгрузкаКодовМаркировкиПарами") Тогда
				ОтгрузкаКодовМаркировкиПарами = ВыборкаДетальныеЗаписиДоговор.Значение;
			КонецЕсли;
			// СадомцевСА 28.11.2023 Добавил переменную
			Если ВыборкаДетальныеЗаписиДоговор.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту
				("Имя", "гф_ДоговорыКонтрагентовПервичныеДокументыВКоробах") Тогда
				ПервичныеДокументыВКоробах = ВыборкаДетальныеЗаписиДоговор.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
		//УпаковочныйЛист = НоваяСтрока.УпаковочныйЛист;
		ШтрихкодыУпаковок = ДокОбъект.ШтрихкодыУпаковок;
		
		ОбщаяСуммаПоУпаковочногоЛиста = 0;
		// СадомцевСА 19.01.2024
		НДСУпаковочногоЛиста = 0;
		
		// ++ Галфинд ВолковЕВ 2024/03/18
		СтавкаНДСУпаковочногоЛиста = Справочники.СтавкиНДС.НайтиПоНаименованию("БезНДС");
		// -- Галфинд ВолковЕВ 2024/03/18
		
		Если Источник.ДополнительныеСвойства.Свойство("гф_Заказ") Тогда
			Заказ = Источник.ДополнительныеСвойства.гф_Заказ;
		Иначе
			Заказ = Неопределено;
		КонецЕсли;
		
		гф_ДобавитьТоварыПоУпаковочномуЛистуРеализация(УпаковочныйЛист, ДокОбъект.Товары, ДокОбъект.ВидыЗапасов,
			ДокОбъект, КлючСвязи, КодСтроки, ОбщаяСуммаПоУпаковочногоЛиста, СкладскаяОперация, Заказ, Источник
			, НДСУпаковочногоЛиста, СтавкаНДСУпаковочногоЛиста); // СадомцевСА 19.01.2024 Добавил параметр. ВолковЕВ 18.03.2024 Добавил параметр.
		
		НоваяСтрока.ЦенаКороба = ОбщаяСуммаПоУпаковочногоЛиста;
		// СадомцевСА 19.01.2024 Исправил расчет суммы НДС с учетом скидки для короба в РТУ
		НоваяСтрока.НДС = НДСУпаковочногоЛиста;
		
		// ++ Галфинд ВолковЕВ 2024/03/18 Переопределим значение НДС
		НоваяСтрока.НДС = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(НоваяСтрока.ЦенаКороба, СтавкаНДСУпаковочногоЛиста, ДокОбъект.ЦенаВключаетНДС);
		// -- Галфинд ВолковЕВ 2024/03/18
		
		// Вместо запроса на обработку агрегации, вынесено в отдельную процедуру
		АгрегацияПерезаполнить(УпаковочныйЛист, ОтгрузкаКодовМаркировкиПарами, ШтрихкодыУпаковок, Статус
			,ПервичныеДокументыВКоробах); // СадомцевСА 28.11.2023 Добавил параметр
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоУпаковочнымЛистамПеремещение(Источник, ДокОбъект, УпаковочныеЛисты, Знач СкладскаяОперация, Знач Статус)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УпаковочныйЛист.Ссылка КАК Ссылка,
	|	УпаковочныйЛист.Товары.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура КАК Номенклатура,
	|		Характеристика КАК Характеристика,
	|		Серия КАК Серия,
	|		Упаковка КАК Упаковка,
	|		КоличествоУпаковок КАК КоличествоУпаковок,
	|		Количество КАК Количество,
	|		УпаковочныйЛист КАК УпаковочныйЛист,
	|		НоменклатураПартнера КАК НоменклатураПартнера,
	|		Комментарий КАК Комментарий,
	|		ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
	|		ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста КАК ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста,
	|		УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
	|		СтатусУказанияСерий КАК СтатусУказанияСерий,
	|		Назначение КАК Назначение
	|	) КАК Товары
	|ИЗ
	|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
	|ГДЕ
	|	УпаковочныйЛист.Ссылка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", УпаковочныеЛисты);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	КлючСвязи = 0;
	КодСтроки = 0;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЗаписатьДокумент = Истина;
		
		УпаковочныйЛист = ВыборкаДетальныеЗаписи.Ссылка;
		
		НоваяСтрока 					= ДокОбъект.гф_ТоварыВКоробах.Добавить();
		НоваяСтрока.УпаковочныйЛист 	= УпаковочныйЛист;
		
		гф_УстановитьДанныеУпаковочногоЛиста(НоваяСтрока, ДокОбъект);
		
		//ОтгрузкаКодовМаркировкиПарами = Ложь;
		
		//// Документ Перемещение не содержит реквизит "Договор" в отличии документа "Реализация"
		//ДокументСодержитДоговор = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокОбъект, "Договор");
		//
		//// Возможно требуется оставить то что в Иначе, Это условие предусмотрено было для реализации, но сейчас процедура только для Перемещения
		//Если ДокументСодержитДоговор Тогда
		//	
		//	Запрос = Новый Запрос;
		//	Запрос.Текст = 
		//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//	|	ДоговорыКонтрагентовДополнительныеРеквизиты.Ссылка КАК Ссылка,
		//	|	ДоговорыКонтрагентовДополнительныеРеквизиты.НомерСтроки КАК НомерСтроки,
		//	|	ДоговорыКонтрагентовДополнительныеРеквизиты.Свойство КАК Свойство,
		//	|	ДоговорыКонтрагентовДополнительныеРеквизиты.Значение КАК Значение,
		//	|	ДоговорыКонтрагентовДополнительныеРеквизиты.ТекстоваяСтрока КАК ТекстоваяСтрока
		//	|ИЗ
		//	|	Справочник.ДоговорыКонтрагентов.ДополнительныеРеквизиты КАК ДоговорыКонтрагентовДополнительныеРеквизиты
		//	|ГДЕ
		//	|	ДоговорыКонтрагентовДополнительныеРеквизиты.Ссылка = &Ссылка";
		//	
		//	Запрос.УстановитьПараметр("Ссылка", ДокОбъект.Договор);
		//	
		//	РезультатЗапроса = Запрос.Выполнить();
		//	
		//	ВыборкаДетальныеЗаписиДоговор = РезультатЗапроса.Выбрать();
		//	
		//	Пока ВыборкаДетальныеЗаписиДоговор.Следующий() Цикл
		//		
		//		Если ВыборкаДетальныеЗаписиДоговор.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту
		//			("Имя", "гф_ДоговорыКонтрагентовОтгрузкаКодовМаркировкиПарами") Тогда
		//			ОтгрузкаКодовМаркировкиПарами = ВыборкаДетальныеЗаписиДоговор.Значение;
		//		КонецЕсли;
		//		
		//	КонецЦикла;
		//	// Такая табличная часть только в Реализации
		//	ШтрихкодыУпаковок = ДокОбъект.ШтрихкодыУпаковок;
		//	
		//Иначе
			// Для документа "Перемещение" всегда отгрузка парами
			ОтгрузкаКодовМаркировкиПарами = Истина;
			// Для документа "Перемещение" табличная часть имеет другое название чем у документа "Реализация"
			ШтрихкодыУпаковок = ДокОбъект.гф_ШтрихкодыУпаковок;
		//КонецЕсли;
	
		ОбщаяСуммаПоУпаковочногоЛиста = 0;
		
		Если Источник.ДополнительныеСвойства.Свойство("гф_Заказ") Тогда
			Заказ = Источник.ДополнительныеСвойства.гф_Заказ;
		Иначе
			Заказ = Неопределено;
		КонецЕсли;
		
		гф_ДобавитьТоварыПоУпаковочномуЛистуПеремещение(УпаковочныйЛист, ДокОбъект.Товары, ДокОбъект.ВидыЗапасов,
			ДокОбъект, КлючСвязи, КодСтроки, ОбщаяСуммаПоУпаковочногоЛиста, СкладскаяОперация, Заказ, Источник);
		
		// Условие для док Реализация, так как в Перемещении ТЧ называется "гф_ШтрихкодыУпаковок"
		Если СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаКлиенту Тогда
			НоваяСтрока.ЦенаКороба = ОбщаяСуммаПоУпаковочногоЛиста;
			ШтрихкодыУпаковок = ДокОбъект.ШтрихкодыУпаковок;
		Иначе
			ШтрихкодыУпаковок = ДокОбъект.гф_ШтрихкодыУпаковок;
		КонецЕсли;
	
		// Вместо запроса на обработку агрегации, вынесено в отдельную процедуру
		АгрегацияПерезаполнить(УпаковочныйЛист, ОтгрузкаКодовМаркировкиПарами, ШтрихкодыУпаковок, Статус)
		
	КонецЦикла;

КонецПроцедуры

// Работа с документами Реализация и Перемещение
Процедура АгрегацияПерезаполнить(УпаковочныйЛист, ОтгрузкаКодовМаркировкиПарами, ШтрихкодыУпаковок, Статус
	, ПервичныеДокументыВКоробах = Неопределено)
	// ++ СадомцевСА 28.11.2023 Добавил параметр
	// Изменил алгоритм заполнения ТЧ ШтрихкодыУпаковок в РТУ с учетом доп. реквизита договора "Первичные документы в коробах".
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee89e1b8986305
	флОтгрузкаКодовМаркировкиПарами = Истина; // значение по-умолчанию
	Если ПервичныеДокументыВКоробах <> Неопределено Тогда
		// Если у договора в РТУ признак "Первичные документы в коробах"=Да и "Отгрузка КМ в парах"=Нет - ТЧ заполняем кодами коробов
		// Если у договора в РТУ признак "Первичные документы в коробах"=Да и "Отгрузка КМ в парах"=Да - ТЧ заполняем КМ пар, вложенных в короба
		// Если у договора в РТУ признак "Первичные документы в коробах"=Нет и "Отгрузка КМ в парах"=Нет - ТЧ заполняем КМ пар, вложенных в короба
		// Если у договора в РТУ признак "Первичные документы в коробах"=Нет и "Отгрузка КМ в парах"=Да - ТЧ заполняем КМ пар, вложенных в короба
		Если ПервичныеДокументыВКоробах = Истина И ОтгрузкаКодовМаркировкиПарами = Ложь Тогда
			флОтгрузкаКодовМаркировкиПарами = Ложь;
		КонецЕсли;
	КонецЕсли;
	// -- СадомцевСА 28.11.2023
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УпаковочныйЛист.гф_ТекущийОрдер КАК гф_ТекущийОрдер,
	|	УпаковочныйЛист.гф_Агрегация КАК гф_Агрегация,
	|	УпаковочныйЛист.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
	|ГДЕ
	|	УпаковочныйЛист.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", УпаковочныйЛист);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписиАгрегация = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписиАгрегация.Следующий() Цикл
		
		Если ВыборкаДетальныеЗаписиАгрегация.гф_Агрегация <> Неопределено Тогда
			
			// СадомцевСА 28.11.2023 Заменил строку
			// Если ОтгрузкаКодовМаркировкиПарами Тогда
			Если флОтгрузкаКодовМаркировкиПарами Тогда
				
				// ++ Галфинд ВолковЕВ 2024/03/19
				//Агрегация = ВыборкаДетальныеЗаписиАгрегация.гф_Агрегация.ПолучитьОбъект();
				
				Если ВыборкаДетальныеЗаписиАгрегация.гф_Агрегация <> Неопределено
					И ЗначениеЗаполнено(ВыборкаДетальныеЗаписиАгрегация.гф_Агрегация) Тогда
				
				Попытка
					Агрегация = ВыборкаДетальныеЗаписиАгрегация.гф_Агрегация.ПолучитьОбъект();
				Исключение
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Агрегацию в %1 не возможно определить для корректировки.
					| Необходимо проверить агрегацию находящуюся в упаковочном листе.'"), ВыборкаДетальныеЗаписиАгрегация.Ссылка);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					Возврат;
				КонецПопытки;
				// -- Галфинд ВолковЕВ 2024/03/19
				
				Попытка
					Агрегация.Заблокировать();
				Исключение
					ТекстСообщения = СтрШаблон(НСтр("ru = '%1 находится в процессе редактирования и не может быть изменен.'"), Агрегация);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					Возврат;
				КонецПопытки;
				
				Попытка
					Агрегация.Записать();
				Исключение
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось внести изменения в элемент справочника ""Штрихкоды упаковок товаров"" ""%1"".'"),
					Агрегация);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Запись в элемент справочника ""Штрихкоды упаковок товаров""'"), УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					Возврат;
				КонецПопытки;
				
				Для Каждого Строка Из Агрегация.ВложенныеШтрихкоды Цикл
					
					НоваяСтрокаШтрихкодыУпаковок = ШтрихкодыУпаковок.Добавить();
					НоваяСтрокаШтрихкодыУпаковок.ШтрихкодУпаковки = Строка.Штрихкод;
					
				КонецЦикла;
				
				// ++ Галфинд ВолковЕВ 2024/03/19
				Иначе
				    ТекстСообщения = СтрШаблон(НСтр("ru = 'Агрегацию в %1 не возможно определить для корректировки.
					| Необходимо проверить агрегацию находящуюся в упаковочном листе.'"), ВыборкаДетальныеЗаписиАгрегация.Ссылка);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					Возврат;
				КонецЕсли;
			    // -- Галфинд ВолковЕВ 2024/03/19
				
			Иначе
				
				// Ранее использовался Источник.Статус, когда не было вынесено в отдельную процедуру
				Если Статус = Перечисления.СтатусыРасходныхОрдеров.КОтгрузке Тогда
					// ++ Галфинд ВолковЕВ 2024/03/19
					//Агрегация = ВыборкаДетальныеЗаписиАгрегация.гф_Агрегация.ПолучитьОбъект();
					//Агрегация.гф_Автодействие = Перечисления.гф_АвтодействияКМ.Отгружен;
					
					Если ВыборкаДетальныеЗаписиАгрегация.гф_Агрегация <> Неопределено
						И ЗначениеЗаполнено(ВыборкаДетальныеЗаписиАгрегация.гф_Агрегация) Тогда
					
					Попытка
						Агрегация = ВыборкаДетальныеЗаписиАгрегация.гф_Агрегация.ПолучитьОбъект();
						Агрегация.гф_Автодействие = Перечисления.гф_АвтодействияКМ.Отгружен;
					Исключение
						ТекстСообщения = СтрШаблон(НСтр("ru = 'Агрегацию в %1 не возможно определить для корректировки.
						| Необходимо проверить агрегацию находящуюся в упаковочном листе.'"), ВыборкаДетальныеЗаписиАгрегация.Ссылка);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						Возврат;
					КонецПопытки;
					// -- Галфинд ВолковЕВ 2024/03/19
					
					Попытка
						Агрегация.Заблокировать();
					Исключение
						ТекстСообщения = СтрШаблон(НСтр("ru = '%1 находится в процессе редактирования и не может быть изменен.'"), Агрегация);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						Возврат;
					КонецПопытки;
					
					Попытка
						Агрегация.Записать();
					Исключение
						ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось внести изменения в элемент справочника ""Штрихкоды упаковок товаров"" ""%1"".'"),
						Агрегация);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						
						ЗаписьЖурналаРегистрации(НСтр("ru = 'Запись в элемент справочника ""Штрихкоды упаковок товаров""'"),
							УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						Возврат;
					КонецПопытки;
					
					// ++ Галфинд ВолковЕВ 2024/03/19
					//КонецЕсли;
					НоваяСтрокаШтрихкодыУпаковок = ШтрихкодыУпаковок.Добавить();
					НоваяСтрокаШтрихкодыУпаковок.ШтрихкодУпаковки = ВыборкаДетальныеЗаписиАгрегация.гф_Агрегация;	
					
					Иначе
				    	ТекстСообщения = СтрШаблон(НСтр("ru = 'Агрегацию в %1 не возможно определить для корректировки.
						| Необходимо проверить агрегацию находящуюся в упаковочном листе.'"), ВыборкаДетальныеЗаписиАгрегация.Ссылка);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						Возврат;
					КонецЕсли;
					// -- Галфинд ВолковЕВ 2024/03/19
					
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоУпаковочнымЛистамКорректировка(Источник, ДокОбъект, УпаковочныеЛисты, Знач СкладскаяОперация, Знач Статус)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УпаковочныйЛист.Ссылка КАК Ссылка,
	|	УпаковочныйЛист.Товары.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура КАК Номенклатура,
	|		Характеристика КАК Характеристика,
	|		Серия КАК Серия,
	|		Упаковка КАК Упаковка,
	|		КоличествоУпаковок КАК КоличествоУпаковок,
	|		Количество КАК Количество,
	|		УпаковочныйЛист КАК УпаковочныйЛист,
	|		НоменклатураПартнера КАК НоменклатураПартнера,
	|		Комментарий КАК Комментарий,
	|		ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
	|		ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста КАК ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста,
	|		УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
	|		СтатусУказанияСерий КАК СтатусУказанияСерий,
	|		Назначение КАК Назначение
	|	) КАК Товары
	|ИЗ
	|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
	|ГДЕ
	|	УпаковочныйЛист.Ссылка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", УпаковочныеЛисты);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	КлючСвязи = 0;
	КодСтроки = 0;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЗаписатьДокумент = Истина;
		
		УпаковочныйЛист = ВыборкаДетальныеЗаписи.Ссылка;
		
		ОтгрузкаКодовМаркировкиПарами = Ложь;
		
		Если Источник.ДополнительныеСвойства.Свойство("гф_Заказ") Тогда
			Заказ = Источник.ДополнительныеСвойства.гф_Заказ;
		Иначе
			Заказ = Неопределено;
		КонецЕсли;
		
		гф_ДобавитьТоварыПоУпаковочномуЛистуКорректировка(УпаковочныйЛист, ДокОбъект.Товары, Заказ, Источник);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура гф_РасходныйОрдерОтгрузкаНаВнутренниеНужды(Источник, Отказ, РежимПроведения)
	
	Для Каждого Строка Из Источник.ТоварыПоРаспоряжениям Цикл
		Распоряжение = Строка.Распоряжение;
		Прервать
	КонецЦикла;
	
	Если ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ЗаказНаВнутреннееПотребление")
		И ТипЗнч(Источник) = Тип("ДокументОбъект.РасходныйОрдерНаТовары") Тогда
		
		ДокСсылкаОснование = ПолучитьДокументРаспоряжениеПоЗаказНаВнутреннееПотребление(Распоряжение);
		
		Если ДокСсылкаОснование <> Неопределено Тогда
			ДокОбъект = ДокСсылкаОснование.Получитьобъект();
			ЗаблокироватьДокумент(ДокОбъект);
			ПроверитьПометкуУдаленияИСнятьПометкуУдаления(ДокОбъект);
			ПроверитьПроведениеИОтменитьПроведение(ДокОбъект);
		Иначе
			ДокОбъект = Документы.ВнутреннееПотребление.СоздатьДокумент();
			ДокОбъект.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		КонецЕсли;
	// ++ Галфинд ВолковЕВ 2024/03/19
	// КонецЕсли;
	// -- Галфинд ВолковЕВ 2024/03/19
	ЗаполнитьЗначенияСвойств(ДокОбъект, Распоряжение,,"Номер, Проведен");
	ДокОбъект.Дата = ТекущаяДатаСеанса();
	
	КонтрагентТКПоАдресу = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОбъект.гф_АдресДоставки, "ТК");
	// ++ Галфинд ВолковЕВ 31.05.2023
	//ДокОбъект.гф_ТК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КонтрагентТКПоАдресу, "Партнер");
	Если ЗначениеЗаполнено(КонтрагентТКПоАдресу) Тогда
		ДокОбъект.гф_ТК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КонтрагентТКПоАдресу, "Партнер");
	КонецЕсли;
	// -- Галфинд ВолковЕВ 31.05.2023
	ДокОбъект.ХозяйственнаяОперация = ДокОбъект.Метаданные().Реквизиты.ХозяйственнаяОперация.ЗначениеЗаполнения;
	ДокОбъект.Статус = ДокОбъект.Метаданные().Реквизиты.Статус.ЗначениеЗаполнения;
	ДокОбъект.Товары.Очистить();
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(Распоряжение);
	
	ПараметрыОткрытия =
		СозданиеНаОснованииУТВызовСервера.ПараметрыОткрытияФормыНакладнойНаОснованииЗаказа(
			МассивСсылок,
			"ВнутреннееПотребление");
	
	ДанныеЗаполнения = ПараметрыОткрытия.ПараметрыФормы.Основание;
	
	// За основу взят код из типовой процедуры
	// Заполнение по заказу(-ам).
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("МассивЗаказов") Тогда
		
		СтруктураЗаполнения = ДанныеЗаполнения;
		
	Иначе
		
		ДокОбъект.ХозяйственнаяОперация = ДокОбъект.Метаданные().Реквизиты.ХозяйственнаяОперация.ЗначениеЗаполнения;
		ДокОбъект.Статус = ДокОбъект.Метаданные().Реквизиты.Статус.ЗначениеЗаполнения;
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(ДокОбъект, ДанныеЗаполнения);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураЗаполнения <> Неопределено Тогда
		// За основу взята типовая процедура "ЗаполнитьПоЗаказу"
		гф_ЗаполнитьПоЗаказу(СтруктураЗаполнения, Распоряжение, ДокОбъект);
	КонецЕсли;
	// ++ Галфинд ВолковЕВ 2024/03/19
	КонецЕсли;
    // -- Галфинд ВолковЕВ 2024/03/19
КонецПроцедуры

Процедура гф_ЗаполнитьПоЗаказу(СтруктураЗаполнения, Ссылка, ДокОбъект)
	
	МассивЗаказов = СтруктураЗаполнения.МассивЗаказов;
	
	ПараметрыЗаполнения = Документы.ВнутреннееПотребление.ПараметрыЗаполненияДокумента();
	ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, СтруктураЗаполнения);
	Документы.ВнутреннееПотребление.ИнициализироватьПараметрыЗаполнения(ПараметрыЗаполнения,
		СтруктураЗаполнения.РеквизитыШапки, МассивЗаказов);
	
	ТаблицаНакладная = Документы.ВнутреннееПотребление.ДанныеТаблицыТоварыДокумента(Ссылка);
	
	Документы.ВнутреннееПотребление.ЗаполнитьПоЗаказамОрдерам(ТаблицаНакладная, Ссылка, ПараметрыЗаполнения);
	
	Если ПараметрыЗаполнения.ЗаполнятьПоОрдеру Тогда
		ТаблицаНакладная.Колонки.Количество.Имя 		= "КоличествоДоИзменения";
		ТаблицаНакладная.Колонки.КоличествоВОрдере.Имя 	= "Количество";
	Иначе
		ТаблицаНакладная.Колонки.Количество.Имя 		= "КоличествоДоИзменения";
		ТаблицаНакладная.Колонки.КоличествоВЗаказе.Имя 	= "Количество";
	КонецЕсли;
	
	НакладныеСервер.УдалитьПустыеСтроки(ТаблицаНакладная, "Количество");
	
	ДокОбъект.Товары.Загрузить(ТаблицаНакладная);
	
	Документы.ВнутреннееПотребление.ЗаполнитьШапкуДокументаПоЗаказу(ДокОбъект, ПараметрыЗаполнения, СтруктураЗаполнения.МассивЗаказов);
	
	Документы.ВнутреннееПотребление.ОбработатьДокументПослеДобавленияСтрок(ДокОбъект);
	
	// Заполнение серий.
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокОбъект, Документы.ВнутреннееПотребление);
	НоменклатураСервер.ЗаполнитьСерииПоFEFO(ДокОбъект, ПараметрыУказанияСерий, Ложь);
	
	Документы.ВнутреннееПотребление.ОбновитьЗависимыеРеквизитыТабличнойЧасти(ДокОбъект.Товары, ПараметрыЗаполнения);
	
	// Блокируем объект ранее при усиановке свойства "ЭтоНовый"
	Если ДокОбъект.ДополнительныеСвойства.Свойство("ЭтоНовый") Или ДокОбъект.Заблокирован() Тогда
		ЗаписатьПровестиОтменитьПроведениеДокумента(ДокОбъект, РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеПоДокументуРеализацияТоваровИУслуг(Источник)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслуг.Проведен КАК Проведен,
	|	РеализацияТоваровУслуг.ЗаказКлиента КАК ЗаказКлиента,
	|	РеализацияТоваровУслуг.гф_РасходныйОрдер КАК гф_РасходныйОрдер
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.гф_РасходныйОрдер = &гф_РасходныйОрдер";
	
	Запрос.УстановитьПараметр("гф_РасходныйОрдер", Источник.Ссылка);
	
	Результат = ОбработатьВыборкуСсылкиНаДокумент(Запрос);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДокументРаспоряжениеПоЗаказНаВнутреннееПотребление(Распоряжение)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВнутреннееПотребление.Ссылка КАК Ссылка,
	|	ВнутреннееПотребление.Проведен КАК Проведен,
	|	ВнутреннееПотребление.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление
	|ИЗ
	|	Документ.ВнутреннееПотребление КАК ВнутреннееПотребление
	|ГДЕ
	|	ВнутреннееПотребление.ЗаказНаВнутреннееПотребление = &Распоряжение";
	
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	
	Результат = ОбработатьВыборкуСсылкиНаДокумент(Запрос);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьПровестиОтменитьПроведениеДокумента(ДокОбъект, РежимЗаписиДокумента)
	
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента);
	Исключение
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Объект не возможно изменить/провести ""%1""'"), ДокОбъект);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ЗаписьЖурналаРегистрации(СтрШаблон(НСтр("ru = 'Проведение документа ""%1""'"), ДокОбъект), УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция ОбработатьВыборкуСсылкиНаДокумент(Запрос)
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выгрузить();
	
	Если Выборка.Количество() = 1 Тогда
		Возврат Выборка[0].Ссылка;
	ИначеЕсли Выборка.Количество() > 1 Тогда
		
		НайденнаяСтрока = Выборка.Найти(Истина, "Проведен");
		Если НайденнаяСтрока <> Неопределено Тогда
			Возврат НайденнаяСтрока.Ссылка;
		Иначе
			Возврат Выборка[0].Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ПроверитьПометкуУдаленияИСнятьПометкуУдаления(Документ)
	
	Если Документ.ПометкаУдаления Тогда
		Документ.УстановитьПометкуУдаления(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПроведениеИОтменитьПроведение(Документ)
	
	Если Документ.Проведен Тогда
		ЗаписатьПровестиОтменитьПроведениеДокумента(Документ, РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаблокироватьДокумент(Документ)
	
	Попытка
		Документ.Заблокировать();
	Исключение
		ТекстСообщения = СтрШаблон(НСтр("ru = '""%1"" находится в процессе редактирования и не может быть изменен.'"), Документ);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ЗаписьЖурналаРегистрации(СтрШаблон(НСтр("ru = 'Проведение документа %1 не выполнено'"), Документ), УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
		
КонецПроцедуры

Процедура ЗаблокироватьДокументПеремещение(Документ)
	
	Попытка
		Документ.Заблокировать();
	Исключение
		ТекстСообщения = СтрШаблон(НСтр("ru = '""%1"" находится в процессе редактирования и не может быть изменен.'"), Документ);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ЗаписьЖурналаРегистрации(СтрШаблон(НСтр("ru = 'Проведение документа %1 не выполнено'"), Документ), УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
		
КонецПроцедуры

Процедура ЗаблокироватьДокументКорректировка(Документ)
	
	Попытка
		Документ.Заблокировать();
	Исключение
		
		Результат = ОписаниеОшибки();
		
		ТекстСообщения = СтрШаблон(НСтр("ru = '""%1"" находится в процессе редактирования и не может быть изменен.'")
			+ " '" + Документ + "'!" + Символы.ПС + ОписаниеОшибки()
			, Документ);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ЗаписьЖурналаРегистрации(СтрШаблон(НСтр("ru = 'Проведение документа %1 не выполнено'"), Документ), УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоНоменклатуреРеализация(Источник, ДокОбъект, МассивЗаказов)
	
	ЗаказКлиента = ДокОбъект.ЗаказКлиента;
	
	ШтрихкодыУпаковок = ДокОбъект.ШтрихкодыУпаковок;
	
	// Используется механизм типовых методов ввода на основании
	// Взято из Процедура РеализацияТоваровУслугСоздатьНаОснованииЗаказа
	// и Процедура ЗаполнитьДокументНаОснованииЗаказаКлиента
	
	ПараметрыОткрытия = СозданиеНаОснованииУТВызовСервера.РеализацияТоваровУслугПараметрыОткрытияФормы(МассивЗаказов);
	
	ДанныеЗаполнения = ПараметрыОткрытия.Основание;
	
	СкладОтгрузки = Неопределено;
	РеквизитыШапки = Неопределено;
	ВариантОформления = Неопределено;
	ПараметрыОформления = Неопределено;
	
	// Если передан склад - необходимо заполнять товары только по указанном складу.
	ДанныеЗаполнения.Свойство("СкладОтгрузки", СкладОтгрузки);
	ДанныеЗаполнения.Свойство("РеквизитыШапки", РеквизитыШапки);
	ДанныеЗаполнения.Свойство("ВариантОформленияПродажи", ВариантОформления);
	ДанныеЗаполнения.Свойство("ПараметрыОформления", ПараметрыОформления);
	
	РеквизитыЗаказа 			= РеквизитыШапки;
	БанковскийСчетКонтрагента 	= ДокОбъект.БанковскийСчетКонтрагента;
	Договор 					= ДокОбъект.Договор;
	Организация 				= ДокОбъект.Организация;
	БанковскийСчетОрганизации 	= ДокОбъект.БанковскийСчетОрганизации;
	Контрагент 					= ДокОбъект.Контрагент;
	
	// Заполнение шапки.
	ЗаполнитьЗначенияСвойств(ДокОбъект, РеквизитыЗаказа);
	// Валюта = ВалютаВзаиморасчетов;
	БанковскийСчетОрганизации = РеквизитыЗаказа.БанковскийСчет;
	ДатаВозвратаМногооборотнойТары = МногооборотнаяТараСервер.РассчитатьДатуВозвратаМногооборотнойТары(
		ДокОбъект,
		РеквизитыЗаказа.СрокВозвратаМногооборотнойТары,
		РеквизитыЗаказа.РассчитыватьДатуВозвратаТарыПоКалендарю,
		РеквизитыЗаказа.КалендарьВозвратаТары);
	
	ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчетОрганизации, БанковскийСчетКонтрагента);
	Если Не ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
		СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация    		= Организация;
		СтруктураПараметров.БанковскийСчет		= БанковскийСчетОрганизации;
		БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(БанковскийСчетКонтрагента) Тогда
		БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, , БанковскийСчетКонтрагента);
	КонецЕсли;
	
	СкладОтгрузки = ЗаказКлиента.Склад;
	
	ЗаполнятьПоОстаткам = Истина;
	
	СкидкиНаценки 				= ДокОбъект.СкидкиНаценки;
	Товары 						= ДокОбъект.Товары;
	НачислениеБонусныхБаллов 	= ДокОбъект.НачислениеБонусныхБаллов;
	
	Если ЗаполнятьПоОстаткам Тогда
				
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("ВариантОформления", ВариантОформления);
		ПараметрыЗаполнения.Вставить("ПараметрыОформления", ПараметрыОформления);
		
		РеализацияТоваровУслугЛокализация.ДополнитьПараметрыЗаполнения(ПараметрыЗаполнения, РеквизитыЗаказа);
		
		Документы.РеализацияТоваровУслуг.ЗаполнитьПоОстаткамЗаказов(
		ДокОбъект,
		Товары,
		СкидкиНаценки,
		НачислениеБонусныхБаллов,
		?(СкладОтгрузки = Неопределено, Справочники.Склады.ПустаяСсылка(), СкладОтгрузки),
		МассивЗаказов,
		ПараметрыЗаполнения,
		ШтрихкодыУпаковок);
		
		ДокОбъект.ВариантОформленияПродажи = ?(ЗначениеЗаполнено(ВариантОформления), 
		ВариантОформления,
		Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг);
		
		ЗаказыСервер.ЗаполнитьЗаказВШапкеПоЗаказамВТабличнойЧасти(ЗаказКлиента, Товары, "ЗаказКлиента");
		
		Если НЕ ЗначениеЗаполнено(ЗаказКлиента)
			И МассивЗаказов.Количество() = 1
			И ТипЗнч(МассивЗаказов[0]) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			ЗаказКлиента = МассивЗаказов[0];
		КонецЕсли;
		
		СкидкиРассчитаны = (СкидкиНаценки.Количество() > 0);
		
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокОбъект, Документы.РеализацияТоваровУслуг);
		НоменклатураСервер.ЗаполнитьСерииПоFEFO(ДокОбъект, ПараметрыУказанияСерий, Ложь);
		
	КонецЕсли;
	
	СтруктураОснование = Документы.РеализацияТоваровУслуг.СтруктураОснованияДляПечати(ДокОбъект);
	ЗаполнитьЗначенияСвойств(ДокОбъект, СтруктураОснование);
	
	// Заполнение Штрихкодов
	Для каждого СтрокаИсточникШтрихкодыУпаковок Из Источник.ШтрихкодыУпаковок Цикл
		
		СтрокаПолучатель = ДокОбъект.ШтрихкодыУпаковок.Добавить();
		СтрокаПолучатель.ШтрихкодУпаковки = СтрокаИсточникШтрихкодыУпаковок.ШтрихкодУпаковки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьКорректировкуЗаказаНеОтгружатьПоРасходномуОрдеру(Источник)
	
	// ++ Галфинд ВолковЕВ 2024/03/19
	ТоварыВКоробках = ПолучитьЗначениеРеквизитаСкладаТоварыВКоробках(Источник.Склад);
	
	Если ТоварыВКоробках Тогда
	// -- Галфинд ВолковЕВ 2024/03/19	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Ссылка КАК Ссылка,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.НомерСтроки КАК НомерСтроки,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Номенклатура КАК Номенклатура,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Характеристика КАК Характеристика,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Назначение КАК Назначение,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Серия КАК Серия,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.СтатусУказанияСерий КАК СтатусУказанияСерий,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста КАК ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.УпаковочныйЛист КАК УпаковочныйЛист,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Упаковка КАК Упаковка,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Количество КАК Количество,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Действие КАК Действие,
		|	ЗаказКлиента.Ссылка КАК Заказ,
		|	ВариантыКомплектацииНоменклатуры.Ссылка КАК ВариантКомплектации
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары.ОтгружаемыеТовары КАК РасходныйОрдерНаТоварыОтгружаемыеТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
		|		ПО РасходныйОрдерНаТоварыОтгружаемыеТовары.УпаковочныйЛистРодитель.гф_Заказ = ЗаказКлиента.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
		|		ПО РасходныйОрдерНаТоварыОтгружаемыеТовары.УпаковочныйЛистРодитель.гф_Комплектация = ВариантыКомплектацииНоменклатуры.Ссылка
		|ГДЕ
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Ссылка = &Ссылка
		|	И РасходныйОрдерНаТоварыОтгружаемыеТовары.Действие = &Действие";
		
		Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
		Запрос.УстановитьПараметр("Действие", Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.НеОтгружать);
	// ++ Галфинд ВолковЕВ 2024/03/19	
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Ссылка КАК Ссылка,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.НомерСтроки КАК НомерСтроки,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Номенклатура КАК Номенклатура,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Характеристика КАК Характеристика,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Назначение КАК Назначение,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Серия КАК Серия,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.СтатусУказанияСерий КАК СтатусУказанияСерий,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста КАК ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.УпаковочныйЛист КАК УпаковочныйЛист,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Упаковка КАК Упаковка,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Количество КАК Количество,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Действие КАК Действие,
		|	Назначения.Заказ КАК Заказ
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары.ОтгружаемыеТовары КАК РасходныйОрдерНаТоварыОтгружаемыеТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК Назначения
		|		ПО РасходныйОрдерНаТоварыОтгружаемыеТовары.Назначение = Назначения.Ссылка
		|ГДЕ
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Ссылка = &Ссылка
		|	И РасходныйОрдерНаТоварыОтгружаемыеТовары.Действие = &Действие";
		
		Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
		Запрос.УстановитьПараметр("Действие", Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.НеОтгружать);
		
	КонецЕсли;
	// -- Галфинд ВолковЕВ 2024/03/19
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
	// ++ Галфинд ВолковЕВ 2024/03/19
	// ТоварыВКоробках = ПолучитьЗначениеРеквизитаСкладаТоварыВКоробках(Источник.Склад);
	// -- Галфинд ВолковЕВ 2024/03/19
	ТЗСписокУпаковочныйЛистИлиНоменклатура = ВыборкаДетальныеЗаписи.Скопировать();
	
	// ++ Галфинд ВолковЕВ 2024/03/22
	// ТЗСписокУпаковочныйЛистИлиНоменклатура.Свернуть("УпаковочныйЛистРодитель, ВариантКомплектации, Заказ");
	// ТЗ_Заказы = ТЗСписокУпаковочныйЛистИлиНоменклатура.Скопировать();
	// ТЗ_Заказы.Свернуть("Заказ");
	
	Если ТоварыВКоробках Тогда
		ТЗСписокУпаковочныйЛистИлиНоменклатура.Свернуть("УпаковочныйЛистРодитель, ВариантКомплектации, Заказ");
		
		ТЗ_Заказы = ТЗСписокУпаковочныйЛистИлиНоменклатура.Скопировать();
		ТЗ_Заказы.Свернуть("Заказ");
	Иначе
		ТЗСписокУпаковочныйЛистИлиНоменклатура.Свернуть("Заказ, Номенклатура, Характеристика, Количество");
		
		ТЗ_Заказы = ТЗСписокУпаковочныйЛистИлиНоменклатура.Скопировать();
		ТЗ_Заказы.Свернуть("Заказ");
	КонецЕсли;
	// -- Галфинд ВолковЕВ 2024/03/22
	
	// Таблица для записи каждого заказа с конкретным списком упаковочных листов/номенклатуры по этому заказу
	// Добавляем Таблицу "НовыеДанныеДляТаблицыПоЗаказу" с новыми строками и количеством для отгрузки, количество после учета
	// комплектации по каждому упаковочному листу этого заказа
	// При успешном прохождении проверки наличия комплектации из упаковочного листа  в заказе, то "ВозможнаЗаписьЗаказа" запишется Истина
	// При успешном перепроведении заказа с новой таблицей "НовыеДанныеДляТаблицыПоЗаказу", то в "Перепроведен" запишется Истина
	ТЗ_Заказы.Колонки.Добавить("СписокУпаковочныйЛистИлиНоменклатура");
	ТЗ_Заказы.Колонки.Добавить("НовыеДанныеДляТаблицыПоЗаказу");
	ТЗ_Заказы.Колонки.Добавить("НовыеДанныеДляТаблицыПоЗаказуТоварыВКоробах");
	ТЗ_Заказы.Колонки.Добавить("НовыеДанныеДляТаблицыПоЗаказуПричиныИзмененияТоварыВКоробах");
	ТЗ_Заказы.Колонки.Добавить("Перепроведение");
	ТЗ_Заказы.Колонки.Добавить("ЗаписьВРегистр");
	ТЗ_Заказы.Колонки.Добавить("ВозможнаЗаписьЗаказа");
	ТЗ_Заказы.Колонки.Добавить("НомерАдреса");
	ТЗ_Заказы.Колонки.Добавить("ДобавленОрдер");
	ТЗ_Заказы.Колонки.Добавить("ОтказОтЗаписи");
	ТЗ_Заказы.Колонки.Добавить("ОтказОтЗаписиПоискНоменклатуры");
	ТЗ_Заказы.Колонки.Добавить("ОшибкаПроведенияЗаказа");
	
	СтруктураПереданныхДанных = Новый Структура;
	
	Для Каждого СтрокаЗаказы Из ТЗ_Заказы Цикл
		
		Отказ = Ложь;
		// ++ Галфинд ВолковЕВ 2024/03/19 Перенесено снизу
		СтрокаЗаказы.ОтказОтЗаписи 						= Ложь;
		СтрокаЗаказы.ОтказОтЗаписиПоискНоменклатуры 	= Ложь;
		СтрокаЗаказы.ВозможнаЗаписьЗаказа 				= Ложь;
		// -- Галфинд ВолковЕВ 2024/03/19
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	гф_НеОтгружатьПоРасходномуОрдеру.РасходныйОрдер КАК РасходныйОрдер,
		|	гф_НеОтгружатьПоРасходномуОрдеру.ЗаказКлиента КАК ЗаказКлиента,
		|	гф_НеОтгружатьПоРасходномуОрдеру.Выполнено КАК Выполнено
		|ИЗ
		|	РегистрСведений.гф_НеОтгружатьПоРасходномуОрдеру КАК гф_НеОтгружатьПоРасходномуОрдеру
		|ГДЕ
		|	гф_НеОтгружатьПоРасходномуОрдеру.РасходныйОрдер = &РасходныйОрдер
		|	И гф_НеОтгружатьПоРасходномуОрдеру.ЗаказКлиента = &ЗаказКлиента
		|	И гф_НеОтгружатьПоРасходномуОрдеру.Выполнено = Истина";
		
		Запрос.УстановитьПараметр("РасходныйОрдер", Источник.Ссылка);
		Запрос.УстановитьПараметр("ЗаказКлиента", СтрокаЗаказы.Заказ);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'По ""%1"" уже была выполнена корректировка комплектации по ""%2"".'"),
			СтрокаЗаказы.Заказ, Источник.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Отказ = Истина;
			СтрокаЗаказы.ОтказОтЗаписи = Истина;
			Продолжить;
			
		КонецЦикла;
		
		// ++ Галфинд ВолковЕВ 2024/03/19 Перенесено выше
		// СтрокаЗаказы.ОтказОтЗаписи 			= Ложь;
		// СтрокаЗаказы.ВозможнаЗаписьЗаказа 	= Ложь;
		// ++ Галфинд ВолковЕВ 2024/03/19
		
		Если Не Отказ Тогда
			
			ОбъектЗаказ = СтрокаЗаказы.Заказ.ПолучитьОбъект();
			
			// Копируем данные на случай, если одна номенклатура или один из упаковочных листов не сможет пройти отгрузку по количеству в заказе,
			// тогда заменим таблицу данными до изменения таблицы заказа
			ТЗ_Заказ_Товары = Новый ТаблицаЗначений;
			ТЗ_Заказ_Товары = ОбъектЗаказ.Товары.Выгрузить();
			
			// Таблица для хранения колонок полученных из таблицы заказа "Товары", используется для копирования колонок в новые таблицы "ТЗ" 
			// с колонками при прохождении цикла по каждой строке отмеченных упаковочных листов/номенклатура
			ТЗКолонкиТоваровЗаказа = Новый ТаблицаЗначений;
			ТЗКолонкиТоваровЗаказа = ОбъектЗаказ.Товары.Выгрузить();
			ТЗКолонкиТоваровЗаказа.Очистить();
			
			// Копируем данные на случай, если один из упаковочных листов/номенклатура не сможет пройти отгрузку по количеству в заказе,
			// тогда заменим таблицу данными до изменения таблицы заказа, данными из упаковочного листа
			// Используется для временного копирования и хранения оригинальных данных
			ТабВременная_ТЗ_Заказ_Товары = Новый ТаблицаЗначений;
			ТабВременная_ТЗ_Заказ_Товары = ТЗ_Заказ_Товары.Скопировать();
			
			// Для отгрузки упаковочных листов
			Если ТоварыВКоробках Тогда
				
				ТЗ_Заказ_ТоварыВКоробах = Новый ТаблицаЗначений;
				ТЗ_Заказ_ТоварыВКоробах = ОбъектЗаказ.гф_ТоварыВКоробах.Выгрузить();
				
				ТЗ_ПричиныИзмененияТоварыВКоробах = Новый ТаблицаЗначений;
				ТЗ_ПричиныИзмененияТоварыВКоробах = ОбъектЗаказ.гф_ПричиныИзмененияТоваровВКоробах.Выгрузить();
				
				// Таблица для хранения колонок полученных из таблицы заказа "гф_ТоварыВКоробах"
				ТЗКолонкиТоварыВКоробахЗаказа = Новый ТаблицаЗначений;
				ТЗКолонкиТоварыВКоробахЗаказа = ОбъектЗаказ.гф_ТоварыВКоробах.Выгрузить();
				ТЗКолонкиТоварыВКоробахЗаказа.Очистить();
				
				// Таблица для хранения колонок полученных из таблицы заказа "гф_ПричиныИзмененияТоваровВКоробах"
				ТЗКолонкиПричиныИзмененияТоваровВКоробах = Новый ТаблицаЗначений;
				ТЗКолонкиПричиныИзмененияТоваровВКоробах = ОбъектЗаказ.гф_ПричиныИзмененияТоваровВКоробах.Выгрузить();
				ТЗКолонкиПричиныИзмененияТоваровВКоробах.Очистить();
				
				// Копируем на случай, если один из упаковочных листов не сможет пройти отгрузку по количеству в заказе
				// Используется для временного копирования и хранения оригинальных данных
				ТабВременная_ТЗ_Заказ_ТоварыВКоробах = Новый ТаблицаЗначений;
				ТабВременная_ТЗ_Заказ_ТоварыВКоробах = ТЗ_Заказ_ТоварыВКоробах.Скопировать();
				
				// Копируем на случай, если один из упаковочных листов не сможет пройти отгрузку по количеству в заказе
				// Используется для временного копирования и хранения оригинальных данных
				ТабВременная_ТЗ_Заказ_ПричиныИзмененияТоварыВКоробах = Новый ТаблицаЗначений;
				ТабВременная_ТЗ_Заказ_ПричиныИзмененияТоварыВКоробах = ТЗ_ПричиныИзмененияТоварыВКоробах.Скопировать();
				
			КонецЕсли;
			
			Отбор = Новый Структура();
			Отбор.Вставить("Заказ", СтрокаЗаказы.Заказ);
			
			СписокУпаковочныйЛистИлиНоменклатура = ТЗСписокУпаковочныйЛистИлиНоменклатура.НайтиСтроки(Отбор);
			
			Для Каждого СтрокаУпаковочныйЛистНоменклатура Из СписокУпаковочныйЛистИлиНоменклатура Цикл
				
				// Временная пустая таблица для записи новых данных по Товарам
				ТЗ_Новая_Заказ_Товары = Новый ТаблицаЗначений;
				ТЗ_Новая_Заказ_Товары = ТЗКолонкиТоваровЗаказа.СкопироватьКолонки();
				
				Если ТоварыВКоробках Тогда
					
					УпЛистНайден = Ложь;
					ОтказЗаписьУпаковочногоЛиста = Истина;
					
					СостояниеКороба = СтрокаУпаковочныйЛистНоменклатура.УпаковочныйЛистРодитель.гф_СостояниеКороба;
					
					// Временная пустая таблица для записи новых данных по Упаковочным листам
					ТЗ_Новая_Заказ_ТоварыВКоробах = Новый ТаблицаЗначений;
					ТЗ_Новая_Заказ_ТоварыВКоробах = ТЗКолонкиТоварыВКоробахЗаказа.СкопироватьКолонки();
					
					// Временная пустая таблица для записи новых данных по Упаковочным листам
					ТЗ_Новая_Заказ_ПричиныИзмененияТоваровВКоробах = Новый ТаблицаЗначений;
					ТЗ_Новая_Заказ_ПричиныИзмененияТоваровВКоробах = ТЗКолонкиПричиныИзмененияТоваровВКоробах.СкопироватьКолонки();
					
					ТабКомплектация = Новый ТаблицаЗначений;
					ТабКомплектация.Колонки.Добавить("Номенклатура");
					ТабКомплектация.Колонки.Добавить("Характеристика");
					ТабКомплектация.Колонки.Добавить("Количество");
					// Данное поле используется для записи количества пересорта, которого нет в варианте комплектации,
					// что бы рпботе с табличной частью заказа добавить это количество
					ТабКомплектация.Колонки.Добавить("КоличествоУпаковок");
					
					// Получение списка номенклатуры входящей в упаковочный лист для последующего разделения строк с вычетом количества
					// из обрабатываемой текущей строки в заказе согласно перебираемым строкам эталонной комплектации упаковочного листа
					Для Каждого СтрокаКомплектация Из СтрокаУпаковочныйЛистНоменклатура.УпаковочныйЛистРодитель.Товары Цикл
						НоваяСтрокаКомплектация = ТабКомплектация.Добавить();
						НоваяСтрокаКомплектация.Номенклатура 	= СтрокаКомплектация.Номенклатура;
						НоваяСтрокаКомплектация.Характеристика 	= СтрокаКомплектация.Характеристика;
						НоваяСтрокаКомплектация.Количество 		= СтрокаКомплектация.Количество;
					КонецЦикла;
					
				КонецЕсли;
				
				ТекстСообщения = "";
				
				// Разбиваем строки Упаковочных листов, записываем скидкиРТУ, датуРТУ и комментарийРТУ.
				// Перебираем строки согласно варианту комплектации упаковочного листа, эталон варианта комплектации сравнивается с текущим
				// состояним короба (Не полный, Пересорт) передаем дальше скидку "СкидкаВКоробах" по текущемуупаковочному листу,
				// с последующей записью для включения "СкидкаВКоробах" в отбор поиска строк по номеменклатуре и характеристике 
				Если ТоварыВКоробках Тогда
					
					ВозвратПродолжить 	= Ложь;
					Отказ 				= Ложь;
					
					МассивУдалитьСтроки = Новый Массив;
					
					Для Каждого СтрокаТоварыВКоробах Из ТЗ_Заказ_ТоварыВКоробах Цикл
						
						Если СтрокаУпаковочныйЛистНоменклатура.ВариантКомплектации = СтрокаТоварыВКоробах.ВариантКомплектации
							И СтрокаТоварыВКоробах.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить
							И Не СтрокаТоварыВКоробах.Отменено
							И Не СтрокаТоварыВКоробах.Добавлено Тогда
							
							ИсточникУпаковочныйЛист = СтрокаУпаковочныйЛистНоменклатура.УпаковочныйЛистРодитель;
							
							Если СтрокаТоварыВКоробах.Количество = 1 Тогда
								
								Отбор = Новый Структура();
								Отбор.Вставить("ВариантКомплектации", СтрокаУпаковочныйЛистНоменклатура.ВариантКомплектации);
								Отбор.Вставить("ВариантОбеспечения", Перечисления.ВариантыОбеспечения.КОбеспечению);
								
								СтрокаАА = ТЗ_Заказ_ТоварыВКоробах.НайтиСтроки(Отбор);
								
								Если СтрокаАА.Количество() > 0 Тогда
									СтрокаАА[0].Количество = СтрокаАА[0].Количество + 1;
									
									СтрокаАА[0].Сумма = СтрокаАА[0].Количество * СтрокаАА[0].ЦенаКороба;
									
									ТекущаяСтрока = СтрокаАА[0];
									
									КэшированныеЗначения = Неопределено;
									
									СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ОбъектЗаказ);
									// Минимальный набор действий при котором выполняется пересчет в общем модуле
									СтруктураДействий = Новый Структура;
									
									СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
									СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
									
									ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

									МассивУдалитьСтроки.Добавить(СтрокаТоварыВКоробах);
									ОтказЗаписьУпаковочногоЛиста = Ложь;
									
									ЗаписатьИсториюКомплектацииУпаковочногоЛиста(ТЗ_ПричиныИзмененияТоварыВКоробах,
										ТЗ_Новая_Заказ_ПричиныИзмененияТоваровВКоробах, СтрокаАА[0]);
									
								КонецЕсли;
								
								УдалитьНоменклатуру(Отказ, ТабКомплектация, ТЗ_Заказ_Товары, СтрокаТоварыВКоробах, СостояниеКороба);
								
								ОбработкаУпаковочногоЛиста(Отказ, Источник, ИсточникУпаковочныйЛист);
								
							Иначе
								
								Отбор = Новый Структура();
								Отбор.Вставить("ВариантКомплектации", СтрокаУпаковочныйЛистНоменклатура.ВариантКомплектации);
								Отбор.Вставить("ВариантОбеспечения", Перечисления.ВариантыОбеспечения.КОбеспечению);
								Отбор.Вставить("Отменено", Ложь);
								Отбор.Вставить("Добавлено", Ложь);
								
								СтрокаАА = ТЗ_Заказ_ТоварыВКоробах.НайтиСтроки(Отбор);
								
								Если СтрокаАА.Количество() > 0 Тогда
									
									СтрокаАА[0].Количество = СтрокаАА[0].Количество + 1;
									СтрокаАА[0].Сумма = СтрокаАА[0].Количество * СтрокаАА[0].ЦенаКороба;
									
									ТекущаяСтрока = СтрокаАА[0];
									КэшированныеЗначения = Неопределено;
									СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ОбъектЗаказ);
									// Минимальный набор действий при котором выполняется пересчет в общем модуле
									СтруктураДействий = Новый Структура;
									СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
									СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
									ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
									
									СтрокаТоварыВКоробах.Количество = СтрокаТоварыВКоробах.Количество - 1;
									СтрокаТоварыВКоробах.Сумма = СтрокаТоварыВКоробах.Количество * СтрокаТоварыВКоробах.ЦенаКороба;
									
									ТекущаяСтрока = СтрокаТоварыВКоробах;
									КэшированныеЗначения = Неопределено;
									СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ОбъектЗаказ);
									// Минимальный набор действий при котором выполняется пересчет в общем модуле
									СтруктураДействий = Новый Структура;
									СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
									СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
									ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
									
									ОтказЗаписьУпаковочногоЛиста = Ложь;
									ЗаписатьИсториюКомплектацииУпаковочногоЛиста(ТЗ_ПричиныИзмененияТоварыВКоробах,
										ТЗ_Новая_Заказ_ПричиныИзмененияТоваровВКоробах, СтрокаАА[0]);
									
									УдалитьНоменклатуру(Отказ, ТабКомплектация, ТЗ_Заказ_Товары, СтрокаТоварыВКоробах, СостояниеКороба);
									
									ОбработкаУпаковочногоЛиста(Отказ, Источник, ИсточникУпаковочныйЛист);
									
								Иначе
									
									Отбор = Новый Структура();
									Отбор.Вставить("ВариантКомплектации", СтрокаУпаковочныйЛистНоменклатура.ВариантКомплектации);
									Отбор.Вставить("ВариантОбеспечения", Перечисления.ВариантыОбеспечения.КОбеспечению);
									Отбор.Вставить("Отменено", Ложь);
									
									СтрокаАА = ТЗ_Заказ_ТоварыВКоробах.НайтиСтроки(Отбор);
									
									Если СтрокаАА.Количество() > 0 Тогда
										
										СтрокаАА[0].Количество = СтрокаАА[0].Количество + 1;
										СтрокаАА[0].Сумма = СтрокаАА[0].Количество * СтрокаАА[0].ЦенаКороба;
										
										ТекущаяСтрока = СтрокаАА[0];
										КэшированныеЗначения = Неопределено;
										СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ОбъектЗаказ);
										// Минимальный набор действий при котором выполняется пересчет в общем модуле
										СтруктураДействий = Новый Структура;
										СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
										СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
										ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
										
										СтрокаТоварыВКоробах.Количество = СтрокаТоварыВКоробах.Количество - 1;
										СтрокаТоварыВКоробах.Сумма = СтрокаТоварыВКоробах.Количество * СтрокаТоварыВКоробах.ЦенаКороба;
										
										ТекущаяСтрока = СтрокаТоварыВКоробах;
										КэшированныеЗначения = Неопределено;
										СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ОбъектЗаказ);
										// Минимальный набор действий при котором выполняется пересчет в общем модуле
										СтруктураДействий = Новый Структура;
										СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
										СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
										ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

                                        ОтказЗаписьУпаковочногоЛиста = Ложь;
										
										ЗаписатьИсториюКомплектацииУпаковочногоЛиста(ТЗ_ПричиныИзмененияТоварыВКоробах,
											ТЗ_Новая_Заказ_ПричиныИзмененияТоваровВКоробах, СтрокаАА[0]);
										
										УдалитьНоменклатуру(Отказ, ТабКомплектация, ТЗ_Заказ_Товары, СтрокаТоварыВКоробах, СостояниеКороба);
										
										ОбработкаУпаковочногоЛиста(Отказ, Источник, ИсточникУпаковочныйЛист);
										
									Иначе
										
										ТекстСообщения = "Сообщить код исключительной ситуации администратору ""А456""";
										ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
										Возврат;
										
									КонецЕсли;
									
								КонецЕсли;
								
							КонецЕсли;
							
						ИначеЕсли СтрокаУпаковочныйЛистНоменклатура.ВариантКомплектации = СтрокаТоварыВКоробах.ВариантКомплектации
							И СтрокаТоварыВКоробах.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить
							И Не СтрокаТоварыВКоробах.Отменено
							И СтрокаТоварыВКоробах.Добавлено Тогда
							
							ТекстСообщения = "Сообщить код исключительной ситуации администратору ""А789""";
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
							Возврат;
							
						КонецЕсли;
						
					КонецЦикла;
					
					Если Отказ Тогда
						ТекстСообщения = СтрШаблон(НСтр("ru = 'В ""%1"" не возможно скорректировать номенклатуру из ""%2"".'"),
						СтрокаЗаказы.Заказ, Источник.Ссылка);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						Отказ = Истина;
						СтрокаЗаказы.ОтказОтЗаписи = Истина;
						Продолжить;
					КонецЕсли;
		
                    Отбор = Новый Структура();
					// Отбор.Вставить("ВариантКомплектации", СтрокаУпаковочныйЛистНоменклатура.ВариантКомплектации);
					Отбор.Вставить("ВариантОбеспечения", Перечисления.ВариантыОбеспечения.Отгрузить);
					Отбор.Вставить("Количество", 0);
					
					МассивУдалитьОтгрузитьНоль = ТЗ_Заказ_Товары.НайтиСтроки(Отбор);
					
					Для Каждого УдалитьСтроку Из МассивУдалитьОтгрузитьНоль Цикл
						ТЗ_Заказ_Товары.Удалить(УдалитьСтроку);
					КонецЦикла;
					
					Для Каждого УдалитьСтроку Из МассивУдалитьСтроки Цикл
						ТЗ_Заказ_ТоварыВКоробах.Удалить(УдалитьСтроку);
					КонецЦикла;
					
					Если ОтказЗаписьУпаковочногоЛиста Тогда
						ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось найти комплектацию со статусом ""Отгружено"" для возврата не отгруженного количества ""%2"" по ""%1"" на вкладке ""Товары в коробах"".
						|Необходимо проверить количество в колонке для комплектации упаковочного листа со статусом ""Отгружено"".'"),
						ОбъектЗаказ, СтрокаУпаковочныйЛистНоменклатура.УпаковочныйЛистРодитель);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						Прервать;
					КонецЕсли;
					
				Иначе
					
					ОбработкаЗаполненияТоваров(Отказ, ТЗ_Новая_Заказ_Товары, ТЗ_Заказ_Товары, СтрокаУпаковочныйЛистНоменклатура, СтруктураПереданныхДанных,
						ОбъектЗаказ);
					
					Если Отказ Тогда
						ТекстСообщения = СтрШаблон(НСтр("ru = 'В ""%1"" не возможно скорректировать номенклатуру из ""%2"".'"),
						СтрокаЗаказы.Заказ, Источник.Ссылка);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						Отказ = Истина;
						СтрокаЗаказы.ОтказОтЗаписиПоискНоменклатуры = Истина;
						СтрокаЗаказы.ОтказОтЗаписи = Истина;
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;	
				
				Если ТоварыВКоробках Тогда
					
					Если Не ОтказЗаписьУпаковочногоЛиста Тогда
						
						Для Каждого СтрокаТаблицыИсточника Из ТЗ_Новая_Заказ_Товары Цикл
							СтрокаТаблицыПриемника = ТЗ_Заказ_Товары.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
						КонецЦикла;
						
						ТабВременная_ТЗ_Заказ_Товары = ТЗ_Заказ_Товары.Скопировать();
						
						Для Каждого СтрокаТаблицыИсточника Из ТЗ_Новая_Заказ_ТоварыВКоробах Цикл
							СтрокаТаблицыПриемника = ТЗ_Заказ_ТоварыВКоробах.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
						КонецЦикла;
						
						ТабВременная_ТЗ_Заказ_ТоварыВКоробах = ТЗ_Заказ_ТоварыВКоробах.Скопировать();
						
						// Добавление строк в таблицы "гф_ПричиныИзмененияТоваровВКоробах" с историей по комплектации
						Для Каждого СтрокаТаблицыИсточника Из ТЗ_Новая_Заказ_ПричиныИзмененияТоваровВКоробах Цикл
							СтрокаТаблицыПриемника = ТЗ_ПричиныИзмененияТоварыВКоробах.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
						КонецЦикла;
						
						ТабВременная_ТЗ_Заказ_ПричиныИзмененияТоварыВКоробах = ТЗ_ПричиныИзмененияТоварыВКоробах.Скопировать();
						
					Иначе
						
						// Возвращаем состояние таблиц до обработки упаковочного листа или номенклатуры
						ТЗ_Заказ_Товары 						= ТабВременная_ТЗ_Заказ_Товары.Скопировать();
						ТЗ_Заказ_ТоварыВКоробах 				= ТабВременная_ТЗ_Заказ_ТоварыВКоробах.Скопировать();
						ТЗ_ПричиныИзмененияТоварыВКоробах 		= ТабВременная_ТЗ_Заказ_ПричиныИзмененияТоварыВКоробах.Скопировать();
						
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						
					КонецЕсли;
					
				Иначе
					
					Для Каждого СтрокаТаблицыИсточника Из ТЗ_Новая_Заказ_Товары Цикл
						СтрокаТаблицыПриемника = ТЗ_Заказ_Товары.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
			СтрокаЗаказы.НовыеДанныеДляТаблицыПоЗаказу 										= ТЗ_Заказ_Товары;
			СтрокаЗаказы.ВозможнаЗаписьЗаказа 												= Истина;
			
			Если ТоварыВКоробках Тогда
				ТЗ_Заказ_ТоварыВКоробах.Свернуть("ВариантКомплектации, Артикул, ЦенаКороба, IDКороба, Добавлено, ПричинаДобавления, Отменено, ПричинаОтмены, ИдентификаторСтроки, ВидЦены,"
				+ "Скидка, СкидкаДляРТУ, ДатаДляРТУ, КомментарийРТУ, ЦенаКоробаСоСкидкой, СтавкаНДС, ВариантОбеспечения,ПрайсЛистДляРТУ", "Количество, Сумма, СуммаНДС, СуммаСНДС");
				
				СтрокаЗаказы.НовыеДанныеДляТаблицыПоЗаказуТоварыВКоробах 					= ТЗ_Заказ_ТоварыВКоробах;
				СтрокаЗаказы.НовыеДанныеДляТаблицыПоЗаказуПричиныИзмененияТоварыВКоробах 	= ТЗ_ПричиныИзмененияТоварыВКоробах;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Если ТЗ_Заказы.Количество() > 0 Тогда
		
		НаличиеЗаказаСПерепроведением = ТЗ_Заказы.Найти(Ложь, "ОтказОтЗаписиПоискНоменклатуры");
		
		Если НаличиеЗаказаСПерепроведением = Неопределено Тогда
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Корректировка заказа(ов) не выполнена, не была сопоставлена номенклатура в заказе по ""%1"".'"),
			Источник.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
			
		КонецЕсли;
		
		НаличиеЗаказаСПерепроведением = ТЗ_Заказы.Найти(Ложь, "ОтказОтЗаписи");
		
		Если НаличиеЗаказаСПерепроведением = Неопределено Тогда
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Корректировка заказа(ов) не требуется, так как была выполнена ранее для ""%1"".'"),
			Источник.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
			
		КонецЕсли;
		
		// Транзакция проводит документы заказ, расходный ордер, упаковочный лист
		// и изменяет агрегацию (элементы справочника с кодами маркировки)
		НачатьТранзакцию();
		
		Для Каждого СтрокаЗаказы Из ТЗ_Заказы Цикл
			
			Если СтрокаЗаказы.ОтказОтЗаписи Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'По ""%1"" корректировка была выполнена ранее!'"), СтрокаЗаказы.Заказ);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				СтрокаЗаказы.Перепроведение = Ложь;
				Продолжить;	
			КонецЕсли;
			
			Если Не СтрокаЗаказы.ВозможнаЗаписьЗаказа Тогда
				// СообщениеЗаказ = "" + СтрокаЗаказы.Заказ;
			
				// ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось выполнить запись заказа(ов) ""%1"".'"), СообщениеЗаказ);
				// ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			КонецЕсли;
			
			ОбъектЗаказ = СтрокаЗаказы.Заказ.ПолучитьОбъект();
			
			Попытка
				ОбъектЗаказ.Заблокировать();
			Исключение
				ТекстСообщения = СтрШаблон(НСтр("ru = '%1 находится в процессе редактирования и не может быть изменен.'"), ОбъектЗаказ);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Прервать;
			КонецПопытки;
			
			// Загрузка таблицы с новыми данными по отгрузке по заказу с учетом комплектации всех прошедших проверку упаковочных листов 
			// и доступного наличии количества номенклатуры для отгрузки в заказе
			ОбъектЗаказ.Товары.Загрузить(СтрокаЗаказы.НовыеДанныеДляТаблицыПоЗаказу);
			
			Если ТоварыВКоробках Тогда
				// Загрузка таблицы с новыми данными по ТоварыВКоробах
				Если СтрокаЗаказы.НовыеДанныеДляТаблицыПоЗаказуТоварыВКоробах.Количество() > 0 Тогда
					ОбъектЗаказ.гф_ТоварыВКоробах.Загрузить(СтрокаЗаказы.НовыеДанныеДляТаблицыПоЗаказуТоварыВКоробах);
				КонецЕсли;	
				// Загрузка таблицы с новыми данными по ПричиныИзмененияТоварыВКоробах
				Если СтрокаЗаказы.НовыеДанныеДляТаблицыПоЗаказуПричиныИзмененияТоварыВКоробах.Количество() > 0 Тогда
					ОбъектЗаказ.гф_ПричиныИзмененияТоваровВКоробах.Загрузить(СтрокаЗаказы.НовыеДанныеДляТаблицыПоЗаказуПричиныИзмененияТоварыВКоробах);
				КонецЕсли;
			КонецЕсли;
			
			// Запись нового максимального значения кода строки в заказ, так как ранее разбивали строки в заказе и проставляли код строки
			ТЗМакс = ОбъектЗаказ.Товары.Выгрузить(, "КодСтроки");
			
			МаксКодСтроки = Новый СравнениеЗначений;
			ТЗМакс.Сортировать("КодСтроки Убыв", МаксКодСтроки);
			
			Если ТЗМакс.Количество() > 0 Тогда
				ОбъектЗаказ.МаксимальныйКодСтроки = ТЗМакс[0].КодСтроки;
			Иначе
				ОбъектЗаказ.МаксимальныйКодСтроки = 0;
			КонецЕсли;
			
			Попытка
				
				Отладка = Ложь;
				
				Если Не Отладка Тогда
					ОбъектЗаказ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				КонецЕсли;
				
				СтрокаЗаказы.Перепроведение = Истина;
				
			Исключение
				
				СтрокаЗаказы.Перепроведение = Ложь;
				
				СтрокаЗаказы.ОшибкаПроведенияЗаказа = Истина;
				
			КонецПопытки;
			
			СообщениеЗаказ = "" + СтрокаЗаказы.Заказ;
			
			Если СтрокаЗаказы.Перепроведение Тогда
				
				Если ТранзакцияАктивна() Тогда
					
					НаборКурсов = РегистрыСведений.гф_НеОтгружатьПоРасходномуОрдеру.СоздатьНаборЗаписей();
					НаборКурсов.Отбор.РасходныйОрдер.Установить(Источник.Ссылка);
					НаборКурсов.Отбор.ЗаказКлиента.Установить(СтрокаЗаказы.Заказ);
					НаборКурсов.Прочитать();
					Если НаборКурсов.Количество() = 0 Тогда
						
						НовыйКурс = НаборКурсов.Добавить();
						НовыйКурс.РасходныйОрдер 		= Источник.Ссылка; 
						НовыйКурс.ЗаказКлиента 			= СтрокаЗаказы.Заказ; 
                        НовыйКурс.Выполнено 			= Истина;
						НовыйКурс.ДатаОтмены 			= ТекущаяДата();
						
					ИначеЕсли НаборКурсов.Количество() = 1 Тогда
						НовыйКурс = НаборКурсов[0];
					КонецЕсли;
					НовыйКурс.Выполнено = Истина;
					
					Попытка
						НаборКурсов.Записать();
						СтрокаЗаказы.ЗаписьВРегистр = Истина;
					Исключение
						СтрокаЗаказы.Перепроведение = Ложь;
						СтрокаЗаказы.ЗаписьВРегистр = Ложь;
						
						Если ТранзакцияАктивна() Тогда
							ОтменитьТранзакцию();
						КонецЕсли;
						
						ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось внести запись о корректировке в регистр по ""%1"".'"),
						СообщениеЗаказ);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						
						ЗаписьЖурналаРегистрации(НСтр("ru = 'Проведение документа ""Заказ клиента"" по регистру корректировки.'"),
						УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						ВызватьИсключение;
						
					КонецПопытки;
					
				КонецЕсли;
			Иначе
				// ТекстСообщения = "Сообщить код ситуации разработчику ""ЕЕ456""";
				// ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Продолжить; 
			КонецЕсли;
			
		КонецЦикла;
		
		ОтборПерепроведениеЗапись = Новый Структура();
		ОтборПерепроведениеЗапись.Вставить("Перепроведение", Истина);
		ОтборПерепроведениеЗапись.Вставить("ЗаписьВРегистр", Истина);
		
		НаличиеЗаказаСПерепроведением = ТЗ_Заказы.НайтиСтроки(ОтборПерепроведениеЗапись);
		
		Если НаличиеЗаказаСПерепроведением.Количество() > 0 Тогда
			
			Отладка = Ложь;
			
			Если Не Отладка И ТранзакцияАктивна() Тогда
				
				Если ТранзакцияАктивна() Тогда
					ЗафиксироватьТранзакцию();
				КонецЕсли;
				
				// Для Каждого Стр Из НаличиеЗаказаСПерепроведениема Цикл
				//	
				//	РасходныйОрдерПредставление = Стр.РасходныйОрдер;
				//	Прервать;
				//	
				// КонецЦикла;
				
				Для Каждого МассивЗаказ Из НаличиеЗаказаСПерепроведением Цикл
					
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Выполнена корректировка в ""%1""!'"),
					МассивЗаказ.Заказ);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
				КонецЦикла;
				
			КонецЕсли;
		Иначе
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			ОтборОшибкаЗаписиЗаказа = Новый Структура();
			ОтборОшибкаЗаписиЗаказа.Вставить("ОшибкаПроведенияЗаказа", Истина);
			
			НаличиеЗаказаСОшибкойЗаписи = ТЗ_Заказы.НайтиСтроки(ОтборОшибкаЗаписиЗаказа);
			
			Если НаличиеЗаказаСОшибкойЗаписи.Количество() > 0 Тогда
				ТекстСообщения = "Выполение перепроведения скорректированного заказа завершилось неудачно."; //СтрШаблон(НСтр("ru = 'По заказу ""%1"" сформирован и проведен расходный ордер ""%2""!'"),
				//	МассивЗаказ, РасходныйОрдерПредставление);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Иначе	
				ТекстСообщения = "Повторная корректировка заказа(ов) не требуется."; //СтрШаблон(НСтр("ru = 'По заказу ""%1"" сформирован и проведен расходный ордер ""%2""!'"),
				//	МассивЗаказ, РасходныйОрдерПредставление);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура УдалитьНоменклатуру(Отказ, ТабКомплектация, ТЗ_Заказ_Товары, СтрокаТоварыВКоробах, СостояниеКороба)
	
	ДатаДляРТУ 				= СтрокаТоварыВКоробах.ДатаДляРТУ;
	ПроцентРучнойСкидки 	= СтрокаТоварыВКоробах.Скидка;
	СкидкаДляРТУ 			= СтрокаТоварыВКоробах.СкидкаДляРТУ;
	Отгрузить 				= Перечисления.ВариантыОбеспечения.Отгрузить;
	Отменено 				= Ложь;
	
	МассивУдалитьСтрокиНоменклатуры = Новый Массив;
	
	Для Каждого СтрокаКомплектацияРазбиение Из ТабКомплектация Цикл
		
		НайденаНоменклатураПоКомплектации = Ложь;
		
		Количество 			= СтрокаКомплектацияРазбиение.Количество;
		Номенклатура 		= СтрокаКомплектацияРазбиение.Номенклатура;
		Характеристика 		= СтрокаКомплектацияРазбиение.Характеристика;
		//Для Каждого СтрокаТовары Из ТЗ_Заказ_Товары Цикл
		//	Если СтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда
		//		//	Продолжить;
		//		//Иначе
		//		
		//		Если СтрокаКомплектацияРазбиение.Номенклатура = СтрокаТовары.Номенклатура
		//			И СтрокаКомплектацияРазбиение.Характеристика = СтрокаТовары.Характеристика
		//			И СкидкаВКоробах = СтрокаТовары.ПроцентРучнойСкидки
		//			И СтрокаКомплектацияРазбиение.Количество = СтрокаТовары.Количество
		//			И ДатаДляРТУ = СтрокаТовары.гф_ДатаДляРТУ
		//			// Есть заказы в которых подобная номенклатура имеет и не имеет отметку отмены, добавлено условие этого
		//			И Не СтрокаТовары.Отменено Тогда
		//			
		//			НайденаНоменклатураПоКомплектации = Истина;
		//			
		//			МассивУдалитьСтрокиНоменклатуры.Добавить(СтрокаТовары);
		//			
		//			Прервать;
		//			
		//		ИначеЕсли СтрокаКомплектацияРазбиение.Номенклатура = СтрокаТовары.Номенклатура
		//			И СтрокаКомплектацияРазбиение.Характеристика = СтрокаТовары.Характеристика
		//			И СкидкаВКоробах = СтрокаТовары.ПроцентРучнойСкидки
		//			И СтрокаКомплектацияРазбиение.Количество < СтрокаТовары.Количество
		//			И ДатаДляРТУ = СтрокаТовары.гф_ДатаДляРТУ
		//			// Есть заказы в которых подобная номенклатура имеет и не имеет отметку отмены, добавлено условие этого
		//			И Не СтрокаТовары.Отменено Тогда
		//			
		//			
		//			СтрокаТовары.Количество = СтрокаТовары.Количество - СтрокаКомплектацияРазбиение.Количество; 
		//			//СтрокаТовары
		//			
		//		КонецЕсли;
		//		
		//		
		//		
		//	КонецЕсли;
		//КонецЦикла;	
		
		Отбор = Новый Структура();
		Отбор.Вставить("ВариантОбеспечения", Отгрузить);
		Отбор.Вставить("Номенклатура", Номенклатура);
		Отбор.Вставить("Характеристика", Характеристика);
		Отбор.Вставить("Количество", Количество);
		Отбор.Вставить("ПроцентРучнойСкидки", ПроцентРучнойСкидки);
		Отбор.Вставить("гф_СкидкаДляРТУ", СкидкаДляРТУ);
		Отбор.Вставить("гф_ДатаДляРТУ", ДатаДляРТУ);
		Отбор.Вставить("Отменено", Отменено);
		
		МассивСтрок = ТЗ_Заказ_Товары.НайтиСтроки(Отбор);
		
		Если МассивСтрок.Количество() = 1 Тогда
			
			НайденаНоменклатураПоКомплектации = Истина;
			МассивУдалитьСтрокиНоменклатуры.Добавить(МассивСтрок[0]);
			НомНайденаВМассиве = Истина;
			
		ИначеЕсли МассивСтрок.Количество() > 1 Тогда
			
			НайденаНоменклатураПоКомплектации = Истина;
			МассивСтрок[0].Количество = МассивСтрок[0].Количество - СтрокаКомплектацияРазбиение.Количество;
			МассивСтрок[0].КоличествоУпаковок = МассивСтрок[0].КоличествоУпаковок - СтрокаКомплектацияРазбиение.Количество;
			НомНайденаВМассиве = Истина;
		Иначе
			
			Если МассивСтрок.Количество() = 0 Тогда
				
				Отбор = Новый Структура();
				Отбор.Вставить("ВариантОбеспечения", Отгрузить);
				Отбор.Вставить("Номенклатура", Номенклатура);
				Отбор.Вставить("Характеристика", Характеристика);
				//Отбор = Вставить("Количество", Количество);
				Отбор.Вставить("ПроцентРучнойСкидки", ПроцентРучнойСкидки);
				Отбор.Вставить("гф_СкидкаДляРТУ", СкидкаДляРТУ);
				Отбор.Вставить("гф_ДатаДляРТУ", ДатаДляРТУ);
				Отбор.Вставить("Отменено", Отменено);
				
				МассивСтрок = ТЗ_Заказ_Товары.НайтиСтроки(Отбор);
				
				Если МассивСтрок.Количество() > 0 Тогда
					КоличествоОставшееся = СтрокаКомплектацияРазбиение.Количество;
					Для Каждого СтрокаМассива Из МассивСтрок Цикл
						
						Если СтрокаМассива.Количество > КоличествоОставшееся Тогда
							
							НайденаНоменклатураПоКомплектации = Истина;
							
							СтрокаМассива.Количество = СтрокаМассива.Количество - СтрокаКомплектацияРазбиение.Количество;
							СтрокаМассива.КоличествоУпаковок = СтрокаМассива.КоличествоУпаковок - СтрокаКомплектацияРазбиение.Количество;
							
						ИначеЕсли СтрокаМассива.Количество < КоличествоОставшееся Тогда
							
							УдаляемоеКоличество = СтрокаМассива.Количество;
							КоличествоОставшееся = КоличествоОставшееся - УдаляемоеКоличество;
							
							СтрокаМассива.Количество = СтрокаМассива.Количество - УдаляемоеКоличество;
							СтрокаМассива.КоличествоУпаковок = СтрокаМассива.КоличествоУпаковок - УдаляемоеКоличество;
							
							МассивУдалитьСтрокиНоменклатуры.Добавить(СтрокаМассива);
							//Прервать;
						ИначеЕсли СтрокаМассива.Количество = КоличествоОставшееся Тогда
							
							УдаляемоеКоличество = СтрокаМассива.Количество;
							КоличествоОставшееся = КоличествоОставшееся - УдаляемоеКоличество;
							
							СтрокаМассива.Количество = СтрокаМассива.Количество - УдаляемоеКоличество;
							СтрокаМассива.КоличествоУпаковок = СтрокаМассива.КоличествоУпаковок - УдаляемоеКоличество;
							//КоличествоОставшееся = КоличествоОставшееся - СтрокаМассива.Количество;
							МассивУдалитьСтрокиНоменклатуры.Добавить(СтрокаМассива);
							
							Если КоличествоОставшееся = 0 Тогда
								НайденаНоменклатураПоКомплектации = Истина;
							КонецЕсли;
							
						Иначе	
							ТекстСообщения = СтрШаблон(НСтр("ru = 'Исключительная ситуация, код ошибки для разработчика ПП453. Проблема с определением ""%1"" по ""%2"" на вкладке ""Товары"".'"),
							СтрокаКомплектацияРазбиение.Номенклатура, СтрокаКомплектацияРазбиение.Характеристика);
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
							Отказ = Истина;
						КонецЕсли;
						
						Если КоличествоОставшееся = 0 Тогда
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
				Иначе
					
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Исключительная ситуация, код ошибки для разработчика ПП454. Проблема с определением ""%1"" по ""%2"" на вкладке ""Товары"".'"),
					СтрокаКомплектацияРазбиение.Номенклатура, СтрокаКомплектацияРазбиение.Характеристика);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					Отказ = Истина;
					
				КонецЕсли;
				
			Иначе	
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Исключительная ситуация, код ошибки для разработчика ПП455. Проблема с определением ""%1"" по ""%2"" на вкладке ""Товары"".'"),
				СтрокаКомплектацияРазбиение.Номенклатура, СтрокаКомплектацияРазбиение.Характеристика);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не НайденаНоменклатураПоКомплектации Тогда
			Отказ = Истина;
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не найдена ""%1"" по ""%2"" на вкладке ""Товары"".'"),
			СтрокаКомплектацияРазбиение.Номенклатура, СтрокаКомплектацияРазбиение.Характеристика);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого УдалитьСтроку Из МассивУдалитьСтрокиНоменклатуры Цикл
		ТЗ_Заказ_Товары.Удалить(УдалитьСтроку);
	КонецЦикла;
							
КонецПроцедуры

Процедура ЗаписатьИсториюКомплектацииУпаковочногоЛиста(ТЗ_ПричиныИзмененияТоварыВКоробах,
	ТЗ_Новая_Заказ_ПричиныИзмененияТоваровВКоробах, СтрокаАА)
	
	Количество = 1;
	
	МассивСтрок = ТЗ_ПричиныИзмененияТоварыВКоробах.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаАА.ИдентификаторСтроки));
	
	// Проверка истории по строке комплектации, если нет первой строки с историей, то добавим ее 
	Если МассивСтрок.Количество() = 0 Тогда
		Строка = ТЗ_ПричиныИзмененияТоварыВКоробах.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, СтрокаАА);
	ИначеЕсли МассивСтрок.Количество() = 1 И Не ЗначениеЗаполнено(МассивСтрок[0].Количество) Тогда
		ЗаполнитьЗначенияСвойств(МассивСтрок[0], СтрокаАА);
	КонецЕсли;
	
	ОтказЗаписьУпаковочногоЛиста = Ложь;
	
	Ответственный = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	СтрокаПричиныИзменения = ТЗ_Новая_Заказ_ПричиныИзмененияТоваровВКоробах.Добавить();
	СтрокаПричиныИзменения.ИдентификаторСтроки 	= СтрокаАА.ИдентификаторСтроки;
	СтрокаПричиныИзменения.ВариантКомплектации 	= СтрокаАА.ВариантКомплектации;
	//СтрокаПричиныИзменения.Количество 			= Количество * (-1);
	СтрокаПричиныИзменения.Количество 			= Количество;
	СтрокаПричиныИзменения.Причина 				= Справочники.ПричиныОтменыЗаказовКлиентов.гф_ФактическоеРасхождениеНаСкладе;
	СтрокаПричиныИзменения.Дата 				= ТекущаяДата();
	СтрокаПричиныИзменения.Комментарий 			= "";
	СтрокаПричиныИзменения.Ответственный 		= Справочники.Пользователи.НайтиПоНаименованию(Ответственный.ПолноеИмя);
	СтрокаПричиныИзменения.Скидка 				= СтрокаАА.Скидка;
	СтрокаПричиныИзменения.ЦенаКороба 			= СтрокаАА.ЦенаКороба;
	СтрокаПричиныИзменения.ЦенаКоробаСоСкидкой 	= СтрокаАА.ЦенаКоробаСоСкидкой;
	СтрокаПричиныИзменения.ВидЦены 				= СтрокаАА.ВидЦены;
	СтрокаПричиныИзменения.Комментарий 			= "Выполнен возврат комплектации";
	
КонецПроцедуры

Функция ПолучитьПараметрыОбработки(ТабличнаяЧасть, ЭлементФормы, ОповещениеПослеРазбиения, ПараметрыРазбиенияСтроки, ДополнительныеПараметры, Количество)
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ТабличнаяЧасть", 				ТабличнаяЧасть);
	ПараметрыОбработки.Вставить("ЭлементФормы", 				ЭлементФормы);
	ПараметрыОбработки.Вставить("ОповещениеПослеРазбиения", 	ОповещениеПослеРазбиения);
	ПараметрыОбработки.Вставить("ПараметрыРазбиенияСтроки", 	ПараметрыРазбиенияСтроки);
	ПараметрыОбработки.Вставить("ДополнительныеПараметры", 		ДополнительныеПараметры);
	ПараметрыОбработки.Вставить("Количество", 					Количество);
	
	Возврат ПараметрыОбработки;
	
КонецФункции

// Функция-конструктор дополнительных параметров разбиения строки.
//
// Возвращаемое значение:
//  Структура:
//     * ИмяПоляКоличество - Строка - имя поля, по которому будет происходить разбиение
//     * Заголовок - Строка - заголовок формы ввода числа
//     * РазрешитьНулевоеКоличество - Булево - признак, что в исходной и конечной строке может быть 0
//     * Количество - Неопределено, Число - количество, которое будет отображено в форме редактирования числа;
//          если Неопределенно - будет показано количество, взятое из исходной строки.
//
Функция ПараметрыРазбиенияСтроки() Экспорт
	
	ПараметрыРазбиенияСтроки = Новый Структура;
	ПараметрыРазбиенияСтроки.Вставить("ИмяПоляКоличество", "КоличествоУпаковок");
	ПараметрыРазбиенияСтроки.Вставить("Заголовок", НСтр("ru = 'Введите количество товара в новой строке';
														|en = 'Enter quantity of goods in a new line'"));
	ПараметрыРазбиенияСтроки.Вставить("РазрешитьНулевоеКоличество", Истина);
	ПараметрыРазбиенияСтроки.Вставить("Количество", Неопределено);
	
	Возврат ПараметрыРазбиенияСтроки;
	
КонецФункции

Функция ПолучитьДополнительныеПараметры(СтрокаТоварыВКоробах, ОбрабатываетсяСтрокаУпаковочногоЛиста)
	
	Если ОбрабатываетсяСтрокаУпаковочногоЛиста Тогда
		СтруктураПересчетаСуммы = СтруктураПересчетаСуммы(
			"Количество, Сумма, СуммаНДС, СуммаСНДС", "Количество");
	Иначе
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы(
			"Количество, Сумма, СуммаНДС, СуммаСНДС, СуммаРучнойСкидки", "КоличествоУпаковок");
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтруктураПересчетаСуммы", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтруктуруПересчетаСуммы(СтруктураПересчетаСуммы, СтрокаТоварыВКоробах);
	
	Для Каждого СтрокаПересчета Из СтруктураПересчетаСуммы.Поля Цикл
		Если СтрокаПересчета.Значение = Неопределено Тогда
			
			СтруктураПересчетаСуммы.Поля[СтрокаПересчета.Ключ] = 0;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

Процедура ДобавитьСтрокуРазбиениемДляУпаковочногоЛиста(ПараметрыОбработки, НоваяТаблица, ТекущаяСтрока, СтруктураПереданныхДанных,
	ПроверкаОтказ, СкидкаДляРТУДляЗаписьВОрдер, ПрайсЛистДляРТУДляЗаписьВОрдер)
	
	Количество = ПараметрыОбработки.Количество;
	
	ПараметрыРазбиенияСтроки = ПараметрыОбработки.ПараметрыРазбиенияСтроки;
	ДополнительныеПараметры = ПараметрыОбработки.ДополнительныеПараметры;
	
	// Для Упаковочных листов принято решение не менять статус в строке, если количество равно
	Если ТекущаяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] > Количество 
		Или ТекущаяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] = Количество Тогда
		
		НоваяСтрока = НоваяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		
		НоваяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] = Количество;
		
		ТекущаяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] =
			ТекущаяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] - Количество;
		
		НоваяСтрока.ВариантОбеспечения 		= Перечисления.ВариантыОбеспечения.Отгрузить;
		НоваяСтрока.Скидка 					= ТекущаяСтрока.Скидка;
		
		//ПолучитьКомментарийИСкидкиДляРТУ(НоваяСтрока.КомментарийРТУ, НоваяСтрока.СкидкаДляРТУ, НоваяСтрока.ДатаДляРТУ,
		//	НоваяСтрока.Скидка, СтруктураПереданныхДанных, НоваяСтрока.ПрайсЛистДляРТУ);
		
		СкидкаДляРТУДляЗаписьВОрдер 		= НоваяСтрока.СкидкаДляРТУ;     
		ПрайсЛистДляРТУДляЗаписьВОрдер 		= НоваяСтрока.ПрайсЛистДляРТУ;
		
		РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры, ТекущаяСтрока, Ложь);
		
	Иначе
		ПроверкаОтказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Инициализирует структуру для пересчета суммы в табличной части документа
//
// Параметры:
//  СтруктураПересчетаСуммы - Структура - структура подлежащая инициализации, описание см. функция
//                            ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы.
//  ДанныеЗаполнения - ДанныеФормыЭлементКоллекции - строка, содержащая значения суммовых показателей,
//                     которые необходимо будет распределить между строками при пересчете сумм.
//
// Возвращаемое значение
//  Структура - Структура со следующими полями:
//              Поля - Структура - содержит поля для пересчета суммы в табличной части документа,
//              Строки - Массив - содержит элементы типа ДанныеФормыЭлементКоллекции, ссылки нас строки для пересчета сумм,
//              ИтогКоличество - Число - сумма значений в поле "Количество" в строках переданных в параметре "Строки".
//
Процедура ЗаполнитьСтруктуруПересчетаСуммы(СтруктураПересчетаСуммы, ДанныеЗаполнения) Экспорт

	ЗаполнитьЗначенияСвойств(СтруктураПересчетаСуммы.Поля, ДанныеЗаполнения);

	СтруктураПересчетаСуммы.ИтогКоличество = 0;
	СтруктураПересчетаСуммы.Строки.Очистить();

КонецПроцедуры

// Возвращает структуру, содержащую поля для пересчета суммы в табличной части документа.
//
// Параметры:
//  Реквизиты - Строка - Содержит имена полей, заданных через запятую,
//  ИмяПоляКоличество     - Строка - Имя поля, по которому считается коэффициент пропорциональности.
//  РазрядностиОкругления - Структура - структура, в формате ИмяПоля => Количество знаков дробной части, которая будет
//                                      использоваться при пересчете реквизитов.
//
// Возвращаемое значение:
//  Структура - Структура со следующими полями:
//            * Поля - Структура - содержит поля для пересчета суммы в табличной части документа
//            * Строки - Массив - содержит элементы типа ДанныеФормыЭлементКоллекции, ссылки нас строки для пересчета сумм
//            * ИтогКоличество - Число - сумма значений в поле "Количество" в строках переданных в параметре "Строки"
//            * ИмяПоляКоличество - Строка
//            * РазрядностиОкругления - Структура
//
Функция СтруктураПересчетаСуммы(Реквизиты, ИмяПоляКоличество = "Количество", РазрядностиОкругления = Неопределено) Экспорт

	Поля = Новый Структура(Реквизиты);
	
	Результат = Новый Структура;
	Результат.Вставить("Поля", Поля);
	Результат.Вставить("Строки", Новый Массив());
	Результат.Вставить("ИтогКоличество", 0);
	Результат.Вставить("ИмяПоляКоличество", ИмяПоляКоличество);
	Результат.Вставить("РазрядностиОкругления", РазрядностиОкругления);

	Возврат Результат;

КонецФункции

Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры, ТекущаяСтрока, ДобавленоПоПричине = Ложь)
	
	Если НоваяСтрока <> Неопределено И Не ДобавленоПоПричине Тогда
		
		ДобавитьСтрокуДляПересчетаСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы, ТекущаяСтрока);
		ДобавитьСтрокуДляПересчетаСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы, НоваяСтрока);
		
		ПересчитатьСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы);
		
	ИначеЕсли НоваяСтрока <> Неопределено И ДобавленоПоПричине Тогда
		
		СтруктураПересчетаСуммы = ДополнительныеПараметры.СтруктураПересчетаСуммы;
		
		СтруктураПересчетаСуммы.Строки.Добавить(НоваяСтрока);
		СтруктураПересчетаСуммы.ИтогКоличество = СтруктураПересчетаСуммы.ИтогКоличество + НоваяСтрока[СтруктураПересчетаСуммы.ИмяПоляКоличество];
		
		ПересчитатьСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет строку для пересчета суммы в структуру пересчета суммы, описание см. функция
//                            ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы.
//
// Параметры:
//  СтруктураПересчетаСуммы - см. ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы
//  Строка - ДанныеФормыЭлементКоллекции - строка, для которой необходимо рассчитать значения сумм.
//
Процедура ДобавитьСтрокуДляПересчетаСуммы(СтруктураПересчетаСуммы, Строка) Экспорт

	СтруктураПересчетаСуммы.Строки.Добавить(Строка);
	СтруктураПересчетаСуммы.ИтогКоличество = СтруктураПересчетаСуммы.ИтогКоличество + Строка[СтруктураПересчетаСуммы.ИмяПоляКоличество];

КонецПроцедуры

// Пересчитывает суммы в строках, добавленных в структуру пересчета суммы, описание см. функция
//                            ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы.
//
// Параметры:
//  СтруктураПересчетаСуммы - см. ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы
//
Процедура ПересчитатьСуммы(СтруктураПересчетаСуммы)
	
	РазрядностиОкругления = Неопределено;
	Если СтруктураПересчетаСуммы.Свойство("РазрядностиОкругления") Тогда
		РазрядностиОкругления = СтруктураПересчетаСуммы.РазрядностиОкругления;
	КонецЕсли;
	
	Для Каждого Строка Из СтруктураПересчетаСуммы.Строки Цикл
		
		Если СтруктураПересчетаСуммы.ИтогКоличество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Коэффициент = Строка[СтруктураПересчетаСуммы.ИмяПоляКоличество] / СтруктураПересчетаСуммы.ИтогКоличество;
		СтруктураПересчетаСуммы.ИтогКоличество = СтруктураПересчетаСуммы.ИтогКоличество - Строка[СтруктураПересчетаСуммы.ИмяПоляКоличество];
		
		Для Каждого Поле Из СтруктураПересчетаСуммы.Поля Цикл
			
			НовоеЗначение = Поле.Значение * Коэффициент;
			
			Если РазрядностиОкругления <> Неопределено Тогда
				Строка[Поле.Ключ] = Окр(НовоеЗначение, РазрядностиОкругления[Поле.Ключ]);
			Иначе
				Строка[Поле.Ключ] = НовоеЗначение;
			КонецЕсли;
			
			СтруктураПересчетаСуммы.Поля[Поле.Ключ] = Поле.Значение - Строка[Поле.Ключ];
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияТоваров(отказ, ТЗ_Новая_Заказ_Товары, ТЗ_Заказ_Товары, СтрокаУпаковочныйЛистНоменклатура, СтруктураПереданныхДанных,
	ОбъектЗаказ)
	
	Отгрузить 	= Перечисления.ВариантыОбеспечения.Отгрузить;
	Отменено 	= Ложь;
	
	МассивУдалитьСтрокиНоменклатуры = Новый Массив;
	
	СтрокаКомплектацияРазбиение = СтрокаУпаковочныйЛистНоменклатура;
	
	НайденаНоменклатураПоКомплектации = Ложь;
	
	Количество 			= СтрокаКомплектацияРазбиение.Количество;
	Номенклатура 		= СтрокаКомплектацияРазбиение.Номенклатура;
	Характеристика 		= СтрокаКомплектацияРазбиение.Характеристика;
		
	Отбор = Новый Структура();
	Отбор.Вставить("ВариантОбеспечения", Отгрузить);
	Отбор.Вставить("Номенклатура", Номенклатура);
	Отбор.Вставить("Характеристика", Характеристика);
	Отбор.Вставить("Количество", Количество);
	Отбор.Вставить("Отменено", Отменено);
	
	МассивСтрок = ТЗ_Заказ_Товары.НайтиСтроки(Отбор);
	
	Если МассивСтрок.Количество() = 1 Тогда
		
		НайденаНоменклатураПоКомплектации = Истина;
		
		МассивСтрок[0].ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.КОбеспечению;
		МассивСтрок[0].гф_СкидкаДляРТУ 		= Неопределено;
		МассивСтрок[0].гф_ДатаДляРТУ 		= Неопределено;
		МассивСтрок[0].гф_КомментарийРТУ 	= Неопределено;
		
	ИначеЕсли МассивСтрок.Количество() > 1 Тогда
		
		НайденаНоменклатураПоКомплектации = Истина;
		
		МассивСтрок[0].Количество 			= МассивСтрок[0].Количество - СтрокаКомплектацияРазбиение.Количество;
		МассивСтрок[0].КоличествоУпаковок 	= МассивСтрок[0].КоличествоУпаковок - СтрокаКомплектацияРазбиение.Количество;
		
		МассивСтрок[0].ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.КОбеспечению;
		МассивСтрок[0].гф_СкидкаДляРТУ 		= Неопределено;
		МассивСтрок[0].гф_ДатаДляРТУ 		= Неопределено;
		МассивСтрок[0].гф_КомментарийРТУ 	= Неопределено;
		
	Иначе
		// Попытка выполнения поиска с любым количеством
		// Исключительная ситуация, так как отгруженные товары в заказе идут отдельными строками
		// и с отгруженным количеством, данной ситуации не должно возникнуть
		Если МассивСтрок.Количество() = 0 Тогда
			
			Отбор = Новый Структура();
			Отбор.Вставить("ВариантОбеспечения", Отгрузить);
			Отбор.Вставить("Номенклатура", Номенклатура);
			Отбор.Вставить("Характеристика", Характеристика);
			Отбор.Вставить("Отменено", Отменено);
			
			МассивСтрок = ТЗ_Заказ_Товары.НайтиСтроки(Отбор);
			
			Если МассивСтрок.Количество() > 0 Тогда
				
				КоличествоОставшееся = СтрокаКомплектацияРазбиение.Количество;
				
				Для Каждого СтрокаМассива Из МассивСтрок Цикл
					
					Если СтрокаМассива.Количество > КоличествоОставшееся Тогда
						
						НайденаНоменклатураПоКомплектации = Истина;
						
						//СтрокаМассива.Количество = СтрокаМассива.Количество - СтрокаКомплектацияРазбиение.Количество;
						//СтрокаМассива.КоличествоУпаковок = СтрокаМассива.КоличествоУпаковок - СтрокаКомплектацияРазбиение.Количество;
						
						Количество = СтрокаУпаковочныйЛистНоменклатура.КоличествоОстаток;
						
						ДополнительныеПараметры = ПолучитьДополнительныеПараметры(СтрокаМассива, Ложь);
						
						ПараметрыРазбиенияСтроки = ПараметрыРазбиенияСтроки();
						
						//ПараметрыОбработки = ПолучитьПараметрыОбработки(ТЗ_Новая_Заказ_Товары, Неопределено, "", ПараметрыРазбиенияСтроки,
						//	ДополнительныеПараметры, Количество);
						
						ПараметрыОбработки = Новый Структура;
						ПараметрыОбработки.Вставить("ТабличнаяЧасть", 				ТЗ_Новая_Заказ_Товары);
						//ПараметрыОбработки.Вставить("ЭлементФормы", 				ЭлементФормы);
						//ПараметрыОбработки.Вставить("ОповещениеПослеРазбиения", 	ОповещениеПослеРазбиения);
						ПараметрыОбработки.Вставить("ПараметрыРазбиенияСтроки", 	ПараметрыРазбиенияСтроки);
						ПараметрыОбработки.Вставить("ДополнительныеПараметры", 		ДополнительныеПараметры);
						ПараметрыОбработки.Вставить("Количество", 					Количество);
						
						ДобавитьСтрокуРазбиением(ПараметрыОбработки, ТЗ_Новая_Заказ_Товары, СтрокаМассива, ТЗ_Заказ_Товары,
						Неопределено, СтруктураПереданныхДанных,
						СтрокаУпаковочныйЛистНоменклатура.Скидка,СтрокаУпаковочныйЛистНоменклатура.ВидЦены);
						
						ТекстСообщения = СтрШаблон(НСтр("ru = 'Исключительная ситуация, код ошибки для разработчика КЕ352. Проблема с определением ""%1"" по ""%2"" на вкладке ""Товары"".'"),
						СтрокаКомплектацияРазбиение.Номенклатура, СтрокаКомплектацияРазбиение.Характеристика);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						Отказ = Истина;	
						
					Иначе	
						ТекстСообщения = СтрШаблон(НСтр("ru = 'Исключительная ситуация, код ошибки для разработчика КЕ353. Проблема с определением ""%1"" по ""%2"" на вкладке ""Товары"".'"),
						СтрокаКомплектацияРазбиение.Номенклатура, СтрокаКомплектацияРазбиение.Характеристика);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						Отказ = Истина;
					КонецЕсли;
					
					Если КоличествоОставшееся = 0 Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				// Попытка выполнения поиска с любым количеством при уверенности что характеристика отсутствует
				// Исключительная ситуация, так как отгруженные товары в заказе идут отдельными строками
				// и с необходимым количеством, данной ситуации не должно возникнуть
				Если Не ЗначениеЗаполнено(Характеристика) Тогда
					Отбор = Новый Структура();
					Отбор.Вставить("ВариантОбеспечения", Отгрузить);
					Отбор.Вставить("Номенклатура", Номенклатура);
					//Отбор.Вставить("Характеристика", Характеристика);
					//Отбор = Вставить("Количество", Количество);
					Отбор.Вставить("Отменено", Отменено);
					
					МассивСтрок = ТЗ_Заказ_Товары.НайтиСтроки(Отбор);
					
					Если МассивСтрок.Количество() > 0 Тогда
						
						КоличествоОставшееся = СтрокаКомплектацияРазбиение.Количество;
						
						Для Каждого СтрокаМассива Из МассивСтрок Цикл
							
							Если СтрокаМассива.Количество > КоличествоОставшееся Тогда
								
								НайденаНоменклатураПоКомплектации = Истина;
								
								//СтрокаМассива.Количество = СтрокаМассива.Количество - СтрокаКомплектацияРазбиение.Количество;
								//СтрокаМассива.КоличествоУпаковок = СтрокаМассива.КоличествоУпаковок - СтрокаКомплектацияРазбиение.Количество;
								
								Количество = СтрокаУпаковочныйЛистНоменклатура.КоличествоОстаток;
								
								ДополнительныеПараметры = ПолучитьДополнительныеПараметры(СтрокаМассива, Ложь);
								
								ПараметрыРазбиенияСтроки = ПараметрыРазбиенияСтроки();
								
								//ПараметрыОбработки = ПолучитьПараметрыОбработки(ТЗ_Новая_Заказ_Товары, Неопределено, "", ПараметрыРазбиенияСтроки,
								//	ДополнительныеПараметры, Количество);
								
								ПараметрыОбработки = Новый Структура;
								ПараметрыОбработки.Вставить("ТабличнаяЧасть", 				ТЗ_Новая_Заказ_Товары);
								//ПараметрыОбработки.Вставить("ЭлементФормы", 				ЭлементФормы);
								//ПараметрыОбработки.Вставить("ОповещениеПослеРазбиения", 	ОповещениеПослеРазбиения);
								ПараметрыОбработки.Вставить("ПараметрыРазбиенияСтроки", 	ПараметрыРазбиенияСтроки);
								ПараметрыОбработки.Вставить("ДополнительныеПараметры", 		ДополнительныеПараметры);
								ПараметрыОбработки.Вставить("Количество", 					Количество);
								
								ДобавитьСтрокуРазбиением(ПараметрыОбработки, ТЗ_Новая_Заказ_Товары, СтрокаМассива, ТЗ_Заказ_Товары,
								Неопределено, СтруктураПереданныхДанных,
								СтрокаУпаковочныйЛистНоменклатура.Скидка,СтрокаУпаковочныйЛистНоменклатура.ВидЦены);
								
								ТекстСообщения = СтрШаблон(НСтр("ru = 'Исключительная ситуация, код ошибки для разработчика КЕ348. Проблема с определением ""%1"" по ""%2"" на вкладке ""Товары"".'"),
								СтрокаКомплектацияРазбиение.Номенклатура, СтрокаКомплектацияРазбиение.Характеристика);
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
								Отказ = Истина;
							Иначе
								
								ТекстСообщения = СтрШаблон(НСтр("ru = 'Исключительная ситуация, код ошибки для разработчика КЕ349. Проблема с определением ""%1"" по ""%2"" на вкладке ""Товары"".'"),
								СтрокаКомплектацияРазбиение.Номенклатура, СтрокаКомплектацияРазбиение.Характеристика);
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
								Отказ = Истина;	
								
							КонецЕсли;
						КонецЦикла;
					Иначе
						
						ТекстСообщения = СтрШаблон(НСтр("ru = 'Исключительная ситуация, код ошибки для разработчика КЕ354. Проблема с определением ""%1"" по ""%2"" на вкладке ""Товары"".'"),
						СтрокаКомплектацияРазбиение.Номенклатура, СтрокаКомплектацияРазбиение.Характеристика);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						Отказ = Истина;
					КонецЕсли;
					
				Иначе
					
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Исключительная ситуация, код ошибки для разработчика КЕ347. Проблема с определением ""%1"" по ""%2"" на вкладке ""Товары"".'"),
					СтрокаКомплектацияРазбиение.Номенклатура, СтрокаКомплектацияРазбиение.Характеристика);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					Отказ = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе	
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Исключительная ситуация, код ошибки для разработчика КЕ355. Проблема с определением ""%1"" по ""%2"" на вкладке ""Товары"".'"),
			СтрокаКомплектацияРазбиение.Номенклатура, СтрокаКомплектацияРазбиение.Характеристика);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не НайденаНоменклатураПоКомплектации Тогда
		Отказ = Истина;
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не найдена ""%1"" по ""%2"" на вкладке ""Товары"".'"),
		СтрокаКомплектацияРазбиение.Номенклатура, СтрокаКомплектацияРазбиение.Характеристика);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУпаковочногоЛиста(Отказ, Источник, УпаковочныйЛист)
	
	ИзменитьАгрегациюУпаковочногоЛиста(Отказ, УпаковочныйЛист.гф_Агрегация);
			
	ОчиститьКодСтрокиВУпаковочномЛисте(Отказ, УпаковочныйЛист);	
	
КонецПроцедуры

Процедура ОчиститьКодСтрокиВУпаковочномЛисте(Отказ, УпаковочныйЛист)

	//гф_УпаковочныйЛистОбъект = УпаковочныйЛист.ПолучитьОбъект();
	//
	//Попытка
	//	гф_УпаковочныйЛистОбъект.Заблокировать();
	//Исключение
	//	ТекстСообщения = СтрШаблон(НСтр("ru = '%1 находится в процессе редактирования и не может быть изменен.'"), УпаковочныйЛист);
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	//	ЗаписьЖурналаРегистрации(НСтр("ru = 'Запись в ""Упаковочный лист""'"), УровеньЖурналаРегистрации.Ошибка,,,
	//	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	//КонецПопытки;
	//
	//// Очистим колонку с кодом строки перед новым заполнением 
	//ТабЗнач = гф_УпаковочныйЛистОбъект.Товары.Выгрузить();
	//ТабЗнач.ЗаполнитьЗначения(0, "гф_КодСтроки");
	//ТабЗнач.ЗаполнитьЗначения("", "гф_КодСтрокиДополнительныеСведения");
	//гф_УпаковочныйЛистОбъект.Товары.Загрузить(ТабЗнач);
	//
	//Попытка
	//	гф_УпаковочныйЛистОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	//Исключение
	//	ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось внести изменения в ""%1"", расходный ордер не сформирован.'"),
	//	гф_УпаковочныйЛистОбъект.Ссылка);
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	//	
	//	ЗаписьЖурналаРегистрации(НСтр("ru = 'Запись в ""Упаковочный лист""'"), УровеньЖурналаРегистрации.Ошибка,,,
	//	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	//КонецПопытки;
	
	УпаковочныйЛистОбъект = УпаковочныйЛист.ПолучитьОбъект();
	
	Попытка
		УпаковочныйЛистОбъект.Заблокировать();
	Исключение
		ТекстСообщения = СтрШаблон(НСтр("ru = '%1 находится в процессе редактирования и не может быть изменен.'"), УпаковочныйЛистОбъект);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
	//УпаковочныйЛист.гф_ТекущийОрдер = Неопределено;
	УпаковочныйЛистОбъект.гф_ТекущийОрдер = Документы.РасходныйОрдерНаТовары.ПустаяСсылка();
	
	//Для Каждого СтрокаУпаковочныйЛистНоменклатура Из УпаковочныйЛист.Товары Цикл
	//	
	//	СтрокаУпаковочныйЛистНоменклатура.гф_КодСтроки = 0;
	//	СтрокаУпаковочныйЛистНоменклатура.гф_КодСтрокиДополнительныеСведения = "";
	//	
	//КонецЦикла;
	// Очистим колонку с кодом строки перед новым заполнением 
	ТабЗнач = УпаковочныйЛистОбъект.Товары.Выгрузить();
	ТабЗнач.ЗаполнитьЗначения(0, "гф_КодСтроки");
	ТабЗнач.ЗаполнитьЗначения("", "гф_КодСтрокиДополнительныеСведения");
	УпаковочныйЛистОбъект.Товары.Загрузить(ТабЗнач);
	
	Попытка
		УпаковочныйЛистОбъект.Записать();
	Исключение
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось внести изменения в ""%1"".'"), УпаковочныйЛистОбъект);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Запись в ""Упаковочный лист""'"),
		УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Отказ = Истина;
		Возврат;
	КонецПопытки;

КонецПроцедуры

Процедура ИзменитьАгрегациюУпаковочногоЛиста(Отказ, Агрегация)
	
	// Изменим статус элемента в Справочник.ШтрихкодыУпаковокТоваров
	//гф_Агрегация = УпаковочныйЛист.гф_Агрегация;
	//гф_КодМаркировки = гф_Агрегация.ПолучитьОбъект();
	//
	//Попытка
	//	гф_КодМаркировки.Заблокировать();
	//Исключение
	//	ТекстСообщения = СтрШаблон(НСтр("ru = '%1 находится в процессе редактирования и не может быть изменен.'"), гф_Агрегация);
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	//	ЗаписьЖурналаРегистрации(НСтр("ru = 'Запись в ""Агрегацию упаковочного листа""'"), УровеньЖурналаРегистрации.Ошибка,,,
	//	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	//КонецПопытки;
	//
	//гф_КодМаркировки.гф_Автодействие = Перечисления.гф_АвтодействияКМ.ПустаяСсылка();
	//
	//Попытка
	//	гф_КодМаркировки.Записать();
	//Исключение
	//	ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось внести изменения в элемент справочника ""Штрихкоды упаковок товаров"" ""%1"", расходный ордер не сформирован.'"),
	//	гф_КодМаркировки);
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	//	
	//	ЗаписьЖурналаРегистрации(НСтр("ru = 'Запись в элемент справочника ""Штрихкоды упаковок товаров""'"), УровеньЖурналаРегистрации.Ошибка,,,
	//	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	//КонецПопытки;
	Если Агрегация <> Неопределено И ЗначениеЗаполнено(Агрегация) Тогда
		
		АгрегацияОбъект = Агрегация.ПолучитьОбъект();
		
		Попытка
			АгрегацияОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = '%1 находится в процессе редактирования и не может быть изменен.'"), АгрегацияОбъект);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Запись в ""Агрегацию упаковочного листа""'"), УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Отказ = Истина;
			Возврат;
		КонецПопытки;
		
		//Агрегация.гф_Автодействие = Неопределено;
		АгрегацияОбъект.гф_Автодействие = Перечисления.гф_АвтодействияКМ.ПустаяСсылка();
		
		Попытка
			АгрегацияОбъект.Записать();
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось внести изменения в элемент справочника ""Штрих-коды упаковок товаров"" ""%1"".'"),
			АгрегацияОбъект);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Запись в элемент справочника ""Штрих-коды упаковок товаров""'"),
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Отказ = Истина;
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЗначениеРеквизитаСкладаТоварыВКоробках(Склад)
	
	ДополнительныйРеквизит = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "гф_СкладыТоварыВКоробах");
	ЗначениеДополнительногоРеквизита = Склад.ДополнительныеРеквизиты.Найти(ДополнительныйРеквизит, "Свойство");
	
	Если Не ЗначениеДополнительногоРеквизита = Неопределено Тогда
		Возврат ЗначениеДополнительногоРеквизита.Значение;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ВыполнитьКорректировкуРеализацияСчетФактураПоРасходномуОрдеру(Источник)
	
	 //{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	//Запрос1 = Новый Запрос;
	//Запрос1.Текст = 
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	//	|	Склады.Ссылка КАК Ссылка
	//	|ИЗ
	//	|	Справочник.Склады КАК Склады";
	//
	//РезультатЗапроса1 = Запрос1.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса1.Выбрать();
	//
	//
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	//	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка
	//	|ИЗ
	//	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг";
	//	
	//	РезультатЗапроса = Запрос.Выполнить();
	//	
	//	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	//	//Для Каждого Строка Из Источник.ТоварыПоРаспоряжениям Цикл
	//	//	ЗаказКлиента = Строка.Распоряжение;
	//	//	Прервать
	//	//КонецЦикла;
	//	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка
	//,
	//|	РеализацияТоваровУслуг.Проведен КАК Проведен,
	//|	РеализацияТоваровУслуг.ЗаказКлиента КАК ЗаказКлиента,
	//|	РеализацияТоваровУслуг.гф_РасходныйОрдер КАК гф_РасходныйОрдер
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	Не РеализацияТоваровУслуг.Проведен
	|	И РеализацияТоваровУслуг.гф_РасходныйОрдер = &гф_РасходныйОрдер";
	
	Запрос.УстановитьПараметр("гф_РасходныйОрдер", Источник.Ссылка);
	//Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
	
	//ДокументРеализация = Неопределено;
	
	ДокументРеализация = Новый СписокЗначений;
	
	Для Каждого Строка Из ВыборкаДетальныеЗаписи Цикл
		ДокументРеализация.Добавить(Строка.Ссылка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетФактураВыданный.Ссылка КАК Ссылка,
	|	СчетФактураВыданный.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	Не СчетФактураВыданный.Проведен
	|	И СчетФактураВыданный.ДокументОснование В (&ДокументОснование)";
	//|	И НЕ СчетФактураВыданный.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументРеализация);
	//Запрос.УстановитьПараметр("ПометкаУдаления", ПометкаУдаления);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокОбъект = ВыборкаДетальныеЗаписи.Ссылка.Получитьобъект();
		ДокОбъект.ДокументОснование = Неопределено;
		ДокОбъект.ПометкаУдаления = Истина;
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЦикла;
		
	//Если ДокументРеализация <> Неопределено Тогда
	//	ДокОбъект = ДокументРеализация.Ссылка.Получитьобъект();
	//	ДокОбъект.гф_РасходныйОрдер = Неопределено;
	//	ДокОбъект.ПометкаУдаления = Истина;
	//	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	//КонецЕсли;
	
	Для Каждого Строка Из ДокументРеализация Цикл
		ДокОбъект = Строка.Значение.Получитьобъект();
		ДокОбъект.гф_РасходныйОрдер = Неопределено;
		ДокОбъект.ПометкаУдаления = Истина;
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьСтрокуРазбиением(ПараметрыОбработки, НоваяТаблица, ТекущаяСтрока, Товары, СписокКодовСтроки,
	СтруктураПереданныхДанных, СкидкаДляРТУДляЗаписьВОрдер, ПрайсЛистДляРТУДляЗаписьВОрдер)
	
	Количество = ПараметрыОбработки.Количество;
	
	ПараметрыРазбиенияСтроки 	= ПараметрыОбработки.ПараметрыРазбиенияСтроки;
	ДополнительныеПараметры 	= ПараметрыОбработки.ДополнительныеПараметры;
	
	//Если ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда
	//	Возврат;
	//КонецЕсли;
	
	Если ТекущаяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] > Количество Тогда
		
		НоваяСтрока = НоваяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		
		НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению;
		
		НоваяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] = Количество;
		
		ТекущаяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] =
			ТекущаяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] - Количество;
		
		НоваяСтрока.ВариантОбеспечения 		= Перечисления.ВариантыОбеспечения.Отгрузить;
		НоваяСтрока.ДатаОтгрузки 			= ТекущаяДата();
		
		//ПолучитьМаксКодСтроки(НоваяТаблица, Товары, НоваяСтрока);
		НоваяСтрока.КодСтроки = ПолучитьМаксНомерСтрокиПлюсОдин(НоваяТаблица, Товары, "КодСтроки");
		
		//ПолучитьКомментарийИСкидкиДляРТУ(НоваяСтрока.гф_КомментарийРТУ, НоваяСтрока.гф_СкидкаДляРТУ, НоваяСтрока.гф_ДатаДляРТУ,
		//	НоваяСтрока.ПроцентРучнойСкидки, СтруктураПереданныхДанных, НоваяСтрока.гф_ПрайсЛистДляРТУ);
			
		//// Возможно условие устарело, так процедура есть отдельная процедура для упаковочных листов
		//Если Объект.ТоварыВКоробках Тогда
		//	НоваяСтрокаСписокКодовСтроки = СписокКодовСтроки.Добавить();
		//	
		//	ЗаполнитьЗначенияСвойств(НоваяСтрокаСписокКодовСтроки, НоваяСтрока);
		//	НоваяСтрокаСписокКодовСтроки.УпаковочныйЛист = УпаковочныйЛист;
		//КонецЕсли;
		
		// Если Неопределено то скидка в ордер идет из упаковочного листа иначе для номенклатуры запишем
		СкидкаДляРТУДляЗаписьВОрдер 		= НоваяСтрока.гф_СкидкаДляРТУ;
		ПрайсЛистДляРТУДляЗаписьВОрдер 		= НоваяСтрока.гф_ПрайсЛистДляРТУ;
		
		РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры, ТекущаяСтрока, Ложь);
		
	ИначеЕсли ТекущаяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] = Количество Тогда
		
		ТекущаяСтрока.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.Отгрузить;
		ТекущаяСтрока.ДатаОтгрузки 			= ТекущаяДата();
		
		//ПолучитьКомментарийИСкидкиДляРТУ(ТекущаяСтрока.гф_КомментарийРТУ, ТекущаяСтрока.гф_СкидкаДляРТУ, ТекущаяСтрока.гф_ДатаДляРТУ,
		//	ТекущаяСтрока.ПроцентРучнойСкидки, СтруктураПереданныхДанных, ТекущаяСтрока.гф_ПрайсЛистДляРТУ);
		
		//// Возможно условие устарело, так процедура есть отдельная процедура для упаковочных листов
		//Если Объект.ТоварыВКоробках Тогда
		//	НоваяСтрокаСписокКодовСтроки = СписокКодовСтроки.Добавить();
		//	
		//	ЗаполнитьЗначенияСвойств(НоваяСтрокаСписокКодовСтроки, ТекущаяСтрока);
		//	НоваяСтрокаСписокКодовСтроки.УпаковочныйЛист = УпаковочныйЛист;
		//КонецЕсли;
		
		СкидкаДляРТУДляЗаписьВОрдер 		= ТекущаяСтрока.гф_СкидкаДляРТУ;
		ПрайсЛистДляРТУДляЗаписьВОрдер 		= ТекущаяСтрока.гф_ПрайсЛистДляРТУ;

		
		РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры, ТекущаяСтрока, Ложь);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

// Универсальное получение максимального значения номера по наименованию колонки.
// Альтернатива процедуры "ПолучитьМаксКодСтроки".
//
Функция ПолучитьМаксНомерСтрокиПлюсОдин(Таблица0, Таблица1, ИмяКолонки)
	
	ТЗМакс_0 = Таблица0.Скопировать( ,ИмяКолонки);
	ТЗМакс_1 = Таблица1.Скопировать( ,ИмяКолонки);
	
	Если ТЗМакс_0.Количество() > 0 Тогда
		МаксНомер = Новый СравнениеЗначений;
		ТЗМакс_0.Сортировать(ИмяКолонки + " Убыв", МаксНомер);
		МаксимальныйНомерТЗ_0 = ТЗМакс_0[0][ИмяКолонки];
	Иначе
		МаксимальныйНомерТЗ_0 = 0;
	КонецЕсли;
	
	Если ТЗМакс_1.Количество() > 0 Тогда
		МаксНомер = Новый СравнениеЗначений;
		ТЗМакс_1.Сортировать(ИмяКолонки + " Убыв", МаксНомер);
		МаксимальныйНомерТЗ_1 = ТЗМакс_1[0][ИмяКолонки];
	Иначе
		МаксимальныйНомерТЗ_1 = 0;
	КонецЕсли;
	
	Если МаксимальныйНомерТЗ_0 > МаксимальныйНомерТЗ_1 Тогда
		МаксимальныйНомерРезультат = МаксимальныйНомерТЗ_0;
	Иначе
		МаксимальныйНомерРезультат = МаксимальныйНомерТЗ_1;
	КонецЕсли;
	
	Возврат МаксимальныйНомерРезультат + 1;
	
КонецФункции

#КонецОбласти
