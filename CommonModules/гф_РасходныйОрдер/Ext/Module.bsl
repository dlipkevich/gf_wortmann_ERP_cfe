
// При изменении статуса в документе "Расходный ордер", выполняется содание и запись\проведение документа "РТиУ"
// Параметры:
//	Источник - ДокументСсылка.РасходныйОрдерНаТовары - Документ расходный ордер.
//  Отказ - Булево - Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то будет выполнен отказ от продолжения работы после выполнения проверки заполнения.
//
Процедура гф_ОтгрузкаУпаковочногоЛистаОбработкаУдаленияПроведения(Источник, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УпаковочныйЛист.гф_ТекущийОрдер КАК гф_ТекущийОрдер,
	|	УпаковочныйЛист.гф_Агрегация КАК гф_Агрегация,
	|	УпаковочныйЛист.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
	|ГДЕ
	|	УпаковочныйЛист.гф_ТекущийОрдер = &гф_ТекущийОрдер";
	
	Запрос.УстановитьПараметр("гф_ТекущийОрдер", Источник.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ВыборкаДетальныеЗаписи.гф_Агрегация <> Неопределено Тогда
			
			Агрегация = ВыборкаДетальныеЗаписи.гф_Агрегация.ПолучитьОбъект();
			Агрегация.гф_Автодействие = Неопределено;
			Агрегация.Записать();
			
			УпаковочныйЛист = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			УпаковочныйЛист.гф_ТекущийОрдер = Неопределено;
			
			Для Каждого СтрокаУпаковочныйЛистНоменклатура Из УпаковочныйЛист.Товары Цикл
				
				СтрокаУпаковочныйЛистНоменклатура.гф_КодСтроки = 0;
				
			КонецЦикла;
			
			УпаковочныйЛист.Записать();
			
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

// Процедура обновляет кеш ключевых реквизитов текущей строки товаров. По ключевым реквизитам осуществляется связь
//  между ТЧ серий и ТЧ товаров.
//
// Параметры:
//  ТекущаяСтрока			 - ДанныеФормыЭлементКоллекции - строка, по которой обновляется кеш.
//  КэшированныеЗначения	 - Структура - переменная модуля формы, в которой хранятся кешируемые значения
//  ПараметрыУказанияСерий	 - см. ПараметрыУказанияСерий
//  Копирование				 - Булево - признак, что кешированная строка скопирована (параметр события ПриНачалеРедактирования).
//
Процедура ОбновитьКешированныеЗначенияДляУчетаСерий(ТекущаяСтрока,КэшированныеЗначения,ПараметрыУказанияСерий,Копирование = Ложь) Экспорт
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;
	
	Если ТекущаяСтрока <> Неопределено
		И (Не Копирование
		Или ПараметрыУказанияСерий.ИмяТЧТовары = ПараметрыУказанияСерий.ИмяТЧСерии) Тогда
		
		КэшированныеЗначения.Вставить("Номенклатура",ТекущаяСтрока.Номенклатура);
		КэшированныеЗначения.Вставить("Характеристика",ТекущаяСтрока.Характеристика);
		
		Если ТекущаяСтрока.Свойство(ПараметрыУказанияСерий.ИмяПоляКоличество) Тогда
			КэшированныеЗначения.Вставить(ПараметрыУказанияСерий.ИмяПоляКоличество, ТекущаяСтрока[ПараметрыУказанияСерий.ИмяПоляКоличество]);
		КонецЕсли;
		
		Если ТекущаяСтрока.Свойство("Отменено") Тогда
			КэшированныеЗначения.Вставить("Отменено",ТекущаяСтрока.Отменено);
		КонецЕсли;
		
		Для Каждого СтрМас Из ПараметрыУказанияСерий.ПоляСвязи Цикл
			Если ТекущаяСтрока.Свойство(СтрМас) Тогда
				КэшированныеЗначения.Вставить(СтрМас,ТекущаяСтрока[СтрМас]);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрМас Из ПараметрыУказанияСерий.ИменаПолейДополнительные Цикл
			Если ТекущаяСтрока.Свойство(СтрМас) Тогда
				КэшированныеЗначения.Вставить(СтрМас,ТекущаяСтрока[СтрМас]);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		КэшированныеЗначения.Вставить("Номенклатура",Неопределено);
		КэшированныеЗначения.Вставить("Характеристика",Неопределено);
		КэшированныеЗначения.Вставить(ПараметрыУказанияСерий.ИмяПоляКоличество ,0);
		
		Если ПараметрыУказанияСерий.ЭтоЗаказ Тогда
			КэшированныеЗначения.Вставить("Отменено", Неопределено);
		КонецЕсли;
		
		Для Каждого СтрМас Из ПараметрыУказанияСерий.ПоляСвязи Цикл
			КэшированныеЗначения.Вставить(СтрМас,Неопределено);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчитывает статусы указания серий в строках товаров, если это необходимо,
//  переподчиняет строки серий другим строкам ТЧ "Товары".
//
// Параметры:
//  Объект						 - ДанныеФормыСтруктура	 - основной реквизит формы документа.
//  ПараметрыУказанияСерий		 - Структура - структура параметров указания серий, возвращаемая соответствующей процедурой модуля менеджера документа.
//  ТекущаяСтрокаИдентификатор	 - Число - идентификатор текущей строки товаров в форме документа.
//  КэшированныеЗначения		 - Структура - структура кеша реквизитов текущей строки товаров.
//
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект,
																			ПараметрыУказанияСерий,
																			ТекущаяСтрокаИдентификатор,
																			КэшированныеЗначения) Экспорт
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.ИмяТЧТовары = ПараметрыУказанияСерий.ИмяТЧСерии Тогда
		Возврат; // Если ТЧ Серии нет, тогда все статусы пересчитываются при изменении реквизитов ТЧ, а не при окончании редактирования
	КонецЕсли;
	
	Если ТекущаяСтрокаИдентификатор <> Неопределено Тогда
		ТекущаяСтрока = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор); // ДокументТабличнаяЧастьСтрока.АктОРасхожденияхПослеПриемки.Товары - указано для типизации
	Иначе
		ТекущаяСтрока = Неопределено //значит строку удалили;
	КонецЕсли;
	
	ТекстПоляСвязи = "";
	
	Для Каждого СтрМас Из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстПоляСвязи = ТекстПоляСвязи + "," + СтрМас  ;
	КонецЦикла;
	
	ЕстьУпаковки = ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено; 
	
	// Если строка новая (в т.ч. скопированная) или используется разделение по вариантам продажи - будет закешированно Неопределено
	// Тогда не нужно искать строки со старыми значениями.
	Если КэшированныеЗначения.Номенклатура <> Неопределено Тогда
		
		СтруктураПоискаСтарыеЗначения = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);
		ЗаполнитьЗначенияСвойств(СтруктураПоискаСтарыеЗначения,КэшированныеЗначения);
		
		НайденныеСтрокиТоваров = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиСтроки(СтруктураПоискаСтарыеЗначения);
		НайденныеСтрокиСерий = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].НайтиСтроки(СтруктураПоискаСтарыеЗначения);
	Иначе
		НайденныеСтрокиТоваров = Новый Массив;
		НайденныеСтрокиСерий   = Новый Массив;
	КонецЕсли;
	
	// Если поменялись ключевые поля:
	// - возможно нужно переподчинять серии
	// - статус указания серий нужно пересчитывать в строках по новым ключевым полям и по старым.
	Если ТекущаяСтрока <> Неопределено 
		И Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(КэшированныеЗначения, ТекущаяСтрока, "Номенклатура,Характеристика"+ТекстПоляСвязи) Тогда
		
		УчитыватьОстатки      = Ложь;
		ПереподчинитьСерии    = Ложь;
		ПересчитатьКоличество = Ложь;
		// Определим, нужно ли переподчинять серии. Это нужно если:
		// - серии относились только к одной строке
		// - новые и старые ключевые поля поддерживают одну политику учета
		// - серии относились к нескольким строкам, но изменилось значение действия по отражению расхождения со строкой
		// Если строки нужно переподчинять, то определим, нужно ли пересчитывать количество.
		Если КэшированныеЗначения.Номенклатура <> Неопределено
			И ((КэшированныеЗначения.Свойство("Действие")
					И КэшированныеЗначения.Действие <> ТекущаяСтрока.Действие)
				Или НайденныеСтрокиТоваров.Количество() = 0) Тогда//т.к. строк с такими ключевыми полями не осталось, значит такая строка была одна
			
			Если НайденныеСтрокиТоваров.Количество() > 0 Тогда
				УчитыватьОстатки   = Истина;
				ПереподчинитьСерии = Истина;
			ИначеЕсли КэшированныеЗначения.Номенклатура = ТекущаяСтрока.Номенклатура Тогда //т.е. изменились поля, от которых политика учета не зависит
				ПереподчинитьСерии = Истина;
			Иначе //будем переподчинять, если не поменялся вид номенклатуры
				ВидНоменклатурыТекущий = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КэшированныеЗначения.Номенклатура,"ВидНоменклатуры");
				ВидНоменклатурыНовый   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Номенклатура, "ВидНоменклатуры");
				
				ПереподчинитьСерии = (ВидНоменклатурыТекущий = ВидНоменклатурыНовый);
			КонецЕсли;
			
			Если ПереподчинитьСерии
				И ЕстьУпаковки
				И КэшированныеЗначения.Упаковка <> ТекущаяСтрока.Упаковка Тогда
				
				ПересчитатьКоличество = Истина;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		// Если строка удалена, то в качестве текущих значений будет передано Неопределено
		// Тогда не нужно искать строки с новыми значениями.
		СтруктураПоискаНовыеЗначения = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);
		ЗаполнитьЗначенияСвойств(СтруктураПоискаНовыеЗначения,ТекущаяСтрока);
		
		НайденныеСтрокиТоваровНовые = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиСтроки(СтруктураПоискаНовыеЗначения);    
		
		// Добавим строки по новым ключевым полям в массив строк для пересчета статуса указания серий.
		
		// При объединении массивов будем обходить меньший массив
		Если НайденныеСтрокиТоваров.Количество() < НайденныеСтрокиТоваровНовые.Количество() Тогда
			Для Каждого СтрМас Из НайденныеСтрокиТоваров Цикл
				НайденныеСтрокиТоваровНовые.Добавить(СтрМас);
			КонецЦикла;
			НайденныеСтрокиТоваров = НайденныеСтрокиТоваровНовые;
		Иначе
			Для Каждого СтрМас Из НайденныеСтрокиТоваровНовые Цикл
				НайденныеСтрокиТоваров.Добавить(СтрМас);
			КонецЦикла;
		КонецЕсли;
		
		// Определим массив строк серий, который должен участвовать в пересчете статусов,
		Если ПереподчинитьСерии Тогда		
			// Сначала переподчиним серии
			
			Если УчитыватьОстатки Тогда
				Если ТекущаяСтрока.КоличествоПоДокументу > ТекущаяСтрока.Количество Тогда
					КоличествоОстаток = ТекущаяСтрока.Количество;
				Иначе
					
					ЕстьНовыеСерии = Ложь;
					
					КоличествоСтрокСИзлишками = 0;
					
					Для Каждого СтрМас Из НайденныеСтрокиСерий Цикл
						Если СтрМас.КоличествоПоДокументу = 0 Тогда
							ЕстьНовыеСерии = Истина;
						ИначеЕсли СтрМас.КоличествоПоДокументу < СтрМас.Количество Тогда
							КоличествоСтрокСИзлишками = КоличествоСтрокСИзлишками + 1;
						КонецЕсли;
					КонецЦикла;
					
					Если ЕстьНовыеСерии
						И КоличествоСтрокСИзлишками > 0 Тогда //Переподчиним количество серий за вычетом количества строк с излишками
						
						КоличествоОстаток = ТекущаяСтрока.КоличествоПоДокументу - КоличествоСтрокСИзлишками;
						
					ИначеЕсли ЕстьНовыеСерии Тогда //Переподчиним количество серий равное количеству серий в документе
						КоличествоОстаток = ТекущаяСтрока.КоличествоПоДокументу;
					Иначе //Переподчиним количество серий равное фактическому количеству серий в обрабатываемой строке
						КоличествоОстаток = ТекущаяСтрока.КоличествоПоДокументу
											- (ТекущаяСтрока.Количество - ТекущаяСтрока.КоличествоПоДокументу);
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого СтрМас Из НайденныеСтрокиСерий Цикл
				
				Если УчитыватьОстатки Тогда
					Если КоличествоОстаток > 0
						Или СтрМас.Количество <> СтрМас.КоличествоПоДокументу Тогда
						
						КоличествоОстаток = КоличествоОстаток - СтрМас.Количество;
						
						ЗаполнитьЗначенияСвойств(СтрМас, ТекущаяСтрока, ТекстПоляСвязи);
					КонецЕсли;
				Иначе
					ЗаполнитьЗначенияСвойств(СтрМас, ТекущаяСтрока, "Номенклатура,Характеристика" + ТекстПоляСвязи);
				КонецЕсли;
				
				Если ПересчитатьКоличество Тогда
					СтруктураДействий = Новый Структура;
					СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрМас,СтруктураДействий,КэшированныеЗначения);
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не УчитыватьОстатки Тогда
				// Если серии переподчинены, то достаточно произвести поиск по новым полям поиска
				НайденныеСтрокиСерий = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].НайтиСтроки(СтруктураПоискаНовыеЗначения);
			КонецЕсли;
			
		Иначе	
			НайденныеСтрокиСерийНовые = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].НайтиСтроки(СтруктураПоискаНовыеЗначения);
			
			// Если серии не переподчинены, то к строкам по старым ключевым полям нужно добавить строки по новым ключевым полям.
			
			// При объединении массивов будем обходить меньший массив
			Если НайденныеСтрокиСерий.Количество() < НайденныеСтрокиСерийНовые.Количество() Тогда
				Для Каждого СтрМас Из НайденныеСтрокиСерий Цикл
					НайденныеСтрокиСерийНовые.Добавить(СтрМас);
				КонецЦикла;
				НайденныеСтрокиСерий = НайденныеСтрокиСерийНовые;
			Иначе
				Для Каждого СтрМас Из НайденныеСтрокиСерийНовые Цикл
					НайденныеСтрокиСерий.Добавить(СтрМас);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Если НайденныеСтрокиТоваров.Количество() > 0 Тогда 
	//	ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий,НайденныеСтрокиТоваров,НайденныеСтрокиСерий);
	//КонецЕсли;
	
КонецПроцедуры

// Рекурсивно обходит строки упаковочного листа, используется для получения или удаления всех строк в иерархии
// Параметры:
//	ТЧТовары - ДанныеФормыКоллекция - табличная часть, в которой отображаются товары и упаковочные листы,
//	УпаковочныйЛист - ДокументСсылка.УпаковочныйЛист - упаковочный лист для обхода строк,
//	ТЧСерии - ДанныеФормыКоллекция - табличная часть с сериями товаров, по умолчанию Неопределено,
//	СтрокиОбъединяемые - Массив - состоит из элементов ДанныеФормыЭлементКоллекции, куда собираются строки ТЧ,
//		подчиненные упаковочному листу, по умолчанию Неопределено,
//	Действие - Строка - "Объединить" или "Удалить", по умолчанию "Объединить".
//
Процедура РекурсивноОбойтиПодчиненныеСтроки(ТЧТовары,
	УпаковочныйЛист, ТЧСерии = Неопределено, СтрокиОбъединяемые = Неопределено, Действие = "Объединить") Экспорт
	
	НайденныеСтроки = ТЧТовары.НайтиСтроки(Новый Структура("УпаковочныйЛистРодитель", УпаковочныйЛист));
	Для Каждого Стр Из НайденныеСтроки Цикл
		Если Действие = "Удалить" Тогда
			ТЧТовары.Удалить(Стр);
			Если Не ТЧСерии = Неопределено Тогда
				НайденныеСтрокиСерий = ТЧСерии.НайтиСтроки(Новый Структура("УпаковочныйЛистРодитель", УпаковочныйЛист));
				Для Каждого СтрокаСерий Из НайденныеСтрокиСерий Цикл
					ТЧСерии.Удалить(СтрокаСерий);
				КонецЦикла;
			КонецЕсли;
		Иначе
			СтрокиОбъединяемые.Добавить(Стр);
		КонецЕсли;
		Если Стр.ЭтоУпаковочныйЛист Тогда
			РекурсивноОбойтиПодчиненныеСтроки(ТЧТовары, Стр.УпаковочныйЛист, ТЧСерии, СтрокиОбъединяемые, Действие);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// При изменении статуса в документе "Расходный ордер", выполняется содание и запись\проведение документа "РТиУ"
// Параметры:
//	Источник - ДокументСсылка.РасходныйОрдерНаТовары - Документ расходный ордер.
//  Отказ - Булево - Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то будет выполнен отказ от продолжения работы после выполнения проверки заполнения.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура гф_РасходныйОрдерИзменениеСтатусаОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Если Источник.Статус = Перечисления.СтатусыРасходныхОрдеров.Проверен
		Или Источник.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтгрузке
		Или Источник.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен Тогда
		
		ЗаписатьДокумент = Ложь;
		
		Для Каждого Строка Из Источник.ТоварыПоРаспоряжениям Цикл
			ЗаказКлиента = Строка.Распоряжение;
			Прервать
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
		|	РеализацияТоваровУслуг.Проведен КАК Проведен,
		|	РеализацияТоваровУслуг.ЗаказКлиента КАК ЗаказКлиента,
		|	РеализацияТоваровУслуг.гф_РасходныйОрдер КАК гф_РасходныйОрдер
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.гф_РасходныйОрдер = &гф_РасходныйОрдер";
		
		Запрос.УстановитьПараметр("гф_РасходныйОрдер", Источник.Ссылка);
		Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ДокументРеализация = Неопределено;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ДокументРеализация = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
		
		Если ДокументРеализация <> Неопределено Тогда
			ДокОбъект = ДокументРеализация.Получитьобъект();
			Если Источник.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен Тогда
				ДокОбъект.Дата = ТекущаяДатаСеанса();
				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Перепроведен документ ""%1"" с актуальной датой отгрузки.'"), ДокументРеализация);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Возврат;
			КонецЕсли;
		Иначе
			ДокОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДокОбъект, ЗаказКлиента,,"Номер, Проведен");
		ДокОбъект.Дата = ТекущаяДатаСеанса();
		ДокОбъект.РеализацияПоЗаказам = Истина;
		ДокОбъект.гф_РасходныйОрдер = Источник.Ссылка;
		
		ДокОбъект.ЗаказКлиента = ЗаказКлиента;
		ДокОбъект.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
		
		ДокОбъект.КурсЗнаменатель = 1;
		ДокОбъект.КурсЧислитель = 1;
		ДокОбъект.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
		ДокОбъект.Согласован = Истина;
		ДокОбъект.СуммаВзаиморасчетов = ДокОбъект.СуммаДокумента;
		ДокОбъект.ВалютаВзаиморасчетов = ДокОбъект.Валюта;
		ДокОбъект.Товары.Очистить();
		ДокОбъект.гф_ТоварыВКоробах.Очистить();
		ДокОбъект.ВидыЗапасов.Очистить();
		ДокОбъект.ШтрихкодыУпаковок.Очистить();
		
		УпаковочныеЛисты = Новый СписокЗначений;
		
		ЕстьУпаковочныйЛист = Ложь;
		
		Для Каждого Строка Из Источник.ОтгружаемыеТовары Цикл
			
			Если ЗначениеЗаполнено(Строка.УпаковочныйЛист) Тогда
				УпаковочныеЛисты.Добавить(Строка.УпаковочныйЛист, "УпаковочныйЛист");
				ЕстьУпаковочныйЛист = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьУпаковочныйЛист Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	УпаковочныйЛист.Ссылка КАК Ссылка,
			|	УпаковочныйЛист.Товары.(
			|		Ссылка КАК Ссылка,
			|		НомерСтроки КАК НомерСтроки,
			|		Номенклатура КАК Номенклатура,
			|		Характеристика КАК Характеристика,
			|		Серия КАК Серия,
			|		Упаковка КАК Упаковка,
			|		КоличествоУпаковок КАК КоличествоУпаковок,
			|		Количество КАК Количество,
			|		УпаковочныйЛист КАК УпаковочныйЛист,
			|		НоменклатураПартнера КАК НоменклатураПартнера,
			|		Комментарий КАК Комментарий,
			|		ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
			|		ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста КАК ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста,
			|		УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
			|		СтатусУказанияСерий КАК СтатусУказанияСерий,
			|		Назначение КАК Назначение
			|	) КАК Товары
			|ИЗ
			|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
			|ГДЕ
			|	УпаковочныйЛист.Ссылка В(&Ссылка)";
			
			Запрос.УстановитьПараметр("Ссылка", УпаковочныеЛисты);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			КлючСвязи = 0;
			КодСтроки = 0;
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				ЗаписатьДокумент = Истина;
				НоваяСтрока = ДокОбъект.гф_ТоварыВКоробах.Добавить();
				НоваяСтрока.УпаковочныйЛист 		= ВыборкаДетальныеЗаписи.Ссылка;
				
				гф_УстановитьДанныеУпаковочногоЛиста(НоваяСтрока);
				
				ОтгрузкаКодовМаркировкиПарами = Ложь;
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ДоговорыКонтрагентовДополнительныеРеквизиты.Ссылка КАК Ссылка,
				|	ДоговорыКонтрагентовДополнительныеРеквизиты.НомерСтроки КАК НомерСтроки,
				|	ДоговорыКонтрагентовДополнительныеРеквизиты.Свойство КАК Свойство,
				|	ДоговорыКонтрагентовДополнительныеРеквизиты.Значение КАК Значение,
				|	ДоговорыКонтрагентовДополнительныеРеквизиты.ТекстоваяСтрока КАК ТекстоваяСтрока
				|ИЗ
				|	Справочник.ДоговорыКонтрагентов.ДополнительныеРеквизиты КАК ДоговорыКонтрагентовДополнительныеРеквизиты
				|ГДЕ
				|	ДоговорыКонтрагентовДополнительныеРеквизиты.Ссылка = &Ссылка";
				
				Запрос.УстановитьПараметр("Ссылка", ДокОбъект.Договор);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписиДоговор = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписиДоговор.Следующий() Цикл
					
					Если ВыборкаДетальныеЗаписиДоговор.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту
						("Имя", "гф_ДоговорыКонтрагентовОтгрузкаКодовМаркировкиПарами") Тогда
						ОтгрузкаКодовМаркировкиПарами = ВыборкаДетальныеЗаписиДоговор.Значение;
					КонецЕсли;
					
				КонецЦикла;
				
				ОбщаяСуммаПоУпаковочногоЛиста = 0;
				
				гф_ДобавитьТоварыПоУпаковочномуЛисту(НоваяСтрока.УпаковочныйЛист, ДокОбъект.Товары, ДокОбъект.ВидыЗапасов,
					ДокОбъект, КлючСвязи, КодСтроки, ОтгрузкаКодовМаркировкиПарами, ДокОбъект.ШтрихкодыУпаковок, ОбщаяСуммаПоУпаковочногоЛиста);
					
				НоваяСтрока.ЦенаКороба = ОбщаяСуммаПоУпаковочногоЛиста;
				
				УпаковочныйЛист = НоваяСтрока.УпаковочныйЛист;
				ШтрихкодыУпаковок = ДокОбъект.ШтрихкодыУпаковок;
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	УпаковочныйЛист.гф_ТекущийОрдер КАК гф_ТекущийОрдер,
				|	УпаковочныйЛист.гф_Агрегация КАК гф_Агрегация,
				|	УпаковочныйЛист.Ссылка КАК Ссылка
				|ИЗ
				|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
				|ГДЕ
				|	УпаковочныйЛист.Ссылка = &Ссылка";
				
				Запрос.УстановитьПараметр("Ссылка", УпаковочныйЛист);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписиАгрегация = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписиАгрегация.Следующий() Цикл
					
					Если ВыборкаДетальныеЗаписиАгрегация.гф_Агрегация <> Неопределено Тогда
						
						Если ОтгрузкаКодовМаркировкиПарами Тогда
							
							Агрегация = ВыборкаДетальныеЗаписиАгрегация.гф_Агрегация.ПолучитьОбъект();
							
							Для Каждого Строка Из Агрегация.ВложенныеШтрихкоды Цикл
								
								НоваяСтрокаШтрихкодыУпаковок = ШтрихкодыУпаковок.Добавить();
								НоваяСтрокаШтрихкодыУпаковок.ШтрихкодУпаковки = Строка.Штрихкод;
								
							КонецЦикла;
						Иначе
							
							Если Источник.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтгрузке Тогда
								Агрегация = ВыборкаДетальныеЗаписиАгрегация.гф_Агрегация.ПолучитьОбъект();
								Агрегация.гф_Автодействие = Перечисления.гф_АвтодействияКМ.Отгружен;
							КонецЕсли;
						
							НоваяСтрокаШтрихкодыУпаковок = ШтрихкодыУпаковок.Добавить();
							НоваяСтрокаШтрихкодыУпаковок.ШтрихкодУпаковки = ВыборкаДетальныеЗаписиАгрегация.гф_Агрегация;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		Иначе
			
			ЗаписатьДокумент = Истина;
			
			// Используется механизм типовых методов ввода на основании
			// Взято из Процедура РеализацияТоваровУслугСоздатьНаОснованииЗаказа
			// и Процедура ЗаполнитьДокументНаОснованииЗаказаКлиента
			МассивЗаказов = Новый Массив();
			МассивЗаказов.Добавить(ЗаказКлиента);
			ПараметрыОткрытия = СозданиеНаОснованииУТВызовСервера.РеализацияТоваровУслугПараметрыОткрытияФормы(МассивЗаказов);
			
			ДанныеЗаполнения = ПараметрыОткрытия.Основание;
			
			СкладОтгрузки = Неопределено;
			РеквизитыШапки = Неопределено;
			ВариантОформления = Неопределено;
			ПараметрыОформления = Неопределено;
			
			// Если передан склад - необходимо заполнять товары только по указанном складу.
			ДанныеЗаполнения.Свойство("СкладОтгрузки", СкладОтгрузки);
			ДанныеЗаполнения.Свойство("РеквизитыШапки", РеквизитыШапки);
			ДанныеЗаполнения.Свойство("ВариантОформленияПродажи", ВариантОформления);
			ДанныеЗаполнения.Свойство("ПараметрыОформления", ПараметрыОформления);
			
			ЭтотОбъект 					= ДокОбъект;
			РеквизитыЗаказа 			= РеквизитыШапки;
			БанковскийСчетКонтрагента 	= ДокОбъект.БанковскийСчетКонтрагента;
			Договор 					= ДокОбъект.Договор;
			Организация 				= ДокОбъект.Организация;
			БанковскийСчетОрганизации 	= ДокОбъект.БанковскийСчетОрганизации;
			Контрагент 					= ДокОбъект.Контрагент;
			
			// Заполнение шапки.
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыЗаказа);
			//Валюта = ВалютаВзаиморасчетов;
			БанковскийСчетОрганизации = РеквизитыЗаказа.БанковскийСчет;
			ДатаВозвратаМногооборотнойТары = МногооборотнаяТараСервер.РассчитатьДатуВозвратаМногооборотнойТары(
			ЭтотОбъект,
			РеквизитыЗаказа.СрокВозвратаМногооборотнойТары,
			РеквизитыЗаказа.РассчитыватьДатуВозвратаТарыПоКалендарю,
			РеквизитыЗаказа.КалендарьВозвратаТары);
			
			ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчетОрганизации, БанковскийСчетКонтрагента);
			Если Не ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
				СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
				СтруктураПараметров.Организация    		= Организация;
				СтруктураПараметров.БанковскийСчет		= БанковскийСчетОрганизации;
				БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(БанковскийСчетКонтрагента) Тогда
				БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, , БанковскийСчетКонтрагента);
			КонецЕсли;
			
			СкладОтгрузки = ЗаказКлиента.Склад;
			
			ЗаполнятьПоОстаткам = Истина;
			
			СкидкиНаценки = ЭтотОбъект.СкидкиНаценки;
			Товары = ЭтотОбъект.Товары;
			НачислениеБонусныхБаллов = ЭтотОбъект.НачислениеБонусныхБаллов;
			
			Если ЗаполнятьПоОстаткам Тогда
				
				МассивЗаказов = Новый Массив();
				МассивЗаказов.Добавить(ЗаказКлиента);
				
				ПараметрыЗаполнения = Новый Структура;
				ПараметрыЗаполнения.Вставить("ВариантОформления", ВариантОформления);
				ПараметрыЗаполнения.Вставить("ПараметрыОформления", ПараметрыОформления);
				
				РеализацияТоваровУслугЛокализация.ДополнитьПараметрыЗаполнения(ПараметрыЗаполнения, РеквизитыЗаказа);
				
				Документы.РеализацияТоваровУслуг.ЗаполнитьПоОстаткамЗаказов(
				ЭтотОбъект,
				Товары,
				СкидкиНаценки,
				НачислениеБонусныхБаллов,
				?(СкладОтгрузки=Неопределено, Справочники.Склады.ПустаяСсылка(), СкладОтгрузки),
				МассивЗаказов,
				ПараметрыЗаполнения,
				ШтрихкодыУпаковок);
				
				ЭтотОбъект.ВариантОформленияПродажи = ?(ЗначениеЗаполнено(ВариантОформления), 
				ВариантОформления,
				Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг);
				
				ЗаказыСервер.ЗаполнитьЗаказВШапкеПоЗаказамВТабличнойЧасти(ЗаказКлиента, Товары, "ЗаказКлиента");
				
				Если НЕ ЗначениеЗаполнено(ЗаказКлиента)
					И МассивЗаказов.Количество() = 1
					И ТипЗнч(МассивЗаказов[0]) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
					ЗаказКлиента = МассивЗаказов[0];
				КонецЕсли;
				
				СкидкиРассчитаны = (СкидкиНаценки.Количество() > 0);
				
				ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.РеализацияТоваровУслуг);
				НоменклатураСервер.ЗаполнитьСерииПоFEFO(ЭтотОбъект,ПараметрыУказанияСерий, Ложь);
				
			КонецЕсли;
			
			СтруктураОснование = Документы.РеализацияТоваровУслуг.СтруктураОснованияДляПечати(ЭтотОбъект);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураОснование);
			
		КонецЕсли;
		
		НаличиеСтрокиНеОтгружать = Источник.ОтгружаемыеТовары.НайтиСтроки(Новый Структура("Действие", Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.НеОтгружать));
		
		Если НаличиеСтрокиНеОтгружать.Количество() > 0 Тогда
			ДокОбъект.Комментарий = ДокОбъект.Комментарий + " Отгрузка неполная.";
		КонецЕсли;
	
		Если ЗаписатьДокумент Тогда
			Если Источник.Статус = Перечисления.СтатусыРасходныхОрдеров.Проверен Тогда
				ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
				
				// Отправить письмо на почту
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Документы по отгрузке ""%1"", ""%2"" готовы к выгрузке'"), ДокОбъект.Контрагент, ДокОбъект.Номер);
				ОтправитьПисьмо(ДокОбъект, ТекстСообщения, Ложь);
				
			ИначеЕсли Источник.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтгрузке
				Или Источник.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен Тогда
				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
				ОбеспечениеВДокументахСервер.ПроверитьЗапуститьФоновоеЗаданиеРаспределенияЗапасов();
				
				// Отправить письмо на почту
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Создан ЧЕРНОВИК ""Планируемая отгрузка"" по реализации ""%1"" от ""%2"".
				|Финальная версия документов будет выслана посредством ЭДО по факту сборки товаров на складе!'"), ДокОбъект.Номер, ДокОбъект.Дата);
				ОтправитьПисьмо(ДокОбъект, ТекстСообщения, Истина);
				
			КонецЕсли;
		КонецЕсли;   
		
	КонецЕсли;
	
КонецПроцедуры

Процедура гф_УстановитьДанныеУпаковочногоЛиста(ТекущаяСтрока)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УпаковочныйЛистШапка.Ссылка КАК УпаковочныйЛист,
	|	УпаковочныйЛистШапка.гф_Заказ КАК гф_Заказ,
	|	УпаковочныйЛистШапка.гф_Комплектация КАК гф_Комплектация,
	|	СУММА(УпаковочныйЛистТовары.Количество) КАК Количество,
	|	МАКСИМУМ(УпаковочныйЛистТовары.Номенклатура.Артикул) КАК Артикул
	|ПОМЕСТИТЬ ВТ_УпаковочныйЛист
	|ИЗ
	|	Документ.УпаковочныйЛист КАК УпаковочныйЛистШапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСправочник
	|			ПО УпаковочныйЛистТовары.Номенклатура = НоменклатураСправочник.Ссылка
	|		ПО УпаковочныйЛистШапка.Ссылка = УпаковочныйЛистТовары.Ссылка
	|ГДЕ
	|	УпаковочныйЛистШапка.Ссылка = &Ссылка
	|	И НЕ УпаковочныйЛистТовары.ЭтоУпаковочныйЛист
	|
	|СГРУППИРОВАТЬ ПО
	|	УпаковочныйЛистШапка.Ссылка,
	|	УпаковочныйЛистШапка.гф_Заказ,
	|	УпаковочныйЛистШапка.гф_Комплектация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА СУММА(ЗаказКлиентаТовары.Количество) = 0
	|			ТОГДА СУММА(ЗаказКлиентаТовары.СуммаСНДС) - СУММА(ЗаказКлиентаТовары.СуммаНДС)
	|		ИНАЧЕ (СУММА(ЗаказКлиентаТовары.СуммаСНДС) - СУММА(ЗаказКлиентаТовары.СуммаНДС)) / СУММА(ЗаказКлиентаТовары.Количество)
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА СУММА(ЗаказКлиентаТовары.Количество) = 0
	|			ТОГДА СУММА(ЗаказКлиентаТовары.СуммаНДС)
	|		ИНАЧЕ СУММА(ЗаказКлиентаТовары.СуммаНДС) / СУММА(ЗаказКлиентаТовары.Количество)
	|	КОНЕЦ КАК НДС
	|ПОМЕСТИТЬ ВТ_Цены
	|ИЗ
	|	ВТ_УпаковочныйЛист КАК ВТ_УпаковочныйЛист
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|		ПО ВТ_УпаковочныйЛист.гф_Заказ = ЗаказКлиентаТовары.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиентаТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(УпаковочныйЛистТовары.Количество * ЕСТЬNULL(ВТ_Цены.Цена, 0)) КАК Цена,
	|	СУММА(УпаковочныйЛистТовары.Количество * ЕСТЬNULL(ВТ_Цены.НДС, 0)) КАК НДС
	|ПОМЕСТИТЬ ВТ_ЦенаНДС
	|ИЗ
	|	Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Цены КАК ВТ_Цены
	|		ПО УпаковочныйЛистТовары.Номенклатура = ВТ_Цены.Номенклатура
	|ГДЕ
	|	УпаковочныйЛистТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВТ_УпаковочныйЛист.УпаковочныйЛист КАК УпаковочныйЛист,
	|	ВТ_УпаковочныйЛист.Артикул КАК Артикул,
	|	ВТ_УпаковочныйЛист.Количество КАК КоличествоПар,
	|	ВЫБОР
	|		КОГДА СУММА(ЕСТЬNULL(ВариантыКомплектацииНоменклатурыТовары.Количество, 0)) = 0
	|			ТОГДА 1
	|		ИНАЧЕ ВТ_УпаковочныйЛист.Количество / СУММА(ЕСТЬNULL(ВариантыКомплектацииНоменклатурыТовары.Количество, 0))
	|	КОНЕЦ КАК Коэффициент,
	|	ВТ_ЦенаНДС.Цена КАК ЦенаКороба,
	|	ВТ_ЦенаНДС.НДС КАК НДС
	|ИЗ
	|	ВТ_УпаковочныйЛист КАК ВТ_УпаковочныйЛист
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ВариантыКомплектацииНоменклатурыТовары
	|		ПО ВТ_УпаковочныйЛист.гф_Комплектация = ВариантыКомплектацииНоменклатурыТовары.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЦенаНДС КАК ВТ_ЦенаНДС
	|		ПО (ИСТИНА)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_УпаковочныйЛист.УпаковочныйЛист,
	|	ВТ_УпаковочныйЛист.Артикул,
	|	ВТ_УпаковочныйЛист.Количество,
	|	ВТ_ЦенаНДС.Цена,
	|	ВТ_ЦенаНДС.НДС";
	
	Запрос.Параметры.Вставить("Ссылка", ТекущаяСтрока.УпаковочныйЛист);
	
	Результат = Запрос.Выполнить(); 
	
	Если Результат.Пустой() Тогда
		
		ТекущаяСтрока.Артикул		= "";
		ТекущаяСтрока.КоличествоПар	= 0;
		ТекущаяСтрока.Коэффициент	= 0;
		ТекущаяСтрока.ЦенаКороба	= "";
		ТекущаяСтрока.НДС			= "";
		
	Иначе	
		
		Выборка = Результат.Выбрать();
		
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Выборка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура гф_ДобавитьТоварыПоУпаковочномуЛисту(УпаковочныйЛист, ТоварыВКоробах, ВидыЗапасов, ДокОбъект,
	КлючСвязи, КодСтроки, ОтгрузкаКодовМаркировкиПарами, ШтрихкодыУпаковок, ОбщаяСуммаПоУпаковочногоЛиста)      
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	УпаковочныйЛист.гф_Заказ КАК гф_Заказ,
	               |	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	               |	ЗаказКлиентаТовары.Характеристика КАК Характеристика,
	               |	ЗаказКлиентаТовары.Серия КАК Серия,
	               |	ЗаказКлиентаТовары.Цена КАК Цена,
	               |	ЗаказКлиентаТовары.ВидЦены КАК ВидЦены,
	               |	СУММА(ЗаказКлиентаТовары.Сумма) КАК Сумма,
	               |	ЗаказКлиентаТовары.СтавкаНДС КАК СтавкаНДС,
	               |	СУММА(ЗаказКлиентаТовары.СуммаНДС) КАК СуммаНДС,
	               |	СУММА(ЗаказКлиентаТовары.СуммаСНДС) КАК СуммаСНДС,
	               |	ЗаказКлиентаТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	               |	ЗаказКлиентаТовары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	               |	ЗаказКлиентаТовары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	               |	ЗаказКлиентаТовары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	               |	ЗаказКлиентаТовары.Склад КАК Склад,
	               |	ЗаказКлиентаТовары.СрокПоставки КАК СрокПоставки,
	               |	ЗаказКлиентаТовары.Содержание КАК Содержание,
	               |	ЗаказКлиентаТовары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	               |	ЗаказКлиентаТовары.НоменклатураНабора КАК НоменклатураНабора,
	               |	ЗаказКлиентаТовары.Обособленно КАК Обособленно,
	               |	ЗаказКлиентаТовары.ХарактеристикаНабора КАК ХарактеристикаНабора,
	               |	ЗаказКлиентаТовары.ВариантОбеспеченияДоИзмененияОбновлениемИБ КАК ВариантОбеспеченияДоИзмененияОбновлениемИБ,
	               |	ЗаказКлиентаТовары.Подразделение КАК Подразделение,
	               |	ЗаказКлиентаТовары.НоменклатураПартнера КАК НоменклатураПартнера,
	               |	СУММА(ЗаказКлиентаТовары.Количество) КАК Количество,
	               |	ЗаказКлиентаТовары.КодСтроки КАК КодСтроки,
	               |	ЗаказКлиентаТовары.гф_СкидкаДляРТУ КАК гф_СкидкаДляРТУ,
	               |	ЗаказКлиентаТовары.гф_ДатаДляРТУ КАК гф_ДатаДляРТУ,
	               |	ЗаказКлиентаТовары.гф_КомментарийРТУ КАК гф_КомментарийРТУ,
	               |	ЗаказКлиентаТовары.гф_ЦенаСоСкидкой КАК гф_ЦенаСоСкидкой
	               |ПОМЕСТИТЬ ВТ_Заказ
	               |ИЗ
	               |	Документ.УпаковочныйЛист КАК УпаковочныйЛист
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	               |		ПО УпаковочныйЛист.гф_Заказ = ЗаказКлиентаТовары.Ссылка
	               |ГДЕ
	               |	УпаковочныйЛист.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказКлиентаТовары.Номенклатура,
	               |	ЗаказКлиентаТовары.Характеристика,
	               |	УпаковочныйЛист.гф_Заказ,
	               |	ЗаказКлиентаТовары.Серия,
	               |	ЗаказКлиентаТовары.Цена,
	               |	ЗаказКлиентаТовары.ВидЦены,
	               |	ЗаказКлиентаТовары.ПроцентРучнойСкидки,
	               |	ЗаказКлиентаТовары.СуммаРучнойСкидки,
	               |	ЗаказКлиентаТовары.ПроцентАвтоматическойСкидки,
	               |	ЗаказКлиентаТовары.СуммаАвтоматическойСкидки,
	               |	ЗаказКлиентаТовары.Склад,
	               |	ЗаказКлиентаТовары.СрокПоставки,
	               |	ЗаказКлиентаТовары.Содержание,
	               |	ЗаказКлиентаТовары.СтатусУказанияСерий,
	               |	ЗаказКлиентаТовары.НоменклатураНабора,
	               |	ЗаказКлиентаТовары.Обособленно,
	               |	ЗаказКлиентаТовары.ХарактеристикаНабора,
	               |	ЗаказКлиентаТовары.ВариантОбеспеченияДоИзмененияОбновлениемИБ,
	               |	ЗаказКлиентаТовары.Подразделение,
	               |	ЗаказКлиентаТовары.НоменклатураПартнера,
	               |	ЗаказКлиентаТовары.СтавкаНДС,
	               |	ЗаказКлиентаТовары.КодСтроки,
	               |	ЗаказКлиентаТовары.гф_СкидкаДляРТУ,
	               |	ЗаказКлиентаТовары.гф_ДатаДляРТУ,
	               |	ЗаказКлиентаТовары.гф_КомментарийРТУ,
	               |	ЗаказКлиентаТовары.гф_ЦенаСоСкидкой
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	УпаковочныйЛистТовары.НомерСтроки КАК НомерСтроки,
	               |	УпаковочныйЛистТовары.Номенклатура КАК Номенклатура,
	               |	УпаковочныйЛистТовары.Характеристика КАК Характеристика,
	               |	УпаковочныйЛистТовары.Серия КАК Серия,
	               |	УпаковочныйЛистТовары.Упаковка КАК Упаковка,
	               |	УпаковочныйЛистТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	               |	УпаковочныйЛистТовары.Количество КАК Количество,
	               |	УпаковочныйЛистТовары.УпаковочныйЛист КАК УпаковочныйЛист,
	               |	УпаковочныйЛистТовары.НоменклатураПартнера КАК НоменклатураПартнера,
	               |	УпаковочныйЛистТовары.Комментарий КАК Комментарий,
	               |	УпаковочныйЛистТовары.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
	               |	УпаковочныйЛистТовары.ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста КАК ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста,
	               |	УпаковочныйЛистТовары.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
	               |	УпаковочныйЛистТовары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	               |	УпаковочныйЛистТовары.Назначение КАК Назначение,
	               |	ВТ_Заказ.Цена КАК Цена,
	               |	ВТ_Заказ.ВидЦены КАК ВидЦены,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ВТ_Заказ.Количество, 0) = 0
	               |			ТОГДА ВТ_Заказ.Сумма
	               |		ИНАЧЕ ВТ_Заказ.Сумма / ВТ_Заказ.Количество * УпаковочныйЛистТовары.Количество
	               |	КОНЕЦ КАК Сумма,
	               |	ВТ_Заказ.СтавкаНДС КАК СтавкаНДС,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ВТ_Заказ.Количество, 0) = 0
	               |			ТОГДА ВТ_Заказ.СуммаНДС
	               |		ИНАЧЕ ВТ_Заказ.СуммаНДС / ВТ_Заказ.Количество * УпаковочныйЛистТовары.Количество
	               |	КОНЕЦ КАК СуммаНДС,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ВТ_Заказ.Количество, 0) = 0
	               |			ТОГДА ВТ_Заказ.СуммаСНДС
	               |		ИНАЧЕ ВТ_Заказ.СуммаСНДС / ВТ_Заказ.Количество * УпаковочныйЛистТовары.Количество
	               |	КОНЕЦ КАК СуммаСНДС,
	               |	ВТ_Заказ.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ВТ_Заказ.Количество, 0) = 0
	               |			ТОГДА ВТ_Заказ.СуммаРучнойСкидки
	               |		ИНАЧЕ ВТ_Заказ.СуммаРучнойСкидки / ВТ_Заказ.Количество * УпаковочныйЛистТовары.Количество
	               |	КОНЕЦ КАК СуммаРучнойСкидки,
	               |	ВТ_Заказ.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ВТ_Заказ.Количество, 0) = 0
	               |			ТОГДА ВТ_Заказ.СуммаАвтоматическойСкидки
	               |		ИНАЧЕ ВТ_Заказ.СуммаАвтоматическойСкидки / ВТ_Заказ.Количество * УпаковочныйЛистТовары.Количество
	               |	КОНЕЦ КАК СуммаАвтоматическойСкидки,
	               |	ВТ_Заказ.Склад КАК Склад,
	               |	ВТ_Заказ.СрокПоставки КАК СрокПоставки,
	               |	ВТ_Заказ.Содержание КАК Содержание,
	               |	ВТ_Заказ.НоменклатураНабора КАК НоменклатураНабора,
	               |	ВТ_Заказ.Обособленно КАК Обособленно,
	               |	ВТ_Заказ.ХарактеристикаНабора КАК ХарактеристикаНабора,
	               |	ВТ_Заказ.ВариантОбеспеченияДоИзмененияОбновлениемИБ КАК ВариантОбеспеченияДоИзмененияОбновлениемИБ,
	               |	ВТ_Заказ.Подразделение КАК Подразделение,
	               |	ЕСТЬNULL(ВТ_Заказ.Количество, 0) КАК КоличествоВЗаказе,
	               |	ВТ_Заказ.КодСтроки КАК КодСтроки,
	               |	ВТ_Заказ.гф_СкидкаДляРТУ КАК гф_СкидкаДляРТУ,
	               |	ВТ_Заказ.гф_ДатаДляРТУ КАК гф_ДатаДляРТУ,
	               |	ВТ_Заказ.гф_КомментарийРТУ КАК гф_КомментарийРТУ,
	               |	ВТ_Заказ.гф_ЦенаСоСкидкой КАК гф_ЦенаСоСкидкой
	               |ИЗ
	               |	Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Заказ КАК ВТ_Заказ
	               |		ПО УпаковочныйЛистТовары.Номенклатура = ВТ_Заказ.Номенклатура
	               |			И УпаковочныйЛистТовары.Характеристика = ВТ_Заказ.Характеристика
	               |			И УпаковочныйЛистТовары.Серия = ВТ_Заказ.Серия
	               |			И УпаковочныйЛистТовары.гф_КодСтроки = ВТ_Заказ.КодСтроки
	               |ГДЕ
	               |	УпаковочныйЛистТовары.Ссылка = &Ссылка
	               |	И НЕ УпаковочныйЛистТовары.ЭтоУпаковочныйЛист";
	
	Запрос.Параметры.Вставить("Ссылка", УпаковочныйЛист);
	
	//Выборка = Запрос.Выполнить().Выбрать();
	ВыборкаДанные = Запрос.Выполнить().Выгрузить();
	//ВыборкаДанные.Колонки.Добавить("УжеОтгружено");
	//ВыборкаДанные.Колонки.Добавить("КоличествоОтгружено");
	//
	////ТабЗнач = ВыборкаДанные.Выгрузить();
	//ВыборкаДанные.ЗаполнитьЗначения(Ложь, "УжеОтгружено");
	//ВыборкаДанные.ЗаполнитьЗначения(0, "КоличествоОтгружено");
	//ВыборкаДанные.Загрузить(ТабЗнач);
	
	
	КэшированныеЗначения = Неопределено;
	
	//Пока Выборка.Следующий() Цикл
	Для Каждого Выборка Из ВыборкаДанные Цикл
		
		НоваяСтрока = ТоварыВКоробах.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		ЗаказКлиента = УпаковочныйЛист.гф_Заказ;
		
		НоваяСтрока.ЗаказКлиента = ЗаказКлиента;
		
		Для Каждого СтрокаУпаковочныйЛистНоменклатура Из УпаковочныйЛист.Товары Цикл
			
			Если НоваяСтрока.Номенклатура = СтрокаУпаковочныйЛистНоменклатура.Номенклатура
				И НоваяСтрока.Характеристика = СтрокаУпаковочныйЛистНоменклатура.Характеристика 
				И НоваяСтрока.Количество = СтрокаУпаковочныйЛистНоменклатура.Количество Тогда
				
				//Если ВыборкаДанные.УжеОтгружено И Не СтрокаУпаковочныйЛистНоменклатура.гф_КодСтрокиДополнительныеСведения = "" И НоваяСтрока.Количество > 1 Тогда
				Если Не СтрокаУпаковочныйЛистНоменклатура.гф_КодСтрокиДополнительныеСведения = "" И НоваяСтрока.Количество > 1 Тогда
					
					// Получить массив с разделителем
					МассивКодовСтрок = СтрРазделить(СтрокаУпаковочныйЛистНоменклатура.гф_КодСтрокиДополнительныеСведения, ",");
					
					ЗапомнитьКоличество = НоваяСтрока.Количество;
					НоваяСтрока.Количество = 1;
					НоваяСтрока.КоличествоУпаковок = 1;
					
					Для Каждого ЭлементМассива Из МассивКодовСтрок Цикл
						
						Стр = ТоварыВКоробах.Добавить();
						ЗаполнитьЗначенияСвойств(Стр, НоваяСтрока);
						Стр.Количество = 1;
						Стр.КоличествоУпаковок = 1;
						
						Стр.КодСтроки = Число(ЭлементМассива);
						
						Стр.КлючСвязи = КлючСвязи + 1;
						
						Стр.АналитикаУчетаНоменклатуры = ПолучитьАналитикаУчетаНоменклатуры(Стр.Номенклатура, Стр.Характеристика,
						Стр.Серия, Стр.Назначение, Стр.Склад);
						
					КонецЦикла;
					НоваяСтрока.КодСтроки = СтрокаУпаковочныйЛистНоменклатура.гф_КодСтроки;
					
					Прервать;
					
				Иначе
					НоваяСтрока.КодСтроки = СтрокаУпаковочныйЛистНоменклатура.гф_КодСтроки;
					ДокОбъект.Комментарий = Выборка.гф_КомментарийРТУ;
					//НоваяСтрока.ПроцентРучнойСкидки = Выборка.гф_СкидкаДляРТУ;
					НоваяСтрока.ПроцентРучнойСкидки = 0;
					
					Если Не ЗаказКлиента.гф_СезонныйЗаказ Тогда
						Если ЗначениеЗаполнено(Выборка.гф_СкидкаДляРТУ) > 0 Тогда
							НоваяСтрока.Цена = (Выборка.Цена * Выборка.гф_СкидкаДляРТУ / 100 - Выборка.Цена) * (-1);
						КонецЕсли;
					Иначе
						
						// Необходимо оптимизировать получение цены для одинаковой номенкатуры
						//ЦенаПоВидуНоменклатуры = ПолучитьЦенуНоменклатуры();
						
						Запрос = Новый Запрос;
						Запрос.Текст = 
						"ВЫБРАТЬ РАЗРЕШЕННЫЕ
						|	ЦеныНоменклатуры25СрезПоследних.Номенклатура КАК Номенклатура,
						|	ЦеныНоменклатуры25СрезПоследних.Цена КАК Цена,
						|	ЦеныНоменклатуры25СрезПоследних.ВидЦены КАК ВидЦены
						|ИЗ
						|	РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(
						|			&Период,
						|			Номенклатура = &Номенклатура
						|				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатуры25СрезПоследних";
						
						Запрос.УстановитьПараметр("ВидЦены", НоваяСтрока.ВидЦены);
						Запрос.УстановитьПараметр("Номенклатура", НоваяСтрока.Номенклатура);
						Запрос.УстановитьПараметр("Период", КонецДня(Выборка.гф_ДатаДляРТУ));
						
						РезультатЗапроса = Запрос.Выполнить();
						
						ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
						
						Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
							НоваяСтрока.Цена = ВыборкаДетальныеЗаписи.Цена;
							Прервать;
						КонецЦикла;
						
						Если ЗначениеЗаполнено(Выборка.гф_СкидкаДляРТУ) > 0 Тогда
							НоваяСтрока.Цена = (НоваяСтрока.Цена * Выборка.гф_СкидкаДляРТУ / 100 - НоваяСтрока.Цена) * (-1);
						КонецЕсли;
						
					КонецЕсли;
					
					ОбщаяСуммаПоУпаковочногоЛиста = ОбщаяСуммаПоУпаковочногоЛиста + НоваяСтрока.Цена;
					
					ТекущаяСтрока = НоваяСтрока;
					
					КэшированныеЗначения = Неопределено;
					
					СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ДокОбъект);
					
					СтруктураДействий = Новый Структура;
					СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
					СтруктураДействий.Вставить("ПересчитатьСумму");
					СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
					СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
					СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами");
					СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
					СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
					СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
					СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
					СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
					ДокОбъект.РеализацияПоЗаказам, ДокОбъект.ТребуетсяЗалогЗаТару));
					
					//ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
					ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
					
					Прервать;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		НоваяСтрока.КлючСвязи = КлючСвязи + 1;
		
		НоваяСтрока.АналитикаУчетаНоменклатуры = ПолучитьАналитикаУчетаНоменклатуры(НоваяСтрока.Номенклатура, НоваяСтрока.Характеристика,
		НоваяСтрока.Серия, НоваяСтрока.Назначение, НоваяСтрока.Склад);
		
	КонецЦикла;	    	
	
КонецПроцедуры

Функция ПолучитьАналитикаУчетаНоменклатуры(Номенклатура, Характеристика, Серия, Назначение, Склад)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КлючиАналитикиУчетаНоменклатуры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КлючиАналитикиУчетаНоменклатуры КАК КлючиАналитикиУчетаНоменклатуры
		|ГДЕ
		|	КлючиАналитикиУчетаНоменклатуры.Номенклатура = &Номенклатура
		|	И КлючиАналитикиУчетаНоменклатуры.Характеристика = &Характеристика
		|	И КлючиАналитикиУчетаНоменклатуры.Серия = &Серия
		|	И КлючиАналитикиУчетаНоменклатуры.МестоХранения = &Склад
		|	И КлючиАналитикиУчетаНоменклатуры.Назначение = &Назначение";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("Серия", Серия);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Назначение", Назначение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ЗависимыеРеквизиты()
	
	Возврат Новый Структура(
		"БезВозвратнойТары",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки,СуммаБонусныхБалловКСписаниюВВалюте");
	
КонецФункции

// Обработка строки табличной части - вызывается из клиентского общего модуля при необходимости выполнения на сервере.
//
// Параметры:
//  ТекущаяСтрока	  - Структура - данные обрабатываемой строки, содержит в том числе:
//  	* НомерСтроки - Число
//  СтруктураДействий - Структура - описывает действия, где Ключ - наименование действия, Значение - Структура - параметры действия, возможно передавать следующие поля:
//		* ПроверитьХарактеристикуПоВладельцу - СправочникСсылка.ХарактеристикиНоменклатуры
//		* ПроверитьЗаполнитьУпаковкуПоВладельцу - СправочникСсылка.УпаковкиЕдиницыИзмерения
//		* ПересчитатьКоличествоЕдиниц - Неопределено
//		* ПересчитатьКоличествоЕдиницСуффикс - Строка - Суффикс
//		* ПересчитатьКоличествоУпаковок - Неопределено
//		* ПересчитатьКоличествоУпаковокСуффикс - Строка - Суффикс
//		* ПересчитатьКоличествоУпаковокСуффиксИзОтклонения - Строка - Суффикс
//		* ПересчитатьВесОбъем - Строка - Суффикс
//		* ЗаполнитьЦенуПродажи - см. ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ
//		* ЗаполнитьПомещение - Структура:
//			** Склад - СправочникСсылка.Склады
//			** Номенклатура - СправочникСсылка.Номенклатура - (Необязательный)
//			** Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - (Необязательный)
//		* ЗаполнитьПродавца - Структура:
//			** Продавец - СправочникСсылка.Пользователи
//		* ПересчитатьСумму - Строка
//		* ПересчитатьСуммуСУчетомРучнойСкидки - Структура:
//			** Очищать - Булево
//			** ПересчитыватьСуммуРучнойСкидки - Булево
//			** ИмяКоличества - Строка
//		* ПересчитатьСуммуСУчетомАвтоматическойСкидки - Структура:
//			** Очищать - Булево
//		* ПересчитатьЦенуПоСумме - Строка
//		* ПересчитатьЦенуЗаУпаковку - Число
//		* ПересчитатьСуммуНДС - см. ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ
//		* ЗаполнитьСтавкуНДС - Структура:
//			** НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС
//			** Дата - Дата
//		* ОбработатьШтрихкоды - см. ШтрихкодированиеНоменклатурыКлиентСервер.ПараметрыОбработкиШтрихкодов
//		* ЗаполнитьНоменклатуруПоНоменклатуреПартнера - Неопределено
//		* ЗаполнитьНоменклатуруПартнераПоНоменклатуре - Неопределено
//		* ЗаполнитьФлагИзлишекПорча - Неопределено
//		* ЗаполнитьФлагРасхождение - Неопределено
//		* ПересчитатьКоличествоУпаковокОтклонение - Неопределено
//		* ОчиститьСуммуВзаиморасчетов - Неопределено
//		* ПересчитатьКоличествоНеОтгружать - Неопределено
//		* ЗаполнитьПризнакАдресногоХранения - Структура:
//			** Склад - СправочникСсылка.Склады
//			** Помещение - СправочникСсылка.СкладскиеПомещения
//			** Дата - Дата
//		* ЗаполнитьСтатьюАналитикуРасходовНоменклатуры - см. ДоходыИРасходыКлиентСервер.ВставитьДействиеЗаполнитьСтатьюАналитикуРасходовНоменклатуры.СтруктураДействий
//  КэшированныеЗначения - Структура - Сохраненные значения параметров, используемых при обработке.
//
Процедура ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		КэшированныеЗначения.ПравоРегистрацииШтрихкодовНоменклатурыДоступно = ШтрихкодированиеНоменклатурыСервер.ПравоРегистрацииШтрихкодовНоменклатурыДоступно();
	КонецЕсли;
	
	ОбработкаТабличнойЧастиСерверЛокализация.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	//ПроверитьАссортиментСтроки(                             										ТекущаяСтрока, СтруктураДействий);
	//ЗаполнитьНоменклатуруПоНоменклатуреПартнераВСтрокеТЧ( 										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//ЗаполнитьНоменклатуруПартнераПоНоменклатуреВСтрокеТЧ( 										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//ПроверитьСопоставленнуюНоменклатуруПартнераВСтрокеТЧ( 										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ(     										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//ПроверитьКорректностьЗаполнитьХарактеристикиИУпаковки(  										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//ПроверитьКорректностьЗаполнитьХарактеристикиКиЗ(												ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//ПроверитьЗаполнитьСкладВСтрокеТЧ(																ТекущаяСтрока, СтруктураДействий);
	//++ НЕ УТКА
	//ПроверитьЗаполнитьСкладПроизводстваВСтрокеТЧ(										            ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//-- НЕ УТКА
	//ПроверитьЗаполнитьОбеспечениеВСтрокеТЧДокументаПродажи(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//ЗаполнитьОтгрузитьДляВариантаОформленияЗаказПлюсРеализация(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//++ НЕ УТКА
	//ПроверитьЗаполнитьОбеспечениеВСтрокеТЧЭтапаПроизводства(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//-- НЕ УТКА

	//++ НЕ УТ
	//ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьНаправлениеВыпуска(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПолучателяПоНаправлениюВыпуска(					ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//ЗаполнитьПризнакЦеховаяКладовая(                            									ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//-- НЕ УТ
	//ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоНеОтгружатьСтрокеТЧ(					ТекущаяСтрока, СтруктураДействий);
	//ЗаполнитьGTINВСтроке(                                                                           ТекущаяСтрока, СтруктураДействий);
	//ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокПоФактуВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокСуффиксИзОтклоненияВСтрокеТЧ(	ТекущаяСтрока, СтруктураДействий);
	//ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоЕдиницВСтрокеТЧ(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоПоРНПТВСтрокеТЧ(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоЕдиницСуффиксВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокВСтрокеТЧ(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокСуффиксВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоОтклонение(						    ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокПоВесу(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокПоОбъему(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьВесОбъемВСтрокеТЧ(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьВидЦеныВСтрокеТЧ(									ТекущаяСтрока, СтруктураДействий); 
	//ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуЗаУпаковкуВСтрокеТЧ(							ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуЗаказаЗаУпаковкуВСтрокеТЧ(					ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//ПроверитьЗаполнитьВидЦеныВСтрокеТЧ(                              								ТекущаяСтрока, СтруктураДействий); 
	//ЗаполнитьЦенуПродажиВСтрокеТЧ(                          										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//ЗаполнитьЦенуПродажиПоАссортиментуВСтрокеТЧ(            										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//ЗаполнитьЦенуЗакупкиВСтрокеТЧ(                          										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//ЗаполнитьУсловияПродажВСтрокеТЧ(                        										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//ЗаполнитьУсловияРозничныхПродажВСтрокеТЧ(               										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//ЗаполнитьУсловияЗакупокВСтрокеТЧ(                       										ТекущаяСтрока, СтруктураДействий);
	//++ НЕ УТКА
	//ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьДатуПроизводства(                                  ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//УстановитьПризнакИспользованияПлановойСтоимостиВСтрокеТЧ(        								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//ПроверитьЗаполнитьЦенуВыпускаВСтрокеТЧ(        													ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//-- НЕ УТКА

	//++ НЕ УТ
	//ЗаполнитьЦенуПередачиПродукцииДавальцуВСтрокеТЧ(        										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//-- НЕ УТ
	//СкорректироватьСтавкуНДСВСтрокеТЧ(                            									ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//ЗаполнитьСтавкуНДСВСтрокеТЧ(                            										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//ЗаполнитьКодТНВЭДПоНоменклатуреВСтрокеТЧ(               										ТекущаяСтрока, СтруктураДействий);
	ПересчитатьЦенуСНДС(                                    										ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтавкуНДСВозвратнойТарыВСтрокеТЧ(					ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуРучнойСкидкиВСтрокеТЧ(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуАвтоматическойСкидкиВСтрокеТЧ(
		ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьПроцентРучнойСкидкиВСтрокеТЧ(					ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//++ НЕ УТКА
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуУслугиВСтрокеТЧЗаказДавальца(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуВСтрокеТЧЗаказДавальца(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//-- НЕ УТКА
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуВСтрокеТЧ(									ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСуффиксВСтрокеТЧ(							ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуВСтрокеТЧРасхождения(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуСкидкуПоСуммеВПродажахВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуСкидкуПоСуммеВЗакупкахВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуПоСуммеВСтрокеТЧ(							ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//++ НЕ УТКА
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуПоСуммеВСтрокеТЧЗаказДавальца(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//-- НЕ УТКА
	ПересчитатьСуммуПродажиПоСуммеСНДС(                     										ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуПродажиПоСуммеПродажиВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСУчетомАвтоматическойСкидкиВСтрокеТЧ(		ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСУчетомРучнойСкидкиВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСУчетомСкидкиБонуснымиБалламиВСтрокеТЧ(		ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуСУчетомПогрешностиОкругленияВСтрокеТЧ(  										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуНДСВСтрокеТЧ(                           										ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуНДССуффиксВСтрокеТЧ(															ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСНДСВСтрокеТЧ(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСНДССуффиксВСтрокеТЧ(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуБезНДСВСтрокеТЧ(							ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуРеглВСтрокеТЧ(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуПРВСтрокеТЧ(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуНУВСтрокеТЧ(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуВРВСтрокеТЧ(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьНДСРеглВСтрокеТЧ(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуПродажиВСтрокеТЧ(							ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуПродажиНДСВСтрокеТЧ(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ОчиститьСуммуВознагражденияВСтрокеТЧ(                   	ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.УстановитьАктивностьСтроки(                             	ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	////++ НЕ УТ
	//ОбработкаТабличнойЧастиКлиентСервер.ПроверитьЗаполнитьСпецификацию(                             ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//ПроверитьЗаполнитьДолюСтоимости(                                                                ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьДолюСтоимостиВСтрокеТЧ(                          ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьТипМестаХраненияПоУмолчанию(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//-- НЕ УТ
	//ПроверитьПолучитьВариантКомплектации(                   										ТекущаяСтрока, СтруктураДействий);
	//ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьФлагиРасхождениеИИзлишекПорча(                 	ТекущаяСтрока, СтруктураДействий);
	//ОбработкаТабличнойЧастиКлиентСервер.ОчиститьСуммуВзаиморасчетовВСтрокеТЧ(                   	ТекущаяСтрока, СтруктураДействий);
	//ОбработкаТабличнойЧастиКлиентСервер.ОчиститьАвтоматическуюСкидкуВСтрокеТЧ(                  	ТекущаяСтрока, СтруктураДействий);
	//ЗаполнитьСодержаниеУслуги(                              										ТекущаяСтрока, СтруктураДействий);
	//ЗаполнитьСтатьюАналитикуРасходовНоменклатуры(            										ТекущаяСтрока, СтруктураДействий);
	//ОчиститьСтатьюАналитикуРасходов(            													ТекущаяСтрока, СтруктураДействий);
	//ИнициализироватьСтатьюИАналитикуПослеДобавленияСтроки(                                          ТекущаяСтрока, СтруктураДействий);
	//ЗаполнитьНастройкуСчетовУчетаПоУмолчанию(                                                       ТекущаяСтрока, СтруктураДействий);
	//ЗаполнитьПредставлениеНастройкиСчетовУчета(                                                     ТекущаяСтрока, СтруктураДействий);
	//ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПартнера(                                      	ТекущаяСтрока, СтруктураДействий);
	//ЗаполнитьПомещение(                                     										ТекущаяСтрока, СтруктураДействий);
	//ЗаполнитьПродавца(                                      										ТекущаяСтрока, СтруктураДействий);
	//ЗаполнитьУчетноеКоличествоНоменклатуры(                 										ТекущаяСтрока, СтруктураДействий);
	//ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно(										ТекущаяСтрока, СтруктураДействий);
	//ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакБезВозвратнойТары(	                     	ТекущаяСтрока, СтруктураДействий);
	//ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакОтмененоБезВозвратнойТары(              	ТекущаяСтрока, СтруктураДействий);
	//ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакАктивностьБезВозвратнойТары(            	ТекущаяСтрока, СтруктураДействий);
	//ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьДубликатыЗависимыхРеквизитов(                  	ТекущаяСтрока, СтруктураДействий);
	//ПроверитьСериюРассчитатьСтатус(                         										ТекущаяСтрока, СтруктураДействий);
	//ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСверхЗаказаВСтрокеТЧ(                   	ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//УстановитьПризнакДляЗаполненияТекстовогоОписания(       										ТекущаяСтрока, СтруктураДействий);
	//ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьВариантОтраженияКорректировкиРеализации(       	ТекущаяСтрока, СтруктураДействий);
	//ОбработкаТабличнойЧастиКлиентСервер.НоменклатураПриИзмененииПереопределяемый(               	ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//ОбработкаТабличнойЧастиКлиентСервер.ХарактеристикаПриИзмененииПереопределяемый(             	ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//ЗаполнитьПризнакПринимаетсяКНУ(           														ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//ЗаполнитьПризнакАдресногоХранения(                     											ТекущаяСтрока, СтруктураДействий);
	//ЗаполнитьПризнакИспользованияПомещений(															ТекущаяСтрока, СтруктураДействий);
	//ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьРасхожденияПослеОтгрузки(                          ТекущаяСтрока, СтруктураДействий);
	//ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьРасхожденияПослеПриемки(                           ТекущаяСтрока, СтруктураДействий);
	//ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьРасхождения(                                       ТекущаяСтрока, СтруктураДействий);
	//ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакНаличияКомментарияПриемка(                  ТекущаяСтрока, СтруктураДействий);
	//ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакНаличияКомментарияОтгрузка(                 ТекущаяСтрока, СтруктураДействий);
	//ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакНаличияКомментария(							ТекущаяСтрока, СтруктураДействий);
	//ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакТоварногоМестаТребуетсяОбработка(			ТекущаяСтрока, СтруктураДействий);
	//ЗаполнитьПризнакДвиженияПоСкладскимРегистрам(ТекущаяСтрока, СтруктураДействий);	
//	ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения(ТекущаяСтрока, СтруктураДействий);
//	ПриИзмененииТипаНоменклатуры(ТекущаяСтрока, СтруктураДействий);
//	ЗаполнитьСлужебныеРеквизитыПоНазначениюВСтрокеТЧ(           									ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
//	ОбработкаТабличнойЧастиКлиентСервер.ПроверитьЗаполнитьНазначениеВСтрокеТЧ(                  	ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
//	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьФлагОбособленноПоНазначению(                       ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
//	//++ НЕ УТКА
//	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства(           ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
//	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьНазначениеВЭтапеПроизводства(                      ТекущаяСтрока, СтруктураДействий);
//	//-- НЕ УТКА
//	ОбработкаТабличнойЧастиКлиентСервер.ПриИзмененииНазначенияВСтрокеТЧ(                            ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
//	ЗаполнитьСтрануПроисхожденияДляНомераГТД(                                                       ТекущаяСтрока, СтруктураДействий);
//	ЗаполнитьСтрануПроисхожденияНоменклатуры(                                                       ТекущаяСтрока, СтруктураДействий);
//	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСпособОпределенияСебестоимости(                    ТекущаяСтрока, СтруктураДействий);
//	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСпособОпределенияСебестоимостиСтрокой(             ТекущаяСтрока, СтруктураДействий);
////++ НЕ УТКА
//	ОбработкаТабличнойЧастиКлиентСервер.ПроверитьЗаполнитьКлючСвязиСпецификации(                    ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
//	ЗаполнитьНазначениеМатериалыВСтрокеСверхЗаказа(                                                 ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
//	ЗаполнитьПризнакДоступноОформлениеОтчетаДавальцу(              									ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
////-- НЕ УТКА
//	ЗаполнитьНаправлениеДеятельности(																ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
//	ЗаполнитьПодразделениеВСтрокеТЧ(																ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
//	ПроверитьНеобходимостьОбновленияКолонкиДоступно(ТекущаяСтрока, СтруктураДействий);
//	ЗаполнитьКолонкуДоступно(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
//	ОбновитьКэшНоменклатура(ТекущаяСтрока, СтруктураДействий);
//	ЗаполнитьДанныеПоДокументуПриобретенияВОтчетеКомитентуОЗакупках(								ТекущаяСтрока, СтруктураДействий);
//	ЗаполнитьПризнакРасхождениеЗаказ(                                                               ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
//	
//	ЗаполнитьПризнакиКатегорииЭксплуатации(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
//	
//	//++ НЕ УТ
//	ЗаполнитьПартиюТМЦВЭксплуатации(ТекущаяСтрока, СтруктураДействий);
	//-- НЕ УТ
	
КонецПроцедуры

// При изменении статуса в документе "Расходный ордер", выполняется содание и запись (проведение) документа "РТиУ"
// Параметры:
//	Источник - ДокументСсылка.РасходныйОрдерНаТовары - Документ расходный ордер.
//  Отказ - Булево - Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то будет выполнен отказ от продолжения работы после выполнения проверки заполнения.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура гф_РасходныйОрдерУдалениеОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Для Каждого Строка Из Источник.ТоварыПоРаспоряжениям Цикл
		ЗаказКлиента = Строка.Распоряжение;
		Прервать
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслуг.Проведен КАК Проведен,
	|	РеализацияТоваровУслуг.ЗаказКлиента КАК ЗаказКлиента,
	|	РеализацияТоваровУслуг.гф_РасходныйОрдер КАК гф_РасходныйОрдер
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.гф_РасходныйОрдер = &гф_РасходныйОрдер";
	
	Запрос.УстановитьПараметр("гф_РасходныйОрдер", Источник.Ссылка);
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ДокументРеализация = Неопределено;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокументРеализация = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Если ДокументРеализация <> Неопределено Тогда
		ДокОбъект = ДокументРеализация.Получитьобъект();
		ДокОбъект.гф_РасходныйОрдер = Неопределено;
		ДокОбъект.ПометкаУдаления = Истина;
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
		
КонецПроцедуры

Процедура ПересчитатьЦенуСНДС(ТекущаяСтрока, СтруктураДействий)
	
	Перем СтруктураПараметровДействия;
	Перем СтавкаНДС;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСНДС", СтруктураПараметровДействия) Тогда
		
		Если СтруктураПараметровДействия = Неопределено
		 Или СтруктураПараметровДействия.Свойство("СтавкаНДС", СтавкаНДС) = Ложь Тогда
			СтавкаНДС = ТекущаяСтрока.СтавкаНДС;
		КонецЕсли;
		
		ПроцентНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтавкаНДС);
		ТекущаяСтрока.Цена = ТекущаяСтрока.Цена * (ПроцентНДС + 100)/100;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммуПродажиПоСуммеСНДС(ТекущаяСтрока, СтруктураДействий) 
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПродажиПоСуммеСНДС", СтруктураПараметровДействия) Тогда
	
		ТекущаяСтрока.СуммаПродажи = ТекущаяСтрока.СуммаСНДС;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьСуммуСУчетомПогрешностиОкругленияВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Погрешность = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомПогрешностиОкругления", Погрешность) Тогда
		
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Сумма + Погрешность;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммуНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДС", СтруктураПараметровДействия) Тогда
		
		НалогообложениеНДС = Неопределено;
		СтруктураПараметровДействия.Свойство("НалогообложениеНДС", НалогообложениеНДС);
		
		СтавкаНДС = Неопределено;
		Если НЕ (СтруктураПараметровДействия <> Неопределено И СтруктураПараметровДействия.Свойство("СтавкаНДС", СтавкаНДС)) Тогда
			СтавкаНДС = ТекущаяСтрока.СтавкаНДС;
		КонецЕсли;
		
		Если КэшированныеЗначения.Свойство("ПроцентыСтавокНДС") Тогда
			ТекПроцентНДС = КэшированныеЗначения.ПроцентыСтавокНДС[СтавкаНДС];
		Иначе
			КэшированныеЗначения.Вставить("ПроцентыСтавокНДС", Новый Соответствие);
			ТекПроцентНДС = Неопределено;
		КонецЕсли;
		
		Если ТекПроцентНДС = Неопределено Тогда
			
			ТекПроцентНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтавкаНДС);
			КэшированныеЗначения.ПроцентыСтавокНДС.Вставить(СтавкаНДС, ТекПроцентНДС);
			
		КонецЕсли;
		
		ТекущаяСтрока.СуммаНДС = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(ТекущаяСтрока.Сумма,
																		ТекПроцентНДС,
																		СтруктураПараметровДействия.ЦенаВключаетНДС,
																		НалогообложениеНДС);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммуНДССуффиксВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем СтруктураПараметровДействия;
	Перем СтавкаНДС;
		
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДССуффикс", СтруктураПараметровДействия) Тогда
	
		НалогообложениеНДС = Неопределено;
		СтруктураПараметровДействия.Свойство("НалогообложениеНДС", НалогообложениеНДС);
		
		Если Не (СтруктураПараметровДействия <> Неопределено
				И СтруктураПараметровДействия.Свойство("СтавкаНДС", СтавкаНДС)) Тогда
			
			СтавкаНДС = ТекущаяСтрока.СтавкаНДС;
			
		КонецЕсли;
		
		Если КэшированныеЗначения.Свойство("ПроцентыСтавокНДС") Тогда
			ТекПроцентНДС = КэшированныеЗначения.ПроцентыСтавокНДС[СтавкаНДС];
		Иначе
			ТекПроцентНДС = Неопределено;
			
			КэшированныеЗначения.Вставить("ПроцентыСтавокНДС", Новый Соответствие);
		КонецЕсли;
		
		Если ТекПроцентНДС = Неопределено Тогда
			
			ТекПроцентНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтавкаНДС);
			КэшированныеЗначения.ПроцентыСтавокНДС.Вставить(СтавкаНДС, ТекПроцентНДС);
			
		КонецЕсли;
		
		Суффикс = "";
		
		Если СтруктураПараметровДействия.Свойство("Суффикс", Суффикс)
			И Не ЗначениеЗаполнено(Суффикс) Тогда
			Суффикс = "";
		КонецЕсли;
		
		СуммаССуффиксом = ОбработкаТабличнойЧастиКлиентСервер.СуммаССуффиксом(Суффикс);
		
		ТекущаяСтрока[СуммаССуффиксом.СуммаНДС] = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(
			ТекущаяСтрока[СуммаССуффиксом.Сумма],
			ТекПроцентНДС,
			СтруктураПараметровДействия.ЦенаВключаетНДС,
			НалогообложениеНДС);
		
	КонецЕсли;

КонецПроцедуры

Процедура ОтправитьПисьмо(ДокОбъект, ТекстПисьма, ПроведениеДокумента)
	
	УчетнаяЗаписьПочты	= Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	ПрофильПочты		= РаботаСПочтовымиСообщениямиСлужебный.ИнтернетПочтовыйПрофиль(УчетнаяЗаписьПочты);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаКонтактнойИнформации.АдресЭП КАК АдресЭП
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ТаблицаКонтактнойИнформации
	|ГДЕ
	|	ТаблицаКонтактнойИнформации.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Пользователи.ТекущийПользователь());
	
	ВыборкаДанные = Запрос.Выполнить().Выгрузить();
	
	Если ВыборкаДанные.Количество() > 0 Тогда
		EmailПользователя = Строка(ВыборкаДанные[0].АдресЭП);
	Иначе
		ТекстСообщения = НСтр("ru = 'У пользователя не заполнен почтовый адрес, невозможно отправить сообщение об изменении статуса.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СообщениеПочты = Новый ИнтернетПочтовоеСообщение;
	СообщениеПочты.Кодировка = "utf-8";
	СообщениеПочты.Тема = "Создан ЧЕРНОВИК «Планируемая отгрузка».";
	СообщениеПочты.Отправитель = Строка(УчетнаяЗаписьПочты.АдресЭлектроннойПочты);
	СообщениеПочты.ИмяОтправителя = "Рассылка 1С";
	СообщениеПочты.Получатели.Добавить(EmailПользователя);
	
	ТекстСообщения = 
	"<style>
	| body {font-family: Verdana, sans-serif;}
	|</style>
	|<h5 style=""padding: 0 0 15px 0; margin: 0 0 0 0;"">Добрый день!</h5>
	|<h5 style=""padding: 0 0 15px 0; margin: 0 0 0 0;"">%Содержимое%</h5>";
	
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Содержимое%", ТекстПисьма);
	
	ТекстСообщенияПочты = СообщениеПочты.Тексты.Добавить(ТекстСообщения, ТипТекстаПочтовогоСообщения.HTML);
	
	Если Не ПроведениеДокумента Тогда
		
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(ДокОбъект.Ссылка);
		
		ОбъектыПечати = Новый СписокЗначений;
		
		СоздатьПечатнуюФорму(МассивОбъектов, ТекстПисьма, СообщениеПочты, ОбъектыПечати, "РасходнаяНакладная", "ЧЕРНОВИК Расходная накладная ", "РасходнаяНакладная");
		
		СоздатьПечатнуюФорму(МассивОбъектов, ТекстПисьма, СообщениеПочты, ОбъектыПечати, "УПД", "ЧЕРНОВИК УПД ", "УПД");
		
		СоздатьПечатнуюФорму(МассивОбъектов, ТекстПисьма, СообщениеПочты, ОбъектыПечати, "СписокКМ", "ЧЕРНОВИК Список КМ ", "СписокКМ");
		
	КонецЕсли;
	
	ИнтернетПочта = Новый ИнтернетПочта;
	
	Попытка
		ИнтернетПочта.Подключиться(ПрофильПочты);
		ИнтернетПочта.Послать(СообщениеПочты);
		ИнтернетПочта.Отключиться();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура СоздатьПечатнуюФорму(МассивОбъектов, ТекстПисьма, СообщениеПочты, ОбъектыПечати, Представление, ЧастьИмениФайла, ИмяМетода)
	
	Таб = Новый ТабличныйДокумент;
	
	Попытка
		
		Если ИмяМетода = "РасходнаяНакладная" Тогда
			Таб = СформироватьПечатнуюФормуРасходнаяНакладная(МассивОбъектов, ОбъектыПечати);
		ИначеЕсли ИмяМетода = "УПД" Тогда
			
			СтруктураТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивОбъектов);
			ПараметрыПечати = Новый Структура; 
			ПараметрыПечати.Вставить("ДополнитьКомплектВнешнимиПечатнымиФормами", Ложь);
			
			Таб = Обработки.ПечатьОбщихФорм.СформироватьПечатнуюФормуУПД(СтруктураТипов, ОбъектыПечати, ПараметрыПечати);
		ИначеЕсли ИмяМетода = "СписокКМ" Тогда
			Таб = СформироватьПечатнуюФормуСписокКМ(МассивОбъектов, ОбъектыПечати);
		КонецЕсли;
		
	Исключение
		
        ТекстПисьма = ТекстПисьма + "Ошибка при создании отчета! " + ОписаниеОшибки() + Символы.ПС;
        
	КонецПопытки;
	
    ПутьКФайлу = КаталогВременныхФайлов(); 
	ИмяФайла = ЧастьИмениФайла + Лев(Строка(ТекущаяДата()), 10) + ".xls";
	ПолноеИмяФайла = ПутьКФайлу+ИмяФайла;
	
	ВыгрузитьТДвФайл(Таб, ПолноеИмяФайла, ТекстПисьма);
	
	Попытка
		СообщениеПочты.Вложения.Добавить(ПолноеИмяФайла, Представление);
	Исключение
		ТекстПисьма = ТекстПисьма + "Не удалось добавить вложение! " + ОписаниеОшибки() + Символы.ПС;
	КонецПопытки;		
	
КонецПроцедуры

//Функция СоздатьПечатнуюФормуРасходнаяНакладная(МассивОбъектов, ТекстПисьма, ОбъектыПечати, ИмяМетода)
//	
//	Таб = Новый ТабличныйДокумент;
//	
//	Попытка
//		
//		Если ИмяМетода = "РасходнаяНакладная" Тогда
//			Таб = СформироватьПечатнуюФормуРасходнаяНакладная(МассивОбъектов, ОбъектыПечати);
//		ИначеЕсли ИмяМетода = "УПД" Тогда
//			
//			СтруктураТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивОбъектов);
//			ПараметрыПечати = Новый Структура; 
//			ПараметрыПечати.Вставить("ДополнитьКомплектВнешнимиПечатнымиФормами", Ложь);
//			
//			Таб = Обработки.ПечатьОбщихФорм.СформироватьПечатнуюФормуУПД(СтруктураТипов, ОбъектыПечати, ПараметрыПечати);
//		ИначеЕсли ИмяМетода = "СписокКМ" Тогда
//			Таб = СформироватьПечатнуюФормуСписокКМ(МассивОбъектов, ОбъектыПечати);
//		КонецЕсли;
//		
//		
//		//Таб = СформироватьПечатнуюФормуРасходнаяНакладная(МассивОбъектов, ОбъектыПечати);
//		Возврат Таб;
//        
//	Исключение
//		
//        ТекстПисьма = ТекстПисьма + "Ошибка при создании отчета! " + ОписаниеОшибки() + Символы.ПС;
//        Возврат Таб;
//		
//	КонецПопытки;	
//	
//КонецФункции

//Функция СоздатьПечатнуюФормуСписокКМ(МассивОбъектов, ТекстПисьма, ОбъектыПечати)
//	
//	Таб = Новый ТабличныйДокумент;
//	
//	СтруктураТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивОбъектов);
//	
//	Попытка
//		
//		Таб = Обработки.ПечатьОбщихФорм.СформироватьПечатнуюФормуСписокКМ(СтруктураТипов, МассивОбъектов, ОбъектыПечати);
//		Возврат Таб;
//        
//	Исключение
//		
//        ТекстПисьма = ТекстПисьма + "Ошибка при создании отчета! " + ОписаниеОшибки() + Символы.ПС;
//        Возврат Таб;
//		
//	КонецПопытки;
//	
//КонецФункции

Процедура ВыгрузитьТДвФайл(Таб, ПолноеИмяФайла, ТекстПисьма)
	
	Попытка
        Таб.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.XLS);
        
    Исключение
        ТекстПисьма = ТекстПисьма + "Не удалось создать файл! " + ОписаниеОшибки() + Символы.ПС;
	КонецПопытки;
	
КонецПроцедуры

Функция СформироватьПечатнуюФормуРасходнаяНакладная(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_РасходнаяНакладная";
	
	КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов();
	ИмяКолонкиКодов = КолонкаКодов.ИмяКолонки;
	ПредставлениеКолонкиКодов = КолонкаКодов.ПредставлениеКолонки;
	ВыводитьКоды = ЗначениеЗаполнено(ИмяКолонкиКодов);
	
	ИспользоватьРучныеСкидки         = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	ИспользоватьУпаковки             = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
	ЗапросПоСкладам = Новый Запрос;
	ЗапросПоСкладам.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслугТовары.Склад КАК Склад,
	|	ЕСТЬNULL(РеализацияТоваровУслугТовары.Склад.ИспользоватьСерииНоменклатуры, ЛОЖЬ) КАК ИспользоватьСерииНоменклатуры
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка В(&МассивОбъектов)
	|	И РеализацияТоваровУслугТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|
	|ИТОГИ ПО
	|	Ссылка,
	|	ИспользоватьСерииНоменклатуры";
	
	ЗапросПоСкладам.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	// Создание массива для проверки: какие из докуметов не попали в выборку
	МассивПроверки = Новый Массив;
	Для Каждого Ссылка Из МассивОбъектов Цикл
		МассивПроверки.Добавить(Ссылка);
	КонецЦикла;
	
	ДеревоОбъектов = ЗапросПоСкладам.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для Каждого СтрокаДокумента Из ДеревоОбъектов.Строки Цикл
		
		НомерСтрокиНачало = Неопределено;
		
		Для Каждого ИспользованиеСерий Из СтрокаДокумента.Строки Цикл
			
			ЗапросПоТоварам = Новый Запрос;
			ЗапросПоТоварам.УстановитьПараметр("МассивОбъектов", СтрокаДокумента.Ссылка);
			ЗапросПоТоварам.УстановитьПараметр("МассивСкладов",  ИспользованиеСерий.Строки.ВыгрузитьКолонку("Склад"));
			
			Если ИспользованиеСерий.ИспользоватьСерииНоменклатуры Тогда
				
				ТекстЗапросаПоТоварам = 
				"ВЫБРАТЬ
				|	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
				|	РеализацияТоваровУслугТовары.Склад КАК Склад,
				|	РеализацияТоваровУслугТовары.КоличествоУпаковок КАК КоличествоУпаковок,
				|	РеализацияТоваровУслугТовары.Количество КАК Количество,
				|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
				|	РеализацияТоваровУслугТовары.Характеристика КАК Характеристика,
				|	РеализацияТоваровУслугТовары.Упаковка КАК Упаковка,
				|	"""" КАК Серия
				|ПОМЕСТИТЬ ТаблицаТоваров
				|ИЗ
				|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
				|ГДЕ
				|	РеализацияТоваровУслугТовары.Ссылка В(&МассивОбъектов)
				|	И РеализацияТоваровУслугТовары.Склад В(&МассивСкладов)
				|	И НЕ(РеализацияТоваровУслугТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
				|				И РеализацияТоваровУслугТовары.СтатусУказанияСерий В (2, 4, 6, 8))
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	РеализацияТоваровУслугСерии.Ссылка,
				|	РеализацияТоваровУслугСерии.Склад,
				|	РеализацияТоваровУслугСерии.Количество,
				|	РеализацияТоваровУслугСерии.Количество,
				|	РеализацияТоваровУслугСерии.Номенклатура,
				|	РеализацияТоваровУслугСерии.Характеристика,
				|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка),
				|	РеализацияТоваровУслугСерии.Серия
				|ИЗ
				|	Документ.РеализацияТоваровУслуг.Серии КАК РеализацияТоваровУслугСерии
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаТовары
				|		ПО РеализацияТоваровУслугСерии.Ссылка = ТаблицаТовары.Ссылка
				|			И РеализацияТоваровУслугСерии.Номенклатура = ТаблицаТовары.Номенклатура
				|			И РеализацияТоваровУслугСерии.Характеристика = ТаблицаТовары.Характеристика
				|			И РеализацияТоваровУслугСерии.Склад = ТаблицаТовары.Склад
				|ГДЕ
				|	РеализацияТоваровУслугСерии.Ссылка В(&МассивОбъектов)
				|	И РеализацияТоваровУслугСерии.Склад В(&МассивСкладов)
				|	И РеализацияТоваровУслугСерии.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
				|
				|СГРУППИРОВАТЬ ПО
				|	РеализацияТоваровУслугСерии.Ссылка,
				|	РеализацияТоваровУслугСерии.Склад,
				|	РеализацияТоваровУслугСерии.Номенклатура,
				|	РеализацияТоваровУслугСерии.Характеристика,
				|	РеализацияТоваровУслугСерии.Серия,
				|	РеализацияТоваровУслугСерии.Количество,
				|	РеализацияТоваровУслугСерии.Количество
				|
				|ИМЕЮЩИЕ
				|	МАКСИМУМ(ТаблицаТовары.СтатусУказанияСерий) В (2, 4, 6, 8, 10)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ТаблицаТоваров.Ссылка,
				|	ТаблицаТоваров.Склад,
				|	СУММА(ТаблицаТоваров.КоличествоУпаковок) КАК КоличествоУпаковок,
				|	СУММА(ТаблицаТоваров.Количество) КАК Количество,
				|	ТаблицаТоваров.Номенклатура,
				|	ТаблицаТоваров.Характеристика,
				|	ТаблицаТоваров.Упаковка,
				|	ВЫБОР
				|		КОГДА ТаблицаТоваров.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
				|			ТОГДА NULL
				|		ИНАЧЕ ТаблицаТоваров.Серия
				|	КОНЕЦ КАК Серия
				|ПОМЕСТИТЬ СуммированнаяТаблицаТоваров
				|ИЗ
				|	ТаблицаТоваров КАК ТаблицаТоваров
				|
				|СГРУППИРОВАТЬ ПО
				|	ТаблицаТоваров.Ссылка,
				|	ТаблицаТоваров.Склад,
				|	ТаблицаТоваров.Номенклатура,
				|	ТаблицаТоваров.Характеристика,
				|	ТаблицаТоваров.Упаковка,
				|	ВЫБОР
				|		КОГДА ТаблицаТоваров.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
				|			ТОГДА NULL
				|		ИНАЧЕ ТаблицаТоваров.Серия
				|	КОНЕЦ
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ТаблицаТоваров.Ссылка КАК Ссылка,
				|	ТаблицаТоваров.Ссылка.Организация КАК Организация,
				|	ТаблицаТоваров.Ссылка.Контрагент КАК Контрагент,
				|	ТаблицаТоваров.Ссылка.Номер КАК Номер,
				|	ТаблицаТоваров.Ссылка.Дата КАК Дата,
				|	ТаблицаТоваров.Ссылка.Организация.Префикс КАК Префикс,
				|	ТаблицаТоваров.Склад КАК Склад,
				|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ПредставлениеЕдининицыИзмеренияУпаковки,
				|	ПРЕДСТАВЛЕНИЕ(ТаблицаТоваров.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
				|	ТаблицаТоваров.КоличествоУпаковок КАК КоличествоУпаковок,
				|	ТаблицаТоваров.Количество КАК Количество,
				|	ТаблицаТоваров.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий КАК НастройкаИспользованияСерий,
				|	ТаблицаТоваров.Номенклатура.Код КАК Код,
				|	ТаблицаТоваров.Номенклатура.Артикул КАК Артикул,
				|	ТаблицаТоваров.Номенклатура.НаименованиеПолное КАК ПредставлениеНоменклатуры,
				|	ТаблицаТоваров.Характеристика.НаименованиеПолное КАК ПредставлениеХарактеристики,
				|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
				|	ТаблицаТоваров.Характеристика КАК Характеристика,
				|	ВЫБОР
				|		КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) = 1
				|			ТОГДА НЕОПРЕДЕЛЕНО
				|		ИНАЧЕ ТаблицаТоваров.Упаковка.Наименование
				|	КОНЕЦ КАК Упаковка,
				|	ТаблицаТоваров.Серия.Наименование КАК ПредставлениеСерии,
				|	ВЫБОР
				|		КОГДА ТаблицаТоваров.Ссылка.ВернутьМногооборотнуюТару
				|				И ТаблицаТоваров.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК ЭтоВозвратнаяТара
				|ИЗ
				|	СуммированнаяТаблицаТоваров КАК ТаблицаТоваров
				|
				|ИТОГИ ПО
				|	Ссылка,
				|	Склад,
				|	Номенклатура,
				|	Характеристика
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ТаблицаТоваров.Ссылка КАК Ссылка,
				|	ТаблицаТоваров.Склад КАК Склад,
				|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
				|	ТаблицаТоваров.Характеристика КАК Характеристика,
				|	ТаблицаТоваров.Серия.Наименование КАК ПредставлениеСерии
				|ИЗ
				|	ТаблицаТоваров КАК ТаблицаТоваров
				|ГДЕ
				|	ТаблицаТоваров.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
				|	И НЕ ТаблицаТоваров.Серия ЕСТЬ NULL 
				|";
				
				ТекстЗапросаПоТоварам = СтрЗаменить(ТекстЗапросаПоТоварам, "&ТекстЗапросаКоэффициентУпаковки",
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
						"ТаблицаТоваров.Упаковка",
						"ТаблицаТоваров.Номенклатура"));
						
				ТекстЗапросаПоТоварам = СтрЗаменить(ТекстЗапросаПоТоварам, "&ТекстЗапросаНаименованиеЕдиницыИзмерения",
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
						"Наименование",
						"ТаблицаТоваров.Упаковка",
						"ТаблицаТоваров.Номенклатура"));
				
				ЗапросПоТоварам.Текст	 = ТекстЗапросаПоТоварам;
				МассивРезультатов		 = ЗапросПоТоварам.ВыполнитьПакет();
				
				РезультатДанныеПечати		= МассивРезультатов[2]; // РезультатЗапроса
				РезультатВыборкаПоСериям	= МассивРезультатов[3]; // РезультатЗапроса
				
				ДанныеПечати				= РезультатДанныеПечати.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				ВыборкаПоСериям 			= РезультатВыборкаПоСериям.Выбрать();
				
			Иначе
				
				ТекстЗапросаПоТоварам = 
				"ВЫБРАТЬ
				|	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
				|	РеализацияТоваровУслугТовары.Ссылка.Организация КАК Организация,
				|	РеализацияТоваровУслугТовары.Ссылка.Контрагент КАК Контрагент,
				|	РеализацияТоваровУслугТовары.Ссылка.Номер КАК Номер,
				|	РеализацияТоваровУслугТовары.Ссылка.Дата КАК Дата,
				|	РеализацияТоваровУслугТовары.Ссылка.Организация.Префикс КАК Префикс,
				|	РеализацияТоваровУслугТовары.Склад КАК Склад,
				|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ПредставлениеЕдининицыИзмеренияУпаковки,
				|	ПРЕДСТАВЛЕНИЕ(РеализацияТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
				|	РеализацияТоваровУслугТовары.КоличествоУпаковок КАК КоличествоУпаковок,
				|	РеализацияТоваровУслугТовары.Количество КАК Количество,
				|	РеализацияТоваровУслугТовары.Номенклатура.Код КАК Код,
				|	РеализацияТоваровУслугТовары.Номенклатура.Артикул КАК Артикул,
				|	РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное КАК ПредставлениеНоменклатуры,
				|	РеализацияТоваровУслугТовары.Характеристика.НаименованиеПолное КАК ПредставлениеХарактеристики,
				|	"""" КАК ПредставлениеСерии,
				|	ВЫБОР
				|		КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) = 1
				|			ТОГДА НЕОПРЕДЕЛЕНО
				|		ИНАЧЕ РеализацияТоваровУслугТовары.Упаковка.Наименование
				|	КОНЕЦ КАК Упаковка,
				|	ВЫБОР
				|		КОГДА РеализацияТоваровУслугТовары.Ссылка.ВернутьМногооборотнуюТару
				|				И РеализацияТоваровУслугТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК ЭтоВозвратнаяТара,
				|	NULL КАК НастройкаИспользованияСерий,
				|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
				|	РеализацияТоваровУслугТовары.Характеристика КАК Характеристика
				|ИЗ
				|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
				|ГДЕ
				|	РеализацияТоваровУслугТовары.Ссылка В(&МассивОбъектов)
				|	И РеализацияТоваровУслугТовары.Склад В(&МассивСкладов)
				|	И РеализацияТоваровУслугТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
				|
				|ИТОГИ ПО
				|	Ссылка,
				|	Склад,
				|	Номенклатура,
				|	Характеристика";
				
				ТекстЗапросаПоТоварам = СтрЗаменить(ТекстЗапросаПоТоварам, "&ТекстЗапросаКоэффициентУпаковки",
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
						"РеализацияТоваровУслугТовары.Упаковка",
						"РеализацияТоваровУслугТовары.Номенклатура"));
						
				ТекстЗапросаПоТоварам = СтрЗаменить(ТекстЗапросаПоТоварам, "&ТекстЗапросаНаименованиеЕдиницыИзмерения",
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
						"Наименование",
						"РеализацияТоваровУслугТовары.Упаковка",
						"РеализацияТоваровУслугТовары.Номенклатура"));
				
				ЗапросПоТоварам.Текст = ТекстЗапросаПоТоварам;
				ДанныеПечати = ЗапросПоТоварам.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
			КонецЕсли;
			
			ПервыйДокумент = Истина;
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РеализацияТоваровУслуг.ПФ_MXL_РасходнаяНакладная");
			
			ШиринаОтсутствующихОбластей = 0;
			Если НЕ ВыводитьКоды Тогда
				ШиринаОтсутствующихОбластей = Макет.Область("КолонкаКодов").ШиринаКолонки;
			КонецЕсли;
			
			Если Не ИспользоватьУпаковки Тогда
				
				ШиринаОтсутствующихОбластей = ШиринаОтсутствующихОбластей + Макет.Область("КолонкаКоличестваУпаковок").ШиринаКолонки;
				ШиринаОтсутствующихОбластей = ШиринаОтсутствующихОбластей + Макет.Область("КолонкаПредставленияУпаковок").ШиринаКолонки;
				
			КонецЕсли;
			
			// Раздвинуть колонку "КолонкаТоваров" на ширину отсутствующих областей
			Макет.Область("КолонкаТоваров").ШиринаКолонки = Макет.Область("КолонкаТоваров").ШиринаКолонки + ШиринаОтсутствующихОбластей;
			
			РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс, Представление");
	
			Пока ДанныеПечати.Следующий() Цикл
				
				ИндексМассиваПроверки = МассивПроверки.Найти(ДанныеПечати.Ссылка);
				Если ИндексМассиваПроверки <> Неопределено Тогда
					МассивПроверки.Удалить(ИндексМассиваПроверки);
				КонецЕсли;
				
				Если НомерСтрокиНачало = Неопределено Тогда
					НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ДанныеПечати);
				
				ВыборкаПоСкладам = ДанныеПечати.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоСкладам.Следующий() Цикл
					
					Если Не ПервыйДокумент Тогда
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					
					ПервыйДокумент = Ложь;
					
					Область = Макет.ПолучитьОбласть("Заголовок");
					СтруктураДанныхЗаголовок = Новый Структура;
					СтруктураДанныхЗаголовок.Вставить("ТекстЗаголовка", НСтр("ru = 'Расходная накладная';
																			|en = 'Sales invoice'", ОбщегоНазначения.КодОсновногоЯзыка()));
					ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, Область, ДанныеПечати.Ссылка);
					Область.Параметры.Заполнить(СтруктураДанныхЗаголовок);
					ТабличныйДокумент.Вывести(Область);
					
					Область = Макет.ПолучитьОбласть("Шапка");
					СтруктураДанныхШапка = Новый Структура;
					СтруктураДанныхШапка.Вставить("ПредставлениеРаспоряжения", ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(
						РеквизитыДокумента, НСтр("ru = 'Реализация товаров';
												|en = 'Goods sales'", ОбщегоНазначения.КодОсновногоЯзыка())));
					СтруктураДанныхШапка.Вставить("ПредставлениеСклада", ВыборкаПоСкладам.Склад);
					СтруктураДанныхШапка.Вставить("Склад", ВыборкаПоСкладам.Склад);
					Область.Параметры.Заполнить(СтруктураДанныхШапка);
					ТабличныйДокумент.Вывести(Область);
					
					Область = Макет.ПолучитьОбласть("Поставщик");
					СтруктураДанныхПоставщик = Новый Структура;
					СтруктураДанныхПоставщик.Вставить("ПредставлениеОрганизации", 
						ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ВыборкаПоСкладам.Организация, ВыборкаПоСкладам.Дата), 
							"ПолноеНаименование"));
					СтруктураДанныхПоставщик.Вставить("Организация", ВыборкаПоСкладам.Организация);
					Область.Параметры.Заполнить(СтруктураДанныхПоставщик);
					ТабличныйДокумент.Вывести(Область);
					
					Область = Макет.ПолучитьОбласть("Покупатель");
					СтруктураДанныхПокупатель = Новый Структура;
					СтруктураДанныхПоставщик.Вставить("ПредставлениеПартнера", 
						ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ВыборкаПоСкладам.Контрагент, ВыборкаПоСкладам.Дата),
							"ПолноеНаименование"));
					СтруктураДанныхПоставщик.Вставить("Контрагент", ВыборкаПоСкладам.Контрагент);
					Область.Параметры.Заполнить(СтруктураДанныхПоставщик);
					ТабличныйДокумент.Вывести(Область);
					
					Область = Макет.ПолучитьОбласть("ШапкаТаблицы|НачалоСтроки");
					ТабличныйДокумент.Вывести(Область);
					Если ВыводитьКоды Тогда
						Область = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
						СтруктураДанныхКоды = Новый Структура("ИмяКолонкиКодов", ПредставлениеКолонкиКодов);
						Область.Параметры.Заполнить(СтруктураДанныхКоды);
						ТабличныйДокумент.Присоединить(Область);
					КонецЕсли;
					Область = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаТоваров");
					ТабличныйДокумент.Присоединить(Область);
					Если ИспользоватьУпаковки Тогда
						Область = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкиУпаковок");
						ТабличныйДокумент.Присоединить(Область);
					КонецЕсли;
					Область = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкиКоличества");
					ТабличныйДокумент.Присоединить(Область);
					
					ОбластьНачалоСтроки		 = Макет.ПолучитьОбласть("СтрокаТаблицы|НачалоСтроки");
					ОбластьКолонкаКодов		 = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
					ОбластьКолонкаТоваров	 = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаТоваров");
					ОбластьКолонкаУпаковок	 = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкиУпаковок");
					ОбластьКолонкаКоличества = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкиКоличества");
	
					СчетСтрок = 1;				
	
					ВыборкаПоСсылкамТЧ = ВыборкаПоСкладам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
					Пока ВыборкаПоСсылкамТЧ.Следующий() Цикл
	
						ВыборкаПоНоменклатуреТЧ = ВыборкаПоСсылкамТЧ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
						Пока ВыборкаПоНоменклатуреТЧ.Следующий() Цикл
	
							ВыборкаПоСтрокамТЧ = ВыборкаПоНоменклатуреТЧ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
							
							ПерваяСтрока = Истина;
							СтрокаУпаковок = "";
							СтрокаКоличесткаУпаковок = "";
							СтрокаЕдиницИзмерений = "";
							СтрокаКоличества = "";
							
							Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
								
								Если ВыборкаПоСтрокамТЧ.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара Тогда
									
									Если ПерваяСтрока Тогда
										
										СтруктураДанныхНомерСтроки = Новый Структура("НомерСтроки", СчетСтрок);
										ОбластьНачалоСтроки.Параметры.Заполнить(СтруктураДанныхНомерСтроки);
										СчетСтрок = СчетСтрок + 1;
										ТабличныйДокумент.Вывести(ОбластьНачалоСтроки);
										Если ВыводитьКоды Тогда
											СтруктураДанныхКоды = Новый Структура("ЗначениеКода", ВыборкаПоСтрокамТЧ[ИмяКолонкиКодов]);
											ОбластьКолонкаКодов.Параметры.Заполнить(СтруктураДанныхКоды);
											ТабличныйДокумент.Присоединить(ОбластьКолонкаКодов);
										КонецЕсли;
										
										СтруктураПоиска = Новый Структура;
										СтруктураПоиска.Вставить("Ссылка", ВыборкаПоСтрокамТЧ.Ссылка);
										СтруктураПоиска.Вставить("Склад", ВыборкаПоСтрокамТЧ.Склад);
										СтруктураПоиска.Вставить("Номенклатура", ВыборкаПоСтрокамТЧ.Номенклатура);
										СтруктураПоиска.Вставить("Характеристика", ВыборкаПоСтрокамТЧ.Характеристика);
										
										СтрокаСерий = "";
										Пока ВыборкаПоСериям.НайтиСледующий(СтруктураПоиска) Цикл
											СтрокаСерий = СтрокаСерий + ВыборкаПоСериям.ПредставлениеСерии + ", ";
										КонецЦикла;
										
										Если СтрДлина(СтрокаСерий) <> 0 Тогда
											СтрокаСерий = Лев(СтрокаСерий, СтрДлина(СтрокаСерий) - 2);
										КонецЕсли;
										
										ДополнительныеПараметрыПолученияНаименованияДляПечати = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
										ДополнительныеПараметрыПолученияНаименованияДляПечати.ВозвратнаяТара = ВыборкаПоСтрокамТЧ.ЭтоВозвратнаяТара;
										ДополнительныеПараметрыПолученияНаименованияДляПечати.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
										
										Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
											ВыборкаПоСтрокамТЧ.ПредставлениеНоменклатуры,
											ВыборкаПоСтрокамТЧ.ПредставлениеХарактеристики,
											,
											СтрокаСерий,
											ДополнительныеПараметрыПолученияНаименованияДляПечати);
										
										СтруктураДанныхТовар = Новый Структура("Товар", Товар);
										ОбластьКолонкаТоваров.Параметры.Заполнить(СтруктураДанныхТовар);
										
										ТабличныйДокумент.Присоединить(ОбластьКолонкаТоваров);
										
										ПерваяСтрока = Ложь;
										
									КонецЕсли;
									
									Если ИспользоватьУпаковки Тогда
										СтрокаУпаковок = СтрокаУпаковок + ВыборкаПоСтрокамТЧ.ПредставлениеЕдининицыИзмеренияУпаковки + Символы.ПС;
										СтрокаКоличесткаУпаковок = СтрокаКоличесткаУпаковок + ВыборкаПоСтрокамТЧ.КоличествоУпаковок + Символы.ПС;
									КонецЕсли;
									
									СтрокаЕдиницИзмерений = СтрокаЕдиницИзмерений + ВыборкаПоСтрокамТЧ.ПредставлениеБазовойЕдиницыИзмерения + Символы.ПС;
									СтрокаКоличества = СтрокаКоличества + ВыборкаПоСтрокамТЧ.Количество + Символы.ПС;
									
									ТоварССериейЭкземпляром = Истина;
																	
								Иначе			
									
									СтруктураДанныхНомерСтроки = Новый Структура("НомерСтроки", СчетСтрок);
									ОбластьНачалоСтроки.Параметры.Заполнить(СтруктураДанныхНомерСтроки);
									СчетСтрок = СчетСтрок + 1;
									ТабличныйДокумент.Вывести(ОбластьНачалоСтроки);
									
									Если ВыводитьКоды Тогда
										СтруктураДанныхКоды = Новый Структура("ЗначениеКода", ВыборкаПоСтрокамТЧ[ИмяКолонкиКодов]);
										ОбластьКолонкаКодов.Параметры.Заполнить(СтруктураДанныхКоды);
										ТабличныйДокумент.Присоединить(ОбластьКолонкаКодов);
									КонецЕсли;
									
									ДополнительныеПараметрыПолученияНаименованияДляПечати = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
									ДополнительныеПараметрыПолученияНаименованияДляПечати.ВозвратнаяТара = ВыборкаПоСтрокамТЧ.ЭтоВозвратнаяТара;
									ДополнительныеПараметрыПолученияНаименованияДляПечати.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
									
									Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
										ВыборкаПоСтрокамТЧ.ПредставлениеНоменклатуры,
										ВыборкаПоСтрокамТЧ.ПредставлениеХарактеристики,
										,
										ВыборкаПоСтрокамТЧ.ПредставлениеСерии,
										ДополнительныеПараметрыПолученияНаименованияДляПечати);
										
									СтруктураДанныхТовар = Новый Структура("Товар", Товар);
									ОбластьКолонкаТоваров.Параметры.Заполнить(СтруктураДанныхТовар);
									
									ТабличныйДокумент.Присоединить(ОбластьКолонкаТоваров);
									
									Если ИспользоватьУпаковки Тогда 									
										ОбластьКолонкаУпаковок.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
										ТабличныйДокумент.Присоединить(ОбластьКолонкаУпаковок);
									КонецЕсли;
									
									ОбластьКолонкаКоличества.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
									ТабличныйДокумент.Присоединить(ОбластьКолонкаКоличества);
									
									ТоварССериейЭкземпляром = Ложь;
												
								КонецЕсли;
								
							КонецЦикла;
							
							Если ТоварССериейЭкземпляром Тогда
								Если ИспользоватьУпаковки Тогда
									СтруктураДанныхКолонкаУпаковок = Новый Структура;
									СтруктураДанныхКолонкаУпаковок.Вставить("КоличествоУпаковок", СтрокаКоличесткаУпаковок);
									СтруктураДанныхКолонкаУпаковок.Вставить("ПредставлениеЕдининицыИзмеренияУпаковки", СтрокаУпаковок);
									ОбластьКолонкаУпаковок.Параметры.Заполнить(СтруктураДанныхКолонкаУпаковок);
									ТабличныйДокумент.Присоединить(ОбластьКолонкаУпаковок);
								КонецЕсли;
								
								СтруктураДанныхКолонкаКоличества = Новый Структура;
								СтруктураДанныхКолонкаКоличества.Вставить("Количество", СтрокаКоличества);
								СтруктураДанныхКолонкаКоличества.Вставить("ПредставлениеБазовойЕдиницыИзмерения", СтрокаЕдиницИзмерений);
								ОбластьКолонкаКоличества.Параметры.Заполнить(СтруктураДанныхКолонкаКоличества);
								ТабличныйДокумент.Присоединить(ОбластьКолонкаКоличества);
								
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЦикла;
					
					Область = Макет.ПолучитьОбласть("ПодвалТаблицы|НачалоСтроки");
					ТабличныйДокумент.Вывести(Область);
					Если ВыводитьКоды Тогда
						Область = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
						ТабличныйДокумент.Присоединить(Область);
					КонецЕсли;
					Область = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаТоваров");
					ТабличныйДокумент.Присоединить(Область);
					Если ИспользоватьУпаковки Тогда
						Область = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкиУпаковок");
						ТабличныйДокумент.Присоединить(Область);
					КонецЕсли;
					Область = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкиКоличества");
					ТабличныйДокумент.Присоединить(Область);
					
					Область = Макет.ПолучитьОбласть("Подписи");
					ТекстИтоговойСтроки = НСтр("ru = 'Всего наименований %ВсегоНаименований%';
												|en = 'Total items %ВсегоНаименований%'", ОбщегоНазначения.КодОсновногоЯзыка());
					ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%ВсегоНаименований%", СчетСтрок-1);
					СтруктураДанныхИтоговаяСтрока = Новый Структура;
					СтруктураДанныхЗаголовок.Вставить("ИтоговаяСтрока", ТекстИтоговойСтроки);
					Область.Параметры.Заполнить(СтруктураДанныхЗаголовок);
					ТабличныйДокумент.Вывести(Область);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если Не НомерСтрокиНачало = Неопределено Тогда
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, СтрокаДокумента.Ссылка);
		КонецЕсли;
	
	КонецЦикла;
	
	Для Каждого Ссылка Из МассивПроверки Цикл
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В документе %1 отсутствуют товары. Печать расходной накладной не требуется.';
				|en = 'Goods are missing in document %1. Printing of a sales invoice is not required.'"),
			Ссылка);
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			Ссылка);
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция СформироватьПечатнуюФормуСписокКМ(МассивОбъектов, ОбъектыПечати)
	
	ТабДок = Новый ТабличныйДокумент;
	
	МакетОбработки = Документы.РеализацияТоваровУслуг.ПолучитьМакет("гф_СписокКодовМаркировки");
	
	ОбластьШапки = МакетОбработки.ПолучитьОбласть("Шапка");
	ОбластьСтроки = МакетОбработки.ПолучитьОбласть("СтрокаТЧ");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслуг.Товары.(
	|		Характеристика КАК Характеристика
	|	) КАК Товары,
	|	РеализацияТоваровУслуг.гф_ТоварыВКоробах.(
	|		Ссылка КАК Ссылка,
	|		УпаковочныйЛист КАК УпаковочныйЛист,
	|		Артикул КАК Артикул
	|	) КАК гф_ТоварыВКоробах,
	|	РеализацияТоваровУслуг.Номер КАК Номер,
	|	РеализацияТоваровУслуг.Дата КАК Дата
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)";
	
	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	
	Таб = Запрос.Выполнить().Выгрузить(); 
	
	ОбластьШапки.Параметры.НомерРеализации = Таб[0].Номер;
	ОбластьШапки.Параметры.Дата = Формат(Таб[0].Дата, "ДЛФ=DD");

	ТабДок.Вывести(ОбластьШапки);	
	Номер = 0;
	Для Каждого Стр Из Таб Цикл  
		
		Для Каждого СтрокаТовараВКоробах Из Стр.гф_ТоварыВКоробах Цикл 
			
			ОбъектУЛ = СтрокаТовараВКоробах.УпаковочныйЛист.ПолучитьОбъект();  
			
			ОбластьСтроки.Параметры.Упаковка = ОбъектУЛ.гф_Комплектация;
			АртикулУЛ = СтрокаТовараВКоробах.Артикул;
			
			ОбъектШк = ОбъектУл.гф_Агрегация.ПолучитьОбъект(); 
			Для Каждого СтрокаАгрегации Из ОбъектШк.ВложенныеШтрихкоды Цикл 
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				
				"ВЫБРАТЬ
				|	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
				|	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика,
				|	ШтрихкодыУпаковокТоваров.ПометкаУдаления КАК ПометкаУдаления
				|ИЗ
				|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
				|ГДЕ
				|	ШтрихкодыУпаковокТоваров.Ссылка = &Ссылка";
				
				Запрос.Параметры.Вставить("Ссылка",СтрокаАгрегации.Штрихкод);
				
				ТабСпр = Запрос.Выполнить().Выгрузить(); 
				
				НайденыеСтр = ТабСпр.НайтиСтроки(Новый Структура("ПометкаУдаления", Ложь));
				Если НайденыеСтр.Количество() > 0 Тогда
					
					ОбластьСтроки.Параметры.АртикулХарактеристика = "" + АртикулУЛ + "/" + НайденыеСтр[0].Характеристика;
				Иначе 
					ОбластьСтроки.Параметры.АртикулХарактеристика = "" + АртикулУЛ + "/" + ТабСпр[0].Характеристика;
				КонецЕсли; 
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				
				"ВЫБРАТЬ
				|	ЗаказКлиента.гф_ИмяЗаказа КАК гф_ИмяЗаказа,
				|	ЗаказКлиента.Номер КАК Номер
				|ИЗ
				|	Документ.ЗаказКлиента КАК ЗаказКлиента
				|ГДЕ
				|	ЗаказКлиента.Ссылка = &Ссылка";
				
				Запрос.Параметры.Вставить("Ссылка",ОбъектУЛ.гф_Заказ);
				
				ТабКлиент = Запрос.Выполнить().Выгрузить();
				
				Запрос = Новый Запрос;
				Запрос.Текст =  
				
				"ВЫБРАТЬ
				|	Номенклатура.НаименованиеПолное КАК НаименованиеПолное
				|ИЗ
				|	Справочник.Номенклатура КАК Номенклатура
				|ГДЕ
				|	Номенклатура.Ссылка = &Ссылка";
				
				Запрос.Параметры.Вставить("Ссылка",СтрокаАгрегации.Штрихкод.Номенклатура);
				
				ТабНоменклатура = Запрос.Выполнить().Выгрузить();
				
				Если НЕ ЗначениеЗаполнено(ТабКлиент[0].гф_ИмяЗаказа) Тогда
					ОбластьСтроки.Параметры.ИмяЗаказа = "";
				Иначе	
					ОбластьСтроки.Параметры.ИмяЗаказа = ТабКлиент[0].гф_ИмяЗаказа;
				КонецЕсли;
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
				|	ШтрихкодыНоменклатуры.Номенклатура.Наименование КАК НоменклатураНаименование
				|ИЗ
				|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
				|ГДЕ
				|	ШтрихкодыНоменклатуры.Номенклатура.Ссылка = &Ссылка
				|	И ШтрихкодыНоменклатуры.Характеристика = &Характеристика";
				Запрос.Параметры.Вставить("Ссылка",СтрокаАгрегации.Штрихкод.Номенклатура);
				Запрос.Параметры.Вставить("Характеристика",СтрокаАгрегации.Штрихкод.Характеристика);
				ТабШтрих = Запрос.Выполнить().Выгрузить();
				
				Номер = Номер + 1; 
				ОбластьСтроки.Параметры.НомерСтроки = Номер;
				ОбластьСтроки.Параметры.Агрегации = ОбъектУЛ.Код;
				ОбластьСтроки.Параметры.НомерГТД = СтрокаАгрегации.Штрихкод.гф_НомерГТД.Код;
				ОбластьСтроки.Параметры.НомерЗаказа = ТабКлиент[0].Номер;
				ОбластьСтроки.Параметры.Наименование = ТабНоменклатура[0].НаименованиеПолное;
				ОбластьСтроки.Параметры.Код = СтрокаАгрегации.Штрихкод; 
				ОбластьСтроки.Параметры.Штрихкод = ТабШтрих[0].Штрихкод;
				
				ТабДок.Вывести(ОбластьСтроки);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;	
	
	Возврат ТабДок;
	
КонецФункции
