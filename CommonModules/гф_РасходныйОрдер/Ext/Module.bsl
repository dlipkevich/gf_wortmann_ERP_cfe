
// При изменении статуса в документе "Расходный ордер", выполняется содание и запись\проведение документа "РТиУ"
// Параметры:
//	Источник - ДокументСсылка.РасходныйОрдерНаТовары - Документ расходный ордер.
//  Отказ - Булево - Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то будет выполнен отказ от продолжения работы после выполнения проверки заполнения.
//
Процедура гф_ОтгрузкаУпаковочногоЛистаОбработкаУдаленияПроведения(Источник, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковочныйЛист.гф_ТекущийОрдер КАК гф_ТекущийОрдер,
	|	УпаковочныйЛист.гф_Агрегация КАК гф_Агрегация,
	|	УпаковочныйЛист.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
	|ГДЕ
	|	УпаковочныйЛист.гф_ТекущийОрдер = &гф_ТекущийОрдер";
	
	Запрос.УстановитьПараметр("гф_ТекущийОрдер", Источник.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ВыборкаДетальныеЗаписи.гф_Агрегация <> Неопределено Тогда
			
			Агрегация = ВыборкаДетальныеЗаписи.гф_Агрегация.ПолучитьОбъект();
			Агрегация.гф_Автодействие = Неопределено;
			Агрегация.Записать();
			
			УпаковочныйЛист = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			УпаковочныйЛист.гф_ТекущийОрдер = Неопределено;
			
			Для Каждого СтрокаУпаковочныйЛистНоменклатура Из УпаковочныйЛист.Товары Цикл
				
				СтрокаУпаковочныйЛистНоменклатура.гф_КодСтроки = 0;
				
			КонецЦикла;
			
			УпаковочныйЛист.Записать();
			
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

// Процедура обновляет кеш ключевых реквизитов текущей строки товаров. По ключевым реквизитам осуществляется связь
//  между ТЧ серий и ТЧ товаров.
//
// Параметры:
//  ТекущаяСтрока			 - ДанныеФормыЭлементКоллекции - строка, по которой обновляется кеш.
//  КэшированныеЗначения	 - Структура - переменная модуля формы, в которой хранятся кешируемые значения
//  ПараметрыУказанияСерий	 - см. ПараметрыУказанияСерий
//  Копирование				 - Булево - признак, что кешированная строка скопирована (параметр события ПриНачалеРедактирования).
//
Процедура ОбновитьКешированныеЗначенияДляУчетаСерий(ТекущаяСтрока,КэшированныеЗначения,ПараметрыУказанияСерий,Копирование = Ложь) Экспорт
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;
	
	Если ТекущаяСтрока <> Неопределено
		И (Не Копирование
		Или ПараметрыУказанияСерий.ИмяТЧТовары = ПараметрыУказанияСерий.ИмяТЧСерии) Тогда
		
		КэшированныеЗначения.Вставить("Номенклатура",ТекущаяСтрока.Номенклатура);
		КэшированныеЗначения.Вставить("Характеристика",ТекущаяСтрока.Характеристика);
		
		Если ТекущаяСтрока.Свойство(ПараметрыУказанияСерий.ИмяПоляКоличество) Тогда
			КэшированныеЗначения.Вставить(ПараметрыУказанияСерий.ИмяПоляКоличество, ТекущаяСтрока[ПараметрыУказанияСерий.ИмяПоляКоличество]);
		КонецЕсли;
		
		Если ТекущаяСтрока.Свойство("Отменено") Тогда
			КэшированныеЗначения.Вставить("Отменено",ТекущаяСтрока.Отменено);
		КонецЕсли;
		
		Для Каждого СтрМас Из ПараметрыУказанияСерий.ПоляСвязи Цикл
			Если ТекущаяСтрока.Свойство(СтрМас) Тогда
				КэшированныеЗначения.Вставить(СтрМас,ТекущаяСтрока[СтрМас]);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрМас Из ПараметрыУказанияСерий.ИменаПолейДополнительные Цикл
			Если ТекущаяСтрока.Свойство(СтрМас) Тогда
				КэшированныеЗначения.Вставить(СтрМас,ТекущаяСтрока[СтрМас]);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		КэшированныеЗначения.Вставить("Номенклатура",Неопределено);
		КэшированныеЗначения.Вставить("Характеристика",Неопределено);
		КэшированныеЗначения.Вставить(ПараметрыУказанияСерий.ИмяПоляКоличество ,0);
		
		Если ПараметрыУказанияСерий.ЭтоЗаказ Тогда
			КэшированныеЗначения.Вставить("Отменено", Неопределено);
		КонецЕсли;
		
		Для Каждого СтрМас Из ПараметрыУказанияСерий.ПоляСвязи Цикл
			КэшированныеЗначения.Вставить(СтрМас,Неопределено);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчитывает статусы указания серий в строках товаров, если это необходимо,
//  переподчиняет строки серий другим строкам ТЧ "Товары".
//
// Параметры:
//  Объект						 - ДанныеФормыСтруктура	 - основной реквизит формы документа.
//  ПараметрыУказанияСерий		 - Структура - структура параметров указания серий, возвращаемая соответствующей процедурой модуля менеджера документа.
//  ТекущаяСтрокаИдентификатор	 - Число - идентификатор текущей строки товаров в форме документа.
//  КэшированныеЗначения		 - Структура - структура кеша реквизитов текущей строки товаров.
//
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект,
																			ПараметрыУказанияСерий,
																			ТекущаяСтрокаИдентификатор,
																			КэшированныеЗначения) Экспорт
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.ИмяТЧТовары = ПараметрыУказанияСерий.ИмяТЧСерии Тогда
		Возврат; // Если ТЧ Серии нет, тогда все статусы пересчитываются при изменении реквизитов ТЧ, а не при окончании редактирования
	КонецЕсли;
	
	Если ТекущаяСтрокаИдентификатор <> Неопределено Тогда
		ТекущаяСтрока = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор); // ДокументТабличнаяЧастьСтрока.АктОРасхожденияхПослеПриемки.Товары - указано для типизации
	Иначе
		ТекущаяСтрока = Неопределено //значит строку удалили;
	КонецЕсли;
	
	ТекстПоляСвязи = "";
	
	Для Каждого СтрМас Из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстПоляСвязи = ТекстПоляСвязи + "," + СтрМас  ;
	КонецЦикла;
	
	ЕстьУпаковки = ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено; 
	
	// Если строка новая (в т.ч. скопированная) или используется разделение по вариантам продажи - будет закешированно Неопределено
	// Тогда не нужно искать строки со старыми значениями.
	Если КэшированныеЗначения.Номенклатура <> Неопределено Тогда
		
		СтруктураПоискаСтарыеЗначения = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);
		ЗаполнитьЗначенияСвойств(СтруктураПоискаСтарыеЗначения,КэшированныеЗначения);
		
		НайденныеСтрокиТоваров = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиСтроки(СтруктураПоискаСтарыеЗначения);
		НайденныеСтрокиСерий = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].НайтиСтроки(СтруктураПоискаСтарыеЗначения);
	Иначе
		НайденныеСтрокиТоваров = Новый Массив;
		НайденныеСтрокиСерий   = Новый Массив;
	КонецЕсли;
	
	// Если поменялись ключевые поля:
	// - возможно нужно переподчинять серии
	// - статус указания серий нужно пересчитывать в строках по новым ключевым полям и по старым.
	Если ТекущаяСтрока <> Неопределено 
		И Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(КэшированныеЗначения, ТекущаяСтрока, "Номенклатура,Характеристика"+ТекстПоляСвязи) Тогда
		
		УчитыватьОстатки      = Ложь;
		ПереподчинитьСерии    = Ложь;
		ПересчитатьКоличество = Ложь;
		// Определим, нужно ли переподчинять серии. Это нужно если:
		// - серии относились только к одной строке
		// - новые и старые ключевые поля поддерживают одну политику учета
		// - серии относились к нескольким строкам, но изменилось значение действия по отражению расхождения со строкой
		// Если строки нужно переподчинять, то определим, нужно ли пересчитывать количество.
		Если КэшированныеЗначения.Номенклатура <> Неопределено
			И ((КэшированныеЗначения.Свойство("Действие")
					И КэшированныеЗначения.Действие <> ТекущаяСтрока.Действие)
				Или НайденныеСтрокиТоваров.Количество() = 0) Тогда//т.к. строк с такими ключевыми полями не осталось, значит такая строка была одна
			
			Если НайденныеСтрокиТоваров.Количество() > 0 Тогда
				УчитыватьОстатки   = Истина;
				ПереподчинитьСерии = Истина;
			ИначеЕсли КэшированныеЗначения.Номенклатура = ТекущаяСтрока.Номенклатура Тогда //т.е. изменились поля, от которых политика учета не зависит
				ПереподчинитьСерии = Истина;
			Иначе //будем переподчинять, если не поменялся вид номенклатуры
				ВидНоменклатурыТекущий = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КэшированныеЗначения.Номенклатура,"ВидНоменклатуры");
				ВидНоменклатурыНовый   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Номенклатура, "ВидНоменклатуры");
				
				ПереподчинитьСерии = (ВидНоменклатурыТекущий = ВидНоменклатурыНовый);
			КонецЕсли;
			
			Если ПереподчинитьСерии
				И ЕстьУпаковки
				И КэшированныеЗначения.Упаковка <> ТекущаяСтрока.Упаковка Тогда
				
				ПересчитатьКоличество = Истина;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		// Если строка удалена, то в качестве текущих значений будет передано Неопределено
		// Тогда не нужно искать строки с новыми значениями.
		СтруктураПоискаНовыеЗначения = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);
		ЗаполнитьЗначенияСвойств(СтруктураПоискаНовыеЗначения,ТекущаяСтрока);
		
		НайденныеСтрокиТоваровНовые = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиСтроки(СтруктураПоискаНовыеЗначения);    
		
		// Добавим строки по новым ключевым полям в массив строк для пересчета статуса указания серий.
		
		// При объединении массивов будем обходить меньший массив
		Если НайденныеСтрокиТоваров.Количество() < НайденныеСтрокиТоваровНовые.Количество() Тогда
			Для Каждого СтрМас Из НайденныеСтрокиТоваров Цикл
				НайденныеСтрокиТоваровНовые.Добавить(СтрМас);
			КонецЦикла;
			НайденныеСтрокиТоваров = НайденныеСтрокиТоваровНовые;
		Иначе
			Для Каждого СтрМас Из НайденныеСтрокиТоваровНовые Цикл
				НайденныеСтрокиТоваров.Добавить(СтрМас);
			КонецЦикла;
		КонецЕсли;
		
		// Определим массив строк серий, который должен участвовать в пересчете статусов,
		Если ПереподчинитьСерии Тогда		
			// Сначала переподчиним серии
			
			Если УчитыватьОстатки Тогда
				Если ТекущаяСтрока.КоличествоПоДокументу > ТекущаяСтрока.Количество Тогда
					КоличествоОстаток = ТекущаяСтрока.Количество;
				Иначе
					
					ЕстьНовыеСерии = Ложь;
					
					КоличествоСтрокСИзлишками = 0;
					
					Для Каждого СтрМас Из НайденныеСтрокиСерий Цикл
						Если СтрМас.КоличествоПоДокументу = 0 Тогда
							ЕстьНовыеСерии = Истина;
						ИначеЕсли СтрМас.КоличествоПоДокументу < СтрМас.Количество Тогда
							КоличествоСтрокСИзлишками = КоличествоСтрокСИзлишками + 1;
						КонецЕсли;
					КонецЦикла;
					
					Если ЕстьНовыеСерии
						И КоличествоСтрокСИзлишками > 0 Тогда //Переподчиним количество серий за вычетом количества строк с излишками
						
						КоличествоОстаток = ТекущаяСтрока.КоличествоПоДокументу - КоличествоСтрокСИзлишками;
						
					ИначеЕсли ЕстьНовыеСерии Тогда //Переподчиним количество серий равное количеству серий в документе
						КоличествоОстаток = ТекущаяСтрока.КоличествоПоДокументу;
					Иначе //Переподчиним количество серий равное фактическому количеству серий в обрабатываемой строке
						КоличествоОстаток = ТекущаяСтрока.КоличествоПоДокументу
											- (ТекущаяСтрока.Количество - ТекущаяСтрока.КоличествоПоДокументу);
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого СтрМас Из НайденныеСтрокиСерий Цикл
				
				Если УчитыватьОстатки Тогда
					Если КоличествоОстаток > 0
						Или СтрМас.Количество <> СтрМас.КоличествоПоДокументу Тогда
						
						КоличествоОстаток = КоличествоОстаток - СтрМас.Количество;
						
						ЗаполнитьЗначенияСвойств(СтрМас, ТекущаяСтрока, ТекстПоляСвязи);
					КонецЕсли;
				Иначе
					ЗаполнитьЗначенияСвойств(СтрМас, ТекущаяСтрока, "Номенклатура,Характеристика" + ТекстПоляСвязи);
				КонецЕсли;
				
				Если ПересчитатьКоличество Тогда
					СтруктураДействий = Новый Структура;
					СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрМас,СтруктураДействий,КэшированныеЗначения);
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не УчитыватьОстатки Тогда
				// Если серии переподчинены, то достаточно произвести поиск по новым полям поиска
				НайденныеСтрокиСерий = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].НайтиСтроки(СтруктураПоискаНовыеЗначения);
			КонецЕсли;
			
		Иначе	
			НайденныеСтрокиСерийНовые = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].НайтиСтроки(СтруктураПоискаНовыеЗначения);
			
			// Если серии не переподчинены, то к строкам по старым ключевым полям нужно добавить строки по новым ключевым полям.
			
			// При объединении массивов будем обходить меньший массив
			Если НайденныеСтрокиСерий.Количество() < НайденныеСтрокиСерийНовые.Количество() Тогда
				Для Каждого СтрМас Из НайденныеСтрокиСерий Цикл
					НайденныеСтрокиСерийНовые.Добавить(СтрМас);
				КонецЦикла;
				НайденныеСтрокиСерий = НайденныеСтрокиСерийНовые;
			Иначе
				Для Каждого СтрМас Из НайденныеСтрокиСерийНовые Цикл
					НайденныеСтрокиСерий.Добавить(СтрМас);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Если НайденныеСтрокиТоваров.Количество() > 0 Тогда 
	//	ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий,НайденныеСтрокиТоваров,НайденныеСтрокиСерий);
	//КонецЕсли;
	
КонецПроцедуры

// Рекурсивно обходит строки упаковочного листа, используется для получения или удаления всех строк в иерархии
// Параметры:
//	ТЧТовары - ДанныеФормыКоллекция - табличная часть, в которой отображаются товары и упаковочные листы,
//	УпаковочныйЛист - ДокументСсылка.УпаковочныйЛист - упаковочный лист для обхода строк,
//	ТЧСерии - ДанныеФормыКоллекция - табличная часть с сериями товаров, по умолчанию Неопределено,
//	СтрокиОбъединяемые - Массив - состоит из элементов ДанныеФормыЭлементКоллекции, куда собираются строки ТЧ,
//		подчиненные упаковочному листу, по умолчанию Неопределено,
//	Действие - Строка - "Объединить" или "Удалить", по умолчанию "Объединить".
//
Процедура РекурсивноОбойтиПодчиненныеСтроки(ТЧТовары,
	УпаковочныйЛист, ТЧСерии = Неопределено, СтрокиОбъединяемые = Неопределено, Действие = "Объединить") Экспорт
	
	НайденныеСтроки = ТЧТовары.НайтиСтроки(Новый Структура("УпаковочныйЛистРодитель", УпаковочныйЛист));
	Для Каждого Стр Из НайденныеСтроки Цикл
		Если Действие = "Удалить" Тогда
			ТЧТовары.Удалить(Стр);
			Если Не ТЧСерии = Неопределено Тогда
				НайденныеСтрокиСерий = ТЧСерии.НайтиСтроки(Новый Структура("УпаковочныйЛистРодитель", УпаковочныйЛист));
				Для Каждого СтрокаСерий Из НайденныеСтрокиСерий Цикл
					ТЧСерии.Удалить(СтрокаСерий);
				КонецЦикла;
			КонецЕсли;
		Иначе
			СтрокиОбъединяемые.Добавить(Стр);
		КонецЕсли;
		Если Стр.ЭтоУпаковочныйЛист Тогда
			РекурсивноОбойтиПодчиненныеСтроки(ТЧТовары, Стр.УпаковочныйЛист, ТЧСерии, СтрокиОбъединяемые, Действие);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// При изменении статуса в документе "Расходный ордер", выполняется содание и запись\проведение документа "РТиУ"
// Параметры:
//	Источник - ДокументСсылка.РасходныйОрдерНаТовары - Документ расходный ордер.
//  Отказ - Булево - Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то будет выполнен отказ от продолжения работы после выполнения проверки заполнения.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура гф_РасходныйОрдерИзменениеСтатусаОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Если Источник.Статус = Перечисления.СтатусыРасходныхОрдеров.Проверен
		Или Источник.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтгрузке Тогда
		
		ЗаписатьДокумент = Ложь;
		
		Для Каждого Строка Из Источник.ТоварыПоРаспоряжениям Цикл
			ЗаказКлиента = Строка.Распоряжение;
			Прервать
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
		|	РеализацияТоваровУслуг.Проведен КАК Проведен,
		|	РеализацияТоваровУслуг.ЗаказКлиента КАК ЗаказКлиента,
		|	РеализацияТоваровУслуг.гф_РасходныйОрдер КАК гф_РасходныйОрдер
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.гф_РасходныйОрдер = &гф_РасходныйОрдер";
		
		Запрос.УстановитьПараметр("гф_РасходныйОрдер", Источник.Ссылка);
		Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ДокументРеализация = Неопределено;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ДокументРеализация = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
		
		Если ДокументРеализация <> Неопределено Тогда
			ДокОбъект = ДокументРеализация.Получитьобъект();
		Иначе
			ДокОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДокОбъект, ЗаказКлиента,,"Номер, Проведен");
		ДокОбъект.Дата = ТекущаяДатаСеанса();
		ДокОбъект.РеализацияПоЗаказам = Истина;
		ДокОбъект.гф_РасходныйОрдер = Источник.Ссылка;
		
		ДокОбъект.ЗаказКлиента = ЗаказКлиента;
		ДокОбъект.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
		
		ДокОбъект.КурсЗнаменатель = 1;
		ДокОбъект.КурсЧислитель = 1;
		ДокОбъект.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
		ДокОбъект.Согласован = Истина;
		ДокОбъект.СуммаВзаиморасчетов = ДокОбъект.СуммаДокумента;
		ДокОбъект.ВалютаВзаиморасчетов = ДокОбъект.Валюта;
		ДокОбъект.Товары.Очистить();
		ДокОбъект.гф_ТоварыВКоробах.Очистить();
		ДокОбъект.ВидыЗапасов.Очистить();
		ДокОбъект.ШтрихкодыУпаковок.Очистить();
		
		УпаковочныеЛисты = Новый СписокЗначений;
		
		Для Каждого Строка Из Источник.ОтгружаемыеТовары Цикл
			
			Если ЗначениеЗаполнено(Строка.УпаковочныйЛист) Тогда
				УпаковочныеЛисты.Добавить(Строка.УпаковочныйЛист, "УпаковочныйЛист");
			КонецЕсли;
			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УпаковочныйЛист.Ссылка КАК Ссылка,
		|	УпаковочныйЛист.Товары.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура КАК Номенклатура,
		|		Характеристика КАК Характеристика,
		|		Серия КАК Серия,
		|		Упаковка КАК Упаковка,
		|		КоличествоУпаковок КАК КоличествоУпаковок,
		|		Количество КАК Количество,
		|		УпаковочныйЛист КАК УпаковочныйЛист,
		|		НоменклатураПартнера КАК НоменклатураПартнера,
		|		Комментарий КАК Комментарий,
		|		ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
		|		ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста КАК ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста,
		|		УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
		|		СтатусУказанияСерий КАК СтатусУказанияСерий,
		|		Назначение КАК Назначение
		|	) КАК Товары
		|ИЗ
		|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
		|ГДЕ
		|	УпаковочныйЛист.Ссылка В(&Ссылка)";
		
		Запрос.УстановитьПараметр("Ссылка", УпаковочныеЛисты);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		КлючСвязи = 0;
		КодСтроки = 0;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ЗаписатьДокумент = Истина;
			НоваяСтрока = ДокОбъект.гф_ТоварыВКоробах.Добавить();
			НоваяСтрока.УпаковочныйЛист 		= ВыборкаДетальныеЗаписи.Ссылка;
			
			гф_УстановитьДанныеУпаковочногоЛиста(НоваяСтрока);
			
			ОтгрузкаКодовМаркировкиПарами = Ложь;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДоговорыКонтрагентовДополнительныеРеквизиты.Ссылка КАК Ссылка,
			|	ДоговорыКонтрагентовДополнительныеРеквизиты.НомерСтроки КАК НомерСтроки,
			|	ДоговорыКонтрагентовДополнительныеРеквизиты.Свойство КАК Свойство,
			|	ДоговорыКонтрагентовДополнительныеРеквизиты.Значение КАК Значение,
			|	ДоговорыКонтрагентовДополнительныеРеквизиты.ТекстоваяСтрока КАК ТекстоваяСтрока
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов.ДополнительныеРеквизиты КАК ДоговорыКонтрагентовДополнительныеРеквизиты
			|ГДЕ
			|	ДоговорыКонтрагентовДополнительныеРеквизиты.Ссылка = &Ссылка";
			
			Запрос.УстановитьПараметр("Ссылка", ДокОбъект.Договор);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписиДоговор = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписиДоговор.Следующий() Цикл
				
				Если ВыборкаДетальныеЗаписиДоговор.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту
					("Имя", "гф_ДоговорыКонтрагентовОтгрузкаКодовМаркировкиПарами") Тогда
					ОтгрузкаКодовМаркировкиПарами = ВыборкаДетальныеЗаписиДоговор.Значение;
				КонецЕсли;
				
			КонецЦикла;
			
			
			гф_ДобавитьТоварыПоУпаковочномуЛисту(НоваяСтрока.УпаковочныйЛист, ДокОбъект.Товары, ДокОбъект.ВидыЗапасов,
			ДокОбъект, КлючСвязи, КодСтроки, ОтгрузкаКодовМаркировкиПарами, ДокОбъект.ШтрихкодыУпаковок);
			
			//ДокОбъект.Товары.Свернуть("Номенклатура, Характеристика, Назначение, СтавкаНДС, Склад, Цена",
			//	", КоличествоУпаковок, Количество, Сумма, СуммаНДС, СуммаСНДС");	
			//ДокОбъект.Товары.Свернуть("Номенклатура, Характеристика, Назначение, СтавкаНДС, Склад, Цена",
			//	", КоличествоУпаковок, Количество, Сумма, СуммаНДС, СуммаСНДС, КлючСвязи, КодСтроки");
			
			УпаковочныйЛист = НоваяСтрока.УпаковочныйЛист;
			ШтрихкодыУпаковок = ДокОбъект.ШтрихкодыУпаковок;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	УпаковочныйЛист.гф_ТекущийОрдер КАК гф_ТекущийОрдер,
			|	УпаковочныйЛист.гф_Агрегация КАК гф_Агрегация,
			|	УпаковочныйЛист.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
			|ГДЕ
			|	УпаковочныйЛист.Ссылка = &Ссылка";
			
			Запрос.УстановитьПараметр("Ссылка", УпаковочныйЛист);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписиАгрегация = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписиАгрегация.Следующий() Цикл
				
				Если ВыборкаДетальныеЗаписиАгрегация.гф_Агрегация <> Неопределено Тогда
					
					Если ОтгрузкаКодовМаркировкиПарами Тогда
						
						Агрегация = ВыборкаДетальныеЗаписиАгрегация.гф_Агрегация.ПолучитьОбъект();
						
						Для Каждого Строка Из Агрегация.ВложенныеШтрихкоды Цикл
							
							НоваяСтрокаШтрихкодыУпаковок = ШтрихкодыУпаковок.Добавить();
							НоваяСтрокаШтрихкодыУпаковок.ШтрихкодУпаковки = Строка.Штрихкод;
							
						КонецЦикла;
					Иначе
						
						НоваяСтрокаШтрихкодыУпаковок = ШтрихкодыУпаковок.Добавить();
						НоваяСтрокаШтрихкодыУпаковок.ШтрихкодУпаковки = ВыборкаДетальныеЗаписиАгрегация.гф_Агрегация;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если ЗаписатьДокумент Тогда
			Если Источник.Статус = Перечисления.СтатусыРасходныхОрдеров.Проверен Тогда
				ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			ИначеЕсли Источник.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтгрузке Тогда
				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
		КонецЕсли;   
		
	КонецЕсли;
	
КонецПроцедуры

Процедура гф_УстановитьДанныеУпаковочногоЛиста(ТекущаяСтрока)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	УпаковочныйЛистШапка.Ссылка КАК УпаковочныйЛист,
	|	УпаковочныйЛистШапка.гф_Заказ КАК гф_Заказ,
	|	УпаковочныйЛистШапка.гф_Комплектация КАК гф_Комплектация,
	|	СУММА(УпаковочныйЛистТовары.Количество) КАК Количество,
	|	МАКСИМУМ(УпаковочныйЛистТовары.Номенклатура.Артикул) КАК Артикул
	|ПОМЕСТИТЬ ВТ_УпаковочныйЛист
	|ИЗ
	|	Документ.УпаковочныйЛист КАК УпаковочныйЛистШапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСправочник
	|			ПО УпаковочныйЛистТовары.Номенклатура = НоменклатураСправочник.Ссылка
	|		ПО УпаковочныйЛистШапка.Ссылка = УпаковочныйЛистТовары.Ссылка
	|ГДЕ
	|	УпаковочныйЛистШапка.Ссылка = &Ссылка
	|	И НЕ УпаковочныйЛистТовары.ЭтоУпаковочныйЛист
	|
	|СГРУППИРОВАТЬ ПО
	|	УпаковочныйЛистШапка.Ссылка,
	|	УпаковочныйЛистШапка.гф_Заказ,
	|	УпаковочныйЛистШапка.гф_Комплектация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА СУММА(ЗаказКлиентаТовары.Количество) = 0
	|			ТОГДА СУММА(ЗаказКлиентаТовары.СуммаСНДС) - СУММА(ЗаказКлиентаТовары.СуммаНДС)
	|		ИНАЧЕ (СУММА(ЗаказКлиентаТовары.СуммаСНДС) - СУММА(ЗаказКлиентаТовары.СуммаНДС)) / СУММА(ЗаказКлиентаТовары.Количество)
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА СУММА(ЗаказКлиентаТовары.Количество) = 0
	|			ТОГДА СУММА(ЗаказКлиентаТовары.СуммаНДС)
	|		ИНАЧЕ СУММА(ЗаказКлиентаТовары.СуммаНДС) / СУММА(ЗаказКлиентаТовары.Количество)
	|	КОНЕЦ КАК НДС
	|ПОМЕСТИТЬ ВТ_Цены
	|ИЗ
	|	ВТ_УпаковочныйЛист КАК ВТ_УпаковочныйЛист
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|		ПО ВТ_УпаковочныйЛист.гф_Заказ = ЗаказКлиентаТовары.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиентаТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(УпаковочныйЛистТовары.Количество * ЕСТЬNULL(ВТ_Цены.Цена, 0)) КАК Цена,
	|	СУММА(УпаковочныйЛистТовары.Количество * ЕСТЬNULL(ВТ_Цены.НДС, 0)) КАК НДС
	|ПОМЕСТИТЬ ВТ_ЦенаНДС
	|ИЗ
	|	Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Цены КАК ВТ_Цены
	|		ПО УпаковочныйЛистТовары.Номенклатура = ВТ_Цены.Номенклатура
	|ГДЕ
	|	УпаковочныйЛистТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_УпаковочныйЛист.УпаковочныйЛист КАК УпаковочныйЛист,
	|	ВТ_УпаковочныйЛист.Артикул КАК Артикул,
	|	ВТ_УпаковочныйЛист.Количество КАК КоличествоПар,
	|	ВЫБОР
	|		КОГДА СУММА(ЕСТЬNULL(ВариантыКомплектацииНоменклатурыТовары.Количество, 0)) = 0
	|			ТОГДА 1
	|		ИНАЧЕ ВТ_УпаковочныйЛист.Количество / СУММА(ЕСТЬNULL(ВариантыКомплектацииНоменклатурыТовары.Количество, 0))
	|	КОНЕЦ КАК Коэффициент,
	|	ВТ_ЦенаНДС.Цена КАК ЦенаКороба,
	|	ВТ_ЦенаНДС.НДС КАК НДС
	|ИЗ
	|	ВТ_УпаковочныйЛист КАК ВТ_УпаковочныйЛист
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ВариантыКомплектацииНоменклатурыТовары
	|		ПО ВТ_УпаковочныйЛист.гф_Комплектация = ВариантыКомплектацииНоменклатурыТовары.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЦенаНДС КАК ВТ_ЦенаНДС
	|		ПО (ИСТИНА)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_УпаковочныйЛист.УпаковочныйЛист,
	|	ВТ_УпаковочныйЛист.Артикул,
	|	ВТ_УпаковочныйЛист.Количество,
	|	ВТ_ЦенаНДС.Цена,
	|	ВТ_ЦенаНДС.НДС";
	
	Запрос.Параметры.Вставить("Ссылка", ТекущаяСтрока.УпаковочныйЛист);
	
	Результат = Запрос.Выполнить(); 
	
	Если Результат.Пустой() Тогда
		
		ТекущаяСтрока.Артикул		= "";
		ТекущаяСтрока.КоличествоПар	= 0;
		ТекущаяСтрока.Коэффициент	= 0;
		ТекущаяСтрока.ЦенаКороба	= "";
		ТекущаяСтрока.НДС			= "";
		
	Иначе	
		
		Выборка = Результат.Выбрать();
		
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Выборка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура гф_ДобавитьТоварыПоУпаковочномуЛисту(УпаковочныйЛист, ТоварыВКоробах, ВидыЗапасов, ДокОбъект,
	КлючСвязи, КодСтроки, ОтгрузкаКодовМаркировкиПарами, ШтрихкодыУпаковок)      
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	УпаковочныйЛист.гф_Заказ КАК гф_Заказ,
	               |	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	               |	ЗаказКлиентаТовары.Характеристика КАК Характеристика,
	               |	ЗаказКлиентаТовары.Серия КАК Серия,
	               |	ЗаказКлиентаТовары.Цена КАК Цена,
	               |	ЗаказКлиентаТовары.ВидЦены КАК ВидЦены,
	               |	СУММА(ЗаказКлиентаТовары.Сумма) КАК Сумма,
	               |	ЗаказКлиентаТовары.СтавкаНДС КАК СтавкаНДС,
	               |	СУММА(ЗаказКлиентаТовары.СуммаНДС) КАК СуммаНДС,
	               |	СУММА(ЗаказКлиентаТовары.СуммаСНДС) КАК СуммаСНДС,
	               |	ЗаказКлиентаТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	               |	ЗаказКлиентаТовары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	               |	ЗаказКлиентаТовары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	               |	ЗаказКлиентаТовары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	               |	ЗаказКлиентаТовары.Склад КАК Склад,
	               |	ЗаказКлиентаТовары.СрокПоставки КАК СрокПоставки,
	               |	ЗаказКлиентаТовары.Содержание КАК Содержание,
	               |	ЗаказКлиентаТовары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	               |	ЗаказКлиентаТовары.НоменклатураНабора КАК НоменклатураНабора,
	               |	ЗаказКлиентаТовары.Обособленно КАК Обособленно,
	               |	ЗаказКлиентаТовары.ХарактеристикаНабора КАК ХарактеристикаНабора,
	               |	ЗаказКлиентаТовары.ВариантОбеспеченияДоИзмененияОбновлениемИБ КАК ВариантОбеспеченияДоИзмененияОбновлениемИБ,
	               |	ЗаказКлиентаТовары.Подразделение КАК Подразделение,
	               |	ЗаказКлиентаТовары.НоменклатураПартнера КАК НоменклатураПартнера,
	               |	СУММА(ЗаказКлиентаТовары.Количество) КАК Количество
	               |ПОМЕСТИТЬ ВТ_Заказ
	               |ИЗ
	               |	Документ.УпаковочныйЛист КАК УпаковочныйЛист
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	               |		ПО УпаковочныйЛист.гф_Заказ = ЗаказКлиентаТовары.Ссылка
	               |ГДЕ
	               |	УпаковочныйЛист.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказКлиентаТовары.Номенклатура,
	               |	ЗаказКлиентаТовары.Характеристика,
	               |	УпаковочныйЛист.гф_Заказ,
	               |	ЗаказКлиентаТовары.Серия,
	               |	ЗаказКлиентаТовары.Цена,
	               |	ЗаказКлиентаТовары.ВидЦены,
	               |	ЗаказКлиентаТовары.ПроцентРучнойСкидки,
	               |	ЗаказКлиентаТовары.СуммаРучнойСкидки,
	               |	ЗаказКлиентаТовары.ПроцентАвтоматическойСкидки,
	               |	ЗаказКлиентаТовары.СуммаАвтоматическойСкидки,
	               |	ЗаказКлиентаТовары.Склад,
	               |	ЗаказКлиентаТовары.СрокПоставки,
	               |	ЗаказКлиентаТовары.Содержание,
	               |	ЗаказКлиентаТовары.СтатусУказанияСерий,
	               |	ЗаказКлиентаТовары.НоменклатураНабора,
	               |	ЗаказКлиентаТовары.Обособленно,
	               |	ЗаказКлиентаТовары.ХарактеристикаНабора,
	               |	ЗаказКлиентаТовары.ВариантОбеспеченияДоИзмененияОбновлениемИБ,
	               |	ЗаказКлиентаТовары.Подразделение,
	               |	ЗаказКлиентаТовары.НоменклатураПартнера,
	               |	ЗаказКлиентаТовары.СтавкаНДС
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УпаковочныйЛистТовары.НомерСтроки КАК НомерСтроки,
	               |	УпаковочныйЛистТовары.Номенклатура КАК Номенклатура,
	               |	УпаковочныйЛистТовары.Характеристика КАК Характеристика,
	               |	УпаковочныйЛистТовары.Серия КАК Серия,
	               |	УпаковочныйЛистТовары.Упаковка КАК Упаковка,
	               |	УпаковочныйЛистТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	               |	УпаковочныйЛистТовары.Количество КАК Количество,
	               |	УпаковочныйЛистТовары.УпаковочныйЛист КАК УпаковочныйЛист,
	               |	УпаковочныйЛистТовары.НоменклатураПартнера КАК НоменклатураПартнера,
	               |	УпаковочныйЛистТовары.Комментарий КАК Комментарий,
	               |	УпаковочныйЛистТовары.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
	               |	УпаковочныйЛистТовары.ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста КАК ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста,
	               |	УпаковочныйЛистТовары.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
	               |	УпаковочныйЛистТовары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	               |	УпаковочныйЛистТовары.Назначение КАК Назначение,
	               |	ВТ_Заказ.Цена КАК Цена,
	               |	ВТ_Заказ.ВидЦены КАК ВидЦены,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ВТ_Заказ.Количество, 0) = 0
	               |			ТОГДА ВТ_Заказ.Сумма
	               |		ИНАЧЕ ВТ_Заказ.Сумма / ВТ_Заказ.Количество * УпаковочныйЛистТовары.Количество
	               |	КОНЕЦ КАК Сумма,
	               |	ВТ_Заказ.СтавкаНДС КАК СтавкаНДС,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ВТ_Заказ.Количество, 0) = 0
	               |			ТОГДА ВТ_Заказ.СуммаНДС
	               |		ИНАЧЕ ВТ_Заказ.СуммаНДС / ВТ_Заказ.Количество * УпаковочныйЛистТовары.Количество
	               |	КОНЕЦ КАК СуммаНДС,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ВТ_Заказ.Количество, 0) = 0
	               |			ТОГДА ВТ_Заказ.СуммаСНДС
	               |		ИНАЧЕ ВТ_Заказ.СуммаСНДС / ВТ_Заказ.Количество * УпаковочныйЛистТовары.Количество
	               |	КОНЕЦ КАК СуммаСНДС,
	               |	ВТ_Заказ.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ВТ_Заказ.Количество, 0) = 0
	               |			ТОГДА ВТ_Заказ.СуммаРучнойСкидки
	               |		ИНАЧЕ ВТ_Заказ.СуммаРучнойСкидки / ВТ_Заказ.Количество * УпаковочныйЛистТовары.Количество
	               |	КОНЕЦ КАК СуммаРучнойСкидки,
	               |	ВТ_Заказ.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ВТ_Заказ.Количество, 0) = 0
	               |			ТОГДА ВТ_Заказ.СуммаАвтоматическойСкидки
	               |		ИНАЧЕ ВТ_Заказ.СуммаАвтоматическойСкидки / ВТ_Заказ.Количество * УпаковочныйЛистТовары.Количество
	               |	КОНЕЦ КАК СуммаАвтоматическойСкидки,
	               |	ВТ_Заказ.Склад КАК Склад,
	               |	ВТ_Заказ.СрокПоставки КАК СрокПоставки,
	               |	ВТ_Заказ.Содержание КАК Содержание,
	               |	ВТ_Заказ.НоменклатураНабора КАК НоменклатураНабора,
	               |	ВТ_Заказ.Обособленно КАК Обособленно,
	               |	ВТ_Заказ.ХарактеристикаНабора КАК ХарактеристикаНабора,
	               |	ВТ_Заказ.ВариантОбеспеченияДоИзмененияОбновлениемИБ КАК ВариантОбеспеченияДоИзмененияОбновлениемИБ,
	               |	ВТ_Заказ.Подразделение КАК Подразделение,
	               |	ЕСТЬNULL(ВТ_Заказ.Количество, 0) КАК КоличествоВЗаказе
	               |ИЗ
	               |	Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Заказ КАК ВТ_Заказ
	               |		ПО УпаковочныйЛистТовары.Номенклатура = ВТ_Заказ.Номенклатура
	               |			И УпаковочныйЛистТовары.Характеристика = ВТ_Заказ.Характеристика
	               |			И УпаковочныйЛистТовары.Серия = ВТ_Заказ.Серия
	               |ГДЕ
	               |	УпаковочныйЛистТовары.Ссылка = &Ссылка
	               |	И НЕ УпаковочныйЛистТовары.ЭтоУпаковочныйЛист";
	
	Запрос.Параметры.Вставить("Ссылка", УпаковочныйЛист);
	
	Выборка = Запрос.Выполнить().Выбрать(); 
	
	КэшированныеЗначения = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТоварыВКоробах.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		НоваяСтрока.ЗаказКлиента = УпаковочныйЛист.гф_Заказ;
		
		Для Каждого СтрокаУпаковочныйЛистНоменклатура Из УпаковочныйЛист.Товары Цикл
			
			Если НоваяСтрока.Номенклатура = СтрокаУпаковочныйЛистНоменклатура.Номенклатура
				И НоваяСтрока.Характеристика = СтрокаУпаковочныйЛистНоменклатура.Характеристика 
				И НоваяСтрока.Количество = СтрокаУпаковочныйЛистНоменклатура.Количество Тогда
				
				НоваяСтрока.КодСтроки = СтрокаУпаковочныйЛистНоменклатура.гф_КодСтроки;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		НоваяСтрока.КлючСвязи = КлючСвязи + 1;
		
		НоваяСтрока.АналитикаУчетаНоменклатуры = ПолучитьАналитикаУчетаНоменклатуры(НоваяСтрока.Номенклатура, НоваяСтрока.Характеристика,
		НоваяСтрока.Серия, НоваяСтрока.Назначение, НоваяСтрока.Склад);
		
		
		
	КонецЦикла;	    	
	
КонецПроцедуры

Функция ПолучитьАналитикаУчетаНоменклатуры(Номенклатура, Характеристика, Серия, Назначение, Склад)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлючиАналитикиУчетаНоменклатуры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КлючиАналитикиУчетаНоменклатуры КАК КлючиАналитикиУчетаНоменклатуры
		|ГДЕ
		|	КлючиАналитикиУчетаНоменклатуры.Номенклатура = &Номенклатура
		|	И КлючиАналитикиУчетаНоменклатуры.Характеристика = &Характеристика
		|	И КлючиАналитикиУчетаНоменклатуры.Серия = &Серия
		|	И КлючиАналитикиУчетаНоменклатуры.МестоХранения = &Склад
		|	И КлючиАналитикиУчетаНоменклатуры.Назначение = &Назначение";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("Серия", Серия);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Назначение", Назначение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// При изменении статуса в документе "Расходный ордер", выполняется содание и запись (проведение) документа "РТиУ"
// Параметры:
//	Источник - ДокументСсылка.РасходныйОрдерНаТовары - Документ расходный ордер.
//  Отказ - Булево - Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то будет выполнен отказ от продолжения работы после выполнения проверки заполнения.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура гф_РасходныйОрдерУдалениеОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Для Каждого Строка Из Источник.ТоварыПоРаспоряжениям Цикл
		ЗаказКлиента = Строка.Распоряжение;
		Прервать
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслуг.Проведен КАК Проведен,
	|	РеализацияТоваровУслуг.ЗаказКлиента КАК ЗаказКлиента,
	|	РеализацияТоваровУслуг.гф_РасходныйОрдер КАК гф_РасходныйОрдер
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.гф_РасходныйОрдер = &гф_РасходныйОрдер";
	
	Запрос.УстановитьПараметр("гф_РасходныйОрдер", Источник.Ссылка);
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ДокументРеализация = Неопределено;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокументРеализация = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Если ДокументРеализация <> Неопределено Тогда
		ДокОбъект = ДокументРеализация.Получитьобъект();
		ДокОбъект.гф_РасходныйОрдер = Неопределено;
		ДокОбъект.ПометкаУдаления = Истина;
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
		
КонецПроцедуры
