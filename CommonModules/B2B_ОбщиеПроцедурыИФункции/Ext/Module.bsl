#Область JSON

// Получить из текста JSON структуру.
// 
// Параметры:
// 	ТекстJSON                    - Строка - Текст JSON.
// 	ПреобразовыватьВСоответствие - Булево - Признак преобразования в соответствие.
// Возвращаемое значение:
// 	Структура, Неопределено - Результат преобразования JSON.
Функция ТекстJSONВОбъект(ТекстJSON, ПреобразовыватьВСоответствие = Ложь) Экспорт
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(ТекстJSON);
	
	Попытка
		РезультатРазбора = ПрочитатьJSON(Чтение, ПреобразовыватьВСоответствие);
	Исключение
		РезультатРазбора = Неопределено;
	КонецПопытки;
	
	Возврат РезультатРазбора
	
КонецФункции

// Формирует из структуры текст JSON
// 
// Параметры:
// 	Структура - Структура - Произвольная структура данных
// Возвращаемое значение:
// 	Строка - Текст JSON
Функция ОбъектВТекстJSON(Структура) Экспорт
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, "  ");
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	ЗаписатьJSON(ЗаписьJSON, Структура);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

#КонецОбласти

#Область HTTPЗапросы

// Структура результата HTTP запроса
// 
// Параметры:
// Возвращаемое значение:
// 	Структура - Результат HTTP-запроса:
// * КодСостояния - Число        - Код состояния HTTP
// * Заголовки    - Соответствие - Заголовки HTTP ответа
// * ТекстОтвета  - Строка       - Текст ответа
// * ТекстОшибки  - Строка       - Текст ошибки
Функция РезультатHTTPЗапроса() Экспорт
	
	РезультатHTTPЗапроса = Новый Структура;
	РезультатHTTPЗапроса.Вставить("КодСостояния");
	РезультатHTTPЗапроса.Вставить("Заголовки");
	РезультатHTTPЗапроса.Вставить("ТекстОтвета");
	РезультатHTTPЗапроса.Вставить("ТекстОшибки");	
	
	Возврат РезультатHTTPЗапроса;
	
КонецФункции

// Инициализирует структуру результата обработки HTTP-запроса после получения ответа.
// 
// Параметры:
// 	ТекстВходящегоСообщенияJSON - Строка - Текст входящего сообщения.
// 	КодСостояния                - Число  - Код состояния.
// 
// Возвращаемое значение:
// Структура - Структура со свойствами:
//   ЗапросОтправлен             - Булево - признак того, что сообщеие отправлено.
//   ОтветПолучен                - Булево - признак того, что сообщение обработано сервером.
//   КодСостояния                - Число  - Код состояния HTTP-запроса.
//   ТекстОшибки                 - Строка - текст ошибки, если таковая возникла.
//   ТекстВходящегоСообщенияJSON - Строка - текст ответа, на отправленное сообщение.
//
Функция HTTPОтветПолучен(ТекстВходящегоСообщенияJSON, КодСостояния = 200, КакФайл = Ложь)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ЗапросОтправлен",             Истина);
	ВозвращаемоеЗначение.Вставить("ОтветПолучен",                Истина);
	
	ВозвращаемоеЗначение.Вставить("КодСостояния",                КодСостояния);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                 "");
	
	Если КакФайл Тогда
		ВозвращаемоеЗначение.Вставить("ИмяФайла",                    ТекстВходящегоСообщенияJSON);
	Иначе
		Объект = ТекстJSONВОбъект(ТекстВходящегоСообщенияJSON, Истина);
		Если Объект <> Неопределено Тогда
			ВозвращаемоеЗначение.Вставить("ТекстВходящегоСообщенияJSON", ОбъектВТекстJSON(Объект));
		Иначе
			ВозвращаемоеЗначение.Вставить("ТекстВходящегоСообщенияJSON", ТекстВходящегоСообщенияJSON);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Инициализирует структуру результата обработки HTTP-запроса после отправки сообщения, но до получения ответа.
// 
// Возвращаемое значение:
// Структура:
//   ЗапросОтправлен             - Булево - признак того, что сообщеие отправлено.
//   ОтветПолучен                - Булево - признак того, что сообщение получено.
//   КодСостояния                - Число  - Код состояния HTTP-запроса.
//   ТекстОшибки                 - Строка - текст ошибки, если таковая возникла.
//   ТекстВходящегоСообщенияJSON - Строка - текст ответа, на отправленное сообщение.
//
Функция HTTPОтветНеПолучен(Ошибка, ЗапросОтправлен, КодСостояния = Неопределено, КакФайл = Ложь)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ЗапросОтправлен",             ЗапросОтправлен);
	ВозвращаемоеЗначение.Вставить("ОтветПолучен",                Ложь);
	
	ВозвращаемоеЗначение.Вставить("КодСостояния",                КодСостояния);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                 Строка(Ошибка));
	
	Если КакФайл Тогда
		ВозвращаемоеЗначение.Вставить("ИмяФайла", "");
	Иначе
		ВозвращаемоеЗначение.Вставить("ТекстВходящегоСообщенияJSON", "");
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Обработать результат отправки HTTP-запроса к сервису ИС МОТП.
// 
// Параметры:
// 	HTTPОтвет   - HTTPОтвет - HTTP-ответ
// 	ТекстОшибки - Строка    - Текст ошибки
// Возвращаемое значение:
// Структура - Результат отправки HTTP-запроса:
//  * ЗапросОтправлен             - Булево - признак того, что сообщеие отправлено.
//  * ОтветПолучен                - Булево - признак того, что сообщение получено.
//  * КодСостояния                - Число  - Код состояния HTTP-запроса.
//  * ТекстОшибки                 - Строка - текст ошибки, если таковая возникла.
//  * ТекстВходящегоСообщенияJSON - Строка - текст ответа, на отправленное сообщение.
Функция ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(HTTPОтвет, Знач ТекстОшибки) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	РезультатОтправкиHTTPЗапроса = РезультатHTTPЗапроса();
	РезультатОтправкиHTTPЗапроса.ТекстОшибки = ТекстОшибки;
	Если HTTPОтвет <> Неопределено Тогда
		РезультатОтправкиHTTPЗапроса.КодСостояния = HTTPОтвет.КодСостояния;
		РезультатОтправкиHTTPЗапроса.Заголовки    = HTTPОтвет.Заголовки;
		РезультатОтправкиHTTPЗапроса.ТекстОтвета  = HTTPОтвет.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	КодСостояния = РезультатОтправкиHTTPЗапроса.КодСостояния;
	ТекстОтвета  = РезультатОтправкиHTTPЗапроса.ТекстОтвета;
	
	Если ЗначениеЗаполнено(ТекстОтвета) Тогда
		
		ВозвращаемоеЗначение = HTTPОтветПолучен(ТекстОтвета, КодСостояния);
		
	Иначе
		
		Если Не ЗначениеЗаполнено(КодСостояния) Тогда
			ТекстСообщенияXMLОтправлен = Ложь;
			ЗаголовокОшибки = НСтр("ru = 'HTTP-запрос не отправлен.'");
		Иначе
			ТекстСообщенияXMLОтправлен = Истина;
			ЗаголовокОшибки = СтрШаблон(НСтр("ru = 'Код состояния HTTP: %1.'"), КодСостояния);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатОтправкиHTTPЗапроса.ТекстОшибки) Тогда
			ТекстОшибки = ЗаголовокОшибки + Символы.ПС + РезультатОтправкиHTTPЗапроса.ТекстОшибки;
		Иначе
			ТекстОшибки = ЗаголовокОшибки;
		КонецЕсли;
		
		ВозвращаемоеЗначение = HTTPОтветНеПолучен(
			ТекстОшибки,
			ТекстСообщенияXMLОтправлен,
			КодСостояния);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

Функция ЗаписатьЗначениеСвойства(Объект, СтруктураСвойства) Экспорт    
	
	Если Не ЗначениеЗаполнено(Объект)
		Или Не ЗначениеЗаполнено(СтруктураСвойства.Свойство)
		Или Не ЗначениеЗаполнено(СтруктураСвойства.Значение) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		
		МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		
		МенеджерЗаписи.Объект = Объект;
		МенеджерЗаписи.Свойство = СтруктураСвойства.Свойство;
		МенеджерЗаписи.Значение = СтруктураСвойства.Значение;
		
		МенеджерЗаписи.Записать();
		
	Исключение
    	Возврат Ложь; 
	КонецПопытки;
	
    Возврат Истина; 
	
КонецФункции

Функция ПолучитьЗначениеСвойства(Объект, Свойство) Экспорт
	
	Результат = Неопределено; 
	
	Если Не ЗначениеЗаполнено(Объект) Или Не ЗначениеЗаполнено(Свойство)
		Или ТипЗнч(Свойство) <> Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЭтоДополнительноеСведение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Свойство, "ЭтоДополнительноеСведение");
	
	Если ЭтоДополнительноеСведение Тогда 
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗначенияСвойствОбъектов.Значение
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Свойство = &Свойство
		|	И ЗначенияСвойствОбъектов.Объект = &Объект";
		
		Запрос.УстановитьПараметр("Объект", Объект);
		Запрос.УстановитьПараметр("Свойство", Свойство);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат = Выборка.Значение;
		КонецЕсли;
		
	Иначе
		
		Попытка   
			для Каждого СтрокаДР из Объект.ДополнительныеРеквизиты Цикл 
				Если СтрокаДР.Свойство = Свойство Тогда
					Результат = СтрокаДР.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла; 
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НайтиОбъект(Свойство, Значение) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1 Объект ИЗ РегистрСведений.ДополнительныеСведения ГДЕ Свойство = &Свойство И Значение = &Значение");
		
	Запрос.УстановитьПараметр("Свойство", Свойство);
	Запрос.УстановитьПараметр("Значение", Значение);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Результат = Выборка.Объект;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьВременныеТаблицыПоЗаказам(МассивДанных) Экспорт
	
	ОбщийЗапрос = Новый Запрос;
	
	ОбщийЗапрос.УстановитьПараметр("МассивДанных", МассивДанных);
	
	МенеджерВременныхТаблицДокументов 	= Новый МенеджерВременныхТаблиц;
	ОбщийЗапрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицДокументов;
	
	ОбщийЗапрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ДокУпаковочныйЛист.Ссылка) КАК УпаковочныйЛист,
	|	ДокУпаковочныйЛист.гф_Комплектация КАК ВариантКомплектации,
	|	ДокУпаковочныйЛист.гф_Заказ КАК ЗаказКлиента 
	|ПОМЕСТИТЬ ВтУпаковочныеЛисты
	|ИЗ
	|	Документ.УпаковочныйЛист КАК ДокУпаковочныйЛист
	|ГДЕ
	|	ДокУпаковочныйЛист.гф_Заказ В(&МассивДанных)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокУпаковочныйЛист.гф_Заказ,
	|	ДокУпаковочныйЛист.гф_Комплектация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказТоварыВКоробах.Ссылка КАК Документ,
	|	ЗаказТоварыВКоробах.ВариантКомплектации.Владелец КАК Номенклатура,
	|	ЗаказТоварыВКоробах.ВариантКомплектации.Характеристика КАК Характеристика, 
	|	ЗаказТоварыВКоробах.ВариантКомплектации.Наименование КАК Артикул, 
	|	ЗаказТоварыВКоробах.Количество КАК Количество,
	|	ЗаказТоварыВКоробах.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказТоварыВКоробах.СуммаНДС КАК СуммаНДС,
	|	ЗаказТоварыВКоробах.Сумма КАК Сумма,
	|	ЗаказТоварыВКоробах.ЦенаКороба КАК Цена,
	|	НЕ УпаковочныеЛисты.УпаковочныйЛист ЕСТЬ NULL КАК Зарезервирован 
	|ПОМЕСТИТЬ ВтТоварыВКоробах
	|ИЗ
	|	Документ.ЗаказКлиента.гф_ТоварыВКоробах КАК ЗаказТоварыВКоробах
	|   
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтУпаковочныеЛисты КАК УпаковочныеЛисты
	|			ПО ЗаказТоварыВКоробах.Ссылка = УпаковочныеЛисты.ЗаказКлиента
	|			 И ЗаказТоварыВКоробах.ВариантКомплектации = УпаковочныеЛисты.ВариантКомплектации
	|
	|ГДЕ
	|	ЗаказТоварыВКоробах.Ссылка В(&МассивДанных)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяТовары.Ссылка КАК Документ,
	|	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяТовары.Характеристика КАК Характеристика, 
	|
	|	Строка(ЗаказПокупателяТовары.Номенклатура.Наименование)
	| 	+
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяТовары.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		ТОГДА ""/"" + Строка(ЗаказПокупателяТовары.Характеристика.Наименование)
	|		ИНАЧЕ """"
	|   КОНЕЦ КАК Артикул,
	|
	|	ЗаказПокупателяТовары.Количество КАК Количество,
	|	ЗаказПокупателяТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказПокупателяТовары.СуммаНДС КАК СуммаНДС,
	|	ЗаказПокупателяТовары.Сумма КАК Сумма,
	|	ЗаказПокупателяТовары.Цена КАК Цена
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказПокупателяТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТоварыВКоробах КАК ВтТоварыВКоробах
	|		ПО ЗаказПокупателяТовары.Ссылка = ВтТоварыВКоробах.Документ
	|ГДЕ
	|	ЗаказПокупателяТовары.Ссылка В(&МассивДанных)
	|	И ВтТоварыВКоробах.Документ ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтТоварыВКоробах.Документ КАК Документ,
	|	ВтТоварыВКоробах.Номенклатура КАК Номенклатура,
	|	ВтТоварыВКоробах.Характеристика КАК Характеристика, 
	|	ВтТоварыВКоробах.Артикул КАК Артикул, 
	|	ВтТоварыВКоробах.Количество КАК Количество,
	|	ВтТоварыВКоробах.СтавкаНДС КАК СтавкаНДС,
	|	ВтТоварыВКоробах.СуммаНДС КАК СуммаНДС,
	|	ВтТоварыВКоробах.Сумма КАК Сумма,
	|	ВтТоварыВКоробах.Цена КАК Цена,
	|	ВтТоварыВКоробах.Зарезервирован КАК Зарезервирован
	|ПОМЕСТИТЬ ТабТовары
	|ИЗ
	|	ВтТоварыВКоробах КАК ВтТоварыВКоробах
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтТовары.Документ,
	|	ВтТовары.Номенклатура,
	|	ВтТовары.Характеристика, 
	|	ВтТовары.Артикул, 
	|	ВтТовары.Количество,
	|	ВтТовары.СтавкаНДС,
	|	ВтТовары.СуммаНДС,
	|	ВтТовары.Сумма,
	|	ВтТовары.Цена,
	|	ЛОЖЬ
	|ИЗ
	|	ВтТовары КАК ВтТовары";
	
	ОбщийЗапрос.Выполнить();	
	
	Возврат МенеджерВременныхТаблицДокументов;
	
КонецФункции

Процедура ВыгрузитьДокументы(НастройкиПодключения, МассивДокументов) Экспорт
	
	АдресСервера    = НастройкиПодключения.Получить("АдресСервера");
	Логин 			= НастройкиПодключения.Получить("Логин");
	Пароль       	= НастройкиПодключения.Получить("Пароль");
	
	лМенеджерВременныхТаблиц 	= СформироватьВременныеТаблицыПоЗаказам(МассивДокументов);

	МассивВыгруженных = Новый Массив();
	Для каждого ТекДокумент из МассивДокументов Цикл
			
		СтруктураДокумента = ВыгрузитьЗаказ(лМенеджерВременныхТаблиц, ТекДокумент);
		МассивВыгруженных.Добавить(СтруктураДокумента);
		
	КонецЦикла;
	
	ТелоЗапросаJSON = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(МассивВыгруженных);
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");

	HTTPЗапрос  = Новый HTTPЗапрос("local/service/UpdateOrderInfo/", ЗаголовокHTTP);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапросаJSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	ЗащищенноеСоединение = ИнтеграцияИСПовтИсп.ЗащищенноеСоединение();
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			АдресСервера,
			,
			Логин,
			Пароль,
			,
			60, ЗащищенноеСоединение);
		
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Сообщить(НСтр("ru='Ошибка отправки информации по заказу'") + Символы.ПС +
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Возврат;
		
	КонецПопытки;
	
	РезультатОтправкиЗапроса = B2B_ОбщиеПроцедурыИФункции.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(
		HTTPОтвет, ТекстОшибки);
		
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
						
			Сообщить("Документы успешно обновлены! "+ СтруктураДокумента.ORDER_ID);     
			
			ЗаписьЖурналаРегистрации("ОбменB2B.UpdateOrderInfo", УровеньЖурналаРегистрации.Информация,,,РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			
		Иначе
			
			Сообщить(ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				НСтр("ru='Отправка данных о заказе'"),
				РезультатОтправкиЗапроса));
				
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		Сообщить(СтрШаблон(
			НСтр("ru='Данные о заказе не отправлены.
				     |Текст ошибки: %1'"),
			РезультатОтправкиЗапроса.ТекстОшибки));
			
		Возврат;
		
	КонецЕсли;

	
КонецПроцедуры

Процедура ВыгрузитьДокументы1(НастройкиПодключения, МассивДокументов) Экспорт
	
	АдресСервера    = НастройкиПодключения.Получить("АдресСервера");
	Логин 			= НастройкиПодключения.Получить("Логин");
	Пароль       	= НастройкиПодключения.Получить("Пароль");
	
	лМенеджерВременныхТаблиц 	= СформироватьВременныеТаблицыПоЗаказам(МассивДокументов);

	МассивВыгруженных = Новый Массив();
	Для каждого ТекДокумент из МассивДокументов Цикл
				
		СтруктураДокумента = ВыгрузитьЗаказ(лМенеджерВременныхТаблиц, ТекДокумент, 1);
		МассивВыгруженных.Добавить(СтруктураДокумента);
		
	КонецЦикла;
	
	ТелоЗапросаJSON = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(МассивВыгруженных);
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");

	HTTPЗапрос  = Новый HTTPЗапрос("local/service/CreateOrder/", ЗаголовокHTTP);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапросаJSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	ЗащищенноеСоединение = ИнтеграцияИСПовтИсп.ЗащищенноеСоединение();
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			АдресСервера,
			,
			Логин,
			Пароль,
			,
			60, ЗащищенноеСоединение);
		
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Сообщить(НСтр("ru='Ошибка отправки информации по заказу'") + Символы.ПС +
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Возврат;
		
	КонецПопытки;
	
	РезультатОтправкиЗапроса = B2B_ОбщиеПроцедурыИФункции.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(
		HTTPОтвет, ТекстОшибки);
		
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ОбъектРез = ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			Если ОбъектРез.Получить("ERROR") <> Неопределено Тогда
				
			  
				
				Сообщить(СтрШаблон(
					НСтр("ru='Данные о заказе не отправлены.
						     |Текст ошибки: %1'"),
					ОбъектРез["ERROR"]["0"]));
				
			Иначе
				
				Для каждого Строка Из ОбъектРез["ORDER"] Цикл 
					
					Гуид = Строка.Значение["ORDER_XML_ID"];
					Док = Документы.ЗаказКлиента.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(Гуид)));
					
					СтруктураСвойства = Новый Структура;
					СтруктураСвойства.Вставить("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("B2B_НомерЗаказа"));
					СтруктураСвойства.Вставить("Значение", Строка.Значение["ORDER_ID_IMPORT"]);
					ЗаписатьЗначениеСвойства(Док, СтруктураСвойства);
					
				КонецЦикла;
							
				Сообщить("Документы успешно созданы!!");
			КонецЕсли;
			
		Иначе
			
			Сообщить(ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				НСтр("ru='Отправка данных о заказе'"),
				РезультатОтправкиЗапроса));
				
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		Сообщить(СтрШаблон(
			НСтр("ru='Данные о заказе не отправлены.
				     |Текст ошибки: %1'"),
			РезультатОтправкиЗапроса.ТекстОшибки));
			
		Возврат;
		
	КонецЕсли;

	
КонецПроцедуры

Функция ПолучитьИдТовараДляСайта(Номенклатура, Характеристика = Неопределено) Экспорт
	
	АртикулНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "Артикул");
	
	Если Не ЗначениеЗаполнено(АртикулНоменклатуры) Тогда
		
		Возврат НовыйИдТовараДляСайта(Номенклатура, Характеристика);
		
	КонецЕсли;
	
	Результат = "";
	
	//сначала ищем в СЭ ТипНоменклатуры по артикулу
	СтарыйЭлемент = Справочники.B2B_СЭ_ТипНоменклатуры.НайтиПоРеквизиту("Артикул", АртикулНоменклатуры); 
	Если ЗначениеЗаполнено(СтарыйЭлемент) Тогда
		
		Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтарыйЭлемент, "GUID"); 
		
		//теперь ищем характеристику 
		ПолныйАртикул = АртикулНоменклатуры;
		Если ЗначениеЗаполнено(Характеристика) Тогда
			ПолныйАртикул = ПолныйАртикул + "/" + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Характеристика, "Наименование");
		КонецЕсли;
		
		СтараяХарактеристика = Справочники.B2B_СправочникНоменклатураУПП.НайтиПоРеквизиту("Артикул", ПолныйАртикул);
		
		Если ЗначениеЗаполнено(СтараяХарактеристика) Тогда
			
			Результат = Результат + "#" + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтараяХарактеристика, "GUID"); 
			
		ИначеЕсли ЗначениеЗаполнено(Характеристика) Тогда
			
			Результат = Результат + "#" + Строка(Характеристика.УникальныйИдентификатор());
			
		КонецЕсли;
			
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Результат = НовыйИдТовараДляСайта(Номенклатура, Характеристика);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НовыйИдТовараДляСайта(Номенклатура, Характеристика = Неопределено)
	
	НовыйИдентификатор = Строка(Номенклатура.УникальныйИдентификатор());
	Если ЗначениеЗаполнено(Характеристика) Тогда
		НовыйИдентификатор = НовыйИдентификатор + "#" + Строка(Характеристика.УникальныйИдентификатор());  
	КонецЕсли; 
	
	Возврат НовыйИдентификатор;
	
КонецФункции

Функция НоменклатураИХарактеристикаПоИдентифиатору(ИдентификаторСРешеткой, ВходнойАртикул = "") Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Номенклатура",   Справочники.Номенклатура.ПустаяСсылка());
	Результат.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
	РазделенныеИдентификаторы = СтрРазделить(ИдентификаторСРешеткой, "#");
	Если РазделенныеИдентификаторы.Количество() < 2 Тогда
		Возврат Результат;	
	КонецЕсли;
	ИдентификаторНоменклатуры   = РазделенныеИдентификаторы[0];
	ИдентификаторХарактеристики = РазделенныеИдентификаторы[1];
	
	Если ЗначениеЗаполнено(ИдентификаторНоменклатуры) Тогда
		
		СтарыйЭлемент = Справочники.B2B_СЭ_ТипНоменклатуры.НайтиПоРеквизиту("GUID", ИдентификаторНоменклатуры);
		
		Если ЗначениеЗаполнено(СтарыйЭлемент) Тогда 
			
			АртикулНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтарыйЭлемент, "Артикул");
			Результат["Номенклатура"] = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", АртикулНоменклатуры);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Результат["Номенклатура"]) Тогда
			
			УникИдентификатор = Новый УникальныйИдентификатор(ИдентификаторНоменклатуры); 
			НоменклатураСсылка = Справочники.Номенклатура.ПолучитьСсылку(УникИдентификатор);
			НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
			Если НоменклатураОбъект <> Неопределено Тогда
				Результат["Номенклатура"] = НоменклатураСсылка;	
			КонецЕсли;
			
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(Результат["Номенклатура"]) И ВходнойАртикул <> "" Тогда 
			
			ВходныеАртикулы = СтрРазделить(ВходнойАртикул, "/");
			Если ВходныеАртикулы.Количество() = 2 Тогда
				Результат["Номенклатура"] = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", ВходныеАртикулы[0]);
			КонецЕсли;
	
		КонецЕсли;
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ИдентификаторХарактеристики) Тогда
		
		СтараяХарактеристика = Справочники.B2B_СправочникНоменклатураУПП.НайтиПоРеквизиту("GUID", ИдентификаторХарактеристики);
		
		Если ЗначениеЗаполнено(СтараяХарактеристика) Тогда 
			
			ПолныйАртикул = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтараяХарактеристика, "Артикул"); 
			РазделенныеАртикулы = СтрРазделить(ПолныйАртикул, "/");
			Если РазделенныеАртикулы.Количество() = 2 Тогда
				Результат["Характеристика"] = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(РазделенныеАртикулы[1], 1);	
			КонецЕсли;
			
		КонецЕсли;
			
		Если Не ЗначениеЗаполнено(Результат["Характеристика"]) Тогда
			
			УникИдентификатор = Новый УникальныйИдентификатор(ИдентификаторХарактеристики); 
			ХарактеристикаСсылка = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(УникИдентификатор);
			ХарактеристикаОбъект = ХарактеристикаСсылка.ПолучитьОбъект();
			Если ХарактеристикаОбъект <> Неопределено Тогда
				Результат["Характеристика"] = ХарактеристикаСсылка;	
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Результат["Характеристика"]) И ВходнойАртикул <> "" Тогда 
			
			ВходныеАртикулы = СтрРазделить(ВходнойАртикул, "/");
			Если ВходныеАртикулы.Количество() = 2 Тогда
				Результат["Характеристика"] = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(ВходныеАртикулы[1], 1);	
			КонецЕсли;
	
		КонецЕсли;
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ВыгрузитьЗаказ(МенеджерВременныхТаблиц, ТекЗаказ, ВариантВыгрузки = 0)
	
	Результат = Новый Структура;
	
	РеквизитыШапки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекЗаказ, "Номер, Контрагент, гф_АдресДоставки, ЦенаВключаетНДС,
		|Договор, ДатаОтгрузки, RC_ИмяЗаказа, Склад");
	
	Результат.Вставить("ORDER_ID", СокрЛП(РеквизитыШапки.Номер));
	Результат.Вставить("ORDER_XML_ID", СокрЛП(ТекЗаказ.УникальныйИдентификатор()));
	
	B2B_НомерЗаказа = ПолучитьЗначениеСвойства(ТекЗаказ, ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("B2B_НомерЗаказа"));
	Результат.Вставить("ORDER_ID_IMPORT", СокрЛП(Формат(B2B_НомерЗаказа, "ЧГ=0")));

//1БЦ++ работы по задаче 32798
//	Результат.Вставить("STATUS", СокрЛП(ПолучитьСтатусЗаказа(ТекЗаказ)));
	Статус = ПолучитьСтатусЗаказа(ТекЗаказ,Истина);
	Результат.Вставить("STATUS",СокрЛП(Статус.Статус));
	Результат.Вставить("STATUS_DATA",Статус.Дата);
//1БЦ-- работы по задаче 32798

	КонтрагентGLN_номер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыШапки.Контрагент, "гф_GLN_номер");
	Результат.Вставить("PARTNER_XML_ID", СокрЛП(КонтрагентGLN_номер));
	
	АдресДоставкиGLN_номер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыШапки.гф_АдресДоставки, "GLNНомер");
	Результат.Вставить("ADDRESS_XML_ID", Формат(СокрЛП(АдресДоставкиGLN_номер), "ЧГ=0"));
	
	ДоговорНомер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыШапки.Договор, "Номер");
	Результат.Вставить("DOGOVOR_NUMBER", ДоговорНомер);
	
	Результат.Вставить("DATE_DELIVERY", РеквизитыШапки.ДатаОтгрузки);
	
	Если ВариантВыгрузки = 1 Тогда
		
		Результат.Вставить("NAME_ORDER", РеквизитыШапки.RC_ИмяЗаказа);
		
		ОсновноеКЛ = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();   
		Для каждого стр из ТекЗаказ.Контрагент.B2B_КонтактныеЛицаПоОрганизациям Цикл
			Если стр.Организация = ТекЗаказ.Организация И
				Не стр.ОсновноеКонтактноеЛицо.Пустая() Тогда
				ОсновноеКЛ = стр.ОсновноеКонтактноеЛицо;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Ид_ОсновноеКЛ = ?(ЗначениеЗаполнено(ОсновноеКЛ), СокрЛП(ПолучитьЗначениеСвойства(ОсновноеКЛ, ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("B2B_ИД_КонтактногоЛица"))), "");
		Результат.Вставить("REPRESENTATIV", Новый Структура("XML_ID", Ид_ОсновноеКЛ));
		
		КЛ = ТекЗаказ.КонтактноеЛицо;
		Ид_КЛ = ?(ЗначениеЗаполнено(КЛ), СокрЛП(ПолучитьЗначениеСвойства(КЛ, ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("B2B_ИД_КонтактногоЛица"))), "");
		Результат.Вставить("BUYER_XML_ID ", СокрЛП(Ид_КЛ));
		
	КонецЕсли;

	Результат.Вставить("PRODUCTS", Новый Массив());
	               
	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросПоТоварам.Текст = "ВЫБРАТЬ *
	|ИЗ
	|	ТабТовары КАК ВремТабТоваров
	|ГДЕ
	|	ВремТабТоваров.Документ = &Документ";
	ЗапросПоТоварам.УстановитьПараметр("Документ", ТекЗаказ);
	ВыборкаНоменклатуры = ЗапросПоТоварам.Выполнить().Выбрать();
	
	Пока ВыборкаНоменклатуры.Следующий() Цикл
		
		СтруктураТЧ = Новый Структура;
		
		//СтруктураТЧ.Вставить("CML2_ARTICLE", СокрЛП(ТекНоменклатура.Номенклатура.Артикул));   
		//Если НЕ ТекНоменклатура.Характеристика.Пустая() Тогда
		//	СтруктураТЧ.CML2_ARTICLE = СтруктураТЧ.CML2_ARTICLE+"/"+ТекНоменклатура.Характеристика.Наименование;
		//КонецЕсли;
		СтруктураТЧ.Вставить("CML2_ARTICLE", СокрЛП(ВыборкаНоменклатуры.Артикул));   
		
		//СтруктураТЧ.Вставить("XML_ID", XMLСтрока(ТекНоменклатура.Номенклатура.СЭ_ТипНоменклатуры) + "#" +XMLСтрока(ТекНоменклатура.Номенклатура));
		СтруктураТЧ.Вставить("XML_ID", ПолучитьИдТовараДляСайта(ВыборкаНоменклатуры.Номенклатура, ВыборкаНоменклатуры.Характеристика));
		
		СтруктураТЧ.Вставить("QUANTITY", СокрЛП(Формат(ВыборкаНоменклатуры.Количество, "ЧГ=0")));
				
		Всего = ?(РеквизитыШапки.ЦенаВключаетНДС, ВыборкаНоменклатуры.Сумма, ВыборкаНоменклатуры.Сумма + ВыборкаНоменклатуры.СуммаНДС);
		
		PRICE = ?(ВыборкаНоменклатуры.Количество = 0, Всего, Всего / ВыборкаНоменклатуры.Количество);
		
		СтавкаНДС_Ставка = ВыборкаНоменклатуры.СтавкаНДС.Ставка;
		
		BASE_PRICE = ?(РеквизитыШапки.ЦенаВключаетНДС, ВыборкаНоменклатуры.Цена,
			ВыборкаНоменклатуры.Цена + ВыборкаНоменклатуры.Цена / 100 * СтавкаНДС_Ставка);
			
		DISCOUNT_PRICE = BASE_PRICE * ВыборкаНоменклатуры.Количество - Всего;
		VAT_RATE = СтавкаНДС_Ставка / 100;
		VAT_INCLUDED  = ?(РеквизитыШапки.ЦенаВключаетНДС,1,0);
		
		СтруктураТЧ.Вставить("PRICE",          СокрЛП(Формат(PRICE, "ЧГ=0")));
        СтруктураТЧ.Вставить("BASE_PRICE",     СокрЛП(Формат(BASE_PRICE, "ЧГ=0")));
		СтруктураТЧ.Вставить("DISCOUNT_PRICE", СокрЛП(Формат(DISCOUNT_PRICE, "ЧГ=0")));
		СтруктураТЧ.Вставить("VAT_RATE",       СокрЛП(Формат(VAT_RATE, "ЧГ=0")));
		СтруктураТЧ.Вставить("VAT_INCLUDED",   СокрЛП(Формат(VAT_INCLUDED, "ЧГ=0")));
		
		Если ВариантВыгрузки = 0 Тогда
			//1БЦ++ 31929
			СтруктураТЧ.Вставить("RESERV", ВыборкаНоменклатуры.Зарезервирован);
			//1БЦ-- 31929
		КонецЕсли;
	
		Результат.PRODUCTS.Добавить(СтруктураТЧ);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ВыгрузитьСтатусы(НастройкиПодключения, МассивДокументов) Экспорт
	
	АдресСервера    = НастройкиПодключения.Получить("АдресСервера");
	Логин 			= НастройкиПодключения.Получить("Логин");
	Пароль       	= НастройкиПодключения.Получить("Пароль");

	ТелоЗапроса = Новый Массив();
	
	Для Каждого ТекЗаказ из МассивДокументов Цикл
//1БЦ++ работы по задаче 32798
//		Структура = Новый Структура("ORDER_XML_ID, STATUS");
		Структура = Новый Структура("ORDER_XML_ID, STATUS, STATUS_DATA");
//1БЦ работы по задаче 32798
		Структура.ORDER_XML_ID = СокрЛП(ТекЗаказ.Ссылка.УникальныйИдентификатор());
//1БЦ++ работы по задаче 32798
//		Структура.STATUS = СокрЛП(ПолучитьСтатусЗаказа(ТекЗаказ));
		Статус = ПолучитьСтатусЗаказа(ТекЗаказ,Истина);
		Структура.STATUS = СокрЛП(Статус.Статус);
		Структура.STATUS_DATA = Статус.Дата;
//1БЦ-- работы по задаче 32798
		ТелоЗапроса.Добавить(Структура);
	КонецЦикла;
	
	ТелоЗапросаJSON = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапроса);
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");

	HTTPЗапрос  = Новый HTTPЗапрос("local/service/UpdateOrderStatus/", ЗаголовокHTTP);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапросаJSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	ЗащищенноеСоединение = ИнтеграцияИСПовтИсп.ЗащищенноеСоединение();
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			АдресСервера,
			,
			Логин,
			Пароль,
			,
			60, ЗащищенноеСоединение);
		
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Сообщить(НСтр("ru='Ошибка отправки информации по статусам'") + Символы.ПС +
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Возврат;
		
	КонецПопытки;
	
	РезультатОтправкиЗапроса = B2B_ОбщиеПроцедурыИФункции.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(
		HTTPОтвет, ТекстОшибки);
		
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
						
			Сообщить("Статус успешно обновлен!");
			
		Иначе
			
			Сообщить(ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				НСтр("ru='Отправка данных о статусах'"),
				РезультатОтправкиЗапроса));
				
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		Сообщить(СтрШаблон(
			НСтр("ru='Данные о статусах не отправлены.
				     |Текст ошибки: %1'"),
			РезультатОтправкиЗапроса.ТекстОшибки));
			
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаОстатковПоСпискуНоменклатуры() Экспорт
	
	Возврат
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК КМ
	|ПОМЕСТИТЬ ВтШтрихкоды
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.Номенклатура В (&МассивНоменклатуры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныеШтрихкоды.Ссылка
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ВложенныеШтрихкоды
	|ГДЕ
	|	ВложенныеШтрихкоды.Штрихкод.Номенклатура В (&МассивНоменклатуры)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвижениеКодовМаркировкиОрганизацииОстатки.КМ.Номенклатура КАК Номенклатура,
	|	ДвижениеКодовМаркировкиОрганизацииОстатки.КМ.Характеристика КАК Характеристика,
	|	ДвижениеКодовМаркировкиОрганизацииОстатки.КМ КАК КМ,
	|	ДвижениеКодовМаркировкиОрганизацииОстатки.Склад КАК Склад,
	|	СУММА(ДвижениеКодовМаркировкиОрганизацииОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ПОМЕСТИТЬ ВтДвижениеКодовМаркировкиОстатки
	|ИЗ
	|	РегистрНакопления.гф_ДвижениеКодовМаркировкиОрганизации.Остатки(, КМ В (ВЫБРАТЬ Т.КМ ИЗ ВтШтрихкоды КАК Т)
	|		И Склад В (ВЫБРАТЬ СкладыОстатков.Склад ИЗ РегистрСведений.B2B_СоответствиеСкладВидНоменклатуры КАК СкладыОстатков)) КАК ДвижениеКодовМаркировкиОрганизацииОстатки
	|
	|СГРУППИРОВАТЬ ПО 
	|	ДвижениеКодовМаркировкиОрганизацииОстатки.Склад,
	|	ДвижениеКодовМаркировкиОрганизацииОстатки.КМ
	|
	|ИМЕЮЩИЕ
	|	СУММА(ДвижениеКодовМаркировкиОрганизацииОстатки.КоличествоОстаток) > 0
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
    |	ДокументУпаковочныйЛист.Ссылка КАК УпаковочныйЛист, 
    |	ДокументУпаковочныйЛист.гф_Агрегация КАК Агрегация, 
    |	ДокументУпаковочныйЛист.гф_Комплектация.Владелец КАК Номенклатура,
    |	ДокументУпаковочныйЛист.гф_Комплектация.Характеристика КАК Характеристика
    |ПОМЕСТИТЬ ПервыйОтбор
    |ИЗ
    |	Документ.УпаковочныйЛист КАК ДокументУпаковочныйЛист
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист.Товары КАК ТоварыСНазначениями
	|			ПО ДокументУпаковочныйЛист.Ссылка = ТоварыСНазначениями.Ссылка
	|				И ТоварыСНазначениями.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|
	|ГДЕ
    |	ДокументУпаковочныйЛист.гф_Комплектация.Владелец В (&МассивНоменклатуры)
    |	И ДокументУпаковочныйЛист.гф_Заказ = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
	|	И ТоварыСНазначениями.Номенклатура ЕСТЬ NULL
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ПервыйОтбор.Номенклатура КАК Номенклатура,
    |	ПервыйОтбор.Характеристика КАК Характеристика,
    |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПервыйОтбор.УпаковочныйЛист) КАК КоличествоКоробов
	|ПОМЕСТИТЬ ВтОстатки
	|ИЗ
    |	ВтДвижениеКодовМаркировкиОстатки КАК гф_ДвижениеКодовМаркировкиОрганизацииОстатки
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПервыйОтбор КАК ПервыйОтбор
    |		ПО гф_ДвижениеКодовМаркировкиОрганизацииОстатки.КМ = ПервыйОтбор.Агрегация
    |
    |СГРУППИРОВАТЬ ПО
    |	ПервыйОтбор.Номенклатура,
    |	ПервыйОтбор.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправочникВариантов.Владелец КАК Номенклатура,
	|	СправочникВариантов.Характеристика КАК Характеристика,
	|	СправочникВариантов.Владелец.Артикул + ВЫБОР
	|		КОГДА СправочникВариантов.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ""/"" + СправочникВариантов.Характеристика.Наименование
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПолныйАртикул,
	|	ЕСТЬNULL(Остатки.КоличествоКоробов, 0) КАК КоличествоКоробов
	|ИЗ
	|	Справочник.ВариантыКомплектацииНоменклатуры КАК СправочникВариантов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОстатки КАК Остатки
	|			ПО СправочникВариантов.Владелец = Остатки.Номенклатура
	|			 И СправочникВариантов.Характеристика = Остатки.Характеристика
	|ГДЕ 
	|	НЕ СправочникВариантов.ПометкаУдаления
	|	И СправочникВариантов.Владелец В (&МассивНоменклатуры)";
	
КонецФункции

Процедура ВыгрузитьОстатки(НастройкиПодключения, МассивНоменклатуры) Экспорт
	
	АдресСервера    = НастройкиПодключения.Получить("АдресСервера");
	Логин 			= НастройкиПодключения.Получить("Логин");
	Пароль       	= НастройкиПодключения.Получить("Пароль");

	ТелоЗапроса = Новый Массив();
	
	Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	Остатки.Номенклатура КАК Номенклатура,
	//|	СУММА(Остатки.КоличествоОстаток) КАК КоличествоОстаток
	//|ПОМЕСТИТЬ ВремТоварыНаСкладахОстатки
	//|ИЗ
	//|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	//|			,
	//|			Номенклатура В (&МассивНоменклатуры)
	//|				И Склад В
	//|					(ВЫБРАТЬ
	//|						СкладОстатков.Склад КАК Склад
	//|					ИЗ
	//|						РегистрСведений.B2B_СоответствиеСкладВидНоменклатуры КАК СкладОстатков)
	//|				И Качество = ЗНАЧЕНИЕ(Справочник.Качество.Новый)) КАК Остатки
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	Остатки.Номенклатура
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	Остатки.Номенклатура КАК Номенклатура,
	//|	СУММА(Остатки.КоличествоОстаток) КАК КоличествоОстаток
	//|ПОМЕСТИТЬ ВремТоварыВРезервеНаСкладахОстатки
	//|ИЗ
	//|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(
	//|			,
	//|			Номенклатура В (&МассивНоменклатуры)
	//|				И Склад В
	//|					(ВЫБРАТЬ
	//|						СкладОстатков.Склад КАК Склад
	//|					ИЗ
	//|						РегистрСведений.B2B_СоответствиеСкладВидНоменклатуры КАК СкладОстатков)) КАК Остатки
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	Остатки.Номенклатура
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	Остатки.Номенклатура КАК Номенклатура,
	//|	СУММА(Остатки.КоличествоОстаток) КАК КоличествоОстаток
	//|ПОМЕСТИТЬ ВремТоварыКПередачеСоСкладовОстатки
	//|ИЗ
	//|	РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(
	//|			,
	//|			Номенклатура В (&МассивНоменклатуры)
	//|				И Склад В
	//|					(ВЫБРАТЬ
	//|						СкладОстатков.Склад КАК Склад
	//|					ИЗ
	//|						РегистрСведений.B2B_СоответствиеСкладВидНоменклатуры КАК СкладОстатков)
	//|				И Качество = ЗНАЧЕНИЕ(Справочник.Качество.Новый)) КАК Остатки
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	Остатки.Номенклатура
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ТоварыНаСкладах.Номенклатура КАК Номенклатура,
	//|	ЕСТЬNULL(ТоварыНаСкладах.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыВРезервеНаСкладах.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыКПередачеСоСкладов.КоличествоОстаток, 0) КАК Количество 
	//|ИЗ
	//|	ВремТоварыНаСкладахОстатки КАК ТоварыНаСкладах
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВремТоварыВРезервеНаСкладахОстатки КАК ТоварыВРезервеНаСкладах
	//|		ПО ТоварыНаСкладах.Номенклатура = ТоварыВРезервеНаСкладах.Номенклатура
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВремТоварыКПередачеСоСкладовОстатки КАК ТоварыКПередачеСоСкладов
	//|		ПО ТоварыНаСкладах.Номенклатура = ТоварыКПередачеСоСкладов.Номенклатура
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|УНИЧТОЖИТЬ ВремТоварыНаСкладахОстатки
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|УНИЧТОЖИТЬ ВремТоварыВРезервеНаСкладахОстатки
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|УНИЧТОЖИТЬ ВремТоварыКПередачеСоСкладовОстатки";
	
	Запрос.Текст = ТекстЗапросаОстатковПоСпискуНоменклатуры();
	
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураОстатки = Новый Структура;
		
		ИдТовара = ПолучитьИдТовараДляСайта(Выборка.Номенклатура, Выборка.Характеристика);
		СтруктураОстатки.Вставить("XML_ID", ИдТовара);
		
		СтруктураОстатки.Вставить("QUANTITY", Выборка.КоличествоКоробов);
		
		ТелоЗапроса.Добавить(СтруктураОстатки); 
		
	КонецЦикла;

	ТелоЗапросаJSON = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапроса);
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");

	HTTPЗапрос  = Новый HTTPЗапрос("local/service/PutAvailableStockInformation/", ЗаголовокHTTP);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапросаJSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	ЗащищенноеСоединение = ИнтеграцияИСПовтИсп.ЗащищенноеСоединение();
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			АдресСервера,
			,
			Логин,
			Пароль,
			,
			60, ЗащищенноеСоединение);
		
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Сообщить(НСтр("ru='Ошибка отправки информации по остаткам'") + Символы.ПС +
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Возврат;
		
	КонецПопытки;
	
	РезультатОтправкиЗапроса = B2B_ОбщиеПроцедурыИФункции.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(
		HTTPОтвет, ТекстОшибки);
		
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
						
			Сообщить("Данные успешно отправлены!");
			
		Иначе
			
			Сообщить(ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				НСтр("ru='Отправка данных об остатках'"),
				РезультатОтправкиЗапроса));
				
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		Сообщить(СтрШаблон(
			НСтр("ru='Данные об остатках не отправлены.
				     |Текст ошибки: %1'"),
			РезультатОтправкиЗапроса.ТекстОшибки));
			
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

//Функция ПолучитьСтатусЗаказа(Заказ) Экспорт
Функция ПолучитьСтатусЗаказа(Заказ, ВариантСоСтатусомОтгруженИДатой = Ложь) Экспорт
	//Функция скорректирована в рамках задачи 32798, добавлено получение статуса "Отгружен, и даты статуса", но так как функция вызывается из многих мест, 
	//и возможно из внешних обработок - для совместимости добавлен параметр ВариантСоСтатусомОтгруженИДатой. Если он не установлен - возвращается
	//как и раньше только статус строкой, если установлен в истину - то структура со статусом и датой возникновения. Старый код закоментирован
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	B2B_СтатусыЗаказов.СтатусЗаказа КАК Статус
	//|ИЗ
	//|	РегистрСведений.B2B_СтатусыЗаказов.СрезПоследних КАК B2B_СтатусыЗаказов
	//|ГДЕ
	//|	B2B_СтатусыЗаказов.ЗаказПокупателя = &Заказ";
	//
	//Запрос.УстановитьПараметр("Заказ", Заказ);
	//
	//Рез = Запрос.Выполнить().Выбрать();
	//
	//Если Рез.Следующий() Тогда
	//	Возврат Рез.Статус.ИмяПредопределенныхДанных;
	//КонецЕсли;
	//
	//Возврат Справочники.B2B_СтатусыЗаказов.Новый.ИмяПредопределенныхДанных;  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	//|	""Отгружен"" КАК Статус, Период КАК Период
	//|ИЗ
	//|	РегистрСведений.RC_СтатусОтгрузки.СрезПоследних(, Документ.CRM_Основание = &Заказ) КАК RC_СтатусОтгрузки
	//|ГДЕ
	//|	RC_СтатусОтгрузки.Статус = Истина
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	|	B2B_СтатусыЗаказов.СтатусЗаказа КАК Статус, Период КАК Период	
	|ИЗ
	|	РегистрСведений.B2B_СтатусыЗаказов.СрезПоследних(,ЗаказПокупателя = &Заказ) КАК B2B_СтатусыЗаказов";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	Рез = Запрос.Выполнить().Выбрать();
	Если ВариантСоСтатусомОтгруженИДатой Тогда 
		Если Рез.Следующий() Тогда
			Если Рез.Статус = "Отгружен" Тогда
				Возврат Новый Структура("Статус,Дата","Отгружен",Рез.Период);
			Иначе     
				Возврат Новый Структура("Статус,Дата",Рез.Статус.ИмяПредопределенныхДанных,Рез.Период);
				
			КонецЕсли;
		КонецЕсли;
		Возврат Новый Структура("Статус,Дата",Справочники.гф_В2ВСтатусЗаказаКлиента.Новый.ИмяПредопределенныхДанных,ТекущаяДата());
	Иначе                                                                       
		//Здесь как раз код для совместимости возвращаемых данных, если придет вызов по старому
		Если Рез.Следующий() Тогда
			Если Рез.Статус = "Отгружен" Тогда
				Возврат "Отгружен";
			Иначе
				Возврат Рез.Статус.ИмяПредопределенныхДанных;
			КонецЕсли;
		КонецЕсли;
		Возврат Справочники.гф_В2ВСтатусЗаказаКлиента.Новый.ИмяПредопределенныхДанных; 
	КонецЕсли;
	
	
КонецФункции

Функция КлючПортала(ПорталСсылка)
	
	Если ЗначениеЗаполнено(ПорталСсылка) Тогда
		Результат = Строка(ПорталСсылка.УникальныйИдентификатор());	
	Иначе
		Результат = "";	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура СохранитьНастройкиПодключенияПортал(НастройкиПодключения, ПорталСсылка) Экспорт
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("B2B_НастройкаПодключения", КлючПортала(ПорталСсылка), НастройкиПодключения,, "web");	
	
КонецПроцедуры

Функция ВосстановитьНастройкиПодключенияПортал(ПорталСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина); 
	
	НастройкиПодключения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("B2B_НастройкаПодключения", КлючПортала(ПорталСсылка),,, "web");
	
	Возврат НастройкиПодключения;
	
КонецФункции  

Процедура ВыгрузитьСпецификацию(НастройкиПодключения, МассивДокументов) Экспорт
	АдресСервера    = НастройкиПодключения.Получить("АдресСервера");
	Логин 			= НастройкиПодключения.Получить("Логин");
	Пароль       	= НастройкиПодключения.Получить("Пароль");
	
	ТелоЗапроса = Новый Массив();
	
	Для Каждого ТекЗаказ из МассивДокументов Цикл
		Структура = Новый Структура("ORDER_XML_ID, SPECIFICATION_1");
		Структура.ORDER_XML_ID = СокрЛП(ТекЗаказ.Ссылка.УникальныйИдентификатор());
		
		ТабДок = ТекЗаказ.ПолучитьОбъект().B2B_ПечатьСпецификации();	
		ИмяФайла = ПолучитьИмяВременногоФайла("pdf");
		ТабДок.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.PDF);
		ДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
		base64 = Base64Строка(ДанныеФайла);
		
		Структура.SPECIFICATION_1 = "data:application/pdf;base64, " + base64;
		ТелоЗапроса.Добавить(Структура);
	КонецЦикла;
	
	ТелоЗапросаJSON = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапроса);
		
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	
	HTTPЗапрос  = Новый HTTPЗапрос("local/service/DocumentUpdate/", ЗаголовокHTTP);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапросаJSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	ЗащищенноеСоединение = ИнтеграцияИСПовтИсп.ЗащищенноеСоединение();
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
		АдресСервера,
		,
		Логин,
		Пароль,
		,
		60, ЗащищенноеСоединение);
		
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Сообщить(НСтр("ru='Ошибка отправки спецификации'") + Символы.ПС +
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат;
		
	КонецПопытки;
	
	РезультатОтправкиЗапроса = B2B_ОбщиеПроцедурыИФункции.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(
	HTTPОтвет, ТекстОшибки);
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда 
			
			Для Каждого ТекЗаказ из МассивДокументов Цикл
				СтруктураСвойства = Новый Структура;
				СтруктураСвойства.Вставить("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("B2B_ДатаОтправки_Спец1"));
				СтруктураСвойства.Вставить("Значение", ТекущаяДата());
				ЗаписатьЗначениеСвойства(ТекЗаказ, СтруктураСвойства);
			КонецЦикла;
			
			Сообщить("Спецификация успешно отправлена!");
			
		Иначе
			
			Сообщить(ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			НСтр("ru='Отправка данных о спецификации'"),
			РезультатОтправкиЗапроса));
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		Сообщить(СтрШаблон(
		НСтр("ru='Данные о спецификации не отправлены.
		|Текст ошибки: %1'"),
		РезультатОтправкиЗапроса.ТекстОшибки));
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьОбщуюСпецификацию(НастройкиПодключения, МассивДокументов) Экспорт
	
	АдресСервера    = НастройкиПодключения.Получить("АдресСервера");
	Логин 			= НастройкиПодключения.Получить("Логин");
	Пароль       	= НастройкиПодключения.Получить("Пароль");
	
	ТелоЗапроса = Новый Массив();
	
	Для Каждого ТекЗаказ из МассивДокументов Цикл
		Структура = Новый Структура("ORDER_XML_ID, SPECIFICATION_2");
		Структура.ORDER_XML_ID = СокрЛП(ТекЗаказ.Ссылка.УникальныйИдентификатор());
		
		ТабДок = ПолучитьОбщуюСпецификацию(ТекЗаказ);	
		ИмяФайла = ПолучитьИмяВременногоФайла("xls");
		ТабДок.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.xls);
		ДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
		base64 = Base64Строка(ДанныеФайла);
		
		Структура.SPECIFICATION_2 = "data:application/xls;base64, " + base64;
		ТелоЗапроса.Добавить(Структура);
	КонецЦикла;
	
	ТелоЗапросаJSON = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапроса);
		
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	
	HTTPЗапрос  = Новый HTTPЗапрос("local/service/DocumentUpdate/", ЗаголовокHTTP);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапросаJSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	ЗащищенноеСоединение = ИнтеграцияИСПовтИсп.ЗащищенноеСоединение();
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
		АдресСервера,
		,
		Логин,
		Пароль,
		,
		60, ЗащищенноеСоединение);
		
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Сообщить(НСтр("ru='Ошибка отправки общей спецификации'") + Символы.ПС +
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат;
		
	КонецПопытки;
	
	РезультатОтправкиЗапроса = B2B_ОбщиеПроцедурыИФункции.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(
	HTTPОтвет, ТекстОшибки);
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда 
			
			Для Каждого ТекЗаказ из МассивДокументов Цикл
				СтруктураСвойства = Новый Структура;
				СтруктураСвойства.Вставить("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("B2B_ДатаОтправки_Спец2"));
				СтруктураСвойства.Вставить("Значение", ТекущаяДата());
				ЗаписатьЗначениеСвойства(ТекЗаказ, СтруктураСвойства);
			КонецЦикла;
			
			Сообщить("Спецификация общая успешно отправлена!");
			
		Иначе
			
			Сообщить(ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			НСтр("ru='Отправка данных об общей спецификации'"),
			РезультатОтправкиЗапроса));
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		Сообщить(СтрШаблон(
		НСтр("ru='Данные об общей спецификации не отправлены.
		|Текст ошибки: %1'"),
		РезультатОтправкиЗапроса.ТекстОшибки));
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьОбщуюСпецификацию(Заказ)
	
	ДвоичныеДанные = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Формирование общей спецификации").ХранилищеВнешнейОбработки.Получить();
	Если ДвоичныеДанные = Неопределено Тогда
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	ТабДокумент = Неопределено;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("erf");
	ДвоичныеДанные.Записать(ИмяФайла);
	Обработка = ВнешниеОтчеты.Создать(ИмяФайла);
	
	Форма = Обработка.ПолучитьФорму("ВнешнийОтчет.ФормированиеОбщейСпецификации_МС.Форма");
	
	Стр = Форма.ТаблицаДокументы.Добавить();
	Стр.Пометка = Истина;
	Стр.Документ = Заказ;
	Стр.Контрагент  = Заказ.Контрагент;
	Стр.ДоговорКонтрагента  = Заказ.ДоговорКонтрагента;
	Стр.СкладОтправитель  = Заказ.СкладГруппа;
	
	Обработка.Контрагент = Заказ.Контрагент;
	Форма.Контрагент = Заказ.Контрагент;
	
	Форма.ДатаНачала = НачалоМесяца(Заказ.Дата);
	Форма.ДатаОкончания = КонецМесяца(Заказ.Дата);
	
	СхемаКомпоновки = Обработка.ПолучитьМакет("ВыборНоменклатуры");
	Форма.КомпоновщикОтбораНоменклатуры.Инициализировать(новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
	Форма.КомпоновщикОтбораНоменклатуры.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
	
	ПараметрыДанных = ФОрма.КомпоновщикНастроек.Настройки.ПараметрыДанных;
	ПараметрыДанных.УстановитьЗначениеПараметра("ТипЦенОптовая", Справочники.w_Настройки.ТипЦенОптовая.Значение);
	ПараметрыДанных.УстановитьЗначениеПараметра("ТипЦенРозничная", Справочники.w_Настройки.ТипЦенРозничная.Значение);
	
	
	Форма.ВидДокумента = 2;
	
	Возврат Форма.Сформировать();	
	
КонецФункции

Функция ПолучитьСчет(Ссылка)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетНаОплатуПокупателю.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|ГДЕ
	|	СчетНаОплатуПокупателю.ЗаказПокупателя = &ЗаказПокупателя";
	
	Запрос.УстановитьПараметр("ЗаказПокупателя", Ссылка);
	
	Рез = Запрос.Выполнить().Выбрать();
	
	Если Рез.Следующий() Тогда
		Возврат Рез.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция ПолучитьПечатнуюФормуДокумента(ТекДокумент) Экспорт
    МД = Метаданные.НайтиПоТипу(ТипЗнч(ТекДокумент));
    ТекВид = МД.Имя;

    МассивОбъектов = Новый Массив();
    МассивОбъектов.Добавить(ТекДокумент);
    ПараметрыПечати = Новый Структура(); //»ДополнитьКомплектВнешнимиПечатнымиФормами» = ложь
    ДопустимыеТипыОбъектовПечати = Неопределено;

    Если ТекВид = "ЗаказКлиента" Тогда
        ИмяМенеджераПечати = "Обработка.ПечатьСчетаНаОплату";
        ИменаМакетов = "СчетЗаказ";
    ИначеЕсли ТекВид = "АктСверкиВзаиморасчетов" Тогда
        ИмяМенеджераПечати = "Документ.АктСверкиВзаиморасчетов";
        ИменаМакетов = "АктСверки";
    ИначеЕсли ТекВид = "РеализацияТоваровУслуг" Тогда
        ИмяМенеджераПечати = "Документ.РеализацияТоваровУслуг";
        ИменаМакетов = "Накладная";
        //ИменаМакетов = «Акт»;//Для акта
    Иначе
        Возврат Неопределено;
    КонецЕсли;

    ПечатныеФормы = УправлениеПечатью.СформироватьПечатныеФормы(ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ПараметрыПечати, ДопустимыеТипыОбъектовПечати);

    Возврат ПечатныеФормы.КоллекцияПечатныхФорм[0].ТабличныйДокумент;
КонецФункции

Процедура ВыгрузитьСчета(НастройкиПодключения, МассивДокументов) Экспорт
	
	АдресСервера    = НастройкиПодключения.Получить("АдресСервера");
	Логин 			= НастройкиПодключения.Получить("Логин");
	Пароль       	= НастройкиПодключения.Получить("Пароль");
	
	ТелоЗапроса = Новый Массив(); 

	МассивСчетов = Новый Массив();
	
	Для Каждого ТекЗаказ из МассивДокументов Цикл
		
		Счет = ПолучитьСчет(ТекЗаказ);
		Если Не ЗначениеЗаполнено(Счет) Тогда
			Сообщить("Не найден счет по заказу: " + ТекЗаказ);
			Продолжить;
		КонецЕсли;  
		
		МассивСчетов.Добавить(Счет);
		
		Структура = Новый Структура("ORDER_XML_ID, BILL");
		Структура.ORDER_XML_ID = СокрЛП(ТекЗаказ.Ссылка.УникальныйИдентификатор());
		
		//ТабДок = Счет.ПолучитьОбъект().литПечатьСчетаЗаказа("Счет");
		//ТабДок.АвтоМасштаб = Истина;     
		
		
		
		//ДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Счет,Неопределено);
		//СтрМакета1 = ДеревоМакетов.Строки.Найти("Счет на оплату (Штамп) консолидированный (Группировка по заказам)");
		//
		//ТабДок = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Счет, СтрМакета1.Расшифровка);
		ТабДок = ПолучитьПечатнуюФормуДокумента(Счет);
		ТабДок.АвтоМасштаб = Истина;
		
		ИмяФайла = ПолучитьИмяВременногоФайла("pdf");
		ТабДок.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.PDF);
		ДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
		base64 = Base64Строка(ДанныеФайла);
		
		Структура.BILL = "data:application/pdf;base64, " + base64;
		ТелоЗапроса.Добавить(Структура);
	КонецЦикла;
	
	ТелоЗапросаJSON = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапроса);
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	
	HTTPЗапрос  = Новый HTTPЗапрос("local/service/DocumentUpdate/", ЗаголовокHTTP);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапросаJSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	ЗащищенноеСоединение = ИнтеграцияИСПовтИсп.ЗащищенноеСоединение();
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
		АдресСервера,
		,
		Логин,
		Пароль,
		,
		60, ЗащищенноеСоединение);
		
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Сообщить(НСтр("ru='Ошибка отправки счетов'") + Символы.ПС +
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат;
		
	КонецПопытки;
	
	РезультатОтправкиЗапроса = B2B_ОбщиеПроцедурыИФункции.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(
	HTTPОтвет, ТекстОшибки);
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда 
			
			Для Каждого ТекСчет из МассивСчетов Цикл
				СтруктураСвойства = Новый Структура;
				СтруктураСвойства.Вставить("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("B2B_ДатаОтправкиСчет"));
				СтруктураСвойства.Вставить("Значение", ТекущаяДата());
				ЗаписатьЗначениеСвойства(ТекСчет, СтруктураСвойства);
			КонецЦикла;
			
			Сообщить("Данные счета успешно отправлены!");
			
		Иначе
			
			Сообщить(ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			НСтр("ru='Отправка данных по счету'"),
			РезультатОтправкиЗапроса));
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		Сообщить(СтрШаблон(
		НСтр("ru='Данные по счету не отправлены.
		|Текст ошибки: %1'"),
		РезультатОтправкиЗапроса.ТекстОшибки));
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьРазмерныйРяд(Номенклатура) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КомплектующиеНоменклатуры.Комплектующая КАК Комплектующая,
	|	КомплектующиеНоменклатуры.Количество КАК Количество,
	|	ЗначенияСвойствОбъектов.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО КомплектующиеНоменклатуры.Комплектующая = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = &Свойство)
	|ГДЕ
	|	КомплектующиеНоменклатуры.Номенклатура = &Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Значение";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Свойство", Справочники.w_Настройки.Свойство_Size.Значение);
	
	Рез = Запрос.Выполнить().Выгрузить();
	
	РР = "";
	Для Каждого Строка Из Рез Цикл
		РР = РР + Строка.Значение+"-"+Строка.Количество+"|";		
	КонецЦикла;
	
	Возврат РР;
	
КонецФункции

Функция ПолучитьРазмерныйРядДляФильтра(Номенклатура) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КомплектующиеНоменклатуры.Комплектующая КАК Комплектующая,
	|	КомплектующиеНоменклатуры.Количество КАК Количество,
	|	ЗначенияСвойствОбъектов.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО КомплектующиеНоменклатуры.Комплектующая = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = &Свойство)
	|ГДЕ
	|	КомплектующиеНоменклатуры.Номенклатура = &Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Значение";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Свойство", Справочники.w_Настройки.Свойство_Size.Значение);
	
	Рез = Запрос.Выполнить().Выгрузить();
	
	Миним = 0;
	Максим = 0;
	врРез = "";
	Для Каждого Строка Из Рез Цикл
		Попытка
			врЧисло = Число(Строка.Значение);
			
			Если Миним > врЧисло ИЛИ Миним = 0 Тогда
				Миним = врЧисло;
			КонецЕсли;	
			
			Если Максим < врЧисло  Тогда
				Максим = врЧисло;
			КонецЕсли;
		Исключение
			
		КонецПопытки;
	КонецЦикла;  
	Если Миним <> 0 или Максим <> 0 Тогда
		врРез = Строка(Миним) + "-" +Строка(Максим);
	КонецЕсли;   
	
	Возврат врРез;
		
КонецФункции

//1БЦ++ МГ 31839
Функция ПолучитьСкидкуПоДоговоруНаДату(ДоговорКонтрагента, Сезон, Период, ТипСкидки)  Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(Скидки.Скидка, 0) КАК Скидка
	|ИЗ
	|	(ВЫБРАТЬ
	|		w_СкидкиКлиентаПоДоговоруСрезПоследних.ТипСкидки КАК ТипСкидки,
	|		w_СкидкиКлиентаПоДоговоруСрезПоследних.Скидка КАК Скидка
	|	ИЗ
	|		РегистрСведений.B2B_w_СкидкиКлиентаПоДоговору.СрезПоследних(
	|				&ТекДата,
	|				ДоговорКонтрагента = &ДоговорКонтрагента
	|					И Сезон = &Сезон
	|					И ТипСкидки = &ТипСкидки) КАК w_СкидкиКлиентаПоДоговоруСрезПоследних) КАК Скидки";
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сезон", Сезон);
	Запрос.УстановитьПараметр("ТекДата", Период);
	Запрос.УстановитьПараметр("ТипСкидки", ТипСкидки);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();	
	Если РезультатЗапроса.Следующий() Тогда 
		Возврат РезультатЗапроса.Скидка;
	Иначе      
		Возврат 0;
	КонецЕсли;
	
КонецФункции    
//1БЦ-- МГ 31839

Функция ПорталЗаказа(ЗаказСсылка) Экспорт
	
	Портал = Справочники.B2B_Портал.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказТоварыВКоробах.ВариантКомплектации.Владелец.B2B_Портал КАК Портал
	|ИЗ
	|	Документ.ЗаказКлиента.гф_ТоварыВКоробах КАК ЗаказТоварыВКоробах
	|ГДЕ
	|	ЗаказТоварыВКоробах.Ссылка = &Ссылка
	|	И ЗаказТоварыВКоробах.ВариантКомплектации.Владелец.B2B_Портал <> ЗНАЧЕНИЕ(Справочник.B2B_Портал.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Ссылка", ЗаказСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаказТовары.Номенклатура.B2B_Портал КАК Портал
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК ЗаказТовары
		|ГДЕ
		|	ЗаказТовары.Ссылка = &Ссылка
		|	И ЗаказТовары.Номенклатура.B2B_Портал <> ЗНАЧЕНИЕ(Справочник.B2B_Портал.ПустаяСсылка)"; 
		РезультатЗапроса = Запрос.Выполнить();
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Портал = Выборка["Портал"]; 	
	КонецЕсли;
	
	Возврат Портал;
	
КонецФункции
