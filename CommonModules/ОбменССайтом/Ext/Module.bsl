&Вместо("ВыгрузитьКаталог")
Функция B2B_ВыгрузитьКаталог(Параметры, СтрокаТаблицыКаталога, ТаблицаИнформации, КаталогИПакетПредложений = Ложь)
	
	ИндексФайлаОбмена	= Параметры.ИндексФайлаОбмена;
	ВыполнятьОбмен 		= Истина;
	ВыгруженоУспешно	= Истина;
	ПерваяПорция 		= Истина;
	СтруктураРезультата	= Параметры.СтруктураРезультата;
	ТолькоИзменения 	= Параметры.ВыгружатьИзменения;
	
	Если КаталогИПакетПредложений Тогда
		
		СхемаКомпоновки = ПланыОбмена.ОбменССайтом.ПолучитьМакет("СхемаВыгрузкиКаталогПакетПредложений");
		
		КомпоновщикНастроек = ПолучитьКомпоновщикНастроекСхемыКомпоновки(СхемаКомпоновки,
											СтрокаТаблицыКаталога.ХранилищеНастроекКаталогПакет);
		
	Иначе
		
		СхемаКомпоновки = ПланыОбмена.ОбменССайтом.ПолучитьМакет("СхемаВыгрузкиКаталог");
	
		КомпоновщикНастроек = ПолучитьКомпоновщикНастроекСхемыКомпоновки(СхемаКомпоновки,
											СтрокаТаблицыКаталога.ХранилищеНастроекКаталог);
	КонецЕсли;
	
	// Отборы.
	УстановитьОтборКомпоновщика(Параметры, СтрокаТаблицыКаталога, КомпоновщикНастроек);
	
	Если Параметры.ПрикладныеПараметры.ОграничитьКаталогДоступнымиПредложениями И КаталогИПакетПредложений Тогда 
		
		// Получаем данные для формирования "Пакета предложений".
		ОписаниеОшибки = "";
		ТаблицаДанныеПакетаПредложений = Новый ТаблицаЗначений;
		ПолучитьДанныеДляВыгрузкиПакетаПредложений(Параметры.ПрикладныеПараметры, КомпоновщикНастроек, ТаблицаДанныеПакетаПредложений, ОписаниеОшибки);
		
		ДоступнаяНоменклатура = Новый Массив;
		
		Если ЗначениеЗаполнено(ТаблицаДанныеПакетаПредложений) Тогда 
			ДоступнаяНоменклатура = ТаблицаДанныеПакетаПредложений.ВыгрузитьКолонку("Номенклатура"); 
		КонецЕсли;
		
		Отбор = КомпоновщикНастроек.Настройки.Отбор;
		
		НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлемент.ИдентификаторПользовательскойНастройки = "тест";
		НовыйЭлемент.ЛевоеЗначение =  Новый ПолеКомпоновкиДанных("Номенклатура");
		НовыйЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		НовыйЭлемент.ПравоеЗначение = ДоступнаяНоменклатура;
		НовыйЭлемент.Использование = Истина; 
		
	КонецЕсли;
	
	// Получаем данные для формирования "Каталога номенклатуры".
	ТаблицыДляВыгрузкиКаталога = Неопределено;
	ОписаниеОшибки = "";
	ПолучитьДанныеДляВыгрузкиКаталога(Параметры.ПрикладныеПараметры, КомпоновщикНастроек, ТаблицыДляВыгрузкиКаталога,
		ОписаниеОшибки);
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ОбменССайтомСобытия.ЗаписатьОшибку(ОписаниеОшибки, Параметры.УзелОбмена);
		Возврат Ложь;
	КонецЕсли;
		
	Если ТаблицыДляВыгрузкиКаталога.Номенклатура.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Заполняем данные Владельца каталога.
	ДанныеОрганизацииВладельцаКаталога = Неопределено;
	ЗаполнитьДанныеВладельцаКаталога(Параметры, ДанныеОрганизацииВладельцаКаталога);
	
	// Формируем дерево значений, которое будет содержать классификатор каталога.
	Классификатор = Неопределено;
	//ЗаполнитьКлассификатор(ТаблицыДляВыгрузкиКаталога.Номенклатура, Классификатор, Параметры.ПрикладныеПараметры);
	B2C_ЗаполнитьКлассификатор(ТаблицыДляВыгрузкиКаталога.Номенклатура, Классификатор, Параметры.ПрикладныеПараметры, Параметры.УзелОбмена,СтрокаТаблицыКаталога.ИдентификаторКаталога);
	
	// Формируем Выборку свойств номенклатуры для заполнения Классификатора.
	СвойстваНоменклатуры = Неопределено;
	ЗаполнитьСвойстваНоменклатуры(ТаблицыДляВыгрузкиКаталога.Свойства, СвойстваНоменклатуры);
	
	// Сначала формируем и отправляем классификатор,
	// если сайт его успешно загрузит,
	// то будем порциями отправлять каталог.
	
	URIПространстваИмен = "urn:1C.ru:commerceml_2";
	ПакетCML = ФабрикаXDTO.Пакеты.Получить(URIПространстваИмен);

	КоммерческаяИнформацияТип = ПакетCML.Получить("КоммерческаяИнформация");
	КоммерческаяИнформацияXDTO = ФабрикаXDTO.Создать(КоммерческаяИнформацияТип);
	
	// Сначала отправляем каталог.
	КоммерческаяИнформацияXDTO.ВерсияСхемы = ВерсияСхемы();
	КоммерческаяИнформацияXDTO.ДатаФормирования = Параметры.ДатаФормирования;
	
	КлассификаторТип = ПакетCML.Получить("Классификатор");
	КлассификаторXDTO = ФабрикаXDTO.Создать(КлассификаторТип);
	
	КлассификаторXDTO.ИД = СтрокаТаблицыКаталога.ИдентификаторКаталога;
	КлассификаторXDTO.Наименование = ФорматНаименованияДляXDTO("Классификатор (" + СтрокаТаблицыКаталога.Каталог + ")");
	
	Владелец = ПолучитьКонтрагентаXDTO(ДанныеОрганизацииВладельцаКаталога);
	Если Владелец = Неопределено Тогда
		
		ОписаниеИсключительнойОшибки = ОписаниеИсключительнойОшибки(
									НСтр("ru = 'Не удалось определить организацию владельца каталога';
										|en = 'Cannot determine directory owner company'")
									+ Символы.ПС + ОписаниеОшибки());
		
		ДобавитьОписаниеОшибки(СтруктураРезультата.ОписаниеОшибки, ОписаниеИсключительнойОшибки);
		СтруктураРезультата.ВыгруженоКартинок = 0;
		СтруктураРезультата.ВыгруженоТоваров = 0;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	КлассификаторXDTO.Владелец = Владелец;
	
	ДобавитьГруппыКлассификатораXDTO(КлассификаторXDTO, Классификатор.Строки, ПакетCML, Параметры.ПрикладныеПараметры);
	
	// Добавляем свойства номенклатуры.
	ДобавитьСвойстваНоменклатурыВКлассификаторXDTO(КлассификаторXDTO, ПакетCML, СвойстваНоменклатуры);
	
	КоммерческаяИнформацияXDTO.Классификатор = КлассификаторXDTO;
	
	ОписаниеОшибки = "";
	
	// Регистрируем номенклатуру в узле.
	КолонкаНоменклатуры = ТаблицыДляВыгрузкиКаталога.Номенклатура.ВыгрузитьКолонку("Номенклатура");
	МассивНоменклатуры = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивНоменклатуры, КолонкаНоменклатуры, Истина);
	Для Каждого ЭлементМассива Из МассивНоменклатуры Цикл
		ПланыОбмена.ЗарегистрироватьИзменения(Параметры.УзелОбмена, ЭлементМассива);
	КонецЦикла;
	
	УдалитьРегистрациюГруппТоваров(Параметры);
	
	// Помечаем зарегистрированную в узле номенклатуру номером сообщения 0.
	ПланыОбмена.ВыбратьИзменения(Параметры.УзелОбмена, 0, МассивНоменклатуры);
	
	ИндексПорции = 0;
	НомерСообщения = 1;
	НомерСообщенияСтарый = Неопределено;
	КоличествоПовторов = 0;
	
	СтрокаТаблицыИнформации = ТаблицаИнформации.Добавить();
	СтрокаТаблицыИнформации.ДействиеПриОбмене = Перечисления.ДействияПриОбменеССайтом.ВыгрузкаДанных;
	СтрокаТаблицыИнформации.Описание = Строка(ТекущаяДатаСеанса()) + " " + НСтр("ru = 'Запуск выгрузки товаров';
																				|en = 'Run product export'");
	
	ТаблицаДляФормированияКаталога =  ТаблицыДляВыгрузкиКаталога.Номенклатура.СкопироватьКолонки();
	ТаблицаДляФормированияКаталога.Колонки.Добавить("Файлы"); // в эту колонку поместим таблицу значений, содержащую файлы номенклатуры
	ТаблицаДляФормированияКаталога.Колонки.Добавить("Свойства"); // в эту колонку поместим таблицу значений, содержащую свойства номенклатуры
	
	ТекстСообщения = "ru = 'Завершена выгрузка товаров'";
	
	Пока ВыполнятьОбмен Цикл
		
		// Получаем порцию товаров.
		МассивНоменклатуры = НоменклатураУзла(Параметры.УзелОбмена, Параметры.РазмерПорции, 0);
		
		// Если в узле нет новых товаров, значит остались старые.
		Если МассивНоменклатуры.Количество() = 0 Тогда
		
			ТаблицаНоменклатуры = НоменклатураНомерСообщенияУзла(Параметры.УзелОбмена, Параметры.РазмерПорции);
			
			Если ТаблицаНоменклатуры.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если НомерСообщенияСтарый = ТаблицаНоменклатуры[0].НомерСообщения Тогда
				КоличествоПовторов = КоличествоПовторов + 1;
			КонецЕсли;
			
			// Если количество повторов больше заданного
			// прерываем обмен.
			Если КоличествоПовторов >= Параметры.КоличествоПовторов Тогда
				
				ВыполнятьОбмен = Ложь;
				
				Если Параметры.КоличествоПовторов > 0 Тогда
					ВыгруженоУспешно = Ложь;
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
			
			МассивНоменклатуры = ТаблицаНоменклатуры.ВыгрузитьКолонку("Номенклатура");
			НомерСообщенияСтарый = ТаблицаНоменклатуры[0].НомерСообщения;
			
		КонецЕсли;
		
		// Получаем данные номенклатуры для получения файла.
		ТаблицаДляФормированияКаталога.Очистить();
		
		// Т.к. данные в основной таблице хранятся в развернутом виде
		// (количество строк будет равно количеству прикрепленных файлов, например)
		// необходимо свернуть их по номенклатуре, характеристике , единице измерения.
		ЗаполнитьТаблицуДляОтправкиДаннымиНоменклатуры(МассивНоменклатуры, ТаблицыДляВыгрузкиКаталога,
																		ТаблицаДляФормированияКаталога);
		
		Если ТаблицаДляФормированияКаталога.Количество() = 0  Тогда
			Для Каждого ЭлементМассива Из МассивНоменклатуры Цикл
				ПланыОбмена.УдалитьРегистрациюИзменений(Параметры.УзелОбмена, ЭлементМассива);
			КонецЦикла;
			
			Продолжить;
		КонецЕсли;
		
		
		// Формируем файл с каталогом для отправки на сайт.
		КаталогТип = ПакетCML.Получить("Каталог");
		КаталогXDTO = ФабрикаXDTO.Создать(КаталогТип);
		
		КаталогXDTO.СодержитТолькоИзменения = Параметры.ВыгружатьИзменения Или (НомерСообщения > 1);
		
		
		КаталогXDTO.Ид = СтрокаТаблицыКаталога.ИдентификаторКаталога;
		КаталогXDTO.ИдКлассификатора = СтрокаТаблицыКаталога.ИдентификаторКаталога;
		КаталогXDTO.Наименование = ФорматНаименованияДляXDTO(СтрокаТаблицыКаталога.Каталог);
		
		КаталогXDTO.Владелец = ПолучитьКонтрагентаXDTO(ДанныеОрганизацииВладельцаКаталога);
		
		// Добавляем в каталог информацию о товарах.
		ДобавитьНоменклатуруВКаталогXDTO(КаталогXDTO, ПакетCML, Параметры, ТаблицаДляФормированияКаталога);
		
		КаталогXDTO.Проверить();
		
		Если НомерСообщения > 1 Тогда
			КоммерческаяИнформацияТип = ПакетCML.Получить("КоммерческаяИнформация");
			КоммерческаяИнформацияXDTO = ФабрикаXDTO.Создать(КоммерческаяИнформацияТип);
			
		КонецЕсли;
		
		КоммерческаяИнформацияXDTO.Каталог = КаталогXDTO;
		КоммерческаяИнформацияXDTO.ВерсияСхемы = ВерсияСхемы();
		КоммерческаяИнформацияXDTO.ДатаФормирования = Параметры.ДатаФормирования;

		ИндексПорции = ИндексПорции + 1;
		
		ИмяФайлаКаталога = ПодготовитьПутьДляПлатформы(Параметры.ПлатформаWindows,
				Параметры.КаталогНаДиске + "\import"
				+ ИндексФайлаОбмена +"_"
				+ ИндексПорции + ".xml");

		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ИмяФайлаКаталога, "UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		
		Попытка
			
			КоммерческаяИнформацияXDTO.Проверить();
			
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, КоммерческаяИнформацияXDTO, "КоммерческаяИнформация");
			ЗаписьXML.Закрыть();
			
		Исключение
			ОписаниеИсключительнойОшибки = ОписаниеИсключительнойОшибки(
				НСтр("ru = 'Не удалось записать XML-файл классификатора товаров на диск:';
					|en = 'Cannot save the goods classifier XML file to hard drive:'")
				+ " " + ИмяФайлаКаталога + Символы.ПС + ОписаниеОшибки());
				
			ДобавитьОписаниеОшибки(СтруктураРезультата.ОписаниеОшибки, ОписаниеИсключительнойОшибки);
			
			ДобавитьОписаниеОшибки(СтрокаТаблицыИнформации.Описание, СтруктураРезультата.ОписаниеОшибки);
			ЗафиксироватьЗавершениеВыгрузкиНоменклатуры(СтрокаТаблицыИнформации, Перечисления.РезультатыОбменаССайтом.Ошибка,
														ТекстСообщения);
			
			СтруктураРезультата.ВыгруженоКартинок = 0;
			СтруктураРезультата.ВыгруженоТоваров = 0;
			
			Возврат Ложь;
			
		КонецПопытки;
		
		// Отправляем файл на сайт.
		Если Параметры.ВыгружатьНаСайт Тогда
			
			ВыгруженоУспешно = ВыгрузитьДанныеНаСайт(Параметры, СтрокаТаблицыИнформации);
			
		Иначе
			ВыгруженоУспешно = Истина;
		КонецЕсли;
		
		// Если файл на сайт был загружен, удаляем регистрацию.
		Если ВыгруженоУспешно Тогда
			
			Для Каждого ЭлементМассива Из МассивНоменклатуры Цикл
				ПланыОбмена.УдалитьРегистрациюИзменений(Параметры.УзелОбмена, ЭлементМассива);
			КонецЦикла;
			
		Иначе
			
			// Если не был отправлен первый файл, который содержит классификатор
			// то не будем продолжать обмен, т.к. данные на сайт не загрузятся.
			Если НомерСообщения = 1 Тогда
				ВыполнятьОбмен = Ложь;
				Прервать;
			КонецЕсли;
						
			// Если мы имеем дело с данными, которые уже отправлялись на сайт, но не отправились
			// то не будем у них изменять номер сообщения.
			Если Не НомерСообщенияСтарый = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Если товары не были отправлены на сайт, то зарегистрируем их в узле
			// и пометим номером сообщения отличным от нуля.
			Для Каждого ЭлементМассива Из МассивНоменклатуры Цикл
				ПланыОбмена.ЗарегистрироватьИзменения(Параметры.УзелОбмена, ЭлементМассива);
			КонецЦикла;
			ПланыОбмена.ВыбратьИзменения(Параметры.УзелОбмена, НомерСообщения, МассивНоменклатуры);
			
		КонецЕсли;
		
		НомерСообщения = НомерСообщения + 1;
		
	КонецЦикла;
	
	Если ВыгруженоУспешно Тогда
		Результат = Перечисления.РезультатыОбменаССайтом.Выполнено;
	Иначе
		Результат = Перечисления.РезультатыОбменаССайтом.Ошибка;
	КонецЕсли;
	ЗафиксироватьЗавершениеВыгрузкиНоменклатуры(СтрокаТаблицыИнформации, Результат, ТекстСообщения);
	
	Возврат ВыгруженоУспешно;
	
	
КонецФункции

// Выполняет запуск обмена с сайтом.
//
// Параметры:
//  Параметры - Структура - настройки и данные для обмена.
//  РезультатОбмена - Структура - результат обмена товарами и заказами.
//  ТаблицаИнформации - ТаблицаЗначений - таблица, хранящая лог обмена.
//

&Вместо("ВыполнитьОбменССайтом")
Процедура B2B_ВыполнитьОбменССайтомЧерезJSON(Параметры, РезультатОбмена, ТаблицаИнформации) Экспорт

	ПлатформаWindows = ПлатформаWindows();
	Параметры.Вставить("ПлатформаWindows", ПлатформаWindows);
	
	КаталогВыгрузки = Параметры.КаталогВыгрузки;
	Если Параметры.ВыгружатьНаСайт Тогда
		
		КаталогВыгрузки = РаботаСФайламиБЭД.ВременныйКаталог();
		
	Иначе
		
		ПоследнийСимвол = Прав(КаталогВыгрузки, 1);
		
		Если НЕ ПоследнийСимвол = "\" Тогда
			КаталогВыгрузки = КаталогВыгрузки + "\";
		КонецЕсли;
		
	КонецЕсли;

	
	ПодкаталогБезопасностиКаталогаВыгрузки = "webdata";
	КаталогНаДиске = КаталогВыгрузки + ПодкаталогБезопасностиКаталогаВыгрузки;
	КаталогНаДиске = ПодготовитьПутьДляПлатформы(ПлатформаWindows, КаталогНаДиске);
	
	РезультатОбмена.Вставить("ТоварыВыгружены", Ложь);
	РезультатОбмена.Вставить("ВыполненОбменЗаказами", Ложь);
	
	Параметры.Вставить("КаталогНаДиске", КаталогНаДиске);
	
	Каталог = Новый Файл(КаталогНаДиске);
	Если Не Каталог.Существует() Тогда
		
		Попытка
			
			СоздатьКаталог(КаталогНаДиске);
			
		Исключение
			
			СтрокаТаблицыИнформации = ТаблицаИнформации.Добавить();
			СтрокаТаблицыИнформации.РезультатВыполненияОбмена = Перечисления.РезультатыОбменаССайтом.Ошибка;
			СтрокаТаблицыИнформации.Описание = ОписаниеИсключительнойОшибки();
			
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;
	
	ФайлЗагрузки = Параметры.ФайлЗагрузки;
	ФайлЗагрузки = ПодготовитьПутьДляПлатформы(ПлатформаWindows, ФайлЗагрузки);
	
	Параметры.Вставить("ФайлЗагрузки", ФайлЗагрузки);
	Параметры.Вставить("ПодкаталогФайлов", "import_files");
	Параметры.Вставить("ДатаФормирования", ТекущаяДатаСеанса());
	
	ПолучитьНастройкиПодключения(Параметры.НастройкиПодключения, "");
	ДобавитьПараметрыПротоколаОбменаВСтруктуру(Параметры.НастройкиПодключения);
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("ВыгруженоТоваров", 0);
	СтруктураРезультата.Вставить("ВыгруженоКартинок", 0);
	СтруктураРезультата.Вставить("ВыгруженоПредложений", 0);
	СтруктураРезультата.Вставить("Ошибка", Ложь);
	СтруктураРезультата.Вставить("ОписаниеОшибки", "");
	
	Параметры.Вставить("СтруктураРезультата", СтруктураРезультата);
	
	Если Параметры.ОбменТоварами Тогда 
		ТаблицаКаталогов = ПодготовитьТаблицуКаталогов(Параметры.УзелОбмена);
	Иначе
		ТаблицаКаталогов = Новый ТаблицаЗначений;
	КонецЕсли;
	ИндексФайлаОбмена = 0;
	ИндексФайлаОбменаСтрокой = "0";
	
	Успешно = Истина;
	
	Для Каждого СтрокаТаблицы Из ТаблицаКаталогов Цикл
		
		Если ИндексФайлаОбмена > 0 Тогда
			ИндексФайлаОбменаСтрокой = Формат(ИндексФайлаОбмена, "ЧГ=");
		КонецЕсли;
		
		ИндексФайлаОбмена = ИндексФайлаОбмена + 1;
		
		Параметры.Вставить("ИндексФайлаОбмена", ИндексФайлаОбменаСтрокой);
		
		
		//Вот тут вставляем свою выгрузку в JSON 
		Если Параметры.УзелОбмена.B2B_ОбменJSON Тогда
			
			Успешно = ПрямаяВыгрузкаВJSONНаСайт(Параметры, СтрокаТаблицы, ТаблицаИнформации);
		
		Иначе
			// Выгружаем каталог и пакет предложений.
			Если Параметры.ВыгружатьТовары И Параметры.ВыгружатьЦеныОстатки Тогда
				
				Успешно = ВыгрузитьКаталог(Параметры, СтрокаТаблицы, ТаблицаИнформации, Истина);
				Успешно = ВыгрузитьПакетПредложений(Параметры, СтрокаТаблицы, ТаблицаИнформации, Истина);
				
			// Выгружаем пакет предложений.
			ИначеЕсли Параметры.ВыгружатьТовары И Не Параметры.ВыгружатьЦеныОстатки Тогда
			
				Успешно = ВыгрузитьКаталог(Параметры, СтрокаТаблицы, ТаблицаИнформации);
				
			ИначеЕсли Параметры.ВыгружатьЦеныОстатки И Не Параметры.ВыгружатьТовары Тогда
				
				Успешно = ВыгрузитьПакетПредложений(Параметры, СтрокаТаблицы, ТаблицаИнформации);
				
			КонецЕсли;
			
			// Выгружаем обновление пакета предложений.
			Если Параметры.ВыгружатьОбновленияЦенИОстатков Тогда
				Успешно = ВыгрузитьОстаткиИЦены(Параметры, СтрокаТаблицы, ТаблицаИнформации);
			КонецЕсли; 
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатОбмена.ТоварыВыгружены = Успешно;
	
	Если НЕ Параметры.УзелОбмена.B2B_ОбменJSON Тогда
	
		ВыполненОбменЗаказами = ВыполнитьОбменЗаказами(Параметры, ТаблицаИнформации);
		
		РезультатОбмена.ВыполненОбменЗаказами = ВыполненОбменЗаказами;
		
		// Если выгружали напрямую на сайт, нужно удалить временный каталог.
		Если Параметры.ВыгружатьНаСайт Тогда
			Попытка
				УдалитьФайлы(КаталогВыгрузки);
			Исключение   
				
				СтрокаТаблицыИнформации = ТаблицаИнформации.Добавить();
				СтрокаТаблицыИнформации.РезультатВыполненияОбмена = Перечисления.РезультатыОбменаССайтом.Ошибка;
				СтрокаТаблицыИнформации.Описание = ОписаниеИсключительнойОшибки();
				
				Возврат;
			КонецПопытки;
		КонецЕсли; 
	Иначе
		                                                      
		Если Успешно Тогда
			
			Для Каждого ЭлементМассива Из Параметры.СтруктураИзменений.Товары Цикл
				ПланыОбмена.УдалитьРегистрациюИзменений(Параметры.УзелОбмена, ЭлементМассива);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры      

Функция ПрямаяВыгрузкаВJSONНаСайт(Параметры, СтрокаТаблицы, ТаблицаИнформации)
	
	//используем следующие параметры: 
	ПараметрыДляJSONОбмена = Новый Структура;
	
	ПараметрыДляJSONОбмена.Вставить("НаименованиеКаталога", СтрокаТаблицы.Каталог);
	ПараметрыДляJSONОбмена.Вставить("GUIDКаталога", СтрокаТаблицы.ИдентификаторКаталога);
	ПараметрыДляJSONОбмена.Вставить("АдресОтправки", Параметры.НастройкиПодключения.АдресСайта);
	ПараметрыДляJSONОбмена.Вставить("ИмяПользователя", Параметры.НастройкиПодключения.Пользователь);
	ПараметрыДляJSONОбмена.Вставить("Пароль", Параметры.НастройкиПодключения.Пароль);
	ПараметрыДляJSONОбмена.Вставить("ПланОбмена", Параметры.УзелОбмена);
	ПараметрыДляJSONОбмена.Вставить("B2B_Портал", Параметры.УзелОбмена.B2B_Портал);  
	
	тзТовары = Новый ТаблицаЗначений;                          
	тзТовары.Колонки.добавить("Номенклатура");
	тзТовары.Колонки.добавить("НомерПакета");  
	тзТовары.Колонки.добавить("Характеристики"); // это будет вложенная таблица характеристик для номенклатуры  
	тзТовары.Колонки.добавить("B2B_СЭ_ТипНоменклатуры"); 
    тзТовары.Колонки.добавить("Ид");
	
	КоличествоПроходов = 1;
	НомерТовараВПакете = 1;
	НомерПакета = 1;
	
	Для Каждого стр из Параметры.СтруктураИзменений.Товары Цикл   
		
		Если ТипЗнч(стр) <> Тип("СправочникСсылка.Номенклатура") Тогда
			Продолжить;
		КонецЕсли;
		
		НовСтр = тзТовары.Добавить();           
		НовСтр.Номенклатура = стр; 
		
		//определим ИД
		//это или ИД из старой справочника ТипыНоменклатуры, или если не задан Ид самой номенклатуры      
		
		ЭлементИсторическогоСправочника = Справочники.B2B_СЭ_ТипНоменклатуры.НайтиПоРеквизиту("Артикул",НовСтр.Номенклатура.Артикул);
		Если НЕ ЭлементИсторическогоСправочника.Пустая() Тогда
			НовСтр.ИД = ЭлементИсторическогоСправочника.GUID;    
			НовСтр.B2B_СЭ_ТипНоменклатуры = ЭлементИсторическогоСправочника;
		Иначе
			НовСтр.ИД = Строка(НовСтр.Номенклатура.УникальныйИдентификатор());	  
			НовСтр.B2B_СЭ_ТипНоменклатуры = Справочники.B2B_СЭ_ТипНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		
		Если НомерТовараВПакете > Параметры.РазмерПорции Тогда
			НомерТовараВПакете = 1;
			НомерПакета = НомерПакета + 1;
		КонецЕсли;
		НовСтр.НомерПакета = НомерПакета; 
		НомерТовараВПакете = НомерТовараВПакете + 1; 
		
	КонецЦикла;
	
	ПараметрыДляJSONОбмена.Вставить("Товары", тзТовары);
	ПараметрыДляJSONОбмена.Вставить("КоличествоТоваровВПакете", Параметры.РазмерПорции);
	
	СписокСвойствДляВыгрузки = Новый СписокЗначений;
	ТипыЦен =  Новый СписокЗначений;
	ОтборКаталога = СтрокаТаблицы.ХранилищеНастроекКаталогПакет.Получить().Отбор.Элементы;
	Для каждого ЭлементОтбора из ОтборКаталога Цикл
		Если Строка(ЭлементОтбора.ЛевоеЗначение) = "СвойствоНоменклатуры" Тогда
			СписокСвойствДляВыгрузки = ЭлементОтбора.ПравоеЗначение; 
		ИначеЕсли Строка(ЭлементОтбора.ЛевоеЗначение) = "ТипЦены" Тогда
			ТипыЦен = ЭлементОтбора.ПравоеЗначение; 
		КонецЕсли;
	КонецЦикла;   
	
	тзТиповЦен = Новый ТаблицаЗначений;
	тзТиповЦен.Колонки.Добавить("ВидЦены");
	тзТиповЦен.Колонки.Добавить("ИД");
	Для сч = 0 по ТипыЦен.Количество()-1 Цикл
		
		НоваяСтрока = тзТиповЦен.Добавить();
		НоваяСтрока.ВидЦены = ТипыЦен[сч].Значение;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	B2B_ИдентификаторыТиповЦен.Идентификатор КАК Значение
		               |ИЗ
		               |	РегистрСведений.B2B_ИдентификаторыТиповЦен КАК B2B_ИдентификаторыТиповЦен
		               |ГДЕ
		               |	B2B_ИдентификаторыТиповЦен.Организация = &Организация
		               |	И B2B_ИдентификаторыТиповЦен.ВидЦен = &ВидЦен";
		//Запрос.УстановитьПараметр("Объект",ТипыЦен[сч].Значение);
		Запрос.УстановитьПараметр("Организация",Параметры.УзелОбмена.ВладелецКаталога);
		Запрос.УстановитьПараметр("ВидЦен",ТипыЦен[сч].Значение);
		Рез = Запрос.Выполнить().Выбрать();
		Если Рез.Следующий() Тогда
			НоваяСтрока.ИД = Рез.Значение;
		Иначе                
			НоваяСтрока.ИД = Строка(ТипыЦен[сч].Значение.УникальныйИдентификатор());
		КонецЕсли;  
		
	КонецЦикла;
	
	СписокСвойствВыгружаемыхКакСправочники = Новый СписокЗначений;
	//Список взят из старой базы, по хорошему надо в реквизит вытащить и настраивать в пользовательском режиме
	СписокСвойствВыгружаемыхКакСправочники.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("B2B_Size"));
	СписокСвойствВыгружаемыхКакСправочники.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("B2B_РазмерныйРяд"));
	СписокСвойствВыгружаемыхКакСправочники.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("MainColorCode")); 
	
	СписокСвойствВыгружаемыхВHLСправочники = Новый СписокЗначений;
	СписокСвойствВыгружаемыхВHLСправочники.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("MainColorCode"));
	
	тзСвойств = Новый ТаблицаЗначений;
	тзСвойств.Колонки.Добавить("Свойство");
	тзСвойств.Колонки.Добавить("ИД");  
	тзСвойств.Колонки.Добавить("Наименование");
	тзСвойств.Колонки.Добавить("ВыгружатьВХИ");
	тзСвойств.Колонки.Добавить("ВлияетНаЦену");
	
	Для Сч = 0 по СписокСвойствДляВыгрузки.Количество()-1 Цикл

		НоваяСтрока = тзСвойств.Добавить(); 
		НоваяСтрока.Свойство = СписокСвойствДляВыгрузки[сч].Значение;
		ВыгружатьВСправочник = СписокСвойствВыгружаемыхКакСправочники.НайтиПоЗначению(СписокСвойствДляВыгрузки[сч].Значение);
		НоваяСтрока.ВыгружатьВХИ = НЕ(ВыгружатьВСправочник = Неопределено);
		ВлияетНаЦену = СписокСвойствВыгружаемыхВHLСправочники.НайтиПоЗначению(СписокСвойствДляВыгрузки[сч].Значение);
		НоваяСтрока.ВлияетНаЦену = НЕ(ВлияетНаЦену = Неопределено);           
		
		//Переход из УПП
		регсв = РегистрыСведений.B2B_РИ_ИдентификаторыСвойствНоменклатурыБитрикс.СоздатьМенеджерЗаписи();
		регсв.Объект = НоваяСтрока.Свойство;
		регсв.Прочитать();
		
		Если регсв.Выбран() Тогда
			НоваяСтрока.ИД = Строка(регсв.Идентификатор);
			НоваяСтрока.Наименование = Строка(регсв.Наименование);
		Иначе                                                
			НоваяСтрока.ИД = Строка(НоваяСтрока.Свойство.УникальныйИдентификатор());
			НоваяСтрока.Наименование = Строка(НоваяСтрока.свойство.Наименование);
		КонецЕсли;
		
	КонецЦикла;

	//СвойстваДляПредложений = его зададим явно, вообще в нем особо смысла нет, все в номенклатуре указывается
	
	СвойстваДляПредложений = Новый Массив;
	СвойстваДляПредложений.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Color_Code")); 
	СвойстваДляПредложений.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Color_Name"));
	
	СвойстваДляПредложений.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("B2B_FilterSizeBox"));
	//050423
	//СвойстваДляПредложений.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("B2B_РазмерныйРяд")); 
	СвойстваДляПредложений.Добавить(Справочники.B2B_w_Настройки.Свойство_B2B_РазмерныйРяд.Значение);  
	//
	СвойстваДляПредложений.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("B2B_Size"));
	СвойстваДляПредложений.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("QuantityInABox"));   
	
	тзСвойствПредложений = Новый ТаблицаЗначений;
	тзСвойствПредложений.Колонки.Добавить("Свойство");
	тзСвойствПредложений.Колонки.Добавить("ИД");  
	тзСвойствПредложений.Колонки.Добавить("Наименование");
	тзСвойствПредложений.Колонки.Добавить("ВыгружатьВХИ");
	тзСвойствПредложений.Колонки.Добавить("ВлияетНаЦену");
	
	Для Каждого Свойство из СвойстваДляПредложений Цикл
		
		СвойствоЭлемент = Свойство;//ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(Свойство);
		Если СвойствоЭлемент = Неопределено или
			 СвойствоЭлемент = NULL Тогда
			Продолжить;
		КонецЕсли; 
		Попытка
			Если СвойствоЭлемент.Пустая() Тогда
				Продолжить;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		НоваяСтрока = тзСвойствПредложений.Добавить(); 
		НоваяСтрока.Свойство = СвойствоЭлемент;
		ВыгружатьВСправочник = СписокСвойствВыгружаемыхКакСправочники.НайтиПоЗначению(Свойство);
		НоваяСтрока.ВыгружатьВХИ = НЕ(ВыгружатьВСправочник = Неопределено);
		ВлияетНаЦену = СписокСвойствВыгружаемыхВHLСправочники.НайтиПоЗначению(Свойство);
		НоваяСтрока.ВлияетНаЦену = НЕ(ВлияетНаЦену = Неопределено);           
		
		//Переход из УПП
		регсв = РегистрыСведений.B2B_РИ_ИдентификаторыСвойствНоменклатурыБитрикс.СоздатьМенеджерЗаписи();
		регсв.Объект = НоваяСтрока.Свойство;
		регсв.Прочитать();
		
		Если регсв.Выбран() Тогда
			НоваяСтрока.ИД = Строка(регсв.Идентификатор);
			НоваяСтрока.Наименование = Строка(регсв.Наименование);
		Иначе                                                
			НоваяСтрока.ИД = Строка(НоваяСтрока.Свойство.УникальныйИдентификатор());
			НоваяСтрока.Наименование = Строка(НоваяСтрока.свойство.Наименование);
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыДляJSONОбмена.Вставить("СвойстваДляПредложений",тзСвойствПредложений);
	ПараметрыДляJSONОбмена.Вставить("ТипыЦен",тзТиповЦен);
	ПараметрыДляJSONОбмена.Вставить("тзСвойств",тзСвойств);       
	
	////Список возможных характеристик для номенклатуры определяем как возможные характеристики в справочнике ВариантыКомплектаций
	//ТаблицаХарактеристик
	//Запрос = Новый запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	// |	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика
	// |ИЗ
	// |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	// |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	// |		ПО ХарактеристикиНоменклатуры.Ссылка = ДополнительныеСведения.Объект
	// |			И (ДополнительныеСведения.Свойство.Наименование = ""B2B_Портал"")
	// |			И ((ВЫРАЗИТЬ(ДополнительныеСведения.Значение КАК СТРОКА)) = &B2BПортал)";
	//Запрос.УстановитьПараметр("B2BПортал",Строка(Параметры.УзелОбмена.B2B_Портал));
	//Рез = Запрос.Выполнить().Выгрузить();
	// 
	//ПараметрыДляJSONОбмена.Вставить("СписокХарактеристикДляОбмена",Рез); 
	
	СформироватьЗапросНаСервере(ПараметрыДляJSONОбмена); 
	
	Возврат Истина;
	
КонецФункции          

/////////////////////////////////////////////////////////////
Процедура ВыгрузитьКартинки(Параметры, ТаблицаКартинок, НомерПакета)
	
	//В тз две колонки - 1я объект (номенклатура или характеристика), вторая адрес
	//сначала выгрузим картинки по 
	ТаблВыгруженныхКартинок = Новый ТаблицаЗначений;
	ТаблВыгруженныхКартинок.Колонки.Добавить("Артикул");
	ТаблВыгруженныхКартинок.Колонки.Добавить("Адрес"); 
	ИмяКаталога = "c:\Temp";
	
	для каждого стр из Параметры.Товары Цикл    
		Если стр.НомерПакета <> НомерПакета Тогда
			Продолжить;
		КонецЕсли;
		
		УжеВыгруженнаяКартинка = ТаблВыгруженныхКартинок.Найти(стр.Номенклатура.Артикул);
		Если УжеВыгруженнаяКартинка <> Неопределено Тогда
			НовСтр = ТаблицаКартинок.Добавить();
			НовСтр.Объект = стр.Номенклатура;
			НовСтр.Адрес = УжеВыгруженнаяКартинка.Адрес;       
			НовСтр.Адрес = СтрЗаменить(НовСтр.Адрес,ИмяКаталога+"\","");      
			
			//НовСтр = ТаблицаКартинок.Добавить();
			//НовСтр.Объект = стр.Номенклатура;
			//НовСтр.Адрес = УжеВыгруженнаяКартинка.Адрес;       
			//НовСтр.Адрес = СтрЗаменить(НовСтр.Адрес,ИмяКаталога+"\","");
			
		Иначе
			Если стр.Номенклатура.ФайлКартинки.Пустая() Тогда
				Продолжить;
			КонецЕсли;        
			
			АдресКартинки = ВыгрузитьКартинку(ИмяКаталога, стр.Номенклатура, стр.Номенклатура.ФайлКартинки);   
			НовСтр = ТаблВыгруженныхКартинок.Добавить();
			НовСтр.Артикул = стр.Номенклатура.Артикул;
			НовСтр.Адрес = АдресКартинки;
						
			НовСтр = ТаблицаКартинок.Добавить();
			НовСтр.Объект = стр.Номенклатура;
			НовСтр.Адрес = АдресКартинки;
			НовСтр.Адрес = СтрЗаменить(НовСтр.Адрес,ИмяКаталога+"\","");   
			
		КонецЕсли;
	КонецЦикла;	 
	
	//теперь по таблице отправим картинки на фтп
	
	//АдресФТП = "develop.maximaster.ru";
	//Логин = "wortmann_1c";
	//Пароль = "8YGa4x18qz";             
	
	АдресФТП = Параметры.ПланОбмена.B2B_FTPДляВыгрузкиКартинок;
	Логин = Параметры.ПланОбмена.B2B_FTPДляВыгрузкиКартинокЛогин;
	Пароль = Параметры.ПланОбмена.B2B_FTPДляВыгрузкиКартинокПароль;    
	
	Если АдресФТП <> "" Тогда
		  // Функция подключения определена выше.
	    Соединение = ПодключитьсяКFTPСерверу(АдресФТП,Логин,Пароль);
	    // Установим текущий каталог.
	    Соединение.УстановитьТекущийКаталог("/");
	    Для каждого стр из ТаблВыгруженныхКартинок Цикл

		   КудаПишем = СтрЗаменить(стр.Адрес,ИмяКаталога+"\","");
		   
		    // Запишем этот файл на сервер по ftp в папку trade_exchange
		    // Внимание! Используем прямые слеши.
		    Соединение.Записать(
		       Стр.Адрес, // что записываем
		        "/"+КудаПишем // куда записываем
		    );
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры 

Функция ПодключитьсяКFTPСерверу(Адрес,Логин,Пароль)
 
    Соединение = Новый FTPСоединение(
        Адрес, // адрес ftp сервера
        21, // порт сервера
        Логин, // имя пользователя
        Пароль, // пароль пользователя
        Неопределено, // прокси не используется
        Истина, // пассивный режим работы
        0, // таймаут (0 - без ограничений)
        Неопределено // незащищенное соединение
    );
 
    // Для случаев, когда у ftp сервера нет возможности
    // обращаться к нам (мы находимся за межсетевым экраном)
    // следует использовать пассивный режим работы.
 
    Возврат Соединение;
 
КонецФункции
 
Функция ВыгрузитьКартинку(ИмяКаталога, Номенклатура, ХранилищеСсылка)
	
	Результат = НеОпределено;
	
	Если НЕ ЗначениеЗаполнено(ХранилищеСсылка) Тогда
		Возврат Результат;
	КонецЕсли;
	
	//SFX_0608{
	ТекущаяКартинка = РаботаСФайлами.ДвоичныеДанныеФайла(ХранилищеСсылка);
	Если ТипЗнч(ТекущаяКартинка) = Тип("ДвоичныеДанные") Тогда 
		Картинка = Новый Картинка(ТекущаяКартинка);
	Иначе 
		Картинка = ТекущаяКартинка;
	КонецЕсли;
	//SFX_0608}
	
	Если ТипЗнч(Картинка) <> Тип("Картинка") Тогда
		Возврат Результат;
	КонецЕсли;
	
	ФорматКартинкиРазрешен  = Истина;
	РасширениеФайлаКартинки = "";
	
	Попытка
		ФорматКартинкиОбъекта = Картинка.Формат();
	Исключение
		ФорматКартинкиОбъекта = ФорматКартинки.НеизвестныйФормат;
	КонецПопытки;
	
	Если ФорматКартинкиОбъекта = ФорматКартинки.НеизвестныйФормат Тогда
		ФорматКартинкиРазрешен = Ложь;
	Иначе
		Если НЕ (ФорматКартинкиОбъекта = ФорматКартинки.GIF
			 ИЛИ ФорматКартинкиОбъекта = ФорматКартинки.JPEG
			 ИЛИ ФорматКартинкиОбъекта = ФорматКартинки.PNG) Тогда
			Попытка
				ФорматКартинкиОбъекта = Картинка.Преобразовать(ФорматКартинки.JPEG);
			Исключение
				Сообщить("Не удалось преобразовать формат картинки. Номенклатура: " + Номенклатура + ". Преобразование из " + Строка(ФорматКартинкиОбъекта) + " в JPEG");
				Возврат Результат;
			КонецПопытки;
		КонецЕсли;
		РасширениеФайлаКартинки = Строка(ФорматКартинкиОбъекта);
	КонецЕсли;
	
	Если НЕ ФорматКартинкиРазрешен Тогда
		Сообщить("Формат основного изображения неизвестен или запрещен. Номенклатура: " + Номенклатура);
		Возврат Результат;
	КонецЕсли;
	
	ИмяПоНоменклатуре = Строка(Номенклатура.УникальныйИдентификатор());
	ИмяПоХранилищу    = Строка(ХранилищеСсылка.УникальныйИдентификатор());
	
	ИмяФайлаКартинки = ИмяПоНоменклатуре + "_" + ИмяПоХранилищу + "." + НРег(РасширениеФайлаКартинки);
	КаталогКартинки	 = ИмяКаталога;
	
	СоздатьКаталог(КаталогКартинки);

	ПолноеИмяФайлаКартинки = КаталогКартинки + "\" + ИмяФайлаКартинки;
	
	Попытка
		Картинка.Записать(ПолноеИмяФайлаКартинки);
	Исключение
		Сообщить("Не удалось записать файл картинки на диск. Номенклатура: " + Номенклатура);
		Возврат Результат;
	КонецПопытки;	
	
	Результат = ИмяКаталога + "\" + ИмяФайлаКартинки;
	
	Возврат Результат;
	
КонецФункции
	
Процедура СформироватьЗапросНаСервере(Параметры)    
	
	КоличествоПроходов = 1;
	НомерТовараВПакете = 1;
	НомерПакета = 1;
	Для каждого стр из Параметры.Товары цикл
		Если НомерТовараВПакете > Параметры.КоличествоТоваровВПакете Тогда
			НомерТовараВПакете = 1;
			НомерПакета = НомерПакета + 1;
		КонецЕсли;
		стр.НомерПакета = НомерПакета; 
		НомерТовараВПакете = НомерТовараВПакете + 1;
	КонецЦикла;
	
	Если Параметры.КоличествоТоваровВПакете > 0 Тогда
		КоличествоПроходов = Цел(Параметры.Товары.Количество()/Параметры.КоличествоТоваровВПакете) + ?(Параметры.Товары.Количество()/Параметры.КоличествоТоваровВПакете<>Цел(Параметры.Товары.Количество()/Параметры.КоличествоТоваровВПакете),1,0);		
	КонецЕсли;
	
	Для НомерПакета = 1 По КоличествоПроходов Цикл
 
	//5 уровень

		МассивOffersСвойства = Новый Массив();   
		СтруктураOffersСвойства = Новый Структура;
		СтруктураOffersСвойства.Вставить("Ид");
		СтруктураOffersСвойства.Вставить("Наименование");
		СтруктураOffersСвойства.Вставить("ПометкаУдаления");     
		СтруктураOffersСвойства.Вставить("Внешний");
		СтруктураOffersСвойства.Вставить("Информационное");
		СтруктураOffersСвойства.Вставить("ТипЗначений");
		//СтруктураOffersСвойства.Вставить("ДляТоваров");
		СписокСвойствХарактеристик = Новый СписокЗначений;   
		Если НомерПакета = 1 Тогда
			ЗаполнитьМассивOffersСвойства(Параметры, МассивOffersСвойства,СтруктураOffersСвойства, СписокСвойствХарактеристик);
		КонецЕсли;
		
		//***
		
		МассивPricesПакетПредложенийПредложенияЦены = Новый Массив(); 
		СтруктураPricesПакетПредложенийПредложенияЦены = Новый Структура;
		СтруктураPricesПакетПредложенийПредложенияЦены.Вставить("Представление");
		СтруктураPricesПакетПредложенийПредложенияЦены.Вставить("ИдТипаЦены");
		СтруктураPricesПакетПредложенийПредложенияЦены.Вставить("ЦенаЗаЕдиницу");
		СтруктураPricesПакетПредложенийПредложенияЦены.Вставить("Валюта");
		СтруктураНалог = Новый Структура;
		СтруктураНалог.Вставить("Наименование");
		СтруктураНалог.Вставить("УчтеноВСумме");
		СтруктураPricesПакетПредложенийПредложенияЦены.Вставить("Налог",СтруктураНалог);
		
		ЗаполнитьМассивPricesПакетПредложенийПредложенияЦены(МассивPricesПакетПредложенийПредложенияЦены,СтруктураPricesПакетПредложенийПредложенияЦены);
		//это пустой ?
	//4 уровень  
	
	    МассивImportКлассификаторГруппы = Новый Массив();  
		СтруктураImportКлассификаторГруппы = Новый Структура;
		СтруктураImportКлассификаторГруппы.Вставить("Ид");
		СтруктураImportКлассификаторГруппы.Вставить("Наименование");     
		СтруктураImportКлассификаторГруппы.Вставить("ПометкаУдаления");
		СтруктураImportКлассификаторГруппы.Вставить("Группы");
		
		ПервыйРодитель = Справочники.B2B_Б_ПользовательскиеГруппыТоваров.НайтиПоНаименованию(Параметры.GUIDКаталога);
		ЗаполнитьМассивImportКлассификаторГруппы(МассивImportКлассификаторГруппы, ПервыйРодитель);	
		
	    МассивImportКлассификаторТипыЦен = Новый Массив();     
		СтруктураImportКлассификаторТипыЦен = Новый Структура;
		СтруктураImportКлассификаторТипыЦен.Вставить("Ид");
		СтруктураImportКлассификаторТипыЦен.Вставить("Наименование");
		СтруктураImportКлассификаторТипыЦен.Вставить("Валюта");
		СтруктураНалог = Новый Структура;
		СтруктураНалог.Вставить("Наименование");
		СтруктураНалог.Вставить("УчтеноВСумме");
		СтруктураImportКлассификаторТипыЦен.Вставить("Налог",СтруктураНалог);
		ЗаполнитьМассивImportКлассификаторТипыЦен(Параметры, МассивImportКлассификаторТипыЦен,СтруктураImportКлассификаторТипыЦен);	
		
		МассивImportКлассификаторЕдиницыИзмерения = Новый Массив();
		СтруктураImportКлассификаторЕдиницыИзмерения = Новый Структура;
		СтруктураImportКлассификаторЕдиницыИзмерения.Вставить("Ид");
		СтруктураImportКлассификаторЕдиницыИзмерения.Вставить("НаименованиеКраткое");
		СтруктураImportКлассификаторЕдиницыИзмерения.Вставить("Код");
		СтруктураImportКлассификаторЕдиницыИзмерения.Вставить("НаименованиеПолное");
		СтруктураImportКлассификаторЕдиницыИзмерения.Вставить("МеждународноеСокращение");
		ЗаполнитьМассивImportКлассификаторЕдиницыИзмерения(Параметры, МассивImportКлассификаторЕдиницыИзмерения,СтруктураImportКлассификаторЕдиницыИзмерения);	

		//***	
		МассивPricesПакетПредложенийПредложения = Новый Массив;
		СтруктураPricesПакетПредложенийПредложения = Новый Структура;
		СтруктураPricesПакетПредложенийПредложения.Вставить("Ид");
		СтруктураPricesПакетПредложенийПредложения.Вставить("Цены", МассивPricesПакетПредложенийПредложенияЦены);
		
		//в этой же процедуре заполняем предложения для номенклатуры (характеристики из вариантов комплектаций)
		ЗаполнитьМассивPricesПакетПредложенийПредложения(Параметры, МассивPricesПакетПредложенийПредложения, СтруктураPricesПакетПредложенийПредложения, НомерПакета);
		
		//****
		
		МассивRestsПакетПредложенийПредложения = Новый Массив;
		СтруктураRestsПакетПредложенийПредложения = Новый Структура;
		СтруктураRestsПакетПредложенийПредложения.Вставить("Ид");  
		СтруктураRestsПакетПредложенийПредложения.Вставить("Количество");  
		ЗаполнитьМассивRestsПакетПредложенийПредложения(Параметры, МассивRestsПакетПредложенийПредложения, СтруктураRestsПакетПредложенийПредложения, НомерПакета);
		
	//3 уровень	

		СтруктураImportКлассификатор = Новый Структура;  
		СтруктураImportКлассификатор.Вставить("Ид",Параметры.GUIDКаталога);
		СтруктураImportКлассификатор.Вставить("Наименование",Параметры.НаименованиеКаталога);   
		Если НомерПакета = 1 Тогда
			СтруктураImportКлассификатор.Вставить("Группы"          , МассивImportКлассификаторГруппы); 
			СтруктураImportКлассификатор.Вставить("ТипыЦен"         , МассивImportКлассификаторТипыЦен);
			СтруктураImportКлассификатор.Вставить("ЕдиницыИзмерения", МассивImportКлассификаторЕдиницыИзмерения);
		КонецЕсли;

		СтруктураImportКаталог = Новый Структура; 
		СтруктураImportКаталог.Вставить("Ид", Параметры.GUIDКаталога);
		СтруктураImportКаталог.Вставить("ИдКлассификатора", Параметры.GUIDКаталога);
		СтруктураImportКаталог.Вставить("Наименование", Параметры.НаименованиеКаталога);
		СтруктураImportКаталог.Вставить("Бренд", Параметры.НаименованиеКаталога);
		СтруктураImportКаталог.Вставить("СодержитТолькоИзменения",Истина);
		СтруктураImportКаталог.Вставить("Описание",Параметры.НаименованиеКаталога);
		
		МассивImportСвойства = Новый Массив();
		СтруктураImportСвойства = Новый Структура;
		СтруктураImportСвойства.Вставить("Ид");
		СтруктураImportСвойства.Вставить("ПометкаУдаления");
		СтруктураImportСвойства.Вставить("Наименование");
		СтруктураImportСвойства.Вставить("Внешний");
		СтруктураImportСвойства.Вставить("Информационное");
		СтруктураImportСвойства.Вставить("ТипЗначений");
		//СтруктураImportСвойства.Вставить("ДляТоваров");  
		
		ВариантыЗначений = Новый Структура("ИдЗначения,Значение");
		
		СтруктураImportСвойства.Вставить("ВариантыЗначений",ВариантыЗначений);   
		
		СписокСвойств = Новый СписокЗначений;
		Если НомерПакета = 1 Тогда
			ЗаполнитьМассивImportСвойства(Параметры, МассивImportСвойства, СтруктураImportСвойства, СписокСвойств);
		КонецЕсли;
		
		ТаблицаКартинок = Новый ТаблицаЗначений;
		ТаблицаКартинок.Колонки.Добавить("Объект");
		ТаблицаКартинок.Колонки.Добавить("Адрес");
		ВыгрузитьКартинки(Параметры, ТаблицаКартинок, НомерПакета);
		            
		МассивImportТовары = Новый Массив();
		СтруктураImportТовары = Новый Структура;
		СтруктураImportТовары.Вставить("Ид");
		СтруктураImportТовары.Вставить("ПометкаУдаления");
		СтруктураImportТовары.Вставить("Штрихкод");
		СтруктураImportТовары.Вставить("Артикул");
		СтруктураImportТовары.Вставить("Наименование");
		СтруктураImportТовары.Вставить("БазоваяЕдиница");
		СтруктураImportТовары.Вставить("Группы");  
		СтруктураImportТовары.Вставить("Описание");
		СтруктураImportТовары.Вставить("Картинка");
		СтруктураImportТовары.Вставить("Страна");  
		СтруктураImportТовары.Вставить("ЗначенияСвойств");  
		СтруктураImportТовары.Вставить("СтавкиНалогов");  
		СтруктураImportТовары.Вставить("ЗначенияРеквизитов");  
		СтруктураImportТовары.Вставить("Вес");     
		
		ЗаполнитьМассивImportТовары(Параметры, МассивImportТовары, СтруктураImportТовары, СписокСвойств, ТаблицаКартинок, НомерПакета);   
		
		//**
		//СтруктураOffersProperties = Новый Структура; 
		//СтруктураOffersProperties.Вставить("ПакетПредложений",СтруктураOffersPropertiesПакетПредложений);
		//СтруктураOffersProperties.Вставить("Классификатор", СтруктураOffersPropertiesКлассификатор);

		МассивOffersПредложения = Новый Массив();                                                   
		СтруктураOffersПредложения = Новый Структура;
		СтруктураOffersПредложения.Вставить("Ид");
		СтруктураOffersПредложения.Вставить("ПометкаУдаления");
		СтруктураOffersПредложения.Вставить("Наименование");
		СтруктураOffersПредложения.Вставить("Штрихкод");
		СтруктураOffersПредложения.Вставить("Артикул");
		СтруктураOffersПредложения.Вставить("ХарактеристикиТовара");
		СтруктураOffersПредложения.Вставить("ЗначенияСвойств");
		СтруктураOffersПредложения.Вставить("ЗначенияРеквизитов");
		СтруктураOffersПредложения.Вставить("Картинка");
	    ЗаполнитьМассивOffersПредложения(Параметры, МассивOffersПредложения, СтруктураOffersПредложения, СписокСвойствХарактеристик, ТаблицаКартинок, НомерПакета);    
		
		СтруктураOffersПакетПредложений = Новый Структура;
		СтруктураOffersПакетПредложений.Вставить("Ид"          , Параметры.GUIDКаталога+"#");
		СтруктураOffersПакетПредложений.Вставить("Наименование", "Пакет предложений ("+Параметры.НаименованиеКаталога+")");
		СтруктураOffersПакетПредложений.Вставить("ИдКаталога"  , Параметры.GUIDКаталога);
		СтруктураOffersПакетПредложений.Вставить("СодержитТолькоИзменения",Истина); 
		СтруктураOffersПакетПредложений.Вставить("Бренд", Параметры.НаименованиеКаталога);
		
		//*** 
		
		СтруктураPricesПакетПредложений = Новый Структура;
		СтруктураPricesПакетПредложений.Вставить("Ид", Параметры.GUIDКаталога+"#");
		СтруктураPricesПакетПредложений.Вставить("Наименование","Пакет предложений ("+Параметры.НаименованиеКаталога+")");
		СтруктураPricesПакетПредложений.Вставить("ИдКаталога", Параметры.GUIDКаталога);
		СтруктураPricesПакетПредложений.Вставить("ИдКлассификатора", Параметры.GUIDКаталога);
		СтруктураPricesПакетПредложений.Вставить("Предложения",МассивPricesПакетПредложенийПредложения);
		
		//*** 
		
		СтруктураRestsПакетПредложений = Новый Структура;
		СтруктураRestsПакетПредложений.Вставить("Ид",Параметры.GUIDКаталога+"#");
		СтруктураRestsПакетПредложений.Вставить("Наименование","Пакет предложений ("+Параметры.НаименованиеКаталога+")");
		СтруктураRestsПакетПредложений.Вставить("ИдКаталога",Параметры.GUIDКаталога);
		СтруктураRestsПакетПредложений.Вставить("ИдКлассификатора", Параметры.GUIDКаталога);
		СтруктураRestsПакетПредложений.Вставить("Предложения",МассивRestsПакетПредложенийПредложения);
		
	//2 уровень	
		
		СтруктураImport = Новый Структура();    
		СтруктураImport.Вставить("Классификатор", СтруктураImportКлассификатор);
		СтруктураImport.Вставить("Каталог",       СтруктураImportКаталог);
		Если НомерПакета = 1 Тогда
			СтруктураImport.Вставить("Свойства",      МассивImportСвойства);
		КонецЕсли;
		СтруктураImport.Вставить("Товары",        МассивImportТовары);   
		
		СтруктураOffers = Новый Структура();    
		СтруктураOffers.Вставить("ПакетПредложений", СтруктураOffersПакетПредложений); 
		Если НомерПакета = 1 Тогда
			СтруктураOffers.Вставить("Свойства"        , МассивOffersСвойства);
		КонецЕсли;
		СтруктураOffers.Вставить("Предложения"     , МассивOffersПредложения);
		
		СтруктураPrices = Новый Структура();
		СтруктураPrices.Вставить("ПакетПредложений", СтруктураPricesПакетПредложений);

		СтруктураRests = Новый Структура();
		СтруктураRests.Вставить("ПакетПредложений", СтруктураRestsПакетПредложений);
		
	//1 уровень	
		
		СтруктураРезультат = Новый Структура();
		СтруктураРезультат.Вставить("Import", СтруктураImport);
		СтруктураРезультат.Вставить("Offers", СтруктураOffers);
		СтруктураРезультат.Вставить("Prices", СтруктураPrices);
		СтруктураРезультат.Вставить("Rests" , СтруктураRests);   
		
		Результат = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(СтруктураРезультат);  
		
		Параметры.Вставить("Результат",Результат);
		
		//ОТЛАДКА   
		Если Параметры.ПланОбмена.B2B_АдресЛогаЗапроса <> "" Тогда   
			Попытка
				ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
				т = новый ТекстовыйДокумент;
				т.УстановитьТекст(Результат);
				т.Записать(ИмяВременногоФайла);   
				
				ОтправитьВТелегу(ИмяВременногоФайла,Параметры.ПланОбмена.B2B_АдресЛогаЗапроса);  
				
				УдалитьФайлы(ИмяВременногоФайла);
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Если Параметры.АдресОтправки <> "" Тогда
			ОтправитьНаСервере(Параметры);      
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры  


Процедура ОтправитьВТелегу(ПутьКФайлу, Кому)
	
	МойToken = "5934550789:AAFuxpfK9eUEMQD1QAwgnrudfTVYL1XZd3Y";
	ЧатID = Кому;
	
	ТекстСообщения = "Лог отправки на сайт";
	ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows, Новый СертификатыУдостоверяющихЦентровWindows);
		
	Boundary = "----"+Строка(Новый УникальныйИдентификатор());

	Файл = Новый Файл(ПутьКФайлу);

	//Определяем массив для процедуры ОбъединитьФайлы
	МассивФайловДляОбъединения = Новый Массив;

	МассивФайловДляОбъединения.Добавить(ПолучитьИмяВременногоФайла("xls"));
	ФайлОтправкиНачало = Новый ЗаписьТекста(МассивФайловДляОбъединения[0], КодировкаТекста.UTF8);
	НачальныеДанные = "--%Разделитель%
	|Content-Disposition: form-data; name=""chat_id""
	|
	|%ЧатID%
	|--%Разделитель%
	|Content-Disposition: form-data; name=""document""; filename=""%ИмяФайла%""
	|";
	НачальныеДанные = СтрЗаменить(НачальныеДанные,"%Разделитель%",Boundary);
	НачальныеДанные = СтрЗаменить(НачальныеДанные,"%ЧатID%",ЧатID);
	НачальныеДанные = СтрЗаменить(НачальныеДанные,"%ИмяФайла%",Файл.Имя);

	ФайлОтправкиНачало.ЗаписатьСтроку(НачальныеДанные );
	ФайлОтправкиНачало.Закрыть();

	МассивФайловДляОбъединения.Добавить(ПутьКФайлу);

	МассивФайловДляОбъединения.Добавить(ПолучитьИмяВременногоФайла("xls"));
	ФайлаОтправкиКонец = Новый ЗаписьТекста(МассивФайловДляОбъединения[2], КодировкаТекста.UTF8);
	КонечныеДанные = "
	|--%Разделитель%--";
	КонечныеДанные = СтрЗаменить(КонечныеДанные,"%Разделитель%",Boundary);

	ФайлаОтправкиКонец.ЗаписатьСтроку(КонечныеДанные);
	ФайлаОтправкиКонец.Закрыть();

	ИмяИтоговогоФайла = ПолучитьИмяВременногоФайла("txt");
	ОбъединитьФайлы(МассивФайловДляОбъединения, ИмяИтоговогоФайла);
	
    ТекстСообщения = "Лог отправки на сайт";
	
	Ресурс = "bot" + МойToken + "/sendMessage?chat_id=" + СтрЗаменить(Формат(ЧатID, "ЧДЦ=; ЧС=; ЧРГ=."), ".", "") + "&text= " + ТекстСообщения;
	Соединение  =  Новый HTTPСоединение("api.telegram.org",443,,,,,ЗащищенноеСоединение);
	Запрос = Новый HTTPЗапрос(Ресурс);
	Ответ = Соединение.Получить(Запрос);
	
	СоединениеHTTP = Новый HTTPСоединение("api.telegram.org",443,,,,,ЗащищенноеСоединение);//Новый HTTPСоединение(АдресTelegramAPI,443,,,Прокси,,Новый ЗащищенноеСоединениеOpenSSL());

	АдресЗапроса = "bot" 
	                + МойToken 
	                + "/sendDocument";
					
	ЗапросHTTP = Новый HTTPЗапрос(АдресЗапроса);
	ЗапросHTTP.Заголовки.Вставить("Connection", "keep-alive");
	ЗапросHTTP.Заголовки.Вставить("Content-Type", "multipart/form-data; boundary="+Boundary);

	ЗапросHTTP.УстановитьИмяФайлаТела(ИмяИтоговогоФайла);


	ОтветHTTP = СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP);	
	
КонецПроцедуры


Процедура ЗаполнитьМассивOffersПредложения(Параметры, МассивOffersПредложения, СтруктураOffersПредложения, СписокСвойствХарактеристик, ТаблицаКартинок, НомерПакета)
	
	//      ить("Ид");
	//СтруктураOffersПредложения.Вставить("ПометкаУдаления");
	//СтруктураOffersПредложения.Вставить("Наименование");
	//СтруктураOffersПредложения.Вставить("Штрихкод");
	//СтруктураOffersПредложения.Вставить("Артикул");
	//СтруктураOffersПредложения.Вставить("ХарактеристикиТовара");
	//СтруктураOffersПредложения.Вставить("ЗначенияСвойств");
	//СтруктураOffersПредложения.Вставить("ЗначенияРеквизитов");
	//СтруктураOffersПредложения.Вставить("Картинка");
	
	для каждого стр из Параметры.Товары цикл
		Если стр.НомерПакета <> НомерПакета Тогда
			Продолжить;
		КонецЕсли;	                
		Для каждого стрХарактеристика из стр.Характеристики цикл
			Структ = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(СтруктураOffersПредложения));
			//Структ.Ид = Строка(стр.Номенклатура.СЭ_ТипНоменклатуры.УникальныйИдентификатор())+"#"+Строка(стр.Номенклатура.УникальныйИдентификатор());
			Структ.Ид = стрХарактеристика.ИД;  
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
			               |ИЗ
			               |	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
			               |ГДЕ
			               |	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
			               |	И ШтрихкодыНоменклатуры.Характеристика = &Характеристика";
			Запрос.УстановитьПараметр("Номенклатура",стр.Номенклатура);
			Запрос.УстановитьПараметр("Характеристика",стрХарактеристика.Характеристика);
			рез = Запрос.Выполнить().Выбрать();
			Если рез.Следующий() Тогда
				Структ.Штрихкод = Строка(рез.Штрихкод);
			КонецЕсли;
			Структ.Артикул = стрХарактеристика.НаименованиеВарианта;                
			Если стр.B2B_СЭ_ТипНоменклатуры.Пустая() Тогда 
				Структ.Наименование = стр.Номенклатура.НаименованиеПолное;
			Иначе                                                         
				Структ.Наименование = стр.B2B_СЭ_ТипНоменклатуры.Наименование;
			КонецЕсли;
			Структ.ПометкаУдаления = стр.Номенклатура.ПометкаУдаления;
			Структ.ХарактеристикиТовара = ""; 
			
			СтрокаКартинки = ТаблицаКартинок.найти(стр.Номенклатура);
			Если СтрокаКартинки <> Неопределено Тогда
				Структ.Картинка = "/"+СтрокаКартинки.Адрес;
			КонецЕсли;
	        
			МассивСвойств = Новый Массив;                          
			//ПолучитьМассивСвойств(МассивСвойств, стр.Номенклатура, СписокСвойствХарактеристик, Параметры.тзСвойств,Строка(стрХарактеристика.Характеристика),стрХарактеристика.ВариантКомплектации);
			ПолучитьМассивСвойств(МассивСвойств, стр.Номенклатура, СписокСвойствХарактеристик, Параметры.СвойстваДляПредложений,Строка(стрХарактеристика.Характеристика),стрХарактеристика.ВариантКомплектации);
			Структ.ЗначенияСвойств = МассивСвойств;
			
			МассивЗР = Новый Массив;
			ПолучитьМассивЗР(МассивЗР, стр.Номенклатура, Истина);
	        Структ.ЗначенияРеквизитов = МассивЗР;
			
			МассивOffersПредложения.Добавить(Структ);		
		конецЦикла;
	конецЦикла;
	
	
КонецПроцедуры

Процедура ЗаполнитьМассивRestsПакетПредложенийПредложения(Параметры,МассивRestsПакетПредложенийПредложения, СтруктураRestsПакетПредложенийПредложения, НомерПакета)
	
	
	для каждого стр из Параметры.Товары цикл    
		
		Если стр.НомерПакета <> НомерПакета Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого стрХарактеристика из стр.Характеристики Цикл
		
			Структ = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(СтруктураRestsПакетПредложенийПредложения));
			//Структ.Ид = Строка(стр.Номенклатура.СЭ_ТипНоменклатуры.УникальныйИдентификатор())+"#"+Строка(стр.Номенклатура.УникальныйИдентификатор());
			Структ.Ид = стрХарактеристика.ИД;   
			Структ.Количество = стрХарактеристика.Остаток;
			//Запр = Новый Запрос;
			//Запр.Текст = "ВЫБРАТЬ
			//             |	ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
			//             |ИЗ
			//             |	РегистрНакопления.ТоварыНаСкладах.Остатки(, Номенклатура = &Номенклатура) КАК ТоварыНаСкладахОстатки";
			//Запр.УстановитьПараметр("Номенклатура",стр.Номенклатура);
			//Рез = Запр.Выполнить().Выбрать();
			//Если рез.Следующий() Тогда
			//	Структ.Количество = рез.КоличествоОстаток;
			//Иначе                                         
			//	Структ.Количество = 0;
			//КонецЕсли;
			
			МассивRestsПакетПредложенийПредложения.Добавить(Структ);
			
		КонецЦикла;
		
	конецЦикла;
	
	
КонецПроцедуры

Функция B2B_ТипЗначенияСправочник(Тип)
	
	ТипЗначенияСправочник = Ложь;
	
	Попытка
		ОбъектПоТипу = Новый(Тип);
		ТипЗначенияСправочник = Метаданные.Справочники.Содержит(ОбъектПоТипу.Метаданные());
	Исключение
	КонецПопытки;
	
	Возврат ТипЗначенияСправочник;
	
КонецФункции

Функция ПереводСвойства(ЧтоИщем)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	гф_ПереводЗначенийРеквизитовИСвойств.Значение КАК Значение
	               |ИЗ
	               |	РегистрСведений.гф_ПереводЗначенийРеквизитовИСвойств КАК гф_ПереводЗначенийРеквизитовИСвойств
	               |ГДЕ
	               |	гф_ПереводЗначенийРеквизитовИСвойств.Объект = &Объект";
	Запрос.УстановитьПараметр("Объект",ЧтоИщем);
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат ЧтоИщем;
	КонецЕсли;
	Выб = Рез.Выбрать();
	Если Выб.Следующий() Тогда
		Если Выб.Значение <> Неопределено и
			Выб.Значение <> NULL и
			Выб.Значение <> "" Тогда
			Возврат Выб.Значение;
		КонецЕсли;
	КонецЕсли;
	Возврат ЧтоИщем;
	
КонецФункции

Процедура ЗаполнитьМассивImportСвойства(Параметры, МассивImportСвойства,СтруктураImportСвойства, СписокСвойств, ФильтрТаблицаСвойств = Неопределено)
	
	Если ФильтрТаблицаСвойств = Неопределено Тогда
		тзСвойств = Параметры.тзСвойств;
	Иначе           
		тзСвойств = ФильтрТаблицаСвойств.Скопировать();
	КонецЕсли;
	
	для каждого стр из тзСвойств Цикл
			
		СписокСвойств.Добавить(стр.Свойство);
		
		Структ = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(СтруктураImportСвойства));
		
		Структ.Ид = стр.ИД;
		Структ.Наименование = СокрЛП(Стр.Наименование);
		
		Структ.Внешний = стр.ВыгружатьВХИ;
			
		лУчитываетсяВЦене			= ?(ЗначениеЗаполнено(стр.ВлияетНаЦену), стр.ВлияетНаЦену, Ложь);
		Структ.Информационное = НЕ лУчитываетсяВЦене;     
		
		Структ.ТипЗначений = Строка(стр.Свойство.ТипЗначения);    
		
		Структ.ПометкаУдаления = стр.Свойство.ПометкаУдаления;
			
		Типы = стр.Свойство.ТипЗначения.Типы();
		Тип = Типы[0];
		Если B2B_ТипЗначенияСправочник(Тип) Тогда
            Структ.ТипЗначений = "Справочник";
		КонецЕсли;
			
		//Структ.ДляТоваров = Истина;    
		Если Структ.ТипЗначений = "Число" Тогда  
			Структ.Удалить("ВариантыЗначений");
		ИначеЕсли Структ.ТипЗначений = "Дата" Тогда
			Структ.ТипЗначений = "Строка";     
			Структ.Удалить("ВариантыЗначений");
		ИначеЕсли Структ.ТипЗначений = "Булево" Тогда
			Структ.ТипЗначений = "Справочник";
			МассивЗначений = Новый Массив;     
			СтруктЗначений = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(Структ.ВариантыЗначений)); 
			СтруктЗначений.ИдЗначения = Истина;
			СтруктЗначений.Значение = "Да";
			МассивЗначений.Добавить(СтруктЗначений);   
			СтруктЗначений = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(Структ.ВариантыЗначений)); 
			СтруктЗначений.ИдЗначения = Ложь;
			СтруктЗначений.Значение = "Нет";
			МассивЗначений.Добавить(СтруктЗначений);
			Структ.ВариантыЗначений = МассивЗначений;
			
		//ИначеЕсли (Структ.ТипЗначений <> "Справочник" и лУчитываетсяВЦене) Тогда
		ИначеЕсли (Структ.ТипЗначений <> "Справочник" и стр.ВыгружатьВХИ) Тогда

			Структ.ТипЗначений = "Справочник";
			МассивЗначений = Новый Массив;
			
			//Запрос вытащил сюда, чтобы не лишний раз не засорять память. Вызов этого запроса должен быть редкий. 
			
			//как оказывается нифига не редкий и достаточно долгий запрос - надо переписать, вытащить за цикл
			
			//результатом запроса должны быть все значения этого свойства, но которые заданы в номенклатуре,
			//у которой свойство B2BПортал задано нужным значением
			
			Запрос = Новый Запрос;
			запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	ЗначенияСвойствОбъектов.Объект КАК Номенклатура,
			               |	ЗначенияСвойствОбъектов.Значение КАК Значение
			               |ПОМЕСТИТЬ ВсяНоменклатураСЭтимСвойством
			               |ИЗ
			               |	РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
			               |ГДЕ
			               |	ЗначенияСвойствОбъектов.Свойство = &Свойство
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ДополнительныеСведения.Объект КАК Объект
			               |ПОМЕСТИТЬ НоменклатураДляВыгрузкиНаНужныйПортал
			               |ИЗ
			               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
			               |ГДЕ
			               |	ДополнительныеСведения.Свойство = &СвойствоB2BПортал
			               |	И ДополнительныеСведения.Значение = &НужныйB2BПортал
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ВсяНоменклатураСЭтимСвойством.Значение КАК Значение
			               |ИЗ
			               |	ВсяНоменклатураСЭтимСвойством КАК ВсяНоменклатураСЭтимСвойством
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НоменклатураДляВыгрузкиНаНужныйПортал КАК НоменклатураДляВыгрузкиНаНужныйПортал
			               |		ПО ВсяНоменклатураСЭтимСвойством.Номенклатура = НоменклатураДляВыгрузкиНаНужныйПортал.Объект";

			Запрос.УстановитьПараметр("Свойство",стр.Свойство); //это свойство, значения которого перебираем     
			Запрос.УстановитьПараметр("СвойствоB2BПортал",Справочники.B2B_w_Настройки.Свойство_B2B_Портал.Значение); //это свойство, значения которого перебираем
			Запрос.УстановитьПараметр("НужныйB2BПортал",Параметры.B2B_Портал); 
			
			ВыборкаЗначенийСвойств = Запрос.Выполнить().Выбрать();
			
			Пока ВыборкаЗначенийСвойств.Следующий() Цикл     
				СтруктЗначений = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(Структ.ВариантыЗначений)); 
				Попытка
					СтруктЗначений.ИдЗначения = Число(Лев(ВыборкаЗначенийСвойств.Значение, 40));
					//СтруктЗначений.ИдЗначения = Лев(XMLСтрока(ВыборкаЗначенийСвойств.Значение), 40);	
					СтруктЗначений.Значение		= Число(Лев(ВыборкаЗначенийСвойств.Значение, 1000));
				Исключение                                                                   
					СтруктЗначений.ИдЗначения = СокрЛП(Лев(ВыборкаЗначенийСвойств.Значение, 40));
					СтруктЗначений.Значение		= ПереводСвойства(СокрЛП(Лев(ВыборкаЗначенийСвойств.Значение, 1000)));
				Конецпопытки;
				МассивЗначений.Добавить(СтруктЗначений);   
			КонецЦикла;	
			Структ.ВариантыЗначений = МассивЗначений;
		ИначеЕсли Структ.ТипЗначений = "Справочник" Тогда
			
			Структ.ТипЗначений = "Справочник";
			МассивЗначений = Новый Массив;
			
			ОбъектПоТипу = Новый(Тип);
			ТипЗначенияСправочник = ОбъектПоТипу.Метаданные().Имя;
					
			Если ТипЗначенияСправочник = "ЗначенияСвойствОбъектов" тогда
				
				ЗапросЗначенийСвойств = Новый запрос;
				ЗапросЗначенийСвойств.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
				                              |	ВремЗначенияСвойств.Значение КАК Значение
				                              |ИЗ
				                              |	РегистрСведений.ДополнительныеСведения КАК ВремЗначенияСвойств
				                              |ГДЕ
				                              |	ВремЗначенияСвойств.Свойство = &Свойство";
				
				ЗапросЗначенийСвойств.УстановитьПараметр("Свойство", стр.Свойство);  							
				ВыборкаЗначенийСвойств = ЗапросЗначенийСвойств.Выполнить().Выбрать();
				
				Пока ВыборкаЗначенийСвойств.Следующий() Цикл
					СтруктЗначений = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(Структ.ВариантыЗначений)); 
					Если ТипЗнч(ВыборкаЗначенийСвойств.Значение) = Тип("Строка") Тогда    
						СтруктЗначений.ИдЗначения = Строка(ВыборкаЗначенийСвойств.Значение);
						СтруктЗначений.Значение	  = ПереводСвойства(Строка(ВыборкаЗначенийСвойств.Значение));
					Иначе
						СтруктЗначений.ИдЗначения = Строка(ВыборкаЗначенийСвойств.Значение.УникальныйИдентификатор());
						СтруктЗначений.Значение	  = ПереводСвойства(Лев(ВыборкаЗначенийСвойств.Значение.Наименование, 1000));
					КонецЕсли;
					МассивЗначений.Добавить(СтруктЗначений);
				КонецЦикла;
			Иначе
				
				//Это означает что мы выгружаем значения какого то произвольного справочника
				//честно говоря это не очень гуд - если справочник большой, висеть будет долго
				
				//пока таких случаев нет, выдам сообщение и пропущу
				Сообщить("Выгрузка свойств типа "+ТипЗначенияСправочник+" не предусмотрена, обратитесь к разработчику!");
				
				Если Ложь Тогда
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					               |	ЗначенияСвойствОбъектов.Свойство КАК Свойство,
					               |	ЗначенияСвойствОбъектов.Значение КАК Значение
					               |ПОМЕСТИТЬ ЗначенияДляВыгрузки
					               |ИЗ
					               |	РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
					               |ГДЕ
					               |	ЗначенияСвойствОбъектов.Объект.B2B_СЭ_НоменклатураДляВыгрузки
					               |
					               |СГРУППИРОВАТЬ ПО
					               |	ЗначенияСвойствОбъектов.Свойство,
					               |	ЗначенияСвойствОбъектов.Значение
					               |;
					               |
					               |////////////////////////////////////////////////////////////////////////////////
					               |ВЫБРАТЬ
					               |	ПользовательскийСправочник.Ссылка КАК Объект,
					               |	ПользовательскийСправочник.Наименование КАК Наименование
					               |ИЗ
					               |	Справочник." +  ТипЗначенияСправочник + " КАК ПользовательскийСправочник
					               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗначенияДляВыгрузки КАК ЗначенияДляВыгрузки
					               |		ПО ПользовательскийСправочник.Ссылка = ЗначенияДляВыгрузки.Значение";
					
					Запрос.Текст = СтрЗаменить(Запрос.Текст,"ЗначенияСвойствОбъектов.Объект.B2B_СЭ_НоменклатураДляВыгрузки"," ЗначенияСвойствОбъектов.Объект.B2B_Портал = &B2B_Портал");	
					Запрос.УстановитьПараметр("B2B_Портал",Параметры.B2B_Портал);
						
					ВыборкаЗначенийСвойств = Запрос.Выполнить().Выбрать();
					
					Пока ВыборкаЗначенийСвойств.Следующий() Цикл
						Если ЗначениеЗаполнено(ВыборкаЗначенийСвойств.Объект) тогда  
							СтруктЗначений = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(Структ.ВариантыЗначений)); 
							СтруктЗначений.ИдЗначения = XMLСтрока(ВыборкаЗначенийСвойств.Объект);
							СтруктЗначений.Значение	  = ПереводСвойства(Лев(ВыборкаЗначенийСвойств.Наименование, 1000));
							МассивЗначений.Добавить(СтруктЗначений);
						КонецЕсли;	
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;	

			Структ.ВариантыЗначений = МассивЗначений;
			
		Иначе //строка 
			Структ.Удалить("ВариантыЗначений");
		КонецЕсли;
		
		МассивImportСвойства.Добавить(Структ);		
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьМассивImportТовары(Параметры, МассивImportТовары, СтруктураImportТовары, СписокСвойств, ТаблицаКартинок, НомерПакета)

	//МассивImportТовары = Новый Массив();
	//СтруктураImportТовары = Новый Структура;
	//СтруктураImportТовары.Вставить("Ид");
	//СтруктураImportТовары.Вставить("ПометкаУдаления");
	//СтруктураImportТовары.Вставить("Штрихкод");
	//СтруктураImportТовары.Вставить("Артикул");
	//СтруктураImportТовары.Вставить("Наименование");
	//СтруктураImportТовары.Вставить("БазоваяЕдиница");
	//СтруктураImportТовары.Вставить("Группы");  
	//СтруктураImportТовары.Вставить("Описание");
	//СтруктураImportТовары.Вставить("Картинка");
	//СтруктураImportТовары.Вставить("Страна");  
	//СтруктураImportТовары.Вставить("ЗначенияСвойств");  
	//СтруктураImportТовары.Вставить("СтавкиНалогов");  
	//СтруктураImportТовары.Вставить("ЗначенияРеквизитов");  
	//СтруктураImportТовары.Вставить("Вес");
	
	СпВыгруженных = Новый СписокЗначений;
	
	для каждого стр из Параметры.Товары цикл    
		Если стр.НомерПакета <> НомерПакета Тогда
			Продолжить;
		КонецЕсли;
		//Если СпВыгруженных.НайтиПоЗначению(стр.Номенклатура.СЭ_ТипНоменклатуры) <> Неопределено тогда
		//	Продолжить;
		//КонецЕсли;
		//СпВыгруженных.Добавить(Стр.Номенклатура.СЭ_ТипНоменклатуры);
		Структ = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(СтруктураImportТовары));
		//Структ.Ид = Строка(стр.Номенклатура.СЭ_ТипНоменклатуры.УникальныйИдентификатор());
		Структ.Ид = Строка(стр.ИД);  
		
		//с выгрузкой ШК чтото не очень понятно, он вроде как для каждой характеристики, почему он в 
		//этом разделе - непонятно
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
		               |ИЗ
		               |	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		               |ГДЕ
		               |	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура";
		Запрос.УстановитьПараметр("Номенклатура",стр.Номенклатура);
		регсв = Запрос.Выполнить().Выбрать();
		Если регсв.Следующий() Тогда
			Шк = регсв.Штрихкод;
		Иначе
			Шк = "";
		КонецЕсли;
		//регсв = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
		//регсв.Владелец = стр.Номенклатура;
		//регсв.Прочитать();
		Структ.Штрихкод = Строка(Шк);
		Структ.Артикул = стр.Номенклатура.Артикул;
		Структ.Наименование = стр.Номенклатура.Наименование;  
		
		Если стр.Номенклатура.B2B_НазваниеWeb <> "" Тогда 
			Структ.Наименование = стр.Номенклатура.B2B_НазваниеWeb;
		КонецЕсли;
		
		Структ.БазоваяЕдиница = 778;//это код упаковки Число(стр.Номенклатура.БазоваяЕдиницаИзмерения.Код);
		Структ.ПометкаУдаления = стр.Номенклатура.ПометкаУдаления;
		
		МассивГрупп = Новый Массив;
		ПолучитьМассивГрупп(МассивГрупп, стр.Номенклатура, стр.B2B_СЭ_ТипНоменклатуры);
		Структ.Группы = МассивГрупп;    
		
		Структ.Описание = ?(стр.B2B_СЭ_ТипНоменклатуры.Пустая(),Строка(стр.Номенклатура.Описание),стр.B2B_СЭ_ТипНоменклатуры.Описание);
		
		СтрокаКартинки = ТаблицаКартинок.найти(стр.Номенклатура);
		Если СтрокаКартинки <> Неопределено Тогда
			Структ.Картинка = "/"+СтрокаКартинки.Адрес;
		КонецЕсли;

		Структ.Страна = Строка(стр.Номенклатура.СтранаПроисхождения);   
		
		МассивСвойств = Новый Массив;                          
		ПолучитьМассивСвойств(МассивСвойств, стр.Номенклатура, СписокСвойств, Параметры.тзСвойств);
		Структ.ЗначенияСвойств = МассивСвойств;
		
		Ставка = Новый Структура("Наименование, Ставка","НДС",20);
		Мас = Новый Массив;
		Мас.Добавить(Ставка);
        Структ.СтавкиНалогов = Мас;
		
		МассивЗР = Новый Массив;
		ПолучитьМассивЗР(МассивЗР, стр.Номенклатура);
        Структ.ЗначенияРеквизитов = МассивЗР;
		
        Структ.Вес = Строка(стр.Номенклатура.ВесЕдиницаИзмерения.Вес);
		
		МассивImportТовары.Добавить(Структ);		
		
	конецЦикла;

КонецПроцедуры    

Процедура ПолучитьМассивГрупп(МассивГрупп, Номенклатура, СЭ_ТипНоменклатуры) 
	
	//это можно ускорить если изменить систему хранения - в номенклатуре хранить группу
	
	ЗапросГрупп = Новый Запрос;
	ЗапросГрупп.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                    |	Б_ПользовательскиеГруппыТоваровТовары.Ссылка.ИдентификаторРаздела КАК ИдентификаторРаздела
	                    |ИЗ
	                    |	Справочник.B2B_Б_ПользовательскиеГруппыТоваров.Товары КАК Б_ПользовательскиеГруппыТоваровТовары
	                    |ГДЕ
	                    |	Б_ПользовательскиеГруппыТоваровТовары.Номенклатура = &Номенклатура";  
	
	ЗапросГрупп.УстановитьПараметр("Номенклатура", Номенклатура);
	Рез = ЗапросГрупп.Выполнить().Выбрать();
	Пока Рез.Следующий() Цикл
		МассивГрупп.Добавить(Рез.ИдентификаторРаздела);
	КонецЦикла;  
	
	//также добавим основную группу из самой номенклатуры и все из списка из самой номенклатуры
	Если НЕ Номенклатура.B2B_ГруппаНаСайтеОсновная.Пустая() Тогда
		Если МассивГрупп.Найти(Номенклатура.B2B_ГруппаНаСайтеОсновная.ИдентификаторРаздела) = Неопределено Тогда
			МассивГрупп.Добавить(Номенклатура.B2B_ГруппаНаСайтеОсновная.ИдентификаторРаздела);	
		КонецЕсли;
	КонецЕсли;
	
	Для каждого стр из Номенклатура.B2B_ГруппыНаСайте Цикл   
		Если НЕ стр.Группа.Пустая() Тогда
			Если МассивГрупп.Найти(стр.Группа.ИдентификаторРаздела) = Неопределено Тогда
				МассивГрупп.Добавить(стр.Группа.ИдентификаторРаздела);	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры 

Процедура ПолучитьМассивСвойств(МассивСвойств, Номенклатура, Свойства, тзСвойств, ЗаменитьРазмерХарактеристики = "", ВариантКомплектации = "") 
	
	Запр = Новый Запрос;
	Запр.Текст ="ВЫБРАТЬ
	            |	ЗначенияСвойствОбъектов.Свойство КАК Свойство,
	            |	ЗначенияСвойствОбъектов.Значение КАК Значение
	            |ИЗ
	            |	РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
	            |ГДЕ
	            |	ЗначенияСвойствОбъектов.Объект = &Объект
	            |	И ЗначенияСвойствОбъектов.Свойство В(&Свойства)";
	
	Запр.УстановитьПараметр("Объект",Номенклатура);
	Запр.УстановитьПараметр("Свойства",Свойства);  
	
	рез = Запр.Выполнить().Выбрать();
	
	Пока рез.Следующий() цикл        
		
		СтрокаСвойства = тзСвойств.Найти(рез.Свойство); 
		Если СтрокаСвойства = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Ид = Строка(СтрокаСвойства.Ид);
		
		Если ЗаменитьРазмерХарактеристики <> "" И
			Ид = "B2B_Size" Тогда   
			Структ = Новый Структура("Ид,Значение",Ид,Строка(ЗаменитьРазмерХарактеристики));   
		Иначе
			Структ = Новый Структура("Ид,Значение",Ид,ПереводСвойства(Строка(рез.Значение)));   
		КонецЕсли;
		МассивСвойств.Добавить(Структ);
		
	КонецЦикла;
	
	//050423
	//добавим размерный ряд для характеристики - его правда собирать надо вручную    
	Если ВариантКомплектации <> "" Тогда
		РазмерныйРядСтрокой = "";
		Для каждого стр из ВариантКомплектации.Товары Цикл
			РазмерныйРядСтрокой = РазмерныйРядСтрокой + Строка(стр.Характеристика)+"-"+Строка(стр.Количество)+"|";
		КонецЦикла;
		Структ = Новый Структура("Ид,Значение",тзСвойств.Найти(Справочники.B2B_w_Настройки.Свойство_B2B_РазмерныйРяд.Значение).ИД,Строка(РазмерныйРядСтрокой));
		МассивСвойств.Добавить(Структ);
	КонецЕсли;
	//
	
КонецПроцедуры

Процедура ПолучитьМассивЗР(МассивЗР, Номенклатура, ЭтоПредложение = Ложь) 
	
	//Структ = Новый Структура("Наименование,Значение","ОписаниеФайла","/TUTBUDETSSILKA.JPG");
	//МассивЗР.Добавить(Структ);                                       
	Если ЭтоПредложение Тогда
		Возврат;
	КонецЕсли;
	
	Структ = Новый Структура("Наименование,Значение","ВидНоменклатуры",Строка(Номенклатура["ВидНоменклатуры"]));
	МассивЗР.Добавить(Структ);

	Структ = Новый Структура("Наименование,Значение","ТипНоменклатуры",Строка(Номенклатура["ВидНоменклатуры"].ТипНоменклатуры));
	МассивЗР.Добавить(Структ);

	Структ = Новый Структура("Наименование,Значение","Полное наименование",Номенклатура.НаименованиеПолное);
	МассивЗР.Добавить(Структ);

	Структ = Новый Структура("Наименование,Значение","Код",Номенклатура.Код);
	МассивЗР.Добавить(Структ);

	Структ = Новый Структура("Наименование,Значение","Планируемая дата поступления","");
	МассивЗР.Добавить(Структ);
	
	Структ = Новый Структура("Наименование,Значение","1c","1C8");
	МассивЗР.Добавить(Структ);
	
КонецПроцедуры

Процедура ЗаполнитьМассивPricesПакетПредложенийПредложенияЦены(МассивPricesПакетПредложенийПредложенияЦены,СтруктураPricesПакетПредложенийПредложенияЦены)
	

КонецПроцедуры 

Процедура ЗаполнитьМассивImportКлассификаторГруппы(МассивImportКлассификаторГруппы, Родитель = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Б_ПользовательскиеГруппыТоваров.Ссылка КАК Ссылка,
	               |	Б_ПользовательскиеГруппыТоваров.Наименование КАК Наименование,
	               |	Б_ПользовательскиеГруппыТоваров.ИдентификаторРаздела КАК Ид,
	               |	Б_ПользовательскиеГруппыТоваров.ПометкаУдаления КАК ПометкаУдаления
	               |ИЗ
	               |	Справочник.B2B_Б_ПользовательскиеГруппыТоваров КАК Б_ПользовательскиеГруппыТоваров
	               |ГДЕ
	               |	Б_ПользовательскиеГруппыТоваров.Родитель = &Родитель"; 
	
	Если Родитель = Неопределено Тогда
		Запрос.УстановитьПараметр("Родитель",Справочники.B2B_Б_ПользовательскиеГруппыТоваров.ПустаяСсылка());
	Иначе                                                                                                
		Запрос.УстановитьПараметр("Родитель", Родитель);
	КонецЕсли;
	Рез = Запрос.Выполнить().Выбрать();
	Пока Рез.Следующий() Цикл 
		СтруктураImportКлассификаторГруппы = Новый Структура("Ид,Наименование,ПометкаУдаления,Группы");
		ЗаполнитьЗначенияСвойств(СтруктураImportКлассификаторГруппы,Рез);   
		СтруктураImportКлассификаторГруппы.Группы = Новый Массив();
		ЗаполнитьМассивImportКлассификаторГруппы(СтруктураImportКлассификаторГруппы.Группы, Рез.Ссылка);
		Если СтруктураImportКлассификаторГруппы.Группы.Количество() = 0 Тогда
			СтруктураImportКлассификаторГруппы.Удалить("Группы");
		КонецЕсли; 
		МассивImportКлассификаторГруппы.Добавить(СтруктураImportКлассификаторГруппы);
	КонецЦикла;

КонецПроцедуры 

Процедура ЗаполнитьМассивImportКлассификаторТипыЦен(Параметры, МассивImportКлассификаторТипыЦен,СтруктураImportКлассификаторТипыЦен)	
	
	для каждого стрТЦ из Параметры.ТипыЦен цикл
		
		Структ = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(СтруктураImportКлассификаторТипыЦен));
		Структ.Ид = стрТЦ.ИД;
		Структ.Наименование = стрТЦ.ВидЦены.Наименование;
		Структ.Валюта = стрТЦ.ВидЦены.ВалютаЦены.Наименование;
		Структ.Налог.Наименование = "НДС";
		Структ.Налог.УчтеноВСумме = стрТЦ.ВидЦены.ЦенаВключаетНДС;
		
		МассивImportКлассификаторТипыЦен.Добавить(Структ);
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьМассивImportКлассификаторЕдиницыИзмерения(Параметры, МассивImportКлассификаторЕдиницыИзмерения,СтруктураImportКлассификаторЕдиницыИзмерения)

	//получим список еи 
	//можно ускорить - запросом выбрать разные ЕИ по параметру - таблице     
	
	//
	Структ = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(СтруктураImportКлассификаторЕдиницыИзмерения));
	Структ.Ид = 778;
	Структ.НаименованиеКраткое = "упак";
	Структ.Код = 778;
	Структ.НаименованиеПолное = "Упаковка";
	Структ.МеждународноеСокращение = "NMP";
	
	МассивImportКлассификаторЕдиницыИзмерения.Добавить(Структ);
		
	//пока выгрузим только Упаковку, не очень понятно надо ли еще единицы выгружать	
	Если Ложь Тогда
		сп = новый СписокЗначений;
		для каждого стр из Параметры.Товары цикл
			если сп.НайтиПоЗначению(стр.Номенклатура.ЕдиницаИзмерения) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			сп.Добавить(стр.Номенклатура.ЕдиницаИзмерения);
		
			Структ = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(СтруктураImportКлассификаторЕдиницыИзмерения));
			//Структ.Ид = Строка(стр.Номенклатура.БазоваяЕдиницаИзмерения.УникальныйИдентификатор());
			Структ.Ид = Число(стр.Номенклатура.ЕдиницаИзмерения.Код);
			Структ.НаименованиеКраткое = СокрЛП(стр.Номенклатура.ЕдиницаИзмерения.Наименование);
			Структ.Код = Число(стр.Номенклатура.ЕдиницаИзмерения.Код);
			Структ.НаименованиеПолное = СокрЛП(стр.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное);
			Структ.МеждународноеСокращение = СокрЛП(стр.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение);
			
			МассивImportКлассификаторЕдиницыИзмерения.Добавить(Структ);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьМассивOffersСвойства(Параметры, МассивOffersСвойства,СтруктураOffersСвойства, СписокСвойствХарактеристик)

	ФильтрТаблицаСвойств = Новый ТаблицаЗначений;
	НоваяКолонка = ФильтрТаблицаСвойств.Колонки.Добавить("СЭ_ДляВыгрузки");
	НоваяКолонка = ФильтрТаблицаСвойств.Колонки.Добавить("Свойство");
	НоваяКолонка = ФильтрТаблицаСвойств.Колонки.Добавить("ВыгружатьВХИ");
	НоваяКолонка = ФильтрТаблицаСвойств.Колонки.Добавить("ВлияетНаЦену");    
	НоваяКолонка = ФильтрТаблицаСвойств.Колонки.Добавить("ИД");
	НоваяКолонка = ФильтрТаблицаСвойств.Колонки.Добавить("Наименование"); 
	
	
	Для каждого стр из Параметры.СвойстваДляПредложений Цикл
		
		НоваяСтрока = ФильтрТаблицаСвойств.Добавить(); 
		ЗаполнитьЗначенияСвойств(НоваяСтрока,стр,"Свойство,ИД,Наименование");
		НоваяСтрока.СЭ_ДляВыгрузки = Истина;
		НоваяСтрока.ВыгружатьВХИ = Ложь;
		НоваяСтрока.ВлияетНаЦену = Ложь;     

		СписокСвойствХарактеристик.Добавить(НоваяСтрока.Свойство);      
		
	КонецЦикла;

	ПустойСписок = Новый СписокЗначений;
	ЗаполнитьМассивImportСвойства(Параметры, МассивOffersСвойства,СтруктураOffersСвойства, ПустойСписок, ФильтрТаблицаСвойств);		

КонецПроцедуры

Процедура ЗаполнитьМассивPricesПакетПредложенийПредложения(Параметры, МассивPricesПакетПредложенийПредложения, СтруктураPricesПакетПредложенийПредложения, НомерПакета)

	для каждого стр из Параметры.Товары цикл  
			
		Если стр.НомерПакета <> НомерПакета Тогда
			Продолжить;
		КонецЕсли;   
		
		//Ид предложения собирается один из двух
		//или мы находим по Артикулу = АртикулТовара/Характеристика в старом справочнике
		//B2B_СЭ_ТипНоменклатуры
		//или если не находится, то составляем как GUID товара# GUID Характеристики    
		
		//а список характеристик получаем по ВариантамКомплектации
		
		Запрос = Новый Запрос;   
		Запрос.УстановитьПараметр("Владелец",стр.Номенклатура);
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ВариантыКомплектацииНоменклатуры.Владелец КАК Номенклатура,
		               |	ВариантыКомплектацииНоменклатуры.Характеристика КАК Характеристика,
		               |	0 КАК Остаток,
		               |	0 КАК Цена,
		               |	ВариантыКомплектацииНоменклатуры.Количество КАК Количество,
		               |	ВариантыКомплектацииНоменклатуры.Наименование КАК НаименованиеВарианта,
		               |	ВариантыКомплектацииНоменклатуры.Ссылка КАК ВариантКомплектации
		               |ПОМЕСТИТЬ ВТ
		               |ИЗ
		               |	Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
		               |ГДЕ
		               |	ВариантыКомплектацииНоменклатуры.Владелец = &Владелец
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ.Номенклатура КАК Номенклатура,
		               |	ВТ.Характеристика КАК Характеристика,
		               |	ЕСТЬNULL(гф_ДвижениеКодовМаркировкиОрганизацииОстатки.КоличествоОстаток, ВТ.Остаток) КАК Остаток,
		               |	ВТ.Цена КАК Цена,
		               |	ВТ.Количество КАК КоличествоПарВНаборе,
		               |	ВТ.НаименованиеВарианта КАК НаименованиеВарианта,
		               |	ВТ.ВариантКомплектации КАК ВариантКомплектации
		               |ИЗ
		               |	ВТ КАК ВТ
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.гф_ДвижениеКодовМаркировкиОрганизации.Остатки КАК гф_ДвижениеКодовМаркировкиОрганизацииОстатки
		               |		ПО ВТ.Номенклатура = гф_ДвижениеКодовМаркировкиОрганизацииОстатки.КМ.Номенклатура
		               |			И ВТ.Характеристика = гф_ДвижениеКодовМаркировкиОрганизацииОстатки.КМ.Характеристика";
		
		тзХарактеристик = Запрос.Выполнить().Выгрузить(); 
		
		тзХарактеристик.Колонки.Добавить("ИД");
		
		стр.Характеристики = тзХарактеристик;
		
		Для Каждого стрХарактеристика из стр.Характеристики Цикл
			
			ИтоговыйАртикул = стр.Номенклатура.Артикул+"/"+стрХарактеристика.Характеристика.Наименование;
			ЭлементСтарогоСправочника = Справочники.B2B_СправочникНоменклатураУПП.НайтиПоРеквизиту("Артикул",ИтоговыйАртикул);  
			Если ЭлементСтарогоСправочника.Пустая() Тогда   
				стрХарактеристика.ИД = стр.ИД+"#"+Строка(стрХарактеристика.Характеристика.УникальныйИдентификатор());
			Иначе
				стрХарактеристика.ИД = ЭлементСтарогоСправочника.GUID;		
			КонецЕсли;
			
			Структ = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(СтруктураPricesПакетПредложенийПредложения));
			//Так было в УПП
			//Структ.Ид = Строка(стр.Номенклатура.СЭ_ТипНоменклатуры.УникальныйИдентификатор())+"#"+Строка(стр.Номенклатура.УникальныйИдентификатор());
			Структ.Ид = стрХарактеристика.ИД;
			
			МассивЦены = Новый Массив;
			Для каждого стрТЦ из Параметры.ТипыЦен Цикл 
				
				//здесь тоже не все так просто
				//Чтобы посчитать цену комплекта - надо идти по остаткам и по сути собрать цену из цен на Пары обуви - т.е по составу
				
				//пока сделаю проще - посчитаю по варианту комплектации
				
				//вот тоже пока не очень понял, возможно данные не заданы
				//но сейчас цены заданы только на номенклатуру, без всякой характеристики
				//т.е. делаю вывод что цена задана просто на пару
				//тогда цену на набор считаю как сумму таких цен в наборе (на количество пар)
				
				
				Запр = Новый Запрос;
				Запр.Текст = "ВЫБРАТЬ
				             |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
				             |ИЗ
				             |	РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(
				             |			,
				             |			Номенклатура = &Номенклатура
				             |				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних";
				Запр.УстановитьПараметр("Номенклатура",стр.Номенклатура);
				Запр.УстановитьПараметр("ВидЦены",стрТЦ.ВидЦены);
				рез = запр.Выполнить().Выбрать();
				Если рез.Следующий() Тогда
					Цена = рез.Цена;
				Иначе
					Цена = 0;
				КонецЕсли;
				
				СтруктЦена = Новый Структура;
				
				СтруктЦена.Вставить("Представление", Строка(Цена*стрХарактеристика.КоличествоПарВНаборе)+" руб. за упак.");//+рез.ЕдиницаИзмерения);
				
				СтруктЦена.Вставить("ИдТипаЦены",стрТЦ.Ид);
				СтруктЦена.Вставить("ЦенаЗаЕдиницу", Цена*стрХарактеристика.КоличествоПарВНаборе);
				СтруктЦена.Вставить("Валюта","руб"); 
				СтруктНалог = Новый Структура("Наименование, УчтеноВСумме","НДС",Ложь);
				СтруктЦена.Вставить("Налог",СтруктНалог);
				МассивЦены.Добавить(СтруктЦена);
			КонецЦикла;	 
			Структ.Цены = МассивЦены; 
			
			МассивPricesПакетПредложенийПредложения.Добавить(Структ);
			
		КонецЦикла;
		
		
	КонецЦикла;       
	
КонецПроцедуры

Процедура ОтправитьНаСервере(Параметры)
		
	АдресСервера    = Параметры.АдресОтправки;
	Логин 			= Параметры.ИмяПользователя;
	Пароль       	= Параметры.Пароль;   
	//Логин 			= "export";
	//Пароль       	= "d74frT222s9!++";
	//http://b2b-portal.wortmann-group.develop.maximaster.ru/bitrix/admin/maximaster.unloading1c.1c_catalog_import.php
	АдресСервера = Лев(Параметры.АдресОтправки,найти(Параметры.АдресОтправки,".ru/")+2);
	АдресЗапроса = СтрЗаменить(Параметры.АдресОтправки,АдресСервера,"");
	АдресЗапроса = Прав(АдресЗапроса,СтрДлина(АдресЗапроса)-1);
	
	ТелоЗапросаJSON = Параметры.Результат;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");

	//HTTPЗапрос  = Новый HTTPЗапрос("bitrix/admin/maximaster.unloading1c.1c_catalog_import.php", ЗаголовокHTTP);
	HTTPЗапрос  = Новый HTTPЗапрос(АдресЗапроса, ЗаголовокHTTP);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапросаJSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	ЗащищенноеСоединение = ИнтеграцияИСПовтИсп.ЗащищенноеСоединение();
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			АдресСервера,
			,
			Логин,
			Пароль,
			,
			0, ЗащищенноеСоединение);
		
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Сообщить(НСтр("ru='Ошибка '") + Символы.ПС +
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Возврат;
		
	КонецПопытки;
	
	РезультатОтправкиЗапроса = B2B_ОбщиеПроцедурыИФункции.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(
		HTTPОтвет, ТекстОшибки);
		
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
						
			Сообщить(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			Сообщить(РезультатОтправкиЗапроса.ТекстОшибки);
			
		Иначе
			
			Сообщить(ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				НСтр("ru='Отправка данных'"),
				РезультатОтправкиЗапроса));
				
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		Сообщить(СтрШаблон(
			НСтр("ru='Данные не отправлены.
				     |Текст ошибки: %1'"),
			РезультатОтправкиЗапроса.ТекстОшибки));
			
		Возврат;
		
	КонецЕсли;
КонецПроцедуры

//Процедура Отправить(Команда)
//	ОтправитьНаСервере();
//КонецПроцедуры

//Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
//	НаименованиеКаталога = "Tamaris";
//	GUIDКаталога = "57b44e28-ad5d-4a27-968d-f20e68c50b12";
//КонецПроцедуры

//Процедура ОсновныеДействияФормыЗаполнитьТоварами(Кнопка)
//	// Вставить содержимое обработчика. 
//	
//	Запрос=  Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 2000
//	               |	НоменклатураСправочник.Ссылка КАК Номенклатура
//	               |ИЗ
//	               |	Справочник.Номенклатура КАК НоменклатураСправочник
//	               |ГДЕ
//	               |	НоменклатураСправочник.B2B_Портал = &B2B_Портал
//	               |	И НоменклатураСправочник.СЭ_ТипНоменклатуры <> &СЭ_ТипНоменклатуры
//	               |	И НоменклатураСправочник.СЭ_НоменклатураДляВыгрузки = ИСТИНА";
//	Запрос.УстановитьПараметр("B2B_Портал",B2B_Портал); 
//	Запрос.УстановитьПараметр("СЭ_ТипНоменклатуры",Справочники.СЭ_ТипНоменклатуры.ПустаяСсылка()); 
//	рез = запрос.Выполнить().Выгрузить();
//	Товары.Загрузить(рез);
//	
//КонецПроцедуры

#Область B2C 

//&Вместо("ЗаполнитьКлассификатор")
Процедура B2C_ЗаполнитьКлассификатор(ДанныеДляВыгрузкиКаталога, Классификатор, ПрикладныеПараметры, УзелОбмена = Неопределено, ИдентификаторКаталога = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если Узелобмена = Неопределено Тогда//Или
		//УзелОбмена.B2B_Портал.Пустая() Тогда
		//типовой механизм
	
		КлассифицироватьПоВидамНоменклатуры = Неопределено;
		Если ПрикладныеПараметры.Свойство("КлассифицироватьПоВидамНоменклатуры", КлассифицироватьПоВидамНоменклатуры)
			И КлассифицироватьПоВидамНоменклатуры = Истина Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВременнаяТаблицаНоменклатура.НоменклатураВидНоменклатуры КАК ВидНоменклатуры
			|ПОМЕСТИТЬ втКаталог
			|ИЗ
			|	&ВременнаяТаблицаНоменклатура КАК ВременнаяТаблицаНоменклатура
			|ГДЕ
			|	НЕ ВременнаяТаблицаНоменклатура.НоменклатураВидНоменклатуры = НЕОПРЕДЕЛЕНО
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ВидНоменклатуры
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втКаталог.ВидНоменклатуры КАК Номенклатура
			|ИЗ
			|	втКаталог КАК втКаталог
			|ИТОГИ ПО
			|	Номенклатура ИЕРАРХИЯ";

			
		Иначе
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВременнаяТаблицаНоменклатура.Номенклатура КАК Номенклатура
			|ПОМЕСТИТЬ втКаталог
			|ИЗ
			|	&ВременнаяТаблицаНоменклатура КАК ВременнаяТаблицаНоменклатура
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втКаталог.Номенклатура КАК Номенклатура
			|ИЗ
			|	втКаталог КАК втКаталог
			|ИТОГИ ПО
			|	Номенклатура ТОЛЬКО ИЕРАРХИЯ";
			
		КонецЕсли;  
		Запрос.УстановитьПараметр("ВременнаяТаблицаНоменклатура", ДанныеДляВыгрузкиКаталога);
	Иначе
		//Выгружаем группы выгруженные из УПП
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	B2B_Б_ПользовательскиеГруппыТоваров.Наименование КАК Наименование,
		               |	B2B_Б_ПользовательскиеГруппыТоваров.ИдентификаторРаздела КАК ИдентификаторРаздела,
		               |	B2B_Б_ПользовательскиеГруппыТоваров.Ссылка КАК Номенклатура
		               |ИЗ
		               |	Справочник.B2B_Б_ПользовательскиеГруппыТоваров КАК B2B_Б_ПользовательскиеГруппыТоваров
		               |ГДЕ
		               |	B2B_Б_ПользовательскиеГруппыТоваров.Ссылка В ИЕРАРХИИ(&КорневойЭлемент)
		               |ИТОГИ ПО
		               |	Номенклатура ИЕРАРХИЯ";
		Запрос.УстановитьПараметр("КорневойЭлемент",Справочники.B2B_Б_ПользовательскиеГруппыТоваров.НайтиПоНаименованию(ИдентификаторКаталога));
		
	КонецЕсли;

	Результат = Запрос.Выполнить();
	
	Классификатор = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией)
	
	
КонецПроцедуры


&Вместо("ЗаполнитьГруппыКлассификатораXDTO")
Процедура B2C_ЗаполнитьГруппыКлассификатораXDTO(ГруппыКлассификатораXDTO, ДеревоГрупп, ПакетCML, ПрикладныеПараметры, ТекущийРодитель = Неопределено)
	
	Для Каждого СтрокаДерева Из ДеревоГрупп Цикл
		
		КлассифицироватьПоВидамНоменклатуры = Неопределено;

		//Отработка своего справочника групп
		Если ТипЗнч(СтрокаДерева.Номенклатура) = Тип("СправочникСсылка.B2B_Б_ПользовательскиеГруппыТоваров") Тогда
			
			Если СтрокаДерева.Номенклатура = ТекущийРодитель Тогда
				Продолжить;
			КонецЕсли; 
			
			//Для Каждого СтрокаДерева_ Из СтрокаДерева.Строки Цикл  //пропустим корневой элемент, сразу обработаем его внутренности
				
				 
				
				ГруппаXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("Группа"));
				
				ИдГруппы = СтрокаДерева.ИдентификаторРаздела;
				ИмяГруппы = СтрокаДерева.Наименование;         
				
				//Частный случай корневого элемента, вообще надо переименовать в справочнике, но я не уверен что там это не заденет ничего
				Если ИдГруппы = "64725e88-e647-4468-8c2c-7d231937e11f" Тогда     
					//Продолжить;
					ИмяГруппы = "Основной каталог товаров";
				КонецЕсли;
				
				ГруппаXDTO.Ид = ИдГруппы;
				ГруппаXDTO.Наименование = ФорматНаименованияДляXDTO(ИмяГруппы);
				
				ГруппыXDTO = B2C_ГруппыНоменклатурыXDTO(СтрокаДерева.Строки, ПакетCML, СтрокаДерева.Номенклатура, КлассифицироватьПоВидамНоменклатуры);
				Если ГруппыXDTO.Группа.Количество() > 0 Тогда
					ГруппаXDTO.Группы = ГруппыXDTO;
				КонецЕсли;
				
				ГруппыКлассификатораXDTO.Группа.Добавить(ГруппаXDTO);    
			//КонецЦикла;
			
		Иначе
			//Типовой вариант
		
			ПрикладныеПараметры.Свойство("КлассифицироватьПоВидамНоменклатуры", КлассифицироватьПоВидамНоменклатуры);
			
			Если КлассифицироватьПоВидамНоменклатуры = Неопределено Или КлассифицироватьПоВидамНоменклатуры = Ложь Тогда
				
				Если Не ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
					Продолжить;
				КонецЕсли;
				
				Если НЕ СтрокаДерева.Номенклатура.ЭтоГруппа Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаДерева.Номенклатура = ТекущийРодитель Тогда
				Продолжить;
			КонецЕсли;
			
			ГруппаXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("Группа"));
			
			ИдГруппы = УникальныйИдентификаторОбъекта(СтрокаДерева.Номенклатура);
			ИмяГруппы = СтрокаДерева.Номенклатура.Наименование;
			
			ГруппаXDTO.Ид = ИдГруппы;
			ГруппаXDTO.Наименование = ФорматНаименованияДляXDTO(ИмяГруппы);
			
			ГруппыXDTO = ГруппыНоменклатурыXDTO(СтрокаДерева.Строки, ПакетCML, СтрокаДерева.Номенклатура, КлассифицироватьПоВидамНоменклатуры);
			Если ГруппыXDTO.Группа.Количество() > 0 Тогда
				ГруппаXDTO.Группы = ГруппыXDTO;
			КонецЕсли;
			
			ГруппыКлассификатораXDTO.Группа.Добавить(ГруппаXDTO);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры


// Рекурсивно формирует Объект XDTO, содержащий иерархию групп номенклатуры.
//
// Параметры:
//  ДеревоГрупп - Дерево значений
//  СписокГрупп - список значений, группы выгружаемого каталога
//  ТекущийРодитель - СправочникСсылка.Номенклатура.
//
// Возвращаемое значение:
//  ОбъектXDTO - объект, содержащий иерархию групп.
//
//&Вместо("ГруппыНоменклатурыXDTO")
Функция B2C_ГруппыНоменклатурыXDTO(ДеревоГрупп, ПакетCML, ТекущийРодитель = Неопределено, КлассифицироватьПоВидамНоменклатуры = Неопределено)
	
	ГруппыТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ПакетCML.Получить("Группа"), "Группы");
	ГруппыXDTO = ФабрикаXDTO.Создать(ГруппыТип);
	
	Для Каждого СтрокаДерева Из ДеревоГрупп Цикл
		
		//Отработка своего справочника групп
		Если ТипЗнч(СтрокаДерева.Номенклатура) = Тип("СправочникСсылка.B2B_Б_ПользовательскиеГруппыТоваров") Тогда
			Если СтрокаДерева.Номенклатура = ТекущийРодитель Тогда
				Продолжить;
			КонецЕсли;
			
			ГруппаXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("Группа"));
			
			ИдГруппы = СтрокаДерева.ИдентификаторРаздела;
			ИмяГруппы = СтрокаДерева.Наименование;
			
			ГруппаXDTO.Ид = ИдГруппы;
			ГруппаXDTO.Наименование = ФорматНаименованияДляXDTO(ИмяГруппы);
			
			Если СтрокаДерева.Строки.Количество() > 0 Тогда
				
				ГруппыОбъектXDTO = B2C_ГруппыНоменклатурыXDTO(СтрокаДерева.Строки, ПакетCML, СтрокаДерева.Номенклатура, КлассифицироватьПоВидамНоменклатуры);
				
				Если ГруппыОбъектXDTO.Группа.Количество() > 0 Тогда
					ГруппаXDTO.Группы = ГруппыОбъектXDTO;
				КонецЕсли;
				
			КонецЕсли;
			
			ГруппыXDTO.Группа.Добавить(ГруппаXDTO);			
		Иначе
			//типовой вариант
			Если КлассифицироватьПоВидамНоменклатуры = Неопределено Или КлассифицироватьПоВидамНоменклатуры = Ложь Тогда
				
				Если НЕ СтрокаДерева.Номенклатура.ЭтоГруппа Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаДерева.Номенклатура = ТекущийРодитель Тогда
				Продолжить;
			КонецЕсли;
			
			ГруппаXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("Группа"));
			
			ИдГруппы = УникальныйИдентификаторОбъекта(СтрокаДерева.Номенклатура);
			ИмяГруппы = СтрокаДерева.Номенклатура.Наименование;
			
			ГруппаXDTO.Ид = ИдГруппы;
			ГруппаXDTO.Наименование = ФорматНаименованияДляXDTO(ИмяГруппы);
			
			Если СтрокаДерева.Строки.Количество() > 0 Тогда
				
				ГруппыОбъектXDTO = ГруппыНоменклатурыXDTO(СтрокаДерева.Строки, ПакетCML, СтрокаДерева.Номенклатура, КлассифицироватьПоВидамНоменклатуры);
				
				Если ГруппыОбъектXDTO.Группа.Количество() > 0 Тогда
					ГруппаXDTO.Группы = ГруппыОбъектXDTO;
				КонецЕсли;
				
			КонецЕсли;
			
			ГруппыXDTO.Группа.Добавить(ГруппаXDTO);
		КонецЕсли;	
	КонецЦикла;
	
	Возврат ГруппыXDTO;
	
КонецФункции


// Добавляет свойства Номенклатуры в список свойств объекта XDTO типа Классификатор.
//
// Параметры
//	КлассификаторXDTO - объект XDTO типа Классификатор
//	ПакетCML - пакет XDTO
//	ВыборкаСвойствНоменклатуры - выборка, содержащая свойства Номенклатуры.
//
&Вместо("ДобавитьСвойстваНоменклатурыВКлассификаторXDTO")
Процедура B2C_ДобавитьСвойстваНоменклатурыВКлассификаторXDTO(КлассификаторXDTO, ПакетCML, ВыборкаСвойствНоменклатуры)
	
	Если ВыборкаСвойствНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваТип = КлассификаторXDTO.Свойства().Получить("Свойства").Тип;
	СвойстваXDTO = ФабрикаXDTO.Создать(СвойстваТип);
	
	Пока ВыборкаСвойствНоменклатуры.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаСвойствНоменклатуры.ТипЗначения) Тогда
			Продолжить;
		КонецЕсли;
		
		ТипСвойство = ПакетCML.Получить("Свойство");
		СвойствоXDTO = ФабрикаXDTO.Создать(ТипСвойство);
		
		//Вот здесь встроим доппроверку, у нас есть регистр сведений с идентификаторами, именно эти идентификаторы на сайт выгружались
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	B2B_РИ_ИдентификаторыСвойствНоменклатурыБитрикс.Идентификатор КАК Идентификатор,
		               |	B2B_РИ_ИдентификаторыСвойствНоменклатурыБитрикс.Наименование КАК Наименование
		               |ИЗ
		               |	РегистрСведений.B2B_РИ_ИдентификаторыСвойствНоменклатурыБитрикс КАК B2B_РИ_ИдентификаторыСвойствНоменклатурыБитрикс
		               |ГДЕ
		               |	B2B_РИ_ИдентификаторыСвойствНоменклатурыБитрикс.Объект = &Объект";
		Запрос.УстановитьПараметр("Объект",ВыборкаСвойствНоменклатуры.Свойство);
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		Если РезультатЗапроса.Следующий() Тогда 
			СвойствоXDTO.ИД = РезультатЗапроса.Идентификатор;
			СвойствоXDTO.Наименование = РезультатЗапроса.Наименование;
		Иначе
			//А это типовой вариант
			СвойствоXDTO.ИД = Строка(ВыборкаСвойствНоменклатуры.Свойство.УникальныйИдентификатор());
			
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Заголовок",ВыборкаСвойствНоменклатуры.Свойство.Метаданные()) Тогда
				СвойствоXDTO.Наименование = ФорматНаименованияДляXDTO(ВыборкаСвойствНоменклатуры.Свойство.Заголовок);
			Иначе
				СвойствоXDTO.Наименование = ФорматНаименованияДляXDTO(ВыборкаСвойствНоменклатуры.Свойство);
			КонецЕсли;  
		КонецЕсли;
		
		Типы = ВыборкаСвойствНоменклатуры.ТипЗначения.Типы();
		
		ТипXML = "Строка";
		
		Если Типы.Количество() <> 1 Тогда
			
			// По стандарту CML можно выгрузить только один тип значений.
			// Выгружаем тип "Строка", как универсальный тип.
			
			СвойствоXDTO.ТипЗначений = ТипXML;
			
		Иначе
			
			Тип = Типы[0];
			
			Если Тип = Тип("Число") Тогда
				ТипXML = "Число";
			ИначеЕсли Тип = Тип("Дата") Тогда
				ТипXML = "Время";
			ИначеЕсли ТипЗначенияСправочник(Тип) Тогда
				ТипXML = "Справочник";
			КонецЕсли;
			
			СвойствоXDTO.ТипЗначений = ТипXML;
			
			Если ТипXML = "Справочник" Тогда
				
				ВариантыЗначенийСвойстваТип = ТипСвойство.Свойства.Получить("ВариантыЗначений").Тип;
				СправочникТип = ВариантыЗначенийСвойстваТип.Свойства.Получить("Справочник").Тип;
				
				ВариантыЗначенийXDTO = ФабрикаXDTO.Создать(ВариантыЗначенийСвойстваТип);
				
				ВариантыЗначений = ВариантыЗначенийСвойстваПоТипу(ВыборкаСвойствНоменклатуры, Тип);
				Для Каждого ВариантЗначения Из ВариантыЗначений Цикл
					
					Значение = Лев(ВариантЗначения, 1000);
					Если ПустаяСтрока(Значение) Тогда
						Продолжить;
					КонецЕсли;
					
					СправочникXDTO = ФабрикаXDTO.Создать(СправочникТип);
					
					СправочникXDTO.ИдЗначения = Строка(ВариантЗначения.УникальныйИдентификатор());
					СправочникXDTO.Значение = ПереводСвойства(Значение);
					
					ВариантыЗначенийXDTO.Справочник.Добавить(СправочникXDTO);
					
				КонецЦикла;
				
				СвойствоXDTO.ВариантыЗначений = ВариантыЗначенийXDTO;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СвойстваXDTO.Свойство.Добавить(СвойствоXDTO);
		
	КонецЦикла;
	
	Если СвойстваXDTO.Свойство.Количество() > 0 Тогда
		КлассификаторXDTO.Свойства = СвойстваXDTO;
	КонецЕсли;
	
КонецПроцедуры


// Добавляет объект XDTO типа Товар в список товаров объекта XDTO типа Каталог
//
// Параметры
//	ТоварыXDTO - объект XDTO типа Товары
//	ПакетCML - пакет XDTO
//	ДополнительныеДанные - структура, содержащая информацию по изображениям номенклатуры и значения свойств
//	Параметры - структура, содержащая параметры обмена.
//
&Вместо("ДобавитьНоменклатуруXDTO")
Процедура B2C_ДобавитьНоменклатуруXDTO(ТоварыXDTO, ПакетCML, ДанныеНоменклатуры, Параметры)
	
	СтруктураРезультата = Параметры.СтруктураРезультата;
	
	ТоварТип = ПакетCML.Получить("Товар");
	ТоварXDTO = ФабрикаXDTO.Создать(ТоварТип);
	
	Если ДанныеНоменклатуры.НоменклатураПометкаУдаления Тогда
		
		ТоварXDTO.Статус = "Удален";
		
	КонецЕсли;
	
	Ид = УникальныйИдентификаторОбъекта(ДанныеНоменклатуры.Номенклатура, ДанныеНоменклатуры.Характеристика); 
	
	//1. Тут поищем, не было ли раньше у нас этого товара выгружено из УПП. Если было - подставим его Ид
	//Ищем ранее опрованной функцией
	Ид = B2B_ОбщиеПроцедурыИФункции.ПолучитьИдТовараДляСайта(ДанныеНоменклатуры.Номенклатура,ДанныеНоменклатуры.Характеристика);
	//
	
	ТоварXDTO.Ид = Ид;
	
	Штрихкод = ПолучитьШтрихкодДляXDTO(ДанныеНоменклатуры.НоменклатураШтрихКод);
	Если ЗначениеЗаполнено(Штрихкод) Тогда
		
		ТоварXDTO.Штрихкод = ШтрихКод;
		
	КонецЕсли;
	
	ТоварXDTO.Артикул = ДанныеНоменклатуры.НоменклатураАртикул;
	
	Наименование = ДанныеНоменклатуры.НоменклатураНаименование;
	Если ЗначениеЗаполнено(ДанныеНоменклатуры.Характеристика) Тогда
		Наименование = Наименование + " (" + ДанныеНоменклатуры.Характеристика + ")";
	КонецЕсли;
	ТоварXDTO.Наименование = ФорматНаименованияДляXDTO(Наименование);
	
	ТоварXDTO.БазоваяЕдиница = БазоваяЕдиницаXDTO(ТоварXDTO, ДанныеНоменклатуры);
	
	//2. Перепишем Группы. Они у нас хранятся: в справочнике Б_ПользовательскиеГруппыТоваров, в самом товаре
	//это был типовой вариант
	Если Ложь Тогда
		ИдГруппы = "";
		Если ЗначениеЗаполнено(ДанныеНоменклатуры.НоменклатураРодитель) Тогда
			
			ИдГруппы = УникальныйИдентификаторОбъекта(ДанныеНоменклатуры.НоменклатураРодитель);
			
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ИдГруппы) Тогда
			
			ГруппыТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ТоварТип, "Группы");
			ГруппыXDTO = ФабрикаXDTO.Создать(ГруппыТип);
			
			ГруппыXDTO.Ид.Добавить(ИдГруппы);
			
			ТоварXDTO.Группы = ГруппыXDTO;
			
		КонецЕсли; 
	//А это переписанный алгоритм
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	B2B_Б_ПользовательскиеГруппыТоваровТовары.Ссылка.ИдентификаторРаздела КАК Группа
		               |ПОМЕСТИТЬ ВТ
		               |ИЗ
		               |	Справочник.B2B_Б_ПользовательскиеГруппыТоваров.Товары КАК B2B_Б_ПользовательскиеГруппыТоваровТовары
		               |ГДЕ
		               |	B2B_Б_ПользовательскиеГруппыТоваровТовары.Номенклатура = &Ссылка
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	Номенклатура.B2B_ГруппаНаСайтеОсновная.ИдентификаторРаздела
		               |ИЗ
		               |	Справочник.Номенклатура КАК Номенклатура
		               |ГДЕ
		               |	Номенклатура.Ссылка = &Ссылка
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	НоменклатураB2B_ГруппыНаСайте.Группа.ИдентификаторРаздела
		               |ИЗ
		               |	Справочник.Номенклатура.B2B_ГруппыНаСайте КАК НоменклатураB2B_ГруппыНаСайте
		               |ГДЕ
		               |	НоменклатураB2B_ГруппыНаСайте.Ссылка = &Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ВТ.Группа КАК Группа
		               |ИЗ
		               |	ВТ КАК ВТ";
		Запрос.УстановитьПараметр("Ссылка",ДанныеНоменклатуры.Номенклатура);  
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();   
			ГруппыТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ТоварТип, "Группы");  
			ГруппыXDTO = ФабрикаXDTO.Создать(ГруппыТип);
			Пока Выборка.Следующий() Цикл 
				Если Выборка.Группа = NULL или 
					Выборка.Группа = Неопределено или
					Выборка.Группа = "" Тогда
					Продолжить;
				КонецЕсли;
				ГруппыXDTO.Ид.Добавить(Выборка.Группа);
			КонецЦикла;   
			ТоварXDTO.Группы = ГруппыXDTO;   
		КонецЕсли;
	КонецЕсли;
	
	// Производитель
	Если ЗначениеЗаполнено(ДанныеНоменклатуры.НоменклатураПроизводитель) Тогда
		
		Если ОбщегоНазначения.ЗначениеСсылочногоТипа(ДанныеНоменклатуры.НоменклатураПроизводитель) Тогда
			
			ИДИзготовитель = УникальныйИдентификаторОбъекта(ДанныеНоменклатуры.НоменклатураПроизводитель)
		Иначе
			ИДИзготовитель = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		
		ИзготовительТип = ПакетCML.Получить("Контрагент");
		ИзготовительXDTO = ФабрикаXDTO.Создать(ИзготовительТип);
		ИзготовительXDTO.Ид = ИДИзготовитель;
		ИзготовительXDTO.Наименование = Строка(ДанныеНоменклатуры.НоменклатураПроизводитель);
		
		ТоварXDTO.Изготовитель = ИзготовительXDTO;
		
	КонецЕсли;
	
	// Ставка НДС
	Если ЗначениеЗаполнено(ДанныеНоменклатуры.НоменклатураСтавкаНДСЗначение) Тогда
		
		СтавкиНалоговТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ТоварТип, "СтавкиНалогов");
		СтавкаНалогаТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(СтавкиНалоговТип, "СтавкаНалога");
		
		СтавкаНалога = ФабрикаXDTO.Создать(СтавкаНалогаТип);
		СтавкаНалога.Наименование = НСтр("ru = 'НДС';
										|en = 'VAT'");
		СтавкаНалога.Ставка = СтрЗаменить(Строка(ДанныеНоменклатуры.НоменклатураСтавкаНДСЗначение), "%","");
		
		СтавкиНалогов = ФабрикаXDTO.Создать(СтавкиНалоговТип);
		СтавкиНалогов.СтавкаНалога.Добавить(СтавкаНалога);
		
		ТоварXDTO.СтавкиНалогов = СтавкиНалогов;
		
	КонецЕсли;
	
	ЗаполнитьХарактеристикиСтрокиТоваров(ТоварXDTO, ДанныеНоменклатуры);
	
	ТоварXDTO.Описание = ДанныеНоменклатуры.НоменклатураОписание;
	
	ОписанияФайлов = Новый Соответствие;
	ДобавитьАдресаИзображенийНоменклатурыXDTO(ТоварXDTO, ДанныеНоменклатуры, ОписанияФайлов, Параметры);
	
	ДобавитьЗначенияСвойствНоменклатурыXDTO(ТоварXDTO, ДанныеНоменклатуры.Свойства);
	
	ЗначенияРеквизитовТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ТоварТип, "ЗначенияРеквизитов");
	ЗначенияРеквизитовXDTO = ФабрикаXDTO.Создать(ЗначенияРеквизитовТип);
	
	Для Каждого ОписаниеФайла Из ОписанияФайлов Цикл
		
		Файл = ОписаниеФайла.Ключ;
		Описание = ОписаниеФайла.Значение;
		
		ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, 
			"ОписаниеФайла", Файл + "#" + Описание);
		
	КонецЦикла;

		
	Если ЗначениеЗаполнено(ДанныеНоменклатуры.НоменклатураФайлОписанияHTML) Тогда
		ОписаниеВФорматеHTML = ТекстHTMLИзФайла(ДанныеНоменклатуры.НоменклатураФайлОписанияHTML);
		
		Если НЕ ПустаяСтрока(ОписаниеВФорматеHTML) Тогда
			
			Если СтрДлина(ОписаниеВФорматеHTML) <= 1000 Тогда
				
				ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, 
					"ОписаниеВФорматеHTML", ОписаниеВФорматеHTML);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, 
		"Код", ДанныеНоменклатуры.НоменклатураКод);
	ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, 
		"ВидНоменклатуры", ДанныеНоменклатуры.НоменклатураВидНоменклатуры);
	ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, 
		"ТипНоменклатуры", ДанныеНоменклатуры.НоменклатураТипНоменклатуры);
	ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, 
		НСтр("ru = 'Полное наименование';
			|en = 'Full description'"), ДанныеНоменклатуры.НоменклатураНаименованиеПолное);

	ТоварXDTO.ЗначенияРеквизитов = ЗначенияРеквизитовXDTO;
	ТоварыXDTO.Товар.Добавить(ТоварXDTO);
	
	СтруктураРезультата.ВыгруженоТоваров =
		СтруктураРезультата.ВыгруженоТоваров + 1;
	
КонецПроцедуры



// Добавляет значения свойств номенклатуры в список значений свойств объекта XDTO типа Товар.
//
// Параметры
//	ТоварXDTO - объект XDTO типа Товар
//	ТаблицаСвойств - таблица значений, содержащая значения свойств номенклатуры
//	Параметры - структура, содержащая параметры обмена
//	ПакетCML - пакет XDTO.
//
&Вместо("ДобавитьЗначенияСвойствНоменклатурыXDTO")
Процедура B2C_ДобавитьЗначенияСвойствНоменклатурыXDTO(ТоварXDTO, ТаблицаСвойств)
	
	ЗначенияСвойствТип = ТоварXDTO.Свойства().Получить("ЗначенияСвойств").Тип;
	ЗначенияСвойствXDTO = ФабрикаXDTO.Создать(ЗначенияСвойствТип);
	ПакетCML = ПакетCML();
	
	Для Каждого СтрокаТаблицыСвойств Из ТаблицаСвойств Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицыСвойств.СвойствоНоменклатуры) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначенияСвойстваXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("ЗначенияСвойства"));
		
		//Подменим идентификатор
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	B2B_РИ_ИдентификаторыСвойствНоменклатурыБитрикс.Идентификатор КАК Идентификатор,
		               |	B2B_РИ_ИдентификаторыСвойствНоменклатурыБитрикс.Наименование КАК Наименование
		               |ИЗ
		               |	РегистрСведений.B2B_РИ_ИдентификаторыСвойствНоменклатурыБитрикс КАК B2B_РИ_ИдентификаторыСвойствНоменклатурыБитрикс
		               |ГДЕ
		               |	B2B_РИ_ИдентификаторыСвойствНоменклатурыБитрикс.Объект = &Объект";
		Запрос.УстановитьПараметр("Объект",СтрокаТаблицыСвойств.СвойствоНоменклатуры);
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		Если РезультатЗапроса.Следующий() Тогда 
			ЗначенияСвойстваXDTO.ИД = РезультатЗапроса.Идентификатор;
		Иначе
			//оставим типовой вариант
			ЗначенияСвойстваXDTO.Ид = УникальныйИдентификаторОбъекта(СтрокаТаблицыСвойств.СвойствоНоменклатуры);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыСвойств.ЗначениеСвойства) Тогда
			
			// Если значение свойства не заполнено, выгружаем пустую строку.
			ЗначениеСвойства = "";
			
		Иначе
			
			ТипЗначенияСвойства = ТипЗнч(СтрокаТаблицыСвойств.ЗначениеСвойства);
			Если ТипЗначенияСвойства = Тип("Дата") Тогда
				
				ЗначениеСвойства = ФорматДатыДляXDTO(СтрокаТаблицыСвойств.ЗначениеСвойства);
				
			ИначеЕсли ТипЗначенияСправочник(ТипЗначенияСвойства) Тогда
				
				ЗначениеСвойства = УникальныйИдентификаторОбъекта(СтрокаТаблицыСвойств.ЗначениеСвойства);
				
			Иначе
				
				ЗначениеСвойства = Строка(СтрокаТаблицыСвойств.ЗначениеСвойства);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗначенияСвойстваXDTO.Значение.Добавить(ЗначениеСвойства);
		ЗначенияСвойствXDTO.ЗначенияСвойства.Добавить(ЗначенияСвойстваXDTO);
		
	КонецЦикла;
	
	Если ЗначенияСвойствXDTO.ЗначенияСвойства.Количество() > 0 Тогда
		ТоварXDTO.ЗначенияСвойств = ЗначенияСвойствXDTO;
	КонецЕсли;
	
	
КонецПроцедуры


#КонецОбласти
