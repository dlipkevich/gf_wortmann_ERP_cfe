    #Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ЗагрузкаИзФайлаВТЧ

// Переопределяет параметры загрузки данных из файла.
//
// Параметры:
// Параметры 
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(Параметры) Экспорт

КонецПроцедуры

// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
// 
// Параметры:
// 	АдресЗагружаемыхДанных- Строка - адрес временного хранилища с таблицей значений, в которой
//                                   находятся загруженные данные из файла.
// 	АдресТаблицыСопоставления - Строка - адрес временного хранилища с пустой таблицей значений,
//                                       являющейся копией табличной части документа, 
//                                       которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
// 	СписокНеоднозначностей - ТаблицаЗначений - состоит из:
//  * Идентификатор - Число - идентификатор
//  * Колонка - Строка - имя колонки
// 	ПолноеИмяТабличнойЧасти - Строка - полное имя табличной части
// 	ДополнительныеПараметры - Структура - дополнительные параметры, переданные из формы-источнике.
//
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
	
	Блокировка = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления); // ТаблицаЗначений
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных); // ТаблицаЗначений
	
	Для каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл
		
		Данные =Блокировка.Добавить();
		Данные.Идентификатор = СтрокаТаблицы.Идентификатор; 
		Данные.Организация = Справочники.Организации.НайтиПоКоду(СтрокаТаблицы.Организация);    
		Если НЕ ЗначениеЗаполнено(Данные.Организация) Тогда
			Данные.Организация = Справочники.Организации.НайтиПоНаименованию(СтрокаТаблицы.Организация);  
		КонецЕсли;
		Данные.Заблокирован = СтрокаТаблицы.Заблокирован;     
		Данные.Комментарий = СтрокаТаблицы.Комментарий;
		Данные.Контрагент = Справочники.Партнеры.НайтиПоКоду(СтрокаТаблицы.Контрагент); 
		Если НЕ ЗначениеЗаполнено(Данные.Контрагент) Тогда   
			Данные.Контрагент = Справочники.Партнеры.НайтиПоНаименованию(СтрокаТаблицы.Контрагент); 
        КонецЕсли;
		Данные.ДоговорКонтрагента = ПоискДоговораКонтрагента(СтрокаТаблицы.ДоговорКонтрагента, Данные.Контрагент);
		Данные.ВидБлокировки = Справочники.гф_ВидыБлокировок.НайтиПоКоду(СтрокаТаблицы.ВидБлокировки); 
		Если НЕ ЗначениеЗаполнено(Данные.ВидБлокировки) Тогда 
			Данные.ВидБлокировки = Справочники.гф_ВидыБлокировок.НайтиПоНаименованию(СтрокаТаблицы.ВидБлокировки); 
        КонецЕсли;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Блокировка, АдресТаблицыСопоставления);
	
КонецПроцедуры

// #wortmann {
// #Поиск договора контрагента по контрагенту
// Галфинд(Просто) Боцманова 2022/09/09
// Параметры:
// ДоговорКонтравгента, Контрагент
Функция ПоискДоговораКонтрагента(ДоговорКонтравгента, Контрагент) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Партнер = &Партнер
		|	И ДоговорыКонтрагентов.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Партнер", Контрагент); 
	Запрос.УстановитьПараметр("Наименование", ДоговорКонтравгента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		 Возврат ВыборкаДетальныеЗаписи.Ссылка;
	 КонецЦикла;  
	 
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции 

#КонецОбласти
#КонецОбласти 
#КонецЕсли