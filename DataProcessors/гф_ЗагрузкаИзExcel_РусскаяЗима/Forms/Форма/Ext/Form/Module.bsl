#Область ОписаниеПеременных

&НаСервере
Перем ТаблицаНоменклатуры;

&НаСервере
Перем ТаблицаВариантов;

&НаСервере
Перем ТаблицаРостовок;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	_ИмяФормы = ЭтотОбъект.ИмяФормы;
	ИмяФормыНачало = СтрЗаменить(_ИмяФормы, ".Форма.Форма", "");
	
	Элементы.НастройкиВариантовКомплектацииРеквизит.СписокВыбора.Очистить();
	Элементы.НастройкиВариантовКомплектацииРеквизит.КнопкаВыпадающегоСписка = Истина;
	Для Каждого Реквизит Из Метаданные.Справочники.ВариантыКомплектацииНоменклатуры.Реквизиты Цикл 
		Элементы.НастройкиВариантовКомплектацииРеквизит.СписокВыбора.Добавить(Реквизит.Имя); 
	КонецЦикла;
	
	Для Каждого Реквизит Из Метаданные.Справочники.ВариантыКомплектацииНоменклатуры.СтандартныеРеквизиты Цикл 
		Элементы.НастройкиВариантовКомплектацииРеквизит.СписокВыбора.Добавить(Реквизит.Имя);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ПерваяСтрока=0 Тогда
		ПерваяСтрока = 2;
	КонецЕсли; 
		
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НастройкиНомПриИзменении(Элемент)
	
	Объект.НастройкиНоменклатуры.Очистить();
	Объект.НастройкиВариантовКомплектации.Очистить();
	
	Если Объект.НастройкиНом.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьНастройки();

КонецПроцедуры 

&НаКлиенте
Процедура ФайлДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выберите файл Excel с данными";
	Диалог.ПолноеИмяФайла = "";
	Диалог.Фильтр = ""
			+ "Формат XLSX (*.xlsx*.xlsx)|*.xlsx|" 
			+ "Формат XLS (*.xls)|*.xls|";
			
	СтруктураДиалог = Новый Структура("Диалог", Диалог);			
	ОписаниеОповещения = Новый ОписаниеОповещения("ФайлДанныхОбработкаВыбораЗавершение", ЭтотОбъект, СтруктураДиалог);			
	Диалог.Показать(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ФайлДанныхОбработкаВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		Объект.ФайлДанных = Диалог.ПолноеИмяФайла;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НастройкиНоменклатурыПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	
	// Галфинд \ Shtak  2024/01/25  =>
	ТекущиеДанные.ИмяВЭксель = "Колонка_"+ТекущиеДанные.Колонка;
	//ТекущиеДанные.ИмяВЭксель = ПреобразоватьИмя(ТекущиеДанные.ИмяКолонки);
	// Галфинд \ Shtak  2024/01/25 <=
КонецПроцедуры 

&НаКлиенте
Процедура ВыборЗначенияТипа(Результат, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = ЛОЖЬ;
	Если Результат = Неопределено Тогда Возврат КонецЕсли;
	
	Элемент = ДополнительныеПараметры.Элемент;
	
	Отбор = Новый Структура();
    Оповещение = Новый ОписаниеОповещения("ПослеВыбораЗначений", ЭтотОбъект, Элемент);
	ПараметрыОткрытия = Новый Структура("Значение", Результат.Значение);

	ОткрытьФорму(ИмяФормыНачало + ".Форма.ФормаВыбораЗначений", ПараметрыОткрытия,
	ЭтотОбъект, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораЗначений(Результат, Элемент) Экспорт

	Если Результат <> Неопределено Тогда 
		ТекДанные = Элемент.Родитель.ТекущиеДанные;
		ТекДанные.РеквизитИлиСвойство = Результат.Представление;
		ТекДанные.ИмяДляПоиска = Результат.Значение;
		ТекДанные.ТипДопСведения = Результат.ТипДопСведения;
	Иначе
		
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура НастройкиНоменклатурыРеквизитИлиСвойствоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Элемент", Элемент);
	
	СтандартнаяОбработка = ЛОЖЬ;
	сзТипы = Новый СписокЗначений();
	сзТипы.Добавить(0, "Реквизиты");
	сзТипы.Добавить(1, "Свойства");
	ооВыборЗначенияТипа = Новый ОписаниеОповещения("ВыборЗначенияТипа", ЭтотОбъект, ДопПараметры);
	сзТипы.ПоказатьВыборЭлемента(
	ооВыборЗначенияТипа,	//Вызов процедуры оповещения
	"Выберите тип информации",	//Заголовок диалогового окна выбора типа
	сзТипы[1]				//Первоначально позиционирование на значение выбора
	);
			
КонецПроцедуры

&НаСервере
Процедура ДополнениеСпискаВыбораОбъекта(Элемент)
	
	Для Каждого Реквизит Из Метаданные.Справочники.Номенклатура.Реквизиты Цикл 
		Элементы[Элемент].СписокВыбора.Добавить(Реквизит.Имя); 
	КонецЦикла;
	Для Каждого Реквизит Из Метаданные.Справочники.Номенклатура.СтандартныеРеквизиты Цикл 
		Элементы[Элемент].СписокВыбора.Добавить(Реквизит.Имя); 
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура НастройкиНоменклатурыРеквизитИлиСвойствоОчистка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	НастройкиНоменклатурыРеквизитИлиСвойствоНачалоВыбора(Элемент, , СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы 

 &НаКлиенте
Процедура СохранитьНастройки(Команда)
	Если Объект.НастройкиНом.Пустая() Тогда
		ВвестиСтрокуНаименованияНастроек();
		СохранитьНастройкиНаСервере();
	Иначе
		СохранитьНастройкиНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьEXCEL(Команда)
	НоменклатураИзмененная.Очистить();
	НоменклатураСозданная.Очистить();
	
	
	Файл = Новый Файл(Объект.ФайлДанных);
	Если НЕ Файл.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
        Док = ПолучитьCOMОбъект(Объект.ФайлДанных); 
    Исключение
        Сообщить("Произошла ошибка при обращение к Excel:" + Символы.ПС + ОписаниеОшибки());
        Возврат;
	КонецПопытки;
	
	МассивНом = ПолучитьМассивДанныхИзФайла(Объект.ЛистНоменклатуры);
	СохранитьТаблицуВАдрес(АдресНом, МассивНом, 0);
	Ошибка = Ложь;
	МассивУсловногоОформления = ПредварительнаяОбработкаНоменклатуры(Ошибка);
	Если Ошибка Тогда
        Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеВнесенияИзмененияВТабДок", ЭтотОбъект, ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТаблицаЗначений", АдресНом);
	ПараметрыОткрытия.Вставить("РеквизитыДляУсловногоОформления", МассивУсловногоОформления);
	ПараметрыОткрытия.Вставить("ПерваяЗагрузка", Истина);
	
	ОткрытьФорму(ИмяФормыНачало + ".Форма.ФормаПросмотраВТаблице", ПараметрыОткрытия,
	ЭтотОбъект, , , , Оповещение, РежимОткрытияОкнаФормы.Независимый);

КонецПроцедуры 

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ТаблицаЗначенийВТабличныйДокумент(ТаблицаДанных)
	
	ПостроительОтчета = Новый ПостроительОтчета;
	ПостроительОтчета.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаДанных);
	ПостроительОтчета.ВыводитьЗаголовокОтчета = Ложь;
	ПостроительОтчета.ВыводитьПодвалОтчета    = Ложь;
	ПостроительОтчета.ВыводитьПодвалТаблицы    = Ложь;
	ДокументРезультат = Новый ТабличныйДокумент;
	Построительотчета.Вывести(ДокументРезультат);
	Возврат ДокументРезультат;

КонецФункции                                             

&НаКлиенте
Функция  ПреобразоватьИмя(Имя)
	
	Если НЕ ЗначениеЗаполнено(Имя) Тогда 
		Возврат ""; 
	КонецЕсли;
     
     НачалоСлова = Истина;
     пИмя = "";
     
     Для Индекс = 1 По СтрДлина(Имя) Цикл
          
          ТекСимвол = Сред(Имя, Индекс, 1);
          
          Если Найти(" ", ТекСимвол) Тогда
               НачалоСлова = Истина;
               ТекСимвол = "";
          ИначеЕсли НачалоСлова Тогда
               ТекСимвол = ВРег(ТекСимвол);
               НачалоСлова = Ложь;
          Иначе                                     
               
          КонецЕсли;
          
          пИмя = пИмя + ТекСимвол;
          
     КонецЦикла;
	 Разделители = "!,№;%:?**(),.\/-" + """";
	 Заменитель = "_";
	 пИмя = СтрСоединить(СтрРазделить(пИмя, Разделители), Заменитель);
     Возврат пИмя; 
	
КонецФункции 	

&НаСервере
Функция НайтиДополнительныйРеквизитПоНаименованию(Наименование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
		|ГДЕ
		|	ДополнительныеРеквизитыИСведения.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ПолучитьНастройки()
	
	структура = Объект.НастройкиНом.ХранилищеНастроек.Получить();
	Если Не ТипЗнч(структура) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, Структура);
	Объект.НастройкиНоменклатуры.Загрузить(структура.ПоляЗагрузкиНоменклатуры);
	Для каждого Строка Из Объект.НастройкиНоменклатуры Цикл
		Строка.ИзНастройки = Истина;
		Строка.ИмяВЭксель = "Колонка_"+Строка.Колонка;
	КонецЦикла; 
	Объект.НастройкиВариантовКомплектации.Загрузить(структура.ПоляЗагрузкиВариантов);
	Для каждого Строка Из Объект.НастройкиВариантовКомплектации Цикл
		Строка.ИзНастройки = Истина;
		Строка.ИмяВЭксель = "Колонка_"+Строка.Колонка;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти      

#Область ЗагрузкаНоменклатуры

&НаСервере
Функция ДополнитьСписокВыбора()
	
	ЗначенияСвойств = Новый ТаблицаЗначений;
	ЗначенияСвойств.Колонки.Добавить("Свойство");
	ЗначенияСвойств.Колонки.Добавить("Значение");
	ДоступныеНаборыСвойств = Новый СписокЗначений;
	СсылкаНом = Справочники.Номенклатура.ПустаяСсылка();
	
	НаборыСвойств = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(СсылкаНом);
	Для каждого Строка Из НаборыСвойств Цикл
		ДоступныеНаборыСвойств.Добавить(Строка.Набор);
	КонецЦикла;
	
	Таблица = УправлениеСвойствамиСлужебный.ЗначенияСвойств(
		ЗначенияСвойств, ДоступныеНаборыСвойств, Истина);
	Элементы.ПоляЗагрузкиРеквизитИлиСвойство.СписокВыбора.ЗагрузитьЗначения(Таблица.ВыгрузитьКолонку("Свойство"));
	
	Для Каждого Реквизит Из Метаданные.Справочники.Номенклатура.Реквизиты  Цикл 
		Элементы.ПоляЗагрузкиРеквизитИлиСвойство.СписокВыбора.Добавить(Реквизит.Имя); 
	КонецЦикла;
	Для Каждого Реквизит Из Метаданные.Справочники.Номенклатура.СтандартныеРеквизиты Цикл 
		Элементы.ПоляЗагрузкиРеквизитИлиСвойство.СписокВыбора.Добавить(Реквизит.Имя); 
	КонецЦикла;
	
КонецФункции

&НаСервере
Процедура СохранитьНастройкиНаСервере(Наименование = "")
	
	Если Объект.НастройкиНом.Пустая() Тогда
		НастройкаОбъект = Справочники.гф_НастройкиЗагрузкиРЗ.СоздатьЭлемент();
		НастройкаОбъект.НастраиваемыйОбъект = "ЗагрузкаИзExcel_РусскаяЗима";
		НастройкаОбъект.Наименование = Наименование;
	Иначе
		НастройкаОбъект = Объект.НастройкиНом.ПолучитьОбъект();
	КонецЕсли;
	
	СтруктураНастроек = Новый Структура("ПоляЗагрузкиНоменклатуры, ПоляЗагрузкиВариантов, ЛистНоменклатуры, ЛистВариантов,
	|ЛистРостовок, ГруппаДоступа, ГруппаСписка, ПоискНоменклатуры", Объект.НастройкиНоменклатуры.Выгрузить(), Объект.НастройкиВариантовКомплектации.Выгрузить(), 
	Объект.ЛистНоменклатуры, Объект.ЛистВариантов, Объект.ЛистРостовок, Объект.ГруппаДоступа, Объект.ГруппаСписка, Объект.ПоискНоменклатуры);
	НастройкаОбъект.ХранилищеНастроек = новый ХранилищеЗначения(СтруктураНастроек);
	НастройкаОбъект.Записать();
	Объект.НастройкиНом = НастройкаОбъект.Ссылка;	

КонецПроцедуры

&НаКлиенте
Процедура ВвестиСтрокуНаименованияНастроек()
 
    Оповещение = Новый ОписаниеОповещения("ПослеВводаСтроки", 
        ЭтотОбъект);
 
    ПоказатьВводСтроки(
        Оповещение,
        , // пропускаем начальное значение
        "Введите строку",
        0, // (необ.) длина
        Истина // (необ.) многострочность
    );
 
КонецПроцедуры
 
&НаКлиенте
Процедура ПослеВводаСтроки(Результат, Параметры) Экспорт
 
    Если Не Результат = Неопределено Тогда
         СохранитьНастройкиНаСервере(Результат);
    КонецЕсли;
 
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивДанныхИзФайла(ИмяСтраницы)

	МассивДанных = Новый Массив;
	
	Попытка
        Док = ПолучитьCOMОбъект(Объект.ФайлДанных); 
    Исключение
        Сообщить("Произошла ошибка при обращение к Excel:" + Символы.ПС + ОписаниеОшибки());
        Возврат Неопределено;
	КонецПопытки;
	
	Страница = Док.Sheets(ИмяСтраницы);
    МакСтрок = Страница.UsedRange.Rows.Count;       // макс. колич. строк
    МакСтолб = Страница.UsedRange.Columns.Count;    // макс. колич. столбцов           
	МассивИспользуемыхКолонок = Новый Массив;
	Если ИмяСтраницы = Объект.ЛистНоменклатуры Тогда
		ТабНастроек = Объект.НастройкиНоменклатуры;
	Иначе	
		ТабНастроек = Объект.НастройкиВариантовКомплектации;
	КонецЕсли;
	Для каждого СтрН Из ТабНастроек Цикл
		МассивИспользуемыхКолонок.Добавить(СтрН.Колонка);
	КонецЦикла;
		
   	Для НомСтрока = 2 по МакСтрок Цикл
		СтруДанных = Новый Структура;
		//Создаем структуру для текущей строки
		Для Столбец = 1 по МакСтолб Цикл
			Если МассивИспользуемыхКолонок.Найти(Столбец) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ИмяСтолбца = Страница.Cells(1,Столбец).Value;
			//ИмяСтолбца = СокрЛП(ИмяСтолбца);
			//ИмяСтолбца = СтрЗаменить(ИмяСтолбца," ","_");
			// Галфинд \ Shtak  2024/01/25  =>
			Если ИмяСтраницы = Объект.ЛистРостовок Тогда
				ИмяСтолбца = ПреобразоватьИмя(ИмяСтолбца);
				Если Найти("0123456789", Лев(ИмяСтолбца,1)) <> 0 Тогда
					ИмяСтолбца = "_" + ИмяСтолбца;
				КонецЕсли;
			Иначе	
				ИмяСтолбца = "Колонка_"+Столбец;
			КонецЕсли;
			//ИмяСтолбца = ПреобразоватьИмя(ИмяСтолбца);
			//ИмяСтолбца = "Колонка_"+Столбец;
			// Галфинд \ Shtak  2024/01/25 <=
			Ячейка = Страница.Cells(НомСтрока, Столбец);
			ФорматЯчейки = Ячейка.NumberFormat;
			ДанныеЗначение = Страница.Cells(НомСтрока, Столбец).Value;
			Данные = Страница.Cells(НомСтрока, Столбец).Text;
			//Если ИмяСтолбца = "КодТНВЭД" Тогда
			//	Данные = СтрЗаменить(Строка(Данные), Символы.НПП, "");            
			//КонецЕсли;
			СтруДанных.Вставить(ИмяСтолбца, Данные);		
			
		КонецЦикла;
		МассивДанных.Добавить(СтруДанных);
	КонецЦикла;

	Возврат МассивДанных;	
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьЗаголовкиТаблицы(ТабНастроек)

	СоответствиеЗаголовков = Новый Соответствие;
	Для каждого СтрН Из ТабНастроек Цикл
		СоответствиеЗаголовков.Вставить(СтрН.ИмяВЭксель, СтрН.ИмяКолонки);
	КонецЦикла;
	
	Возврат СоответствиеЗаголовков;
КонецФункции // ()


&НаСервере
Процедура СохранитьТаблицуВАдрес(АдресДанных, МассивДанных, Номер = 1)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	//СоответствиеЗаголовков = Новый Соответствие;
	Если Номер = 0 Тогда
		ТабНастроек = Объект.НастройкиНоменклатуры;
	Иначе	
		ТабНастроек = Объект.НастройкиВариантовКомплектации;
	КонецЕсли;
	СоответствиеЗаголовков = ПолучитьЗаголовкиТаблицы(ТабНастроек);
	//Для каждого СтрН Из ТабНастроек Цикл
	//	СоответствиеЗаголовков.Вставить(СтрН.ИмяВЭксель, СтрН.ИмяКолонки);
	//КонецЦикла;
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	МассивТипов.Добавить(Тип("Строка"));
	МассивТипов.Добавить(Тип("Дата"));
	ОписаниеТиповКолонки = Новый ОписаниеТипов(МассивТипов);
	Если МассивДанных.Количество() > 0 Тогда 
		ТаблицаДанных.Колонки.Добавить("Флаг", Новый ОписаниеТипов("Булево"));
		СтруДанных = МассивДанных[0];
		
		Для Каждого элемСтруктуры Из СтруДанных Цикл 
			
			//Если ТипЗнч(элемСтруктуры.Значение) = Тип("Число") Тогда 
			//	ТипЗначения = Новый ОписаниеТипов("Число");
			//	
			//ИначеЕсли 
			//	ТипЗнч(элемСтруктуры.Значение) = Тип("Строка") Тогда 
			//	ТипЗначения = Новый ОписаниеТипов("Строка");
			//	
			//Иначе 
			//	ТипЗначения = Неопределено;
			//КонецЕсли;	
			//
			//ТаблицаДанных.Колонки.Добавить(элемСтруктуры.Ключ, ТипЗначения, СоответствиеЗаголовков[элемСтруктуры.Ключ]);
			ТаблицаДанных.Колонки.Добавить(элемСтруктуры.Ключ, ОписаниеТиповКолонки, СоответствиеЗаголовков[элемСтруктуры.Ключ]);
			
		КонецЦикла;
		
		Для Каждого СтруДанных Из МассивДанных Цикл 
			НоваяСтрока = ТаблицаДанных.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруДанных); 
			НоваяСтрока.Флаг = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
	МассивСтрокКУдалению = Новый Массив;
	Для Каждого Стр Из ТаблицаДанных Цикл
		Если Стр[ТаблицаДанных.Колонки[1].Имя] = "" Тогда
			МассивСтрокКУдалению.Добавить(Стр);
		КонецЕсли;
	КонецЦикла; 
	Если МассивСтрокКУдалению.Количество()>0 Тогда
		Для Каждого Строка Из МассивСтрокКУдалению Цикл
			ТаблицаДанных.Удалить(Строка);
		КонецЦикла;
	КонецЕсли;
     	
	АдресДанных = ПоместитьВоВременноеХранилище(ТаблицаДанных, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВнесенияИзмененияВТабДок(Результат, ЭтотОбъект) Экспорт
		
	Если Результат <> Неопределено Тогда 
		АдресТаблицы = Результат.АдресТаблицы;
        ТолькоНовые = ?(Результат.ЗначениеЗагрузки.Значение = 0, Истина, Ложь);
		
		Если ИзмененияНеВносились(АдресТаблицы) Тогда
			ЗагрузитьНоменклатуру(ТолькоНовые);
			Если ЗначениеЗаполнено(Объект.ЛистВариантов) Тогда
				МассивВариантов = ПолучитьМассивДанныхИзФайла(Объект.ЛистВариантов);
				СохранитьТаблицуВАдрес(АдресВар, МассивВариантов); 
			КонецЕсли;
			Если ЗначениеЗаполнено(Объект.ЛистРостовок) Тогда
				МассивРостовок = ПолучитьМассивДанныхИзФайла(Объект.ЛистРостовок);
				СохранитьТаблицуВАдрес(АдресРост, МассивРостовок);
			КонецЕсли;
			Если ЗначениеЗаполнено(Объект.ЛистВариантов) 
				ИЛИ ЗначениеЗаполнено(Объект.ЛистРостовок) Тогда
				НачалоОбработкиВариантовКомплектации();
			КонецЕсли;
			
		Иначе
			
			МассивУсловногоОформления = ОбновитьТаблицуНоменклатуры(АдресТаблицы);
			Оповещение = Новый ОписаниеОповещения("ПослеВнесенияИзмененияВТабДок", ЭтотОбъект, ЭтотОбъект);
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("ТаблицаЗначений", АдресНом);
			ПараметрыОткрытия.Вставить("РеквизитыДляУсловногоОформления", МассивУсловногоОформления);
			ПараметрыОткрытия.Вставить("ПерваяЗагрузка", Ложь);

			ОткрытьФорму(ИмяФормыНачало + ".Форма.ФормаПросмотраВТаблице", ПараметрыОткрытия,
			ЭтотОбъект, , , , Оповещение, РежимОткрытияОкнаФормы.Независимый);		
        КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Вы не нажали кнопку ""Продолжить загрузку""");
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Функция ТабличныйДокументВТЗ(ТаблицаПослеПрочетения)
	
	КрайняяСтрока = ТаблицаПослеПрочетения.ВысотаТаблицы;
	КрайняяКолонка = ТаблицаПослеПрочетения.ШиринаТаблицы;
		
	ОбластьЗаголовок = ТаблицаПослеПрочетения.Область(1, 1, КрайняяСтрока, КрайняяКолонка);
	ПостроительОтчета = Новый ПостроительОтчета;
	ПостроительОтчета.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьЗаголовок);
	ПостроительОтчета.Выполнить();
	ТЗПослеПрочтения = ПостроительОтчета.Результат.Выгрузить();
	ТЗПослеПрочтения.Колонки.НайденВ_БД.Имя = "НайденВ_БД_Удалить";
	ТипБулево = Новый ОписаниеТипов("Булево");
	ТЗПослеПрочтения.Колонки.Добавить("НайденВ_БД", ТипБулево);
	Для каждого Стр Из ТЗПослеПрочтения Цикл
		Если Стр.НайденВ_БД_Удалить = "Нет" Тогда
			Стр.НайденВ_БД = Ложь;
		Иначе
			Стр.НайденВ_БД = Истина;
		КонецЕсли;
	КонецЦикла;
    ТЗПослеПрочтения.Колонки.Удалить("НайденВ_БД_Удалить");
	
	Возврат ТЗПослеПрочтения;
	
КонецФункции

&НаСервере
Функция ИзмененияНеВносились(АдресТаблицы, Первый = Истина)
	
	ТЗПослеПрочтения = ПолучитьИзВременногоХранилища(АдресТаблицы);
	
	Таблица = ?(Первый, ПолучитьИзВременногоХранилища(АдресНом), ПолучитьИзВременногоХранилища(АдресВар));
	Возврат  ОбщегоНазначения.КоллекцииИдентичны(ТЗПослеПрочтения, Таблица, , , Истина);
	
КонецФункции

&НаСервере
Функция ОбновитьТаблицуНоменклатуры(АдресТаблицы)
	
	ТаблицаПослеПрочетения2 = ПолучитьИзВременногоХранилища(АдресТаблицы);
	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	ТаблицаНоменклатуры = ТаблицаПослеПрочетения2.Скопировать(); 

	МассивУсловногоОформления = ПредварительнаяОбработкаНоменклатуры();
	Возврат МассивУсловногоОформления;

КонецФункции

&НаСервере
Процедура ЗагрузитьНоменклатуру(ТолькоНовые) 
	
	ТаблицаНоменклатуры = ПолучитьИзВременногоХранилища(АдресНом);
	Отбор = Новый Структура;
	Отбор.Вставить("НайденВ_БД", Ложь);
	ТаблицаНовых = ТаблицаНоменклатуры.Скопировать(Отбор);
	
	Если ТолькоНовые Тогда
		ТаблицаДляОбновления = Неопределено;
	Иначе
		Отбор = Новый Структура;
		Отбор.Вставить("НайденВ_БД", Истина);
		ТаблицаДляОбновления = ТаблицаНоменклатуры.Скопировать(Отбор);
	КонецЕсли;
	
	Протокол.ДобавитьСтроку("");
	Протокол.ДобавитьСтроку("Начало загрузки номенклатуры " + ТекущаяДатаСеанса());

	ПродолжитьЗагрузкуНовыхНоменклатур(ТаблицаНовых);
	
	Если ТаблицаДляОбновления <> Неопределено Тогда
		ПродолжитьЗагрузкуДляОбновления(ТаблицаДляОбновления);
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Процедура ПродолжитьЗагрузкуНовыхНоменклатур(ТаблицаНовых) 
	
	РеквизитыНоменклатуры = Объект.НастройкиНоменклатуры.Выгрузить(Новый Структура("ТипДопСведения", "Реквизит"));

	Для каждого Стр Из ТаблицаНовых Цикл
		
		//НастройкаАртикул = РеквизитыНоменклатуры.Найти("Артикул", "ИмяДляПоиска");
		//Если НастройкаАртикул = Неопределено Тогда
		//	НастройкаАртикул = РеквизитыНоменклатуры.Найти("Артикул", "РеквизитИлиСвойство");
		//КонецЕсли;
		Артикул = Стр[ИмяКолонкиАртикул];
				
		НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
		Отказ = Ложь;
		ЗагрузитьЗначенияНоменклатуры(НоменклатураОбъект, Стр, РеквизитыНоменклатуры, Отказ,  Ложь);
		Если Не Отказ Тогда
		Протокол.ДобавитьСтроку("");
		Протокол.ДобавитьСтроку("Создана номенклатура " + НоменклатураОбъект.Ссылка + " с арт. " + Артикул);
		НовСтр = НоменклатураСозданная.Добавить();
		НовСтр.Артикул = НоменклатураОбъект.Артикул;
		НовСтр.Коллекция = НоменклатураОбъект.КоллекцияНоменклатуры;
 		НовСтр.Номенклатура = НоменклатураОбъект.Ссылка;
		КонецЕсли;
	КонецЦикла;      
		
КонецПроцедуры

&НаСервере
Процедура ПродолжитьЗагрузкуДляОбновления(ТаблицаДляОбновления) 
	
	РеквизитыНоменклатуры = Объект.НастройкиНоменклатуры.Выгрузить(Новый Структура("ТипДопСведения", "Реквизит"));

	Для каждого Стр Из ТаблицаДляОбновления Цикл
		
		//НастройкаАртикул = РеквизитыНоменклатуры.Найти("Артикул", "ИмяДляПоиска");
		//Если НастройкаАртикул = Неопределено Тогда
		//	НастройкаАртикул = РеквизитыНоменклатуры.Найти("Артикул", "РеквизитИлиСвойство");
		//КонецЕсли;
		Артикул = Стр[ИмяКолонкиАртикул];
		КоллекцияНоменклатуры = Стр[ИмяКолонкиСезон];
				
		НоменклатураСсылка = НоменклатураВБазеНайдена(Артикул, КоллекцияНоменклатуры, Истина); 
		НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
		Отказ = Ложь;
		ЗагрузитьЗначенияНоменклатуры(НоменклатураОбъект, Стр, РеквизитыНоменклатуры, Отказ);
		Если Не Отказ Тогда 
		Протокол.ДобавитьСтроку("");
		Протокол.ДобавитьСтроку("Обновлены реквизиты и свойства номенклатуры " + НоменклатураОбъект.Ссылка + " с арт. " + Артикул);
 		НовСтр = НоменклатураИзмененная.Добавить();
		НовСтр.Артикул = НоменклатураОбъект.Артикул;
		НовСтр.Коллекция = НоменклатураОбъект.КоллекцияНоменклатуры;
 		НовСтр.Номенклатура = НоменклатураОбъект.Ссылка;
      КонецЕсли;
	КонецЦикла;       
			
КонецПроцедуры 

 &НаСервере
Процедура ЗагрузитьЗначенияНоменклатуры(НоменклатураОбъект, Стр, РеквизитыНоменклатуры, Отказ, Обновление = Истина) 
	
	СвойстваНоменклатуры = Объект.НастройкиНоменклатуры.Выгрузить(Новый Структура("ТипДопСведения", "Свойство"));

	Для Каждого  Реквизит  Из РеквизитыНоменклатуры Цикл 
		
		Если Обновление
			 И (Реквизит.ИмяДляПоиска = "Артикул" ИЛИ Реквизит.ИмяДляПоиска = "КоллекцияНоменклатуры" ) Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ТекущееЗначение = Стр[Реквизит.ИмяВЭксель];
		Исключение
			Протокол.ДобавитьСтроку("");
			Протокол.ДобавитьСтроку("Запись элемента по строке " + Стр[ИмяКолонкиАртикул] + " не удалась. Ошибка в наименовании настроек");
			СообщениеОбОшибке = "Колонка с Имененем " + Реквизит.ИмяКолонки
			+ " в файле не существует. Проверьте правильность написания имения колонки в настройках"; 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке); 
			Возврат;
		КонецПопытки;	
		
		Если Реквизит.ИмяДляПоиска = "Наименование" Тогда
			 НоменклатураОбъект[Реквизит.ИмяДляПоиска] = Строка(ТекущееЗначение);
			 продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекущееЗначение) Тогда 
			 Продолжить;
		КонецЕсли;
		 
		РеквизитБД = Метаданные.Справочники.Номенклатура.Реквизиты[Реквизит.ИмяДляПоиска];
		
		МетаданныеРеквизита = Метаданные.НайтиПоТипу(РеквизитБД.Тип.Типы()[0]);
		Если МетаданныеРеквизита <> Неопределено Тогда

			Если Метаданные.Справочники.Содержит(МетаданныеРеквизита) Тогда
					НоменклатураОбъект[Реквизит.ИмяДляПоиска] = ПоискРеквизитаВСправочнике(МетаданныеРеквизита.ПолноеИмя(),
														Строка(ТекущееЗначение), МетаданныеРеквизита.ДлинаКода);
			ИначеЕсли Метаданные.Перечисления.Содержит(МетаданныеРеквизита) Тогда
					НоменклатураОбъект[Реквизит.ИмяДляПоиска] = Метаданные.Перечисления[МетаданныеРеквизита].ЗначенияПеречисления.Найти(Строка(ТекущееЗначение));
			Иначе
				Продолжить;
			КонецЕсли;	
		
		Иначе
			Если РеквизитБД.Тип.Типы()[0] = Тип("Строка") Тогда 
				
				НоменклатураОбъект[Реквизит.ИмяДляПоиска] = Строка(ТекущееЗначение); 
				
			ИначеЕсли РеквизитБД.Тип.Типы()[0] = Тип("Число") Тогда  
				
				НоменклатураОбъект[Реквизит.ИмяДляПоиска] = Число(ТекущееЗначение); 
				
			ИначеЕсли РеквизитБД.Тип.Типы()[0] = Тип("Булево") Тогда         
				
				НоменклатураОбъект[Реквизит.ИмяДляПоиска] = Булево(ТекущееЗначение); 
				
			Иначе
				// Какая-то ошибка или пустое поле
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	НоменклатураОбъект.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
	НоменклатураОбъект.ВестиУчетСертификатовНоменклатуры = Истина;
	НоменклатураОбъект.ИспользованиеХарактеристик = 
	Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры;
	// ++ Галфинд СадомцевСА 01.11.2023
	// Реализовал заполнение реквизитов Номенклатуры: ИспользованиеХарактеристик, ВладелецХарактеристик из "Вида номенклатуры"
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee77110f292c0c
	Если ЗначениеЗаполнено(НоменклатураОбъект.ВидНоменклатуры) Тогда
		НоменклатураОбъект.ИспользованиеХарактеристик = НоменклатураОбъект.ВидНоменклатуры.ИспользованиеХарактеристик;
		НоменклатураОбъект.ВладелецХарактеристик = НоменклатураОбъект.ВидНоменклатуры.ВладелецХарактеристик;
		НоменклатураОбъект.ГруппаФинансовогоУчета = НоменклатураОбъект.ВидНоменклатуры.ГруппаФинансовогоУчета; // Галфинд_ДомнышеваКР_04_12_2023
	КонецЕсли;
	// -- Галфинд СадомцевСА 01.11.2023
	НоменклатураОбъект.Качество = Перечисления.ГрадацииКачества.Новый;
	НоменклатураОбъект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
	НоменклатураОбъект.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция;
    НоменклатураОбъект.ВестиУчетПоГТД = Ложь;
	//НоменклатураОбъект.ГруппаФинансовогоУчета = Справочники.ГруппыФинансовогоУчетаНоменклатуры.НайтиПоНаименованию("Готовая продукция");// Галфинд_ДомнышеваКР_24_01_2024
	НоменклатураОбъект.Родитель = Объект.ГруппаСписка;
	НоменклатураОбъект.ГруппаДоступа = Объект.ГруппаДоступа;
	// ПредварительнаяЗаписьЭлемента
	Попытка
		НоменклатураОбъект.Записать();
	Исключение
		Протокол.ДобавитьСтроку("");
		Протокол.ДобавитьСтроку("Запись элемента по строке " + Стр[ИмяКолонкиАртикул] + " не удалась.");
		СообщениеОбОшибке = "Ошибка при записи номенклатуры из обработки " + Объект + " с артикулом" + Стр[ИмяКолонкиАртикул] + ОписаниеОшибки(); 
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, Объект, Объект, СообщениеОбОшибке); 
		Отказ = Истина;
	КонецПопытки;

	ЗначенияСвойств = Новый Массив;
	ЗначениеШтрихКода = "";

	Для Каждого  Свойство  Из СвойстваНоменклатуры Цикл 
		Если Свойство.ИмяВЭксель = ИмяКолонкиШтрихКод Тогда
			ЗначениеШтрихКода = Стр[Свойство.ИмяВЭксель];;
			Продолжить;
		КонецЕсли;
		Попытка
			ТекущееЗначение = Стр[Свойство.ИмяВЭксель];
		Исключение
			Протокол.ДобавитьСтроку("");
			Протокол.ДобавитьСтроку("Запись элемента по строке " + Стр[ИмяКолонкиАртикул] + " не удалась. Ошибка в наименовании настроек");
			СообщениеОбОшибке = "Колонка с Имененем " + Свойство.ИмяКолонки
			+ " в файле не существует. Проверьте правильность написания имения колонки в настройках"; 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке); 
			Возврат;
		КонецПопытки;
				
		ТекущееСвойство = НайтиДополнительныйРеквизитПоНаименованию(Свойство.ИмяДляПоиска); 
		Значение = Новый Структура("Свойство, Значение", ТекущееСвойство, ТекущееЗначение);
		ЗначенияСвойств.Добавить(Значение);
		
	КонецЦикла;  	
		
	Если ЗначенияСвойств.Количество() > 0 Тогда
		ЗаписатьНаборСвойствВРегистр(НоменклатураОбъект.Ссылка, ЗначенияСвойств, Стр);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ЗначениеШтрихКода)  Тогда
		Попытка	
			МенеджерЗаписиШтрихКода = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
			МенеджерЗаписиШтрихКода.Номенклатура   = НоменклатураОбъект.Ссылка;
			МенеджерЗаписиШтрихКода.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			МенеджерЗаписиШтрихКода.Упаковка       = НоменклатураОбъект.ЕдиницаИзмерения;
			МенеджерЗаписиШтрихКода.Штрихкод       = ЗначениеШтрихКода;
			МенеджерЗаписиШтрихКода.гф_СостояниеВыгрузкиНоменклатуры = Перечисления.гф_СтатусыGTIN_В_НК.НеПубликуется;
			МенеджерЗаписиШтрихКода.Записать();
		Исключение
			Протокол.ДобавитьСтроку("");
			Протокол.ДобавитьСтроку("Запись Штрих-кода по строке " + Стр[ИмяКолонкиАртикул] + " не удалась."); 
			//СообщениеОбОшибке = "Колонка с Имененем " + Свойство.ИмяКолонки
			//+ " в файле не существует. Проверьте правильность написания имения колонки в настройках"; 
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке); 
		КонецПопытки;
	КонецЕсли;
		
КонецПроцедуры

// #wortmann { 
// Записывает дополнительные свойства объекта в РС ДополнительныеСведения
// Галфинд_Домнышева 2022/09/12
//
// Параметры:
//	Ссылка - СправочникСсылка.Номенклатура - ссылка на создоваемый объект справочника Номенклатура
//	ЗначенияСвойств - Структура - набор записываемых свойств объекта
//	Стр - Тип.СтрокаТЧ - строка табличной части для которой ищется предок с заданным именем
Процедура ЗаписатьНаборСвойствВРегистр(Ссылка, ЗначенияСвойств, Стр)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка

		Набор = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
		Набор.Отбор.Объект.Установить(Ссылка);
		Набор.Прочитать();
		ТекущиеЗначения = Набор.Выгрузить();                             
		
		Для Каждого Строка Из ЗначенияСвойств Цикл
			Если НЕ ЗначениеЗаполнено(Строка.Значение) Тогда
				Продолжить;
			КонецЕсли;
			Запись = ТекущиеЗначения.Найти(Строка.Свойство, "Свойство");
			Если Запись = Неопределено Тогда
				Запись = ТекущиеЗначения.Добавить();
				Запись.Свойство = Строка.Свойство;
				Если Не ЗначениеЗаполнено(Запись.Свойство) Тогда
					Продолжить;
				КонецЕсли;
				Запись.Объект   = Ссылка;
			КонецЕсли;
			Запись.Значение = Строка.Значение;
			
		КонецЦикла;
		Набор.Загрузить(ТекущиеЗначения);
		Набор.Записать();
		
	Исключение
		
		СообщениеОбОшибке = "Ошибка при записи номенклатуры  " + Ссылка + " с артикулом" + Стр[ИмяКолонкиАртикул] 
							+ ". Описание ошибки: Не удалось загрузить дополнительные сведения. " + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, Объект, Объект, СообщениеОбОшибке);		
	КонецПопытки;
	
КонецПроцедуры// } #wortmann

&НаСервере
Функция ИзExcelВТаблицу(АдресДок, ИмяСтраницы, ПерСтрокаЗаголовок = Ложь )
       
    Док = ПолучитьИзВременногоХранилища(АдресДок);  
    ТЗ = Новый ТаблицаЗначений();   
    Страница = Док.Sheets(ИмяСтраницы);
    МакСтрок = Страница.UsedRange.Rows.Count;       // макс. колич. строк
    МакСтолб = Страница.UsedRange.Columns.Count;    // макс. колич. столбцов    
     
    Для Столбец = 1 по МакСтолб цикл
        ИмяСтолбца = "Столбец_"  + Столбец;
        Если ПерСтрокаЗаголовок тогда
            ИмяСтолбца = Страница.Cells(1,Столбец).Value;
            ИмяСтолбца = СокрЛП(ИмяСтолбца);
            ИмяСтолбца = СтрЗаменить(ИмяСтолбца," ","_");
        КонецЕсли;                      
        ТЗ.Колонки.Добавить(ИмяСтолбца, Новый ОписаниеТипов("Строка"));
    КонецЦикла; 
     
    НачальнаяСтрока = 1;    
    Если ПерСтрокаЗаголовок тогда                                       
        НачальнаяСтрока = 2;
    КонецЕсли;          
     
    Для НомСтрока = НачальнаяСтрока по МакСтрок цикл
        СтрТЗ = ТЗ.Добавить();
        Для НомСтолбец = 1 по МакСтолб цикл
            Данные = Страница.Cells(НомСтрока,НомСтолбец).Value;                
            СтрТЗ[НомСтолбец-1] = Данные;
        КонецЦикла;     
         
    КонецЦикла;     
	
	АдресНом = ПоместитьВоВременноеХранилище(ТЗ, Новый УникальныйИдентификатор);
    Возврат АдресНом; 
КонецФункции   

&НаСервере
Функция ПредварительнаяОбработкаНоменклатуры(Ошибка = Ложь)
	Если ТаблицаНоменклатуры = Неопределено Тогда
	ТаблицаНоменклатуры = ПолучитьИзВременногоХранилища(АдресНом); 
	КонецЕсли;
	СоответствиеЗаголовков = ПолучитьЗаголовкиТаблицы(Объект.НастройкиНоменклатуры);
	Для каждого Колонка Из ТаблицаНоменклатуры.Колонки Цикл
		Колонка.Заголовок = СоответствиеЗаголовков[Колонка.Имя];
	КонецЦикла;

	ТипБулево = Новый ОписаниеТипов("Булево");
	Если ТаблицаНоменклатуры.Колонки.Найти("НайденВ_БД") = Неопределено Тогда
		ТаблицаНоменклатуры.Колонки.Добавить("НайденВ_БД", ТипБулево, "Элемент найден в БД");
	КонецЕсли;
	
	СвойстваНоменклатуры = Объект.НастройкиНоменклатуры.Выгрузить(Новый Структура("ТипДопСведения", "Свойство"));
	РеквизитыНоменклатуры = Объект.НастройкиНоменклатуры.Выгрузить(Новый Структура("ТипДопСведения", "Реквизит"));
	МассивУсловногоОформления = Новый Массив;
	НастройкаАртикул = РеквизитыНоменклатуры.Найти("Артикул", "ИмяДляПоиска");
	Если НастройкаАртикул = Неопределено Тогда
		НастройкаАртикул = РеквизитыНоменклатуры.Найти("Артикул", "РеквизитИлиСвойство");
	КонецЕсли;
	Если НЕ НастройкаАртикул = Неопределено Тогда
		ИмяКолонкиАртикул = НастройкаАртикул.ИмяВЭксель;
	КонецЕсли;
	НастройкаСезон = РеквизитыНоменклатуры.Найти("КоллекцияНоменклатуры", "ИмяДляПоиска"); 
	Если НастройкаСезон = Неопределено Тогда
		НастройкаСезон = РеквизитыНоменклатуры.Найти("Коллекция (сезон)", "РеквизитИлиСвойство");
	КонецЕсли;
	Если НЕ НастройкаСезон = Неопределено Тогда
		ИмяКолонкиСезон = НастройкаСезон.ИмяВЭксель;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ИмяКолонкиАртикул)
		Или Не ЗначениеЗаполнено(ИмяКолонкиСезон) Тогда
		Сообщить("В настройках должны быть указаны колонки Артикул и Коллекция (сезон)");
		Ошибка = Истина;
		Возврат МассивУсловногоОформления;
	КонецЕсли;
	НастройкаШтрихКод = СвойстваНоменклатуры.Найти("ШтрихКод", "ИмяДляПоиска"); 
	Если НЕ НастройкаШтрихКод = Неопределено Тогда
		ИмяКолонкиШтрихКод = НастройкаШтрихКод.ИмяВЭксель;
	КонецЕсли;
	Для каждого Стр Из ТаблицаНоменклатуры Цикл
		
		Артикул = Стр[ИмяКолонкиАртикул];
		КоллекцияНоменклатуры = Стр[ИмяКолонкиСезон];
		
		Если НоменклатураВБазеНайдена(Артикул, КоллекцияНоменклатуры) Тогда
			Стр.НайденВ_БД = Истина;
		Иначе
			Стр.НайденВ_БД = Ложь;
		КонецЕсли;
		
		ПроверитьНаличиеУказанныхРеквизитовВБазе(РеквизитыНоменклатуры, Стр, МассивУсловногоОформления);
		// Поиск по колонкам соответствия названия реквизитов
		// Поиск Номенклатуры по Артикулу и Сезону в базе
		// Если Найден - пишем Истина
		// Проверка Всех реквизитов по существующим значениям в базе
	
	КонецЦикла;
	АдресНом = ПоместитьВоВременноеХранилище(ТаблицаНоменклатуры, Новый УникальныйИдентификатор);
	Возврат МассивУсловногоОформления;
КонецФункции

&НаСервере
Процедура ПроверитьНаличиеУказанныхРеквизитовВБазе(НайденныеРеквизиты, Стр, МассивУсловногоОформления) 

	Для Каждого  Реквизит  Из НайденныеРеквизиты Цикл 
		СтруктураНеПравильныхПолей = Новый Структура;
		Если Реквизит.ИмяДляПоиска = "Наименование" ИЛИ Реквизит.ИмяДляПоиска = "Код" 
			ИЛИ Реквизит.ИмяДляПоиска = "Родитель" 
			ИЛИ НЕ ЗначениеЗаполнено(Стр[Реквизит.ИмяВЭксель]) Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ТекущееЗначение = Стр[Реквизит.ИмяВЭксель];
		Исключение
			СообщениеОбОшибке = "Колонка с Имененем " + Реквизит.ИмяКолонки
			+ " в файле не существует. Проверьте правильность написания имени колонки в настройках"; 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке); 
			Продолжить;;
		КонецПопытки;

		РеквизитБД = Метаданные.Справочники.Номенклатура.Реквизиты[Реквизит.ИмяДляПоиска];
		
		МетаданныеРеквизита = Метаданные.НайтиПоТипу(РеквизитБД.Тип.Типы()[0]);
		Если МетаданныеРеквизита <> Неопределено Тогда

			Если Метаданные.Справочники.Содержит(МетаданныеРеквизита) Тогда
				Если Не ПроверкаРеквизитаВСправочнике(МетаданныеРеквизита.ПолноеИмя(), Строка(Стр[Реквизит.ИмяВЭксель]), МетаданныеРеквизита.ДлинаКода) Тогда
					СтруктураНеПравильныхПолей.Вставить("Ключ", Реквизит.ИмяВЭксель);
					СтруктураНеПравильныхПолей.Вставить("Значение", Стр[Реквизит.ИмяВЭксель]);
					СтруктураНеПравильныхПолей.Вставить("Артикул", Стр[ИмяКолонкиАртикул]);
				КонецЕсли;
			ИначеЕсли Метаданные.Перечисления.Содержит(МетаданныеРеквизита) Тогда
				Если Метаданные.Перечисления[МетаданныеРеквизита].ЗначенияПеречисления.Найти(Строка(Стр[Реквизит.ИмяВЭксель])) = Неопределено Тогда
					
					СтруктураНеПравильныхПолей.Вставить("Ключ", Реквизит.ИмяВЭксель);
					СтруктураНеПравильныхПолей.Вставить("Значение", Стр[Реквизит.ИмяВЭксель]);
					СтруктураНеПравильныхПолей.Вставить("Артикул", Стр[ИмяКолонкиАртикул]);

				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;	
		
		Иначе
			Если РеквизитБД.Тип.Типы()[0] = Тип("Строка") Тогда 
				
				Стр[Реквизит.ИмяВЭксель] = Строка(Стр[Реквизит.ИмяВЭксель]); 
				
			ИначеЕсли РеквизитБД.Тип.Типы()[0] = Тип("Число") Тогда  
				
				Стр[Реквизит.ИмяВЭксель] = Число(Стр[Реквизит.ИмяВЭксель]); 
				
			ИначеЕсли РеквизитБД.Тип.Типы()[0] = Тип("Булево") Тогда         
				
				Стр[Реквизит.ИмяВЭксель] = Булево(Стр[Реквизит.ИмяВЭксель]); 
				
			Иначе
				// Какая-то ошибка или пустое поле
				СтруктураНеПравильныхПолей.Вставить("Ключ", Реквизит.ИмяВЭксель);
				СтруктураНеПравильныхПолей.Вставить("Значение", Стр[Реквизит.ИмяВЭксель]);
				СтруктураНеПравильныхПолей.Вставить("Артикул", Стр[ИмяКолонкиАртикул]);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураНеПравильныхПолей) Тогда
		МассивУсловногоОформления.Добавить(СтруктураНеПравильныхПолей);
		КонецЕсли;
	КонецЦикла;
	
	//Возврат МассивОшибокДляУсловногоОформления;
	
КонецПроцедуры

&НаСервере
Функция ПроверкаРеквизитаВСправочнике(ПолноеИмяСправочника, Значение, Код) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Спр.Ссылка КАК Ссылка
		|ИЗ
		|	" + ПолноеИмяСправочника + " КАК Спр
		|ГДЕ
		|	Спр.Наименование = &Реквизит";
	
	Запрос.УстановитьПараметр("Реквизит", Значение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		Если Код > 0 Тогда		
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Спр.Ссылка КАК Ссылка
			|ИЗ
			|	" + ПолноеИмяСправочника + " КАК Спр
			|ГДЕ
			|	Спр.Код = &Реквизит";
			
			Запрос.УстановитьПараметр("Реквизит", Значение);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если РезультатЗапроса.Пустой() Тогда		
				Возврат Ложь;
			Иначе
				Возврат Истина;
			КонецЕсли;
		КонецЕсли; 
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПоискРеквизитаВСправочнике(ПолноеИмяСправочника, Значение, Код) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Спр.Ссылка КАК Ссылка
		|ИЗ
		|	" + ПолноеИмяСправочника + " КАК Спр
		|ГДЕ
		|	Спр.Наименование = &Реквизит";
	
	Запрос.УстановитьПараметр("Реквизит", Значение);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если РезультатЗапроса.Пустой() И Код > 0 Тогда		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Спр.Ссылка КАК Ссылка
		|ИЗ
		|	" + ПолноеИмяСправочника + " КАК Спр
		|ГДЕ
		|	Спр.Код = &Реквизит";
		
		Запрос.УстановитьПараметр("Реквизит", Значение);
		
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаПоКоду = РезультатЗапроса.Выбрать();
		Если Не РезультатЗапроса.Пустой() Тогда		
			ВыборкаПоКоду.Следующий();
			Возврат ВыборкаПоКоду.Ссылка;
		КонецЕсли;
	Иначе
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции 

&НаСервере
Функция НоменклатураВБазеНайдена(Артикул, КоллекцияНоменклатуры, ВозвратНоменклатуры = Ложь) 

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Артикул = &Артикул
		|	И ВЫБОР
		|			КОГДА &ПоискНоменклатуры = 0
		|				ТОГДА Номенклатура.КоллекцияНоменклатуры.Код = &КоллекцияНоменклатуры
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("Артикул", Артикул);
	Запрос.УстановитьПараметр("КоллекцияНоменклатуры", КоллекцияНоменклатуры);
	Запрос.УстановитьПараметр("ПоискНоменклатуры", Объект.ПоискНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если ВозвратНоменклатуры Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	Иначе
		Если РезультатЗапроса.Пустой() Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли; 
	
КонецФункции

#КонецОбласти

#Область ЗагрузкиВариантовКомплектации

&НаКлиенте
Процедура НачалоОбработкиВариантовКомплектации()
	
    СтруктураУсловногоОформления = ПредварительнаяОбработкаВариантов();
	//Если СтруктураУсловногоОформления.СтруктурыНеНайденныхЭлементов.Количество() = 0
	//	И СтруктураУсловногоОформления.СтруктурыПоНайденнымСсылкам.Количество() = 0 Тогда
	//	Возврат;
	//КонецЕсли;
	Оповещение = Новый ОписаниеОповещения("ПослеВнесенияИзмененияВВарианты", ЭтотОбъект, ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТаблицаЗначений", АдресВар);
	ПараметрыОткрытия.Вставить("РеквизитыДляУсловногоОформленияВариантов", СтруктураУсловногоОформления);
	ПараметрыОткрытия.Вставить("ПерваяЗагрузка", Истина);

	ОткрытьФорму(ИмяФормыНачало + ".Форма.ФормаПросмотраВТаблице", ПараметрыОткрытия,
	ЭтотОбъект, , , , Оповещение, РежимОткрытияОкнаФормы.Независимый);

КонецПроцедуры

&НаСервере
Функция ПредварительнаяОбработкаВариантов()
	Если  ЭтоАдресВременногоХранилища(АдресВар)  Тогда
		Если ТаблицаВариантов = Неопределено Тогда
			ТаблицаВариантов = ПолучитьИзВременногоХранилища(АдресВар);
		КонецЕсли;
	Иначе 	
		ТаблицаВариантов = Новый ТаблицаЗначений;
	КонецЕсли;
	ТипБулево = Новый ОписаниеТипов("Булево");
	Если ТаблицаВариантов.Колонки.Найти("НайденВ_БД") = Неопределено Тогда
		ТаблицаВариантов.Колонки.Добавить("НайденВ_БД", ТипБулево, "Элемент найден в БД");
	КонецЕсли;
	
	РеквизитыВариантов = Объект.НастройкиВариантовКомплектации.Выгрузить();
	СтруктураУсловногоОформления = Новый Структура;
	МассивУсловногоОформления = Новый Массив;
	МассивСсылок = Новый Массив;
	МассивДокументов = Новый Массив;
	Для каждого Документ Из Метаданные.Документы Цикл
		МассивДокументов.Добавить(Документ);
	КонецЦикла;
	Для каждого Стр Из ТаблицаВариантов Цикл
		СтруктураВариантовСсылками = Новый Структура;		
		НастройкаНаименование = РеквизитыВариантов.Найти("Наименование", "Реквизит");

		НаименованиеВарианта = Стр[НастройкаНаименование.ИмяВЭксель];
		
		Если ВариантВБазеНайден(НаименованиеВарианта) Тогда
			Стр.НайденВ_БД = Истина;
			ДобавитьВариантВМассивНайденныхСсылок(НаименованиеВарианта, Стр, СтруктураВариантовСсылками, МассивДокументов, НастройкаНаименование.ИмяВЭксель);
		Иначе
			Стр.НайденВ_БД = Ложь;
		КонецЕсли;
		
		//ПроверитьНаличиеУказанныхРеквизитовВБазе(РеквизитыНоменклатуры, Стр);
		// Поиск по колонкам соответствия названия реквизитов
		// Поиск Номенклатуры по Артикулу и Сезону в базе
		// Если Найден - пишем Истина
		// Проверка Всех реквизитов по существующим значениям в базе
	   ПроверитьНаличиеУказанныхРеквизитовВБазеДляВариантов(РеквизитыВариантов, Стр, МассивУсловногоОформления); 
	   Если ЗначениеЗаполнено(СтруктураВариантовСсылками) Тогда
	   МассивСсылок.Добавить(СтруктураВариантовСсылками);
	   КонецЕсли;
	КонецЦикла;
	АдресВар = ПоместитьВоВременноеХранилище(ТаблицаВариантов, Новый УникальныйИдентификатор); 
	СтруктураУсловногоОформления.Вставить("СтруктурыНеНайденныхЭлементов", МассивУсловногоОформления);
	СтруктураУсловногоОформления.Вставить("СтруктурыПоНайденнымСсылкам", МассивСсылок);
	Возврат СтруктураУсловногоОформления;
КонецФункции

&НаСервере
Процедура ДобавитьВариантВМассивНайденныхСсылок(НаименованиеВарианта, Стр, СтруктураВариантовСсылками, МассивДокументов, Колонка) 
	
	Если РольДоступна("гф_ИспользованиеЗагрузкаИзExcel_РусскаяЗима")
		ИЛИ РольДоступна("ПолныеПрава") Тогда
	УстановитьПривилегированныйРежим(Истина);	
	Вариант = ВариантВБазеНайден(НаименованиеВарианта, Истина);
	МассивВариантов = Новый Массив;
	МассивВариантов.Добавить(Вариант);
	ТабСсылок = НайтиПоСсылкам (МассивВариантов, ,МассивДокументов);
	Если ТабСсылок.Количество()>0 Тогда
		СтруктураВариантовСсылками.Вставить("Ключ", Колонка);
		СтруктураВариантовСсылками.Вставить("Значение", НаименованиеВарианта);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВариантВБазеНайден(НаименованиеВарианта, ВозвратВарианта = Ложь) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВариантыКомплектацииНоменклатуры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
		|ГДЕ
		|	ВариантыКомплектацииНоменклатуры.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", НаименованиеВарианта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если ВозвратВарианта Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	Иначе
		Если РезультатЗапроса.Пустой() Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли; 
	
КонецФункции

&НаКлиенте
Процедура ПослеВнесенияИзмененияВВарианты(Результат, ЭтотОбъект) Экспорт
		
	Если Результат <> Неопределено Тогда 
		АдресТаблицы = Результат.АдресТаблицы;
        ТолькоНовые = ?(Результат.ЗначениеЗагрузки.Значение = 0, Истина, Ложь);
		
		Если ИзмененияНеВносились(АдресТаблицы, Ложь) Тогда
			ЗагрузитьВарианты(ТолькоНовые);
		Иначе
			
			СтруктураУсловногоОформления = ОбновитьТаблицуВариантов(АдресТаблицы);
			Оповещение = Новый ОписаниеОповещения("ПослеВнесенияИзмененияВВарианты", ЭтотОбъект, ЭтотОбъект);
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("ТаблицаЗначений", АдресВар);
			ПараметрыОткрытия.Вставить("РеквизитыДляУсловногоОформленияВариантов", СтруктураУсловногоОформления); 
			ПараметрыОткрытия.Вставить("ПерваяЗагрузка", Ложь);
	
			ОткрытьФорму(ИмяФормыНачало + ".Форма.ФормаПросмотраВТаблице", ПараметрыОткрытия,
			ЭтотОбъект, , , , Оповещение, РежимОткрытияОкнаФормы.Независимый);		
        КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Вы не нажали кнопку ""Продолжить загрузку""");
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Функция ОбновитьТаблицуВариантов(АдресТаблицы)
	
	ТаблицаПослеПрочетения2 = ПолучитьИзВременногоХранилища(АдресТаблицы);
	ТаблицаВариантов = Новый ТаблицаЗначений;
	ТаблицаВариантов = ТаблицаПослеПрочетения2.Скопировать();  

	СтруктураУсловногоОформления = ПредварительнаяОбработкаВариантов();
	Возврат СтруктураУсловногоОформления;
    	
КонецФункции

&НаСервере
Процедура ЗагрузитьВарианты(ТолькоНовые) 
	ТаблицаВариантов = ПолучитьИзВременногоХранилища(АдресВар);
	ТаблицаРостовок = ПолучитьИзВременногоХранилища(АдресРост);
					
	Отбор = Новый Структура;
	Отбор.Вставить("НайденВ_БД", Ложь);
	ТаблицаНовых = ТаблицаВариантов.Скопировать(Отбор);
	
	Если ТолькоНовые Тогда
		ТаблицаДляОбновления = Неопределено;
	Иначе
		Отбор = Новый Структура;
		Отбор.Вставить("НайденВ_БД", Истина);
		ТаблицаДляОбновления = ТаблицаВариантов.Скопировать(Отбор);
	КонецЕсли;
	
	Протокол.ДобавитьСтроку("");
	Протокол.ДобавитьСтроку("Начало загрузки вариантов комплектации " + ТекущаяДатаСеанса());

	ПродолжитьЗагрузкуНовыхВариантов(ТаблицаНовых);
	
	Если ТаблицаДляОбновления <> Неопределено Тогда
		ПродолжитьЗагрузкуДляОбновленияВариантов(ТаблицаДляОбновления);
	КонецЕсли;	
		
КонецПроцедуры 

&НаСервере
Процедура ПродолжитьЗагрузкуНовыхВариантов(ТаблицаНовых) 
	
	РеквизитыВариантов = Объект.НастройкиВариантовКомплектации.Выгрузить();

	Для каждого Стр Из ТаблицаНовых Цикл
		
		ВариантОбъект = Справочники.ВариантыКомплектацииНоменклатуры.СоздатьЭлемент();
		
		Отказ = Ложь;
		ЗагрузитьЗначенияВариантов(ВариантОбъект, Отказ, Стр, РеквизитыВариантов, Ложь);
		
		
		Если Не Отказ Тогда
			
			Протокол.ДобавитьСтроку("");
			Протокол.ДобавитьСтроку("Создан Вариант Комплектации " + ВариантОбъект.Наименование);
		Иначе
			Протокол.ДобавитьСтроку("");
			Протокол.ДобавитьСтроку("Вариант Комплектации  " + Стр[ТаблицаНовых.Колонки[0].Имя] + " не создан");
		КонецЕсли;


	КонецЦикла;      
		
КонецПроцедуры

&НаСервере
Процедура ПродолжитьЗагрузкуДляОбновленияВариантов(ТаблицаДляОбновления) 
	
	РеквизитыВариантов = Объект.НастройкиВариантовКомплектации.Выгрузить();

	Для каждого Стр Из ТаблицаДляОбновления Цикл
		
		НастройкаНаименование = РеквизитыВариантов.Найти("Наименование", "Реквизит");

		НаименованиеВарианта = Стр[НастройкаНаименование.ИмяВЭксель];

		ВариантСсылка = Справочники.ВариантыКомплектацииНоменклатуры.НайтиПоНаименованию(НаименованиеВарианта);	
		
		ВариантОбъект = ВариантСсылка.ПолучитьОбъект();

		Отказ = Ложь;
		ЗагрузитьЗначенияВариантов(ВариантОбъект, Отказ, Стр, РеквизитыВариантов);
		
		Если Не Отказ Тогда
			
			Протокол.ДобавитьСтроку("");
			Протокол.ДобавитьСтроку("Обновлен Вариант Комплектации " + НаименованиеВарианта);
		Иначе
			Протокол.ДобавитьСтроку("");
			Протокол.ДобавитьСтроку("Вариант Комплектации " + НаименованиеВарианта + " не обновлен.");
		КонецЕсли;

	КонецЦикла;      
		
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьЗначенияВариантов(ВариантОбъект, Отказ, Стр, РеквизитыВариантов, Обновление = Истина) 
	
	РеквизитНаименование = РеквизитыВариантов.Найти("Наименование", "Реквизит");
	Если РеквизитНаименование = Неопределено Тогда
		РеквизитНаименование = РеквизитыВариантов.Найти("Наименование", "ИмяДляПоиска");
	КонецЕсли;

	Отказ = Ложь;
	ЗаписатьХарНаимИНомРостовки(Стр[РеквизитНаименование.ИмяВЭксель], Стр, ВариантОбъект, Обновление, Отказ);	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого  Реквизит  Из РеквизитыВариантов Цикл 
		
		Если Реквизит.Реквизит = "Наименование" 
			ИЛИ НЕ ЗначениеЗаполнено(Стр[Реквизит.ИмяВЭксель]) Тогда
			Продолжить;
		КонецЕсли; 
		
		Попытка
			ТекущееЗначение = Стр[Реквизит.ИмяВЭксель];
		Исключение
			Протокол.ДобавитьСтроку("");
			Протокол.ДобавитьСтроку("Запись элемента по строке " + Стр.Наименование + " не удалась. Ошибка в наименовании настроек");
			СообщениеОбОшибке = "Колонка с Имененем " + Реквизит.ИмяКолонки
			+ " в файле не существует. Проверьте правильность написания имения колонки в настройках"; 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке); 
			Возврат;
		КонецПопытки;
		
		РеквизитБД = Метаданные.Справочники.ВариантыКомплектацииНоменклатуры.Реквизиты[Реквизит.Реквизит];
		
		МетаданныеРеквизита = Метаданные.НайтиПоТипу(РеквизитБД.Тип.Типы()[0]);
		Если МетаданныеРеквизита <> Неопределено Тогда

			Если Метаданные.Справочники.Содержит(МетаданныеРеквизита) Тогда
					ВариантОбъект[Реквизит.Реквизит] = ПоискРеквизитаВСправочнике(МетаданныеРеквизита.ПолноеИмя(),
														Строка(ТекущееЗначение), МетаданныеРеквизита.ДлинаКода);
			ИначеЕсли Метаданные.Перечисления.Содержит(МетаданныеРеквизита) Тогда
					ВариантОбъект[Реквизит.Реквизит] = Метаданные.Перечисления[МетаданныеРеквизита].ЗначенияПеречисления.Найти(Строка(ТекущееЗначение));
			Иначе
				Продолжить;
			КонецЕсли;	
		
		Иначе
			Если РеквизитБД.Тип.Типы()[0] = Тип("Строка") Тогда 
				
				ВариантОбъект[Реквизит.Реквизит] = Строка(ТекущееЗначение); 
				
			ИначеЕсли РеквизитБД.Тип.Типы()[0] = Тип("Число") Тогда  
				
				ВариантОбъект[Реквизит.Реквизит] = Число(ТекущееЗначение); 
				
			ИначеЕсли РеквизитБД.Тип.Типы()[0] = Тип("Булево") Тогда         
				
				ВариантОбъект[Реквизит.Реквизит] = Булево(ТекущееЗначение); 
				
			Иначе
				// Какая-то ошибка или пустое поле
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	// ЗаписьЭлемента
	Попытка
		ВариантОбъект.Записать();
	Исключение
		Протокол.ДобавитьСтроку("");
		Протокол.ДобавитьСтроку("Запись элемента " + Стр.Наименование + " не удалась.");
		СообщениеОбОшибке = "Ошибка при записи варианта комплектации " + Стр.Наименование + " из обработки " + Объект + ОписаниеОшибки(); 
		Отказ = Истина;
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, Объект, Объект, СообщениеОбОшибке);
	КонецПопытки;
		
КонецПроцедуры 

&НаСервере
Процедура ЗаписатьХарНаимИНомРостовки(Наименование, Стр, ВариантОбъект, Обновление, Отказ) 
	
	ПозицияСимвола = Найти(Наименование, "/"); 
	ПрефиксАртикула = Лев(Наименование, 4); 
	Артикул = Лев(Наименование, ПозицияСимвола - 1); 
	Ростовка = Сред(Наименование, ПозицияСимвола + 1, СтрДлина(Наименование));
	
	//если в справочнике нет такого элемента то он добавляется
	Номенклатура = НайтиНоменклатуруДляВарианта(Артикул); 
	
	Если Номенклатура = Неопределено Тогда
		Отказ = Истина;
		Протокол.ДобавитьСтроку("");
		Протокол.ДобавитьСтроку("Для Варианта комплектации " + Наименование + " не найдена номенклатура с заполненным сезоном.");
		Возврат;
	КонецЕсли;
	
	Если Не Обновление Тогда
		ВариантОбъект.Наименование = Наименование;
	КонецЕсли;
	ВариантОбъект.Владелец = Номенклатура; 
	ВариантОбъект.Характеристика = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(Ростовка);
	ВариантОбъект.Основной = Ложь;
	
	ВариантОбъект.Товары.Очистить();
	
	СтрокаРостовок = ТаблицаРостовок.НайтиСтроки(Новый Структура("Ростовка",  Ростовка));
	Колонки = ТаблицаРостовок.Колонки;
	
	МассивХарактеристик = Новый Массив;		 
	
	Для каждого колонка из Колонки Цикл
		
		Если Колонка.Имя = "Ростовка" ИЛИ СтрНачинаетсяС(НРег(Колонка.Имя), "итого") 
			ИЛИ Колонка.Имя = "Флаг" Тогда
			Продолжить;
		КонецЕсли;
		Если СтрНачинаетсяС(Колонка.Имя, "_") Тогда
			ИмяРазмера = Сред(Колонка.Имя, 2);
		КонецЕсли;

		Размер = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(ИмяРазмера);
		ЗначенияХарактеристик = Новый Структура;
		ЗначенияХарактеристик.Вставить("Размер", Размер);
		ЗначенияХарактеристик.Вставить("Количество", СтрокаРостовок[0][Колонка.Имя]);
		МассивХарактеристик.Добавить(ЗначенияХарактеристик);
	КонецЦикла;
	
	Для каждого Строка Из МассивХарактеристик Цикл
		
		Если Строка.Количество = 0 ИЛИ Строка.Количество = "" 
			ИЛИ Строка.Количество = "0"  ИЛИ Строка.Количество = Неопределено 
			Тогда
			Продолжить;
		КонецЕсли;
		
		СтрТабЧасти = ВариантОбъект.Товары.Добавить();
		
		СтрТабЧасти.Номенклатура = Номенклатура; 
		СтрТабЧасти.КоличествоУпаковок = Число(Строка.Количество);
		СтрТабЧасти.Количество = Число(Строка.Количество);
		СтрТабЧасти.Характеристика = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию((Строка.Размер));
		СтрТабЧасти.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоНаименованию("пар"); 
		
	КонецЦикла;			
	
	ВариантОбъект.КоличествоУпаковок = ВариантОбъект.Товары.Итог("Количество");
	ВариантОбъект.Количество = ВариантОбъект.КоличествоУпаковок; // Галфинд_ДомнышеваКР_04_07_2023

	ВариантОбъект.Записать();	
	
КонецПроцедуры 

&НаСервере
Функция НайтиНоменклатуруДляВарианта(Артикул)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Артикул = &Артикул
		|	И Номенклатура.КоллекцияНоменклатуры <> ЗНАЧЕНИЕ(Справочник.КоллекцииНоменклатуры.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Артикул", Артикул);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции 

&НаСервере
Процедура ПроверитьНаличиеУказанныхРеквизитовВБазеДляВариантов(НайденныеРеквизиты, Стр, МассивОшибокДляУсловногоОформления) 
	
	Для Каждого  Реквизит  Из НайденныеРеквизиты Цикл 
		СтруктураНеПравильныхПолей = Новый Структура;

		Если Реквизит.Реквизит = "Наименование" 
			ИЛИ НЕ ЗначениеЗаполнено(Стр[Реквизит.ИмяВЭксель]) Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитБД = Метаданные.Справочники.ВариантыКомплектацииНоменклатуры.Реквизиты[Реквизит.Реквизит];
		
		МетаданныеРеквизита = Метаданные.НайтиПоТипу(РеквизитБД.Тип.Типы()[0]);
		Если МетаданныеРеквизита <> Неопределено Тогда

			Если Метаданные.Справочники.Содержит(МетаданныеРеквизита) Тогда
				Если Не ПроверкаРеквизитаВСправочнике(МетаданныеРеквизита.ПолноеИмя(), Стр[Реквизит.ИмяВЭксель], МетаданныеРеквизита.ДлинаКода) Тогда
					СтруктураНеПравильныхПолей.Вставить("Ключ", Реквизит.ИмяВЭксель);
				СтруктураНеПравильныхПолей.Вставить("Значение", Стр[Реквизит.ИмяВЭксель]);
				СтруктураНеПравильныхПолей.Вставить("Артикул", Стр.Наименование);					
				КонецЕсли;
			ИначеЕсли Метаданные.Перечисления.Содержит(МетаданныеРеквизита) Тогда
				Если Метаданные.Перечисления[МетаданныеРеквизита].ЗначенияПеречисления.Найти(Стр[Реквизит.ИмяВЭксель]) = Неопределено Тогда
					СтруктураНеПравильныхПолей.Вставить("Ключ", Реквизит.ИмяВЭксель);
				СтруктураНеПравильныхПолей.Вставить("Значение", Стр[Реквизит.ИмяВЭксель]);
				СтруктураНеПравильныхПолей.Вставить("Артикул", Стр.Наименование); 
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;	
		
		Иначе
			Если РеквизитБД.Тип.Типы()[0] = Тип("Строка") Тогда 
				
				Стр[Реквизит.ИмяВЭксель] = Строка(Стр[Реквизит.ИмяВЭксель]); 
				
			ИначеЕсли РеквизитБД.Тип.Типы()[0] = Тип("Число") Тогда  
				
				Стр[Реквизит.ИмяВЭксель] = Число(Стр[Реквизит.ИмяВЭксель]); 
				
			ИначеЕсли РеквизитБД.Тип.Типы()[0] = Тип("Булево") Тогда         
				
				Стр[Реквизит.ИмяВЭксель] = Булево(Стр[Реквизит.ИмяВЭксель]); 
				
			Иначе
				// Какая-то ошибка или пустое поле
				СтруктураНеПравильныхПолей.Вставить("Ключ", Реквизит.ИмяВЭксель);
				СтруктураНеПравильныхПолей.Вставить("Значение", Стр[Реквизит.ИмяВЭксель]);
				СтруктураНеПравильныхПолей.Вставить("Артикул", Стр.Наименование); 
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураНеПравильныхПолей) Тогда
		МассивОшибокДляУсловногоОформления.Добавить(СтруктураНеПравильныхПолей);
		КонецЕсли;
	КонецЦикла;
	
	//Возврат МассивОшибокДляУсловногоОформления;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураРезультатВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		ПоказатьЗначение(,ТекущиеДанные.Номенклатура);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
