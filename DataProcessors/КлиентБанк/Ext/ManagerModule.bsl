#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

&ИзменениеИКонтроль("ЗаполнитьКонтрагентов")
Процедура гф_ЗаполнитьКонтрагентов(ДокументыКЗагрузке, ТаблицаДокументов)
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки,
	|	ТаблицаДокументов.ИмяКонтрагента КАК Наименование,
	|	ТаблицаДокументов.СокрИмяКонтрагента КАК СокращенноеНаименование,
	|	ТаблицаДокументов.Контрагент КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.Исходящий ТОГДА
	|			ТаблицаДокументов.ПолучательИНН
	|		ИНАЧЕ
	|			ТаблицаДокументов.ПлательщикИНН
	|	КОНЕЦ КАК ИНН,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.Исходящий ТОГДА
	|		ТаблицаДокументов.ПолучательКПП
	|	ИНАЧЕ
	|		ТаблицаДокументов.ПлательщикКПП
	|	КОНЕЦ КАК КПП,
	|	ТаблицаДокументов.ПроверятьИНН,
	|	ТаблицаДокументов.ПроверятьКПП,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.Исходящий ТОГДА
	|			ТаблицаДокументов.ПолучательСчет
	|		ИНАЧЕ
	|			ТаблицаДокументов.ПлательщикСчет
	|	КОНЕЦ КАК НомерСчета,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА ТаблицаДокументов.Исходящий ТОГДА
	|			ТаблицаДокументов.ПолучательБИК
	|		ИНАЧЕ
	|			ТаблицаДокументов.ПлательщикБИК
	|	КОНЕЦ КАК Строка(9)) КАК БИКБанка,
	|	ТаблицаДокументов.ВидОперации
	|
	|ПОМЕСТИТЬ ТаблицаДокументов
	|
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|";
	
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Запрос.Выполнить();
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСправочника.Владелец КАК Контрагент,
	|	ДанныеСправочника.Ссылка КАК СчетКонтрагента,
	|	0 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчетаОрганизаций КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.НомерСчета = ТаблицаДокументов.НомерСчета
	|		И (ДанныеСправочника.Банк.Код = ТаблицаДокументов.БИКБанка Или ДанныеСправочника.БИКБанка = ТаблицаДокументов.БИКБанка)
	|		И ДанныеСправочника.Владелец.ИНН = ТаблицаДокументов.ИНН
	|		И ТаблицаДокументов.ПроверятьИНН
	|		И НЕ ДанныеСправочника.Закрыт,
	|	Константа.ИспользоватьПередачиТоваровМеждуОрганизациями КАК ИспользоватьПередачиТоваровМеждуОрганизациями
	|ГДЕ
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
	|				ИЛИ ТаблицаДокументов.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации)
	|				ИЛИ ТаблицаДокументов.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию)
	|			ТОГДА ИспользоватьПередачиТоваровМеждуОрганизациями.Значение
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	#Вставка
	// #wortmann {
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=812ebcee7bda45d711edb28afa73a123
	// Если Контрагент помечен на удаление, очищаем данные
	// Галфинд Волков 2023/03/03
	|	И ДанныеСправочника.Владелец.ПометкаУдаления = Ложь
	// } #wortmann
	#КонецВставки
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ // Контрагент уже найден, ищем счет
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	Контрагенты.Ссылка КАК Контрагент,
	|	ДанныеСправочника.Ссылка КАК СчетКонтрагента,
	|	5 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Контрагенты КАК Контрагенты
	|	ПО
	|		Контрагенты.Ссылка = ТаблицаДокументов.Контрагент
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчетаКонтрагентов КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.НомерСчета = ТаблицаДокументов.НомерСчета
	|		И ДанныеСправочника.Владелец = Контрагенты.Ссылка
	|		И НЕ ДанныеСправочника.Закрыт
	#Вставка
	|ГДЕ
	|	ДанныеСправочника.Владелец.ПометкаУдаления = Ложь
	#КонецВставки
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСправочника.Владелец КАК Контрагент,
	|	ДанныеСправочника.Ссылка КАК СчетКонтрагента,
	|	10 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчетаКонтрагентов КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.НомерСчета = ТаблицаДокументов.НомерСчета
	|		И ДанныеСправочника.Владелец.ИНН = ТаблицаДокументов.ИНН
	|		И ДанныеСправочника.Владелец.КПП = ТаблицаДокументов.КПП
	|		И ТаблицаДокументов.ПроверятьКПП
	|		И НЕ ДанныеСправочника.Закрыт
	#Вставка
	|ГДЕ
	|	ДанныеСправочника.Владелец.ПометкаУдаления = Ложь
	#КонецВставки
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСправочника.Владелец КАК Контрагент,
	|	ДанныеСправочника.Ссылка КАК СчетКонтрагента,
	|	20 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчетаКонтрагентов КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.НомерСчета = ТаблицаДокументов.НомерСчета
	|		И ДанныеСправочника.Владелец.ИНН = ТаблицаДокументов.ИНН
	|		И ТаблицаДокументов.ПроверятьИНН
	|		И НЕ ДанныеСправочника.Закрыт
	#Вставка
	|	ГДЕ
	|		ДанныеСправочника.Владелец.ПометкаУдаления = Ложь
	#КонецВставки
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСправочника.Владелец КАК Контрагент,
	|	ДанныеСправочника.Ссылка КАК СчетКонтрагента,
	|	30 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчетаКонтрагентов КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.НомерСчета = ТаблицаДокументов.НомерСчета
	|		И (ДанныеСправочника.Владелец.НаименованиеПолное = ТаблицаДокументов.Наименование
	|			ИЛИ ДанныеСправочника.Владелец.НаименованиеПолное = ТаблицаДокументов.СокращенноеНаименование)
	|		И НЕ ДанныеСправочника.Закрыт
	#Вставка
	|	ГДЕ
	|		ДанныеСправочника.Владелец.ПометкаУдаления = Ложь
	#КонецВставки
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСправочника.Ссылка КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК СчетКонтрагента,
	|	40 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Контрагенты КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.ИНН = ТаблицаДокументов.ИНН
	|		И ДанныеСправочника.КПП = ТаблицаДокументов.КПП
	|		И ТаблицаДокументов.ПроверятьКПП
	#Вставка
	|	ГДЕ
	|		ДанныеСправочника.ПометкаУдаления = Ложь
	#КонецВставки
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСправочника.Ссылка КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК СчетКонтрагента,
	|	50 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Контрагенты КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.ИНН = ТаблицаДокументов.ИНН
	|		И ТаблицаДокументов.ПроверятьИНН
	#Вставка
	|	ГДЕ
	|		ДанныеСправочника.ПометкаУдаления = Ложь
	#КонецВставки
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСправочника.Ссылка КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК СчетКонтрагента,
	|	60 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Контрагенты КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.НаименованиеПолное = ТаблицаДокументов.Наименование
	|		И (ДанныеСправочника.ИНН = """"
	|			ИЛИ НЕ ТаблицаДокументов.ПроверятьИНН)
	|		И (ДанныеСправочника.КПП = """"
	|			ИЛИ НЕ ТаблицаДокументов.ПроверятьКПП)
	#Вставка
	|	ГДЕ
	|		ДанныеСправочника.ПометкаУдаления = Ложь
	#КонецВставки
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСправочника.Ссылка КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК СчетКонтрагента,
	|	70 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.ФизическиеЛица КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.Наименование = ТаблицаДокументов.Наименование
	|		И (ДанныеСправочника.ИНН = ТаблицаДокументов.ИНН
	|			ИЛИ ДанныеСправочника.ИНН = """"
	|			ИЛИ НЕ ТаблицаДокументов.ПроверятьИНН)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки,
	|	ДанныеСправочника.Владелец,
	|	ДанныеСправочника.Ссылка,
	|	80
	|
	|ИЗ
	|	ТаблицаДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчетаКонтрагентов КАК ДанныеСправочника
	|		ПО ДанныеСправочника.НомерСчета = ТаблицаДокументов.НомерСчета
	|			И НЕ ДанныеСправочника.Закрыт
	|			И (ДанныеСправочника.Владелец.ИНН = """"
	|				ИЛИ НЕ ТаблицаДокументов.ПроверятьИНН)
	#Вставка
	|	ГДЕ
	|		ДанныеСправочника.Владелец.ПометкаУдаления = Ложь
	#КонецВставки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Приоритет
	|";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
		
		СтрокаДокумента = ДокументыКЗагрузке.Найти(Выборка.НомерСтроки, "НомерСтроки");
		Если СтрокаДокумента <> Неопределено Тогда
			
			НайденоКонтрагентов = 0;
			ТекущийПриоритет = 99;
			
			Пока Выборка.Следующий() Цикл
				Если ТекущийПриоритет < Выборка.Приоритет Тогда
					Прервать;
				КонецЕсли;
				
				ТекущийПриоритет = Выборка.Приоритет;
				НайденоКонтрагентов = НайденоКонтрагентов + 1;
				
				Если НайденоКонтрагентов = 1 Тогда
					
					СтрокаДокумента.Контрагент = Выборка.Контрагент;
					СтрокаДокумента.НайденКонтрагент = Истина;
					
					Если ЗначениеЗаполнено(Выборка.СчетКонтрагента) Тогда
						СтрокаДокумента.СчетКонтрагента = Выборка.СчетКонтрагента;
						СтрокаДокумента.НайденСчетКонтрагента = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			// Если найдены дубли с одинаковым приоритетом, то контрагент останется пустым и новый создаваться не будет.
			Если НайденоКонтрагентов > 1 Тогда
				
				СтрокаДокумента.Контрагент = Неопределено;
				СтрокаДокумента.СчетКонтрагента = Неопределено;
				СтрокаДокумента.СоздаватьКонтрагента = Ложь;
				СтрокаДокумента.НайденКонтрагент = Ложь;
				СтрокаДокумента.НайденСчетКонтрагента = Ложь;
				
				ДобавитьЗамечание(СтрокаДокумента.ОшибкиЗагрузки,
					СтрШаблон(НСтр("ru = 'Найдено более одного контрагента или банковского счета контрагента (%1)!';
									|en = 'More than one counterparty or counterparty bank account is found (%1).'"), СтрокаДокумента.ИмяКонтрагента));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&ИзменениеИКонтроль("ЗаполнитьРеквизитыПоступления")
Процедура гф_ЗаполнитьРеквизитыПоступления(ДокументыКЗагрузке, СтрокаДокумента, ДокументОбъект, СоздаватьКонтрагентов, ПроводитьДокументы)
	
	Перем РеквизитыВсе, РеквизитыХозОперации;
	
	УстановитьСвойство(ДокументОбъект, "Дата", ДокументОбъект.ДатаВходящегоДокумента);
	
	Если НачалоДня(ДокументОбъект.Дата) = НачалоДня(ТекущаяДатаСеанса()) Тогда
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
	Иначе
		ДокументОбъект.Дата = КонецДня(ДокументОбъект.Дата);
	КонецЕсли;
	
	// Хоз. операция
	Если ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) Тогда
		ХозяйственнаяОперация = СтрокаДокумента.ВидОперации;
	Иначе
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
	КонецЕсли;
	УстановитьСвойство(ДокументОбъект, "ХозяйственнаяОперация", ХозяйственнаяОперация);
	
	// Статья по умолчанию
	Если Не ЗначениеЗаполнено(СтрокаДокумента.СтатьяДвиженияДенежныхСредств) Тогда
		СтрокаДокумента.СтатьяДвиженияДенежныхСредств =
			Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(ХозяйственнаяОперация);
	КонецЕсли;
	
	Документы.ПоступлениеБезналичныхДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация, РеквизитыВсе, РеквизитыХозОперации);
		
	// Контрагент
	Если РеквизитыХозОперации.Найти("Контрагент") <> Неопределено Тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
			УстановитьСвойство(ДокументОбъект, "Контрагент", СтрокаДокумента.Контрагент);
		ИначеЕсли СоздаватьКонтрагентов И СтрокаДокумента.СоздаватьКонтрагента Тогда
			УстановитьСвойство(ДокументОбъект, "Контрагент", СоздатьКонтрагента(ДокументыКЗагрузке, СтрокаДокумента));
		Иначе
			УстановитьСвойство(ДокументОбъект, "ИмяКонтрагента", СтрокаДокумента.ИмяКонтрагента);
		КонецЕсли;
	КонецЕсли;
	
	// Счет контрагента
	Если РеквизитыХозОперации.Найти("БанковскийСчетКонтрагента") <> Неопределено Тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) Тогда
			УстановитьСвойство(ДокументОбъект, "БанковскийСчетКонтрагента", СтрокаДокумента.СчетКонтрагента);
		ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
			УстановитьСвойство(ДокументОбъект, "БанковскийСчетКонтрагента",
				СоздатьБанковскийСчетКонтрагента(ДокументыКЗагрузке, СтрокаДокумента, ДокументОбъект.Контрагент));
		КонецЕсли;
	КонецЕсли;
	
	// Подотчетное лицо
	Если РеквизитыХозОперации.Найти("ПодотчетноеЛицо") <> Неопределено Тогда
		Если СтрокаДокумента.НайденКонтрагент Тогда
			УстановитьСвойство(ДокументОбъект, "ПодотчетноеЛицо", СтрокаДокумента.Контрагент);
		Иначе
			УстановитьСвойство(ДокументОбъект, "ПодотчетноеЛицо", СтрокаДокумента.ПодотчетноеЛицо);
		КонецЕсли;
	КонецЕсли;
	
	// Банковский счет отправитель
	Если РеквизитыХозОперации.Найти("БанковскийСчетОтправитель") <> Неопределено Тогда
		УстановитьСвойство(ДокументОбъект, "БанковскийСчетОтправитель", СтрокаДокумента.СчетКонтрагента);
	КонецЕсли;
	
	// Прочие реквизиты
	ЗаполнитьЗначенияСвойств(ДокументОбъект, СтрокаДокумента,
		"СтатьяДвиженияДенежныхСредств, Подразделение, КассаОтправитель");
	
	// Поступление оплаты по эквайрингу
	Если РеквизитыХозОперации.Найти("ДоговорЭквайринга") <> Неопределено Тогда
		
		ОбработатьКомиссию = Ложь;
		
		Если ЗначениеЗаполнено(СтрокаДокумента.ДоговорЭквайринга) Тогда
			УстановитьСвойство(ДокументОбъект, "ДоговорЭквайринга", СтрокаДокумента.ДоговорЭквайринга);
			УстановитьСвойство(ДокументОбъект, "СтатьяРасходов", СтрокаДокумента.СтатьяРасходов);
			УстановитьСвойство(ДокументОбъект, "АналитикаРасходов", СтрокаДокумента.АналитикаРасходов);
			РеквизитыДоговора = Справочники.ДоговорыЭквайринга.РеквизитыДоговора(ДокументОбъект.ДоговорЭквайринга);
			УстановитьСвойство(ДокументОбъект, "ОтражатьКомиссию",
				РеквизитыДоговора.СпособОтраженияКомиссии = Перечисления.СпособыОтраженияЭквайринговойКомиссии.ПриЗачислении);
			ОбработатьКомиссию = ДокументОбъект.ОтражатьКомиссию;
		Иначе
			УстановитьСвойство(ДокументОбъект, "ДоговорЭквайринга",
				Справочники.ДоговорыЭквайринга.ДоговорПоУмолчанию(ДокументОбъект.Организация, ДокументОбъект.Контрагент));
			Если ЗначениеЗаполнено(ДокументОбъект.ДоговорЭквайринга) Тогда
				РеквизитыДоговора = Справочники.ДоговорыЭквайринга.РеквизитыДоговора(ДокументОбъект.ДоговорЭквайринга);
				УстановитьСвойство(ДокументОбъект, "Подразделение", РеквизитыДоговора.ПодразделениеРасходов);
				УстановитьСвойство(ДокументОбъект, "СтатьяРасходов", РеквизитыДоговора.СтатьяРасходов);
				УстановитьСвойство(ДокументОбъект, "АналитикаРасходов", РеквизитыДоговора.АналитикаРасходов);
				УстановитьСвойство(ДокументОбъект, "СтатьяДвиженияДенежныхСредств", РеквизитыДоговора.СтатьяДвиженияДенежныхСредствПоступлениеОплаты);
				УстановитьСвойство(ДокументОбъект, "ОтражатьКомиссию",
					РеквизитыДоговора.СпособОтраженияКомиссии = Перечисления.СпособыОтраженияЭквайринговойКомиссии.ПриЗачислении);
				ОбработатьКомиссию = ДокументОбъект.ОтражатьКомиссию;
			КонецЕсли;
		КонецЕсли;
		
		Если ОбработатьКомиссию И РеквизитыДоговора.ФиксированнаяСтавкаКомиссии Тогда
			СуммаКомиссии = Окр(ДенежныеСредстваКлиентСервер.РассчитатьСуммуКомиссии(
				ДокументОбъект.СуммаДокумента, РеквизитыДоговора.СтавкаКомиссии, Истина), 2);
			СуммаКомиссииСтрокой1 = Строка(СуммаКомиссии);
			СуммаКомиссииСтрокой2 = Строка(Цел(СуммаКомиссии));
			Если СтрНайти(ДокументОбъект.НазначениеПлатежа, СуммаКомиссииСтрокой1)
				Или СтрНайти(ДокументОбъект.НазначениеПлатежа, СуммаКомиссииСтрокой2) Тогда
				УстановитьСвойство(ДокументОбъект, "СуммаКомиссии", СуммаКомиссии);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//++ Локализация
	// Бюджетные реквизиты
	Если СтрокаДокумента.ПлатежВБюджет Тогда
		УстановитьСвойство(ДокументОбъект, "ПеречислениеВБюджет", Истина);
		УстановитьСвойство(ДокументОбъект, "ВидПеречисленияВБюджет", СтрокаДокумента.ВидПеречисленияВБюджет);
		УстановитьСвойство(ДокументОбъект, "КодБК", СтрокаДокумента.ПоказательКБК);
		УстановитьСвойство(ДокументОбъект, "КодОКАТО", СтрокаДокумента.ОКАТО);
		УстановитьСвойство(ДокументОбъект, "СтатусСоставителя", СтрокаДокумента.СтатусСоставителя);
		Если СтрокаДокумента.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж Тогда
			УстановитьСвойство(ДокументОбъект, "ПоказательОснования", "0");
			УстановитьСвойство(ДокументОбъект, "ПоказательПериода", "0");
			УстановитьСвойство(ДокументОбъект, "ПоказательНомера", "0");
			УстановитьСвойство(ДокументОбъект, "ПоказательДаты", "0");
		Иначе
			УстановитьСвойство(ДокументОбъект, "ПоказательОснования", СтрокаДокумента.ПоказательОснования);
			УстановитьСвойство(ДокументОбъект, "ПоказательПериода", СтрокаДокумента.ПоказательПериода);
			УстановитьСвойство(ДокументОбъект, "ПоказательНомера", СтрокаДокумента.ПоказательНомера);
			УстановитьСвойство(ДокументОбъект, "ПоказательДаты", СтрокаДокумента.ПоказательДаты);
		КонецЕсли;
		УстановитьСвойство(ДокументОбъект, "ПоказательТипа", СтрокаДокумента.ПоказательТипа);
	Иначе
		УстановитьСвойство(ДокументОбъект, "ВидПеречисленияВБюджет", Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж);
	КонецЕсли;
	//-- Локализация
	
	// Расшифровка платежа
	Если РеквизитыХозОперации.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
		
		Если СтрокаДокумента.НайденоОснованиеПлатежа Тогда // УИП
			
			СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаДокумента,
				"Партнер, ОснованиеПлатежа, ОбъектРасчетов, СтатьяДвиженияДенежныхСредств");
			ЗаполнитьРасшифровкуПлатежаПоОбъектуРасчетов(СтрокаРасшифровки);
			
			СтрокаРасшифровки.УдалитьЗаказ = СтрокаДокумента.ОбъектРасчетов;
			//++ Локализация

			//++ НЕ УТ
			СтрокаРасшифровки.СтатьяЦелевыхСредств = СтрокаДокумента.СтатьяЦелевыхСредств;
			//-- НЕ УТ

			//-- Локализация
			СтрокаРасшифровки.Сумма = ДокументОбъект.СуммаДокумента;
			
			РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
																	СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
																	ДокументОбъект.Валюта,
																	СтрокаРасшифровки.ВалютаВзаиморасчетов,
																	ДокументОбъект.Организация,
																	ДокументОбъект.Дата,,
																	СтрокаРасшифровки.ОбъектРасчетов);
			
			ДенежныеСредстваСервер.ЗаполнитьНДСВРасшифровке(
				ДокументОбъект.РасшифровкаПлатежа,
				ДенежныеСредстваСервер.РасшифровкаПлатежаНДС(ДокументОбъект.Организация,
					ДокументОбъект.Дата, ДокументОбъект.Валюта, ДокументОбъект.РасшифровкаПлатежа.ВыгрузитьКолонку("ОбъектРасчетов"), Истина));
					
		ИначеЕсли РеквизитыХозОперации.Найти("РасшифровкаПлатежа.ДоговорКредитаДепозита") <> Неопределено Тогда
			
			СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
			
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ДанныеРегистра.ОбъектОплаты КАК ДоговорКредитаДепозита,
			|	ВЫРАЗИТЬ(ДанныеРегистра.ОбъектОплаты КАК Справочник.ДоговорыКредитовИДепозитов).Партнер КАК Партнер,
			|	ВЫРАЗИТЬ(ДанныеРегистра.ОбъектОплаты КАК Справочник.ДоговорыКредитовИДепозитов).СтатьяДДСПоступленияВыдачи КАК СтатьяДвиженияДенежныхСредств
			|ИЗ
			|	РегистрСведений.ГрафикПлатежей КАК ДанныеРегистра
			|ГДЕ
			|	ДанныеРегистра.БанковскийСчетКасса = &БанковскийСчет
			|	И ДанныеРегистра.ПлательщикПолучатель = &Контрагент
			|	И ДанныеРегистра.ПоступлениеСписание = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияДенежныхСредств.Поступление)
			|	И ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам)
			|СГРУППИРОВАТЬ ПО
			|	ДанныеРегистра.ОбъектОплаты
			|ИМЕЮЩИЕ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРегистра.ОбъектОплаты) = 1
			|";
			
			Запрос.УстановитьПараметр("БанковскийСчет", ДокументОбъект.БанковскийСчет);
			Запрос.УстановитьПараметр("Контрагент", ДокументОбъект.Контрагент);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, Выборка);
			Иначе
				СтрокиКЗагрузке = Новый Массив;
				СтрокиКЗагрузке.Добавить(СтрокаДокумента);
				ЗаполнитьПоКосвеннымДанным(СтрокиКЗагрузке, ДокументОбъект.БанковскийСчет);
				ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаДокумента,
					"Партнер, СтатьяДвиженияДенежныхСредств, ДоговорКредитаДепозита");
			КонецЕсли;
			
			ЗаполнитьРасшифровкуПлатежаПоДоговоруКредитаДепозита(СтрокаРасшифровки);
			
			СтрокаРасшифровки.Сумма = СтрокаДокумента.СуммаДокумента;
			
			РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
																	СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
																	ДокументОбъект.Валюта,
																	СтрокаРасшифровки.ВалютаВзаиморасчетов,
																	ДокументОбъект.Организация,
																	ДокументОбъект.Дата);
			
		ИначеЕсли РеквизитыХозОперации.Найти("РасшифровкаПлатежа.ОбъектРасчетов") = Неопределено Тогда // Прочие платежи
			
			СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаДокумента,
				"Партнер, СтатьяДвиженияДенежныхСредств, СтатьяДоходов, АналитикаДоходов, АналитикаАктивовПассивов, Подразделение");
			//++ Локализация

			//++ НЕ УТ
			СтрокаРасшифровки.СтатьяЦелевыхСредств = СтрокаДокумента.СтатьяЦелевыхСредств;
			//-- НЕ УТ

			//-- Локализация
			СтрокаРасшифровки.Сумма = СтрокаДокумента.СуммаДокумента;
			РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
																	СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
																	ДокументОбъект.Валюта,
																	СтрокаРасшифровки.ВалютаВзаиморасчетов,
																	ДокументОбъект.Организация,
																	ДокументОбъект.Дата);
		
		Иначе
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Дата", ДокументОбъект.Дата);
			Реквизиты.Вставить("Организация", ДокументОбъект.Организация);
			Реквизиты.Вставить("СуммаДокумента", 0);
			Реквизиты.Вставить("Валюта", ДокументОбъект.Валюта);
			
			Если ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
				Реквизиты.Вставить("Контрагент", ДокументОбъект.Контрагент);
			Иначе
				Реквизиты.Вставить("Контрагент", ДокументОбъект.ИмяКонтрагента);
			КонецЕсли;
			
			Если ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
				Реквизиты.Вставить("Партнер", Справочники.Партнеры.НашеПредприятие);
			Иначе
				Реквизиты.Вставить("Партнер", Неопределено);
			КонецЕсли;
			
			Реквизиты.Вставить("ХозяйственнаяОперация", ДокументОбъект.ХозяйственнаяОперация);
			
			Реквизиты.Вставить("ТипРасчетов", Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом);
			Реквизиты.Вставить("ПартнерПрочиеОтношения", Ложь);
			Реквизиты.Вставить("ПодборДебиторскойЗадолженности", Истина);
			Реквизиты.Вставить("ПодборТолькоБезусловнойЗадолженности", Ложь);
			
			//++ Локализация

			//++ НЕ УТ
			Реквизиты.Вставить("ПлатежиПо275ФЗ", Ложь);
			Реквизиты.Вставить("ДоговорСУчастникомГОЗ", Ложь);
			//-- НЕ УТ

			//-- Локализация
			
			АдресПлатежейВХранилище = "";
			ТаблицаОстатковРасчетов = Неопределено;
			
			ВзаиморасчетыСервер.ЗаполнитьТаблицуОстатковРасчетов(Реквизиты, АдресПлатежейВХранилище, ТаблицаОстатковРасчетов);
			КолонкиТаблицыОстатковВзаиморасчетов = ТаблицаОстатковРасчетов.Колонки; // КоллекцияКолонокТаблицыЗначений
			КолонкиТаблицыОстатковВзаиморасчетов.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
			КолонкиТаблицыОстатковВзаиморасчетов.Добавить("ОснованиеПлатежа");
			
			РаспределяемаяСумма = ДокументОбъект.СуммаДокумента;
			
			Для Каждого СтрокаТаблицы Из ТаблицаОстатковРасчетов Цикл
				
				Если ТипЗнч(СтрокаТаблицы.ОбъектРасчетов) = Тип("СправочникСсылка.ОбъектыРасчетов") Тогда
					
					СтрокаТаблицы.ОснованиеПлатежа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.ОбъектРасчетов, "Объект");
					
					НомерДокументаРасчетов = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СтрокаТаблицы.Номер, Истина, Истина);
					Если СтрЧислоВхождений(СтрокаДокумента.НазначениеПлатежа, НомерДокументаРасчетов) > 0 Тогда
						
						СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
						
						СуммаСтроки = Мин(РаспределяемаяСумма, СтрокаТаблицы.Сумма);
						РаспределяемаяСумма = РаспределяемаяСумма - СтрокаТаблицы.Сумма;
						
						ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаТаблицы,, "Сумма");
						ЗаполнитьРасшифровкуПлатежаПоОбъектуРасчетов(СтрокаРасшифровки);
						//++ Локализация
						#Вставка
						// #wortmann {
						// e1cib/data/Задача.ЗадачаИсполнителя?ref=812ebcee7bda45d711edb28afa73a123
						// Если Контрагент помечен на удаление, очищаем данные
						// Галфинд Волков 2023/03/03 
						Если СтрокаТаблицы.Контрагент.ПометкаУдаления Тогда
							
							СтрокаРасшифровки.Партнер = Неопределено;
							СтрокаРасшифровки.ОбъектРасчетов = Неопределено;
							СтрокаРасшифровки.ОснованиеПлатежа = Неопределено;
							
						КонецЕсли;
						// } #wortmann
						#КонецВставки

						//++ НЕ УТ
						СтрокаРасшифровки.СтатьяЦелевыхСредств = СтрокаДокумента.СтатьяЦелевыхСредств;
						//-- НЕ УТ

						//-- Локализация
						СтрокаРасшифровки.Сумма = СуммаСтроки;
						
						РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
																				СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
																				ДокументОбъект.Валюта,
																				СтрокаРасшифровки.ВалютаВзаиморасчетов,
																				ДокументОбъект.Организация,
																				ДокументОбъект.Дата,,
																				СтрокаРасшифровки.ОбъектРасчетов);
						
						СтрокаТаблицы.Обработано = Истина;
						
						Если РаспределяемаяСумма <= 0 Тогда
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ПроводитьДокументы И РаспределяемаяСумма > 0 Тогда // Подбор объектов расчетов
				
				Для Каждого СтрокаТаблицы Из ТаблицаОстатковРасчетов Цикл
					
					Если ЗначениеЗаполнено(СтрокаТаблицы.ОбъектРасчетов) Тогда
						
						Если СтрокаТаблицы.Обработано Тогда
							Продолжить;
						КонецЕсли;
						
						СтрокаТаблицы.ОснованиеПлатежа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.ОбъектРасчетов, "Объект");
						
						СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
						
						СуммаСтроки = Мин(РаспределяемаяСумма, СтрокаТаблицы.Сумма);
						РаспределяемаяСумма = РаспределяемаяСумма - СтрокаТаблицы.Сумма;
						
						ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаТаблицы,, "Сумма");
						ЗаполнитьРасшифровкуПлатежаПоОбъектуРасчетов(СтрокаРасшифровки);
						//++ Локализация

						//++ НЕ УТ
						СтрокаРасшифровки.СтатьяЦелевыхСредств = СтрокаДокумента.СтатьяЦелевыхСредств;
						//-- НЕ УТ

						//-- Локализация
						СтрокаРасшифровки.Сумма = СуммаСтроки;
						
						РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
																				СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
																				ДокументОбъект.Валюта,
																				СтрокаРасшифровки.ВалютаВзаиморасчетов,
																				ДокументОбъект.Организация,
																				ДокументОбъект.Дата,,
																				СтрокаРасшифровки.ОбъектРасчетов);
						
						СтрокаТаблицы.Обработано = Истина;
						
						Если РаспределяемаяСумма <= 0 Тогда
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если РаспределяемаяСумма > 0 Или Не ДокументОбъект.РасшифровкаПлатежа.Количество() Тогда
				СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаДокумента,
					"Партнер, ОснованиеПлатежа, ОбъектРасчетов, СтатьяДвиженияДенежныхСредств");
				ЗаполнитьРасшифровкуПлатежаПоОбъектуРасчетов(СтрокаРасшифровки);
				//++ Локализация

				//++ НЕ УТ
				СтрокаРасшифровки.СтатьяЦелевыхСредств = СтрокаДокумента.СтатьяЦелевыхСредств;
				//-- НЕ УТ

				//-- Локализация
				СтрокаРасшифровки.Сумма = РаспределяемаяСумма;
				РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
																	СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
																	ДокументОбъект.Валюта,
																	СтрокаРасшифровки.ВалютаВзаиморасчетов,
																	ДокументОбъект.Организация,
																	ДокументОбъект.Дата,,
																	СтрокаРасшифровки.ОбъектРасчетов);
			КонецЕсли;
			
			ДенежныеСредстваСервер.ЗаполнитьНДСВРасшифровке(
				ДокументОбъект.РасшифровкаПлатежа,
				ДенежныеСредстваСервер.РасшифровкаПлатежаНДС(ДокументОбъект.Организация,
					ДокументОбъект.Дата, ДокументОбъект.Валюта, ДокументОбъект.РасшифровкаПлатежа.ВыгрузитьКолонку("ОбъектРасчетов"), Истина));
		КонецЕсли;
	КонецЕсли;
	
	//++ Локализация
	Если НЕ ПустаяСтрока(ДокументОбъект.НазначениеПлатежа) Тогда
		ДокументОбъект.ЗаполнитьКодВалютнойОперации();
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

&ИзменениеИКонтроль("ОбновитьДокументы")
Процедура гф_ОбновитьДокументы(ДокументыКЗагрузке, БанковскийСчет, СоздаватьКонтрагентов, ПроводитьДокументы)
	
	Перем РеквизитыВсе, РеквизитыХозОперации;
	
	Отбор = Новый Структура("БанковскийСчет, Загружать, НайденДокументВБазе",
		БанковскийСчет, Истина, Истина);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	
	Для каждого СтрокаДокумента Из СтрокиКЗагрузке Цикл
		
		ДокументОбъект = СтрокаДокумента.Документ.ПолучитьОбъект();
		
		СделатьНепроведенным = Ложь;
		
		ВалютаРеглУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДокументОбъект.Организация);
		
		УстановитьСвойство(ДокументОбъект, "ПроведеноБанком", Истина);
		УстановитьСвойство(ДокументОбъект, "ДатаПроведенияБанком", СтрокаДокумента.ДатаПроведения);
		
		ЗаменитьСтароеЗначение = Ложь;
		//++ Локализация
		ЗаменитьСтароеЗначение = (СтрокаДокумента.Операция <> "Операция по Яндекс.Кассе");
		//-- Локализация
		УстановитьСвойство(ДокументОбъект, "НомерВходящегоДокумента", СтрокаДокумента.Номер, ЗаменитьСтароеЗначение);
		
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств") Тогда
			Документы.ПоступлениеБезналичныхДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
				ДокументОбъект.ХозяйственнаяОперация, РеквизитыВсе, РеквизитыХозОперации);
				
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств") Тогда
			Документы.СписаниеБезналичныхДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
				ДокументОбъект, РеквизитыВсе, РеквизитыХозОперации);
		КонецЕсли;
		
		// Контрагент
		Если РеквизитыХозОперации.Найти("Контрагент") <> Неопределено И Не ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
			Если ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
				УстановитьСвойство(ДокументОбъект, "Контрагент", СтрокаДокумента.Контрагент);
			ИначеЕсли СоздаватьКонтрагентов И СтрокаДокумента.СоздаватьКонтрагента Тогда
				УстановитьСвойство(ДокументОбъект, "Контрагент", СоздатьКонтрагента(ДокументыКЗагрузке, СтрокаДокумента));
			Иначе
				УстановитьСвойство(ДокументОбъект, "ИмяКонтрагента", СтрокаДокумента.ИмяКонтрагента);
			КонецЕсли;
		КонецЕсли;
		
		// Счет контрагента
		Если РеквизитыХозОперации.Найти("БанковскийСчетКонтрагента") <> Неопределено И Не ЗначениеЗаполнено(ДокументОбъект.БанковскийСчетКонтрагента) Тогда
			Если ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) Тогда
				УстановитьСвойство(ДокументОбъект, "БанковскийСчетКонтрагента", СтрокаДокумента.СчетКонтрагента);
			ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
				УстановитьСвойство(ДокументОбъект, "БанковскийСчетКонтрагента",
				СоздатьБанковскийСчетКонтрагента(ДокументыКЗагрузке, СтрокаДокумента, ДокументОбъект.Контрагент));
			КонецЕсли;
		КонецЕсли;
		
		СтатьяДвиженияДенежныхСредств =
			Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(ДокументОбъект.ХозяйственнаяОперация);
		
		Для каждого СтрокаРасшифровки Из ДокументОбъект.РасшифровкаПлатежа Цикл
			
			// Партнер
			Если Не ЗначениеЗаполнено(СтрокаРасшифровки.Партнер) Тогда
				СтрокаРасшифровки.Партнер = СтрокаДокумента.Партнер;
			КонецЕсли;
			
			РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
																	СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
																	ДокументОбъект.Валюта,
																	СтрокаРасшифровки.ВалютаВзаиморасчетов,
																	ДокументОбъект.Организация,
																	ДокументОбъект.Дата,,
																	СтрокаРасшифровки.ОбъектРасчетов);
			
			// Статья ДДС
			Если РеквизитыХозОперации.Найти("РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств") <> Неопределено
				И Не ЗначениеЗаполнено(СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств) Тогда
				
				Если ЗначениеЗаполнено(СтрокаРасшифровки.ОбъектРасчетов) Тогда
					
					РеквизитыОбъектаРасчетов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
									СтрокаРасшифровки.ОбъектРасчетов,
									"Договор.СтатьяДвиженияДенежныхСредств, Соглашение.СтатьяДвиженияДенежныхСредств");
					
					СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств =
									?(ЗначениеЗаполнено(РеквизитыОбъектаРасчетов.ДоговорСтатьяДвиженияДенежныхСредств),
									РеквизитыОбъектаРасчетов.ДоговорСтатьяДвиженияДенежныхСредств,
									РеквизитыОбъектаРасчетов.СоглашениеСтатьяДвиженияДенежныхСредств);
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств) Тогда
					СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СуммыРазличаются = (СтрокаДокумента.СуммаДокумента <> ДокументОбъект.СуммаДокумента);
		
		УстановитьСвойство(ДокументОбъект, "СуммаДокумента", СтрокаДокумента.СуммаДокумента, Истина);
		#Удаление
		УстановитьСвойство(ДокументОбъект, "НазначениеПлатежа", СтрокаДокумента.НазначениеПлатежа, Истина);
		#КонецУдаления
		#Вставка
		// vvv Галфинд \ Sakovich 22.01.2024
		// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811eeb5086b16cfb7
		// у записанного документа не нужно перезаполнять существующее "Назначение платежа"
		Если Не (Не ДокументОбъект.ЭтоНовый() И ЗначениеЗаполнено(ДокументОбъект["НазначениеПлатежа"])) Тогда
			УстановитьСвойство(ДокументОбъект, "НазначениеПлатежа", СтрокаДокумента.НазначениеПлатежа, Истина);
		КонецЕсли;
		// ^^^ Галфинд \ Sakovich 22.01.2024
		#КонецВставки
		УстановитьСвойство(ДокументОбъект, "ФорматированноеНазначениеПлатежа", СтрокаДокумента.ФорматированноеНазначениеПлатежа, Истина);
		УстановитьСвойство(ДокументОбъект, "ДанныеВыписки", СтрокаДокумента.ДанныеВыписки, Истина);
		
		Если СуммыРазличаются Тогда
			Если ДокументОбъект.РасшифровкаПлатежа.Количество() = 1 Тогда
				СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа[0];
				СтрокаРасшифровки.Сумма = ДокументОбъект.СуммаДокумента;
				
				ДенежныеСредстваКлиентСервер.РассчитатьСуммуВзаиморасчетовВСтрокеРасшифровки(
					СтрокаРасшифровки, ДокументОбъект.Валюта, ВалютаРеглУчета);
					
				СтруктураПересчетаСуммы = Новый Структура;
				СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаРасшифровки, СтруктураДействий, Неопределено);
				
			Иначе
				СделатьНепроведенным = Истина;
				ОписаниеОшибки = НСтр("ru = 'Сумма документа отличается от суммы строк расшифровки платежа.';
										|en = 'Document amount differs from the total of payment details lines.'");
				ДобавитьЗамечание(СтрокаДокумента.ОшибкиЗагрузки, ОписаниеОшибки);
			КонецЕсли;
		КонецЕсли;
		
		УстановитьСвойство(ДокументОбъект, "Комментарий", НСтр("ru = '#Загружен из Клиент-Банка';
																|en = '#Imported from Client Bank'"));
		
		Если ДокументОбъект.Модифицированность() Тогда
			УстановитьСвойство(ДокументОбъект, "ДатаЗагрузки", ТекущаяДатаСеанса(), Истина);
		КонецЕсли;
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ОбменСБанками", Истина);
		ДокументОбъект.Движения.ДенежныеСредстваБезналичные.ДополнительныеСвойства.Вставить("ОбменСБанками", Истина);
		ДокументОбъект.ПроверитьЗаполнение();
		
		Если ДокументОбъект.ДополнительныеСвойства.Свойство("ОшибкиЗаполнения") Тогда
			УстановитьСвойство(ДокументОбъект, "ОшибкиЗагрузки", ДокументОбъект.ДополнительныеСвойства.ОшибкиЗаполнения, Истина);
		КонецЕсли;
		
		Если ПроводитьДокументы
			И СокрЛП(ДокументОбъект.ОшибкиЗагрузки) = "" Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		ЗаписатьОбъект(ДокументОбъект, ?(СделатьНепроведенным, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписи), СтрокаДокумента);
	КонецЦикла;
	
КонецПроцедуры

#КонецЕсли

&ИзменениеИКонтроль("СоздатьДокументы")
Процедура гф_СоздатьДокументы(ДокументыКЗагрузке, БанковскийСчет, СоздаватьКонтрагентов, ПроводитьДокументы)

	РеквизитыСчета = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет);
	РазрешитьПлатежиБезУказанияЗаявок = РеквизитыСчета.РазрешитьПлатежиБезУказанияЗаявок;

	Организация          = РеквизитыСчета.Организация;
	Префикс              = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "Префикс");
	Валюта               = РеквизитыСчета.Валюта;
	ТекущийПользователь  = Пользователи.ТекущийПользователь();

	Отбор = Новый Структура("БанковскийСчет, Загружать, НайденДокументВБазе",
	БанковскийСчет, Истина, Ложь);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);

	Для каждого СтрокаДокумента Из СтрокиКЗагрузке Цикл

		Если СтрокаДокумента.Исходящий Тогда
			ДокументОбъект = Документы.СписаниеБезналичныхДенежныхСредств.СоздатьДокумент();
		Иначе
			ДокументОбъект = Документы.ПоступлениеБезналичныхДенежныхСредств.СоздатьДокумент();
		КонецЕсли;

		// Общие реквизиты
		ДатаВхДокумента = ДенежныеСредстваКлиентСервер.ПолучитьДатуИзСтроки(СтрокаДокумента.Дата);
		Если ЗначениеЗаполнено(ДатаВхДокумента) Тогда
			УстановитьСвойство(ДокументОбъект, "ДатаВходящегоДокумента", ДатаВхДокумента);
		Иначе
			УстановитьСвойство(ДокументОбъект, "ДатаВходящегоДокумента", СтрокаДокумента.ДатаДок);
		КонецЕсли;
		УстановитьСвойство(ДокументОбъект, "НомерВходящегоДокумента", СтрокаДокумента.Номер);

		УстановитьСвойство(ДокументОбъект, "Организация", Организация);
		УстановитьСвойство(ДокументОбъект, "БанковскийСчет", БанковскийСчет);
		УстановитьСвойство(ДокументОбъект, "Валюта", Валюта);

		УстановитьСвойство(ДокументОбъект, "ТипПлатежногоДокумента", СтрокаДокумента.ТипПлатежногоДокумента);
		УстановитьСвойство(ДокументОбъект, "СуммаДокумента", СтрокаДокумента.СуммаДокумента);

		УстановитьСвойство(ДокументОбъект, "НазначениеПлатежа", СтрокаДокумента.НазначениеПлатежа);
		УстановитьСвойство(ДокументОбъект, "ФорматированноеНазначениеПлатежа", СтрокаДокумента.ФорматированноеНазначениеПлатежа);
		УстановитьСвойство(ДокументОбъект, "ДанныеВыписки", СтрокаДокумента.ДанныеВыписки);
		УстановитьСвойство(ДокументОбъект, "ИдентификаторПлатежа", СтрокаДокумента.Код);

		УстановитьСвойство(ДокументОбъект, "Комментарий", НСтр("ru = '#Загружен из Клиент-Банка';
		|en = '#Imported from Client Bank'"));
		УстановитьСвойство(ДокументОбъект, "ДатаЗагрузки", ТекущаяДатаСеанса());

		УстановитьСвойство(ДокументОбъект, "ТипНалога", СтрокаДокумента.ТипНалога);
		УстановитьСвойство(ДокументОбъект, "НастройкаСчетовУчета", СтрокаДокумента.НастройкаСчетовУчета);

		УстановитьСвойство(ДокументОбъект, "ОшибкиЗагрузки", СтрокаДокумента.ОшибкиЗагрузки);

		УстановитьСвойство(ДокументОбъект, "Ответственный", ТекущийПользователь);

		// Индивидуальное заполнение
		Если СтрокаДокумента.Исходящий Тогда
			ЗаполнитьРеквизитыСписания(ДокументыКЗагрузке, СтрокаДокумента, ДокументОбъект, СоздаватьКонтрагентов, ПроводитьДокументы, Префикс);
		Иначе
			ЗаполнитьРеквизитыПоступления(ДокументыКЗагрузке, СтрокаДокумента, ДокументОбъект, СоздаватьКонтрагентов, ПроводитьДокументы);
		КонецЕсли;

		//++ Локализация
		Если СтрокаДокумента.Операция <> "Операция по Яндекс.Кассе" Тогда
			//-- Локализация
			УстановитьСвойство(ДокументОбъект, "ПроведеноБанком", Истина);
			//++ Локализация
		КонецЕсли;
		//-- Локализация

		Если ЗначениеЗаполнено(СтрокаДокумента.ДатаПроведения) Тогда
			УстановитьСвойство(ДокументОбъект, "ДатаПроведенияБанком", СтрокаДокумента.ДатаПроведения);
		Иначе
			УстановитьСвойство(ДокументОбъект, "ДатаПроведенияБанком", ДокументОбъект.Дата);
		КонецЕсли;

		Если Не ЗначениеЗаполнено(ДокументОбъект.ДатаВходящегоДокумента) Тогда
			ДокументОбъект.ДатаВходящегоДокумента = ДокументОбъект.Дата;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДокументОбъект.НомерВходящегоДокумента) Тогда
			ДокументОбъект.НомерВходящегоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДокументОбъект.Номер);
		КонецЕсли;

		ДокументОбъект.ДополнительныеСвойства.Вставить("ОбменСБанками", Истина);
		ДокументОбъект.Движения.ДенежныеСредстваБезналичные.ДополнительныеСвойства.Вставить("ОбменСБанками", Истина);
		ДокументОбъект.ПроверитьЗаполнение();

		Если ДокументОбъект.ДополнительныеСвойства.Свойство("ОшибкиЗаполнения") Тогда
			ДокументОбъект.ОшибкиЗагрузки = СокрЛП(ДокументОбъект.ОшибкиЗагрузки + "
			|" + ДокументОбъект.ДополнительныеСвойства.ОшибкиЗаполнения);
		КонецЕсли;

		Если ПроводитьДокументы
			И СокрЛП(ДокументОбъект.ОшибкиЗагрузки) = "" Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;

		Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации ИЛИ 
			ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
			Если СтрокаДокумента.Исходящий Тогда
				ЗеркальныйПлатежСсылка = Документы.СписаниеБезналичныхДенежныхСредств.НайтиЗеркальныйПлатеж(ДокументОбъект.Ссылка);
				Если ЗначениеЗаполнено(ЗеркальныйПлатежСсылка) И ЗеркальныйПлатежСсылка.СуммаДокумента = ДокументОбъект.СуммаДокумента Тогда
					Документы.ПоступлениеБезналичныхДенежныхСредств.ПривестиВСоответствиеЗеркальныйПлатеж(ЗеркальныйПлатежСсылка, ДокументОбъект);
				КонецЕсли;
			Иначе
				ЗеркальныйПлатежСсылка = Документы.ПоступлениеБезналичныхДенежныхСредств.НайтиЗеркальныйПлатеж(ДокументОбъект.Ссылка);
				Если ЗначениеЗаполнено(ЗеркальныйПлатежСсылка) И ЗеркальныйПлатежСсылка.СуммаДокумента = ДокументОбъект.СуммаДокумента Тогда
					Документы.СписаниеБезналичныхДенежныхСредств.ПривестиВСоответствиеЗеркальныйПлатеж(ЗеркальныйПлатежСсылка, ДокументОбъект);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		ЗаписатьОбъект(ДокументОбъект, РежимЗаписи, СтрокаДокумента);
		#Вставка
		// ++ ЕсиповАВ Галфинд 09.04.24
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств") Тогда
			
			Для Каждого Строка Из ДокументОбъект.РасшифровкаПлатежа Цикл
				Если Не ТипЗнч(Строка.ОбъектРасчетов.Договор) = Тип("Неопределено") Тогда
					Строка.СтавкаНДС = Строка.ОбъектРасчетов.Договор.СтавкаНДС;
					Строка.СуммаНДС  = Строка.СуммаВзаиморасчетов * Строка.ОбъектРасчетов.Договор.СтавкаНДС.СоответствующаяРасчетнаяСтавка.Ссылка.Ставка / (100 + Строка.ОбъектРасчетов.Договор.СтавкаНДС.СоответствующаяРасчетнаяСтавка.Ссылка.Ставка);
				КонецЕсли;
			КонецЦикла;
			
			Если Не СтрокаДокумента.ДатаПоступило = "" Тогда
				ДатаДок = СтрЗаменить(СтрокаДокумента.ДатаПоступило, ".", "");
				ДатаД  = Лев(ДатаДок, 2);
				ДатаМГ = Прав(ДатаДок, 6);
				ДатаМ  = Лев(ДатаМГ, 2);
				ДатаГ  = Прав(ДатаМГ, 4);
				ДокументОбъект.Дата = Дата(ДатаГ + ДатаМ + ДатаД);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств") Тогда
			
			Для Каждого Строка Из ДокументОбъект.РасшифровкаПлатежа Цикл
				Строка.СуммаВзаиморасчетов = Строка.Сумма;
				Строка.ВалютаВзаиморасчетов = ДокументОбъект.Валюта;
			КонецЦикла;
			
			Если Не СтрокаДокумента.ДатаСписано = "" Тогда
				ДатаДок = СтрЗаменить(СтрокаДокумента.ДатаСписано, ".", "");
				ДатаД  = Лев(ДатаДок, 2);
				ДатаМГ = Прав(ДатаДок, 6);
				ДатаМ  = Лев(ДатаМГ, 2);
				ДатаГ  = Прав(ДатаМГ, 4);
				ДокументОбъект.Дата = Дата(ДатаГ + ДатаМ + ДатаД);
			КонецЕсли;
			
		КонецЕсли;
		ДокументОбъект.Записать();
		// -- ЕсиповАВ Галфинд 09.04.24
		#КонецВставки

		СтрокаДокумента.Документ = ДокументОбъект.Ссылка;
	КонецЦикла;

КонецПроцедуры
