
#Область ОписаниеПеременных

&НаКлиенте
Перем ОткрытыеОкна; // коллекция открытых окон

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	
	ПараметрыРегистрации = ОбъектОбработки.СведенияОВнешнейОбработке();
	Заголовок = СтрШаблон("%1 (%2)", ПараметрыРегистрации.Наименование, ПараметрыРегистрации.Версия);
	АвтоЗаголовок = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.СколькоПроверятьОднотипныхОбъектов) Тогда
		Объект.СколькоПроверятьОднотипныхОбъектов = 1;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СколькоПроверятьОднотипныхДокументов) Тогда
		Объект.СколькоПроверятьОднотипныхДокументов = 1;
	КонецЕсли;
	
	ЗаполнитьРежимыПроверок();
	
	НастроитьЭлементыФормыПоРежимамПроверки();
	
	ЗаполнитьПредставлениеНастроекПроверки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьПроверки(Команда)
	
	РезультатыПроверок = ПодготовитьРезультаты();
	
	СобратьПроверки(РезультатыПроверок);
	
	СсылкиНаОбъекты.Очистить();
	ЗаполнитьСсылкиНаОбъекты(РезультатыПроверок);
	
	ВсеРежимы = ВсеРежимыПроверок();
	
	Для Каждого ЭлементСписка Из РежимыПроверок Цикл
		
		Если Не ЭлементСписка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементСписка.Значение = ВсеРежимы.Документы  Тогда
			ПроверитьДокументы(РезультатыПроверок);
		КонецЕсли;
		
		Если ЭлементСписка.Значение = ВсеРежимы.Справочники  Тогда
			ПроверитьСправочники(РезультатыПроверок);
		КонецЕсли;
		
		Если ЭлементСписка.Значение = ВсеРежимы.Отчеты  Тогда
			ПроверитьОтчеты(РезультатыПроверок);
		КонецЕсли;
		
		Если ЭлементСписка.Значение = ВсеРежимы.Печать  Тогда
			ПроверитьПечатныеФормы(РезультатыПроверок);
		КонецЕсли;
		
		Если ЭлементСписка.Значение = ВсеРежимы.Формы  Тогда
			ПроверитьФормы(РезультатыПроверок);
		КонецЕсли; 
		
	КонецЦикла;
	
	ДатаОкончания = ТекущаяДата();
	РезультатыПроверок.Вставить("ДатаОкончания", ДатаОкончания);  
	
	ЗаполнитьНайденныеОшибки(РезультатыПроверок);
	
	Элементы.ОбщиеСтраницы.ТекущаяСтраница = Элементы.СтраницаРезультата;
	Результаты_РазвернутьВсеГруппы(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура Проверки_Заполнить(Команда)
	
	Формы_Заполнить(Неопределено);
	Отчеты_Заполнить(Неопределено);
	Печать_Заполнить(Неопределено);
	Документы_Заполнить(Неопределено);
	Справочники_Заполнить(Неопределено);
	
	ПерезаполненыОбъекты = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВыбранныеОбъекты(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПерезаполненыОбъекты", ПерезаполненыОбъекты);
	
	ОбъектыМетаданных = ВыбранныеОбъектыМетаданных();
	ПараметрыФормы.Вставить("ОбъектыМетаданных", ОбъектыМетаданных);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("НастроитьВыбранныеОбъектыЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ВнешняяОбработка.ТестерВышелПодымить.Форма.ВыборОбъектов", ПараметрыФормы, ЭтотОбъект,,,,
		ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПроверки(Команда)
	
	ПараметрыФормы = Новый Структура("Объект", Объект);
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПриИзмененииНастроекПроверки", ЭтотОбъект);
	
	ОткрытьФорму("ВнешняяОбработка.ТестерВышелПодымить.Форма.НастройкиПроверки", ПараметрыФормы, ЭтотОбъект,,,,
		ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

#Область ОбработчикиКомандФормы_Формы

&НаКлиенте
Процедура Формы_Заполнить(Команда)
	
	ЗаполнитьФормыОбъектов();
	
КонецПроцедуры

&НаКлиенте
Процедура Формы_УстановитьФлажки(Команда)
	
	УстановитьСнятьПометку(Элементы.ФормыОбъектов, ФормыОбъектов, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Формы_СнятьФлажки(Команда)
	
	УстановитьСнятьПометку(Элементы.ФормыОбъектов, ФормыОбъектов, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Формы_РазвернутьВсеГруппы(Команда)
	
	Для Каждого СтрокаДерева Из ФормыОбъектов.ПолучитьЭлементы() Цикл
		Элементы.ФормыОбъектов.Развернуть(СтрокаДерева.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Формы_СвернутьВсеГруппы(Команда)
	
	СвернутьВеткиДерева(Элементы.ФормыОбъектов, ФормыОбъектов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_Печать

&НаКлиенте
Процедура Печать_Заполнить(Команда)
	
	ЗаполнитьПечатныеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура Печать_ПроставитьВсеФлажки(Команда)
	
	УстановитьСнятьПометку(Элементы.ПечатныеФормы, ПечатныеФормы, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать_СнятьВсеФлажки(Команда)
	
	УстановитьСнятьПометку(Элементы.ПечатныеФормы, ПечатныеФормы, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать_РазвернутьВсеГруппы(Команда)
	
	Для Каждого СтрокаДерева Из ПечатныеФормы.ПолучитьЭлементы() Цикл
		Элементы.ПечатныеФормы.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Печать_СвернутьВсеГруппы(Команда)
	
	СвернутьВеткиДерева(Элементы.ПечатныеФормы, ПечатныеФормы); 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_Отчеты

&НаКлиенте
Процедура Отчеты_Заполнить(Команда)
	
	ЗаполнитьВариантыОтчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура Отчеты_ПроставитьВсеФлажки(Команда)
	
	УстановитьСнятьПометку(Элементы.ВариантыОтчетов, ВариантыОтчетов, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Отчеты_СнятьВсеФлажки(Команда)
	
	УстановитьСнятьПометку(Элементы.ВариантыОтчетов, ВариантыОтчетов, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Отчеты_РазвернутьВсеГруппы(Команда)
	
	Для Каждого СтрокаДерева Из ВариантыОтчетов.ПолучитьЭлементы() Цикл
		Элементы.ВариантыОтчетов.Развернуть(СтрокаДерева.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Отчеты_СвернутьВсеГруппы(Команда)
	
	СвернутьВеткиДерева(Элементы.ВариантыОтчетов, ВариантыОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_Документы

&НаКлиенте
Процедура Документы_Заполнить(Команда)
	
	ЗаполнитьДокументыКонфигурации();
	
КонецПроцедуры

&НаКлиенте
Процедура Документы_УстановитьФлажки(Команда)
	
	УстановитьСнятьПометку(Элементы.ДокументыКонфигурации, ДокументыКонфигурации, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Документы_СнятьФлажки(Команда)
	
	УстановитьСнятьПометку(Элементы.ДокументыКонфигурации, ДокументыКонфигурации, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Документы_РазвернутьВсеГруппы(Команда)
	
	Для Каждого СтрокаДерева Из ДокументыКонфигурации.ПолучитьЭлементы() Цикл
		Элементы.ДокументыКонфигурации.Развернуть(СтрокаДерева.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Документы_СвернутьВсеГруппы(Команда)
	
	СвернутьВеткиДерева(Элементы.ДокументыКонфигурации, ДокументыКонфигурации);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_Справочники

&НаКлиенте
Процедура Справочники_Заполнить(Команда)
	
	ЗаполнитьСправочникиКонфигурации();
	
КонецПроцедуры

&НаКлиенте
Процедура Справочники_УстановитьФлажки(Команда)
	
	УстановитьСнятьПометку(Элементы.СправочникиКонфигурации, СправочникиКонфигурации, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Справочники_СнятьФлажки(Команда)
	
	УстановитьСнятьПометку(Элементы.СправочникиКонфигурации, СправочникиКонфигурации, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Справочники_РазвернутьВсеГруппы(Команда)
	
	Для Каждого СтрокаДерева Из СправочникиКонфигурации.ПолучитьЭлементы() Цикл
		Элементы.СправочникиКонфигурации.Развернуть(СтрокаДерева.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Справочники_СвернутьВсеГруппы(Команда)
	
	СвернутьВеткиДерева(Элементы.СправочникиКонфигурации, СправочникиКонфигурации);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_НайденныеОшибки

&НаКлиенте
Процедура Результаты_Очистить(Команда)
	
	ПодготовитьРезультаты();
	
КонецПроцедуры

&НаКлиенте
Процедура Результаты_РазвернутьВсеГруппы(Команда)
	
	Для Каждого СтрокаДерева Из НайденныеОшибки.ПолучитьЭлементы() Цикл
		Элементы.НайденныеОшибки.Развернуть(СтрокаДерева.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Результаты_СвернутьВсеГруппы(Команда)
	
	СвернутьВеткиДерева(Элементы.НайденныеОшибки, НайденныеОшибки);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Протокол_СохранитьВФайл(Команда)
	
	АдресХранилища = ПоместитьВоВременноеХранилище(ТекстПротокола, УникальныйИдентификатор);
	
	ДатаФайла = ?(ЗначениеЗаполнено(ДатаОкончания), ДатаОкончания, ТекущаяДата());
	
	ИмяСохраняемогоФайла = "Протокол тестирования " + Формат(ДатаФайла, "ДФ='yyyy-MM-dd HH-mm-ss'") + ".дым";
	
	НачатьПолучениеФайлаССервера(АдресХранилища, ИмяСохраняемогоФайла);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРежимыПроверокв

&НаКлиенте
Процедура РежимыПроверокПометкаПриИзменении(Элемент)
	
	НастроитьЭлементыФормыПоРежимамПроверки(); 
	
КонецПроцедуры

&НаКлиенте
Процедура Режимы_СнятьФлажки(Команда)
	
	Для Каждого ЭлементСписка Из РежимыПроверок Цикл
		ЭлементСписка.Пометка = Ложь;	
	КонецЦикла;
	
	НастроитьЭлементыФормыПоРежимамПроверки();
	
КонецПроцедуры

&НаКлиенте
Процедура Режимы_УстановитьФлажки(Команда)
	
	Для Каждого ЭлементСписка Из РежимыПроверок Цикл
		ЭлементСписка.Пометка = Истина;	
	КонецЦикла;
	
	НастроитьЭлементыФормыПоРежимамПроверки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФормыОбъектов

&НаКлиенте
Процедура ФормыОбъектовТестироватьПриИзменении(Элемент)
	
	ПриИзмененииПометкиВСтрокеДерева(Элементы.ФормыОбъектов.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВариантыОтчетов

&НаКлиенте
Процедура ВариантыОтчетовТестироватьПриИзменении(Элемент)
	
	ПриИзмененииПометкиВСтрокеДерева(Элементы.ВариантыОтчетов.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПечатныеФормы

&НаКлиенте
Процедура ПечатныеФормыТестироватьПриИзменении(Элемент)
		
	ПриИзмененииПометкиВСтрокеДерева(Элементы.ПечатныеФормы.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыКонфигурации

&НаКлиенте
Процедура ДокументыКонфигурацииТестироватьПриИзменении(Элемент)
	
	ПриИзмененииПометкиВСтрокеДерева(Элементы.ДокументыКонфигурации.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСправочники

&НаКлиенте
Процедура СправочникиКонфигурацииТестироватьПриИзменении(Элемент)
	
	ПриИзмененииПометкиВСтрокеДерева(Элементы.СправочникиКонфигурации.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНайденныеОшибки

&НаКлиенте
Процедура НайденныеОшибкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаОшибок = Элементы.НайденныеОшибки.ТекущиеДанные;
	Если СтрокаОшибок = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтрокаРодителя = СтрокаОшибок.ПолучитьРодителя();
	Если СтрокаРодителя <> Неопределено Тогда
		РежимПроверки = СтрокаРодителя.РежимПроверки;
	Иначе
		РежимПроверки = СтрокаОшибок.РежимПроверки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаОшибок.Данные) Или РежимПроверки = ВсеРежимыПроверок().Формы Тогда
	
		СтандартнаяОбработка = Ложь;
		
		Если РежимПроверки = ВсеРежимыПроверок().Формы И ЗначениеЗаполнено(СтрокаОшибок.ПолноеИмяОбъекта)  Тогда
				
			ПараметрыФормы = Новый Структура;
			Если ЗначениеЗаполнено(СтрокаОшибок.Данные) Тогда
				ПараметрыФормы.Вставить("Ключ", СтрокаОшибок.Данные);
			КонецЕсли;
			
			ОткрытьФорму(СтрокаОшибок.ПолноеИмяОбъекта, ПараметрыФормы);
			
		Иначе
			
			ПоказатьЗначение(, СтрокаОшибок.Данные);
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РежимыПроверок

&НаКлиентеНаСервереБезКонтекста
Функция ВсеРежимыПроверок()
	
	Режимы = Новый Структура;
	Режимы.Вставить("Формы", 		"Формы");
	Режимы.Вставить("Отчеты", 		"Отчеты");
	Режимы.Вставить("Печать",		"Печать");
	Режимы.Вставить("Документы",	"Документы");
	Режимы.Вставить("Справочники",	"Справочники");
	
	Возврат Режимы;
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция КартинкаРежимаПроверки(РежимПроверки)
	
	ВсеРежимы = ВсеРежимыПроверок();
	
	СоответствиеКартинок = Новый Соответствие;
	СоответствиеКартинок.Вставить(ВсеРежимы.Формы,  	  БиблиотекаКартинок.Форма);
	СоответствиеКартинок.Вставить(ВсеРежимы.Документы,    БиблиотекаКартинок.Документ);
	СоответствиеКартинок.Вставить(ВсеРежимы.Справочники,  БиблиотекаКартинок.Справочник);
	СоответствиеКартинок.Вставить(ВсеРежимы.Отчеты,  	  БиблиотекаКартинок.Отчеты);
	СоответствиеКартинок.Вставить(ВсеРежимы.Печать,  	  БиблиотекаКартинок.Печать);
	
	Возврат СоответствиеКартинок.Получить(РежимПроверки);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВесРежимаПроверки(РежимПроверки)
	
	ВсеРежимы = ВсеРежимыПроверок();
	
	СоответствиеВесов = Новый Соответствие;
	СоответствиеВесов.Вставить(ВсеРежимы.Формы,  	  1);
	СоответствиеВесов.Вставить(ВсеРежимы.Документы,   4);
	СоответствиеВесов.Вставить(ВсеРежимы.Справочники, 2);
	СоответствиеВесов.Вставить(ВсеРежимы.Отчеты,  	  6);
	СоответствиеВесов.Вставить(ВсеРежимы.Печать,  	  2);
	
	Возврат СоответствиеВесов.Получить(РежимПроверки);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьРежимыПроверок()
	
	ВсеРежимы = ВсеРежимыПроверок();
	
	КоличествоЗначений = РежимыПроверок.Количество();
	Для СчетчикЗначений = 1 По КоличествоЗначений Цикл
		
		ЭлементСписка = РежимыПроверок[КоличествоЗначений - СчетчикЗначений];
		
		Если Не ВсеРежимы.Свойство(ЭлементСписка.Значение) Тогда
			РежимыПроверок.Удалить(ЭлементСписка);	
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьРежимПроверки(ВсеРежимы.Документы);
	ДобавитьРежимПроверки(ВсеРежимы.Справочники);
	ДобавитьРежимПроверки(ВсеРежимы.Отчеты);
	ДобавитьРежимПроверки(ВсеРежимы.Печать);
	ДобавитьРежимПроверки(ВсеРежимы.Формы);
	
	Элементы.РежимыПроверок.Высота = РежимыПроверок.Количество() + 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРежимПроверки(РежимПроверки)
	
	ЭлементСписка = РежимыПроверок.НайтиПоЗначению(РежимПроверки);
	Если ЭлементСписка = Неопределено Тогда
		Картинка = КартинкаРежимаПроверки(РежимПроверки);
		РежимыПроверок.Добавить(РежимПроверки, РежимПроверки, Ложь, Картинка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВыбранРежимПроверки(РежимПроверки)
	
	Тестировать = Ложь;
	
	ЭлементСписка = РежимыПроверок.НайтиПоЗначению(РежимПроверки);
	Если ЭлементСписка <> Неопределено Тогда
		Тестировать = ЭлементСписка.Пометка;
	КонецЕсли;
	
	Возврат Тестировать;
	
КонецФункции

&НаКлиенте
Процедура НастроитьЭлементыФормыПоРежимамПроверки()
	
	ВсеРежимы = ВсеРежимыПроверок();
	
	Элементы.Страница_Документы.Доступность   = ВыбранРежимПроверки(ВсеРежимы.Документы);
	Элементы.Страница_Справочники.Доступность = ВыбранРежимПроверки(ВсеРежимы.Справочники);
	Элементы.Страница_Отчеты.Доступность      = ВыбранРежимПроверки(ВсеРежимы.Отчеты);
	Элементы.Страница_Печать.Доступность      = ВыбранРежимПроверки(ВсеРежимы.Печать);
	Элементы.Страница_Формы.Доступность       = ВыбранРежимПроверки(ВсеРежимы.Формы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНастроекПроверки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, Результат.Объект);
	
	ЗаполнитьПредставлениеНастроекПроверки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПредставлениеНастроекПроверки() 
	
	ИсходнаяСтрокаСЧислоами = ";(по %1 однотипному);(по %1 однотипных);(по %1 однотипных);;";
	
	КоличествоДокументов = ?(Объект.СколькоПроверятьОднотипныхДокументов = 0, 1, Объект.СколькоПроверятьОднотипныхДокументов); 
	ПредставлениеКоличества = СтрокаСЧислом(ИсходнаяСтрокаСЧислоами, КоличествоДокументов, ВидЧисловогоЗначения.Количественное, "L=ru"); 
		
	ПредставлениеНастроекДокументов = "Перепроведение / перезапись, создание и копирование документов " + ПредставлениеКоличества + ".";  
	
	КоличествоОбъектов = ?(Объект.СколькоПроверятьОднотипныхОбъектов = 0, 1, Объект.СколькоПроверятьОднотипныхОбъектов);
	ПредставлениеКоличества = СтрокаСЧислом(ИсходнаяСтрокаСЧислоами, КоличествоОбъектов, ВидЧисловогоЗначения.Количественное, "L=ru"); 
	
	ПредставлениеНастроекСправочников = "Перезапись, создание и копирование объектов " + ПредставлениеКоличества + ".";
	
	ПредставлениеНастроекФорм = "Открытие форм объектов.";
	
	Если Объект.ПроверятьТолькоОсновныеФормыОбъектов Тогда
		ПредставлениеНастроекФорм = ПредставлениеНастроекФорм + " Проверка только основных форм объектов.";
	КонецЕсли;
	
	Если Объект.ОткрыватьФормыМодально Тогда
		ПредставлениеНастроекФорм = ПредставлениеНастроекФорм + " Модальное открытие форм.";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеМетаданными

&НаСервереБезКонтекста
Функция ДеревоМетаданныхКонфигурации(Отбор = Неопределено, ПолучатьСамОбъектМетаданных = Ложь) Экспорт 
	
	ИспользоватьОтбор = (Отбор <> Неопределено); 
	
	ДобавитьБизнесПроцессы = Ложь;
	ДобавитьЗадачи = Ложь;
	
	КоллекцииОбъектовМетаданных = Новый ТаблицаЗначений;
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Имя");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Синоним");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("ЕстьСсылки");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Картинка");
	
	ДобавитьСтрокуВКоллекциюОбъектовМетаданных("Справочники",  "Справочники", Истина,
		БиблиотекаКартинок.Справочник, КоллекцииОбъектовМетаданных);
	
	ДобавитьСтрокуВКоллекциюОбъектовМетаданных("Документы", "Документы", Истина,
		БиблиотекаКартинок.Документ, КоллекцииОбъектовМетаданных);
		
	ДобавитьСтрокуВКоллекциюОбъектовМетаданных("ПланыВидовХарактеристик", "Планы видов характеристик", Истина,
		БиблиотекаКартинок.ПланВидовХарактеристик, КоллекцииОбъектовМетаданных);
	
	ДобавитьСтрокуВКоллекциюОбъектовМетаданных("ПланыВидовРасчета", "Планы видов расчета", Истина,
		БиблиотекаКартинок.ПланВидовРасчета, КоллекцииОбъектовМетаданных);
		
	ДобавитьСтрокуВКоллекциюОбъектовМетаданных("Обработки", "Обработки", Ложь,
		БиблиотекаКартинок.Обработка, КоллекцииОбъектовМетаданных);
		
	Если ДобавитьБизнесПроцессы Тогда
		ДобавитьСтрокуВКоллекциюОбъектовМетаданных("БизнесПроцессы", "Бизнес-процессы", Истина,
			БиблиотекаКартинок.БизнесПроцесс, КоллекцииОбъектовМетаданных);
	КонецЕсли;
		
	Если ДобавитьЗадачи Тогда
		ДобавитьСтрокуВКоллекциюОбъектовМетаданных("Задачи", "Задачи", Истина,
			БиблиотекаКартинок.Задача, КоллекцииОбъектовМетаданных);
	КонецЕсли;
	
	ДеревоМетаданных = Новый ДеревоЗначений;
	ДеревоМетаданных.Колонки.Добавить("Имя");
	ДеревоМетаданных.Колонки.Добавить("ПолноеИмя");
	ДеревоМетаданных.Колонки.Добавить("Синоним");
	ДеревоМетаданных.Колонки.Добавить("ЕстьСсылки");
	ДеревоМетаданных.Колонки.Добавить("Картинка");
	
	Если ПолучатьСамОбъектМетаданных Тогда
		ДеревоМетаданных.Колонки.Добавить("ОбъектМетаданных");
	КонецЕсли;
	
	Для Каждого СтрокаКоллекции Из КоллекцииОбъектовМетаданных Цикл
		
		Если ИспользоватьОтбор И СтрНайти(Отбор, СтрокаКоллекции.Имя) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДереваКласс = ДеревоМетаданных.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДереваКласс, СтрокаКоллекции);
		Для Каждого ОбъектМетаданных Из Метаданные[СтрокаКоллекции.Имя] Цикл
			
			СтрокаДереваОбъект = СтрокаДереваКласс.Строки.Добавить();
			СтрокаДереваОбъект.Имя       = ОбъектМетаданных.Имя;
			СтрокаДереваОбъект.ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
			СтрокаДереваОбъект.Синоним   = ОбъектМетаданных.Синоним;
			СтрокаДереваОбъект.Картинка  = СтрокаКоллекции.Картинка;
			
			Если ПолучатьСамОбъектМетаданных Тогда
				СтрокаДереваОбъект.ОбъектМетаданных = ОбъектМетаданных;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДеревоМетаданных;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьСтрокуВКоллекциюОбъектовМетаданных(Имя, Синоним, ЕстьСсылки, Картинка, Коллекция)
	
	НоваяСтрока = Коллекция.Добавить();
	НоваяСтрока.Имя             = Имя;
	НоваяСтрока.Синоним         = "";
	НоваяСтрока.ЕстьСсылки      = ЕстьСсылки; 
	НоваяСтрока.Картинка        = Картинка;
	
КонецПроцедуры

#Область ЗаполнениеМетаданными_Формы

&НаСервере
Процедура ЗаполнитьФормыОбъектов()
	
	НовоеДерево = ДеревоМетаданныхКонфигурации(, Истина);
	
	ДополнитьДеревоФормами(НовоеДерево);
	
	ФормыОбъектов.ПолучитьЭлементы().Очистить();
	
	ЗаполнитьКоллекциюЭлементовДереваДанныхФормы(ФормыОбъектов.ПолучитьЭлементы(), НовоеДерево);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДополнитьДеревоФормами(Дерево)
	
	Дерево.Колонки.Добавить("ЭтоФорма", Новый ОписаниеТипов("Булево"));
	Дерево.Колонки.Добавить("Тестировать", Новый ОписаниеТипов("Булево"));
	Дерево.Колонки.Добавить("ИмяОсновнойФормы", Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("ЕстьГруппы", Новый ОписаниеТипов("Булево"));
	
	ЭлементыНаУдаление = Новый Массив;
	
	Для Каждого СтрокаКласса Из Дерево.Строки Цикл
				
		Для Каждого СтрокаОбъекта Из СтрокаКласса.Строки Цикл
			
			МетаОбъект = СтрокаОбъекта.ОбъектМетаданных;
			
			Попытка
				ФормыМетаОбъекта = МетаОбъект.Формы;
			Исключение                              
				ЭлементыНаУдаление.Добавить(СтрокаОбъекта);
				Продолжить;
			КонецПопытки;
			
			Если ФормыМетаОбъекта.Количество() = 0 Тогда
				ЭлементыНаУдаление.Добавить(СтрокаОбъекта);
			КонецЕсли;
			
			СтрокаОбъекта.ЕстьГруппы = ЕстьГруппыУОбъектаМетаданных(МетаОбъект.ПолноеИмя(), МетаОбъект);
			
			ДобавитьСтрокуФормы(СтрокаКласса, СтрокаОбъекта, МетаОбъект, ФормыМетаОбъекта);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого СтрокаКласса Из Дерево.Строки Цикл
		
		Для Каждого СтрокаУдалить Из ЭлементыНаУдаление Цикл
			
			Попытка
				СтрокаКласса.Строки.Удалить(СтрокаУдалить);
			Исключение
				Продолжить;
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ДополнитьДеревоОбщимиФормами(Дерево);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьСтрокуФормы(СтрокаКласса, СтрокаОбъекта, МетаОбъект, ФормыМетаОбъекта)
	
	Для каждого ТекФорма Из ФормыМетаОбъекта Цикл
		
		Если СтрНачинаетсяС(НРег(ТекФорма.Имя), "удалить") Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаФормы = СтрокаОбъекта.Строки.Добавить();
		СтрокаФормы.Имя         = ТекФорма.Имя;
		СтрокаФормы.ПолноеИмя   = ТекФорма.ПолноеИмя();
		СтрокаФормы.Картинка    = БиблиотекаКартинок.Форма;
		СтрокаФормы.ЭтоФорма    = Истина;
		СтрокаФормы.ЕстьГруппы  = СтрокаОбъекта.ЕстьГруппы;
		СтрокаФормы.Тестировать = Ложь;
		СтрокаФормы.ИмяОсновнойФормы = ОпределитьОсновнуюФорму(ТекФорма, МетаОбъект, СтрокаКласса);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьОсновнуюФорму(ТекФорма, МетаОбъект, ТекКласс)
	
	ИмяФормы = "";
	
	КлассыСФормамиКакУДокумента = Новый Массив;
	КлассыСФормамиКакУДокумента.Добавить("Документы");
	КлассыСФормамиКакУДокумента.Добавить("Задачи");
	КлассыСФормамиКакУДокумента.Добавить("БизнесПроцессы");
	КлассыСФормамиКакУДокумента.Добавить("ПланыСчетов");
	КлассыСФормамиКакУДокумента.Добавить("ПланыВидовРасчета");
	
	КлассыТолькоСФормойСписка = Новый Массив;
	КлассыТолькоСФормойСписка.Добавить("РегистрыНакопления");
	КлассыТолькоСФормойСписка.Добавить("РегистрыБухгалтерии");
	КлассыТолькоСФормойСписка.Добавить("РегистрыРасчета");
	
	ИмяКласса = ТекКласс.Имя;
	Если ИмяКласса = "Справочники" Или ИмяКласса = "ПланыВидовХарактеристик" Тогда
		
		ИмяФормы = ОпределитьОсновнуюФормуСправочника(ТекФорма, МетаОбъект);
		
	ИначеЕсли КлассыСФормамиКакУДокумента.Найти(ИмяКласса) <> Неопределено Тогда
		
		ИмяФормы = ОпределитьОсновнуюФормуДокумента(ТекФорма, МетаОбъект);
		
	ИначеЕсли ИмяКласса = "РегистрыСведений" Тогда

		Если МетаОбъект.ОсновнаяФормаЗаписи = ТекФорма Тогда
			ИмяФормы = "ОсновнаяФормаЗаписи";
		ИначеЕсли МетаОбъект.ОсновнаяФормаСписка = ТекФорма Тогда
			ИмяФормы = "ОсновнаяФормаСписка";
		Иначе
			ИмяФормы = "";
		КонецЕсли;
	
	ИначеЕсли КлассыТолькоСФормойСписка.Найти(ИмяКласса) <> Неопределено Тогда
		
		Если МетаОбъект.ОсновнаяФормаСписка = ТекФорма Тогда
			ИмяФормы = "ОсновнаяФормаСписка";
		КонецЕсли;
		
	ИначеЕсли ИмяКласса = "Обработки" Тогда
		
		Если МетаОбъект.ОсновнаяФорма = ТекФорма Тогда
			ИмяФормы = "ОсновнаяФорма";
		КонецЕсли;
		
	Иначе
		ИмяФормы = "";
	КонецЕсли;
	
	Возврат ИмяФормы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОпределитьОсновнуюФормуСправочника(ТекФорма, МетаОбъект)
	
	ИмяФормы = "";
		
	Если МетаОбъект.ОсновнаяФормаОбъекта = ТекФорма Тогда
		ИмяФормы = "ОсновнаяФормаОбъекта";
	ИначеЕсли МетаОбъект.ОсновнаяФормаСписка = ТекФорма Тогда
		ИмяФормы =  "ОсновнаяФормаСписка";
	ИначеЕсли МетаОбъект.ОсновнаяФормаГруппы = ТекФорма Тогда
		ИмяФормы = "ОсновнаяФормаГруппы";
	ИначеЕсли МетаОбъект.ОсновнаяФормаДляВыбора = ТекФорма Тогда
		ИмяФормы = "ОсновнаяФормаДляВыбора";
	ИначеЕсли МетаОбъект.ОсновнаяФормаДляВыбораГруппы = ТекФорма Тогда
		ИмяФормы = "ОсновнаяФормаДляВыбораГруппы";
	Иначе
		ИмяФормы = "";
	КонецЕсли;
	
	Возврат ИмяФормы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОпределитьОсновнуюФормуДокумента(ТекФорма, МетаОбъект)
	
	ИмяФормы = "";
		
	Если МетаОбъект.ОсновнаяФормаОбъекта = ТекФорма Тогда
		ИмяФормы = "ОсновнаяФормаОбъекта";
	ИначеЕсли МетаОбъект.ОсновнаяФормаСписка = ТекФорма Тогда
		ИмяФормы = "ОсновнаяФормаСписка";
	ИначеЕсли МетаОбъект.ОсновнаяФормаДляВыбора = ТекФорма Тогда
		ИмяФормы = "ОсновнаяФормаДляВыбора";
	Иначе
		ИмяФормы = "";
	КонецЕсли;
	
	Возврат ИмяФормы;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДополнитьДеревоОбщимиФормами(Дерево)
	
	КоллекцияОбщихФорм = Метаданные.ОбщиеФормы;
	Если КоллекцияОбщихФорм.Количество() = 0 Тогда
	     Возврат;
	КонецЕсли;
	
	ГруппаДерева = Дерево.Строки.Вставить(0);
	ГруппаДерева.Картинка = БиблиотекаКартинок.Форма;
	ГруппаДерева.Имя = "ОбщиеФормы";
	
	Для Каждого ТекФорма Из КоллекцияОбщихФорм Цикл
		
		Если СтрНачинаетсяС(НРег(ТекФорма.Имя), "удалить") Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаФормы = ГруппаДерева.Строки.Добавить();
		СтрокаФормы.Имя         = ТекФорма.Имя;
		СтрокаФормы.ПолноеИмя   = ТекФорма.ПолноеИмя();
		СтрокаФормы.Картинка    = БиблиотекаКартинок.Форма;
		СтрокаФормы.ЭтоФорма    = Истина;
		СтрокаФормы.ЕстьГруппы  = Ложь;
		СтрокаФормы.Тестировать = Ложь;
		СтрокаФормы.ИмяОсновнойФормы = СтрокаФормы.Имя;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеМетаданными_Отчеты

&НаСервере
Процедура ЗаполнитьВариантыОтчетов()
	
	Попытка
		
		ЗаполнитьДеревоОтчетов();
		
	Исключение
		
		ИнформацияОбИсключении = ИнформацияОбИсключении();
		
		ОбщегоНазначения.СообщитьПользователю(ИнформацияОбИсключении.КраткаяОшибка);
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоОтчетов()
	
	ДоступныеОтчеты = ВариантыОтчетовПовтИсп.ДоступныеОтчеты();
	НедоступныеВарианты = ВариантыОтчетовПовтИсп.ОтключенныеВариантыПрограммы();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВариантыОтчетов.Отчет КАК Отчет,
	|	ВариантыОтчетов.Настройки,
	|	ВариантыОтчетов.ХешНастроек,
	|	ВариантыОтчетов.Ссылка КАК ВариантОтчета,
	|	ВариантыОтчетов.КлючВарианта,
	|	ВариантыОтчетов.Отчет.Имя КАК ИмяОтчета,
	|	ВариантыОтчетов.Отчет.ПолноеИмя КАК ПолноеИмя,
	|	ВариантыОтчетов.Отчет.Синоним КАК НаименованиеОтчета
	|ПОМЕСТИТЬ ВременнаяТаблицаОтчетов
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.ПометкаУдаления = ЛОЖЬ
	|	И НЕ ВариантыОтчетов.Ссылка В (&НедоступныеВарианты)
	|	И ВариантыОтчетов.Отчет В(&ДоступныеОтчеты)
	|	И (ВЫРАЗИТЬ(ВариантыОтчетов.ПредопределенныйВариант КАК Справочник.ПредопределенныеВариантыОтчетов).Включен = ИСТИНА
	|			ИЛИ ВариантыОтчетов.ПредопределенныйВариант = ЗНАЧЕНИЕ(Справочник.ПредопределенныеВариантыОтчетов.ПустаяСсылка)
	|			<%ДопУсловие>)
	|	И ВариантыОтчетов.КлючВарианта <> """"
	|ОБЪЕДИНИТЬ ВСЕ
	|		ВЫБРАТЬ
	|	ВариантыОтчетов.Отчет,
	|	ВариантыОтчетов.Настройки,
	|	ВариантыОтчетов.ХешНастроек,
	|	ВариантыОтчетов.Ссылка,
	|	ВариантыОтчетов.КлючВарианта,
	|	ВариантыОтчетов.Отчет.ИмяОбъекта,
	|   ""ВнешнийОтчет"",
	|	ВариантыОтчетов.Отчет.Наименование
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	НЕ ВариантыОтчетов.ПометкаУдаления
	|	И ВариантыОтчетов.КлючВарианта <> """"
	|	И ВариантыОтчетов.Отчет ССЫЛКА Справочник.ДополнительныеОтчетыИОбработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаОтчетов.Отчет КАК Отчет,
	|	ВременнаяТаблицаОтчетов.ВариантОтчета КАК ВариантОтчета,
	|	ВременнаяТаблицаОтчетов.ХешНастроек КАК ХешНастроек,
	|	ВременнаяТаблицаОтчетов.НаименованиеОтчета КАК НаименованиеОтчета,
	|	ВременнаяТаблицаОтчетов.ВариантОтчета.Наименование КАК НаименованиеВарианта,
	|	ВременнаяТаблицаОтчетов.Настройки,
	|	ВременнаяТаблицаОтчетов.КлючВарианта,
	|	ВременнаяТаблицаОтчетов.ИмяОтчета,
	|	ВременнаяТаблицаОтчетов.ПолноеИмя
	|ИЗ
	|	ВременнаяТаблицаОтчетов КАК ВременнаяТаблицаОтчетов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВременнаяТаблицаОтчетов.Отчет.Наименование,
	|	ВременнаяТаблицаОтчетов.ВариантОтчета.Наименование";
	
	ЕстьПредопределенныеВарианты = Метаданные.Справочники.Найти("ПредопределенныеВариантыОтчетовРасширений") <> Неопределено;
	
	Если ЕстьПредопределенныеВарианты Тогда
		ДопУсловие =
		"ИЛИ ВЫРАЗИТЬ(ВариантыОтчетов.ПредопределенныйВариант КАК Справочник.ПредопределенныеВариантыОтчетовРасширений).Включен = ИСТИНА 
		|ИЛИ ВариантыОтчетов.ПредопределенныйВариант = ЗНАЧЕНИЕ(Справочник.ПредопределенныеВариантыОтчетовРасширений.ПустаяСсылка)";
	Иначе
		ДопУсловие = "";
	КонецЕсли;
	
	КартинкаОтчет = БиблиотекаКартинок.Отчет;
	КартинкаСправочник = БиблиотекаКартинок.Справочник;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "<%ДопУсловие>", ДопУсловие);
	
	Запрос.УстановитьПараметр("ДоступныеОтчеты", ДоступныеОтчеты);
	Запрос.УстановитьПараметр("НедоступныеВарианты", НедоступныеВарианты);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КорневыеУзлы = ВариантыОтчетов.ПолучитьЭлементы();
	КорневыеУзлы.Очистить();
	
	ТекущийОтчет				= Неопределено;
	ЭлементыКорневогоУзла		= Неопределено;
	Пока Выборка.Следующий() Цикл
		
		Если ТекущийОтчет <> Выборка.Отчет Тогда
			
			ТекущийОтчет = Выборка.Отчет;
			СтрокаГруппы = КорневыеУзлы.Добавить();
			
			СтрокаГруппы.ИмяОтчета     = Выборка.ИмяОтчета;
			СтрокаГруппы.Представление = Выборка.НаименованиеОтчета;
			СтрокаГруппы.ОтчетВариант  = Выборка.Отчет;
			СтрокаГруппы.ЭтоГруппа = Истина;
			
			Если Выборка.ПолноеИмя = "ВнешнийОтчет" Тогда
				СтрокаГруппы.Картинка = КартинкаСправочник;
			Иначе
				СтрокаГруппы.Картинка = КартинкаОтчет;
			КонецЕсли;
			
			ЭлементыКорневогоУзла = СтрокаГруппы.ПолучитьЭлементы();
			
		КонецЕсли;
		
		СтрокаВарианта = ЭлементыКорневогоУзла.Добавить();
		СтрокаВарианта.ОтчетВариант  = Выборка.ВариантОтчета;
		СтрокаВарианта.ОтчетВладелец = Выборка.Отчет;
		СтрокаВарианта.Представление = Выборка.НаименованиеВарианта;
		СтрокаВарианта.ИмяОтчета     = Выборка.КлючВарианта;
		
		ЗаполнитьЗначенияСвойств(СтрокаВарианта, Выборка, "ХешНастроек, Настройки, КлючВарианта");
		
		Если Выборка.ПолноеИмя = "ВнешнийОтчет" Тогда
			СтрокаВарианта.ПолноеИмя = Выборка.ПолноеИмя + "." + Выборка.ИмяОтчета;	
		Иначе
			СтрокаВарианта.ПолноеИмя = Выборка.ПолноеИмя;	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеМетаданными_Печать

&НаСервере
Процедура ЗаполнитьПечатныеФормы()
	
	Попытка
		
		ЗаполнитьДеревоПечатныхФорм();
		
	Исключение
		
		ИнформацияОбИсключении = ИнформацияОбИсключении();
		
		ОбщегоНазначения.СообщитьПользователю(ИнформацияОбИсключении.КраткаяОшибка);
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПечатныхФорм()
	
	СписокДляСортировки = Новый СписокЗначений;
	СписокДляСортировки.ЗагрузитьЗначения(УправлениеПечатью.ИсточникиКомандПечати());
	СписокДляСортировки.СортироватьПоЗначению();
	ИсточникиКомандПечати = СписокДляСортировки.ВыгрузитьЗначения();
	
	УзлыТиповМетаданных = ПечатныеФормы.ПолучитьЭлементы();
	УзлыТиповМетаданных.Очистить();
	
	СтрокаСправочники = УзлыТиповМетаданных.Добавить();
	СтрокаСправочники.Тестировать = Ложь;
	СтрокаСправочники.ЭтоГруппа = Истина;
	СтрокаСправочники.Представление = "Справочники";
	СтрокаСправочники.Картинка = БиблиотекаКартинок.Справочник; 
	
	СтрокаДокументы = УзлыТиповМетаданных.Добавить();
	СтрокаДокументы.Тестировать = Ложь;
	СтрокаДокументы.ЭтоГруппа = Истина;
	СтрокаДокументы.Представление = "Документы";
	СтрокаДокументы.Картинка = БиблиотекаКартинок.Документ;
	
	Для Каждого Источник Из ИсточникиКомандПечати Цикл
		
		Если НРег(Лев(Источник.Имя, 7)) = "удалить" Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			КомандыПечати = УправлениеПечатью.КомандыПечатиОбъекта(Источник);
		Исключение
			Продолжить;
		КонецПопытки;
		
		КоличествоКомандБезОбработчиков = 0;
		Для Каждого КомандаПечати Из КомандыПечати Цикл
			Если Не ЗначениеЗаполнено(КомандаПечати.Обработчик) Тогда
				КоличествоКомандБезОбработчиков = КоличествоКомандБезОбработчиков + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоКомандБезОбработчиков = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьСтрокуПечатнойФормы(Источник, СтрокаСправочники, СтрокаДокументы, КомандыПечати);
		
	КонецЦикла;
	
	Если СтрокаСправочники.ПолучитьЭлементы().Количество() = 0 Тогда
		УзлыТиповМетаданных.Удалить(СтрокаСправочники);	
	КонецЕсли;
	
	Если СтрокаДокументы.ПолучитьЭлементы().Количество() = 0 Тогда
		УзлыТиповМетаданных.Удалить(СтрокаДокументы);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьСтрокуПечатнойФормы(Источник, СтрокаСправочники, СтрокаДокументы, КомандыПечати)
	
	ПолноеИмя = Источник.ПолноеИмя();
	
	Если СтрНачинаетсяС(ПолноеИмя, "Справочник") Тогда
		
		СтрокаОбъектаМетаданных = СтрокаСправочники.ПолучитьЭлементы().Добавить();
		СтрокаОбъектаМетаданных.Картинка = СтрокаСправочники.Картинка;
		
	ИначеЕсли СтрНачинаетсяС(ПолноеИмя, "Документ") Тогда
		
		СтрокаОбъектаМетаданных = СтрокаДокументы.ПолучитьЭлементы().Добавить();
		СтрокаОбъектаМетаданных.Картинка = СтрокаДокументы.Картинка; 
		
	Иначе
		Возврат;
	КонецЕсли;
	
	СтрокаОбъектаМетаданных.Тестировать = Ложь;
	СтрокаОбъектаМетаданных.ЭтоГруппа = Истина; 
	СтрокаОбъектаМетаданных.Имя           = Источник.Имя;
	СтрокаОбъектаМетаданных.Представление = Источник.Синоним;
	СтрокаОбъектаМетаданных.ПолноеИмя     = ПолноеИмя;
	
	ЭлементыОбъекта = СтрокаОбъектаМетаданных.ПолучитьЭлементы();
	Для Каждого КомандаПечати Из КомандыПечати Цикл
		
		Если ЗначениеЗаполнено(КомандаПечати.Обработчик) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаКоманды							= ЭлементыОбъекта.Добавить();
		СтрокаКоманды.Тестировать				= Ложь;
		СтрокаКоманды.ЭтоГруппа					= Ложь;
		СтрокаКоманды.Представление				= КомандаПечати.Представление;
		СтрокаКоманды.Имя                       = КомандаПечати.Идентификатор;
		СтрокаКоманды.МенеджерПечати			= КомандаПечати.МенеджерПечати;
		СтрокаКоманды.Идентификатор				= КомандаПечати.Идентификатор;
		СтрокаКоманды.ДополнительныеПараметры	= КомандаПечати.ДополнительныеПараметры;
		СтрокаКоманды.ПолноеИмя                 = СтрокаОбъектаМетаданных.ПолноеИмя + "." + КомандаПечати.Идентификатор;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеМетаданными_Документы

&НаСервере
Процедура ЗаполнитьДокументыКонфигурации()
	
	НовоеДерево = ДеревоМетаданныхКонфигурации("Документы");

	ДокументыКонфигурации.ПолучитьЭлементы().Очистить();
	
	ЗаполнитьКоллекциюЭлементовДереваДанныхФормы(ДокументыКонфигурации.ПолучитьЭлементы(), НовоеДерево);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеМетаданными_Справочники

&НаСервере
Процедура ЗаполнитьСправочникиКонфигурации()
	
	НовоеДерево = ДеревоМетаданныхКонфигурации("Справочники,ПланыВидовХарактеристик,ПланыВидовРасчета");

	СправочникиКонфигурации.ПолучитьЭлементы().Очистить();
	
	ЗаполнитьКоллекциюЭлементовДереваДанныхФормы(СправочникиКонфигурации.ПолучитьЭлементы(), НовоеДерево);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ВыборОбъектов

&НаКлиенте
Функция ВыбранныеОбъектыМетаданных()
	
	ОбъектыМетаданных = Новый Массив;
	
	СобратьОбъектыМетаданных(СправочникиКонфигурации, ОбъектыМетаданных);
	СобратьОбъектыМетаданных(ДокументыКонфигурации,   ОбъектыМетаданных);
	СобратьОбъектыМетаданных(ФормыОбъектов,           ОбъектыМетаданных); 
	СобратьОбъектыМетаданных(ВариантыОтчетов,         ОбъектыМетаданных); 
	СобратьОбъектыМетаданных(ПечатныеФормы,           ОбъектыМетаданных);
	
	Возврат ОбъектыМетаданных;	
	
КонецФункции

&НаКлиенте
Процедура СобратьОбъектыМетаданных(ВеткаДерва, ОбъектыМетаданных)
	
	Для Каждого СтрокаДерева Из ВеткаДерва.ПолучитьЭлементы() Цикл
		
		МожноТестировать = ЗначениеЗаполнено(СтрокаДерева.ПолноеИмя)
			И СтрЧислоВхождений(СтрокаДерева.ПолноеИмя, ".") = 1
			И ОбъектыМетаданных.Найти(СтрокаДерева.ПолноеИмя) = Неопределено;
		
		Если СтрокаДерева.Тестировать И МожноТестировать Тогда
			
			ОбъектыМетаданных.Добавить(СтрокаДерева.ПолноеИмя); 
			
		КонецЕсли;
		
		СобратьОбъектыМетаданных(СтрокаДерева, ОбъектыМетаданных);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВыбранныеОбъектыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Свойство("ПерезаполнитьОбъектыМетаданных") И Результат.ПерезаполнитьОбъектыМетаданных Тогда
		
		Проверки_Заполнить(Неопределено);
		
	Иначе
		
		ПроставитьПометкуВПодчиненныхСтроках(СправочникиКонфигурации, Ложь);
		ПроставитьПометкуВПодчиненныхСтроках(ДокументыКонфигурации,   Ложь);
		ПроставитьПометкуВПодчиненныхСтроках(ФормыОбъектов,           Ложь); 
		ПроставитьПометкуВПодчиненныхСтроках(ВариантыОтчетов,         Ложь); 
		ПроставитьПометкуВПодчиненныхСтроках(ПечатныеФормы,           Ложь); 
		
	КонецЕсли;
	
	Если Результат.Свойство("ОбъектыМетаданных") Тогда
		
		ОбъектыМетаданных = СтрРазделить(Результат.ОбъектыМетаданных, Символы.ПС, Ложь);
		
		ВыбратьОбъектыМетаданных(СправочникиКонфигурации, ОбъектыМетаданных);
		ВыбратьОбъектыМетаданных(ДокументыКонфигурации,   ОбъектыМетаданных);
		ВыбратьОбъектыМетаданных(ФормыОбъектов,           ОбъектыМетаданных); 
		ВыбратьОбъектыМетаданных(ВариантыОтчетов,         ОбъектыМетаданных); 
		ВыбратьОбъектыМетаданных(ПечатныеФормы,           ОбъектыМетаданных); 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОбъектыМетаданных(ВеткаДерва, ОбъектыМетаданных)
	
	Для Каждого СтрокаДерева Из ВеткаДерва.ПолучитьЭлементы() Цикл
		
		МожноТестировать = ЗначениеЗаполнено(СтрокаДерева.ПолноеИмя)
			И СтрЧислоВхождений(СтрокаДерева.ПолноеИмя, ".") = 1
			И ОбъектыМетаданных.Найти(СтрокаДерева.ПолноеИмя) <> Неопределено; 
		
		Если Не СтрокаДерева.Тестировать И МожноТестировать Тогда
			
			СтрокаДерева.Тестировать = 1;
			
			ПриИзмененииПометкиВСтрокеДерева(СтрокаДерева);
			
		КонецЕсли;
		
		ВыбратьОбъектыМетаданных(СтрокаДерева, ОбъектыМетаданных);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Тестирование

&НаКлиенте
Процедура СобратьПроверки(РезультатыПроверок)
	
	ВсеРежимы = ВсеРежимыПроверок();
	
	РезультатыПроверок.Вставить("ОбщийВесПроверок", 0);
	РезультатыПроверок.Вставить("ТекущийВесПроверок", 0);
	
	РезультатыПроверок.Вставить("СсылочныеОбъекты", Новый Массив);
	
	КоличествоДокументов = ?(Объект.СколькоПроверятьОднотипныхДокументов = 0, 1, Объект.СколькоПроверятьОднотипныхДокументов); 
	КоличествоОбъектов   = ?(Объект.СколькоПроверятьОднотипныхОбъектов   = 0, 1, Объект.СколькоПроверятьОднотипныхОбъектов);
	
	Для Каждого ЭлементСписка Из РежимыПроверок Цикл
		
		Если Не ЭлементСписка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементСписка.Значение = ВсеРежимы.Формы  Тогда
			
			ВесПроверки = ВесРежимаПроверки(ВсеРежимы.Формы);
			СобратьПроверкиИзДерева(ФормыОбъектов.ПолучитьЭлементы(), ВесПроверки, 1, РезультатыПроверок);
			
		КонецЕсли; 
		
		Если ЭлементСписка.Значение = ВсеРежимы.Документы Тогда
			
			ВесПроверки = ВесРежимаПроверки(ВсеРежимы.Документы);
			ВесПроверки = ВесПроверки * КоличествоДокументов;	
			
			СобратьПроверкиИзДерева(ДокументыКонфигурации.ПолучитьЭлементы(), ВесПроверки, 2, РезультатыПроверок); 
			
		КонецЕсли;
		
		Если ЭлементСписка.Значение = ВсеРежимы.Справочники Тогда 
			
			ВесПроверки = ВесРежимаПроверки(ВсеРежимы.Справочники);
			ВесПроверки = ВесПроверки * КоличествоОбъектов;	
			
			СобратьПроверкиИзДерева(СправочникиКонфигурации.ПолучитьЭлементы(), ВесПроверки, 2, РезультатыПроверок);
			
		КонецЕсли;
		
		Если ЭлементСписка.Значение = ВсеРежимы.Отчеты Тогда
			
			ВесПроверки = ВесРежимаПроверки(ВсеРежимы.Отчеты);
			СобратьПроверкиИзДерева(ВариантыОтчетов.ПолучитьЭлементы(), ВесПроверки, 0, РезультатыПроверок); 
			
		КонецЕсли;
		
		Если ЭлементСписка.Значение = ВсеРежимы.Печать Тогда
			
			ВесПроверки = ВесРежимаПроверки(ВсеРежимы.Печать);
			СобратьПроверкиИзДерева(ПечатныеФормы.ПолучитьЭлементы(), ВесПроверки, 2, РезультатыПроверок); 
			
		КонецЕсли;
	
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(РезультатыПроверок.ОбщийВесПроверок) Тогда
		РезультатыПроверок.ОбщийВесПроверок = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СобратьПроверкиИзДерева(ЭлементыДерева, ВесПроверки, МогутБытьСсылки, РезультатыПроверок)
	
	Для Каждого СтрокаДерева Из ЭлементыДерева Цикл
		
		ДочерниеЭлементы =  СтрокаДерева.ПолучитьЭлементы();
		
		Если ДочерниеЭлементы.Количество() > 0 Тогда
			
			СобратьПроверкиИзДерева(ДочерниеЭлементы, ВесПроверки, МогутБытьСсылки, РезультатыПроверок); 
			
		Иначе
			
			Если СтрокаДерева.Тестировать Тогда 
				
				РезультатыПроверок.ОбщийВесПроверок = РезультатыПроверок.ОбщийВесПроверок + ВесПроверки;
				
				ДобавитьСсылочныйОбъектДляПроверки(МогутБытьСсылки, СтрокаДерева, РезультатыПроверок);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСсылочныйОбъектДляПроверки(МогутБытьСсылки, СтрокаДерева, РезультатыПроверок)
	
	ОднозначноЕстьСсылки = 2;
	НужноУточнитьНаличиеСсылок = 1;
	
	Если МогутБытьСсылки = ОднозначноЕстьСсылки Тогда
		ЕстьСсылки = Истина;
	ИначеЕсли МогутБытьСсылки = НужноУточнитьНаличиеСсылок Тогда 
		ЕстьСсылки = СтрокаДерева.ЕстьСсылки;
	Иначе
		ЕстьСсылки = Ложь;	
	КонецЕсли;
	
	Если ЕстьСсылки И ЗначениеЗаполнено(СтрокаДерева.ПолноеИмя) Тогда
		
		ПолноеИмяОбъекта = СтрокаДерева.ПолноеИмя;
		
		Если СтрЧислоВхождений(ПолноеИмяОбъекта, ".") > 1 Тогда
			
			КускиИмени = СтрРазделить(ПолноеИмяОбъекта, ".");
			ПолноеИмяОбъекта = КускиИмени[0] + "." + КускиИмени[1]; 
			
		КонецЕсли; 
		
		Если РезультатыПроверок.СсылочныеОбъекты.Найти(ПолноеИмяОбъекта) = Неопределено Тогда
			РезультатыПроверок.СсылочныеОбъекты.Добавить(ПолноеИмяОбъекта);
		КонецЕсли;
		
	КонецЕсли;
					
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСсылкиНаОбъекты(РезультатыПроверок)
	
	Если Не ЗначениеЗаполнено(РезультатыПроверок.СсылочныеОбъекты) Тогда
		Возврат;	
	КонецЕсли;
	
	КусокОбъединить = "
	|ОБЪЕДИНИТЬ ВСЕ
	|";	
	
	КускиЗапроса = Новый Массив;
	СчетчикОбъектов = 0;
	Для Каждого ПолноеИмяОбъекта Из РезультатыПроверок.СсылочныеОбъекты Цикл
		
		СчетчикОбъектов = СчетчикОбъектов + 1;
		
		Если СчетчикОбъектов > 1 Тогда
			КускиЗапроса.Добавить(КусокОбъединить);	
		КонецЕсли;
		
		Если СтрНачинаетсяС(ПолноеИмяОбъекта, "Документ.") 
			Или СтрНачинаетсяС(ПолноеИмяОбъекта, "БизнесПроцессы.") Или СтрНачинаетсяС(ПолноеИмяОбъекта, "Задачи.") Тогда
			
			КусокЗапроса = ТекстЗапросаСсылокДокумента(ПолноеИмяОбъекта, Объект.СколькоПроверятьОднотипныхДокументов);
			
		Иначе
			
			КусокЗапроса = ТекстЗапросаСсылокСправочника(ПолноеИмяОбъекта, Объект.СколькоПроверятьОднотипныхОбъектов);
			
		КонецЕсли;
		
		Если СчетчикОбъектов > 1 Тогда
			КусокЗапроса = СтрЗаменить(КусокЗапроса, "РАЗРЕШЕННЫЕ ", "");
		КонецЕсли;
		
		КускиЗапроса.Добавить(КусокЗапроса);	
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(КускиЗапроса, Символы.ПС);
	
	ДатаЗапрета = ПоследняяДатаЗапрета();
	Если Не ЗначениеЗаполнено(ДатаЗапрета) Тогда
		ДатаЗапрета = '20121212';	
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаЗапрета", ДатаЗапрета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = СсылкиНаОбъекты.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстЗапросаСсылокДокумента(ПолноеИмя, КоличествоСсылок)
	
	Если РазрешеноПроведениеУОбъектаМетаданных(ПолноеИмя) Тогда
		
		Возврат ТекстЗапросаСсылокДокументаСПроведением(ПолноеИмя, КоличествоСсылок);
		
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	""&ПолноеИмя"" КАК ПолноеИмя,
	|	Таблица.Ссылка КАК Ссылка,
	|	ЛОЖЬ КАК ЭтоГруппа,
	|	ЛОЖЬ КАК Проведен
	|ИЗ
	|	&ПолноеИмя КАК Таблица
	|ГДЕ
	|	НЕ Таблица.ПометкаУдаления
	| 	И Таблица.Дата > &ДатаЗапрета";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмя", ПолноеИмя);

	Если КоличествоСсылок > 1 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 1", "ПЕРВЫЕ " + КоличествоСсылок);
	КонецЕсли;
	
	Возврат ТекстЗапроса; 
	
КонецФункции

&НаСервереБезКонтекста
Функция РазрешеноПроведениеУОбъектаМетаданных(ПолноеИмя)
	
	Если СтрНачинаетсяС(ПолноеИмя, "Документ.") Тогда
		
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
		
		РазрешеноПроведение = (МетаданныеОбъекта.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить); 	
		
	Иначе
		
		РазрешеноПроведение = Ложь;
		
	КонецЕсли;
	
	Возврат РазрешеноПроведение;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПоследняяДатаЗапрета()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ДатыЗапретаИзменения.ДатаЗапрета) КАК ДатаЗапрета
		|ИЗ
		|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения";
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ДатаЗапрета = ?(ЗначениеЗаполнено(Выборка.ДатаЗапрета), КонецДня(Выборка.ДатаЗапрета), Дата(1, 1, 1));
	
	Возврат ДатаЗапрета;
		
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаСсылокДокументаСПроведением(ПолноеИмя, КоличествоСсылок)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	""&ПолноеИмя"" КАК ПолноеИмя,
	|	Таблица.Ссылка КАК Ссылка,
	|	ЛОЖЬ КАК ЭтоГруппа,
	|	Таблица.Проведен КАК Проведен
	|ИЗ
	|	&ПолноеИмя КАК Таблица
	|ГДЕ
	|	НЕ Таблица.ПометкаУдаления
	| 	И Таблица.Дата > &ДатаЗапрета
	|	И Таблица.Проведен";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмя", ПолноеИмя);

	Если КоличествоСсылок > 1 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 1", "ПЕРВЫЕ " + КоличествоСсылок);
	КонецЕсли;
	
	Возврат ТекстЗапроса; 
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаСсылокСправочника(ПолноеИмя, КоличествоСсылок)
	
	Если ЕстьГруппыУОбъектаМетаданных(ПолноеИмя) Тогда
		
		Возврат ТекстЗапросаСсылокСправочникаСГруппами(ПолноеИмя, КоличествоСсылок);
		
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	""&ПолноеИмя"" КАК ПолноеИмя,
	|	Таблица.Ссылка КАК Ссылка,
	|	ЛОЖЬ КАК ЭтоГруппа,
	|	ЛОЖЬ КАК Проведен
	|ИЗ
	|	&ПолноеИмя КАК Таблица
	|ГДЕ
	|	НЕ Таблица.ПометкаУдаления";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмя", ПолноеИмя);

	Если КоличествоСсылок > 1 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 1", "ПЕРВЫЕ " + КоличествоСсылок);
	КонецЕсли;
	
	Возврат ТекстЗапроса; 
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьГруппыУОбъектаМетаданных(ПолноеИмя, МетаданныеОбъекта = Неопределено)
	
	Если МетаданныеОбъекта = Неопределено Тогда
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
	КонецЕсли;
	
	Если СтрНачинаетсяС(ПолноеИмя, "Справочник.") Тогда
		
		ЕстьГруппы = МетаданныеОбъекта.Иерархический
			И (МетаданныеОбъекта.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов);
		
	ИначеЕсли СтрНачинаетсяС(ПолноеИмя, "ПланВидовХарактеристик.") Тогда
		
		ЕстьГруппы = МетаданныеОбъекта.Иерархический; 
		
	Иначе
		
		ЕстьГруппы = Ложь;
		
	КонецЕсли;
	
	Возврат ЕстьГруппы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаСсылокСправочникаСГруппами(ПолноеИмя, КоличествоСсылок)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	""&ПолноеИмя"" КАК ПолноеИмя,
	|	Таблица.Ссылка КАК Ссылка,
	|	Таблица.ЭтоГруппа КАК ЭтоГруппа,
	|	ЛОЖЬ КАК Проведен
	|ИЗ
	|	&ПолноеИмя КАК Таблица
	|ГДЕ
	|	НЕ Таблица.ПометкаУдаления
	|	И НЕ Таблица.ЭтоГруппа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	""&ПолноеИмя"",
	|	Таблица.Ссылка,
	|	Таблица.ЭтоГруппа,
	|	ЛОЖЬ
	|ИЗ
	|	&ПолноеИмя КАК Таблица
	|ГДЕ
	|	НЕ Таблица.ПометкаУдаления
	|	И Таблица.ЭтоГруппа";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмя", ПолноеИмя);

	Если КоличествоСсылок > 1 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 1", "ПЕРВЫЕ " + КоличествоСсылок);
	КонецЕсли;
	
	Возврат ТекстЗапроса; 
	
КонецФункции

#Область Тестирование_Формы

&НаКлиенте
Процедура ПроверитьФормы(РезультатыПроверок)
	
	ПолучитьОткрытыеОкна();
	
	РезультатыПроверок.Вставить("ТекущийРежимПроверки", ВсеРежимыПроверок().Формы);
	КартинкаРежима = КартинкаРежимаПроверки(РезультатыПроверок.ТекущийРежимПроверки);
	ВесПроверки = ВесРежимаПроверки(РезультатыПроверок.ТекущийРежимПроверки);
	
	Для Каждого СтрокаКласса Из ФормыОбъектов.ПолучитьЭлементы() Цикл
		
		Для Каждого СтрокаОбъекта Из СтрокаКласса.ПолучитьЭлементы() Цикл
			
			Если СтрокаКласса.Имя = "ОбщиеФормы" Тогда
				
				СтатусыТестовФормы = ПроверитьФорму(СтрокаКласса.ЕстьСсылки, "", СтрокаОбъекта, ВесПроверки, КартинкаРежима, РезультатыПроверок);
				СтрокаОбъекта.СтатусТеста = ИтоговыйСтатусПоОбъекту(СтатусыТестовФормы);
				
				Продолжить;
				
			КонецЕсли;
			
			СтатусыТестовОбъекта = Новый Массив;
				
			Для Каждого СтрокаФормы Из СтрокаОбъекта.ПолучитьЭлементы() Цикл
				
				СтатусыТестовФормы = ПроверитьФорму(СтрокаКласса.ЕстьСсылки, СтрокаОбъекта.ПолноеИмя, СтрокаФормы, ВесПроверки, КартинкаРежима, РезультатыПроверок);
				СтрокаФормы.СтатусТеста = ИтоговыйСтатусПоОбъекту(СтатусыТестовФормы);
				
				Для Каждого СтатусТестаФормы Из СтатусыТестовФормы Цикл
					СтатусыТестовОбъекта.Добавить(СтатусТестаФормы);
				КонецЦикла;
				
			КонецЦикла;
			
			СтрокаОбъекта.СтатусТеста = ИтоговыйСтатусПоОбъекту(СтатусыТестовОбъекта);
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьФорму(ЕстьСсылкиВКлассе, ПолноеИмяОбъекта, СтрокаФормы, ВесПроверки, КартинкаРежима, РезультатыПроверок)
	
	СтатусыТестовФормы = Новый Массив;
	
	Если Не СтрокаФормы.Тестировать Или ПропуститьФорму(СтрокаФормы) Тогда
		СтрокаФормы.СтатусТеста = "";
		Возврат СтатусыТестовФормы;
	КонецЕсли;
	
	МаксимальныйПрогресс = 100;
		
	ПараметрыФормы = Новый Структура; 
	
	ФормаДляТестирования = Новый Структура; 
	ФормаДляТестирования.Вставить("ИмяФормы", СтрокаФормы.ПолноеИмя);
	ФормаДляТестирования.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Если ЗначениеЗаполнено(ПолноеИмяОбъекта) Тогда
		
		СсылкиОбъекта = ВыбратьСсылкиДляФормы(ЕстьСсылкиВКлассе, ПолноеИмяОбъекта, СтрокаФормы);
		
		Для Каждого ТекущаяСсылка Из СсылкиОбъекта Цикл
			СтатусТеста = ПопытатьсяОткрытьФорму(ФормаДляТестирования, ТекущаяСсылка, РезультатыПроверок);
			СтатусыТестовФормы.Добавить(СтатусТеста);
		КонецЦикла;
		
	КонецЕсли;
	
	СтатусТеста = ПопытатьсяОткрытьФорму(ФормаДляТестирования, Неопределено, РезультатыПроверок);
	СтатусыТестовФормы.Добавить(СтатусТеста);
	
	РезультатыПроверок.ТекущийВесПроверок = РезультатыПроверок.ТекущийВесПроверок + ВесПроверки;
	
	ПрогрессПроверок = МаксимальныйПрогресс * РезультатыПроверок.ТекущийВесПроверок / РезультатыПроверок.ОбщийВесПроверок;
	Состояние(РезультатыПроверок.ТекущийРежимПроверки, ПрогрессПроверок, СтрокаФормы.ПолноеИмя, КартинкаРежима);
	
	Возврат СтатусыТестовФормы;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьОткрытыеОкна()
	
	ОткрытыеОкна = Новый Массив;
	Окна = ПолучитьОкна();
	Для Счетчик = 0 По Окна.Количество() - 1 Цикл
		Если Окна[Счетчик] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОткрытыеОкна.Добавить(Окна[Счетчик]);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПропуститьФорму(СтрокаФормы)
	
	Пропустить = Ложь;
	
	МассивИсключений = Новый Массив();
	Если МассивИсключений.Найти(СтрокаФормы.ПолноеИмя) <> Неопределено Тогда
		Пропустить = Истина;
	КонецЕсли;
	
	Если Объект.ПроверятьТолькоОсновныеФормыОбъектов И Не ЗначениеЗаполнено(СтрокаФормы.ИмяОсновнойФормы) Тогда
		Пропустить = Истина;
	КонецЕсли;
	
	Возврат Пропустить;
	
КонецФункции

&НаКлиенте
Функция ПроверитьЗаполнениеФормы(РезультатыПроверок, Форма, Ключ) 
	
	Если Форма = Неопределено Или Не ЗначениеЗаполнено(Ключ) Тогда
		Возврат "";
	КонецЕсли;
	
	ИмяФормыТестирования = Форма.ИмяФормы;
	
	РезультатыПроверок.Вставить("СутьПроверки", "Проверка заполнения в форме");
	
	Попытка
		
		ФормаЗаполнена = Форма.ПроверитьЗаполнение();
		
		Если ФормаЗаполнена Тогда
			
			СтатусТеста = РезультатыПроверок.СтатусыТестов.Пройден;
			ДобавитьРезультатПроверки(СтатусТеста, ИмяФормыТестирования, Ключ, "", РезультатыПроверок);
			
		Иначе
			
			ОписаниеРезультата = "Объект не проходит проверку заполнения в форме";
			СтатусТеста = РезультатыПроверок.СтатусыТестов.Ошибка;
			ДобавитьРезультатПроверки(СтатусТеста, ИмяФормыТестирования, Ключ, ОписаниеРезультата, РезультатыПроверок);
				
		КонецЕсли;
		
	Исключение
		
		ИнформацияОбИсключении = ИнформацияОбИсключении(ИнформацияОбОшибке());
		
		ОписаниеРезультата = ИнформацияОбИсключении.ПодробнаяОшибка;
		СтатусТеста = РезультатыПроверок.СтатусыТестов.Ошибка;
		ДобавитьРезультатПроверки(СтатусТеста, ИмяФормыТестирования, Ключ, ОписаниеРезультата, РезультатыПроверок);
		
	КонецПопытки;
	
	Возврат СтатусТеста;
	
КонецФункции

&НаКлиенте
Функция ВыбратьСсылкиДляФормы(ЕстьСсылкиВКлассе, ПолноеИмяОбъекта, СтрокаФормы)
	
	СсылкиОбъекта = Новый Массив;
	
	Если ЕстьСсылкиВКлассе = Истина
		И (СтрокаФормы.ИмяОсновнойФормы = "ОсновнаяФормаОбъекта" Или СтрокаФормы.ИмяОсновнойФормы = "ОсновнаяФормаГруппы") Тогда
		
		УсловияПоискаСсылок = Новый Структура;
		УсловияПоискаСсылок.Вставить("ПолноеИмя", ПолноеИмяОбъекта);
		
		Если СтрокаФормы.ИмяОсновнойФормы = "ОсновнаяФормаГруппы" Тогда	
			УсловияПоискаСсылок.Вставить("ЭтоГруппа", Истина);
		Иначе
			УсловияПоискаСсылок.Вставить("ЭтоГруппа", Ложь);
		КонецЕсли;
		
		НайденныеСтроки = СсылкиНаОбъекты.НайтиСтроки(УсловияПоискаСсылок);
		Для Каждого СтрокаНайденных Из НайденныеСтроки Цикл
			СсылкиОбъекта.Добавить(СтрокаНайденных.Ссылка); 	
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СсылкиОбъекта;
	
КонецФункции

&НаКлиенте
Функция ПопытатьсяОткрытьФорму(ФормаДляТестирования, Ключ, РезультатыПроверок)
	
	Форма = Неопределено;
	ИмяФормыТестирования = ФормаДляТестирования.ИмяФормы;
	
	БылоИсключение = Ложь;
	
	Если ЗначениеЗаполнено(Ключ) Тогда
		СутьПроверки = "Открытие формы ссылки";
	Иначе
		СутьПроверки = "Открытие пустой формы";
	КонецЕсли;
	РезультатыПроверок.Вставить("СутьПроверки", СутьПроверки);
	
	Попытка
		
		ПараметрыФормы = Новый Структура;
		Для Каждого ЭлементПараметров Из ФормаДляТестирования.ПараметрыФормы Цикл
			ПараметрыФормы.Вставить(ЭлементПараметров.Ключ, ЭлементПараметров.Значение);	
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Ключ) Тогда
			ПараметрыФормы.Вставить("Ключ", Ключ);
		КонецЕсли; 
			
		Если Объект.ОткрыватьФормыМодально Тогда
			Форма = ПолучитьФорму(ИмяФормыТестирования, ПараметрыФормы); 
			Форма.ОткрытьМодально(1);
		Иначе
			Форма = ОткрытьФорму(ИмяФормыТестирования, ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.Независимый);
		КонецЕсли;
		
		СтатусТеста = РезультатыПроверок.СтатусыТестов.Пройден;
		ДобавитьРезультатПроверки(СтатусТеста, ИмяФормыТестирования, Ключ, "", РезультатыПроверок);
		
	Исключение
		
		ИнформацияОбИсключении = ИнформацияОбИсключении(ИнформацияОбОшибке());
		
		ОписаниеРезультата = ИнформацияОбИсключении.ПодробнаяОшибка; 
		
		СтатусТеста = РезультатыПроверок.СтатусыТестов.Ошибка;
		ДобавитьРезультатПроверки(СтатусТеста, ИмяФормыТестирования, Ключ, ОписаниеРезультата, РезультатыПроверок);
		
		БылоИсключение = Истина;
		
	КонецПопытки;
		
	Если Не БылоИсключение И (Форма = Неопределено Или Форма.Окно = Неопределено) Тогда
		
		ОписаниеРезультата = "Форма не открылась. Возможно в обработчиках ПриСоздании или ПриОткрытии устанавливается отказ";
		
		СтатусТеста = РезультатыПроверок.СтатусыТестов.Ошибка;
		ДобавитьРезультатПроверки(СтатусТеста, ИмяФормыТестирования, Ключ, ОписаниеРезультата, РезультатыПроверок);
		
	КонецЕсли;
	
	СтатусПроверкиЗаполнения = ПроверитьЗаполнениеФормы(РезультатыПроверок, Форма, Ключ);
		
	Если Не Объект.ОткрыватьФормыМодально И Форма <> Неопределено Тогда 
		Попытка
			ЗакрытьОткрывшиесяОкна(Форма);
			Форма.Модифицированность = Ложь;
			Форма.Закрыть();
		Исключение
			Форма = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Если СтатусПроверкиЗаполнения = РезультатыПроверок.СтатусыТестов.Ошибка Тогда
		Возврат СтатусПроверкиЗаполнения;
	Иначе
		Возврат СтатусТеста;
	КонецЕсли;	
				
КонецФункции

&НаКлиенте
Процедура ЗакрытьОткрывшиесяОкна(ФормаТестируемогоОбъекта = Неопределено)
	
	ТекущееОкно = ЭтаФорма.Окно;
	
	ОкнаНаЗакрытие = Новый Массив;
	
	Окна = ПолучитьОкна();
	Для Икс = 0 По Окна.Количество() - 1 Цикл
		
		Если Окна[Икс] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Окошко = Окна[Икс];
		
		Если ОткрытыеОкна.Найти(Окошко) <> Неопределено ИЛИ ТекущееОкно = Окошко Тогда
			Продолжить;
		КонецЕсли;
		
		ОкнаНаЗакрытие.Добавить(Окошко);
		
	КонецЦикла;
	
	Для Каждого Окошко Из ОкнаНаЗакрытие Цикл
		Для Каждого Форма Из Окошко.Содержимое Цикл
			
			Если Форма = ФормаТестируемогоОбъекта Тогда
				Продолжить;
			КонецЕсли;
			
			Если Форма.Открыта() Тогда
				Форма.Закрыть();
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Тестирование_Документы

&НаКлиенте
Процедура ПроверитьДокументы(РезультатыПроверок)
	
	РезультатыПроверок.Вставить("ТекущийРежимПроверки", ВсеРежимыПроверок().Документы);
	КартинкаРежима = КартинкаРежимаПроверки(РезультатыПроверок.ТекущийРежимПроверки);
	ВесПроверки = ВесРежимаПроверки(РезультатыПроверок.ТекущийРежимПроверки);
	МаксимальныйПрогресс = 100;
	
	Для Каждого СтрокаКласса Из ДокументыКонфигурации.ПолучитьЭлементы() Цикл
		
		Для Каждого СтрокаОбъекта Из СтрокаКласса.ПолучитьЭлементы() Цикл
			
			Если Не СтрокаОбъекта.Тестировать Тогда
				СтрокаОбъекта.СтатусТеста = "";
				Продолжить;	
			КонецЕсли;
			
			УсловияПоискаСсылок = Новый Структура;
			УсловияПоискаСсылок.Вставить("ПолноеИмя", СтрокаОбъекта.ПолноеИмя);
			
			НайденныеСтроки = СсылкиНаОбъекты.НайтиСтроки(УсловияПоискаСсылок);
			Если НайденныеСтроки.Количество() = 0 Тогда
				
				РезультатыПроверок.Вставить("СутьПроверки", "Поиск документов");
				ОписаниеРезультата = "Не найдены документы (возможно из-за даты запрета).";
				
				СтатусПропущен = РезультатыПроверок.СтатусыТестов.Пропущен;
				ДобавитьРезультатПроверки(СтатусПропущен, СтрокаОбъекта.ПолноеИмя, Неопределено, ОписаниеРезультата, РезультатыПроверок);
				
				СтрокаОбъекта.СтатусТеста = СтатусПропущен;	
				
			Иначе
				
				СтатусыТестовОбъекта = Новый Массив;
				
				Для Каждого СтрокаНайденных Из НайденныеСтроки Цикл 
					
					СтатусТеста = ПерезаписатьДокумент(СтрокаОбъекта.ПолноеИмя, СтрокаНайденных.Ссылка, СтрокаНайденных.Проведен, РезультатыПроверок);
					СтатусыТестовОбъекта.Добавить(СтатусТеста);
					
					СтатусТеста = СкопироватьОбъект(СтрокаОбъекта.ПолноеИмя, СтрокаНайденных.Ссылка, РезультатыПроверок);
					СтатусыТестовОбъекта.Добавить(СтатусТеста);
					
					РезультатыПроверок.ТекущийВесПроверок = РезультатыПроверок.ТекущийВесПроверок + ВесПроверки;
					
					ПрогрессПроверок = МаксимальныйПрогресс * РезультатыПроверок.ТекущийВесПроверок / РезультатыПроверок.ОбщийВесПроверок;
					Состояние(РезультатыПроверок.ТекущийРежимПроверки, ПрогрессПроверок, СтрокаОбъекта.ПолноеИмя, КартинкаРежима);
					
				КонецЦикла; 
				
				СтатусТеста = СоздатьДокумент(СтрокаОбъекта.ПолноеИмя, СтрокаОбъекта.Имя, РезультатыПроверок);
				СтатусыТестовОбъекта.Добавить(СтатусТеста);
				
				СтрокаОбъекта.СтатусТеста = ИтоговыйСтатусПоОбъекту(СтатусыТестовОбъекта);	
				
			КонецЕсли;
				
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПерезаписатьДокумент(ПолноеИмя, ДокументСсылка, Проведен, РезультатыПроверок)
	
	СутьПроверки = ?(Проведен, "Проведение документа", "Запись документа"); 
	РезультатыПроверок.Вставить("СутьПроверки", СутьПроверки); 
	
	Попытка
		
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		
	Исключение
		
		ИнформацияОбИсключении = ИнформацияОбИсключении(ИнформацияОбОшибке());
		
		ОписаниеРезультата = "Ошибка при получении объекта документа: " + ИнформацияОбИсключении.ПодробнаяОшибка;
		
		СтатусТеста = РезультатыПроверок.СтатусыТестов.Ошибка;
		ДобавитьРезультатПроверки(СтатусТеста, ПолноеИмя, ДокументСсылка, ОписаниеРезультата, РезультатыПроверок);
		
		Возврат СтатусТеста;
		
	КонецПопытки;
	
	СтатусПроверкиЗаполнения = ПроверитьЗаполнениеОбъекта(ПолноеИмя, ДокументСсылка, ДокументОбъект, РезультатыПроверок);
	
	Если Проведен Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	Иначе
		РежимЗаписи = РежимЗаписиДокумента.Запись; 
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		ДокументОбъект.Записать(РежимЗаписи); 
		
		ОтменитьТранзакцию();
		
		СтатусТеста = РезультатыПроверок.СтатусыТестов.Пройден;
		ДобавитьРезультатПроверки(СтатусТеста, ПолноеИмя, ДокументСсылка, "", РезультатыПроверок);
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбИсключении = ИнформацияОбИсключении(ИнформацияОбОшибке());
		
		ОписаниеРезультата = ИнформацияОбИсключении.ПодробнаяОшибка;
		
		СтатусТеста = РезультатыПроверок.СтатусыТестов.Ошибка;
		ДобавитьРезультатПроверки(СтатусТеста, ПолноеИмя, ДокументСсылка, ОписаниеРезультата, РезультатыПроверок);
		
	КонецПопытки;
	
	Если СтатусПроверкиЗаполнения = РезультатыПроверок.СтатусыТестов.Ошибка Тогда
		Возврат СтатусПроверкиЗаполнения;
	Иначе
		Возврат СтатусТеста;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьЗаполнениеОбъекта(ПолноеИмя, Ссылка, Объект, РезультатыПроверок) 
	
	РезультатыПроверок.Вставить("СутьПроверки", "Проверка заполнения");
	
	Попытка
		
		ЕстьОшибкиЗаполнения = Не Объект.ПроверитьЗаполнение();
		
	Исключение
		
		ИнформацияОбИсключении = ИнформацияОбИсключении(ИнформацияОбОшибке());
		
		ОписаниеРезультата = ИнформацияОбИсключении.ПодробнаяОшибка;
		
		СтатусТеста = РезультатыПроверок.СтатусыТестов.Ошибка;
		ДобавитьРезультатПроверки(СтатусТеста, ПолноеИмя, Ссылка, ОписаниеРезультата, РезультатыПроверок);
		
		Возврат СтатусТеста; 
		
	КонецПопытки;
	
	Если ЕстьОшибкиЗаполнения Тогда
		
		СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
		
		ТекстыСообщений = Новый Массив;
		Для Каждого СтрокаСообщения Из СообщенияПользователю Цикл
			ТекстыСообщений.Добавить(СтрокаСообщения.Текст);	
		КонецЦикла;
		ОписаниеРезультата = СтрСоединить(ТекстыСообщений, Символы.ПС); 
		
		СтатусТеста = РезультатыПроверок.СтатусыТестов.Ошибка;
		ДобавитьРезультатПроверки(СтатусТеста, ПолноеИмя, Ссылка, ОписаниеРезультата, РезультатыПроверок);
		
	Иначе
		
		СтатусТеста = РезультатыПроверок.СтатусыТестов.Пройден;
		ДобавитьРезультатПроверки(СтатусТеста, ПолноеИмя, Ссылка, "", РезультатыПроверок);
		
	КонецЕсли;
	
	Возврат СтатусТеста;
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьДокумент(ПолноеИмя, Имя, РезультатыПроверок)
	
	РезультатыПроверок.Вставить("СутьПроверки", "Создание документа");
	
	Попытка
		
		ВременныйОбъект = Документы[Имя].СоздатьДокумент();
		
		СтатусТеста = РезультатыПроверок.СтатусыТестов.Пройден;
		ДобавитьРезультатПроверки(СтатусТеста, ПолноеИмя, Неопределено, "", РезультатыПроверок);
		
	Исключение
		
		ИнформацияОбИсключении = ИнформацияОбИсключении(ИнформацияОбОшибке());
		
		ОписаниеРезультата = ИнформацияОбИсключении.ПодробнаяОшибка;
		
		СтатусТеста = РезультатыПроверок.СтатусыТестов.Ошибка;
		ДобавитьРезультатПроверки(СтатусТеста, ПолноеИмя, Неопределено, ОписаниеРезультата, РезультатыПроверок);
		
	КонецПопытки;
	
	Возврат СтатусТеста;
	
КонецФункции

&НаСервереБезКонтекста
Функция СкопироватьОбъект(ПолноеИмя, Ссылка, РезультатыПроверок)
	
	РезультатыПроверок.Вставить("СутьПроверки", "Копирование объекта");
	
	Попытка
		
		ВременныйОбъект = Ссылка.Скопировать();
		
		СтатусТеста = РезультатыПроверок.СтатусыТестов.Пройден;
		ДобавитьРезультатПроверки(СтатусТеста, ПолноеИмя, Ссылка, "", РезультатыПроверок);
		
	Исключение
		
		ИнформацияОбИсключении = ИнформацияОбИсключении(ИнформацияОбОшибке());
		
		ОписаниеРезультата = ИнформацияОбИсключении.ПодробнаяОшибка;
		
		СтатусТеста = РезультатыПроверок.СтатусыТестов.Ошибка;
		ДобавитьРезультатПроверки(СтатусТеста, ПолноеИмя, Ссылка, ОписаниеРезультата, РезультатыПроверок);
		
	КонецПопытки;
	
	Возврат СтатусТеста;
	
КонецФункции

#КонецОбласти

#Область Тестирование_Справочники

&НаКлиенте
Процедура ПроверитьСправочники(РезультатыПроверок)
	
	РезультатыПроверок.Вставить("ТекущийРежимПроверки", ВсеРежимыПроверок().Справочники);
	КартинкаРежима = КартинкаРежимаПроверки(РезультатыПроверок.ТекущийРежимПроверки);
	ВесПроверки = ВесРежимаПроверки(РезультатыПроверок.ТекущийРежимПроверки);
	МаксимальныйПрогресс = 100;
	
	Для Каждого СтрокаКласса Из СправочникиКонфигурации.ПолучитьЭлементы() Цикл
		
		Для Каждого СтрокаОбъекта Из СтрокаКласса.ПолучитьЭлементы() Цикл
			
			Если Не СтрокаОбъекта.Тестировать Тогда
				СтрокаОбъекта.СтатусТеста = "";
				Продолжить;	
			КонецЕсли;
				
			УсловияПоискаСсылок = Новый Структура;
			УсловияПоискаСсылок.Вставить("ПолноеИмя", СтрокаОбъекта.ПолноеИмя);
			
			НайденныеСтроки = СсылкиНаОбъекты.НайтиСтроки(УсловияПоискаСсылок);
			Если НайденныеСтроки.Количество() = 0 Тогда
				
				РезультатыПроверок.Вставить("СутьПроверки", "Поиск элементов");
				ОписаниеРезультата = "Не найдены элементы справочника.";
				
				СтатусПропущен = РезультатыПроверок.СтатусыТестов.Пропущен;
				ДобавитьРезультатПроверки(СтатусПропущен, СтрокаОбъекта.ПолноеИмя, Неопределено, ОписаниеРезультата, РезультатыПроверок);
				СтрокаОбъекта.СтатусТеста = СтатусПропущен;
				
			Иначе
				
				СтатусыТестовОбъекта = Новый Массив;
				
				ПопалисьГруппы = Ложь;
				Для Каждого СтрокаНайденных Из НайденныеСтроки Цикл 
					
					СтатусТеста = ПерезаписатьСправочник(СтрокаОбъекта.ПолноеИмя, СтрокаНайденных.Ссылка, СтрокаНайденных.ЭтоГруппа, РезультатыПроверок);
					СтатусыТестовОбъекта.Добавить(СтатусТеста);
					
					СтатусТеста = СкопироватьОбъект(СтрокаОбъекта.ПолноеИмя, СтрокаНайденных.Ссылка, РезультатыПроверок);
					СтатусыТестовОбъекта.Добавить(СтатусТеста);
					
					Если СтрокаНайденных.ЭтоГруппа Тогда
						ПопалисьГруппы = Истина;	
					КонецЕсли;
					
					РезультатыПроверок.ТекущийВесПроверок = РезультатыПроверок.ТекущийВесПроверок + ВесПроверки;
					
					ПрогрессПроверок = МаксимальныйПрогресс * РезультатыПроверок.ТекущийВесПроверок / РезультатыПроверок.ОбщийВесПроверок;
					Состояние(РезультатыПроверок.ТекущийРежимПроверки, ПрогрессПроверок, СтрокаОбъекта.ПолноеИмя, КартинкаРежима);
					
				КонецЦикла;
				
				СтатусТеста = СоздатьЭлементСправочника(СтрокаОбъекта.ПолноеИмя, СтрокаОбъекта.Имя, Ложь, РезультатыПроверок);
				СтатусыТестовОбъекта.Добавить(СтатусТеста);
				
				Если ПопалисьГруппы Тогда
					СтатусТеста = СоздатьЭлементСправочника(СтрокаОбъекта.ПолноеИмя, СтрокаОбъекта.Имя, Истина, РезультатыПроверок);	
				КонецЕсли;
				СтатусыТестовОбъекта.Добавить(СтатусТеста);
				
				СтрокаОбъекта.СтатусТеста = ИтоговыйСтатусПоОбъекту(СтатусыТестовОбъекта);	
				
			КонецЕсли;
				
		КонецЦикла;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПерезаписатьСправочник(ПолноеИмя, СправочникСсылка, ЭтоГруппа, РезультатыПроверок)
	
	СутьПроверки = ?(ЭтоГруппа, "Запись группы", "Запись элемента"); 
	РезультатыПроверок.Вставить("СутьПроверки", СутьПроверки);
	
	Попытка
		
		СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
		
	Исключение
		
		ИнформацияОбИсключении = ИнформацияОбИсключении(ИнформацияОбОшибке());
		
		ОписаниеРезультата = "Ошибка при получении объекта: " + ИнформацияОбИсключении.ПодробнаяОшибка;
		
		СтатусТеста = РезультатыПроверок.СтатусыТестов.Ошибка;
		ДобавитьРезультатПроверки(СтатусТеста, ПолноеИмя, СправочникСсылка, ОписаниеРезультата, РезультатыПроверок);
		
		Возврат СтатусТеста;
		
	КонецПопытки;
	
	СтатусПроверкиЗаполнения = ПроверитьЗаполнениеОбъекта(ПолноеИмя, СправочникСсылка, СправочникОбъект, РезультатыПроверок);
	
	НачатьТранзакцию();
	
	Попытка
		
		СправочникОбъект.Записать(); 
		
		ОтменитьТранзакцию();
		
		СтатусТеста = РезультатыПроверок.СтатусыТестов.Пройден;
		ДобавитьРезультатПроверки(СтатусТеста, ПолноеИмя, СправочникСсылка, "", РезультатыПроверок);
		
	Исключение
		
		ОтменитьТранзакцию();
	
		ИнформацияОбИсключении = ИнформацияОбИсключении(ИнформацияОбОшибке());
		
		ОписаниеРезультата = ИнформацияОбИсключении.ПодробнаяОшибка;
		
		СтатусТеста = РезультатыПроверок.СтатусыТестов.Ошибка;
		ДобавитьРезультатПроверки(СтатусТеста, ПолноеИмя, СправочникСсылка, ОписаниеРезультата, РезультатыПроверок);
		
	КонецПопытки;
	
	Если СтатусПроверкиЗаполнения = РезультатыПроверок.СтатусыТестов.Ошибка Тогда
		Возврат СтатусПроверкиЗаполнения;
	Иначе
		Возврат СтатусТеста;
	КонецЕсли;	
		
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьЭлементСправочника(ПолноеИмя, Имя, СоздатьГруппу, РезультатыПроверок)
	
	Если СтрНачинаетсяС(ПолноеИмя, "Справочник.") Тогда 
		
		МенеджерСправочника = Справочники[Имя]; 
		
	ИначеЕсли СтрНачинаетсяС(ПолноеИмя, "ПланВидовХарактеристик.") Тогда 
		
		МенеджерСправочника = ПланыВидовХарактеристик[Имя]; 
		
	Иначе	
		Возврат "";
	КонецЕсли;
	
	СутьПроверки = ?(СоздатьГруппу, "Создание группы", "Создание элемента"); 
	РезультатыПроверок.Вставить("СутьПроверки", СутьПроверки);
	
	Попытка 
		
		Если СоздатьГруппу Тогда
			ВременныйОбъект = МенеджерСправочника.СоздатьГруппу();
		Иначе
			ВременныйОбъект = МенеджерСправочника.СоздатьЭлемент();
		КонецЕсли;
		
		СтатусТеста = РезультатыПроверок.СтатусыТестов.Пройден;
		ДобавитьРезультатПроверки(СтатусТеста, ПолноеИмя, Неопределено, "", РезультатыПроверок);
		
	Исключение
		
		ИнформацияОбИсключении = ИнформацияОбИсключении(ИнформацияОбОшибке());
		
		ОписаниеРезультата = ИнформацияОбИсключении.ПодробнаяОшибка;
		
		СтатусТеста = РезультатыПроверок.СтатусыТестов.Ошибка;
		ДобавитьРезультатПроверки(СтатусТеста, ПолноеИмя, Неопределено, ОписаниеРезультата, РезультатыПроверок);
		
	КонецПопытки;
	
	Возврат СтатусТеста;
	
КонецФункции

#КонецОбласти

#Область Тестирование_Отчеты

&НаКлиенте
Процедура ПроверитьОтчеты(РезультатыПроверок)
	
	РезультатыПроверок.Вставить("ТекущийРежимПроверки", ВсеРежимыПроверок().Отчеты);
	КартинкаРежима = КартинкаРежимаПроверки(РезультатыПроверок.ТекущийРежимПроверки);
	ВесПроверки = ВесРежимаПроверки(РезультатыПроверок.ТекущийРежимПроверки);
	МаксимальныйПрогресс = 100;
	
	ПараметрыФормированияОтчета = Новый Структура("ИмяОтчета, ХешНастроек, Настройки, КлючВарианта, ОтчетВариант, ОтчетВладелец");
	
	Для Каждого СтрокаГруппы Из ВариантыОтчетов.ПолучитьЭлементы() Цикл
		
		СтатусыТестовОбъекта = Новый Массив;
		
		Для Каждого СтрокаЭлемента Из СтрокаГруппы.ПолучитьЭлементы() Цикл
			
			Если Не СтрокаЭлемента.Тестировать Тогда
				СтрокаЭлемента.СтатусТеста = "";
				Продолжить;
			КонецЕсли;
				
			ЗаполнитьЗначенияСвойств(ПараметрыФормированияОтчета, СтрокаЭлемента);
			ПараметрыФормированияОтчета.ИмяОтчета = СтрокаГруппы.ИмяОтчета;
			
			СтатусТеста = СформироватьОтчет(ПараметрыФормированияОтчета, РезультатыПроверок);
			СтрокаЭлемента.СтатусТеста = СтатусТеста;
			СтатусыТестовОбъекта.Добавить(СтатусТеста);
			
			РезультатыПроверок.ТекущийВесПроверок = РезультатыПроверок.ТекущийВесПроверок + ВесПроверки;
			
			ПрогрессПроверок = МаксимальныйПрогресс * РезультатыПроверок.ТекущийВесПроверок / РезультатыПроверок.ОбщийВесПроверок;
			Состояние(РезультатыПроверок.ТекущийРежимПроверки, ПрогрессПроверок, СтрокаЭлемента.Представление, КартинкаРежима); 
				
		КонецЦикла;
		
		СтрокаГруппы.СтатусТеста = ИтоговыйСтатусПоОбъекту(СтатусыТестовОбъекта);	
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьОтчет(Параметры, РезультатыПроверок)
	
	ЭтоВнешнийОтчет = ТипЗнч(Параметры.ОтчетВладелец) = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки");
	Если ЭтоВнешнийОтчет Тогда
		ПроверяемыйОбъект = "ВнешнийОтчет." + Параметры.ИмяОтчета;
	Иначе
		ПроверяемыйОбъект = "Отчет." + Параметры.ИмяОтчета;
	КонецЕсли;
	Параметры.Вставить("ПроверяемыйОбъект", ПроверяемыйОбъект);
	
	СсылкаНаОбъект = Параметры.ОтчетВариант;
	
	СтатусОшибка = РезультатыПроверок.СтатусыТестов.Ошибка;
	
	РезультатыПроверок.Вставить("СутьПроверки", "Формирование отчета");
	
	Попытка
		
		Если ЭтоВнешнийОтчет Тогда
			Отчет = ДополнительныеОтчетыИОбработкиВызовСервера.ОбъектВнешнейОбработки(Параметры.ОтчетВладелец);
		Иначе
			Отчет = Отчеты[Параметры.ИмяОтчета].Создать(); 
		КонецЕсли;
		
	Исключение
		
		ИнформацияОбИсключении = ИнформацияОбИсключении(ИнформацияОбОшибке());
		
		ОписаниеРезультата = "Ошибка при попытке создать объект отчета: " + ИнформацияОбИсключении.ПодробнаяОшибка; 
			
		ДобавитьРезультатПроверки(СтатусОшибка, ПроверяемыйОбъект, СсылкаНаОбъект, ОписаниеРезультата, РезультатыПроверок);
		
		Возврат СтатусОшибка;
		
	КонецПопытки;
	
	Попытка
		
		КомпоновщикНастроек = Отчет.КомпоновщикНастроек;
		
	Исключение
		
		ИнформацияОбИсключении = ИнформацияОбИсключении(ИнформацияОбОшибке());
		
		ОписаниеРезультата = "Ошибка при получении компoновщика настроек отчета: " + ИнформацияОбИсключении.ПодробнаяОшибка; 
			
		ДобавитьРезультатПроверки(СтатусОшибка, ПроверяемыйОбъект, СсылкаНаОбъект, ОписаниеРезультата, РезультатыПроверок);
			
		Возврат СтатусОшибка;
		
	КонецПопытки;
	
	ЗагрузитьНастройкиОтчета(Параметры, Отчет, РезультатыПроверок);
	
	ЗагрузитьПользовательскиеНастройкиОтчета(Параметры, Отчет, РезультатыПроверок);
	
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("КлючВарианта", Параметры.КлючВарианта);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Попытка
		
		ИнформацияРасшифровки = Неопределено;
		Отчет.СкомпоноватьРезультат(ТабличныйДокумент, ИнформацияРасшифровки); 
		
		СтатусПройден = РезультатыПроверок.СтатусыТестов.Пройден;
		ДобавитьРезультатПроверки(СтатусПройден, ПроверяемыйОбъект, СсылкаНаОбъект, "", РезультатыПроверок);
		
		Возврат СтатусПройден; 
		
	Исключение
		
		ИнформацияОбИсключении = ИнформацияОбИсключении(ИнформацияОбОшибке()); 
		
		ОписаниеРезультата = "Ошибка при попытке скомпоновать отчет: " + ИнформацияОбИсключении.ПодробнаяОшибка;
		
		ДобавитьРезультатПроверки(СтатусОшибка, ПроверяемыйОбъект, СсылкаНаОбъект, ОписаниеРезультата, РезультатыПроверок);
		
		Возврат СтатусОшибка; 
		
	КонецПопытки;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗагрузитьНастройкиОтчета(Параметры, Отчет, РезультатыПроверок)
	
	СтатусОшибка = РезультатыПроверок.СтатусыТестов.Ошибка;
	
	Попытка
		
		Если Параметры.ХешНастроек <> "" Тогда
			
			ПользовательскиеНастройки = Параметры.Настройки.Получить();
			Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(ПользовательскиеНастройки);
			
		Иначе
			НастройкиВарианта = НайтиНастройкиВариантаОтчета(Отчет.СхемаКомпоновкиДанных, Параметры.КлючВарианта);
			
			Если НастройкиВарианта = Неопределено Тогда
				
				ОписаниеРезультата	= "Ошибка при получении настроек варианта отчета";
				
				ДобавитьРезультатПроверки(СтатусОшибка, Параметры.ПроверяемыйОбъект, Параметры.ОтчетВариант, ОписаниеРезультата, РезультатыПроверок);

			КонецЕсли;
			
			Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиВарианта);
			
		КонецЕсли;
		
	Исключение
		
		ИнформацияОбИсключении = ИнформацияОбИсключении(ИнформацияОбОшибке());
		
		ОписаниеРезультата = "Ошибка при попытке загрузить настройки в компоновщик: " + ИнформацияОбИсключении.ПодробнаяОшибка;
			
		ДобавитьРезультатПроверки(СтатусОшибка, Параметры.ПроверяемыйОбъект, Параметры.ОтчетВариант, ОписаниеРезультата, РезультатыПроверок);
			
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиНастройкиВариантаОтчета(СхемаКомпоновкиДанных, ИмяВарианта)
	
	НастройкиВарианта = Неопределено;
	Для Каждого Вариант Из СхемаКомпоновкиДанных.ВариантыНастроек Цикл
		Если Вариант.Имя = ИмяВарианта Тогда
			НастройкиВарианта = Вариант.Настройки;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НастройкиВарианта;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗагрузитьПользовательскиеНастройкиОтчета(Параметры, Отчет, РезультатыПроверок)
	
	Попытка
	
		УсловияПоиска = Новый Структура;
		УсловияПоиска.Вставить("КлючОбъекта",  Параметры.ИмяОтчета + "/" + Параметры.КлючВарианта);
		УсловияПоиска.Вставить("Пользователь", ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
		
		ВыборкаНастроек = ХранилищеПользовательскихНастроекОтчетов.Выбрать(УсловияПоиска);
		Если ВыборкаНастроек.Следующий() Тогда 
			
			Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ВыборкаНастроек.Настройки);
			
		Иначе
			
			КлючОбъекта = "Отчет." + Параметры.ИмяОтчета + "/" + Параметры.КлючВарианта + "/ТекущиеПользовательскиеНастройки";
			УсловияПоиска.Вставить("КлючОбъекта",  КлючОбъекта); 
			
			ВыборкаНастроек = ХранилищеСистемныхНастроек.Выбрать(УсловияПоиска);
			Если ВыборкаНастроек.Следующий() Тогда
				Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ВыборкаНастроек.Настройки);
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		ИнформацияОбИсключении = ИнформацияОбИсключении(ИнформацияОбОшибке());
		
		ОписаниеРезультата = "Ошибка при попытке загрузить пользовательские настройки в компоновщик: " + ИнформацияОбИсключении.ПодробнаяОшибка;
		
		СтатусОшибка = РезультатыПроверок.СтатусыТестов.Ошибка;
		ДобавитьРезультатПроверки(СтатусОшибка, Параметры.ПроверяемыйОбъект, Параметры.ОтчетВариант, ОписаниеРезультата, РезультатыПроверок);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область Тестирование_Печать

&НаКлиенте
Процедура ПроверитьПечатныеФормы(РезультатыПроверок) 
	
	РезультатыПроверок.Вставить("ТекущийРежимПроверки", ВсеРежимыПроверок().Печать);
	КартинкаРежима = КартинкаРежимаПроверки(РезультатыПроверок.ТекущийРежимПроверки);
	ВесПроверки = ВесРежимаПроверки(РезультатыПроверок.ТекущийРежимПроверки);
	
	Для Каждого СтрокаКласса Из ПечатныеФормы.ПолучитьЭлементы() Цикл
		
		Для Каждого СтрокаОбъекта Из СтрокаКласса.ПолучитьЭлементы() Цикл
			
			СтатусыТестовОбъекта = Новый Массив;
			
			Для Каждого СтрокаФормы Из СтрокаОбъекта.ПолучитьЭлементы() Цикл
				
				Если Не СтрокаФормы.Тестировать Тогда
					СтрокаФормы.СтатусТеста = "";
					Продолжить;
				КонецЕсли;
				
				СтатусыТестовФормы = ПроверитьПечатнуюФорму(СтрокаОбъекта, СтрокаФормы, ВесПроверки, КартинкаРежима, РезультатыПроверок);
				СтрокаФормы.СтатусТеста = ИтоговыйСтатусПоОбъекту(СтатусыТестовФормы);
				
				Для Каждого СтатусТестаФормы Из СтатусыТестовФормы Цикл
					СтатусыТестовОбъекта.Добавить(СтатусТестаФормы);
				КонецЦикла;
				
			КонецЦикла;
			
			СтрокаОбъекта.СтатусТеста = ИтоговыйСтатусПоОбъекту(СтатусыТестовОбъекта);	
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьПечатнуюФорму(СтрокаОбъекта, СтрокаФормы, ВесПроверки, КартинкаРежима, РезультатыПроверок)
	
	МаксимальныйПрогресс = 100;
	
	УсловияПоискаСсылок = Новый Структура;
	УсловияПоискаСсылок.Вставить("ПолноеИмя", СтрокаОбъекта.ПолноеИмя);
	УсловияПоискаСсылок.Вставить("ЭтоГруппа", Ложь);
	
	ПараметрыФормирования = Новый Структура("МенеджерПечати, Идентификатор, ДополнительныеПараметры, ПолноеИмя, ОбъектПечати, Представление");
	
	РезультатыПроверок.Вставить("СутьПроверки", "Формирование печатной формы");
	
	СтатусыТестовФормы = Новый Массив;
	
	НайденныеСтроки = СсылкиНаОбъекты.НайтиСтроки(УсловияПоискаСсылок);
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		ОписаниеРезультата = "Не найдены объекты печати.";
		
		СтатусТеста = РезультатыПроверок.СтатусыТестов.Пропущен;
		ДобавитьРезультатПроверки(СтатусТеста, СтрокаФормы.ПолноеИмя, Неопределено, ОписаниеРезультата, РезультатыПроверок);
		СтатусыТестовФормы.Добавить(СтатусТеста);
		
	Иначе
		
		Для Каждого СтрокаНайденных Из НайденныеСтроки Цикл 
			
			ЗаполнитьЗначенияСвойств(ПараметрыФормирования, СтрокаФормы);
			
			ПараметрыФормирования.ОбъектПечати = СтрокаНайденных.Ссылка; 
			
			СтатусТеста = СформироватьПечатнуюФорму(ПараметрыФормирования, РезультатыПроверок);
			СтатусыТестовФормы.Добавить(СтатусТеста);
			
			РезультатыПроверок.ТекущийВесПроверок = РезультатыПроверок.ТекущийВесПроверок + ВесПроверки;
			
			ПрогрессПроверок = МаксимальныйПрогресс * РезультатыПроверок.ТекущийВесПроверок / РезультатыПроверок.ОбщийВесПроверок;
			Состояние(РезультатыПроверок.ТекущийРежимПроверки, ПрогрессПроверок, СтрокаФормы.Представление, КартинкаРежима); 
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтатусыТестовФормы;
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьПечатнуюФорму(Параметры, РезультатыПроверок)
	
	РезультатыПроверок.Вставить("СутьПроверки", "Формирование печатной формы");
	
	Идентификатор  = Параметры.Идентификатор;
	МенеджерПечати = Параметры.МенеджерПечати;
	ПолноеИмя	   = Параметры.ПолноеИмя;
	ОбъектПечати   = Параметры.ОбъектПечати;
	Представление  = Параметры.Представление;
	
	Если МенеджерПечати = "СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки"
		И СтрНайти(Идентификатор, "ВнешняяПечатнаяФорма.") = 0 Тогда
		Идентификатор = "ВнешняяПечатнаяФорма." + Идентификатор;
	КонецЕсли;
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(ОбъектПечати);
	
	ПараметрыПечати = ?(Параметры.Свойство("ДополнительныеПараметры"), Параметры.ДополнительныеПараметры, Новый Структура);
	Попытка
		
		РезультатПечати = УправлениеПечатью.СформироватьПечатныеФормы(МенеджерПечати, Идентификатор,
			МассивОбъектов, ПараметрыПечати);
				
		СтатусТеста = РезультатыПроверок.СтатусыТестов.Пройден;
		ДобавитьРезультатПроверки(СтатусТеста, ПолноеИмя, ОбъектПечати, "", РезультатыПроверок);
		
	Исключение
		
		ИнформацияОбИсключении = ИнформацияОбИсключении(ИнформацияОбОшибке()); 
		
		ОписаниеРезультата = ИнформацияОбИсключении.ПодробнаяОшибка;
		
		СтатусТеста = РезультатыПроверок.СтатусыТестов.Ошибка;
		ДобавитьРезультатПроверки(СтатусТеста, ПолноеИмя, ОбъектПечати, ОписаниеРезультата, РезультатыПроверок);
			
	КонецПопытки;
	
	Возврат СтатусТеста; 
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Результаты

&НаКлиенте
Функция ПодготовитьРезультаты()
	
	НайденныеОшибки.ПолучитьЭлементы().Очистить();
	
	ТекстПротокола = "";
	
	КоличествоОшибок = 0;
	
	ДатаОкончания = '00010101';
	
	РезультатыПроверок = Новый Структура;
	РезультатыПроверок.Вставить("ДатаНачала", ТекущаяДата());
	РезультатыПроверок.Вставить("Протокол", Новый Массив);
	РезультатыПроверок.Вставить("СтатусыТестов", СтатусыТестов());
	РезультатыПроверок.Вставить("КоличествоОшибок", 0);
	
	
	Возврат РезультатыПроверок;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусыТестов()
	
	Статусы = Новый Структура;
	Статусы.Вставить("Ошибка",	 "Ошибка");
	Статусы.Вставить("Пройден",	 "Пройден");
	Статусы.Вставить("Пропущен", "Пропущен");
	
	Возврат Статусы;
	
КонецФункции

&НаКлиенте 
Функция ИтоговыйСтатусПоОбъекту(СтатусыПроверок)
	
	Если Не ЗначениеЗаполнено(СтатусыПроверок) Тогда
		Возврат "";
	КонецЕсли;
	
	СтатусыТестов = СтатусыТестов();
	
	Если СтатусыПроверок.Найти(СтатусыТестов.Ошибка) <> Неопределено Тогда
		ИтоговыйСтатус = СтатусыТестов.Ошибка;
		
	ИначеЕсли СтатусыПроверок.Найти(СтатусыТестов.Пропущен) <> Неопределено Тогда
		ИтоговыйСтатус = СтатусыТестов.Пропущен;
		
	Иначе
		ИтоговыйСтатус = СтатусыТестов.Пройден;	
	КонецЕсли;
	
	Возврат ИтоговыйСтатус; 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьРезультатПроверки(СтатусТеста, ПолноеИмяОбъекта, Данные, ОписаниеРезультата, РезультатыПроверок)
	
	ЗаписьПротокола = Новый Структура;
	ЗаписьПротокола.Вставить("ДатаПроверки",       ТекущаяДата());
	ЗаписьПротокола.Вставить("РежимПроверки",      РезультатыПроверок.ТекущийРежимПроверки);
	ЗаписьПротокола.Вставить("СтатусТеста",        СтатусТеста);
	ЗаписьПротокола.Вставить("ПолноеИмяОбъекта",   ПолноеИмяОбъекта);
	ЗаписьПротокола.Вставить("Данные",             Данные);
	ЗаписьПротокола.Вставить("СутьПроверки",       РезультатыПроверок.СутьПроверки);
	ЗаписьПротокола.Вставить("ОписаниеРезультата", ОписаниеРезультата);
	
	РезультатыПроверок.Протокол.Добавить(ЗаписьПротокола);
	
	Если СтатусТеста = РезультатыПроверок.СтатусыТестов.Ошибка Тогда
		
		РезультатыПроверок.КоличествоОшибок = РезультатыПроверок.КоличествоОшибок + 1;
	
		ДобавитьЗаписьВЖурналРегистрации(СтатусТеста, ПолноеИмяОбъекта, Данные, ОписаниеРезультата, РезультатыПроверок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьЗаписьВЖурналРегистрации(СтатусТеста, ПолноеИмяОбъекта, Данные, Описание, РезультатыПроверок)
	
	ИмяСобытия = "ТестерВышелПодымить." + РезультатыПроверок.ТекущийРежимПроверки;
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, МетаданныеОбъекта, Данные, Описание);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИнформацияОбИсключении(ИнформацияОбОшибке = Неопределено)
	
	Результат = Новый Структура("КраткаяОшибка, ПодробнаяОшибка");
	
	Результат.КраткаяОшибка   = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	Результат.ПодробнаяОшибка = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьНайденныеОшибки(РезультатыПроверок)
	
	СтатусОшибка = РезультатыПроверок.СтатусыТестов.Ошибка; 
	
	СтрокиПротокола = Новый Массив;
	ЗаполнитьШапкуПротокола(СтрокиПротокола, РезультатыПроверок);
	
	КорневыеУзлы = НайденныеОшибки.ПолучитьЭлементы();
	КорневыеУзлы.Очистить();
	ВеткиОшибок = Новый Соответствие;
	
	Если ЗначениеЗаполнено(РезультатыПроверок.Протокол) Тогда
		СтрокиПротокола.Добавить("");
		СтрокаТекста = "Выполненные проверки:";
		СтрокиПротокола.Добавить(СтрокаТекста);
	КонецЕсли;
	
	Для Каждого ЗаписьПротокола Из РезультатыПроверок.Протокол Цикл
		
		СтрокаТекста = "%1, %2, %3.%4, %5, %6, %7";
		
		СтрокаТекста = СтрШаблон(СтрокаТекста, ЗаписьПротокола.ДатаПроверки, ЗаписьПротокола.СтатусТеста, ЗаписьПротокола.РежимПроверки,
			ЗаписьПротокола.СутьПроверки, ЗаписьПротокола.ПолноеИмяОбъекта, ЗаписьПротокола.Данные, ЗаписьПротокола.ОписаниеРезультата);	
		
		СтрокиПротокола.Добавить(СтрокаТекста);
		
		Если ЗаписьПротокола.СтатусТеста = СтатусОшибка Тогда
			
			ВеткаОшибок = ВеткиОшибок.Получить(ЗаписьПротокола.РежимПроверки);
			Если ВеткаОшибок = Неопределено Тогда 
				
				ВеткаОшибок = КорневыеУзлы.Добавить();
				ВеткаОшибок.РежимПроверки = ЗаписьПротокола.РежимПроверки;
				ВеткаОшибок.Картинка	  = КартинкаРежимаПроверки(ЗаписьПротокола.РежимПроверки);
				
				ВеткиОшибок.Вставить(ЗаписьПротокола.РежимПроверки, ВеткаОшибок);
				
			КонецЕсли;
			
			СтрокаОшибки = ВеткаОшибок.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОшибки, ЗаписьПротокола);
			СтрокаОшибки.Картинка = ВеткаОшибок.Картинка;
			СтрокаОшибки.РежимПроверки = ЗаписьПротокола.СутьПроверки;
			
			КоличествоОшибок = КоличествоОшибок + 1;
			
		КонецЕсли;
			
	КонецЦикла;
	
	ТекстПротокола = СтрСоединить(СтрокиПротокола, Символы.ПС);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьШапкуПротокола(СтрокиПротокола, РезультатыПроверок)
	
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	ПараметрыРегистрации = ОбъектОбработки.СведенияОВнешнейОбработке();
	СтрокаТекста = СтрШаблон("%1, версия: %2", ПараметрыРегистрации.Наименование, ПараметрыРегистрации.Версия);
	СтрокиПротокола.Добавить(СтрокаТекста);
	
	Длительность = РезультатыПроверок.ДатаОкончания - РезультатыПроверок.ДатаНачала;
	ПредставлениеДлительности = РазбитьСекунды(Длительность);
	
	СтрокаТекста = "Длительность выполнения: %1 (с %2 по %3)";
	СтрокаТекста = СтрШаблон(СтрокаТекста, ПредставлениеДлительности, РезультатыПроверок.ДатаНачала, РезультатыПроверок.ДатаОкончания); 
	СтрокиПротокола.Добавить(СтрокаТекста);
	
	СтрокаТекста = "Выполнено проверок: %1, найдено ошибок: %2";
	СтрокаТекста = СтрШаблон(СтрокаТекста, РезультатыПроверок.Протокол.Количество(), РезультатыПроверок.КоличествоОшибок); 
	СтрокиПротокола.Добавить(СтрокаТекста);
	
	СтрокиПротокола.Добавить("");
	СистемнаяИнформация = Новый СистемнаяИнформация;
	СтрокаТекста = "Платформа: %1, конфигурация: %2, версия: %3";
	СтрокаТекста = СтрШаблон(СтрокаТекста, СистемнаяИнформация.ВерсияПриложения, Метаданные.Синоним, Метаданные.Версия);
	СтрокиПротокола.Добавить(СтрокаТекста);
	
	ПредставленияРасширений = Новый Массив;
	Попытка
		Для Каждого ТекущееРасширение Из РасширенияКонфигурации.Получить() Цикл
			Если ТекущееРасширение.Активно Тогда
				ПредставлениеРасширения = "%1, версия: %2 (%3)"; 
				ПредставлениеРасширения = СтрШаблон(ПредставлениеРасширения, ТекущееРасширение.Синоним, ТекущееРасширение.Версия,
					ТекущееРасширение.УникальныйИдентификатор);
				ПредставленияРасширений.Добавить(ПредставлениеРасширения);
			КонецЕсли;
		КонецЦикла;
	Исключение
		ПредставленияРасширений = Новый Массив;
	КонецПопытки;
	Если ЗначениеЗаполнено(ПредставленияРасширений) Тогда
		СтрокаТекста = "Расширения:";
		СтрокиПротокола.Добавить(СтрокаТекста);
		СтрокаТекста = СтрСоединить(ПредставленияРасширений, Символы.ПС);
		СтрокиПротокола.Добавить(СтрокаТекста);
	КонецЕсли; 
	
	СтрокиПротокола.Добавить("");
	СтрокиПротокола.Добавить("Информационная база: " + СтрокаСоединенияИнформационнойБазы());
	СтрокаТекста = "Пользователь: %1, полноправный: %2";
	СтрокаТекста = СтрШаблон(СтрокаТекста, Пользователи.АвторизованныйПользователь(), Пользователи.ЭтоПолноправныйПользователь());
	СтрокиПротокола.Добавить(СтрокаТекста); 
		
    ЗаполнитьНастройкиОбработкиВПротоколе(СтрокиПротокола);
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиОбработкиВПротоколе(СтрокиПротокола)

	СтрокиПротокола.Добавить("");
	СтрокиПротокола.Добавить("Режимы проверок:");
	Для Каждого ЭлементСписка Из РежимыПроверок Цикл
		
		СтрокаТекста = СтрШаблон("	%1: %2", ЭлементСписка.Значение, ЭлементСписка.Пометка);
		СтрокиПротокола.Добавить(СтрокаТекста);
		
	КонецЦикла;
	
	ВсеРежимы = ВсеРежимыПроверок();
	
	Для Каждого ЭлементСписка Из РежимыПроверок Цикл
		
		Если Не ЭлементСписка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементСписка.Значение = ВсеРежимы.Формы  Тогда
			СтрокиПротокола.Добавить("Настройки проверки форм:");
			СтрокиПротокола.Добавить("	Проверять только основные формы объектов: " + Объект.ПроверятьТолькоОсновныеФормыОбъектов);
			СтрокиПротокола.Добавить("	Открывать формы модально: " + Объект.ОткрыватьФормыМодально);
		КонецЕсли;
		
		КоличествоДокументов = ?(Объект.СколькоПроверятьОднотипныхДокументов = 0, 1, Объект.СколькоПроверятьОднотипныхДокументов); 
		Если ЭлементСписка.Значение = ВсеРежимы.Документы  Тогда
			СтрокиПротокола.Добавить("Настройки проверки документов:");
			СтрокиПротокола.Добавить("	Сколько документов одного типа проверять: " + КоличествоДокументов);
		КонецЕсли; 
		
		КоличествоОбъектов = ?(Объект.СколькоПроверятьОднотипныхОбъектов = 0, 1, Объект.СколькоПроверятьОднотипныхОбъектов);
		Если ЭлементСписка.Значение = ВсеРежимы.Справочники  Тогда
			СтрокиПротокола.Добавить("Настройки проверки справочников:"); 
			СтрокиПротокола.Добавить("	Сколько объектов одного типа проверять: " + КоличествоОбъектов);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция РазбитьСекунды(ВсегоСекунд)
	
	СекундВМинуте = 60;

	Секунды = ВсегоСекунд % СекундВМинуте;
	ВсегоМинут = (ВсегоСекунд - Секунды) / СекундВМинуте;
	Минуты = ВсегоМинут % СекундВМинуте;
	ВсегоЧасов = (ВсегоМинут - Минуты) / СекундВМинуте;
	
	ПредставлениеСекунд = ПредставлениеМинут(Секунды);
	ПредставлениеМинут  = ПредставлениеМинут(Минуты);
	ПредставлениеЧасов  = ПредставлениеМинут(ВсегоЧасов);
	
	Результат = СтрШаблон("%1:%2:%3", ПредставлениеЧасов, ПредставлениеМинут, ПредставлениеСекунд); 

	Возврат Результат;

КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеМинут(Минуты)
	
	Если Не ЗначениеЗаполнено(Минуты) Тогда
		Возврат "00";
	КонецЕсли; 
	
	ПредставлениеМинут = Строка(Минуты);
	Если СтрДлина(ПредставлениеМинут) = 1 Тогда
		ПредставлениеМинут = "0" + ПредставлениеМинут;
	КонецЕсли;
	
	Возврат ПредставлениеМинут;
	
КонецФункции

#КонецОбласти

#Область РаботаСДеревом

&НаКлиенте
Процедура СвернутьВеткиДерева(ЭлементФормы, ВеткаДерва)
	
	Для Каждого СтрокаДерева Из ВеткаДерва.ПолучитьЭлементы() Цикл
		
		СвернутьВеткиДерева(ЭлементФормы, СтрокаДерева);
		
		ЭлементФормы.Свернуть(СтрокаДерева.ПолучитьИдентификатор());
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПометкиВСтрокеДерева(СтрокаДерева)
	
	ПризнакФлагУстановлен = 2;
	
	Если СтрокаДерева.Тестировать = ПризнакФлагУстановлен Тогда
		СтрокаДерева.Тестировать = 0;
	КонецЕсли;
	
	ПроставитьПометкуВПодчиненныхСтроках(СтрокаДерева, СтрокаДерева.Тестировать); 
	
	ТекущаяСтрока   = СтрокаДерева;
	ТекущийРодитель = ТекущаяСтрока.ПолучитьРодителя();
	
	Пока ТекущийРодитель <> Неопределено Цикл
		
		Если ОдинаковаяПометкаУСтрокОдногоУровня(ТекущийРодитель, ТекущаяСтрока.Тестировать) Тогда
			ТекущийРодитель.Тестировать = ТекущаяСтрока.Тестировать; 	
		Иначе
			ТекущийРодитель.Тестировать = ПризнакФлагУстановлен;	
		КонецЕсли;
		
		ТекущаяСтрока   = ТекущийРодитель;
		ТекущийРодитель = ТекущаяСтрока.ПолучитьРодителя();
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкуВПодчиненныхСтроках(ВеткаДерева, Тестировать)
	
	Для Каждого СтрокаДерева Из ВеткаДерева.ПолучитьЭлементы() Цикл
		
		СтрокаДерева.Тестировать = Тестировать;
		
		ПроставитьПометкуВПодчиненныхСтроках(СтрокаДерева, Тестировать);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ОдинаковаяПометкаУСтрокОдногоУровня(ВеткаДерева, Тестировать)
	
	Для Каждого СтрокаДерева Из ВеткаДерева.ПолучитьЭлементы() Цикл
		
		Если СтрокаДерева.Тестировать <> Тестировать Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура УстановитьСнятьПометку(ЭлементФормы, Дерево, Тестировать)
	
	ВыделенныеСтроки = ЭлементФормы.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		
		Для Каждого Индекс Из ВыделенныеСтроки Цикл
			
			СтрокаДерева = Дерево.НайтиПоИдентификатору(Индекс);
			СтрокаДерева.Тестировать = Тестировать;
			
			ПриИзмененииПометкиВСтрокеДерева(СтрокаДерева);
			
		КонецЦикла;
		
	Иначе
		
		ПроставитьПометкуВПодчиненныхСтроках(Дерево, Тестировать);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервереБезКонтекста 
Процедура ЗаполнитьКоллекциюЭлементовДереваДанныхФормы(КоллекцияЭлементовДерева, ДеревоЗначений)
	
	Для Каждого Строка Из ДеревоЗначений.Строки Цикл
		
		ЭлементДерева = КоллекцияЭлементовДерева.Добавить();
		ЗаполнитьЗначенияСвойств(ЭлементДерева, Строка);
		Если Строка.Строки.Количество() > 0 Тогда
			ЗаполнитьКоллекциюЭлементовДереваДанныхФормы(ЭлементДерева.ПолучитьЭлементы(), Строка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
