
#Область ОписаниеПеременных

&НаКлиенте
Перем ОткрытыеОкна; // коллекция открытых окон

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	ПараметрыРегистрации = ОбъектОбработки.СведенияОВнешнейОбработке();
	Заголовок = СтрШаблон("%1 (%2)", ПараметрыРегистрации.Наименование, ПараметрыРегистрации.Версия);
	АвтоЗаголовок = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(Справочники_КоличествоОбъектов) Тогда
		Справочники_КоличествоОбъектов = 1;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Документы_КоличествоОбъектов) Тогда
		Документы_КоличествоОбъектов = 1;
	КонецЕсли;
	
	НастроитьЭлементыФормыПоРежимамПроверки();
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ФлажокРежимаПроверкиПриИзменении(Элемент)
	
	НастроитьЭлементыФормыПоРежимамПроверки();
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиАллюреНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработчикОповещения = Новый ОписаниеОповещения("КаталогВыгрузкиАллюреНачалоВыбораЗавершение", ЭтотОбъект);

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	
	ДиалогВыбораКаталога.Показать(ОбработчикОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьПроверки(Команда)
	
	ПодготовитьРезультаты();
	
	РезультатыПроверок = Новый Структура;
	РезультатыПроверок.Вставить("ДатаНачала", ТекущаяДата());
	РезультатыПроверок.Вставить("Протокол", Новый Массив);
	РезультатыПроверок.Вставить("СтатусыТестов", СтатусыТестов());
	
	СобратьПроверки(РезультатыПроверок);
	
	СсылкиНаОбъекты.Очистить();
	ЗаполнитьСсылкиНаОбъекты(РезультатыПроверок);
	
	Если ПроверятьФормы Тогда
		ПроверитьФормы(РезультатыПроверок);
	КонецЕсли; 
	
	Если ПроверятьДокументы Тогда
		ПроверитьДокументы(РезультатыПроверок);
	КонецЕсли;
	
	Если ПроверятьСправочники Тогда
		ПроверитьСправочники(РезультатыПроверок);
	КонецЕсли;
	
	Если ПроверятьОтчеты Тогда
		ПроверитьОтчеты(РезультатыПроверок);
	КонецЕсли;
	
	Если ПроверятьПечать Тогда
		ПроверитьПечатныеФормы(РезультатыПроверок);
	КонецЕсли;
	
	РезультатыПроверок.Вставить("ДатаОкончания", ТекущаяДата());  
	
	ЗаполнитьНайденныеОшибки(РезультатыПроверок);
	СоздатьОтчетАллюр(РезультатыПроверок);
	
	Элементы.ОбщиеСтраницы.ТекущаяСтраница = Элементы.СтраницаРезультата;
	Результаты_РазвернутьВсеГруппы(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура Проверки_Заполнить(Команда)
	
	Формы_Заполнить(Неопределено);
	Отчеты_Заполнить(Неопределено);
	Печать_Заполнить(Неопределено);
	Документы_Заполнить(Неопределено);
	Справочники_Заполнить(Неопределено);
	
	ПерезаполненыОбъекты = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВыбранныеОбъекты(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПерезаполненыОбъекты", ПерезаполненыОбъекты);
	
	ОбъектыМетаданных = ВыбранныеОбъектыМетаданных();
	ПараметрыФормы.Вставить("ОбъектыМетаданных", ОбъектыМетаданных);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("НастроитьВыбранныеОбъектыЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ВнешняяОбработка.ТестерВышелПодымить.Форма.НастройкаВыбораОбъектов", ПараметрыФормы, ЭтотОбъект,,,,
		ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Режимы_СнятьФлажки(Команда)
	
	ПроверятьДокументы 	 = Ложь;
	ПроверятьПечать		 = Ложь;
	ПроверятьОтчеты		 = Ложь;
	ПроверятьСправочники = Ложь;
	ПроверятьФормы		 = Ложь;
	
	НастроитьЭлементыФормыПоРежимамПроверки();
	
КонецПроцедуры

&НаКлиенте
Процедура Режимы_УстановитьФлажки(Команда)
	
	ПроверятьДокументы 	 = Истина;
	ПроверятьПечать		 = Истина;
	ПроверятьОтчеты		 = Истина;
	ПроверятьСправочники = Истина;
	ПроверятьФормы		 = Истина;
	
	НастроитьЭлементыФормыПоРежимамПроверки();
	
КонецПроцедуры

#Область ОбработчикиКомандФормы_Формы

&НаКлиенте
Процедура Формы_Заполнить(Команда)
	
	ЗаполнитьФормыОбъектов();
	
КонецПроцедуры

&НаКлиенте
Процедура Формы_УстановитьФлажки(Команда)
	
	УстановитьСнятьПометку(Элементы.ФормыОбъектов, ФормыОбъектов, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Формы_СнятьФлажки(Команда)
	
	УстановитьСнятьПометку(Элементы.ФормыОбъектов, ФормыОбъектов, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Формы_РазвернутьВсеГруппы(Команда)
	
	Для Каждого СтрокаДерева Из ФормыОбъектов.ПолучитьЭлементы() Цикл
		Элементы.ФормыОбъектов.Развернуть(СтрокаДерева.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Формы_СвернутьВсеГруппы(Команда)
	
	СвернутьВеткиДерева(Элементы.ФормыОбъектов, ФормыОбъектов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_Печать

&НаКлиенте
Процедура Печать_Заполнить(Команда)
	
	ЗаполнитьПечатныеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура Печать_ПроставитьВсеФлажки(Команда)
	
	УстановитьСнятьПометку(Элементы.ПечатныеФормы, ПечатныеФормы, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать_СнятьВсеФлажки(Команда)
	
	УстановитьСнятьПометку(Элементы.ПечатныеФормы, ПечатныеФормы, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать_РазвернутьВсеГруппы(Команда)
	
	Для Каждого СтрокаДерева Из ПечатныеФормы.ПолучитьЭлементы() Цикл
		Элементы.ПечатныеФормы.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Печать_СвернутьВсеГруппы(Команда)
	
	СвернутьВеткиДерева(Элементы.ПечатныеФормы, ПечатныеФормы); 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_Отчеты

&НаКлиенте
Процедура Отчеты_Заполнить(Команда)
	
	ЗаполнитьВариантыОтчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура Отчеты_ПроставитьВсеФлажки(Команда)
	
	УстановитьСнятьПометку(Элементы.ВариантыОтчетов, ВариантыОтчетов, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Отчеты_СнятьВсеФлажки(Команда)
	
	УстановитьСнятьПометку(Элементы.ВариантыОтчетов, ВариантыОтчетов, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Отчеты_РазвернутьВсеГруппы(Команда)
	
	Для Каждого СтрокаДерева Из ВариантыОтчетов.ПолучитьЭлементы() Цикл
		Элементы.ВариантыОтчетов.Развернуть(СтрокаДерева.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Отчеты_СвернутьВсеГруппы(Команда)
	
	СвернутьВеткиДерева(Элементы.ВариантыОтчетов, ВариантыОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_Документы

&НаКлиенте
Процедура Документы_Заполнить(Команда)
	
	ЗаполнитьДокументыКонфигурации();
	
КонецПроцедуры

&НаКлиенте
Процедура Документы_УстановитьФлажки(Команда)
	
	УстановитьСнятьПометку(Элементы.ДокументыКонфигурации, ДокументыКонфигурации, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Документы_СнятьФлажки(Команда)
	
	УстановитьСнятьПометку(Элементы.ДокументыКонфигурации, ДокументыКонфигурации, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Документы_РазвернутьВсеГруппы(Команда)
	
	Для Каждого СтрокаДерева Из ДокументыКонфигурации.ПолучитьЭлементы() Цикл
		Элементы.ДокументыКонфигурации.Развернуть(СтрокаДерева.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Документы_СвернутьВсеГруппы(Команда)
	
	СвернутьВеткиДерева(Элементы.ДокументыКонфигурации, ДокументыКонфигурации);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_Справочники

&НаКлиенте
Процедура Справочники_Заполнить(Команда)
	
	ЗаполнитьСправочникиКонфигурации();
	
КонецПроцедуры

&НаКлиенте
Процедура Справочники_УстановитьФлажки(Команда)
	
	УстановитьСнятьПометку(Элементы.СправочникиКонфигурации, СправочникиКонфигурации, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Справочники_СнятьФлажки(Команда)
	
	УстановитьСнятьПометку(Элементы.СправочникиКонфигурации, СправочникиКонфигурации, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Справочники_РазвернутьВсеГруппы(Команда)
	
	Для Каждого СтрокаДерева Из СправочникиКонфигурации.ПолучитьЭлементы() Цикл
		Элементы.СправочникиКонфигурации.Развернуть(СтрокаДерева.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Справочники_СвернутьВсеГруппы(Команда)
	
	СвернутьВеткиДерева(Элементы.СправочникиКонфигурации, СправочникиКонфигурации);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_НайденныеОшибки

&НаКлиенте
Процедура Результаты_Очистить(Команда)
	
	ПодготовитьРезультаты();
	
КонецПроцедуры

&НаКлиенте
Процедура Результаты_РазвернутьВсеГруппы(Команда)
	
	Для Каждого СтрокаДерева Из НайденныеОшибки.ПолучитьЭлементы() Цикл
		Элементы.НайденныеОшибки.Развернуть(СтрокаДерева.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Результаты_СвернутьВсеГруппы(Команда)
	
	СвернутьВеткиДерева(Элементы.НайденныеОшибки, НайденныеОшибки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФормыОбъектов

&НаКлиенте
Процедура ФормыОбъектовТестироватьПриИзменении(Элемент)
	
	ПриИзмененииПометкиВСтрокеДерева(Элементы.ФормыОбъектов.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВариантыОтчетов

&НаКлиенте
Процедура ВариантыОтчетовТестироватьПриИзменении(Элемент)
	
	ПриИзмененииПометкиВСтрокеДерева(Элементы.ВариантыОтчетов.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПечатныеФормы

&НаКлиенте
Процедура ПечатныеФормыТестироватьПриИзменении(Элемент)
		
	ПриИзмененииПометкиВСтрокеДерева(Элементы.ПечатныеФормы.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыКонфигурации

&НаКлиенте
Процедура ДокументыКонфигурацииТестироватьПриИзменении(Элемент)
	
	ПриИзмененииПометкиВСтрокеДерева(Элементы.ДокументыКонфигурации.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСправочники

&НаКлиенте
Процедура СправочникиКонфигурацииТестироватьПриИзменении(Элемент)
	
	ПриИзмененииПометкиВСтрокеДерева(Элементы.СправочникиКонфигурации.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНайденныеОшибки

&НаКлиенте
Процедура НайденныеОшибкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаОшибок = Элементы.НайденныеОшибки.ТекущиеДанные;
	Если СтрокаОшибок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаОшибок.Данные) Или СтрокаОшибок.РежимПроверки = РежимыПроверки().Формы Тогда
	
		СтандартнаяОбработка = Ложь;
		
		Если СтрокаОшибок.РежимПроверки = РежимыПроверки().Формы И ЗначениеЗаполнено(СтрокаОшибок.ПолноеИмяОбъекта)  Тогда
				
			ПараметрыФормы = Новый Структура;
			Если ЗначениеЗаполнено(СтрокаОшибок.Данные) Тогда
				ПараметрыФормы.Вставить("Ключ", СтрокаОшибок.Данные);
			КонецЕсли;
			
			ОткрытьФорму(СтрокаОшибок.ПолноеИмяОбъекта, ПараметрыФормы);
			
		Иначе
			
			ПоказатьЗначение(, СтрокаОшибок.Данные);
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РежимыПроверки

&НаКлиентеНаСервереБезКонтекста
Функция РежимыПроверки()
	
	Режимы = Новый Структура;
	Режимы.Вставить("Формы", 		"Формы");
	Режимы.Вставить("Отчеты", 		"Отчеты");
	Режимы.Вставить("Печать",		"Печать");
	Режимы.Вставить("Документы",	"Документы");
	Режимы.Вставить("Справочники",	"Справочники");
	
	Возврат Режимы;
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция КартинкаРежимаПроверки(РежимПроверки)
	
	РежимыПроверки = РежимыПроверки();
	
	СоответствиеКартинок = Новый Соответствие;
	СоответствиеКартинок.Вставить(РежимыПроверки.Формы,  	  БиблиотекаКартинок.Форма);
	СоответствиеКартинок.Вставить(РежимыПроверки.Документы,   БиблиотекаКартинок.Документ);
	СоответствиеКартинок.Вставить(РежимыПроверки.Справочники, БиблиотекаКартинок.Справочник);
	СоответствиеКартинок.Вставить(РежимыПроверки.Отчеты,  	  БиблиотекаКартинок.Отчеты);
	СоответствиеКартинок.Вставить(РежимыПроверки.Печать,  	  БиблиотекаКартинок.Печать);
	
	Возврат СоответствиеКартинок.Получить(РежимПроверки);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВесРежимаПроверки(РежимПроверки)
	
	РежимыПроверки = РежимыПроверки();
	
	СоответствиеВесов = Новый Соответствие;
	СоответствиеВесов.Вставить(РежимыПроверки.Формы,  	   1);
	СоответствиеВесов.Вставить(РежимыПроверки.Документы,   4);
	СоответствиеВесов.Вставить(РежимыПроверки.Справочники, 2);
	СоответствиеВесов.Вставить(РежимыПроверки.Отчеты,  	   6);
	СоответствиеВесов.Вставить(РежимыПроверки.Печать,  	   2);
	
	Возврат СоответствиеВесов.Получить(РежимПроверки);
	
КонецФункции

&НаКлиенте
Процедура НастроитьЭлементыФормыПоРежимамПроверки() 
	
	Элементы.Страница_Формы.Доступность       = ПроверятьФормы;
	Элементы.Страница_Отчеты.Доступность      = ПроверятьОтчеты;
	Элементы.Страница_Печать.Доступность      = ПроверятьПечать;
	Элементы.Страница_Документы.Доступность   = ПроверятьДокументы;
	Элементы.Страница_Справочники.Доступность = ПроверятьСправочники;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеМетаданными

&НаСервереБезКонтекста
Функция ДеревоМетаданныхКонфигурации(Отбор = Неопределено, ПолучатьСамОбъектМетаданных = Ложь) Экспорт 
	
	ИспользоватьОтбор = (Отбор <> Неопределено); 
	
	ДобавитьБизнесПроцессы = Ложь;
	ДобавитьЗадачи = Ложь;
	
	КоллекцииОбъектовМетаданных = Новый ТаблицаЗначений;
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Имя");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Синоним");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("ЕстьСсылки");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Картинка");
	
	ДобавитьСтрокуВКоллекциюОбъектовМетаданных("Справочники",  "Справочники", Истина,
		БиблиотекаКартинок.Справочник, КоллекцииОбъектовМетаданных);
	
	ДобавитьСтрокуВКоллекциюОбъектовМетаданных("Документы", "Документы", Истина,
		БиблиотекаКартинок.Документ, КоллекцииОбъектовМетаданных);
		
	ДобавитьСтрокуВКоллекциюОбъектовМетаданных("ПланыВидовХарактеристик", "Планы видов характеристик", Истина,
		БиблиотекаКартинок.ПланВидовХарактеристик, КоллекцииОбъектовМетаданных);
	
	ДобавитьСтрокуВКоллекциюОбъектовМетаданных("ПланыВидовРасчета", "Планы видов расчета", Истина,
		БиблиотекаКартинок.ПланВидовРасчета, КоллекцииОбъектовМетаданных);
		
	ДобавитьСтрокуВКоллекциюОбъектовМетаданных("Обработки", "Обработки", Ложь,
		БиблиотекаКартинок.Обработка, КоллекцииОбъектовМетаданных);
		
	Если ДобавитьБизнесПроцессы Тогда
		ДобавитьСтрокуВКоллекциюОбъектовМетаданных("БизнесПроцессы", "Бизнес-процессы", Истина,
			БиблиотекаКартинок.БизнесПроцесс, КоллекцииОбъектовМетаданных);
	КонецЕсли;
		
	Если ДобавитьЗадачи Тогда
		ДобавитьСтрокуВКоллекциюОбъектовМетаданных("Задачи", "Задачи", Истина,
			БиблиотекаКартинок.Задача, КоллекцииОбъектовМетаданных);
	КонецЕсли;
	
	ДеревоМетаданных = Новый ДеревоЗначений;
	ДеревоМетаданных.Колонки.Добавить("Имя");
	ДеревоМетаданных.Колонки.Добавить("ПолноеИмя");
	ДеревоМетаданных.Колонки.Добавить("Синоним");
	ДеревоМетаданных.Колонки.Добавить("ЕстьСсылки");
	ДеревоМетаданных.Колонки.Добавить("Картинка");
	
	Если ПолучатьСамОбъектМетаданных Тогда
		ДеревоМетаданных.Колонки.Добавить("ОбъектМетаданных");
	КонецЕсли;
	
	Для Каждого СтрокаКоллекции Из КоллекцииОбъектовМетаданных Цикл
		
		Если ИспользоватьОтбор И СтрНайти(Отбор, СтрокаКоллекции.Имя) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДереваКласс = ДеревоМетаданных.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДереваКласс, СтрокаКоллекции);
		Для Каждого ОбъектМетаданных Из Метаданные[СтрокаКоллекции.Имя] Цикл
			
			СтрокаДереваОбъект = СтрокаДереваКласс.Строки.Добавить();
			СтрокаДереваОбъект.Имя       = ОбъектМетаданных.Имя;
			СтрокаДереваОбъект.ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
			СтрокаДереваОбъект.Синоним   = ОбъектМетаданных.Синоним;
			СтрокаДереваОбъект.Картинка  = СтрокаКоллекции.Картинка;
			
			Если ПолучатьСамОбъектМетаданных Тогда
				СтрокаДереваОбъект.ОбъектМетаданных = ОбъектМетаданных;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДеревоМетаданных;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьСтрокуВКоллекциюОбъектовМетаданных(Имя, Синоним, ЕстьСсылки, Картинка, Коллекция)
	
	НоваяСтрока = Коллекция.Добавить();
	НоваяСтрока.Имя             = Имя;
	НоваяСтрока.Синоним         = "";
	НоваяСтрока.ЕстьСсылки      = ЕстьСсылки; 
	НоваяСтрока.Картинка        = Картинка;
	
КонецПроцедуры

#Область ЗаполнениеМетаданными_Формы

&НаСервере
Процедура ЗаполнитьФормыОбъектов()
	
	НовоеДерево = ДеревоМетаданныхКонфигурации(, Истина);
	
	ДополнитьДеревоФормами(НовоеДерево);
	
	ФормыОбъектов.ПолучитьЭлементы().Очистить();
	
	ЗаполнитьКоллекциюЭлементовДереваДанныхФормы(ФормыОбъектов.ПолучитьЭлементы(), НовоеДерево);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьДеревоФормами(Дерево)
	
	Дерево.Колонки.Добавить("ЭтоФорма", Новый ОписаниеТипов("Булево"));
	Дерево.Колонки.Добавить("ПараметрыФормы", Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("Тестировать", Новый ОписаниеТипов("Булево"));
	Дерево.Колонки.Добавить("ОсновнаяФорма", Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("Иерархический", Новый ОписаниеТипов("Булево"));
	
	ЭлементыНаУдаление = Новый Массив();
	
	Для каждого ТекКласс Из Дерево.Строки Цикл
				
		Для каждого Элем Из ТекКласс.Строки Цикл
			
			МетаОбъект = Элем.ОбъектМетаданных;
			
			Попытка
				ФормыМетаОбъекта = МетаОбъект.Формы;
			Исключение                              
				ЭлементыНаУдаление.Добавить(Элем);
				Продолжить;
			КонецПопытки;
			
			Если ФормыМетаОбъекта.Количество() = 0 Тогда
				ЭлементыНаУдаление.Добавить(Элем);
			КонецЕсли;
			
			Для каждого ТекФорма Из ФормыМетаОбъекта Цикл
				
				Если Не Формы_ВключитьВТестирование(ТекФорма, МетаОбъект, ТекКласс) Тогда
					Продолжить;
				КонецЕсли;
				
				ЭлементДерева = Элем.Строки.Добавить();
				ЭлементДерева.Имя = ТекФорма.Имя;
				ЭлементДерева.ПолноеИмя = ТекФорма.ПолноеИмя();
				ЭлементДерева.Картинка = БиблиотекаКартинок.Форма;
				ЭлементДерева.ЭтоФорма = Истина;
				ЭлементДерева.ОсновнаяФорма = ОпределитьОсновнуюФорму(ТекФорма, МетаОбъект, ТекКласс);
				
				ЭлементДерева.Иерархический = ЕстьГруппыУОбъектаМетаданных(МетаОбъект.ПолноеИмя(), МетаОбъект);
				
				ЭлементДерева.Тестировать = Ложь;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого СтрокаУдалить Из ЭлементыНаУдаление Цикл
		
		Для Каждого ТекКласс Из Дерево.Строки Цикл
			Попытка
				ТекКласс.Строки.Удалить(СтрокаУдалить);
			Исключение
				Продолжить;
			КонецПопытки;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция Формы_ВключитьВТестирование(ТекФорма, МетаОбъект, ТекКласс)
	
	Тестировать = Истина;
	
	Если Найти(ТекФорма.Имя, "Списк") <> 0 ИЛИ Найти(ТекФорма.Имя, "List") <> 0 Тогда
		
		Тестировать = Истина;
		
	ИначеЕсли ТекКласс.Имя = "РегистрыНакопления"  ИЛИ ТекКласс.Имя = "AccumulationRegisters" 
	      ИЛИ ТекКласс.Имя = "РегистрыБухгалтерии" ИЛИ ТекКласс.Имя = "AccountingRegisters"
	      ИЛИ ТекКласс.Имя = "РегистрыРасчета"     ИЛИ ТекКласс.Имя = "CalculationRegisters" Тогда
		
		Если МетаОбъект.ОсновнаяФормаСписка = ТекФорма Тогда
			Тестировать = Истина;
		КонецЕсли;
		
	ИначеЕсли ТекКласс.Имя = "РегистрыСведений" ИЛИ ТекКласс.Имя = "InformationRegisters" Тогда
		
		Если МетаОбъект.ОсновнаяФормаЗаписи = ТекФорма
		     ИЛИ МетаОбъект.ОсновнаяФормаСписка = ТекФорма Тогда
			Тестировать = Истина;
		КонецЕсли;
	ИначеЕсли ТекКласс.Имя = "Обработки" ИЛИ ТекКласс.Имя = "DataProcessors" Тогда
		
		Если МетаОбъект.ОсновнаяФорма = ТекФорма Тогда
			Тестировать = Истина;
		КонецЕсли;		
	Иначе
		
		Если МетаОбъект.ОсновнаяФормаДляВыбора = ТекФорма
		     ИЛИ МетаОбъект.ОсновнаяФормаСписка = ТекФорма
		     ИЛИ МетаОбъект.ОсновнаяФормаОбъекта = ТекФорма
		     ИЛИ ((ТекКласс.Имя = "Справочники" ИЛИ ТекКласс.Имя = "Catalogs") И МетаОбъект.ОсновнаяФормаГруппы = ТекФорма )
		     ИЛИ ((ТекКласс.Имя = "Справочники" ИЛИ ТекКласс.Имя = "Catalogs") И МетаОбъект.ОсновнаяФормаДляВыбораГруппы = ТекФорма) Тогда
			Тестировать = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Тестировать;
			
КонецФункции

&НаСервереБезКонтекста
Функция ОпределитьОсновнуюФорму(ТекФорма, МетаОбъект, ТекКласс)
	
	ИмяФормы = Неопределено;
	
	Если ТекФорма = МетаОбъект.ОсновнаяФормаОбъекта Тогда
		Возврат "ОсновнаяФормаОбъекта"; 
	КонецЕсли;
	
	Если ТекКласс.Имя = "Справочники" Или ТекКласс.Имя = "ПланыВидовХарактеристик" Тогда
		
		Если ТекФорма = МетаОбъект.ОсновнаяФормаОбъекта Тогда
			ИмяФормы = "ОсновнаяФормаОбъекта";
		ИначеЕсли ТекФорма = МетаОбъект.ОсновнаяФормаСписка Тогда
			ИмяФормы = "ОсновнаяФормаСписка";
		ИначеЕсли ТекФорма = МетаОбъект.ОсновнаяФормаГруппы Тогда
			ИмяФормы = "ОсновнаяФормаГруппы";
		ИначеЕсли ТекФорма = МетаОбъект.ОсновнаяФормаДляВыбора Тогда
			ИмяФормы = "ОсновнаяФормаДляВыбора";
		ИначеЕсли ТекФорма = МетаОбъект.ОсновнаяФормаДляВыбораГруппы Тогда
			ИмяФормы = "ОсновнаяФормаДляВыбораГруппы";
		Иначе
			ИмяФормы = Неопределено;	
		КонецЕсли;
		
	ИначеЕсли ТекКласс.Имя = "Документы" Тогда
		
		Если ТекФорма = МетаОбъект.ОсновнаяФормаОбъекта Тогда
			ИмяФормы = "ОсновнаяФормаОбъекта";
		ИначеЕсли ТекФорма= МетаОбъект.ОсновнаяФормаСписка Тогда
			ИмяФормы = "ОсновнаяФормаСписка";
		ИначеЕсли ТекФорма = МетаОбъект.ОсновнаяФормаДляВыбора Тогда
			ИмяФормы = "ОсновнаяФормаДляВыбора";
		Иначе
			ИмяФормы = Неопределено;	
		КонецЕсли;
		
	Иначе
		ИмяФормы = Неопределено;	
	КонецЕсли;
	
	Возврат ИмяФормы;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеМетаданными_Отчеты

&НаСервере
Процедура ЗаполнитьВариантыОтчетов()
	
	Попытка
		
		Отчеты_ЗаполнитьТаблицуОтчетов();
		
	Исключение
		
		ИнформацияОбИсключении = ИнформацияОбИсключении();
		
		ОбщегоНазначения.СообщитьПользователю(ИнформацияОбИсключении.КраткаяОшибка);
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура Отчеты_ЗаполнитьТаблицуОтчетов()
	
	ДоступныеОтчеты = ВариантыОтчетовПовтИсп.ДоступныеОтчеты();
	НедоступныеВарианты = ВариантыОтчетовПовтИсп.ОтключенныеВариантыПрограммы();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВариантыОтчетов.Отчет КАК Отчет,
	|	ВариантыОтчетов.Настройки,
	|	ВариантыОтчетов.ХешНастроек,
	|	ВариантыОтчетов.Ссылка КАК ВариантОтчета,
	|	ВариантыОтчетов.КлючВарианта,
	|	ВариантыОтчетов.Отчет.Имя КАК ИмяОтчета,
	|	ВариантыОтчетов.Отчет.ПолноеИмя КАК ПолноеИмя,
	|	ВариантыОтчетов.Отчет.Синоним КАК НаименованиеОтчета
	|ПОМЕСТИТЬ ВременнаяТаблицаОтчетов
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.ПометкаУдаления = ЛОЖЬ
	|	И НЕ ВариантыОтчетов.Ссылка В (&НедоступныеВарианты)
	|	И ВариантыОтчетов.Отчет В(&ДоступныеОтчеты)
	|	И (ВЫРАЗИТЬ(ВариантыОтчетов.ПредопределенныйВариант КАК Справочник.ПредопределенныеВариантыОтчетов).Включен = ИСТИНА
	|			ИЛИ ВариантыОтчетов.ПредопределенныйВариант = ЗНАЧЕНИЕ(Справочник.ПредопределенныеВариантыОтчетов.ПустаяСсылка)
	|			<%ДопУсловие>)
	|	И ВариантыОтчетов.КлючВарианта <> """"
	|ОБЪЕДИНИТЬ ВСЕ
	|		ВЫБРАТЬ
	|	ВариантыОтчетов.Отчет,
	|	ВариантыОтчетов.Настройки,
	|	ВариантыОтчетов.ХешНастроек,
	|	ВариантыОтчетов.Ссылка,
	|	ВариантыОтчетов.КлючВарианта,
	|	ВариантыОтчетов.Отчет.ИмяОбъекта,
	|   ""ВнешнийОтчет"",
	|	ВариантыОтчетов.Отчет.Наименование
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	НЕ ВариантыОтчетов.ПометкаУдаления
	|	И ВариантыОтчетов.КлючВарианта <> """"
	|	И ВариантыОтчетов.Отчет ССЫЛКА Справочник.ДополнительныеОтчетыИОбработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаОтчетов.Отчет КАК Отчет,
	|	ВременнаяТаблицаОтчетов.ВариантОтчета КАК ВариантОтчета,
	|	ВременнаяТаблицаОтчетов.ХешНастроек КАК ХешНастроек,
	|	ВременнаяТаблицаОтчетов.НаименованиеОтчета КАК НаименованиеОтчета,
	|	ВременнаяТаблицаОтчетов.ВариантОтчета.Наименование КАК НаименованиеВарианта,
	|	ВременнаяТаблицаОтчетов.Настройки,
	|	ВременнаяТаблицаОтчетов.КлючВарианта,
	|	ВременнаяТаблицаОтчетов.ИмяОтчета,
	|	ВременнаяТаблицаОтчетов.ПолноеИмя
	|ИЗ
	|	ВременнаяТаблицаОтчетов КАК ВременнаяТаблицаОтчетов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВременнаяТаблицаОтчетов.Отчет.Наименование,
	|	ВременнаяТаблицаОтчетов.ВариантОтчета.Наименование";
	
	ЕстьПредопределенныеВарианты = Метаданные.Справочники.Найти("ПредопределенныеВариантыОтчетовРасширений") <> Неопределено;
	
	Если ЕстьПредопределенныеВарианты Тогда
		ДопУсловие = " ИЛИ ВЫРАЗИТЬ(ВариантыОтчетов.ПредопределенныйВариант КАК Справочник.ПредопределенныеВариантыОтчетовРасширений).Включен = ИСТИНА 
		|	ИЛИ ВариантыОтчетов.ПредопределенныйВариант = ЗНАЧЕНИЕ(Справочник.ПредопределенныеВариантыОтчетовРасширений.ПустаяСсылка)";
	Иначе
		ДопУсловие = "";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "<%ДопУсловие>", ДопУсловие);
	
	Запрос.УстановитьПараметр("ДоступныеОтчеты", ДоступныеОтчеты);
	Запрос.УстановитьПараметр("НедоступныеВарианты", НедоступныеВарианты);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КорневыеУзлы = ВариантыОтчетов.ПолучитьЭлементы();
	КорневыеУзлы.Очистить();
	
	ТекущийОтчет				= Неопределено;
	ЭлементыКорневогоУзла		= Неопределено;
	Пока Выборка.Следующий() Цикл
		
		Если ТекущийОтчет <> Выборка.Отчет Тогда
			
			ТекущийОтчет = Выборка.Отчет;
			СтрокаГруппы = КорневыеУзлы.Добавить();
			
			СтрокаГруппы.ОтчетВариант = Выборка.Отчет;
			СтрокаГруппы.Представление = Выборка.НаименованиеОтчета;
			СтрокаГруппы.ЭтоГруппа = Истина;
			
			ЭлементыКорневогоУзла = СтрокаГруппы.ПолучитьЭлементы();
			
			Если ЕстьПредопределенныеВарианты 
					И НЕ ТипЗнч(ТекущийОтчет) = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") 
			Тогда
				МетаОбъект = Метаданные.Отчеты.Найти(Выборка.ИмяОтчета);
			Иначе
				МетаОбъект = ТекущийОтчет.Метаданные();
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаВарианта								= ЭлементыКорневогоУзла.Добавить();
		СтрокаВарианта.ОтчетВариант					= Выборка.ВариантОтчета;
		СтрокаВарианта.ОтчетВладелец				= Выборка.Отчет;
		СтрокаВарианта.Представление				= Выборка.НаименованиеВарианта + " (" + Выборка.КлючВарианта + ")";
		
		ЗаполнитьЗначенияСвойств(СтрокаВарианта, Выборка, "ХешНастроек,Настройки,КлючВарианта,ИмяОтчета");
		
		Если Выборка.ПолноеИмя = "ВнешнийОтчет" Тогда
			СтрокаВарианта.ПолноеИмя = Выборка.ПолноеИмя + "." + Выборка.ИмяОтчета;	
		Иначе
			СтрокаВарианта.ПолноеИмя = Выборка.ПолноеИмя;	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеМетаданными_Печать

&НаСервере
Процедура ЗаполнитьПечатныеФормы()
	
	Попытка
		
		Печать_ЗаполнитьТаблицуПечатныхФорм();
		
	Исключение
		
		ИнформацияОбИсключении = ИнформацияОбИсключении();
		
		ОбщегоНазначения.СообщитьПользователю(ИнформацияОбИсключении.КраткаяОшибка);
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура Печать_ЗаполнитьТаблицуПечатныхФорм()
	
	СписокДляСортировки = Новый СписокЗначений;
	СписокДляСортировки.ЗагрузитьЗначения(УправлениеПечатью.ИсточникиКомандПечати());
	СписокДляСортировки.СортироватьПоЗначению();
	ИсточникиКомандПечати = СписокДляСортировки.ВыгрузитьЗначения();
	
	УзлыТиповМетаданных = ПечатныеФормы.ПолучитьЭлементы();
	УзлыТиповМетаданных.Очистить();
	
	СтрокаСправочники = УзлыТиповМетаданных.Добавить();
	СтрокаСправочники.Тестировать = Ложь;
	СтрокаСправочники.ЭтоГруппа = Истина;
	СтрокаСправочники.Представление = "Справочники";
	СтрокаСправочники.Картинка = БиблиотекаКартинок.Справочник; 
	УзлыСправочника = СтрокаСправочники.ПолучитьЭлементы();
	
	СтрокаДокументы = УзлыТиповМетаданных.Добавить();
	СтрокаДокументы.Тестировать = Ложь;
	СтрокаДокументы.ЭтоГруппа = Истина;
	СтрокаДокументы.Представление = "Документы";
	СтрокаДокументы.Картинка = БиблиотекаКартинок.Документ;
	УзлыДокументов = СтрокаДокументы.ПолучитьЭлементы();
	
	КартинкаСправочник = БиблиотекаКартинок.Справочник;
	КартинкаДокумент   = БиблиотекаКартинок.ДокументОбъект;
	
	ПодходящиеИсточникиКоманд = Новый Массив;
	Для Каждого Источник Из ИсточникиКомандПечати Цикл
		
		Если НРег(Лев(Источник.Имя, 7)) = "удалить" Тогда
			Продолжить;
		КонецЕсли;
		
		// Доп проверка на случай, когда команды печати возможны, но не подключены
		Попытка
			КомандыПечати = УправлениеПечатью.КомандыПечатиОбъекта(Источник);
		Исключение
			Продолжить;
		КонецПопытки;
		
		Если КомандыПечати.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоКомандБезОбработчиков = 0;
		Для Каждого КомандаПечати Из КомандыПечати Цикл
			Если Не ЗначениеЗаполнено(КомандаПечати.Обработчик) Тогда
				КоличествоКомандБезОбработчиков = КоличествоКомандБезОбработчиков + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоКомандБезОбработчиков = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПолноеИмя = Источник.ПолноеИмя();
		
		Если СтрНачинаетсяС(ПолноеИмя, "Справочник") Тогда
			
			СтрокаОбъектаМетаданных = УзлыСправочника.Добавить();
			СтрокаОбъектаМетаданных.Картинка = КартинкаСправочник;
			
		ИначеЕсли СтрНачинаетсяС(ПолноеИмя, "Документ") Тогда
			
			СтрокаОбъектаМетаданных = УзлыДокументов.Добавить();
			СтрокаОбъектаМетаданных.Картинка = КартинкаДокумент; 
			
		Иначе
			Продолжить;
		КонецЕсли;
		
		СтрокаОбъектаМетаданных.Тестировать = Ложь;
		СтрокаОбъектаМетаданных.ЭтоГруппа = Истина;
		СтрокаОбъектаМетаданных.Представление = Источник.Синоним;
		СтрокаОбъектаМетаданных.ПолноеИмя     = ПолноеИмя;
		
		УзлыМетаданного = СтрокаОбъектаМетаданных.ПолучитьЭлементы();
		Для Каждого КомандаПечати Из КомандыПечати Цикл
			
			Если ЗначениеЗаполнено(КомандаПечати.Обработчик) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаКоманды							= УзлыМетаданного.Добавить();
			СтрокаКоманды.Тестировать				= Ложь;
			СтрокаКоманды.ЭтоГруппа					= Ложь;
			СтрокаКоманды.Представление				= КомандаПечати.Представление;
			СтрокаКоманды.Имя                       = Источник.Имя;
			СтрокаКоманды.МенеджерПечати			= КомандаПечати.МенеджерПечати;
			СтрокаКоманды.Идентификатор				= КомандаПечати.Идентификатор;
			СтрокаКоманды.ДополнительныеПараметры	= КомандаПечати.ДополнительныеПараметры;
			СтрокаКоманды.ПолноеИмя                 = СтрокаОбъектаМетаданных.ПолноеИмя + "." + КомандаПечати.Идентификатор;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеМетаданными_Документы

&НаСервере
Процедура ЗаполнитьДокументыКонфигурации()
	
	НовоеДерево = ДеревоМетаданныхКонфигурации("Документы");

	ДокументыКонфигурации.ПолучитьЭлементы().Очистить();
	
	ЗаполнитьКоллекциюЭлементовДереваДанныхФормы(ДокументыКонфигурации.ПолучитьЭлементы(), НовоеДерево);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеМетаданными_Справочники

&НаСервере
Процедура ЗаполнитьСправочникиКонфигурации()
	
	НовоеДерево = ДеревоМетаданныхКонфигурации("Справочники,ПланыВидовХарактеристик,ПланыВидовРасчета");

	СправочникиКонфигурации.ПолучитьЭлементы().Очистить();
	
	ЗаполнитьКоллекциюЭлементовДереваДанныхФормы(СправочникиКонфигурации.ПолучитьЭлементы(), НовоеДерево);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ВыборОбъектов

&НаКлиенте
Функция ВыбранныеОбъектыМетаданных()
	
	ОбъектыМетаданных = Новый Массив;
	
	СобратьОбъектыМетаданных(СправочникиКонфигурации, ОбъектыМетаданных);
	СобратьОбъектыМетаданных(ДокументыКонфигурации,   ОбъектыМетаданных);
	СобратьОбъектыМетаданных(ФормыОбъектов,           ОбъектыМетаданных); 
	СобратьОбъектыМетаданных(ВариантыОтчетов,         ОбъектыМетаданных); 
	СобратьОбъектыМетаданных(ПечатныеФормы,           ОбъектыМетаданных);
	
	Возврат ОбъектыМетаданных;	
	
КонецФункции

&НаКлиенте
Процедура СобратьОбъектыМетаданных(ВеткаДерва, ОбъектыМетаданных)
	
	Для Каждого СтрокаДерева Из ВеткаДерва.ПолучитьЭлементы() Цикл
		
		МожноТестировать = ЗначениеЗаполнено(СтрокаДерева.ПолноеИмя)
			И СтрЧислоВхождений(СтрокаДерева.ПолноеИмя, ".") = 1
			И ОбъектыМетаданных.Найти(СтрокаДерева.ПолноеИмя) = Неопределено;
		
		Если СтрокаДерева.Тестировать И МожноТестировать Тогда
			
			ОбъектыМетаданных.Добавить(СтрокаДерева.ПолноеИмя); 
			
		КонецЕсли;
		
		СобратьОбъектыМетаданных(СтрокаДерева, ОбъектыМетаданных);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВыбранныеОбъектыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Свойство("ПерезаполнитьОбъектыМетаданных") И Результат.ПерезаполнитьОбъектыМетаданных Тогда
		
		Проверки_Заполнить(Неопределено);
		
	Иначе
		
		ПроставитьПометкуВПодчиненныхСтроках(СправочникиКонфигурации, Ложь);
		ПроставитьПометкуВПодчиненныхСтроках(ДокументыКонфигурации,   Ложь);
		ПроставитьПометкуВПодчиненныхСтроках(ФормыОбъектов,           Ложь); 
		ПроставитьПометкуВПодчиненныхСтроках(ВариантыОтчетов,         Ложь); 
		ПроставитьПометкуВПодчиненныхСтроках(ПечатныеФормы,           Ложь); 
		
	КонецЕсли;
	
	Если Результат.Свойство("ОбъектыМетаданных") Тогда
		
		ОбъектыМетаданных = СтрРазделить(Результат.ОбъектыМетаданных, Символы.ПС, Ложь);
		
		ВыбратьОбъектыМетаданных(СправочникиКонфигурации, ОбъектыМетаданных);
		ВыбратьОбъектыМетаданных(ДокументыКонфигурации,   ОбъектыМетаданных);
		ВыбратьОбъектыМетаданных(ФормыОбъектов,           ОбъектыМетаданных); 
		ВыбратьОбъектыМетаданных(ВариантыОтчетов,         ОбъектыМетаданных); 
		ВыбратьОбъектыМетаданных(ПечатныеФормы,           ОбъектыМетаданных); 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОбъектыМетаданных(ВеткаДерва, ОбъектыМетаданных)
	
	Для Каждого СтрокаДерева Из ВеткаДерва.ПолучитьЭлементы() Цикл
		
		МожноТестировать = ЗначениеЗаполнено(СтрокаДерева.ПолноеИмя)
			И СтрЧислоВхождений(СтрокаДерева.ПолноеИмя, ".") = 1
			И ОбъектыМетаданных.Найти(СтрокаДерева.ПолноеИмя) <> Неопределено; 
		
		Если Не СтрокаДерева.Тестировать И МожноТестировать Тогда
			
			СтрокаДерева.Тестировать = 1;
			
			ПриИзмененииПометкиВСтрокеДерева(СтрокаДерева);
			
		КонецЕсли;
		
		ВыбратьОбъектыМетаданных(СтрокаДерева, ОбъектыМетаданных);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Тестирование

&НаКлиенте
Процедура СобратьПроверки(РезультатыПроверок)
	
	РежимыПроверки = РежимыПроверки();
	
	РезультатыПроверок.Вставить("ОбщийВесПроверок", 0);
	РезультатыПроверок.Вставить("ТекущийВесПроверок", 0);
	
	РезультатыПроверок.Вставить("СсылочныеОбъекты", Новый Массив);
		
	Если ПроверятьФормы Тогда
		
		ВесПроверки = ВесРежимаПроверки(РежимыПроверки.Формы);
		СобратьПроверкиИзДерева(ФормыОбъектов.ПолучитьЭлементы(), ВесПроверки, 1, РезультатыПроверок);
		
	КонецЕсли; 
	
	Если ПроверятьДокументы Тогда
		
		ВесПроверки = ВесРежимаПроверки(РежимыПроверки.Документы);
		Если Документы_КоличествоОбъектов > 1 Тогда
			ВесПроверки = ВесПроверки * Документы_КоличествоОбъектов;	
		КонецЕсли;
		
		СобратьПроверкиИзДерева(ДокументыКонфигурации.ПолучитьЭлементы(), ВесПроверки, 2, РезультатыПроверок); 
		
	КонецЕсли;
	
	Если ПроверятьСправочники Тогда 
		
		ВесПроверки = ВесРежимаПроверки(РежимыПроверки.Справочники);
		Если Справочники_КоличествоОбъектов > 1 Тогда
			ВесПроверки = ВесПроверки * Справочники_КоличествоОбъектов;	
		КонецЕсли;
		
		СобратьПроверкиИзДерева(СправочникиКонфигурации.ПолучитьЭлементы(), ВесПроверки, 2, РезультатыПроверок);
		
	КонецЕсли;
	
	Если ПроверятьОтчеты Тогда
		
		ВесПроверки = ВесРежимаПроверки(РежимыПроверки.Отчеты);
		СобратьПроверкиИзДерева(ВариантыОтчетов.ПолучитьЭлементы(), ВесПроверки, 0, РезультатыПроверок); 
		
	КонецЕсли;
	
	Если ПроверятьПечать Тогда
		
		ВесПроверки = ВесРежимаПроверки(РежимыПроверки.Печать);
		СобратьПроверкиИзДерева(ПечатныеФормы.ПолучитьЭлементы(), ВесПроверки, 2, РезультатыПроверок); 
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатыПроверок.ОбщийВесПроверок) Тогда
		РезультатыПроверок.ОбщийВесПроверок = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СобратьПроверкиИзДерева(ЭлементыДерева, ВесПроверки, МогутБытьСсылки, РезультатыПроверок)
	
	Для Каждого СтрокаДерева Из ЭлементыДерева Цикл
		
		ДочерниеЭлементы =  СтрокаДерева.ПолучитьЭлементы();
		
		Если ДочерниеЭлементы.Количество() > 0 Тогда
			
			СобратьПроверкиИзДерева(ДочерниеЭлементы, ВесПроверки, МогутБытьСсылки, РезультатыПроверок); 
			
		Иначе
			
			Если СтрокаДерева.Тестировать Тогда 
				
				РезультатыПроверок.ОбщийВесПроверок = РезультатыПроверок.ОбщийВесПроверок + ВесПроверки;
				
				ДобавитьСсылочныйОбъектДляПроверки(МогутБытьСсылки, СтрокаДерева, РезультатыПроверок);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСсылочныйОбъектДляПроверки(МогутБытьСсылки, СтрокаДерева, РезультатыПроверок)
	
	Если МогутБытьСсылки = 2 Тогда
		ЕстьСсылки = Истина;
	ИначеЕсли МогутБытьСсылки = 1 Тогда 
		ЕстьСсылки = СтрокаДерева.ЕстьСсылки;
	Иначе
		ЕстьСсылки = Ложь;	
	КонецЕсли;
	
	Если ЕстьСсылки И ЗначениеЗаполнено(СтрокаДерева.ПолноеИмя) Тогда
		
		ПолноеИмяОбъекта = СтрокаДерева.ПолноеИмя;
		
		Если СтрЧислоВхождений(ПолноеИмяОбъекта, ".") > 1 Тогда
			
			КускиИмени = СтрРазделить(ПолноеИмяОбъекта, ".");
			ПолноеИмяОбъекта = КускиИмени[0] + "." + КускиИмени[1]; 
			
		КонецЕсли; 
		
		Если РезультатыПроверок.СсылочныеОбъекты.Найти(ПолноеИмяОбъекта) = Неопределено Тогда
			РезультатыПроверок.СсылочныеОбъекты.Добавить(ПолноеИмяОбъекта);
		КонецЕсли;
		
	КонецЕсли;
					
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСсылкиНаОбъекты(РезультатыПроверок)
	
	Если Не ЗначениеЗаполнено(РезультатыПроверок.СсылочныеОбъекты) Тогда
		Возврат;	
	КонецЕсли;
	
	КусокОбъединить = "
	|ОБЪЕДИНИТЬ ВСЕ
	|";	
	
	КускиЗапроса = Новый Массив;
	СчетчикОбъектов = 0;
	Для Каждого ПолноеИмяОбъекта Из РезультатыПроверок.СсылочныеОбъекты Цикл
		
		СчетчикОбъектов = СчетчикОбъектов + 1;
		
		Если СчетчикОбъектов > 1 Тогда
			КускиЗапроса.Добавить(КусокОбъединить);	
		КонецЕсли;
		
		Если СтрНачинаетсяС(ПолноеИмяОбъекта, "Документ.") 
			Или СтрНачинаетсяС(ПолноеИмяОбъекта, "БизнесПроцессы.") Или СтрНачинаетсяС(ПолноеИмяОбъекта, "Задачи.") Тогда
			
			КусокЗапроса = ТекстЗапросаСсылокДокумента(ПолноеИмяОбъекта, Документы_КоличествоОбъектов);
			
		Иначе
			
			КусокЗапроса = ТекстЗапросаСсылокСправочника(ПолноеИмяОбъекта, Справочники_КоличествоОбъектов);
			
		КонецЕсли;
		
		Если СчетчикОбъектов > 1 Тогда
			КусокЗапроса = СтрЗаменить(КусокЗапроса, "РАЗРЕШЕННЫЕ ", "");
		КонецЕсли;
		
		КускиЗапроса.Добавить(КусокЗапроса);	
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(КускиЗапроса, Символы.ПС);
	
	ДатаЗапрета = ПоследняяДатаЗапрета();
	Если Не ЗначениеЗаполнено(ДатаЗапрета) Тогда
		ДатаЗапрета = '20121212';	
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаЗапрета", ДатаЗапрета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = СсылкиНаОбъекты.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстЗапросаСсылокДокумента(ПолноеИмя, КоличествоСсылок)
	
	Если РазрешеноПроведениеУОбъектаМетаданных(ПолноеИмя) Тогда
		
		Возврат ТекстЗапросаСсылокДокументаСПроведением(ПолноеИмя, КоличествоСсылок);
		
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	""&ПолноеИмя"" КАК ПолноеИмя,
	|	Таблица.Ссылка КАК Ссылка,
	|	ЛОЖЬ КАК ЭтоГруппа,
	|	ЛОЖЬ КАК Проведен
	|ИЗ
	|	&ПолноеИмя КАК Таблица
	|ГДЕ
	|	НЕ Таблица.ПометкаУдаления
	| 	И Таблица.Дата > &ДатаЗапрета";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмя", ПолноеИмя);

	Если КоличествоСсылок > 1 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 1", "ПЕРВЫЕ " + КоличествоСсылок);
	КонецЕсли;
	
	Возврат ТекстЗапроса; 
	
КонецФункции

&НаСервереБезКонтекста
Функция РазрешеноПроведениеУОбъектаМетаданных(ПолноеИмя)
	
	Если СтрНачинаетсяС(ПолноеИмя, "Документ.") Тогда
		
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
		
		РазрешеноПроведение = (МетаданныеОбъекта.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить); 	
		
	Иначе
		
		РазрешеноПроведение = Ложь;
		
	КонецЕсли;
	
	Возврат РазрешеноПроведение;
	
КонецФункции

&НаСервере
Функция ПоследняяДатаЗапрета()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ДатыЗапретаИзменения.ДатаЗапрета) КАК ДатаЗапрета
		|ИЗ
		|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения";
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ДатаЗапрета = ?(ЗначениеЗаполнено(Выборка.ДатаЗапрета), КонецДня(Выборка.ДатаЗапрета), Дата(1, 1, 1));
	
	Возврат ДатаЗапрета;
		
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаСсылокДокументаСПроведением(ПолноеИмя, КоличествоСсылок)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	""&ПолноеИмя"" КАК ПолноеИмя,
	|	Таблица.Ссылка КАК Ссылка,
	|	ЛОЖЬ КАК ЭтоГруппа,
	|	Таблица.Проведен КАК Проведен
	|ИЗ
	|	&ПолноеИмя КАК Таблица
	|ГДЕ
	|	НЕ Таблица.ПометкаУдаления
	| 	И Таблица.Дата > &ДатаЗапрета
	|	И Таблица.Проведен";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмя", ПолноеИмя);

	Если КоличествоСсылок > 1 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 1", "ПЕРВЫЕ " + КоличествоСсылок);
	КонецЕсли;
	
	Возврат ТекстЗапроса; 
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаСсылокСправочника(ПолноеИмя, КоличествоСсылок)
	
	Если ЕстьГруппыУОбъектаМетаданных(ПолноеИмя) Тогда
		
		Возврат ТекстЗапросаСсылокСправочникаСИерархией(ПолноеИмя, КоличествоСсылок);
		
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	""&ПолноеИмя"" КАК ПолноеИмя,
	|	Таблица.Ссылка КАК Ссылка,
	|	ЛОЖЬ КАК ЭтоГруппа,
	|	ЛОЖЬ КАК Проведен
	|ИЗ
	|	&ПолноеИмя КАК Таблица
	|ГДЕ
	|	НЕ Таблица.ПометкаУдаления";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмя", ПолноеИмя);

	Если КоличествоСсылок > 1 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 1", "ПЕРВЫЕ " + КоличествоСсылок);
	КонецЕсли;
	
	Возврат ТекстЗапроса; 
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьГруппыУОбъектаМетаданных(ПолноеИмя, МетаданныеОбъекта = Неопределено)
	
	Если МетаданныеОбъекта = Неопределено Тогда
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
	КонецЕсли;
	
	Если СтрНачинаетсяС(ПолноеИмя, "Справочник.") Тогда
		
		ЕстьГруппы = МетаданныеОбъекта.Иерархический И
			МетаданныеОбъекта.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов;
		
	ИначеЕсли СтрНачинаетсяС(ПолноеИмя, "ПланВидовХарактеристик.") Тогда
		
		ЕстьГруппы = МетаданныеОбъекта.Иерархический; 
		
	Иначе
		
		ЕстьГруппы = Ложь;
		
	КонецЕсли;
	
	Возврат ЕстьГруппы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаСсылокСправочникаСИерархией(ПолноеИмя, КоличествоСсылок)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	""&ПолноеИмя"" КАК ПолноеИмя,
	|	Таблица.Ссылка КАК Ссылка,
	|	Таблица.ЭтоГруппа КАК ЭтоГруппа,
	|	ЛОЖЬ КАК Проведен
	|ИЗ
	|	&ПолноеИмя КАК Таблица
	|ГДЕ
	|	НЕ Таблица.ПометкаУдаления
	|	И НЕ Таблица.ЭтоГруппа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	""&ПолноеИмя"",
	|	Таблица.Ссылка,
	|	Таблица.ЭтоГруппа,
	|	ЛОЖЬ
	|ИЗ
	|	&ПолноеИмя КАК Таблица
	|ГДЕ
	|	НЕ Таблица.ПометкаУдаления
	|	И Таблица.ЭтоГруппа";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмя", ПолноеИмя);

	Если КоличествоСсылок > 1 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 1", "ПЕРВЫЕ " + КоличествоСсылок);
	КонецЕсли;
	
	Возврат ТекстЗапроса; 
	
КонецФункции

#Область Тестирование_Формы

&НаКлиенте
Процедура ПроверитьФормы(РезультатыПроверок)
	
	ОткрытыеОкна = Новый Массив;
	Окна = ПолучитьОкна();
	Для Счетчик = 0 По Окна.Количество() - 1 Цикл
		Если Окна[Счетчик] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОткрытыеОкна.Добавить(Окна[Счетчик]);
	КонецЦикла;
	
	РезультатыПроверок.Вставить("ТекущийРежимПроверки", РежимыПроверки().Формы);
	КартинкаРежима = КартинкаРежимаПроверки(РезультатыПроверок.ТекущийРежимПроверки);
	ВесПроверки = ВесРежимаПроверки(РезультатыПроверок.ТекущийРежимПроверки);
	
	Для Каждого СтрокаКласса Из ФормыОбъектов.ПолучитьЭлементы() Цикл
		
		Для Каждого СтрокаОбъекта Из СтрокаКласса.ПолучитьЭлементы() Цикл
			
			Для Каждого СтрокаФормы Из СтрокаОбъекта.ПолучитьЭлементы() Цикл
				
				Если Не СтрокаФормы.Тестировать Или Формы_ЭтоИсключение(СтрокаФормы.ПолноеИмя) Тогда
					Продолжить;
				КонецЕсли;
					
				ПараметрыФормы = Новый Структура(СтрокаФормы.ПараметрыФормы); 
				
				ФормаДляТестирования = Новый Структура; 
				ФормаДляТестирования.Вставить("ИмяФормы", СтрокаФормы.ПолноеИмя);
				ФормаДляТестирования.Вставить("ПараметрыФормы", ПараметрыФормы);
				
				СсылкиОбъекта = Новый Массив;
				
				Если СтрокаКласса.ЕстьСсылки = Истина
					И (СтрокаФормы.ОсновнаяФорма = "ОсновнаяФормаОбъекта" Или СтрокаФормы.ОсновнаяФорма = "ОсновнаяФормаГруппы")  Тогда
					
					УсловияПоискаСсылок = Новый Структура;
					УсловияПоискаСсылок.Вставить("ПолноеИмя", СтрокаОбъекта.ПолноеИмя);
					
					Если СтрокаФормы.ОсновнаяФорма = "ОсновнаяФормаГруппы" Тогда	
						УсловияПоискаСсылок.Вставить("ЭтоГруппа", Истина);
					Иначе
						УсловияПоискаСсылок.Вставить("ЭтоГруппа", Ложь);
					КонецЕсли;
					
					НайденныеСтроки = СсылкиНаОбъекты.НайтиСтроки(УсловияПоискаСсылок);
					Для Каждого СтрокаНайденных Из НайденныеСтроки Цикл
						СсылкиОбъекта.Добавить(СтрокаНайденных.Ссылка); 	
					КонецЦикла;
					
				КонецЕсли;
				
				Для Каждого ТекущаяСсылка Из СсылкиОбъекта Цикл
					ПопытатьсяОткрытьФорму(РезультатыПроверок, ФормаДляТестирования, ТекущаяСсылка);
				КонецЦикла;
				
				ПопытатьсяОткрытьФорму(РезультатыПроверок, ФормаДляТестирования, Неопределено);
				
				РезультатыПроверок.ТекущийВесПроверок = РезультатыПроверок.ТекущийВесПроверок + ВесПроверки;
				
				ПрогрессПроверок = 100 * РезультатыПроверок.ТекущийВесПроверок / РезультатыПроверок.ОбщийВесПроверок;
				Состояние(РезультатыПроверок.ТекущийРежимПроверки, ПрогрессПроверок, СтрокаФормы.ПолноеИмя, КартинкаРежима); 
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПопытатьсяОткрытьФорму(РезультатыПроверок, ФормаДляТестирования, Ключ)
	
	Форма = Неопределено;
	ИмяФормыТестирования = ФормаДляТестирования.ИмяФормы;
	
	СтатусОшибка = РезультатыПроверок.СтатусыТестов.Ошибка;
	
	БылоИсключение = Ложь;
	
	Попытка
		
		ПараметрыФормы = Новый Структура;
		Для Каждого ЭлементПараметров Из ФормаДляТестирования.ПараметрыФормы Цикл
			ПараметрыФормы.Вставить(ЭлементПараметров.Ключ, ЭлементПараметров.Значение);	
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Ключ) Тогда
			ПараметрыФормы.Вставить("Ключ", Ключ);
			ОписаниеПроверки = "Открытие формы по ключу";
		Иначе
			ОписаниеПроверки = "Открытие пустой формы";
		КонецЕсли; 
		
		Если СтрНачинаетсяС(ИмяФормыТестирования, "Обработка.") Тогда
			//Форма = ПолучитьФорму(ИмяФормыТестирования, ПараметрыФормы); 
			Форма = ОткрытьФорму(ИмяФормыТестирования, ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.Независимый);
		Иначе
			
			Если Формы_ОткрыватьМодально Тогда
				Форма = ПолучитьФорму(ИмяФормыТестирования, ПараметрыФормы); 
				Если Форма <> Неопределено Тогда 
					Форма.ОткрытьМодально(1);
				КонецЕсли;
			Иначе
				Форма = ОткрытьФорму(ИмяФормыТестирования, ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.Независимый);
			КонецЕсли;
		
		КонецЕсли; 
		
		СтатусПройден = РезультатыПроверок.СтатусыТестов.Пройден;
		ДобавитьРезультатПроверки(СтатусПройден, ИмяФормыТестирования, Ключ, ОписаниеПроверки, РезультатыПроверок);
		
	Исключение
		
		ИнформацияОбИсключении = ИнформацияОбИсключении(ИнформацияОбОшибке());
		
		ОписаниеРезультата = "Ошибка при открытии формы: " + ИнформацияОбИсключении.ПодробнаяОшибка; 
			
		ДобавитьРезультатПроверки(СтатусОшибка, ИмяФормыТестирования, Ключ, ОписаниеРезультата, РезультатыПроверок);
		
		БылоИсключение = Истина;
		
	КонецПопытки;
		
	Если Не БылоИсключение И (Форма = Неопределено Или Форма.Окно = Неопределено) Тогда
		
		ОписаниеРезультата = "Форма не открылась. Возможно в обработчиках ПриСоздании или ПриОткрытии устанавливается отказ";
		
		ДобавитьРезультатПроверки(СтатусОшибка, ИмяФормыТестирования, Ключ, ОписаниеРезультата, РезультатыПроверок);
		
	КонецЕсли;
	
	Если Форма <> Неопределено И ЗначениеЗаполнено(Ключ) Тогда
		
		ПроверитьЗаполнениеФормы(РезультатыПроверок, Форма, Ключ);
		
	КонецЕсли;
	
	Если Не Формы_ОткрыватьМодально И Форма <> Неопределено Тогда 
		Попытка
			ЗакрытьОткрывшиесяОкна(Форма);
			Форма.Модифицированность = Ложь;
			Форма.Закрыть();
		Исключение
			Форма = Неопределено;
		КонецПопытки;
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеФормы(РезультатыПроверок, Форма, Ключ)
	
	ИмяФормыТестирования = Форма.ИмяФормы;
	
	СтатусОшибка = РезультатыПроверок.СтатусыТестов.Ошибка;
	
	Попытка
		
		ФормаЗаполнена = Форма.ПроверитьЗаполнение();
		
		Если ФормаЗаполнена Тогда
			
			ОписаниеРезультата = "Проверка заполнения в форме";
			СтатусПройден = РезультатыПроверок.СтатусыТестов.Пройден;
			ДобавитьРезультатПроверки(СтатусПройден, ИмяФормыТестирования, Ключ, ОписаниеРезультата, РезультатыПроверок);
			
		Иначе
			
			ОписаниеРезультата = "Объект не проходит проверку заполнения в форме";
			ДобавитьРезультатПроверки(СтатусОшибка, ИмяФормыТестирования, Ключ, ОписаниеРезультата, РезультатыПроверок);
				
		КонецЕсли;
		
	Исключение
		
		ИнформацияОбИсключении = ИнформацияОбИсключении(ИнформацияОбОшибке());
		
		ОписаниеРезультата = "Ошибка проверки заполнения в форме: " + ИнформацияОбИсключении.ПодробнаяОшибка;
		ДобавитьРезультатПроверки(СтатусОшибка, ИмяФормыТестирования, Ключ, ОписаниеРезультата, РезультатыПроверок);
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция Формы_ЭтоИсключение(ИмяФормы)
	
	МассивИсключений = Новый Массив();
	
	Возврат МассивИсключений.Найти(ИмяФормы) <> Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ЗакрытьОткрывшиесяОкна(ФормаТестируемогоОбъекта = Неопределено)
	
	ТекущееОкно = ЭтаФорма.Окно;
	
	ОкнаНаЗакрытие = Новый Массив;
	
	Окна = ПолучитьОкна();
	Для Икс = 0 По Окна.Количество() - 1 Цикл
		
		Если Окна[Икс] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Окошко = Окна[Икс];
		
		Если ОткрытыеОкна.Найти(Окошко) <> Неопределено ИЛИ ТекущееОкно = Окошко Тогда
			Продолжить;
		КонецЕсли;
		
		ОкнаНаЗакрытие.Добавить(Окошко);
		
	КонецЦикла;
	
	Для Каждого Окошко Из ОкнаНаЗакрытие Цикл
		Для Каждого Форма Из Окошко.Содержимое Цикл
			
			Если Форма = ФормаТестируемогоОбъекта Тогда
				Продолжить;
			КонецЕсли;
			
			Если Форма.Открыта() Тогда
				Форма.Закрыть();
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Тестирование_Документы

&НаКлиенте
Процедура ПроверитьДокументы(РезультатыПроверок)
	
	РезультатыПроверок.Вставить("ТекущийРежимПроверки", РежимыПроверки().Документы);
	КартинкаРежима = КартинкаРежимаПроверки(РезультатыПроверок.ТекущийРежимПроверки);
	ВесПроверки = ВесРежимаПроверки(РезультатыПроверок.ТекущийРежимПроверки);
	
	Для Каждого СтрокаКласса Из ДокументыКонфигурации.ПолучитьЭлементы() Цикл
		
		Для Каждого СтрокаОбъекта Из СтрокаКласса.ПолучитьЭлементы() Цикл
			
			Если Не СтрокаОбъекта.Тестировать Тогда
				Продолжить;	
			КонецЕсли;
				
			УсловияПоискаСсылок = Новый Структура;
			УсловияПоискаСсылок.Вставить("ПолноеИмя", СтрокаОбъекта.ПолноеИмя);
			
			НайденныеСтроки = СсылкиНаОбъекты.НайтиСтроки(УсловияПоискаСсылок);
			Если НайденныеСтроки.Количество() = 0 Тогда
				
				ОписаниеПроверки = "Не найдены документы (возможно из-за даты запрета).";
				
				СтатусПропущен = РезультатыПроверок.СтатусыТестов.Пропущен;
				ДобавитьРезультатПроверки(СтатусПропущен, СтрокаОбъекта.ПолноеИмя, Неопределено, ОписаниеПроверки, РезультатыПроверок);
				
			Иначе
				
				Для Каждого СтрокаНайденных Из НайденныеСтроки Цикл 
					
					ПерезаписатьДокумент(СтрокаОбъекта.ПолноеИмя, СтрокаНайденных.Ссылка, СтрокаНайденных.Проведен, РезультатыПроверок);
					
					РезультатыПроверок.ТекущийВесПроверок = РезультатыПроверок.ТекущийВесПроверок + ВесПроверки;
					
					ПрогрессПроверок = 100 * РезультатыПроверок.ТекущийВесПроверок / РезультатыПроверок.ОбщийВесПроверок;
					Состояние(РезультатыПроверок.ТекущийРежимПроверки, ПрогрессПроверок, СтрокаОбъекта.ПолноеИмя, КартинкаРежима);
					
				КонецЦикла;
				
			КонецЕсли;
				
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПерезаписатьДокумент(ПолноеИмя, ДокументСсылка, Проведен, РезультатыПроверок)
	
	СтатусОшибка = РезультатыПроверок.СтатусыТестов.Ошибка;
	
	Попытка
		
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		
	Исключение
		
		ИнформацияОбИсключении = ИнформацияОбИсключении(ИнформацияОбОшибке());
		
		ОписаниеПроверки = "Ошибка при получении объекта документа: " + ИнформацияОбИсключении.ПодробнаяОшибка;
		
		ДобавитьРезультатПроверки(СтатусОшибка, ПолноеИмя, ДокументСсылка, ОписаниеПроверки, РезультатыПроверок);
		
		Возврат;
		
	КонецПопытки;
	
	ПроверитьЗаполнениеОбъекта(ПолноеИмя, ДокументСсылка, ДокументОбъект, РезультатыПроверок);
	
	Если Проведен Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	Иначе
		РежимЗаписи = РежимЗаписиДокумента.Запись; 
	КонецЕсли;
	
	Попытка
		
		ДокументОбъект.Записать(РежимЗаписи);
		
		ОписаниеПроверки = ?(Проведен, "Проведение документа", "Запись документа"); 
		
		СтатусПройден = РезультатыПроверок.СтатусыТестов.Пройден;
		ДобавитьРезультатПроверки(СтатусПройден, ПолноеИмя, ДокументСсылка, ОписаниеПроверки, РезультатыПроверок);
		
	Исключение
		
		ИнформацияОбИсключении = ИнформацияОбИсключении(ИнформацияОбОшибке());
		
		ОписаниеПроверки = ?(Проведен, "Ошибка при проведении документа: ", "Ошибка при записи документа: "); 
		ОписаниеПроверки = ОписаниеПроверки + ИнформацияОбИсключении.ПодробнаяОшибка;
		
		ДобавитьРезультатПроверки(СтатусОшибка, ПолноеИмя, ДокументСсылка, ОписаниеПроверки, РезультатыПроверок);
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьЗаполнениеОбъекта(ПолноеИмя, Ссылка, Объект, РезультатыПроверок) 
	
	СтатусОшибка = РезультатыПроверок.СтатусыТестов.Ошибка; 
	
	Попытка
		
		ЕстьОшибкиЗаполнения = Не Объект.ПроверитьЗаполнение();
		
	Исключение
		
		ИнформацияОбИсключении = ИнформацияОбИсключении(ИнформацияОбОшибке());
		
		ОписаниеПроверки = "Ошибка при проверке заполнения: " + ИнформацияОбИсключении.ПодробнаяОшибка;
		
		ДобавитьРезультатПроверки(СтатусОшибка, ПолноеИмя, Ссылка, ОписаниеПроверки, РезультатыПроверок);
		
		Возврат; 
		
	КонецПопытки;
	
	Если ЕстьОшибкиЗаполнения Тогда
		
		СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
		
		ТекстыСообщений = Новый Массив;
		Для Каждого СтрокаСообщения Из СообщенияПользователю Цикл
			ТекстыСообщений.Добавить(СтрокаСообщения.Текст);	
		КонецЦикла;
		ВесьТекстСообщений = СтрСоединить(ТекстыСообщений, Символы.ПС); 
		
		ОписаниеПроверки = "Ошибка проверки заполнения: " + ВесьТекстСообщений;	
		
		ДобавитьРезультатПроверки(СтатусОшибка, ПолноеИмя, Ссылка, ОписаниеПроверки, РезультатыПроверок);
		
	Иначе
		
		ОписаниеПроверки = "Проверка заполнения"; 
		
		СтатусПройден = РезультатыПроверок.СтатусыТестов.Пройден;
		ДобавитьРезультатПроверки(СтатусПройден, ПолноеИмя, Ссылка, ОписаниеПроверки, РезультатыПроверок);
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область Тестирование_Справочники

&НаКлиенте
Процедура ПроверитьСправочники(РезультатыПроверок)
	
	РезультатыПроверок.Вставить("ТекущийРежимПроверки", РежимыПроверки().Справочники);
	КартинкаРежима = КартинкаРежимаПроверки(РезультатыПроверок.ТекущийРежимПроверки);
	ВесПроверки = ВесРежимаПроверки(РезультатыПроверок.ТекущийРежимПроверки);
	
	Для Каждого СтрокаКласса Из СправочникиКонфигурации.ПолучитьЭлементы() Цикл
		
		Для Каждого СтрокаОбъекта Из СтрокаКласса.ПолучитьЭлементы() Цикл
			
			Если Не СтрокаОбъекта.Тестировать Тогда
				Продолжить;	
			КонецЕсли;
				
			УсловияПоискаСсылок = Новый Структура;
			УсловияПоискаСсылок.Вставить("ПолноеИмя", СтрокаОбъекта.ПолноеИмя);
			
			НайденныеСтроки = СсылкиНаОбъекты.НайтиСтроки(УсловияПоискаСсылок);
			Если НайденныеСтроки.Количество() = 0 Тогда
				
				ОписаниеПроверки = "Не найдены элементы справочника.";
				
				СтатусПропущен = РезультатыПроверок.СтатусыТестов.Пропущен;
				ДобавитьРезультатПроверки(СтатусПропущен, СтрокаОбъекта.ПолноеИмя, Неопределено, ОписаниеПроверки, РезультатыПроверок);
				
			Иначе
				
				Для Каждого СтрокаНайденных Из НайденныеСтроки Цикл 
					
					ПерезаписатьСправочник(СтрокаОбъекта.ПолноеИмя, СтрокаНайденных.Ссылка, СтрокаНайденных.ЭтоГруппа, РезультатыПроверок);
					
					РезультатыПроверок.ТекущийВесПроверок = РезультатыПроверок.ТекущийВесПроверок + ВесПроверки;
					
					ПрогрессПроверок = 100 * РезультатыПроверок.ТекущийВесПроверок / РезультатыПроверок.ОбщийВесПроверок;
					Состояние(РезультатыПроверок.ТекущийРежимПроверки, ПрогрессПроверок, СтрокаОбъекта.ПолноеИмя, КартинкаРежима);
					
				КонецЦикла;
				
			КонецЕсли;
				
		КонецЦикла;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПерезаписатьСправочник(ПолноеИмя, СправочникСсылка, ЭтоГруппа, РезультатыПроверок)
	
	СтатусОшибка = РезультатыПроверок.СтатусыТестов.Ошибка;
	
	Попытка
		
		СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
		
	Исключение
		
		ИнформацияОбИсключении = ИнформацияОбИсключении(ИнформацияОбОшибке());
		
		ОписаниеПроверки = "Ошибка при получении объекта справочника: " + ИнформацияОбИсключении.ПодробнаяОшибка;
		
		ДобавитьРезультатПроверки(СтатусОшибка, ПолноеИмя, СправочникСсылка, ОписаниеПроверки, РезультатыПроверок);
		
		Возврат;
		
	КонецПопытки;
	
	ПроверитьЗаполнениеОбъекта(ПолноеИмя, СправочникСсылка, СправочникОбъект, РезультатыПроверок);
	
	Попытка
		
		СправочникОбъект.Записать();
		
		ОписаниеПроверки = ?(ЭтоГруппа, "Запись группы", "Запись элемента"); 
		
		СтатусПройден = РезультатыПроверок.СтатусыТестов.Пройден;
		ДобавитьРезультатПроверки(СтатусПройден, ПолноеИмя, СправочникСсылка, ОписаниеПроверки, РезультатыПроверок);
		
	Исключение
		
		ИнформацияОбИсключении = ИнформацияОбИсключении(ИнформацияОбОшибке());
		
		ОписаниеПроверки = ?(ЭтоГруппа, "Ошибка при записи группы: ", "Ошибка при записи элемента: "); 
		ОписаниеПроверки = ОписаниеПроверки + ИнформацияОбИсключении.ПодробнаяОшибка;
		
		ДобавитьРезультатПроверки(СтатусОшибка, ПолноеИмя, СправочникСсылка, ОписаниеПроверки, РезультатыПроверок);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область Тестирование_Отчеты

&НаКлиенте
Процедура ПроверитьОтчеты(РезультатыПроверок)
	
	РезультатыПроверок.Вставить("ТекущийРежимПроверки", РежимыПроверки().Отчеты);
	КартинкаРежима = КартинкаРежимаПроверки(РезультатыПроверок.ТекущийРежимПроверки);
	ВесПроверки = ВесРежимаПроверки(РезультатыПроверок.ТекущийРежимПроверки);
	
	ПараметрыФормированияОтчета = Новый Структура("ИмяОтчета, ХешНастроек, Настройки, КлючВарианта, ОтчетВариант, ОтчетВладелец");
	
	Для Каждого СтрокаГруппы Из ВариантыОтчетов.ПолучитьЭлементы() Цикл
		
		Для Каждого СтрокаЭлемента Из СтрокаГруппы.ПолучитьЭлементы() Цикл
			
			Если Не СтрокаЭлемента.Тестировать Тогда
				Продолжить;
			КонецЕсли;
				
			ЗаполнитьЗначенияСвойств(ПараметрыФормированияОтчета, СтрокаЭлемента); 
			СформироватьОтчет(ПараметрыФормированияОтчета, РезультатыПроверок);
			
			РезультатыПроверок.ТекущийВесПроверок = РезультатыПроверок.ТекущийВесПроверок + ВесПроверки;
			
			ПрогрессПроверок = 100 * РезультатыПроверок.ТекущийВесПроверок / РезультатыПроверок.ОбщийВесПроверок;
			Состояние(РезультатыПроверок.ТекущийРежимПроверки, ПрогрессПроверок, СтрокаЭлемента.Представление, КартинкаРежима); 
				
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СформироватьОтчет(Параметры, РезультатыПроверок)
	
	ЭтоВнешнийОтчет	  = ТипЗнч(Параметры.ОтчетВладелец) = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки");
	ПроверяемыйОбъект = ?(ЭтоВнешнийОтчет, "ВнешнийОтчет.", "Отчет.") + Параметры.ИмяОтчета;
	СсылкаНаОбъект = Параметры.ОтчетВариант;
	
	СтатусОшибка = РезультатыПроверок.СтатусыТестов.Ошибка;
	
	Попытка
		
		Если ЭтоВнешнийОтчет Тогда
			Отчет = ДополнительныеОтчетыИОбработкиВызовСервера.ОбъектВнешнейОбработки(Параметры.ОтчетВладелец);
		Иначе
			Отчет = Отчеты[Параметры.ИмяОтчета].Создать();
		КонецЕсли;
		
	Исключение
		
		ИнформацияОбИсключении = ИнформацияОбИсключении(ИнформацияОбОшибке());
		
		ОписаниеРезультата = "Ошибка при попытке создать объект отчета: " + ИнформацияОбИсключении.ПодробнаяОшибка; 
			
		ДобавитьРезультатПроверки(СтатусОшибка, ПроверяемыйОбъект, СсылкаНаОбъект, ОписаниеРезультата, РезультатыПроверок);
		
		Возврат;
		
	КонецПопытки;
	
	СхемаКомпоновкиДанных = Отчет.СхемаКомпоновкиДанных;
	
	Попытка
		
		КомпоновщикНастроек = Отчет.КомпоновщикНастроек;
		
	Исключение
		
		ИнформацияОбИсключении = ИнформацияОбИсключении(ИнформацияОбОшибке());
		
		ОписаниеРезультата = "Ошибка при получении компoновщика настроек отчета: " + ИнформацияОбИсключении.ПодробнаяОшибка; 
			
		ДобавитьРезультатПроверки(СтатусОшибка, ПроверяемыйОбъект, СсылкаНаОбъект, ОписаниеРезультата, РезультатыПроверок);
			
		Возврат;
		
	КонецПопытки;
	
	Попытка
	
		// Получение и загрузка настроек варианта отчета
		Если Параметры.ХешНастроек <> "" Тогда
			
			ПользовательскиеНастройки = Параметры.Настройки.Получить();
			КомпоновщикНастроек.ЗагрузитьНастройки(ПользовательскиеНастройки);
			
		Иначе
			НастройкиВарианта = Отчеты_НайтиНастройкиВарианта(СхемаКомпоновкиДанных, Параметры.КлючВарианта);
			
			Если НастройкиВарианта = Неопределено Тогда
				
				ОписаниеРезультата	= "Ошибка при получении настроек варианта отчета";
				
				ДобавитьРезультатПроверки(СтатусОшибка, ПроверяемыйОбъект, СсылкаНаОбъект, ОписаниеРезультата, РезультатыПроверок);

				Возврат;
				
			КонецЕсли;
			
			КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиВарианта);
			
		КонецЕсли;
		
	Исключение
		
		ИнформацияОбИсключении = ИнформацияОбИсключении(ИнформацияОбОшибке());
		
		ОписаниеРезультата = "Ошибка при попытке загрузить настройки в компоновщик: " + ИнформацияОбИсключении.ПодробнаяОшибка;
			
		ДобавитьРезультатПроверки(СтатусОшибка, ПроверяемыйОбъект, СсылкаНаОбъект, ОписаниеРезультата, РезультатыПроверок);
			
	КонецПопытки;
	
	ФильтрНастроект = Новый Структура;
	//Фильтр.Вставить("КлючОбъекта", Параметры.ИмяОтчета + "/" + Параметры.КлючВарианта);
	КлючОбъекта = "Отчет." + Параметры.ИмяОтчета + "/" + Параметры.КлючВарианта + "/ТекущиеПользовательскиеНастройки";
	ФильтрНастроект.Вставить("КлючОбъекта",  КлючОбъекта);
	ФильтрНастроект.Вставить("Пользователь", ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	
	ВыборкаНастроек = ХранилищеСистемныхНастроек.Выбрать(ФильтрНастроект); 
	Если ВыборкаНастроек.Следующий() Тогда
		Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ВыборкаНастроек.Настройки);
	Иначе
		
		ФильтрНастроект.Удалить("Пользователь");
		ВыборкаНастроек = ХранилищеСистемныхНастроек.Выбрать(ФильтрНастроект);
		Если ВыборкаНастроек.Следующий() Тогда
			Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ВыборкаНастроек.Настройки); 
		Иначе
			
			ВыборкаНастроек = ХранилищеПользовательскихНастроекОтчетов.Выбрать(ФильтрНастроект); 
			Если ВыборкаНастроек.Следующий() Тогда
				Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ВыборкаНастроек.Настройки);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("КлючВарианта", Параметры.КлючВарианта);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Попытка
		
		ИнформацияРасшифровки = Неопределено;
		Отчет.СкомпоноватьРезультат(ТабличныйДокумент, ИнформацияРасшифровки); 
		
		ОписаниеРезультата = "Скомпонован результат";
		СтатусПройден = РезультатыПроверок.СтатусыТестов.Пройден;
		ДобавитьРезультатПроверки(СтатусПройден, ПроверяемыйОбъект, СсылкаНаОбъект, ОписаниеРезультата, РезультатыПроверок);
		
	Исключение
		
		ИнформацияОбИсключении = ИнформацияОбИсключении(ИнформацияОбОшибке()); 
		
		ОписаниеРезультата = "Ошибка при попытке скомпоновать отчет: " + ИнформацияОбИсключении.ПодробнаяОшибка;
		
		ДобавитьРезультатПроверки(СтатусОшибка, ПроверяемыйОбъект, СсылкаНаОбъект, ОписаниеРезультата, РезультатыПроверок);
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция Отчеты_НайтиНастройкиВарианта(СхемаКомпоновкиДанных, ИмяВарианта)
	
	НастройкиВарианта = Неопределено;
	Для Каждого Вариант Из СхемаКомпоновкиДанных.ВариантыНастроек Цикл
		Если Вариант.Имя = ИмяВарианта Тогда
			НастройкиВарианта = Вариант.Настройки;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НастройкиВарианта;
	
КонецФункции

#КонецОбласти

#Область Тестирование_Печать

&НаКлиенте
Процедура ПроверитьПечатныеФормы(РезультатыПроверок) 
	
	РезультатыПроверок.Вставить("ТекущийРежимПроверки", РежимыПроверки().Печать);
	КартинкаРежима = КартинкаРежимаПроверки(РезультатыПроверок.ТекущийРежимПроверки);
	ВесПроверки = ВесРежимаПроверки(РезультатыПроверок.ТекущийРежимПроверки);
	
	ПараметрыФормирования = Новый Структура("МенеджерПечати, Идентификатор, ДополнительныеПараметры, ПолноеИмя, ОбъектПечати, Представление");
	
	Для Каждого СтрокаКласса Из ПечатныеФормы.ПолучитьЭлементы() Цикл
		
		Для Каждого СтрокаОбъекта Из СтрокаКласса.ПолучитьЭлементы() Цикл
			
			Для Каждого СтрокаЭлемента Из СтрокаОбъекта.ПолучитьЭлементы() Цикл
				
				Если Не СтрокаЭлемента.Тестировать Тогда
					Продолжить;
				КонецЕсли;
				
				УсловияПоискаСсылок = Новый Структура;
				УсловияПоискаСсылок.Вставить("ПолноеИмя", СтрокаОбъекта.ПолноеИмя);
				УсловияПоискаСсылок.Вставить("ЭтоГруппа", Ложь);
				
				НайденныеСтроки = СсылкиНаОбъекты.НайтиСтроки(УсловияПоискаСсылок);
				Если НайденныеСтроки.Количество() = 0 Тогда
					
					ОписаниеПроверки = "Не найдены объекты печати.";
					
					СтатусПропущен = РезультатыПроверок.СтатусыТестов.Пропущен;
					ДобавитьРезультатПроверки(СтатусПропущен, СтрокаЭлемента.ПолноеИмя, Неопределено, ОписаниеПроверки, РезультатыПроверок);
					
				Иначе
					
					Для Каждого СтрокаНайденных Из НайденныеСтроки Цикл 
						
						ЗаполнитьЗначенияСвойств(ПараметрыФормирования, СтрокаЭлемента);
						
						ПараметрыФормирования.ОбъектПечати = СтрокаНайденных.Ссылка; 
						
						СформироватьПечатнуюФорму(ПараметрыФормирования, РезультатыПроверок);
						
						РезультатыПроверок.ТекущийВесПроверок = РезультатыПроверок.ТекущийВесПроверок + ВесПроверки;
						
						ПрогрессПроверок = 100 * РезультатыПроверок.ТекущийВесПроверок / РезультатыПроверок.ОбщийВесПроверок;
						Состояние(РезультатыПроверок.ТекущийРежимПроверки, ПрогрессПроверок, СтрокаЭлемента.Представление, КартинкаРежима); 
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПечатнуюФорму(Параметры, РезультатыПроверок)
	
	СтатусОшибка = РезультатыПроверок.СтатусыТестов.Ошибка;
	
	Идентификатор  = Параметры.Идентификатор;
	МенеджерПечати = Параметры.МенеджерПечати;
	ПолноеИмя	   = Параметры.ПолноеИмя;
	ОбъектПечати   = Параметры.ОбъектПечати;
	Представление  = Параметры.Представление;
	
	Если МенеджерПечати = "СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки"
		И СтрНайти(Идентификатор, "ВнешняяПечатнаяФорма.") = 0 Тогда
		Идентификатор = "ВнешняяПечатнаяФорма." + Идентификатор;
	КонецЕсли;
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(ОбъектПечати);
	
	ПараметрыПечати = ?(Параметры.Свойство("ДополнительныеПараметры"), Параметры.ДополнительныеПараметры, Новый Структура);
	Попытка
		
		РезультатПечати = УправлениеПечатью.СформироватьПечатныеФормы(МенеджерПечати, Идентификатор,
			МассивОбъектов, ПараметрыПечати);
				
		ОписаниеРезультата = "Печатная форма";
		СтатусПройден = РезультатыПроверок.СтатусыТестов.Пройден;
		ДобавитьРезультатПроверки(СтатусПройден, ПолноеИмя, ОбъектПечати, ОписаниеРезультата, РезультатыПроверок);
		
	Исключение
		
		ИнформацияОбИсключении = ИнформацияОбИсключении(ИнформацияОбОшибке()); 
		
		ОписаниеРезультата = "Ошибка при попытке сформировать печатную форму: " + ИнформацияОбИсключении.ПодробнаяОшибка;
		
		ДобавитьРезультатПроверки(СтатусОшибка, ПолноеИмя, ОбъектПечати, ОписаниеРезультата, РезультатыПроверок);
			
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Результаты

&НаКлиенте
Процедура ПодготовитьРезультаты()
	
	КорневыеУзлы = НайденныеОшибки.ПолучитьЭлементы();
	КорневыеУзлы.Очистить();
	
	ТекстПротокола = "";
	
	КоличествоОшибок = 0;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНайденныеОшибки(РезультатыПроверок)
	
	СтатусОшибка = СтатусыТестов().Ошибка; 
	
	СтрокиПротокола = Новый Массив;
	
	КорневыеУзлы = НайденныеОшибки.ПолучитьЭлементы();
	КорневыеУзлы.Очистить();
	ВеткиОшибок = Новый Соответствие;
	
	Для Каждого ЗаписьПротокола Из РезультатыПроверок.Протокол Цикл
		
		СтрокаПротокола = "%1, %2, %3, %4, %5, %6";
		
		СтрокаПротокола = СтрШаблон(СтрокаПротокола, ЗаписьПротокола.ДатаПроверки, ЗаписьПротокола.СтатусПроверки, ЗаписьПротокола.РежимПроверки,
			ЗаписьПротокола.ПолноеИмяОбъекта, ЗаписьПротокола.Данные, ЗаписьПротокола.Описание);	
		
		СтрокиПротокола.Добавить(СтрокаПротокола);
		
		Если ЗаписьПротокола.СтатусПроверки = СтатусОшибка Тогда
			
			ВеткаОшибок = ВеткиОшибок.Получить(ЗаписьПротокола.РежимПроверки);
			Если ВеткаОшибок = Неопределено Тогда 
				
				ВеткаОшибок = КорневыеУзлы.Добавить();
				ВеткаОшибок.РежимПроверки = ЗаписьПротокола.РежимПроверки;
				ВеткаОшибок.Картинка	  = КартинкаРежимаПроверки(ЗаписьПротокола.РежимПроверки);
				
				ВеткиОшибок.Вставить(ЗаписьПротокола.РежимПроверки, ВеткаОшибок);
				
			КонецЕсли;
			
			СтрокаОшибки = ВеткаОшибок.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОшибки, ЗаписьПротокола);
			СтрокаОшибки.Картинка = ВеткаОшибок.Картинка;
			
			КоличествоОшибок = КоличествоОшибок + 1;
			
		КонецЕсли;
			
	КонецЦикла;
	
	ТекстПротокола = СтрСоединить(СтрокиПротокола, Символы.ПС);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьРезультатПроверки(СтатусПроверки, ПолноеИмяОбъекта, Данные, Описание, РезультатыПроверок, КраткоеОписание = "")
	
	ЗаписьПротокола = Новый Структура;
	ЗаписьПротокола.Вставить("ДатаПроверки",     ТекущаяДата());
	ЗаписьПротокола.Вставить("РежимПроверки",    РезультатыПроверок.ТекущийРежимПроверки);
	ЗаписьПротокола.Вставить("СтатусПроверки",   СтатусПроверки);
	ЗаписьПротокола.Вставить("ПолноеИмяОбъекта", ПолноеИмяОбъекта);
	ЗаписьПротокола.Вставить("Данные",           Данные);
	ЗаписьПротокола.Вставить("Описание",         Описание);
	ЗаписьПротокола.Вставить("КраткоеОписание",  КраткоеОписание);
	
	РезультатыПроверок.Протокол.Добавить(ЗаписьПротокола);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИнформацияОбИсключении(ИнформацияОбОшибке = Неопределено)
	
	Результат = Новый Структура("КраткаяОшибка, ПодробнаяОшибка");
	
	Результат.КраткаяОшибка   = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	Результат.ПодробнаяОшибка = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Allure

&НаКлиенте
Процедура КаталогВыгрузкиАллюреНачалоВыбораЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 
	Тогда	
		Возврат;
	КонецЕсли;
	
	КаталогВыгрузкиAllure = ВыбранныеФайлы[0];
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОтчетАллюр(РезультатыПроверок)
	
	Если НЕ ДелатьОтчетВФорматеАллюр Тогда
		Возврат;
	КонецЕсли;
	
	Если СокрЛП(КаталогВыгрузкиAllure) = "" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не задан каталог выгрузки Allure");
		Возврат;
	КонецЕсли;
	
	СоздатьКаталогЕслиЕгоНет(КаталогВыгрузкиAllure, Истина);
	
	Отчеты = СоздатьОтчетАллюрНаСервере(РезультатыПроверок);
	ЭкспортироватьОтчетыАллюр(Отчеты);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКаталогЕслиЕгоНет(Путь, ОчиститьКаталог = Ложь)
	
	Если СокрЛП(Путь) = "" Тогда
		ВызватьИсключение "Передан пустой путь в процедуру <СоздатьКаталогЕслиЕгоНет>";
	КонецЕсли;
	
	СоздатьКаталогВСистеме(Путь);
	
	Если ОчиститьКаталог Тогда
		Попытка
			УдалитьФайлы(Путь, "*.json");
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКаталогВСистеме(Путь) Экспорт
	
	Попытка
		СоздатьКаталог(Путь);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ВызватьИсключение ТекстОшибки + Символы.ПС + Путь;
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ЭкспортироватьОтчетыАллюр(Отчеты)
	
	Для Каждого СтрокаОтчет Из Отчеты Цикл
		
		ИмяФайла = ПолучитьУникальноеИмяФайлаАллюр(КаталогВыгрузкиAllure);
		СохранитьОтчетАллюр(СтрокаОтчет, ИмяФайла);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчетАллюр(Отчет, Знач ИмяФайла)
	
	Если ТипЗнч(Отчет) = Тип("Строка") Тогда
		СтрокаJSON = Отчет;
	Иначе
		СтрокаJSON = Отчет.ПолучитьТекст();
	КонецЕсли;
	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.ANSI);
	ЗаписьТекста.Закрыть();
	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, , , Истина);
	ЗаписьТекста.Записать(СтрокаJSON);
	ЗаписьТекста.Закрыть();
	
КонецПроцедуры

&НаСервере
Функция СоздатьОтчетАллюрНаСервере(РезультатыПроверок)

	МассивОтчетов = Новый Массив;
	
	Для Каждого СтрокаИнформация Из РезультатыПроверок.Протокол Цикл
		
		ОписаниеШага = СоздатьОписаниеШага(СтрокаИнформация);
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, ОписаниеШага);
		Отчет = ЗаписьJSON.Закрыть();
		
		МассивОтчетов.Добавить(Отчет);
		
	КонецЦикла;
	
	Возврат МассивОтчетов;

КонецФункции

&НаСервере
Функция СоздатьОписаниеШага(Знач РезультатШага)
	
	РежимПроверки			= РезультатШага.РежимПроверки;
	Описание				= РезультатШага.Описание;
	КраткоеОписание			= РезультатШага.КраткоеОписание;
	Данные					= РезультатШага.Данные;
	ПроверяемыйОбъект		= РезультатШага.ПолноеИмяОбъекта;
	
	ОписаниеШага 			= ОписаниеСценарияАллюр();
	
	ОписаниеШага.Вставить("name"				, КраткоеОписание);
	ОписаниеШага.Вставить("description"			, РежимПроверки);

	ВставитьОписаниеСтатусаАллюр(ОписаниеШага, Описание);

	ОписаниеШага.Вставить("status"				, РезультатШага.СтатусПроверки);

	ОписаниеШага.historyId		= СтрШаблон("%1. %2. %3", РежимПроверки, ПроверяемыйОбъект, КраткоеОписание);
	ОписаниеШага.description	= СтрШаблон("%1. %2. %3", РежимПроверки, ПроверяемыйОбъект, Данные);

	СписокМеток = ОписаниеШага.labels;
	ДобавитьМеткуАллюр(СписокМеток, "host"		, РежимПроверки);
	ДобавитьМеткуАллюр(СписокМеток, "feature"	, РежимПроверки);
	ДобавитьМеткуАллюр(СписокМеток, "story"		, ПроверяемыйОбъект);

	Возврат ОписаниеШага;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеСценарияАллюр()
	
	GUID = Новый УникальныйИдентификатор();
	
	СтруктураРезультата = Новый Структура();
	СтруктураРезультата.Вставить("uuid"				, Строка(GUID));
	СтруктураРезультата.Вставить("historyId"		, Неопределено);
	СтруктураРезультата.Вставить("name"				, Неопределено);
	СтруктураРезультата.Вставить("fullName"			, "");
	СтруктураРезультата.Вставить("start"			, Неопределено);
	СтруктураРезультата.Вставить("stop"				, Неопределено);
	СтруктураРезультата.Вставить("statusDetails"	, Новый Структура("known, muted,flaky", Ложь, Ложь, Ложь));
	СтруктураРезультата.Вставить("status"			, Неопределено);
	СтруктураРезультата.Вставить("stage"			, "finished"); 
	СтруктураРезультата.Вставить("steps"			, Новый Массив());
	СтруктураРезультата.Вставить("parameters"		, Новый Массив());
	СтруктураРезультата.Вставить("labels"			, Новый Массив());
	СтруктураРезультата.Вставить("links"			, Новый Массив());
	СтруктураРезультата.Вставить("attachments"		, Новый Массив());
	СтруктураРезультата.Вставить("description"		, "");

	Возврат СтруктураРезультата;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьМеткуАллюр(Знач СписокМеток, Знач Имя, Знач Значение)

	Метка       = Новый Структура("name, value");
	Метка.name  = Имя;
	Метка.value = Значение;

	СписокМеток.Вставить(0, Метка);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтатусыТестов()
	
	Статусы = Новый Структура;
	Статусы.Вставить("Ошибка",	 "failed");
	Статусы.Вставить("Сломан",	 "broken");
	Статусы.Вставить("Пройден",	 "passed");
	Статусы.Вставить("Пропущен", "skipped");
	
	Возврат Статусы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьОписаниеСтатусаАллюр(Знач ОписаниеШага, Знач ОписаниеОшибки = "")
	
	ДеталиСтатуса = Новый Структура;
	ДеталиСтатуса.Вставить("known", Ложь);
	ДеталиСтатуса.Вставить("muted", Ложь);
	ДеталиСтатуса.Вставить("flaky", Ложь);
	ДеталиСтатуса.Вставить("message", ОписаниеОшибки);
	ДеталиСтатуса.Вставить("trace", "");
	
	ОписаниеШага.Вставить("statusDetails", ДеталиСтатуса);
			
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьУникальноеИмяФайлаАллюр(Знач ПутьКОтчету)

	Файл			= Новый Файл(ПутьКОтчету);
	ПутьКаталога	= ?(Файл.Существует() И Файл.ЭтоКаталог(), Файл.ПолноеИмя, Файл.Путь);

	ИмяФайла = СформироватьИмяАллюр(ПутьКаталога);

	Возврат ИмяФайла;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьИмяАллюр(Путь)

	ГУИД = Новый УникальныйИдентификатор;

	ИмяФайла = СтрЗаменить("%1-result.json", "%1", ГУИД);

	ИмяФайла = Путь + "/" + ИмяФайла;

	Возврат ИмяФайла;
	
КонецФункции

#КонецОбласти

#Область РаботаСДеревом

&НаКлиенте
Процедура СвернутьВеткиДерева(ЭлементФормы, ВеткаДерва)
	
	Для Каждого СтрокаДерева Из ВеткаДерва.ПолучитьЭлементы() Цикл
		
		СвернутьВеткиДерева(ЭлементФормы, СтрокаДерева);
		
		ЭлементФормы.Свернуть(СтрокаДерева.ПолучитьИдентификатор());
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПометкиВСтрокеДерева(СтрокаДерева)
	
	ПризнакФлагУстановлен = 2;
	
	Если СтрокаДерева.Тестировать = ПризнакФлагУстановлен Тогда
		СтрокаДерева.Тестировать = 0;
	КонецЕсли;
	
	ПроставитьПометкуВПодчиненныхСтроках(СтрокаДерева, СтрокаДерева.Тестировать); 
	
	ТекущаяСтрока   = СтрокаДерева;
	ТекущийРодитель = ТекущаяСтрока.ПолучитьРодителя();
	
	Пока ТекущийРодитель <> Неопределено Цикл
		
		Если ОдинаковаяПометкаУСтрокОдногоУровня(ТекущийРодитель, ТекущаяСтрока.Тестировать) Тогда
			ТекущийРодитель.Тестировать = ТекущаяСтрока.Тестировать; 	
		Иначе
			ТекущийРодитель.Тестировать = ПризнакФлагУстановлен;	
		КонецЕсли;
		
		ТекущаяСтрока   = ТекущийРодитель;
		ТекущийРодитель = ТекущаяСтрока.ПолучитьРодителя();
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкуВПодчиненныхСтроках(ВеткаДерева, Тестировать)
	
	Для Каждого СтрокаДерева Из ВеткаДерева.ПолучитьЭлементы() Цикл
		
		СтрокаДерева.Тестировать = Тестировать;
		
		ПроставитьПометкуВПодчиненныхСтроках(СтрокаДерева, Тестировать);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ОдинаковаяПометкаУСтрокОдногоУровня(ВеткаДерева, Тестировать)
	
	Для Каждого СтрокаДерева Из ВеткаДерева.ПолучитьЭлементы() Цикл
		
		Если СтрокаДерева.Тестировать <> Тестировать Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура УстановитьСнятьПометку(ЭлементФормы, Дерево, Тестировать)
	
	ВыделенныеСтроки = ЭлементФормы.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		
		Для Каждого Индекс Из ВыделенныеСтроки Цикл
			
			СтрокаДерева = Дерево.НайтиПоИдентификатору(Индекс);
			СтрокаДерева.Тестировать = Тестировать;
			
			ПриИзмененииПометкиВСтрокеДерева(СтрокаДерева);
			
		КонецЦикла;
		
	Иначе
		
		ПроставитьПометкуВПодчиненныхСтроках(Дерево, Тестировать);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервереБезКонтекста 
Процедура ЗаполнитьКоллекциюЭлементовДереваДанныхФормы(КоллекцияЭлементовДерева, ДеревоЗначений)
	
	Для Каждого Строка Из ДеревоЗначений.Строки Цикл
		
		ЭлементДерева = КоллекцияЭлементовДерева.Добавить();
		ЗаполнитьЗначенияСвойств(ЭлементДерева, Строка);
		Если Строка.Строки.Количество() > 0 Тогда
			ЗаполнитьКоллекциюЭлементовДереваДанныхФормы(ЭлементДерева.ПолучитьЭлементы(), Строка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
