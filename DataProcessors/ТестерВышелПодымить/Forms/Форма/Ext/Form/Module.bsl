
#Область ОписаниеПеременных

&НаКлиенте
Перем ОткрытыеОкна;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	ПараметрыРегистрации = ОбъектОбработки.СведенияОВнешнейОбработке();
	Заголовок = СтрШаблон("%1 (%2)", ПараметрыРегистрации.Наименование, ПараметрыРегистрации.Версия);
	АвтоЗаголовок = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(Формы_КоличествоОбъектов) Тогда
		Формы_КоличествоОбъектов = 1;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Справочники_КоличествоОбъектов) Тогда
		Справочники_КоличествоОбъектов = 1;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Документы_КоличествоОбъектов) Тогда
		Документы_КоличествоОбъектов = 1;
	КонецЕсли;
	
	НастроитьЭлементыФормыПоРежимамПроверки();
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КаталогВыгрузкиАллюреНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработчикОповещения = Новый ОписаниеОповещения("КаталогВыгрузкиАллюреНачалоВыбораЗавершение", ЭтаФорма);

	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	
	ДиалогВыбораКаталога.Показать(ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиАллюреНачалоВыбораЗавершение(ВыбранныеФайлы, ТекущиеДанные) Экспорт
	
	Если Ложь
		Или ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 
	Тогда	
		Возврат;
	КонецЕсли;
	
	КаталогВыгрузкиAllure = ВыбранныеФайлы[0];
	
КонецПроцедуры

&НаКлиенте
Процедура ФлажокРежимаПроверкиПриИзменении(Элемент)
	
	НастроитьЭлементыФормыПоРежимамПроверки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьПроверки(Команда)
	
	_Информация.Очистить();
	
	ДатаНачалаПроверки = ТекущаяДата();
	
	Если ПроверятьФормы Тогда
		Формы_Проверка();
	КонецЕсли;
	
	Если ПроверятьОтчеты Тогда
		Отчеты_Проверка();
	КонецЕсли;
	
	Если ПроверятьПечать Тогда
		Печать_Проверка();
	КонецЕсли;
	
	Если ПроверятьДокументы Тогда
		Документы_Проверка();
	КонецЕсли;
	
	Если ПроверятьСправочники Тогда
		СправочникиИПВХ_Проверка();
	КонецЕсли;
	
	ЗаполнитьДеревоИнформации();
	СоздатьОтчетАллюр();
	
	Элементы.ОбщиеСтраницы.ТекущаяСтраница = Элементы.СтраницаРезультата;
	Информация_РазвернутьВсеГруппы(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура Проверки_Заполнить(Команда)
	
	Формы_Заполнить(Неопределено);
	Отчеты_Заполнить(Неопределено);
	Печать_Заполнить(Неопределено);
	Документы_Заполнить(Неопределено);
	Справочники_Заполнить(Неопределено);
	
	ПерезаполненыОбъекты = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВыбранныеОбъекты(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПерезаполненыОбъекты", ПерезаполненыОбъекты);
	
	ОбъектыМетаданных = ВыбранныеОбъектыМетаданных();
	ПараметрыФормы.Вставить("ОбъектыМетаданных", ОбъектыМетаданных);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("НастроитьВыбранныеОбъектыЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ВнешняяОбработка.ТестерВышелПодымить.Форма.НастройкаВыбораОбъектов", ПараметрыФормы, ЭтотОбъект,,,,
		ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура _Информация_Очистить(Команда)
	
	Режим = РежимДиалогаВопрос.ДаНет;
	ТекстВопроса = НСтр("ru = 'Очистить информацию?';"
			+ " en = 'Do you want to continue?'");
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса_Информация_Очистить", ЭтотОбъект, Параметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса_Информация_Очистить(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	_Информация.Очистить();
	ЗаполнитьДеревоИнформации();
	
КонецПроцедуры

&НаКлиенте
Процедура Режимы_СнятьФлажки(Команда)
	
	ПроверятьДокументы 	 = Ложь;
	ПроверятьПечать		 = Ложь;
	ПроверятьОтчеты		 = Ложь;
	ПроверятьСправочники = Ложь;
	ПроверятьФормы		 = Ложь;
	
	НастроитьЭлементыФормыПоРежимамПроверки();
	
КонецПроцедуры

&НаКлиенте
Процедура Режимы_УстановитьФлажки(Команда)
	
	ПроверятьДокументы 	 = Истина;
	ПроверятьПечать		 = Истина;
	ПроверятьОтчеты		 = Истина;
	ПроверятьСправочники = Истина;
	ПроверятьФормы		 = Истина;
	
	НастроитьЭлементыФормыПоРежимамПроверки();
	
КонецПроцедуры

#Область ОбработчикиКомандФормы_Формы

&НаКлиенте
Процедура Формы_УстановитьФлажки(Команда)
	
	УстановитьСнятьПометку(Элементы.Формы_ДеревоОбъектов, Формы_ДеревоОбъектов, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Формы_СнятьФлажки(Команда)
	
	УстановитьСнятьПометку(Элементы.Формы_ДеревоОбъектов, Формы_ДеревоОбъектов, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Формы_РазвернутьВсеГруппы(Команда)
	Для Каждого СтрокаДерева Из Формы_ДеревоОбъектов.ПолучитьЭлементы() Цикл
		Элементы.Формы_ДеревоОбъектов.Развернуть(СтрокаДерева.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Формы_СвернутьВсеГруппы(Команда)
	
	СвернутьВеткиДерева(Элементы.Формы_ДеревоОбъектов, Формы_ДеревоОбъектов);
	
КонецПроцедуры

&НаКлиенте
Процедура Формы_Заполнить(Команда)
	
	Формы_ЗаполнитьНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_Печать

&НаКлиенте
Процедура Печать_ПроставитьВсеФлажки(Команда)
	
	УстановитьСнятьПометку(Элементы.Печать_ДеревоОбъектов, Печать_ДеревоОбъектов, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать_СнятьВсеФлажки(Команда)
	
	УстановитьСнятьПометку(Элементы.Печать_ДеревоОбъектов, Печать_ДеревоОбъектов, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать_РазвернутьВсеГруппы(Команда)
	Для Каждого СтрокаДерева Из Печать_ДеревоОбъектов.ПолучитьЭлементы() Цикл
		Элементы.Печать_ДеревоОбъектов.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Печать_СвернутьВсеГруппы(Команда)
	
	СвернутьВеткиДерева(Элементы.Печать_ДеревоОбъектов, Печать_ДеревоОбъектов); 
	
КонецПроцедуры

&НаКлиенте
Процедура Печать_Заполнить(Команда)
	
	Печать_ЗаполнитьНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_Отчеты

&НаКлиенте
Процедура Отчеты_Заполнить(Команда)
	
	Отчеты_ЗаполнитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Отчеты_ПроставитьВсеФлажки(Команда)
	
	УстановитьСнятьПометку(Элементы.Отчеты_ДеревоОбъектов, Отчеты_ДеревоОбъектов, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Отчеты_СнятьВсеФлажки(Команда)
	
	УстановитьСнятьПометку(Элементы.Отчеты_ДеревоОбъектов, Отчеты_ДеревоОбъектов, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Отчеты_РазвернутьВсеГруппы(Команда)
	Для Каждого СтрокаДерева Из Отчеты_ДеревоОбъектов.ПолучитьЭлементы() Цикл
		Элементы.Отчеты_ДеревоОбъектов.Развернуть(СтрокаДерева.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Отчеты_СвернутьВсеГруппы(Команда)
	
	СвернутьВеткиДерева(Элементы.Отчеты_ДеревоОбъектов, Отчеты_ДеревоОбъектов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_Документы

&НаКлиенте
Процедура Документы_РазвернутьВсеГруппы(Команда)
	Для Каждого СтрокаДерева Из Документы_ДеревоОбъектов.ПолучитьЭлементы() Цикл
		Элементы.Документы_ДеревоОбъектов.Развернуть(СтрокаДерева.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Документы_СвернутьВсеГруппы(Команда)
	
	СвернутьВеткиДерева(Элементы.Документы_ДеревоОбъектов, Документы_ДеревоОбъектов);
	
КонецПроцедуры

&НаКлиенте
Процедура Документы_Заполнить(Команда)
	
	Документы_СформироватьДеревоМетаданных();
	
КонецПроцедуры

&НаКлиенте
Процедура Документы_УстановитьФлажки(Команда)
	
	УстановитьСнятьПометку(Элементы.Документы_ДеревоОбъектов, Документы_ДеревоОбъектов, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Документы_СнятьФлажки(Команда)
	
	УстановитьСнятьПометку(Элементы.Документы_ДеревоОбъектов, Документы_ДеревоОбъектов, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_Справчники

&НаКлиенте
Процедура Справочники_УстановитьФлажки(Команда)
	
	УстановитьСнятьПометку(Элементы.Справочники_ДеревоОбъектов, Справочники_ДеревоОбъектов, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Справочники_СнятьФлажки(Команда)
	
	УстановитьСнятьПометку(Элементы.Справочники_ДеревоОбъектов, Справочники_ДеревоОбъектов, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Справочники_РазвернутьВсеГруппы(Команда)
	Для Каждого СтрокаДерева Из Справочники_ДеревоОбъектов.ПолучитьЭлементы() Цикл
		Элементы.Справочники_ДеревоОбъектов.Развернуть(СтрокаДерева.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Справочники_СвернутьВсеГруппы(Команда)
	
	СвернутьВеткиДерева(Элементы.Справочники_ДеревоОбъектов, Справочники_ДеревоОбъектов);
	
КонецПроцедуры

&НаКлиенте
Процедура Справочники_Заполнить(Команда)
	
	Справочники_СформироватьДеревоМетаданных();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_Информация

&НаКлиенте
Процедура Информация_РазвернутьВсеГруппы(Команда)
	Для Каждого СтрокаДерева Из ДеревоИнформации.ПолучитьЭлементы() Цикл
		Элементы.ДеревоИнформации.Развернуть(СтрокаДерева.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Информация_СвернутьВсеГруппы(Команда)
	
	СвернутьВеткиДерева(Элементы.ДеревоИнформации, ДеревоИнформации);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФормы

&НаКлиенте
Процедура ОткрытиеФорм_ДеревоОбъектовТестироватьПриИзменении(Элемент)
	
	ПриИзмененииПометкиВСтрокеДерева(Элементы.Формы_ДеревоОбъектов.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтчеты

&НаКлиенте
Процедура Отчеты_ДеревоОбъектов_ТестироватьПриИзменении(Элемент)
	
	ПриИзмененииПометкиВСтрокеДерева(Элементы.Отчеты_ДеревоОбъектов.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПечать

&НаКлиенте
Процедура ПечатныеФормыКТестированиюТестироватьПриИзменении(Элемент)
		
	ПриИзмененииПометкиВСтрокеДерева(Элементы.Печать_ДеревоОбъектов.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатныеФормыКТестированиюОбъектПечатиПриИзменении(Элемент)
	
	ТекущаяСтрокаДерева = Элементы.Печать_ДеревоОбъектов.ТекущиеДанные;
	
	Если ТекущаяСтрокаДерева.ПолучитьРодителя() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ТекущаяСтрокаДерева.ПолучитьЭлементы() Цикл
		Строка.ОбъектПечати = ТекущаяСтрокаДерева.ОбъектПечати;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокуметы

&НаКлиенте
Процедура Документы_ДеревоОбъектов_ТестироватьПриИзменении(Элемент)
	
	ПриИзмененииПометкиВСтрокеДерева(Элементы.Документы_ДеревоОбъектов.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСправочники

&НаКлиенте
Процедура Справочники_ДеревоОбъектов_ТестироватьПриИзменении(Элемент)
	
	ПриИзмененииПометкиВСтрокеДерева(Элементы.Справочники_ДеревоОбъектов.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОшибки

&НаКлиенте
Процедура Формы_ОшибкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле <> Элементы.ДеревоИнформацииПроверяемыйОбъект Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоИнформации.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	
	Если ТекущиеДанные.РежимПроверки = РежимыПроверки().Формы Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.ПроверяемыйОбъект) Тогда
			
			ПараметрыФормы = Новый Структура;
			Если ЗначениеЗаполнено(ТекущиеДанные.Данные) Тогда
				ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.Данные);
			КонецЕсли;
			
			ОткрытьФорму(ТекущиеДанные.ПроверяемыйОбъект, ПараметрыФормы);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Функция РежимыПроверки()
	
	Режимы = Новый Структура;
	Режимы.Вставить("Формы", 		"Формы");
	Режимы.Вставить("Отчеты", 		"Отчеты");
	Режимы.Вставить("Печать",		"Печать");
	Режимы.Вставить("Документы",	"Документы");
	Режимы.Вставить("Справочники",	"Справочники");
	
	Возврат Режимы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьИнформациюПройденнойПроверки(ТаблицаИнформации, РежимПроверки, ПроверяемыйОбъект, 
		Данные = Неопределено, ДополнительноеОписание = "")

	Если НЕ ЗначениеЗаполнено(ДополнительноеОписание) Тогда
		ДополнительноеОписание = РежимПроверки;
	КонецЕсли;
		
	СтатусАллюр		= СтатусыАллюр().Пройден;
	ШаблонОписания	= "%1. %2. %3";
	КраткоеОписание	= СтрШаблон(ШаблонОписания, ДополнительноеОписание, ПроверяемыйОбъект, Данные);
	
	ДобавитьИнформациюПроверки(ТаблицаИнформации, РежимПроверки, ПроверяемыйОбъект, Данные,
		КраткоеОписание, КраткоеОписание, СтатусАллюр);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьИнформациюПроверки(ТаблицаИнформации, РежимПроверки, ПроверяемыйОбъект, 
	Данные = Неопределено, КраткоеОписание = "", Описание = "", Статус = "failed")
	
	НоваяСтрока_Информация						= ТаблицаИнформации.Добавить();
	НоваяСтрока_Информация.РежимПроверки		= РежимПроверки;
	НоваяСтрока_Информация.ПроверяемыйОбъект	= ПроверяемыйОбъект;
	НоваяСтрока_Информация.Данные				= Данные;
	НоваяСтрока_Информация.КраткоеОписание		= КраткоеОписание;
	НоваяСтрока_Информация.Описание				= Описание;
	НоваяСтрока_Информация.Картинка				= КартинкаРежимаПроверки(РежимПроверки);
	НоваяСтрока_Информация.СтатусАллюр			= Статус;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КартинкаРежимаПроверки(РежимПроверки)
	
	СоответствиеКартинок = Новый Соответствие;
	СоответствиеКартинок.Вставить(РежимыПроверки().Формы,  		БиблиотекаКартинок.Форма);
	СоответствиеКартинок.Вставить(РежимыПроверки().Отчеты,  	БиблиотекаКартинок.Отчеты);
	СоответствиеКартинок.Вставить(РежимыПроверки().Печать,  	БиблиотекаКартинок.Печать);
	СоответствиеКартинок.Вставить(РежимыПроверки().Документы,  	БиблиотекаКартинок.Документ);
	СоответствиеКартинок.Вставить(РежимыПроверки().Справочники, БиблиотекаКартинок.Справочник);
	
	Возврат СоответствиеКартинок.Получить(РежимПроверки);
	
КонецФункции

&НаКлиенте
Процедура СоздатьКаталогЕслиЕгоНет(Путь, ОчиститьКаталог = Ложь)
	
	Если СокрЛП(Путь) = "" Тогда
		ВызватьИсключение "Передан пустой путь в процедуру <СоздатьКаталогЕслиЕгоНет>";
	КонецЕсли;
	
	СоздатьКаталогВСистеме(Путь);
	
	Если ОчиститьКаталог Тогда
		Попытка
			УдалитьФайлы(Путь, "*.json");
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКаталогВСистеме(Путь) Экспорт
	
	Попытка
		СоздатьКаталог(Путь);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ВызватьИсключение ТекстОшибки + Символы.ПС + Путь;
	КонецПопытки;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоИнформации()
	
	КорневыеУзлы = ДеревоИнформации.ПолучитьЭлементы();
	КорневыеУзлы.Очистить();
	
	_Информация.Сортировать("РежимПроверки");
	
	СтатусАллюр		= СтатусыАллюр().Ошибка;
	СтрокиОшибок	= _Информация.НайтиСтроки(Новый Структура("СтатусАллюр", СтатусАллюр));
	
	ТекущийРежимПроверки	= Неопределено;
	ЭлементыКорневогоУзла	= Неопределено;
	
	Для Каждого СтрокаОшибки Из СтрокиОшибок Цикл
		
		Если ТекущийРежимПроверки <> СтрокаОшибки.РежимПроверки Тогда
			
			ТекущийРежимПроверки	= СтрокаОшибки.РежимПроверки;
			
			СтрокаГруппы				= КорневыеУзлы.Добавить();
			СтрокаГруппы.РежимПроверки	= СтрокаОшибки.РежимПроверки;
			СтрокаГруппы.Картинка		= СтрокаОшибки.Картинка;
			
			ЭлементыКорневогоУзла = СтрокаГруппы.ПолучитьЭлементы();
						
		КонецЕсли;
		
		СтрокаИнформации = ЭлементыКорневогоУзла.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаИнформации, СтрокаОшибки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПоследняяДатаЗапрета()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ДатыЗапретаИзменения.ДатаЗапрета) КАК ДатаЗапрета
		|ИЗ
		|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения";
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ДатаЗапрета = ?(ЗначениеЗаполнено(Выборка.ДатаЗапрета), КонецДня(Выборка.ДатаЗапрета), Дата(1,1,1));
	
	Возврат ДатаЗапрета;
		
КонецФункции

#КонецОбласти

#Область ЗаполнениеМетаданными

#Область ЗаполнениеМетаданными_Формы

&НаСервере
Процедура Формы_ЗаполнитьНаСервере()
	
	НовоеДерево = ДеревоМетаданныхКонфигурации(, Истина);
	
	Формы_ДополнитьДеревоФормами(НовоеДерево);
	
	Формы_ДеревоОбъектов.ПолучитьЭлементы().Очистить();
	
	ОбщегоНазначения.ЗаполнитьКоллекциюЭлементовДереваДанныхФормы(Формы_ДеревоОбъектов.ПолучитьЭлементы(), НовоеДерево);
	
КонецПроцедуры

&НаСервере
Процедура Формы_ДополнитьДеревоФормами(Дерево)
	
	Дерево.Колонки.Добавить("ЭтоФорма", Новый ОписаниеТипов("Булево"));
	Дерево.Колонки.Добавить("ПараметрыФормы", Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("Тестировать", Новый ОписаниеТипов("Булево"));
	Дерево.Колонки.Добавить("ОсновнаяФорма", Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("Иерархический", Новый ОписаниеТипов("Булево"));
	
	ЭлементыНаУдаление = Новый Массив();
	
	Для каждого ТекКласс Из Дерево.Строки Цикл
				
		Для каждого Элем Из ТекКласс.Строки Цикл
			
			МетаОбъект = Элем.ОбъектМетаданных;
			
			Попытка
				ФормыМетаОбъекта = МетаОбъект.Формы;
			Исключение                              
				ЭлементыНаУдаление.Добавить(Элем);
				Продолжить;
			КонецПопытки;
			
			Если ФормыМетаОбъекта.Количество() = 0 Тогда
				ЭлементыНаУдаление.Добавить(Элем);
			КонецЕсли;
			
			Для каждого ТекФорма Из ФормыМетаОбъекта Цикл
				
				Если НЕ Формы_ВключитьВТестирование(ТекФорма, МетаОбъект, ТекКласс) Тогда
					Продолжить;
				КонецЕсли;
				
				ЭлементДерева = Элем.Строки.Добавить();
				ЭлементДерева.Имя = ТекФорма.Имя;
				ЭлементДерева.ПолноеИмя = ТекФорма.ПолноеИмя();
				ЭлементДерева.Картинка = БиблиотекаКартинок.Форма;
				ЭлементДерева.ЭтоФорма = Истина;
				ЭлементДерева.ОсновнаяФорма = Формы_ОпределитьОсновнаяФорма(ТекФорма, МетаОбъект, ТекКласс);
				
				Если ТекКласс.Имя = "Справочники" Тогда
					ЭлементДерева.Иерархический = МетаОбъект.Иерархический 
						И МетаОбъект.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов;
				КонецЕсли;
				
				ЭлементДерева.Тестировать = Ложь;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого СтрокаУдалить Из ЭлементыНаУдаление Цикл
		
		Для каждого ТекКласс Из Дерево.Строки Цикл
			Попытка
				ТекКласс.Строки.Удалить(СтрокаУдалить);
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция Формы_ВключитьВТестирование(ТекФорма, МетаОбъект, ТекКласс)
	
	Если ТекКласс.Имя = "Справочники" Или ТекКласс.Имя = "Документы" Тогда
	
		Возврат МетаОбъект.ОсновнаяФормаДляВыбора = ТекФорма
			ИЛИ МетаОбъект.ОсновнаяФормаСписка = ТекФорма
			ИЛИ МетаОбъект.ОсновнаяФормаОбъекта = ТекФорма
			ИЛИ (ТекКласс.Имя = "Справочники" И МетаОбъект.ОсновнаяФормаГруппы = ТекФорма);
		
	Иначе
		Возврат Истина;	
	КонецЕсли;
			
КонецФункции

&НаСервере
Функция Формы_ОпределитьОсновнаяФорма(ТекФорма, МетаОбъект, ТекКласс)
	
	Если ТекКласс.Имя = "Справочники" Тогда
		
		Если МетаОбъект.ОсновнаяФормаОбъекта = ТекФорма Тогда
			Возврат "ОсновнаяФормаОбъекта";
		ИначеЕсли МетаОбъект.ОсновнаяФормаСписка = ТекФорма Тогда
			Возврат "ОсновнаяФормаСписка";
		ИначеЕсли МетаОбъект.ОсновнаяФормаГруппы = ТекФорма Тогда
			Возврат "ОсновнаяФормаГруппы";
		ИначеЕсли МетаОбъект.ОсновнаяФормаДляВыбора = ТекФорма Тогда
			Возврат "ОсновнаяФормаДляВыбора";
		ИначеЕсли МетаОбъект.ОсновнаяФормаДляВыбораГруппы = ТекФорма Тогда
			Возврат "ОсновнаяФормаДляВыбораГруппы";
		КонецЕсли;
		
	ИначеЕсли ТекКласс.Имя = "Документы" Тогда
		
		Если МетаОбъект.ОсновнаяФормаОбъекта = ТекФорма Тогда
			Возврат "ОсновнаяФормаОбъекта";
		ИначеЕсли МетаОбъект.ОсновнаяФормаСписка = ТекФорма Тогда
			Возврат "ОсновнаяФормаСписка";
		ИначеЕсли МетаОбъект.ОсновнаяФормаДляВыбора = ТекФорма Тогда
			Возврат "ОсновнаяФормаДляВыбора";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеМетаданными_Отчеты

&НаСервере
Процедура Отчеты_ЗаполнитьНаСервере()
	
	Попытка
		
		Отчеты_ЗаполнитьТаблицуОтчетов();
		
	Исключение
		
		пСообщение = Новый СообщениеПользователю;
		пСообщение.Текст = ОписаниеОшибки();
		пСообщение.Сообщить();
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура Отчеты_ЗаполнитьТаблицуОтчетов()
	
	ДоступныеОтчеты = ВариантыОтчетовПовтИсп.ДоступныеОтчеты();
	НедоступныеВарианты = ВариантыОтчетовПовтИсп.ОтключенныеВариантыПрограммы();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВариантыОтчетов.Отчет КАК Отчет,
	|	ВариантыОтчетов.Настройки,
	|	ВариантыОтчетов.ХешНастроек,
	|	ВариантыОтчетов.Ссылка КАК ВариантОтчета,
	|	ВариантыОтчетов.КлючВарианта,
	|	ВариантыОтчетов.Отчет.Имя КАК ИмяОтчета,
	|	ВариантыОтчетов.Отчет.ПолноеИмя КАК ПолноеИмя,
	|	ВариантыОтчетов.Отчет.Синоним КАК НаименованиеОтчета
	|ПОМЕСТИТЬ ВременнаяТаблицаОтчетов
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.ПометкаУдаления = ЛОЖЬ
	|	И НЕ ВариантыОтчетов.Ссылка В (&НедоступныеВарианты)
	|	И ВариантыОтчетов.Отчет В(&ДоступныеОтчеты)
	|	И (ВЫРАЗИТЬ(ВариантыОтчетов.ПредопределенныйВариант КАК Справочник.ПредопределенныеВариантыОтчетов).Включен = ИСТИНА
	|			ИЛИ ВариантыОтчетов.ПредопределенныйВариант = ЗНАЧЕНИЕ(Справочник.ПредопределенныеВариантыОтчетов.ПустаяСсылка)
	|			<%ДопУсловие>)
	|	И ВариантыОтчетов.КлючВарианта <> """"
	|ОБЪЕДИНИТЬ ВСЕ
	|		ВЫБРАТЬ
	|	ВариантыОтчетов.Отчет,
	|	ВариантыОтчетов.Настройки,
	|	ВариантыОтчетов.ХешНастроек,
	|	ВариантыОтчетов.Ссылка,
	|	ВариантыОтчетов.КлючВарианта,
	|	ВариантыОтчетов.Отчет.ИмяОбъекта,
	|   ""ВнешнийОтчет"",
	|	ВариантыОтчетов.Отчет.Наименование
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	НЕ ВариантыОтчетов.ПометкаУдаления
	|	И ВариантыОтчетов.КлючВарианта <> """"
	|	И ВариантыОтчетов.Отчет ССЫЛКА Справочник.ДополнительныеОтчетыИОбработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаОтчетов.Отчет КАК Отчет,
	|	ВременнаяТаблицаОтчетов.ВариантОтчета КАК ВариантОтчета,
	|	ВременнаяТаблицаОтчетов.ХешНастроек КАК ХешНастроек,
	|	ВременнаяТаблицаОтчетов.НаименованиеОтчета КАК НаименованиеОтчета,
	|	ВременнаяТаблицаОтчетов.ВариантОтчета.Наименование КАК НаименованиеВарианта,
	|	ВременнаяТаблицаОтчетов.Настройки,
	|	ВременнаяТаблицаОтчетов.КлючВарианта,
	|	ВременнаяТаблицаОтчетов.ИмяОтчета,
	|	ВременнаяТаблицаОтчетов.ПолноеИмя
	|ИЗ
	|	ВременнаяТаблицаОтчетов КАК ВременнаяТаблицаОтчетов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВременнаяТаблицаОтчетов.Отчет.Наименование,
	|	ВременнаяТаблицаОтчетов.ВариантОтчета.Наименование";
	
	ЕстьПредопределенныеВарианты = Метаданные.Справочники.Найти("ПредопределенныеВариантыОтчетовРасширений") <> Неопределено;
	
	Если ЕстьПредопределенныеВарианты Тогда
		ДопУсловие = " ИЛИ ВЫРАЗИТЬ(ВариантыОтчетов.ПредопределенныйВариант КАК Справочник.ПредопределенныеВариантыОтчетовРасширений).Включен = ИСТИНА 
		|	ИЛИ ВариантыОтчетов.ПредопределенныйВариант = ЗНАЧЕНИЕ(Справочник.ПредопределенныеВариантыОтчетовРасширений.ПустаяСсылка)";
	Иначе
		ДопУсловие = "";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "<%ДопУсловие>", ДопУсловие);
	
	Запрос.УстановитьПараметр("ДоступныеОтчеты", ДоступныеОтчеты);
	Запрос.УстановитьПараметр("НедоступныеВарианты", НедоступныеВарианты);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КорневыеУзлы = Отчеты_ДеревоОбъектов.ПолучитьЭлементы();
	КорневыеУзлы.Очистить();
	
	ТекущийОтчет				= Неопределено;
	ЭлементыКорневогоУзла		= Неопределено;
	Пока Выборка.Следующий() Цикл
		
		Если ТекущийОтчет <> Выборка.Отчет Тогда
			
			ТекущийОтчет = Выборка.Отчет;
			СтрокаГруппы = КорневыеУзлы.Добавить();
			
			СтрокаГруппы.ОтчетВариант = Выборка.Отчет;
			СтрокаГруппы.Представление = Выборка.НаименованиеОтчета;
			СтрокаГруппы.ЭтоГруппа = Истина;
			
			ЭлементыКорневогоУзла = СтрокаГруппы.ПолучитьЭлементы();
			
			Если ЕстьПредопределенныеВарианты 
					И НЕ ТипЗнч(ТекущийОтчет) = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") 
			Тогда
				МетаОбъект = Метаданные.Отчеты.Найти(Выборка.ИмяОтчета);
			Иначе
				МетаОбъект = ТекущийОтчет.Метаданные();
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаВарианта								= ЭлементыКорневогоУзла.Добавить();
		СтрокаВарианта.ОтчетВариант					= Выборка.ВариантОтчета;
		СтрокаВарианта.ОтчетВладелец				= Выборка.Отчет;
		СтрокаВарианта.Представление				= Выборка.НаименованиеВарианта + " (" + Выборка.КлючВарианта + ")";
		
		ЗаполнитьЗначенияСвойств(СтрокаВарианта, Выборка, "ХешНастроек,Настройки,КлючВарианта,ИмяОтчета");
		
		Если Выборка.ПолноеИмя = "ВнешнийОтчет" Тогда
			СтрокаВарианта.ПолноеИмя = Выборка.ПолноеИмя + "." + Выборка.ИмяОтчета;	
		Иначе
			СтрокаВарианта.ПолноеИмя = Выборка.ПолноеИмя;	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеМетаданными_Печать

&НаСервере
Процедура Печать_ЗаполнитьНаСервере()
	
	Попытка
		
		Печать_ЗаполнитьТаблицуПечатныхФорм();
		Печать_ПодобратьСсылкиОбъектовПечати();
		
	Исключение
		
		пСообщение = Новый СообщениеПользователю;
		пСообщение.Текст = ОписаниеОшибки();
		пСообщение.Сообщить();
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура Печать_ЗаполнитьТаблицуПечатныхФорм()
	
	СписокДляСортировки = Новый СписокЗначений;
	СписокДляСортировки.ЗагрузитьЗначения(УправлениеПечатью.ИсточникиКомандПечати());
	СписокДляСортировки.СортироватьПоЗначению();
	ИсточникиКомандПечати = СписокДляСортировки.ВыгрузитьЗначения();
	
	УзлыТиповМетаданных = Печать_ДеревоОбъектов.ПолучитьЭлементы();
	УзлыТиповМетаданных.Очистить();
	
	СтрокаСправочники = УзлыТиповМетаданных.Добавить();
	СтрокаСправочники.Тестировать = Ложь;
	СтрокаСправочники.ЭтоГруппа = Истина;
	СтрокаСправочники.Представление = "Справочники";
	СтрокаСправочники.Картинка = БиблиотекаКартинок.Справочник; 
	УзлыСправочника = СтрокаСправочники.ПолучитьЭлементы();
	
	СтрокаДокументы = УзлыТиповМетаданных.Добавить();
	СтрокаДокументы.Тестировать = Ложь;
	СтрокаДокументы.ЭтоГруппа = Истина;
	СтрокаДокументы.Представление = "Документы";
	СтрокаДокументы.Картинка = БиблиотекаКартинок.Документ;
	УзлыДокументов = СтрокаДокументы.ПолучитьЭлементы();
	
	КартинкаСправочник = БиблиотекаКартинок.Справочник;
	КартинкаДокумент   = БиблиотекаКартинок.ДокументОбъект;
	
	ПодходящиеИсточникиКоманд = Новый Массив;
	Для Каждого Источник Из ИсточникиКомандПечати Цикл
		
		Если НРег(Лев(Источник.Имя, 7)) = "удалить" Тогда
			Продолжить;
		КонецЕсли;
		
		// Доп проверка на случай, когда команды печати возможны, но не подключены
		Попытка
			КомандыПечати = УправлениеПечатью.КомандыПечатиОбъекта(Источник);
		Исключение
			Продолжить;
		КонецПопытки;
		
		Если КомандыПечати.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Мы не можем автоматически проверить печатные формы,
		// если в команде указан обработчик
		КоличествоКомандБезОбработчиков = 0;
		Для Каждого КомандаПечати Из КомандыПечати Цикл
			Если Не ЗначениеЗаполнено(КомандаПечати.Обработчик) Тогда
				КоличествоКомандБезОбработчиков = КоличествоКомандБезОбработчиков + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоКомандБезОбработчиков = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПолноеИмя = Источник.ПолноеИмя();
		
		Если СтрНачинаетсяС(ПолноеИмя, "Справочник") Тогда
			
			СтрокаОбъектаМетаданных = УзлыСправочника.Добавить();
			СтрокаОбъектаМетаданных.Картинка = КартинкаСправочник;
			
		ИначеЕсли СтрНачинаетсяС(ПолноеИмя, "Документ") Тогда
			
			СтрокаОбъектаМетаданных = УзлыДокументов.Добавить();
			СтрокаОбъектаМетаданных.Картинка = КартинкаДокумент; 
			
		Иначе
			Продолжить;
		КонецЕсли;
		
		СтрокаОбъектаМетаданных.Тестировать = Ложь;
		СтрокаОбъектаМетаданных.ЭтоГруппа = Истина;
		СтрокаОбъектаМетаданных.Представление = Источник.Синоним;
		СтрокаОбъектаМетаданных.ПолноеИмя     = ПолноеИмя;
		
		УзлыМетаданного = СтрокаОбъектаМетаданных.ПолучитьЭлементы();
		Для Каждого КомандаПечати Из КомандыПечати Цикл
			
			Если ЗначениеЗаполнено(КомандаПечати.Обработчик) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаКоманды							= УзлыМетаданного.Добавить();
			СтрокаКоманды.Тестировать				= Ложь;
			СтрокаКоманды.ЭтоГруппа					= Ложь;
			СтрокаКоманды.Представление				= КомандаПечати.Представление;
			СтрокаКоманды.Имя                       = Источник.Имя;
			СтрокаКоманды.МенеджерПечати			= КомандаПечати.МенеджерПечати;
			СтрокаКоманды.Идентификатор				= КомандаПечати.Идентификатор;
			СтрокаКоманды.ДополнительныеПараметры	= КомандаПечати.ДополнительныеПараметры;
			СтрокаКоманды.ПолноеИмя                 = СтрокаОбъектаМетаданных.ПолноеИмя + "." + КомандаПечати.Идентификатор;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура Печать_ПодобратьСсылкиОбъектовПечати()
	
	Запрос = Новый Запрос;
	
	Для Каждого СтрокаТипов Из Печать_ДеревоОбъектов.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаОбъектов Из СтрокаТипов.ПолучитьЭлементы() Цикл
			
			ПолноеИмя = СтрокаОбъектов.ПолноеИмя;
			ПодстрокиИдентификатора = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеИмя, ".");
			
			Если ПодстрокиИдентификатора.Количество() > 1 Тогда
				ИмяОбъекта = ПодстрокиИдентификатора[0];
				ИмяТаблицы = ПодстрокиИдентификатора[1];
			Иначе
				Продолжить;
			КонецЕсли;
			
			Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	%1.Ссылка
				|ИЗ
				|	%2 КАК %1
				|ГДЕ
				|	НЕ %1.ПометкаУдаления
				|	" + ?(ИмяОбъекта = "Документ", "И %1.Проведен УПОРЯДОЧИТЬ ПО %1.Дата Убыв", "И НЕ %1.ЭтоГруппа");
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1", ИмяТаблицы);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%2", ПолноеИмя);
			
			Попытка
				
				Результат = Запрос.Выполнить();
				Если Не Результат.Пустой() Тогда
					
					Выборка = Результат.Выбрать();
					Выборка.Следующий();
					СтрокаОбъектов.ОбъектПечати = Выборка.Ссылка;
					
				Иначе
					
					Если ИмяОбъекта = "Справочник" Тогда
						СтрокаОбъектов.ОбъектПечати = Справочники[ИмяТаблицы].ПустаяСсылка();
					ИначеЕсли ИмяОбъекта = "Документ" Тогда
						СтрокаОбъектов.ОбъектПечати = Документы[ИмяТаблицы].ПустаяСсылка();
					КонецЕсли;
					
				КонецЕсли;
				
			Исключение
			КонецПопытки;
			
			Для Каждого СтрокаПечатныхФорм Из СтрокаОбъектов.ПолучитьЭлементы() Цикл
				
				СтрокаПечатныхФорм.ОбъектПечати = СтрокаОбъектов.ОбъектПечати;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеМетаданными_Документы

&НаСервере
Процедура Документы_СформироватьДеревоМетаданных()
	
	НовоеДерево = ДеревоМетаданныхКонфигурации("Документы");

	Документы_ДеревоОбъектов.ПолучитьЭлементы().Очистить();
	
	ОбщегоНазначения.ЗаполнитьКоллекциюЭлементовДереваДанныхФормы(Документы_ДеревоОбъектов.ПолучитьЭлементы(), НовоеДерево);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеМетаданными_Справочники

&НаСервере
Процедура Справочники_СформироватьДеревоМетаданных()
	
	НовоеДерево = ДеревоМетаданныхКонфигурации("Справочники,ПланыВидовХарактеристик,ПланыВидовРасчета");

	Справочники_ДеревоОбъектов.ПолучитьЭлементы().Очистить();
	
	ОбщегоНазначения.ЗаполнитьКоллекциюЭлементовДереваДанныхФормы(Справочники_ДеревоОбъектов.ПолучитьЭлементы(), НовоеДерево);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура Справочники_НоваяСтрокаКоллекцииОбъектовМетаданных(Имя, Синоним, Картинка, КартинкаОбъекта, Таб)
	
	НоваяСтрока = Таб.Добавить();
	НоваяСтрока.Имя = Имя;
	НоваяСтрока.Синоним = "";
	НоваяСтрока.Картинка = Картинка;
	НоваяСтрока.КартинкаОбъекта = КартинкаОбъекта;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Тестирование_Формы

&НаКлиенте
Процедура Формы_Проверка()
	
	ОткрытыеОкна = Новый Массив;
	Окна = ПолучитьОкна();
	Для Счетчик = 0 По Окна.Количество() - 1 Цикл
		Если Окна[Счетчик] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОткрытыеОкна.Добавить(Окна[Счетчик]);
	КонецЦикла;
	
	ФормыДляВыполненияТестирования = Новый Массив();
	Формы_ВыполнитьВыборкуФорм(ФормыДляВыполненияТестирования);
	Формы_ВыполнитьОткрытиеФорм(ФормыДляВыполненияТестирования);
	
КонецПроцедуры

&НаСервере
Процедура Формы_ВыполнитьВыборкуФорм(ФормыДляВыполненияТестирования)
	
	ДеревоЗначений = РеквизитФормыВЗначение("Формы_ДеревоОбъектов");
	
	Для каждого ТекКласс Из ДеревоЗначений.Строки Цикл
		
		Для каждого Элем Из ТекКласс.Строки Цикл
			
			Для каждого ТекФорма Из Элем.Строки Цикл
				
				Если ТекФорма.Тестировать И Не Формы_ЭтоИсключение(ТекФорма.ПолноеИмя) Тогда
					
					ПараметрыФормы = Новый Структура(ТекФорма.ПараметрыФормы);
					
					ФормыДляВыполненияТестирования.Добавить(Новый Структура("ИмяФормы,
							|МассивСсылок,
							|ПараметрыФормы",
							ТекФорма.ПолноеИмя,
							,
							Новый Структура(ПараметрыФормы)));
					
					ФормыДляВыполненияТестирования[(ФормыДляВыполненияТестирования.ВГраница())].МассивСсылок = Новый Массив();
					
					Если ТекКласс.Имя = "Справочники" Или ТекКласс.Имя = "Документы" Тогда
					
						ТаблицаВыборки = ТекКласс.Имя + "." + Элем.Имя;
						ТаблицаВыборки = СтрЗаменить(ТаблицаВыборки, "Справочники.", "Справочник.");
						ТаблицаВыборки = СтрЗаменить(ТаблицаВыборки, "Документы.", "Документ.");
						
						Запрос = Новый Запрос;
						Запрос.Текст =
							"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
							|	Таб.Ссылка
							|ИЗ
							|	&Таб& КАК Таб";
						
						Если ТекКласс.Имя = "Справочники" И ТекФорма.Иерархический Тогда
							Запрос.Текст =
							"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
							|	Таб.Ссылка
							|ИЗ
							|	&Таб& КАК Таб
							|ГДЕ 
							|	НЕ Таб.ЭтоГруппа
							|	И НЕ Таб.ПометкаУдаления";
						КонецЕсли;
						
						Если ТекКласс.Имя = "Справочники" И ТекФорма.Иерархический И ТекФорма.ОсновнаяФорма = "ОсновнаяФормаГруппы" Тогда
							Запрос.Текст =
							"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
							|	Таб.Ссылка
							|ИЗ
							|	&Таб& КАК Таб
							|ГДЕ 
							|	Таб.ЭтоГруппа
							|	И НЕ Таб.ПометкаУдаления";
						КонецЕсли;
						
						Если ТекКласс.Имя = "Документы" Тогда
							Запрос.Текст =
							"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
							|	Таб.Ссылка
							|ИЗ
							|	&Таб& КАК Таб
							|ГДЕ 
							|	Таб.Проведен
							|
							|УПОРЯДОЧИТЬ ПО
							|	Дата УБЫВ";
						КонецЕсли;
						
						Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Таб&", ТаблицаВыборки);
						
						Если Формы_КоличествоОбъектов > 1 Тогда
							Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1", "ПЕРВЫЕ " + Формы_КоличествоОбъектов);
						КонецЕсли;
						
						ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
						Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
							ФормыДляВыполненияТестирования[(ФормыДляВыполненияТестирования.ВГраница())].МассивСсылок.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Формы_ВыполнитьОткрытиеФорм(ФормыДляВыполненияТестирования)
	
	РежимПроверки = РежимыПроверки().Формы;
	
	Для каждого ТекФорма Из ФормыДляВыполненияТестирования Цикл
		
		Если ТекФорма.МассивСсылок.Количество() <> 0 Тогда
			
			Для каждого Ключ Из ТекФорма.МассивСсылок Цикл
				
				Формы_ПопытатьсяОткрытьФорму(РежимПроверки, ТекФорма, Ключ);
				
			КонецЦикла;
			
		КонецЕсли; 
		
		Формы_ПопытатьсяОткрытьФорму(РежимПроверки, ТекФорма, Неопределено);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Формы_ПопытатьсяОткрытьФорму(РежимПроверки, ТекФорма, Ключ)
	
	Форма = Неопределено;
	
	Попытка
		
		ПараметрыФормы = Новый Структура;
		Для Каждого ЭлементПараметров Из ТекФорма.ПараметрыФормы Цикл
			ПараметрыФормы.Вставить(ЭлементПараметров.Ключ, ЭлементПараметров.Значение);	
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Ключ) Тогда
			ПараметрыФормы.Вставить("Ключ", Ключ);
			ОписаниеПроверки = "Открытие формы по ключу";
		Иначе
			ОписаниеПроверки = "Открытие пустой формы";
		КонецЕсли; 
		
		Если СтрНачинаетсяС(ТекФорма.ИмяФормы, "Обработка.") Тогда
			ПолучитьФорму(ТекФорма.ИмяФормы, ПараметрыФормы); 
		Иначе
			
			Если Формы_ОткрыватьМодально Тогда
				Форма = ПолучитьФорму(ТекФорма.ИмяФормы, ПараметрыФормы); 
				Если Форма <> Неопределено Тогда 
					Форма.ОткрытьМодально(1);
				КонецЕсли;
			Иначе
				Форма = ОткрытьФорму(ТекФорма.ИмяФормы, ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.Независимый);
			КонецЕсли;
		
		КонецЕсли;
		
		ДобавитьИнформациюПройденнойПроверки(_Информация, РежимПроверки, ТекФорма.ИмяФормы, Ключ, ОписаниеПроверки);
		
	Исключение 
		
		ИнфоОшибки = ИнформацияОбОшибке();
		КраткоеОписание = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнфоОшибки);
		Описание = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнфоОшибки);
		
		СтатусАллюр = СтатусыАллюр().Ошибка;
		
		ДобавитьИнформациюПроверки(_Информация, РежимПроверки, ТекФорма.ИмяФормы, 
			Ключ, КраткоеОписание, Описание, СтатусАллюр);
		
	КонецПопытки;
	
	Если Не Формы_ОткрыватьМодально И Форма <> Неопределено Тогда 
		Попытка
			Формы_ЗакрытьОткрывшиесяОкна(Форма);
			Форма.Модифицированность = Ложь;
			Форма.Закрыть();
		Исключение
			
		КонецПопытки;
	КонецЕсли;
				
КонецПроцедуры 

&НаКлиенте
Процедура ОткрытиеФормыЗавершение(Результат, ДополнительныеПараметры)
	
КонецПроцедуры

&НаСервере
Функция Формы_ЭтоИсключение(ИмяФормы)
	
	МассивИсключений = Новый Массив();
	
	Возврат МассивИсключений.Найти(ИмяФормы) <> Неопределено;
	
КонецФункции

&НаКлиенте
Процедура Формы_ЗакрытьОткрывшиесяОкна(ФормаТестируемогоОбъекта = Неопределено)
	
	ТекущееОкно = ЭтаФорма.Окно;
	
	ОкнаНаЗакрытие = Новый Массив;
	
	Окна = ПолучитьОкна();
	Для Икс = 0 По Окна.Количество() - 1 Цикл
		
		Если Окна[Икс] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Окошко = Окна[Икс];
		
		Если ОткрытыеОкна.Найти(Окошко) <> Неопределено ИЛИ ТекущееОкно = Окошко Тогда
			Продолжить;
		КонецЕсли;
		
		ОкнаНаЗакрытие.Добавить(Окошко);
		
	КонецЦикла;
	
	Для Каждого Окошко Из ОкнаНаЗакрытие Цикл
		Для Каждого Форма Из Окошко.Содержимое Цикл
			
			Если Форма = ФормаТестируемогоОбъекта Тогда
				Продолжить;
			КонецЕсли;
			
			Если Форма.Открыта() Тогда
				Форма.Закрыть();
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Тестирование_Отчеты

&НаКлиенте
Процедура Отчеты_Проверка()
	
	ПараметрыФормированияОтчета = Новый Структура("ИмяОтчета, ХешНастроек, Настройки, КлючВарианта, ОтчетВариант, ОтчетВладелец");
	
	Для Каждого СтрокаГруппы Из Отчеты_ДеревоОбъектов.ПолучитьЭлементы() Цикл
		
		Для Каждого СтрокаЭлемента Из СтрокаГруппы.ПолучитьЭлементы() Цикл
			
			Если СтрокаЭлемента.Тестировать Тогда
				
				Состояние("Формируется вариант отчета " + СтрокаЭлемента.Представление);
				ЗаполнитьЗначенияСвойств(ПараметрыФормированияОтчета, СтрокаЭлемента);
				Отчеты_СформироватьФайлОтчета(ПараметрыФормированияОтчета);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура Отчеты_СформироватьФайлОтчета(Параметры)
	
	ЭтоВнешнийОтчет		= ТипЗнч(Параметры.ОтчетВладелец) = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки");
	ПроверяемыйОбъект	= ?(ЭтоВнешнийОтчет, "ВнешнийОтчет.", "Отчет.") + Параметры.ИмяОтчета;
	РежимПроверки		= РежимыПроверки().Отчеты;
	
	Попытка
		
		Если ЭтоВнешнийОтчет Тогда
			Отчет = ДополнительныеОтчетыИОбработкиВызовСервера.ОбъектВнешнейОбработки(Параметры.ОтчетВладелец);
		Иначе
			Отчет = Отчеты[Параметры.ИмяОтчета].Создать();
		КонецЕсли;
		
		ДобавитьИнформациюПройденнойПроверки(_Информация, РежимПроверки, ПроверяемыйОбъект, , "Создание отчета");
		
	Исключение
				
		КраткоеОписание = ОписаниеОшибки();
		Описание		= "Ошибка при попытке создать объект отчета" 
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
		СтатусАллюр		= СтатусыАллюр().Ошибка;
				
		ДобавитьИнформациюПроверки(_Информация, РежимПроверки, ПроверяемыйОбъект,, 
			КраткоеОписание, Описание, СтатусАллюр);
		
		Возврат;
		
	КонецПопытки;
	
	СхемаКомпоновкиДанных = Отчет.СхемаКомпоновкиДанных;
	
	Попытка
		
		КомпоновщикНастроек = Отчет.КомпоновщикНастроек;
		
		ДобавитьИнформациюПройденнойПроверки(_Информация, РежимПроверки, ПроверяемыйОбъект, , "Компановка отчета");
		
	Исключение
		
		КраткоеОписание = ОписаниеОшибки();		
		Описание		= "Ошибка при попытке скомпоновать отчет "
			+ Символы.ПС + Строка(ПолучитьНавигационнуюСсылку(Параметры.ОтчетВариант))
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
		СтатусАллюр		= СтатусыАллюр().Ошибка;
	
		ДобавитьИнформациюПроверки(_Информация, РежимПроверки, ПроверяемыйОбъект,, 
			КраткоеОписание, Описание, СтатусАллюр);
			
		Возврат;
		
	КонецПопытки;
	
	// Получение и загрузка настроек варианта отчета
	Если Параметры.ХешНастроек <> "" Тогда
		
		ПользовательскиеНастройки = Параметры.Настройки.Получить();
		КомпоновщикНастроек.ЗагрузитьНастройки(ПользовательскиеНастройки);
		
	Иначе
		НастройкиВарианта = Отчеты_НайтиНастройкиВарианта(СхемаКомпоновкиДанных, Параметры.КлючВарианта);
		
		Если НастройкиВарианта = Неопределено Тогда
			
			ОписаниеОшибки	= "Ошибка при получении настроек варианта отчета " + Строка(ПолучитьНавигационнуюСсылку(Параметры.ОтчетВариант));
			
			СтатусАллюр		= СтатусыАллюр().Ошибка;

			ДобавитьИнформациюПроверки(_Информация, РежимПроверки, ПроверяемыйОбъект,, 
				ОписаниеОшибки, ОписаниеОшибки, СтатусАллюр);

			Возврат;
		КонецЕсли;
		
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиВарианта);
				
		ДобавитьИнформациюПройденнойПроверки(_Информация, РежимПроверки, ПроверяемыйОбъект, , "Получение настроек варианта отчета");
		
	КонецЕсли;
	
	Фильтр = Новый Структура;
	Фильтр.Вставить("КлючОбъекта", Параметры.ИмяОтчета + "/" + Параметры.КлючВарианта);
	Фильтр.Вставить("Пользователь", ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	
	ВыборкаНастроек = ХранилищеПользовательскихНастроекОтчетов.Выбрать(Фильтр);
	Если ВыборкаНастроек.Следующий() Тогда
		ПользовательскиеНастройки = ВыборкаНастроек.Настройки;
		КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
	Иначе
		
		КлючОбъекта = "Отчет." + Параметры.ИмяОтчета + "/" + Параметры.КлючВарианта + "/ТекущиеПользовательскиеНастройки";
		ВыборкаТекущихНастроек = ХранилищеСистемныхНастроек.Выбрать(Новый Структура("КлючОбъекта", КлючОбъекта));
		Если ВыборкаТекущихНастроек.Следующий() Тогда
			ПользовательскиеНастройки = ВыборкаТекущихНастроек.Настройки;
			КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
		КонецЕсли;
		
	КонецЕсли;
	
	ДопСвойства = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	ДопСвойства.Вставить("КлючВарианта", Параметры.КлючВарианта);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Попытка
		
		ИнформацияРасшифровки = Неопределено;
		Отчет.СкомпоноватьРезультат(ТабличныйДокумент, ИнформацияРасшифровки);
		
		ДобавитьИнформациюПройденнойПроверки(_Информация, РежимПроверки, ПроверяемыйОбъект, , "Скомпоновать результат");
		
	Исключение
		
		КраткоеОписание = ОписаниеОшибки();
		Описание		= "Ошибка при попытке скомпоновать отчет "
			+ Символы.ПС + Строка(ПолучитьНавигационнуюСсылку(Параметры.ОтчетВариант))
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
		СтатусАллюр		= СтатусыАллюр().Ошибка;
		
		ДобавитьИнформациюПроверки(_Информация, РежимПроверки, ПроверяемыйОбъект,, 
			КраткоеОписание, Описание, СтатусАллюр);
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция Отчеты_НайтиНастройкиВарианта(СхемаКомпоновкиДанных, ИмяВарианта)
	
	НастройкиВарианта = Неопределено;
	Для Каждого Вариант Из СхемаКомпоновкиДанных.ВариантыНастроек Цикл
		Если Вариант.Имя = ИмяВарианта Тогда
			НастройкиВарианта = Вариант.Настройки;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НастройкиВарианта;
	
КонецФункции

#КонецОбласти

#Область Тестирование_Печать

&НаКлиенте
Процедура Печать_Проверка()
	
	ПараметрыФормирования = Новый Структура("МенеджерПечати,Идентификатор,ДополнительныеПараметры,ПолноеИмя,ОбъектПечати,Представление");
	
	Для Каждого СтрокаТипаМетаданных Из Печать_ДеревоОбъектов.ПолучитьЭлементы() Цикл
		
		Для Каждого СтрокаГруппы Из СтрокаТипаМетаданных.ПолучитьЭлементы() Цикл
			
			Для Каждого СтрокаЭлемента Из СтрокаГруппы.ПолучитьЭлементы() Цикл
				
				Если Не СтрокаЭлемента.Тестировать Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаЭлемента.ОбъектПечати) Тогда
					
					Состояние("Формируется печатная форма " + СтрокаЭлемента.Представление);
					
					ЗаполнитьЗначенияСвойств(ПараметрыФормирования, СтрокаЭлемента);
					
					Печать_СформироватьФайлПечатнойФормы(ПараметрыФормирования);
					
				Иначе
					
					КраткоеОписание = "Нет данных для печати " + СтрокаЭлемента.Представление;
					
					РежимПроверки	= РежимыПроверки().Печать;
					СтатусАллюр		= СтатусыАллюр().Пропущен;
					
					ДобавитьИнформациюПроверки(_Информация, РежимПроверки, СтрокаЭлемента.ПолноеИмя,, 
						КраткоеОписание, КраткоеОписание, СтатусАллюр);
	
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура Печать_СформироватьФайлПечатнойФормы(Параметры, ПрефиксФайла = "")
	
	РежимПроверки = РежимыПроверки().Печать;
	
	Идентификатор				= Параметры.Идентификатор;
	МенеджерПечати				= Параметры.МенеджерПечати;
	ДополнительныеПараметры		= Параметры.ДополнительныеПараметры;
	ПолноеИмя				    = Параметры.ПолноеИмя;
	ОбъектПечати				= Параметры.ОбъектПечати;
	Представление				= Параметры.Представление;
	
	Если МенеджерПечати = "СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки"
		И Найти(Идентификатор, "ВнешняяПечатнаяФорма.") = 0 Тогда
		Идентификатор = "ВнешняяПечатнаяФорма." + Идентификатор;
	КонецЕсли;
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(ОбъектПечати);
	
	ПараметрыПечати = ?(Параметры.Свойство("ДополнительныеПараметры"), Параметры.ДополнительныеПараметры,
			Новый Структура);
	Попытка
		
		ПечатныеФормы = УправлениеПечатью.СформироватьПечатныеФормы(МенеджерПечати, Идентификатор,
				МассивОбъектов, ПараметрыПечати);
				
		ДобавитьИнформациюПройденнойПроверки(_Информация, РежимПроверки, ПолноеИмя, ОбъектПечати, "Печатная форма");
		
	Исключение
		
		КраткоеОписание = ОписаниеОшибки();
		Описание		= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		СтатусАллюр		= СтатусыАллюр().Ошибка;
			
		ДобавитьИнформациюПроверки(_Информация, РежимПроверки, ПолноеИмя, ОбъектПечати, 
			КраткоеОписание, Описание, СтатусАллюр);
			
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область Тестирование_Документы

&НаКлиенте
Процедура Документы_Проверка()
	
	РежимПроверки = РежимыПроверки().Документы;
	
	Попытка
		
		ОткрытыеОкна = Новый Массив;
		Окна = ПолучитьОкна();
		Для Счетчик = 0 По Окна.Количество() - 1 Цикл
			Если Окна[Счетчик] = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ОткрытыеОкна.Добавить(Окна[Счетчик]);
		КонецЦикла;
		
		Документы_ВыполнитьТестНаКлиенте();
		
	Исключение
		
		КраткоеОписание = ОписаниеОшибки();	
		Описание = "Ошибка при выполнении тестирования"
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
		СтатусАллюр		= СтатусыАллюр().Ошибка;
				
		ДобавитьИнформациюПроверки(_Информация, РежимПроверки, РежимПроверки,, 
			КраткоеОписание, Описание, СтатусАллюр);
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Документы_ВыполнитьТестНаКлиенте()
	
	Если ОчиститьДатыЗапрета Тогда 
		Документы_ОчиститьДатыЗапрета();
	КонецЕсли;
	
	Документы_ЗаполнитьПроверяемыеСсылки();
	
	ВсеПротестировано = Истина;
	Для Каждого ТекКласс Из Документы_ДеревоОбъектов.ПолучитьЭлементы() Цикл
		
		Для Каждого ТекДокумент Из ТекКласс.ПолучитьЭлементы() Цикл
			
			Если Не ТекДокумент.Тестировать Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого Ссылка Из ТекДокумент.СписокСсылок Цикл
				
				Документы_ПротестироватьОбъектПоСсылкеНаКлиенте(ТекДокумент.ПолноеИмя, Ссылка.Значение);
				ВсеПротестировано = Ложь;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ВсеПротестировано Тогда
		Возврат;
	КонецЕсли;
	
	Документы_ВыполнитьТестНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Документы_ПротестироватьОбъектПоСсылкеНаКлиенте(ИмяОбъектаМетаданных, Ссылка)
	
	РежимПроверки		= РежимыПроверки().Документы;
	НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Ссылка);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Ключ", Ссылка);
	
	ИмяФормыТестирования = ИмяОбъектаМетаданных + ".ФормаОбъекта";
	
	Попытка
		
		Форма = ОткрытьФорму(ИмяФормыТестирования, ПараметрыОткрытия);
		
		ДобавитьИнформациюПройденнойПроверки(_Информация, РежимПроверки, ИмяФормыТестирования, Ссылка, "Открытие формы объекта");
		
	Исключение
		
		КраткоеОписание = ОписаниеОшибки();
		
		Описание = "Ошибка открытия формы " + ИмяФормыТестирования
			+ Символы.ПС + НСтр("ru = 'Открыть форму объекта по ссылке : '") + НавигационнаяСсылка
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
		СтатусАллюр		= СтатусыАллюр().Ошибка;
		
		ДобавитьИнформациюПроверки(_Информация, РежимПроверки, ИмяФормыТестирования, Ссылка, 
			КраткоеОписание, Описание, СтатусАллюр);
		
		Возврат;
		
	КонецПопытки;
	
	Документы_ЗакрытьОткрывшиесяОкна(Форма);
	
	Если Форма = Неопределено ИЛИ Форма.Окно = Неопределено Тогда
		
		КраткоеОписание = "Форма не открылась. Возможно в обработчиках ПриСоздании или ПриОткрытии, флаг Отказ = Истина";
		
		Описание = НСтр("ru = 'Объект метаданных: %1
			|При попытке открыть форму, окно не было открыто.
			|Навигационная ссылка: %2'");
		Описание = СтрЗаменить(Описание, "%1", ИмяФормыТестирования);
		Описание = СтрЗаменить(Описание, "%2", НавигационнаяСсылка);
		
		СтатусАллюр			= СтатусыАллюр().Сломан;
		
		ДобавитьИнформациюПроверки(_Информация, РежимПроверки, ИмяФормыТестирования, Ссылка,
			КраткоеОписание, Описание, СтатусАллюр);
		
		Возврат;
		
	КонецЕсли;
	
	Попытка
		
		ФормаЗаполнена = Форма.ПроверитьЗаполнение();
		
		ДобавитьИнформациюПройденнойПроверки(_Информация, РежимПроверки, ИмяФормыТестирования, Ссылка, "Запись объекта");
		
	Исключение
		
		КраткоеОписание = ОписаниеОшибки();
		
		Описание =  "Ошибка проверки заполнения формы " + ИмяФормыТестирования
			+ Символы.ПС + НСтр("ru = 'Проверить заполнение (записать) объект по ссылке: '") + НавигационнаяСсылка
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
		СтатусАллюр		= СтатусыАллюр().Ошибка;
					
		ДобавитьИнформациюПроверки(_Информация, РежимПроверки, ИмяФормыТестирования, Ссылка, 
			КраткоеОписание, Описание, СтатусАллюр);
	
		Возврат;
		
	КонецПопытки;
	
	Если Форма.Открыта() Тогда
		Форма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Документы_ЗакрытьОткрывшиесяОкна(ФормаТестируемогоОбъекта = Неопределено)
	
	ТекущееОкно = ЭтаФорма.Окно;
	
	ОкнаНаЗакрытие = Новый Массив;
	
	Окна = ПолучитьОкна();
	Для Икс = 0 По Окна.Количество() - 1 Цикл
		
		Если Окна[Икс] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Окошко = Окна[Икс];
		
		Если ОткрытыеОкна.Найти(Окошко) <> Неопределено ИЛИ ТекущееОкно = Окошко Тогда
			Продолжить;
		КонецЕсли;
		
		ОкнаНаЗакрытие.Добавить(Окошко);
		
	КонецЦикла;
	
	Для Каждого Окошко Из ОкнаНаЗакрытие Цикл
		Для Каждого Форма Из Окошко.Содержимое Цикл
			
			Если Форма = ФормаТестируемогоОбъекта Тогда
				Продолжить;
			КонецЕсли;
			
			Если Форма.Открыта() Тогда
				Форма.Закрыть();
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура Документы_ВыполнитьТестНаСервере()
	
	Для Каждого ТекКласс Из Документы_ДеревоОбъектов.ПолучитьЭлементы() Цикл
		
		Для Каждого ТекДокумент Из ТекКласс.ПолучитьЭлементы() Цикл
			
			Если Не ТекДокумент.Тестировать Тогда
				Продолжить;
			КонецЕсли;
			
			МассивРегистраторов = ТекДокумент.СписокСсылок.ВыгрузитьЗначения();
			
			Если НЕ ЗначениеЗаполнено(МассивРегистраторов) Тогда
				
				КраткоеОписание = "Нет данных для проведения. Проверьте дату запрета. " + ТекДокумент.Синоним;
				
				РежимПроверки	= РежимыПроверки().Документы;
				СтатусАллюр		= СтатусыАллюр().Пропущен;
				
				ДобавитьИнформациюПроверки(_Информация, РежимПроверки, ТекДокумент.ПолноеИмя,, 
					КраткоеОписание, КраткоеОписание, СтатусАллюр);			
				
				Продолжить;
				
			КонецЕсли;
			
			Документы_ПерезаписатьДокументы(МассивРегистраторов);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура Документы_ПерезаписатьДокументы(МассивРегистраторов)
	
	РежимПроверки	= РежимыПроверки().Документы;
	Отбор			= Новый Структура("КлючДанных,Текст");
	
	Для Каждого ТекДокумент Из МассивРегистраторов Цикл
		
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ТекДокумент);
		
		ДокументОбъект = ТекДокумент.ПолучитьОбъект();
		
		ЕстьОшибкиЗаполнения = Не ДокументОбъект.ПроверитьЗаполнение();
		СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
		
		Если ЕстьОшибкиЗаполнения Тогда
			
			Для Каждого СтрокаСообщения Из СообщенияПользователю Цикл
				
				Ключ = ?(ЗначениеЗаполнено(СтрокаСообщения.КлючДанных), СтрокаСообщения.КлючДанных, ТекДокумент);
				
				ОшибкаЗаполнения = "";
				
				Метаданное		= Метаданные.НайтиПоТипу(ТипЗнч(Ключ));
				ИмяМетаданного	= ?(Метаданное <> Неопределено, Метаданное.ПолноеИмя(), Строка(Ключ));
				
				
				КраткоеОписание = ОписаниеОшибки();
				Описание 		= "Ошибка проверки заполнения " + ИмяМетаданного + ПолучитьНавигационнуюСсылку(Ключ) 
						+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());	
						
				СтатусАллюр		= СтатусыАллюр().Ошибка;

				ДобавитьИнформациюПроверки(_Информация, РежимПроверки, ИмяМетаданного, 
					Ключ, КраткоеОписание, Описание, СтатусАллюр);
				
			КонецЦикла;
			
		Иначе
			
			Метаданное		= Метаданные.НайтиПоТипу(ТипЗнч(ТекДокумент));
			ИмяМетаданного	= ?(Метаданное <> Неопределено, Метаданное.ПолноеИмя(), Строка(ТекДокумент));

			ДобавитьИнформациюПройденнойПроверки(_Информация, РежимПроверки, ИмяМетаданного, ТекДокумент, "Проверка заполнения");
			
		КонецЕсли;
		
		Попытка
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			ДобавитьИнформациюПройденнойПроверки(_Информация, РежимПроверки, ИмяМетаданного, ТекДокумент, "Проведение документа");
			
		Исключение
			
			Метаданное		= Метаданные.НайтиПоТипу(ТипЗнч(ТекДокумент));
			ИмяМетаданного	= ?(Метаданное <> Неопределено, Метаданное.ПолноеИмя(), Строка(ТекДокумент));
			
			КраткоеОписание = ОписаниеОшибки();
			
			Описание 		= "Ошибка при проведении документа " + ИмяМетаданного
				+ Символы.ПС + НавигационнаяСсылка
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
			СтатусАллюр		= СтатусыАллюр().Ошибка;

			ДобавитьИнформациюПроверки(_Информация, РежимПроверки, ИмяМетаданного, 
				ТекДокумент, КраткоеОписание, Описание, СтатусАллюр);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура Документы_ОчиститьДатыЗапрета()
	
	НаборДатЗапрета = РегистрыСведений.ДатыЗапретаИзменения.СоздатьНаборЗаписей();
	НаборДатЗапрета.Записать();
	
КонецПроцедуры

&НаСервере
Процедура Документы_ЗаполнитьПроверяемыеСсылки()
	
	НовоеДерево = РеквизитФормыВЗначение("Документы_ДеревоОбъектов", Тип("ДеревоЗначений"));
	Документы_ЗаполнитьСпискиПроверяемыхСсылок(НовоеДерево);
	ЗначениеВРеквизитФормы(НовоеДерево, "Документы_ДеревоОбъектов");
	
КонецПроцедуры

&НаСервере
Процедура Документы_ЗаполнитьСпискиПроверяемыхСсылок(Дерево)
	
	Для Каждого ТекДокумент Из Дерево.Строки[0].Строки Цикл
		
		Если Не ТекДокумент.Тестировать Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекДокумент.Количество) Тогда
			Количество = ТекДокумент.Количество;
		Иначе
			Количество = Документы_КоличествоОбъектов;
		КонецЕсли;
		
		ПервыеКоличество = ?(Количество = 0, "",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(" ПЕРВЫЕ %1 ", Формат(Количество, "ЧГ=")));
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ %ПервыеКоличество%
			|	ДокументТестирования.Ссылка
			|ИЗ
			|	%ДокументТестирования% КАК ДокументТестирования
			|ГДЕ
			| ДокументТестирования.Проведен
			| %ДатаЗапрета%
			|
			|УПОРЯДОЧИТЬ ПО
			|	Дата УБЫВ";
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ДокументТестирования%", ТекДокумент.ПолноеИмя);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПервыеКоличество%", ПервыеКоличество);
		
		Если НЕ ОчиститьДатыЗапрета Тогда
			
			ДатаЗапрета = ПоследняяДатаЗапрета();
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ДатаЗапрета%", "И ДокументТестирования.Дата > &ДатаЗапрета");
			Запрос.УстановитьПараметр("ДатаЗапрета", ДатаЗапрета);
			
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ДатаЗапрета%", "");
		КонецЕсли;
			
		МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		ТекДокумент.СписокСсылок.ЗагрузитьЗначения(МассивСсылок);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Тестирование_Справочники

&НаКлиенте
Процедура СправочникиИПВХ_Проверка()
	
	РежимПроверки = РежимыПроверки().Справочники;
	
	Попытка
		
		ОткрытыеОкна = Новый Массив;
		Окна = ПолучитьОкна();
		Для Счетчик = 0 По Окна.Количество() - 1 Цикл
			Если Окна[Счетчик] = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ОткрытыеОкна.Добавить(Окна[Счетчик]);
		КонецЦикла;
		
		Справочники_ПротестироватьПоТиповымНастройкам();
		
	Исключение
		
		КраткоеОписание = ОписаниеОшибки();

		Описание 		= "При тестировании объектов не должно возникать ошибок обработки " 
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
		СтатусАллюр		= СтатусыАллюр().Ошибка;
		
		ДобавитьИнформациюПроверки(_Информация, РежимПроверки, РежимПроверки,, 
			КраткоеОписание, Описание, СтатусАллюр);
				
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Справочники_ПротестироватьПоТиповымНастройкам()
	
	ОбъектыКТиповомуТестированию = Справочники_ПолучитьОбъектыКТиповомуТестированию(Справочники_ДеревоОбъектов);
	
	// Соответствие, в котором будут сохранены количества ссылок для соответствующих объектов
	// метаданных в случае, если используется ограничение по времени тестирования
	ОбъектыДляТестированияНаСервере = Новый Соответствие;
	
	Для Каждого ТестируемыйОбъект Из ОбъектыКТиповомуТестированию Цикл
		
		// Заполнение массива тестируемых ссылок в зависимости от настроек
		Если ЗначениеЗаполнено(Справочники_КоличествоОбъектов) Тогда
			ТестируемыеСсылки = Справочники_ПолучитьСлучайныеСсылкиПоКоличеству(ТестируемыйОбъект, Справочники_КоличествоОбъектов);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТестируемыеСсылки) Тогда
			
			КраткоеОписание = "Нет данных для тестирования " + ТестируемыйОбъект;
			
			РежимПроверки	= РежимыПроверки().Справочники;
			СтатусАллюр		= СтатусыАллюр().Пропущен;
			
			ДобавитьИнформациюПроверки(_Информация, РежимПроверки, ТестируемыйОбъект,, 
				КраткоеОписание, КраткоеОписание, СтатусАллюр);	
			
		КонецЕсли;
		
		Для Каждого ТестируемаяСсылка Из ТестируемыеСсылки Цикл
			
			ЕстьОшибки = Справочники_ПротестироватьОбъектПоСсылкеНаКлиенте(ТестируемыйОбъект, ТестируемаяСсылка);
			
			Если ЕстьОшибки = Ложь Тогда
				Если ОбъектыДляТестированияНаСервере[ТестируемыйОбъект] = Неопределено Тогда
					ОбъектыДляТестированияНаСервере[ТестируемыйОбъект] = Новый Массив;
				КонецЕсли;
				ОбъектыДляТестированияНаСервере[ТестируемыйОбъект].Добавить(ТестируемаяСсылка);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Справочники_ПротестироватьЗаписьОбъектовНаСервере(ОбъектыДляТестированияНаСервере);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция Справочники_ПолучитьОбъектыКТиповомуТестированию(ДеревоОбъектов)
	
	МассивСтрок = Справочники_ПолучитьМассивПодчиненных(ДеревоОбъектов);
	Результат = Новый Массив;
	
	Для Каждого Стр Из МассивСтрок Цикл
		
		Если Стр.Тестировать = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		Если Стр.КоличествоСсылок = 0
			И ЗначениеЗаполнено(Стр.ПолноеИмя) Тогда
			
			Результат.Добавить(Стр.ПолноеИмя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Справочники_ПолучитьМассивПодчиненных(ДанныеФормыДерево, Результат = Неопределено)
	
	Если Результат = Неопределено Тогда
		Результат = Новый Массив;
	КонецЕсли;
	
	Для Каждого ЭлементДерева Из ДанныеФормыДерево.ПолучитьЭлементы() Цикл
		Результат.Добавить(ЭлементДерева);
		Справочники_ПолучитьМассивПодчиненных(ЭлементДерева, Результат);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция Справочники_ПолучитьСлучайныеСсылкиПоКоличеству(ИмяОбъектаМетаданных, КоличествоСсылок)
	
	ОтсеиватьГруппы = Справочники_ОтсеиватьГруппы(ИмяОбъектаМетаданных);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	АнализируемыйОбъект.Ссылка Как Ссылка
		|ИЗ
		|	%ОбъектМетаданных% КАК АнализируемыйОбъект
		|ГДЕ
		|	НЕ АнализируемыйОбъект.ПометкаУдаления
		|	И [УсловиеГруппа]";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОбъектМетаданных%", ИмяОбъектаМетаданных);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "[УсловиеГруппа]", ?(ОтсеиватьГруппы, "АнализируемыйОбъект.ЭтоГруппа = ЛОЖЬ", "ИСТИНА"));
	
	Если КоличествоСсылок > 1 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1", "ПЕРВЫЕ " + КоличествоСсылок);
	КонецЕсли;
	
	МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивСсылок;
	
КонецФункции

&НаСервереБезКонтекста
Функция Справочники_ОтсеиватьГруппы(ИмяОбъектаМетаданных)
	
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ИмяОбъектаМетаданных);
	ИерархияГруппИЭлементов = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов;
	
	Если Лев(ИмяОбъектаМетаданных, 17) = "ПланВидовРасчета." Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат МетаданныеОбъекта.Иерархический
	И ((Лев(ИмяОбъектаМетаданных, 11) = "Справочник." И МетаданныеОбъекта.ВидИерархии = ИерархияГруппИЭлементов)
			ИЛИ Лев(ИмяОбъектаМетаданных, 23) = "ПланВидовХарактеристик."
		);
	
КонецФункции

&НаКлиенте
Функция Справочники_ПротестироватьОбъектПоСсылкеНаКлиенте(ИмяОбъектаМетаданных, Ссылка)
	
	РежимПроверки		= РежимыПроверки().Справочники;
	НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Ссылка);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Ключ", Ссылка);
	
	// Обход проблемы с пустыми навигационными ссылками
	Если Не ЗначениеЗаполнено(НавигационнаяСсылка) Тогда
		НавигационнаяСсылка = Строка(Ссылка);
	КонецЕсли;
	
	ИмяФормыТестирования	= ИмяОбъектаМетаданных + ".ФормаОбъекта";
	ПроверяемыйОбъект		= Справочники_ПолучитьИмяОсновнойФормыОбъектаОбъектаМетаданных(ИмяОбъектаМетаданных);
	
	Попытка
		
		Форма = ОткрытьФорму(ИмяФормыТестирования, ПараметрыОткрытия);
		
		ДобавитьИнформациюПройденнойПроверки(_Информация, РежимПроверки, ПроверяемыйОбъект, Ссылка, "Открытие формы объекта по ссылке");
		
	Исключение
		
		КраткоеОписание = ОписаниеОшибки();
		
		Описание 		= ИмяФормыТестирования
			+ Символы.ПС + НСтр("ru = 'Открыть форму объекта по ссылке : '") + НавигационнаяСсылка
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());

		СтатусАллюр			= СтатусыАллюр().Ошибка;
	
		ДобавитьИнформациюПроверки(_Информация, РежимПроверки, ПроверяемыйОбъект, 
			Ссылка, КраткоеОписание, Описание, СтатусАллюр);

		Возврат Ложь;
		
	КонецПопытки;
	
	Справочники_ЗакрытьОткрывшиесяОкна(Форма);
	
	Если Форма = Неопределено ИЛИ Форма.Окно = Неопределено Тогда
		
		КраткоеОписание = "Форма не открылась. Возможно в обработчиках ПриСоздании или ПриОткрытии, флаг Отказ = Истина";
		
		Описание = НСтр("ru = 'Объект метаданных: %1
			|При попытке открыть форму, окно не было открыто.
			|Навигационная ссылка: %2'");
		Описание = СтрЗаменить(Описание, "%1", ИмяФормыТестирования);
		Описание = СтрЗаменить(Описание, "%2", НавигационнаяСсылка);
		
		ПроверяемыйОбъект	= Справочники_ПолучитьИмяОсновнойФормыОбъектаОбъектаМетаданных(ИмяОбъектаМетаданных);
		СтатусАллюр			= СтатусыАллюр().Сломан;
		
		ДобавитьИнформациюПроверки(_Информация, РежимПроверки, ПроверяемыйОбъект, 
			Ссылка, КраткоеОписание, Описание, СтатусАллюр);
		
		Возврат Истина;
		
	КонецЕсли;
	
	Попытка
		
		ФормаЗаполнена = Форма.ПроверитьЗаполнение();
		
		ДобавитьИнформациюПройденнойПроверки(_Информация, РежимПроверки, Форма.ИмяФормы, Ссылка, "Заполнение формы");
			
	Исключение
		
		КраткоеОписание = ОписаниеОшибки();
		
		Описание 		= НСтр("ru = 'Ошибка проверки заполнения формы'")
			+ Символы.ПС + ИмяФормыТестирования
			+ Символы.ПС + НСтр("ru = 'Проверить заполнение (записать) объект по ссылке: '") + НавигационнаяСсылка
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
		СтатусАллюр		= СтатусыАллюр().Ошибка;
		
		ДобавитьИнформациюПроверки(_Информация, РежимПроверки, Форма.ИмяФормы, 
			Ссылка, КраткоеОписание, Описание, СтатусАллюр);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Если Не ФормаЗаполнена Тогда
		
		КраткоеОписание = ОписаниеОшибки();
		
		Описание 		= НСтр("ru = 'Объект не проходит проверку заполнения в форме'")
			+ Символы.ПС + ИмяФормыТестирования
			+ Символы.ПС + НСтр("ru = 'Проверить заполнение (записать) объект по ссылке: '") + НавигационнаяСсылка
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
		СтатусАллюр		= СтатусыАллюр().Ошибка;
		
		ДобавитьИнформациюПроверки(_Информация, РежимПроверки, Форма.ИмяФормы, 
			Ссылка, КраткоеОписание, Описание, СтатусАллюр);
		
		Если Форма.Открыта() Тогда
			Форма.Закрыть();
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Форма.Открыта() Тогда
		Форма.Закрыть();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура Справочники_ЗакрытьОткрывшиесяОкна(ФормаТестируемогоОбъекта = Неопределено)
	
	ТекущееОкно = ЭтаФорма.Окно;
	
	ОкнаНаЗакрытие = Новый Массив;
	
	Окна = ПолучитьОкна();
	Для Икс = 0 По Окна.Количество() - 1 Цикл
		
		Если Окна[Икс] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Окошко = Окна[Икс];
		
		Если ОткрытыеОкна.Найти(Окошко) <> Неопределено ИЛИ ТекущееОкно = Окошко Тогда
			Продолжить;
		КонецЕсли;
		
		ОкнаНаЗакрытие.Добавить(Окошко);
		
	КонецЦикла;
	
	Для Каждого Окошко Из ОкнаНаЗакрытие Цикл
		Для Каждого Форма Из Окошко.Содержимое Цикл
			
			Если Форма = ФормаТестируемогоОбъекта Тогда
				Продолжить;
			КонецЕсли;
			
			Если Форма.Открыта() Тогда
				Форма.Закрыть();
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция Справочники_ПолучитьИмяОсновнойФормыОбъектаОбъектаМетаданных(ИмяОбъектаМетаданных)
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяОбъектаМетаданных);
	
	Если ОбъектМетаданных.ОсновнаяФормаОбъекта <> Неопределено Тогда
		Возврат ОбъектМетаданных.ОсновнаяФормаОбъекта.ПолноеИмя();
	КонецЕсли;
	
	Возврат "Не удалось определить форму объекта по умолчанию";
	
КонецФункции

&НаСервере
Процедура Справочники_ПротестироватьЗаписьОбъектовНаСервере(ОбъектыИСсылки)
	
	Для Каждого ПараКЗ Из ОбъектыИСсылки Цикл
		
		ИмяОбъектаМетаданных = ПараКЗ.Ключ;
		МассивСсылок = ПараКЗ.Значение;
		
		Для Каждого ТестируемаяСсылка Из МассивСсылок Цикл
			Справочники_ПротестироватьЗаписьОбъектаНаСервере(ТестируемаяСсылка);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура Справочники_ПротестироватьЗаписьОбъектаНаСервере(СсылкаНаОбъект)
	
	РежимПроверки		= РежимыПроверки().Справочники;
	НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(СсылкаНаОбъект);
	
	ОбъектПоСсылке = СсылкаНаОбъект.ПолучитьОбъект();
	
	Метаданное			= Метаданные.НайтиПоТипу(ТипЗнч(СсылкаНаОбъект));
	ИмяМетаданного		= ?(Метаданное <> Неопределено, Метаданное.ПолноеИмя(), Строка(СсылкаНаОбъект));
	ПроверяемыйОбъект	= ОбъектПоСсылке.Метаданные().ПолноеИмя();
	
	Попытка
		
		ОбъектПоСсылке.Записать();
		
		ДобавитьИнформациюПройденнойПроверки(_Информация, РежимПроверки, ПроверяемыйОбъект, СсылкаНаОбъект, "Запись объекта");
		
	Исключение
		
		КраткоеОписание = ОписаниеОшибки();
		Описание 		= "Ошибка при перезаписи объекта на сервере " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());

		СтатусАллюр			= СтатусыАллюр().Ошибка;
		
		ДобавитьИнформациюПроверки(_Информация, РежимПроверки, ПроверяемыйОбъект, 
			СсылкаНаОбъект, КраткоеОписание, Описание, СтатусАллюр);
	
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область Allure

&НаКлиенте
Процедура СоздатьОтчетАллюр()
	
	Если НЕ ДелатьОтчетВФорматеАллюр Тогда
		Возврат;
	КонецЕсли;
	
	Если СокрЛП(КаталогВыгрузкиAllure) = "" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не задан каталог выгрузки Allure");
		Возврат;
	КонецЕсли;
	
	СоздатьКаталогЕслиЕгоНет(КаталогВыгрузкиAllure, Истина);
	
	Отчеты = СоздатьОтчетАллюрНаСервере();
	ЭкспортироватьОтчетыАллюр(Отчеты);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкспортироватьОтчетыАллюр(Отчеты)
	
	Для Каждого СтрокаОтчет Из Отчеты Цикл
		
		ИмяФайла = ПолучитьУникальноеИмяФайлаАллюр(КаталогВыгрузкиAllure);
		СохранитьОтчетАллюр(СтрокаОтчет, ИмяФайла);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчетАллюр(Отчет, Знач ИмяФайла)
	
	Если ТипЗнч(Отчет) = Тип("Строка") Тогда
		СтрокаJSON = Отчет;
	Иначе
		СтрокаJSON = Отчет.ПолучитьТекст();
	КонецЕсли;
	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.ANSI);
	ЗаписьТекста.Закрыть();
	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, , , Истина);
	ЗаписьТекста.Записать(СтрокаJSON);
	ЗаписьТекста.Закрыть();
	
КонецПроцедуры

&НаСервере
Функция СоздатьОтчетАллюрНаСервере()

	МассивОтчетов = Новый Массив;
	
	Для Каждого СтрокаИнформация Из _Информация Цикл
		
		ОписаниеШага	= СоздатьОписаниеШага(СтрокаИнформация);
		Отчет			= СериализоватьОписаниеШагаАллюр(ОписаниеШага);

		МассивОтчетов.Добавить(Отчет);
		
	КонецЦикла;
	
	Возврат МассивОтчетов;

КонецФункции

&НаСервере
Функция СоздатьОписаниеШага(Знач РезультатШага)
	
	РежимПроверки			= РезультатШага.РежимПроверки;
	Описание				= РезультатШага.Описание;
	КраткоеОписание			= РезультатШага.КраткоеОписание;
	Данные					= РезультатШага.Данные;
	ПроверяемыйОбъект		= РезультатШага.ПроверяемыйОбъект;
	
	ОписаниеШага 			= ОписаниеСценарияАллюр();
	
	ОписаниеШага.Вставить("name"				, КраткоеОписание);
	ОписаниеШага.Вставить("description"			, РежимПроверки);

	ВставитьОписаниеСтатусаАллюр(ОписаниеШага, Описание);

	ОписаниеШага.Вставить("status"				, РезультатШага.СтатусАллюр);

	ОписаниеШага.historyId		= СтрШаблон("%1. %2. %3", РежимПроверки, ПроверяемыйОбъект, КраткоеОписание);
	ОписаниеШага.description	= СтрШаблон("%1. %2. %3", РежимПроверки, ПроверяемыйОбъект, Данные);

	СписокМеток = ОписаниеШага.labels;
	ДобавитьМеткуАллюр(СписокМеток, "host"		, РежимПроверки);
	ДобавитьМеткуАллюр(СписокМеток, "feature"	, РежимПроверки);
	ДобавитьМеткуАллюр(СписокМеток, "story"		, ПроверяемыйОбъект);

	Возврат ОписаниеШага;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеСценарияАллюр()
	
	GUID = Новый УникальныйИдентификатор();
	
	СтруктураРезультата = Новый Структура();
	СтруктураРезультата.Вставить("uuid"				, Строка(GUID));
	СтруктураРезультата.Вставить("historyId"		, Неопределено);
	СтруктураРезультата.Вставить("name"				, Неопределено);
	СтруктураРезультата.Вставить("fullName"			, "");
	СтруктураРезультата.Вставить("start"			, Неопределено);
	СтруктураРезультата.Вставить("stop"				, Неопределено);
	СтруктураРезультата.Вставить("statusDetails"	, Новый Структура("known, muted,flaky", Ложь, Ложь, Ложь));
	СтруктураРезультата.Вставить("status"			, Неопределено);
	СтруктураРезультата.Вставить("stage"			, "finished"); 
	СтруктураРезультата.Вставить("steps"			, Новый Массив());
	СтруктураРезультата.Вставить("parameters"		, Новый Массив());
	СтруктураРезультата.Вставить("labels"			, Новый Массив());
	СтруктураРезультата.Вставить("links"			, Новый Массив());
	СтруктураРезультата.Вставить("attachments"		, Новый Массив());
	СтруктураРезультата.Вставить("description"		, "");

	Возврат СтруктураРезультата;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьМеткуАллюр(Знач СписокМеток, Знач Имя, Знач Значение)

	Метка       = Новый Структура("name, value");
	Метка.name  = Имя;
	Метка.value = Значение;

	СписокМеток.Вставить(0, Метка);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтатусыАллюр()
	
	Статусы = Новый Структура;
	Статусы.Вставить("Ошибка",		"failed");
	Статусы.Вставить("Сломан",		"broken");
	Статусы.Вставить("Пройден",		"passed");
	Статусы.Вставить("Пропущен",	"skipped");
	
	Возврат Статусы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьОписаниеСтатусаАллюр(Знач ОписаниеШага, Знач ОписаниеОшибки = "")

	ОписаниеШага.Вставить("statusDetails",
		Новый Структура("known, muted, flaky, message, trace",
			Ложь, Ложь, Ложь, ОписаниеОшибки, ""));
			
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СериализоватьОписаниеШагаАллюр(ОписаниеШага)

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ОписаниеШага);
	СтрокаJSON = ЗаписьJSON.Закрыть();

	Возврат СтрокаJSON;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьУникальноеИмяФайлаАллюр(Знач ПутьКОтчету)

	Файл			= Новый Файл(ПутьКОтчету);
	ПутьКаталога	= ?(Файл.Существует() И Файл.ЭтоКаталог(), Файл.ПолноеИмя, Файл.Путь);

	ИмяФайла = СформироватьИмяАллюр(ПутьКаталога);

	Возврат ИмяФайла;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьИмяАллюр(Путь)

	ГУИД = Новый УникальныйИдентификатор;

	ИмяФайла = СтрЗаменить("%1-result.json", "%1", ГУИД);

	ИмяФайла = Путь + "/" + ИмяФайла;

	Возврат ИмяФайла;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура СвернутьВеткиДерева(ЭлементФормы, ВеткаДерва)
	
	Для Каждого СтрокаДерева Из ВеткаДерва.ПолучитьЭлементы() Цикл
		
		СвернутьВеткиДерева(ЭлементФормы, СтрокаДерева);
		
		ЭлементФормы.Свернуть(СтрокаДерева.ПолучитьИдентификатор());
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПометкиВСтрокеДерева(СтрокаДерева)
	
	Если СтрокаДерева.Тестировать = 2 Тогда
		СтрокаДерева.Тестировать = 0;
	КонецЕсли;
	
	ПроставитьПометкуВПодчиненныхСтроках(СтрокаДерева, СтрокаДерева.Тестировать); 
	
	ТекущаяСтрока   = СтрокаДерева;
	ТекущийРодитель = ТекущаяСтрока.ПолучитьРодителя();
	
	Пока ТекущийРодитель <> Неопределено Цикл
		
		Если ОдинаковаяПометкаУСтрокОдногоУровня(ТекущийРодитель, ТекущаяСтрока.Тестировать) Тогда
			ТекущийРодитель.Тестировать = ТекущаяСтрока.Тестировать; 	
		Иначе
			ТекущийРодитель.Тестировать = 2;	
		КонецЕсли;
		
		ТекущаяСтрока   = ТекущийРодитель;
		ТекущийРодитель = ТекущаяСтрока.ПолучитьРодителя();
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкуВПодчиненныхСтроках(ВеткаДерева, Тестировать)
	
	Для Каждого СтрокаДерева Из ВеткаДерева.ПолучитьЭлементы() Цикл
		
		СтрокаДерева.Тестировать = Тестировать;
		
		ПроставитьПометкуВПодчиненныхСтроках(СтрокаДерева, Тестировать);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ОдинаковаяПометкаУСтрокОдногоУровня(ВеткаДерева, Тестировать)
	
	Для Каждого СтрокаДерева Из ВеткаДерева.ПолучитьЭлементы() Цикл
		
		Если СтрокаДерева.Тестировать <> Тестировать Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура УстановитьСнятьПометку(ЭлементФормы, Дерево, Тестировать)
	
	ВыделенныеСтроки = ЭлементФормы.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		
		Для Каждого Индекс Из ВыделенныеСтроки Цикл
			
			СтрокаДерева = Дерево.НайтиПоИдентификатору(Индекс);
			СтрокаДерева.Тестировать = Тестировать;
			
			ПриИзмененииПометкиВСтрокеДерева(СтрокаДерева);
			
		КонецЦикла;
		
	Иначе
		
		ПроставитьПометкуВПодчиненныхСтроках(Дерево, Тестировать);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура НастроитьЭлементыФормыПоРежимамПроверки() 
	
	Элементы.Страница_Формы.Доступность           = ПроверятьФормы;
	Элементы.Страница_Отчеты.Доступность          = ПроверятьОтчеты;
	Элементы.Страница_Печать.Доступность          = ПроверятьПечать;
	Элементы.Страница_Документы.Доступность       = ПроверятьДокументы;
	Элементы.Страница_СправочникиИПВХ.Доступность = ПроверятьСправочники;
	
КонецПроцедуры

&НаСервере
Функция ДеревоМетаданныхКонфигурации(Отбор = Неопределено, ПолучатьСамОбъектМетаданных = Ложь) Экспорт 
	
	ИспользоватьОтбор = (Отбор <> Неопределено);
	
	КоллекцииОбъектовМетаданных = Новый ТаблицаЗначений;
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Имя");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Синоним");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Картинка");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("КартинкаОбъекта");
	
	НоваяСтрокаКоллекцииОбъектовМетаданных("Справочники",             НСтр("ru = 'Справочники';
																			|en = 'Catalogs'"),               БиблиотекаКартинок.Справочник,             БиблиотекаКартинок.Справочник,                   КоллекцииОбъектовМетаданных);
	НоваяСтрокаКоллекцииОбъектовМетаданных("Документы",               НСтр("ru = 'Документы';
																			|en = 'Documents'"),                 БиблиотекаКартинок.Документ,               БиблиотекаКартинок.ДокументОбъект,               КоллекцииОбъектовМетаданных);
	
	НоваяСтрокаКоллекцииОбъектовМетаданных("ПланыВидовХарактеристик", НСтр("ru = 'Планы видов характеристик';
																			|en = 'Charts of characteristic types'"), БиблиотекаКартинок.ПланВидовХарактеристик, БиблиотекаКартинок.ПланВидовХарактеристик, КоллекцииОбъектовМетаданных);
	
	НоваяСтрокаКоллекцииОбъектовМетаданных("ПланыВидовРасчета",       НСтр("ru = 'Планы видов расчета';
																			|en = 'Charts of calculation types'"),       БиблиотекаКартинок.ПланВидовРасчета,       БиблиотекаКартинок.ПланВидовРасчетаОбъект,       КоллекцииОбъектовМетаданных);
	
	//НоваяСтрокаКоллекцииОбъектовМетаданных("БизнесПроцессы",          НСтр("ru = 'Бизнес-процессы';
	//																		|en = 'Business processes'"),           БиблиотекаКартинок.БизнесПроцесс,          БиблиотекаКартинок.БизнесПроцессОбъект,          КоллекцииОбъектовМетаданных);
	//НоваяСтрокаКоллекцииОбъектовМетаданных("Задачи",                  НСтр("ru = 'Задачи';
	//																		|en = 'Tasks'"),                    БиблиотекаКартинок.Задача,                 БиблиотекаКартинок.ЗадачаОбъект,                 КоллекцииОбъектовМетаданных);
	
	НоваяСтрокаКоллекцииОбъектовМетаданных("Обработки",               НСтр("ru = 'Обработки';
																			|en = 'DataProcessors'"),                 БиблиотекаКартинок.Обработка,               БиблиотекаКартинок.Обработка,               КоллекцииОбъектовМетаданных);
	
	// Возвращаемое значение функции.
	ДеревоМетаданных = Новый ДеревоЗначений;
	ДеревоМетаданных.Колонки.Добавить("Имя");
	ДеревоМетаданных.Колонки.Добавить("ПолноеИмя");
	ДеревоМетаданных.Колонки.Добавить("Синоним");
	ДеревоМетаданных.Колонки.Добавить("Картинка");
	
	Если ПолучатьСамОбъектМетаданных Тогда
		ДеревоМетаданных.Колонки.Добавить("ОбъектМетаданных");
	КонецЕсли;
	
	Для Каждого СтрокаКоллекции Из КоллекцииОбъектовМетаданных Цикл
		
		Если ИспользоватьОтбор И СтрНайти(Отбор, СтрокаКоллекции.Имя) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДерева = ДеревоМетаданных.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаКоллекции);
		Для Каждого ОбъектМетаданных Из Метаданные[СтрокаКоллекции.Имя] Цикл
			
			СтрокаДереваОМ = СтрокаДерева.Строки.Добавить();
			СтрокаДереваОМ.Имя       = ОбъектМетаданных.Имя;
			СтрокаДереваОМ.ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
			СтрокаДереваОМ.Синоним   = ОбъектМетаданных.Синоним;
			СтрокаДереваОМ.Картинка  = СтрокаКоллекции.КартинкаОбъекта;
			
			Если ПолучатьСамОбъектМетаданных Тогда
				СтрокаДереваОМ.ОбъектМетаданных = ОбъектМетаданных;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДеревоМетаданных;
	
КонецФункции

&НаСервере
Процедура НоваяСтрокаКоллекцииОбъектовМетаданных(Имя, Синоним, Картинка, КартинкаОбъекта, Таб)
	
	НоваяСтрока = Таб.Добавить();
	НоваяСтрока.Имя               = Имя;
	НоваяСтрока.Синоним           = "";
	НоваяСтрока.Картинка          = Картинка;
	НоваяСтрока.КартинкаОбъекта   = КартинкаОбъекта;
	
КонецПроцедуры

&НаКлиенте
Функция ВыбранныеОбъектыМетаданных()
	
	ОбъектыМетаданных = Новый Массив;
	
	СобратьОбъектыМетаданных(Справочники_ДеревоОбъектов, ОбъектыМетаданных);
	СобратьОбъектыМетаданных(Документы_ДеревоОбъектов,   ОбъектыМетаданных);
	СобратьОбъектыМетаданных(Формы_ДеревоОбъектов,       ОбъектыМетаданных); 
	СобратьОбъектыМетаданных(Отчеты_ДеревоОбъектов,      ОбъектыМетаданных); 
	СобратьОбъектыМетаданных(Печать_ДеревоОбъектов,      ОбъектыМетаданных);
	
	Возврат ОбъектыМетаданных;	
	
КонецФункции

&НаКлиенте
Процедура СобратьОбъектыМетаданных(ВеткаДерва, ОбъектыМетаданных)
	
	Для Каждого СтрокаДерева Из ВеткаДерва.ПолучитьЭлементы() Цикл
		
		Если СтрокаДерева.Тестировать
			И ЗначениеЗаполнено(СтрокаДерева.ПолноеИмя)
			И СтрЧислоВхождений(СтрокаДерева.ПолноеИмя, ".") = 1
			И ОбъектыМетаданных.Найти(СтрокаДерева.ПолноеИмя) = Неопределено Тогда
			
			ОбъектыМетаданных.Добавить(СтрокаДерева.ПолноеИмя); 
			
		КонецЕсли;
		
		СобратьОбъектыМетаданных(СтрокаДерева, ОбъектыМетаданных);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВыбранныеОбъектыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Свойство("ПерезаполнитьОбъектыМетаданных") И Результат.ПерезаполнитьОбъектыМетаданных Тогда
		
		Проверки_Заполнить(Неопределено);
		
	Иначе
		
		ПроставитьПометкуВПодчиненныхСтроках(Справочники_ДеревоОбъектов, Ложь);
		ПроставитьПометкуВПодчиненныхСтроках(Документы_ДеревоОбъектов,   Ложь);
		ПроставитьПометкуВПодчиненныхСтроках(Формы_ДеревоОбъектов,       Ложь); 
		ПроставитьПометкуВПодчиненныхСтроках(Отчеты_ДеревоОбъектов,      Ложь); 
		ПроставитьПометкуВПодчиненныхСтроках(Печать_ДеревоОбъектов,      Ложь); 
		
	КонецЕсли;
	
	Если Результат.Свойство("ОбъектыМетаданных") Тогда
		
		ОбъектыМетаданных = СтрРазделить(Результат.ОбъектыМетаданных, Символы.ПС, Ложь);
		
		ВыбратьОбъектыМетаданных(Справочники_ДеревоОбъектов, ОбъектыМетаданных);
		ВыбратьОбъектыМетаданных(Документы_ДеревоОбъектов,   ОбъектыМетаданных);
		ВыбратьОбъектыМетаданных(Формы_ДеревоОбъектов,       ОбъектыМетаданных); 
		ВыбратьОбъектыМетаданных(Отчеты_ДеревоОбъектов,      ОбъектыМетаданных); 
		ВыбратьОбъектыМетаданных(Печать_ДеревоОбъектов,      ОбъектыМетаданных); 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОбъектыМетаданных(ВеткаДерва, ОбъектыМетаданных)
	
	Для Каждого СтрокаДерева Из ВеткаДерва.ПолучитьЭлементы() Цикл
		
		Если Не СтрокаДерева.Тестировать
			И ЗначениеЗаполнено(СтрокаДерева.ПолноеИмя)
			И СтрЧислоВхождений(СтрокаДерева.ПолноеИмя, ".") = 1
			И ОбъектыМетаданных.Найти(СтрокаДерева.ПолноеИмя) <> Неопределено Тогда
			
			СтрокаДерева.Тестировать = 1;
			
			ПриИзмененииПометкиВСтрокеДерева(СтрокаДерева);
			
		КонецЕсли;
		
		ВыбратьОбъектыМетаданных(СтрокаДерева, ОбъектыМетаданных);
		
	КонецЦикла;
	
КонецПроцедуры
