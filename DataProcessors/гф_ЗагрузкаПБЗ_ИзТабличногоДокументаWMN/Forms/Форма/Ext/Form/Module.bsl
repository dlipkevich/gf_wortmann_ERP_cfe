
#Область СлужебныеПроцедурыИФункции
///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ПроверкаПередЗагрузкойНеПройдена(ТекстВыявленныхОшибок)
	Если Объект.КолонкаАртикул = 0 Тогда
		Если ТекстВыявленныхОшибок <> "" Тогда
			ТекстВыявленныхОшибок = ТекстВыявленныхОшибок + Символы.ПС;
		КонецЕсли;
		ТекстВыявленныхОшибок = ТекстВыявленныхОшибок + "Не задана колонка Артикул.";
	КонецЕсли;
	Если Объект.КолонкаСерия = 0 Тогда
		Если ТекстВыявленныхОшибок <> "" Тогда
			ТекстВыявленныхОшибок = ТекстВыявленныхОшибок + Символы.ПС;
		КонецЕсли;
		ТекстВыявленныхОшибок = ТекстВыявленныхОшибок + "Не задана колонка Серия.";
	КонецЕсли;
	Если Объект.КолонкаКоличество = 0 Тогда
		Если ТекстВыявленныхОшибок <> "" Тогда
			ТекстВыявленныхОшибок = ТекстВыявленныхОшибок + Символы.ПС;
		КонецЕсли;
		ТекстВыявленныхОшибок = ТекстВыявленныхОшибок + "Не задана колонка Количество.";
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Если ТекстВыявленныхОшибок <> "" Тогда
			ТекстВыявленныхОшибок = ТекстВыявленныхОшибок + Символы.ПС;
		КонецЕсли;
		ТекстВыявленныхОшибок = ТекстВыявленныхОшибок + "Не указана Организация.";
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.СкладВыпуска) Тогда
		Если ТекстВыявленныхОшибок <> "" Тогда
			ТекстВыявленныхОшибок = ТекстВыявленныхОшибок + Символы.ПС;
		КонецЕсли;
		ТекстВыявленныхОшибок = ТекстВыявленныхОшибок + "Не указан Склад.";
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Если ТекстВыявленныхОшибок <> "" Тогда
			ТекстВыявленныхОшибок = ТекстВыявленныхОшибок + Символы.ПС;
		КонецЕсли;
		ТекстВыявленныхОшибок = ТекстВыявленныхОшибок + "Не указан Подразделение.";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеСервер()

	данные = ПрочитатьТабличныеДанные();
	
	ТаблицаИнформацияПоКолонкам = РеквизитФормыВЗначение("ИнформацияПоКолонкам");
	
	АдресЗагруженныхДанных   = "";
	АдресКопииТабличнойЧасти = "";
	СписокНеоднозначностей   =  ЗагрузкаДанныхИзФайла.НовыйСписокНеоднозначностей();
		
	Обработки.ЗагрузкаДанныхИзФайла.ТабличныйДокументВТаблицуЗначений(ТабличныйДокумент, ТаблицаИнформацияПоКолонкам, АдресЗагруженныхДанных);
		
	СкопироватьСтруктуруТабличнойЧасти(АдресКопииТабличнойЧасти);
		
	МенеджерОбъекта = МенеджерОбъекта(ИмяОбъектаСопоставления);
	МенеджерОбъекта.СопоставитьЗагружаемыеДанные(АдресЗагруженныхДанных, АдресКопииТабличнойЧасти, СписокНеоднозначностей, ИмяОбъектаСопоставления, ДополнительныеПараметры);
		
	Если НЕ РеквизитыСозданы Тогда
		СоздатьТаблицуСопоставленияПоИнформацииОКолонкахДляТЧ();
	КонецЕсли;
	ПоместитьДанныеВТаблицуСопоставления(АдресЗагруженныхДанных, АдресКопииТабличнойЧасти, СписокНеоднозначностей);
		
	АдресЗагруженныхДанных = АдресВХранилищеТаблицыСопоставления();
		
КонецПроцедуры

&НаСервере
Функция ПроверитьПустыеПоляПередЗагрузкой(стрНомер, стрДата)
	Если Не ЗначениеЗаполнено(стрНомер)
		ИЛИ Не ЗначениеЗаполнено(стрДата) Тогда
		СтрокаПротокола = ТЗПротокол.Добавить();
		СтрокаПротокола.Документ = "Пустые поля Номер:" + стрНомер + " Дата:" + стрДата;
		СтрокаПротокола.Комментарий = "Строки файла пропущены";
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаСервере
Функция НайтиЗаказПоНомеруДате(Заказ, стрНомер, стрДата)
	Если стрНомер > "" Тогда
		Нашли = Документы.ЗаказКлиента.НайтиПоНомеру(стрНомер, стрДата);
		Если Не Нашли.Пустая() Тогда
			Если Объект.ОбновлятьДокументы Тогда
				Заказ = Нашли.ПолучитьОбъект();
				Заказ.гф_ТоварыВКоробах.Очистить();
			Иначе
				СтрокаПротокола = ТЗПротокол.Добавить();
				СтрокаПротокола.Документ = Нашли;
				СтрокаПротокола.Комментарий = "Заказ с таким номером уже существует:" + стрНомер;
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаСервереБезКонтекста
Процедура СоздатьЗаказКлиента(Заказ, стрНомер, стрДата)
	Если Заказ = Неопределено Тогда
		Заказ = Документы.ЗаказКлиента.СоздатьДокумент();
		
		Если ЗначениеЗаполнено(стрДата) Тогда
			Заказ.Дата = стрДата;
		Иначе
			Заказ.Дата = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Если стрНомер <> "" Тогда
			Заказ.Номер = стрНомер;
		Иначе
			Заказ.УстановитьНовыйНомер();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДокументВПопытке(Док, РежимЗаписи, флДобавитьВПротокол = Истина, Комментарий = "")
	Если ТипЗнч(Док) = Тип("ДокументСсылка.ПроизводствоБезЗаказа") Тогда
		ДокОбъект = Док.ПолучитьОбъект();
	ИначеЕсли ТипЗнч(Док) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
		ДокОбъект = Док.ПолучитьОбъект();
	ИначеЕсли ТипЗнч(Док) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		ДокОбъект = Док.ПолучитьОбъект();
	Иначе
		ДокОбъект = Док;
	КонецЕсли;
	Если ЗначениеЗаполнено(Комментарий) Тогда
		ДокОбъект.Комментарий = Комментарий;
	КонецЕсли;
	Попытка
		ДокОбъект.Записать(РежимЗаписи);
		Если флДобавитьВПротокол Тогда
			СтрокаПротокола = ТЗПротокол.Добавить();
			СтрокаПротокола.Документ = ДокОбъект.Ссылка;
			СтрокаПротокола.Комментарий = "Записан документ";
		КонецЕсли;
	Исключение
		флОшибка = Истина;
	
		СтрокаПротокола = ТЗПротокол.Добавить();
		СтрокаПротокола.Документ = ДокОбъект.Ссылка;
		СтрокаПротокола.Комментарий = "Ошибка при записи документа:" + ОписаниеОшибки();
	КонецПопытки;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	// Если в документе нет флагов учета НДС, то в конфигурации считается, что суммы включают НДС.
	УчитыватьНДС = ОбщегоНазначения.ПолучитьРеквизитШапки("УчитыватьНДС", ДокументОбъект, МетаданныеДокумента, Истина);
	СуммаВключаетНДС = ОбщегоНазначения.ПолучитьРеквизитШапки("СуммаВключаетНДС", ДокументОбъект, МетаданныеДокумента,
		Истина);

	СтавкаНДС = УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	СтрокаТабличнойЧасти.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
	                                                   УчитыватьНДС, СуммаВключаетНДС, СтавкаНДС);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СпособРасчета = Неопределено)
	ЗначениеСто = 100;

	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	СуммаСкидки = 0;

	Если (СпособРасчета = Неопределено)
	 Или (СпособРасчета = Перечисления.СпособРасчетаСуммыДокумента.СУчетомВсехСкидок)
	 Или (СпособРасчета = Перечисления.СпособРасчетаСуммыДокумента.БезУчетаРучнойСкидки) Тогда
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок", МетаданныеДокумента,
			                                 ИмяТабличнойЧасти) Тогда
			СуммаСкидки = Сумма * СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок / ЗначениеСто;
		КонецЕсли;

		Если (СпособРасчета <> Перечисления.СпособРасчетаСуммыДокумента.БезУчетаРучнойСкидки) Тогда
			ЕстьРеквизит = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентСкидкиНаценки", МетаданныеДокумента,
				ИмяТабличнойЧасти);
			Если ЕстьРеквизит Тогда
				СуммаСкидки = СуммаСкидки + (Сумма * СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / ЗначениеСто);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	СтрокаТабличнойЧасти.Сумма = Сумма - СуммаСкидки;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеОбласти(макет, НомерСтроки, Колонка)
	Значение = "";
	Если Колонка > 0 Тогда
		Значение = макет.Область("R" + Формат(НомерСтроки, "ЧГ=") + "C" + Формат(Колонка, "ЧГ=")).Текст;
	КонецЕсли;
	Возврат Значение;
КонецФункции

&НаСервере
Функция ПрочитатьТабличныеДанные()
	
	макет = ТабличныйДокумент;
	
	ТабДанные = Новый ТаблицаЗначений;
	Колонки = ТабДанные.Колонки;
	Колонки.Добавить("ВариантКомплектации", Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("IDКороба", Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("КоличествоКоробов", Новый ОписаниеТипов("Число"));
	
	НомерСтроки = Объект.ПерваяСтрокаДанныхТабличногоДокумента;
	Если НомерСтроки <= 0 Тогда
		НомерСтроки = 2;
	КонецЕсли;
	
	Пока Истина Цикл
		
		значение = макет.Область("R" + Формат(НомерСтроки, "ЧГ=") + "C1").Текст;
		Если значение = "" Тогда
			// здесь строка с пустой первой ячейкой - прекращаем загрузку данных
			Прервать;
		КонецЕсли;
		
		новая = ТабДанные.Добавить();
		
		новая.ВариантКомплектации = ПолучитьЗначениеОбласти(макет, НомерСтроки, Объект.КолонкаАртикул);
		
		новая.IDКороба = ПолучитьЗначениеОбласти(макет, НомерСтроки, Объект.КолонкаСерия);
		
		// Галфинд СадомцевСА 07.08.2023 Исправил "ошибки" СонарКуба
		Если Объект.КолонкаКоличество > 0 Тогда
			значение = ПолучитьЗначениеОбласти(макет, НомерСтроки, Объект.КолонкаКоличество);
			новая.КоличествоКоробов = число(значение);
		Иначе
			новая.КоличествоКоробов = 1;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Возврат ТабДанные;
	
КонецФункции

&НаСервере
Функция ПодготовитьТабДокНаСервере()
	
	ТабПротокол = Новый ТабличныйДокумент;
	
	ТабПротокол.АвтоМасштаб = Истина;
	ТабПротокол.ОтображатьЗаголовки = Ложь;
	ТабПротокол.ОтображатьСетку = Ложь;
	ТабПротокол.ТолькоПросмотр = Истина;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Макет = ОбработкаОбъект.ПолучитьМакет("Протокол");
	
	ОбластьШапка	= Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока	= Макет.ПолучитьОбласть("Строка");
	
	ТабПротокол.Вывести(ОбластьШапка);
	Для Каждого СтрокаПротокола Из ТЗПротокол Цикл
		ОбластьСтрока.Параметры.Заполнить(СтрокаПротокола);
		ТабПротокол.Вывести(ОбластьСтрока);
	КонецЦикла;
		
	Возврат ТабПротокол;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД

&НаКлиенте
Процедура КомандаЗагрузить(Команда)
	
	Объект.ПБЗ.Очистить();
	ТЗПротокол.Очистить();
	ОчиститьСообщения();
	ДокументыПБЗ.Очистить();
	
	ТекстВыявленныхОшибок = "";
	ПроверкаПередЗагрузкойНеПройдена(ТекстВыявленныхОшибок);
	Если ТекстВыявленныхОшибок <> "" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстВыявленныхОшибок);
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Чтение данных ...");
	
	ЗагрузитьДанныеСервер();
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Чтение данных завершено.");
	
	Если флТестоваяЗагрузка Тогда
		Если ТЗПротокол.Количество() > 0 Тогда
			ТабДок = ПодготовитьТабДокНаСервере();
			ТабДок.Показать("Протокол загрузки заказов (тестовая загрузка)");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Создание/обновление документов ...");
	
	флОшибка = Ложь;
	СоздатьЗаполнитьДокументыПБЗ();
//ПроверитьУЛ();
	СоздатьПеремещение();
	СоздатьПриходныйОрдер();

	Если Не флОшибка Тогда
		// Проведение документа Перемещение ПОСЛЕ создания Приходного ордера
		Если ЗначениеЗаполнено(ДокПеремещениеТоваров) Тогда
			ЗаписатьДокументВПопытке(ДокПеремещениеТоваров, РежимЗаписиДокумента.Проведение, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Создание/обновление документов завершено.");
	
	Если Объект.ПБЗ.Количество() = 0 Тогда
		СтрокаПротокола = ТЗПротокол.Добавить();
		СтрокаПротокола.Документ = "Новые документы не созданы.";
	КонецЕсли;
	Если ТЗПротокол.Количество() > 0 Тогда
		ТабДок = ПодготовитьТабДокНаСервере();
		ТабДок.Показать("Протокол загрузки заказов");
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЁННЫЕ ОБРАБОТЧИКИ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Объект.ВидЦены = ПланыВидовХарактеристик.гф_ГлобальныеЗначения.НайтиПоРеквизиту("Ключ",	
	//	"гф_ГлобальныеЗначенияОптоваяЗакупочнаяЦена").Значение;
	ТаблицаИнформацияПоКолонкам = РеквизитФормыВЗначение("ИнформацияПоКолонкам");
	
	ИмяОбъектаСопоставления = "Документ.ПроизводствоБезЗаказа.ТабличнаяЧасть.гф_ПродукцияВКоробах";
	ТипЗагрузки = "ТабличнаяЧасть";
	
	ПараметрыЗагрузкиДанных = ПараметрыЗагрузки();
	ПараметрыЗагрузкиДанных.ТипЗагрузки = ТипЗагрузки;
	ПараметрыЗагрузкиДанных.ПолноеИмяОбъекта = ИмяОбъектаСопоставления;
	ПараметрыЗагрузкиДанных.Макет = "ЗагрузкаИзФайла";
	ПараметрыЗагрузкиДанных.ДополнительныеПараметры = Новый Структура;
		
	Обработки.ЗагрузкаДанныхИзФайла.ОпределитьИнформацияПоКолонкам(ПараметрыЗагрузкиДанных, ТаблицаИнформацияПоКолонкам);

	ЗначениеВРеквизитФормы(ТаблицаИнформацияПоКолонкам, "ИнформацияПоКолонкам");
	
	ИзменитьБланкПоИнформацииПоКолонкам();
	
	ИспользоватьСписаниеНаРасходы	= ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов")
										ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов");
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Объект.ПерваяСтрокаДанныхТабличногоДокумента <= 0 Тогда
		Объект.ПерваяСтрокаДанныхТабличногоДокумента = 2;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ДатаДокумента) Тогда
		Объект.ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.КолонкаАртикул) Тогда
		Объект.КолонкаАртикул = 1;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.КолонкаСерия) Тогда
		Объект.КолонкаСерия = 2;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.КолонкаКоличество) Тогда
		Объект.КолонкаКоличество = 3;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура Установить(Команда)
	Объект.КолонкаАртикул = 1;
	Объект.КолонкаСерия = 2;
	Объект.КолонкаКоличество = 3;
КонецПроцедуры

&НаКлиенте
Процедура мСкладНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;   
	
	Отбор = Новый Структура;
	// Отбор.Вставить("ТоварыВКоробах", Истина);
	Отбор.Вставить("ИспользоватьОрдернуюСхемуПриПоступлении", Ложь);
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	ОткрытьФорму("Справочник.Склады.ФормаВыбора", ПараметрыФормы, Элемент, , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Объект.СкладВыпуска = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
	Объект.СкладСырья = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуТЗПротокол(Документ, Комментарий, НомерСтроки)
	СтрокаПротокола = ТЗПротокол.Добавить();
	СтрокаПротокола.Документ = Документ;
	СтрокаПротокола.Комментарий = Комментарий;
	СтрокаПротокола.НомерСтроки = НомерСтроки;
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура НайтиКонтрагентаПоПартнеру(Партнер, Контрагент, новая, НомерСтроки)
	Если Партнер.Пустая() Тогда
		ДобавитьСтрокуТЗПротокол("Ошибка:" + новая.КодКонтрагента, "Не найден партнер по коду", НомерСтроки);
	Иначе
		Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("Партнер", Партнер);
		Если Контрагент.Пустая() Тогда
			ДобавитьСтрокуТЗПротокол("Ошибка:" + Партнер, "Не найден контрагент", НомерСтроки);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКоличество(новая, макет, НомерСтроки)
	Если Объект.КолонкаКоличество > 0 Тогда
		значение = макет.Область("R" + Формат(НомерСтроки, "ЧГ=") + "C" + Формат(Объект.КолонкаКоличество, "ЧГ=")).Текст;
		новая.Количество = число(значение);
	Иначе
		новая.Количество = 0;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументПБЗ(ВариантКомплектации);
	
	Если ДокПБЗ.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	// ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	ЗагруженныеДанные = РеквизитФормыВЗначение("ДанныеДляТЧ");
	СтруктураПоиска = Новый Структура("ВариантКомплектации", ВариантКомплектации);
	Данные = ЗагруженныеДанные.НайтиСтроки(СтруктураПоиска);
	
	ДокОбъект = ДокПБЗ.ПолучитьОбъект();
	
	ДокОбъект.гф_ПродукцияВКоробах.Очистить();
	ДокОбъект.ВыходныеИзделия.Очистить();
	ДокОбъект.МатериалыИРаботы.Очистить();
	
	Для каждого СтрокаТаблицы Из Данные Цикл 
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ВариантКомплектации) Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаКомплектации = ДокОбъект.гф_ПродукцияВКоробах.Добавить();
		НоваяСтрокаКомплектации.ВариантКомплектации = СтрокаТаблицы.ВариантКомплектации;
		НоваяСтрокаКомплектации.IDКороба = СтрокаТаблицы.IDКороба;
		НоваяСтрокаКомплектации.КоличествоКоробов = СтрокаТаблицы.КоличествоКоробов;
		
	КонецЦикла;
	
	ЗаписатьДокументВПопытке(ДокОбъект, РежимЗаписиДокумента.Запись, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЗВариантыКомплектации()
	//ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	ЗагруженныеДанные = РеквизитФормыВЗначение("ДанныеДляТЧ");
	ТЗ_ВариантыКомплектации = ЗагруженныеДанные.Скопировать();
	ТЗ_ВариантыКомплектации.Свернуть("ВариантКомплектации");
	ЗначениеВРеквизитФормы(ТЗ_ВариантыКомплектации, "ТЗВариантыКомплектации");
КонецПроцедуры

&НаСервере
Процедура ПроверитьУЛ()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УпаковочныйЛист.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.УпаковочныйЛист КАК УпаковочныйЛист
	               |ГДЕ
	               |	УпаковочныйЛист.гф_Поставка В(&ПБЗ)";
	Запрос.УстановитьПараметр("ПБЗ", ДокументыПБЗ);
	Результат = Запрос.Выполнить();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаполнитьДокументыПБЗ()
	
	ЗаполнитьТЗВариантыКомплектации();
	
	Для Каждого СтрокаВК Из ТЗВариантыКомплектации Цикл
		
		Если флОшибка Тогда
			Возврат;
		КонецЕсли;
	
		Если Не ЗначениеЗаполнено(СтрокаВК.ВариантКомплектации) Тогда
			Продолжить;
		КонецЕсли;
		НайтиСоздатьДокументПБЗ(СтрокаВК.ВариантКомплектации);
		
		Если флОшибка Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьДокументПБЗ(СтрокаВК.ВариантКомплектации);
		
		Если флОшибка Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("Ключ", ДокПБЗ);
		ДополнитьВыходныеИзделия = Новый Структура("Получатель, Назначение, НаправлениеВыпуска, Спецификация",
			Объект.СкладВыпуска,
			ПредопределенноеЗначение("Справочник.Назначения.гф_Техническое"),
			Объект.НаправлениеВыпуска,
			Объект.Спецификация);
		ПараметрыФормы.Вставить("гф_ДополнитьВыходныеИзделия", ДополнитьВыходныеИзделия);
		ДополнитьПоСпецификации = Новый Структура("Склад, Подразделение", Объект.СкладСырья, Объект.Подразделение);
		ПараметрыФормы.Вставить("гф_ДополнитьПоСпецификации", ДополнитьПоСпецификации);
		ФормаДокумента = ПолучитьФорму("Документ.ПроизводствоБезЗаказа.Форма.ФормаДокумента", ПараметрыФормы);
		
		ФормаДокумента.гф_ПересчитатьПродукциюЗавершениеЭкспорт(Неопределено);
		ФормаДокумента.гф_МатериалыИРаботыДополнитьПоСпецификацииЭкспорт(Неопределено);
		
		ЗаписатьДокументВПопытке(ДокПБЗ, РежимЗаписиДокумента.Проведение, Ложь);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НайтиСоздатьДокументПБЗ(ВариантКомплектации)
	ДокПБЗ = Документы.ПроизводствоБезЗаказа.ПустаяСсылка();
	
	// ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	ЗагруженныеДанные = РеквизитФормыВЗначение("ДанныеДляТЧ");
	СтруктураПоиска = Новый Структура("ВариантКомплектации", ВариантКомплектации);
	Данные = ЗагруженныеДанные.НайтиСтроки(СтруктураПоиска);
	Если Данные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	//// Поиск ранее созданного документа
	//Для Каждого СтрокаТаблицы Из Данные Цикл 
	//	Если ЗначениеЗаполнено(СтрокаТаблицы.IDКороба) Тогда
	//		Если ЗначениеЗаполнено(СтрокаТаблицы.IDКороба.гф_Поставка) Тогда
	//			Если ТипЗнч(СтрокаТаблицы.IDКороба.гф_Поставка) = Тип("ДокументСсылка.ПроизводствоБезЗаказа") Тогда
	//				ДокОбъект = СтрокаТаблицы.IDКороба.гф_Поставка.ПолучитьОбъект();
	//				Если ДокОбъект.Проведен Тогда
	//					ЗаписатьДокументВПопытке(ДокОбъект, РежимЗаписиДокумента.ОтменаПроведения);
	//				КонецЕсли;
	//				Прервать;
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;
	
	Если ДокПБЗ.Пустая() Тогда
		ДокОбъект = Документы.ПроизводствоБезЗаказа.СоздатьДокумент();
		//ДокОбъект.Дата = Объект.ДатаДокумента;
		ДокОбъект.Дата = ТекущаяДатаСеанса();
		//ДокОбъект.ДатаПоступления = Объект.ДатаДокумента;
		ДокОбъект.Организация = Объект.Организация;
		ДокОбъект.Подразделение = Объект.Подразделение;
		ДокОбъект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоДокументу;
		ДокОбъект.СпособРаспределенияЗатратНаВыходныеИзделия = Перечисления.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости;
		ДокОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ДокОбъект.Автор = ПараметрыСеанса.ТекущийПользователь;
		ДокОбъект.Комментарий = "#Создан обработкой Загрузка документов ПБЗ из табличного документа. " + ТекущаяДатаСеанса();
		ДокОбъект.ВидЦены = Объект.ВидЦены;
		ЗаписатьДокументВПопытке(ДокОбъект, РежимЗаписиДокумента.Запись);
		ДокПБЗ = ДокОбъект.Ссылка;
		
		нс = Объект.ПБЗ.Добавить();
		нс.Документ = ДокОбъект.Ссылка;
		
		ДокументыПБЗ.Добавить(ДокОбъект.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПараметрыЗагрузки() 
	
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("ТипЗагрузки", "");
	ПараметрыЗагрузки.Вставить("ПолноеИмяОбъекта", "");
	ПараметрыЗагрузки.Вставить("Макет", "ЗагрузкаИзФайла");
	ПараметрыЗагрузки.Вставить("ДополнительныеПараметры", Новый Структура);
	
	Возврат ПараметрыЗагрузки;
	
КонецФункции

#Область ЗагрузкаВТабличнуюЧасть

&НаСервере
Процедура СкопироватьСтруктуруТабличнойЧасти(АдресТабличнойЧасти)
	
	ДанныеДляТабличнойЧасти = ОписаниеТабличнойЧасти();
	
	Если ЗначениеЗаполнено(ИмяОбъектаСопоставления) Тогда
		ТабличнаяЧасть = Метаданные.НайтиПоПолномуИмени(ИмяОбъектаСопоставления);
	
		Для каждого РеквизитТабличнойЧасти Из ТабличнаяЧасть.Реквизиты Цикл
			ДанныеДляТабличнойЧасти.Колонки.Добавить(РеквизитТабличнойЧасти.Имя, РеквизитТабличнойЧасти.Тип, РеквизитТабличнойЧасти.Представление());
		КонецЦикла;
	Иначе
		Для каждого Колонка Из ИнформацияПоКолонкам Цикл
			ДанныеДляТабличнойЧасти.Колонки.Добавить(Колонка.ИмяКолонки, Колонка.ТипКолонки, Колонка.ПредставлениеКолонки);
		КонецЦикла;
	КонецЕсли;
	
	
	АдресТабличнойЧасти = ПоместитьВоВременноеХранилище(ДанныеДляТабличнойЧасти);
	
КонецПроцедуры

&НаСервере
Функция ОписаниеТабличнойЧасти() 
	
	ДанныеДляТабличнойЧасти = Новый ТаблицаЗначений;
	ДанныеДляТабличнойЧасти.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Число"), "Идентификатор");
	
	Возврат ДанныеДляТабличнойЧасти;
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура ПоместитьДанныеВТаблицуСопоставления(АдресЗагруженныхДанных, АдресКопииТабличнойЧасти, СписокНеоднозначностей)
	
	ТабличнаяЧасть = ПолучитьИзВременногоХранилища(АдресКопииТабличнойЧасти); // см. ОписаниеТабличнойЧасти 
	
	ЭтоТаблица = ТипЗнч(ТабличнаяЧасть) = Тип("ТаблицаЗначений");
	
	Если Не ЭтоТаблица Или ТабличнаяЧасть.Количество() = 0  Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("ОбязательнаДляЗаполнения", Истина);
	ОтобранныеКолонкиОбязательнаДляЗаполненияТаблицы = ИнформацияПоКолонкам.НайтиСтроки(Отбор);
	КолонкиОбязательныеДляЗаполнения = Новый Соответствие;
	Для каждого КолонкаТаблицы Из ОтобранныеКолонкиОбязательнаДляЗаполненияТаблицы  Цикл
		КолонкиОбязательныеДляЗаполнения.Вставить(КолонкаТаблицы.Родитель, Истина);
	КонецЦикла;
	
	ТаблицаСопоставленияДанных.Очистить();
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных); // см. ОписаниеТабличнойЧасти 
	
	КолонкиТабличнойЧасти = Новый Соответствие();
	Для каждого Колонка Из ТабличнаяЧасть.Колонки Цикл
		КолонкиТабличнойЧасти.Вставить(Колонка.Имя, Истина);
	КонецЦикла;
	
	ВременнаяТЗ = РеквизитФормыВЗначение("ТаблицаСопоставленияДанных"); // см. Обработка.ЗагрузкаДанныхИзФайла.Форма.ЗагрузкаДанныхИзФайла.ТаблицаСопоставленияДанных
	Для каждого Строка Из ТабличнаяЧасть Цикл
		НоваяСтрока = ВременнаяТЗ.Добавить();
		НоваяСтрока.Идентификатор = Строка.Идентификатор;
		ЗаполненыВсеОбязательныеКолонки = Истина;
		Для каждого Колонка Из ТабличнаяЧасть.Колонки Цикл
			Если Колонка.Имя <> "Идентификатор" Тогда
				НоваяСтрока["ТЧ_" + Колонка.Имя] = Строка[Колонка.Имя];
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КолонкиОбязательныеДляЗаполнения.Получить(Колонка.Имя))
				И ЗаполненыВсеОбязательныеКолонки
				И НЕ ЗначениеЗаполнено(Строка[Колонка.Имя]) Тогда
					ЗаполненыВсеОбязательныеКолонки = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		НоваяСтрока["РезультатСопоставленияСтроки"] = ?(ЗаполненыВсеОбязательныеКолонки, "СтрокаСопоставлена", "НеСопоставлен");
		
		Отбор = Новый Структура("Идентификатор", Строка.Идентификатор); 
		
		Неоднозначности = СписокНеоднозначностей.НайтиСтроки(Отбор);
		Если Неоднозначности.Количество() > 0 Тогда 
			НоваяСтрока["РезультатСопоставленияСтроки"] = "Неоднозначность";
			Для каждого Неоднозначность Из Неоднозначности Цикл
				НоваяСтрока["ОписаниеОшибки"] = НоваяСтрока["ОписаниеОшибки"] + Неоднозначность.Колонка+ ";";
				ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
				ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
				ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ТЧ_" + Неоднозначность.Колонка);
				ПолеОформления.Использование = Истина;
				ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаСопоставленияДанных.ОписаниеОшибки"); 
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит; 
				ЭлементОтбора.ПравоеЗначение = Неоднозначность.Колонка; 
				ЭлементОтбора.Использование = Истина;
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<неоднозначность>';
																								|en = '<ambiguity>'"));
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ВременнаяТЗ.Индексы.Добавить("Идентификатор");
	Для каждого Строка Из ЗагружаемыеДанные Цикл
		Отбор = Новый Структура("Идентификатор", Строка.Идентификатор);
		Строки = ВременнаяТЗ.НайтиСтроки(Отбор);
		Если Строки.Количество() > 0 Тогда 
			НоваяСтрока = Строки[0];
			Для каждого Колонка Из ЗагружаемыеДанные.Колонки Цикл
				Если Колонка.Имя <> "Идентификатор" И Колонка.Имя <> "РезультатСопоставленияСтроки" И Колонка.Имя <> "ОписаниеОшибки" Тогда
					НоваяСтрока["ФЛ_" + Колонка.Имя] = Строка[Колонка.Имя];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// ++ Реализовал "обработку" ошибок при загрузке
	МассивУдалитьСтроки = Новый Массив;
	Для Каждого СтрокаТЗ Из ВременнаяТЗ Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЗ.ТЧ_ВариантКомплектации) Тогда
			// не найден Вариант комплектации
			ДобавитьСтрокуТЗПротокол("Строка файла пропущена", "Не найден Вариант комплектации по наименованию:"
				+ СтрокаТЗ.ФЛ_ВариантКомплектации,
				СтрокаТЗ.Идентификатор);
			МассивУдалитьСтроки.Добавить(СтрокаТЗ);
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТЗ.ТЧ_IDКороба) Тогда
			// не найден Упаковочный лист
			ДобавитьСтрокуТЗПротокол("Строка файла пропущена", "Не найден Упаковочный лист по коду:"
				+ СтрокаТЗ.ФЛ_IDКороба,
				СтрокаТЗ.Идентификатор);
			МассивУдалитьСтроки.Добавить(СтрокаТЗ);
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТЗ.ТЧ_IDКороба.гф_Поставка) Тогда
			// не найден Упаковочный лист
			ДобавитьСтрокуТЗПротокол(СтрокаТЗ.ТЧ_IDКороба, "Строка файла пропущена. В Упаковочном листе "
				+ " заполнен реквизит Поставка/Отгрузка:" + СтрокаТЗ.ТЧ_IDКороба.гф_Поставка,
				СтрокаТЗ.Идентификатор);
			МассивУдалитьСтроки.Добавить(СтрокаТЗ);
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдалитьСтроку Из МассивУдалитьСтроки Цикл
		ВременнаяТЗ.Удалить(УдалитьСтроку);
	КонецЦикла;
	// --
	
	ЗначениеВДанныеФормы(ВременнаяТЗ, ТаблицаСопоставленияДанных);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьБланкПоИнформацииПоКолонкам(Бланк = Неопределено, СохранитьНастройки = Ложь)

	Если Бланк = Неопределено Тогда 
		Бланк = ТабличныйДокумент; //..ШаблонСДанными;
	КонецЕсли;
	
	ТаблицаКолонок = РеквизитФормыВЗначение("ИнформацияПоКолонкам");
	Если СохранитьНастройки Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ЗагрузкаДанныхИзФайла", ИмяОбъектаСопоставления, ТаблицаКолонок,, ИмяПользователя());
	КонецЕсли;
	
	Бланк.Очистить();
	Шапка = Обработки.ЗагрузкаДанныхИзФайла.ШапкаБланкаДляЗаполненияПоИнформацииПоКолонкам(ТаблицаКолонок);
	Бланк.Вывести(Шапка);
	//ПоказатьИнформационнуюСтрокуПроОбязательныеКолонки();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МенеджерОбъекта(ИмяОбъектаСопоставления)
		МассивОбъекта = Обработки.ЗагрузкаДанныхИзФайла.РазложитьПолноеИмяОбъекта(ИмяОбъектаСопоставления);
		Если МассивОбъекта.ТипОбъекта = "Документ" Тогда
			МенеджерОбъекта = Документы[МассивОбъекта.НазваниеОбъекта];
		ИначеЕсли МассивОбъекта.ТипОбъекта = "Справочник" Тогда
			МенеджерОбъекта = Справочники[МассивОбъекта.НазваниеОбъекта];
		ИначеЕсли МассивОбъекта.ТипОбъекта = "Обработка" Тогда
			МенеджерОбъекта = Обработки[МассивОбъекта.НазваниеОбъекта];
		Иначе
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Объект ""%1"" не найден';
																							|en = 'Object ""%1"" is not found.'"), ИмяОбъектаСопоставления);
		КонецЕсли;
		
		Возврат МенеджерОбъекта;
КонецФункции

&НаСервере
Процедура СоздатьТаблицуСопоставленияПоИнформацииОКолонкахДляТЧ() 
	
	МассивРеквизитов = Новый Массив;
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	ВременнаяТЗ = РеквизитФормыВЗначение("ТаблицаСопоставленияДанных"); 
	ВременнаяТЗ.Колонки.Очистить();
	
	// ++
	ВремТЗДанныеДляТЧ = РеквизитФормыВЗначение("ДанныеДляТЧ");
	ВремТЗДанныеДляТЧ.Колонки.Очистить();
	// --
	
	ДобавитьСтандартныеКолонкиВТаблицуСопоставления(ВременнаяТЗ, Неопределено, Истина, Истина, Истина, Ложь);
	ДобавитьСтандартныеКолонкиВМассивРеквизитов(МассивРеквизитов, Неопределено, Истина, Истина, Истина, Ложь);
	
	ОбязательныеКолонки = Новый Массив;
	КолонкиСодержащиеСвязиПараметровВыбора = Новый Соответствие;
	ОбъектРеквизитыТЧ = Метаданные.НайтиПоПолномуИмени(ИмяОбъектаСопоставления); // ОбъектМетаданныхСправочник,  ОбъектМетаданныхДокумент
	РеквизитыТЧ = ОбъектРеквизитыТЧ.Реквизиты;
	
	Для каждого Колонка Из РеквизитыТЧ Цикл
		
		Если Колонка.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Колонка.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку Тогда
			ОбязательныеКолонки.Добавить("ТЧ_" + Колонка.Имя);
		КонецЕсли;
		
		Если Колонка.СвязиПараметровВыбора.Количество() > 0 Тогда
			КолонкиСодержащиеСвязиПараметровВыбора.Вставить(Колонка.Имя, Колонка.СвязиПараметровВыбора);
		КонецЕсли;
		
		ТипРеквизита = ?(Колонка.Тип.СодержитТип(Тип("УникальныйИдентификатор")), ОбщегоНазначения.ОписаниеТипаСтрока(36), Колонка.Тип);
		
		ВременнаяТЗ.Колонки.Добавить("ТЧ_" + Колонка.Имя, ТипРеквизита, Колонка.Представление());
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ТЧ_" + Колонка.Имя, ТипРеквизита, "ТаблицаСопоставленияДанных", Колонка.Представление()));
		
		// ++
		ВремТЗДанныеДляТЧ.Колонки.Добавить("" + Колонка.Имя, ТипРеквизита, Колонка.Представление());
		МассивРеквизитов.Добавить(Новый РеквизитФормы("" + Колонка.Имя, ТипРеквизита, "ДанныеДляТЧ", Колонка.Представление()));
		// --
	КонецЦикла;
	
	Для каждого Колонка Из ИнформацияПоКолонкам Цикл
		ВременнаяТЗ.Колонки.Добавить("ФЛ_" + Колонка.ИмяКолонки, ТипСтрока, Колонка.ПредставлениеКолонки);
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ФЛ_" + Колонка.ИмяКолонки, ТипСтрока, "ТаблицаСопоставленияДанных", Колонка.ПредставлениеКолонки));
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивРеквизитов);
	РеквизитыСозданы = Истина;
	
	ГруппаКолонокЗагружаемыеДанные = Элементы.Добавить("ЗагружаемыеДанные", Тип("ГруппаФормы"), Элементы.ТаблицаСопоставленияДанных);
	ГруппаКолонокЗагружаемыеДанные.Группировка = ГруппировкаКолонок.Горизонтальная;
	Картинка = БиблиотекаКартинок.Изменить;
	
	Для Каждого Колонка Из ВременнаяТЗ.Колонки Цикл
		
		Если СтрНачинаетсяС(Колонка.Имя, "ТЧ_") Тогда
			ГруппаКолонокЗагружаемыеДанныеТЧ = Элементы.Добавить("ЗагружаемыеДанные_" + Колонка.Имя , Тип("ГруппаФормы"), ГруппаКолонокЗагружаемыеДанные);
			ГруппаКолонокЗагружаемыеДанныеТЧ.Группировка = ГруппировкаКолонок.Вертикальная;
			Родитель = ГруппаКолонокЗагружаемыеДанныеТЧ;
		ИначеЕсли СтрНачинаетсяС(Колонка.Имя, "ФЛ_") Тогда
			Продолжить;
		Иначе
			Родитель = ГруппаКолонокЗагружаемыеДанные;
		КонецЕсли;
		
		НовыйЭлемент = Элементы.Добавить("ТаблицаСопоставленияДанных_" + Колонка.Имя, Тип("ПолеФормы"), Родитель);
		
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = "ТаблицаСопоставленияДанных." + Колонка.Имя;
		НовыйЭлемент.Заголовок = Колонка.Заголовок;
		НовыйЭлемент.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
		
		Если СтрДлина(Колонка.Имя) > 3 И СтрНачинаетсяС(Колонка.Имя, "ТЧ_") Тогда
			Отбор = Новый Структура("ИмяКолонки", Сред(Колонка.Имя, 4));
			Колонки = ИнформацияПоКолонкам.НайтиСтроки(Отбор);
			Если Колонки.Количество() > 0 Тогда 
				НовыйЭлемент.Видимость = Колонки[0].Видимость;
			КонецЕсли;
		КонецЕсли;
		
		Если Колонка.Имя = "Идентификатор" Тогда
			НовыйЭлемент.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
			НовыйЭлемент.ТолькоПросмотр = Истина;
			НовыйЭлемент.Ширина = 1;
		ИначеЕсли Колонка.Имя = "РезультатСопоставленияСтроки" ИЛИ Колонка.Имя = "ОписаниеОшибки" Тогда
			НовыйЭлемент.Видимость = Ложь;
		КонецЕсли;
		
		Если ОбязательныеКолонки.Найти(Колонка.Имя) <> Неопределено Тогда 
			НовыйЭлемент.АвтоОтметкаНезаполненного = Истина;
		КонецЕсли;
		
		Если СтрНачинаетсяС(Колонка.Имя, "ТЧ_") Тогда
			ТипКолонки = Метаданные.НайтиПоТипу(Колонка.ТипЗначения.Типы()[0]);
			Если ТипКолонки <> Неопределено И СтрНайти(ТипКолонки.ПолноеИмя(), "Справочник") > 0 Тогда
				НовыйЭлемент.КартинкаШапки = Картинка;
			КонецЕсли;
			
			КолонкаСвязьПараметровВыбора = КолонкиСодержащиеСвязиПараметровВыбора.Получить(Сред(Колонка.Имя, 4));
			Если КолонкаСвязьПараметровВыбора <> Неопределено Тогда 
				НовыйМассив = Новый Массив();
				Для каждого СвязьПараметраВыбора Из КолонкаСвязьПараметровВыбора Цикл // СвязьПараметраВыбора
					Позиция = СтрНайти(СвязьПараметраВыбора.ПутьКДанным, ".", НаправлениеПоиска.СКонца);
					Если Позиция > 0 Тогда
						ИмяЭлемента = Сред(СвязьПараметраВыбора.ПутьКДанным, Позиция + 1);
						НоваяСвязь = Новый СвязьПараметраВыбора(СвязьПараметраВыбора.Имя, "Элементы.ТаблицаСопоставленияДанных.ТекущиеДанные.ТЧ_" + ИмяЭлемента, СвязьПараметраВыбора.ИзменениеЗначения);
						НовыйМассив.Добавить(НоваяСвязь);
					КонецЕсли;
				КонецЦикла;
				НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
				НовыйЭлемент.СвязиПараметровВыбора = НовыеСвязи;
			КонецЕсли;
			
			Отбор = Новый Структура("Родитель", Сред(Колонка.Имя, 4));
			КолонкиГруппировки = ИнформацияПоКолонкам.НайтиСтроки(Отбор);
			
			Если КолонкиГруппировки.Количество() = 1 Тогда
				
				КолонкаУровень2 = ВременнаяТЗ.Колонки.Найти("ФЛ_" + КолонкиГруппировки[0].ИмяКолонки);
				Если КолонкаУровень2 <> Неопределено Тогда 
					НовыйЭлемент = Элементы.Добавить(КолонкаУровень2.Имя, Тип("ПолеФормы"), Родитель); // РасширениеПоляФормыДляПоляВвода
					НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
					НовыйЭлемент.ПутьКДанным = "ТаблицаСопоставленияДанных." + КолонкаУровень2.Имя;
					ТипКолонки = Метаданные.НайтиПоТипу(КолонкаУровень2.ТипЗначения.Типы()[0]);
					Если ТипКолонки <> Неопределено И СтрНайти(ТипКолонки.ПолноеИмя(), "Справочник") > 0 Тогда
						НовыйЭлемент.Заголовок = НСтр("ru = 'Данные из файла';
														|en = 'File'");
					Иначе
						НовыйЭлемент.Заголовок = " ";
					КонецЕсли;
					НовыйЭлемент.ТолькоПросмотр = Истина;
					НовыйЭлемент.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
				КонецЕсли;
				
			ИначеЕсли КолонкиГруппировки.Количество() > 1 Тогда
				ГруппаКолонокЗагружаемыеДанныеТЧ = Элементы.Добавить("ЗагружаемыеДанные_ФЛ_" + Колонка.Имя , Тип("ГруппаФормы"), Родитель);
				ГруппаКолонокЗагружаемыеДанныеТЧ.Группировка = ГруппировкаКолонок.ВЯчейке;
				Родитель = ГруппаКолонокЗагружаемыеДанныеТЧ;
				
				Префикс = НСтр("ru = 'Данные из файла:';
								|en = 'File:'");
				Для каждого КолонкаГруппа Из КолонкиГруппировки Цикл
					Колонка2 = ВременнаяТЗ.Колонки.Найти("ФЛ_" + КолонкаГруппа.ИмяКолонки);
					Если Колонка2 <> Неопределено Тогда 
						НовыйЭлемент = Элементы.Добавить(Колонка2.Имя, Тип("ПолеФормы"), Родитель);  // РасширениеПоляФормыДляПоляВвода
						НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
						НовыйЭлемент.ПутьКДанным = "ТаблицаСопоставленияДанных." + Колонка2.Имя;
						НовыйЭлемент.Заголовок = Префикс + Колонка2.Заголовок;
						НовыйЭлемент.ТолькоПросмотр = Истина;
						НовыйЭлемент.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
						
						Если СтрДлина(Колонка.Имя) > 3 И СтрНачинаетсяС(Колонка.Имя, "ФЛ_") Тогда
						Отбор = Новый Структура("ИмяКолонки", Сред(Колонка.Имя, 4));
						Колонки = ИнформацияПоКолонкам.НайтиСтроки(Отбор);
							Если Колонки.Количество() > 0 Тогда 
								НовыйЭлемент.Видимость = Колонки[0].Видимость;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					Префикс = "";
				КонецЦикла;
			Иначе
				НовыйЭлемент.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ВременнаяТЗ, "ТаблицаСопоставленияДанных");
	// ++
	ЗначениеВРеквизитФормы(ВремТЗДанныеДляТЧ, "ДанныеДляТЧ");
	// --
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтандартныеКолонкиВТаблицуСопоставления(ВременнаяТЗ, СтруктураОбъектаСопоставления, ДобавитьИдентификатор,
		ДобавитьОписаниеОшибки, ДобавитьРезультатСопоставленияСтроки, ДобавитьСписокНеоднозначностей)
		
	Если ДобавитьИдентификатор Тогда 
		ВременнаяТЗ.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Число"), НСтр("ru = 'п/п';
																						|en = '#'"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураОбъектаСопоставления) Тогда 
		Если Не ЗначениеЗаполнено(СтруктураОбъектаСопоставления.Синоним) Тогда
			ЗаголовокКолонки = "";
			Если СтруктураОбъектаСопоставления.ОписаниеТипаОбъектаСопоставления.Типы().Количество() > 1 Тогда 
				ЗаголовокКолонки = "Объекты";
			Иначе
				ЗаголовокКолонки = Строка(СтруктураОбъектаСопоставления.ОписаниеТипаОбъектаСопоставления.Типы()[0]);
			КонецЕсли;
			
		Иначе
			ЗаголовокКолонки = СтруктураОбъектаСопоставления.Синоним;
		КонецЕсли;
		ВременнаяТЗ.Колонки.Добавить("ОбъектСопоставления", СтруктураОбъектаСопоставления.ОписаниеТипаОбъектаСопоставления, ЗаголовокКолонки);
	КонецЕсли;
	
	Если ДобавитьРезультатСопоставленияСтроки Тогда 
		ВременнаяТЗ.Колонки.Добавить("РезультатСопоставленияСтроки", Новый ОписаниеТипов("Строка"), НСтр("ru = 'Результат';
																										|en = 'Status'"));
	КонецЕсли;
	Если ДобавитьОписаниеОшибки Тогда
		ВременнаяТЗ.Колонки.Добавить("ОписаниеОшибки", Новый ОписаниеТипов("Строка"), НСтр("ru = 'Причина';
																							|en = 'Reason'"));
	КонецЕсли;

	Если ДобавитьСписокНеоднозначностей Тогда 
		ТипСЗ = Новый ОписаниеТипов("СписокЗначений");
		ВременнаяТЗ.Колонки.Добавить("СписокНеоднозначностей", ТипСЗ, "СписокНеоднозначностей");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтандартныеКолонкиВМассивРеквизитов(МассивРеквизитов, ОписаниеТипаОбъектаСопоставления , ДобавитьИдентификатор, 
		ДобавитьОписаниеОшибки, ДобавитьРезультатСопоставленияСтроки, ДобавитьСписокНеоднозначностей)
		
		ТипСтрока = Новый ОписаниеТипов("Строка");
		Если ДобавитьИдентификатор Тогда 
			ТипЧисло = Новый ОписаниеТипов("Число");
			МассивРеквизитов.Добавить(Новый РеквизитФормы("Идентификатор", ТипЧисло, "ТаблицаСопоставленияДанных", "Идентификатор"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеТипаОбъектаСопоставления) Тогда 
			МассивРеквизитов.Добавить(Новый РеквизитФормы("ОбъектСопоставления", ОписаниеТипаОбъектаСопоставления, "ТаблицаСопоставленияДанных", ИмяОбъектаСопоставления));
		КонецЕсли;
		
		Если ДобавитьРезультатСопоставленияСтроки Тогда
			МассивРеквизитов.Добавить(Новый РеквизитФормы("РезультатСопоставленияСтроки", ТипСтрока, "ТаблицаСопоставленияДанных", "Результат"));
		КонецЕсли;
		Если ДобавитьОписаниеОшибки Тогда 
			МассивРеквизитов.Добавить(Новый РеквизитФормы("ОписаниеОшибки", ТипСтрока, "ТаблицаСопоставленияДанных", "Причина"));
		КонецЕсли;

	Если ДобавитьСписокНеоднозначностей Тогда 
		ТипСЗ = Новый ОписаниеТипов("СписокЗначений");
		МассивРеквизитов.Добавить(Новый РеквизитФормы("СписокНеоднозначностей", ТипСЗ, "ТаблицаСопоставленияДанных", "СписокНеоднозначностей"));
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция АдресВХранилищеТаблицыСопоставления()
	
	Таблица = РеквизитФормыВЗначение("ТаблицаСопоставленияДанных");
	
	ТаблицаДляТЧ = Новый ТаблицаЗначений;
	Для Каждого Колонка Из Таблица.Колонки Цикл
		Если СтрНачинаетсяС(Колонка.Имя, "ТЧ_") Тогда
			ТаблицаДляТЧ.Колонки.Добавить(Сред(Колонка.Имя, СтрДлина("ТЧ_") + 1), Колонка.ТипЗначения, Колонка.Заголовок, Колонка.Ширина);
		ИначеЕсли  Колонка.Имя = "РезультатСопоставленияСтроки" ИЛИ Колонка.Имя = "ОписаниеОшибки" ИЛИ Колонка.Имя = "Идентификатор" Тогда 
			ТаблицаДляТЧ.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения, Колонка.Заголовок, Колонка.Ширина);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из Таблица Цикл
		НоваяСтрока = ТаблицаДляТЧ.Добавить();
		Для Каждого Колонка Из ТаблицаДляТЧ.Колонки Цикл
			Если Колонка.Имя = "Идентификатор" Тогда 
				НоваяСтрока[Колонка.Имя] = Строка[Колонка.Имя];
			ИначеЕсли Колонка.Имя <> "РезультатСопоставленияСтроки" И Колонка.Имя <> "ОписаниеОшибки" Тогда
				НоваяСтрока[Колонка.Имя] = Строка["ТЧ_"+ Колонка.Имя];
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// ++
	ЗначениеВРеквизитФормы(ТаблицаДляТЧ, "ДанныеДляТЧ");
	// --
	Возврат ПоместитьВоВременноеХранилище(ТаблицаДляТЧ);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьПараметрыУказанияСерий(Объект)
	
	ПараметрыУказанияСерий =
		Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ПроизводствоБезЗаказа));
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСтатусыУказанияСерийСервер(ИмяТЧ,
											СтрокиТоваровДляОбработки = Неопределено,
											СтрокиСерийДляОбработки = Неопределено, Объект, ПараметрыУказанияСерий)
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,
													ПараметрыУказанияСерий[ИмяТЧ],
													СтрокиТоваровДляОбработки,
													СтрокиСерийДляОбработки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПоНаправлениюВыпуска(ИмяТЧ, Форма, СтруктураДействий)

	Если ИмяТЧ <> "ВыходныеИзделия" И ИмяТЧ <> "ПобочныеИзделия" Тогда 
		Возврат;
	КонецЕсли;
	
	СтруктураДействий.Вставить("ЗаполнитьНаправлениеВыпуска", Новый Структура);
	СтруктураДействий.ЗаполнитьНаправлениеВыпуска.Вставить("ИспользоватьСписаниеНаРасходы");
		
	ЗаполнитьЗначенияСвойств(СтруктураДействий.ЗаполнитьНаправлениеВыпуска, Форма);
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьОснование()
	// по аналогии обработка УправлениеПоступлением
	// Процедура СоздатьОрдер(Команда)
	Основание = Новый Структура;
	Основание.Вставить("Распоряжение",               ДокПеремещениеТоваров);
	Основание.Вставить("Отправитель",                ДокПеремещениеТоваров.СкладОтправитель);
	Основание.Вставить("Склад",                      ДокПеремещениеТоваров.СкладПолучатель);
	Основание.Вставить("Помещение",                  Справочники.СкладскиеПомещения.ПустаяСсылка());
	Основание.Вставить("ЗонаПриемки",                Справочники.СкладскиеЯчейки.ПустаяСсылка());
	Основание.Вставить("ДатаВходящегоДокумента",     ДокПеремещениеТоваров.Дата);
	НомерВходящегоДокумента = СокрЛП(ДокПеремещениеТоваров.Номер);
	НомерВходящегоДокумента = СтрЗаменить(НомерВходящегоДокумента, "-", "");
	НомерКакЧисло = Число(НомерВходящегоДокумента);
	НомерВходящегоДокумента = Формат(НомерКакЧисло, "ЧГ=0");
	Основание.Вставить("НомерВходящегоДокумента",    НомерВходящегоДокумента);
	Основание.Вставить("ДатаПоступления",            Дата(1,1,1));
	Основание.Вставить("ХозяйственнаяОперация",      Перечисления.ХозяйственныеОперации.ПеремещениеТоваров);
	Основание.Вставить("гф_СохранитьДокумент", Истина);
	Возврат Основание;
КонецФункции

&НаКлиенте
Процедура СоздатьПриходныйОрдер()
	Если флОшибка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокПеремещениеТоваров) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПодготовитьОснование();
	ФормаДокумента = ПолучитьФорму("Документ.ПриходныйОрдерНаТовары.Форма.ФормаДокумента",
		Новый Структура("Основание", ПараметрыФормы));
	ФормаДокумента.гф_СохранитьДокументЭкспорт(Неопределено);
	
	ДокПриходныйОрдерНаТовары = ФормаДокумента.Объект.Ссылка;
	
	Комментарий = "#Создан обработкой Загрузка документов ПБЗ из табличного документа. " + ТекущаяДата();
	
	ЗаписатьДокументВПопытке(ДокПриходныйОрдерНаТовары, РежимЗаписиДокумента.Проведение, , Комментарий);
	
	нс = Объект.ПБЗ.Добавить();
	нс.Документ = ДокПриходныйОрдерНаТовары;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСозданияПриходногоОрдера(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура СоздатьПеремещение()
	
	Если флОшибка Тогда
		Возврат;
	КонецЕсли;
	
	Данные = РеквизитФормыВЗначение("ДанныеДляТЧ");
	Если Данные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДокПеремещение = Документы.ПеремещениеТоваров.СоздатьДокумент();
	//ДокПеремещение.Дата = Объект.ДатаДокумента;
	ДокПеремещение.Дата = ТекущаяДатаСеанса();
	ДокПеремещение.Организация = Объект.Организация;
	ДокПеремещение.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ДокПеремещение.СкладОтправитель = Объект.СкладВыпуска;
	гф_ГлобальныеЗначенияСкладРЗ = 
		_омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначение("гф_ГлобальныеЗначенияСкладРЗ");
	ДокПеремещение.СкладПолучатель = гф_ГлобальныеЗначенияСкладРЗ;
	ДокПеремещение.Статус = Перечисления.СтатусыПеремещенийТоваров.Отгружено;
	ДокПеремещение.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
	ДокПеремещение.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
	ДокПеремещение.ПеремещениеПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	ДокПеремещение.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным;
	ДокПеремещение.Автор = ПараметрыСеанса.ТекущийПользователь;
	ДокПеремещение.Комментарий = "#Создан обработкой Загрузка документов ПБЗ из табличного документа. " + ТекущаяДатаСеанса();
	
	//ТЧ гф_ТоварыВКоробах
	// УпаковочныйЛист
	// Артикул
	// IDКороба
	// КоличествоПар
	Для Каждого СтрокаТаблицы Из Данные Цикл 
		СтрокаТЧ = ДокПеремещение.гф_ТоварыВКоробах.Добавить();
		СтрокаТЧ.УпаковочныйЛист = СтрокаТаблицы.IDКороба;
		ДанныеПоУЛ = гф_ПолучитьДанныеПоУЛ(СтрокаТЧ["УпаковочныйЛист"]);
		СтрокаТЧ.Артикул = ДанныеПоУЛ.Артикул;
		СтрокаТЧ.IDКороба = ДанныеПоУЛ.IDКороба;
		СтрокаТЧ.КоличествоПар = ДанныеПоУЛ.КоличествоПар;
		ЗагрузитьТоварыПоУЛ(СтрокаТЧ["УпаковочныйЛист"], ДокПеремещение);
	КонецЦикла;
	ЗаписатьДокументВПопытке(ДокПеремещение, РежимЗаписиДокумента.Проведение);
	//ЗаписатьДокументВПопытке(ДокПеремещение, РежимЗаписиДокумента.Запись, Ложь);
	Если флОшибка Тогда
		Возврат;
	КонецЕсли;
	
	ДокПеремещениеТоваров = ДокПеремещение.Ссылка;
	нс = Объект.ПБЗ.Добавить();
	нс.Документ = ДокПеремещениеТоваров;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗагрузитьТоварыПоУЛ(УпаковочныйЛист, Объект)
// Копия функции из Формы документа Перемещение товаров. Добавил параметр Объект
   	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УпаковочныйЛистТовары.Номенклатура КАК Номенклатура,
		|	УпаковочныйЛистТовары.Характеристика КАК Характеристика,
		|	УпаковочныйЛистТовары.Назначение КАК Назначение,
		|	УпаковочныйЛистТовары.КоличествоУпаковок КАК Количество
		|ИЗ
		|	Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
		|ГДЕ
		|	УпаковочныйЛистТовары.Ссылка = &УпаковочныйЛист";
	
	Запрос.УстановитьПараметр("УпаковочныйЛист", УпаковочныйЛист);
		
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл
		
		СтруВыборки = Новый Структура("Номенклатура, Характеристика, Назначение");
		
		ЗаполнитьЗначенияСвойств(СтруВыборки, Выборка);
		
		Если Объект.Товары.НайтиСтроки(СтруВыборки).Количество() = 0 Тогда
			СтрокаТоваров = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТоваров, Выборка);
			СтрокаТоваров.КоличествоУпаковок = Выборка.Количество;
			СтрокаТоваров.Количество = Выборка.Количество;
			
		ИначеЕсли Объект.Товары.НайтиСтроки(СтруВыборки).Количество() > 0 Тогда	
			Объект.Товары.НайтиСтроки(СтруВыборки)[0].КоличествоУпаковок = 
										Объект.Товары.НайтиСтроки(СтруВыборки)[0].КоличествоУпаковок + Выборка.Количество;	
			Объект.Товары.НайтиСтроки(СтруВыборки)[0].Количество = 
										Объект.Товары.НайтиСтроки(СтруВыборки)[0].Количество + Выборка.Количество;	
		Иначе
			а = 0;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		Если Не Объект.ПеремещениеПоЗаказам Или СтрокаТовары.КодСтроки = 0 Тогда
			СтрокаТовары.НазначениеОтправителя = СтрокаТовары.Назначение;
		КонецЕсли;
	КонецЦикла;
   
КонецПроцедуры

&НаСервереБезКонтекста
Функция гф_ПолучитьДанныеПоУЛ(УпаковочныйЛист)
// Копия функции из Формы документа Перемещение товаров
	
	ДанныеПоУЛ = Новый Структура("Артикул, IDКороба, КоличествоПар");
	стрУЛ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УпаковочныйЛист,
	Новый Структура("IDКороба, КоличествоПар, Комплектация", "Код", "ВсегоМест", "гф_Комплектация"));
	ЗаполнитьЗначенияСвойств(ДанныеПоУЛ, стрУЛ);
	Комплектация = стрУЛ["Комплектация"];
	Если ЗначениеЗаполнено(Комплектация) Тогда
		ДанныеПоУЛ["Артикул"] = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Комплектация, "Владелец.Артикул");
	КонецЕсли;
	Возврат ДанныеПоУЛ;

КонецФункции
