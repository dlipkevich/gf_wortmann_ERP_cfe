#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных
Перем Соединение;// FTP-соединение
Перем СкладПолучательВПарах;// СправочникСсылка.Склады
Перем СкладОтправительВПарах;// СправочникСсылка.Склады
Перем ЭтоОсновнойСклад;// Булево, задается в глобальных значениях
Перем КодКлиента;// код клиента Склада (в глобальных значениях)
Перем Организация;// СправочникСсылка.Организации
Перем КодОрганизации;// Реквизит "Префикс" у Организации
Перем ЭтоПеремещение;// Булево, от типа знч документа распоряжения
Перем ЭтоВозврат;// Булево, от типа знч документа распоряжения
Перем ЭтоПоступление;// Булево, от типа знч документа распоряжения
Перем ЭтоРеализация;// Булево, от типа знч документа распоряжения
Перем ЭтоКорректировка;// Булево, Истина если документ КорректировкаНазначенияТоваров
Перем СкладМаркетплейса;// Булево, задается в глобальных значениях
Перем ЭтоТаможенныйСклад;// Булево, задается в глобальных значениях
Перем КодКонтрагента;// код клиента Склада (в глобальных значениях) 
//Перем Артикулы;
//Перем Выборка;
Перем ТекстыОшибок;// ТЗ с ошибками и информацией
Перем ЭтоСкладНедосдачи;// Булево, задается в глобальных значениях
#КонецОбласти

#Область ВыгрузкаДанных

// #wortmann { 
// Процедура обрабатывает массивы документв для выгрузки данных на сервер WMS 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//  МассивДокументовРасход - Массив - массив из элементов ДокументСсылка.РасходныйОрдерНаТовары
//  МассивДокументовПриход - Массив - массив из элементов ДокументСсылка.ПриходныйОрдерНаТовары
Процедура ВыгрузитьДанные (МассивДокументовРасход = Неопределено, МассивДокументовПриход = Неопределено) Экспорт
	
	Перем ИмяФайлаБезПути, ИмяФайла;
	
	ТекстыОшибок = Новый ТаблицаЗначений;
	ТекстыОшибок.Колонки.Добавить("ПутьФайла");
	ТекстыОшибок.Колонки.Добавить("ТекстОшибки");
	ТекстыОшибок.Колонки.Добавить("Организация");
	ТекстыОшибок.Колонки.Добавить("ТипИнформации");
	
	ОбновитьДанныеВДанныеВыгрузки();
	
	//Если это регламентная задача, то выполняем поиск необходимых документов в РС гф_ДанныеВыгрузки
	Если МассивДокументовРасход = Неопределено И МассивДокументовПриход = Неопределено Тогда 
		
		МассивДокументовРасход = ПолучитьМассивДокументов("РасходныйОрдерНаТовары"); 
		МассивДокументовПриход = ПолучитьМассивДокументов("ПриходныйОрдерНаТовары");
		
	Иначе
		МассивДокументовРасход = ПолучитьМассивДокументов("РасходныйОрдерНаТовары", МассивДокументовРасход);
		МассивДокументовПриход = ПолучитьМассивДокументов("ПриходныйОрдерНаТовары", МассивДокументовПриход);
	КонецЕсли;	
	
	МассивДокументовКорректировки = ПолучитьМассивДокументов("КорректировкаНазначенияТоваров");                
	
	НастройкиFTPСоединения = _омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначениеFTP("FTP_НастройкиДляЗагрузкиВыгрузкиВWMS");
	
	Если НастройкиFTPСоединения.ЕстьДанные <> Истина Тогда
		Сообщение = "Не заданы настройки подключения к ftp-серверу.";
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, Сообщение);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ТекущаяДатаСеанса(), "ДЛФ=T") + ". " + Сообщение);
		ЗаписатьСообщениеОшибки(Сообщение, Истина, "Проверка настроек для обмена");
		Возврат;
	КонецЕсли;
	
	// то ли открывать соединение SFTP тут и закрывать в самом конце (но это долго...)
	// то ли в конце прописать процедуру переброски файлов с локального каталога (куда
	// их и записывать) на SFTP.
	
	Для каждого Документ Из МассивДокументовРасход Цикл
		
		Контрагент = Документ.Получатель;
		КодОрганизации = Документ.Склад.гф_Организация.Префикс;
		
		Склад = Документ.Склад;
		Организация = Документ.Склад.гф_Организация;
		СкладМаркетплейса = ПроверитьЗначениеСкладМаркетплейс(Склад); 
		СкладОтправительВПарах = НЕ ПроверитьЗначениеСкладВКоробах(Склад);
		//ОтправительСерийныйНомерВместоКМ = ИспользоватьСерийныйНомерВместоКМ(Склад);
		Если СкладМаркетплейса Тогда
			Сообщение = "У документа " + Документ + " стоит значение ""Склад маркетплейс""";
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, Сообщение);
			ЗаписатьСообщениеОшибки(Сообщение, Истина, "Проверка настроек для обмена");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ТекущаяДатаСеанса(), "ДЛФ=T") + ". " + Сообщение);
			
			Продолжить;
		КонецЕсли;
		Распоряжение = ПолучитьСвязанныйДокументРО(Документ);
		ЭтоПеремещение = ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ПеремещениеТоваров");
		ЭтоПоступление = ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг"); 
		ЭтоРеализация = ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ЗаказКлиента");
		ЭтоВозврат = ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента");
		ЭтоКорректировка = Ложь;
		
		ЭтоТаможенныйСклад = ЭтоТаможенныйСклад(Склад);
		ЭтоОсновнойСклад = ЭтоОсновнойСклад(Склад); 
		ЭтоСкладНедосдачи = ЭтоСкладНедосдачи(Склад);
		//ЭтоСвободныйСклад = Склад = Справочники.w_Настройки.СкладСвободныеОстатки.Значение;
		//ЭтоСкладТранзитБезРезерва = ЭтоСкладТранзитБезРезерва(Склад);
		//ЭтоСкладРазукомплектации = ЭтоСкладРазукомплектации(Склад);
		//
		НомерСообщения = строка(Новый УникальныйИдентификатор);
		Пакет = ПолучитьПакетРасхода(ИмяФайлаБезПути, ИмяФайла, НомерСообщения, Документ, НастройкиFTPСоединения);
		ЗаписатьОтправитьПакет(Пакет, ИмяФайлаБезПути, ИмяФайла, НомерСообщения, 
								Перечисления.гф_ВидыДанныхДляВыгрузки.Документ, Документ, НастройкиFTPСоединения);
		
	КонецЦикла;
	
	Для каждого Документ Из  МассивДокументовПриход Цикл
		
		Склад = Документ.Склад;
		Организация = Документ.Склад.гф_Организация;
		СкладМаркетплейса = ПроверитьЗначениеСкладМаркетплейс(Склад);
		СкладПолучательВПарах = НЕ ПроверитьЗначениеСкладВКоробах(Склад);
		Если СкладМаркетплейса Тогда
			Сообщение = "У документа " + Документ + " стоит значение ""Склад маркетплейс""";
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, Сообщение);
			ЗаписатьСообщениеОшибки(Сообщение, Истина, "Проверка настроек для обмена");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ТекущаяДатаСеанса(), "ДЛФ=T") + ". " + Сообщение);
			
			Продолжить;
		КонецЕсли;
		
		СкладОтправительВПарах = НЕ ПроверитьЗначениеСкладВКоробах(Документ.Отправитель);
	    ЭтоПеремещение = ТипЗнч(Документ.Распоряжение) = Тип("ДокументСсылка.ПеремещениеТоваров");
		ЭтоПоступление = ТипЗнч(Документ.Распоряжение) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг");
		ЭтоРеализация = ТипЗнч(Документ.Распоряжение) = Тип("ДокументСсылка.РеализацияТоваровУслуг"); 
		ЭтоВозврат = ТипЗнч(Документ.Распоряжение) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента");
	    ЭтоКорректировка = Ложь;
		
		ЭтоТаможенныйСклад = ЭтоТаможенныйСклад(Склад);
		ЭтоОсновнойСклад = ЭтоОсновнойСклад(Склад);
		ЭтоСкладНедосдачи = ЭтоСкладНедосдачи(Склад);
		//ЭтоСвободныйСклад = Склад;
		//ЭтоСкладТранзитБезРезерва = ЭтоСкладТранзитБезРезерва(Склад);
		//ЭтоСкладРазукомплектации = ЭтоСкладРазукомплектации(Склад);
		//
		НомерСообщения = строка(Новый УникальныйИдентификатор);
		Пакет = ПолучитьПакетПрихода(ИмяФайлаБезПути, ИмяФайла, НомерСообщения, Документ, НастройкиFTPСоединения);
		ЗаписатьОтправитьПакет(Пакет, ИмяФайлаБезПути, ИмяФайла, НомерСообщения, 
								Перечисления.гф_ВидыДанныхДляВыгрузки.Документ, Документ, НастройкиFTPСоединения);
		
	КонецЦикла;
	
	Для каждого Документ Из МассивДокументовКорректировки Цикл
		//	
		//	Контрагент = Документ.Получатель;
		КодОрганизации = Документ.Организация.Префикс;
		//	
		Склад = ПолучитьСкладКорректировки(Документ);
		Организация = Документ.Организация;
		СкладМаркетплейса = ПроверитьЗначениеСкладМаркетплейс(Склад); 
		СкладОтправительВПарах = НЕ ПроверитьЗначениеСкладВКоробах(Склад);

		Если СкладМаркетплейса Тогда
			Сообщение = "У документа " + Документ + " стоит значение ""Склад маркетплейс""";
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, Сообщение);
			ЗаписатьСообщениеОшибки(Сообщение, Истина, "Проверка настроек для обмена");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ТекущаяДатаСеанса(), "ДЛФ=T") + ". " + Сообщение);
			
			Продолжить;
		КонецЕсли;
		
		//Распоряжение = ПолучитьЗаявкуПоКорректировке(Документ);
		ЭтоПеремещение = ТипЗнч(Документ) = Тип("ДокументСсылка.ПеремещениеТоваров");
		ЭтоПоступление = ТипЗнч(Документ) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг"); 
		ЭтоРеализация = ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказКлиента");
		ЭтоВозврат = ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента");
		ЭтоКорректировка = ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаНазначенияТоваров");;
			
		ЭтоТаможенныйСклад = ЭтоТаможенныйСклад(Склад);
		ЭтоОсновнойСклад = ЭтоОсновнойСклад(Склад);
		//ЭтоСвободныйСклад = Склад;
		//ЭтоСкладТранзитБезРезерва = ЭтоСкладТранзитБезРезерва(Склад);
		//ЭтоСкладРазукомплектации = ЭтоСкладРазукомплектации(Склад);
		//
		НомерСообщения = Строка(Новый УникальныйИдентификатор);
		Пакет = ПолучитьПакетРасхода(ИмяФайлаБезПути, ИмяФайла, НомерСообщения, Документ, НастройкиFTPСоединения);
		ЗаписатьОтправитьПакет(Пакет, ИмяФайлаБезПути, ИмяФайла, НомерСообщения, 
		Перечисления.гф_ВидыДанныхДляВыгрузки.Документ, Документ, НастройкиFTPСоединения);
		
	КонецЦикла;
	
КонецПроцедуры// } #wortmann 

// #wortmann { 
// Процедура подбирает документы со статусом "КПоступлению" для ДокументСсылка.ПриходныйОрдерНаТовары
// и статусом "Подготовлено" для ДокументСсылка.РасходныйОрдерНаТовары
// Галфинд_Домнышева 2022/12/01
//
Процедура ОбновитьДанныеВДанныеВыгрузки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриходныйОрдерНаТовары.Ссылка КАК Документ
		|ИЗ
		|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
		|ГДЕ
		|	ПриходныйОрдерНаТовары.Статус = &СтатусПО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасходныйОрдерНаТовары.Ссылка
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
		|ГДЕ
		|	РасходныйОрдерНаТовары.Статус = &СтатусРО
	// #wortmann { 
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee2b8a639ceb69
	// Галфинд_Домнышева 2023/07/26 
	    |ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КорректировкаНазначенияТоваров.Ссылка
		|ИЗ
		|	Документ.КорректировкаНазначенияТоваров КАК КорректировкаНазначенияТоваров
		|ГДЕ
		|	КорректировкаНазначенияТоваров.Проведен = Ложь
		|   И КорректировкаНазначенияТоваров.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировкиНазначения.СнятьРезерв)";
	// } #wortmann
	
	Запрос.УстановитьПараметр("СтатусПО", Перечисления.СтатусыПриходныхОрдеров.КПоступлению);
	Запрос.УстановитьПараметр("СтатусРО", Перечисления.СтатусыРасходныхОрдеров.КОтбору);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Не РезультатЗапроса.Пустой() Тогда
		МассивДокументов = Новый Массив;
		Пока Выборка.Следующий() Цикл
			
			МассивДокументов.Добавить(Выборка.Документ);
			
		КонецЦикла;
		СделатьОбновитьЗаписьДанныхВыгрузки(МассивДокументов);
	КонецЕсли;
  
КонецПроцедуры// } #wortmann 

// #wortmann { 
// Процедура обновляет или вносит новую запись в РС гф_ДанныеВыгрузки
// Галфинд_Домнышева 2022/12/01
// 
// Параметры:
//	МассивДокументов - Массив - массив документов с нужным статусом для выгрузки
Процедура СделатьОбновитьЗаписьДанныхВыгрузки(МассивДокументов)
	
	Дата = ТекущаяДатаСеанса();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	гф_ДанныеВыгрузки.Период КАК Период,
		|	гф_ДанныеВыгрузки.ВидДанных КАК ВидДанных,
		|	гф_ДанныеВыгрузки.Документ КАК Документ,
		|	гф_ДанныеВыгрузки.НомерСообщения КАК НомерСообщения,
		|	гф_ДанныеВыгрузки.Состояние КАК Состояние,
		|	гф_ДанныеВыгрузки.ИмяФайла КАК ИмяФайла
		|ИЗ
		|	РегистрСведений.гф_ДанныеВыгрузки КАК гф_ДанныеВыгрузки
		|ГДЕ
		|	гф_ДанныеВыгрузки.Документ В(&МассивДокументов)
		|	И гф_ДанныеВыгрузки.Состояние = &Состояние
		|	И гф_ДанныеВыгрузки.ВидДанных = &ВидДанных";
	
	Запрос.УстановитьПараметр("ВидДанных", Перечисления.гф_ВидыДанныхДляВыгрузки.Документ);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("Состояние", Перечисления.гф_СтатусыВыгрузкиДанных.ГотовоКОтправке);
	
	РезультатЗапроса = Запрос.Выполнить();
	МассивНеВнесенныхДокументов = Новый Массив;
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		МассивДокументовНайденныхВРС = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Документ");
				
		Для каждого Элемент Из МассивДокументов Цикл 
			ИндексЭлемента = ВернутьИндексВМассиве(МассивДокументовНайденныхВРС, Элемент);
			Если ИндексЭлемента = -1 Тогда  
				МассивНеВнесенныхДокументов.Добавить(Элемент);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Документ Из МассивНеВнесенныхДокументов Цикл
			Запись = РегистрыСведений.гф_ДанныеВыгрузки.СоздатьМенеджерЗаписи();
			Запись.Период = Дата;
			Запись.ВидДанных = Перечисления.гф_ВидыДанныхДляВыгрузки.Документ;
			Запись.Документ = Документ;
			Запись.Состояние = Перечисления.гф_СтатусыВыгрузкиДанных.ГотовоКОтправке;
			Запись.Записать();
		КонецЦикла;
		
	Иначе
		Для каждого Документ Из МассивДокументов Цикл
			Запись = РегистрыСведений.гф_ДанныеВыгрузки.СоздатьМенеджерЗаписи();
			Запись.Период = Дата;
			Запись.ВидДанных = Перечисления.гф_ВидыДанныхДляВыгрузки.Документ;
			Запись.Документ = Документ;
			Запись.Состояние = Перечисления.гф_СтатусыВыгрузкиДанных.ГотовоКОтправке;
			Запись.Записать();
		КонецЦикла;
	КонецЕсли;                            
			                                          
КонецПроцедуры// } #wortmann

// #wortmann { 
// Функция ищет индекс элемента в Массиве
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	МассивДанные - Массив - массив элементами которого являются ДокументСсылка.* внесенные в РС гф_ДанныеВыгрузки 
//	Элемент - ДокументСсылка.* - Значение из Массива загружаемых документов
//
// Возвращаемое значение:
//	ИндексЭлемента - ДокументОбъект.ЗаказКлиента - Создаваемый документ 
//	"-1" - если не нашли элемент или МассивДанные = Неопределено 
Функция ВернутьИндексВМассиве(МассивДанные, Элемент) Экспорт 
	
	Если МассивДанные = Неопределено Тогда
		Возврат -1;
	КонецЕсли;
	
	Для ИндексЭлемента = 0 По МассивДанные.ВГраница() Цикл
		
		Если  (МассивДанные[ИндексЭлемента] = Элемент) Тогда
			Возврат ИндексЭлемента;
		КонецЕсли;	
		
	КонецЦикла;
	
	// не нашли элемент
	Возврат -1;
	
КонецФункции// } #wortmann   

// #wortmann { 
// Функция формирует массив документов РасходныйОрдерНаТовары или ПриходныйОрдерНаТовары или 
// КорректировкаНазначенияТоваров по срезу последнихсо статусом ГотовоКОтправке 
// или (Отправлено с условием что прошло более 5 дней)
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	ТипДокумента - Строка
//	Документы - Массив ИЛИ Неопределено - Может быть заполнен значениями  ДокументСсылка.РасходныйОрдерНаТовары 
//		или ДокументСсылка.ПриходныйОрдерНаТовары
//
// Возвращаемое значение:
//	МассивДокументов - Массив - из ДокументСсылка.РасходныйОрдерНаТовары или ДокументСсылка.ПриходныйОрдерНаТовары
//	или ДокументСсылка.КорректировкаНазначенияТоваров
Функция ПолучитьМассивДокументов(ТипДокумента, Документы = Неопределено) 
	
	  Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	гф_ДанныеВыгрузки.Документ КАК Документ,
		|	гф_ДанныеВыгрузки.Период КАК Период,
		|	гф_ДанныеВыгрузки.Состояние КАК Состояние
		|ПОМЕСТИТЬ СРЕЗ
		|ИЗ
		|	РегистрСведений.гф_ДанныеВыгрузки.СрезПоследних(
		|			&ТекущаяДата,
		|			ВидДанных = &ВидДанных
		|				И Документ ССЫЛКА Документ.РасходныйОрдерНаТовары) КАК гф_ДанныеВыгрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Срез.Документ КАК Документ,
		|	Срез.Период КАК Период,
		|	Срез.Состояние КАК Состояние
		|ИЗ
		|	СРЕЗ КАК Срез
		|ГДЕ
		|	(Срез.Состояние = ЗНАЧЕНИЕ(Перечисление.гф_СтатусыВыгрузкиДанных.ГотовоКОтправке)
		|			ИЛИ (Срез.Состояние = ЗНАЧЕНИЕ(Перечисление.гф_СтатусыВыгрузкиДанных.Отправлено)
		|				И РАЗНОСТЬДАТ(Срез.Период, &ТекущаяДата, ДЕНЬ) > 5))
		|	И Срез.Документ В(&МассивДокументов)";
		
		Запрос.УстановитьПараметр("ВидДанных", Перечисления.гф_ВидыДанныхДляВыгрузки.Документ);
        Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		// #wortmann { 
		// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee2b8a639ceb69
		// Изменила первый параметр функции на строку со значением документа
		// Галфинд_Домнышева 2023/07/26
		Если ТипДокумента = "ПриходныйОрдерНаТовары" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.РасходныйОрдерНаТовары", "Документ.ПриходныйОрдерНаТовары"); 
		КонецЕсли;
		Если ТипДокумента = "КорректировкаНазначенияТоваров" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.РасходныйОрдерНаТовары", "Документ.КорректировкаНазначенияТоваров"); 
		КонецЕсли;
		// } #wortmann 
		Если Документы <> Неопределено Тогда 
			Запрос.УстановитьПараметр("МассивДокументов", Документы);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Срез.Документ В(&МассивДокументов)", "Истина");		
		КонецЕсли;			
		
		РезультатЗапроса = Запрос.Выполнить();
		МассивДокументов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Документ");
		
		Если Документы <> Неопределено Тогда
			ПроверитьДокументыНаОтсутствиеИСделатьЗапись(Документы, МассивДокументов);
		КонецЕсли;
		
		Возврат МассивДокументов;
	
КонецФункции// } #wortmann

// #wortmann { 
// Процедура проверяет были ли выбранные документы отправлены ранее, если да записывает сообщение
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документы - Массив - Массив выбранных документов пользователем вручную
//	МассивДокументов - Массив - массив элементами которого являются ДокументСсылка.* внесенные в РС гф_ДанныеВыгрузки 
Процедура ПроверитьДокументыНаОтсутствиеИСделатьЗапись(Документы, МассивДокументов)
	
	МассивНеВнесенныхДокументов = Новый Массив;
	Для каждого Элемент Из Документы Цикл 
		ИндексЭлемента = ВернутьИндексВМассиве(МассивДокументов, Элемент);
			Если ИндексЭлемента = -1 Тогда  
				МассивНеВнесенныхДокументов.Добавить(Элемент);
			КонецЕсли;
	КонецЦикла;
	
	Если МассивНеВнесенныхДокументов.Количество() > 0 Тогда
		Сообщение = "По следующим выбранным документам файлы были отправлены ранее: ";
		Разделитель = Символы.ПС;
		Для каждого Элемент Из МассивНеВнесенныхДокументов Цикл
			Сообщение = Сообщение + Разделитель + Элемент;
		КонецЦикла;
		ЗаписьЖурналаРегистрации("Информация", УровеньЖурналаРегистрации.Информация, ЭтотОбъект, ЭтотОбъект, Сообщение);
		ЗаписатьСообщениеОшибки(Сообщение, Ложь, "Проверка настроек для обмена");
	КонецЕсли;

КонецПроцедуры// } #wortmann

// #wortmann { 
// Функция формирует пакет XML документов РасходныйОрдерНаТовары 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	ИмяФайлаБезПути - Строка - определяется в теле функции
//	ИмяФайла - Строка - определяется в теле функции
//	НомерСообщения - Строка
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары
//	НастройкиFTPСоединения - Структура - Структура данных для подключения к FTP
//
// Возвращаемое значение:
//	Пакет - ФабрикаXDTO  
Функция ПолучитьПакетРасхода(ИмяФайлаБезПути, ИмяФайла, НомерСообщения, Документ, НастройкиFTPСоединения)
	
	Если ЭтоСкладНедосдачи Тогда
		Сообщение = "Не согласован формат выгрузки со складом. Файл по документу " 
		+ Документ + " сформирован не будет";
		ЗаписатьСообщениеОшибки(Сообщение, Истина, "Проверка настроек для обмена");
		возврат Неопределено;
	 КонецЕсли;
	
	Если ЭтоПеремещение Тогда 
		Распоряжение = ПолучитьСвязанныйДокументРО(Документ);
		КодКлиента = ПолучитьКодКлиента(Распоряжение.СкладОтправитель);
		КодКонтрагента = ПолучитьКодКлиента(Распоряжение.СкладПолучатель);
		Суффикс = "-S_";
	ИначеЕсли ЭтоКорректировка Тогда
		//Распоряжение = ПолучитьЗаявкуПоКорректировке(Документ);
		Склад = ПолучитьСкладКорректировки(Документ);
		КодКлиента = ПолучитьКодКлиента(Склад);
		КодКонтрагента = ПолучитьКодКлиента(Склад);
		Суффикс = "-BL_";
	Иначе
		КодКлиента = ПолучитьКодКлиента(Документ.Склад);
		КодКонтрагента = сокрЛП(Документ.Получатель.Код);
		Суффикс = "_";
	КонецЕсли;
	
	ПапкаДляВременнойВыгрузки = _омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначение("гф_ПапкаДляВыгрузкиНаСервере");
		
	СоздатьКаталог(ПапкаДляВременнойВыгрузки);
	
	КаталогВременнойВыгрузки = Новый Файл(ПапкаДляВременнойВыгрузки);
	Если Не КаталогВременнойВыгрузки.Существует() Тогда
		ДобавитьСтрокуВТекстыОшибки("Каталог для временной записи файлов задан неверно или не существует...", 
									Истина, ПапкаДляВременнойВыгрузки);
		//ЗаписатьСообщениеОшибки("Каталог для временной записи файлов задан неверно или не существует...", Истина);
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли; 
	
	ИмяФайлаБезПути = "SO_" + КодКлиента + Формат(СокрЛП(Документ.Номер), "ЧГ=") + Суффикс
						+ Формат(Документ.Дата, "ДФ=yyyyMMddHHmm") + ".xml"; 
	
	ДобавитьСтрокуВТекстыОшибки("Начало выгрузки в WMS документа " + Документ.Ссылка, Ложь, ИмяФайлаБезПути);
	
	//ИмяФайла = НастройкиFTPСоединения.Каталог + "\" + ИмяФайлаБезПути;
	ИмяФайла = ПапкаДляВременнойВыгрузки + "\" + ИмяФайлаБезПути;
	
	Пакет = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Пакет"));
	Пакет.ИД = НомерСообщения;
	Пакет.Дата = формат(ТекущаяДатаСеанса(), "ДФ='ггг-ММ-д hh:mm:ss'");
	Пакет.Источник = ПолучитьПоле_SourceSystem();
	//Пакет.Источник = "1С";
	Пакет.Владелец = КодКлиента;
	Пакет.Код = "01";
	
	// Раздел Компании
	// Для документа Корректировка Назначения нет получателей
	Если НЕ ЭтоКорректировка Тогда
	Пакет.Каталог = Каталог("Расход", Документ);
	КонецЕсли;
	
	// Раздел Документы	
	Пакет.Документы = РазделДокументы("Расход", Документ);
	
	Возврат Пакет;
	
КонецФункции// } #wortmann

// #wortmann { 
// Функция формирует пакет XML документов ПриходныйОрдерНаТовары
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	ИмяФайлаБезПути - Строка - определяется в теле функции
//	ИмяФайла - Строка - определяется в теле функции
//	НомерСообщения - Строка
//	Документ - ДокументСсылка.ПриходныйОрдерНаТовары
//	НастройкиFTPСоединения - Структура - Структура данных для подключения к FTP
//
// Возвращаемое значение:
//	Пакет - ФабрикаXDTO
Функция ПолучитьПакетПрихода(ИмяФайлаБезПути, ИмяФайла, НомерСообщения, Документ, НастройкиFTPСоединения)
	
	Если ЭтоТаможенныйСклад ИЛИ ЭтоСкладНедосдачи ИЛИ (СкладПолучательВПарах И НЕ (ЭтоВозврат ИЛИ ЭтоПеремещение)) Тогда
		Сообщение = "Не согласован формат выгрузки со складом. Файл сформирован не будет. По документу " + Документ.Ссылка 
		+ " была попытка создать PO по парному складу (не возврат и не перемещение)";
		ЗаписатьСообщениеОшибки(Сообщение, Истина, "Проверка настроек для обмена");
		Возврат Неопределено; 
	КонецЕсли;
	
	Склад = Документ.Склад;
	
	Если ЭтоПеремещение Тогда
		КодКлиента = ПолучитьКодКлиента(Документ.Распоряжение.СкладОтправитель);
		КодКонтрагента = ПолучитьКодКлиента(Документ.Распоряжение.СкладПолучатель);
		Суффикс = "-S_";
	Иначе
		КодКлиента = ПолучитьКодКлиента(Склад);
        КодКонтрагента = сокрЛП(Документ.Отправитель.Код);
		Суффикс = "_";
	КонецЕсли;
		
	ПапкаДляВременнойВыгрузки = _омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначение("гф_ПапкаДляВыгрузкиНаСервере");
	
	СоздатьКаталог(ПапкаДляВременнойВыгрузки);
	
	КаталогВременнойВыгрузки = Новый Файл(ПапкаДляВременнойВыгрузки);
	Если Не КаталогВременнойВыгрузки.Существует() Тогда
		ДобавитьСтрокуВТекстыОшибки("Каталог для временной записи файлов задан неверно или не существует...", Истина, ПапкаДляВременнойВыгрузки);
		//ЗаписатьСообщениеОшибки("Каталог для временной записи файлов задан неверно или не существует...", Истина);
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяФайлаБезПути = "PO_" + КодКлиента + Формат(СокрЛП(Документ.Номер), "ЧГ=") + Суффикс +  Формат(Документ.Дата, "ДФ=yyyyMMddHHmm") + ".xml"; 
	
	ИмяФайла = ПапкаДляВременнойВыгрузки + "\" + ИмяФайлаБезПути;
	
	ДобавитьСтрокуВТекстыОшибки("Начало выгрузки в WMS документа " + Документ.Ссылка, Ложь, ИмяФайлаБезПути);
	
	Пакет = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Пакет"));
	Пакет.ИД = НомерСообщения;
	Пакет.Дата = формат(ТекущаяДатаСеанса(), "ДФ='ггг-ММ-д hh:mm:ss'");
	Пакет.Источник = ПолучитьПоле_SourceSystem();
	//Пакет.Источник = "1С";
	Пакет.Владелец = КодКлиента;
	Пакет.Код = "01";
	
	Пакет.Каталог = Каталог("Приход", Документ);
	Пакет.Документы = РазделДокументы("Приход", Документ);

	Возврат Пакет;
	
КонецФункции// } #wortmann 

// #wortmann { 
// Функция получает документ Распоряжение из РасходныйОрдерНаТовары
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары
//
// Возвращаемое значение:
//	ДокументСсылка.* - если связанный документ найден
//	Неопределено - если документ не найден
Функция ПолучитьСвязанныйДокументРО(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение КАК Распоряжение
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
	|ГДЕ
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка.Следующий();
		Возврат Выборка.Распоряжение;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции// } #wortmann

// #wortmann { 
// Функция получает документ ЗаявкаНаВозвратТоваровОтКлиента из по Корректировке
// Галфинд_Домнышева 2023/07/28
//
// Параметры:
//	Документ - ДокументСсылка.КорректировкаНазначенияТоваров
//
// Возвращаемое значение:
//	ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента - если связанный документ найден
//	Неопределено - если документ не найден
Функция ПолучитьЗаявкуПоКорректировке(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ Первые 1
		|	ЗаявкаНаВозвратВозвращаемыеТовары.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ЗаявкаНаВозвратВозвращаемыеТовары
		|ГДЕ
		|	ЗаявкаНаВозвратВозвращаемыеТовары.гф_КорректировкаНазначения = &КорректировкаНазначения";
	
	Запрос.УстановитьПараметр("КорректировкаНазначения", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции// } #wortmann 

// #wortmann { 
// Функция получает значение Склада из ТЧ документа КорректировкаНазначенияТоваров
// Галфинд_Домнышева 2023/07/28
//
// Параметры:
//	Документ - ДокументСсылка.КорректировкаНазначенияТоваров
//
// Возвращаемое значение:
//	СправочникСсылка.Скллады
Функция ПолучитьСкладКорректировки(Документ) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КорректировкаТовары.Склад КАК Склад
	|ИЗ
	|	Документ.КорректировкаНазначенияТоваров.Товары КАК КорректировкаТовары
	|ГДЕ
	|	КорректировкаТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.Склад;
	
КонецФункции// } #wortmann

// #wortmann { 
// Функция устанавливает есть ли у Склада дополнительный реквизит "гф_СкладыСкладМаркетплейс"
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Склад - СправочникСсылка.Склады
//
// Возвращаемое значение:
//	Булево - Истина, если найдено свойство "гф_СкладыСкладМаркетплейс", в остальных случаях Ложь
Функция ПроверитьЗначениеСкладМаркетплейс(Склад)
	
    Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СкладыДополнительныеРеквизиты.Свойство.Имя КАК Свойство,
		|	СкладыДополнительныеРеквизиты.Значение КАК Значение
		|ИЗ
		|	Справочник.Склады.ДополнительныеРеквизиты КАК СкладыДополнительныеРеквизиты
		|ГДЕ
		|	СкладыДополнительныеРеквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Склад);
	Запрос.УстановитьПараметр("Имя", "гф_СкладыСкладМаркетплейс");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Свойство = "гф_СкладыСкладМаркетплейс" Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Ложь;
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;

КонецФункции// } #wortmann

// #wortmann { 
// Функция устанавливает есть ли у Склада дополнительный реквизит "гф_СкладыТоварыВКоробах"
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Склад - СправочникСсылка.Склады
//
// Возвращаемое значение:
//	Булево - Истина, если найдено свойство "гф_СкладыТоварыВКоробах", в остальных случаях Ложь
Функция ПроверитьЗначениеСкладВКоробах(Склад)
	
    Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СкладыДополнительныеРеквизиты.Свойство.Имя КАК Свойство,
		|	СкладыДополнительныеРеквизиты.Значение КАК Значение
		|ИЗ
		|	Справочник.Склады.ДополнительныеРеквизиты КАК СкладыДополнительныеРеквизиты
		|ГДЕ
		|	СкладыДополнительныеРеквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Свойство = "гф_СкладыТоварыВКоробах" Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Ложь;
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;

КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "Каталог" для пакета ФабрикаXDTO "WMS"
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Тип - Строка - "Приход" или "Расход"
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары, ДокументСсылка.ПриходныйОрдерНаТовары
//
// Возвращаемое значение:
//	Каталог - Тип "Каталог" для пакета ФабрикаXDTO "WMS"
Функция Каталог(Тип, Документ)
	
	Каталог = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Каталог"));
	
	Если Тип = "Расход" Тогда
		Каталог.Компании = КомпанииРасход(Документ);
		
	ИначеЕсли Тип = "Приход" Тогда
		//раздел Номенклатура
		Каталог.СписокТоваров = СписокТоваров(Документ, Тип);
		
		//раздел компании
		Каталог.Компании = КомпанииПриход(Документ); 
	Иначе
		// для чистоты кода
	КонецЕсли;
	
	Возврат Каталог;
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "Компании" для пакета ФабрикаXDTO "WMS" для Расхода
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ -  ДокументСсылка.РасходныйОрдерНаТовары - выгружаемый документ
//
// Возвращаемое значение:
//	Компании - Тип "Компании" для пакета ФабрикаXDTO "WMS"
Функция КомпанииРасход(Документ)
	
	Компании = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Компании"));
	Компании.Компания.Добавить(КомпанияРасход(Документ));
	
	Возврат Компании;
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "Компания" для пакета ФабрикаXDTO "WMS"  для Расхода
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ -  ДокументСсылка.РасходныйОрдерНаТовары - выгружаемый документ
//
// Возвращаемое значение:
//	Компания - Тип "Компания" для пакета ФабрикаXDTO "WMS"
Функция КомпанияРасход(Документ)
	Перем КомпанияАдрес;
	
	СвязанныйДокумент = ПолучитьСвязанныйДокументРО(Документ);
	
	Компания = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Компания"));
	Компания.ИД = КодКонтрагента;
	//ПолучитьКодКлиента(Документ.Склад);
	// Компания.ИД = СвязанныйДокумент.гф_АдресДоставки.НомерАдреса;
	Компания.Имя = Документ.Получатель.Наименование;
	//Компания.Имя = СвязанныйДокумент.гф_АдресДоставки.КонтактноеЛицо;   //будет эта строка
	Компания.Адреса = АдресаРасход(КомпанияАдрес, Документ, СвязанныйДокумент);
	Компания.Адрес = КомпанияАдрес;
	
	Возврат Компания;
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "Адреса" для пакета ФабрикаXDTO "WMS"  для Расхода
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	КомпанияАдрес - Строка - Представление компании (из АдресаДоставки или Юр.Адреса или Физ.адреса)
//	Документ -  ДокументСсылка.РасходныйОрдерНаТовары - выгружаемый документ
//	СвязанныйДокумент - ДокументСсылка.* - распоряжение для РасходныйОрдерНаТовары
//
// Возвращаемое значение:
//	Адреса - Тип "Адреса" для пакета ФабрикаXDTO "WMS"
Функция АдресаРасход(КомпанияАдрес, Документ, СвязанныйДокумент)
	
	Адреса = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Адреса"));
	КомпанияАдрес = "";
	
	ЕстьАдрес = Ложь;
	Структура = ПолучитьАдресПоТипуКомпании(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
									СвязанныйДокумент.Контрагент, ЕстьАдрес);
	Если ЕстьАдрес Тогда
		Адреса.Адрес.Добавить(Адрес(Структура, "Юридический адрес"));
		КомпанияАдрес = Структура.Представление;
	КонецЕсли;
	
	ЕстьАдрес = Ложь;
	Структура = ПолучитьАдресПоТипуКомпании(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента,
									СвязанныйДокумент.Контрагент, ЕстьАдрес);
	Если ЕстьАдрес Тогда
		Адреса.Адрес.Добавить(Адрес(Структура, "Фактический адрес"));
		КомпанияАдрес = Структура.Представление;
	КонецЕсли;
	
	СтруктураКИ = ПолучитьСтруктуруКИ(СвязанныйДокумент);
	Если ЗначениеЗаполнено(СтруктураКИ) Тогда
		
		СтруктураАдреса = Новый Структура;
		СтруктураАдреса.Вставить("Представление", СвязанныйДокумент.АдресДоставки);
		СтруктураАдреса.Вставить("Индекс", СтруктураКИ.ZIPcode);
		СтруктураАдреса.Вставить("Город", СтруктураКИ.city);
		СтруктураАдреса.Вставить("Регион", СтруктураКИ.area);
		
		Адреса.Адрес.Добавить(Адрес(СтруктураАдреса, "Адрес доставки"));
		КомпанияАдрес = СвязанныйДокумент.АдресДоставки;
	КонецЕсли;

	Возврат Адреса; 
	
КонецФункции// } #wortmann

// #wortmann { 
// Функция получает структуру с контактной информацией из адреса доставки указанного
// в документе распоряжении
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	СвязанныйДокумент - ДокументСсылка.* - распоряжение для РасходныйОрдерНаТовары
//
// Возвращаемое значение:
//	СтруктураКИ - Структура - с данными адреса доставки, если адрес заполнен
//	Неопределено - если адрес не заполнен
Функция ПолучитьСтруктуруКИ(СвязанныйДокумент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	  "ВЫБРАТЬ
		|	гф_АдресаДоставки.Значение КАК Значение
		|ИЗ
		|	Справочник.гф_АдресаДоставки КАК гф_АдресаДоставки
		|		ГДЕ гф_АдресаДоставки.Ссылка = &Адрес";

	Запрос.УстановитьПараметр("Адрес", СвязанныйДокумент.гф_АдресДоставки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка.Следующий();
		ИсточникКИ = Выборка.Значение;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Адрес;
		
		СтруктураКИ = УправлениеКонтактнойИнформациейСлужебный.JSONВКонтактнуюИнформациюПоПолям(ИсточникКИ, ТипКИ);
		
		Возврат СтруктураКИ;
	КонецЕсли;

	Возврат Неопределено;
	
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "Компании" для пакета ФабрикаXDTO "WMS" для Прихода
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ -  ДокументСсылка.ПриходныйОрдерНаТовары - выгружаемый документ
//
// Возвращаемое значение:
//	Компании - Тип "Компании" для пакета ФабрикаXDTO "WMS"
Функция КомпанииПриход(Документ)
	
	Компании = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Компании"));		
	
	КомпанииПоЗаказам = ПолучитьКомпанииПоЗаказуКлиента(Документ); // 31.01.23
	Для каждого КомпанияЗаказ Из КомпанииПоЗаказам Цикл
	Компании.Компания.Добавить(КомпанияПриход(КомпанияЗаказ));
	КонецЦикла;
	Возврат Компании;
КонецФункции// } #wortmann)

// #wortmann { 
// Функция подбирает ЗаказыКлиентов из Тип "Компании" для пакета ФабрикаXDTO "WMS" для Прихода
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ -  ДокументСсылка.ПриходныйОрдерНаТовары - выгружаемый документ
//
// Возвращаемое значение:
//	ТЗ - ТаблицаЗначений - с колонками "" и "" и ""
Функция ПолучитьКомпанииПоЗаказуКлиента(Документ) 
	
	Если ЭтоВозврат Тогда
		МассивСсылок = ПолучитьДанныеУЛПоВозврату(Документ);	
	Иначе
		ДанныеУЛ = ПолучитьДанныеУЛ(Документ);                     
		МассивСсылок = ДанныеУЛ.ВыгрузитьКолонку("УпаковочныйЛист");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УпаковочныйЛист.гф_Заказ КАК гф_Заказ,
		|	ЗаказКлиента.Контрагент КАК Контрагент,
		|	ЗаказКлиента.АдресДоставки КАК АдресДоставки,
		|	ЗаказКлиента.Контрагент.Наименование КАК КонтрагентНаименование,
		|	ЗаказКлиента.Партнер.Код КАК КодКлиента
		|ИЗ
		|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
		|		ПО УпаковочныйЛист.гф_Заказ = ЗаказКлиента.Ссылка
		|ГДЕ
		|	УпаковочныйЛист.Ссылка В(&МассивСсылок)
		|  И НЕ (ЗаказКлиента.Ссылка  ЕСТЬ NULL)";
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат РезультатЗапроса.Выгрузить();
	КонецЕсли;	
	
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "Компания" для пакета ФабрикаXDTO "WMS" для Прихода
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	КомпанияЗаказ - СтрокаТаблицыЗначений - из ТЗ собранной функцией ПолучитьКомпанииПоЗаказуКлиента()
//
// Возвращаемое значение:
//	Компания - Тип "Компания" для пакета ФабрикаXDTO "WMS"
Функция КомпанияПриход(КомпанияЗаказ)
	Перем КомпанияАдрес;
	
	Компания = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Компания"));
	Компания.ИД = КомпанияЗаказ.КодКлиента;
	Компания.Имя = КомпанияЗаказ.КонтрагентНаименование;

	Компания.Адреса = АдресаПриход(КомпанияАдрес, КомпанияЗаказ);
	Компания.Адрес = КомпанияАдрес;
	
	Возврат Компания;
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "Адреса" для пакета ФабрикаXDTO "WMS"  для Прихода
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	КомпанияАдрес - Строка - Представление компании (из АдресаДоставки или Юр.Адреса или Физ.адреса)
//	КомпанияЗаказ - СтрокаТаблицыЗначений - из ТЗ собранной функцией ПолучитьКомпанииПоЗаказуКлиента()
//
// Возвращаемое значение:
//	Адреса - Тип "Адреса" для пакета ФабрикаXDTO "WMS"
Функция АдресаПриход(КомпанияАдрес, КомпанияЗаказ)
	
	Отправитель = КомпанияЗаказ.Контрагент;
	
	Адреса = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Адреса"));
 	КомпанияАдрес = "";
	
	ЕстьАдрес = Ложь;
	структура = ПолучитьАдресПоТипуКомпании(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
											Отправитель, ЕстьАдрес);
	Если ЕстьАдрес Тогда
		Адреса.Адрес.Добавить(Адрес(Структура, "Юридический адрес"));
		КомпанияАдрес = структура.Представление;
	КонецЕсли;
	
	ЕстьАдрес = Ложь;
	структура = ПолучитьАдресПоТипуКомпании(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента,
											Отправитель, ЕстьАдрес);
	Если ЕстьАдрес Тогда
		Адреса.Адрес.Добавить(Адрес(Структура, "Фактический адрес"));
		КомпанияАдрес = структура.Представление;
	КонецЕсли;
	
	//АдресДоставки = ПолучитьАдресДоставки(Документ);
	//Если АдресДоставки.Представление <> Неопределено Тогда
	//	Структура = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(АдресДоставки.Представление,
	//	Перечисления.ТипыКонтактнойИнформации.Адрес);
	//	ЕстьАдрес = Истина;
	//Иначе 
	//	Структура = ПолучитьАдресПоТипуКомпании(Справочники.ВидыКонтактнойИнформации.АдресПартнера, Документ.Отправитель, ЕстьАдрес);
	//	
	//	Если Структура.Представление = Неопределено Тогда	
	//		Сообщение = "Не заполнен адрес доставки для контрагента " + Отправитель;
	//		ЗаписьЖурналаРегистрации(ЭтотОбъект, УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, Отправитель, Сообщение);
	//		Сообщить(Сообщение);
	//		ВызватьИсключение Сообщение;
	//	КонецЕсли;
	//КонецЕсли; 
	ТипАдресДоставки = ПолучитьТипАдресДоставки();
	
	ЕстьАдрес = Ложь;
	структура = ПолучитьАдресПоТипуКомпании(ТипАдресДоставки, Отправитель, ЕстьАдрес);
	Если ЕстьАдрес Тогда
		Адреса.Адрес.Добавить(Адрес(Структура, "Адрес доставки"));
		КомпанияАдрес = структура.Представление;
	КонецЕсли;

	Если ЗначениеЗаполнено(КомпанияЗаказ.АдресДоставки) Тогда
		КомпанияАдрес = КомпанияЗаказ.АдресДоставки; 
	КонецЕсли;
	
	//Если АдресДоставки = Неопределено Тогда
	//	Сообщение = "Не заполнен адрес доставки для контрагента " + Отправитель;
	//	ЗаписьЖурналаРегистрации(ЭтотОбъект, УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, Отправитель, Сообщение);
	//	Сообщить(Сообщение);
	//	ВызватьИсключение Сообщение;
	//КонецЕсли;
	//
    // КомпанияАдрес должна быть АдресДоставки из ЗаказКлиента
	Возврат Адреса;
КонецФункции// } #wortmann 

// #wortmann { 
// Функция получает значение "Адреса доставки" в спр ВидыКонтактнойИнформации 
// Галфинд_Домнышева 2022/12/01
//
// Возвращаемое значение:
//	СправочникСсылка.ВидыКонтактнойИнформации - ссылка на элемент справочника
Функция ПолучитьТипАдресДоставки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.Наименование = &Наименование
		|	И ВидыКонтактнойИнформации.Родитель = &Родитель";
	
	Запрос.УстановитьПараметр("Наименование", "Адрес доставки");
	Запрос.УстановитьПараметр("Родитель", Справочники.ВидыКонтактнойИнформации.СправочникКонтрагенты);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Не РезультатЗапроса.Пустой() Тогда
	 Выборка.Следующий();
    Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "Адрес" для пакета ФабрикаXDTO "WMS" 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Структура - Структура - с данными адреса
//	ТипАдреса - Строка - "Юридический адрес", "Фактический адрес", "Адрес доставки" 
//
// Возвращаемое значение:
//	Адрес - Тип "Адрес" для пакета ФабрикаXDTO "WMS"
Функция Адрес(Структура, ТипАдреса)
	
	Адрес = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Адрес"));
	Адрес.Имя = Структура.Представление;
	Адрес.Индекс = Структура.Индекс;
	Адрес.Город = Структура.Город;
	Адрес.Район = Структура.Регион;
	Адрес.Страна = "Россия";
	Адрес.Тип = ТипАдреса;
	
	Возврат Адрес;
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "СписокТоваров" для пакета ФабрикаXDTO "WMS" для Прихода
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ - ДокументСсылка.ПриходныйОрдерНаТовары
//	Тип - Строка - "Приход", "Расход" 
//
// Возвращаемое значение:
//	СписокТоваров - Тип "СписокТоваров" для пакета ФабрикаXDTO "WMS"
Функция СписокТоваров(Документ, Тип)
	
	СписокТоваров = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "СписокТоваров"));
	
	Если СкладПолучательВПарах Тогда
		// Посмотри как правильно выгружать информацию с документа	
		Для каждого строка Из Документ.Товары  Цикл
			СписокТоваров.ЭлементСпискаТоваров.Добавить(ЭлементСпискаТоваров_ПарныеСклады(строка, Документ));
		КонецЦикла;
		
	Иначе
		УпаковочныеЛисты = ПолучитьДанныеУЛ(Документ);

		Для каждого строка Из УпаковочныеЛисты Цикл
			СписокТоваров.ЭлементСпискаТоваров.Добавить(ЭлементСпискаТоваров(строка, Документ));
		КонецЦикла;
	КонецЕсли;	

	Возврат СписокТоваров;
	
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "ЭлементСпискаТоваров" для пакета ФабрикаXDTO "WMS" для Прихода 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Строка - СтрокаТЧ - Строка из табличной части загружаемого документа 
//	Документ - ДокументСсылка.ПриходныйОрдерНаТовары
//
// Возвращаемое значение:
//	Элемент - Тип "ЭлементСпискаТоваров" для пакета ФабрикаXDTO "WMS"
Функция ЭлементСпискаТоваров(Строка, Документ)
	
	Элемент = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "ЭлементСпискаТоваров"));
	
	Элемент.Артикул = строка.Артикул;
	
	Элемент.Описание = строка.Номенклатура.НаименованиеПолное;
	Элемент.Наименование = строка.Номенклатура.Наименование;
	Элемент.Активность = 1;
	Элемент.УчетПартий = 1;
	Элемент.УчетНомераПартии = 1;
	Элемент.Цена = ПолучитьЦенуПО(Строка, Документ);
	
	//ЕдиницаИзмерения = строка.Упаковка; 
	ЕдиницаИзмерения = "упак";
	массив = Новый Массив;
	//массив.Добавить(Новый Структура("Единица", ЕдиницаИзмерения.Наименование));
	массив.Добавить(Новый Структура("Единица", "упак"));
	
	Элемент.Единицы = Единицы(массив);
	
	Возврат Элемент;
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "ЭлементСпискаТоваров_ПарныеСклады" для пакета ФабрикаXDTO "WMS" 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Строка - СтрокаТЧ - Строка из табличной части загружаемого документа 
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары, ДокументСсылка.ПриходныйОрдерНаТовары
//
// Возвращаемое значение:
//	Элемент - Тип "ЭлементСпискаТоваров_ПарныеСклады" для пакета ФабрикаXDTO "WMS"
Функция ЭлементСпискаТоваров_ПарныеСклады(строка, Документ)
	
	Элемент = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "ЭлементСпискаТоваров_ПарныеСклады"));
	
	Элемент.Артикул = сокрЛП(строка.Номенклатура.Артикул);
	Элемент.Описание = строка.Номенклатура.НаименованиеПолное;
	Элемент.Наименование = строка.Номенклатура.Наименование;
	Элемент.Активность = 1;
	Элемент.Цена = ПолучитьЦену(Строка, Документ); // Домнышева - временно - нет данных как читать цену
	//
	Элемент.КонтрольСерий = "INV_DETAIL";
	
	Элемент.Штрихкоды = Штрихкоды(Строка);
	
	ЕдиницаИзмерения = строка.Номенклатура.ЕдиницаИзмерения;
	массив = Новый Массив;
	массив.Добавить(Новый Структура("Единица", ЕдиницаИзмерения.Наименование));
	
	Элемент.Единицы = Единицы(массив);
	
	Возврат Элемент;
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "Штрихкоды" для пакета ФабрикаXDTO "WMS" 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Строка - СтрокаТЧ - Строка из табличной части загружаемого документа 
//
// Возвращаемое значение:
//	Штрихкоды - Тип "Штрихкоды" для пакета ФабрикаXDTO "WMS"
Функция Штрихкоды(Строка)
	
	НоменклатураКод = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
		|	И ШтрихкодыНоменклатуры.Характеристика = &Характеристика";
	
	Запрос.УстановитьПараметр("Номенклатура", Строка.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Строка.Характеристика);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		НоменклатураКод = Выборка.Штрихкод;
	КонецЕсли;
	
	Штрихкоды = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Штрихкоды"));
	Штрихкоды.Штрихкод.Добавить(Штрихкод(НоменклатураКод));
	
	Возврат Штрихкоды;
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "Штрихкод" для пакета ФабрикаXDTO "WMS" 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	НоменклатураКод - Строка - штрихкод для номенклатуры 
//
// Возвращаемое значение:
//	Штрихкод - Тип "Штрихкод" для пакета ФабрикаXDTO "WMS"
Функция Штрихкод(НоменклатураКод)

	Штрихкод = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Штрихкод"));
	
	Штрихкод.ТипШК = "EAN13";
	Штрихкод.Используется = 1;
	Штрихкод.Предназначение = 1;
	Штрихкод.ЗначениеШК = СокрЛП(НоменклатураКод);

	Возврат Штрихкод;
КонецФункции// } #wortmann)

// #wortmann { 
// Функция заполняет Тип "Единицы" для пакета ФабрикаXDTO "WMS" 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Массив - Массив - из структур наименований единиц измерений СправочникСсылка.УпаковкиЕдиницыИзмерения
//
// Возвращаемое значение:
//	Единицы - Тип "Единицы" для пакета ФабрикаXDTO "WMS"
Функция Единицы(Массив)
	
	Единицы = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Единицы"));
	Для каждого строка Из Массив Цикл
		Единицы.Единица = Единица(строка.Единица);
	КонецЦикла;
	
	Возврат Единицы;
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "Единица" для пакета ФабрикаXDTO "WMS" 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Значение - Строка - наименование единицы измерения СправочникСсылка.УпаковкиЕдиницыИзмерения
//
// Возвращаемое значение:
//	Единица - Тип "Единица" для пакета ФабрикаXDTO "WMS"
Функция Единица(Значение)

	Единица = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Единица"));
	Единица.Наименование = Значение;
	Единица.Описание = Значение;
	Единица.Коэффициент = 1;
	Единица.ЕдиницаДляОтбора = 1;
	Единица.ЕдиницаПоУмолчанию = 1;

	Возврат Единица;
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "Документы" для пакета ФабрикаXDTO "WMS" 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Тип - Строка - "Приход", "Расход"
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары, ДокументСсылка.ПриходныйОрдерНаТовары
//
// Возвращаемое значение:
//	РазделДокументы - Тип "Документы" для пакета ФабрикаXDTO "WMS"
Функция РазделДокументы(Тип, Документ)
	
	РазделДокументы = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Документы"));
	РазделДокументы.Документ = РазделДокумент(Тип, Документ);
	
	Возврат РазделДокументы;
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "Документ" для пакета ФабрикаXDTO "WMS" 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Тип - Строка - "Приход", "Расход"
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары, ДокументСсылка.ПриходныйОрдерНаТовары
//
// Возвращаемое значение:
//	РазделДокумент - Тип "Документ" для пакета ФабрикаXDTO "WMS"
Функция РазделДокумент(Тип, Документ)
	
	РазделДокумент = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Документ"));
	
	Если Тип = "Расход" Тогда
		Если ЭтоВозврат 
			//ИЛИ ЭтоКорректировка 
			Тогда
		     ТипШапки = "PO_BLOCK"; // – Временная блокировка
		ИначеЕсли ЭтоПеремещение И ЭтоОсновнойСклад Тогда	
			 ТипШапки = "INTERNAL_MOVE";
		ИначеЕсли ЭтоОсновнойСклад Или ЭтоТаможенныйСклад Тогда	
			ТипШапки = "X_DOCK_SO";
		//ИначеЕсли ЭтоСвободныйСклад тогда	
		//	ТипШапки = "FREE_WHSE_SO";
		Иначе	
			ТипШапки = "DEFAULT";
		КонецЕсли;
		
		РазделДокумент.Тип = "SO";
		Если ЭтоКорректировка Тогда
			РазделДокумент.Шапка = Шапка(ТипШапки,  Документ, Документ.Организация);
			РазделДокумент.Товары = ТоварыРасходКорректировка(Документ);
		Иначе
			РазделДокумент.Шапка = Шапка(ТипШапки,  Документ, Документ.Получатель, Истина);
			РазделДокумент.Товары = ТоварыРасход(Документ);
		КонецЕсли;	
		
	ИначеЕсли Тип = "Приход" Тогда
		//Если ЭтоПеремещение Тогда
		//КодКлиента = ПолучитьКодКлиента(Документ.Распоряжение.СкладОтправитель);
		//КодКонтрагента = ПолучитьКодКлиента(Документ.Распоряжение.СкладПолучатель);
		//КонецЕсли;
		Если ЭтоПоступление Тогда
			ТипШапки = "DEFAULT";
		Иначе
			Если ЭтоПеремещение И ЭтоОсновнойСклад Тогда	
			 ТипШапки = "INTERNAL_MOVE";	
			ИначеЕсли СкладПолучательВПарах Тогда
				ТипШапки = "EL";
			ИначеЕсли ЭтоОсновнойСклад Тогда	
				ТипШапки = "X_DOCK_PO";
			//ИначеЕсли ЭтоСвободныйСклад Тогда	
			//	ТипШапки = "FREE_WHSE_PO";
			Иначе	
				ТипШапки = "DEFAULT";
			КонецЕсли;
		КонецЕсли;
		
		РазделДокумент.Тип = "PO";
		РазделДокумент.Шапка = Шапка(ТипШапки, Документ, Документ.Отправитель);
		РазделДокумент.Товары = ТоварыПриход(Документ);
	КонецЕсли;
	
	Возврат РазделДокумент;
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "Шапка" для пакета ФабрикаXDTO "WMS" 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Тип - Строка - Тип шапки определяется в процедуре выше
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары, ДокументСсылка.ПриходныйОрдерНаТовары
//	Партнер - ОпределяемыйТип.ОтправительПолучательТоваров
//	НомерИнвойса - Булево
//
// Возвращаемое значение:
//	Шапка - Тип "Шапка" для пакета ФабрикаXDTO "WMS"
Функция Шапка(Тип, Документ, Партнер, НомерИнвойса = Ложь)
		
	СвязанныйДокумент = ПолучитьСвязанныйДокументРО(Документ);
	
	Шапка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Шапка"));
	
	Шапка.Статус = "NEW";
	Шапка.Тип = Тип;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда 
		Шапка.Номер = НомерЗаявки(Документ);
		Шапка.ДатаОкончания = формат(Документ.ДатаОтгрузки, "ДФ='ггг-ММ-д hh:mm:ss'");
		Шапка.ДатаСоздания = формат(Документ.Дата, "ДФ='ггг-ММ-д hh:mm:ss'");
		Шапка.Получатель = КодКонтрагента;
		Шапка.Контрагент = Партнер.НаименованиеПолное;
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаНазначенияТоваров") Тогда
		Шапка.Номер = КодКлиента + Документ.Номер + "-BL";
		ДваДня = 2*24*3600;
		Шапка.ДатаОкончания = Формат(Документ.Дата + ДваДня, "ДФ='ггг-ММ-д hh:mm:ss'");
		Шапка.ДатаСоздания = формат(Документ.Дата, "ДФ='ггг-ММ-д hh:mm:ss'");
		//Шапка.Получатель = КодКонтрагента;
		Шапка.Контрагент = Организация.Наименование;		
	Иначе
		Шапка.Номер = НомерЗаявки(Документ.Распоряжение);
		Шапка.ДатаОкончания = Формат(ЗаполнитьДатуОтгрузки(Документ.Распоряжение.Дата), "ДФ='ггг-ММ-д hh:mm:ss'");
		Шапка.ДатаСоздания = формат(Документ.Распоряжение.Дата, "ДФ='ггг-ММ-д hh:mm:ss'"); 
		Шапка.Получатель = 1;
	КонецЕсли;
	
	Шапка.Отправитель = КодКлиента;	

	Если ЭтоРеализация Тогда
		КомментарииДляРеализации = Новый Структура; 
		//Комментарий
		КомментарииДляРеализации.Вставить("Комментарий",Документ.Комментарий);
		//ИНН 
		//ИНН = НайтиИннПоПартнеру(Партнер);
		ИНН = СвязанныйДокумент.Контрагент.ИНН;
		КомментарииДляРеализации.Вставить("ИНН", ИНН);
		// Контактное лицо контрагента для транспортной компании
		ИнформацияКонтактноеЛицо = СобратьИнформациюОКонтактномЛице(СвязанныйДокумент);
		//ИнформацияКонтактноеЛицо = СобратьИнформациюОКонтактномЛице(Партнер); 
		КомментарииДляРеализации.Вставить("КонтактноеЛицо", ИнформацияКонтактноеЛицо);

		ВесНакладной = ""; // пока не заполняем	
		КомментарииДляРеализации.Вставить("Вес", ВесНакладной);
		Шапка.Комментарии = КомментарииРеализации(КомментарииДляРеализации);
	Иначе
		Шапка.Комментарии = Комментарии(Документ.Комментарий);
	КонецЕсли;
	
	Если Не ЭтоКорректировка Тогда
		СтруктураАдреса = ПолучитьАдресДоставки(Документ);
		Если ЭтоРеализация Тогда
			Если СтруктураАдреса.ТКНаименование <> Неопределено Тогда
				Шапка.reference2 = СтруктураАдреса.ТКНаименование;
				Шапка.reference5 = СтруктураАдреса.Представление;
			КонецЕсли; 
		КонецЕсли;
		
		Если ЭтоПеремещение Тогда
			Если СтруктураАдреса.ТКНаименование <> Неопределено Тогда
				Шапка.reference2 = СтруктураАдреса.ТКНаименование;
				Шапка.Получатель = СтруктураАдреса.НомерАдреса;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если НомерИнвойса Тогда
		//Шапка.НомерИнвойса = ПолучитьНомерИнвойса();
		Шапка.reference3 = КодКлиента + "-" + КодКонтрагента;
	КонецЕсли;
	
	Возврат Шапка;
КонецФункции// } #wortmann

// #wortmann { 
// Функция собирает информацию о контактном лице Партнера 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Распоряжение - ДокументСсылка.* - документ распоряжение из ТЧ Товары РО
//
// Возвращаемое значение:
//	ИнформацияКонтактноеЛицо - Строка из реквизитов Наименование(Контактного лица) и Телефонов
Функция СобратьИнформациюОКонтактномЛице(Распоряжение)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	гф_АдресаДоставки.КонтактноеЛицо КАК КонтактноеЛицо
		|ИЗ
		|	Справочник.гф_АдресаДоставки КАК гф_АдресаДоставки
		|ГДЕ
		|	гф_АдресаДоставки.Ссылка = &АдресДоставки
		|";
	
	Запрос.УстановитьПараметр("АдресДоставки", Распоряжение.гф_АдресДоставки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Выборка.Следующий();
		
		КонтактноеЛицо = Выборка.КонтактноеЛицо;
	Иначе
		КонтактноеЛицо = Распоряжение.КонтактноеЛицо;
	КонецЕсли;
	
    Запрос = Новый Запрос;
	Запрос.Текст = 
		"
		|ВЫБРАТЬ
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефона КАК НомерТелефона
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
		|ГДЕ
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка = &Ссылка";
    Запрос.УстановитьПараметр("Ссылка", КонтактноеЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Записи = РезультатЗапроса.Выбрать();
	Телефоны = "";
	Пока Записи.Следующий() Цикл
		Телефоны = Телефоны + Записи.НомерТелефона + ", ";
	КонецЦикла;
    ИнформацияКонтактноеЛицо = КонтактноеЛицо.Наименование + " " + Телефоны;
	Возврат ИнформацияКонтактноеЛицо;
	
КонецФункции// } #wortmann

// #wortmann { 
// Функция возвращает структуру с данными из справочника гф_АдресаДоставки 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары, ДокументСсылка.ПриходныйОрдерНаТовары
//
// Возвращаемое значение:
//	СтруктураАдреса - Структура с данными из справочника гф_АдресаДоставки
Функция ПолучитьАдресДоставки(Документ)
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
         СвязанныйДокумент = ПолучитьСвязанныйДокументРО(Документ);
	     АдресДоставки = СвязанныйДокумент.гф_АдресДоставки;
	Иначе
		СвязанныйДокумент = Документ.Распоряжение;
	    АдресДоставки = СвязанныйДокумент.АдресДоставки;
		Возврат АдресДоставки;
    КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1 
		|	гф_АдресаДоставки.Представление КАК Представление,
		|	гф_АдресаДоставки.НомерАдреса КАК НомерАдреса,
		|	гф_АдресаДоставки.ТК.Наименование КАК ТКНаименование
		|ИЗ
		|	Справочник.гф_АдресаДоставки КАК гф_АдресаДоставки
		|ГДЕ
		|	гф_АдресаДоставки.Ссылка = &Адрес";
	
	Запрос.УстановитьПараметр("Адрес", АдресДоставки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаАдресов = РезультатЗапроса.Выгрузить();
	
	СтруктураАдреса = Новый Структура;
	
	Для каждого Колонка Из ТаблицаАдресов.Колонки Цикл
		СтруктураАдреса.Вставить(Колонка.Имя);
	КонецЦикла;
	Если ТаблицаАдресов.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(СтруктураАдреса, ТаблицаАдресов[0]);
	КонецЕсли;

	Возврат СтруктураАдреса;
	
КонецФункции// } #wortmann

// #wortmann { 
// Функция возвращает значение ИНН из спр Контрагенты 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Партнер - ОпределяемыйТип.ОтправительПолучательТоваров
//
// Возвращаемое значение:
//	ИНН - Строка - значение ИНН из спр Контрагенты
Функция НайтиИннПоПартнеру(Партнер)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.ИНН КАК ИНН
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Наименование = &Наименование
		|	И Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)";
	
	Запрос.УстановитьПараметр("Наименование", Партнер.Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка.Следующий();
		Возврат Выборка.ИНН;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "Товары" для пакета ФабрикаXDTO "WMS" 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары - загружаемый документ
//
// Возвращаемое значение:
//	Товары - Тип "Товары" для пакета ФабрикаXDTO "WMS"
Функция ТоварыРасход(Документ)
	
	Товары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Товары"));
	Распоряжение = ПолучитьСвязанныйДокументРО(Документ);
	
	Если СкладОтправительВПарах Тогда 	
		
		запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Товары.Номенклатура.Артикул КАК Артикул,
			|	Товары.Характеристика КАК Характеристика,
			|	Товары.Количество КАК Количество,
			|	Товары.Номенклатура КАК Номенклатура,
			|	Товары.НомерСтроки КАК НомерСтроки,
			|	Товары.Распоряжение КАК Распоряжение,
			|	ШтрихкодыУпаковок.ШтрихкодУпаковки КАК КМ
			|ИЗ
			|	Документ.РасходныйОрдерНаТовары.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК Товары
			|		ПО (Товары.Ссылка = ШтрихкодыУпаковок.Ссылка)
			|			И (Товары.Номенклатура = ШтрихкодыУпаковок.ШтрихкодУпаковки.Номенклатура)
			|			И (Товары.Характеристика = ШтрихкодыУпаковок.ШтрихкодУпаковки.Характеристика)
			|ГДЕ
			|	Товары.Ссылка = &Документ");
			
		Запрос.УстановитьПараметр("Документ", Документ);
		
		выборка = запрос.Выполнить().Выгрузить();
		Артикулы = Выборка.Скопировать();
		
		НПП = 0;
		Артикулы.Свернуть("Артикул, Характеристика", "Количество");
		Для каждого строка Из Артикулы Цикл
			НПП = НПП + 1;			
			Товары.Строка.Добавить(СтрокаТовара2(строка, НПП, Истина, выборка));
		КонецЦикла;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОтгружаемыеТовары.УпаковочныйЛист КАК УпаковочныйЛист,
			|	ОтгружаемыеТовары.Количество КАК Количество,
			|	АВТОНОМЕРЗАПИСИ() КАК НомерСтроки
			|ПОМЕСТИТЬ УЛ
			|ИЗ
			|	Документ.РасходныйОрдерНаТовары.ОтгружаемыеТовары КАК ОтгружаемыеТовары
			|ГДЕ
			|	ОтгружаемыеТовары.Ссылка = &Ссылка
			|	И ОтгружаемыеТовары.ЭтоУпаковочныйЛист = ИСТИНА
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	УЛ.УпаковочныйЛист КАК УпаковочныйЛист,
			|	УЛ.Количество КАК Количество,
			|	УЛ.УпаковочныйЛист.гф_Комплектация.Наименование КАК Артикул, 
			|	УЛ.УпаковочныйЛист.гф_Комплектация КАК ВариантКомплектации,
			|	УЛ.УпаковочныйЛист.Код КАК СерийныйНомер,
			|	УпаковочныйЛистТовары.Номенклатура КАК Номенклатура,
			|	УЛ.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	УЛ КАК УЛ
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
			|		ПО УЛ.УпаковочныйЛист = УпаковочныйЛистТовары.Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Документ);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выгрузить();
		
		Для каждого строка Из Выборка Цикл
			Товары.Строка.Добавить(СтрокаТовара(строка, Документ));
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Товары;
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "Товары" для пакета ФабрикаXDTO "WMS" 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары - загружаемый документ
//
// Возвращаемое значение:
//	Товары - Тип "Товары" для пакета ФабрикаXDTO "WMS"
Функция ТоварыРасходКорректировка(Документ)
	
	Товары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Товары"));	
	ДокументЗаявка = ПолучитьЗаявкуПоКорректировке(Документ);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КорректировкаНазначенияТоваровТовары.Номенклатура КАК Номенклатура,
		|	КорректировкаНазначенияТоваровТовары.Номенклатура.Артикул КАК Артикул,
		|	КорректировкаНазначенияТоваровТовары.Характеристика КАК Характеристика,
		|	КорректировкаНазначенияТоваровТовары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	КорректировкаНазначенияТоваровТовары.ИсходноеНазначение КАК Назначение,
		|	КорректировкаНазначенияТоваровТовары.гф_IDкороба КАК гф_IDкороба
		|ПОМЕСТИТЬ ТоварыКорректировки
		|ИЗ
		|	Документ.КорректировкаНазначенияТоваров.Товары КАК КорректировкаНазначенияТоваровТовары
		|ГДЕ
		|	КорректировкаНазначенияТоваровТовары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.Номенклатура КАК Номенклатура,
		|	ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.Характеристика КАК Характеристика,
		|	ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.гф_ПринятыеКМ.ЗначениеШтрихкода КАК ЗначениеШтрихкода
		|ПОМЕСТИТЬ ВсеШтрихкоды
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары
		|ГДЕ
		|	ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.гф_ЗаказатьКМ = ЛОЖЬ
		|	И ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.Ссылка = &ДокументЗаявка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ШтрихкодыУпаковокТоваров.Номенклатура,
		|	ШтрихкодыУпаковокТоваров.Характеристика,
		|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода
		|ИЗ
		|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|ГДЕ
		|	ШтрихкодыУпаковокТоваров.гф_ДокументОснование = &ДокументЗаявка
		|	И ШтрихкодыУпаковокТоваров.ТипШтрихкода = &ТипШтрихкода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКорректировки.Номенклатура КАК Номенклатура,
		|	ТоварыКорректировки.Артикул КАК Артикул,
		|	ТоварыКорректировки.Характеристика КАК Характеристика,
		|	ТоварыКорректировки.КоличествоУпаковок КАК Количество,
		|	ТоварыКорректировки.Назначение.Наименование КАК Назначение,
		//|	ТоварыКорректировки.гф_IDкороба КАК гф_IDкороба,
		|	ВсеШтрихкоды.ЗначениеШтрихкода КАК КМ
		|ИЗ
		|	ТоварыКорректировки КАК ТоварыКорректировки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВсеШтрихкоды КАК ВсеШтрихкоды
		|		ПО ТоварыКорректировки.Номенклатура = ВсеШтрихкоды.Номенклатура
		|			И ТоварыКорректировки.Характеристика = ВсеШтрихкоды.Характеристика";
	
	Запрос.УстановитьПараметр("ДокументЗаявка", ДокументЗаявка);
	Запрос.УстановитьПараметр("Ссылка", Документ);
	Запрос.УстановитьПараметр("ТипШтрихкода", Перечисления.ТипыШтрихкодов.GS1_DataMatrix);
	
	Выборка = запрос.Выполнить().Выгрузить();
	Артикулы = Выборка.Скопировать();
	
	НПП = 0;
	Артикулы.Свернуть("Артикул, Характеристика, Назначение", "Количество");
	Для каждого строка Из Артикулы Цикл
		НПП = НПП + 1;			
		Товары.Строка.Добавить(СтрокаТовара2(строка, НПП, Истина, Выборка));
	КонецЦикла;
	
	Возврат Товары;
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "СтрокаТовара" для пакета ФабрикаXDTO "WMS" 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	строка - СтрокаТЗ - строка с элементом номенклатуры и его данными 
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары - загружаемый документ
//
// Возвращаемое значение:
//	СтрокаТовара - Тип "СтрокаТовара" для пакета ФабрикаXDTO "WMS"
Функция СтрокаТовара(строка, Документ)
	
	СтрокаТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "СтрокаТовара"));
	Если ЭтоПеремещение И СкладМаркетплейса Тогда
		СтрокаТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "СтрокаТовара3"));
	КонецЕсли;
	СтрокаТовара.Код = строка.Артикул;
	СтрокаТовара.НомерСтроки = строка.НомерСтроки;
	СтрокаТовара.Количество = строка.Количество;
	СтрокаТовара.Цена = ПолучитьЦенуSO(Документ, Строка);
	
	СтрокаТовара.СерийныйНомер = строка.СерийныйНомер;
	Если ЭтоПеремещение ИЛИ ЭтоРеализация Тогда
		СтрокаТовара.Комментарии = Комментарии(строка.Артикул + "|" + строка.Номенклатура);
	КонецЕсли;
	
	Возврат СтрокаТовара;
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "СтрокаТовара2" или "СтрокаТовара4" для пакета ФабрикаXDTO "WMS"
// в зависимости от того является ли Склад маркетплейсом и значения ЭтоПеремещение
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	строка - СтрокаТЗ - строка с элементом номенклатуры и его данными
//	НПП - число - номер обрабатываемой строки
//	СерийныйНомер - Булево
//	выборка - результат запроса по ТЧ документа
//
// Возвращаемое значение:
//	СтрокаТовара - Тип "СтрокаТовара2" или "СтрокаТовара4" для пакета ФабрикаXDTO "WMS"
Функция СтрокаТовара2(строка, НПП, СерийныйНомер, выборка)
	
	Если ЭтоПеремещение И СкладМаркетплейса Тогда
		СтрокаТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "СтрокаТовара4"));
		//СтрокаТовара.Сумма = строка.Сумма;
	// #wortmann { 
	// Добавили новый раздел СтрокаТовара5 для Корректировки
	// Галфинд_Домнышева 2023/07/28
	ИначеЕсли ЭтоКорректировка Тогда
		СтрокаТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "СтрокаТовара5")); 
		СтрокаТовара.Блокировка = строка.Назначение;
	// } #wortmann	
	Иначе
		СтрокаТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "СтрокаТовара2"));
	КонецЕсли;
	
	Артикул = СокрЛП(строка.Артикул);
	
	СтрокаТовара.НомерСтроки = НПП;
	СтрокаТовара.Код = Артикул + "/" + строка.Характеристика;
	СтрокаТовара.Количество = строка.Количество;
	
	СерийныеНомера = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "СерийныеНомера"));
	СтрокаТовара.СерийныеНомера = СерийныеНомера;
	
	нашли = выборка.НайтиСтроки(Новый Структура("Артикул", Артикул));
	ПреобразоватьКМ(нашли);
	Для каждого строкаКМ Из нашли Цикл
		СерийныеНомера.СерийныйНомер.Добавить(сокрЛП(строкаКМ.КМ));
	КонецЦикла;
	
	Возврат СтрокаТовара;
КонецФункции// } #wortmann

// #wortmann { 
// Преобразований значений КМ в Массиве полученных строк
// Галфинд_Домнышева 2023/07/23
//
// Параметры:
//	МассивСтрок - Массив - массив найденных КМ
Процедура ПреобразоватьКМ(МассивСтрок)
	
	Для каждого Строка Из МассивСтрок Цикл
		
		Если   Лев(Строка.КМ, 1) = "("  Тогда
			НовоеЗначение = Сред(Строка.КМ, 2, 2) + Сред(Строка.КМ, 5, 14) + Сред(Строка.КМ, 20, 2) + Сред(Строка.КМ, 23);
			Строка.КМ = НовоеЗначение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры// } #wortmann

// #wortmann { 
// Функция заполняет Тип "Товары" для пакета ФабрикаXDTO "WMS" для Прихода
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ - ДокументСсылка.ПриходныйОрдерНаТовары - загружаемый документ
//
// Возвращаемое значение:
//	Товары - Тип "Товары"  для пакета ФабрикаXDTO "WMS"
Функция ТоварыПриход(Документ)
	
	Если СкладПолучательВПарах Тогда
		//КодОрганизацииВместоАртикула = КодОрганизацииВместоАртикула(Документ.Склад);
		
		Товары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Товары"));
		НПП = 1; 
		Выборка = ПолучитьАртикулыИзДокумента(Документ);
		Артикулы = Выборка.Скопировать();
		
		Артикулы.Свернуть("Артикул, Характеристика, УпаковочныйЛист, Назначение", "Количество");

		Для каждого строка Из Артикулы Цикл
			Товары.Строка.Добавить(СтрокаТовараПриход_ПарныеСклады(строка, НПП, Выборка));
			НПП = НПП + 1;
		КонецЦикла;
	Иначе
		Товары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Товары"));
		УпаковочныеЛисты = ПолучитьДанныеУЛ(Документ);
		Для каждого строка Из УпаковочныеЛисты Цикл
			Товары.Строка.Добавить(СтрокаТовараПриход(строка, Документ));
		КонецЦикла;
	КонецЕсли;
	
	Возврат Товары;
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "СтрокаТовараПриход" для пакета ФабрикаXDTO "WMS" для Прихода
// для коробного склада
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	строка - строкаТЧ - ДокументСсылка.ПриходныйОрдерНаТовары.Товары
//	Документ - ДокументСсылка.ПриходныйОрдерНаТовары - загружаемый документ
//
// Возвращаемое значение:
//	СтрокаТовара - Тип "СтрокаТовараПриход"  для пакета ФабрикаXDTO "WMS"
Функция СтрокаТовараПриход(строка, Документ)
	
	СтрокаТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "СтрокаТовараПриход"));
	
	//Если не ЗначениеЗаполнено(строка.СерияНоменклатуры) или строка.СерияНоменклатуры.СерийныйНомер = "" Тогда
	
	СтрокаТовара.НомерСтроки = строка.НомерСтроки;
	СтрокаТовара.Код = строка.Артикул;   // штрихкод короба
	СтрокаТовара.Количество = строка.Количество;
	СтрокаТовара.Атрибуты = Атрибуты(строка.УпаковочныйЛист);
	СтрокаТовара.СерийныйНомер = строка.УпаковочныйЛист.Код;
	
	СтрокаТовара.Комментарии = Комментарии(строка.Артикул + "|" + ПолучитьЦенуПО(строка, Документ) +  "|" + строка.Номенклатура);
	
	Возврат СтрокаТовара;
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "Атрибуты" для пакета ФабрикаXDTO "WMS" для Прихода
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	УпаковочныйЛист - строкаТЧ - ДокументСсылка.ПриходныйОрдерНаТовары.Товары
//
// Возвращаемое значение:
//	Атрибуты - Тип "Атрибуты"  для пакета ФабрикаXDTO "WMS"
Функция Атрибуты(УпаковочныйЛист)

	Атрибуты = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Атрибуты"));
	
	СтруктураАтрибутов = ПолучитьАтрибутыНоменклатуры(УпаковочныйЛист);

	Для Каждого Элемент Из СтруктураАтрибутов Цикл 

		Атрибуты.Атрибут.Добавить(Атрибут(Элемент.Ключ, Элемент.Значение));
		// формат(Элемент.Значение/1000, "ЧРД=.") - нужен ли формат
	КонецЦикла;
	
	Возврат Атрибуты;
КонецФункции// } #wortmann)

// #wortmann { 
// Функция заполняет Тип "Атрибут" для пакета ФабрикаXDTO "WMS" для Прихода
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Имя - строка - Наименование дополнительного сведения о номенклатуре
//	Значение - строка - значение указанного имени
//
// Возвращаемое значение:
//	Атрибут - Тип "Атрибут"  для пакета ФабрикаXDTO "WMS"
Функция Атрибут(Имя, Значение)
	
	Атрибут = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Атрибут"));
	Атрибут.Имя = Имя;
	Атрибут.Значение = Значение;
	
	Возврат Атрибут;
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "СтрокаТовараПриход_ПарныеСклады" для пакета ФабрикаXDTO "WMS" для Прихода
// для парного склада
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	строка - строкаТЧ - ДокументСсылка.ПриходныйОрдерНаТовары.Товары
// 	НПП - число - номер обрабатываемой строки
//	выборка - результат запроса по ТЧ документа
//
// Возвращаемое значение:
//	СтрокаТовара - Тип "СтрокаТовараПриход_ПарныеСклады"  для пакета ФабрикаXDTO "WMS"
Функция СтрокаТовараПриход_ПарныеСклады(строка, НПП, выборка)
	
	СтрокаТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "СтрокаТовараПриход_ПарныеСклады"));
	
	//ДокументРезерва = строка.ДокументРезерва;
	Артикул = СокрЛП(строка.Артикул);
	
	СтрокаТовара.НомерСтроки = НПП;
	СтрокаТовара.Код = Артикул + "/" + строка.Характеристика;
	СтрокаТовара.Количество = строка.Количество;
	СтрокаТовара.НомерСерии = строка.УпаковочныйЛист.Код;
	Если ЭтоВозврат Тогда
    СтрокаТовара.Блокировка = строка.Назначение;
	КонецЕсли;
	
	СерийныеНомера = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "СерийныеНомера"));
	СтрокаТовара.СерийныеНомера = СерийныеНомера;
	
	нашли = выборка.НайтиСтроки(Новый Структура("Артикул", Артикул));
	ПреобразоватьКМ(нашли);
	Для каждого строкаКМ Из нашли Цикл
		СерийныеНомера.СерийныйНомер.Добавить(сокрЛП(строкаКМ.КМ));
	КонецЦикла;
	
	Возврат СтрокаТовара;
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "Комментарии" для пакета ФабрикаXDTO "WMS"
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Значение - строка - текст комментария
//
// Возвращаемое значение:
//	Комментарии - Тип "Комментарии"  для пакета ФабрикаXDTO "WMS"
Функция Комментарии(Значение)
	Комментарии = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Комментарии"));
	Комментарии.Комментарий.Добавить(Комментарий(Значение));
	Возврат Комментарии;
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "Комментарий" для пакета ФабрикаXDTO "WMS"
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Значение - строка - текст комментария
//	Последовательность - Число
//
// Возвращаемое значение:
//	Комментарий - Тип "Комментарий"  для пакета ФабрикаXDTO "WMS"
Функция Комментарий(Значение, Последовательность = 1)
	
	Комментарий = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Комментарий"));
	Комментарий.Тип = "DISPLAY_WEB";
	Комментарий.Последовательность = Последовательность;
	Комментарий.Значение = Значение;
	
	Возврат Комментарий;
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "Комментарии" для пакета ФабрикаXDTO "WMS"
// для случая когда документом Распоряжением является документ Реализации
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	КомментарииДляРеализации - Структура - из значений для комментария
//
// Возвращаемое значение:                                                                    
//	Комментарии - Тип "Комментарии"  для пакета ФабрикаXDTO "WMS"
Функция КомментарииРеализации(КомментарииДляРеализации)
	
	Комментарии = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Комментарии"));
	Комментарии.Комментарий.Добавить(Комментарий(КомментарииДляРеализации.Комментарий, 1));
	Комментарии.Комментарий.Добавить(Комментарий(КомментарииДляРеализации.ИНН, 2));
	Комментарии.Комментарий.Добавить(Комментарий(КомментарииДляРеализации.КонтактноеЛицо, 3));
	Комментарии.Комментарий.Добавить(Комментарий(КомментарииДляРеализации.Вес, 4));
	
	Возврат Комментарии;
	
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "ЭлементСпискаТоваров" для пакета ФабрикаXDTO "WMS" 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Строка - СтрокаТЧ - Строка из табличной части загружаемого документа 
//
// Возвращаемое значение:
//	Артикул - строка
Функция ПолучитьАртикулПО(строка)
	
	Артикул = сокрЛП(строка.Номенклатура.Артикул);
	
	Возврат Артикул;
КонецФункции// } #wortmann

// #wortmann { 
// Функция находит цену товара для Приходного Ордера 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Строка - СтрокаТЧ - Строка из табличной части загружаемого документа 
//	Документ - ДокументСсылка.ПриходныйОрдерНаТовары
//
// Возвращаемое значение:
//	Цена - Число
Функция ПолучитьЦенуПО(Строка, Документ)
	
	Распоряжение = Документ.Распоряжение;
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("IDКороба", Строка.УпаковочныйЛист);
	
	Если ЭтоПоступление Тогда
		МассивСтрокР = Распоряжение.гф_ПродукцияВКоробах.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрокР.Количество() > 0 Тогда
			Цена = формат(МассивСтрокР[0].СтоимостьКороба, "ЧДЦ=2; ЧГ=0");
		Иначе
			Цена = 0;
			Сообщение = "В ПТУ не задана цена для " + Строка.УпаковочныйЛист;
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, Сообщение);
			ДобавитьСтрокуВТекстыОшибки(Сообщение, Истина, Документ.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ТекущаяДатаСеанса(), "ДЛФ=T") + ". " + Сообщение);		
		КонецЕсли;
	ИначеЕсли ЭтоПеремещение Тогда
		Цена = ПолучитьЦену(Строка, Документ);
	КонецЕсли;
	
	Возврат Цена;
	
КонецФункции// } #wortmann

// #wortmann { 
// Процедура создает запись XML для отправки по заполненному Пакету 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Пакет - Тип "Пакет" для пакета ФабрикаXDTO "WMS"
//	ИмяФайлаБезПути - строка
//	ИмяФайла - строка
//	НомерСообщения - строка
//	ВидДанных - Перечисления.гф_ВидыДанныхДляВыгрузки.Документ
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары, ДокументСсылка.ПриходныйОрдерНаТовары
//	Настройки - Структура - Настройки для FTPСоединения
Процедура ЗаписатьОтправитьПакет(Пакет, ИмяФайлаБезПути, ИмяФайла, НомерСообщения, ВидДанных, Документ, Настройки)
	
	Если Пакет = Неопределено Тогда
		ДобавитьСтрокуВТекстыОшибки("Файл не записан" + ИмяФайла, Истина, ИмяФайлаБезПути);
		Возврат;
	КонецЕсли;
	
	Попытка
		Отказ = Ложь;
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ИмяФайла, "UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Пакет, "instock");
		ЗаписьXML.Закрыть();
		ОбработатьФайл(ИмяФайла);
		
			ДобавитьСтрокуВТекстыОшибки("Записан файл" + ИмяФайла, Ложь, ИмяФайлаБезПути);
			ОтправитьФайл(ИмяФайла, Настройки, Отказ, Соединение);
			
			Если Не Отказ Тогда
				Запись = РегистрыСведений.гф_ДанныеВыгрузки.СоздатьМенеджерЗаписи();
				Запись.Период = ТекущаяДатаСеанса();
				Запись.НомерСообщения = НомерСообщения;
				Запись.ВидДанных = ВидДанных;
				Запись.Документ = Документ;
				Запись.Состояние = Перечисления.гф_СтатусыВыгрузкиДанных.Отправлено;
				Запись.ИмяФайла = ИмяФайлаБезПути;
				Запись.Записать();
			КонецЕсли;
	
	Исключение
		Сообщение = "Не удалось записать файл " + ИмяФайла + " " + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Предупреждение", УровеньЖурналаРегистрации.Предупреждение, 
								ЭтотОбъект, ЭтотОбъект, Сообщение);
		ДобавитьСтрокуВТекстыОшибки(Сообщение, Истина, ИмяФайлаБезПути);	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ТекущаяДатаСеанса(), "ДЛФ=T") + ". " + Сообщение);

	КонецПопытки;
	
	Если ТекстыОшибок.Количество() > 0 Тогда
		ЗаписатьОшибку(ТекстыОшибок);
	КонецЕсли;
   	ТекстыОшибок.Очистить();
	
КонецПроцедуры// } #wortmann 

// #wortmann { 
// Отправляет файл на выгрузку 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	ИмяФайла - строка
//	Настройки - Структура - Настройки для FTPСоединения
//	Отказ - параметр системы
//	Соединение -  FTPСоединение,  - Неопределено
//	НовоеРасширение - строка
Процедура ОтправитьФайл(ИмяФайла, Настройки, Отказ, Соединение = Неопределено, НовоеРасширение = "") Экспорт
						
	Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
		ДобавитьСтрокуВТекстыОшибки("Не определен файл выгрузки", Истина, ИмяФайла.ПолноеИмя);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Настройки = Неопределено Тогда
		ДобавитьСтрокуВТекстыОшибки("Не определены настройки ftp-соединения", Истина, ИмяФайла.ПолноеИмя);
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	// пока используем только ftp
	ВыгрузитьНаFTP(ИмяФайла, Настройки, Отказ, Соединение, Истина, НовоеРасширение);
	
КонецПроцедуры// } #wortmann 

// #wortmann { 
// Процедура получает соединение и отправляет файл 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	ФайлДляВыгрузки - строка
//	НастройкиFTPСоединения - Структура - Настройки для FTPСоединения
//	Отказ - параметр системы
//	Соединение -  FTPСоединение,  - Неопределено
//	ПомещатьСразуВАрхив - Булево
//	НовоеРасширение - строка
Процедура ВыгрузитьНаFTP(ФайлДляВыгрузки, НастройкиFTPСоединения, Отказ, Соединение = Неопределено, 
						ПомещатьСразуВАрхив = Истина, НовоеРасширение = "") Экспорт

	Если Соединение = Неопределено Тогда
		Соединение = _омОбщегоНазначенияВызовСервера.гф_ПолучитьСоединение(НастройкиFTPСоединения);
	КонецЕсли;	
	
	Если Соединение = Неопределено Тогда
		ДобавитьСтрокуВТекстыОшибки("Соединение не установлено, проверьте настройки", Истина, ФайлДляВыгрузки.ПолноеИмя);
		Возврат;
	КонецЕсли;	
		
	Файл = Новый Файл(ФайлДляВыгрузки);
	Если Не Файл.ЭтоФайл() Тогда
		ДобавитьСтрокуВТекстыОшибки("Ошибка в чтении временного файла.", Истина, ФайлДляВыгрузки.ПолноеИмя);
		Возврат;
	КонецЕсли;
	СообщениеОбОшибке = "";
	СтрокаПутьНаFTP = ПолучитьПуть();
	ТекКаталог = СтрЗаменить(СтрЗаменить(СтрокаПутьНаFTP, "\", "/"), "//", "/");	
	Если Прав(ТекКаталог, 1) <> "/" Тогда
		ТекКаталог = ТекКаталог + "/";
	КонецЕсли;
	
	Попытка                                                                                               
		СообщениеОбОшибке = "Попытка установить каталог " + ТекКаталог + " - ";
		Соединение.УстановитьТекущийКаталог(ТекКаталог);
		ДобавитьСтрокуВТекстыОшибки("Установлен каталог: " + ТекКаталог, Ложь, Файл.ПолноеИмя);
		
		СообщениеОбОшибке = "Попытка записи файла " + Файл.ПолноеИмя + " - ";
		//Соединение.Записать(Файл.ПолноеИмя, ТекКаталог + Файл.Имя);
		Если ПомещатьСразуВАрхив Тогда
			// узнать про архивную папку...
			ИмяАрхивнойПапки = _омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначение("гф_ПапкаДляВыгрузкиНаСервере") 
								+ "Archive";
			//////////
			СоздатьКаталог(ИмяАрхивнойПапки);
			
			КаталогАрхив = Новый Файл(ИмяАрхивнойПапки);
			Если Не КаталогАрхив.Существует() Тогда
				ДобавитьСтрокуВТекстыОшибки("Каталог для архивирования файлов задан неверно или не существует...",
											Истина, Файл.ПолноеИмя);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			КопироватьФайл(Файл.ПолноеИмя, ИмяАрхивнойПапки + "\" + Файл.Имя);
			Соединение.Записать(ИмяАрхивнойПапки + "\" + Файл.Имя, Файл.Имя);
			
		Иначе
			Соединение.Записать(Файл.ПолноеИмя, Файл.Имя);
		КонецЕсли;
		
		// Проверим записан ли файл на ftp
		Если Соединение.НайтиФайлы(ТекКаталог + Файл.Имя).Количество() > 0 Тогда
			Если Не ПустаяСтрока(НовоеРасширение) Тогда
				// Для пердотвращения немедленной обработки переданного файла внешними роботами, файл может передаваться
				// с фиктивным расширением
				// После того, как убедились, что файл передан удачно, если задан параметр НовоеРасширение - перименовываем файл.
				Соединение.Переместить(ТекКаталог + Файл.Имя, ТекКаталог + Файл.ИмяБезРасширения + "." + НовоеРасширение);
				Соединение.Удалить(ТекКаталог, Файл.Имя);
			КонецЕсли;
			
			ДобавитьСтрокуВТекстыОшибки("Файл успешно записан: " + ТекКаталог + Файл.Имя, Ложь, Файл.ПолноеИмя);
			
			СообщениеОбОшибке = "Попытка удаления файла " + Файл.ПолноеИмя + " - ";
			УдалитьФайлы(Файл.ПолноеИмя);
			
			// проверим удален ли с диска файл
			Если НайтиФайлы(Файл.ПолноеИмя).Количество() <> 0 Тогда
				ДобавитьСтрокуВТекстыОшибки("Ошибка удаления файла " + Файл.ПолноеИмя + " с диска! ", Истина, Файл.ПолноеИмя);
			КонецЕсли;
			
		Иначе // файл не записан
			ДобавитьСтрокуВТекстыОшибки("Файл не записан: " + ТекКаталог + Файл.Имя, Истина, Файл.ПолноеИмя);	
		КонецЕсли;	
		
	Исключение
		ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке + ОписаниеОшибки(), Истина, Файл.ПолноеИмя);
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
КонецПроцедуры// } #wortmann 

// #wortmann { 
// Функция подбирает нужную папку для выгрузки по организации 
// Галфинд_Домнышева 2023/31/05
//
// Возвращаемое значение:
//	Структура - путь к папке по текущей организации
Функция ПолучитьПуть() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	гф_КаталогиОбработкиФайловXML.ВыгрузкаВWMS КАК ВыгрузкаВWMS
		|ИЗ
		|	Справочник.гф_КаталогиОбработкиФайловXML КАК гф_КаталогиОбработкиФайловXML
		|ГДЕ
		|	гф_КаталогиОбработкиФайловXML.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Не РезультатЗапроса.Пустой() Тогда
	Выборка.Следующий();
	Возврат Выборка.ВыгрузкаВWMS;
	КонецЕсли;
	
КонецФункции// } #wortmann

// #wortmann { 
// Функция выбирает атрибуты короба 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	УпаковочныйЛист - ДокументСсылка.УпаковочныйЛист
//
// Возвращаемое значение:
//	СтруктураАтрибутов - Структура - со значениями Веса, Длины, Ширины и Высоты короба
Функция ПолучитьАтрибутыНоменклатуры(УпаковочныйЛист)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УпаковочныйЛист.гф_Комплектация.гф_ВесКороба КАК WEIGHT,
		|	УпаковочныйЛист.гф_Комплектация.гф_ДлинаКороба КАК LENGTH,
		|	УпаковочныйЛист.гф_Комплектация.гф_ШиринаКороба КАК WIDTH,
		|	УпаковочныйЛист.гф_Комплектация.гф_ВысотаКороба КАК HEIGHT
		|ИЗ
		|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
		|ГДЕ
		|	УпаковочныйЛист.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", УпаковочныйЛист);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаАтрибутов = РезультатЗапроса.Выгрузить();
	
	СтруктураАтрибутов = Новый Структура;
	
	Для каждого Колонка Из ТаблицаАтрибутов.Колонки Цикл
		СтруктураАтрибутов.Вставить(Колонка.Имя);
	КонецЦикла; 
	
	Если ТаблицаАтрибутов.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(СтруктураАтрибутов, ТаблицаАтрибутов[0]);
		ЕстьАдрес = Истина;
	КонецЕсли;

	Возврат СтруктураАтрибутов;
	
КонецФункции// } #wortmann

// #wortmann { 
// Функция находит данные по УЛ из Документа ПриходныйОрдерНаТовары
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ - ДокументСсылка.ПриходныйОрдерНаТовары
//
// Возвращаемое значение:
//	ТаблицаЗначений - результат запроса
Функция ПолучитьДанныеУЛ(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриходныйОрдерНаТоварыТовары.УпаковочныйЛист КАК УпаковочныйЛист,
		|	ПриходныйОрдерНаТоварыТовары.КоличествоУпаковок КАК Количество,
		|	ПриходныйОрдерНаТоварыТовары.УпаковочныйЛист.гф_Комплектация.Наименование КАК Артикул,
		|	ПриходныйОрдерНаТоварыТовары.УпаковочныйЛист.гф_Комплектация.Владелец КАК Номенклатура,
		|	ПриходныйОрдерНаТоварыТовары.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
		|ГДЕ
		|	ПриходныйОрдерНаТоварыТовары.Ссылка = &Ссылка
		|	И ПриходныйОрдерНаТоварыТовары.ЭтоУпаковочныйЛист = ИСТИНА";
	
	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();	
	
КонецФункции// } #wortmann 

// #wortmann { 
// Функция находит данные по УЛ из Документа ПриходныйОрдерНаТовары
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ - ДокументСсылка.ПриходныйОрдерНаТовары
//
// Возвращаемое значение:
//	УЛ - Массив - массив упаковочных листо по документу Заявка на Возврат
Функция  ПолучитьДанныеУЛПоВозврату(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.гф_IDКороба КАК УпаковочныйЛист
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары
		|ГДЕ
		|	ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Документ.Распоряжение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УЛ = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("УпаковочныйЛист");	
	
	Возврат УЛ;
	
КонецФункции// } #wortmann

// #wortmann { 
// Функция выбирает значения Артикулов для парного склада 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ - ДокументСсылка.ПриходныйОрдерНаТовары 
//
// Возвращаемое значение:
//	ТаблицаЗначений - результат запроса
Функция ПолучитьАртикулыИзДокумента(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
		|	ПриходныйОрдерНаТоварыТовары.Номенклатура КАК Номенклатура,
		|	ПриходныйОрдерНаТоварыТовары.Характеристика КАК Характеристика,
		|	ПриходныйОрдерНаТоварыТовары.КоличествоУпаковок КАК Количество,
		|	ПриходныйОрдерНаТоварыТовары.Номенклатура.Артикул КАК Артикул,
		|	ПриходныйОрдерНаТоварыТовары.Назначение.Наименование КАК Назначение,
		|	ВЫБОР
		|		КОГДА ПриходныйОрдерНаТоварыТовары.УпаковочныйЛистРодитель <> ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
		|			ТОГДА ПриходныйОрдерНаТоварыТовары.УпаковочныйЛистРодитель
		|		ИНАЧЕ ПриходныйОрдерНаТоварыТовары.гф_IDКороба
		|	КОНЕЦ КАК УпаковочныйЛист,
		|	ШтрихкодыУпаковок.ШтрихкодУпаковки КАК КМ
		|ИЗ
		|	Документ.ПриходныйОрдерНаТовары.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
		|		ПО (ПриходныйОрдерНаТоварыТовары.Ссылка = ШтрихкодыУпаковок.Ссылка)
		|			И (ПриходныйОрдерНаТоварыТовары.Номенклатура = ШтрихкодыУпаковок.ШтрихкодУпаковки.Номенклатура)
		|			И (ПриходныйОрдерНаТоварыТовары.Характеристика = ШтрихкодыУпаковок.ШтрихкодУпаковки.Характеристика)
		|ГДЕ
		|	ПриходныйОрдерНаТоварыТовары.Ссылка = &Ссылка
		|	И ПриходныйОрдерНаТоварыТовары.ЭтоУпаковочныйЛист = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();

КонецФункции// } #wortmann

// #wortmann { 
// Функция получает цену (недоделана)
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Строка - СтрокаТаблицыЗначений
//	Документ - ДокументСсылка.ПриходныйОрдерНаТовары 
//
// Возвращаемое значение:
//	Цена - число
Функция ПолучитьЦену(Строка, Документ)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Номенклатура", Строка.Номенклатура);
	СтруктураОтбора.Вставить("Характеристика", Строка.Характеристика);
	СтруктураОтбора.Вставить("гф_IDКороба", Строка.гф_IDКороба);
	
	Товары = Документ.Распоряжение.ВозвращаемыеТовары.Выгрузить();
	
	ИскомаяСтрока = Товары.НайтиСтроки(СтруктураОтбора); 
	
	Если ИскомаяСтрока.Количество() > 0 Тогда
		Цена = ИскомаяСтрока[0].Цена;
	Иначе
		Цена = 0;
	КонецЕсли;
	
	Возврат формат(Цена, "ЧДЦ=2; ЧГ=0");
КонецФункции// } #wortmann

// #wortmann { 
// Функция расчитывает цену коробов для строки 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары
//	Строка - СтрокаТЗ - строка с элементом номенклатуры и его данными
//
// Возвращаемое значение:
//	Цена - число
Функция ПолучитьЦенуSO(Документ, Строка)
	
	Цена = 0;
	СвязанныйДокумент = ПолучитьСвязанныйДокументРО(Документ);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказКлиентагф_ТоварыВКоробах.ЦенаКороба КАК ЦенаКороба
		|ИЗ
		|	Документ.ЗаказКлиента.гф_ТоварыВКоробах КАК ЗаказКлиентагф_ТоварыВКоробах
		|ГДЕ
		|	ЗаказКлиентагф_ТоварыВКоробах.Ссылка = &Ссылка
		|	И ЗаказКлиентагф_ТоварыВКоробах.ВариантКомплектации = &ВариантКомплектации";
	
	Запрос.УстановитьПараметр("ВариантКомплектации", Строка.ВариантКомплектации);
	Запрос.УстановитьПараметр("Ссылка", СвязанныйДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
	Выборка.Следующий();
	Цена = Выборка.ЦенаКороба * Строка.Количество; 
	КонецЕсли;

	Возврат СтрЗаменить(формат(Цена, "ЧДЦ=2"), Символы.НПП, "");
	
КонецФункции// } #wortmann

// #wortmann { 
// Процедура обрабатывает подготовленный файл для отправки (взято из УПП)
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	ИмяФайла - строка
Процедура ОбработатьФайл(ИмяФайла)
	чтение = Новый ЧтениеТекста(ИмяФайла);
	текст = чтение.Прочитать();
	чтение.Закрыть();
	запись = Новый ЗаписьТекста(ИмяФайла);
	текст = СтрЗаменить(текст, " xmlns=""WMS""", "");
	текст = СтрЗаменить(текст, " xmlns:xs=""http://www.w3.org/2001/XMLSchema""", "");
	текст = СтрЗаменить(текст, " xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""", "");
	текст = СтрЗаменить(текст, " xsi:type=""Адреса""", "");
	текст = СтрЗаменить(текст, " xsi:type=""Адрес""", "");
	текст = СтрЗаменить(текст, " xsi:type=""СтрокаТовара""", "");
	текст = СтрЗаменить(текст, " xsi:type=""СтрокаТовараПриход""", "");
	текст = СтрЗаменить(текст, " xsi:type=""Атрибут""", "");
	текст = СтрЗаменить(текст, " xsi:type=""Адрес2""", "");
	текст = СтрЗаменить(текст, " xsi:type=""СтрокаТовара2""", "");
	текст = СтрЗаменить(текст, " xsi:type=""СтрокаТовара3""", "");
	текст = СтрЗаменить(текст, " xsi:type=""СтрокаТовара4""", "");
	текст = СтрЗаменить(текст, " xsi:type=""СерийныеНомера""", "");
	текст = СтрЗаменить(текст, " xsi:type=""Штрихкод""", "");
	текст = СтрЗаменить(текст, " xsi:type=""ЭлементСпискаТоваров_ПарныеСклады""", "");
	текст = СтрЗаменить(текст, " xsi:type=""СтрокаТовараПриход_ПарныеСклады""", "");
	текст = СтрЗаменить(текст, " xsi:type=""ЭлементСпискаТоваров""", "");
	текст = СтрЗаменить(текст, " xsi:type=""СтрокаТовара5""", "");
	текст = СтрЗаменить(текст, Символы.Таб, "");
	текст = СтрЗаменить(текст, Символы.ПС, "");
	запись.Записать(текст);
	запись.Закрыть();
КонецПроцедуры// } #wortmann

// #wortmann { 
// Функция высчитывает номер заявки 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ - Документ - ДокументСсылка.РасходныйОрдерНаТовары, ДокументСсылка.ПриходныйОрдерНаТовары
//
// Возвращаемое значение:
//	НомерЗаявки - Строка
Функция НомерЗаявки(Документ)
	
	Если ЭтоРеализация Тогда
		НомерЗаявки = КодКлиента + Документ.Номер;
	ИначеЕсли ЭтоПоступление Тогда 
		НомерЗаявки = Документ.Номер;
	ИначеЕсли ЭтоПеремещение Тогда
		НомерЗаявки =  КодКлиента + Документ.Номер + "-S";
	ИначеЕсли ЭтоВозврат Тогда
		НомерЗаявки =  КодКлиента + Документ.Номер + "-V"; // Добавила V от себя для понимания Возврата	
	Иначе
		ДляПоиска = строка(Документ.СкладПолучатель);
		Если СтрНайти(ДляПоиска, "Товары для розницы") = 0 Тогда  
			НомерЗаявки =  КодКлиента + Документ.Номер + "-S";
		Иначе
			НомерЗаявки =  КодКлиента + Документ.Номер + "-R";
		КонецЕсли;
	КонецЕсли;
	
	Возврат НомерЗаявки;
КонецФункции// } #wortmann

// #wortmann { 
// Функция высчитывает дату отгрузки для Приходного Ордера
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	ДатаОтгр - Дата документа
//
// Возвращаемое значение:
//	ДатаОтгрузки - Дата
Функция ЗаполнитьДатуОтгрузки(ДатаОтгр)
	
	ДатаОтгрузки = ДатаОтгр;
	//расчет рабочих дней для отгрузки
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ДанныеПроизводственногоКалендаря.Дата КАК Дата
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.Год МЕЖДУ &ГодНач И &ГодКон
	|	И ДанныеПроизводственногоКалендаря.ВидДня В(&РабДни)";
	
	Запрос.УстановитьПараметр("ГодНач", Год(ТекущаяДатаСеанса()) - 1);
	Запрос.УстановитьПараметр("ГодКон", Год(ТекущаяДатаСеанса()) + 1);
	МассивВидДня = Новый Массив;
	МассивВидДня.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	МассивВидДня.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
	Запрос.УстановитьПараметр("РабДни", МассивВидДня);
	ТзРабДней = Запрос.Выполнить().Выгрузить();
	МассивРабДней = ТзРабДней.ВыгрузитьКолонку("Дата");
	// расчет даты отгрузки для письма
	ВремяХ = 13;
	Если ЗначениеЗаполнено(ДатаОтгрузки) Тогда
		ДобавитьДней = 0;
		Час = Час(ДатаОтгрузки);
		Если Час < ВремяХ Тогда
			ДобавитьДней = 1;
		Иначе
			ДобавитьДней = 2;	
		КонецЕсли;
		// проверка по регл. произв. календарю
		ДобавитьДнейОтгрузки(ДатаОтгрузки, ДобавитьДней, МассивРабДней);
	КонецЕсли;
	
	Возврат ДатаОтгрузки;
	
КонецФункции// } #wortmann

// #wortmann { 
// Процедура добавляет дни к ДатеОтгрузки согласно производственному календарю
// Галфинд_Домнышева 2023/07/21
//
// Параметры:
//	ДатаОтгрузки - Дата документа
//	ДобавитьДней - Число
//	МассивРабДней - Массив - из значений Дата
Процедура ДобавитьДнейОтгрузки(ДатаОтгрузки, ДобавитьДней, МассивРабДней)
	
	СекундВСутки = 86400;
	Для дн = 1 По ДобавитьДней Цикл
		ДатаОтгрузки = ДатаОтгрузки + СекундВСутки;
		Добавлять = Истина;
		сч = 1;
		Пока Добавлять Цикл
			сч = сч + 1;
			Если МассивРабДней.Найти(НачалоДня(ДатаОтгрузки)) = Неопределено Тогда
				ДатаОтгрузки = ДатаОтгрузки + СекундВСутки;
				// ошибка в производственном календаре, нерабочих дней > 20 
				Если сч > 20 Тогда
					Добавлять = Ложь;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Проверьте заполнение производственного календаря!");
					ДатаОтгрузки = ДатаОтгрузки + СекундВСутки; 
				КонецЕсли;
			Иначе
				Добавлять = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры// } #wortmann

// #wortmann { 
// Функция получает код клиента из дополнительных реквизитов Склада
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Склад - СправочникСсылка.Склады
//
// Возвращаемое значение:
//	Строка - код клиента Склада
Функция ПолучитьКодКлиента(Склад)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СкладыДополнительныеРеквизиты.Свойство.Имя КАК Свойство,
		|	СкладыДополнительныеРеквизиты.Значение КАК Значение
		|ИЗ
		|	Справочник.Склады.ДополнительныеРеквизиты КАК СкладыДополнительныеРеквизиты
		|ГДЕ
		|	СкладыДополнительныеРеквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Свойство = "гф_СкладыКодКлиентаСклад" Тогда
				Возврат Выборка.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции// } #wortmann

Функция ПолучитьНомерИнвойса()

	Возврат 123;

КонецФункции // ПолучитьНомерИнвойса()

// #wortmann { 
// Функция получает структуру по указанному типу адреса
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	ВидАдреса - СправочникСсылка.ВидыКонтактнойИнформации
//	Получатель - ОпределяемыйТип.ОтправительПолучательТоваров
//	ЕстьАдрес - Булево
//
// Возвращаемое значение:
//	Адрес - Структура
Функция ПолучитьАдресПоТипуКомпании(ВидАдреса, Получатель, ЕстьАдрес)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтрагентыКонтактнаяИнформация.Регион КАК Регион,
		|	КонтрагентыКонтактнаяИнформация.Город КАК Город,
		|	КонтрагентыКонтактнаяИнформация.Представление КАК Представление,
		|	КонтрагентыКонтактнаяИнформация.Вид КАК Вид,
		|	КонтрагентыКонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
		|	ПОДСТРОКА(КонтрагентыКонтактнаяИнформация.Представление, 0, 6) КАК Индекс
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|ГДЕ
		|	КонтрагентыКонтактнаяИнформация.Вид = &Вид
		|	И КонтрагентыКонтактнаяИнформация.Тип = &Тип
		|	И КонтрагентыКонтактнаяИнформация.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Вид", ВидАдреса);
	Запрос.УстановитьПараметр("Ссылка", Получатель);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Если ВидАдреса = Справочники.ВидыКонтактнойИнформации.АдресПартнера 
		ИЛИ ТипЗнч(Получатель) = Тип("СправочникСсылка.Партнеры") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Контрагенты", "Справочник.Партнеры");
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаАдресов = РезультатЗапроса.Выгрузить();
	Адрес = Новый Структура; 
	
	Для каждого Колонка Из ТаблицаАдресов.Колонки Цикл
		Адрес.Вставить(Колонка.Имя);
	КонецЦикла;
	Если ТаблицаАдресов.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Адрес, ТаблицаАдресов[0]);
		ЕстьАдрес = Истина;
	КонецЕсли;
	
	Возврат Адрес;

КонецФункции// } #wortmann

// #wortmann { 
// Функция устанавливает является ли склад указанный в документе Основным
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Склад - СправочникСсылка.Склады
//
// Возвращаемое значение:
//	Булево - Истина, если Склад Основной, иначе Ложь
Функция ЭтоОсновнойСклад(Склад) Экспорт

	Склады = _омОбщегоНазначенияКлиентСервер.ПолучитьГлобальноеЗначениеМассив("гф_ГлобальныеЗначенияОсновнойСклад");
	
	Если Склады.Найти(Склад) <> Неопределено Тогда
			Возврат Истина;			
	КонецЕсли;
		
	Возврат Ложь;

КонецФункции// } #wortmann

// #wortmann { 
// Функция устанавливает является ли склад указанный в документе Таможенным
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Склад - СправочникСсылка.Склады
//
// Возвращаемое значение:
//	Булево - Истина, если Склад Таможенный, иначе Ложь
Функция ЭтоТаможенныйСклад(Склад) Экспорт
	Склады = _омОбщегоНазначенияКлиентСервер.ПолучитьГлобальноеЗначениеМассив("гф_ГлобальныеЗначенияТаможенныйСклад");
	
	Если Склады.Найти(Склад) <> Неопределено Тогда
			Возврат Истина;			
	КонецЕсли;
		
	Возврат Ложь;
КонецФункции// } #wortmann 

 // #wortmann { 
// Функция устанавливает является ли склад указанный в документе складом Недосдачи
// Галфинд_Домнышева 2023/07/31
//
// Параметры:
//	Склад - СправочникСсылка.Склады
//
// Возвращаемое значение:
//	Булево - Истина, если Склад Недосдачи, иначе Ложь
Функция ЭтоСкладНедосдачи(Склад) Экспорт

	Склады = _омОбщегоНазначенияКлиентСервер.ПолучитьГлобальноеЗначениеМассив("гф_ГлобальныеЗначенияСкладИзлишкиНедостачи");
	
	Если Склады.Найти(Склад) <> Неопределено Тогда
		Возврат Истина;			
	КонецЕсли;
		
	Возврат Ложь;

КонецФункции// } #wortmann

Функция ЭтоСкладТранзитБезРезерва(Склад) Экспорт
	Возврат Ложь;
КонецФункции 

Функция ЭтоСкладРазукомплектации(Склад) Экспорт
	Возврат Ложь;
КонецФункции 

// #wortmann { 
// Функция возвращает значение для ТЭГ source_system по каждой организации
// Галфинд_Домнышева 2022/12/01
//
// Возвращаемое значение:
//	Строка - значение для ТЭГ source_system
Функция ПолучитьПоле_SourceSystem()
	
	Рез = "1С";
	
	Суффикс = "_";
	
	Если СтрНайти(НРег(Организация.Наименование), "вендель") > 0 Тогда
		Суффикс = Суффикс + "ВЕ";
    ИначеЕсли СтрНайти(НРег(Организация.Наименование), "вортманн") > 0 Тогда
		Суффикс = Суффикс + "ВО";
	ИначеЕсли СтрНайти(НРег(Организация.Наименование), "каприс") > 0 Тогда
		Суффикс = Суффикс + "КА";
	ИначеЕсли СтрНайти(НРег(Организация.Наименование), "шу.ком") > 0 Тогда
		Суффикс = Суффикс + "ШУ";
	ИначеЕсли СтрНайти(НРег(Организация.Наименование), "яна") > 0 Тогда
		Суффикс = Суффикс + "ЯН";
	Иначе
		Суффикс = Суффикс + "?";
	КонецЕсли;
	
	Возврат Рез + Суффикс;

КонецФункции// } #wortmann

#КонецОбласти

#Область ЗагрузкаДанных

// #wortmann { 
// Процедура загружает файлы с сервера WMS 
// Галфинд_Домнышева 2022/12/01
Процедура ЗагрузитьДанные() Экспорт
	
	ТекстыОшибок = Новый ТаблицаЗначений;
	ТекстыОшибок.Колонки.Добавить("ПутьФайла");
	ТекстыОшибок.Колонки.Добавить("ТекстОшибки");
	ТекстыОшибок.Колонки.Добавить("Организация");
	ТекстыОшибок.Колонки.Добавить("ТипИнформации");

	НастройкиFTPСоединения = 
					_омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначениеFTP("FTP_НастройкиДляЗагрузкиВыгрузкиВWMS");
	
	Если НастройкиFTPСоединения.ЕстьДанные = Ложь Тогда
		Сообщение = "Не заданы настройки подключения к ftp-серверу.";
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, Сообщение);
		ЗаписатьСообщениеОшибки(Сообщение, Истина, "Проверка настроек для обмена");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ТекущаяДатаСеанса(), "ДЛФ=T") + ". " + Сообщение);
		
		Возврат;
	КонецЕсли;
	
	Соединение = _омОбщегоНазначенияВызовСервера.гф_ПолучитьСоединение(НастройкиFTPСоединения);       
	Если Соединение = Неопределено Тогда
		Сообщение = "Соединение не установлено, проверьте настройки подключения FTP. " + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, Сообщение);
		ЗаписатьСообщениеОшибки(Сообщение, Истина, "Проверка настроек для обмена");
		Возврат;
	КонецЕсли;
	
	ТекКаталог = СтрЗаменить(СтрЗаменить(НастройкиFTPСоединения.Каталог, "\", "/"), "//", "/");	
	Если Прав(ТекКаталог, 1) <> "/" Тогда
		ТекКаталог = ТекКаталог + "/";
	КонецЕсли;

	Соединение.УстановитьТекущийКаталог(ТекКаталог);
	МассивПапок = 
	_омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначениеМассив("гф_СписокПапокДляЗагрузкиСоСкладаFTP");	
	//	ФайлыКОбработке = Соединение.НайтиФайлы(НастройкиFTPСоединения.Каталог, "*.xml");
	ФайлыКЗагрузке = Новый Массив;
	
	Если МассивПапок.Количество() > 0 Тогда	
		Для Каждого Папка Из МассивПапок Цикл
			ТекКаталог = СтрЗаменить(СтрЗаменить(Папка, "\", "/"), "//", "/");	
			Если Прав(ТекКаталог, 1) <> "/" Тогда
				ТекКаталог = ТекКаталог + "/";
			КонецЕсли;
			ФайлыКОбработкеТекущая = Соединение.НайтиФайлы(ТекКаталог, "*.xml");
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФайлыКЗагрузке, ФайлыКОбработкеТекущая, Истина);
		КонецЦикла;		
	Иначе
		ФайлыКЗагрузке = Соединение.НайтиФайлы(ТекКаталог, "*.xml");
	КонецЕсли;
	
	ПапкаДляВременнойЗагрузки = _омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначение("гф_ПапкаДляВременнойЗагрузкиСоСкладаFTP");
	КаталогЗагрузки = ПапкаДляВременнойЗагрузки + "\" +  формат(ТекущаяДатаСеанса(), "ДФ='ггг-ММ-д'");
	СоздатьКаталог(КаталогЗагрузки);
	
	Каталог = Новый Файл(КаталогЗагрузки);
	Если Не Каталог.Существует() Тогда
		ДобавитьСтрокуВТекстыОшибки("Каталог для загрузки файлов задан неверно или не существует...",
		Истина, КаталогЗагрузки);
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	Для каждого СтрокаФайлFTP Из ФайлыКЗагрузке Цикл
		
		Соединение.Получить(СтрокаФайлFTP.ПолноеИмя, КаталогЗагрузки + "\" + СтрокаФайлFTP.Имя);
		
	КонецЦикла;
	МассивИменЗагруженныхФайлов = Новый Массив;
	ФайлыКОбработке = НайтиФайлы(КаталогЗагрузки, "*.xml"); 
	Если ФайлыКОбработке.Количество() > 0 Тогда
		
		ОбработатьПолученныеФайлы(ФайлыКОбработке, МассивИменЗагруженныхФайлов);
	Иначе    
		Сообщение = "В указанном FTP каталоге нет файлов с расширением *.xml!";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ТекущаяДатаСеанса(), "ДЛФ=T") + ". " + Сообщение);
		ЗаписатьСообщениеОшибки(Сообщение, Ложь, "Проверка настроек для обмена");
	КонецЕсли;
	
	МассивТекстовыхФайлов = Соединение.НайтиФайлы(НастройкиFTPСоединения.Каталог + "LOG/", "*.txt");
	Если МассивТекстовыхФайлов.Количество() > 0 Тогда
		ОбработатьТекстовыеФайлы(МассивТекстовыхФайлов);
	КонецЕсли;
	
	//УдалитьФайлыНаФТП(МассивИменЗагруженныхФайлов, НастройкиFTPСоединения);	
	
КонецПроцедуры// } #wortmann

// #wortmann { 
// Процедура начинает разбор текстовых файлов 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//  МассивТекстовыхФайлов - Массив - массив файлов с расширением *.log и *.txt
Процедура ОбработатьТекстовыеФайлы(МассивТекстовыхФайлов)
	
	МассивЗагружаемыхФайлов = Новый ТаблицаЗначений;
	МассивЗагружаемыхФайлов.Колонки.Добавить("Файл");
	МассивЗагружаемыхФайлов.Колонки.Добавить("ИмяФайла");
	МассивЗагружаемыхФайлов.Колонки.Добавить("УдалитьПослеОбработки");
	
	Для Каждого ФайлКОбработке Из МассивТекстовыхФайлов Цикл
		СтрокаЗагружаемыйФайл = МассивЗагружаемыхФайлов.Добавить();
		СтрокаЗагружаемыйФайл.Файл = ФайлКОбработке.ПолноеИмя;
		СтрокаЗагружаемыйФайл.ИмяФайла = ФайлКОбработке.Имя;
		СтрокаЗагружаемыйФайл.УдалитьПослеОбработки = Истина;
	КонецЦикла;
	
	Для Каждого ФайлОбмена Из МассивЗагружаемыхФайлов Цикл
		
		Если ЗагружалсяЛиФайл(ФайлОбмена.ИмяФайла) Тогда
			Сообщение = "Файл " + ФайлОбмена.ИмяФайла + " загружался ранее. Документ не создан. Документ перемещён в архив.";
			ЗаписатьСообщениеОшибки(Сообщение, Истина, ФайлОбмена.Файл);
			ПереместитьФайлВАрхив(ФайлОбмена.Файл);
			Продолжить;
		КонецЕсли; 
		
		ДокументПоОбмену = Документы.гф_ДанныеЗагрузкиПоОбмену.СоздатьДокумент();
		ДокументПоОбмену.Дата = ТекущаяДатаСеанса();
		ДокументПоОбмену.ИмяФайла = ФайлОбмена.ИмяФайла;
		ДокументПоОбмену.ПолноеИмяФайла = ФайлОбмена.Файл;
		ДокументПоОбмену.СтатусДокумента = Перечисления.гф_СтатусыДокументаЗагрузкиWMS.Создан;
		ДокументПоОбмену.ДополнительныеСвойства.Вставить("УдалитьПослеОбработки", ФайлОбмена.УдалитьПослеОбработки);
		Попытка
			ДокументПоОбмену.Записать();
		Исключение
			Сообщение = "Произошла ошибка записи " + СокрЛП(ДокументПоОбмену) + Символы.ПС + ОписаниеОшибки();
			ЗаписатьСообщениеОшибки(Сообщение, Истина, ФайлОбмена.Файл);
			Продолжить;
		КонецПопытки;

		   // НайтиДокументИЗаписатьКомментарий(ФайлОбмена);
		Если ТекстыОшибок.Количество() > 0 Тогда 
			ЗаписатьОшибку(ТекстыОшибок);   
		КонецЕсли;
		ТекстыОшибок.Очистить();
	КонецЦикла;
		
КонецПроцедуры// } #wortmann

// #wortmann { 
// Процедура ДОЛЖНА по имени файла с сервера WMS определяет Дату и Номер документа к которому относится файл,
// подбирает его, вносит в реквизит "комментарий" содержимое и записывает документ.
// Галфинд_Домнышева 2022/12/01 
//
// Параметры:
//  Файл - СтрокаТаблицыЗначений - строка из ТЗ (получ. файлов)
Процедура НайтиДокументИЗаписатьКомментарий(Файл)
	
	ВыбранныйФайл = Новый Файл(Файл.ИмяФайла);
	
	Если ВыбранныйФайл.Существует() Тогда //проверка на существование файла
		
		ОбъектЧтение = Новый ЧтениеТекста(Файл.ИмяФайла);
		ТекстУведомления = ОбъектЧтение.Прочитать();
		ОбъектЧтение.Закрыть();
		
	Иначе
		
		Сообщение = "Файл не найден!";
		ЗаписатьСообщениеОшибки(Сообщение, Истина, Файл.Файл);
	КонецЕсли;

	СтрокаИмени = Файл.ИмяФайла;
    ДатаДокумента  = ПолучитьДатуИзСтроки(СтрокаИмени);
	// 3 - количество цифр в коде клиента
	НомерДокумента = Прав(СтрокаИмени, СтрДлина(СтрокаИмени) - 3);
     // Формат(Документ.Дата, "ДФ=yyyyMMddHHmm")
     // Далее необходимо найти Документ по номеру и дате и добавить в него комментарий.
	 
КонецПроцедуры// } #wortmann

// #wortmann { 
// Процедура разбивает массив полученных с сервера WMS файлов по интерфейсу и  начинает обработку.
// Галфинд_Домнышева 2022/12/01 
//
// Параметры:
//  ФайлыКОбработке - Массив - полученные файлы с сервера WMS
//	МассивИменЗагруженныхФайлов - Массив - в к-й добавляются имена обработанных файлов.
Процедура ОбработатьПолученныеФайлы(ФайлыКОбработке, МассивИменЗагруженныхФайлов)
	
	МассивЗагружаемыхФайлов = Новый ТаблицаЗначений;
	МассивЗагружаемыхФайлов.Колонки.Добавить("Файл");
	МассивЗагружаемыхФайлов.Колонки.Добавить("ИмяФайла");
	МассивЗагружаемыхФайлов.Колонки.Добавить("ДатаОтправления");
	МассивЗагружаемыхФайлов.Колонки.Добавить("ДатаПолучения");
	МассивЗагружаемыхФайлов.Колонки.Добавить("УдалитьПослеОбработки");
	
	Для Каждого ФайлКОбработке Из ФайлыКОбработке Цикл
		СтрокаЗагружаемыйФайл = МассивЗагружаемыхФайлов.Добавить();
		СтрокаЗагружаемыйФайл.Файл = ФайлКОбработке.ПолноеИмя;
		СтрокаЗагружаемыйФайл.ИмяФайла = ФайлКОбработке.Имя;
		СтрокаЗагружаемыйФайл.УдалитьПослеОбработки = Истина;
	КонецЦикла;

	МассивЗагружаемыхФайловРО = ПреобразоватьМассивФайлов(МассивЗагружаемыхФайлов, Истина);
	МассивЗагружаемыхФайловПО = ПреобразоватьМассивФайлов(МассивЗагружаемыхФайлов);
	
	// Необходимо разобрать массив РО на РО и КорректировкиНазначений и обработать их отдельно
	Если МассивЗагружаемыхФайловРО.Количество() > 0 Тогда
		УпорядочитьФайлыПоДатеСоздания(МассивЗагружаемыхФайловРО);
        ОбработатьЗагружаемыйФайл(МассивЗагружаемыхФайловРО, МассивИменЗагруженныхФайлов, Истина);
	КонецЕсли;

    Если МассивЗагружаемыхФайловПО.Количество() > 0 Тогда
		УпорядочитьФайлыПоДатеСоздания(МассивЗагружаемыхФайловПО);
       	ОбработатьЗагружаемыйФайл(МассивЗагружаемыхФайловПО, МассивИменЗагруженныхФайлов);
	КонецЕсли;
		
КонецПроцедуры// } #wortmann

// #wortmann { 
// Процедура разбивает массив полученных с сервера WMS файлов по интерфейсу и  начинает обработку.
// Галфинд_Домнышева 2022/12/01 
//
// Параметры:
//  ФайлыКОбработке - Массив - полученные файлы с сервера WMS
//	МассивИменЗагруженныхФайлов - Массив - в к-й добавляются имена обработанных файлов.
Процедура ОбработатьЗагружаемыйФайл(МассивЗагружаемыхФайлов, МассивИменЗагруженныхФайлов, РасходныйОрдер = Ложь)

	Для Каждого ФайлОбмена Из МассивЗагружаемыхФайлов Цикл
		
		Если ЗагружалсяЛиФайл(ФайлОбмена.ИмяФайла) Тогда
			Сообщение = "Файл " + ФайлОбмена.ИмяФайла + " загружался ранее. Документ не создан. Документ перемещён в архив.";
			ЗаписатьСообщениеОшибки(Сообщение, Истина, ФайлОбмена.Файл);
			ПереместитьФайлВАрхив(ФайлОбмена.Файл);
			Продолжить;
		КонецЕсли;
		
		Файл = Новый Файл(ФайлОбмена.Файл);
		Если Файл.Размер() = 0 Тогда
			ЗаписатьСообщениеОшибки("Файл " + ФайлОбмена.ИмяФайла + " размер 0.", Истина, ФайлОбмена.Файл);
			ПереместитьФайлВАрхив(ФайлОбмена.Файл);
			Продолжить;
		КонецЕсли;
		
		Попытка
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.ОткрытьФайл(ФайлОбмена.Файл, , , "utf8");
			Фабрика = Новый ФабрикаXDTO();
			Данные = Фабрика.ПрочитатьXML(ЧтениеXML);
			ЧтениеXML.Закрыть();
		Исключение
			Сообщение = "Файл " + ФайлОбмена.ИмяФайла + " ошибка загрузки. " + ОписаниеОшибки();
			ЗаписатьСообщениеОшибки(Сообщение, Истина, ФайлОбмена.Файл);
			Продолжить;
		КонецПопытки;
		
		//document = Данные.documents.document;
		//Статус = document.header.status;
		
		ДокументПоОбмену = Документы.гф_ДанныеЗагрузкиПоОбмену.СоздатьДокумент();
		ДокументПоОбмену.Дата = ТекущаяДатаСеанса();
		ДокументПоОбмену.ИмяФайла = ФайлОбмена.ИмяФайла;
		ДокументПоОбмену.ПолноеИмяФайла = ФайлОбмена.Файл;
		ДокументПоОбмену.СтатусДокумента = Перечисления.гф_СтатусыДокументаЗагрузкиWMS.Создан;
		ДокументПоОбмену.ДополнительныеСвойства.Вставить("УдалитьПослеОбработки", ФайлОбмена.УдалитьПослеОбработки);
		//Документ.Файл = Новый ХранилищеЗначения(ПолучитьТекстФайла(ФайлОбмена.Файл));
		Попытка
			ДокументПоОбмену.Записать();
		Исключение
			Сообщение = "Произошла ошибка записи " + СокрЛП(ДокументПоОбмену) + Символы.ПС + ОписаниеОшибки();
			ЗаписатьСообщениеОшибки(Сообщение, Истина, ФайлОбмена.Файл);
			Продолжить;
		КонецПопытки;

		ДокументНайден = Истина;
		НайтиИОбработатьДокумент(Данные, ФайлОбмена, ДокументПоОбмену, ДокументНайден, РасходныйОрдер);

		Если НЕ ДокументНайден Тогда
			Сообщение = "Произошла ошибка. Расходный ордер на товары, из файла " + ФайлОбмена.ИмяФайла;
			ЗаписатьСообщениеОшибки(Сообщение, Истина, ФайлОбмена.Файл);
			Продолжить;
		КонецЕсли;
				
        МассивИменЗагруженныхФайлов.Добавить(ФайлОбмена);
		Если ТекстыОшибок.Количество() > 0 Тогда
			ЗаписатьОшибку(ТекстыОшибок);
		КонецЕсли;
		ТекстыОшибок.Очистить();
	КонецЦикла;

КонецПроцедуры// } #wortmann

// #wortmann { 
// Процедура начинает обработку файла.
// Галфинд_Домнышева 2022/12/01 
//
// Параметры:
//  Данные - ТипОбъектаXDTO - полученные файлы с сервера WMS
//	ФайлОбмена - Файл - обрабатываемый файл.
//	ДокументПоОбмену - ДокументСсылка.гф_ДанныеЗагрузкиПоОбмену
//	ДокументНайден - Булево
//	РасходныйОрдер - Булево - если Истина SO, Ложь PO
Процедура НайтиИОбработатьДокумент(Данные, ФайлОбмена, ДокументПоОбмену, ДокументНайден, РасходныйОрдер)
	
	КоллекцияДокументовXDTO = Данные.documents.document;
	
	Если ТипЗнч(КоллекцияДокументовXDTO) = Тип("СписокXDTO") Тогда
		Для Каждого ТекущийЭлемент Из КоллекцияДокументовXDTO Цикл 
			НайденныйДокументОбъект = ПолучитьДокумент(ТекущийЭлемент, ФайлОбмена.ИмяФайла, РасходныйОрдер); 
			Если НайденныйДокументОбъект <> Неопределено Тогда
				ИзменитьСтатусДокумента(Данные, НайденныйДокументОбъект, ТекущийЭлемент, ФайлОбмена,
										ДокументПоОбмену, РасходныйОрдер);
			Иначе	
				ДокументНайден = Ложь;
				Продолжить;
			КонецЕсли;
		КонецЦикла;
	Иначе
		НайденныйДокументОбъект = ПолучитьДокумент(КоллекцияДокументовXDTO, ФайлОбмена.ИмяФайла, РасходныйОрдер);
		
		Если НайденныйДокументОбъект <> Неопределено Тогда
			ИзменитьСтатусДокумента(Данные, НайденныйДокументОбъект, КоллекцияДокументовXDTO, ФайлОбмена, 
									ДокументПоОбмену, РасходныйОрдер);
		Иначе
			ДокументНайден = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры// } #wortmann 
	
Процедура ИзменитьСтатусДокумента(Данные, НайденныйДокументОбъект, КоллекцияДокументовXDTO, ФайлОбмена,
									ДокументПоОбмену, РасходныйОрдер)
	
	Статус = КоллекцияДокументовXDTO.header.status;
	ID = Данные.id;

	Если РасходныйОрдер Тогда
		Если Статус = "IMPORTED" Тогда
			НайденныйДокументОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.Проверен;
			ПереместитьФайлВАрхив(ФайлОбмена.Файл);
			ПоложитьЗаписьВРСДанныеВыгрузки(НайденныйДокументОбъект, ФайлОбмена, ID);
		ИначеЕсли Статус = "PICKED" И СтрНайти(ФайлОбмена.ИмяФайла, "BL") Тогда
			Попытка
				НайденныйДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				ПереместитьФайлВАрхив(ФайлОбмена.Файл);	
			Исключение
				Сообщение = "Произошла ошибка проведения документа корректировки назначения " 
				+ НайденныйДокументОбъект.Ссылка + Символы.ПС + ОписаниеОшибки();
				ДобавитьСтрокуВТекстыОшибки(Сообщение, Истина, ФайлОбмена.Файл);
			КонецПопытки;
		ИначеЕсли Статус = "PICKED" И НЕ СтрНайти(ФайлОбмена.ИмяФайла, "BL") Тогда
			ПроизвестиЗаполнениеИзменениеТабличныхЧастейДокумента(НайденныйДокументОбъект,
													КоллекцияДокументовXDTO, ФайлОбмена.Файл);
			НайденныйДокументОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтгрузке;
			ПереместитьФайлВАрхив(ФайлОбмена.Файл);
		ИначеЕсли Статус = "SHIPPED" Тогда
			НайденныйДокументОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
			ПереместитьФайлВАрхив(ФайлОбмена.Файл);
		Иначе
			Сообщение = "Файл " + ФайлОбмена.ИмяФайла + " содержит пустой или неправильный статус. 
			|Документ не обработан. Файл перемещён в архив.";
			ДобавитьСтрокуВТекстыОшибки(Сообщение, Истина, ФайлОбмена.Файл);
			ПереместитьФайлВАрхив(ФайлОбмена.Файл);
		КонецЕсли;
	Иначе
		Если Статус = "IMPORTED" Тогда
			НайденныйДокументОбъект.Статус = Перечисления.СтатусыПриходныхОрдеров.ВРаботе;
			ПереместитьФайлВАрхив(ФайлОбмена.Файл);
			ПоложитьЗаписьВРСДанныеВыгрузки(НайденныйДокументОбъект, ФайлОбмена, ID);
		ИначеЕсли Статус = "CLOSED" Тогда 
			ПроизвестиПроверкуТЧДокументаПО(НайденныйДокументОбъект, КоллекцияДокументовXDTO, ФайлОбмена.Файл);
			НайденныйДокументОбъект.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
			ПереместитьФайлВАрхив(ФайлОбмена.Файл);			
		ИначеЕсли Статус = "MOVED" Тогда
			//НайденныйДокументОбъект.Статус = Перечисления.СтатусыПриходныхОрдеров.гф_Перемещен;
			ПереместитьФайлВАрхив(ФайлОбмена.Файл);
			НайтиИОбработатьДокументПеремещения(НайденныйДокументОбъект, КоллекцияДокументовXDTO, ФайлОбмена.Файл);
		Иначе
			Сообщение = "Файл " + ФайлОбмена.ИмяФайла + " содержит пустой или неправильный статус. 
			|Документ не обработан. Файл перемещён в архив.";
			ДобавитьСтрокуВТекстыОшибки(Сообщение, Истина, ФайлОбмена.Файл);
			ПереместитьФайлВАрхив(ФайлОбмена.Файл);
		КонецЕсли;

	КонецЕсли;

	Попытка
		НайденныйДокументОбъект.Записать();
	Исключение
		Сообщение = "Произошла ошибка записи расходного ордера" + НайденныйДокументОбъект.Ссылка + Символы.ПС 
					+ ОписаниеОшибки();
		ДобавитьСтрокуВТекстыОшибки(Сообщение, Истина, ФайлОбмена.Файл);
	КонецПопытки;
	
	ДокументПоОбмену.СтатусДокумента = Перечисления.гф_СтатусыДокументаЗагрузкиWMS.Отработан;
	Попытка
		ДокументПоОбмену.Записать();
	Исключение
		Сообщение = "Произошла ошибка записи " + СокрЛП(ДокументПоОбмену) + Символы.ПС + ОписаниеОшибки();
		ДобавитьСтрокуВТекстыОшибки(Сообщение, Истина, ФайлОбмена.Файл);
	КонецПопытки;
	
КонецПроцедуры// } #wortmann 

Процедура ПоложитьЗаписьВРСДанныеВыгрузки(НайденныйДокументОбъект, ФайлОбмена, ID)
	
	Запись = РегистрыСведений.гф_ДанныеВыгрузки.СоздатьМенеджерЗаписи();
	Запись.Период = ТекущаяДатаСеанса();
	Запись.НомерСообщения = ID;
	Запись.ВидДанных = Перечисления.гф_ВидыДанныхДляВыгрузки.Документ;
	Запись.Документ = НайденныйДокументОбъект.Ссылка;
	Запись.Состояние = Перечисления.гф_СтатусыВыгрузкиДанных.Доставлено;
	Запись.ИмяФайла = ФайлОбмена.Файл;
	Запись.Записать();
	
КонецПроцедуры// } #wortmann

// #wortmann { 
// Процедура проверяет на одинаковость ТЧ документа и из файла и выполняет действия по алгоритму
// Галфинд_Домнышева 2023/07/31
//
// Параметры:
//  НайденныйДокументОбъект - ДокументОбъект.РасходныйОрдерНаТовары
//  ОбъектXDTO - ОбъектXDTO 
//  ПутьФайла - Строка - имя файла
Процедура ПроизвестиЗаполнениеИзменениеТабличныхЧастейДокумента(НайденныйДокументОбъект, ОбъектXDTO, ПутьФайла)
	
	СтрокиДокументаXDTO = ОбъектXDTO.lines.line;
	
	Склад = НайденныйДокументОбъект.Склад;
	ЭтоТаможенныйСклад = ЭтоТаможенныйСклад(Склад);
	СкладПолучательВПарах = НЕ ПроверитьЗначениеСкладВКоробах(Склад);
	ОтгружаемыеТоварыИзФайла = Новый ТаблицаЗначений;
	Если СкладПолучательВПарах Тогда
		
		СтруОтбора = Новый Структура;
		СтруОтбора.Вставить("ЭтоУпаковочныйЛист", Ложь);
		ОтгружаемыеТоварыДокумента = НайденныйДокументОбъект.ОтгружаемыеТовары.Скопировать(СтруОтбора);
		ОтгружаемыеТоварыДокумента.Свернуть("Номенклатура, Характеристика, КоличествоУпаковок"); 
		
		ОтгружаемыеТоварыИзФайла.Колонки.Добавить("Номенклатура");
		ОтгружаемыеТоварыИзФайла.Колонки.Добавить("Характеристика");
		ОтгружаемыеТоварыИзФайла.Колонки.Добавить("КоличествоУпаковок");	
		
		Если ТипЗнч(СтрокиДокументаXDTO) = Тип("СписокXDTO") Тогда
			
			Для Каждого СтрокаXDTO Из СтрокиДокументаXDTO Цикл 
				ЗаписатьСтрокуОтгружаемыеТовары(НайденныйДокументОбъект, СтрокаXDTO, ОтгружаемыеТоварыИзФайла, ПутьФайла);
			КонецЦикла;	
		Иначе	
			ЗаписатьСтрокуОтгружаемыеТовары(НайденныйДокументОбъект, СтрокиДокументаXDTO, ОтгружаемыеТоварыИзФайла, ПутьФайла);
		КонецЕсли;	
		
	Иначе
		
		ОтгружаемыеТоварыДокумента = ПолучитьОтгружаемыеТоварыДокументаПоУЛ(НайденныйДокументОбъект);
		
		ОтгружаемыеТоварыИзФайла = Новый ТаблицаЗначений;
		ОтгружаемыеТоварыИзФайла.Колонки.Добавить("УпаковочныйЛист");
		ОтгружаемыеТоварыИзФайла.Колонки.Добавить("КоличествоУпаковок");	
		
		Если ТипЗнч(СтрокиДокументаXDTO) = Тип("СписокXDTO") Тогда
			
			Для Каждого СтрокаXDTO Из СтрокиДокументаXDTO Цикл 
				ЗаписатьСтрокуОтгружаемыеТоварыПоУЛ(НайденныйДокументОбъект, СтрокаXDTO, ОтгружаемыеТоварыИзФайла, ПутьФайла);
			КонецЦикла;	
		Иначе	
			ЗаписатьСтрокуОтгружаемыеТоварыПоУЛ(НайденныйДокументОбъект, СтрокиДокументаXDTO, ОтгружаемыеТоварыИзФайла, ПутьФайла);
		КонецЕсли;	
		
	КонецЕсли;
																
	ОтгружаемыеТоварыОдинаковы = СравнитьТаблицыОтгружаемыхТоваров(ОтгружаемыеТоварыДокумента,
																	ОтгружаемыеТоварыИзФайла);
															
	Если ОтгружаемыеТоварыОдинаковы И НЕ ЭтоТаможенныйСклад Тогда
		ПоменятьДействиеВТабличнойЧасти(НайденныйДокументОбъект, ПутьФайла);
	ИначеЕсли НЕ ОтгружаемыеТоварыОдинаковы И НЕ ЭтоТаможенныйСклад	Тогда
		ПерезаполнитьДействиеТЧОтгружаемыеТовары(НайденныйДокументОбъект, ОтгружаемыеТоварыИзФайла, ОтгружаемыеТоварыДокумента);
	Иначе
		ЗаписатьКомментарийПересортицаИЛИНедопоставка(НайденныйДокументОбъект, ОтгружаемыеТоварыИзФайла,
											ОтгружаемыеТоварыДокумента, ОтгружаемыеТоварыОдинаковы, СкладПолучательВПарах);
	КонецЕсли;
   
КонецПроцедуры// } #wortmann

// #wortmann { 
// Процедура проверяет на одинаковость ТЧ документа и из файла и выполняет действия по алгоритму
// Галфинд_Домнышева 2023/07/31
//
// Параметры:
//  НайденныйДокументОбъект - ДокументОбъект.ПриходныйОрдерНаТовары
//  ОбъектXDTO - ОбъектXDTO 
//	ПутьФайла - Строка
Процедура ПроизвестиПроверкуТЧДокументаПО(НайденныйДокументОбъект, ОбъектXDTO, ПутьФайла)
	
	СтрокиДокументаXDTO = ОбъектXDTO.lines.line;
	
	Склад = НайденныйДокументОбъект.Склад;
	ЭтоТаможенныйСклад = ЭтоТаможенныйСклад(Склад);
	ЭтоОсновнойСклад = ЭтоОсновнойСклад(Склад);
	ЭтоСкладНедосдачи = ЭтоСкладНедосдачи(Склад); 
	Если ЭтоТаможенныйСклад Тогда
		Возврат;
	КонецЕсли;
	ОтгружаемыеТоварыИзФайла = Новый ТаблицаЗначений;
	СкладПолучательВПарах = НЕ ПроверитьЗначениеСкладВКоробах(Склад);

	Если СкладПолучательВПарах Тогда
		
		СтруОтбора = Новый Структура;
		СтруОтбора.Вставить("ЭтоУпаковочныйЛист", Ложь);
		ТоварыДокумента = НайденныйДокументОбъект.Товары.Скопировать(СтруОтбора);
		ТоварыДокумента.Свернуть("Номенклатура, Характеристика, КоличествоУпаковок");
		
		ОтгружаемыеТоварыИзФайла.Колонки.Добавить("Номенклатура");
		ОтгружаемыеТоварыИзФайла.Колонки.Добавить("Характеристика");
		ОтгружаемыеТоварыИзФайла.Колонки.Добавить("КоличествоУпаковок");	
		
		Если ТипЗнч(СтрокиДокументаXDTO) = Тип("СписокXDTO") Тогда
			
			Для Каждого СтрокаXDTO Из СтрокиДокументаXDTO Цикл 
				ЗаписатьСтрокуОтгружаемыеТовары(НайденныйДокументОбъект, СтрокаXDTO, ОтгружаемыеТоварыИзФайла, ПутьФайла);
			КонецЦикла;	
		Иначе	
			ЗаписатьСтрокуОтгружаемыеТовары(НайденныйДокументОбъект, СтрокиДокументаXDTO, ОтгружаемыеТоварыИзФайла, ПутьФайла);
		КонецЕсли;	
		
	Иначе
		
		СтруОтбора = Новый Структура;
		СтруОтбора.Вставить("ЭтоУпаковочныйЛист", Истина);
		ТоварыДокумента = НайденныйДокументОбъект.Товары.Скопировать(СтруОтбора);
		ТоварыДокумента.Свернуть("УпаковочныйЛист, КоличествоУпаковок");
		
		ОтгружаемыеТоварыИзФайла = Новый ТаблицаЗначений;
		ОтгружаемыеТоварыИзФайла.Колонки.Добавить("УпаковочныйЛист");
		ОтгружаемыеТоварыИзФайла.Колонки.Добавить("КоличествоУпаковок");	
		
		Если ТипЗнч(СтрокиДокументаXDTO) = Тип("СписокXDTO") Тогда
			
			Для Каждого СтрокаXDTO Из СтрокиДокументаXDTO Цикл 
				ЗаписатьСтрокуОтгружаемыеТоварыПоУЛ(НайденныйДокументОбъект, СтрокаXDTO, ОтгружаемыеТоварыИзФайла, ПутьФайла);
			КонецЦикла;	
		Иначе	
			ЗаписатьСтрокуОтгружаемыеТоварыПоУЛ(НайденныйДокументОбъект, СтрокиДокументаXDTO, ОтгружаемыеТоварыИзФайла, ПутьФайла);
		КонецЕсли;	
		
	КонецЕсли;	

	ОтгружаемыеТоварыОдинаковы = СравнитьТаблицыОтгружаемыхТоваров(ТоварыДокумента, ОтгружаемыеТоварыИзФайла);
	
	Если НЕ ОтгружаемыеТоварыОдинаковы Тогда
		
		УдалитьСтрокуИзТЧТовары(НайденныйДокументОбъект, ОтгружаемыеТоварыИзФайла, СкладПолучательВПарах, ТоварыДокумента);
		//ПерезаполнитьТЧОтгружаемыеТовары(НайденныйДокументОбъект, ОтгружаемыеТоварыИзФайла);
	КонецЕсли;
   
КонецПроцедуры// } #wortmann

// #wortmann { 
// Процедура проверяет на одинаковость ТЧ документа и из файла и выполняет действия по алгоритму
// Галфинд_Домнышева 2023/07/31
//
// Параметры:
//  НайденныйДокументОбъект - ДокументОбъект.ПриходныйОрдерНаТовары
//  ОтгружаемыеТоварыИзФайла - ТаблицаЗначений - заполненная ранее данными из обрабатываемого файла
//	СкладПолучательВПарах - Булево
//	ОтгружаемыеТоварыДокумента - ТаблицаЗначений - заполненная ранее данными из обрабатываемого документа
Процедура УдалитьСтрокуИзТЧТовары(НайденныйДокументОбъект, ОтгружаемыеТоварыИзФайла, СкладПолучательВПарах, ОтгружаемыеТоварыДокумента)

	ТоварыДокумента = НайденныйДокументОбъект.Товары;
	МассивСтрокКУдалению = Новый Массив();
	Если СкладПолучательВПарах Тогда
		
		Для каждого Строка Из ТоварыДокумента Цикл
			СтруктураОтбора = Новый Структура("Номенклатура, Характеристика");		
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, Строка);
			МассивНайденныхВариантов = ОтгружаемыеТоварыИзФайла.НайтиСтроки(СтруктураОтбора);
			Если МассивНайденныхВариантов.Количество() > 0 Тогда
				СтруктураКоличества = Новый Структура("Номенклатура, Характеристика, КоличествоУпаковок");
				ЗаполнитьЗначенияСвойств(СтруктураКоличества, Строка);
				МассивКоличества = ОтгружаемыеТоварыИзФайла.НайтиСтроки(СтруктураКоличества);
				Если МассивКоличества.Количество() = 0 Тогда
					// Стоит уточнить
					МассивСтрокКУдалению.Добавить(Строка);	
				КонецЕсли;	 
			Иначе
					// надо что-то делать - на уточнении у Ромы П. от 31.07.2023					
			КонецЕсли;
		КонецЦикла;
		
	Иначе 
		
		Для каждого Строка Из ОтгружаемыеТоварыДокумента Цикл
			СтруктураОтбора = Новый Структура("УпаковочныйЛист");		
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, Строка);
			МассивНайденныхВариантов = ОтгружаемыеТоварыИзФайла.НайтиСтроки(СтруктураОтбора);
			Если МассивНайденныхВариантов.Количество() > 0 Тогда
				СтруктураКоличества = Новый Структура("УпаковочныйЛист, КоличествоУпаковок");
				ЗаполнитьЗначенияСвойств(СтруктураКоличества, Строка);
				МассивКоличества = ОтгружаемыеТоварыИзФайла.НайтиСтроки(СтруктураКоличества);
				Если МассивКоличества.Количество() = 0 Тогда
					// Стоит уточнить
					НайтиСтрокиИУдалить(ТоварыДокумента, Строка.УпаковочныйЛист, МассивСтрокКУдалению);
				КонецЕсли;	 
			Иначе
					// надо что-то делать - на уточнении у Ромы П. от 31.07.2023					
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивСтрокКУдалению.Количество() > 0 Тогда
		Для каждого Строка Из МассивСтрокКУдалению Цикл
			
			ТоварыДокумента.Удалить(Строка);
			
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры// } #wortmann

// #wortmann { 
// Процедура заполняет массив строк к удалению по ТЧ документа исходя из УЛ
// Галфинд_Домнышева 2023/07/31
//
// Параметры:
//	ТоварыДокумента - ТаблицаЗначений - ТЧ Товары обрабатываемого документа
//	УпаковочныйЛист - ДокументСсылка.УпаковочныйЛист
//	МассивСтрокКУдалению - Массив
Процедура НайтиСтрокиИУдалить(ТоварыДокумента, УпаковочныйЛист, МассивСтрокКУдалению)
	  	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ЭтоУпаковочныйЛист", Ложь);
	СтруктураОтбора.Вставить("УпаковочныйЛистРодитель", УпаковочныйЛист);

	МассивНайденныхВариантов = ТоварыДокумента.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого Строка Из МассивНайденныхВариантов Цикл
		МассивСтрокКУдалению.Добавить(Строка);
	КонецЦикла;
	
КонецПроцедуры// } #wortmann

Процедура НайтиИОбработатьДокументПеремещения(НайденныйДокументОбъект, ОбъектXDTO, ПутьФайла)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПеремещениеТоваров.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ Перемещение
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
		|			ПО (ПриходныйОрдерНаТовары.Распоряжение = ПриобретениеТоваровУслуг.Ссылка)
		|		ПО ПеремещениеТоваров.ДокументОснование = ПриобретениеТоваровУслуг.Ссылка
		|ГДЕ
		|	ПриходныйОрдерНаТовары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПриходныйОрдерНаТовары.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ДокументПО
		|ИЗ
		|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
		|ГДЕ
		|	ПриходныйОрдерНаТовары.Распоряжение В
		|			(ВЫБРАТЬ
		|				Перемещение.Ссылка
		|			ИЗ
		|				Перемещение КАК Перемещение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ДокументРО
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
		|ГДЕ
		|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение В
		|			(ВЫБРАТЬ
		|				Перемещение.Ссылка
		|			ИЗ
		|				Перемещение КАК Перемещение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументПО.Ссылка КАК ДокументПО,
		|	ДокументРО.Ссылка КАК ДокументРО
		|ИЗ
		|	ДокументПО КАК ДокументПО,
		|	ДокументРО КАК ДокументРО";
	
	Запрос.УстановитьПараметр("Ссылка", НайденныйДокументОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		//НайденныйДокументОбъект.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
		Выборка.Следующий();
		
		Если Выборка.ДокументПО <> Документы.ПриходныйОрдерНаТовары.ПустаяСсылка() Тогда
			ОбъектПО = Выборка.ДокументПО.ПолучитьОбъект();
			ОбъектПО.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
			Попытка
				ОбъектПО.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Сообщение = "Документ " + Выборка.ДокументПО + " провести со статусом ""Принят"" не удалось";
				ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, Сообщение);
				ДобавитьСтрокуВТекстыОшибки(Сообщение, Истина, ПутьФайла);
			КонецПопытки;
		КонецЕсли;
		Если Выборка.ДокументРО <> Документы.ПриходныйОрдерНаТовары.ПустаяСсылка() Тогда
			ОбъектРО = Выборка.ДокументРО.ПолучитьОбъект();
			ОбъектРО.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
			
		    Попытка
				ОбъектРО.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Сообщение = "Документ " + Выборка.ДокументРО + " провести со статусом ""Отгружен"" не удалось";
				ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, Сообщение);
				ДобавитьСтрокуВТекстыОшибки(Сообщение, Истина, ПутьФайла);
			КонецПопытки;
         КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры// } #wortmann

Процедура НайтиИОбработатьДокументыПоРаспоряжению(НайденныйДокументОбъект, ОбъектXDTO) 
	
	Распоряжение = НайденныйДокументОбъект.Распоряжение; 
	
	ЭтоПеремещение = ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ПеремещениеТоваров");
	ЭтоПоступление = ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг"); 
	ЭтоРеализация = ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ЗаказКлиента");
	ЭтоВозврат = ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента");
	
КонецПроцедуры// } #wortmann

Функция СравнитьТаблицыОтгружаемыхТоваров(ОтгружаемыеТоварыДокумента, ОтгружаемыеТоварыИзФайла)
	
	ОтгружаемыеТоварыОдинаковы = Истина;
	
	ТаблицаОтличий = ОбщегоНазначенияУТ.СравнитьТаблицыЗначений(ОтгружаемыеТоварыДокумента, ОтгружаемыеТоварыИзФайла);
	
	Если ТипЗнч(ТаблицаОтличий) = Тип("ТаблицаЗначений") Тогда
		
		ОтгружаемыеТоварыОдинаковы = ТаблицаОтличий.Количество() > 0;
	КонецЕсли;
	
	Возврат ОтгружаемыеТоварыОдинаковы;
   
КонецФункции// } #wortmann

Процедура ПоменятьДействиеВТабличнойЧасти(НайденныйДокументОбъект, ПутьФайла)

	Для каждого Строка Из НайденныйДокументОбъект.ОтгружаемыеТовары Цикл
		Строка.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
	КонецЦикла;
	
	Попытка
		НайденныйДокументОбъект.Записать();
	Исключение
		Сообщение = "В документе " + НайденныйДокументОбъект.Ссылка 
					+ " не удалось поменять Действие в ТЧ Отгружаемые товары. " + ОписаниеОшибки();
					
		ДобавитьСтрокуВТекстыОшибки(Сообщение, Истина, ПутьФайла);
	КонецПопытки;
	
КонецПроцедуры// } #wortmann

// #wortmann { 
// Процедура находит нужные строки и заполняет их по ТЧ документа выбранным действием
// Галфинд_Домнышева 2023/07/31
//
// Параметры:
//	НайденныйДокументОбъект - ДокументОбъект.РасходныйОрдерНаТовары
//  ОтгружаемыеТоварыИзФайла - ТаблицаЗначений - заполненная ранее данными из обрабатываемого файла
//	ОтгружаемыеТоварыДокумента - ТаблицаЗначений - ТЧ Товары обрабатываемого документа
Процедура ПерезаполнитьДействиеТЧОтгружаемыеТовары(НайденныйДокументОбъект, ОтгружаемыеТоварыИзФайла, ОтгружаемыеТоварыДокумента) 
	
	//НайденныйДокументОбъект.ОтгружаемыеТовары.Очистить();
	
	СкладПолучательВПарах = НЕ ПроверитьЗначениеСкладВКоробах(НайденныйДокументОбъект.Склад);
	ТоварыДокумента = НайденныйДокументОбъект.ОтгружаемыеТовары;
	Если СкладПолучательВПарах Тогда
		
		Для каждого Строка Из ТоварыДокумента Цикл
			СтруктураОтбора = Новый Структура("Номенклатура, Характеристика");		
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, Строка);
			МассивНайденныхВариантов = ОтгружаемыеТоварыИзФайла.НайтиСтроки(СтруктураОтбора);
			Если МассивНайденныхВариантов.Количество() > 0 Тогда
				СтруктураКоличества = Новый Структура("Номенклатура, Характеристика, КоличествоУпаковок");
				ЗаполнитьЗначенияСвойств(СтруктураКоличества, Строка);
				МассивКоличества = ОтгружаемыеТоварыИзФайла.НайтиСтроки(СтруктураКоличества);
				Если МассивКоличества.Количество() = 0 Тогда
					// Стоит уточнить
					Строка.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.НеОтгружать;	
				Иначе
					Строка.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
				КонецЕсли;	 
			Иначе
					Строка.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.НеОтгружать;					
			КонецЕсли;
		КонецЦикла;
		
	Иначе 
		
		Для каждого Строка Из ОтгружаемыеТоварыДокумента Цикл
			СтруктураОтбора = Новый Структура("УпаковочныйЛист");		
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, Строка);
			МассивНайденныхВариантов = ОтгружаемыеТоварыИзФайла.НайтиСтроки(СтруктураОтбора);
			Если МассивНайденныхВариантов.Количество() > 0 Тогда
				СтруктураКоличества = Новый Структура("УпаковочныйЛист, КоличествоУпаковок");
				ЗаполнитьЗначенияСвойств(СтруктураКоличества, Строка);
				МассивКоличества = ОтгружаемыеТоварыИзФайла.НайтиСтроки(СтруктураКоличества);
				Если МассивКоличества.Количество() = 0 Тогда
					// Стоит уточнить
					НайтиСтрокиВТоварахПоУЛСменитьДействие(ТоварыДокумента, Строка.УпаковочныйЛист, Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.НеОтгружать);
				Иначе
					НайтиСтрокиВТоварахПоУЛСменитьДействие(ТоварыДокумента, Строка.УпаковочныйЛист, Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить);
				КонецЕсли;	 
			Иначе
					НайтиСтрокиВТоварахПоУЛСменитьДействие(ТоварыДокумента, Строка.УпаковочныйЛист, Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.НеОтгружать);					
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

	//Для каждого Строка Из ОтгружаемыеТоварыИзФайла Цикл
	//	НоваяСтрока = НайденныйДокументОбъект.ОтгружаемыеТовары.Добавить();
	//	НоваяСтрока.ЭтоУпаковочныйЛист = Истина;
	//	НоваяСтрока.УпаковочныйЛист = Строка.УпаковочныйЛист;
	//	НоваяСтрока.Количество = Строка.КоличествоУпаковок; 
	//	НоваяСтрока.КоличествоУпаковок = Строка.КоличествоУпаковок;
	//	НоваяСтрока.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
	//	
	//	ТоварыУЛ = ПолучитьСписокТоваровПоУЛ(Строка.УпаковочныйЛист);
	//	Для каждого СтрокаТоварыУЛ Из ТоварыУЛ Цикл
	//		НоваяСтрока = НайденныйДокументОбъект.ОтгружаемыеТовары.Добавить();
	//		НоваяСтрока.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
	//		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоварыУЛ);
	//	КонецЦикла;
	//КонецЦикла;
	
	НайденныйДокументОбъект.ДополнительныеСвойства.Вставить("гф_ОбменСоСкладом", Истина);
	//Документы.РасходныйОрдерНаТовары.ИзменитьТоварыПоРаспоряжениямПоОтгружаемымТоварам(НайденныйДокументОбъект, Истина);
	//ЗаполнитьСлужебныеРеквизитыТЧТовары(НайденныйДокументОбъект, "ТоварыПоРаспоряжениям", Ложь);
	//НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(НайденныйДокументОбъект);
	
КонецПроцедуры// } #wortmann 

// #wortmann { 
// Процедура заполняет строки по ТЧ документа переданным действием
// Галфинд_Домнышева 2023/07/31
//
// Параметры:
//	ТоварыДокумента - ТаблицаЗначений - ТЧ Товары обрабатываемого документа
//	УпаковочныйЛист - ДокументСсылка.УпаковочныйЛист
//	Действие - ПеречислениеСсылка.ДействияСоСтрокамиОрдеровНаОтгрузку
Процедура НайтиСтрокиВТоварахПоУЛСменитьДействие(ТоварыДокумента, УпаковочныйЛист, Действие)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ЭтоУпаковочныйЛист", Ложь);
	СтруктураОтбора.Вставить("УпаковочныйЛистРодитель", УпаковочныйЛист);

	МассивНайденныхВариантов = ТоварыДокумента.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого Строка Из МассивНайденныхВариантов Цикл
		Строка.Действие = Действие;
	КонецЦикла;
	
КонецПроцедуры// } #wortmann

Функция ПолучитьОтгружаемыеТоварыДокументаПоУЛ(НайденныйДокументОбъект)

    Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.УпаковочныйЛист КАК УпаковочныйЛист,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.КоличествоУпаковок КАК КоличествоУпаковок
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары.ОтгружаемыеТовары КАК РасходныйОрдерНаТоварыОтгружаемыеТовары
		|ГДЕ
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.ЭтоУпаковочныйЛист = Истина
		|	И РасходныйОрдерНаТоварыОтгружаемыеТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", НайденныйДокументОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтгружаемыеТоварыДокументаПоУЛ = РезультатЗапроса.Выгрузить();
	
	Возврат ОтгружаемыеТоварыДокументаПоУЛ;
	
КонецФункции// } #wortmann

Функция ПолучитьСписокТоваровПоУЛ(УпаковочныйЛист)

    Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УпаковочныйЛистТовары.Номенклатура КАК Номенклатура,
		|	УпаковочныйЛистТовары.Характеристика КАК Характеристика,
		|	УпаковочныйЛистТовары.Серия КАК Серия,
		|	УпаковочныйЛистТовары.СтатусУказанияСерий КАК СтатусУказанияСерий,
		|	УпаковочныйЛистТовары.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
		|	УпаковочныйЛистТовары.ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста КАК ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста,
		|	УпаковочныйЛистТовары.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
		|	УпаковочныйЛистТовары.УпаковочныйЛист КАК УпаковочныйЛист,
		|	УпаковочныйЛистТовары.Упаковка КАК Упаковка,
		|	УпаковочныйЛистТовары.Количество КАК Количество,
		|	УпаковочныйЛистТовары.КоличествоУпаковок КАК КоличествоУпаковок
		|ИЗ
		|	Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
		|ГДЕ
		|	УпаковочныйЛистТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", УпаковочныйЛист);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СписокТовары = РезультатЗапроса.Выгрузить();
	
	Возврат СписокТовары;

КонецФункции// } #wortmann

// #wortmann { 
// Процедура записывает новую строку в ТЗ ОтгружаемыеТоварыИзФайла по успешно найденным данным по УЛ
// Галфинд_Домнышева 2023/07/31
//
// Параметры:
//	ОбъектДокумент - ДокументОбъект.РасходныйОрдерНаТовары, ДокументОбъект.ПриходныйОрдерНаТовары
//	СтрокаXDTO - СтрокаXDTO
//  ОтгружаемыеТоварыИзФайла - ТаблицаЗначений - заполненная ранее данными из обрабатываемого файла
//	ПутьФайла - Строка
Процедура ЗаписатьСтрокуОтгружаемыеТоварыПоУЛ(ОбъектДокумент, СтрокаXDTO, ОтгружаемыеТоварыИзФайла, ПутьФайла)
	
	ВремВариантКомплектации = ПолучитьВариантКомплектации(СтрокаXDTO.Sku);
	
	Если ВремВариантКомплектации = Неопределено Тогда
		ШаблонТекста = СтрШаблон("Не найден вариант комплектации по артикулу %1.", СтрокаXDTO.Sku);
		ДобавитьСтрокуВТекстыОшибки(ШаблонТекста, Истина, ПутьФайла);
		Возврат;
	КонецЕсли;
	
	УпаковочныйЛист = НайтиУпаковочныйЛист(СтрокаXDTO.lot_string);
	Если УпаковочныйЛист = Неопределено Тогда
		ШаблонТекста = СтрШаблон("Не найден Упаковочный Лист по артикулу %1.", СтрокаXDTO.lot_string);
		ДобавитьСтрокуВТекстыОшибки(ШаблонТекста, Истина, ПутьФайла);
		Возврат;
	КонецЕсли;
	
	КоличествоУпаковок = СтрокаXDTO.picked_quantity;
		
	НоваяСтрока = ОтгружаемыеТоварыИзФайла.Добавить();
	НоваяСтрока.УпаковочныйЛист = УпаковочныйЛист;
	НоваяСтрока.КоличествоУпаковок = КоличествоУпаковок;
	
КонецПроцедуры// } #wortmann

// #wortmann { 
// Процедура записывает новую строку в ТЗ ОтгружаемыеТоварыИзФайла по успешно найденным данным по Номенклатуре
// Галфинд_Домнышева 2023/07/31
//
// Параметры:
//	ОбъектДокумент - ДокументОбъект.РасходныйОрдерНаТовары, ДокументОбъект.ПриходныйОрдерНаТовары
//	СтрокаXDTO - СтрокаXDTO
//  ОтгружаемыеТоварыИзФайла - ТаблицаЗначений - заполненная ранее данными из обрабатываемого файла
//	ПутьФайла - Строка
Процедура ЗаписатьСтрокуОтгружаемыеТовары(ОбъектДокумент, СтрокаXDTO, ОтгружаемыеТоварыИзФайла, ПутьФайла)
	
	ПозицияСлэш = СтрНайти(СтрокаXDTO.Sku, "/");
	ДлинаСтроки = СтрДлина(СтрокаXDTO.Sku);
	Артикул = Лев(СтрокаXDTO.Sku, ПозицияСлэш - 1);
	ХарактеристикаСтрока = Прав(СтрокаXDTO.Sku, ДлинаСтроки - ПозицияСлэш); 
	
	Номенклатура = ПолучитьНоменклатуруПоАртикулу(СтрокаXDTO.Sku);
	
	Если Номенклатура = Неопределено Тогда
		ШаблонТекста = СтрШаблон("Не найдена номенклатура по артикулу %1.", Артикул);
		ДобавитьСтрокуВТекстыОшибки(ШаблонТекста, Истина, ПутьФайла);
		Возврат;
	КонецЕсли;
	
	Характеристика = НайтиХарактеристику(ХарактеристикаСтрока, Номенклатура.ВидНоменклатуры);
	Если Характеристика = Неопределено Тогда
		ШаблонТекста = СтрШаблон("Не найдена харакетристика со значением %1.", ХарактеристикаСтрока);
		ДобавитьСтрокуВТекстыОшибки(ШаблонТекста, Истина, ПутьФайла);
		Возврат;
	КонецЕсли;
	
	КоличествоУпаковок = СтрокаXDTO.picked_quantity;
		
	НоваяСтрока = ОтгружаемыеТоварыИзФайла.Добавить();
	НоваяСтрока.Номенклатура = Номенклатура;
	НоваяСтрока.Характеристика = Характеристика;

	НоваяСтрока.КоличествоУпаковок = КоличествоУпаковок;
	
КонецПроцедуры// } #wortmann

Процедура ЗаполнитьСлужебныеРеквизитыТЧТовары(Объект, ИмяТЧ, Перенумеровать = Истина)
	
	Действия = Новый Структура;
	Действия.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	Действия.Вставить("ЗаполнитьПризнакТипНоменклатуры",
		Новый Структура("Номенклатура", "ТипНоменклатуры"));
	Действия.Вставить("ЗаполнитьПризнакАртикул",
		Новый Структура("Номенклатура", "Артикул"));
	
	Если ИмяТЧ = "ОтгружаемыеТовары" Тогда
		Действия.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины", 
							Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
		Действия.Вставить("ЗаполнитьВесУпаковки", Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
		Действия.Вставить("ЗаполнитьОбъемУпаковки", Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
		Действия.Вставить("ЗаполнитьЕдиницуИзмеренияВеса",
							Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияВеса"));
		Действия.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема", 
							Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияОбъема"));
		ОбработкаТабличнойЧастиКлиентСерверЛокализация.ДополнитьСтруктуруДействийПриИзмененииЭлемента(ЭтотОбъект,
																						"Номенклатура", Действия);		
	
		//УпаковочныеЛистыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма, Объект.ОтгружаемыеТовары, Действия, ,Перенумеровать);
	Иначе
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ТоварыПоРаспоряжениям, Действия);
	КонецЕсли;
	
	Если ИмяТЧ = "ОтгружаемыеТовары" Тогда
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьВесОбъем");
		
		Для Каждого СтрокаТЧ Из Объект.ОтгружаемыеТовары Цикл
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, Неопределено);
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры// } #wortmann

Функция НайтиУпаковочныйЛист(НомерУпаковочногоЛиста)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УпаковочныйЛист.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
		|ГДЕ
		|	УпаковочныйЛист.Код = &Код";
	
	Запрос.УстановитьПараметр("Код", НомерУпаковочногоЛиста);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка.Следующий(); 
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
  
КонецФункции// } #wortmann

Функция ПолучитьВариантКомплектации(Наименование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВариантыКомплектацииНоменклатуры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
		|ГДЕ
		|	ВариантыКомплектацииНоменклатуры.Наименование = &Наименование";
		
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка.Следующий(); 
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции// } #wortmann

Процедура ЗаписатьКомментарийПересортицаИЛИНедопоставка(НайденныйДокументОбъект, ОтгружаемыеТоварыИзФайла,
								ОтгружаемыеТоварыДокумента, ОтгружаемыеТоварыОдинаковы, СкладПолучательВПарах) 
														
	Если ОтгружаемыеТоварыОдинаковы Тогда
		Возврат;
	КонецЕсли;
	
	Если СкладПолучательВПарах Тогда
		 МассивСтрокДляКомментария = ПолучитьМассивСтрокПоТоварам(ОтгружаемыеТоварыИзФайла, ОтгружаемыеТоварыДокумента);
	 Иначе
		 МассивСтрокДляКомментария = ПолучитьМассивСтрокПоУЛ(ОтгружаемыеТоварыИзФайла, ОтгружаемыеТоварыДокумента); 
	 КонецЕсли; 
	 
	Комментарий = СтрСоединить(МассивСтрокДляКомментария, "; ");
	НайденныйДокументОбъект.Комментарий = Комментарий;
	 
КонецПроцедуры// } #wortmann	 

Функция ПолучитьМассивСтрокПоТоварам(ОтгружаемыеТоварыИзФайла, ОтгружаемыеТоварыДокумента)
	// по каждой строке определяем соответствие с ТЧ
	МассивСтрок = Новый Массив;		
	
	Для каждого Строка Из ОтгружаемыеТоварыИзФайла Цикл
		СтруктураОтбора = Новый Структура("Номенклатура, Характеристика");		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, Строка);
		МассивНайденныхВариантов = ОтгружаемыеТоварыДокумента.НайтиСтроки(СтруктураОтбора);
		Если МассивНайденныхВариантов.Количество() > 0 Тогда
			СтруктураКоличества = Новый Структура("Номенклатура, Характеристика, КоличествоУпаковок");
			ЗаполнитьЗначенияСвойств(СтруктураКоличества, Строка);
			МассивКоличества = ОтгружаемыеТоварыДокумента.НайтиСтроки(СтруктураКоличества);
			Если МассивКоличества.Количество() = 0 Тогда
				Разница = МассивНайденныхВариантов[0].КоличествоУпаковок - Строка.КоличествоУпаковок;
				Сообщение = ?(Разница > 0, "По " + Строка.Номенклатура + "/" + Строка.Характеристика + " недосчитались " + Разница + " пар.",
				"Есть пересортица по " + Строка.Номенклатура + "/" + Строка.Характеристика + "в количестве " + (-Разница) + " пар."); 
				МассивСтрок.Добавить(Сообщение);
			КонецЕсли;	 
		Иначе
			Сообщение = "По " + Строка.Номенклатура + "/" + Строка.Характеристика + " недосчитались " + Строка.КоличествоУпаковок + " пар.";
			МассивСтрок.Добавить(Сообщение);					
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрТекущая Из ОтгружаемыеТоварыДокумента Цикл
		СтруктураОтбора = Новый Структура("Номенклатура, Характеристика");		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрТекущая);
		МассивНайденныхВариантов = ОтгружаемыеТоварыИзФайла.НайтиСтроки(СтруктураОтбора);
		Если МассивНайденныхВариантов.Количество() = 0 Тогда
			Сообщение = "По " + Строка.Номенклатура + "/" + Строка.Характеристика + " недосчитались " + Разница + " пар.";
			МассивСтрок.Добавить(Сообщение);					
		КонецЕсли;
	КонецЦикла;	
	
	Возврат МассивСтрок;
														
КонецФункции// } #wortmann 

Функция ПолучитьМассивСтрокПоУЛ(ОтгружаемыеТоварыИзФайла, ОтгружаемыеТоварыДокумента)
	// по каждой строке определяем соответствие с ТЧ
	МассивСтрок = Новый Массив;		
	
	Для каждого Строка Из ОтгружаемыеТоварыИзФайла Цикл
		СтруктураОтбора = Новый Структура("УпаковочныйЛист");		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, Строка);
		МассивНайденныхВариантов = ОтгружаемыеТоварыДокумента.НайтиСтроки(СтруктураОтбора);
		Если МассивНайденныхВариантов.Количество() > 0 Тогда
			СтруктураКоличества = Новый Структура("УпаковочныйЛист, КоличествоУпаковок");
			ЗаполнитьЗначенияСвойств(СтруктураКоличества, Строка);
			МассивКоличества = ОтгружаемыеТоварыДокумента.НайтиСтроки(СтруктураКоличества);
			Если МассивКоличества.Количество() = 0 Тогда
				Разница = МассивНайденныхВариантов[0].КоличествоУпаковок - Строка.КоличествоУпаковок;
				Сообщение = ?(Разница > 0, "По " + Строка.Номенклатура + "/" + Строка.Характеристика + " недосчитались " + Разница + " упак.",
				"Есть пересортица по " + Строка.Номенклатура + "/" + Строка.Характеристика + "в количестве " + (-Разница) + " упак."); 
				МассивСтрок.Добавить(Сообщение);
			КонецЕсли;	 
		Иначе
			Сообщение = "По " + Строка.Номенклатура + "/" + Строка.Характеристика + " недосчитались " + Строка.КоличествоУпаковок + " упак.";
			МассивСтрок.Добавить(Сообщение);					
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрТекущая Из ОтгружаемыеТоварыДокумента Цикл
		СтруктураОтбора = Новый Структура("УпаковочныйЛист");		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрТекущая);
		МассивНайденныхВариантов = ОтгружаемыеТоварыИзФайла.НайтиСтроки(СтруктураОтбора);
		Если МассивНайденныхВариантов.Количество() = 0 Тогда
			Сообщение = "По " + Строка.Номенклатура + "/" + Строка.Характеристика + " недосчитались " + Разница + " упак.";
			МассивСтрок.Добавить(Сообщение);					
		КонецЕсли;
	КонецЦикла;	
	
	Возврат МассивСтрок;
														
КонецФункции// } #wortmann
													
Функция ПреобразоватьМассивФайлов(МассивЗагружаемыхФайлов, РасходныйОрдер = Ложь)

	Если РасходныйОрдер Тогда
		ИскомыйСимвол = "SO";
	Иначе ИскомыйСимвол = "PO";
	КонецЕсли;
	
	ТаблицаВозврата = МассивЗагружаемыхФайлов.СкопироватьКолонки();
	 
	Для каждого Файл Из МассивЗагружаемыхФайлов Цикл
		Если СтрНайти(Файл.ИмяФайла, ИскомыйСимвол) <> 0 Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаВозврата.Добавить(), Файл); 
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаВозврата;

КонецФункции// } #wortmann

Функция ПолучитьДокумент(ОбъектXDTO, ИмяФайла, РасходныйОрдер)
	
	Суффикс = "_";	

	ДатаДокумента  = ПолучитьДатуИзСтроки(ОбъектXDTO.header.created_date);
	// 3 - количество цифр в коде клиента
	НомерДокумента = Прав(ОбъектXDTO.header.doc_number, СтрДлина(ОбъектXDTO.header.doc_number) - 3);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходныйОрдерНаТовары.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
		|ГДЕ
		|	РасходныйОрдерНаТовары.Дата МЕЖДУ &НачалоДня И &КонецДня
		|	И РасходныйОрдерНаТовары.Номер = &Номер";
	
	Если Не РасходныйОрдер Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РасходныйОрдерНаТовары", "ПриходныйОрдерНаТовары");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПриходныйОрдерНаТовары.Дата МЕЖДУ &НачалоДня И &КонецДня
		|	И ПриходныйОрдерНаТовары.Номер = &Номер", "ПриходныйОрдерНаТовары.Распоряжение.Дата МЕЖДУ &НачалоДня И &КонецДня
		|	И ПриходныйОрдерНаТовары.Распоряжение.Номер = &Номер"); 
		НомерДокумента = Прав(ОбъектXDTO.header.doc_number, СтрДлина(ОбъектXDTO.header.doc_number) );
	КонецЕсли;
	Если РасходныйОрдер И СтрНайти(ИмяФайла, "BL") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РасходныйОрдерНаТовары", "КорректировкаНазначенияТоваров");
	КонецЕсли;	
	Запрос.УстановитьПараметр("КонецДня", КонецДня(ДатаДокумента));
	Запрос.УстановитьПараметр("НачалоДня", НачалоДня(ДатаДокумента));
	Запрос.УстановитьПараметр("Номер", НомерДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка.Следующий();
		НайденныйДокументСсылка = Выборка.Ссылка;
		НайденныйДокументОбъект = НайденныйДокументСсылка.ПолучитьОбъект(); 
		Возврат НайденныйДокументОбъект;
	Иначе
		Сообщение = "По названию файла " + ИмяФайла + " не найден документ" 
		+ ?(РасходныйОрдер, ?(СтрНайти(ИмяФайла, "BL"), "Корректировка назначения товаров", "Расходный ордер"), "Приходный ордер") 
		+ ". Файл перемещён в архив.";
		ДобавитьСтрокуВТекстыОшибки(Сообщение, Истина, ИмяФайла);
		Возврат Неопределено;
	КонецЕсли;

КонецФункции// } #wortmann

// #wortmann { 
// Функция находит Номенклатуру по артикулу из обрабатываемого файла
// Галфинд_Домнышева 2023/07/31
//
// Параметры:
//	Артикул - Строка
//
// Возвращаемое значение:
//	СправочникСсылка.Номенклатура - результат запроса
Функция ПолучитьНоменклатуруПоАртикулу(Артикул) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Артикул = &Артикул";
	
	Запрос.УстановитьПараметр("Артикул", Артикул);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции// } #wortmann

// #wortmann { 
// Функция находит Характеристику по ее строковому значению из обрабатываемого файла 
// ВидуНоменклатуры из Найденной Номенклатуры
// Галфинд_Домнышева 2023/07/31
//
// Параметры:
//	ХарактеристикаСтрока - Строка
//	ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры
//
// Возвращаемое значение:
//	СправочникСсылка.ХарактеристикиНоменклатуры - результат запроса
Функция НайтиХарактеристику(ХарактеристикаСтрока, ВидНоменклатуры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Характеристики.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК Характеристики
		|ГДЕ
		|	Характеристики.Наименование = &Наименование
		|	И Характеристики.ВидНоменклатуры = &ВидНоменклатуры";
	
	Запрос.УстановитьПараметр("Наименование", ХарактеристикаСтрока);
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции// } #wortmann

Функция ПолучитьДатуИзСтроки(Стр) 

	Массив = СтрРазделить(Стр, " ");
	МассивДень = СтрРазделить(массив[0], "-");
	МассивВремя = СтрРазделить(массив[1], ":");
	
	Дата = Дата(МассивДень[0], МассивДень[1], МассивДень[2], МассивВремя[0], МассивВремя[1], МассивВремя[2]);
	
	Возврат Дата;

КонецФункции// } #wortmann

Процедура УпорядочитьФайлыПоДатеСоздания(МассивФайлов)
	
	МассивФайлов.Колонки.Добавить("Тип", Новый ОписаниеТипов("Число"));
	
	Для Каждого ЭлементМассива Из МассивФайлов Цикл
		НачалоМеткиВремени = 0; 
		КонецМеткиВремени = 0;
		// разбираю имя файла справа, пока не найду точку - это будет символ за конечным символом даты,
		// дальше ищется символ подчеркивания - следующая позиция - начальный символ определения даты.
		Если Не ЗначениеЗаполнено(ЭлементМассива.ДатаПолучения) Тогда
			ЭлементМассива.ДатаПолучения = ПолучитьДатуИзИмениФайла(ЭлементМассива.ИмяФайла);
		КонецЕсли;
		
		Если СтрНайти(Врег(ЭлементМассива.ИмяФайла), "PO") > 0 Тогда
			ЭлементМассива.Тип = 0;
		ИначеЕсли СтрНайти(ВРег(ЭлементМассива.ИмяФайла), "SO") > 0 Тогда
			ЭлементМассива.Тип = 1;
		ИначеЕсли СтрНайти(ВРег(ЭлементМассива.ИмяФайла), "INV") > 0 Тогда
			ЭлементМассива.Тип = 2;
		Иначе
			ЭлементМассива.Тип = 100;
		КонецЕсли;
	КонецЦикла;
	
	МассивФайлов.Сортировать("Тип, ДатаПолучения, ИмяФайла");
	
КонецПроцедуры// } #wortmann

Процедура ПереместитьФайлВАрхив(ИмяФайла)
	
	Файл = Новый Файл(ИмяФайла);
	Путь = Файл.Путь + "Archive\";
	
	Каталог = Новый Файл(Путь);
	Если Не Каталог.Существует() Тогда
		СоздатьКаталог(Путь);
	КонецЕсли;
	
	ПереместитьФайл(ИмяФайла, Путь + Файл.Имя);
	
КонецПроцедуры// } #wortmann

// Функция проверяет имеется ли в системе документ ДанныеЗагрузки для файла с таким именем
//
Функция ЗагружалсяЛиФайл(ИмяФайла) Экспорт  
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	1
	|ИЗ
	|	Документ.гф_ДанныеЗагрузкиПоОбмену КАК ДанныеЗагрузки
	|ГДЕ
	|	ДанныеЗагрузки.ИмяФайла ПОДОБНО &ИмяФайла
	|	И НЕ ДанныеЗагрузки.ПометкаУдаления
	|	И ДанныеЗагрузки.СтатусДокумента <> Значение(Перечисление.гф_СтатусыДокументаЗагрузкиWMS.Отработан)");
	Запрос.УстановитьПараметр("ИмяФайла", ИмяФайла);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции// } #wortmann

Функция ПолучитьТекстФайла(ИмяФайла)
	текст = Новый ЧтениеТекста(ИмяФайла, "utf8");
	Возврат текст.Прочитать();
КонецФункции// } #wortmann

Функция ПолучитьДатуИзИмениФайла(ИмяФайла)
	
	ДлинаИмени = СтрДлина(ИмяФайла);
	
	// чтобы найти описание даты в имени, нахожу самый правый символ "-", от него влево 17 симоволов - это дата.
	// для разных конфигураций определние даты может отличаться !!!!
	Индекс = ДлинаИмени - 4; // минимум 4 символа расширения можно пробросить
	
	Пока Индекс Цикл
		Если Сред(ИмяФайла, Индекс, 1) = "-" Тогда
			Прервать;
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Индекс = Индекс - 15;
	
	Попытка
		ДатаРезультат = Дата(
		Сред(ИмяФайла, Индекс, 4),
		Сред(ИмяФайла, Индекс + 4, 2),
		Сред(ИмяФайла, Индекс + 6, 2),
		Сред(ИмяФайла, Индекс + 9, 2),
		Сред(ИмяФайла, Индекс + 11, 2),
		Сред(ИмяФайла, Индекс + 13, 2));
	Исключение
		// если дата не будет распознана - вернется пустая дата
		ДатаРезультат = Дата(1, 1, 1, 0, 0, 0);
	КонецПопытки;
	
	Возврат ДатаРезультат;
	
КонецФункции// } #wortmann

Процедура УдалитьФайлыНаФТП(МассивИменЗагруженныхФайлов, НастройкиFTPСоединения) 
	
	
	//
	//	Соединение.Удалить(СтрокаФайлFTP.Файл.ПолноеИмя);
	//		Если Соединение.НайтиФайлы(СтрокаФайлFTP.Файл.ПолноеИмя).Количество() <> 0 Тогда
	//			ЛИТ_ОбменДанными.ЛИТ_ЗаписатьСообщение("Ошибка удаления файла " + ФайлДляОбработки.Имя + " с ftp-сервера!", Истина);
	//		КонецЕсли;

	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//Отказ = Ложь;
	//session = _омОбщегоНазначенияВызовСервера.ПолучитьСоединениеSFTP(НастройкиFTPСоединения, Отказ);
	//
	//Если session = Неопределено Тогда
	//	Сообщение = "Не удалось установить соединение, загрузка прекращена.";
	//	//ЗаписатьВПротокол(Сообщение, 4);
	//	Возврат;
	//КонецЕсли;
	//
	//Попытка
	//	
	//Для Каждого ИмяФайла Из МассивИменЗагруженныхФайлов Цикл 
	//		
	//	ПредставлениеФайла = ПредставлениеКаталогаНаФТП + ИмяФайла; 
	//	session.RemoveFiles(ПредставлениеФайла);
	//		
	//	Сообщение = "Удален файл: " + ПредставлениеФайла;
	//		
	//	КонецЦикла;
	//    
	//Исключение 
	//	Сообщение = "Ошибка получения файлов. Описание ошибки: " + ОписаниеОшибки();
	//	Возврат;
	//КонецПопытки;
	//
	////Разрываем соединение
	//session.Dispose();  

КонецПроцедуры// } #wortmann

#КонецОбласти

#Область Общая

// #wortmann { 
// Процедура добавляет в РС гф_ОшибкиЗагрузки запись
// Галфинд_Домнышева 2023/07/07
//
// Параметры:
//  Сообщение - Строка - сообщение с ошибкой
//  Ошибка - Булево 
//  ИмяФайлаБезПути - Строка - имя файла
Процедура ЗаписатьСообщениеОшибки(Сообщение, Ошибка, ИмяФайлаБезПути)
	
	Попытка
		Запись = РегистрыСведений.гф_ОшибкиЗагрузки.СоздатьМенеджерЗаписи();
		Запись.Дата = ТекущаяДатаСеанса();
		Запись.Номер = "000";
		Запись.ТекстОшибки = Сообщение; 
		Запись.Интерфейс = Перечисления.гф_Интерфейсы.WMS;
		Запись.ТипИнформации = ?(Ошибка, "Ошибка", "Информация");
		Запись.Организация = Справочники.Организации.ПустаяСсылка(); 
		Запись.ПутьФайла = ИмяФайлаБезПути;
		Запись.Записать();
	Исключение
		ЗаписьЖурналаРегистрации("Предупреждение", УровеньЖурналаРегистрации.Предупреждение, ЭтотОбъект, ЭтотОбъект, 
								"Не удалось произвести запись сообщения в ""РС Ошибки загрузки""");
	КонецПопытки; 
	
КонецПроцедуры// } #wortmann 

// #wortmann { 
// Заносит записи в РС гф_ОшибкиЗагрузки из ТЗ ТекстыОшибок 
// Галфинд_Домнышева КР 2023/07/07
//
// Параметры:
//	ТекстыОшибок - ТаблицаЗначений 
Процедура ЗаписатьОшибку(ТекстыОшибок)

	ТекущаяДата = ТекущаяДатаСеанса(); 
	Попытка	
		НаборЗаписей = РегистрыСведений.гф_ОшибкиЗагрузки.СоздатьНаборЗаписей(); 
		
		НаборЗаписей.Отбор.Интерфейс.Установить(Перечисления.гф_Интерфейсы.WMS);
		НаборЗаписей.Прочитать();
		
		ТекущиеЗначения = НаборЗаписей.Выгрузить();                             
		
		Для Каждого Строка Из ТекстыОшибок Цикл
				НоваяЗапись = ТекущиеЗначения.Добавить(); 
				НоваяЗапись.Дата = ТекущаяДата;
				НоваяЗапись.ПутьФайла = Строка.ПутьФайла; 
				НоваяЗапись.Номер =  Строка(ТекущиеЗначения.Количество());
				НоваяЗапись.ТекстОшибки = Строка.ТекстОшибки;
				НоваяЗапись.Организация = Строка.Организация;
				НоваяЗапись.Интерфейс = Перечисления.гф_Интерфейсы.WMS;
				НоваяЗапись.ТипИнформации = Строка.ТипИнформации;
		КонецЦикла;
		НаборЗаписей.Загрузить(ТекущиеЗначения);
		НаборЗаписей.Записать(); 
		
	Исключение
		СообщениеОбОшибке = "Ошибка при записи файла " + Строка.ПутьФайла  
		+ ". Описание ошибки: Не удалось загрузить ТекстОшибки в РС гф_ОшибкиЗагрузки. " + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);		
	КонецПопытки;

КонецПроцедуры// } #wortmann

// #wortmann { 
// Заполняет ТЗ ТекстыОшибок 
// Галфинд_Домнышева КР 2023/07/07
//
// Параметры:
//	СообщениеОбОшибке - Строка - текущая ошибка
//  Ошибка - Булево
//	ПутьФайла - Строка
Процедура ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке, Ошибка, ПутьФайла)

	СтрокаОшибки = ТекстыОшибок.Добавить();
	СтрокаОшибки.ПутьФайла = ПутьФайла;
	СтрокаОшибки.ТекстОшибки = СообщениеОбОшибке;
	СтрокаОшибки.Организация = Организация;
	СтрокаОшибки.ТипИнформации = ?(Ошибка, "Ошибка", "Информация");
			
КонецПроцедуры// } #wortmann

#КонецОбласти

#Область Инициализация
// Этой переменной регулируем количество "холостых" итераций цикла -
// тем самым устанавливаем интервал задержки до повторной попытки соединения
// после разрыва почтового соединения с почтовым сервером извне.
ИнтервалЗадержкиПодключенияПослеНеудачи = 1000;   
#КонецОбласти

#КонецЕсли