#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных
Перем ЛогВыполненияОбработки;
Перем Соединение;
Перем СкладПолучательВПарах;
Перем СкладОтправительВПарах;
Перем ЭтоОсновнойСклад;
Перем КодКлиента;
Перем Организация;
Перем КодОрганизации;
Перем ЭтоПеремещение;
Перем ЭтоВозврат;
Перем ЭтоПоступление;
Перем ЭтоРеализация;
Перем СкладМаркетплейса;
Перем ЭтоТаможенныйСклад;
Перем КодКонтрагента; 
Перем Артикулы;
Перем Выборка;
#КонецОбласти

#Область ВыгрузкаДанных

// #wortmann { 
// Процедура обрабатывает массивы документв для выгрузки данных на сервер WMS 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//  МассивДокументовРасход - Массив - массив из элементов ДокументСсылка.РасходныйОрдерНаТовары
//  МассивДокументовПриход - Массив - массив из элементов ДокументСсылка.ПриходныйОрдерНаТовары
Процедура ВыгрузитьДанные (МассивДокументовРасход = Неопределено, МассивДокументовПриход = Неопределено) Экспорт
	
	Перем ИмяФайлаБезПути, ИмяФайла;
	
	ЛогВыполненияОбработки = РегистрыСведений.гф_ОшибкиЗагрузки.СоздатьНаборЗаписей();
	ОбновитьДанныеВДанныеВыгрузки();
	
	// Если это регламентная задача, то выполняем поиск необходимых документов в РС гф_ДанныеВыгрузки
	Если МассивДокументовРасход = Неопределено И МассивДокументовПриход = Неопределено Тогда 
		
		МассивДокументовРасход = ПолучитьМассивДокументов(Истина); 
		МассивДокументовПриход = ПолучитьМассивДокументов(Ложь);
	
	КонецЕсли;	
	
	НастройкиFTPСоединения = _омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначениеFTP("FTP_НастройкиДляВыгрузкиВWMS");
	
	Если НастройкиFTPСоединения.ЕстьДанные <> Истина Тогда
		Сообщение = "Не заданы настройки подключния к ftp-серверу.";
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, Сообщение);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ТекущаяДатаСеанса(), "ДЛФ=T") + ". " + Сообщение);
		
		Возврат;
	КонецЕсли;
	
	// то ли открывать соединение SFTP тут и закрывать в самом конце (но это долго...)
	// то ли в конце прописать процедуру переброски файлов с локального каталога (куда
	// их и записывать) на SFTP.
	
	
	Для каждого Документ из  МассивДокументовРасход Цикл
		
		Контрагент = Документ.Получатель;
		КодОрганизации = Документ.Склад.гф_Организация.Префикс;
		
		Склад = Документ.Склад;
		Организация = Документ.Склад.гф_Организация;
		СкладМаркетплейса = ПроверитьЗначениеСкладМаркетплейс(Склад); 
		СкладОтправительВПарах = НЕ ПроверитьЗначениеСкладВКоробах(Склад);
		//ОтправительСерийныйНомерВместоКМ = ИспользоватьСерийныйНомерВместоКМ(Склад);
		Если СкладМаркетплейса Тогда
			Сообщение = "У документа " + Документ + " стоит значение ""Склад маркетплейс""";
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, Сообщение);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ТекущаяДата(), "ДЛФ=T") + ". " + Сообщение);
			
			Продолжить;
		КонецЕсли;
		Распоряжение = ПолучитьСвязанныйДокументРО(Документ);
		ЭтоПеремещение = ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ПеремещениеТоваров");
		ЭтоПоступление = ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг"); // не удаляй - ниже есть общая процедура проверяющая этот параметр
		ЭтоРеализация = ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ЗаказКлиента");
		ЭтоВозврат = ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента");
		
		ЭтоТаможенныйСклад = ЭтоТаможенныйСклад(Склад);
		ЭтоОсновнойСклад = ЭтоОсновнойСклад(Склад);
		//ЭтоСвободныйСклад = Склад = Справочники.w_Настройки.СкладСвободныеОстатки.Значение;
		//ЭтоСкладТранзитБезРезерва = ЭтоСкладТранзитБезРезерва(Склад);
		//ЭтоСкладРазукомплектации = ЭтоСкладРазукомплектации(Склад);
		//
		НомерСообщения = строка(новый УникальныйИдентификатор);
		Пакет = ПолучитьПакетРасхода(ИмяФайлаБезПути, ИмяФайла, НомерСообщения, Документ, НастройкиFTPСоединения);
		ЗаписатьОтправитьПакет(Пакет, ИмяФайлаБезПути, ИмяФайла, НомерСообщения, Перечисления.гф_ВидыДанныхДляВыгрузки.Документ, Документ, НастройкиFTPСоединения);
		
	КонецЦикла;
	
	Для каждого Документ из  МассивДокументовПриход Цикл
		
		Склад = Документ.Склад;
		Организация = Документ.Склад.гф_Организация;
		СкладМаркетплейса = ПроверитьЗначениеСкладМаркетплейс(Склад);
		СкладПолучательВПарах = НЕ ПроверитьЗначениеСкладВКоробах(Склад);
		Если СкладМаркетплейса Тогда
			Сообщение = "У документа " + Документ + " стоит значение ""Склад маркетплейс""";
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, Сообщение);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ТекущаяДата(), "ДЛФ=T") + ". " + Сообщение);
			
			Продолжить;
		КонецЕсли;
		
		СкладОтправительВПарах = НЕ ПроверитьЗначениеСкладВКоробах(Склад);
        ЭтоПеремещение = ТипЗнч(Документ.Распоряжение) = Тип("ДокументСсылка.ПеремещениеТоваров");
		ЭтоПоступление = ТипЗнч(Документ.Распоряжение) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг");
		ЭтоРеализация = ТипЗнч(Документ.Распоряжение) = Тип("ДокументСсылка.РеализацияТоваровУслуг"); // не удаляй - ниже есть общая процедура проверяющая этот параметр
		ЭтоВозврат = ТипЗнч(Документ.Распоряжение) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента");

		ЭтоТаможенныйСклад = ЭтоТаможенныйСклад(Склад);
		ЭтоОсновнойСклад = ЭтоОсновнойСклад(Склад);
		//ЭтоСвободныйСклад = Склад = Справочники.w_Настройки.СкладСвободныеОстатки.Значение;
		//ЭтоСкладТранзитБезРезерва = ЭтоСкладТранзитБезРезерва(Склад);
		//ЭтоСкладРазукомплектации = ЭтоСкладРазукомплектации(Склад);
		//
		НомерСообщения = строка(новый УникальныйИдентификатор);
		Пакет = ПолучитьПакетПрихода(ИмяФайлаБезПути, ИмяФайла, НомерСообщения, Документ, НастройкиFTPСоединения);
		ЗаписатьОтправитьПакет(Пакет, ИмяФайлаБезПути, ИмяФайла, НомерСообщения, Перечисления.гф_ВидыДанныхДляВыгрузки.Документ, Документ, НастройкиFTPСоединения);
		
	КонецЦикла;
	
	ЛогВыполненияОбработки.Записать();
	
КонецПроцедуры 

// #wortmann { 
// Процедура подбирает документы со статусом "КПоступлению" для ДокументСсылка.ПриходныйОрдерНаТовары
// и статусом "Подготовлено" для ДокументСсылка.РасходныйОрдерНаТовары
// Галфинд_Домнышева 2022/12/01
//
Процедура ОбновитьДанныеВДанныеВыгрузки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриходныйОрдерНаТовары.Ссылка КАК Документ
		|ИЗ
		|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
		|ГДЕ
		|	ПриходныйОрдерНаТовары.Статус = &СтатусПО
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	РасходныйОрдерНаТовары.Ссылка
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
		|ГДЕ
		|	РасходныйОрдерНаТовары.Статус = &СтатусРО";
	
	Запрос.УстановитьПараметр("СтатусПО", Перечисления.СтатусыПриходныхОрдеров.КПоступлению);
	Запрос.УстановитьПараметр("СтатусРО", Перечисления.СтатусыРасходныхОрдеров.Подготовлено);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Не РезультатЗапроса.Пустой() Тогда
		МассивДокументов = Новый Массив;
		Пока Выборка.Следующий() Цикл
			
			МассивДокументов.Добавить(Выборка.Документ);
			
		КонецЦикла;
		СделатьОбновитьЗаписьДанныхВыгрузки(МассивДокументов)
	КонецЕсли;
  
КонецПроцедуры 

// #wortmann { 
// Процедура обновляет или вносит новую запись в РС гф_ДанныеВыгрузки
// Галфинд_Домнышева 2022/12/01
//
Процедура СделатьОбновитьЗаписьДанныхВыгрузки(МассивДокументов)
	
	Дата = ТекущаяДатаСеанса();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	гф_ДанныеВыгрузки.Период КАК Период,
		|	гф_ДанныеВыгрузки.ВидДанных КАК ВидДанных,
		|	гф_ДанныеВыгрузки.Документ КАК Документ,
		|	гф_ДанныеВыгрузки.НомерСообщения КАК НомерСообщения,
		|	гф_ДанныеВыгрузки.Состояние КАК Состояние,
		|	гф_ДанныеВыгрузки.ИмяФайла КАК ИмяФайла
		|ИЗ
		|	РегистрСведений.гф_ДанныеВыгрузки КАК гф_ДанныеВыгрузки
		|ГДЕ
		|	гф_ДанныеВыгрузки.Документ В(&МассивДокументов)
		|	И гф_ДанныеВыгрузки.Состояние = &Состояние
		|	И гф_ДанныеВыгрузки.ВидДанных = &ВидДанных";
	
	Запрос.УстановитьПараметр("ВидДанных", Перечисления.гф_ВидыДанныхДляВыгрузки.Документ);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("Состояние", Перечисления.гф_СтатусыВыгрузкиДанных.ГотовоКОтправке);
	
	РезультатЗапроса = Запрос.Выполнить();
	МассивНеВнесенныхДокументов = Новый Массив;
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		МассивДокументовНайденныхВРС = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Документ");
		
		
		Для каждого Элемент из МассивДокументов Цикл 
			ИндексЭлемента = ВернутьИндексВМассиве(МассивДокументовНайденныхВРС, Элемент);
			Если ИндексЭлемента = -1 Тогда  
				МассивНеВнесенныхДокументов.Добавить(Элемент);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Документ из МассивНеВнесенныхДокументов Цикл
			Запись = РегистрыСведений.гф_ДанныеВыгрузки.СоздатьМенеджерЗаписи();
			Запись.Период = Дата;
			Запись.ВидДанных = Перечисления.гф_ВидыДанныхДляВыгрузки.Документ;
			Запись.Документ = Документ;
			Запись.Состояние = Перечисления.гф_СтатусыВыгрузкиДанных.ГотовоКОтправке;
			Запись.Записать();
		КонецЦикла;
		
		//ДанныеРавны = ОбщегоНазначения.СравнитьМассивы(МассивДокументов, МассивДокументовНайденныхВРС);
		//
		//Если ДанныеРавны Тогда
		//	Пока Выборка.Следующий() Цикл 
		//		Если не Выборка.Период = Дата Тогда
		//			Запись = РегистрыСведений.гф_ДанныеВыгрузки.СоздатьМенеджерЗаписи();
		//			Запись.ВидДанных = Перечисления.гф_ВидыДанныхДляВыгрузки.Документ;
		//			Запись.Документ = Выборка.Документ;
		//			Запись.Период = Выборка.Период;
		//			Запись.Прочитать();
		//			Если Запись.Выбран() Тогда
		//				Запись.Период = Дата;
		//				Запись.Записать();
		//			КонецЕсли;
		//			
		//		КонецЕсли;
		//	КонецЦикла;
		//КонецЕсли;
	Иначе
		Для каждого Документ из МассивДокументов Цикл
			Запись = РегистрыСведений.гф_ДанныеВыгрузки.СоздатьМенеджерЗаписи();
			Запись.Период = Дата;
			Запись.ВидДанных = Перечисления.гф_ВидыДанныхДляВыгрузки.Документ;
			Запись.Документ = Документ;
			Запись.Состояние = Перечисления.гф_СтатусыВыгрузкиДанных.ГотовоКОтправке;
			Запись.Записать();
		КонецЦикла;
	КонецЕсли;                            
			                                          
КонецПроцедуры

// #wortmann { 
// Функция ищет индекс элемента в Массиве
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	МассивДанные - Массив - массив элементами которого являются ДокументСсылка.* внесенные в РС гф_ДанныеВыгрузки 
//	Элемент - ДокументСсылка.* - Значение из Массива загружаемых документов
//
// Возвращаемое значение:
//	ИндексЭлемента - ДокументОбъект.ЗаказКлиента - Создаваемый документ 
//	"-1" - если не нашли элемент или МассивДанные = Неопределено 
Функция ВернутьИндексВМассиве(МассивДанные, Элемент) Экспорт 
	
	Если МассивДанные = Неопределено Тогда
		Возврат -1;
	КонецЕсли;
	
	Для ИндексЭлемента = 0 По МассивДанные.ВГраница() Цикл
		
		Если  (МассивДанные[ИндексЭлемента] = Элемент) Тогда
			Возврат ИндексЭлемента;
		КонецЕсли;	
		
	КонецЦикла;
	
	// не нашли элемент
	Возврат -1;
	
КонецФункции   

// #wortmann { 
// Функция формирует массив документов РасходныйОрдерНаТовары или ПриходныйОрдерНаТовары
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	РасходныйОрдер - Булево 
//
// Возвращаемое значение:
//	МассивДокументов - Массив - из ДокументСсылка.РасходныйОрдерНаТовары или ДокументСсылка.ПриходныйОрдерНаТовары 
Функция ПолучитьМассивДокументов(РасходныйОрдер) 
	
	  Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	гф_ДанныеВыгрузки.Документ КАК Документ
			|ИЗ
			|	РегистрСведений.гф_ДанныеВыгрузки КАК гф_ДанныеВыгрузки
			|ГДЕ
			|	гф_ДанныеВыгрузки.Состояние = &Состояние
			|	И гф_ДанныеВыгрузки.ВидДанных = &ВидДанных
			|	И гф_ДанныеВыгрузки.Документ ССЫЛКА Документ.РасходныйОрдерНаТовары";
		
		Запрос.УстановитьПараметр("ВидДанных", Перечисления.гф_ВидыДанныхДляВыгрузки.Документ);
		Запрос.УстановитьПараметр("Состояние", Перечисления.гф_СтатусыВыгрузкиДанных.ГотовоКОтправке);
		Если Не РасходныйОрдер Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.РасходныйОрдерНаТовары", "Документ.ПриходныйОрдерНаТовары"); 
		КонецЕсли;	
		РезультатЗапроса = Запрос.Выполнить();
		МассивДокументов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Документ");
        Возврат МассивДокументов;
	
КонецФункции

// #wortmann { 
// Процедура добавляет в РС гф_ОшибкиЗагрузки запись
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//  Сообщение - Строка - сообщение с ошибкой
Процедура ЗаписатьСообщение(Сообщение)
	НоваяСтрокаЛога = ЛогВыполненияОбработки.Добавить();
	НоваяСтрокаЛога.Период = ТекущаяДата();
	НоваяСтрокаЛога.НомерСтрокиСообщения = Строка(ЛогВыполненияОбработки.Количество());
	НоваяСтрокаЛога.Описание = Сообщение;
КонецПроцедуры

// #wortmann { 
// Функция формирует пакет XML документов РасходныйОрдерНаТовары 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	ИмяФайлаБезПути - Строка - определяется в теле функции
//	ИмяФайла - Строка - определяется в теле функции
//	НомерСообщения - Строка
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары
//	НастройкиFTPСоединения - Структура - Структура данных для подключения к FTP
//
// Возвращаемое значение:
//	Пакет - ФабрикаXDTO  
Функция ПолучитьПакетРасхода(ИмяФайлаБезПути, ИмяФайла, НомерСообщения, Документ, НастройкиFTPСоединения)
	
	//Если СкладПолучательВПарах и ПолучательСерийныйНомерВместоКМ
	//	или не СкладОтправительВПарах и не ОтправительСерийныйНомерВместоКМ и ЭтоТаможенныйСклад и не (не СкладПолучательВПарах и не ПолучательСерийныйНомерВместоКМ)
	//	или не СкладОтправительВПарах и ОтправительСерийныйНомерВместоКМ и не СкладПолучательВПарах и не ПолучательСерийныйНомерВместоКМ Тогда
	//	сообщение = "не согласован формат выгрузки со складом. Файл сформирован не будет";
	//	Сообщить(сообщение);
	//	ЛИТ_ОбменДанными.ЛИТ_ЗаписатьСообщение(сообщение, Истина);
	//	возврат Неопределено;
	//КонецЕсли;
	
	Если ЭтоПеремещение Тогда
		КодКлиента = ПолучитьКодКлиента(Документ.СкладОтправитель);
		КодКонтрагента = ПолучитьКодКлиента(Документ.СкладПолучатель);
		Суфикс = "-S_";
	Иначе
		КодКлиента = ПолучитьКодКлиента(Документ.Склад);
		//Если Документ.Склад=Справочники.w_Настройки.СкладРазукомплектацииОтгрузкиВПарах.Значение Тогда
		//	Если ЗначениеЗаполнено(Документ.лит_УпаковочныйЛистПокупателя) Тогда
		//		КодКлиента = ПолучитьКодКлиента(Документ.лит_УпаковочныйЛистПокупателя.Склад);
		//	КонецЕсли;
		//КонецЕсли;
		КодКонтрагента = сокрЛП(Документ.Получатель.Код);
		Суфикс = "_";
	КонецЕсли;
	
	ПапкаДляВременнойВыгрузки = _омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначение("гф_ПапкаДляВыгрузкиНаСервере");
	
	ИмяФайлаБезПути = "SO_" + КодКлиента + Формат(СокрЛП(Документ.Номер), "ЧГ=") + Суфикс +  Формат(Документ.Дата, "ДФ=yyyyMMddHHmm") + ".xml"; 
	
	//ИмяФайла = НастройкиFTPСоединения.Каталог + "\" + ИмяФайлаБезПути;
	ИмяФайла = ПапкаДляВременнойВыгрузки + "\" + ИмяФайлаБезПути;
	
	Пакет = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Пакет"));
	Пакет.ИД = НомерСообщения;
	Пакет.Дата = формат(ТекущаяДата(), "ДФ='ггг-ММ-д hh:mm:ss'");
	Пакет.Источник = ПолучитьПоле_SourceSystem();
	//Пакет.Источник = "1С";
	Пакет.Владелец = КодКлиента;
	Пакет.Код = "01";
	
	// Раздел Компании
	
	Пакет.Каталог = Каталог("Расход", Документ);
	
	// Раздел Документы
	
	Пакет.Документы = РазделДокументы("Расход", Документ);
	
	возврат Пакет;
	
КонецФункции // ()

// #wortmann { 
// Функция формирует пакет XML документов ПриходныйОрдерНаТовары
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	ИмяФайлаБезПути - Строка - определяется в теле функции
//	ИмяФайла - Строка - определяется в теле функции
//	НомерСообщения - Строка
//	Документ - ДокументСсылка.ПриходныйОрдерНаТовары
//	НастройкиFTPСоединения - Структура - Структура данных для подключения к FTP
//
// Возвращаемое значение:
//	Пакет - ФабрикаXDTO
Функция ПолучитьПакетПрихода(ИмяФайлаБезПути, ИмяФайла, НомерСообщения, Документ, НастройкиFTPСоединения)
	
	Если СкладПолучательВПарах 
		//и ПолучательСерийныйНомерВместоКМ
		//или не СкладОтправительВПарах и не ОтправительСерийныйНомерВместоКМ и ЭтоТаможенныйСклад и не (не СкладПолучательВПарах и не ПолучательСерийныйНомерВместоКМ)
		//или не СкладОтправительВПарах и ОтправительСерийныйНомерВместоКМ и не СкладПолучательВПарах и не ПолучательСерийныйНомерВместоКМ 
		Тогда 
		Если НЕ ЭтоВозврат Тогда
		сообщение = "не согласован формат выгрузки со складом. Файл сформирован не будет";
		Сообщить(сообщение);
		//ЛИТ_ОбменДанными.ЛИТ_ЗаписатьСообщение(сообщение, Истина);
		возврат Неопределено; 
		КонецЕсли;
	КонецЕсли;
	
	Склад = Документ.Склад;
	
	КодКлиента = ПолучитьКодКлиента(Склад);
	Если ЭтоПеремещение Тогда
		Суфикс = "-S_";
	Иначе
		Суфикс = "_";
	КонецЕсли;
	
	КодКонтрагента = сокрЛП(Документ.Отправитель.Код);
	
	ПапкаДляВременнойВыгрузки = _омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначение("гф_ПапкаДляВыгрузкиНаСервере");
	ИмяФайлаБезПути = "PO_" + КодКлиента + Формат(СокрЛП(Документ.Номер), "ЧГ=") + Суфикс +  Формат(Документ.Дата, "ДФ=yyyyMMddHHmm") + ".xml"; 
	
	//ИмяФайла = НастройкиFTPСоединения.Каталог + "\" + ИмяФайлаБезПути;
	ИмяФайла = ПапкаДляВременнойВыгрузки + "\" + ИмяФайлаБезПути;

	
	Пакет = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Пакет"));
	Пакет.ИД = НомерСообщения;
	Пакет.Дата = формат(ТекущаяДата(), "ДФ='ггг-ММ-д hh:mm:ss'");
	Пакет.Источник = ПолучитьПоле_SourceSystem();
	//Пакет.Источник = "1С";
	Пакет.Владелец = КодКлиента;
	Пакет.Код = "01";
	
	Пакет.Каталог = Каталог("Приход", Документ);
	Пакет.Документы = РазделДокументы("Приход", Документ);

	возврат Пакет;
КонецФункции 

// #wortmann { 
// Функция получает документ Распоряжение из РасходныйОрдерНаТовары
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары
//
// Возвращаемое значение:
//	ДокументСсылка.* - если связанный документ найден
//	Неопределено - если документ не найден
Функция ПолучитьСвязанныйДокументРО(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение КАК Распоряжение
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
	|ГДЕ
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка.Следующий();
		Возврат Выборка.Распоряжение;
	КонецЕсли;;
	
	Возврат Неопределено;
	
КонецФункции

// #wortmann { 
// Функция устанавливает есть ли у Склада дополнительный реквизит "гф_СкладыСкладМаркетплейс"
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Склад - СправочникСсылка.Склады
//
// Возвращаемое значение:
//	Булево - Истина, если найдено свойство "гф_СкладыСкладМаркетплейс", в остальных случаях Ложь
Функция ПроверитьЗначениеСкладМаркетплейс(Склад)
	
    Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СкладыДополнительныеРеквизиты.Свойство.Имя КАК Свойство,
		|	СкладыДополнительныеРеквизиты.Значение КАК Значение
		|ИЗ
		|	Справочник.Склады.ДополнительныеРеквизиты КАК СкладыДополнительныеРеквизиты
		|ГДЕ
		|	СкладыДополнительныеРеквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Склад);
	Запрос.УстановитьПараметр("Имя", "гф_СкладыСкладМаркетплейс");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Свойство = "гф_СкладыСкладМаркетплейс" Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Ложь;
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;

КонецФункции

// #wortmann { 
// Функция устанавливает есть ли у Склада дополнительный реквизит "гф_СкладыТоварыВКоробах"
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Склад - СправочникСсылка.Склады
//
// Возвращаемое значение:
//	Булево - Истина, если найдено свойство "гф_СкладыТоварыВКоробах", в остальных случаях Ложь
Функция ПроверитьЗначениеСкладВКоробах(Склад)
	
    Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СкладыДополнительныеРеквизиты.Свойство.Имя КАК Свойство,
		|	СкладыДополнительныеРеквизиты.Значение КАК Значение
		|ИЗ
		|	Справочник.Склады.ДополнительныеРеквизиты КАК СкладыДополнительныеРеквизиты
		|ГДЕ
		|	СкладыДополнительныеРеквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Свойство = "гф_СкладыТоварыВКоробах" Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Ложь;
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;

КонецФункции

// #wortmann { 
// Функция заполняет Тип "Каталог" для пакета ФабрикаXDTO "WMS"
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Тип - Строка - "Приход" или "Расход"
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары, ДокументСсылка.ПриходныйОрдерНаТовары
//
// Возвращаемое значение:
//	Каталог - Тип "Каталог" для пакета ФабрикаXDTO "WMS"
Функция Каталог(Тип, Документ)
	
	Каталог = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Каталог"));
	
	Если Тип = "Расход" Тогда
		Каталог.Компании = КомпанииРасход(Документ);
		
	ИначеЕсли Тип = "Приход" Тогда
		//раздел Номенклатура
		Каталог.СписокТоваров = СписокТоваров(Документ, Тип);
		
		//раздел компании
		Каталог.Компании = КомпанииПриход(Документ);
	КонецЕсли;
	
	возврат Каталог;
КонецФункции // РасходКаталог()

// #wortmann { 
// Функция заполняет Тип "Компании" для пакета ФабрикаXDTO "WMS" для Расхода
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ -  ДокументСсылка.РасходныйОрдерНаТовары - выгружаемый документ
//
// Возвращаемое значение:
//	Компании - Тип "Компании" для пакета ФабрикаXDTO "WMS"
Функция КомпанииРасход(Документ)
	
	Компании = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Компании"));
	Компании.Компания.Добавить(КомпанияРасход(Документ));
	
	возврат Компании;
КонецФункции // РасходКомпании()

// #wortmann { 
// Функция заполняет Тип "Компания" для пакета ФабрикаXDTO "WMS"  для Расхода
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ -  ДокументСсылка.РасходныйОрдерНаТовары - выгружаемый документ
//
// Возвращаемое значение:
//	Компания - Тип "Компания" для пакета ФабрикаXDTO "WMS"
Функция КомпанияРасход(Документ)
	Перем КомпанияАдрес;
	
	СвязанныйДокумент = ПолучитьСвязанныйДокументРО(Документ);
	
	Компания = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Компания"));
	Компания.ИД = КодКонтрагента;
	//ПолучитьКодКлиента(Документ.Склад);
	// Компания.ИД = СвязанныйДокумент.гф_АдресДоставки.НомерАдреса;
	Компания.Имя = Документ.Получатель.Наименование;
	//Компания.Имя = СвязанныйДокумент.гф_АдресДоставки.КонтактноеЛицо;   //будет эта строка
	Компания.Адреса = АдресаРасход(КомпанияАдрес, Документ, СвязанныйДокумент);
	Компания.Адрес = КомпанияАдрес;
	
	возврат Компания;
КонецФункции // РасходКомпания()

// #wortmann { 
// Функция заполняет Тип "Адреса" для пакета ФабрикаXDTO "WMS"  для Расхода
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	КомпанияАдрес - Строка - Представление компании (из АдресаДоставки или Юр.Адреса или Физ.адреса)
//	Документ -  ДокументСсылка.РасходныйОрдерНаТовары - выгружаемый документ
//	СвязанныйДокумент - ДокументСсылка.* - распоряжение для РасходныйОрдерНаТовары
//
// Возвращаемое значение:
//	Адреса - Тип "Адреса" для пакета ФабрикаXDTO "WMS"
Функция АдресаРасход(КомпанияАдрес, Документ, СвязанныйДокумент)
	
	Адреса = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Адреса"));
	КомпанияАдрес = "";
	
	ЕстьАдрес = Ложь;
	Структура = ПолучитьАдресПоТипуКомпании(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, СвязанныйДокумент.Контрагент, ЕстьАдрес);
	Если ЕстьАдрес Тогда
		Адреса.Адрес.Добавить(Адрес(Структура, "Юридический адрес"));
		КомпанияАдрес = Структура.Представление;
	КонецЕсли;
	
	ЕстьАдрес = Ложь;
	Структура = ПолучитьАдресПоТипуКомпании(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, СвязанныйДокумент.Контрагент, ЕстьАдрес);
	Если ЕстьАдрес Тогда
		Адреса.Адрес.Добавить(Адрес(Структура, "Фактический адрес"));
		КомпанияАдрес = Структура.Представление;
	КонецЕсли;
	
	СтруктураКИ = ПолучитьСтруктуруКИ(СвязанныйДокумент);
	Если ЗначениеЗаполнено(СтруктураКИ) Тогда
		Адреса.Адрес.Добавить(Адрес(новый Структура("Представление, Индекс, Город, Регион", СвязанныйДокумент.АдресДоставки,
													СтруктураКИ.ZIPcode, СтруктураКИ.city, СтруктураКИ.area), "Адрес доставки"));
		КомпанияАдрес = СвязанныйДокумент.АдресДоставки;
	КонецЕсли;

	возврат Адреса; 
	
КонецФункции // РасходАдреса()

// #wortmann { 
// Функция получает структуру с контактной информацией из адреса доставки указанного
// в документе распоряжении
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	СвязанныйДокумент - ДокументСсылка.* - распоряжение для РасходныйОрдерНаТовары
//
// Возвращаемое значение:
//	СтруктураКИ - Структура - с данными адреса доставки, если адрес заполнен
//	Неопределено - если адрес не заполнен
Функция ПолучитьСтруктуруКИ(СвязанныйДокумент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	  "ВЫБРАТЬ
		|	гф_АдресаДоставки.Значение КАК Значение
		|ИЗ
		|	Справочник.гф_АдресаДоставки КАК гф_АдресаДоставки
		|		ГДЕ гф_АдресаДоставки.Ссылка = &Адрес";

	Запрос.УстановитьПараметр("Адрес", СвязанныйДокумент.гф_АдресДоставки);

	//"ВЫБРАТЬ
	//	|	ЗаказКлиента.АдресДоставки КАК АдресДоставки
	//	|ПОМЕСТИТЬ АдресПоЗаказу
	//	|ИЗ
	//	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	//	|ГДЕ
	//	|	ЗаказКлиента.Ссылка = &Ссылка
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	гф_АдресаДоставки.Значение КАК Значение
	//	|ИЗ
	//	|	АдресПоЗаказу КАК АдресПоЗаказу
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гф_АдресаДоставки КАК гф_АдресаДоставки
	//	|		ПО АдресПоЗаказу.АдресДоставки = гф_АдресаДоставки.Адрес";
	//
	//Запрос.УстановитьПараметр("Ссылка", СвязанныйДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка.Следующий();
		ИсточникКИ = Выборка.Значение;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Адрес;
		
		СтруктураКИ = УправлениеКонтактнойИнформациейСлужебный.JSONВКонтактнуюИнформациюПоПолям(ИсточникКИ, ТипКИ);
		
		Возврат СтруктураКИ;
	КонецЕсли;

	Возврат Неопределено;
	
КонецФункции

// #wortmann { 
// Функция заполняет Тип "Компании" для пакета ФабрикаXDTO "WMS" для Прихода
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ -  ДокументСсылка.ПриходныйОрдерНаТовары - выгружаемый документ
//
// Возвращаемое значение:
//	Компании - Тип "Компании" для пакета ФабрикаXDTO "WMS"
Функция КомпанииПриход(Документ)
	
	Компании = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Компании"));		
	
	КомпанниПоЗаказам = ПолучитьКомпанииПоЗаказуКлиента(Документ); // 31.01.23
	Для каждого КомпанияЗаказ Из КомпанниПоЗаказам Цикл
	Компании.Компания.Добавить(КомпанияПриход(КомпанияЗаказ));
	КонецЦикла;
	возврат Компании;
КонецФункции // Компании()

// #wortmann { 
// Функция подбирает ЗаказыКлиентов из Тип "Компании" для пакета ФабрикаXDTO "WMS" для Прихода
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ -  ДокументСсылка.ПриходныйОрдерНаТовары - выгружаемый документ
//
// Возвращаемое значение:
//	ТЗ - ТаблицаЗначений - с колонками "" и "" и ""
Функция ПолучитьКомпанииПоЗаказуКлиента(Документ) 
	
	Если ЭтоВозврат Тогда
		МассивСсылок = ПолучитьДанныеУЛПоВозврату(Документ);	
	Иначе
		ДанныеУЛ = ПолучитьДанныеУЛ(Документ);                     
		МассивСсылок = ДанныеУЛ.ВыгрузитьКолонку("УпаковочныйЛист");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УпаковочныйЛист.гф_Заказ КАК гф_Заказ,
		|	ЗаказКлиента.Контрагент КАК Контрагент,
		|	ЗаказКлиента.АдресДоставки КАК АдресДоставки,
		|	ЗаказКлиента.Контрагент.Наименование КАК КонтрагентНаименование,
		|	ЗаказКлиента.Контрагент.гф_КодПартнера КАК КодКлиента
		|ИЗ
		|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
		|		ПО УпаковочныйЛист.гф_Заказ = ЗаказКлиента.Ссылка
		|ГДЕ
		|	УпаковочныйЛист.Ссылка В(&МассивСсылок)
		|  И НЕ (УпаковочныйЛист.гф_Заказ.Ссылка  ЕСТЬ NULL)";
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат РезультатЗапроса.Выгрузить();
	КонецЕсли;	
	
КонецФункции

// #wortmann { 
// Функция заполняет Тип "Компания" для пакета ФабрикаXDTO "WMS" для Прихода
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ -  ДокументСсылка.ПриходныйОрдерНаТовары - выгружаемый документ
//
// Возвращаемое значение:
//	Компания - Тип "Компания" для пакета ФабрикаXDTO "WMS"
Функция КомпанияПриход(КомпанияЗаказ)
	Перем КомпанияАдрес;
	
	Компания = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Компания"));
	//Компания.ИД = ПолучитьКодКлиента(Документ.Склад);
	//Компания.Имя = Документ.Отправитель.Наименование;
	Компания.ИД = КомпанияЗаказ.КодКлиента;
	Компания.Имя = КомпанияЗаказ.КонтрагентНаименование;

	Компания.Адреса = АдресаПриход(КомпанияАдрес, КомпанияЗаказ);
	Компания.Адрес = КомпанияАдрес;
	
	возврат Компания;
КонецФункции // КомпанииПриход()

// #wortmann { 
// Функция заполняет Тип "Адреса" для пакета ФабрикаXDTO "WMS"  для Прихода
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	КомпанияАдрес - Строка - Представление компании (из АдресаДоставки или Юр.Адреса или Физ.адреса)
//	Отправитель -  ОпределяемыйТип.ОтправительПолучательТоваров
//
// Возвращаемое значение:
//	Адреса - Тип "Адреса" для пакета ФабрикаXDTO "WMS"
Функция АдресаПриход(КомпанияАдрес, КомпанияЗаказ)
	
	//Отправитель = Документ.Распоряжение.Контрагент;
	Отправитель = КомпанияЗаказ.Контрагент;
	
	Адреса = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Адреса"));
 	КомпанияАдрес = "";
	
	ЕстьАдрес = Ложь;
	структура = ПолучитьАдресПоТипуКомпании(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, Отправитель, ЕстьАдрес);
	Если ЕстьАдрес Тогда
		Адреса.Адрес.Добавить(Адрес(Структура, "Юридический адрес"));
		КомпанияАдрес = структура.Представление;
	КонецЕсли;
	
	ЕстьАдрес = Ложь;
	структура = ПолучитьАдресПоТипуКомпании(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, Отправитель, ЕстьАдрес);
	Если ЕстьАдрес Тогда
		Адреса.Адрес.Добавить(Адрес(Структура, "Фактический адрес"));
		КомпанияАдрес = структура.Представление;
	КонецЕсли;
	
	//АдресДоставки = ПолучитьАдресДоставки(Документ);
	//Если АдресДоставки.Представление <> Неопределено Тогда
	//	Структура = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(АдресДоставки.Представление,
	//	Перечисления.ТипыКонтактнойИнформации.Адрес);
	//	ЕстьАдрес = Истина;
	//Иначе 
	//	Структура = ПолучитьАдресПоТипуКомпании(Справочники.ВидыКонтактнойИнформации.АдресПартнера, Документ.Отправитель, ЕстьАдрес);
	//	
	//	Если Структура.Представление = Неопределено Тогда	
	//		Сообщение = "Не заполнен адрес доставки для контрагента " + Отправитель;
	//		ЗаписьЖурналаРегистрации(ЭтотОбъект, УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, Отправитель, Сообщение);
	//		Сообщить(Сообщение);
	//		ВызватьИсключение Сообщение;
	//	КонецЕсли;
	//КонецЕсли; 
	ТипАдресДоставки = ПолучитьТипАдресДоствки();
	
	ЕстьАдрес = Ложь;
	структура = ПолучитьАдресПоТипуКомпании(ТипАдресДоставки, Отправитель, ЕстьАдрес);
	Если ЕстьАдрес Тогда
		Адреса.Адрес.Добавить(Адрес(Структура, "Адрес доставки"));
		КомпанияАдрес = структура.Представление;
	КонецЕсли;

	Если ЗначениеЗаполнено(КомпанияЗаказ.АдресДоставки) Тогда
		КомпанияАдрес = КомпанияЗаказ.АдресДоставки 
	КонецЕсли;
	
	//Если АдресДоставки = Неопределено Тогда
	//	Сообщение = "Не заполнен адрес доставки для контрагента " + Отправитель;
	//	ЗаписьЖурналаРегистрации(ЭтотОбъект, УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, Отправитель, Сообщение);
	//	Сообщить(Сообщение);
	//	ВызватьИсключение Сообщение;
	//КонецЕсли;
	//
    // КомпанияАдрес должна быть АдресДоставки из ЗаказКлиента
	возврат Адреса;
КонецФункции // ()  

Функция ПолучитьТипАдресДоствки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.Наименование = &Наименование
		|	И ВидыКонтактнойИнформации.Родитель = &Родитель";
	
	Запрос.УстановитьПараметр("Наименование", "Адрес доставки");
	Запрос.УстановитьПараметр("Родитель", Справочники.ВидыКонтактнойИнформации.СправочникКонтрагенты);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Не РезультатЗапроса.Пустой() Тогда
	 Выборка.Следующий();
    Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции

// #wortmann { 
// Функция заполняет Тип "Адрес" для пакета ФабрикаXDTO "WMS" 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Структура - Структура - с данными адреса
//	ТипАдреса - Строка - "Юридический адрес", "Фактический адрес", "Адрес доставки" 
//
// Возвращаемое значение:
//	Адрес - Тип "Адрес" для пакета ФабрикаXDTO "WMS"
Функция Адрес(Структура, ТипАдреса)
	
	Адрес = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Адрес"));
	Адрес.Имя = Структура.Представление;
	Адрес.Индекс = Структура.Индекс;
	Адрес.Город = Структура.Город;
	Адрес.Район = Структура.Регион;
	Адрес.Страна = "Россия";
	Адрес.Тип = ТипАдреса;
	
	возврат Адрес;
КонецФункции // ()

// #wortmann { 
// Функция заполняет Тип "СписокТоваров" для пакета ФабрикаXDTO "WMS" для Прихода
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ - ДокументСсылка.ПриходныйОрдерНаТовары
//	Тип - Строка - "Приход", "Расход" 
//
// Возвращаемое значение:
//	СписокТоваров - Тип "СписокТоваров" для пакета ФабрикаXDTO "WMS"
Функция СписокТоваров(Документ, Тип)
	
	СписокТоваров = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "СписокТоваров"));
	
	Если СкладПолучательВПарах Тогда
		// Посмотри как правильно выгружать информацию с документа	
		Для каждого строка Из Документ.Товары  Цикл
			СписокТоваров.ЭлементСпискаТоваров.Добавить(ЭлементСпискаТоваров_ПарныеСклады(строка, Документ));
		КонецЦикла;
		
	Иначе
		УпаковочныеЛисты = ПолучитьДанныеУЛ(Документ);

		Для каждого строка Из УпаковочныеЛисты Цикл
			СписокТоваров.ЭлементСпискаТоваров.Добавить(ЭлементСпискаТоваров(строка, Документ));
		КонецЦикла;
	КонецЕсли;	
	
	
	возврат СписокТоваров;
	
КонецФункции // СписокТоваров()

// #wortmann { 
// Функция заполняет Тип "ЭлементСпискаТоваров" для пакета ФабрикаXDTO "WMS" для Прихода 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Строка - СтрокаТЧ - Строка из табличной части загружаемого документа 
//	Документ - ДокументСсылка.ПриходныйОрдерНаТовары
//
// Возвращаемое значение:
//	Элемент - Тип "ЭлементСпискаТоваров" для пакета ФабрикаXDTO "WMS"
Функция ЭлементСпискаТоваров(Строка, Документ)
	
	Элемент = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "ЭлементСпискаТоваров"));
	
	Элемент.Артикул = строка.Артикул;
	
	Элемент.Описание = строка.Номенклатура.НаименованиеПолное;
	Элемент.Наименование = строка.Номенклатура.Наименование;
	Элемент.Активность = 1;
	Элемент.УчетПартий = 1;
	Элемент.УчетНомераПартии = 1;
	Элемент.Цена = ПолучитьЦенуПО(Строка, Документ);
	
	//ЕдиницаИзмерения = строка.Упаковка; 
	ЕдиницаИзмерения = "упак";
	массив = новый Массив;
	//массив.Добавить(новый Структура("Единица", ЕдиницаИзмерения.Наименование));
	массив.Добавить(новый Структура("Единица", "упак"));
	
	Элемент.Единицы = Единицы(массив);
	
	возврат Элемент;
КонецФункции // ()

// #wortmann { 
// Функция заполняет Тип "ЭлементСпискаТоваров_ПарныеСклады" для пакета ФабрикаXDTO "WMS" 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Строка - СтрокаТЧ - Строка из табличной части загружаемого документа 
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары, ДокументСсылка.ПриходныйОрдерНаТовары
//
// Возвращаемое значение:
//	Элемент - Тип "ЭлементСпискаТоваров_ПарныеСклады" для пакета ФабрикаXDTO "WMS"
Функция ЭлементСпискаТоваров_ПарныеСклады(строка, Документ)
	
	Элемент = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "ЭлементСпискаТоваров_ПарныеСклады"));
	
	Элемент.Артикул = сокрЛП(строка.Номенклатура.Артикул);
	Элемент.Описание = строка.Номенклатура.НаименованиеПолное;
	Элемент.Наименование = строка.Номенклатура.Наименование;
	Элемент.Активность = 1;
	Элемент.Цена = ПолучитьЦену(Строка, Документ); // Домнышева - временно - нет данных как читать цену
	//
	Элемент.КонтрольСерий = "INV_DETAIL";
	
	Элемент.Штрихкоды = Штрихкоды(Строка);
	
	ЕдиницаИзмерения = строка.Номенклатура.ЕдиницаИзмерения;
	массив = новый Массив;
	массив.Добавить(новый Структура("Единица", ЕдиницаИзмерения.Наименование));
	
	Элемент.Единицы = Единицы(массив);
	
	возврат Элемент;
КонецФункции // ЭлементСпискаТоваров_ПарныеСклады()

// #wortmann { 
// Функция заполняет Тип "Штрихкоды" для пакета ФабрикаXDTO "WMS" 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Строка - СтрокаТЧ - Строка из табличной части загружаемого документа 
//
// Возвращаемое значение:
//	Штрихкоды - Тип "Штрихкоды" для пакета ФабрикаXDTO "WMS"
Функция Штрихкоды(Строка)
	
	НоменклатураКод = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
		|	И ШтрихкодыНоменклатуры.Характеристика = &Характеристика";
	
	Запрос.УстановитьПараметр("Номенклатура", Строка.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Строка.Характеристика);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		НоменклатураКод = Выборка.Штрихкод;
	КонецЕсли;
	
	Штрихкоды = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Штрихкоды"));
	Штрихкоды.Штрихкод.Добавить(Штрихкод(НоменклатураКод));
	
	возврат Штрихкоды;
КонецФункции // Штрихкоды()

// #wortmann { 
// Функция заполняет Тип "Штрихкод" для пакета ФабрикаXDTO "WMS" 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	НоменклатураКод - Строка - штрихкод для номенклатуры 
//
// Возвращаемое значение:
//	Штрихкод - Тип "Штрихкод" для пакета ФабрикаXDTO "WMS"
Функция Штрихкод(НоменклатураКод)

	Штрихкод = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Штрихкод"));
	
	Штрихкод.ТипШК = "EAN13";
	Штрихкод.Используется = 1;
	Штрихкод.Предназначение = 1;
	Штрихкод.ЗначениеШК = СокрЛП(НоменклатураКод);

	возврат Штрихкод;
КонецФункции // Штрихкод()

// #wortmann { 
// Функция заполняет Тип "Единицы" для пакета ФабрикаXDTO "WMS" 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Массив - Массив - из структур наименований единиц измерений СправочникСсылка.УпаковкиЕдиницыИзмерения
//
// Возвращаемое значение:
//	Единицы - Тип "Единицы" для пакета ФабрикаXDTO "WMS"
Функция Единицы(Массив)
	
	Единицы = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Единицы"));
	Для каждого строка Из Массив Цикл
		Единицы.Единица = Единица(строка.Единица);
	КонецЦикла;
	
	возврат Единицы;
КонецФункции // Единицы()

// #wortmann { 
// Функция заполняет Тип "Единица" для пакета ФабрикаXDTO "WMS" 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Значение - Строка - наименование единицы измерения СправочникСсылка.УпаковкиЕдиницыИзмерения
//
// Возвращаемое значение:
//	Единица - Тип "Единица" для пакета ФабрикаXDTO "WMS"
Функция Единица(Значение)

	Единица = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Единица"));
	Единица.Наименование = Значение;
	Единица.Описание = Значение;
	Единица.Коэффициент = 1;
	Единица.ЕдиницаДляОтбора = 1;
	Единица.ЕдиницаПоУмолчанию = 1;

	возврат Единица;
КонецФункции // Единица()

// #wortmann { 
// Функция заполняет Тип "Документы" для пакета ФабрикаXDTO "WMS" 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Тип - Строка - "Приход", "Расход"
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары, ДокументСсылка.ПриходныйОрдерНаТовары
//
// Возвращаемое значение:
//	РазделДокументы - Тип "Документы" для пакета ФабрикаXDTO "WMS"
Функция РазделДокументы(Тип, Документ)
	
	РазделДокументы = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Документы"));
	РазделДокументы.Документ = РазделДокумент(Тип, Документ);
	
	возврат РазделДокументы;
КонецФункции // ()

// #wortmann { 
// Функция заполняет Тип "Документ" для пакета ФабрикаXDTO "WMS" 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Тип - Строка - "Приход", "Расход"
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары, ДокументСсылка.ПриходныйОрдерНаТовары
//
// Возвращаемое значение:
//	РазделДокумент - Тип "Документ" для пакета ФабрикаXDTO "WMS"
Функция РазделДокумент(Тип, Документ)
	
	РазделДокумент = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Документ"));
	
	Если Тип = "Расход" Тогда
		Если ЭтоОсновнойСклад или ЭтоТаможенныйСклад тогда	
			ТипШапки = "X_DOCK_SO";
		//ИначеЕсли ЭтоСвободныйСклад тогда	
		//	ТипШапки = "FREE_WHSE_SO";
		Иначе	
			ТипШапки = "DEFAULT";
		КонецЕсли;
		
		РазделДокумент.Тип = "SO";
		//РазделДокумент.Шапка = ШапкаРасход();
		РазделДокумент.Шапка = Шапка(ТипШапки,  Документ, Документ.Получатель, Истина);
		РазделДокумент.Товары = ТоварыРасход(Документ);
		
	ИначеЕсли Тип = "Приход" Тогда
		//Если ЭтоПеремещение Тогда
		//	КодКлиента = ПолучитьКодКлиента(Документ.Склад);
		//	КодКонтрагента = ПолучитьКодКлиента(Документ.Склад);
		//КонецЕсли;
		
		Если ЭтоПоступление Тогда
			ТипШапки = "DEFAULT";
		Иначе
			Если СкладПолучательВПарах Тогда
				ТипШапки = "EL";
			ИначеЕсли ЭтоОсновнойСклад тогда	
				ТипШапки = "X_DOCK_PO";
			//ИначеЕсли Документ.СкладОтправитель = Справочники.w_Настройки.СкладСвободныеОстатки.Значение тогда	
			//	ТипШапки = "FREE_WHSE_PO";
			Иначе	
				ТипШапки = "DEFAULT";
			КонецЕсли;
		КонецЕсли;
		
		РазделДокумент.Тип = "PO";
		//РазделДокумент.Шапка = ШапкаПриход();
		РазделДокумент.Шапка = Шапка(ТипШапки, Документ, Документ.Отправитель);
		РазделДокумент.Товары = ТоварыПриход(Документ);
	КонецЕсли;
	
	возврат РазделДокумент;
КонецФункции // ()

// #wortmann { 
// Функция заполняет Тип "Шапка" для пакета ФабрикаXDTO "WMS" 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Тип - Строка - Тип шапки определяется в процедуре выше
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары, ДокументСсылка.ПриходныйОрдерНаТовары
//	Партнер - ОпределяемыйТип.ОтправительПолучательТоваров
//	НомерИнвойса - Булево
//
// Возвращаемое значение:
//	Шапка - Тип "Шапка" для пакета ФабрикаXDTO "WMS"
Функция Шапка(Тип, Документ, Партнер, НомерИнвойса = Ложь)
		
	СвязанныйДокумент = ПолучитьСвязанныйДокументРО(Документ);
	
	Шапка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Шапка"));
	
	Шапка.Статус = "NEW";
	Шапка.Тип = Тип;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда 
		Шапка.Номер = НомерЗаявки(Документ);
		Шапка.ДатаОкончания = формат(Документ.ДатаОтгрузки, "ДФ='ггг-ММ-д hh:mm:ss'");
		Шапка.ДатаСоздания = формат(Документ.Дата, "ДФ='ггг-ММ-д hh:mm:ss'");
		Шапка.Получатель = КодКонтрагента;
		Шапка.Контрагент = Партнер.НаименованиеПолное;
	Иначе
		Шапка.Номер = НомерЗаявки(Документ.Распоряжение);
		Шапка.ДатаОкончания = Формат(ЗаполнитьДатуОтгрузки(Документ.Распоряжение.Дата), "ДФ='ггг-ММ-д hh:mm:ss'");
		Шапка.ДатаСоздания = формат(Документ.Распоряжение.Дата, "ДФ='ггг-ММ-д hh:mm:ss'"); 
		Шапка.Получатель = 1;
	КонецЕсли;
	
	Шапка.Отправитель = КодКлиента;	

	Если ЭтоРеализация Тогда
		КомментарииДляРеализации = Новый Структура; 
		//Комментарий
		КомментарииДляРеализации.Вставить("Комментарий",Документ.Комментарий);
		//ИНН 
		//ИНН = НайтиИннПоПартнеру(Партнер);
		ИНН = СвязанныйДокумент.Контрагент.ИНН;
		КомментарииДляРеализации.Вставить("ИНН", ИНН);
		// Контактное лицо контрагента для транспортной компании
		ИнформацияКонтактноеЛицо = СобратьИнформациюОКонтактномЛице(СвязанныйДокумент);
		//ИнформацияКонтактноеЛицо = СобратьИнформациюОКонтактномЛице(Партнер); 
		КомментарииДляРеализации.Вставить("КонтактноеЛицо",ИнформацияКонтактноеЛицо);
		//Вес

		ВесНакладной = ""; // пока не заполняем	
		КомментарииДляРеализации.Вставить("Вес", ВесНакладной);
		Шапка.Комментарии = КомментарииРеализации(КомментарииДляРеализации);
	Иначе
		Шапка.Комментарии = Комментарии(Документ.Комментарий);
	КонецЕсли;
	
	//СтруктураАдреса = ПолучитьАдресДоставки(Документ);
	//Если ЭтоРеализация Тогда
	//	Если СтруктураАдреса.ТКНаименование <> Неопределено Тогда
	//		Шапка.reference2 = СтруктураАдреса.ТКНаименование;
	//		Шапка.reference5 = СтруктураАдреса.Представление;
	//	КонецЕсли; 
	//КонецЕсли;

	//Если ЭтоПеремещение Тогда
	//	Если СтруктураАдреса.ТКНаименование <> Неопределено Тогда
	//		Шапка.reference2 = СтруктураАдреса.ТКНаименование;
	//		Шапка.Получатель = СтруктураАдреса.НомерАдреса;
	//	КонецЕсли;
	//КонецЕсли;

	Если НомерИнвойса Тогда
		//Шапка.НомерИнвойса = ПолучитьНомерИнвойса();
		Шапка.reference3 = КодКлиента + "-" + КодКонтрагента;
	КонецЕсли;
	
	возврат Шапка;
КонецФункции // ()

// #wortmann { 
// Функция собирает информацию о контактном лице Партнера 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Партнер - ОпределяемыйТип.ОтправительПолучательТоваров
//
// Возвращаемое значение:
//	ИнформацияКонтактноеЛицо - Строка из реквизитов Наименование(Контактного лица) и Телефонов
Функция СобратьИнформациюОКонтактномЛице(Распоряжение)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	гф_АдресаДоставки.КонтактноеЛицо КАК КонтактноеЛицо
		|ИЗ
		|	Справочник.гф_АдресаДоставки КАК гф_АдресаДоставки
		|ГДЕ
		|	гф_АдресаДоставки.Ссылка = &АдресДоставки
		|";
	
	Запрос.УстановитьПараметр("АдресДоставки", Распоряжение.гф_АдресДоставки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Выборка.Следующий();
		
		КонтактноеЛицо = Выборка.КонтактноеЛицо;
	Иначе
		КонтактноеЛицо = Распоряжение.КонтактноеЛицо;
	КонецЕсли;
	
    Запрос = Новый Запрос;
	Запрос.Текст = 
		"
		|ВЫБРАТЬ
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефона КАК НомерТелефона
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
		|ГДЕ
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка = &Ссылка";
    Запрос.УстановитьПараметр("Ссылка", КонтактноеЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Записи = РезультатЗапроса.Выбрать();
	Телефоны = "";
	Пока Записи.Следующий() Цикл
		Телефоны = Телефоны + Записи.НомерТелефона + ", ";
	КонецЦикла;
    ИнформацияКонтактноеЛицо = КонтактноеЛицо.Наименование + " " + Телефоны;
	Возврат ИнформацияКонтактноеЛицо;
	
КонецФункции

// #wortmann { 
// Функция возвращает структуру с данными из справочника гф_АдресаДоставки 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары, ДокументСсылка.ПриходныйОрдерНаТовары
//
// Возвращаемое значение:
//	СтруктураАдреса - Структура с данными из справочника гф_АдресаДоставки
Функция ПолучитьАдресДоставки(Документ)
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
         СвязанныйДокумент = ПолучитьСвязанныйДокументРО(Документ);
	     АдресДоставки = СвязанныйДокумент.гф_АдресДоставки;
	Иначе
		СвязанныйДокумент = Документ.Распоряжение;
	    АдресДоставки = СвязанныйДокумент.АдресДоставки;
		Возврат АдресДоставки;
    КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1 
		|	гф_АдресаДоставки.Представление КАК Представление,
		|	гф_АдресаДоставки.НомерАдреса КАК НомерАдреса,
		|	гф_АдресаДоставки.ТК.Наименование КАК ТКНаименование
		|ИЗ
		|	Справочник.гф_АдресаДоставки КАК гф_АдресаДоставки
		|ГДЕ
		|	гф_АдресаДоставки.Ссылка = &Адрес";
	
	Запрос.УстановитьПараметр("Адрес", АдресДоставки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаАдресов = РезультатЗапроса.Выгрузить();
	
	СтруктураАдреса = Новый Структура;
	
	Для каждого Колонка Из ТаблицаАдресов.Колонки Цикл
		СтруктураАдреса.Вставить(Колонка.Имя);
	КонецЦикла;
	Если ТаблицаАдресов.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(СтруктураАдреса, ТаблицаАдресов[0]);
	КонецЕсли;

	Возврат СтруктураАдреса;
	
КонецФункции

// #wortmann { 
// Функция возвращает значение ИНН из спр Контрагенты 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Партнер - ОпределяемыйТип.ОтправительПолучательТоваров
//
// Возвращаемое значение:
//	ИНН - Строка - значение ИНН из спр Контрагенты
Функция НайтиИннПоПартнеру(Партнер)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.ИНН КАК ИНН
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Наименование = &Наименование
		|	И Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)";
	
	Запрос.УстановитьПараметр("Наименование", Партнер.Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка.Следующий();
		Возврат Выборка.ИНН;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// #wortmann { 
// Функция заполняет Тип "Товары" для пакета ФабрикаXDTO "WMS" 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары - загружаемый документ
//
// Возвращаемое значение:
//	Товары - Тип "Товары" для пакета ФабрикаXDTO "WMS"
Функция ТоварыРасход(Документ)
	
	Товары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Товары"));
	
	Если СкладОтправительВПарах Тогда
		запрос = новый Запрос(
			"ВЫБРАТЬ
			|	а.Номенклатура.Артикул КАК Артикул,
			|	а.Характеристика КАК Характеристика,
			|	а.Количество КАК Количество,
			|	а.Номенклатура КАК Номенклатура,
			|	а.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК а
			|ГДЕ
			|	а.Ссылка = &Документ
			|
			|УПОРЯДОЧИТЬ ПО
			|	Артикул");
		
		запрос.УстановитьПараметр("Документ", Документ);
		выборка = запрос.Выполнить().Выгрузить();
		
		НПП = 0;
		выборка.Свернуть("Артикул, Характеристика", "Количество");
		Для каждого строка Из выборка Цикл
			НПП = НПП + 1;			
			Товары.Строка.Добавить(СтрокаТовара2(строка, НПП, Истина, выборка));
		КонецЦикла;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОтгружаемыеТовары.УпаковочныйЛист КАК УпаковочныйЛист,
			|	ОтгружаемыеТовары.Количество КАК Количество,
			|	АВТОНОМЕРЗАПИСИ() КАК НомерСтроки
			|ПОМЕСТИТЬ УЛ
			|ИЗ
			|	Документ.РасходныйОрдерНаТовары.ОтгружаемыеТовары КАК ОтгружаемыеТовары
			|ГДЕ
			|	ОтгружаемыеТовары.Ссылка = &Ссылка
			|	И ОтгружаемыеТовары.ЭтоУпаковочныйЛист = ИСТИНА
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	УЛ.УпаковочныйЛист КАК УпаковочныйЛист,
			|	УЛ.Количество КАК Количество,
			|	УЛ.УпаковочныйЛист.гф_Комплектация КАК Артикул,
			|	УЛ.УпаковочныйЛист.Код КАК СерийныйНомер,
			|	УпаковочныйЛистТовары.Номенклатура КАК Номенклатура,
			|	УЛ.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	УЛ КАК УЛ
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
			|		ПО УЛ.УпаковочныйЛист = УпаковочныйЛистТовары.Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Документ);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выгрузить();
		
		Для каждого строка Из Выборка Цикл
			Товары.Строка.Добавить(СтрокаТовара(строка, Документ));
		КонецЦикла;
		
	КонецЕсли;
	
	возврат Товары;
КонецФункции // ()

// #wortmann { 
// Функция заполняет Тип "СтрокаТовара" для пакета ФабрикаXDTO "WMS" 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	строка - СтрокаТЗ - строка с элементом номенклатуры и его данными 
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары - загружаемый документ
//
// Возвращаемое значение:
//	СтрокаТовара - Тип "СтрокаТовара" для пакета ФабрикаXDTO "WMS"
Функция СтрокаТовара(строка, Документ)
	
	СтрокаТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "СтрокаТовара"));
	Если ЭтоПеремещение и СкладМаркетплейса Тогда
		СтрокаТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "СтрокаТовара3"));
	КонецЕсли;
	СтрокаТовара.Код = строка.Артикул;
	СтрокаТовара.НомерСтроки = строка.НомерСтроки;
	СтрокаТовара.Количество = строка.Количество;
	СтрокаТовара.Цена = ПолучитьЦенуSO(Документ, Строка);
	
	СтрокаТовара.СерийныйНомер = строка.СерийныйНомер;
	Если ЭтоПеремещение Тогда
		СтрокаТовара.Комментарии = Комментарии(строка.Артикул + "|" + строка.Номенклатура);
	ИначеЕсли ЭтоРеализация Тогда
		СтрокаТовара.Комментарии = Комментарии(строка.Артикул + "|" + строка.Номенклатура);
	КонецЕсли;
	
	возврат СтрокаТовара;
КонецФункции // СтрокаТовара()

// #wortmann { 
// Функция заполняет Тип "СтрокаТовара2" или "СтрокаТовара4" для пакета ФабрикаXDTO "WMS"
// в зависимости от того является ли Склад маркетплейсом и значения ЭтоПеремещение
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	строка - СтрокаТЗ - строка с элементом номенклатуры и его данными
//	НПП - число - номер обрабатываемой строки
//	СерийныйНомер - Булево
//	выборка - результат запроса по ТЧ документа
//
// Возвращаемое значение:
//	СтрокаТовара - Тип "СтрокаТовара2" или "СтрокаТовара4" для пакета ФабрикаXDTO "WMS"
Функция СтрокаТовара2(строка, НПП, СерийныйНомер, выборка)
	
	СтрокаТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "СтрокаТовара2"));
	Если ЭтоПеремещение и СкладМаркетплейса Тогда
		СтрокаТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "СтрокаТовара4"));
		//СтрокаТовара.Сумма = строка.Сумма;
	КонецЕсли;

	СтрокаТовара.НомерСтроки = НПП;
	СтрокаТовара.Код = строка.Артикул;
	СтрокаТовара.Количество = строка.Количество;
		
	возврат СтрокаТовара;
КонецФункции // ()

// #wortmann { 
// Функция заполняет Тип "Товары" для пакета ФабрикаXDTO "WMS" для Прихода
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ - ДокументСсылка.ПриходныйОрдерНаТовары - загружаемый документ
//
// Возвращаемое значение:
//	Товары - Тип "Товары"  для пакета ФабрикаXDTO "WMS"
Функция ТоварыПриход(Документ)
	
	Если СкладПолучательВПарах Тогда
		//КодОрганизацииВместоАртикула = КодОрганизацииВместоАртикула(Документ.Склад);
		
		Товары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Товары"));
		НПП = 1; 
		Артикулы = ПолучитьАртикулыИзДокумента(Документ);
		Для каждого строка Из Артикулы Цикл
			Товары.Строка.Добавить(СтрокаТовараПриход_ПарныеСклады(строка, НПП, Артикулы));
			НПП = НПП + 1;
		КонецЦикла;
	Иначе
		Товары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Товары"));
		УпаковочныеЛисты = ПолучитьДанныеУЛ(Документ);
		Для каждого строка Из УпаковочныеЛисты Цикл
			Товары.Строка.Добавить(СтрокаТовараПриход(строка, Документ));
		КонецЦикла;
	КонецЕсли;
	
	возврат Товары;
КонецФункции // РазделТовары()

// #wortmann { 
// Функция заполняет Тип "СтрокаТовараПриход" для пакета ФабрикаXDTO "WMS" для Прихода
// для коробного склада
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	строка - строкаТЧ - ДокументСсылка.ПриходныйОрдерНаТовары.Товары
//	Документ - ДокументСсылка.ПриходныйОрдерНаТовары - загружаемый документ
//
// Возвращаемое значение:
//	СтрокаТовара - Тип "СтрокаТовараПриход"  для пакета ФабрикаXDTO "WMS"
Функция СтрокаТовараПриход(строка, Документ)
	
	СтрокаТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "СтрокаТовараПриход"));
	
	//Если не ЗначениеЗаполнено(строка.СерияНоменклатуры) или строка.СерияНоменклатуры.СерийныйНомер = "" Тогда
	
	СтрокаТовара.НомерСтроки = строка.НомерСтроки;
	СтрокаТовара.Код = строка.Артикул;   // штрихкод короба
	СтрокаТовара.Количество = строка.Количество;
	СтрокаТовара.Атрибуты = Атрибуты(строка.УпаковочныйЛист);
	СтрокаТовара.СерийныйНомер = строка.УпаковочныйЛист.Код;
	
	СтрокаТовара.Комментарии = Комментарии(строка.Артикул + "|" + ПолучитьЦенуПО(строка, Документ) +  "|" + строка.Номенклатура);
	
	возврат СтрокаТовара;
КонецФункции // СтрокаТовараПриход()

// #wortmann { 
// Функция заполняет Тип "Атрибуты" для пакета ФабрикаXDTO "WMS" для Прихода
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	строка - строкаТЧ - ДокументСсылка.ПриходныйОрдерНаТовары.Товары
//
// Возвращаемое значение:
//	Атрибуты - Тип "Атрибуты"  для пакета ФабрикаXDTO "WMS"
Функция Атрибуты(УпаковочныйЛист)

	Атрибуты = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Атрибуты"));
	
	СтруктураАтрибутов = ПолучитьАтрибутыНоменклатуры(УпаковочныйЛист);

	Для Каждого Элемент из СтруктураАтрибутов Цикл 

		Атрибуты.Атрибут.Добавить(Атрибут(Элемент.Ключ, Элемент.Значение));
		// формат(Элемент.Значение/1000, "ЧРД=.") - нужен ли формат
	КонецЦикла;
	
	возврат Атрибуты;
КонецФункции // Атрибуты()

// #wortmann { 
// Функция заполняет Тип "Атрибут" для пакета ФабрикаXDTO "WMS" для Прихода
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Имя - строка - Наименование дополнительного сведения о номенклатуре
//	Значение - 
//
// Возвращаемое значение:
//	Атрибут - Тип "Атрибут"  для пакета ФабрикаXDTO "WMS"
Функция Атрибут(Имя, Значение)
	
	Атрибут = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Атрибут"));
	Атрибут.Имя = Имя;
	Атрибут.Значение = Значение;
	
	возврат Атрибут;
КонецФункции // ()

// #wortmann { 
// Функция заполняет Тип "СтрокаТовараПриход_ПарныеСклады" для пакета ФабрикаXDTO "WMS" для Прихода
// для парного склада
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	строка - строкаТЧ - ДокументСсылка.ПриходныйОрдерНаТовары.Товары
// 	НПП - число - номер обрабатываемой строки
//	выборка - результат запроса по ТЧ документа
//
// Возвращаемое значение:
//	СтрокаТовара - Тип "СтрокаТовараПриход_ПарныеСклады"  для пакета ФабрикаXDTO "WMS"
Функция СтрокаТовараПриход_ПарныеСклады(строка, НПП, выборка)
	
	СтрокаТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "СтрокаТовараПриход_ПарныеСклады"));
	
	//ДокументРезерва = строка.ДокументРезерва;
	Артикул = СокрЛП(строка.Артикул);
	
	СтрокаТовара.НомерСтроки = НПП;
	СтрокаТовара.Код = Артикул;
	СтрокаТовара.Количество = строка.Количество;
	СтрокаТовара.НомерСерии = строка.УпаковочныйЛист.Код;
	Если ЭтоВозврат Тогда
    СтрокаТовара.Блокировка = строка.Назначение;
	КонецЕсли;
	
	
	//СерийныеНомера = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "СерийныеНомера"));
	////СтрокаТовара.СерийныеНомера = СерийныеНомера;
	//
	//нашли = выборка.НайтиСтроки(новый Структура("Артикул", Артикул));
	//Для каждого строкаКМ Из нашли Цикл
	//	СерийныеНомера.СерийныйНомер.Добавить(сокрЛП(строкаКМ.КМ));
	//КонецЦикла;
	
	возврат СтрокаТовара;
КонецФункции // ()

// #wortmann { 
// Функция заполняет Тип "Комментарии" для пакета ФабрикаXDTO "WMS"
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Значение - строка - текст комментария
//
// Возвращаемое значение:
//	Комментарии - Тип "Комментарии"  для пакета ФабрикаXDTO "WMS"
Функция Комментарии(Значение)
	Комментарии = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Комментарии"));
	Комментарии.Комментарий.Добавить(Комментарий(Значение));
	возврат Комментарии;
КонецФункции // Комментарии()

// #wortmann { 
// Функция заполняет Тип "Комментарий" для пакета ФабрикаXDTO "WMS"
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Значение - строка - текст комментария
//	Последовательность - Число
//
// Возвращаемое значение:
//	Комментарий - Тип "Комментарий"  для пакета ФабрикаXDTO "WMS"
Функция Комментарий(Значение, Последовательность=1)
	
	Комментарий = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Комментарий"));
	Комментарий.Тип = "DISPLAY_WEB";
	Комментарий.Последовательность = Последовательность;
	Комментарий.Значение = Значение;
	
	возврат Комментарий;
КонецФункции // ()

// #wortmann { 
// Функция заполняет Тип "Комментарии" для пакета ФабрикаXDTO "WMS"
// для случая когда документом Распоряжением является документ Реализации
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	КомментарииДляРеализации - Структура - из значений для комментария
//
// Возвращаемое значение:
//	Комментарий - Тип "Комментарии"  для пакета ФабрикаXDTO "WMS"
Функция КомментарииРеализации(КомментарииДляРеализации)
	Комментарии = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Комментарии"));
	Комментарии.Комментарий.Добавить(Комментарий(КомментарииДляРеализации.Комментарий,1));
	Комментарии.Комментарий.Добавить(Комментарий(КомментарииДляРеализации.ИНН,2)); 
	Комментарии.Комментарий.Добавить(Комментарий(КомментарииДляРеализации.КонтактноеЛицо,3));
	Комментарии.Комментарий.Добавить(Комментарий(КомментарииДляРеализации.Вес,4));
	возврат Комментарии;
КонецФункции // Комментарии()

// #wortmann { 
// Функция заполняет Тип "ЭлементСпискаТоваров" для пакета ФабрикаXDTO "WMS" 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Строка - СтрокаТЧ - Строка из табличной части загружаемого документа 
//	Документ - ДокументСсылка.ПриходныйОрдерНаТовары
//
// Возвращаемое значение:
//	Элемент - Тип "ЭлементСпискаТоваров" для пакета ФабрикаXDTO "WMS"
Функция ПолучитьАртикулПО(строка)
	
	Артикул = сокрЛП(строка.Номенклатура.Артикул);
	
	возврат Артикул;
КонецФункции // ПолучитьАртикулПО()

// #wortmann { 
// Функция находит цену товара для Приходного Ордера 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Строка - СтрокаТЧ - Строка из табличной части загружаемого документа 
//	Документ - ДокументСсылка.ПриходныйОрдерНаТовары
//
// Возвращаемое значение:
//	Цена - Число
Функция ПолучитьЦенуПО(Строка, Документ)
	
	Распоряжение = Документ.Распоряжение;
	СтруктураОтбора = Новый Структура;
	//СтруктураОтбора.Вставить("ВариантКомплектации", Строка.Артикул);                         
	СтруктураОтбора.Вставить("IDКороба", Строка.УпаковочныйЛист);
	
	Если ЭтоПоступление Тогда
		МассивСтрокР = Распоряжение.гф_ПродукцияВКоробах.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрокР.Количество() > 0 Тогда
			Цена = формат(МассивСтрокР[0].СтоимостьКороба, "ЧДЦ=2; ЧГ=0");
		Иначе
			Цена = 0;
			Сообщение = "В ПТУ задана цена для " + Строка.УпаковочныйЛист;
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, Сообщение);		
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ТекущаяДатаСеанса(), "ДЛФ=T") + ". " + Сообщение);		
		КонецЕсли;
	ИначеЕсли ЭтоПеремещение Тогда
		Цена = ПолучитьЦену(Строка, Документ);
	КонецЕсли;
	
	возврат Цена;
	
КонецФункции // ()

// #wortmann { 
// Процедура создает запись XML для отправки по заполненному Пакету 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Пакет - Тип "Пакет" для пакета ФабрикаXDTO "WMS"
//	ИмяФайлаБезПути - строка
//	ИмяФайла - строка
//	НомерСообщения - строка
//	ВидДанных - Перечисления.гф_ВидыДанныхДляВыгрузки.Документ
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары, ДокументСсылка.ПриходныйОрдерНаТовары
//	Настройки - Структура - Настройки для FTPСоединения
Процедура ЗаписатьОтправитьПакет(Пакет, ИмяФайлаБезПути, ИмяФайла, НомерСообщения, ВидДанных, Документ, Настройки)
	
	Попытка
		Отказ = Ложь;
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ИмяФайла, "UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Пакет, "instock");
		ЗаписьXML.Закрыть();
		ОбработатьФайл(ИмяФайла);
		
			ЗаписатьСообщениеОшибки("Записан файл '" + ИмяФайла);
			ОтправитьФайл(ИмяФайла, Настройки, Соединение, , Отказ);
			
			Если Не Отказ Тогда
				Запись = РегистрыСведений.гф_ДанныеВыгрузки.СоздатьМенеджерЗаписи();
				Запись.Период = ТекущаяДатаСеанса();
				Запись.НомерСообщения = НомерСообщения;
				Запись.ВидДанных = ВидДанных;
				Запись.Документ = Документ;
				Запись.Состояние = Перечисления.гф_СтатусыВыгрузкиДанных.Отправлено;
				Запись.ИмяФайла = ИмяФайлаБезПути;
				Запись.Записать();
			КонецЕсли;
	
	Исключение
		Сообщение = "Не удалось записать файл " + ИмяФайла + " " + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Предупреждение", УровеньЖурналаРегистрации.Предупреждение, ЭтотОбъект, ЭтотОбъект, Сообщение);
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ТекущаяДата(), "ДЛФ=T") + ". " + Сообщение);

	КонецПопытки;
КонецПроцедуры 

// #wortmann { 
// Процедура создает запись XML для отправки по заполненному Пакету 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Пакет - Тип "Пакет" для пакета ФабрикаXDTO "WMS"
//	ИмяФайлаБезПути - строка
//	ИмяФайла - строка
//	НомерСообщения - строка
//	ВидДанных - Перечисления.гф_ВидыДанныхДляВыгрузки.Документ
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары, ДокументСсылка.ПриходныйОрдерНаТовары
//	Настройки - Структура - Настройки для FTPСоединения
Процедура ОтправитьФайл(ИмяФайла, Настройки, Соединение = Неопределено, НовоеРасширение = "", Отказ, НомерСклада = "") Экспорт
	
	// пока используем только ftp
	ВыгрузитьНаFTP(ИмяФайла, Настройки, Соединение, Истина, НовоеРасширение, Отказ, НомерСклада);
	
КонецПроцедуры 

Процедура ВыгрузитьНаFTP(ФайлДляВыгрузки, НастройкиFTPСоединения, Соединение = Неопределено, ПомещатьСразуВАрхив = Истина, НовоеРасширение = "", Отказ, НомерСклада = "") Экспорт
	
	Если Не ЗначениеЗаполнено(ФайлДляВыгрузки) Тогда
		ЗаписатьСообщениеОшибки("Не определен файл выгрузки", Истина);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НастройкиFTPСоединения = Неопределено Тогда
		ЗаписатьСообщениеОшибки("Не определены настройки ftp-соединения", Истина);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Соединение = Неопределено Тогда
		Соединение = _омОбщегоНазначенияВызовСервера.гф_ПолучитьСоединение(НастройкиFTPСоединения);
	КонецЕсли;	
	
	МассивПутейНаFTP = Новый Массив;
	
	// если НомерСклада указан, то это выгрузка на подбор и указываем другой путь, путя из настройки игнорируем
	Если НомерСклада > "" Тогда
		МассивПутейНаFTP.Добавить("/" + сокрЛП(НомерСклада) + "/Inbound/");
	ИначеЕсли НастройкиFTPСоединения.Каталог <> "" Тогда
		МассивПутейНаFTP.Добавить(НастройкиFTPСоединения.Каталог);
	Иначе
		МассивПутейНаFTP.Добавить(Соединение.ТекущийКаталог());
	КонецЕсли;	
	
	Если МассивПутейНаFTP.Количество() = 0 Тогда
		ЗаписатьСообщениеОшибки("Не определены директории для загрузки файлов на ftp", Истина);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(ФайлДляВыгрузки);
	Если не Файл.ЭтоФайл() Тогда
		возврат;
	КонецЕсли;
	СообщениеОбОшибке = "";
	КаталогУФТП = Соединение.ТекущийКаталог();
	
	Для Каждого СтрокаПутьНаFTP Из МассивПутейНаFTP Цикл
		ТекКаталог = СтрЗаменить(СтрЗаменить(СтрокаПутьНаFTP, "\", "/"), "//", "/");	
		Если Прав(ТекКаталог, 1) <> "/" Тогда
			ТекКаталог = ТекКаталог + "/";
		КонецЕсли;

		Попытка                                                                                               
			СообщениеОбОшибке = "Попытка установить каталог " + ТекКаталог + " - ";
			 Соединение.УстановитьТекущийКаталог(СтрокаПутьНаFTP);
			//Соединение.УстановитьТекущийКаталог(ТекКаталог);
			ЗаписатьСообщениеОшибки("Установлен каталог: " + ТекКаталог);
			
			СообщениеОбОшибке = "Попытка записи файла " + Файл.ПолноеИмя + " - ";
			
			Если ПомещатьСразуВАрхив Тогда
				// узнать про архивную папку...
				ИмяАрхивнойПапки = НастройкиFTPСоединения.Каталог + ?(Прав(НастройкиFTPСоединения.Каталог, 1) = "\", "", "\") + "Archive";
				СоздатьКаталог(ИмяАрхивнойПапки);
				
				КаталогАрхив = Новый Файл(ИмяАрхивнойПапки);
				Если Не КаталогАрхив.Существует() Тогда
					ЗаписатьСообщениеОшибки("Каталог для архивирования файлов задан неверно или не существует...", Истина);
					Отказ = Истина;
					Возврат;
				КонецЕсли;
				
				КопироватьФайл(Файл.ПолноеИмя, ИмяАрхивнойПапки + "\" + Файл.Имя);
				Соединение.Записать(ИмяАрхивнойПапки + "\" + Файл.Имя, Файл.Имя);
			Иначе
				Соединение.Записать(Файл.ПолноеИмя, Файл.Имя);
			КонецЕсли;
			
			//Проверим записан ли файл на ftp
			Если Соединение.НайтиФайлы(ТекКаталог + Файл.Имя).Количество() > 0 Тогда
				Если Не ПустаяСтрока(НовоеРасширение) Тогда
					// Для пердотвращения немедленной обработки переданного файла внешними роботами, файл может передаваться с фиктивным расширением
					// После того, как убедились, что файл передан удачно, если задан параметр НовоеРасширение - перименовываем файл.
					Соединение.Переместить(ТекКаталог + Файл.Имя, ТекКаталог + Файл.ИмяБезРасширения + "." + НовоеРасширение);
					Соединение.Удалить(ТекКаталог, Файл.Имя);
				КонецЕсли;
				
				ЗаписатьСообщениеОшибки("Файл успешно записан: " + ТекКаталог + Файл.Имя);
				
				СообщениеОбОшибке = "Попытка удаления файла " + Файл.ПолноеИмя + " - ";
				УдалитьФайлы(Файл.ПолноеИмя);
				
				// проверим удален ли с диска файл
				Если НайтиФайлы(Файл.ПолноеИмя).Количество() <> 0 Тогда
					ЗаписатьСообщениеОшибки("Ошибка удаления файла " + Файл.ПолноеИмя + " с диска! ", Истина);
				КонецЕсли;
				
			Иначе // файл не записан
				ЗаписатьСообщениеОшибки("Файл не записан: " + ТекКаталог + Файл.Имя, Истина);	
			КонецЕсли;	
			
		Исключение
			ЗаписатьСообщениеОшибки(СообщениеОбОшибке + ОписаниеОшибки(), Истина);
			Отказ = Истина;
			Возврат;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// #wortmann { 
// Функция выбирает атрибуты короба 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	УпаковочныйЛист - ДокументСсылка.УпаковочныйЛист
//
// Возвращаемое значение:
//	СтруктураАтрибутов - Структура - со значениями Веса, Длины, Ширины и Высоты короба
Функция ПолучитьАтрибутыНоменклатуры(УпаковочныйЛист)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УпаковочныйЛист.гф_Комплектация.гф_ВесКороба КАК WEIGHT,
		|	УпаковочныйЛист.гф_Комплектация.гф_ДлинаКороба КАК LENGTH,
		|	УпаковочныйЛист.гф_Комплектация.гф_ШиринаКороба КАК WIDTH,
		|	УпаковочныйЛист.гф_Комплектация.гф_ВысотаКороба КАК HEIGHT
		|ИЗ
		|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
		|ГДЕ
		|	УпаковочныйЛист.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", УпаковочныйЛист);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаАтрибутов = РезультатЗапроса.Выгрузить();
	
	СтруктураАтрибутов = Новый Структура;
	
	Для каждого Колонка Из ТаблицаАтрибутов.Колонки Цикл
		СтруктураАтрибутов.Вставить(Колонка.Имя);
	КонецЦикла; 
	
	Если ТаблицаАтрибутов.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(СтруктураАтрибутов, ТаблицаАтрибутов[0]);
		ЕстьАдрес = Истина;
	КонецЕсли;

	возврат СтруктураАтрибутов;
	
КонецФункции // ()

// #wortmann { 
// Функция находит данные по УЛ из Документа ПриходныйОрдерНаТовары
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ - ДокументСсылка.ПриходныйОрдерНаТовары
//
// Возвращаемое значение:
//	ТаблицаЗначений - результат запроса
Функция ПолучитьДанныеУЛ(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриходныйОрдерНаТоварыТовары.УпаковочныйЛист КАК УпаковочныйЛист,
		|	ПриходныйОрдерНаТоварыТовары.КоличествоУпаковок КАК Количество,
		|	ПриходныйОрдерНаТоварыТовары.УпаковочныйЛист.гф_Комплектация.Наименование КАК Артикул,
		|	ПриходныйОрдерНаТоварыТовары.УпаковочныйЛист.гф_Комплектация.Владелец КАК Номенклатура,
		|	ПриходныйОрдерНаТоварыТовары.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
		|ГДЕ
		|	ПриходныйОрдерНаТоварыТовары.Ссылка = &Ссылка
		|	И ПриходныйОрдерНаТоварыТовары.ЭтоУпаковочныйЛист = ИСТИНА";
	
	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();	
	
КонецФункции 

Функция  ПолучитьДанныеУЛПоВозврату(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.гф_IDКороба КАК УпаковочныйЛист
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары
		|ГДЕ
		|	ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Документ.Распоряжение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УЛ = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("УпаковочныйЛист");	
	
	Возврат УЛ;
	
КонецФункции

// #wortmann { 
// Функция выбирает значения Артикулов для парного склада 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ - ДокументСсылка.ПриходныйОрдерНаТовары 
//
// Возвращаемое значение:
//	ТаблицаЗначений - результат запроса
Функция ПолучитьАртикулыИзДокумента(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриходныйОрдерНаТоварыТовары.Номенклатура КАК Номенклатура,
		|	ПриходныйОрдерНаТоварыТовары.КоличествоУпаковок КАК Количество,
		|	ПриходныйОрдерНаТоварыТовары.Номенклатура.Артикул КАК Артикул,
		|	ПриходныйОрдерНаТоварыТовары.Назначение.Наименование КАК Назначение,
		|	Выбор Когда ПриходныйОрдерНаТоварыТовары.УпаковочныйЛистРодитель <> 		
		|        Значение(Документ.УпаковочныйЛист.ПустаяСсылка) Тогда
		|        ПриходныйОрдерНаТоварыТовары.УпаковочныйЛистРодитель
		|        Иначе ПриходныйОрдерНаТоварыТовары.гф_IDКороба 
		|    Конец КАК УпаковочныйЛист
		|ИЗ
		|	Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
		|ГДЕ
		|	ПриходныйОрдерНаТоварыТовары.Ссылка = &Ссылка
		|	И ПриходныйОрдерНаТоварыТовары.ЭтоУпаковочныйЛист = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();

КонецФункции

Функция ПолучитьЦену(Строка, Документ)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Номенклатура", Строка.Номенклатура);
	СтруктураОтбора.Вставить("Характеристика", Строка.Характеристика);
	СтруктураОтбора.Вставить("гф_IDКороба", Строка.гф_IDКороба);
	
	Товары = Документ.Распоряжение.ВозвращаемыеТовары.Выгрузить();
	
	ИскомаяСтрока = Товары.НайтиСтроки(СтруктураОтбора); 
	
	Если ИскомаяСтрока.Количество() > 0 Тогда
		Цена = ИскомаяСтрока[0].Цена;
	
	//запрос = новый Запрос(
	//"ВЫБРАТЬ
	//|	а.Номенклатура КАК Номенклатура,                                       
	//|	а.Склад КАК Склад,
	//|	а.СтоимостьОборот / а.КоличествоОборот КАК Цена
	//|ИЗ
	//|	РегистрНакопления.ПартииТоваровНаСкладах.Обороты(, , Регистратор, Номенклатура = &Номенклатура) КАК а
	//|ГДЕ
	//|	а.Регистратор = &Регистратор");
	//запрос.УстановитьПараметр("Регистратор", Документ);
	//запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	//выборкаЦены = запрос.Выполнить().Выбрать();
	//Если выборкаЦены.Следующий() Тогда
	//	Цена = выборкаЦены.Цена;
	Иначе
		Цена = 0;
	КонецЕсли;
	
	Возврат формат(Цена, "ЧДЦ=2; ЧГ=0");
КонецФункции // ()

// #wortmann { 
// Функция расчитывает цену коробов для строки 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары
//	Строка - СтрокаТЗ - строка с элементом номенклатуры и его данными
//
// Возвращаемое значение:
//	Цена - число
Функция ПолучитьЦенуSO(Документ, Строка)
	
	Цена=0;
	СвязанныйДокумент = ПолучитьСвязанныйДокументРО(Документ);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказКлиентагф_ТоварыВКоробах.ЦенаКороба КАК ЦенаКороба
		|ИЗ
		|	Документ.ЗаказКлиента.гф_ТоварыВКоробах КАК ЗаказКлиентагф_ТоварыВКоробах
		|ГДЕ
		|	ЗаказКлиентагф_ТоварыВКоробах.Ссылка = &Ссылка
		|	И ЗаказКлиентагф_ТоварыВКоробах.ВариантКомплектации = &ВариантКомплектации";
	
	Запрос.УстановитьПараметр("ВариантКомплектации", Строка.ВариантКомплектации);
	Запрос.УстановитьПараметр("Ссылка", СвязанныйДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
	Выборка.Следующий();
	Цена = Выборка.ЦенаКороба * Строка.Количество; 
	КонецЕсли;

	Возврат СтрЗаменить(формат(Цена, "ЧДЦ=2"), Символы.НПП, "");
	
КонецФункции // ()

// #wortmann { 
// Процедура обрабатывает подготовленный файл для отправки 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	ИмяФайла - строка
Процедура ОбработатьФайл(ИмяФайла)
	чтение = новый ЧтениеТекста(ИмяФайла);
	текст = чтение.Прочитать();
	чтение.Закрыть();
	запись = новый ЗаписьТекста(ИмяФайла);
	текст = СтрЗаменить(текст, " xmlns=""WMS""", "");
	текст = СтрЗаменить(текст, " xmlns:xs=""http://www.w3.org/2001/XMLSchema""", "");
	текст = СтрЗаменить(текст, " xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""", "");
	текст = СтрЗаменить(текст, " xsi:type=""Адреса""", "");
	// НАЧАЛО ИЗМЕНЕНИЙ, МАСТЕР СОФТ, АЛЕКСЕЙ, 23.10.2020. Задача: 
	текст = СтрЗаменить(текст, " xsi:type=""Адрес""", "");
	// КОНЕЦ ИЗМЕНЕНИЙ
	текст = СтрЗаменить(текст, " xsi:type=""СтрокаТовара""", "");
	текст = СтрЗаменить(текст, " xsi:type=""СтрокаТовараПриход""", "");
	текст = СтрЗаменить(текст, " xsi:type=""Атрибут""", "");
	текст = СтрЗаменить(текст, " xsi:type=""Адрес2""", "");
	текст = СтрЗаменить(текст, " xsi:type=""СтрокаТовара2""", "");
	//+ЛИТ Иванов 25102021
	текст = СтрЗаменить(текст, " xsi:type=""СтрокаТовара3""", "");
	текст = СтрЗаменить(текст, " xsi:type=""СтрокаТовара4""", "");
	//-ЛИТ Иванов 25102021	
	текст = СтрЗаменить(текст, " xsi:type=""СерийныеНомера""", "");
	текст = СтрЗаменить(текст, " xsi:type=""Штрихкод""", "");
	текст = СтрЗаменить(текст, " xsi:type=""ЭлементСпискаТоваров_ПарныеСклады""", "");
	текст = СтрЗаменить(текст, " xsi:type=""СтрокаТовараПриход_ПарныеСклады""", "");
	текст = СтрЗаменить(текст, " xsi:type=""ЭлементСпискаТоваров""", "");
	текст = СтрЗаменить(текст, Символы.Таб, "");
	текст = СтрЗаменить(текст, Символы.ПС, "");
	запись.Записать(текст);
	запись.Закрыть();
КонецПроцедуры

// #wortmann { 
// Функция высчитывает номер заявки 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ - Документ - ДокументСсылка.РасходныйОрдерНаТовары, ДокументСсылка.ПриходныйОрдерНаТовары
//
// Возвращаемое значение:
//	НомерЗаявки - Строка
Функция НомерЗаявки(Документ)
	
	Если ЭтоРеализация Тогда
		НомерЗаявки = КодКлиента + Документ.Номер;
	ИначеЕсли ЭтоПоступление Тогда 
		НомерЗаявки = Документ.Номер;
	ИначеЕсли ЭтоПеремещение Тогда
		НомерЗаявки =  КодКлиента + Документ.Номер + "-M";
	ИначеЕсли ЭтоВозврат Тогда
		НомерЗаявки =  КодКлиента + Документ.Номер + "-V";// Добавила V от себя для понимания возврата		
	Иначе
		ДляПоиска = строка(Документ.СкладПолучатель);
		Если Найти(ДляПоиска, "Товары для розницы") = 0 Тогда  
			НомерЗаявки =  КодКлиента + Документ.Номер + "-S";
		Иначе
			НомерЗаявки =  КодКлиента + Документ.Номер + "-R";
		КонецЕсли;
	КонецЕсли;
	
	возврат НомерЗаявки;
КонецФункции // ()

// #wortmann { 
// Функция высчитывает дату отгрузки для Приходного Ордера
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	ДатаОтгр - Дата документа
//
// Возвращаемое значение:
//	ДатаОтгрузки - Дата
Функция ЗаполнитьДатуОтгрузки(ДатаОтгр)
	
	ДатаОтгрузки = ДатаОтгр;
	//расчет рабочих дней для отгрузки
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ДанныеПроизводственногоКалендаря.Дата КАК Дата
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.Год МЕЖДУ &ГодНач И &ГодКон
	|	И ДанныеПроизводственногоКалендаря.ВидДня В(&РабДни)";
	
	Запрос.УстановитьПараметр("ГодНач",Год(ТекущаяДата())-1);
	Запрос.УстановитьПараметр("ГодКон",Год(ТекущаяДата())+1);
	МасВидДня = Новый Массив;
	МасВидДня.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	МасВидДня.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
	Запрос.УстановитьПараметр("РабДни",МасВидДня);
	ТзРабДней = Запрос.Выполнить().Выгрузить();
	МасРабДней = ТзРабДней.ВыгрузитьКолонку("Дата");
	//расчет даты отгрузки для письма
	ВремяХ = 13;
	Если ЗначениеЗаполнено(ДатаОтгрузки) Тогда
		ДобавитьДней = 0;
		Час = Час(ДатаОтгрузки);
		Если Час < ВремяХ Тогда
			ДобавитьДней = 1;
		Иначе
			ДобавитьДней = 2;	
		КонецЕсли;
		//проверка по регл. произв. календарю
		Для дн = 1 По ДобавитьДней Цикл
			ДатаОтгрузки = ДатаОтгрузки + 86400;
			Добавлять = Истина;
			сч = 1;
			Пока Добавлять Цикл
				сч = сч+1;
				Если МасРабДней.Найти(НачалоДня(ДатаОтгрузки)) = Неопределено Тогда
					ДатаОтгрузки = ДатаОтгрузки + 86400;
					//ошибка в производственном календаре, нерабочих дней > 20 
					Если сч > 20 Тогда
						Добавлять = Ложь;
						Сообщить("Проверте заполнение производственного календаря!");
						ДатаОтгрузки = ДатаОтгрузки + 86400; 
					КонецЕсли;
				Иначе
					Добавлять = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	Возврат ДатаОтгрузки;
	
КонецФункции

// #wortmann { 
// Функция получает код клиента из дополнительных реквизитов Склада
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Склад - СправочникСсылка.Склады
//
// Возвращаемое значение:
//	Строка
Функция ПолучитьКодКлиента(Склад)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СкладыДополнительныеРеквизиты.Свойство.Имя КАК Свойство,
		|	СкладыДополнительныеРеквизиты.Значение КАК Значение
		|ИЗ
		|	Справочник.Склады.ДополнительныеРеквизиты КАК СкладыДополнительныеРеквизиты
		|ГДЕ
		|	СкладыДополнительныеРеквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Свойство = "гф_СкладыКодКлиентаСклад" Тогда
				Возврат Выборка.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьНомерИнвойса()

	//запрос = новый Запрос(
	//"ВЫБРАТЬ
	//|	а.ДокументОприходования КАК ДокументОприходования,
	//|	а.СерияНоменклатуры.НомерГТД КАК НомерГТД
	//|ПОМЕСТИТЬ выборка
	//|ИЗ
	//|	РегистрНакопления.ПартииТоваровНаСкладах КАК а
	//|ГДЕ
	//|	а.Регистратор = &Регистратор
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	выборка.ДокументОприходования.Номер КАК Номер
	//|ИЗ
	//|	выборка КАК выборка
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	выборка.НомерГТД КАК НомерГТД
	//|ИЗ
	//|	выборка КАК выборка");
	//запрос.УстановитьПараметр("Регистратор", Документ);
	//результат = запрос.ВыполнитьПакет();
	//
	//массив = результат[1].Выгрузить().ВыгрузитьКолонку("Номер");
	//НомерИнвойса = сокрЛП(СтрСоединить(массив, ","));
	//массив = результат[2].Выгрузить().ВыгрузитьКолонку("НомерГТД");
	//НомерИнвойса = НомерИнвойса + "-" + сокрЛП(СтрСоединить(массив, ","));
	//
	//возврат НомерИнвойса;
	Возврат 123;

КонецФункции // ПолучитьНомерИнвойса()

// #wortmann { 
// Функция получает структуру по указанному типу адреса
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	ВидАдреса - СправочникСсылка.ВидыКонтактнойИнформации
//	Получатель - ОпределяемыйТип.ОтправительПолучательТоваров
//	ЕстьАдрес - Булево
//
// Возвращаемое значение:
//	Адрес - Структура
Функция ПолучитьАдресПоТипуКомпании(ВидАдреса, Получатель, ЕстьАдрес)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтрагентыКонтактнаяИнформация.Регион КАК Регион,
		|	КонтрагентыКонтактнаяИнформация.Город КАК Город,
		|	КонтрагентыКонтактнаяИнформация.Представление КАК Представление,
		|	КонтрагентыКонтактнаяИнформация.Вид КАК Вид,
		|	КонтрагентыКонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
		|	ПОДСТРОКА(КонтрагентыКонтактнаяИнформация.Представление, 0, 6) КАК Индекс
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|ГДЕ
		|	КонтрагентыКонтактнаяИнформация.Вид = &Вид
		|	И КонтрагентыКонтактнаяИнформация.Тип = &Тип
		|	И КонтрагентыКонтактнаяИнформация.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Вид", ВидАдреса);
	Запрос.УстановитьПараметр("Ссылка", Получатель);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Если ВидАдреса = Справочники.ВидыКонтактнойИнформации.АдресПартнера 
		ИЛИ ТипЗнч(Получатель) = Тип("СправочникСсылка.Партнеры") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Контрагенты", "Справочник.Партнеры");
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	ТаблицаАдресов = РезультатЗапроса.Выгрузить();
	Адрес = новый Структура; 
	
	Для каждого Колонка Из ТаблицаАдресов.Колонки Цикл
		Адрес.Вставить(Колонка.Имя);
	КонецЦикла;
	Если ТаблицаАдресов.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Адрес, ТаблицаАдресов[0]);
		ЕстьАдрес = Истина;
	КонецЕсли;
	
	Возврат Адрес;

КонецФункции // ()

// #wortmann { 
// Функция устанавливает является ли склад указанный в документе Основным
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Склад - СправочникСсылка.Склады
//
// Возвращаемое значение:
//	Булево - Истина, если Склад Основной, иначе Ложь
Функция ЭтоОсновнойСклад(Склад) Экспорт

	Склады = _омОбщегоНазначенияКлиентСервер.ПолучитьГлобальноеЗначениеМассив("гф_ГлобальныеЗначенияОсновнойСклад");
	
	Если Склады.Найти(Склад) <> Неопределено Тогда
			Возврат Истина;			
	КонецЕсли;
		
	Возврат Ложь;

КонецФункции // ЭтоПарныйСклад()

// #wortmann { 
// Функция устанавливает является ли склад указанный в документе Таможенным
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Склад - СправочникСсылка.Склады
//
// Возвращаемое значение:
//	Булево - Истина, если Склад Таможенный, иначе Ложь
Функция ЭтоТаможенныйСклад(Склад) Экспорт
	Склады = _омОбщегоНазначенияКлиентСервер.ПолучитьГлобальноеЗначениеМассив("гф_ГлобальныеЗначенияТаможенныйСклад");
	
	Если Склады.Найти(Склад) <> Неопределено Тогда
			Возврат Истина;			
	КонецЕсли;
		
	Возврат Ложь;
КонецФункции 

Функция ЭтоСкладТранзитБезРезерва(Склад) Экспорт
	Возврат Ложь;
КонецФункции 

Функция ЭтоСкладРазукомплектации(Склад) Экспорт
	Возврат Ложь;
КонецФункции 

//#wortmann { 
// Функция возвращает значение для ТЭГ source_system по каждой организации
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Склад - СправочникСсылка.Склады
//
// Возвращаемое значение:
//	Строка - значение для ТЭГ source_system
Функция ПолучитьПоле_SourceSystem()
	
	Рез = "1С";
	
	Суфф = "_";
	
	Если СтрНайти(НРег(Организация.Наименование), "вендель") > 0 Тогда
		Суфф = Суфф + "ВЕ";
    ИначеЕсли СтрНайти(НРег(Организация.Наименование), "вортманн") > 0 Тогда
		Суфф = Суфф + "ВО";
	ИначеЕсли СтрНайти(НРег(Организация.Наименование), "каприс") > 0 Тогда
		Суфф = Суфф + "КА";
	ИначеЕсли СтрНайти(НРег(Организация.Наименование), "шу.ком") > 0 Тогда
		Суфф = Суфф + "ШУ";
	ИначеЕсли СтрНайти(НРег(Организация.Наименование), "яна") > 0 Тогда
		Суфф = Суфф + "ЯН";
	КонецЕсли;
	
	Возврат Рез + Суфф;

КонецФункции // ПолучитьПоле_SourceSystem()

#КонецОбласти

#Область ЗагрузкаДанных

Процедура ЗагрузитьДанные() Экспорт
	
	НастройкиFTPСоединения = _омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначениеFTP("FTP_НастройкиДляЗагрузкиИзWMS");
	
	Если НастройкиFTPСоединения.ЕстьДанные = Ложь Тогда
		Сообщение = "Не заданы настройки подключния к ftp-серверу.";
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, Сообщение);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ТекущаяДатаСеанса(), "ДЛФ=T") + ". " + Сообщение);
		
		Возврат;
	КонецЕсли;
	
	//Попытка
	//	
	//	//Соединение = _омОбщегоНазначенияВызовСервера.гф_ПолучитьСоединение(НастройкиFTPСоединения);       
	//	
	//	Соединение = Новый FTPСоединение(
	//    НастройкиFTPСоединения.Сервер, // адрес ftp сервера
	//    НастройкиFTPСоединения.Порт, // порт сервера
	//    НастройкиFTPСоединения.Пользователь, // имя пользователя
	//    НастройкиFTPСоединения.Пароль, // пароль пользователя
	//    Неопределено, // прокси не используется
	//    Истина, // пассивный режим работы
	//    300 // таймаут (0 - без ограничений)
	//    );          
	//	
	//	ФайлыКОбработке = Соединение.НайтиФайлы(НастройкиFTPСоединения.Каталог, "*.xml");
	
	ФайлыКОбработке = НайтиФайлы(НастройкиFTPСоединения.Каталог, "*.xml"); 
	
		Если ФайлыКОбработке.Количество() > 0 Тогда
			МассивИменЗагруженныхФайлов = Новый Массив;
			ОбработатьПолученныеФайлы(ФайлыКОбработке, МассивИменЗагруженныхФайлов);
		Иначе    
			Сообщение = "В указанном FTP каталоге нет файлов с расширением *.xml!";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ТекущаяДата(), "ДЛФ=T") + ". " + Сообщение);
		КонецЕсли;
		
		//МассивТекстовыхФайлов = Соединение.НайтиФайлы(НастройкиFTPСоединения.Каталог + "LOG/", "*.txt");
		//Если МассивТекстовыхФайлов.Количество() > 0 Тогда
		//	//ОбработатьТекстовыеФайлы(МассивТекстовыхФайлов);
		//КонецЕсли;
		
 //   Исключение
 //   	Сообщение = "Ошибка подключения FTP!!!"; 
 //   	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ТекущаяДата(), "ДЛФ=T") + ". " + Сообщение + ОписаниеОшибки());
 //   КонецПопытки; 
 //
	
	//МассивИменЗагруженныхФайлов = Новый Массив;
	//ОбработатьПолученныеФайлы(НастройкиFTPСоединения.Каталог, МассивИменЗагруженныхФайлов);
	//УдалитьФайлыНаФТП(МассивИменЗагруженныхФайлов, НастройкиFTPСоединения, ПредставлениеКаталогаНаФТП);
	
КонецПроцедуры

Процедура ОбработатьТекстовыеФайлы(МассивТекстовыхФайлов)
	
	МассивЗагружаемыхФайлов = Новый ТаблицаЗначений;
	МассивЗагружаемыхФайлов.Колонки.Добавить("Файл");
	МассивЗагружаемыхФайлов.Колонки.Добавить("ИмяФайла");
	МассивЗагружаемыхФайлов.Колонки.Добавить("УдалитьПослеОбработки");
	
	Для Каждого ФайлКОбработке Из МассивТекстовыхФайлов Цикл
		СтрокаЗагружаемыйФайл = МассивЗагружаемыхФайлов.Добавить();
		СтрокаЗагружаемыйФайл.Файл = ФайлКОбработке.ПолноеИмя;
		СтрокаЗагружаемыйФайл.ИмяФайла = ФайлКОбработке.Имя;
		СтрокаЗагружаемыйФайл.УдалитьПослеОбработки = Истина;
	КонецЦикла;
	
	Для Каждого ФайлОбмена Из МассивЗагружаемыхФайлов Цикл
		
		Если ЗагружалсяЛиФайл(ФайлОбмена.ИмяФайла) Тогда
			Сообщение = "Файл " + ФайлОбмена.ИмяФайла + " загружался ранее. Документ не создан. Документ перемещён в архив.";
			ЗаписатьСообщениеОшибки(Сообщение, Истина);
			ПереместитьФайлВАрхив(ФайлОбмена.Файл);
			Продолжить;
		КонецЕсли;
		
		    НайтиДокументИЗаписатьКомментарий(ФайлОбмена);
	КонецЦикла
		
КонецПроцедуры

Процедура  НайтиДокументИЗаписатьКомментарий(Файл)
	
	ВыбФайл = Новый Файл(Файл.ИмяФайла);
	
	//Если ВыбФайл.Существует() Тогда //проверка на существование файла
		
		Текст = Новый ЧтениеТекста(Файл.ИмяФайла);
		
		Строка = Текст.ПрочитатьСтроку();
		
		Пока Строка <> Неопределено Цикл //строки читаются до символа       перевода строки
			
			// манипуляции со строкой
			
			Сообщить(Строка);
			
			Строка = Текст.ПрочитатьСтроку();
			
		КонецЦикла;
		
	//Иначе
	//	
	//	Сообщить("Файл не найден!");
	//	
	//КонецЕсли;

	СтрокаИмени = Файл.ИмяФайла;
    ДатаДокумента  = ПолучитьДатуИзСтроки(СтрокаИмени);
	// 3 - количество цифр в коде клиента
	НомерДокумента = Прав(СтрокаИмени, СтрДлина(СтрокаИмени) - 3);
     // Формат(Документ.Дата, "ДФ=yyyyMMddHHmm")

КонецПроцедуры

Процедура ОбработатьПолученныеФайлы(ФайлыКОбработке, МассивИменЗагруженныхФайлов)
	
	МассивЗагружаемыхФайлов = Новый ТаблицаЗначений;
	МассивЗагружаемыхФайлов.Колонки.Добавить("Файл");
	МассивЗагружаемыхФайлов.Колонки.Добавить("ИмяФайла");
	МассивЗагружаемыхФайлов.Колонки.Добавить("ДатаОтправления");
	МассивЗагружаемыхФайлов.Колонки.Добавить("ДатаПолучения");
	МассивЗагружаемыхФайлов.Колонки.Добавить("УдалитьПослеОбработки");
	
	Для Каждого ФайлКОбработке Из ФайлыКОбработке Цикл
		СтрокаЗагружаемыйФайл = МассивЗагружаемыхФайлов.Добавить();
		СтрокаЗагружаемыйФайл.Файл = ФайлКОбработке.ПолноеИмя;
		СтрокаЗагружаемыйФайл.ИмяФайла = ФайлКОбработке.Имя;
		СтрокаЗагружаемыйФайл.УдалитьПослеОбработки = Истина;
	КонецЦикла;

	//ФайлыКОбработке = НайтиФайлы(ПутьДляФайловОбмена, "*.log");
	//Для Каждого ФайлКОбработке Из ФайлыКОбработке Цикл
	//	СтрокаЗагружаемыйФайл = МассивФайловЛог.Добавить();
	//	СтрокаЗагружаемыйФайл.Файл = ФайлКОбработке.ПолноеИмя;
	//	СтрокаЗагружаемыйФайл.ИмяФайла = ФайлКОбработке.Имя;
	//	СтрокаЗагружаемыйФайл.УдалитьПослеОбработки = Истина;
	//КонецЦикла;
	
	МассивЗагружаемыхФайловРО = ПреобразоватьМассивФайлов(МассивЗагружаемыхФайлов, Истина);
	МассивЗагружаемыхФайловПО = ПреобразоватьМассивФайлов(МассивЗагружаемыхФайлов);
	
	Если МассивЗагружаемыхФайловРО.Количество() > 0 Тогда
		УпорядочитьФайлыПоДатеСоздания(МассивЗагружаемыхФайловРО);
        ОбработатьЗагружаемыйФайл(МассивЗагружаемыхФайловРО, Истина);
	КонецЕсли;

    Если МассивЗагружаемыхФайловПО.Количество() > 0 Тогда
		УпорядочитьФайлыПоДатеСоздания(МассивЗагружаемыхФайловПО);
       	ОбработатьЗагружаемыйФайл(МассивЗагружаемыхФайловПО);
	КонецЕсли;
		
КонецПроцедуры // ОбработатьПолученныеФайлы()

Процедура ОбработатьЗагружаемыйФайл(МассивЗагружаемыхФайлов, РасходныйОрдер = Ложь)

	Для Каждого ФайлОбмена Из МассивЗагружаемыхФайлов Цикл
		
		Если ЗагружалсяЛиФайл(ФайлОбмена.ИмяФайла) Тогда
			Сообщение = "Файл " + ФайлОбмена.ИмяФайла + " загружался ранее. Документ не создан. Документ перемещён в архив.";
			ЗаписатьСообщениеОшибки(Сообщение, Истина);
			ПереместитьФайлВАрхив(ФайлОбмена.Файл);
			Продолжить;
		КонецЕсли;
		
		Файл = Новый Файл(ФайлОбмена.Файл);
		Если Файл.Размер() = 0 Тогда
			ЗаписатьСообщениеОшибки("Файл " + ФайлОбмена.ИмяФайла + " размер 0.", Истина);
			ПереместитьФайлВАрхив(ФайлОбмена.Файл);
			Продолжить;
		КонецЕсли;
		
		Попытка
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.ОткрытьФайл(ФайлОбмена.Файл, , , "utf8");
			Фабрика = Новый ФабрикаXDTO();
			Данные = Фабрика.ПрочитатьXML(ЧтениеXML);
			ЧтениеXML.Закрыть();
		Исключение
			Сообщение = "Файл " + ФайлОбмена.ИмяФайла + " ошибка загрузки. " + ОписаниеОшибки();
			ЗаписатьСообщениеОшибки(Сообщение, Истина);
			Продолжить;
		КонецПопытки;
		
		document = Данные.documents.document;
		Статус = document.header.status;
		
		ДокументПоОбмену = Документы.гф_ДанныеЗагрузкиПоОбмену.СоздатьДокумент();
		ДокументПоОбмену.Дата = ТекущаяДатаСеанса();
		ДокументПоОбмену.ИмяФайла = ФайлОбмена.ИмяФайла;
		ДокументПоОбмену.ПолноеИмяФайла = ФайлОбмена.Файл;
		ДокументПоОбмену.СтатусДокумента = Перечисления.гф_СтатусыДокументаЗагрузкиWMS.Создан;
		ДокументПоОбмену.ДополнительныеСвойства.Вставить("УдалитьПослеОбработки", ФайлОбмена.УдалитьПослеОбработки);
		//Документ.Файл = Новый ХранилищеЗначения(ПолучитьТекстФайла(ФайлОбмена.Файл));
		Попытка
			ДокументПоОбмену.Записать();
		Исключение
			Сообщение = "Произошла ошибка записи " + СокрЛП(ДокументПоОбмену) + Символы.ПС + ОписаниеОшибки();
			ЗаписатьСообщениеОшибки(Сообщение, Истина);
			Продолжить;
		КонецПопытки;

		ДокументНайден = Истина;
		НайтиИОбработатьДокумент(Статус, document, ФайлОбмена, ДокументПоОбмену, ДокументНайден, РасходныйОрдер);

		Если НЕ ДокументНайден Тогда
			Сообщение = "Произошла ошибка. Расходный ордер на товары, из файла " + ФайлОбмена.ИмяФайла;
			ЗаписатьСообщениеОшибки(Сообщение, Истина);
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура НайтиИОбработатьДокумент(Статус, КоллекцияДокументовXDTO, ФайлОбмена, ДокументПоОбмену, ДокументНайден, РасходныйОрдер)

	Если ТипЗнч(КоллекцияДокументовXDTO) = Тип("СписокXDTO") Тогда
		Для Каждого ТекущийЭлемент Из КоллекцияДокументовXDTO Цикл 
			НайденныйДокументОбъект = ПолучитьДокумент(ТекущийЭлемент, ФайлОбмена.ИмяФайла, РасходныйОрдер); 
			Если НайденныйДокументОбъект <> Неопределено Тогда
				ИзменитьСтатусДокумента(Статус, НайденныйДокументОбъект, ТекущийЭлемент, ФайлОбмена, ДокументПоОбмену, РасходныйОрдер);
			Иначе	
				Продолжить;
				ДокументНайден = Ложь;
			КонецЕсли;
		КонецЦикла;
	Иначе
		НайденныйДокументОбъект = ПолучитьДокумент(КоллекцияДокументовXDTO, ФайлОбмена.ИмяФайла, РасходныйОрдер);
		
		Если НайденныйДокументОбъект <> Неопределено Тогда
			ИзменитьСтатусДокумента(Статус, НайденныйДокументОбъект, КоллекцияДокументовXDTO, ФайлОбмена, ДокументПоОбмену, РасходныйОрдер);
		Иначе
			ДокументНайден = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 
	
Процедура ИзменитьСтатусДокумента(Статус, НайденныйДокументОбъект, КоллекцияДокументовXDTO, ФайлОбмена, ДокументПоОбмену, РасходныйОрдер)
	
	Если РасходныйОрдер Тогда
		Если Статус = "IMPORTED" Тогда
			НайденныйДокументОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.Проверен;
			ПереместитьФайлВАрхив(ФайлОбмена.Файл);
		ИначеЕсли Статус = "PICKED" Тогда
			ПроизвестиЗаполнениеИзменениеТабличныхЧастейДокумента(НайденныйДокументОбъект, КоллекцияДокументовXDTO);
			НайденныйДокументОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтгрузке;
			ПереместитьФайлВАрхив(ФайлОбмена.Файл);
		ИначеЕсли Статус = "SHIPPED" Тогда
			НайденныйДокументОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
			ПереместитьФайлВАрхив(ФайлОбмена.Файл);
		Иначе
			Сообщение = "Файл " + ФайлОбмена.ИмяФайла + " содержит пустой или неправильный статус. 
			|Документ не обработан. Файл перемещён в архив.";
			ЗаписатьСообщениеОшибки(Сообщение, Истина);
			ПереместитьФайлВАрхив(ФайлОбмена.Файл);
		КонецЕсли;
	Иначе
		Если Статус = "IMPORTED" Тогда
			НайденныйДокументОбъект.Статус = Перечисления.СтатусыПриходныхОрдеров.ВРаботе;
			ПереместитьФайлВАрхив(ФайлОбмена.Файл);
		ИначеЕсли Статус = "CLOSED" Тогда 
			//ПроизвестиЗаполнениеИзменениеТЧДокументаПО(НайденныйДокументОбъект, КоллекцияДокументовXDTO);
			НайденныйДокументОбъект.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
			ПереместитьФайлВАрхив(ФайлОбмена.Файл);			
		ИначеЕсли Статус = "MOVED" Тогда
			//НайденныйДокументОбъект.Статус = Перечисления.СтатусыПриходныхОрдеров.Перемещен;
			ПереместитьФайлВАрхив(ФайлОбмена.Файл);
			НайтиИОбработатьДокументПеремещения(НайденныйДокументОбъект, КоллекцияДокументовXDTO);
		Иначе
			Сообщение = "Файл " + ФайлОбмена.ИмяФайла + " содержит пустой или неправильный статус. 
			|Документ не обработан. Файл перемещён в архив.";
			ЗаписатьСообщениеОшибки(Сообщение, Истина);
			ПереместитьФайлВАрхив(ФайлОбмена.Файл);
		КонецЕсли;

	КонецЕсли;

	Попытка
		НайденныйДокументОбъект.Записать();
	Исключение
		Сообщение = "Произошла ошибка записи расходного ордера" + НайденныйДокументОбъект.Ссылка + Символы.ПС + ОписаниеОшибки();
		ЗаписатьСообщениеОшибки(Сообщение, Истина);
	КонецПопытки;
	
	ДокументПоОбмену.СтатусДокумента = Перечисления.гф_СтатусыДокументаЗагрузкиWMS.Отработан;
	Попытка
		ДокументПоОбмену.Записать();
	Исключение
		Сообщение = "Произошла ошибка записи " + СокрЛП(ДокументПоОбмену) + Символы.ПС + ОписаниеОшибки();
		ЗаписатьСообщениеОшибки(Сообщение, Истина);
	КонецПопытки;
	
КонецПроцедуры 	

Процедура ПроизвестиЗаполнениеИзменениеТабличныхЧастейДокумента(НайденныйДокументОбъект, ОбъектXDTO)
	
	СтрокиДокументаXDTO = ОбъектXDTO.lines.line;
	
	ОтгружаемыеТоварыДокументаПоУЛ = ПолучитьОтгружаемыеТоварыДокументаПоУЛ(НайденныйДокументОбъект);
	
	ОтгружаемыеТоварыИзФайла = Новый ТаблицаЗначений;
	ОтгружаемыеТоварыИзФайла.Колонки.Добавить("УпаковочныйЛист");
	ОтгружаемыеТоварыИзФайла.Колонки.Добавить("КоличествоУпаковок");	
	
	Если ТипЗнч(СтрокиДокументаXDTO) = Тип("СписокXDTO") Тогда
		
		Для Каждого СтрокаXDTO Из СтрокиДокументаXDTO ЦИкл
			ЗаписатьСтрокуОтгружаемыеТовары(НайденныйДокументОбъект, СтрокаXDTO, ОтгружаемыеТоварыИзФайла);
		КонецЦикла;	
	Иначе	
		ЗаписатьСтрокуОтгружаемыеТовары(НайденныйДокументОбъект, СтрокиДокументаXDTO, ОтгружаемыеТоварыИзФайла);
	КонецЕсли;	

	ОтгружаемыеТоварыОдинаковы = СравнитьТаблицыОтгружаемыхТоваров(ОтгружаемыеТоварыДокументаПоУЛ, ОтгружаемыеТоварыИзФайла);
	
	Если ОтгружаемыеТоварыОдинаковы Тогда
		ПоменятьДействиеВТабличнойЧасти(НайденныйДокументОбъект);
	Иначе
		ПерезаполнитьТЧОтгружаемыеТовары(НайденныйДокументОбъект, ОтгружаемыеТоварыИзФайла);
	КонецЕсли;
   
КонецПроцедуры

Процедура ПроизвестиЗаполнениеИзменениеТЧДокументаПО(НайденныйДокументОбъект, ОбъектXDTO)
	
	СтрокиДокументаXDTO = ОбъектXDTO.lines.line;
	
	ОтгружаемыеТоварыДокументаПоУЛ = ПолучитьОтгружаемыеТоварыДокументаПоУЛ(НайденныйДокументОбъект);
	
	ОтгружаемыеТоварыИзФайла = Новый ТаблицаЗначений;
	ОтгружаемыеТоварыИзФайла.Колонки.Добавить("УпаковочныйЛист");
	ОтгружаемыеТоварыИзФайла.Колонки.Добавить("КоличествоУпаковок");	
	
	Если ТипЗнч(СтрокиДокументаXDTO) = Тип("СписокXDTO") Тогда
		
		Для Каждого СтрокаXDTO Из СтрокиДокументаXDTO ЦИкл
			ЗаписатьСтрокуОтгружаемыеТовары(НайденныйДокументОбъект, СтрокаXDTO, ОтгружаемыеТоварыИзФайла);
		КонецЦикла;	
	Иначе	
		ЗаписатьСтрокуОтгружаемыеТовары(НайденныйДокументОбъект, СтрокиДокументаXDTO, ОтгружаемыеТоварыИзФайла);
	КонецЕсли;	

	ОтгружаемыеТоварыОдинаковы = СравнитьТаблицыОтгружаемыхТоваров(ОтгружаемыеТоварыДокументаПоУЛ, ОтгружаемыеТоварыИзФайла);
	
	Если ОтгружаемыеТоварыОдинаковы Тогда
		ПоменятьДействиеВТабличнойЧасти(НайденныйДокументОбъект);
	Иначе
		ПерезаполнитьТЧОтгружаемыеТовары(НайденныйДокументОбъект, ОтгружаемыеТоварыИзФайла);
	КонецЕсли;
   
КонецПроцедуры

Процедура НайтиИОбработатьДокументПеремещения(НайденныйДокументОбъект, ОбъектXDTO)
	
	
	
КонецПроцедуры

Функция СравнитьТаблицыОтгружаемыхТоваров(ОтгружаемыеТоварыДокументаПоУЛ, ОтгружаемыеТоварыИзФайла)
	
	ОтгружаемыеТоварыОдинаковы = Истина;
	
	ТаблицаОтличий = ОбщегоНазначенияУТ.СравнитьТаблицыЗначений(ОтгружаемыеТоварыДокументаПоУЛ, ОтгружаемыеТоварыИзФайла);
	
	Если ТипЗнч(ТаблицаОтличий) = Тип("ТаблицаЗначений") Тогда
		
		ОтгружаемыеТоварыОдинаковы = ТаблицаОтличий.Количество() > 0;
	КонецЕсли;
	
	Возврат ОтгружаемыеТоварыОдинаковы;
   
КонецФункции

Процедура ПоменятьДействиеВТабличнойЧасти(НайденныйДокументОбъект)

	Для каждого Строка Из НайденныйДокументОбъект.ОтгружаемыеТовары Цикл
		Строка.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
	КонецЦикла;
	
	Попытка
		НайденныйДокументОбъект.Записать();
	Исключение
		Сообщение = "В документе " + НайденныйДокументОбъект.Ссылка 
					+ " не удалось поменять Действие в ТЧ Отгружаемые товары. " + ОписаниеОшибки();
		ЗаписатьСообщениеОшибки(Сообщение, Истина);
	КонецПопытки;
	
КонецПроцедуры

Процедура ПерезаполнитьТЧОтгружаемыеТовары(НайденныйДокументОбъект, ОтгружаемыеТоварыИзФайла)
	
	НайденныйДокументОбъект.ОтгружаемыеТовары.Очистить();
	
	Для каждого Строка из ОтгружаемыеТоварыИзФайла Цикл
		НоваяСтрока = НайденныйДокументОбъект.ОтгружаемыеТовары.Добавить();
		НоваяСтрока.ЭтоУпаковочныйЛист = Истина;
		НоваяСтрока.УпаковочныйЛист = Строка.УпаковочныйЛист;
		НоваяСтрока.Количество = Строка.КоличествоУпаковок; 
		НоваяСтрока.КоличествоУпаковок = Строка.КоличествоУпаковок;
		НоваяСтрока.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
		
		ТоварыУЛ = ПолучитьСписокТоваровПоУЛ(Строка.УпаковочныйЛист);
		Для каждого СтрокаТоварыУЛ Из ТоварыУЛ Цикл
			НоваяСтрока = НайденныйДокументОбъект.ОтгружаемыеТовары.Добавить();
			НоваяСтрока.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоварыУЛ);
		КонецЦикла;
	КонецЦикла;
	
	Документы.РасходныйОрдерНаТовары.ИзменитьТоварыПоРаспоряжениямПоОтгружаемымТоварам(НайденныйДокументОбъект, Истина);
	ЗаполнитьСлужебныеРеквизитыТЧТовары(НайденныйДокументОбъект, "ТоварыПоРаспоряжениям", Ложь);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(НайденныйДокументОбъект,); //ПараметрыУказанияСерий.ТоварыПоРаспоряжениям);
	
КонецПроцедуры 

Функция ПолучитьОтгружаемыеТоварыДокументаПоУЛ(НайденныйДокументОбъект)

    Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.УпаковочныйЛист КАК УпаковочныйЛист,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.КоличествоУпаковок КАК КоличествоУпаковок
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары.ОтгружаемыеТовары КАК РасходныйОрдерНаТоварыОтгружаемыеТовары
		|ГДЕ
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.ЭтоУпаковочныйЛист = Истина
		|	И РасходныйОрдерНаТоварыОтгружаемыеТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", НайденныйДокументОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтгружаемыеТоварыДокументаПоУЛ = РезультатЗапроса.Выгрузить();
	
	Возврат ОтгружаемыеТоварыДокументаПоУЛ;
	
КонецФункции

Функция ПолучитьСписокТоваровПоУЛ(УпаковочныйЛист)

    Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УпаковочныйЛистТовары.Номенклатура КАК Номенклатура,
		|	УпаковочныйЛистТовары.Характеристика КАК Характеристика,
		|	УпаковочныйЛистТовары.Серия КАК Серия,
		|	УпаковочныйЛистТовары.СтатусУказанияСерий КАК СтатусУказанияСерий,
		|	УпаковочныйЛистТовары.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
		|	УпаковочныйЛистТовары.ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста КАК ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста,
		|	УпаковочныйЛистТовары.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
		|	УпаковочныйЛистТовары.УпаковочныйЛист КАК УпаковочныйЛист,
		|	УпаковочныйЛистТовары.Упаковка КАК Упаковка,
		|	УпаковочныйЛистТовары.Количество КАК Количество,
		|	УпаковочныйЛистТовары.КоличествоУпаковок КАК КоличествоУпаковок
		|ИЗ
		|	Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
		|ГДЕ
		|	УпаковочныйЛистТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", УпаковочныйЛист);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СписокТовары = РезультатЗапроса.Выгрузить();
	
	Возврат СписокТовары;

КонецФункции

Процедура ЗаписатьСтрокуОтгружаемыеТовары(ОбъектДокумент, СтрокаXDTO, ОтгружаемыеТоварыИзФайла)
	
	ВремВариантКомплектации = ПолучитьВариантКомплектации(СтрокаXDTO.Sku);
	
	Если ВремВариантКомплектации = Неопределено Тогда
		ШаблонТекста = СтрШаблон("Не найден вариант комплектации по артикулу %1.", СтрокаXDTO.Sku);
		ЗаписатьСообщениеОшибки(ШаблонТекста, Истина);
		Возврат;
	КонецЕсли;
	
	УпаковочныйЛист = НайтиУпаковочныйЛист(СтрокаXDTO.lot_string);
	Если УпаковочныйЛист = Неопределено Тогда
		ШаблонТекста = СтрШаблон("Не найден Упаковочный Лист по артикулу %1.", СтрокаXDTO.lot_string);
		ЗаписатьСообщениеОшибки(ШаблонТекста, Истина);
		Возврат;
	КонецЕсли;
	
	КоличествоУпаковок = СтрокаXDTO.picked_quantity;
		
	НоваяСтрока = ОтгружаемыеТоварыИзФайла.Добавить();
	НоваяСтрока.УпаковочныйЛист = УпаковочныйЛист;
	НоваяСтрока.КоличествоУпаковок = КоличествоУпаковок;
	
КонецПроцедуры

Процедура ЗаполнитьСлужебныеРеквизитыТЧТовары(Объект, ИмяТЧ, Перенумеровать = Истина)
	
	Действия = Новый Структура;
	Действия.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	Действия.Вставить("ЗаполнитьПризнакТипНоменклатуры",
		Новый Структура("Номенклатура", "ТипНоменклатуры"));
	Действия.Вставить("ЗаполнитьПризнакАртикул",
		Новый Структура("Номенклатура", "Артикул"));
	
	Если ИмяТЧ = "ОтгружаемыеТовары" Тогда
		Действия.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины", Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
		Действия.Вставить("ЗаполнитьВесУпаковки",Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
		Действия.Вставить("ЗаполнитьОбъемУпаковки",Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
		Действия.Вставить("ЗаполнитьЕдиницуИзмеренияВеса",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияВеса"));
		Действия.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияОбъема"));
		ОбработкаТабличнойЧастиКлиентСерверЛокализация.ДополнитьСтруктуруДействийПриИзмененииЭлемента(ЭтотОбъект, "Номенклатура", Действия);		
	
		//УпаковочныеЛистыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма, Объект.ОтгружаемыеТовары, Действия, ,Перенумеровать);
	Иначе
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ТоварыПоРаспоряжениям, Действия);
	КонецЕсли;
	
	Если ИмяТЧ = "ОтгружаемыеТовары" Тогда
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьВесОбъем");
		
		Для Каждого СтрокаТЧ Из Объект.ОтгружаемыеТовары Цикл
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, Неопределено);
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Функция НайтиУпаковочныйЛист(НомерУпаковочногоЛиста)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УпаковочныйЛист.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
		|ГДЕ
		|	УпаковочныйЛист.Код = &Код";
	
	Запрос.УстановитьПараметр("Код", НомерУпаковочногоЛиста);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка.Следующий(); 
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
  
КонецФункции

Функция ПолучитьВариантКомплектации(Наименование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВариантыКомплектацииНоменклатуры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
		|ГДЕ
		|	ВариантыКомплектацииНоменклатуры.Наименование = &Наименование";
		
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка.Следующий(); 
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПреобразоватьМассивФайлов(МассивЗагружаемыхФайлов, РасходныйОрдер = Ложь)

	Если РасходныйОрдер Тогда
		ИскомыйСимвол = "SO";
	Иначе ИскомыйСимвол = "PO";
	КонецЕсли;
	
	ТаблицаВозврата = МассивЗагружаемыхФайлов.СкопироватьКолонки();
	 
	Для каждого Файл Из МассивЗагружаемыхФайлов Цикл
		Если СтрНайти(Файл.ИмяФайла, ИскомыйСимвол) <> 0 Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаВозврата.Добавить(), Файл) 
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаВозврата;

КонецФункции

Функция ПолучитьДокумент(ОбъектXDTO, ИмяФайла, РасходныйОрдер)
	
	Суфикс = "_";	

	ДатаДокумента  = ПолучитьДатуИзСтроки(ОбъектXDTO.header.created_date);
	// 3 - количество цифр в коде клиента
	НомерДокумента = Прав(ОбъектXDTO.header.doc_number, СтрДлина(ОбъектXDTO.header.doc_number) - 3);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходныйОрдерНаТовары.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
		|ГДЕ
		|	РасходныйОрдерНаТовары.Дата МЕЖДУ &НачалоДня И &КонецДня
		|	И РасходныйОрдерНаТовары.Номер = &Номер";
	
	Если Не РасходныйОрдер Тогда
		//Запрос.Текст = СтрЗаменить(Запрос.Текст, "РасходныйОрдерНаТовары", "ПриобретениеТоваровУслуг"); 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РасходныйОрдерНаТовары", "ПриходныйОрдерНаТовары");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПриходныйОрдерНаТовары.Дата МЕЖДУ &НачалоДня И &КонецДня
		|	И ПриходныйОрдерНаТовары.Номер = &Номер", "ПриходныйОрдерНаТовары.Распоряжение.Дата МЕЖДУ &НачалоДня И &КонецДня
		|	И ПриходныйОрдерНаТовары.Распоряжение.Номер = &Номер"); 
		НомерДокумента = Прав(ОбъектXDTO.header.doc_number, СтрДлина(ОбъектXDTO.header.doc_number) );
	КонецЕсли;

	Запрос.УстановитьПараметр("КонецДня", КонецДня(ДатаДокумента));
	Запрос.УстановитьПараметр("НачалоДня", НачалоДня(ДатаДокумента));
	Запрос.УстановитьПараметр("Номер", НомерДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка.Следующий();
		НайденныйДокументСсылка = Выборка.Ссылка;
		НайденныйДокументОбъект = НайденныйДокументСсылка.ПолучитьОбъект(); 
		Возврат НайденныйДокументОбъект;
	Иначе
		Сообщение = "По названию файла " + ИмяФайла + " не найден документ" + 
		?(РасходныйОрдер, "Расходный ордер", "Приходный ордер") + ". Файл перемещён в архив.";
		ЗаписатьСообщениеОшибки(Сообщение, Истина);
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Функция ПолучитьДатуИзСтроки(Стр) 

	Массив = СтрРазделить(Стр, " ");
	МассивДень = СтрРазделить(массив[0], "-");
	МассивВремя = СтрРазделить(массив[1], ":");
	
	Дата = Дата(МассивДень[0], МассивДень[1], МассивДень[2], МассивВремя[0], МассивВремя[1], МассивВремя[2]);
	
	возврат Дата;

КонецФункции //ПолучитьДатуИзСтроки(Стр)

Процедура УпорядочитьФайлыПоДатеСоздания(МассивФайлов)
	
	МассивФайлов.Колонки.Добавить("Тип", новый ОписаниеТипов("Число"));
	
	Для Каждого ЭлементМассива Из МассивФайлов Цикл
		НачалоМеткиВремени = 0; КонецМеткиВремени = 0;
		// разбираю имя файла справа, пока не найду точку - это будет символ за конечным символом даты,
		// дальше ищется символ подчеркивания - следующая позиция - начальный символ определения даты.
		Если Не ЗначениеЗаполнено(ЭлементМассива.ДатаПолучения) Тогда
			ЭлементМассива.ДатаПолучения = ПолучитьДатуИзИмениФайла(ЭлементМассива.ИмяФайла);
		КонецЕсли;
		
		Если найти(Врег(ЭлементМассива.ИмяФайла), "PO") > 0 Тогда
			ЭлементМассива.Тип = 0;
		ИначеЕсли найти(ВРег(ЭлементМассива.ИмяФайла), "SO") > 0 Тогда
			ЭлементМассива.Тип = 1;
		ИначеЕсли найти(ВРег(ЭлементМассива.ИмяФайла), "INV") > 0 Тогда
			ЭлементМассива.Тип = 2;
		Иначе
			ЭлементМассива.Тип = 100;
		КонецЕсли;
	КонецЦикла;
	
	МассивФайлов.Сортировать("Тип, ДатаПолучения, ИмяФайла");
	
КонецПроцедуры // УпорядочитьФайлыПоДатеСоздания()

Процедура ЗаписатьСообщениеОшибки(СообщениеОбОшибке, Ошибки = Ложь) Экспорт
	
	НоваяСтрокаЛога = Строка(ТекущаяДата()) + ?(Ошибки," Ошибка: "," Сообщение: ");
	НоваяСтрокаЛога = НоваяСтрокаЛога + " - " + СообщениеОбОшибке;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ТекущаяДатаСеанса(), "ДЛФ=T") + ". " + НоваяСтрокаЛога);
	
	//Если ОбщегоНазначения.ЭтоРегламентноеЗадание(ЭтотОбъект) Тогда 
	//	ЛогФайл = "путь лог файла";
	//	ЗаписьТекста = Новый ЗаписьТекста(ЛогФайл, , , Истина);
	//	ЗаписьТекста.ЗаписатьСтроку(НоваяСтрокаЛога);
	//	ЗаписьТекста.Закрыть();
	//КонецЕсли;
	
	ЗаписьЖурналаРегистрации("Информация", ?(Ошибки, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация), , , НоваяСтрокаЛога);
	
КонецПроцедуры

Процедура ПереместитьФайлВАрхив(ИмяФайла)
	
	Файл = новый Файл(ИмяФайла);
	Путь = Файл.Путь + "Archive\";
	
	Каталог = новый Файл(Путь);
	Если не Каталог.Существует() Тогда
		СоздатьКаталог(Путь);
	КонецЕсли;
	
	ПереместитьФайл(ИмяФайла, Путь + Файл.Имя);
	
КонецПроцедуры

// Функция проверяет имеется ли в системе документ ДанныеЗагрузки для файла с таким именем
//
Функция ЗагружалсяЛиФайл(ИмяФайла) Экспорт  
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	1
	|ИЗ
	|	Документ.гф_ДанныеЗагрузкиПоОбмену КАК ДанныеЗагрузки
	|ГДЕ
	|	ДанныеЗагрузки.ИмяФайла ПОДОБНО &ИмяФайла
	|	И НЕ ДанныеЗагрузки.ПометкаУдаления");
	Запрос.УстановитьПараметр("ИмяФайла", ИмяФайла);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

Функция ПолучитьТекстФайла(ИмяФайла)
	текст = новый ЧтениеТекста(ИмяФайла, "utf8");
	возврат текст.Прочитать();
КонецФункции // ()

Функция ПолучитьДатуИзИмениФайла(ИмяФайла)
	
	ДлинаИмени = СтрДлина(ИмяФайла);
	
	// чтобы найти описание даты в имени, нахожу самый правый символ "-", от него влево 17 симоволов - это дата.
	// для разных конфигураций определние даты может отличаться !!!!
	Индекс = ДлинаИмени - 4; // минимум 4 символа расширения можно пробросить
	
	Пока Индекс Цикл
		Если Сред(ИмяФайла, Индекс, 1) = "-" Тогда
			Прервать;
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Индекс = Индекс - 15;
	
	// если дата не будет распознана - вернется пустая дата
	ДатаРезультат = Дата(1, 1, 1, 0, 0, 0);
	
	Попытка
		ДатаРезультат = Дата(
		Сред(ИмяФайла, Индекс, 4),
		Сред(ИмяФайла, Индекс + 4, 2),
		Сред(ИмяФайла, Индекс + 6, 2),
		Сред(ИмяФайла, Индекс + 9, 2),
		Сред(ИмяФайла, Индекс + 11, 2),
		Сред(ИмяФайла, Индекс + 13, 2));
	Исключение		
	КонецПопытки;
	
	Возврат ДатаРезультат;
	
КонецФункции

Процедура УдалитьФайлыНаФТП(МассивИменЗагруженныхФайлов, НастройкиFTPСоединения, ПредставлениеКаталогаНаФТП) 
	
	Отказ = Ложь;
	session = _омОбщегоНазначенияВызовСервера.ПолучитьСоединениеSFTP(НастройкиFTPСоединения, Отказ);
	
	Если session = Неопределено Тогда
		Сообщение = "Не удалось установить соединение, загрузка прекращена.";
		//ЗаписатьВПротокол(Сообщение, 4);
		Возврат;
	КонецЕсли;
	
	Попытка
		
	Для Каждого ИмяФайла Из МассивИменЗагруженныхФайлов Цикл 
			
		ПредставлениеФайла = ПредставлениеКаталогаНаФТП + ИмяФайла; 
		session.RemoveFiles(ПредставлениеФайла);
			
		Сообщение = "Удален файл: "+ ПредставлениеФайла;
			
		КонецЦикла;
        
	Исключение 
		Сообщение = "Ошибка получения файлов. Описание ошибки: "+ ОписаниеОшибки();
		Возврат;
	КонецПопытки;
	
	//Разрываем соединение
    session.Dispose();  

КонецПроцедуры

#КонецОбласти

#Область Инициализация
// Этой переменной регулируем количество "холостых" итераций цикла -
// тем самым устанавливаем интервал задержки до повторной попытки соединения
// после разрыва почтового соединения с почтовым сервером извне.
ИнтервалЗадержкиПодключенияПослеНеудачи = 1000;   
#КонецОбласти
  

#КонецЕсли