#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных
Перем Соединение; // FTP-соединение
Перем СкладПолучательВПарах; // СправочникСсылка.Склады
Перем СкладОтправительВПарах; // СправочникСсылка.Склады
Перем ЭтоОсновнойСклад; // Булево, задается в глобальных значениях
Перем КодКлиента; // код клиента Склада (в глобальных значениях)
Перем Организация; // СправочникСсылка.Организации
Перем КодОрганизации; // Реквизит "Префикс" у Организации
Перем ЭтоПеремещение; // Булево, от типа знч документа распоряжения
Перем ЭтоВозврат; // Булево, от типа знч документа распоряжения
Перем ЭтоПоступление; // Булево, от типа знч документа распоряжения
Перем ЭтоРеализация; // Булево, от типа знч документа распоряжения
Перем ЭтоКорректировка; // Булево, Истина если документ КорректировкаНазначенияТоваров 
Перем ЭтоСобственныеНужды; // Булево, Истина если операция РО ОтгрузкаНаВнутренниеНужды
Перем СкладМаркетплейса; // Булево, задается в глобальных значениях
Перем ЭтоТаможенныйСклад; // Булево, задается в глобальных значениях
Перем КодКонтрагента; // код клиента Склада (в глобальных значениях) 
Перем ТекстыОшибок; // ТЗ с ошибками и информацией
Перем ЭтоСкладНедостачи; // Булево, задается в глобальных значениях 
Перем НомерПакетаКорректировки; // Данные для формирования ТЭГ "packet_number"
Перем НомерОшибки;
Перем ТоварыОбувь; // Булево
#КонецОбласти

#Область ВыгрузкаДанных

// #wortmann { 
// Процедура обрабатывает массивы документв для выгрузки данных на сервер WMS 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//  МассивДокументовРасход - Массив - массив из элементов ДокументСсылка.РасходныйОрдерНаТовары
//  МассивДокументовПриход - Массив - массив из элементов ДокументСсылка.ПриходныйОрдерНаТовары
Процедура ВыгрузитьДанные (МассивДокументовРасход = Неопределено, МассивДокументовПриход = Неопределено) Экспорт
	
	Перем ИмяФайлаБезПути, ИмяФайла;

	НомерОшибки = 1;

	ТекстыОшибок = Новый ТаблицаЗначений;
	ТекстыОшибок.Колонки.Добавить("ПутьФайла");
	ТекстыОшибок.Колонки.Добавить("ТекстОшибки");
	ТекстыОшибок.Колонки.Добавить("Организация");
	ТекстыОшибок.Колонки.Добавить("ТипИнформации");
	ТекстыОшибок.Колонки.Добавить("Ордер");
	
	ОбновитьДанныеВДанныеВыгрузки();
	
	// Если это регламентная задача, то выполняем поиск необходимых документов в РС гф_ДанныеВыгрузки
	Если МассивДокументовРасход = Неопределено И МассивДокументовПриход = Неопределено Тогда 
		
		МассивДокументовРасход = ПолучитьМассивДокументов("РасходныйОрдерНаТовары"); 
		МассивДокументовПриход = ПолучитьМассивДокументов("ПриходныйОрдерНаТовары");
		МассивДокументовКорректировки = ПолучитьМассивДокументов("КорректировкаНазначенияТоваров");
		
	Иначе
		МассивДокументовРасход = ПолучитьМассивДокументов("РасходныйОрдерНаТовары", МассивДокументовРасход);
		МассивДокументовПриход = ПолучитьМассивДокументов("ПриходныйОрдерНаТовары", МассивДокументовПриход);
		МассивДокументовКорректировки = Новый Массив; // чтобы не возникала ошибка и не утяжелять код
	КонецЕсли;	
	
	НастройкиFTPСоединения = 
							_омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначениеFTP("FTP_НастройкиДляЗагрузкиВыгрузкиВWMS");
	
	Если НастройкиFTPСоединения.ЕстьДанные <> Истина Тогда
		Сообщение = "Не заданы настройки подключения к ftp-серверу.";
		ЗаписьЖурналаРегистрации("ОбменСWMS", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, Сообщение);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ТекущаяДатаСеанса(), "ДЛФ=T") + ". " + Сообщение);
		ЗаписатьСообщениеОшибки(Сообщение, Истина, "Проверка настроек для обмена"); 
		НомерОшибки = НомерОшибки + 1;
		Возврат;
	КонецЕсли;
	
	// то ли открывать соединение SFTP тут и закрывать в самом конце (но это долго...)
	// то ли в конце прописать процедуру переброски файлов с локального каталога (куда
	// их и записывать) на SFTP.
	ВыгрузкаДанныхМассивРасход(МассивДокументовРасход, НастройкиFTPСоединения);
	ВыгрузкаДанныхМассивПриход(МассивДокументовПриход, НастройкиFTPСоединения);
	
	//НомерПакетаКорректировки = ОпределитьПервыйНомерПакета(МассивДокументовКорректировки);
	// Для каждого Документ Из МассивДокументовКорректировки Цикл
		// ++ Галфинд_ДомнышеваКР_15_02_2024
		// Временно закомментировано для не отправки на склад
		//// ++ Галфинд_ДомнышеваКР)24_01_2024
		//НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		//Попытка
		//	Сообщение = Формат(ТекущаяДатаСеанса(), "ДЛФ=T") + " - попытка выгрузки документа " + Документ;
		//	ЗаписьЖурналаРегистрации("ОбменСWMS", УровеньЖурналаРегистрации.Информация, ЭтотОбъект, ЭтотОбъект, Сообщение);	
		//	// -- Галфинд_ДомнышеваКР)24_01_2024
		//	//	
		//	КодОрганизации = Документ.Организация.Префикс;
		//	//	
		//	Склад = ПолучитьСкладКорректировки(Документ);
		//	Организация = Документ.Организация;
		//	СкладМаркетплейса = ПроверитьЗначениеСкладМаркетплейс(Склад); 
		//	СкладОтправительВПарах = НЕ ПроверитьЗначениеСкладВКоробах(Склад);
		//	
		//	Если СкладМаркетплейса Тогда
		//		Сообщение = "У документа " + Документ + " стоит значение ""Склад маркетплейс""";
		//		ЗаписьЖурналаРегистрации("ОбменСWMS", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, Сообщение);
		//		ЗаписатьСообщениеОшибки(Сообщение, Истина, "Проверка настроек для обмена");
		//		НомерОшибки = НомерОшибки + 1;
		//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ТекущаяДатаСеанса(), "ДЛФ=T") + ". " + Сообщение);
		//		Продолжить;
		//	КонецЕсли;
		//	
		//	ЭтоПеремещение = ТипЗнч(Документ) = Тип("ДокументСсылка.ПеремещениеТоваров");
		//	ЭтоПоступление = ТипЗнч(Документ) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг"); 
		//	ЭтоРеализация = ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказКлиента");
		//	ЭтоВозврат = ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента");
		//	ЭтоКорректировка = ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаНазначенияТоваров");
		//	ЭтоСобственныеНужды = Ложь;
		//	
		//	ЭтоТаможенныйСклад = ЭтоТаможенныйСклад(Склад);
		//	ЭтоОсновнойСклад = ЭтоОсновнойСклад(Склад);
		//	ЭтоСкладНедостачи = ЭтоСкладНедостачи(Склад);
		//	
		//	НомерСообщения = Строка(Новый УникальныйИдентификатор);
		//	Пакет = ПолучитьПакетРасхода(ИмяФайлаБезПути, ИмяФайла, НомерСообщения, Документ, НастройкиFTPСоединения);
		//	ЗаписатьОтправитьПакет(Пакет, ИмяФайлаБезПути, ИмяФайла, НомерСообщения, 
		//	Перечисления.гф_ВидыДанныхДляВыгрузки.Документ, Документ, НастройкиFTPСоединения);
		//	// ++ Галфинд_ДомнышеваКР)24_01_2024	
		//	ЗафиксироватьТранзакцию();
		//	Сообщение = Формат(ТекущаяДатаСеанса(), "ДЛФ=T") + " - на FTP выгружен файл по документу: " + Документ;
		//	ЗаписьЖурналаРегистрации("ОбменСWMS", УровеньЖурналаРегистрации.Информация, ЭтотОбъект, ЭтотОбъект, Сообщение);
		//Исключение 
		//	ОтменитьТранзакцию();
		//	Сообщение = Формат(ТекущаяДатаСеанса(), "ДЛФ=T") + " - Возникла ошибка выгрузки на FTP по документу: " + Документ
		//	+ Символы.ПС + ОписаниеОшибки();
		//	ЗаписьЖурналаРегистрации("ОбменСWMS", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, Сообщение);
		//	ЗаписатьСообщениеОшибки(Сообщение, Истина, "Проверка данных перед выгрузкой документа");
		//	НомерОшибки = НомерОшибки + 1;
		//КонецПопытки;
		//// -- Галфинд_ДомнышеваКР)24_01_2024
		// -- Галфинд_ДомнышеваКР_15_02_2024
	//КонецЦикла;
	
КонецПроцедуры// } #wortmann  

// #wortmann { 
// Процедура обрабатывает массивы документв РасходныйОрдер для выгрузки данных на сервер WMS 
// Галфинд_Домнышева 2024/02/21
//
// Параметры:
//  МассивДокументовРасход - Массив - массив из элементов ДокументСсылка.РасходныйОрдерНаТовары
//  НастройкиFTPСоединения - Структура - Структура данных для подключения к FTP
Процедура ВыгрузкаДанныхМассивРасход(МассивДокументовРасход, НастройкиFTPСоединения)
	
	Перем ИмяФайлаБезПути, ИмяФайла;

	Для каждого Документ Из МассивДокументовРасход Цикл
		
		// ++ Галфинд_ДомнышеваКР)24_01_2024
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		Попытка
			Сообщение = Формат(ТекущаяДатаСеанса(), "ДЛФ=T") + " - попытка выгрузки документа " + Документ;
			ЗаписьЖурналаРегистрации("ОбменСWMS", УровеньЖурналаРегистрации.Информация, ЭтотОбъект, ЭтотОбъект, Сообщение);	
		// -- Галфинд_ДомнышеваКР)24_01_2024	
			Контрагент = Документ.Получатель;
			КодОрганизации = Документ.Склад.гф_Организация.Префикс;
			
			Склад = Документ.Склад;
			Организация = Документ.Склад.гф_Организация;
			СкладМаркетплейса = ПроверитьЗначениеСкладМаркетплейс(Склад); 
			СкладОтправительВПарах = НЕ ПроверитьЗначениеСкладВКоробах(Склад);
			Если СкладМаркетплейса Тогда
				Сообщение = "У документа " + Документ + " стоит значение ""Склад маркетплейс""";
				ЗаписьЖурналаРегистрации("ОбменСWMS", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, Сообщение);
				ЗаписатьСообщениеОшибки(Сообщение, Истина, "Проверка настроек для обмена", Документ);
				НомерОшибки = НомерОшибки + 1;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ТекущаяДатаСеанса(), "ДЛФ=T") + ". " + Сообщение);
				Продолжить;
			КонецЕсли;
			Распоряжение = ПолучитьСвязанныйДокументРО(Документ);
			ЭтоПеремещение = (ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ПеремещениеТоваров"))  
			ИЛИ (ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ЗаказКлиента") И Распоряжение.гф_ОтгрузкаПеремещением = Истина);
			ЭтоПоступление = ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг"); 
			ЭтоРеализация = (ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ЗаказКлиента")
			И Распоряжение.гф_ОтгрузкаПеремещением = Ложь);
			ЭтоВозврат = ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента");
			ЭтоСобственныеНужды = (Документ.СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаНаВнутренниеНужды);
			ЭтоКорректировка = Ложь;
			
			ЭтоТаможенныйСклад = ЭтоТаможенныйСклад(Склад);
			ЭтоОсновнойСклад = ЭтоОсновнойСклад(Склад); 
			ЭтоСкладНедостачи = ЭтоСкладНедостачи(Склад);
			
			НомерСообщения = строка(Новый УникальныйИдентификатор);
			Пакет = ПолучитьПакетРасхода(ИмяФайлаБезПути, ИмяФайла, НомерСообщения, Документ, НастройкиFTPСоединения);
			ЗаписатьОтправитьПакет(Пакет, ИмяФайлаБезПути, ИмяФайла, НомерСообщения, 
			Перечисления.гф_ВидыДанныхДляВыгрузки.Документ, Документ, НастройкиFTPСоединения);
		// ++ Галфинд_ДомнышеваКР)24_01_2024	
			Сообщение = Формат(ТекущаяДатаСеанса(), "ДЛФ=T") + " - на FTP выгружен файл по документу: " + Документ;
			ЗаписьЖурналаРегистрации("ОбменСWMS", УровеньЖурналаРегистрации.Информация, ЭтотОбъект, ЭтотОбъект, Сообщение);
			ЗафиксироватьТранзакцию();
		Исключение 
			ОтменитьТранзакцию();
			Сообщение = Формат(ТекущаяДатаСеанса(), "ДЛФ=T") + " - Возникла ошибка выгрузки на FTP по документу: " + Документ
						+ Символы.ПС + ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("ОбменСWMS", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, Сообщение);
			ЗаписатьСообщениеОшибки(Сообщение, Истина, "Проверка данных перед выгрузкой документа", Документ); 
			НомерОшибки = НомерОшибки + 1;
		КонецПопытки;
        // -- Галфинд_ДомнышеваКР)24_01_2024
	КонецЦикла;

КонецПроцедуры// } #wortmann 

// #wortmann { 
// Процедура обрабатывает массивы документв ПриходныйОрдер для выгрузки данных на сервер WMS 
// Галфинд_Домнышева 2024/02/21
//
// Параметры:
//  МассивДокументовПриход - Массив - массив из элементов ДокументСсылка.ПриходныйОрдерНаТовары
//  НастройкиFTPСоединения - Структура - Структура данных для подключения к FTP
Процедура ВыгрузкаДанныхМассивПриход(МассивДокументовПриход, НастройкиFTPСоединения) 
	
	Перем ИмяФайлаБезПути, ИмяФайла;

	Для каждого Документ Из  МассивДокументовПриход Цикл
		ЭтоВозврат = ТипЗнч(Документ.Распоряжение) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента");
		Организация = Документ.Склад.гф_Организация; 
		// ++ Галфинд_домнышеваКР_16_02_2024
		// поднято выше для возможной проверки заказов
		Склад = Документ.Склад;
		СкладПолучательВПарах = НЕ ПроверитьЗначениеСкладВКоробах(Склад);
		// -- Галфинд_домнышеваКР_16_02_2024
		
		// ++ Галфинд_ДомнышеваКР_24_01_2024
		// вынесла код Садомцева от 03.11.2023 в отдельную функцию
		Если НЕ ПроверкаПройденаПриВыгрузкиПриходныхОрдеров(Документ) Тогда
			Продолжить;
		КонецЕсли;
		// -- Галфинд_ДомнышеваКР_24_01_2024
		
		// ++ Галфинд_ДомнышеваКР)24_01_2024
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		Попытка
			Сообщение = Формат(ТекущаяДатаСеанса(), "ДЛФ=T") + " - попытка выгрузки документа " + Документ;
			ЗаписьЖурналаРегистрации("ОбменСWMS", УровеньЖурналаРегистрации.Информация, ЭтотОбъект, ЭтотОбъект, Сообщение);	
			// -- Галфинд_ДомнышеваКР)24_01_2024
			
			СкладМаркетплейса = ПроверитьЗначениеСкладМаркетплейс(Склад);
			Если СкладМаркетплейса Тогда
				Сообщение = "У документа " + Документ + " стоит значение ""Склад маркетплейс""";
				ЗаписьЖурналаРегистрации("ОбменСWMS", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, Сообщение);
				ЗаписатьСообщениеОшибки(Сообщение, Истина, "Проверка настроек для обмена", Документ);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ТекущаяДатаСеанса(), "ДЛФ=T") + ". " + Сообщение);
				НомерОшибки = НомерОшибки + 1;
				Продолжить;
			КонецЕсли;
			
			СкладОтправительВПарах = НЕ ПроверитьЗначениеСкладВКоробах(Документ.Отправитель);
			ЭтоПеремещение = ТипЗнч(Документ.Распоряжение) = Тип("ДокументСсылка.ПеремещениеТоваров");
			ЭтоПоступление = ТипЗнч(Документ.Распоряжение) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг");
			ЭтоРеализация = Ложь; 
			ЭтоКорректировка = Ложь;
			ЭтоСобственныеНужды = Ложь;
			
			ЭтоТаможенныйСклад = ЭтоТаможенныйСклад(Склад);
			ЭтоОсновнойСклад = ЭтоОсновнойСклад(Склад);
			ЭтоСкладНедостачи = ЭтоСкладНедостачи(Склад);
			
			НомерСообщения = строка(Новый УникальныйИдентификатор);
			Пакет = ПолучитьПакетПрихода(ИмяФайлаБезПути, ИмяФайла, НомерСообщения, Документ, НастройкиFTPСоединения);
			ЗаписатьОтправитьПакет(Пакет, ИмяФайлаБезПути, ИмяФайла, НомерСообщения, 
			Перечисления.гф_ВидыДанныхДляВыгрузки.Документ, Документ, НастройкиFTPСоединения);
			// ++ Галфинд_ДомнышеваКР)24_01_2024	
			Сообщение = Формат(ТекущаяДатаСеанса(), "ДЛФ=T") + " - на FTP выгружен файл по документу: " + Документ;
			ЗаписьЖурналаРегистрации("ОбменСWMS", УровеньЖурналаРегистрации.Информация, ЭтотОбъект, ЭтотОбъект, Сообщение);
			ЗафиксироватьТранзакцию();
		Исключение 
			ОтменитьТранзакцию();
			Сообщение = Формат(ТекущаяДатаСеанса(), "ДЛФ=T") + " - Возникла ошибка выгрузки на FTP по документу: " + Документ
			+ Символы.ПС + ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("ОбменСWMS", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, Сообщение);
			ЗаписатьСообщениеОшибки(Сообщение, Истина, "Проверка данных перед выгрузкой документа", Документ);
			НомерОшибки = НомерОшибки + 1;
		КонецПопытки;
		// -- Галфинд_ДомнышеваКР)24_01_2024
	КонецЦикла;
	
КонецПроцедуры// } #wortmann 	

Функция ПроверкаПройденаПриВыгрузкиПриходныхОрдеров(Документ) 
	
	ТоварыОбувь = Обувь(Документ, Ложь);
	Если НЕ ТоварыОбувь Тогда
		Возврат Истина; // не делаем проверку для товаров не обувь
	КонецЕсли;
	
	// ++ Галфинд СадомцевСА 03.11.2023 РЗ Выгрузить данные в WMS.
	// Реализовал проверку на NULL при выгрузке Приходных ордеров
	КомпанииПоЗаказам = ПолучитьКомпанииПоЗаказуКлиента(Документ); // 31.01.23
	МассивЗаказыСОшибкой = Новый Массив;
	СтруктураПоиска = Новый Структура("КонтрагентНаименование", NULL);
	НайденныеСтроки = КомпанииПоЗаказам.НайтиСтроки(СтруктураПоиска);
	// Галфинд_ДомнышеваКР_29_01_2024
	// может быть не записан ЗаказКлиента не по одному УЛ
	// vvv Галфинд \ Sakovich 04.02.2024
	// Если НайденныеСтроки.Количество() = 0 Тогда
	Если НайденныеСтроки.Количество() = КомпанииПоЗаказам.Количество() Тогда
	// ^^^ Галфинд \ Sakovich 04.02.2024
		Сообщение = "Для документа " + Документ + " в УЛ не обнаружены Заказы клиента.";
		ЗаписатьСообщениеОшибки(Сообщение, Истина, "Проверка данных перед выгрузкой документа");
		НомерОшибки = НомерОшибки + 1;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ТекущаяДатаСеанса(), "ДЛФ=T") + ". " + Сообщение);
		Возврат Ложь; 
	КонецЕсли;
	// Галфинд_ДомнышеваКР_29_01_2024
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если МассивЗаказыСОшибкой.Найти(НайденнаяСтрока.гф_Заказ) = Неопределено Тогда
			МассивЗаказыСОшибкой.Добавить(НайденнаяСтрока.гф_Заказ);
		КонецЕсли;
	КонецЦикла;
	СтруктураПоиска = Новый Структура("КодКлиента", NULL);
	НайденныеСтроки = КомпанииПоЗаказам.НайтиСтроки(СтруктураПоиска);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если МассивЗаказыСОшибкой.Найти(НайденнаяСтрока.гф_Заказ) = Неопределено Тогда
			МассивЗаказыСОшибкой.Добавить(НайденнаяСтрока.гф_Заказ);
		КонецЕсли;
	КонецЦикла;
	Если МассивЗаказыСОшибкой.Количество() > 0 Тогда
		ЗаказыСтрокой = "";
		Для Каждого Элемент Из МассивЗаказыСОшибкой Цикл
			Если ЗаказыСтрокой <> "" Тогда
				ЗаказыСтрокой = ЗаказыСтрокой + Символы.ПС;
			КонецЕсли;
			ЗаказыСтрокой = ЗаказыСтрокой + Элемент;
		КонецЦикла;
		Сообщение = "Для документа " + Документ + " обнаружены Заказы с пустым Контрагентом/Партнером:"
		+ Символы.ПС + ЗаказыСтрокой;
		ЗаписатьСообщениеОшибки(Сообщение, Истина, "Проверка данных перед выгрузкой документа", Документ);
		НомерОшибки = НомерОшибки + 1;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ТекущаяДатаСеанса(), "ДЛФ=T") + ". " + Сообщение);
		//Продолжить; 
		Возврат Ложь; // Галфинд_ДомнышеваКР_24_01_2024
	КонецЕсли;
	// -- Галфинд СадомцевСА 03.11.2023
	
	Возврат Истина; // Галфинд_ДомнышеваКР_24_01_2024
		
КонецФункции

Функция ОпределитьПервыйНомерПакета(МассивДокументовКорректировки)  
	
	ДатаЗагрузки = ТекущаяДатаСеанса();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	гф_ДанныеВыгрузки.Документ КАК Документ
		|ИЗ
		|	РегистрСведений.гф_ДанныеВыгрузки КАК гф_ДанныеВыгрузки
		|ГДЕ
		|	гф_ДанныеВыгрузки.Период МЕЖДУ &ПериодНачало И &ПериодОкончание
		|	И гф_ДанныеВыгрузки.Состояние = Значение(Перечисление.гф_СтатусыВыгрузкиДанных.Отправлено)
		|	И ВЫРАЗИТЬ(гф_ДанныеВыгрузки.Документ КАК Документ.КорректировкаНазначенияТоваров) ЕСТЬ НЕ NULL ";
	
	//Запрос.УстановитьПараметр("МассивКорректировок", МассивДокументовКорректировки);
	Запрос.УстановитьПараметр("ПериодНачало", НачалоДня(ДатаЗагрузки));
	Запрос.УстановитьПараметр("ПериодОкончание", КонецДня(ДатаЗагрузки));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Число(1);
	Иначе
		СтрокЗаСегодня = РезультатЗапроса.Выгрузить().Количество();
		Возврат Число(СтрокЗаСегодня + 1);
	КонецЕсли;
	
КонецФункции

// #wortmann { 
// Процедура подбирает документы со статусом "КПоступлению" для ДокументСсылка.ПриходныйОрдерНаТовары
// и статусом "Подготовлено" для ДокументСсылка.РасходныйОрдерНаТовары
// Галфинд_Домнышева 2022/12/01
//
Процедура ОбновитьДанныеВДанныеВыгрузки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриходныйОрдерНаТовары.Ссылка КАК Документ
		|ИЗ
		|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
		|ГДЕ
		|	ПриходныйОрдерНаТовары.Статус = &СтатусПО
		|	И ПриходныйОрдерНаТовары.Проведен 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасходныйОрдерНаТовары.Ссылка
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
		|ГДЕ
		|	РасходныйОрдерНаТовары.Статус = &СтатусРО
		|	И РасходныйОрдерНаТовары.Проведен
	// #wortmann { 
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee2b8a639ceb69
	// Галфинд_Домнышева 2023/07/26 
	    |ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КорректировкаНазначенияТоваров.Ссылка
		|ИЗ
		|	Документ.КорректировкаНазначенияТоваров КАК КорректировкаНазначенияТоваров
		|ГДЕ
		|	КорректировкаНазначенияТоваров.Проведен = Ложь
		|   И КорректировкаНазначенияТоваров.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировкиНазначения.СнятьРезерв)";
	// } #wortmann
	
	Запрос.УстановитьПараметр("СтатусПО", Перечисления.СтатусыПриходныхОрдеров.КПоступлению);
	Запрос.УстановитьПараметр("СтатусРО", Перечисления.СтатусыРасходныхОрдеров.КОтбору);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Не РезультатЗапроса.Пустой() Тогда
		МассивДокументов = Новый Массив;
		Пока Выборка.Следующий() Цикл
			
			МассивДокументов.Добавить(Выборка.Документ);
			
		КонецЦикла;
		СделатьОбновитьЗаписьДанныхВыгрузки(МассивДокументов);
	КонецЕсли;
  
КонецПроцедуры// } #wortmann 

// #wortmann { 
// Процедура обновляет или вносит новую запись в РС гф_ДанныеВыгрузки
// Галфинд_Домнышева 2022/12/01
// 
// Параметры:
//	МассивДокументов - Массив - массив документов с нужным статусом для выгрузки
Процедура СделатьОбновитьЗаписьДанныхВыгрузки(МассивДокументов)
	
	Дата = ТекущаяДатаСеанса();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	гф_ДанныеВыгрузки.Период КАК Период,
		|	гф_ДанныеВыгрузки.ВидДанных КАК ВидДанных,
		|	гф_ДанныеВыгрузки.Документ КАК Документ,
		|	гф_ДанныеВыгрузки.НомерСообщения КАК НомерСообщения,
		|	гф_ДанныеВыгрузки.Состояние КАК Состояние,
		|	гф_ДанныеВыгрузки.ИмяФайла КАК ИмяФайла
		|ИЗ
		|	РегистрСведений.гф_ДанныеВыгрузки КАК гф_ДанныеВыгрузки
		|ГДЕ
		|	гф_ДанныеВыгрузки.Документ В(&МассивДокументов)
		|	И гф_ДанныеВыгрузки.Состояние = &Состояние
		|	И гф_ДанныеВыгрузки.ВидДанных = &ВидДанных";
	
	Запрос.УстановитьПараметр("ВидДанных", Перечисления.гф_ВидыДанныхДляВыгрузки.Документ);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("Состояние", Перечисления.гф_СтатусыВыгрузкиДанных.ГотовоКОтправке);
	
	РезультатЗапроса = Запрос.Выполнить();
	МассивНеВнесенныхДокументов = Новый Массив;
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		МассивДокументовНайденныхВРС = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Документ");
				
		Для каждого Элемент Из МассивДокументов Цикл 
			ИндексЭлемента = ВернутьИндексВМассиве(МассивДокументовНайденныхВРС, Элемент);
			Если ИндексЭлемента = -1 Тогда  
				МассивНеВнесенныхДокументов.Добавить(Элемент);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Документ Из МассивНеВнесенныхДокументов Цикл
			Запись = РегистрыСведений.гф_ДанныеВыгрузки.СоздатьМенеджерЗаписи();
			Запись.Период = Дата;
			Запись.ВидДанных = Перечисления.гф_ВидыДанныхДляВыгрузки.Документ;
			Запись.Документ = Документ;
			Запись.Состояние = Перечисления.гф_СтатусыВыгрузкиДанных.ГотовоКОтправке;
			Запись.Записать();
		КонецЦикла;
		
	Иначе
		Для каждого Документ Из МассивДокументов Цикл
			Запись = РегистрыСведений.гф_ДанныеВыгрузки.СоздатьМенеджерЗаписи();
			Запись.Период = Дата;
			Запись.ВидДанных = Перечисления.гф_ВидыДанныхДляВыгрузки.Документ;
			Запись.Документ = Документ;
			Запись.Состояние = Перечисления.гф_СтатусыВыгрузкиДанных.ГотовоКОтправке;
			Запись.Записать();
		КонецЦикла;
	КонецЕсли;                            
			                                          
КонецПроцедуры// } #wortmann

// #wortmann { 
// Функция ищет индекс элемента в Массиве
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	МассивДанные - Массив - массив элементами которого являются ДокументСсылка.* внесенные в РС гф_ДанныеВыгрузки 
//	Элемент - ДокументСсылка.* - Значение из Массива загружаемых документов
//
// Возвращаемое значение:
//	ИндексЭлемента - ДокументОбъект.ЗаказКлиента - Создаваемый документ 
//	"-1" - если не нашли элемент или МассивДанные = Неопределено 
Функция ВернутьИндексВМассиве(МассивДанные, Элемент) Экспорт 
	
	Если МассивДанные = Неопределено Тогда
		Возврат -1;
	КонецЕсли;
	
	Для ИндексЭлемента = 0 По МассивДанные.ВГраница() Цикл
		
		Если  (МассивДанные[ИндексЭлемента] = Элемент) Тогда
			Возврат ИндексЭлемента;
		КонецЕсли;	
		
	КонецЦикла;
	
	// не нашли элемент
	Возврат -1;
	
КонецФункции// } #wortmann   

// #wortmann { 
// Функция формирует массив документов РасходныйОрдерНаТовары или ПриходныйОрдерНаТовары или 
// КорректировкаНазначенияТоваров по срезу последнихсо статусом ГотовоКОтправке 
// или (Отправлено с условием что прошло более 5 дней)
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	ТипДокумента - Строка
//	Документы - Массив ИЛИ Неопределено - Может быть заполнен значениями  ДокументСсылка.РасходныйОрдерНаТовары 
//		или ДокументСсылка.ПриходныйОрдерНаТовары
//
// Возвращаемое значение:
//	МассивДокументов - Массив - из ДокументСсылка.РасходныйОрдерНаТовары или ДокументСсылка.ПриходныйОрдерНаТовары
//	или ДокументСсылка.КорректировкаНазначенияТоваров
Функция ПолучитьМассивДокументов(ТипДокумента, Документы = Неопределено) 
	
	  Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	гф_ДанныеВыгрузки.Документ КАК Документ,
		|	гф_ДанныеВыгрузки.Период КАК Период,
		|	гф_ДанныеВыгрузки.Состояние КАК Состояние
		|ПОМЕСТИТЬ СРЕЗ
		|ИЗ
		|	РегистрСведений.гф_ДанныеВыгрузки.СрезПоследних(
		|			&ТекущаяДата,
		|			ВидДанных = &ВидДанных
		|				И Документ ССЫЛКА Документ.РасходныйОрдерНаТовары
		|                И Выразить(Документ КАК Документ.РасходныйОрдерНаТовары).Статус = &Статус
		|					) КАК гф_ДанныеВыгрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Срез.Документ КАК Документ,
		|	Срез.Период КАК Период,
		|	Срез.Состояние КАК Состояние
		|ИЗ
		|	СРЕЗ КАК Срез
		|ГДЕ
		|	(Срез.Состояние = ЗНАЧЕНИЕ(Перечисление.гф_СтатусыВыгрузкиДанных.ГотовоКОтправке)
		|			ИЛИ (Срез.Состояние = ЗНАЧЕНИЕ(Перечисление.гф_СтатусыВыгрузкиДанных.Отправлено)
		|				И РАЗНОСТЬДАТ(Срез.Период, &ТекущаяДата, ДЕНЬ) > 5))
		// Галфинд СадомцевСА 03.11.2023 РЗ Выгрузить данные в WMS. Добавил условие для выгрузки документов: Проведен=Истина
		|	И Срез.Документ.Проведен
		|	И НЕ Срез.Документ.ПометкаУдаления
		|	И Срез.Документ В(&МассивДокументов)";
		
		Запрос.УстановитьПараметр("ВидДанных", Перечисления.гф_ВидыДанныхДляВыгрузки.Документ);
        Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса()); 
		Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыРасходныхОрдеров.КОтбору);

		// #wortmann { 
		// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee2b8a639ceb69
		// Изменила первый параметр функции на строку со значением документа
		// Галфинд_Домнышева 2023/07/26
		Если ТипДокумента = "ПриходныйОрдерНаТовары" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.РасходныйОрдерНаТовары", "Документ.ПриходныйОрдерНаТовары");
			Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыПриходныхОрдеров.КПоступлению);
		КонецЕсли;
		Если ТипДокумента = "КорректировкаНазначенияТоваров" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, 
							"И Выразить(Документ КАК Документ.РасходныйОрдерНаТовары).Статус = &Статус", "");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.РасходныйОрдерНаТовары", 
							"Документ.КорректировкаНазначенияТоваров"); 
		КонецЕсли;
		// } #wortmann 
		Если Документы <> Неопределено Тогда 
			Запрос.УстановитьПараметр("МассивДокументов", Документы);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Срез.Документ В(&МассивДокументов)", "Истина");		
		КонецЕсли;			
		
		РезультатЗапроса = Запрос.Выполнить();
		МассивДокументов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Документ");
		
		Если Документы <> Неопределено Тогда
			ПроверитьДокументыНаОтсутствиеИСделатьЗапись(Документы, МассивДокументов);
		КонецЕсли;
		
		Возврат МассивДокументов;
	
КонецФункции// } #wortmann

// #wortmann { 
// Процедура проверяет были ли выбранные документы отправлены ранее, если да записывает сообщение
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документы - Массив - Массив выбранных документов пользователем вручную
//	МассивДокументов - Массив - массив элементами которого являются ДокументСсылка.* внесенные в РС гф_ДанныеВыгрузки 
Процедура ПроверитьДокументыНаОтсутствиеИСделатьЗапись(Документы, МассивДокументов)
	
	МассивНеВнесенныхДокументов = Новый Массив;
	Для каждого Элемент Из Документы Цикл 
		ИндексЭлемента = ВернутьИндексВМассиве(МассивДокументов, Элемент);
			Если ИндексЭлемента = -1 Тогда  
				МассивНеВнесенныхДокументов.Добавить(Элемент);
			КонецЕсли;
	КонецЦикла;
	
	Если МассивНеВнесенныхДокументов.Количество() > 0 Тогда
		Сообщение = "По следующим выбранным документам файлы были отправлены ранее: ";
		Разделитель = Символы.ПС;
		Для каждого Элемент Из МассивНеВнесенныхДокументов Цикл
			Сообщение = Сообщение + Разделитель + Элемент;
		КонецЦикла;
		ЗаписьЖурналаРегистрации("ОбменСWMS", УровеньЖурналаРегистрации.Информация, ЭтотОбъект, ЭтотОбъект, Сообщение);
		ЗаписатьСообщениеОшибки(Сообщение, Ложь, "Проверка настроек для обмена");
		НомерОшибки = НомерОшибки + 1;
	КонецЕсли;

КонецПроцедуры// } #wortmann

// #wortmann { 
// Функция формирует пакет XML документов РасходныйОрдерНаТовары 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	ИмяФайлаБезПути - Строка - определяется в теле функции
//	ИмяФайла - Строка - определяется в теле функции
//	НомерСообщения - Строка
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары
//	НастройкиFTPСоединения - Структура - Структура данных для подключения к FTP
//
// Возвращаемое значение:
//	Пакет - ФабрикаXDTO  
Функция ПолучитьПакетРасхода(ИмяФайлаБезПути, ИмяФайла, НомерСообщения, Документ, НастройкиFTPСоединения)
	
	Если ЭтоСкладНедостачи Тогда
		Сообщение = "Не согласован формат выгрузки со складом. Файл по документу " 
		+ Документ + " сформирован не будет";
		ЗаписатьСообщениеОшибки(Сообщение, Истина, "Проверка настроек для обмена", Документ); 
		НомерОшибки = НомерОшибки + 1;
		Возврат Неопределено;
	 КонецЕсли;
	 
	НазваниеИнтерфейса = "SO_"; 
	Если ЭтоПеремещение Тогда 
		Распоряжение = ПолучитьСвязанныйДокументРО(Документ);
		Если (ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ПеремещениеТоваров")) Тогда  
			КодКлиента = ПолучитьКодКлиента(Распоряжение.СкладОтправитель);
			КодКонтрагента = ПолучитьКодКлиента(Распоряжение.СкладПолучатель);  
		Иначе
			// ++ Галфинд_ДомнышеваКР_15_02_2024
			КодКлиента = ПолучитьКодКлиента(Документ.Склад);
			КодКонтрагента = сокрЛП(Документ.Получатель.Код);
			//КодКлиента = ПолучитьКодКлиента(Распоряжение.Склад);
			//КодКонтрагента = ПолучитьКодКлиента(Распоряжение.гф_СкладПолучатель);
			// -- Галфинд_ДомнышеваКР_15_02_2024
		КонецЕсли;
		Суффикс = "-S_";
	ИначеЕсли ЭтоКорректировка Тогда
		Склад = ПолучитьСкладКорректировки(Документ);
		КодКлиента = ПолучитьКодКлиента(Склад);
		КодКонтрагента = ПолучитьКодКлиента(Склад);
		Суффикс = "-BL_"; 
		НазваниеИнтерфейса = "CHANGESTATUS_";
	Иначе
		КодКлиента = ПолучитьКодКлиента(Документ.Склад);
		КодКонтрагента = сокрЛП(Документ.Получатель.Код);
		Суффикс = "_";
	КонецЕсли;
	
	ПапкаДляВременнойВыгрузки = _омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначение("гф_ПапкаДляВыгрузкиНаСервере");
		
	СоздатьКаталог(ПапкаДляВременнойВыгрузки);
	
	КаталогВременнойВыгрузки = Новый Файл(ПапкаДляВременнойВыгрузки);
	Если Не КаталогВременнойВыгрузки.Существует() Тогда
		ДобавитьСтрокуВТекстыОшибки("Каталог для временной записи файлов задан неверно или не существует...", 
									Истина, ПапкаДляВременнойВыгрузки, Документ);
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли; 
	
	ИмяФайлаБезПути = НазваниеИнтерфейса + КодКлиента + Формат(СокрЛП(Документ.Номер), "ЧГ=") + Суффикс
						+ Формат(Документ.Дата, "ДФ=yyyyMMddHHmm") + ".xml"; 
	
	ДобавитьСтрокуВТекстыОшибки("Начало выгрузки в WMS документа " + Документ.Ссылка, Ложь, ИмяФайлаБезПути, Документ);
	
	ИмяФайла = ПапкаДляВременнойВыгрузки + "\" + ИмяФайлаБезПути;
	
	Пакет = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Пакет"));
	Пакет.ИД = НомерСообщения;
	Пакет.Дата = формат(ТекущаяДатаСеанса(), "ДФ='ггг-ММ-д hh:mm:ss'");
	Пакет.Источник = ПолучитьПоле_SourceSystem();
	Пакет.Владелец = КодКлиента;
	Пакет.Код = "01";
	
	// Раздел Компании
	// Для документа Корректировка Назначения нет получателей
	Если НЕ ЭтоКорректировка Тогда
		Пакет.Каталог = Каталог("Расход", Документ);
		// Раздел Документы	
		Пакет.Документы = РазделДокументы("Расход", Документ);
	Иначе	
		Пакет.НомерПакета = ?(СтрДлина(НомерПакетаКорректировки) = 1, "0" + НомерПакетаКорректировки, 
							НомерПакетаКорректировки);
		НомерПакетаКорректировки = НомерПакетаКорректировки + 1;
		Пакет.НомерПакетаПрошлый = "";
		
		Пакет.Документы = РазделДокументыКорректировка(Документ);
	КонецЕсли;
	
	Возврат Пакет;
	
КонецФункции// } #wortmann

// #wortmann { 
// Функция формирует пакет XML документов ПриходныйОрдерНаТовары
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	ИмяФайлаБезПути - Строка - определяется в теле функции
//	ИмяФайла - Строка - определяется в теле функции
//	НомерСообщения - Строка
//	Документ - ДокументСсылка.ПриходныйОрдерНаТовары
//	НастройкиFTPСоединения - Структура - Структура данных для подключения к FTP
//
// Возвращаемое значение:
//	Пакет - ФабрикаXDTO
Функция ПолучитьПакетПрихода(ИмяФайлаБезПути, ИмяФайла, НомерСообщения, Документ, НастройкиFTPСоединения)
	
	УсловиеНеСогласованногоФормата = ЭтоСкладНедостачи 
									ИЛИ (СкладПолучательВПарах И НЕ (ЭтоВозврат ИЛИ ЭтоПеремещение));
	
	Если УсловиеНеСогласованногоФормата Тогда
		Сообщение = "Не согласован формат выгрузки со складом. Файл сформирован не будет. По документу " + Документ.Ссылка 
		+ " была попытка создать PO по парному складу (не возврат и не перемещение)";
		ЗаписатьСообщениеОшибки(Сообщение, Истина, "Проверка настроек для обмена", Документ);
		НомерОшибки = НомерОшибки + 1;
		Возврат Неопределено; 
	КонецЕсли;
	
	Склад = Документ.Склад;
	
	Если ЭтоПеремещение Тогда
		КодКлиента = ПолучитьКодКлиента(Документ.Распоряжение.СкладПолучатель);
		КодКонтрагента = ПолучитьКодКлиента(Документ.Распоряжение.СкладОтправитель);
		Суффикс = "-S_";
	Иначе
		КодКлиента = ПолучитьКодКлиента(Склад);
        КодКонтрагента = сокрЛП(Документ.Отправитель.Код);
		Суффикс = "_";
	КонецЕсли;
		
	ПапкаДляВременнойВыгрузки = _омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначение("гф_ПапкаДляВыгрузкиНаСервере");
	
	СоздатьКаталог(ПапкаДляВременнойВыгрузки);
	
	КаталогВременнойВыгрузки = Новый Файл(ПапкаДляВременнойВыгрузки);
	Если Не КаталогВременнойВыгрузки.Существует() Тогда
		ДобавитьСтрокуВТекстыОшибки("Каталог для временной записи файлов задан неверно или не существует...", 
									Истина, ПапкаДляВременнойВыгрузки, Документ);
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяФайлаБезПути = "PO_" + КодКлиента + Формат(СокрЛП(Документ.Номер), "ЧГ=") + Суффикс 
					+ Формат(Документ.Дата, "ДФ=yyyyMMddHHmm") + ".xml"; 
	
	ИмяФайла = ПапкаДляВременнойВыгрузки + "\" + ИмяФайлаБезПути;
	
	ДобавитьСтрокуВТекстыОшибки("Начало выгрузки в WMS документа " + Документ.Ссылка, Ложь, ИмяФайлаБезПути, Документ);
	
	Пакет = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Пакет"));
	Пакет.ИД = НомерСообщения;
	Пакет.Дата = формат(ТекущаяДатаСеанса(), "ДФ='ггг-ММ-д hh:mm:ss'");
	Пакет.Источник = ПолучитьПоле_SourceSystem();
	Пакет.Владелец = КодКлиента;
	Пакет.Код = "01";
	
	Пакет.Каталог = Каталог("Приход", Документ);
	Пакет.Документы = РазделДокументы("Приход", Документ);

	Возврат Пакет;
	
КонецФункции// } #wortmann 

// #wortmann { 
// Функция получает документ Распоряжение из РасходныйОрдерНаТовары
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары
//
// Возвращаемое значение:
//	ДокументСсылка.* - если связанный документ найден
//	Неопределено - если документ не найден
Функция ПолучитьСвязанныйДокументРО(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение КАК Распоряжение
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
	|ГДЕ
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка.Следующий();
		Возврат Выборка.Распоряжение;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции// } #wortmann

// #wortmann { 
// Функция получает документ ЗаявкаНаВозвратТоваровОтКлиента из по Корректировке
// Галфинд_Домнышева 2023/07/28
//
// Параметры:
//	Документ - ДокументСсылка.КорректировкаНазначенияТоваров
//
// Возвращаемое значение:
//	ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента - если связанный документ найден
//	Неопределено - если документ не найден
Функция ПолучитьЗаявкуПоКорректировке(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ Первые 1
		|	ЗаявкаНаВозвратВозвращаемыеТовары.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ЗаявкаНаВозвратВозвращаемыеТовары
		|ГДЕ
		|	ЗаявкаНаВозвратВозвращаемыеТовары.гф_КорректировкаНазначения = &КорректировкаНазначения";
	
	Запрос.УстановитьПараметр("КорректировкаНазначения", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции// } #wortmann 

// #wortmann { 
// Функция получает значение Склада из ТЧ документа КорректировкаНазначенияТоваров
// Галфинд_Домнышева 2023/07/28
//
// Параметры:
//	Документ - ДокументСсылка.КорректировкаНазначенияТоваров
//
// Возвращаемое значение:
//	СправочникСсылка.Склады - элемент справочника Склады
Функция ПолучитьСкладКорректировки(Документ) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КорректировкаТовары.Склад КАК Склад
	|ИЗ
	|	Документ.КорректировкаНазначенияТоваров.Товары КАК КорректировкаТовары
	|ГДЕ
	|	КорректировкаТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.Склад;
	
КонецФункции// } #wortmann

// #wortmann { 
// Функция устанавливает есть ли у Склада дополнительный реквизит "гф_СкладыСкладМаркетплейс"
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Склад - СправочникСсылка.Склады
//
// Возвращаемое значение:
//	Булево - Истина, если найдено свойство "гф_СкладыСкладМаркетплейс", в остальных случаях Ложь
Функция ПроверитьЗначениеСкладМаркетплейс(Склад)
	
    Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СкладыДополнительныеРеквизиты.Свойство.Имя КАК Свойство,
		|	СкладыДополнительныеРеквизиты.Значение КАК Значение
		|ИЗ
		|	Справочник.Склады.ДополнительныеРеквизиты КАК СкладыДополнительныеРеквизиты
		|ГДЕ
		|	СкладыДополнительныеРеквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Склад);
	Запрос.УстановитьПараметр("Имя", "гф_СкладыСкладМаркетплейс");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Свойство = "гф_СкладыСкладМаркетплейс" Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Ложь;
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;

КонецФункции// } #wortmann

// #wortmann { 
// Функция устанавливает есть ли у Склада дополнительный реквизит "гф_СкладыТоварыВКоробах"
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Склад - СправочникСсылка.Склады
//
// Возвращаемое значение:
//	Булево - Истина, если найдено свойство "гф_СкладыТоварыВКоробах", в остальных случаях Ложь
Функция ПроверитьЗначениеСкладВКоробах(Склад)
	
    Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СкладыДополнительныеРеквизиты.Свойство.Имя КАК Свойство,
		|	СкладыДополнительныеРеквизиты.Значение КАК Значение
		|ИЗ
		|	Справочник.Склады.ДополнительныеРеквизиты КАК СкладыДополнительныеРеквизиты
		|ГДЕ
		|	СкладыДополнительныеРеквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Свойство = "гф_СкладыТоварыВКоробах" Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Ложь;
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;

КонецФункции// } #wortmann

// #wortmann { 
// Функция получает значение у Склада дополнительный реквизит "гф_ПапкаFTP"
// Галфинд_Домнышева 2024/02/019
//
// Параметры:
//	Склад - СправочникСсылка.Склады
//
// Возвращаемое значение:
//	Строка -  если найдено свойство "гф_ПапкаFTP", в остальных случаях Неопределено
Функция ПолучитьЗначениеСкладПапкаFTP(Склад)
	
    Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СкладыДополнительныеРеквизиты.Свойство.Имя КАК Свойство,
		|	СкладыДополнительныеРеквизиты.Значение КАК Значение
		|ИЗ
		|	Справочник.Склады.ДополнительныеРеквизиты КАК СкладыДополнительныеРеквизиты
		|ГДЕ
		|	СкладыДополнительныеРеквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Свойство = "гф_ПапкаFTP" Тогда
				Возврат Выборка.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат "";
	Иначе
		
		Возврат "";
		
	КонецЕсли;

КонецФункции// } #wortmann

// #wortmann { 
// Составляет таблицу с колонками Организация и ПапкаЛогWMS по данным справочника гф_КаталогиОбработкиФайловXML
// Галфинд_Домнышева 2024/01/30
//
// Возвращаемое значение:
//	ТаблицаЗначений - с колонками Организация и ПапкаЛогWMS
Функция ПолучитьКаталогиЛОГ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	гф_КаталогиОбработкиФайловXML.ПапкаЛогWMS КАК ПапкаЛогWMS,
		|	гф_КаталогиОбработкиФайловXML.Организация КАК Организация
		|ИЗ
		|	Справочник.гф_КаталогиОбработкиФайловXML КАК гф_КаталогиОбработкиФайловXML
		|ГДЕ
		|	ВЫРАЗИТЬ(гф_КаталогиОбработкиФайловXML.ПапкаЛогWMS КАК СТРОКА(100)) <> """" ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();

КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "Каталог" для пакета ФабрикаXDTO "WMS"
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Тип - Строка - "Приход" или "Расход"
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары, ДокументСсылка.ПриходныйОрдерНаТовары
//
// Возвращаемое значение:
//	Каталог - Тип "Каталог" для пакета ФабрикаXDTO "WMS"
Функция Каталог(Тип, Документ)
	
	Каталог = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Каталог"));
	
	Если Тип = "Расход" Тогда
		Каталог.Компании = КомпанииРасход(Документ);
		
	Иначе
		// Тип = "Приход" раздел Номенклатура
		Каталог.СписокТоваров = СписокТоваров(Документ, Тип);
		
		// раздел компании
		Каталог.Компании = КомпанииПриход(Документ); 
	КонецЕсли;
	
	Возврат Каталог;
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "Компании" для пакета ФабрикаXDTO "WMS" для Расхода
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ -  ДокументСсылка.РасходныйОрдерНаТовары - выгружаемый документ
//
// Возвращаемое значение:
//	Компании - Тип "Компании" для пакета ФабрикаXDTO "WMS"
Функция КомпанииРасход(Документ)
	
	Компании = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Компании"));
	Компании.Компания.Добавить(КомпанияРасход(Документ));
	
	Возврат Компании;
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "Компания" для пакета ФабрикаXDTO "WMS"  для Расхода
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ -  ДокументСсылка.РасходныйОрдерНаТовары - выгружаемый документ
//
// Возвращаемое значение:
//	Компания - Тип "Компания" для пакета ФабрикаXDTO "WMS"
Функция КомпанияРасход(Документ)
	Перем КомпанияАдрес;
	
	СвязанныйДокумент = ПолучитьСвязанныйДокументРО(Документ);
	
	Компания = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Компания"));
	Компания.ИД = КодКонтрагента;
	Компания.Имя = Документ.Получатель.Наименование;
	Компания.Адреса = АдресаРасход(КомпанияАдрес, Документ, СвязанныйДокумент);
	Компания.Адрес = КомпанияАдрес;
	
	Возврат Компания;
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "Адреса" для пакета ФабрикаXDTO "WMS"  для Расхода
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	КомпанияАдрес - Строка - Представление компании (из АдресаДоставки или Юр.Адреса или Физ.адреса)
//	Документ -  ДокументСсылка.РасходныйОрдерНаТовары - выгружаемый документ
//	СвязанныйДокумент - ДокументСсылка.* - распоряжение для РасходныйОрдерНаТовары
//
// Возвращаемое значение:
//	Адреса - Тип "Адреса" для пакета ФабрикаXDTO "WMS"
Функция АдресаРасход(КомпанияАдрес, Документ, СвязанныйДокумент)
	
	Адреса = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Адреса"));
	КомпанияАдрес = "";
	
	ЕстьАдрес = Ложь;
	Если ТипЗнч(СвязанныйДокумент) = Тип("ДокументСсылка.ЗаказНаВнутреннееПотребление") Тогда
		Контрагент = СвязанныйДокумент.гф_Контрагент;
		АдресДоставки = СвязанныйДокумент.гф_АдресДоставки.Адрес;
	// ++ Галфинд_ДомнышеваКР_15_02_2024	
	ИначеЕсли ТипЗнч(СвязанныйДокумент) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		Контрагент = СвязанныйДокумент.гф_КонтрагентПолучатель;
		АдресДоставки = СвязанныйДокумент.АдресДоставки;
	// -- Галфинд_ДомнышеваКР_15_02_2024
	Иначе
		Контрагент = СвязанныйДокумент.Контрагент;
		АдресДоставки = СвязанныйДокумент.АдресДоставки;
	КонецЕсли;
	
	Структура = ПолучитьАдресПоТипуКомпании(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
									Контрагент, ЕстьАдрес);
	Если ЕстьАдрес Тогда
		Адреса.Адрес.Добавить(Адрес(Структура, "Юридический адрес"));
		КомпанияАдрес = Структура.Представление;
	КонецЕсли;
	
	ЕстьАдрес = Ложь;
	Структура = ПолучитьАдресПоТипуКомпании(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента,
									Контрагент, ЕстьАдрес);
	Если ЕстьАдрес Тогда
		Адреса.Адрес.Добавить(Адрес(Структура, "Фактический адрес"));
		КомпанияАдрес = Структура.Представление;
	КонецЕсли;
	
	СтруктураКИ = ПолучитьСтруктуруКИ(СвязанныйДокумент, Документ);
	Если ЗначениеЗаполнено(СтруктураКИ) Тогда
		
		СтруктураАдреса = Новый Структура;
		СтруктураАдреса.Вставить("Представление", СтруктураКИ.Представление);
		СтруктураАдреса.Вставить("Индекс", СтруктураКИ.Индекс);
		СтруктураАдреса.Вставить("Город", СтруктураКИ.Город);
		СтруктураАдреса.Вставить("Регион", СтруктураКИ.Регион);
		
		Адреса.Адрес.Добавить(Адрес(СтруктураАдреса, "Адрес доставки"));
		КомпанияАдрес = АдресДоставки;
	КонецЕсли;

	Возврат Адреса; 
	
КонецФункции// } #wortmann

// #wortmann { 
// Функция получает структуру с контактной информацией из адреса доставки указанного
// в документе распоряжении
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	СвязанныйДокумент - ДокументСсылка.* - распоряжение для РасходныйОрдерНаТовары
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары - выгружаемый документ
//
// Возвращаемое значение:
//	СтруктураКИ - Структура - с данными адреса доставки, если адрес заполнен
//	Неопределено - если адрес не заполнен
Функция ПолучитьСтруктуруКИ(СвязанныйДокумент, Документ)
	
	Если ТипЗнч(СвязанныйДокумент) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		СтруктураКИ = ПолучитьСтруктуруПоПолучателю(Документ.Получатель);
		Возврат СтруктураКИ;
	Иначе	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	гф_АдресаДоставки.Адрес КАК Представление,
		|	гф_АдресаДоставки.РегионНаименование КАК Регион,
		|	ПОДСТРОКА(гф_АдресаДоставки.Адрес, 0, 6) КАК Индекс
		|ИЗ
		|	Справочник.гф_АдресаДоставки КАК гф_АдресаДоставки
		|ГДЕ
		|	гф_АдресаДоставки.Ссылка = &Адрес";
		
		Запрос.УстановитьПараметр("Адрес", СвязанныйДокумент.гф_АдресДоставки);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		СтруктураКИ = Новый Структура;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка.Следующий();
			МассивАдрес = СтрРазделить(Выборка.Представление, ",");
			Город = "";
			Для Каждого Эл Из МассивАдрес Цикл
				Если СтрЧислоВхождений(Эл, " г") > 0 Тогда
					Город = Эл;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			СтруктураКИ.Вставить("Представление", Выборка.Представление);
			СтруктураКИ.Вставить("Индекс", Выборка.Индекс);
			СтруктураКИ.Вставить("Город", Город);
			СтруктураКИ.Вставить("Регион", Выборка.Регион);
			//ИсточникКИ = Выборка.Значение;
			//ТипКИ = Перечисления.ТипыКонтактнойИнформации.Адрес;
			//
			//СтруктураКИ = УправлениеКонтактнойИнформациейСлужебный.JSONВКонтактнуюИнформациюПоПолям(ИсточникКИ, ТипКИ);
			
			Возврат СтруктураКИ;
		КонецЕсли;
	КонецЕсли;

	Возврат Неопределено;
	
КонецФункции// } #wortmann  

Функция ПолучитьСтруктуруПоПолучателю(Получатель)
	
	Если ТипЗнч(Получатель) <> Тип("СправочникСсылка.Склады") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Регион КАК Регион,
		|	КонтактнаяИнформация.Город КАК Город,
		|	КонтактнаяИнформация.Представление КАК Представление,
		|	КонтактнаяИнформация.Вид КАК Вид,
		|	КонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
		|	ПОДСТРОКА(КонтактнаяИнформация.Представление, 0, 6) КАК Индекс
		|ИЗ
		|	Справочник.Склады.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Вид = &Вид
		|	И КонтактнаяИнформация.Тип = &Тип
		|	И КонтактнаяИнформация.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.АдресСклада);
	Запрос.УстановитьПараметр("Ссылка", Получатель);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаАдресов = РезультатЗапроса.Выгрузить();
	Адрес = Новый Структура; 
	
	Для каждого Колонка Из ТаблицаАдресов.Колонки Цикл
		Адрес.Вставить(Колонка.Имя);
	КонецЦикла;
	Если ТаблицаАдресов.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Адрес, ТаблицаАдресов[0]);
	КонецЕсли;
	
	Возврат Адрес; 
	
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "Компании" для пакета ФабрикаXDTO "WMS" для Прихода
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ -  ДокументСсылка.ПриходныйОрдерНаТовары - выгружаемый документ
//
// Возвращаемое значение:
//	Компании - Тип "Компании" для пакета ФабрикаXDTO "WMS"
Функция КомпанииПриход(Документ)
	
	Компании = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Компании"));		
	
	КомпанииПоЗаказам = ПолучитьКомпанииПоЗаказуКлиента(Документ); // 31.01.23
	Для каждого КомпанияЗаказ Из КомпанииПоЗаказам Цикл
	Компании.Компания.Добавить(КомпанияПриход(КомпанияЗаказ));
	КонецЦикла;
	Возврат Компании;
КонецФункции// } #wortmann)

// #wortmann { 
// Функция подбирает ЗаказыКлиентов из Тип "Компании" для пакета ФабрикаXDTO "WMS" для Прихода
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ -  ДокументСсылка.ПриходныйОрдерНаТовары - выгружаемый документ
//
// Возвращаемое значение:
//	ТЗ - ТаблицаЗначений - с колонками "" и "" и ""
Функция ПолучитьКомпанииПоЗаказуКлиента(Документ) 
	
	Если ЭтоВозврат Тогда
		МассивСсылок = ПолучитьДанныеУЛПоВозврату(Документ);	
	Иначе
		ДанныеУЛ = ПолучитьДанныеУЛ(Документ);                     
		МассивСсылок = ДанныеУЛ.ВыгрузитьКолонку("УпаковочныйЛист");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	// ++ Галфинд_ДомнышеваКР_15_02_2024
	// для Парных складов нет УЛ
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") И СкладПолучательВПарах Тогда
		Запрос.Текст = 
         "ВЫБРАТЬ
        |	ВЫРАЗИТЬ(гф_ГлобальныеЗначенияСписок.Значение КАК Документ.ЗаказКлиента) КАК Значение,
        |	ВЫРАЗИТЬ(гф_ГлобальныеЗначенияСписок.Значение КАК Документ.ЗаказКлиента).Организация КАК Организация
        |ПОМЕСТИТЬ ТехническиеЗаказы
        |ИЗ
        |	ПланВидовХарактеристик.гф_ГлобальныеЗначения.Список КАК гф_ГлобальныеЗначенияСписок
        |ГДЕ
        |	гф_ГлобальныеЗначенияСписок.Ссылка.Ключ = ""гф_ГлобальныеЗначенияТехническихЗаказовКлиента""
        |	И ВЫРАЗИТЬ(гф_ГлобальныеЗначенияСписок.Значение КАК Документ.ЗаказКлиента).Организация = &организация
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗЛИЧНЫЕ
        |	ЗаказКлиента.Ссылка КАК гф_Заказ,
        |	ЗаказКлиента.Контрагент КАК Контрагент,
        |	ЗаказКлиента.АдресДоставки КАК АдресДоставки,
        |	ЗаказКлиента.Контрагент.Наименование КАК КонтрагентНаименование,
        |	ЗаказКлиента.Партнер.Код КАК КодКлиента
        |ИЗ
        |	Документ.ЗаказКлиента КАК ЗаказКлиента
        |ГДЕ
        |	ЗаказКлиента.Ссылка В
        |				(ВЫБРАТЬ
        |					Т.Значение
        |				ИЗ
        |					ТехническиеЗаказы КАК Т)";
		
	Иначе
	// --Галфинд_ДомнышеваКР_15_02_2024
	Запрос.Текст = 
	    // ++ Галфинд_домнышеваКР_09_02_2024
		// изменен текст запроса по получению Заказов, с добавлением заполнения данных по "техническим заказам"
		// в глобальнике с ключом "гф_ГлобальныеЗначенияТехническихЗаказовКлиента"
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(гф_ГлобальныеЗначенияСписок.Значение КАК Документ.ЗаказКлиента) КАК Значение,
		|	ВЫРАЗИТЬ(гф_ГлобальныеЗначенияСписок.Значение КАК Документ.ЗаказКлиента).Организация КАК Организация
		|ПОМЕСТИТЬ ТехническиеЗаказы
		|ИЗ
		|	ПланВидовХарактеристик.гф_ГлобальныеЗначения.Список КАК гф_ГлобальныеЗначенияСписок
		|ГДЕ
		|	гф_ГлобальныеЗначенияСписок.Ссылка.Ключ = ""гф_ГлобальныеЗначенияТехническихЗаказовКлиента""
		|	И ВЫРАЗИТЬ(гф_ГлобальныеЗначенияСписок.Значение КАК Документ.ЗаказКлиента).Организация = &организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		// Добавлено условие подбора Техического заказа.
		// Галфинд_ДомнышеваКР_Доработано условие с Неопределено 18_03_2024
		|		КОГДА УпаковочныйЛист.гф_Заказ = НЕОПРЕДЕЛЕНО
		|				ИЛИ УпаковочныйЛист.гф_Заказ = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
		|				ИЛИ УпаковочныйЛист.гф_Заказ.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА ТехническиеЗаказы.Значение
		|		ИНАЧЕ УпаковочныйЛист.гф_Заказ
		|	КОНЕЦ КАК гф_Заказ
		|ПОМЕСТИТЬ Заказы
		|ИЗ
		|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
		|	ЛЕВОЕ СОЕДИНЕНИЕ ТехническиеЗаказы КАК ТехническиеЗаказы
	    |			ПО ИСТИНА
		|ГДЕ
		|	УпаковочныйЛист.Ссылка В (&МассивСсылок)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Заказы.гф_Заказ КАК гф_Заказ,
		|	ЗаказКлиента.Контрагент КАК Контрагент,
		|	ЗаказКлиента.АдресДоставки КАК АдресДоставки,
		|	ЗаказКлиента.Контрагент.Наименование КАК КонтрагентНаименование,
		|	ЗаказКлиента.Партнер.Код КАК КодКлиента
		|ИЗ
		|	Заказы КАК Заказы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
		|		ПО Заказы.гф_Заказ = ЗаказКлиента.Ссылка
		|ГДЕ
		|	НЕ ЗаказКлиента.Ссылка ЕСТЬ NULL";
	
		// -- Галфинд_домнышеваКР_09_02_2024
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	КонецЕсли;// Галфинд_ДомнышеваКР_15_02_2024
	
	Запрос.УстановитьПараметр("организация", Организация);

	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат РезультатЗапроса.Выгрузить();
	КонецЕсли;		
	
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "Компания" для пакета ФабрикаXDTO "WMS" для Прихода
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	КомпанияЗаказ - СтрокаТаблицыЗначений - из ТЗ собранной функцией ПолучитьКомпанииПоЗаказуКлиента()
//
// Возвращаемое значение:
//	Компания - Тип "Компания" для пакета ФабрикаXDTO "WMS"
Функция КомпанияПриход(КомпанияЗаказ)
	Перем КомпанияАдрес;
	
	Компания = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Компания"));
	Компания.ИД = КомпанияЗаказ.КодКлиента;
	Компания.Имя = КомпанияЗаказ.КонтрагентНаименование;

	Компания.Адреса = АдресаПриход(КомпанияАдрес, КомпанияЗаказ);
	Компания.Адрес = КомпанияАдрес;
	
	Возврат Компания;
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "Адреса" для пакета ФабрикаXDTO "WMS"  для Прихода
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	КомпанияАдрес - Строка - Представление компании (из АдресаДоставки или Юр.Адреса или Физ.адреса)
//	КомпанияЗаказ - СтрокаТаблицыЗначений - из ТЗ собранной функцией ПолучитьКомпанииПоЗаказуКлиента()
//
// Возвращаемое значение:
//	Адреса - Тип "Адреса" для пакета ФабрикаXDTO "WMS"
Функция АдресаПриход(КомпанияАдрес, КомпанияЗаказ)
	
	Отправитель = КомпанияЗаказ.Контрагент;
	
	Адреса = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Адреса"));
 	КомпанияАдрес = "";
	
	ЕстьАдрес = Ложь;
	структура = ПолучитьАдресПоТипуКомпании(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
											Отправитель, ЕстьАдрес);
	Если ЕстьАдрес Тогда
		Адреса.Адрес.Добавить(Адрес(Структура, "Юридический адрес"));
		КомпанияАдрес = структура.Представление;
	КонецЕсли;
	
	ЕстьАдрес = Ложь;
	структура = ПолучитьАдресПоТипуКомпании(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента,
											Отправитель, ЕстьАдрес);
	Если ЕстьАдрес Тогда
		Адреса.Адрес.Добавить(Адрес(Структура, "Фактический адрес"));
		КомпанияАдрес = структура.Представление;
	КонецЕсли;
	
	ТипАдресДоставки = ПолучитьТипАдресДоставки();
	
	ЕстьАдрес = Ложь;
	структура = ПолучитьАдресПоТипуКомпании(ТипАдресДоставки, Отправитель, ЕстьАдрес);
	Если ЕстьАдрес Тогда
		Адреса.Адрес.Добавить(Адрес(Структура, "Адрес доставки"));
		КомпанияАдрес = структура.Представление;
	КонецЕсли;

	Если ЗначениеЗаполнено(КомпанияЗаказ.АдресДоставки) Тогда
		КомпанияАдрес = КомпанияЗаказ.АдресДоставки; 
	КонецЕсли;
	
    // КомпанияАдрес должна быть АдресДоставки из ЗаказКлиента
	Возврат Адреса;
КонецФункции// } #wortmann 

// #wortmann { 
// Функция получает значение "Адреса доставки" в спр ВидыКонтактнойИнформации 
// Галфинд_Домнышева 2022/12/01
//
// Возвращаемое значение:
//	СправочникСсылка.ВидыКонтактнойИнформации - ссылка на элемент справочника
Функция ПолучитьТипАдресДоставки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.Наименование = &Наименование
		|	И ВидыКонтактнойИнформации.Родитель = &Родитель";
	
	Запрос.УстановитьПараметр("Наименование", "Адрес доставки");
	Запрос.УстановитьПараметр("Родитель", Справочники.ВидыКонтактнойИнформации.СправочникКонтрагенты);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Не РезультатЗапроса.Пустой() Тогда
	 Выборка.Следующий();
    Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "Адрес" для пакета ФабрикаXDTO "WMS" 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Структура - Структура - с данными адреса
//	ТипАдреса - Строка - "Юридический адрес", "Фактический адрес", "Адрес доставки" 
//
// Возвращаемое значение:
//	Адрес - Тип "Адрес" для пакета ФабрикаXDTO "WMS"
Функция Адрес(Структура, ТипАдреса)
	
	Адрес = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Адрес"));
	Адрес.Имя = Структура.Представление;
	Адрес.Индекс = Структура.Индекс;
	Адрес.Город = Структура.Город;
	Адрес.Район = Структура.Регион;
	Адрес.Страна = "Россия";
	Адрес.Тип = ТипАдреса;
	
	Возврат Адрес;
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "СписокТоваров" для пакета ФабрикаXDTO "WMS" для Прихода
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ - ДокументСсылка.ПриходныйОрдерНаТовары
//	Тип - Строка - "Приход", "Расход" 
//
// Возвращаемое значение:
//	СписокТоваров - Тип "СписокТоваров" для пакета ФабрикаXDTO "WMS"
Функция СписокТоваров(Документ, Тип)
	
	СписокТоваров = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "СписокТоваров"));
	
	Если СкладПолучательВПарах Тогда
		// Посмотри как правильно выгружать информацию с документа	
		Для каждого строка Из Документ.Товары  Цикл
			СписокТоваров.ЭлементСпискаТоваров.Добавить(ЭлементСпискаТоваров_ПарныеСклады(строка, Документ));
		КонецЦикла;
		
	Иначе
		УпаковочныеЛисты = ПолучитьДанныеУЛ(Документ);

		Для каждого строка Из УпаковочныеЛисты Цикл
			СписокТоваров.ЭлементСпискаТоваров.Добавить(ЭлементСпискаТоваров(строка, Документ));
		КонецЦикла;
	КонецЕсли;	

	Возврат СписокТоваров;
	
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "ЭлементСпискаТоваров" для пакета ФабрикаXDTO "WMS" для Прихода 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Строка - СтрокаТЧ - Строка из табличной части загружаемого документа 
//	Документ - ДокументСсылка.ПриходныйОрдерНаТовары
//
// Возвращаемое значение:
//	Элемент - Тип "ЭлементСпискаТоваров" для пакета ФабрикаXDTO "WMS"
Функция ЭлементСпискаТоваров(Строка, Документ)
	
	Элемент = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "ЭлементСпискаТоваров"));
	
	Элемент.Артикул = строка.Артикул;
	
	Элемент.Описание = строка.Номенклатура.НаименованиеПолное;
	Элемент.Наименование = строка.Номенклатура.Наименование;
	Элемент.Активность = 1;
	Элемент.УчетПартий = 1;
	Элемент.УчетНомераПартии = 1;
	Элемент.Цена = ПолучитьЦенуПО(Строка, Документ);
	
	ЕдиницаИзмерения = "упак";
	массив = Новый Массив;
	массив.Добавить(Новый Структура("Единица", "упак"));
	
	Элемент.Единицы = Единицы(массив);
	
	Возврат Элемент;
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "ЭлементСпискаТоваров_ПарныеСклады" для пакета ФабрикаXDTO "WMS" 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Строка - СтрокаТЧ - Строка из табличной части загружаемого документа 
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары, ДокументСсылка.ПриходныйОрдерНаТовары
//
// Возвращаемое значение:
//	Элемент - Тип "ЭлементСпискаТоваров_ПарныеСклады" для пакета ФабрикаXDTO "WMS"
Функция ЭлементСпискаТоваров_ПарныеСклады(строка, Документ)
	
	Элемент = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "ЭлементСпискаТоваров_ПарныеСклады"));
	// ++ Галфинд_ДомнышеваКР_15_02_2024
	// Элемент.Артикул = сокрЛП(строка.Номенклатура.Артикул) + "/" + сокрЛП(строка.Характеристика);
	Элемент.Артикул = сокрЛП(строка.Номенклатура.Артикул) 
					+ ?(ЗначениеЗаполнено(строка.Характеристика), "/" + сокрЛП(строка.Характеристика), "");
	// -- Галфинд_ДомнышеваКР_15_02_2024
	Элемент.Описание = строка.Номенклатура.НаименованиеПолное;
	Элемент.Наименование = строка.Номенклатура.Наименование;
	Элемент.Активность = 1;
	Если ЭтоВозврат Тогда
		Элемент.Цена = ПолучитьЦену(Строка, Документ); 
	Иначе   
		Элемент.Цена = ПолучитьЦенуПО(Строка, Документ);
	КонецЕсли;
	
	Элемент.КонтрольСерий = "INV_DETAIL";
	
	Элемент.Штрихкоды = Штрихкоды(Строка);
	
	ЕдиницаИзмерения = строка.Номенклатура.ЕдиницаИзмерения;
	массив = Новый Массив;
	массив.Добавить(Новый Структура("Единица", ЕдиницаИзмерения.Наименование));
	
	Элемент.Единицы = Единицы(массив);
	
	Возврат Элемент;
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "Штрихкоды" для пакета ФабрикаXDTO "WMS" 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Строка - СтрокаТЧ - Строка из табличной части загружаемого документа 
//
// Возвращаемое значение:
//	Штрихкоды - Тип "Штрихкоды" для пакета ФабрикаXDTO "WMS"
Функция Штрихкоды(Строка)
	
	НоменклатураКод = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
		|	И ШтрихкодыНоменклатуры.Характеристика = &Характеристика";
	
	Запрос.УстановитьПараметр("Номенклатура", Строка.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Строка.Характеристика);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		НоменклатураКод = Выборка.Штрихкод;
	КонецЕсли;
	
	Штрихкоды = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Штрихкоды"));
	Штрихкоды.Штрихкод.Добавить(Штрихкод(НоменклатураКод));
	
	Возврат Штрихкоды;
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "Штрихкод" для пакета ФабрикаXDTO "WMS" 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	НоменклатураКод - Строка - штрихкод для номенклатуры 
//
// Возвращаемое значение:
//	Штрихкод - Тип "Штрихкод" для пакета ФабрикаXDTO "WMS"
Функция Штрихкод(НоменклатураКод)

	Штрихкод = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Штрихкод"));
	
	Штрихкод.ТипШК = "EAN13";
	Штрихкод.Используется = 1;
	Штрихкод.Предназначение = 1;
	Штрихкод.ЗначениеШК = СокрЛП(НоменклатураКод);

	Возврат Штрихкод;
КонецФункции// } #wortmann)

// #wortmann { 
// Функция заполняет Тип "Единицы" для пакета ФабрикаXDTO "WMS" 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Массив - Массив - из структур наименований единиц измерений СправочникСсылка.УпаковкиЕдиницыИзмерения
//
// Возвращаемое значение:
//	Единицы - Тип "Единицы" для пакета ФабрикаXDTO "WMS"
Функция Единицы(Массив)
	
	Единицы = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Единицы"));
	Для каждого строка Из Массив Цикл
		Единицы.Единица = Единица(строка.Единица);
	КонецЦикла;
	
	Возврат Единицы;
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "Единица" для пакета ФабрикаXDTO "WMS" 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Значение - Строка - наименование единицы измерения СправочникСсылка.УпаковкиЕдиницыИзмерения
//
// Возвращаемое значение:
//	Единица - Тип "Единица" для пакета ФабрикаXDTO "WMS"
Функция Единица(Значение)

	Единица = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Единица"));
	Единица.Наименование = Значение;
	Единица.Описание = Значение;
	Единица.Коэффициент = 1;
	Единица.ЕдиницаДляОтбора = 1;
	Единица.ЕдиницаПоУмолчанию = 1;

	Возврат Единица;
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "Документы" для пакета ФабрикаXDTO "WMS" для Корректировки 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары, ДокументСсылка.ПриходныйОрдерНаТовары
//
// Возвращаемое значение:
//	РазделДокументы - Тип "Документы" для пакета ФабрикаXDTO "WMS"
Функция РазделДокументыКорректировка(Документ)
	
	РазделДокументы = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Документы"));
	
	Документ1 = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Документ"));
	Документ1.Тип = "INVCHANGE_SO";
	Документ1.Владелец = КодКонтрагента;
	Документ1.Шапка = Шапка("SO_S", Документ, Документ.Организация);
	Документ1.Товары = ТоварыРасходКорректировка(Документ);
	РазделДокументы.Документ.Добавить(Документ1); 
	
	Документ2 = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Документ"));
	Документ2.Тип = "INVCHANGE_PO"; 
	Документ2.Владелец = КодКонтрагента;
	Шапка = Шапка("PO_S", Документ, Документ.Организация);
	Шапка.НомерПовтор = Шапка.Номер;
	Документ2.Шапка = Шапка;
	Документ2.Товары = ТоварыРасходКорректировка(Документ, " ");
	
	РазделДокументы.Документ.Добавить(Документ2);
	
	Возврат РазделДокументы;
КонецФункции// } #wortmann 

// #wortmann { 
// Функция заполняет Тип "Документы" для пакета ФабрикаXDTO "WMS" 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Тип - Строка - "Приход", "Расход"
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары, ДокументСсылка.ПриходныйОрдерНаТовары
//
// Возвращаемое значение:
//	РазделДокументы - Тип "Документы" для пакета ФабрикаXDTO "WMS"
Функция РазделДокументы(Тип, Документ)
	
	РазделДокументы = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Документы"));
	РазделДокументы.Документ.Добавить(РазделДокумент(Тип, Документ));
	
	Возврат РазделДокументы;
КонецФункции// } #wortmann

// Функция заполняет Тип "Документ" для пакета ФабрикаXDTO "WMS" 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Тип - Строка - "Приход", "Расход"
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары, ДокументСсылка.ПриходныйОрдерНаТовары
//
// Возвращаемое значение:
//	РазделДокумент - Тип "Документ" для пакета ФабрикаXDTO "WMS"
Функция РазделДокумент(Тип, Документ)
	
	Если Тип = "Расход" Тогда
		РазделДокумент = РазделДокументРасход(Документ);	
	Иначе
		РазделДокумент = РазделДокументПриход(Документ);
	КонецЕсли;
	
	Возврат РазделДокумент;
	
КонецФункции// } #wortmann  

// Функция заполняет Тип "Документ" для пакета интерфейс PO ФабрикаXDTO "WMS" 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары, ДокументСсылка.ПриходныйОрдерНаТовары
//
// Возвращаемое значение:
//	РазделДокумент - Тип "Документ" для пакета ФабрикаXDTO "WMS"
Функция РазделДокументПриход(Документ)
	
	РазделДокумент = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Документ"));
	//  Тип = "Приход" 
	Если ЭтоПеремещение И ЭтоОсновнойСклад Тогда	
		ТипШапки = "INTERNAL_MOVE";	
	ИначеЕсли СкладПолучательВПарах Тогда
		ТипШапки = "EL";
	ИначеЕсли ЭтоОсновнойСклад И НЕ ЭтоПоступление Тогда	
		ТипШапки = "X_DOCK_PO";
	Иначе	
		ТипШапки = "DEFAULT";
	КонецЕсли;
	
	РазделДокумент.Тип = "PO";
	РазделДокумент.Шапка = Шапка(ТипШапки, Документ, Документ.Отправитель);
	РазделДокумент.Товары = ТоварыПриход(Документ);
	
	Возврат РазделДокумент; 
	
КонецФункции// } #wortmann 

// Функция заполняет Тип "Документ" для пакета интерфейс SO ФабрикаXDTO "WMS" 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары, ДокументСсылка.ПриходныйОрдерНаТовары
//
// Возвращаемое значение:
//	РазделДокумент - Тип "Документ" для пакета ФабрикаXDTO "WMS"
Функция РазделДокументРасход(Документ)
	
	РазделДокумент = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Документ"));
	
	Если ЭтоВозврат 
		// ИЛИ ЭтоКорректировка 
		Тогда
		ТипШапки = "PO_BLOCK"; // Временная блокировка
	ИначеЕсли ЭтоПеремещение И ЭтоОсновнойСклад Тогда	
		ТипШапки = "INTERNAL_MOVE";
	ИначеЕсли ЭтоОсновнойСклад Или ЭтоТаможенныйСклад Тогда	
		ТипШапки = "X_DOCK_SO";
	Иначе	
		ТипШапки = "DEFAULT";
	КонецЕсли;
	
	РазделДокумент.Тип = "SO";
	Если ЭтоКорректировка Тогда
		РазделДокумент.Шапка = Шапка(ТипШапки,  Документ, Документ.Организация);
		РазделДокумент.Товары = ТоварыРасходКорректировка(Документ);
	Иначе
		РазделДокумент.Шапка = Шапка(ТипШапки,  Документ, Документ.Получатель, Истина);
		РазделДокумент.Товары = ТоварыРасход(Документ);
	КонецЕсли;	
	
	Возврат РазделДокумент; 
	
КонецФункции// } #wortmann 

// #wortmann { 
// Функция заполняет Тип "Шапка" для пакета ФабрикаXDTO "WMS" 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Тип - Строка - Тип шапки определяется в процедуре выше
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары, ДокументСсылка.ПриходныйОрдерНаТовары
//	Партнер - ОпределяемыйТип.ОтправительПолучательТоваров
//	НомерИнвойса - Булево
//
// Возвращаемое значение:
//	Шапка - Тип "Шапка" для пакета ФабрикаXDTO "WMS"
Функция Шапка(Тип, Документ, Партнер, НомерИнвойса = Ложь)
		
	Шапка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Шапка"));
	
	Шапка.Статус = "NEW";
	Шапка.Тип = Тип;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
		Шапка.Номер = НомерЗаявки(Документ);
		Шапка.ДатаОкончания = формат(Документ.ДатаОтгрузки, "ДФ='ггг-ММ-д hh:mm:ss'");
		Шапка.ДатаСоздания = формат(Документ.Дата, "ДФ='ггг-ММ-д hh:mm:ss'");
		Шапка.Получатель = КодКонтрагента;
		// ++ Галфинд_ДомнышеваКР_15_02_2024 
		// изменено Т.к. Партнер Определяемый составной тип, то не у всех есть рекв. НаименованиеПолное - в частности Склады
		ЕстьРеквизит = ОбщегоНазначения.ЕстьРеквизитОбъекта("НаименованиеПолное", Партнер.Метаданные());
		Если ЭтоСобственныеНужды ИЛИ НЕ ЕстьРеквизит Тогда
			Шапка.Контрагент = Партнер.Наименование;
		Иначе	
			Шапка.Контрагент = Партнер.НаименованиеПолное; 	
		КонецЕсли;
		// -- Галфинд_ДомнышеваКР_15_02_2024
		Шапка.Отправитель = КодКлиента;
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаНазначенияТоваров") Тогда
		Шапка.Номер = "BL-" + КодКлиента + Документ.Номер;
		Шапка.ДатаСоздания = формат(Документ.Дата, "ДФ='ггг-ММ-д hh:mm:ss'");
		Шапка.Контрагент = Организация.Наименование;		
	Иначе
		Шапка.Номер = НомерЗаявки(Документ);
		Шапка.ДатаОкончания = Формат(ЗаполнитьДатуОтгрузки(Документ.Дата), "ДФ='ггг-ММ-д hh:mm:ss'");
		Шапка.ДатаСоздания = формат(Документ.Дата, "ДФ='ггг-ММ-д hh:mm:ss'"); 
		Шапка.Получатель = 1;
		Шапка.Отправитель = КодКлиента;
	КонецЕсли;

	Если ЭтоРеализация Тогда
		СвязанныйДокумент = ПолучитьСвязанныйДокументРО(Документ);
		КомментарииДляРеализации = Новый Структура; 
		КомментарииДляРеализации.Вставить("Комментарий", Документ.Комментарий);
		// ИНН 
		ИНН = СвязанныйДокумент.Контрагент.ИНН;
		КомментарииДляРеализации.Вставить("ИНН", ИНН);
		// Контактное лицо контрагента для транспортной компании
		ИнформацияКонтактноеЛицо = СобратьИнформациюОКонтактномЛице(СвязанныйДокумент);
		КомментарииДляРеализации.Вставить("КонтактноеЛицо", ИнформацияКонтактноеЛицо);

		ВесНакладной = ""; // пока не заполняем	
		КомментарииДляРеализации.Вставить("Вес", ВесНакладной);
		Шапка.Комментарии = КомментарииРеализации(КомментарииДляРеализации);
	ИначеЕсли ЭтоКорректировка Тогда
		Шапка.Комментарии = "";
	Иначе
		Шапка.Комментарии = Комментарии(Документ.Комментарий);
	КонецЕсли;
	
	Если ЭтоРеализация ИЛИ ЭтоСобственныеНужды Тогда
		СтруктураАдреса = ПолучитьАдресДоставки(Документ);
		
		Если СтруктураАдреса.ТКНаименование <> Неопределено Тогда
			Шапка.reference2 = СтруктураАдреса.ТКНаименование;
			Шапка.reference5 = СтруктураАдреса.Представление;
		КонецЕсли; 
	КонецЕсли;
	
	// ++ Галфинд_ДомнышеваКР_23_01_2024
	// Если ЭтоПеремещение Тогда 
	Если ЭтоПеремещение И ТипЗнч(Документ) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда 
		 СвязанныйДокумент = ПолучитьСвязанныйДокументРО(Документ);
		 Если (ТипЗнч(СвязанныйДокумент) <> Тип("ДокументСсылка.ПеремещениеТоваров")) Тогда
	// -- Галфинд_ДомнышеваКР_23_01_2024 
		СтруктураАдреса = ПолучитьАдресДоставки(Документ);
		
		Если СтруктураАдреса.ТКНаименование <> Неопределено Тогда
			Шапка.reference2 = СтруктураАдреса.ТКНаименование;
			Шапка.Получатель = СтруктураАдреса.НомерАдреса;
		КонецЕсли;
		КонецЕсли; // Галфинд_ДомнышеваКР_23_01_2024
	КонецЕсли;
	
	Если НомерИнвойса Тогда
		//Шапка.НомерИнвойса = ПолучитьНомерИнвойса();
		Шапка.reference3 = КодКлиента + "-" + КодКонтрагента;
	КонецЕсли;
	
	Возврат Шапка;
КонецФункции// } #wortmann

// #wortmann { 
// Функция собирает информацию о контактном лице Партнера 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Распоряжение - ДокументСсылка.* - документ распоряжение из ТЧ Товары РО
//
// Возвращаемое значение:
//	ИнформацияКонтактноеЛицо - Строка из реквизитов Наименование(Контактного лица) и Телефонов
Функция СобратьИнформациюОКонтактномЛице(Распоряжение)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	гф_АдресаДоставки.КонтактноеЛицо КАК КонтактноеЛицо
		|ИЗ
		|	Справочник.гф_АдресаДоставки КАК гф_АдресаДоставки
		|ГДЕ
		|	гф_АдресаДоставки.Ссылка = &АдресДоставки
		|";
	
	Запрос.УстановитьПараметр("АдресДоставки", Распоряжение.гф_АдресДоставки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Выборка.Следующий();
		
		КонтактноеЛицо = Выборка.КонтактноеЛицо;
	Иначе
		КонтактноеЛицо = Распоряжение.КонтактноеЛицо;
	КонецЕсли;
	
    Запрос = Новый Запрос;
	Запрос.Текст = 
		"
		|ВЫБРАТЬ
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефона КАК НомерТелефона
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
		|ГДЕ
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка = &Ссылка";
    Запрос.УстановитьПараметр("Ссылка", КонтактноеЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Записи = РезультатЗапроса.Выбрать();
	Телефоны = "";
	Пока Записи.Следующий() Цикл
		Телефоны = Телефоны + Записи.НомерТелефона + ", ";
	КонецЦикла;
    ИнформацияКонтактноеЛицо = КонтактноеЛицо.Наименование + " " + Телефоны;
	Возврат ИнформацияКонтактноеЛицо;
	
КонецФункции// } #wortmann

// #wortmann { 
// Функция возвращает структуру с данными из справочника гф_АдресаДоставки 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары, ДокументСсылка.ПриходныйОрдерНаТовары
//
// Возвращаемое значение:
//	СтруктураАдреса - Структура с данными из справочника гф_АдресаДоставки
Функция ПолучитьАдресДоставки(Документ)
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
         СвязанныйДокумент = ПолучитьСвязанныйДокументРО(Документ);
	     АдресДоставки = СвязанныйДокумент.гф_АдресДоставки;
	Иначе
		СвязанныйДокумент = Документ.Распоряжение;
	    АдресДоставки = СвязанныйДокумент.АдресДоставки;
		Возврат АдресДоставки;
    КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1 
		|	гф_АдресаДоставки.Представление КАК Представление,
		|	гф_АдресаДоставки.НомерАдреса КАК НомерАдреса,
		|	гф_АдресаДоставки.ТК.Наименование КАК ТКНаименование
		|ИЗ
		|	Справочник.гф_АдресаДоставки КАК гф_АдресаДоставки
		|ГДЕ
		|	гф_АдресаДоставки.Ссылка = &Адрес";
	
	Запрос.УстановитьПараметр("Адрес", АдресДоставки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаАдресов = РезультатЗапроса.Выгрузить();
	
	СтруктураАдреса = Новый Структура;
	
	Для каждого Колонка Из ТаблицаАдресов.Колонки Цикл
		СтруктураАдреса.Вставить(Колонка.Имя);
	КонецЦикла;
	Если ТаблицаАдресов.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(СтруктураАдреса, ТаблицаАдресов[0]);
	КонецЕсли;
	// ++ Галфинд СадомцевСА 31.10.2023
	// Добавил сообщение о пустом реквизите ТК в справочнике Адреса доставки
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee76f70b4ab1a5
	Если СтруктураАдреса["ТКНаименование"] = NULL Тогда
		СтруктураАдреса["ТКНаименование"] = "";
		
		ТекущаяДата = ТекущаяДатаСеанса(); 
		НаборЗаписей = РегистрыСведений.гф_ОшибкиЗагрузки.СоздатьНаборЗаписей(); 
		
		НаборЗаписей.Отбор.Дата.Установить(ТекущаяДата);
		НаборЗаписей.Отбор.Организация.Установить(Документ.Склад.гф_Организация);
		НаборЗаписей.Отбор.Интерфейс.Установить(Перечисления.гф_Интерфейсы.WMS);
		НаборЗаписей.Отбор.ПутьФайла.Установить("");
		НаборЗаписей.Прочитать();
		
		ТекущиеЗначения = НаборЗаписей.Выгрузить();
		ТекущиеЗначения.Сортировать("Номер УБЫВ");
		Если ТекущиеЗначения.Количество() = 0 Тогда
			Номер = 1;
		Иначе
			Номер = ТекущиеЗначения[0].Номер + 1;
		КонецЕсли;
		
		НоваяЗапись = ТекущиеЗначения.Добавить(); 
		НоваяЗапись.Дата = ТекущаяДата;
		// здесь ВСЕГДА тип значения параметра Документ = Расходный ордер на товары
		НоваяЗапись.Организация = Документ.Склад.гф_Организация;
		НоваяЗапись.Интерфейс = Перечисления.гф_Интерфейсы.WMS;
		НоваяЗапись.ПутьФайла = ""; 
		НоваяЗапись.Номер = Номер;
		НоваяЗапись.ТекстОшибки = "Пустое поле:ТК. Адрес доставки:" + АдресДоставки + "! " + Документ;
		НоваяЗапись.ТипИнформации = "Ошибка";
		
		НаборЗаписей.Загрузить(ТекущиеЗначения);
		НаборЗаписей.Записать(); 
	КонецЕсли;
	// -- Галфинд СадомцевСА 31.10.2023

	Возврат СтруктураАдреса;
	
КонецФункции// } #wortmann

// #wortmann { 
// Функция возвращает значение ИНН из спр Контрагенты 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Партнер - ОпределяемыйТип.ОтправительПолучательТоваров
//
// Возвращаемое значение:
//	ИНН - Строка - значение ИНН из спр Контрагенты
Функция НайтиИннПоПартнеру(Партнер)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.ИНН КАК ИНН
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Наименование = &Наименование
		|	И Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)";
	
	Запрос.УстановитьПараметр("Наименование", Партнер.Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка.Следующий();
		Возврат Выборка.ИНН;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "Товары" для пакета ФабрикаXDTO "WMS" 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары - загружаемый документ
//
// Возвращаемое значение:
//	Товары - Тип "Товары" для пакета ФабрикаXDTO "WMS"
Функция ТоварыРасход(Документ)
	
	Товары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Товары"));
	Распоряжение = ПолучитьСвязанныйДокументРО(Документ);
		
	Если СкладОтправительВПарах Тогда
		запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Товары.Номенклатура.Артикул КАК Артикул,
			|	Товары.Характеристика КАК Характеристика,
			// ++ Галфинд_ДомнышеваКР_06_03_2024
			//|	Товары.Количество КАК Количество,
			|	ВЫБОР
			|		КОГДА Товары.Номенклатура.гф_ШтукВУпаковке <> 0
			|			ТОГДА Товары.Количество * Товары.Номенклатура.гф_ШтукВУпаковке
			|		ИНАЧЕ ВЫРАЗИТЬ(Товары.Количество КАК ЧИСЛО(15, 0))
			|	КОНЕЦ КАК Количество,
			// -- Галфинд_ДомнышеваКР_06_03_2024
			|	Товары.Номенклатура КАК Номенклатура,
			|	Товары.НомерСтроки КАК НомерСтроки,
			|	Товары.Распоряжение КАК Распоряжение
			|ИЗ
			|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &Документ");
		
		Запрос.УстановитьПараметр("Документ", Документ);
		
		выборка = запрос.Выполнить().Выгрузить();
		Артикулы = Выборка.Скопировать();
		
		НПП = 0;
		Артикулы.Свернуть("Артикул, Характеристика", "Количество");
		Для каждого строка Из Артикулы Цикл
			НПП = НПП + 1;			
			Товары.Строка.Добавить(СтрокаТовара2(строка, НПП, Истина, выборка, Документ));
		КонецЦикла;	
		
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтгружаемыеТовары.УпаковочныйЛист КАК УпаковочныйЛист,
		|	ОтгружаемыеТовары.Количество КАК Количество,
		|	АВТОНОМЕРЗАПИСИ() КАК НомерСтроки
		|ПОМЕСТИТЬ УЛ
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары.ОтгружаемыеТовары КАК ОтгружаемыеТовары
		|ГДЕ
		|	ОтгружаемыеТовары.Ссылка = &Ссылка
		|	И ОтгружаемыеТовары.ЭтоУпаковочныйЛист = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УЛ.УпаковочныйЛист КАК УпаковочныйЛист,
		|	УЛ.Количество КАК Количество,
		|	УЛ.УпаковочныйЛист.гф_Комплектация.Наименование КАК Артикул, 
		|	УЛ.УпаковочныйЛист.гф_Комплектация КАК ВариантКомплектации,
		|	УЛ.УпаковочныйЛист.Код КАК СерийныйНомер,
		|	ДокументУпаковочныйЛист.гф_Комплектация.Владелец КАК Номенклатура,
		|	УЛ.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	УЛ КАК УЛ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист КАК ДокументУпаковочныйЛист
		|		ПО УЛ.УпаковочныйЛист = ДокументУпаковочныйЛист.Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Документ);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выгрузить();
		
		Для каждого строка Из Выборка Цикл
			Товары.Строка.Добавить(СтрокаТовара(строка, Документ));
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Товары;
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "Товары" для пакета ФабрикаXDTO "WMS" 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары - загружаемый документ
//	Назначение - СправочникСсылка.Назначения 
//
// Возвращаемое значение:
//	Товары - Тип "Товары" для пакета ФабрикаXDTO "WMS"
Функция ТоварыРасходКорректировка(Документ, Назначение = Неопределено)
	
	Товары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Товары"));	
	ДокументЗаявка = ПолучитьЗаявкуПоКорректировке(Документ);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КорректировкаНазначенияТоваровТовары.Номенклатура КАК Номенклатура,
		|	КорректировкаНазначенияТоваровТовары.Номенклатура.Артикул КАК Артикул,
		|	КорректировкаНазначенияТоваровТовары.Характеристика КАК Характеристика,
		|	КорректировкаНазначенияТоваровТовары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	КорректировкаНазначенияТоваровТовары.ИсходноеНазначение КАК Назначение,
		|	КорректировкаНазначенияТоваровТовары.гф_IDкороба КАК гф_IDкороба
		|ПОМЕСТИТЬ ТоварыКорректировки
		|ИЗ
		|	Документ.КорректировкаНазначенияТоваров.Товары КАК КорректировкаНазначенияТоваровТовары
		|ГДЕ
		|	КорректировкаНазначенияТоваровТовары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.Номенклатура КАК Номенклатура,
		|	ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.Характеристика КАК Характеристика,
		|	ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.гф_ПринятыеКМ.ЗначениеШтрихкода КАК ЗначениеШтрихкода
		|ПОМЕСТИТЬ ВсеШтрихкоды
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары
		|ГДЕ
		|	ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.Ссылка = &ДокументЗаявка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ШтрихкодыУпаковокТоваров.Номенклатура,
		|	ШтрихкодыУпаковокТоваров.Характеристика,
		|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода
		|ИЗ
		|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|ГДЕ
		|	ШтрихкодыУпаковокТоваров.гф_ДокументОснование = &ДокументЗаявка
		|	И ШтрихкодыУпаковокТоваров.ТипШтрихкода = &ТипШтрихкода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКорректировки.Номенклатура КАК Номенклатура,
		|	ТоварыКорректировки.Артикул КАК Артикул,
		|	ТоварыКорректировки.Характеристика КАК Характеристика,
		|	ТоварыКорректировки.КоличествоУпаковок КАК Количество,
		|	ТоварыКорректировки.Назначение.Наименование КАК Назначение,
		|	ВсеШтрихкоды.ЗначениеШтрихкода КАК КМ
		|ИЗ
		|	ТоварыКорректировки КАК ТоварыКорректировки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВсеШтрихкоды КАК ВсеШтрихкоды
		|		ПО ТоварыКорректировки.Номенклатура = ВсеШтрихкоды.Номенклатура
		|			И ТоварыКорректировки.Характеристика = ВсеШтрихкоды.Характеристика";
	
	Запрос.УстановитьПараметр("ДокументЗаявка", ДокументЗаявка);
	Запрос.УстановитьПараметр("Ссылка", Документ);
	Запрос.УстановитьПараметр("ТипШтрихкода", Перечисления.ТипыШтрихкодов.GS1_DataMatrix);
	
	Выборка = запрос.Выполнить().Выгрузить();
	Артикулы = Выборка.Скопировать();
	
	НПП = 0;
	Артикулы.Свернуть("Артикул, Характеристика, Назначение", "Количество");
	Для каждого строка Из Артикулы Цикл
		НПП = НПП + 1;			
		Товары.Строка.Добавить(СтрокаТовара2(строка, НПП, Истина, Выборка, Документ, Назначение));
	КонецЦикла;
	
	Возврат Товары;
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "СтрокаТовара" для пакета ФабрикаXDTO "WMS" 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	строка - СтрокаТЗ - строка с элементом номенклатуры и его данными 
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары - загружаемый документ
//
// Возвращаемое значение:
//	СтрокаТовара - Тип "СтрокаТовара" для пакета ФабрикаXDTO "WMS"
Функция СтрокаТовара(строка, Документ)
	
	СтрокаТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "СтрокаТовара"));
	Если ЭтоПеремещение И СкладМаркетплейса Тогда
		СтрокаТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "СтрокаТовара3"));
	КонецЕсли;
	СтрокаТовара.Код = строка.Артикул;
	СтрокаТовара.НомерСтроки = строка.НомерСтроки;
	СтрокаТовара.Количество = строка.Количество;
	СтрокаТовара.Цена = ПолучитьЦенуSO(Документ, Строка);
	
	СтрокаТовара.СерийныйНомер = строка.СерийныйНомер;
	Если ЭтоПеремещение ИЛИ ЭтоРеализация Тогда
		СтрокаТовара.Комментарии = Комментарии(строка.Артикул + "|" + строка.Номенклатура);
	КонецЕсли;
	
	Возврат СтрокаТовара;
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "СтрокаТовара2" или "СтрокаТовара4" для пакета ФабрикаXDTO "WMS"
// в зависимости от того является ли Склад маркетплейсом и значения ЭтоПеремещение
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	строка - СтрокаТЗ - строка с элементом номенклатуры и его данными
//	НПП - число - номер обрабатываемой строки
//	СерийныйНомер - Булево
//	выборка - результат запроса по ТЧ документа
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары - загружаемый документ
//	Назначение - Пустое назначение Товара для второго комплекта док. Корректировки
//
// Возвращаемое значение:
//	СтрокаТовара - Тип "СтрокаТовара2" или "СтрокаТовара4" для пакета ФабрикаXDTO "WMS"
Функция СтрокаТовара2(строка, НПП, СерийныйНомер, выборка, Документ, Назначение = Неопределено)
	
	Если ЭтоПеремещение И СкладМаркетплейса Тогда
		СтрокаТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "СтрокаТовара4"));
	// #wortmann { 
	// Добавили новый раздел СтрокаТовара5 для Корректировки
	// Галфинд_Домнышева 2023/07/28
	ИначеЕсли ЭтоКорректировка Тогда
		СтрокаТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "СтрокаТовара5")); 
		СтрокаТовара.Блокировка = ?(Назначение = Неопределено, строка.Назначение, Назначение);
		СтрокаТовара.ДатаСменыНазначения = "";
	// } #wortmann	
	Иначе
		СтрокаТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "СтрокаТовара2"));
		СтрокаТовара.Количество = строка.Количество;
	КонецЕсли;
	
	Артикул = СокрЛП(строка.Артикул);
	
	СтрокаТовара.НомерСтроки = НПП;
	// ++ Галфинд_ДомнышеваКР_16_01_2024
	// У строк по НЕ Обуви нет характеристик, переписала чтобы "/" не висел
	//СтрокаТовара.Код = Артикул + "/" + строка.Характеристика, "");
	СтрокаТовара.Код = Артикул + ?(ЗначениеЗаполнено(строка.Характеристика), "/" + строка.Характеристика, "");
	// -- Галфинд_ДомнышеваКР_16_01_2024
	
	Если НЕ СкладОтправительВПарах Тогда
		СерийныеНомера = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "СерийныеНомера"));
		СтрокаТовара.СерийныеНомера = СерийныеНомера;
		
		СтруктураВыборки = Новый Структура;
		СтруктураВыборки.Вставить("Артикул", Артикул);
		СтруктураВыборки.Вставить("Характеристика", строка.Характеристика);
		
		нашли = выборка.НайтиСтроки(СтруктураВыборки);
		
		МассивКМ = ПреобразоватьКМ(нашли);
		Для каждого строкаКМ Из МассивКМ Цикл
			СерийныеНомера.СерийныйНомер.Добавить(сокрЛП(строкаКМ));
		КонецЦикла;
	КонецЕсли;

	Возврат СтрокаТовара;
КонецФункции// } #wortmann

// #wortmann { 
// Преобразований значений КМ в Массиве полученных строк
// Галфинд_Домнышева 2023/07/23
//
// Параметры:
//	МассивСтрок - Массив - массив найденных КМ
//
// Возвращаемое значение:
//	МассивКМ - Массив - Массив преобразованных КМ 
Функция ПреобразоватьКМ(МассивСтрок)
	
	МассивКМ = Новый Массив; 
	
	Для Индекс = 0 По МассивСтрок.ВГраница() Цикл
		
	    Если   Лев(МассивСтрок[Индекс].КМ, 1) = "("  Тогда
			НовоеЗначение = Сред(МассивСтрок[Индекс].КМ, 2, 2) + Сред(МассивСтрок[Индекс].КМ, 5, 14) 
							+ Сред(МассивСтрок[Индекс].КМ, 20, 2) + Сред(МассивСтрок[Индекс].КМ, 23);
			МассивКМ.Добавить(НовоеЗначение); 
		Иначе
			МассивКМ.Добавить(МассивСтрок[Индекс].КМ);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивКМ;
	
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "Товары" для пакета ФабрикаXDTO "WMS" для Прихода
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ - ДокументСсылка.ПриходныйОрдерНаТовары - загружаемый документ
//
// Возвращаемое значение:
//	Товары - Тип "Товары"  для пакета ФабрикаXDTO "WMS"
Функция ТоварыПриход(Документ)
	
	Если СкладПолучательВПарах Тогда
		
		Товары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Товары"));
		НПП = 1; 
		Выборка = ПолучитьАртикулыИзДокумента(Документ);
		Артикулы = Выборка.Скопировать();
		
		Артикулы.Свернуть("Артикул, Характеристика, УпаковочныйЛист, Назначение", "Количество");

		Для каждого строка Из Артикулы Цикл
			Товары.Строка.Добавить(СтрокаТовараПриход_ПарныеСклады(строка, НПП, Выборка));
			НПП = НПП + 1;
		КонецЦикла;
	Иначе
		Товары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Товары"));
		УпаковочныеЛисты = ПолучитьДанныеУЛ(Документ);
		Для каждого строка Из УпаковочныеЛисты Цикл
			Товары.Строка.Добавить(СтрокаТовараПриход(строка, Документ));
		КонецЦикла;
	КонецЕсли;
	
	Возврат Товары;
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "СтрокаТовараПриход" для пакета ФабрикаXDTO "WMS" для Прихода
// для коробного склада
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	строка - строкаТЧ - ДокументСсылка.ПриходныйОрдерНаТовары.Товары
//	Документ - ДокументСсылка.ПриходныйОрдерНаТовары - загружаемый документ
//
// Возвращаемое значение:
//	СтрокаТовара - Тип "СтрокаТовараПриход"  для пакета ФабрикаXDTO "WMS"
Функция СтрокаТовараПриход(строка, Документ)
	
	СтрокаТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "СтрокаТовараПриход"));
	
	СтрокаТовара.НомерСтроки = строка.НомерСтроки;
	СтрокаТовара.Код = строка.Артикул;   // штрихкод короба
	СтрокаТовара.Количество = строка.Количество;
	СтрокаТовара.Атрибуты = Атрибуты(строка.УпаковочныйЛист);
	СтрокаТовара.СерийныйНомер = строка.УпаковочныйЛист.Код;
	ТекстКомментария = строка.Артикул + "|" + ПолучитьЦенуПО(строка, Документ) + 
	"|" + строка.УпаковочныйЛист.ВсегоМест + "|" + строка.Номенклатура; // Добавлено Кол-во мест
	СтрокаТовара.Комментарии = Комментарии(ТекстКомментария);
	
	Возврат СтрокаТовара;
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "Атрибуты" для пакета ФабрикаXDTO "WMS" для Прихода
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	УпаковочныйЛист - строкаТЧ - ДокументСсылка.ПриходныйОрдерНаТовары.Товары
//
// Возвращаемое значение:
//	Атрибуты - Тип "Атрибуты"  для пакета ФабрикаXDTO "WMS"
Функция Атрибуты(УпаковочныйЛист)

	Атрибуты = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Атрибуты"));
	
	СтруктураАтрибутов = ПолучитьАтрибутыНоменклатуры(УпаковочныйЛист);

	Для Каждого Элемент Из СтруктураАтрибутов Цикл 

		Атрибуты.Атрибут.Добавить(Атрибут(Элемент.Ключ, Элемент.Значение));
		// формат(Элемент.Значение/1000, "ЧРД=.") - нужен ли формат
	КонецЦикла;
	
	Возврат Атрибуты;
КонецФункции// } #wortmann)

// #wortmann { 
// Функция заполняет Тип "Атрибут" для пакета ФабрикаXDTO "WMS" для Прихода
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Имя - строка - Наименование дополнительного сведения о номенклатуре
//	Значение - строка - значение указанного имени
//
// Возвращаемое значение:
//	Атрибут - Тип "Атрибут"  для пакета ФабрикаXDTO "WMS"
Функция Атрибут(Имя, Значение)
	
	Атрибут = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Атрибут"));
	Атрибут.Имя = Имя;
	Атрибут.Значение = Значение;
	
	Возврат Атрибут;
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "СтрокаТовараПриход_ПарныеСклады" для пакета ФабрикаXDTO "WMS" для Прихода
// для парного склада
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	строка - строкаТЧ - ДокументСсылка.ПриходныйОрдерНаТовары.Товары
// 	НПП - число - номер обрабатываемой строки
//	выборка - результат запроса по ТЧ документа
//
// Возвращаемое значение:
//	СтрокаТовара - Тип "СтрокаТовараПриход_ПарныеСклады"  для пакета ФабрикаXDTO "WMS"
Функция СтрокаТовараПриход_ПарныеСклады(строка, НПП, выборка)
	
	СтрокаТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "СтрокаТовараПриход_ПарныеСклады"));
	
	Артикул = СокрЛП(строка.Артикул);
	
	СтрокаТовара.НомерСтроки = НПП;
	// ++ Галфинд_ДомнышеваКР_15_02_2024
	//СтрокаТовара.Код = Артикул + "/" + строка.Характеристика;
	СтрокаТовара.Код = Артикул + ?(ЗначениеЗаполнено(строка.Характеристика), "/" + строка.Характеристика, "");
	// -- Галфинд_ДомнышеваКР_15_02_2024
	СтрокаТовара.Количество = строка.Количество;
	Если ЭтоВозврат Тогда
    СтрокаТовара.Блокировка = строка.Назначение;
	КонецЕсли;
	
	Если ТоварыОбувь Тогда // ДомнышеваКР_16_02_2024
	СерийныеНомера = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "СерийныеНомера"));
	СтрокаТовара.СерийныеНомера = СерийныеНомера;
	
	СтруктураВыборки = Новый Структура;
	СтруктураВыборки.Вставить("Артикул", Артикул);
	СтруктураВыборки.Вставить("Характеристика", строка.Характеристика);
	СтруктураВыборки.Вставить("УпаковочныйЛист", строка.УпаковочныйЛист);

	нашли = выборка.НайтиСтроки(СтруктураВыборки);
	
	МассивКМ = ПреобразоватьКМ(нашли);
	Для каждого строкаКМ Из МассивКМ Цикл
		СерийныеНомера.СерийныйНомер.Добавить(сокрЛП(строкаКМ));
	КонецЦикла;
	
	КонецЕсли; // ДомнышеваКР_16_02_2024
    Возврат СтрокаТовара;
	
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "Комментарии" для пакета ФабрикаXDTO "WMS"
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Значение - строка - текст комментария
//
// Возвращаемое значение:
//	Комментарии - Тип "Комментарии"  для пакета ФабрикаXDTO "WMS"
Функция Комментарии(Значение)
	Комментарии = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Комментарии"));
	Комментарии.Комментарий.Добавить(Комментарий(Значение));
	Возврат Комментарии;
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "Комментарий" для пакета ФабрикаXDTO "WMS"
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Значение - строка - текст комментария
//	Последовательность - Число
//
// Возвращаемое значение:
//	Комментарий - Тип "Комментарий"  для пакета ФабрикаXDTO "WMS"
Функция Комментарий(Значение, Последовательность = 1)
	
	Комментарий = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Комментарий"));
	Комментарий.Тип = "DISPLAY_WEB";
	Комментарий.Последовательность = Последовательность;
	Комментарий.Значение = Значение;
	
	Возврат Комментарий;
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "Комментарии" для пакета ФабрикаXDTO "WMS"
// для случая когда документом Распоряжением является документ Реализации
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	КомментарииДляРеализации - Структура - из значений для комментария
//
// Возвращаемое значение:
//	Комментарии - СписокXDTO - Тип "Комментарии"  для пакета ФабрикаXDTO "WMS"
Функция КомментарииРеализации(КомментарииДляРеализации)
	
	Комментарии = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Комментарии"));
	Комментарии.Комментарий.Добавить(Комментарий(КомментарииДляРеализации.Комментарий, 1));
	Комментарии.Комментарий.Добавить(Комментарий(КомментарииДляРеализации.ИНН, 2));
	Комментарии.Комментарий.Добавить(Комментарий(КомментарииДляРеализации.КонтактноеЛицо, 3));
	Комментарии.Комментарий.Добавить(Комментарий(КомментарииДляРеализации.Вес, 4));
	
	Возврат Комментарии;
	
КонецФункции// } #wortmann

// #wortmann { 
// Функция заполняет Тип "ЭлементСпискаТоваров" для пакета ФабрикаXDTO "WMS" 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Строка - СтрокаТЧ - Строка из табличной части загружаемого документа 
//
// Возвращаемое значение:
//	Артикул - строка
Функция ПолучитьАртикулПО(строка)
	
	Артикул = сокрЛП(строка.Номенклатура.Артикул);
	
	Возврат Артикул;
КонецФункции// } #wortmann

// #wortmann { 
// Функция находит цену товара для Приходного Ордера 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Строка - СтрокаТЧ - Строка из табличной части загружаемого документа 
//	Документ - ДокументСсылка.ПриходныйОрдерНаТовары
//
// Возвращаемое значение:
//	Цена - Число
Функция ПолучитьЦенуПО(Строка, Документ)
	
	Распоряжение = Документ.Распоряжение;
	// Галфинд_ДомнышеваКР_19_12_2023_ Добавлено получение цены для пар
	Если ЭтоПоступление И СкладПолучательВПарах Тогда 
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура", Строка.Номенклатура);
		СтруктураОтбора.Вставить("Характеристика", Строка.Характеристика);
		СтруктураОтбора.Вставить("гф_IDКороба", Строка.гф_IDКороба);
		
		МассивСтрокР = Распоряжение.Товары.НайтиСтроки(СтруктураОтбора);
		
		Если МассивСтрокР.Количество() > 0 Тогда
			Цена = формат(МассивСтрокР[0].СтоимостьКороба, "ЧДЦ=2; ЧГ=0");
		Иначе
			Цена = 0;
			Сообщение = "В ПТУ не задана цена для номенклатуры " + Строка.Номенклатура + "/" + Строка.Характеристика 
						+ " по УЛ: " + Строка.УпаковочныйЛист;
			ЗаписьЖурналаРегистрации("ОбменСWMS", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, Сообщение);
			ДобавитьСтрокуВТекстыОшибки(Сообщение, Истина, Документ.Ссылка, Документ);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ТекущаяДатаСеанса(), "ДЛФ=T") + ". " + Сообщение);		
		КонецЕсли;	
	ИначеЕсли ЭтоПоступление Тогда 
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("IDКороба", Строка.УпаковочныйЛист);
		МассивСтрокР = Распоряжение.гф_ПродукцияВКоробах.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрокР.Количество() > 0 Тогда
			Цена = формат(МассивСтрокР[0].СтоимостьКороба, "ЧДЦ=2; ЧГ=0");
		Иначе
			Цена = 0;
			Сообщение = "В ПТУ не задана цена для " + Строка.УпаковочныйЛист;
			ЗаписьЖурналаРегистрации("ОбменСWMS", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, Сообщение);
			ДобавитьСтрокуВТекстыОшибки(Сообщение, Истина, Документ.Ссылка, Документ);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ТекущаяДатаСеанса(), "ДЛФ=T") + ". " + Сообщение);		
		КонецЕсли;
	ИначеЕсли ЭтоВозврат Тогда
		Цена = ПолучитьЦену(Строка, Документ);
	Иначе
		Цена = 0;
	КонецЕсли;
	
	Возврат Цена;
	
КонецФункции// } #wortmann

// #wortmann { 
// Процедура создает запись XML для отправки по заполненному Пакету 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Пакет - Тип "Пакет" для пакета ФабрикаXDTO "WMS"
//	ИмяФайлаБезПути - строка
//	ИмяФайла - строка
//	НомерСообщения - строка
//	ВидДанных - Перечисления.гф_ВидыДанныхДляВыгрузки.Документ
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары, ДокументСсылка.ПриходныйОрдерНаТовары
//	Настройки - Структура - Настройки для FTPСоединения
Процедура ЗаписатьОтправитьПакет(Пакет, ИмяФайлаБезПути, ИмяФайла, НомерСообщения, ВидДанных, Документ, Настройки)
	
	Если Пакет = Неопределено Тогда
		ДобавитьСтрокуВТекстыОшибки("Файл не записан" + ИмяФайла, Истина, ИмяФайлаБезПути, Документ);
		Возврат;
	КонецЕсли;
	
	Попытка
		Отказ = Ложь;
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ИмяФайла, "UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Пакет, "instock");
		ЗаписьXML.Закрыть();
		ОбработатьФайл(ИмяФайла);
		
			ДобавитьСтрокуВТекстыОшибки("Записан файл" + ИмяФайла, Ложь, ИмяФайлаБезПути, Документ);
			ОтправитьФайл(ИмяФайла, Настройки, Отказ, Документ, Соединение);
			
			Если Не Отказ Тогда
				Запись = РегистрыСведений.гф_ДанныеВыгрузки.СоздатьМенеджерЗаписи();
				Запись.Период = ТекущаяДатаСеанса();
				Запись.НомерСообщения = НомерСообщения;
				Запись.ВидДанных = ВидДанных;
				Запись.Документ = Документ;
				Запись.Состояние = Перечисления.гф_СтатусыВыгрузкиДанных.Отправлено;
				Запись.ИмяФайла = ИмяФайлаБезПути;
				Запись.Записать();
			КонецЕсли;
	
	Исключение
		Сообщение = "Не удалось записать файл " + ИмяФайла + " " + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ОбменСWMS", УровеньЖурналаРегистрации.Предупреждение, 
								ЭтотОбъект, ЭтотОбъект, Сообщение);
		ДобавитьСтрокуВТекстыОшибки(Сообщение, Истина, ИмяФайлаБезПути, Документ);	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ТекущаяДатаСеанса(), "ДЛФ=T") + ". " + Сообщение);

	КонецПопытки;
	
	Если ТекстыОшибок.Количество() > 0 Тогда
		ЗаписатьОшибку(ТекстыОшибок);
	КонецЕсли;
   	ТекстыОшибок.Очистить();
	
КонецПроцедуры// } #wortmann 

// #wortmann { 
// Отправляет файл на выгрузку 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	ИмяФайла - строка
//	Настройки - Структура - Настройки для FTPСоединения
//	Отказ - параметр системы 
//	Документ - ДокументСсылка
//	Соединение -  FTPСоединение,  - Неопределено
Процедура ОтправитьФайл(ИмяФайла, Настройки, Отказ, Документ, Соединение = Неопределено) Экспорт
						
	Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
		ДобавитьСтрокуВТекстыОшибки("Не определен файл выгрузки", Истина, ИмяФайла.ПолноеИмя, Документ);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Настройки = Неопределено Тогда
		ДобавитьСтрокуВТекстыОшибки("Не определены настройки ftp-соединения", Истина, ИмяФайла.ПолноеИмя, Документ);
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	// пока используем только ftp
	ВыгрузитьНаFTP(ИмяФайла, Настройки, Отказ, Документ, Соединение, Истина);
	
КонецПроцедуры// } #wortmann 

// #wortmann { 
// Процедура получает соединение и отправляет файл 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	ФайлДляВыгрузки - строка
//	НастройкиFTPСоединения - Структура - Настройки для FTPСоединения
//	Отказ - параметр системы
//	Документ - ДокументСсылка
//	Соединение -  FTPСоединение,  - Неопределено
//	ПомещатьСразуВАрхив - Булево
Процедура ВыгрузитьНаFTP(ФайлДляВыгрузки, НастройкиFTPСоединения, Отказ, Документ, Соединение = Неопределено, 
						ПомещатьСразуВАрхив = Истина) Экспорт

	Если Соединение = Неопределено Тогда
		Соединение = _омОбщегоНазначенияВызовСервера.гф_ПолучитьСоединение(НастройкиFTPСоединения);
	КонецЕсли;	
	
	Если Соединение = Неопределено Тогда
		ДобавитьСтрокуВТекстыОшибки("Соединение не установлено, проверьте настройки", Истина, 
									ФайлДляВыгрузки.ПолноеИмя, Документ);
		Возврат;
	КонецЕсли;	
		
	Файл = Новый Файл(ФайлДляВыгрузки);
	Если Не Файл.ЭтоФайл() Тогда
		ДобавитьСтрокуВТекстыОшибки("Ошибка в чтении временного файла.", Истина, ФайлДляВыгрузки.ПолноеИмя, Документ);
		Возврат;
	КонецЕсли;
	СообщениеОбОшибке = "";
	// СтрокаПутьНаFTP = ПолучитьПуть();
	СтрокаПутьНаFTP = ПолучитьЗначениеСкладПапкаFTP(Документ.Склад);
	Если Прав(СтрокаПутьНаFTP, 1) <> "/" Тогда
		СтрокаПутьНаFTP = СтрокаПутьНаFTP + "/";
	КонецЕсли;
	СтрокаПутьНаFTP = СтрокаПутьНаFTP + НастройкиFTPСоединения.IN;
	
	КорневойКаталог = НастройкиFTPСоединения.Каталог;
	Если Прав(КорневойКаталог, 1) <> "/" Тогда
		КорневойКаталог = КорневойКаталог + "/";
	КонецЕсли;
	ТекКаталог = КорневойКаталог + СтрокаПутьНаFTP;
	
	ТекКаталог = СтрЗаменить(СтрЗаменить(ТекКаталог, "\", "/"), "//", "/");	
	Если Лев(ТекКаталог, 1) <> "/" Тогда
		ТекКаталог = "/" + ТекКаталог;
	КонецЕсли;
	Если Прав(ТекКаталог, 1) <> "/" Тогда
		ТекКаталог = ТекКаталог + "/" ;
	КонецЕсли;
	
	Попытка                                                                                               
		Если Соединение.ТекущийКаталог() <> ТекКаталог Тогда 
			Если Соединение.ТекущийКаталог() <> КорневойКаталог Тогда
				Соединение.УстановитьТекущийКаталог(КорневойКаталог);
			КонецЕсли; 
			СообщениеОбОшибке = "Попытка установить каталог " + ТекКаталог + " - ";
				Соединение.УстановитьТекущийКаталог(ТекКаталог);
				ДобавитьСтрокуВТекстыОшибки("Установлен каталог: " + ТекКаталог, Ложь, Файл.ПолноеИмя, Документ);
		КонецЕсли;
		СообщениеОбОшибке = "Попытка записи файла " + Файл.ПолноеИмя + " - ";
		Соединение.Записать(Файл.ПолноеИмя, ТекКаталог + Файл.Имя); // ДомнышеваКР_17_01_2023
		
		// По архивированию оставлю кусок тут, на случай желаний заказчика.
		//Если ПомещатьСразуВАрхив Тогда
		//	// узнать про архивную папку...
		//	ИмяАрхивнойПапки = _омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначение("гф_ПапкаДляВыгрузкиНаСервере") 
		//						+ "Archive";
		//	//////////
		//	СоздатьКаталог(ИмяАрхивнойПапки);
		//	
		//	КаталогАрхив = Новый Файл(ИмяАрхивнойПапки);
		//	Если Не КаталогАрхив.Существует() Тогда
		//		ДобавитьСтрокуВТекстыОшибки("Каталог для архивирования файлов задан неверно или не существует...",
		//									Истина, Файл.ПолноеИмя);
		//		Отказ = Истина;
		//		Возврат;
		//	КонецЕсли;
		//	
		//	КопироватьФайл(Файл.ПолноеИмя, ИмяАрхивнойПапки + "\" + Файл.Имя);
		//	Соединение.Записать(ИмяАрхивнойПапки + "\" + Файл.Имя, Файл.Имя);
		//	
		//Иначе
			//Соединение.Записать(Файл.ПолноеИмя, Файл.Имя);
		//КонецЕсли;
		
		// Проверим записан ли файл на ftp
		Если Соединение.НайтиФайлы(Файл.Имя).Количество() > 0 Тогда
			//Если Не ПустаяСтрока(НовоеРасширение) Тогда
			//	// Для пердотвращения немедленной обработки переданного файла внешними роботами, файл может передаваться
			//	// с фиктивным расширением
			//	// После того, как убедились, что файл передан удачно, если задан параметр НовоеРасширение - перименовываем файл.
			//	Соединение.Переместить(Файл.Имя, Файл.ИмяБезРасширения + "." + НовоеРасширение);
			//	Соединение.Удалить(ТекКаталог, Файл.Имя);
			//КонецЕсли;
			
			ДобавитьСтрокуВТекстыОшибки("Файл успешно записан: " + ТекКаталог + Файл.Имя, Ложь, Файл.ПолноеИмя, Документ);
			
		Иначе // файл не записан
			ДобавитьСтрокуВТекстыОшибки("Файл не записан: " + ТекКаталог + Файл.Имя, Истина, Файл.ПолноеИмя, Документ);	
		КонецЕсли;	
		
	Исключение
		ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке + ОписаниеОшибки(), Истина, Файл.ПолноеИмя, Документ);
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
	// Эта часть закомментированна временно до полной отладки.
	// Галфинд_Домнышева_ 23_08_2023
	//Попытка
	//	//Удаление файла из временной папки
	//	СообщениеОбОшибке = "Попытка удаления файла " + Файл.ПолноеИмя + " - ";
	//	УдалитьФайлы(Файл.ПолноеИмя);
	//	
	//	// проверим удален ли с диска файл
	//	Если НайтиФайлы(Файл.ПолноеИмя).Количество() <> 0 Тогда
	//		ДобавитьСтрокуВТекстыОшибки("Ошибка удаления файла " + Файл.ПолноеИмя + " с диска! ", Истина, Файл.ПолноеИмя);
	//	КонецЕсли;
	//	
	//Исключение
	//	ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке + ОписаниеОшибки(), Истина, Файл.ПолноеИмя);
	//КонецПопытки; 
	
КонецПроцедуры// } #wortmann 

// #wortmann { 
// Функция подбирает нужную папку для выгрузки по организации 
// Галфинд_Домнышева 2023/31/05
//
// Возвращаемое значение:
//	Структура - путь к папке по текущей организации
Функция ПолучитьПуть() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	гф_КаталогиОбработкиФайловXML.ВыгрузкаВWMS КАК ВыгрузкаВWMS
		|ИЗ
		|	Справочник.гф_КаталогиОбработкиФайловXML КАК гф_КаталогиОбработкиФайловXML
		|ГДЕ
		|	гф_КаталогиОбработкиФайловXML.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Не РезультатЗапроса.Пустой() Тогда
	Выборка.Следующий();
	Возврат Выборка.ВыгрузкаВWMS;
	КонецЕсли;
	
КонецФункции// } #wortmann

// #wortmann { 
// Функция выбирает атрибуты короба 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	УпаковочныйЛист - ДокументСсылка.УпаковочныйЛист
//
// Возвращаемое значение:
//	СтруктураАтрибутов - Структура - со значениями Веса, Длины, Ширины и Высоты короба
Функция ПолучитьАтрибутыНоменклатуры(УпаковочныйЛист)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УпаковочныйЛист.гф_Комплектация.гф_ВесКороба КАК WEIGHT,
		|	УпаковочныйЛист.гф_Комплектация.гф_ДлинаКороба КАК LENGTH,
		|	УпаковочныйЛист.гф_Комплектация.гф_ШиринаКороба КАК WIDTH,
		|	УпаковочныйЛист.гф_Комплектация.гф_ВысотаКороба КАК HEIGHT
		|ИЗ
		|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
		|ГДЕ
		|	УпаковочныйЛист.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", УпаковочныйЛист);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаАтрибутов = РезультатЗапроса.Выгрузить();
	
	СтруктураАтрибутов = Новый Структура;
	
	Для каждого Колонка Из ТаблицаАтрибутов.Колонки Цикл
		СтруктураАтрибутов.Вставить(Колонка.Имя);
	КонецЦикла; 
	
	Если ТаблицаАтрибутов.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(СтруктураАтрибутов, ТаблицаАтрибутов[0]);
		ЕстьАдрес = Истина;
	КонецЕсли;

	Возврат СтруктураАтрибутов;
	
КонецФункции// } #wortmann

// #wortmann { 
// Функция находит данные по УЛ из Документа ПриходныйОрдерНаТовары
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ - ДокументСсылка.ПриходныйОрдерНаТовары
//
// Возвращаемое значение:
//	ТаблицаЗначений - результат запроса
Функция ПолучитьДанныеУЛ(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриходныйОрдерНаТоварыТовары.УпаковочныйЛист КАК УпаковочныйЛист,
		|	ПриходныйОрдерНаТоварыТовары.КоличествоУпаковок КАК Количество,
		|	ПриходныйОрдерНаТоварыТовары.УпаковочныйЛист.гф_Комплектация.Наименование КАК Артикул,
		|	ПриходныйОрдерНаТоварыТовары.УпаковочныйЛист.гф_Комплектация.Владелец КАК Номенклатура,
		|	ПриходныйОрдерНаТоварыТовары.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
		|ГДЕ
		|	ПриходныйОрдерНаТоварыТовары.Ссылка = &Ссылка
		|	И ПриходныйОрдерНаТоварыТовары.ЭтоУпаковочныйЛист = ИСТИНА";
	
	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();	
	
КонецФункции// } #wortmann 

// #wortmann { 
// Функция находит данные по УЛ из Документа ПриходныйОрдерНаТовары
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ - ДокументСсылка.ПриходныйОрдерНаТовары
//
// Возвращаемое значение:
//	УЛ - Массив - массив упаковочных листо по документу Заявка на Возврат
Функция  ПолучитьДанныеУЛПоВозврату(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.гф_IDКороба КАК УпаковочныйЛист
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары
		|ГДЕ
		|	ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Документ.Распоряжение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УЛ = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("УпаковочныйЛист");	
	
	Возврат УЛ;
	
КонецФункции// } #wortmann

// #wortmann { 
// Функция выбирает значения Артикулов для парного склада 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ - ДокументСсылка.ПриходныйОрдерНаТовары 
//
// Возвращаемое значение:
//	ТаблицаЗначений - результат запроса
Функция ПолучитьАртикулыИзДокумента(Документ)
	
	// ++ ДомнышеваКР_16_02_2024
	// доработка для товаров "не обувь"
	Если Не ТоварыОбувь Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриходныйОрдерНаТоварыТовары.Номенклатура КАК Номенклатура,
		|	ПриходныйОрдерНаТоварыТовары.Характеристика КАК Характеристика,
		|	ПриходныйОрдерНаТоварыТовары.Назначение КАК Назначение,
		// ++ Галфинд_ДомнышеваКР_06_03_2024
		//|	ПриходныйОрдерНаТоварыТовары.КоличествоУпаковок КАК Количество,
		|	ВЫБОР
		|		КОГДА ПриходныйОрдерНаТоварыТовары.Номенклатура.гф_ШтукВУпаковке <> 0
		|			ТОГДА ПриходныйОрдерНаТоварыТовары.КоличествоУпаковок * ПриходныйОрдерНаТоварыТовары.Номенклатура.гф_ШтукВУпаковке
		|		ИНАЧЕ ВЫРАЗИТЬ(ПриходныйОрдерНаТоварыТовары.КоличествоУпаковок КАК ЧИСЛО(15, 0))
		|	КОНЕЦ КАК Количество,
		// -- Галфинд_ДомнышеваКР_06_03_2024
		|	ПриходныйОрдерНаТоварыТовары.Номенклатура.Артикул КАК Артикул,
		|	ПриходныйОрдерНаТоварыТовары.гф_IDКороба КАК УпаковочныйЛист
		|ИЗ
		|	Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
		|ГДЕ
		|	ПриходныйОрдерНаТоварыТовары.Ссылка = &Ссылка
		|	И ПриходныйОрдерНаТоварыТовары.ЭтоУпаковочныйЛист = ЛОЖЬ";
	Иначе 
	// -- ДомнышеваКР_16_02_2024	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходныйОрдерНаТоварыТовары.гф_IDКороба.гф_Агрегация КАК Агрегация
	|ПОМЕСТИТЬ Агрегации
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
	|ГДЕ
	|	ПриходныйОрдерНаТоварыТовары.Ссылка = &Ссылка
	|	И ПриходныйОрдерНаТоварыТовары.ЭтоУпаковочныйЛист = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК Штрихкод,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка КАК Ссылка,
	|	УЛ.Ссылка КАК УЛ
	|ПОМЕСТИТЬ Штрихкоды
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист КАК УЛ
	|		ПО ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка = УЛ.гф_Агрегация
	|ГДЕ
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Агрегация
	|			ИЗ
	|				Агрегации КАК Т)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура КАК Номенклатура,
	|	ПриходныйОрдерНаТоварыТовары.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ПриходныйОрдерНаТоварыТовары.Номенклатура.гф_ШтукВУпаковке <> 0
	|			ТОГДА 1 * ПриходныйОрдерНаТоварыТовары.Номенклатура.гф_ШтукВУпаковке
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Количество,
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура.Артикул КАК Артикул,
	|	ПриходныйОрдерНаТоварыТовары.Назначение.Наименование КАК Назначение,
	|	ПриходныйОрдерНаТоварыТовары.гф_IDКороба КАК УпаковочныйЛист,
	|	ШтрихкодыУпаковок.ШтрихкодУпаковки КАК КМ
	|ПОМЕСТИТЬ ВТ_ВСе
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
	|		ПО (ПриходныйОрдерНаТоварыТовары.Ссылка = ШтрихкодыУпаковок.Ссылка)
	|			И (ПриходныйОрдерНаТоварыТовары.Номенклатура = ШтрихкодыУпаковок.ШтрихкодУпаковки.Номенклатура)
	|			И (ПриходныйОрдерНаТоварыТовары.Характеристика = ШтрихкодыУпаковок.ШтрихкодУпаковки.Характеристика)
	|ГДЕ
	|	ПриходныйОрдерНаТоварыТовары.Ссылка = &Ссылка
	|	И ПриходныйОрдерНаТоварыТовары.ЭтоУпаковочныйЛист = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВСе.Номенклатура КАК Номенклатура,
	|	ВТ_ВСе.Характеристика КАК Характеристика,
	|	ВТ_ВСе.Количество КАК Количество,
	|	ВТ_ВСе.Артикул КАК Артикул,
	|	ВТ_ВСе.Назначение КАК Назначение,
	|	ВТ_ВСе.УпаковочныйЛист КАК УпаковочныйЛист,
	|	ВТ_ВСе.КМ КАК КМ
	|ИЗ
	|	Штрихкоды КАК Штрихкоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВСе КАК ВТ_ВСе
	|		ПО Штрихкоды.Штрихкод = ВТ_ВСе.КМ
	|			И (ВТ_ВСе.УпаковочныйЛист = Штрихкоды.УЛ)";
	
	КонецЕсли; // ДомнышеваКР_16_02_2024
	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();

КонецФункции// } #wortmann

// #wortmann { 
// Функция получает цену (недоделана)
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Строка - СтрокаТаблицыЗначений
//	Документ - ДокументСсылка.ПриходныйОрдерНаТовары 
//
// Возвращаемое значение:
//	Цена - число
Функция ПолучитьЦену(Строка, Документ)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Номенклатура", Строка.Номенклатура);
	СтруктураОтбора.Вставить("Характеристика", Строка.Характеристика);
	СтруктураОтбора.Вставить("гф_IDКороба", Строка.гф_IDКороба);
	
	Товары = Документ.Распоряжение.ВозвращаемыеТовары.Выгрузить();
	
	ИскомаяСтрока = Товары.НайтиСтроки(СтруктураОтбора); 
	
	Если ИскомаяСтрока.Количество() > 0 Тогда
		Цена = ИскомаяСтрока[0].Цена;
	Иначе
		Цена = 0;
	КонецЕсли;
	
	Возврат формат(Цена, "ЧДЦ=2; ЧГ=0");
КонецФункции// } #wortmann

// #wortmann { 
// Функция расчитывает цену коробов для строки 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары
//	Строка - СтрокаТЗ - строка с элементом номенклатуры и его данными
//
// Возвращаемое значение:
//	Цена - число
Функция ПолучитьЦенуSO(Документ, Строка)
	
	Цена = 0;
	СвязанныйДокумент = ПолучитьСвязанныйДокументРО(Документ);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказКлиентагф_ТоварыВКоробах.ЦенаКороба КАК ЦенаКороба
		|ИЗ
		|	Документ.ЗаказКлиента.гф_ТоварыВКоробах КАК ЗаказКлиентагф_ТоварыВКоробах
		|ГДЕ
		|	ЗаказКлиентагф_ТоварыВКоробах.Ссылка = &Ссылка
		|	И ЗаказКлиентагф_ТоварыВКоробах.ВариантКомплектации = &ВариантКомплектации";
	
	Запрос.УстановитьПараметр("ВариантКомплектации", Строка.ВариантКомплектации);
	Запрос.УстановитьПараметр("Ссылка", СвязанныйДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
	Выборка.Следующий();
	Цена = Выборка.ЦенаКороба * Строка.Количество; 
	КонецЕсли;

	Возврат СтрЗаменить(формат(Цена, "ЧДЦ=2"), Символы.НПП, "");
	
КонецФункции// } #wortmann

// #wortmann { 
// Процедура обрабатывает подготовленный файл для отправки (взято из УПП)
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	ИмяФайла - строка
Процедура ОбработатьФайл(ИмяФайла)
	чтение = Новый ЧтениеТекста(ИмяФайла);
	текст = чтение.Прочитать();
	чтение.Закрыть();
	запись = Новый ЗаписьТекста(ИмяФайла);
	текст = СтрЗаменить(текст, " xmlns=""WMS""", "");
	текст = СтрЗаменить(текст, " xmlns:xs=""http://www.w3.org/2001/XMLSchema""", "");
	текст = СтрЗаменить(текст, " xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""", "");
	текст = СтрЗаменить(текст, " xsi:type=""Адреса""", "");
	текст = СтрЗаменить(текст, " xsi:type=""Адрес""", "");
	текст = СтрЗаменить(текст, " xsi:type=""СтрокаТовара""", "");
	текст = СтрЗаменить(текст, " xsi:type=""СтрокаТовараПриход""", "");
	текст = СтрЗаменить(текст, " xsi:type=""Атрибут""", "");
	текст = СтрЗаменить(текст, " xsi:type=""Адрес2""", "");
	текст = СтрЗаменить(текст, " xsi:type=""СтрокаТовара2""", "");
	текст = СтрЗаменить(текст, " xsi:type=""СтрокаТовара3""", "");
	текст = СтрЗаменить(текст, " xsi:type=""СтрокаТовара4""", "");
	текст = СтрЗаменить(текст, " xsi:type=""СерийныеНомера""", "");
	текст = СтрЗаменить(текст, " xsi:type=""Штрихкод""", "");
	текст = СтрЗаменить(текст, " xsi:type=""ЭлементСпискаТоваров_ПарныеСклады""", "");
	текст = СтрЗаменить(текст, " xsi:type=""СтрокаТовараПриход_ПарныеСклады""", "");
	текст = СтрЗаменить(текст, " xsi:type=""ЭлементСпискаТоваров""", "");
	текст = СтрЗаменить(текст, " xsi:type=""СтрокаТовара5""", "");
	текст = СтрЗаменить(текст, Символы.Таб, "");
	текст = СтрЗаменить(текст, Символы.ПС, "");
	запись.Записать(текст);
	запись.Закрыть();
КонецПроцедуры// } #wortmann

// #wortmann { 
// Функция высчитывает номер заявки 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары, ДокументСсылка.ПриходныйОрдерНаТовары
//
// Возвращаемое значение:
//	НомерЗаявки - Строка
Функция НомерЗаявки(Документ)
	
	Если ЭтоРеализация ИЛИ ЭтоСобственныеНужды Тогда
		НомерЗаявки = КодКлиента + Документ.Номер;
	ИначеЕсли ЭтоПоступление Тогда 
		НомерЗаявки = Документ.Номер;
	ИначеЕсли ЭтоПеремещение Тогда
		НомерЗаявки =  КодКлиента + Документ.Номер + "-S";
	ИначеЕсли ЭтоВозврат Тогда
		НомерЗаявки =  КодКлиента + Документ.Номер + "-V"; // Добавила V от себя для понимания Возврата	
	Иначе
		ДляПоиска = строка(Документ.СкладПолучатель);
		Если СтрНайти(ДляПоиска, "Товары для розницы") = 0 Тогда  
			НомерЗаявки =  КодКлиента + Документ.Номер + "-S";
		Иначе
			НомерЗаявки =  КодКлиента + Документ.Номер + "-R";
		КонецЕсли;
	КонецЕсли;
	
	Возврат НомерЗаявки;
КонецФункции// } #wortmann  

// #wortmann { 
// Функция высчитывает дату отгрузки для Приходного Ордера
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	ДатаОтгр - Дата документа
//
// Возвращаемое значение:
//	ДатаОтгрузки - Дата
Функция ЗаполнитьДатуОтгрузки(ДатаОтгр)
	
	ДатаОтгрузки = ДатаОтгр;
	// расчет рабочих дней для отгрузки
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ДанныеПроизводственногоКалендаря.Дата КАК Дата
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.Год МЕЖДУ &ГодНач И &ГодКон
	|	И ДанныеПроизводственногоКалендаря.ВидДня В(&РабДни)";
	
	Запрос.УстановитьПараметр("ГодНач", Год(ТекущаяДатаСеанса()) - 1);
	Запрос.УстановитьПараметр("ГодКон", Год(ТекущаяДатаСеанса()) + 1);
	МассивВидДня = Новый Массив;
	МассивВидДня.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	МассивВидДня.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
	Запрос.УстановитьПараметр("РабДни", МассивВидДня);
	ТзРабДней = Запрос.Выполнить().Выгрузить();
	МассивРабДней = ТзРабДней.ВыгрузитьКолонку("Дата");
	// расчет даты отгрузки для письма
	ВремяХ = 13;
	Если ЗначениеЗаполнено(ДатаОтгрузки) Тогда
		ДобавитьДней = 0;
		Час = Час(ДатаОтгрузки);
		Если Час < ВремяХ Тогда
			ДобавитьДней = 1;
		Иначе
			ДобавитьДней = 2;	
		КонецЕсли;
		// проверка по регл. произв. календарю
		ДобавитьДнейОтгрузки(ДатаОтгрузки, ДобавитьДней, МассивРабДней);
	КонецЕсли;
	
	Возврат ДатаОтгрузки;
	
КонецФункции// } #wortmann

// #wortmann { 
// Процедура добавляет дни к ДатеОтгрузки согласно производственному календарю
// Галфинд_Домнышева 2023/07/21
//
// Параметры:
//	ДатаОтгрузки - Дата документа
//	ДобавитьДней - Число
//	МассивРабДней - Массив - из значений Дата
Процедура ДобавитьДнейОтгрузки(ДатаОтгрузки, ДобавитьДней, МассивРабДней)
	
	СекундВСутки = 86400;
	НерабочиеДни = 20;
	Для дн = 1 По ДобавитьДней Цикл
		ДатаОтгрузки = ДатаОтгрузки + СекундВСутки;
		Добавлять = Истина;
		сч = 1;
		Пока Добавлять Цикл
			сч = сч + 1;
			Если МассивРабДней.Найти(НачалоДня(ДатаОтгрузки)) = Неопределено Тогда
				ДатаОтгрузки = ДатаОтгрузки + СекундВСутки;
				// ошибка в производственном календаре, нерабочих дней > 20 
				Если сч > НерабочиеДни Тогда
					Добавлять = Ложь;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Проверьте заполнение производственного календаря!");
					ДатаОтгрузки = ДатаОтгрузки + СекундВСутки; 
				КонецЕсли;
			Иначе
				Добавлять = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры// } #wortmann

// #wortmann { 
// Функция получает код клиента из дополнительных реквизитов Склада
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Склад - СправочникСсылка.Склады
//
// Возвращаемое значение:
//	Строка - код клиента Склада
Функция ПолучитьКодКлиента(Склад)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СкладыДополнительныеРеквизиты.Свойство.Имя КАК Свойство,
		|	СкладыДополнительныеРеквизиты.Значение КАК Значение
		|ИЗ
		|	Справочник.Склады.ДополнительныеРеквизиты КАК СкладыДополнительныеРеквизиты
		|ГДЕ
		|	СкладыДополнительныеРеквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Свойство = "гф_СкладыКодКлиентаСклад" Тогда
				Возврат Выборка.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции// } #wortmann

Функция ПолучитьНомерИнвойса()

	Возврат 123;

КонецФункции // ПолучитьНомерИнвойса()

// #wortmann { 
// Функция получает структуру по указанному типу адреса
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	ВидАдреса - СправочникСсылка.ВидыКонтактнойИнформации
//	Получатель - ОпределяемыйТип.ОтправительПолучательТоваров
//	ЕстьАдрес - Булево
//
// Возвращаемое значение:
//	Адрес - Структура
Функция ПолучитьАдресПоТипуКомпании(ВидАдреса, Получатель, ЕстьАдрес)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтрагентыКонтактнаяИнформация.Регион КАК Регион,
		|	КонтрагентыКонтактнаяИнформация.Город КАК Город,
		|	КонтрагентыКонтактнаяИнформация.Представление КАК Представление,
		|	КонтрагентыКонтактнаяИнформация.Вид КАК Вид,
		|	КонтрагентыКонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
		|	ПОДСТРОКА(КонтрагентыКонтактнаяИнформация.Представление, 0, 6) КАК Индекс
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|ГДЕ
		|	КонтрагентыКонтактнаяИнформация.Вид = &Вид
		|	И КонтрагентыКонтактнаяИнформация.Тип = &Тип
		|	И КонтрагентыКонтактнаяИнформация.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Вид", ВидАдреса);
	Запрос.УстановитьПараметр("Ссылка", Получатель);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Если ВидАдреса = Справочники.ВидыКонтактнойИнформации.АдресПартнера 
		ИЛИ ТипЗнч(Получатель) = Тип("СправочникСсылка.Партнеры") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Контрагенты", "Справочник.Партнеры");
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаАдресов = РезультатЗапроса.Выгрузить();
	Адрес = Новый Структура; 
	
	Для каждого Колонка Из ТаблицаАдресов.Колонки Цикл
		Адрес.Вставить(Колонка.Имя);
	КонецЦикла;
	Если ТаблицаАдресов.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Адрес, ТаблицаАдресов[0]);
		ЕстьАдрес = Истина;
	КонецЕсли;
	
	Возврат Адрес;

КонецФункции// } #wortmann

// #wortmann { 
// Функция устанавливает является ли склад указанный в документе Основным
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Склад - СправочникСсылка.Склады
//
// Возвращаемое значение:
//	Булево - Истина, если Склад Основной, иначе Ложь
Функция ЭтоОсновнойСклад(Склад) Экспорт

	Склады = _омОбщегоНазначенияКлиентСервер.ПолучитьГлобальноеЗначениеМассив("гф_ГлобальныеЗначенияОсновнойСклад");
	
	Если Склады.Найти(Склад) <> Неопределено Тогда
			Возврат Истина;			
	КонецЕсли;
		
	Возврат Ложь;

КонецФункции// } #wortmann

// #wortmann { 
// Функция устанавливает является ли склад указанный в документе Таможенным
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	Склад - СправочникСсылка.Склады
//
// Возвращаемое значение:
//	Булево - Истина, если Склад Таможенный, иначе Ложь
Функция ЭтоТаможенныйСклад(Склад) Экспорт
	Склады = _омОбщегоНазначенияКлиентСервер.ПолучитьГлобальноеЗначениеМассив("гф_ГлобальныеЗначенияТаможенныйСклад");
	
	Если Склады.Найти(Склад) <> Неопределено Тогда
			Возврат Истина;			
	КонецЕсли;
		
	Возврат Ложь;
КонецФункции// } #wortmann 

 // #wortmann { 
// Функция устанавливает является ли склад указанный в документе складом Недосдачи
// Галфинд_Домнышева 2023/07/31
//
// Параметры:
//	Склад - СправочникСсылка.Склады
//
// Возвращаемое значение:
//	Булево - Истина, если Склад Недосдачи, иначе Ложь
Функция ЭтоСкладНедостачи(Склад) Экспорт

	Склады = 
			_омОбщегоНазначенияКлиентСервер.ПолучитьГлобальноеЗначениеМассив("гф_ГлобальныеЗначенияСкладИзлишкиНедостачи");
	
	Если Склады.Найти(Склад) <> Неопределено Тогда
		Возврат Истина;			
	КонецЕсли;
		
	Возврат Ложь;

КонецФункции// } #wortmann

// #wortmann { 
// Функция возвращает значение для ТЭГ source_system по каждой организации
// Галфинд_Домнышева 2022/12/01
//
// Возвращаемое значение:
//	Строка - значение для ТЭГ source_system
Функция ПолучитьПоле_SourceSystem()
	
	Рез = "1С";
	
	Суффикс = "_";
	
	Если СтрНайти(НРег(Организация.Наименование), "вендель") > 0 Тогда
		Суффикс = Суффикс + "ВЕ";
    ИначеЕсли СтрНайти(НРег(Организация.Наименование), "вортманн") > 0 Тогда
		Суффикс = Суффикс + "ВО";
	ИначеЕсли СтрНайти(НРег(Организация.Наименование), "каприс") > 0 Тогда
		Суффикс = Суффикс + "КА";
	ИначеЕсли СтрНайти(НРег(Организация.Наименование), "шу.ком") > 0 Тогда
		Суффикс = Суффикс + "ШУ";
	ИначеЕсли СтрНайти(НРег(Организация.Наименование), "яна") > 0 Тогда
		Суффикс = Суффикс + "ЯН";
	Иначе
		Суффикс = Суффикс + "?";
	КонецЕсли;
	
	Возврат Рез + Суффикс;

КонецФункции// } #wortmann

#КонецОбласти

#Область ЗагрузкаДанных

// #wortmann { 
// Процедура загружает файлы с сервера WMS 
// Галфинд_Домнышева 2022/12/01
Процедура ЗагрузитьДанные() Экспорт
	
	ТекстыОшибок = Новый ТаблицаЗначений;
	ТекстыОшибок.Колонки.Добавить("ПутьФайла");
	ТекстыОшибок.Колонки.Добавить("ТекстОшибки");
	ТекстыОшибок.Колонки.Добавить("Организация");
	ТекстыОшибок.Колонки.Добавить("ТипИнформации");
	ТекстыОшибок.Колонки.Добавить("Ордер"); 

	НастройкиFTPСоединения = 
					_омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначениеFTP("FTP_НастройкиДляЗагрузкиВыгрузкиВWMS");
	НомерОшибки = 1;
	Если НастройкиFTPСоединения.ЕстьДанные = Ложь Тогда
		Сообщение = "Не заданы настройки подключения к ftp-серверу.";
		ЗаписьЖурналаРегистрации("ОбменСWMS", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, Сообщение);
		ЗаписатьСообщениеОшибки(Сообщение, Истина, "Проверка настроек для обмена");
		НомерОшибки = НомерОшибки + 1;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ТекущаяДатаСеанса(), "ДЛФ=T") + ". " + Сообщение);
		
		Возврат;
	КонецЕсли;
	
	Соединение = _омОбщегоНазначенияВызовСервера.гф_ПолучитьСоединение(НастройкиFTPСоединения);       
	Если Соединение = Неопределено Тогда
		Сообщение = "Соединение не установлено, проверьте настройки подключения FTP. " + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ОбменСWMS", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, Сообщение);
		ЗаписатьСообщениеОшибки(Сообщение, Истина, "Проверка настроек для обмена");
		НомерОшибки = НомерОшибки + 1;
		Возврат;
	КонецЕсли;
	
	//ТекКаталог = СтрЗаменить(СтрЗаменить(НастройкиFTPСоединения.Каталог, "\", "/"), "//", "/");	
	//Если Прав(ТекКаталог, 1) <> "/" Тогда
	//	ТекКаталог = ТекКаталог + "/";
	//КонецЕсли;
	//Соединение.ТекущийКаталог();
	//Соединение.УстановитьТекущийКаталог(ТекКаталог);
		
	ПапкаДляВременнойЗагрузки = 
							_омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначение("гф_ПапкаДляВременнойЗагрузкиСоСкладаFTP");
	//КаталогЗагрузки = ПапкаДляВременнойЗагрузки; 
	//+ "\" +  формат(ТекущаяДатаСеанса(), "ДФ='ггг-ММ-д'");
	СоздатьКаталог(ПапкаДляВременнойЗагрузки);
	
	Каталог = Новый Файл(ПапкаДляВременнойЗагрузки);
	Если Не Каталог.Существует() Тогда
		ДобавитьСтрокуВТекстыОшибки("Каталог для загрузки файлов задан неверно или не существует...",
		Истина, ПапкаДляВременнойЗагрузки);
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	КорневойКаталог = СтрЗаменить(СтрЗаменить(НастройкиFTPСоединения.Каталог, "\", "/"), "//", "/");	
	Если Прав(КорневойКаталог, 1) <> "/" Тогда
		КорневойКаталог = КорневойКаталог + "/";
	КонецЕсли;
	
	Если Соединение = Неопределено Тогда
		Соединение = _омОбщегоНазначенияВызовСервера.гф_ПолучитьСоединение(НастройкиFTPСоединения);
		Соединение.УстановитьТекущийКаталог(КорневойКаталог);
	КонецЕсли;
	
	Соединение.УстановитьТекущийКаталог(КорневойКаталог);
	
	ЗагрузитьДанныеИнтерфейсныхФайлов(НастройкиFTPСоединения, Соединение, ПапкаДляВременнойЗагрузки, КорневойКаталог);
	
	ПоискТекстовыхФайлов(Соединение, НастройкиFTPСоединения); // Галфинд_ДомнышеваКР_30_01_2024
	
КонецПроцедуры// } #wortmann 

// #wortmann { 
// Процедура загружает файлы с сервера WMS 
// Галфинд_Домнышева 2022/12/01
//
// Параметры:
//	НастройкиFTPСоединения - Структура - Настройки для FTPСоединения
//  Соединение - FTPСоединение - Неопределено 
//	ПапкаДляВременнойЗагрузки - Строка - значение каталога на сервере
//	КорневойКаталог - Строка - корневой каталог на FTP 
Процедура ЗагрузитьДанныеИнтерфейсныхФайлов(НастройкиFTPСоединения, Соединение, ПапкаДляВременнойЗагрузки, 
											КорневойКаталог) 
	
	МассивПапок = ПолучитьМассивПапокЗагрузкиСоСклада();
	МассивПапок.Свернуть("Значение, Организация");
	
	ФайлыКЗагрузке = Новый Массив;
	
	Если МассивПапок.Количество() > 0 Тогда	
		Для Каждого Папка Из МассивПапок Цикл
			Если Соединение = Неопределено Тогда
				Соединение = _омОбщегоНазначенияВызовСервера.гф_ПолучитьСоединение(НастройкиFTPСоединения);
				Соединение.УстановитьТекущийКаталог(КорневойКаталог);
			КонецЕсли;
			
			ТекКаталог = Папка.Значение;
			Если Прав(ТекКаталог, 1) <> "/" Тогда
				ТекКаталог = ТекКаталог + "/" + НастройкиFTPСоединения.OUT;
			Иначе
				ТекКаталог = ТекКаталог + НастройкиFTPСоединения.OUT;
			КонецЕсли;
			ТекКаталог = СтрЗаменить(СтрЗаменить(ТекКаталог, "\", "/"), "//", "/");
			
			Попытка
				ФайлыКЗагрузке = Соединение.НайтиФайлы(ТекКаталог, "*.xml");
			Исключение
				Сообщение = "Не удалось установить доступ к каталогу " + ТекКаталог + ОписаниеОшибки();
				ЗаписьЖурналаРегистрации("ОбменСWMS", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, Сообщение);
				ЗаписатьСообщениеОшибки(Сообщение, Истина, "Проверка настроек для обмена");
				НомерОшибки = НомерОшибки + 1;
				Продолжить;
			КонецПопытки;
			
			ПродолжитьЗагрузку(ФайлыКЗагрузке, Соединение, НастройкиFTPСоединения, ПапкаДляВременнойЗагрузки, Папка.Значение);
				
		КонецЦикла;		
	Иначе
		ФайлыКЗагрузке = Соединение.НайтиФайлы(ТекКаталог, "*.xml");
		ПродолжитьЗагрузку(ФайлыКЗагрузке, Соединение, НастройкиFTPСоединения, ПапкаДляВременнойЗагрузки);
	КонецЕсли;
	
КонецПроцедуры// } #wortmann 

Процедура ПродолжитьЗагрузку(ФайлыКЗагрузке, Соединение, НастройкиFTPСоединения, ПапкаДляВременнойЗагрузки, 
								ПапкаСклад = Неопределено)
	
	Если ФайлыКЗагрузке.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивФайловДляУдаления = Новый ТаблицаЗначений;
	МассивФайловДляУдаления.Колонки.Добавить("ИмяНаФТП");
	МассивФайловДляУдаления.Колонки.Добавить("Имя");
	
	МассивНужныхФайлов = Новый Массив;	
	
	Если ПапкаСклад <> Неопределено Тогда
		Если Прав(ПапкаДляВременнойЗагрузки, 1) <> "/" Тогда
			КаталогЗагрузки = ПапкаДляВременнойЗагрузки + "/" + ПапкаСклад;
		Иначе
			КаталогЗагрузки = ПапкаДляВременнойЗагрузки + ПапкаСклад;
		КонецЕсли;
	КонецЕсли;
	
	Если Прав(КаталогЗагрузки, 1) = "/" Тогда
		КаталогЗагрузки = Лев(КаталогЗагрузки, СтрДлина(КаталогЗагрузки) - 1);
	КонецЕсли;
	
	СоздатьКаталог(КаталогЗагрузки);
	
	Каталог = Новый Файл(КаталогЗагрузки);
	Если Не Каталог.Существует() Тогда
		ДобавитьСтрокуВТекстыОшибки("Каталог для загрузки файлов задан неверно или не существует...",
		Истина, КаталогЗагрузки);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаФайлFTP Из ФайлыКЗагрузке Цикл
		
		Соединение.Получить(СтрокаФайлFTP.ПолноеИмя, КаталогЗагрузки + "\" + СтрокаФайлFTP.Имя);
		Стр = МассивФайловДляУдаления.Добавить();
		Стр.ИмяНаФТП = СтрокаФайлFTP.ПолноеИмя;
		Стр.Имя = СтрокаФайлFTP.Имя;
		МассивНужныхФайлов.Добавить(СтрокаФайлFTP.Имя);
		
	КонецЦикла;
	
	Если МассивФайловДляУдаления.Количество() > 0 Тогда
		УдалитьФайлыНаФТП(НастройкиFTPСоединения, МассивФайловДляУдаления, Соединение);	
	КонецЕсли;
	
	МассивИменЗагруженныхФайлов = Новый Массив;

	ФайлыКОбработке = НайтиФайлы(КаталогЗагрузки, "*.xml"); 
	// ++ Галфинд_ДомнышеваКР_18_03_2024
	// При неудачной прошлой загрузки в текущей не подбираеются ранее загруженные файлы.
	//МассивКОбработке = Новый Массив;
	//
	//Для каждого Файл Из ФайлыКОбработке Цикл
	//	Если МассивНужныхФайлов.Найти(Файл.Имя) <> Неопределено Тогда
	//		 МассивКОбработке.Добавить(Файл);
	//	КонецЕсли;
	//КонецЦикла;
	// -- Галфинд_ДомнышеваКР_18_03_2024
	
	Если ФайлыКОбработке.Количество() > 0 Тогда
		
		ОбработатьПолученныеФайлы(ФайлыКОбработке, МассивИменЗагруженныхФайлов);
	Иначе    
		Сообщение = "В указанном FTP каталоге нет файлов с расширением *.xml!";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ТекущаяДатаСеанса(), "ДЛФ=T") + ". " + Сообщение);
		ЗаписатьСообщениеОшибки(Сообщение, Ложь, "Проверка настроек для обмена");
		НомерОшибки = НомерОшибки + 1;
	КонецЕсли;

КонецПроцедуры// } #wortmann 

Функция ПолучитьМассивПапокЗагрузкиСоСклада()
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПриходныйОрдерНаТовары.Склад КАК Склад
		|ПОМЕСТИТЬ Склады
		|ИЗ
		|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
		|ГДЕ
		|	ПриходныйОрдерНаТовары.Статус <> &СтатусПО
		|	И ПриходныйОрдерНаТовары.Проведен
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	РасходныйОрдерНаТовары.Склад
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
		|ГДЕ
		|	РасходныйОрдерНаТовары.Статус <> &СтатусРО
		|	И РасходныйОрдерНаТовары.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СкладыДополнительныеРеквизиты.Ссылка КАК Склад,
		|	СкладыДополнительныеРеквизиты.Свойство.Имя КАК Свойство,
		|	ВЫРАЗИТЬ(СкладыДополнительныеРеквизиты.Значение КАК СТРОКА(200)) КАК Значение,
		|	СкладыДополнительныеРеквизиты.Ссылка.гф_Организация КАК Организация
		|ИЗ
		|	Справочник.Склады.ДополнительныеРеквизиты КАК СкладыДополнительныеРеквизиты
		|ГДЕ
		|	СкладыДополнительныеРеквизиты.Ссылка В
		|			(ВЫБРАТЬ
		|				Склады.Склад
		|			ИЗ
		|				Склады КАК Склады)
		|	И СкладыДополнительныеРеквизиты.Свойство.Имя = &Имя";
	
	Запрос.УстановитьПараметр("Имя", "гф_ПапкаFTP");
	Запрос.УстановитьПараметр("СтатусПО", Перечисления.СтатусыПриходныхОрдеров.Принят);
	Запрос.УстановитьПараметр("СтатусРО", Перечисления.СтатусыРасходныхОрдеров.Отгружен);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		МассивПапокСклада = РезультатЗапроса.Выгрузить();
	Иначе
		МассивПапокСклада = Новый Массив;
	КонецЕсли;	
		
	Возврат МассивПапокСклада;
	
КонецФункции// } #wortmann

// #wortmann { 
// Процедура начинает разбор текстовых файлов 
// Галфинд_Домнышева 2024/01/30
//
// Параметры:
//  Соединение - FTPСоединение,  - Неопределено
//	НастройкиFTPСоединения - Структура - Настройки для FTPСоединения
Процедура ПоискТекстовыхФайлов(Соединение, НастройкиFTPСоединения)
		
	КаталогиЛОГ = ПолучитьМассивПапокЗагрузкиСоСклада();
	Если КаталогиЛОГ.Количество() > 0 Тогда
		КаталогиЛОГ.Свернуть("Значение, Организация");
	КонецЕсли;
	
	ПапкаДляВременнойЗагрузки = 
							_омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначение("гф_ПапкаДляВременнойЗагрузкиСоСкладаFTP");
							
	КорневойКаталог = СтрЗаменить(СтрЗаменить(НастройкиFTPСоединения.Каталог, "\", "/"), "//", "/");	
	Если Прав(КорневойКаталог, 1) <> "/" Тогда
		КорневойКаталог = КорневойКаталог + "/";
	КонецЕсли;
	Соединение.УстановитьТекущийКаталог(КорневойКаталог);
	
	Для каждого Каталог Из КаталогиЛОГ Цикл
		
		ПапкаСклад = Каталог.Значение;
		Если Прав(ПапкаСклад, 1) <> "/" Тогда
			ПапкаЛогWMS = ПапкаСклад + "/" + НастройкиFTPСоединения.LOG;
		Иначе
			ПапкаЛогWMS = ПапкаСклад + НастройкиFTPСоединения.LOG;
		КонецЕсли;
		ПапкаЛогWMS = СтрЗаменить(СтрЗаменить(ПапкаЛогWMS, "\", "/"), "//", "/");

		Если Соединение = Неопределено Тогда
			Соединение = _омОбщегоНазначенияВызовСервера.гф_ПолучитьСоединение(НастройкиFTPСоединения);
			Соединение.УстановитьТекущийКаталог(КорневойКаталог);
		КонецЕсли;
		
		Попытка
			МассивТекстовыхФайлов = Соединение.НайтиФайлы(ПапкаЛогWMS, "*.txt");
		Исключение
			Сообщение = "Не удалось установить доступ к каталогу " + ПапкаЛогWMS + ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("ОбменСWMS", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, Сообщение);
			ЗаписатьСообщениеОшибки(Сообщение, Истина, "Проверка настроек для обмена");
			НомерОшибки = НомерОшибки + 1;
			Продолжить;
		КонецПопытки;
		
		Соединение = Неопределено; 
		
		КаталогЗагрузки = ПолучитьПапкуНаСервере(ПапкаСклад, ПапкаДляВременнойЗагрузки);
		Если КаталогЗагрузки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если МассивТекстовыхФайлов.Количество() > 0 Тогда
			ПодборТекстовыхФайлов(Соединение, НастройкиFTPСоединения, МассивТекстовыхФайлов, КаталогЗагрузки, 
			Каталог.Организация);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры// } #wortmann

// #wortmann { 
// Процедура начинает разбор текстовых файлов 
// Галфинд_Домнышева 2024/01/30
//
// Параметры:
//  Соединение - FTPСоединение,  - Неопределено
//	НастройкиFTPСоединения - Структура - Настройки для FTPСоединения
//	МассивТекстовыхФайлов - массив - масиив файлов ".txt"
//	КаталогЗагрузки - Строка - Значеник каталога на сервере
//	Организация - СправочникСсылка.Организация
Процедура ПодборТекстовыхФайлов(Соединение, НастройкиFTPСоединения, МассивТекстовыхФайлов, КаталогЗагрузки, Организация)
	
	МассивНужныхФайлов = ПолучитьМассивИменДокументОбмен();
	
	МассивДляПолученияСФТП = ПреобразуемМассив(МассивТекстовыхФайлов, МассивНужныхФайлов);
	Если МассивДляПолученияСФТП.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Соединение = _омОбщегоНазначенияВызовСервера.гф_ПолучитьСоединение(НастройкиFTPСоединения);		
	
	Для каждого СтрокаФайлFTP Из МассивДляПолученияСФТП Цикл
		Соединение.Получить(СтрокаФайлFTP.ПолноеИмя, КаталогЗагрузки + "\" + СтрокаФайлFTP.Имя);
	КонецЦикла;
	ФайлыКОбработке = НайтиФайлы(КаталогЗагрузки, "*.txt");
	
	ОбработатьТекстовыеФайлы(ФайлыКОбработке, Организация);
	Попытка
		УдалитьФайлы(КаталогЗагрузки, "*.txt");
	Исключение
		Сообщение = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ОбменСWMS", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, Сообщение);
		ЗаписатьСообщениеОшибки(Сообщение, Истина, "Проверка настроек для обмена");
		НомерОшибки = НомерОшибки + 1;
	КонецПопытки;
	
КонецПроцедуры// } #wortmann

// #wortmann { 
// Составляет таблицу с колонками Организация и ПапкаЛогWMS по данным справочника гф_КаталогиОбработкиФайловXML
// Галфинд_Домнышева 2024/02/19
//
// Параметры:
//	ПапкаСклад - Строка - значение каталога по складу
//	ПапкаДляВременнойЗагрузки - каталог для временной загрузки файлов ЛОГ 
//
// Возвращаемое значение:
//	КаталогЗагрузки - Файл
Функция ПолучитьПапкуНаСервере(ПапкаСклад, ПапкаДляВременнойЗагрузки)
	
	ПапкаЛОГ = "LOG";
	Если ПапкаСклад <> Неопределено Тогда
		Если Прав(ПапкаДляВременнойЗагрузки, 1) <> "/" Тогда
			КаталогЗагрузки = ПапкаДляВременнойЗагрузки + "/" + ПапкаСклад;
		Иначе
			КаталогЗагрузки = ПапкаДляВременнойЗагрузки + ПапкаСклад;
		КонецЕсли;
	Иначе
		КаталогЗагрузки = ПапкаДляВременнойЗагрузки;
	КонецЕсли;
	
	Если Прав(КаталогЗагрузки, 1) <>  "/" Тогда
		КаталогЗагрузки = КаталогЗагрузки + "/" + ПапкаЛОГ;
	Иначе
		КаталогЗагрузки = КаталогЗагрузки + ПапкаЛОГ;
	КонецЕсли;
	
	СоздатьКаталог(КаталогЗагрузки);
	
	Каталог = Новый Файл(КаталогЗагрузки);
	Если Не Каталог.Существует() Тогда
		ДобавитьСтрокуВТекстыОшибки("Каталог для загрузки файлов задан неверно или не существует...",
		Истина, КаталогЗагрузки);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат КаталогЗагрузки;
			
КонецФункции// } #wortmann

// #wortmann { 
// Составляет массив из преобразованных значений имен отправленных файлов по данным среза последних
// РС гф_ДанныеВыгрузки по Организации, за месяц 
// Галфинд_Домнышева 2024/01/30
//
// Возвращаемое значение:
//	Массив - элементами являются строковые преобразованные значения имен отправленных файлов
Функция ПолучитьМассивИменДокументОбмен() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеВыгрузки.ИмяФайла КАК ИмяФайла,
		|	ВЫБОР
		|		КОГДА ДанныеВыгрузки.ИмяФайла ПОДОБНО
		|		""[PS]O_[0-9][0-9][0-9][0-9][0-9]-[x0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]_[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9].xml""
		|				ИЛИ ДанныеВыгрузки.ИмяФайла ПОДОБНО 
		|				""[PS]O_[0-9][0-9][0-9][0-9][0-9][0-9][0-9]-[x0-9][0-9][0-9][0-9][0-9][0-9]_[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9].xml""
		|			ТОГДА ПОДСТРОКА(ДанныеВыгрузки.ИмяФайла, 4, 14)
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ДанныеВыгрузки.ИмяФайла ПОДОБНО 
		|				""[PS]O_[0-9][0-9][0-9][0-9][0-9]-[x0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]-[RSV]_[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9].xml""
		|               ИЛИ ДанныеВыгрузки.ИмяФайла ПОДОБНО 
		|				""[PS]O_[0-9][0-9][0-9][0-9][0-9][0-9][0-9]-[x0-9][0-9][0-9][0-9][0-9][0-9]-[RSV]_[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9].xml""
		|					ТОГДА ПОДСТРОКА(ДанныеВыгрузки.ИмяФайла, 4, 16)
		|			КОНЕЦ
		|	КОНЕЦ КАК ПРеобразован,
		|	ДанныеВыгрузки.Документ КАК Документ
		|ИЗ
		|	РегистрСведений.гф_ДанныеВыгрузки.СрезПоследних(
		|			&Дата,
		|			Состояние = &Состояние
		|				И ВидДанных = &ВидДанных) КАК ДанныеВыгрузки
		|ГДЕ
		|	ДанныеВыгрузки.Период МЕЖДУ &Период И &Дата
		|	И ВЫРАЗИТЬ(ДанныеВыгрузки.ИмяФайла КАК СТРОКА(100)) <> """" 
		|	И ВЫБОР
		|	КОГДА ТИПЗНАЧЕНИЯ(ДанныеВыгрузки.Документ) = ТИП(Документ.РасходныйОрдерНаТовары)
		|		ТОГДА ДанныеВыгрузки.Документ.Склад.гф_Организация = &Организация
		|	ИНАЧЕ ДанныеВыгрузки.Документ.Организация = &Организация
		|	КОНЕЦ";
	
	Запрос.УстановитьПараметр("ВидДанных", Перечисления.гф_ВидыДанныхДляВыгрузки.Документ);
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Период", ДобавитьМесяц(ТекущаяДатаСеанса(), -1));
	Запрос.УстановитьПараметр("Состояние", Перечисления.гф_СтатусыВыгрузкиДанных.Отправлено); 
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Преобразован");
		
КонецФункции// } #wortmann

// #wortmann { 
// Переформирует массив файлов ФТП для загрузки на сервер только теми файлами что нас интересуют.
// Галфинд_Домнышева 2024/01/30
//
// Параметры:
//	МассивТекстовыхФайлов - Массив - элементами являются все файлы на ФТП сервере
//	МассивНужныхФайлов - Массив - элементами являются строчные значения отправленных файлов
//
// Возвращаемое значение:
//	МассивДляПолученияСФТП - Массив - элементами являются файлы на ФТП сервере
Функция ПреобразуемМассив(МассивТекстовыхФайлов, МассивНужныхФайлов)
	
	МассивДляПолученияСФТП = Новый Массив;
		
	Для каждого Преобразован Из МассивНужныхФайлов Цикл
	
	Для Каждого СтрокаФайлFTP Из МассивТекстовыхФайлов Цикл
		
			Если СтрЧислоВхождений(СтрокаФайлFTP.Имя, Преобразован) > 0 Тогда
				МассивДляПолученияСФТП.Добавить(СтрокаФайлFTP);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат МассивДляПолученияСФТП;
	
КонецФункции// } #wortmann

// #wortmann { 
// Процедура начинает разбор текстовых файлов 
// Галфинд_Домнышева 2024/01/30
//
// Параметры:
//  МассивТекстовыхФайлов - Массив - массив файлов с расширением *.log и *.txt
//	Организация - Справочникссылка.Организации - текущая Организация по каталогу
Процедура ОбработатьТекстовыеФайлы(МассивТекстовыхФайлов, Организация)
	
	Если МассивТекстовыхФайлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивЗагружаемыхФайлов = Новый ТаблицаЗначений;
	МассивЗагружаемыхФайлов.Колонки.Добавить("Файл");
	МассивЗагружаемыхФайлов.Колонки.Добавить("ИмяФайла");
	
	Для Каждого ФайлКОбработке Из МассивТекстовыхФайлов Цикл
		СтрокаЗагружаемыйФайл = МассивЗагружаемыхФайлов.Добавить();
		СтрокаЗагружаемыйФайл.Файл = ФайлКОбработке.ПолноеИмя;
		СтрокаЗагружаемыйФайл.ИмяФайла = ФайлКОбработке.Имя;
	КонецЦикла;
	
	Для Каждого ФайлОбмена Из МассивЗагружаемыхФайлов Цикл
		
		Если ЕстьЗаписиВРегистре(ФайлОбмена.ИмяФайла) Тогда
			Сообщение = "Файл " + ФайлОбмена.ИмяФайла + " загружался ранее.";
			ЗаписатьСообщениеОшибки(Сообщение, Истина, ФайлОбмена.Файл, Организация);
			НомерОшибки = НомерОшибки + 1;
			Продолжить;
		КонецЕсли; 
		
		НайтиДокументИЗаписатьКомментарий(ФайлОбмена);
		
	КонецЦикла;
	
	Если ТекстыОшибок.Количество() > 0 Тогда 
		ЗаписатьОшибку(ТекстыОшибок);   
	КонецЕсли;
	ТекстыОшибок.Очистить();
	
КонецПроцедуры// } #wortmann

// #wortmann { 
// Процедура ДОЛЖНА по имени файла с сервера WMS определяет Дату и Номер документа к которому относится файл,
// запускает его поиск и запись в РС гф_ошибкиЗагрузки
// Галфинд_Домнышева 2024/01/30 
//
// Параметры:
//  ФайлОбмена - Файл - обрабатываемый файл
Процедура НайтиДокументИЗаписатьКомментарий(ФайлОбмена)
	
	ВыбранныйФайл = Новый Файл(ФайлОбмена.Файл);
	
	Если ВыбранныйФайл.Существует() Тогда // проверка на существование файла
		Попытка
		ОбъектЧтение = Новый ЧтениеТекста(ФайлОбмена.Файл, "windows-1251");
		ТекстУведомления = ОбъектЧтение.Прочитать();
		ОбъектЧтение.Закрыть();
		Исключение
			Сообщение = "Файл " + ФайлОбмена.ИмяФайла + " ошибка чтения файла " + ОписаниеОшибки();
			ЗаписатьСообщениеОшибки(Сообщение, Истина, ФайлОбмена.Файл);
			НомерОшибки = НомерОшибки + 1;
			Возврат;
		КонецПопытки;
	Иначе	
		Сообщение = "Файл не найден!";
		ЗаписатьСообщениеОшибки(Сообщение, Истина, ФайлОбмена.Файл);
		НомерОшибки = НомерОшибки + 1;
	КонецЕсли;
	
	ПозицияПервогоСимвола = СтрНайти(ТекстУведомления, "[");
	ПозицияВторогоСимвола = СтрНайти(ТекстУведомления, "]");                             
	
	СтрокаИмени = Сред(Лев(ТекстУведомления, ПозицияВторогоСимвола - 1), ПозицияПервогоСимвола + 1);
	КодКлиента =  Лев(СтрокаИмени, 3);
	
	МассивСтроки = СтрРазделить(СтрокаИмени, "_");
	
	Интерфейс = МассивСтроки[0];
	
	// ++ Галфинд_ДомнышеваКР_16_02_2024
	НомерИзФайла = МассивСтроки[1];
	Если СтрЗаканчиваетсяНа(НомерИзФайла, "S") ИЛИ СтрЗаканчиваетсяНа(НомерИзФайла, "V") 
		ИЛИ СтрЗаканчиваетсяНа(НомерИзФайла, "R") Тогда
		НомерДокумента = СокрЛП(Сред(НомерИзФайла, 4, СтрДлина(НомерИзФайла) - 5));
	Иначе 
		НомерДокумента = СокрЛП(Прав(НомерИзФайла, СтрДлина(НомерИзФайла) - 3));
	КонецЕсли; 
    // -- Галфинд_ДомнышеваКР_16_02_2024
	
	ДатаСтрока = СтрРазделить(МассивСтроки[2], ".")[0];
	ДатаДокумента = Дата(ДатаСтрока);
	
	// Далее необходимо найти Документ по номеру и дате и добавить в него комментарий.
	ДокументОрдер = НайтиДокумент(НомерДокумента, ДатаДокумента, Интерфейс, ФайлОбмена);
	
	Если ДокументОрдер <> Неопределено Тогда
		
		ДобавитьСтрокуВТекстыОшибки(ТекстУведомления, Ложь, ФайлОбмена.ИмяФайла, ДокументОрдер);
		
	КонецЕсли;
	
	// ++ Галфинд_ДомнышеваКР_11_04_2024
	Если СтрНайти(ТекстУведомления, "Недостаточное количество") 
		ИЛИ СтрНайти(ТекстУведомления, "Не найден") Тогда
		ОтправитьПисьмо(ФайлОбмена, ДокументОрдер, ТекстУведомления);
	КонецЕсли;	
	// -- Галфинд_ДомнышеваКР_11_04_2024

 КонецПроцедуры// } #wortmann 
 
 // #wortmann { 
// Отправляет письмо автору документа Номеру, Дате, Организации
// Галфинд_Домнышева 2024/04/11
//
// Параметры:
//	ФайлОбмена - Файл - обрабатываемый файл
//  ДокументОрдер - ДокументСсылка.РасходныйОрдерНаТовары
//  ТекстУведомления - Строка
Процедура ОтправитьПисьмо(ФайлОбмена, ДокументОрдер, ТекстУведомления)
	
	Если ДокументОрдер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УчетнаяЗаписьПочты	= Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	ПрофильПочты		= РаботаСПочтовымиСообщениямиСлужебный.ИнтернетПочтовыйПрофиль(УчетнаяЗаписьПочты);
	
	АвторРеализации =  ПолучитьАвтораРеализацииПоРО(ДокументОрдер);
	
	Если АвторРеализации = Неопределено Тогда
		Сообщение = "Не найден автор Реализации по РО " + ДокументОрдер.Ссылка 
					+ " Сообщение не будет отправлено на почту";
		ЗаписатьСообщениеОшибки(Сообщение, Истина, ФайлОбмена.Файл);
		НомерОшибки = НомерОшибки + 1;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаКонтактнойИнформации.АдресЭП КАК АдресЭП
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ТаблицаКонтактнойИнформации
	|ГДЕ
	|	ТаблицаКонтактнойИнформации.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", АвторРеализации);
	
	ВыборкаДанные = Запрос.Выполнить().Выгрузить();
	
	Если ВыборкаДанные.Количество() > 0 Тогда
		EmailПользователя = Строка(ВыборкаДанные[0].АдресЭП);
	Иначе
		ТекстСообщения = НСтр("ru = 'У пользователя не заполнен почтовый адрес, невозможно отправить сообщение об изменении статуса.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СообщениеПочты = Новый ИнтернетПочтовоеСообщение;
	СообщениеПочты.Кодировка = "utf-8";
	СообщениеПочты.Тема = "Ошибка WMS ордер " + ДокументОрдер.Номер;
	СообщениеПочты.Отправитель = Строка(УчетнаяЗаписьПочты.АдресЭлектроннойПочты);
	СообщениеПочты.ИмяОтправителя = "Рассылка 1С";
	СообщениеПочты.Получатели.Добавить(EmailПользователя);
	
	ТекстПисьма = "От склада получено сообщение об ошибке к ордеру: " + ДокументОрдер.Номер + " от " + ДокументОрдер.Дата 
					+ Символы.ПС + " Текст уведомления: ";
	
	ТекстСообщения = 
	"<style>
	| body {font-family: Verdana, sans-serif;}
	|</style>
	|<h5 style=""padding: 0 0 15px 0; margin: 0 0 0 0;"">Добрый день!</h5>
	|<h5 style=""padding: 0 0 15px 0; margin: 0 0 0 0;"">%Содержимое%</h5>
	|<h5 style=""padding: 0 0 15px 0; margin: 0 0 0 0;"">%ТекстУведомления%</h5>";
	
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Содержимое%", ТекстПисьма);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекстУведомления%", ТекстУведомления);
	
	СообщениеПочты.Тексты.Добавить(ТекстСообщения, ТипТекстаПочтовогоСообщения.HTML);
	
	СообщениеПочты.Вложения.Добавить(ФайлОбмена.Файл);
	
	ИнтернетПочта = Новый ИнтернетПочта;
	
	Попытка
		ИнтернетПочта.Подключиться(ПрофильПочты);
		ИнтернетПочта.Послать(СообщениеПочты);
		ИнтернетПочта.Отключиться();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
		
КонецПроцедуры// } #wortmann 

// #wortmann { 
// Функция получает автора Реализации по РО
// Галфинд_Домнышева 2024/04/11
//
// Параметры:
//	Документ -  ДокументСсылка.РасходныйОрдерНаТовары
//
// Возвращаемое значение:
//	Автор - СправочникСсылка.Пользователи
Функция ПолучитьАвтораРеализацииПоРО(Документ)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
		|	РеализацияТоваровУслуг.Автор КАК Автор
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.гф_РасходныйОрдер = &гф_РасходныйОрдер";
	
	Запрос.УстановитьПараметр("гф_РасходныйОрдер", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Выборка.Следующий();
		
		Автор = Выборка.Автор;
		
		Возврат Автор;
		
	КонецЕсли;
	
	Возврат Неопределено; 
	
КонецФункции// } #wortmann

// #wortmann { 
// Ищет документ в базе по Номеру, Дате, Организации
// Галфинд_Домнышева 2024/01/30
//
// Параметры:
//	НомерДокумента - Строка
//	ДатаДокумента - Дата (преобразовано из текста)
//	Интерфейс - Строка - SO или PO
//	ФайлОбмена - Файл - обрабатываемый файл
//
// Возвращаемое значение:
//	Булево - Истина, если есть запись по условиям иначе Ложь
Функция НайтиДокумент(НомерДокумента, ДатаДокумента, Интерфейс, ФайлОбмена)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходныйОрдерНаТовары.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
		|ГДЕ
		|	РасходныйОрдерНаТовары.Дата МЕЖДУ &НачалоДня И &КонецДня
		|	И РасходныйОрдерНаТовары.Номер = &Номер
		|   И РасходныйОрдерНаТовары.Склад.гф_Организация = &Организация
		|
		|	&ЗапросРТУ";
		
	Если Интерфейс = "SO" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЗапросРТУ", "ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслуг.гф_РасходныйОрдер
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Номер = &НомерРТУ
		|	И РеализацияТоваровУслуг.гф_РасходныйОрдер.Дата МЕЖДУ &НачалоДня И &КонецДня");
		Запрос.УстановитьПараметр("НомерРТУ", НомерДокумента);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Склад.гф_Организация", "Организация");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РасходныйОрдерНаТовары", "ПриходныйОрдерНаТовары");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЗапросРТУ", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КонецДня", КонецДня(ДатаДокумента));
	Запрос.УстановитьПараметр("НачалоДня", НачалоДня(ДатаДокумента));
	Запрос.УстановитьПараметр("Номер", НомерДокумента); 
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка.Следующий();
		НайденныйДокументСсылка = Выборка.Ссылка;
		//ОпределитьОрганизацию(НайденныйДокументОбъект);
		Возврат НайденныйДокументСсылка;
	Иначе
		Сообщение = ?(Интерфейс = "SO", "Расходный ордер.", "Приходный ордер.") 
		+ " с номером " + НомерДокумента + " от: " + ДатаДокумента + " по организации" + Организация + " не найден.";
		ДобавитьСтрокуВТекстыОшибки(Сообщение, Истина, ФайлОбмена.ИмяФайла);
		Возврат Неопределено;
	КонецЕсли;

КонецФункции// } #wortmann

// #wortmann { 
// Функция проверяет наличие записи в РС гф_ОшибкиЗагрузки по пути файла
// Галфинд_Домнышева 2024/01/30
//
// Параметры:
//	ПутьФайла - Строка - имя файла
//
// Возвращаемое значение:
//	Булево - Истина, если есть запись по условиям иначе Ложь	
Функция ЕстьЗаписиВРегистре(ПутьФайла)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	гф_ОшибкиЗагрузки.Дата КАК Дата,
		// ++ Галфинд_ДомнышеваКР_18_03_2024
		|	гф_ОшибкиЗагрузки.Объект КАК Объект
		|ПОМЕСТИТЬ ОшибкиЗагрузки
		// -- Галфинд_ДомнышеваКР_18_03_2024
		|ИЗ
		|	РегистрСведений.гф_ОшибкиЗагрузки КАК гф_ОшибкиЗагрузки
		|ГДЕ
		|	гф_ОшибкиЗагрузки.ПутьФайла = &ПутьФайла
		|	И гф_ОшибкиЗагрузки.ТипИнформации = ""Информация""
		// ++ Галфинд_ДомнышеваКР_18_03_2024
		// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811eee12c99797450
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	гф_ДанныеВыгрузкиСрезПоследних.Период КАК Период,
		|	гф_ДанныеВыгрузкиСрезПоследних.Документ КАК Документ,
		|	гф_ДанныеВыгрузкиСрезПоследних.Состояние КАК Состояние
		|ПОМЕСТИТЬ ДанныеВыгрузки
		|ИЗ
		|	РегистрСведений.гф_ДанныеВыгрузки.СрезПоследних(
		|			,
		|			Документ В
		|				(ВЫБРАТЬ
		|					ОшибкиЗагрузки.Объект
		|				ИЗ
		|					ОшибкиЗагрузки КАК ОшибкиЗагрузки)
		|	И Состояние = Значение(Перечисление.гф_СтатусыВыгрузкиДанных.Отправлено)) КАК гф_ДанныеВыгрузкиСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОшибкиЗагрузки.Дата КАК Дата
		|ИЗ
		|	ОшибкиЗагрузки КАК ОшибкиЗагрузки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеВыгрузки КАК ДанныеВыгрузки
		|		ПО ОшибкиЗагрузки.Объект = ДанныеВыгрузки.Документ
		|ГДЕ
		|	ОшибкиЗагрузки.Дата > ДанныеВыгрузки.Период
		// -- Галфинд_ДомнышеваКР_18_03_2024
		|";
	
	Запрос.УстановитьПараметр("ПутьФайла", ПутьФайла);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции// } #wortmann

// #wortmann { 
// Процедура разбивает массив полученных с сервера WMS файлов по интерфейсу и  начинает обработку.
// Галфинд_Домнышева 2022/12/01 
//
// Параметры:
//  ФайлыКОбработке - Массив - полученные файлы с сервера WMS
//	МассивИменЗагруженныхФайлов - Массив - в к-й добавляются имена обработанных файлов.
Процедура ОбработатьПолученныеФайлы(ФайлыКОбработке, МассивИменЗагруженныхФайлов)
	
	МассивЗагружаемыхФайлов = Новый ТаблицаЗначений;
	МассивЗагружаемыхФайлов.Колонки.Добавить("Файл");
	МассивЗагружаемыхФайлов.Колонки.Добавить("ИмяФайла");
	МассивЗагружаемыхФайлов.Колонки.Добавить("ДатаОтправления");
	МассивЗагружаемыхФайлов.Колонки.Добавить("ДатаПолучения");
	МассивЗагружаемыхФайлов.Колонки.Добавить("УдалитьПослеОбработки");
	
	Для Каждого ФайлКОбработке Из ФайлыКОбработке Цикл
		СтрокаЗагружаемыйФайл = МассивЗагружаемыхФайлов.Добавить();
		СтрокаЗагружаемыйФайл.Файл = ФайлКОбработке.ПолноеИмя;
		СтрокаЗагружаемыйФайл.ИмяФайла = ФайлКОбработке.Имя;
		СтрокаЗагружаемыйФайл.УдалитьПослеОбработки = Истина;
	КонецЦикла;

	МассивЗагружаемыхФайловРО = ПреобразоватьМассивФайлов(МассивЗагружаемыхФайлов, Истина);
	МассивЗагружаемыхФайловПО = ПреобразоватьМассивФайлов(МассивЗагружаемыхФайлов);
	
	// Необходимо разобрать массив РО на РО и КорректировкиНазначений и обработать их отдельно
	Если МассивЗагружаемыхФайловРО.Количество() > 0 Тогда
		УпорядочитьФайлыПоДатеСоздания(МассивЗагружаемыхФайловРО);
        ОбработатьЗагружаемыйФайл(МассивЗагружаемыхФайловРО, МассивИменЗагруженныхФайлов, Истина);
	КонецЕсли;

    Если МассивЗагружаемыхФайловПО.Количество() > 0 Тогда
		УпорядочитьФайлыПоДатеСоздания(МассивЗагружаемыхФайловПО);
       	ОбработатьЗагружаемыйФайл(МассивЗагружаемыхФайловПО, МассивИменЗагруженныхФайлов);
	КонецЕсли;
	
	Если ТекстыОшибок.Количество() > 0 Тогда
		ЗаписатьОшибку(ТекстыОшибок);
	КонецЕсли;
	ТекстыОшибок.Очистить();  
	
КонецПроцедуры// } #wortmann

// #wortmann { 
// Процедура разбивает массив полученных с сервера WMS файлов по интерфейсу и  начинает обработку.
// Галфинд_Домнышева 2022/12/01 
//
// Параметры:
//  МассивЗагружаемыхФайлов - Массив - полученные файлы с сервера WMS
//	МассивИменЗагруженныхФайлов - Массив - в к-й добавляются имена обработанных файлов
//	РасходныйОрдер - Булево
Процедура ОбработатьЗагружаемыйФайл(МассивЗагружаемыхФайлов, МассивИменЗагруженныхФайлов, РасходныйОрдер = Ложь)

	Для Каждого ФайлОбмена Из МассивЗагружаемыхФайлов Цикл
		
		Если ЗагружалсяЛиФайл(ФайлОбмена.ИмяФайла) Тогда
			Сообщение = "Файл " + ФайлОбмена.ИмяФайла + " загружался ранее. Документ не создан. Документ перемещён в архив.";
			ЗаписатьСообщениеОшибки(Сообщение, Истина, ФайлОбмена.Файл);
			НомерОшибки = НомерОшибки + 1;
			ПереместитьФайлВАрхив(ФайлОбмена.Файл);
			Продолжить;
		КонецЕсли;
		
		Файл = Новый Файл(ФайлОбмена.Файл);
		Если Файл.Размер() = 0 Тогда
			ЗаписатьСообщениеОшибки("Файл " + ФайлОбмена.ИмяФайла + " размер 0.", Истина, ФайлОбмена.Файл);
			НомерОшибки = НомерОшибки + 1;
			ПереместитьФайлВАрхив(ФайлОбмена.Файл);
			Продолжить;
		КонецЕсли;
		
		Попытка
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.ОткрытьФайл(ФайлОбмена.Файл); // Домнышева_КР_07_12_2023 _ убрана кодировка, если добавлять то "UTF-8"
			Фабрика = Новый ФабрикаXDTO();
			Данные = Фабрика.ПрочитатьXML(ЧтениеXML);
			ЧтениеXML.Закрыть();
		Исключение
			Сообщение = "Файл " + ФайлОбмена.ИмяФайла + " ошибка загрузки. " + ОписаниеОшибки();
			ЗаписатьСообщениеОшибки(Сообщение, Истина, ФайлОбмена.Файл);
			НомерОшибки = НомерОшибки + 1;
			Продолжить;
		КонецПопытки;
		// ++ Галфинд_ДомнышеваКР_19_01_2024
		Если РасходныйОрдер Тогда
			Интерфейс = Перечисления.гф_ИнтерфейсОбменаWMS.SO;
		Иначе
			Интерфейс = Перечисления.гф_ИнтерфейсОбменаWMS.PO;
		КонецЕсли;
		// -- Галфинд_ДомнышеваКР_19_01_2024
		ДокументПоОбмену = Документы.гф_ДанныеЗагрузкиПоОбмену.СоздатьДокумент();
		ДокументПоОбмену.Дата = ТекущаяДатаСеанса();
		ДокументПоОбмену.ИмяФайла = ФайлОбмена.ИмяФайла; 
		ДокументПоОбмену.Интерфейс = Интерфейс; // Добавлено Галфинд_ДомнышеваКР_19_01_2024
		ДокументПоОбмену.ПолноеИмяФайла = ФайлОбмена.Файл;
		ДокументПоОбмену.СтатусДокумента = Перечисления.гф_СтатусыДокументаЗагрузкиWMS.Создан;
		ДокументПоОбмену.ДополнительныеСвойства.Вставить("УдалитьПослеОбработки", ФайлОбмена.УдалитьПослеОбработки);
		//ДокументПоОбмену.Файл = Новый ХранилищеЗначения(ПолучитьТекстФайла(ФайлОбмена.Файл));
		Попытка
			ДокументПоОбмену.Записать();
		Исключение
			Сообщение = "Произошла ошибка записи " + СокрЛП(ДокументПоОбмену) + Символы.ПС + ОписаниеОшибки();
			ЗаписатьСообщениеОшибки(Сообщение, Истина, ФайлОбмена.Файл);
			НомерОшибки = НомерОшибки + 1;
			Продолжить;
		КонецПопытки;

		ДокументНайден = Истина;
		Возвращено = Ложь; // Галфинд_ДомнышеваКР_18_01_2024
		НайтиИОбработатьДокумент(Данные, ФайлОбмена, ДокументПоОбмену, ДокументНайден, РасходныйОрдер, Возвращено);

		Если НЕ ДокументНайден ИЛИ Возвращено Тогда
			//Сообщение = "Произошла ошибка. Документ по файлу " + ФайлОбмена.ИмяФайла + " в ИБ не найден.";
			ПереместитьФайлВАрхив(ФайлОбмена.Файл);
			//ЗаписатьСообщениеОшибки(Сообщение, Истина, ФайлОбмена.Файл);
			//НомерОшибки = НомерОшибки + 1;
			Продолжить;
		КонецЕсли;
		
        МассивИменЗагруженныхФайлов.Добавить(ФайлОбмена.ИмяФайла);
		
	КонецЦикла;

КонецПроцедуры// } #wortmann

// #wortmann { 
// Процедура начинает обработку файла.
// Галфинд_Домнышева 2022/12/01 
//
// Параметры:
//  Данные - ТипОбъектаXDTO - полученные файлы с сервера WMS
//	ФайлОбмена - Файл - обрабатываемый файл.
//	ДокументПоОбмену - ДокументСсылка.гф_ДанныеЗагрузкиПоОбмену
//	ДокументНайден - Булево
//	РасходныйОрдер - Булево - если Истина SO, Ложь PO
//	Возвращено - Булево - признак возврата документа при отсутствии необходимых строк в файле
Процедура НайтиИОбработатьДокумент(Данные, ФайлОбмена, ДокументПоОбмену, ДокументНайден, РасходныйОрдер, Возвращено)
	
	КоллекцияДокументовXDTO = Данные.documents.document;
	
	Если ТипЗнч(КоллекцияДокументовXDTO) = Тип("СписокXDTO") Тогда
		Для Каждого ТекущийЭлемент Из КоллекцияДокументовXDTO Цикл 
			НайденныйДокументОбъект = ПолучитьДокумент(ТекущийЭлемент, ФайлОбмена, РасходныйОрдер); 
			Если НайденныйДокументОбъект <> Неопределено Тогда
				ИзменитьСтатусДокумента(Данные, НайденныйДокументОбъект, ТекущийЭлемент, ФайлОбмена,
										ДокументПоОбмену, РасходныйОрдер, Возвращено);
			Иначе	
				ДокументНайден = Ложь;
				Продолжить;
			КонецЕсли;
		КонецЦикла;
	Иначе
		НайденныйДокументОбъект = ПолучитьДокумент(КоллекцияДокументовXDTO, ФайлОбмена, РасходныйОрдер);
		
		Если НайденныйДокументОбъект <> Неопределено Тогда
			ИзменитьСтатусДокумента(Данные, НайденныйДокументОбъект, КоллекцияДокументовXDTO, ФайлОбмена, 
									ДокументПоОбмену, РасходныйОрдер, Возвращено);
		Иначе
			ДокументНайден = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Возвращено Тогда
		Сообщение = "Произошла ошибка. Файл " + ФайлОбмена.ИмяФайла + " содержит ошибки в составе строк ""lines"".";
		ЗаписатьСообщениеОшибки(Сообщение, Истина, ФайлОбмена.Файл);
		НомерОшибки = НомерОшибки + 1;
	КонецЕсли;
	
КонецПроцедуры// } #wortmann 

// #wortmann { 
// Процедура формирует запись в РС гф_ДанныеВыгрузки о том что файл доставлен
// Галфинд_Домнышева 2023/12/19
//
// Параметры:
//	Данные - ТипОбъектаXDTO - полученные файлы с сервера WMS
//  НайденныйДокументОбъект - ДокументОбъект.ПриходныйОрдерНаТовары, ДокументОбъект.РасходныйОрдерНаТовары 
//	КоллекцияДокументовXDTO - ОбъектXDTO
//	ФайлОбмена - Файл - обрабатываемый файл. 
//	ДокументПоОбмену - Строка - значение ТЭГ "ID" обрабатываемого файла
//	РасходныйОрдер - Булево - истина, если обрабатываемый интерфейс SO, Иначе Ложь
//	Возвращено - Булево - признак НЕзаписи из-за пустых строк
Процедура ИзменитьСтатусДокумента(Данные, НайденныйДокументОбъект, КоллекцияДокументовXDTO, ФайлОбмена,
									ДокументПоОбмену, РасходныйОрдер, Возвращено)
									
	Если РасходныйОрдер Тогда
		ИзменитьСтатусДокументаРасход(Данные, НайденныйДокументОбъект, КоллекцияДокументовXDTO, ФайлОбмена,
		ДокументПоОбмену, Возвращено);
	Иначе
		ИзменитьСтатусДокументаПриход(Данные, НайденныйДокументОбъект, КоллекцияДокументовXDTO, ФайлОбмена,
		ДокументПоОбмену, Возвращено); 
	КонецЕсли;	
	
КонецПроцедуры// } #wortmann

// #wortmann { 
// Процедура формирует запись в РС гф_ДанныеВыгрузки о том что файл доставлен
// Галфинд_Домнышева 2023/12/19
//
// Параметры:
//	Данные - ТипОбъектаXDTO - полученные файлы с сервера WMS
//  НайденныйДокументОбъект - ДокументОбъект.ПриходныйОрдерНаТовары, ДокументОбъект.РасходныйОрдерНаТовары 
//	КоллекцияДокументовXDTO - ОбъектXDTO
//	ФайлОбмена - Файл - обрабатываемый файл. 
//	ДокументПоОбмену - Строка - значение ТЭГ "ID" обрабатываемого файла
//	Возвращено - Булево - признак НЕзаписи из-за пустых строк
Процедура ИзменитьСтатусДокументаРасход(Данные, НайденныйДокументОбъект, КоллекцияДокументовXDTO, ФайлОбмена,
									ДокументПоОбмену, Возвращено)
	
	Статус = КоллекцияДокументовXDTO.header.status;
	ID = Данные.id;
	НужнаЗапись = Ложь; // Галфинд_ДомнышеваКР_26_01_2024
	
	СтатусКОтбору = (НайденныйДокументОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтбору);
	СтатусПроверен = (НайденныйДокументОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.Проверен);
	СтатусКОтгрузке = (НайденныйДокументОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтгрузке);
	
	Если Статус = "IMPORTED" И СтатусКОтбору Тогда
		НайденныйДокументОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.Проверен;
		ПереместитьФайлВАрхив(ФайлОбмена.Файл);
		ПоложитьЗаписьВРСДанныеВыгрузки(НайденныйДокументОбъект, ФайлОбмена, ID);
		НужнаЗапись = Истина; // Галфинд_ДомнышеваКР_26_01_2024
	ИначеЕсли Статус = "PICKED" И СтрНайти(ФайлОбмена.ИмяФайла, "BL") Тогда
		Попытка
			НайденныйДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ПереместитьФайлВАрхив(ФайлОбмена.Файл);	
		Исключение
			Сообщение = "Произошла ошибка проведения документа корректировки назначения " 
			+ НайденныйДокументОбъект.Ссылка + Символы.ПС + ОписаниеОшибки();
			ДобавитьСтрокуВТекстыОшибки(Сообщение, Истина, ФайлОбмена.Файл, НайденныйДокументОбъект.Ссылка);
		КонецПопытки;
		// ++ Галфинд_ДомнышеваКР_15_02_2024	
	ИначеЕсли Статус = "PICKED" И НЕ СтрНайти(ФайлОбмена.ИмяФайла, "BL") И СтатусКОтбору Тогда
		НайденныйДокументОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.Проверен;
		Попытка
			НайденныйДокументОбъект.ДополнительныеСвойства.Вставить("гф_ОбменСоСкладом", Истина);
			НайденныйДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			НайденныйДокументОбъект.Записать(РежимЗаписиДокумента.Запись); // Галфинд_ДомнышеваКР_19_01_2024 временно для отладки
			МенеджерОбработкиОшибок = Новый МенеджерОбработкиОшибок;
			Сообщение = "Произошла ошибка при проведении расходного ордера " 
			+ НайденныйДокументОбъект.Ссылка + " документ записан." + Символы.ПС 
			+ МенеджерОбработкиОшибок.ПредставлениеОшибкиДляПользователя(ИнформацияОбОшибке());
			ДобавитьСтрокуВТекстыОшибки(Сообщение, Истина, ФайлОбмена.Файл, НайденныйДокументОбъект.Ссылка);
		КонецПопытки;
		
		ПроизвестиЗаполнениеИзменениеТабличныхЧастейДокумента(НайденныйДокументОбъект,
		КоллекцияДокументовXDTO, ФайлОбмена, Возвращено);
		Если Возвращено Тогда
			Возврат;
		КонецЕсли;
		НайденныйДокументОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтгрузке;
		ПереместитьФайлВАрхив(ФайлОбмена.Файл);
		НужнаЗапись = Истина; 
		// -- Галфинд_ДомнышеваКР_15_02_2024
	ИначеЕсли Статус = "PICKED" И НЕ СтрНайти(ФайлОбмена.ИмяФайла, "BL") И СтатусПроверен Тогда
		ПроизвестиЗаполнениеИзменениеТабличныхЧастейДокумента(НайденныйДокументОбъект,
		КоллекцияДокументовXDTO, ФайлОбмена, Возвращено);
		// ++ Галфинд_ДомнышеваКР_18_01_2024
		Если Возвращено Тогда
			Возврат;
		КонецЕсли;
		// -- Галфинд_ДомнышеваКР_18_01_2024
		НайденныйДокументОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтгрузке;
		ПереместитьФайлВАрхив(ФайлОбмена.Файл);
		НужнаЗапись = Истина; // Галфинд_ДомнышеваКР_26_01_2024
	ИначеЕсли Статус = "SHIPPED" И СтатусКОтгрузке Тогда
		НайденныйДокументОбъект.ДатаОтгрузки = ПолучитьДатуИзСтроки(Данные.date);// Галфинд_ДомнышеваКР_27_03_2024
		НайденныйДокументОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
		ПереместитьФайлВАрхив(ФайлОбмена.Файл);
		НужнаЗапись = Истина; // Галфинд_ДомнышеваКР_26_01_2024
		
	ИначеЕсли Статус = "SHIPPED" И СтатусПроверен Тогда
		НайденныйДокументОбъект.ДатаОтгрузки = ПолучитьДатуИзСтроки(Данные.date);// Галфинд_ДомнышеваКР_27_03_2024
		ПроизвестиПроверкуТЧФайлаИЗаписьДокумента(НайденныйДокументОбъект,
		КоллекцияДокументовXDTO, ФайлОбмена, Возвращено);
		
	Иначе
		Сообщение = "Файл " + ФайлОбмена.ИмяФайла + " содержит пустой или неправильный статус. 
		|Документ не обработан. Файл перемещён в архив.";
		ДобавитьСтрокуВТекстыОшибки(Сообщение, Истина, ФайлОбмена.Файл, НайденныйДокументОбъект.Ссылка);
		ПереместитьФайлВАрхив(ФайлОбмена.Файл);
	КонецЕсли;
	
	Если НужнаЗапись Тогда // Галфинд_ДомнышеваКР_26_01_2024
	Попытка
		НайденныйДокументОбъект.ДополнительныеСвойства.Вставить("гф_ОбменСоСкладом", Истина);
		НайденныйДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		НайденныйДокументОбъект.Записать(РежимЗаписиДокумента.Запись); // Галфинд_ДомнышеваКР_19_01_2024 временно для отладки
		МенеджерОбработкиОшибок = Новый МенеджерОбработкиОшибок;
		Сообщение = "Произошла ошибка при проведении расходного ордера " 
		+ НайденныйДокументОбъект.Ссылка + " документ записан." + Символы.ПС 
		+ МенеджерОбработкиОшибок.ПредставлениеОшибкиДляПользователя(ИнформацияОбОшибке());
		ДобавитьСтрокуВТекстыОшибки(Сообщение, Истина, ФайлОбмена.Файл, НайденныйДокументОбъект.Ссылка);
	КонецПопытки;
	КонецЕсли; // Галфинд_ДомнышеваКР_26_01_2024

	ДокументПоОбмену.СтатусДокумента = Перечисления.гф_СтатусыДокументаЗагрузкиWMS.Отработан;
	ДокументПоОбмену.Объект = НайденныйДокументОбъект.Ссылка; // Добавлено Галфинд_ДомнышеваКР_19_01_2024
	Попытка
		ДокументПоОбмену.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Сообщение = "Произошла ошибка записи " + СокрЛП(ДокументПоОбмену) + Символы.ПС + ОписаниеОшибки();
		ДобавитьСтрокуВТекстыОшибки(Сообщение, Истина, ФайлОбмена.Файл);
	КонецПопытки;
	
КонецПроцедуры// } #wortmann 

// #wortmann { 
// Процедура формирует запись в РС гф_ДанныеВыгрузки о том что файл доставлен
// Галфинд_Домнышева 2023/12/19
//
// Параметры:
//	Данные - ТипОбъектаXDTO - полученные файлы с сервера WMS
//  НайденныйДокументОбъект - ДокументОбъект.ПриходныйОрдерНаТовары, ДокументОбъект.РасходныйОрдерНаТовары 
//	КоллекцияДокументовXDTO - ОбъектXDTO
//	ФайлОбмена - Файл - обрабатываемый файл. 
//	ДокументПоОбмену - Строка - значение ТЭГ "ID" обрабатываемого файла
//	Возвращено - Булево - признак НЕзаписи из-за пустых строк
Процедура ИзменитьСтатусДокументаПриход(Данные, НайденныйДокументОбъект, КоллекцияДокументовXDTO, ФайлОбмена,
									ДокументПоОбмену, Возвращено)
	
	Статус = КоллекцияДокументовXDTO.header.status;
	ID = Данные.id;
	НужнаЗапись = Ложь; // Галфинд_ДомнышеваКР_26_01_2024
	
	СтатусКПоступлению = (НайденныйДокументОбъект.Статус = Перечисления.СтатусыПриходныхОрдеров.КПоступлению);
	СтатусВРаботе = (НайденныйДокументОбъект.Статус = Перечисления.СтатусыПриходныхОрдеров.ВРаботе);
	
	Если Статус = "IMPORTED" И СтатусКПоступлению Тогда
		НайденныйДокументОбъект.Статус = Перечисления.СтатусыПриходныхОрдеров.ВРаботе;
		ПереместитьФайлВАрхив(ФайлОбмена.Файл);
		ПоложитьЗаписьВРСДанныеВыгрузки(НайденныйДокументОбъект, ФайлОбмена, ID);
		НужнаЗапись = Истина; // Галфинд_ДомнышеваКР_26_01_2024
		// ++ Галфинд_ДомнышеваКР_15_02_2024	
	ИначеЕсли Статус = "CLOSED" И СтатусКПоступлению Тогда 
		НайденныйДокументОбъект.Статус = Перечисления.СтатусыПриходныхОрдеров.ВРаботе;
		Попытка
			НайденныйДокументОбъект.ДополнительныеСвойства.Вставить("гф_ОбменСоСкладом", Истина);
			НайденныйДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			НайденныйДокументОбъект.Записать(РежимЗаписиДокумента.Запись); // Галфинд_ДомнышеваКР_19_01_2024 временно для отладки
			МенеджерОбработкиОшибок = Новый МенеджерОбработкиОшибок;
			Сообщение = "Произошла ошибка при проведении приходного ордера " 
			+ НайденныйДокументОбъект.Ссылка + " документ записан." + Символы.ПС 
			+ МенеджерОбработкиОшибок.ПредставлениеОшибкиДляПользователя(ИнформацияОбОшибке());
			ДобавитьСтрокуВТекстыОшибки(Сообщение, Истина, ФайлОбмена.Файл, НайденныйДокументОбъект.Ссылка);
		КонецПопытки;
		
		ПроизвестиПроверкуТЧДокументаПО(НайденныйДокументОбъект, КоллекцияДокументовXDTO, ФайлОбмена.Файл, Возвращено);
		Если Возвращено Тогда
			Возврат;
		КонецЕсли;
		НайденныйДокументОбъект.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
		ПереместитьФайлВАрхив(ФайлОбмена.Файл);
		НужнаЗапись = Истина; 
		// -- Галфинд_ДомнышеваКР_15_02_2024	
	ИначеЕсли Статус = "CLOSED" И СтатусВРаботе Тогда 
		ПроизвестиПроверкуТЧДокументаПО(НайденныйДокументОбъект, КоллекцияДокументовXDTO, ФайлОбмена.Файл, Возвращено);
		// ++ Галфинд_ДомнышеваКР_19_01_2024
		Если Возвращено Тогда
			Возврат;
		КонецЕсли;
		// -- Галфинд_ДомнышеваКР_19_01_2024
		НайденныйДокументОбъект.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
		ПереместитьФайлВАрхив(ФайлОбмена.Файл);
		НужнаЗапись = Истина; // Галфинд_ДомнышеваКР_26_01_2024
	ИначеЕсли Статус = "MOVED" Тогда
		//НайденныйДокументОбъект.Статус = Перечисления.СтатусыПриходныхОрдеров.гф_Перемещен;
		НайтиИОбработатьДокументПеремещения(НайденныйДокументОбъект, КоллекцияДокументовXDTO, ФайлОбмена.Файл);
		ПереместитьФайлВАрхив(ФайлОбмена.Файл);
	Иначе
		Сообщение = "Файл " + ФайлОбмена.ИмяФайла + " содержит пустой или неправильный статус. 
		|Документ не обработан. Файл перемещён в архив.";
		ДобавитьСтрокуВТекстыОшибки(Сообщение, Истина, ФайлОбмена.Файл, НайденныйДокументОбъект.Ссылка);
		ПереместитьФайлВАрхив(ФайлОбмена.Файл);
	КонецЕсли;
	
	Если НужнаЗапись Тогда // Галфинд_ДомнышеваКР_26_01_2024
		Попытка
			НайденныйДокументОбъект.ДополнительныеСвойства.Вставить("гф_ОбменСоСкладом", Истина);
			НайденныйДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			НайденныйДокументОбъект.Записать(РежимЗаписиДокумента.Запись); // Галфинд_ДомнышеваКР_19_01_2024 временно для отладки
			МенеджерОбработкиОшибок = Новый МенеджерОбработкиОшибок;
			Сообщение = "Произошла ошибка при проведении приходного ордера " 
			+ НайденныйДокументОбъект.Ссылка + " документ записан." + Символы.ПС 
			+ МенеджерОбработкиОшибок.ПредставлениеОшибкиДляПользователя(ИнформацияОбОшибке());
			ДобавитьСтрокуВТекстыОшибки(Сообщение, Истина, ФайлОбмена.Файл, НайденныйДокументОбъект.Ссылка);
		КонецПопытки;
	КонецЕсли; // Галфинд_ДомнышеваКР_26_01_2024
	
	ДокументПоОбмену.СтатусДокумента = Перечисления.гф_СтатусыДокументаЗагрузкиWMS.Отработан;
	ДокументПоОбмену.Объект = НайденныйДокументОбъект.Ссылка; // Добавлено Галфинд_ДомнышеваКР_19_01_2024
	Попытка
		ДокументПоОбмену.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Сообщение = "Произошла ошибка записи " + СокрЛП(ДокументПоОбмену) + Символы.ПС + ОписаниеОшибки();
		ДобавитьСтрокуВТекстыОшибки(Сообщение, Истина, ФайлОбмена.Файл);
	КонецПопытки;
	
КонецПроцедуры// } #wortmann

Процедура ПроизвестиПроверкуТЧФайлаИЗаписьДокумента(НайденныйДокументОбъект,
													КоллекцияДокументовXDTO, ФайлОбмена, Возвращено)
													
	ПродолжатьЗагрузку = ПроверкаЗаполненностиСтрокТЧФайла(КоллекцияДокументовXDTO, ФайлОбмена);											
	ПровестиВторойСтатус = Ложь;
	
	Если ПродолжатьЗагрузку Тогда
		ПроизвестиЗаполнениеИзменениеТабличныхЧастейДокумента(НайденныйДокументОбъект,
		КоллекцияДокументовXDTO, ФайлОбмена, Возвращено);
		Если Возвращено Тогда
			Возврат;
		КонецЕсли;
		НайденныйДокументОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтгрузке;
		Попытка
			НайденныйДокументОбъект.ДополнительныеСвойства.Вставить("гф_ОбменСоСкладом", Истина);
			НайденныйДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ПровестиВторойСтатус = Истина;
		Исключение
			
			НайденныйДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			МенеджерОбработкиОшибок = Новый МенеджерОбработкиОшибок;

			Сообщение = "Произошла ошибка при проведении расходного ордера " + НайденныйДокументОбъект.Ссылка 
			+ " документ записан." + Символы.ПС 
			+ МенеджерОбработкиОшибок.ПредставлениеОшибкиДляПользователя(ИнформацияОбОшибке());
			ДобавитьСтрокуВТекстыОшибки(Сообщение, Истина, ФайлОбмена.Файл, НайденныйДокументОбъект.Ссылка);
		КонецПопытки;
		
		Если ПровестиВторойСтатус Тогда
			НайденныйДокументОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
			ПереместитьФайлВАрхив(ФайлОбмена.Файл);
			Попытка
				НайденныйДокументОбъект.ДополнительныеСвойства.Вставить("гф_ОбменСоСкладом", Истина);
				НайденныйДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				НайденныйДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				МенеджерОбработкиОшибок = Новый МенеджерОбработкиОшибок;
				Сообщение = "Произошла ошибка при проведении расходного ордера " 
				+ НайденныйДокументОбъект.Ссылка + " документ записан." + Символы.ПС 
				+ МенеджерОбработкиОшибок.ПредставлениеОшибкиДляПользователя(ИнформацияОбОшибке());
				ДобавитьСтрокуВТекстыОшибки(Сообщение, Истина, ФайлОбмена.Файл, НайденныйДокументОбъект.Ссылка);
			КонецПопытки;
		Иначе
			ПереместитьФайлВАрхив(ФайлОбмена.Файл);
			Сообщение = "Так как расходный ордер только записан, а не проведен, то документ не переведен"
			+ " в финальный статус ""Отгружен""." + НайденныйДокументОбъект.Ссылка;
			ДобавитьСтрокуВТекстыОшибки(Сообщение, Истина, ФайлОбмена.Файл, НайденныйДокументОбъект.Ссылка);
		КонецЕсли;								
	КонецЕсли;

КонецПроцедуры// } #wortmann  

Функция ПроверкаЗаполненностиСтрокТЧФайла(ОбъектXDTO, ФайлОбмена) 
	
	Если ОбъектXDTO.свойства().Получить("lines") <> Неопределено Тогда
		Если ОбъектXDTO.lines.свойства().Получить("line") = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	ЕстьДанные = Ложь; 
	
	СтрокиДокументаXDTO = ОбъектXDTO.lines.line;

	Если ТипЗнч(СтрокиДокументаXDTO) = Тип("СписокXDTO") Тогда
		
		Для Каждого СтрокаXDTO Из СтрокиДокументаXDTO Цикл 
			Если ЗначениеЗаполнено(СтрокаXDTO.Sku) Тогда
				ЕстьДанные = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;	
	Иначе	
		Если ЗначениеЗаполнено(СтрокиДокументаXDTO.Sku) Тогда
			ЕстьДанные = Истина;	
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЕстьДанные; 
	
КонецФункции// } #wortmann 

// #wortmann { 
// Процедура формирует запись в РС гф_ДанныеВыгрузки о том что файл доставлен
// Галфинд_Домнышева 2023/12/19
//
// Параметры:
//  НайденныйДокументОбъект - ДокументОбъект.ПриходныйОрдерНаТовары
//	ФайлОбмена - Файл - обрабатываемый файл. 
//	ID - Строка - значение ТЭГ "ID" обрабатываемого файла
//
Процедура ПоложитьЗаписьВРСДанныеВыгрузки(НайденныйДокументОбъект, ФайлОбмена, ID)
	
	Запись = РегистрыСведений.гф_ДанныеВыгрузки.СоздатьМенеджерЗаписи();
	Запись.Период = ТекущаяДатаСеанса();
	Запись.НомерСообщения = ID;
	Запись.ВидДанных = Перечисления.гф_ВидыДанныхДляВыгрузки.Документ;
	Запись.Документ = НайденныйДокументОбъект.Ссылка;
	Запись.Состояние = Перечисления.гф_СтатусыВыгрузкиДанных.Доставлено;
	Запись.ИмяФайла = ФайлОбмена.Файл;
	Запись.Записать();
	
КонецПроцедуры// } #wortmann

// #wortmann { 
// Процедура проверяет на одинаковость ТЧ документа и из файла и выполняет действия по алгоритму для Расхода
// Галфинд_Домнышева 2023/07/31
//
// Параметры:
//  НайденныйДокументОбъект - ДокументОбъект.РасходныйОрдерНаТовары
//  ОбъектXDTO - ОбъектXDTO 
//	ФайлОбмена - Файл - обрабатываемый файл.
//	Возвращено - Булево - признак НЕзаписи из-за пустых строк
Процедура ПроизвестиЗаполнениеИзменениеТабличныхЧастейДокумента(НайденныйДокументОбъект, ОбъектXDTO, ФайлОбмена,
																Возвращено)
	
	ПутьФайла = ФайлОбмена.Файл; 
	
	// ++ Галфинд_ДомнышеваКР_18_01_2024
	Если ОбъектXDTO.свойства().Получить("lines") <> Неопределено Тогда
		Если ОбъектXDTO.lines.свойства().Получить("line") = Неопределено Тогда
			Возвращено = Истина;
			Возврат;
		КонецЕсли;
	Иначе
		Возвращено = Истина;
		Возврат;
	КонецЕсли;
	// -- Галфинд_ДомнышеваКР_18_01_2024
	
	СтрокиДокументаXDTO = ОбъектXDTO.lines.line;
	
	Склад = НайденныйДокументОбъект.Склад;
	ЭтоТаможенныйСклад = ЭтоТаможенныйСклад(Склад);
	СкладПолучательВПарах = НЕ ПроверитьЗначениеСкладВКоробах(Склад);
	ОтгружаемыеТоварыИзФайла = Новый ТаблицаЗначений;
	ТоварыОбувь = Обувь(НайденныйДокументОбъект.Ссылка, Истина);
	
	Если СкладПолучательВПарах Тогда
		// Изменено Галфинд_ДомнышеваКР_26_03_2024
		// Изменен принцип обработки строк документа по упаковкам
		МассивШтрихкодов = Новый Массив;
		ПроанализироватьИДобавитьИсходящиеУЛ(НайденныйДокументОбъект, СтрокиДокументаXDTO, ФайлОбмена, ТоварыОбувь, ОтгружаемыеТоварыИзФайла,
											МассивШтрихкодов);
		ОтгружаемыеТоварыДокумента = ПолучитьОтгружаемыеТовары(НайденныйДокументОбъект, ТоварыОбувь);
	Иначе
		
		ОтгружаемыеТоварыДокумента = ПолучитьОтгружаемыеТоварыДокументаПоУЛ(НайденныйДокументОбъект);
		
		ОтгружаемыеТоварыИзФайла = Новый ТаблицаЗначений;
		ОтгружаемыеТоварыИзФайла.Колонки.Добавить("УпаковочныйЛист");
		ОтгружаемыеТоварыИзФайла.Колонки.Добавить("КоличествоУпаковок");	
		
		МассивШтрихкодов = Новый Массив; // ++ Галфинд_ДомнышеваКР_19_01_2024
		Если ТипЗнч(СтрокиДокументаXDTO) = Тип("СписокXDTO") Тогда
			
			Для Каждого СтрокаXDTO Из СтрокиДокументаXDTO Цикл 
				ЗаписатьСтрокуОтгружаемыеТоварыПоУЛ(НайденныйДокументОбъект, СтрокаXDTO, ОтгружаемыеТоварыИзФайла, 
												ПутьФайла, МассивШтрихкодов);
			КонецЦикла;	
		Иначе	
			ЗаписатьСтрокуОтгружаемыеТоварыПоУЛ(НайденныйДокументОбъект, СтрокиДокументаXDTO, ОтгружаемыеТоварыИзФайла,
												ПутьФайла, МассивШтрихкодов);
		КонецЕсли;	
		
	КонецЕсли;
																
	ОтгружаемыеТоварыОдинаковы = СравнитьТаблицыОтгружаемыхТоваров(ОтгружаемыеТоварыДокумента,
																	ОтгружаемыеТоварыИзФайла);
	// ++ Галфинд_ДомнышеваКР_19_01_2024																
	Если ТоварыОбувь ИЛИ НЕ СкладПолучательВПарах Тогда																
		ЗаполнитьШтрихкодыУпаковки(НайденныйДокументОбъект, МассивШтрихкодов, ПутьФайла);
	КонецЕсли;
	// -- Галфинд_ДомнышеваКР_19_01_2024
	Если ОтгружаемыеТоварыОдинаковы И НЕ ЭтоТаможенныйСклад Тогда
		ПоменятьДействиеВТабличнойЧасти(НайденныйДокументОбъект, ПутьФайла);
	ИначеЕсли НЕ ОтгружаемыеТоварыОдинаковы И НЕ ЭтоТаможенныйСклад	Тогда
		ПерезаполнитьДействиеТЧОтгружаемыеТовары(НайденныйДокументОбъект, ОтгружаемыеТоварыИзФайла,
												ОтгружаемыеТоварыДокумента);
	Иначе
		ЗаписатьКомментарийПересортицаИЛИНедопоставка(НайденныйДокументОбъект, ОтгружаемыеТоварыИзФайла,
											ОтгружаемыеТоварыДокумента, ОтгружаемыеТоварыОдинаковы, СкладПолучательВПарах);
	КонецЕсли;
   
КонецПроцедуры// } #wortmann 

// #wortmann { 
// Функция формирует ТЗ по Расходу Парный Склад по данным из файла
// Галфинд_Домнышева 2023/12/19
//
// Параметры:
//	СтрокиДокументаXDTO - ОбъектXDTO/СписокXDTO
//  НайденныйДокументОбъект - ДокументОбъект.ПриходныйОрдерНаТовары
//	ПутьФайла - Строка 
//	ТоварыОбувь - Булево - Истина если номенклатура в документе Обувь, иначе Ложь
//
// Возвращаемое значение:
//	ОтгружаемыеТоварыИзФайла - ТаблицаЗначений - сформированная таблица с номенклатурой	
Функция ОбработатьТЧРасходПарныйСклад(СтрокиДокументаXDTO, НайденныйДокументОбъект, ПутьФайла, ТоварыОбувь)
	
	ОписаниеЧисло =  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3));
	ОписаниеНом	=  Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ОписаниеХар =  Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"); 
	ОписаниеШтрих = Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров");
	
	ОтгружаемыеТоварыИзФайла = Новый ТаблицаЗначений;
	ОтгружаемыеТоварыИзФайла.Колонки.Добавить("Номенклатура", ОписаниеНом);
	ОтгружаемыеТоварыИзФайла.Колонки.Добавить("Характеристика", ОписаниеХар);
	ОтгружаемыеТоварыИзФайла.Колонки.Добавить("Количество", ОписаниеЧисло); 
	
	Если ТоварыОбувь Тогда
		
		ОтгружаемыеТоварыИзФайла.Колонки.Добавить("ШтрихкодУпаковки", ОписаниеШтрих);
		
	КонецЕсли;		
	
	Если ТипЗнч(СтрокиДокументаXDTO) = Тип("СписокXDTO") Тогда
		
		Для Каждого СтрокаXDTO Из СтрокиДокументаXDTO Цикл 
			ЗаписатьСтрокуОтгружаемыеТовары(НайденныйДокументОбъект, СтрокаXDTO, 
											ОтгружаемыеТоварыИзФайла, ПутьФайла, Истина, ТоварыОбувь);
		КонецЦикла;	
	Иначе	
		ЗаписатьСтрокуОтгружаемыеТовары(НайденныйДокументОбъект, СтрокиДокументаXDTO, ОтгружаемыеТоварыИзФайла, ПутьФайла, 
		Истина, ТоварыОбувь);
	КонецЕсли; 
	
	Возврат ОтгружаемыеТоварыИзФайла;
	
КонецФункции// } #wortmann 

// #wortmann { 
// Функция формирует ТЧ Документа Расходного Ордера для сравнения в зависимости от вида номенклатуры
// Галфинд_Домнышева 2023/12/19
//
// Параметры:
//	НайденныйДокументОбъект - ДокументОбъект.ПриходныйОрдерНаТовары
//	ТоварыОбувь - Булево - Истина если номенклатура в документе Обувь, иначе Ложь
//
// Возвращаемое значение:
//	ТаблицаЗначений - сформированная таблица с номенклатурой
Функция ПолучитьОтгружаемыеТовары(НайденныйДокументОбъект, ТоварыОбувь) 
	
	//Если ТоварыОбувь Тогда
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//		"ВЫБРАТЬ
	//		|	ШтрихкодыУпаковок.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	//		|	РасходныйОрдерОтгружаемыеТовары.Номенклатура КАК Номенклатура,
	//		|	РасходныйОрдерОтгружаемыеТовары.Характеристика КАК Характеристика,
	//		|	1 КАК Количество
	//		|ИЗ
	//		|	Документ.РасходныйОрдерНаТовары.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
	//		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары.ОтгружаемыеТовары КАК РасходныйОрдерОтгружаемыеТовары
	//		|		ПО ШтрихкодыУпаковок.Ссылка = РасходныйОрдерОтгружаемыеТовары.Ссылка
	//		|			И ШтрихкодыУпаковок.ШтрихкодУпаковки.Номенклатура = РасходныйОрдерОтгружаемыеТовары.Номенклатура
	//		|			И ШтрихкодыУпаковок.ШтрихкодУпаковки.Характеристика = РасходныйОрдерОтгружаемыеТовары.Характеристика
	//		|ГДЕ
	//		|	ШтрихкодыУпаковок.Ссылка = &Ссылка
	//		|	И НЕ РасходныйОрдерОтгружаемыеТовары.Номенклатура ЕСТЬ NULL";
	//		
	//	Запрос.УстановитьПараметр("Ссылка", НайденныйДокументОбъект.Ссылка);
	//	
	//	РезультатЗапроса = Запрос.Выполнить();
	//	ОтгружаемыеТоварыДокумента = РезультатЗапроса.Выгрузить();
	//	
	//Иначе
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ЭтоУпаковочныйЛист", Ложь);
		ОтгружаемыеТоварыДокумента1 = НайденныйДокументОбъект.ОтгружаемыеТовары.Выгрузить();
		ОтгружаемыеТоварыДокумента = ОтгружаемыеТоварыДокумента1.Скопировать(СтруктураОтбора);
		ОтгружаемыеТоварыДокумента.Свернуть("Номенклатура, Характеристика, УпаковочныйЛистРодитель", "Количество");
		ТоварыДокумента = ОтгружаемыеТоварыДокумента.Скопировать(, "Номенклатура, Характеристика, Количество");
	//КонецЕсли; 
	
	Возврат ТоварыДокумента;
	
КонецФункции// } #wortmann	

// #wortmann { 
// Процедура проверяет на одинаковость ТЧ документа и из файла и выполняет действия по алгоритму
// Галфинд_Домнышева 2023/07/31
//
// Параметры:
//  НайденныйДокументОбъект - ДокументОбъект.ПриходныйОрдерНаТовары
//  ОбъектXDTO - ОбъектXDTO 
//	ПутьФайла - Строка
Процедура ПроизвестиПроверкуТЧДокументаПО(НайденныйДокументОбъект, ОбъектXDTO, ПутьФайла, Возвращено)
	
	// ++ Галфинд_ДомнышеваКР_19_01_2024
	Если ОбъектXDTO.свойства().Получить("lines") <> Неопределено Тогда
		Если ОбъектXDTO.lines.свойства().Получить("line") = Неопределено Тогда
			Возвращено = Истина;
			Возврат;
		КонецЕсли;
	Иначе
		Возвращено = Истина;
		Возврат;
	КонецЕсли;
	// -- Галфинд_ДомнышеваКР_19_01_2024

	СтрокиДокументаXDTO = ОбъектXDTO.lines.line;
	
	Склад = НайденныйДокументОбъект.Склад;
	ЭтоТаможенныйСклад = ЭтоТаможенныйСклад(Склад);
	ЭтоОсновнойСклад = ЭтоОсновнойСклад(Склад);
	ЭтоСкладНедостачи = ЭтоСкладНедостачи(Склад); 
	// Закомментированно Галфинд_ДомнышеваКР_26_02_2024 (делаем проверку УЛ на складе, ставим признак "НеНайден")
	// Если ЭтоТаможенныйСклад Тогда
	//	Возврат;
	// КонецЕсли;
	ОтгружаемыеТоварыИзФайла = Новый ТаблицаЗначений;
	СкладПолучательВПарах = НЕ ПроверитьЗначениеСкладВКоробах(Склад);
    МассивШтрихкодовИзФайла = Новый Массив;
	
	Если СкладПолучательВПарах Тогда
		
		 ОбработатьТЧПОПарныйСклад(СтрокиДокументаXDTO, НайденныйДокументОбъект, ПутьФайла);
		  
	Иначе
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ЭтоУпаковочныйЛист", Истина);
		ТоварыДокумента1 = НайденныйДокументОбъект.Товары.Выгрузить();
		ТоварыДокумента = ТоварыДокумента1.Скопировать(СтруктураОтбора);
		ТоварыДокумента.Свернуть("УпаковочныйЛист, КоличествоУпаковок");
		
		ОтгружаемыеТоварыИзФайла = Новый ТаблицаЗначений;
		ОтгружаемыеТоварыИзФайла.Колонки.Добавить("УпаковочныйЛист");
		ОтгружаемыеТоварыИзФайла.Колонки.Добавить("КоличествоУпаковок");	
		
		Если ТипЗнч(СтрокиДокументаXDTO) = Тип("СписокXDTO") Тогда
			
			МассивШтрихкодов = Новый Массив;
			Для Каждого СтрокаXDTO Из СтрокиДокументаXDTO Цикл 
				ЗаписатьСтрокуОтгружаемыеТоварыПоУЛ(НайденныйДокументОбъект, СтрокаXDTO, ОтгружаемыеТоварыИзФайла,
													ПутьФайла, МассивШтрихкодов);
			КонецЦикла;	
		Иначе	
			ЗаписатьСтрокуОтгружаемыеТоварыПоУЛ(НайденныйДокументОбъект, СтрокиДокументаXDTO, ОтгружаемыеТоварыИзФайла, 
												ПутьФайла, МассивШтрихкодов);
		КонецЕсли;	
		ОтгружаемыеТоварыОдинаковы = СравнитьТаблицыОтгружаемыхТоваров(ТоварыДокумента, ОтгружаемыеТоварыИзФайла);
		
		Если НЕ ОтгружаемыеТоварыОдинаковы Тогда
			
			УдалитьСтрокуИзТЧТовары(НайденныйДокументОбъект, ОтгружаемыеТоварыИзФайла, СкладПолучательВПарах,
									ТоварыДокумента, ЭтоТаможенныйСклад);
			//ПерезаполнитьТЧОтгружаемыеТовары(НайденныйДокументОбъект, ОтгружаемыеТоварыИзФайла);
		КонецЕсли;

	КонецЕсли;	

КонецПроцедуры// } #wortmann 

// #wortmann { 
// Процедура сравнивает и обрабатывает ТЧ по Приходу Парный Склад
// Галфинд_Домнышева 2023/12/19
//
// Параметры:
//	СтрокиДокументаXDTO - ОбъектXDTO/СписокXDTO
//  НайденныйДокументОбъект - ДокументОбъект.ПриходныйОрдерНаТовары
//	ПутьФайла - Строка
Процедура ОбработатьТЧПОПарныйСклад(СтрокиДокументаXDTO, НайденныйДокументОбъект, ПутьФайла)
	
	ТоварыОбувь = Обувь(НайденныйДокументОбъект.Ссылка, Ложь);
	ТоварыДокумента = ПреобразоватьТоварыИзДокументаПО(НайденныйДокументОбъект, ТоварыОбувь);
   
	ОписаниеЧисло =  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3));
	ОписаниеНом	=  Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ОписаниеХар =  Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"); 
	ОписаниеШтрих = Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров");
	
	ОтгружаемыеТоварыИзФайла = Новый ТаблицаЗначений;
	
	ОтгружаемыеТоварыИзФайла.Колонки.Добавить("Номенклатура", ОписаниеНом);
	ОтгружаемыеТоварыИзФайла.Колонки.Добавить("Характеристика", ОписаниеХар );
	ОтгружаемыеТоварыИзФайла.Колонки.Добавить("Количество", ОписаниеЧисло);
	Если ТоварыОбувь Тогда
		ОтгружаемыеТоварыИзФайла.Колонки.Добавить("ШтрихкодУпаковки", ОписаниеШтрих);
	КонецЕсли;	
	
	Если ТипЗнч(СтрокиДокументаXDTO) = Тип("СписокXDTO") Тогда
		
		Для Каждого СтрокаXDTO Из СтрокиДокументаXDTO Цикл 
			ЗаписатьСтрокуОтгружаемыеТовары(НайденныйДокументОбъект, СтрокаXDTO, 
											ОтгружаемыеТоварыИзФайла, ПутьФайла, Ложь, ТоварыОбувь);
		КонецЦикла;	
	Иначе	
		ЗаписатьСтрокуОтгружаемыеТовары(НайденныйДокументОбъект, СтрокиДокументаXDTO, 
										ОтгружаемыеТоварыИзФайла, ПутьФайла, Ложь, ТоварыОбувь);
	КонецЕсли;
	
	ВиртуальныеСклады = _омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначениеМассив("гф_ВиртуальныеСклады");
	
	Если ВиртуальныеСклады.Найти(НайденныйДокументОбъект.Отправитель) <> Неопределено Тогда
		СравнитьИзменитьТЧТоварыДокумента(НайденныйДокументОбъект, ТоварыДокумента, ОтгружаемыеТоварыИзФайла, 
											ПутьФайла, Истина);
	Иначе
		СравнитьИзменитьТЧТоварыДокумента(НайденныйДокументОбъект, ТоварыДокумента, ОтгружаемыеТоварыИзФайла, ПутьФайла);
	КонецЕсли;

КонецПроцедуры// } #wortmann 

// #wortmann { 
// Функция формирует ТЧ Документа для сравнения в зависимости от вида номенклатуры
// Галфинд_Домнышева 2023/12/19
//
// Параметры:
//	НайденныйДокументОбъект - ДокументОбъект.ПриходныйОрдерНаТовары
//	ТоварыОбувь - Булево - Истина если номенклатура в документе Обувь, иначе Ложь
//
// Возвращаемое значение:
//	ТаблицаЗначений - сформированная таблица с номенклатурой
Функция ПреобразоватьТоварыИзДокументаПО(НайденныйДокументОбъект, ТоварыОбувь)
	
	Если ТоварыОбувь Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтрихкодыУпаковок.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
		|	ПриходныйОрдерНаТоварыТовары.Номенклатура КАК Номенклатура,
		|	ПриходныйОрдерНаТоварыТовары.Характеристика КАК Характеристика,
		|	1 КАК Количество
		|ИЗ
		|	Документ.ПриходныйОрдерНаТовары.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
		|		ПО ШтрихкодыУпаковок.Ссылка = ПриходныйОрдерНаТоварыТовары.Ссылка
		|			И ШтрихкодыУпаковок.ШтрихкодУпаковки.Номенклатура = ПриходныйОрдерНаТоварыТовары.Номенклатура
		|			И ШтрихкодыУпаковок.ШтрихкодУпаковки.Характеристика = ПриходныйОрдерНаТоварыТовары.Характеристика
		|ГДЕ
		|	ШтрихкодыУпаковок.Ссылка = &Ссылка
		|	И НЕ ПриходныйОрдерНаТоварыТовары.Номенклатура ЕСТЬ NULL";
		
		Запрос.УстановитьПараметр("Ссылка", НайденныйДокументОбъект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Возврат РезультатЗапроса.Выгрузить();
	Иначе
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ЭтоУпаковочныйЛист", Ложь);
		ТоварыДокумента1 = НайденныйДокументОбъект.Товары.Выгрузить();
		ТоварыДокумента = ТоварыДокумента1.Скопировать(СтруктураОтбора);
		ТоварыДокумента.Свернуть("Номенклатура, Характеристика, Количество"); 
		Возврат ТоварыДокумента;
	КонецЕсли;

КонецФункции// } #wortmann

// #wortmann { 
// Создает или добавляет строки к созданной таблице номенклатуры по Штрихкодам из Файла
// Галфинд_Домнышева 2023/12/19
//
// Параметры:
//	СтрокиДокументаXDTO - ОбъектXDTO/СписокXDTO
//	ТаблицаТоваровИзФайла - ТаблицаЗначений
Процедура  ПолучитьТаблицуШтрихкодТоварИзФайла(СтрокиДокументаXDTO, ТаблицаТоваровИзФайла = Неопределено) 
	
	МассивСторкШтрихкодов = Новый Массив;
	
	Если ТипЗнч(СтрокиДокументаXDTO.serials.serial) = Тип("СписокXDTO") Тогда
		
		Для Каждого СтрокаXDTO Из СтрокиДокументаXDTO.serials.seria Цикл 
			МассивСторкШтрихкодов.Добавить(СтрокаXDTO);
		КонецЦикла;	
	Иначе	
		МассивСторкШтрихкодов.Добавить(СтрокаXDTO);
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтрихкодыУпаковокТоваров.Ссылка КАК Штрихкод
		|ПОМЕСТИТЬ Штрихкоды
		|ИЗ
		|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|ГДЕ
		|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода В(&МассивСторкШтрихкодов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка КАК Агрегат,
		|	Штрихкоды.Штрихкод КАК Штрихкод,
		|	АВТОНОМЕРЗАПИСИ() КАК Номер
		|ПОМЕСТИТЬ САгрегатом
		|ИЗ
		|	Штрихкоды КАК Штрихкоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
		|		ПО (ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод = Штрихкоды.Штрихкод)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	САгрегатом.Штрихкод КАК Штрихкод,
		|	САгрегатом.Штрихкод.Номенклатура КАК Номенклатура,
		|	САгрегатом.Штрихкод.Характеристика КАК Характеристика,
		|	САгрегатом.Штрихкод.Количество КАК Количество,
		|	УпаковочныйЛист.Ссылка КАК УЛ,
		|	САгрегатом.Номер - 1 КАК Индекс
		|ИЗ
		|	САгрегатом КАК САгрегатом
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист КАК УпаковочныйЛист
		|		ПО САгрегатом.Агрегат = УпаковочныйЛист.гф_Агрегация";
	
	Запрос.УстановитьПараметр("МассивСторкШтрихкодов", МассивСторкШтрихкодов);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если ТаблицаТоваровИзФайла = Неопределено Тогда
		ТаблицаТоваровИзФайла = РезультатЗапроса.Выгрузить();
	Иначе
		Пока Выборка.Следующий() Цикл
			 ЗаполнитьЗначенияСвойств(ТаблицаТоваровИзФайла.Добавить(), Выборка);
		КонецЦикла;	
	КонецЕсли; 
	
КонецПроцедуры// } #wortmann

// #wortmann { 
// Сравнивает две ТЗ и удаляет лишние строки
// Галфинд_Домнышева 2023/12/19
//
// Параметры:
//	НайденныйДокументОбъект - ДокументОбъект.ПриходныйОрдерНаТовары
//	ТоварыДокумента - ТаблицаЗначений 
//	ОтгружаемыеТоварыИзФайла -ТаблицаЗначений 
//	ПутьФайла - Строка
//	СоздатьНовыйПО - Булево - по умолчанию Ложь (не используется)
Процедура СравнитьИзменитьТЧТоварыДокумента(НайденныйДокументОбъект, ТоварыДокумента, ОтгружаемыеТоварыИзФайла,
											ПутьФайла, СоздатьНовыйПО = Ложь)
	
	ОтгружаемыеТоварыОдинаковы = СравнитьТаблицыОтгружаемыхТоваров(ТоварыДокумента, ОтгружаемыеТоварыИзФайла);
		
	Если ОтгружаемыеТоварыОдинаковы Тогда
	    Возврат;
	КонецЕсли;
	
	ТЧТовары = НайденныйДокументОбъект.Товары;
	
	МассивСтрокКУдалению = Новый Массив();
	МассивУдаляемыхШтрихкодов = Новый Массив();

	ТоварыИзФайлаБезШтрихкода = ОтгружаемыеТоварыИзФайла.Скопировать();
	ТоварыИзФайлаБезШтрихкода.Свернуть("Номенклатура, Характеристика", "Количество");
	
	Для каждого Строка Из ТЧТовары Цикл
		
	    СтруктураОтбора = Новый Структура("Номенклатура, Характеристика");		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, Строка);
	    МассивНайденныхВариантов = ТоварыИзФайлаБезШтрихкода.НайтиСтроки(СтруктураОтбора);
		Если МассивНайденныхВариантов.Количество() > 0 Тогда
			СтруктураКоличества = Новый Структура("Номенклатура, Характеристика, Количество");
			ЗаполнитьЗначенияСвойств(СтруктураКоличества, Строка);
			МассивКоличества = ТоварыИзФайлаБезШтрихкода.НайтиСтроки(СтруктураКоличества);
            Если МассивКоличества.Количество() = 0 Тогда
				Строка.Количество = МассивНайденныхВариантов[0].Количество;
				Строка.КоличествоУпаковок = МассивНайденныхВариантов[0].Количество;
				// Сообщение куда-то о том что внеслись изменения
			КонецЕсли;	
		Иначе
			МассивСтрокКУдалению.Добавить(Строка);
	    КонецЕсли;
	КонецЦикла;
	
	Если МассивСтрокКУдалению.Количество() > 0 Тогда
		Для каждого Индекс Из МассивСтрокКУдалению Цикл
			
			ТЧТовары.Удалить(Индекс);
			ШаблонТекста = СтрШаблон("Из ТЧ Товары Приходного ордера %1 удалена строка.", НайденныйДокументОбъект);
			ДобавитьСтрокуВТекстыОшибки(ШаблонТекста, Ложь, ПутьФайла, НайденныйДокументОбъект.Ссылка);
			
		КонецЦикла;
	КонецЕсли; 

	ТаблицаШтрихДокумента = НайденныйДокументОбъект.ШтрихкодыУпаковок;
	ТаблицаШтрихФайла = ОтгружаемыеТоварыИзФайла.Скопировать(, "ШтрихкодУпаковки");
	
	Для каждого Строка Из ТаблицаШтрихДокумента Цикл
		СтруктураОтбора = Новый Структура("ШтрихкодУпаковки");		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, Строка);
		МассивНайденныхВариантов = ТаблицаШтрихФайла.НайтиСтроки(СтруктураОтбора);
		Если МассивНайденныхВариантов.Количество() = 0 Тогда
			МассивУдаляемыхШтрихкодов.Добавить(Строка);
		КонецЕсли;	 
	КонецЦикла;
		
	Если МассивУдаляемыхШтрихкодов.Количество() > 0 Тогда
		
		Для каждого Индекс Из МассивУдаляемыхШтрихкодов Цикл
			
			ТаблицаШтрихДокумента.Удалить(Индекс);
			ШаблонТекста = СтрШаблон("Из ТЧ ШтрихкодыУпаковок Приходного ордера %1 удалена строка с КМ  %2.", 
									НайденныйДокументОбъект, Индекс.ШтрихкодУпаковки);
			ДобавитьСтрокуВТекстыОшибки(ШаблонТекста, Ложь, ПутьФайла, НайденныйДокументОбъект.Ссылка);

		КонецЦикла;
	КонецЕсли;
	
	// Галфинд_Домнышева_19_12_2023 - функционал убран (так есть кнопка на форме заявки на возврат)
	// Если СоздатьНовыйПО Тогда
	//	ОбработкаТЧСозданиеНовогоПО(НайденныйДокументОбъект, МассивУдаляемыхШтрихкодов, МассивСтрокКУдалению, ПутьФайла);
	// КонецЕсли;
	
КонецПроцедуры// } #wortmann 

Процедура ОбработкаТЧСозданиеНовогоПО(НайденныйДокументОбъект, МассивШтрихкодов, МассивТоваров, ПутьФайла)
	
	НовыйПО = НайденныйДокументОбъект.Скопировать();
	НовыйПО.Статус = Перечисления.СтатусыПриходныхОрдеров.КПоступлению;
	ТЧТовары = НовыйПО.Товары;
	ТЧТовары.Очистить();
	
	Для Каждого Строка Из МассивТоваров Цикл
		НоваяСтрока = ТЧТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);	
	КонецЦикла;
	
	ТЧШтрихкоды = НовыйПО.ШтрихкодыУпаковок;
	ТЧШтрихкоды.Очистить();
	
	Для Каждого Строка Из МассивШтрихкодов Цикл
		НоваяСтрока = ТЧШтрихкоды.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);	
	КонецЦикла;
	
	Попытка
		НовыйПО.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
	    ШаблонТекста = СтрШаблон("Не удалось создать новый Приходный Ордер на недостающие строки. Исходный документ %1 .", 
									НайденныйДокументОбъект);
		ДобавитьСтрокуВТекстыОшибки(ШаблонТекста, Ложь, ПутьФайла, НайденныйДокументОбъект.Ссылка);
	КонецПопытки
	
КонецПроцедуры// } #wortmann

// #wortmann { 
// Процедура проверяет на одинаковость ТЧ документа и из файла и выполняет действия по алгоритму
// Галфинд_Домнышева 2023/07/31
//
// Параметры:
//  НайденныйДокументОбъект - ДокументОбъект.ПриходныйОрдерНаТовары
//  ОтгружаемыеТоварыИзФайла - ТаблицаЗначений - заполненная ранее данными из обрабатываемого файла
//	СкладПолучательВПарах - Булево
//	ОтгружаемыеТоварыДокумента - ТаблицаЗначений - заполненная ранее данными из обрабатываемого документа
//	ЭтоТаможенныйСклад - Булево, Истина если склад Таможенный
Процедура УдалитьСтрокуИзТЧТовары(НайденныйДокументОбъект, ОтгружаемыеТоварыИзФайла, СкладПолучательВПарах,
									ОтгружаемыеТоварыДокумента, ЭтоТаможенныйСклад)

	ТоварыДокумента = НайденныйДокументОбъект.Товары; 
	ТЧШтрихкоды = НайденныйДокументОбъект.ШтрихкодыУпаковок;
	
	МассивСтрокКУдалению = Новый Массив();
	МассивУдаляемыхШтрихкодов = Новый Массив;
	
	Для каждого Строка Из ОтгружаемыеТоварыДокумента Цикл
		СтруктураОтбора = Новый Структура("УпаковочныйЛист");		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, Строка);
		МассивНайденныхВариантов = ОтгружаемыеТоварыИзФайла.НайтиСтроки(СтруктураОтбора);
		Если МассивНайденныхВариантов.Количество() > 0 Тогда
			СтруктураКоличества = Новый Структура("УпаковочныйЛист, КоличествоУпаковок");
			ЗаполнитьЗначенияСвойств(СтруктураКоличества, Строка);
			МассивКоличества = ОтгружаемыеТоварыИзФайла.НайтиСтроки(СтруктураКоличества);
			Если МассивКоличества.Количество() = 0 Тогда
				// Стоит уточнить
				НайтиСтрокиИУдалить(ТоварыДокумента, Строка.УпаковочныйЛист, МассивСтрокКУдалению, ТЧШтрихкоды,
				МассивУдаляемыхШтрихкодов);
			КонецЕсли;	 
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЭтоТаможенныйСклад Тогда // Галфинд_ДомнышеваКР_26_02_2024
		
		Если МассивСтрокКУдалению.Количество() > 0 Тогда
			Для каждого Строка Из МассивСтрокКУдалению Цикл
				
				ТоварыДокумента.Удалить(Строка);
				
			КонецЦикла;
		КонецЕсли;
		
		Если МассивУдаляемыхШтрихкодов.Количество() > 0 Тогда
			Для каждого Строка Из МассивУдаляемыхШтрихкодов Цикл
				
				ТЧШтрихкоды.Удалить(Строка);
				
			КонецЦикла;
		КонецЕсли;
	// ++ Галфинд_ДомнышеваКР_26_02_2024 (делаем проверку УЛ на складе, ставим признак "НеНайден")	
	Иначе 
		Если МассивСтрокКУдалению.Количество() > 0 Тогда
			Для каждого Строка Из МассивСтрокКУдалению Цикл
				Если Строка.ЭтоУпаковочныйЛист Тогда
					УЛСсылка = Строка.УпаковочныйЛист;
					УЛОбъект = УЛСсылка.ПолучитьОбъект();
					УЛОбъект.гф_СостояниеКороба = Справочники.гф_СостянияКоробов.НеНайден;
					УЛОбъект.ОбменДанными.Загрузка = Истина;
                    УЛОбъект.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли; 
	// -- Галфинд_ДомнышеваКР_26_02_2024
	
КонецПроцедуры// } #wortmann

// #wortmann { 
// Процедура заполняет массив строк к удалению по ТЧ документа исходя из УЛ
// Галфинд_Домнышева 2023/07/31
//
// Параметры:
//	ТоварыДокумента - ТаблицаЗначений - ТЧ Товары обрабатываемого документа
//	УпаковочныйЛист - ДокументСсылка.УпаковочныйЛист
//	МассивСтрокКУдалению - Массив 
//	ТЧШтрихкоды - ТабличнаяЧасть - ШтрихкодыУпаковок из найденного документа
//	МассивУдаляемыхШтрихкодов - Массив
Процедура НайтиСтрокиИУдалить(ТоварыДокумента, УпаковочныйЛист, МассивСтрокКУдалению, ТЧШтрихкоды,
								МассивУдаляемыхШтрихкодов)
	  	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ЭтоУпаковочныйЛист", Ложь);
	СтруктураОтбора.Вставить("УпаковочныйЛистРодитель", УпаковочныйЛист);

	МассивНайденныхВариантов = ТоварыДокумента.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого Строка Из МассивНайденныхВариантов Цикл
		МассивСтрокКУдалению.Добавить(Строка);
	КонецЦикла;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ЭтоУпаковочныйЛист", Истина);
	СтруктураОтбора.Вставить("УпаковочныйЛист", УпаковочныйЛист);

	МассивНайденныхВариантов = ТоварыДокумента.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого Строка Из МассивНайденныхВариантов Цикл
		МассивСтрокКУдалению.Добавить(Строка);
	КонецЦикла;

	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ШтрихкодУпаковки", УпаковочныйЛист.гф_Агрегация);

	МассивНайденныхШтрихкодов = ТЧШтрихкоды.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого Строка Из МассивНайденныхШтрихкодов Цикл
		МассивУдаляемыхШтрихкодов.Добавить(Строка);
	КонецЦикла;
	
КонецПроцедуры// } #wortmann

Процедура ЗаписатьВсеШтрихкодыИзФайла(СтрокиДокументаXDTO, МассивШтрихкодовИзФайла)
	
	МассивСторкШтрихкодов = Новый Массив;
	
	Если ТипЗнч(СтрокиДокументаXDTO.serials.serial) = Тип("СписокXDTO") Тогда
		
		Для Каждого СтрокаXDTO Из СтрокиДокументаXDTO.serials.serial Цикл 
			МассивСторкШтрихкодов.Добавить(СтрокаXDTO);
		КонецЦикла;	
	Иначе	
		МассивСторкШтрихкодов.Добавить(СтрокаXDTO);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтрихкодыУпаковокТоваров.Ссылка КАК Штрихкод
		|ИЗ
		|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|ГДЕ
		|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода В (&МассивСторкШтрихкодов)";
	
	Запрос.УстановитьПараметр("МассивСторкШтрихкодов", МассивСторкШтрихкодов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивШтрихкодовИзФайла = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Штрихкод");
	
КонецПроцедуры

Процедура СравнитьУдалитьШтрихкодыДокументаФайла(НайденныйДокументОбъект, МассивШтрихкодовИзФайла)
	
	ШтрихкодыИзДокумента = НайденныйДокументОбъект.ШтрихкодыУпаковок.Скопировать();
	ШтрихкодыИзДокумента.Свернуть("ШтрихкодУпаковки");
	МассивИзДокумента = ШтрихкодыИзДокумента.ВыгрузитьКолонку("ШтрихкодУпаковки");
	
	Если МассивИзДокумента.Количество() <> МассивШтрихкодовИзФайла.Количество() Тогда
		ЗаменитьИзФайла = Истина; // Массивы не равны, сравнивать элементы нет смысла.
	Иначе
		Для Каждого Штрихкод Из МассивШтрихкодовИзФайла Цикл
			Если МассивИзДокумента.Найти(Штрихкод) = Неопределено  Тогда
				ЗаменитьИзФайла = Истина; // эти элементы не равны, значит и массивы не равны
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗаменитьИзФайла Тогда
		НайденныйДокументОбъект.ШтрихкодыУпаковок.Очистить();
		НайденныйДокументОбъект.ШтрихкодыУпаковок.ЗагрузитьКолонку(МассивШтрихкодовИзФайла, "ШтрихкодУпаковки");	
	КонецЕсли;
	
КонецПроцедуры

// #wortmann { 
// Процедура Обрабатывает связку ПО-ПТУ-Перемещение
// Галфинд_Домнышева 2024/02/26
//
// Параметры: 
//  НайденныйДокументОбъект - ДокументОбъект.ПриходныйОрдерНаТовары
//	ОбъектXDTO - ОбъектXDTO
//	ПутьФайла - Строка
Процедура НайтиИОбработатьДокументПеремещения(НайденныйДокументОбъект, ОбъектXDTO, ПутьФайла)
	
	// 1. Обработка доп.рекв. у ПТУ
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриходныйОрдерНаТовары.Распоряжение КАК Распоряжение
		|ИЗ
		|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
		|ГДЕ
		|	ПриходныйОрдерНаТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", НайденныйДокументОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	ПТУ = Выборка.Распоряжение;
	КонецЕсли;

	СвойствоПеремещение = НайтиДополнительныйРеквизитПоИдентификатору("гф_Перемещен");
	ОписаниеПВХ = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения");	
	Если ЗначениеЗаполнено(СвойствоПеремещение) Тогда
		ТаблицаСвойствИЗначений = Новый ТаблицаЗначений;
		ТаблицаСвойствИЗначений.Колонки.Добавить("Свойство", ОписаниеПВХ);
		ТаблицаСвойствИЗначений.Колонки.Добавить("Значение");
		СтрокаДопРеквизитов = ТаблицаСвойствИЗначений.Добавить();
		СтрокаДопРеквизитов.Свойство = СвойствоПеремещение;
		СтрокаДопРеквизитов.Значение = Истина;	
		
		УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(ПТУ, ТаблицаСвойствИЗначений);
	КонецЕсли;
	
	// 1.1 Проверка ТЧ при статусе ПО не Принят
	
	Если НайденныйДокументОбъект.Статус <> Перечисления.СтатусыПриходныхОрдеров.Принят Тогда
		
		НайденныйДокументОбъект.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
		Попытка
			НайденныйДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщение = "Документ " + НайденныйДокументОбъект.Ссылка + " провести со статусом ""Принят"" не удалось";
			ЗаписьЖурналаРегистрации("ОбменСWMS", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, Сообщение);
			ДобавитьСтрокуВТекстыОшибки(Сообщение, Истина, ПутьФайла);
		КонецПопытки;
		
		// Проверка УЛ
		Возвращено = Ложь;
		ПроизвестиПроверкуТЧДокументаПО(НайденныйДокументОбъект, ОбъектXDTO, ПутьФайла, Возвращено);
	
	КонецЕсли;
	
	// 2. Ищем Перемещение и ПО/РО по нему
	НайтиИОбработатьСвязкуДокументаПеремещения(НайденныйДокументОбъект, ПутьФайла);	
		
КонецПроцедуры// } #wortmann 

// #wortmann { 
// Процедура Обрабатывает связку ПО-Перемещение (ПО/РО)
// Галфинд_Домнышева 2024/02/26
//
// Параметры: 
//	НайденныйДокументОбъект - ДокументОбъект.ПриходныйОрдерНаТовары
//	ПутьФайла - Строка
Процедура НайтиИОбработатьСвязкуДокументаПеремещения(НайденныйДокументОбъект, ПутьФайла)
		
	Запрос = Новый Запрос;  
	Запрос.Текст = 
		"ВЫБРАТЬ
		// ++ Галфинд_ДомнышеваКР_26_02_2024 
		// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811eecfc4b9829d6a
		|	ВЫРАЗИТЬ(гф_ГлобальныеЗначенияСписок.Значение КАК Справочник.Склады) КАК Склад,
		|	ВЫРАЗИТЬ(гф_ГлобальныеЗначенияСписок.Значение КАК Справочник.Склады).гф_Организация КАК Организация
		|ПОМЕСТИТЬ ОсновныеСклады
		|ИЗ
		|	ПланВидовХарактеристик.гф_ГлобальныеЗначения.Список КАК гф_ГлобальныеЗначенияСписок
		|ГДЕ
		|	гф_ГлобальныеЗначенияСписок.Ссылка.Ключ = ""гф_ГлобальныеЗначенияОсновнойСклад""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(гф_ГлобальныеЗначенияСписок.Значение КАК Справочник.Склады) КАК Склад,
		|	ВЫРАЗИТЬ(гф_ГлобальныеЗначенияСписок.Значение КАК Справочник.Склады).гф_Организация КАК Организация
		|ПОМЕСТИТЬ ТаможенныеСклады
		|ИЗ
		|	ПланВидовХарактеристик.гф_ГлобальныеЗначения.Список КАК гф_ГлобальныеЗначенияСписок
		|ГДЕ
		|	гф_ГлобальныеЗначенияСписок.Ссылка.Ключ = ""гф_ГлобальныеЗначенияТаможенныйСклад""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		// -- Галфинд_ДомнышеваКР_26_02_2024
		// Добавлено  Галфинд \ Sakovich 30.01.2024
		|РАЗЛИЧНЫЕ 
		|	ПеремещениеТоваров.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ Перемещение
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
		|			ПО (ПриходныйОрдерНаТовары.Распоряжение = ПриобретениеТоваровУслуг.Ссылка)
		|		ПО ПеремещениеТоваров.ДокументОснование = ПриобретениеТоваровУслуг.Ссылка
		|ГДЕ
		|	ПриходныйОрдерНаТовары.Ссылка = &Ссылка
		// -- Галфинд_ДомнышеваКР_26_02_2024
        // e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811eecfc4b9829d6a
		|	И ПеремещениеТоваров.Проведен
		|	И ПеремещениеТоваров.СкладОтправитель В
		|			(ВЫБРАТЬ
		|				Т.Склад
		|			ИЗ
		|				ТаможенныеСклады КАК Т)
		|	И ПеремещениеТоваров.СкладПолучатель В
		|			(ВЫБРАТЬ
		|				Т.Склад
		|			ИЗ
		|				ОсновныеСклады КАК Т)
		// -- Галфинд_ДомнышеваКР_26_02_2024
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПриходныйОрдерНаТовары.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ДокументПО
		|ИЗ
		|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
		|ГДЕ
		|	ПриходныйОрдерНаТовары.Распоряжение В
		|			(ВЫБРАТЬ
		|				Перемещение.Ссылка
		|			ИЗ
		|				Перемещение КАК Перемещение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ДокументРО
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
		|ГДЕ
		|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение В
		|			(ВЫБРАТЬ
		|				Перемещение.Ссылка
		|			ИЗ
		|				Перемещение КАК Перемещение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументПО.Ссылка КАК ДокументПО,
		|	ДокументРО.Ссылка КАК ДокументРО
		|ИЗ
		|	ДокументПО КАК ДокументПО,
		|	ДокументРО КАК ДокументРО";
	
	Запрос.УстановитьПараметр("Ссылка", НайденныйДокументОбъект.Ссылка);
	
	// vvv Галфинд \ Sakovich 30.01.2024
	//РезультатЗапроса = Запрос.Выполнить();
	//Выборка = РезультатЗапроса.Выбрать();
	ПакетРезультатов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	РезультатЗапроса = ПакетРезультатов[ПакетРезультатов.ВГраница()];
	// ^^^ Галфинд \ Sakovich 30.01.2024
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();   // Добавлено  Галфинд \ Sakovich 30.01.2024
		Выборка.Следующий();
		
		// vvv Галфинд \ Sakovich 30.01.2024  - может быть NULL и опечатка - не может быть Приходным ордером
		//Если Выборка.ДокументРО <> Документы.ПриходныйОрдерНаТовары.ПустаяСсылка() Тогда
		Если ЗначениеЗаполнено(Выборка.ДокументРО) Тогда
		// ^^^ Галфинд \ Sakovich 30.01.2024
			ОбъектРО = Выборка.ДокументРО.ПолучитьОбъект();
			ОбъектРО.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
			
		    Попытка
				ОбъектРО.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Сообщение = "Документ " + Выборка.ДокументРО + " провести со статусом ""Отгружен"" не удалось";
				ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, Сообщение);
				ДобавитьСтрокуВТекстыОшибки(Сообщение, Истина, ПутьФайла);
			КонецПопытки;
         КонецЕсли;
		
		// vvv Галфинд \ Sakovich 30.01.2024 - может быть NULL
		//Если Выборка.ДокументПО <> Документы.ПриходныйОрдерНаТовары.ПустаяСсылка() Тогда
		Если ЗначениеЗаполнено(Выборка.ДокументПО) Тогда
		// ^^^ Галфинд \ Sakovich 30.01.2024
			ОбъектПО = Выборка.ДокументПО.ПолучитьОбъект();
			ОбъектПО.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
			УстанавливатьПеремещениюСтатусПринято = Ложь;   //Добавлено  Галфинд \ Sakovich 30.01.2024
			Попытка
				ОбъектПО.Записать(РежимЗаписиДокумента.Проведение);
				УстанавливатьПеремещениюСтатусПринято = Истина;   // Добавлено  Галфинд \ Sakovich 30.01.2024
			Исключение
				Сообщение = "Документ " + Выборка.ДокументПО + " провести со статусом ""Принят"" не удалось";
				ЗаписьЖурналаРегистрации("ОбменСWMS", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, Сообщение);
				ДобавитьСтрокуВТекстыОшибки(Сообщение, Истина, ПутьФайла);
			КонецПопытки;
			// vvv Галфинд \ Sakovich 30.01.2024
			// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811eea55c4fe52e70
			// при конечном ответе со склада по ПО, нужно найти связанный документ "Перемещение товаров"
			// и в нем также поменять статус на "Принято" - если ранее он такм не стоял.
			Если УстанавливатьПеремещениюСтатусПринято Тогда
				ВыборкаПеремещение = ПакетРезультатов[2].Выбрать();
				ВыборкаПеремещение.Следующий();
				обПеремещение = ВыборкаПеремещение["Ссылка"].ПолучитьОбъект();
				Если Не обПеремещение.Статус = Перечисления.СтатусыПеремещенийТоваров.Принято Тогда
					обПеремещение.Статус = Перечисления.СтатусыПеремещенийТоваров.Принято;
					РежимЗаписи = ?(обПеремещение.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
					Попытка
						обПеремещение.Записать(РежимЗаписи);
					Исключение
						ШаблонСообщения = "Документ %1 %2 со статусом ""Принято"" не удалось";
						Сообщение = СтрШаблон(ШаблонСообщения, ВыборкаПеремещение["Ссылка"],
							?(РежимЗаписи = РежимЗаписиДокумента.Проведение, "провести", "записать"));
						ЗаписьЖурналаРегистрации("ОбменСWMS", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, 
							ВыборкаПеремещение["Ссылка"], Сообщение);
						ДобавитьСтрокуВТекстыОшибки(Сообщение, Истина, ПутьФайла);
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			// ^^^ Галфинд \ Sakovich 30.01.2024
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры// } #wortmann 

// #wortmann { 
// Находит значение в ПВХ ДополнительныеРеквизитыИСведения по Идентификатору для формул 
// Галфинд_Домнышева 2022/10/19
//
// Параметры:
//	Наименование - Строка - имя искомого реквизита.
//
// Возвращаемое значение:
//	ПланВидовХарактеристикСсылка - если значение найдено, 
//	Неопределено - если значение реквизита не найдено.
//
Функция НайтиДополнительныйРеквизитПоИдентификатору(Наименование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
		|ГДЕ
		|	ДополнительныеРеквизитыИСведения.ИдентификаторДляФормул = &ИдентификаторДляФормул";
	
	Запрос.УстановитьПараметр("ИдентификаторДляФормул", Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции// } #wortmann

Процедура НайтиИОбработатьДокументыПоРаспоряжению(НайденныйДокументОбъект, ОбъектXDTO) 
	
	Распоряжение = НайденныйДокументОбъект.Распоряжение; 
	
	ЭтоПеремещение = ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ПеремещениеТоваров");
	ЭтоПоступление = ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг"); 
	ЭтоРеализация = ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ЗаказКлиента");
	ЭтоВозврат = ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента");
	
КонецПроцедуры// } #wortmann

Функция СравнитьТаблицыОтгружаемыхТоваров(ОтгружаемыеТоварыДокумента, ОтгружаемыеТоварыИзФайла)
	
	ОтгружаемыеТоварыОдинаковы = Истина;
	
	ТаблицаОтличий = ОбщегоНазначенияУТ.СравнитьТаблицыЗначений(ОтгружаемыеТоварыДокумента, ОтгружаемыеТоварыИзФайла);
	
	Если ТипЗнч(ТаблицаОтличий) = Тип("ТаблицаЗначений") И  ТаблицаОтличий.Количество() > 0 Тогда
		
		ОтгружаемыеТоварыОдинаковы = Ложь;
	КонецЕсли;
	
	Возврат ОтгружаемыеТоварыОдинаковы;
   
КонецФункции// } #wortmann

Процедура ПоменятьДействиеВТабличнойЧасти(НайденныйДокументОбъект, ПутьФайла)

	Для каждого Строка Из НайденныйДокументОбъект.ОтгружаемыеТовары Цикл
		Строка.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
	КонецЦикла;
	
	Попытка
		НайденныйДокументОбъект.Записать();
	Исключение
		Сообщение = "В документе " + НайденныйДокументОбъект.Ссылка 
					+ " не удалось поменять Действие в ТЧ Отгружаемые товары. " + ОписаниеОшибки();
					
		ДобавитьСтрокуВТекстыОшибки(Сообщение, Истина, ПутьФайла, НайденныйДокументОбъект.Ссылка);
	КонецПопытки;
	
КонецПроцедуры// } #wortmann

// #wortmann { 
// Процедура находит нужные строки и заполняет их по ТЧ документа выбранным действием
// Галфинд_Домнышева 2023/07/31
//
// Параметры:
//	НайденныйДокументОбъект - ДокументОбъект.РасходныйОрдерНаТовары
//  ОтгружаемыеТоварыИзФайла - ТаблицаЗначений - заполненная ранее данными из обрабатываемого файла
//	ОтгружаемыеТоварыДокумента - ТаблицаЗначений - ТЧ Товары обрабатываемого документа
Процедура ПерезаполнитьДействиеТЧОтгружаемыеТовары(НайденныйДокументОбъект, ОтгружаемыеТоварыИзФайла,
													ОтгружаемыеТоварыДокумента) 
	
	СкладПолучательВПарах = НЕ ПроверитьЗначениеСкладВКоробах(НайденныйДокументОбъект.Склад);
	ТоварыДокумента = НайденныйДокументОбъект.ОтгружаемыеТовары;
	СтрокиКДобавлению = ТоварыДокумента.ВыгрузитьКолонки(); // Галфинд_ДомнышеваКР_25_01_2024

	Если СкладПолучательВПарах Тогда
		
		Для каждого Строка Из ТоварыДокумента Цикл
			СтруктураОтбора = Новый Структура("Номенклатура, Характеристика");		
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, Строка);
			МассивНайденныхВариантов = ОтгружаемыеТоварыИзФайла.НайтиСтроки(СтруктураОтбора);
			Если МассивНайденныхВариантов.Количество() > 0 И ЗначениеЗаполнено(Строка.УпаковочныйЛистРодитель) Тогда
				СтруктураКоличества = Новый Структура("Номенклатура, Характеристика, Количество");
				ЗаполнитьЗначенияСвойств(СтруктураКоличества, Строка);
				МассивКоличества = ОтгружаемыеТоварыИзФайла.НайтиСтроки(СтруктураКоличества);
				Если МассивКоличества.Количество() = 0 Тогда
					// ++ Галфинд_ДомнышеваКР_25_01_2024
					НоваяСтрока = СтрокиКДобавлению.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
					НоваяСтрока.Количество = (Строка.Количество - МассивНайденныхВариантов[0].Количество);
					НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
					НоваяСтрока.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.НеОтгружать;
					// -- Галфинд_ДомнышеваКР_25_01_2024

					// ++ Галфинд_ДомнышеваКР_19_01_2024
					Строка.Количество = МассивНайденныхВариантов[0].Количество;
					Строка.КоличествоУпаковок = Строка.Количество;
					Строка.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
					//Строка.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.НеОтгружать;
					// -- Галфинд_ДомнышеваКР_19_01_2024
				Иначе
					Строка.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
				КонецЕсли;	 
			Иначе
					Строка.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.НеОтгружать;					
			КонецЕсли;
		КонецЦикла;
		//	++ Галфинд_ДомнышеваКР_25_01_2024
		Для Каждого Строка Из СтрокиКДобавлению Цикл
			
			НоваяСтрока = ТоварыДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
		КонецЦикла;
		
		ПерезаполнитьОтгружаемымиТоварамиСервер(НайденныйДокументОбъект);
		//	-- Галфинд_ДомнышеваКР_25_01_2024	
	Иначе 
		
		Для каждого Строка Из ОтгружаемыеТоварыДокумента Цикл
			СтруктураОтбора = Новый Структура("УпаковочныйЛист");		
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, Строка);
			МассивНайденныхВариантов = ОтгружаемыеТоварыИзФайла.НайтиСтроки(СтруктураОтбора);
			Если МассивНайденныхВариантов.Количество() > 0 Тогда
				СтруктураКоличества = Новый Структура("УпаковочныйЛист, КоличествоУпаковок");
				ЗаполнитьЗначенияСвойств(СтруктураКоличества, Строка);
				МассивКоличества = ОтгружаемыеТоварыИзФайла.НайтиСтроки(СтруктураКоличества);
				Если МассивКоличества.Количество() = 0 Тогда
					// Стоит уточнить
					НайтиСтрокиВТоварахПоУЛСменитьДействие(ТоварыДокумента, Строка.УпаковочныйЛист, 
									Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.НеОтгружать);
					// ++ Галфинд_ДомнышеваКР_07_02_2024				
					УЛОбъект = Строка.УпаковочныйЛист.ПолучитьОбъект();
					УЛОбъект.гф_СостояниеКороба = Справочники.гф_СостянияКоробов.НеНайден;
					УЛОбъект.ОбменДанными.Загрузка = Истина;
                    УЛОбъект.Записать(РежимЗаписиДокумента.Запись);
					// -- Галфинд_ДомнышеваКР_07_02_2024
				Иначе
					НайтиСтрокиВТоварахПоУЛСменитьДействие(ТоварыДокумента, Строка.УпаковочныйЛист, 
									Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить);
				КонецЕсли;	 
			Иначе
					НайтиСтрокиВТоварахПоУЛСменитьДействие(ТоварыДокумента, Строка.УпаковочныйЛист, 
									Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.НеОтгружать);
					// ++ Галфинд_ДомнышеваКР_07_02_2024				
					УЛОбъект = Строка.УпаковочныйЛист.ПолучитьОбъект();
					УЛОбъект.гф_СостояниеКороба = Справочники.гф_СостянияКоробов.НеНайден;
					УЛОбъект.ОбменДанными.Загрузка = Истина;
                    УЛОбъект.Записать(РежимЗаписиДокумента.Запись);
					// -- Галфинд_ДомнышеваКР_07_02_2024
			КонецЕсли;
		КонецЦикла;
		
		ПерезаполнитьОтгружаемымиТоварамиСервер(НайденныйДокументОбъект); // Галфинд_ДомнышеваКР_30_01_2024
		
	КонецЕсли;

	//Для каждого Строка Из ОтгружаемыеТоварыИзФайла Цикл
	//	НоваяСтрока = НайденныйДокументОбъект.ОтгружаемыеТовары.Добавить();
	//	НоваяСтрока.ЭтоУпаковочныйЛист = Истина;
	//	НоваяСтрока.УпаковочныйЛист = Строка.УпаковочныйЛист;
	//	НоваяСтрока.Количество = Строка.КоличествоУпаковок; 
	//	НоваяСтрока.КоличествоУпаковок = Строка.КоличествоУпаковок;
	//	НоваяСтрока.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
	//	
	//	ТоварыУЛ = ПолучитьСписокТоваровПоУЛ(Строка.УпаковочныйЛист);
	//	Для каждого СтрокаТоварыУЛ Из ТоварыУЛ Цикл
	//		НоваяСтрока = НайденныйДокументОбъект.ОтгружаемыеТовары.Добавить();
	//		НоваяСтрока.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
	//		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоварыУЛ);
	//	КонецЦикла;
	//КонецЦикла;
	
	НайденныйДокументОбъект.ДополнительныеСвойства.Вставить("гф_ОбменСоСкладом", Истина);
	//Документы.РасходныйОрдерНаТовары.ИзменитьТоварыПоРаспоряжениямПоОтгружаемымТоварам(НайденныйДокументОбъект, Истина);
	//ЗаполнитьСлужебныеРеквизитыТЧТовары(НайденныйДокументОбъект, "ТоварыПоРаспоряжениям", Ложь);
	//НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(НайденныйДокументОбъект);
	
КонецПроцедуры// } #wortmann  

// #wortmann { 
// Повторение действи РО
// Галфинд_Домнышева 2024/01/25
//
// Параметры:
//	Объект - ДокументОбъект.РасходныйОрдерНаТовары
Процедура ПерезаполнитьОтгружаемымиТоварамиСервер(Объект)
	
	Документы.РасходныйОрдерНаТовары.ИзменитьТоварыПоРаспоряжениямПоОтгружаемымТоварам(Объект, Истина);

КонецПроцедуры

// #wortmann { 
// Процедура заполняет строки по ТЧ ШтрихкодыУпаковок для РО
// Галфинд_Домнышева 2024/01/19
//
// Параметры:
//	НайденныйДокументОбъект - ДокументОбъект.РасходныйОрдерНаТовары
//	МассивШтрихкодов - Массив - наполнен элементами Справочник.ШтрихкодыУпаковокТоваров
//	ПутьФайла - Строка
Процедура ЗаполнитьШтрихкодыУпаковки(НайденныйДокументОбъект, МассивШтрихкодов, ПутьФайла)
	
	ШтрихУП = НайденныйДокументОбъект.ШтрихкодыУпаковок;
	Для каждого Строка Из МассивШтрихкодов Цикл
		НоваяСтрока = ШтрихУП.Добавить();
		НоваяСтрока.ШтрихкодУпаковки = Строка;
	КонецЦикла;
	
КонецПроцедуры// } #wortmann

// #wortmann { 
// Процедура заполняет строки по ТЧ документа переданным действием
// Галфинд_Домнышева 2023/07/31
//
// Параметры:
//	ТоварыДокумента - ТаблицаЗначений - ТЧ Товары обрабатываемого документа
//	УпаковочныйЛист - ДокументСсылка.УпаковочныйЛист
//	Действие - ПеречислениеСсылка.ДействияСоСтрокамиОрдеровНаОтгрузку
Процедура НайтиСтрокиВТоварахПоУЛСменитьДействие(ТоварыДокумента, УпаковочныйЛист, Действие)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ЭтоУпаковочныйЛист", Ложь);
	СтруктураОтбора.Вставить("УпаковочныйЛистРодитель", УпаковочныйЛист);

	МассивНайденныхВариантов = ТоварыДокумента.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого Строка Из МассивНайденныхВариантов Цикл
		Строка.Действие = Действие;
	КонецЦикла; 
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ЭтоУпаковочныйЛист", Истина);
	СтруктураОтбора.Вставить("УпаковочныйЛист", УпаковочныйЛист);

	МассивНайденныхВариантов = ТоварыДокумента.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого Строка Из МассивНайденныхВариантов Цикл
		Строка.Действие = Действие;
	КонецЦикла; 
	
КонецПроцедуры// } #wortmann

Функция ПолучитьОтгружаемыеТоварыДокументаПоУЛ(НайденныйДокументОбъект)

    Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.УпаковочныйЛист КАК УпаковочныйЛист,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.КоличествоУпаковок КАК КоличествоУпаковок
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары.ОтгружаемыеТовары КАК РасходныйОрдерНаТоварыОтгружаемыеТовары
		|ГДЕ
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.ЭтоУпаковочныйЛист = Истина
		|	И РасходныйОрдерНаТоварыОтгружаемыеТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", НайденныйДокументОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтгружаемыеТоварыДокументаПоУЛ = РезультатЗапроса.Выгрузить();
	
	Возврат ОтгружаемыеТоварыДокументаПоУЛ;
	
КонецФункции// } #wortmann

Функция ПолучитьСписокТоваровПоУЛ(УпаковочныйЛист)

    Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УпаковочныйЛистТовары.Номенклатура КАК Номенклатура,
		|	УпаковочныйЛистТовары.Характеристика КАК Характеристика,
		|	УпаковочныйЛистТовары.Серия КАК Серия,
		|	УпаковочныйЛистТовары.СтатусУказанияСерий КАК СтатусУказанияСерий,
		|	УпаковочныйЛистТовары.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
		|	УпаковочныйЛистТовары.ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста КАК ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста,
		|	УпаковочныйЛистТовары.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
		|	УпаковочныйЛистТовары.УпаковочныйЛист КАК УпаковочныйЛист,
		|	УпаковочныйЛистТовары.Упаковка КАК Упаковка,
		|	УпаковочныйЛистТовары.Количество КАК Количество,
		|	УпаковочныйЛистТовары.КоличествоУпаковок КАК КоличествоУпаковок
		|ИЗ
		|	Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
		|ГДЕ
		|	УпаковочныйЛистТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", УпаковочныйЛист);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СписокТовары = РезультатЗапроса.Выгрузить();
	
	Возврат СписокТовары;

КонецФункции// } #wortmann

// #wortmann { 
// Процедура записывает новую строку в ТЗ ОтгружаемыеТоварыИзФайла по успешно найденным данным по УЛ
// Галфинд_Домнышева 2023/07/31
//
// Параметры:
//	ОбъектДокумент - ДокументОбъект.РасходныйОрдерНаТовары, ДокументОбъект.ПриходныйОрдерНаТовары
//	СтрокаXDTO - СтрокаXDTO
//  ОтгружаемыеТоварыИзФайла - ТаблицаЗначений - заполненная ранее данными из обрабатываемого файла
//	ПутьФайла - Строка
Процедура ЗаписатьСтрокуОтгружаемыеТоварыПоУЛ(ОбъектДокумент, СтрокаXDTO, ОтгружаемыеТоварыИзФайла, ПутьФайла,
												МассивШтрихкодов)
	//
	//ВремВариантКомплектации = ПолучитьВариантКомплектации(СтрокаXDTO.Sku);
	//
	//Если ВремВариантКомплектации = Неопределено Тогда
	//	ШаблонТекста = СтрШаблон("Не найден вариант комплектации по артикулу %1.", СтрокаXDTO.Sku);
	//	ДобавитьСтрокуВТекстыОшибки(ШаблонТекста, Истина, ПутьФайла, ОбъектДокумент.Ссылка);
	//	Возврат;
	//КонецЕсли;
	
	УпаковочныйЛист = НайтиУпаковочныйЛист(СтрокаXDTO.lot_string);
	Если УпаковочныйЛист = Неопределено Тогда
		ШаблонТекста = СтрШаблон("Не найден Упаковочный Лист по артикулу %1.", СтрокаXDTO.lot_string);
		ДобавитьСтрокуВТекстыОшибки(ШаблонТекста, Истина, ПутьФайла, ОбъектДокумент.Ссылка);
		Возврат;
	КонецЕсли;
	// ++Галфинд_ДомнышеваКР_19_01_2024
	Штрихкод = НайтиШтрихкодПОЗначениюУЛ(СтрокаXDTO.lot_string);
	Если Штрихкод <> Неопределено Тогда
		 МассивШтрихкодов.Добавить(Штрихкод);
	КонецЕсли;
	// --Галфинд_ДомнышеваКР_19_01_2024

	КоличествоОтгружаемых = ?(ТипЗнч(СтрокаXDTO.processed_quantity) = Тип("ОбъектXDTO"), 0, СтрокаXDTO.processed_quantity);
	КоличествоУпаковок = Число(КоличествоОтгружаемых);
		
	НоваяСтрока = ОтгружаемыеТоварыИзФайла.Добавить();
	НоваяСтрока.УпаковочныйЛист = УпаковочныйЛист;
	НоваяСтрока.КоличествоУпаковок = КоличествоУпаковок;
	
КонецПроцедуры// } #wortmann 

// #wortmann { 
// Функция находит эл. Спр. ШтрихкодыУпаковокТоваров по знач. тэг lot_string
// Галфинд_Домнышева 2024/01/19
//
// Параметры:
//	Значение - Строка - значение тэг lot_string
//
// Возвращаемое значение:
//	СправочникСсылка.ШтрихкодыУпаковокТоваров Или Неопределено - результат запроса
Функция НайтиШтрихкодПОЗначениюУЛ(Значение)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК Штрихкод
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода = &Значение";
	
	Запрос.УстановитьПараметр("Значение", Значение);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Штрихкод
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции// } #wortmann

// #wortmann { 
// Процедура записывает новую строку в ТЗ ОтгружаемыеТоварыИзФайла по успешно найденным данным по Номенклатуре
// Галфинд_Домнышева 2023/07/31
//
// Параметры:
//	ОбъектДокумент - ДокументОбъект.РасходныйОрдерНаТовары, ДокументОбъект.ПриходныйОрдерНаТовары
//	СтрокаXDTO - СтрокаXDTO
//  ОтгружаемыеТоварыИзФайла - ТаблицаЗначений - заполненная ранее данными из обрабатываемого файла
//	ПутьФайла - Строка
//	Расход - Булево
//	ТоварыОбувь - Булево - Истина если номенклатура в документе Обувь, иначе Ложь
Процедура ЗаписатьСтрокуОтгружаемыеТовары(ОбъектДокумент, СтрокаXDTO, ОтгружаемыеТоварыИзФайла, ПутьФайла, Расход,
											ТоварыОбувь)
	
	ПозицияСлэш = СтрНайти(СтрокаXDTO.Sku, "/");
	ДлинаСтроки = СтрДлина(СтрокаXDTO.Sku);
	Артикул = Лев(СтрокаXDTO.Sku, ПозицияСлэш - 1);
	ХарактеристикаСтрока = Прав(СтрокаXDTO.Sku, ДлинаСтроки - ПозицияСлэш); 
	
	// ++ Галфинд_ДомнышеваКР_28_02_2024
	Если Не ТоварыОбувь Тогда
		Артикул = СтрокаXDTO.Sku;
	КонецЕсли;
	// -- Галфинд_ДомнышеваКР_28_02_2024
	Номенклатура = ПолучитьНоменклатуруПоАртикулу(Артикул);
	
	Если Номенклатура = Неопределено Тогда
		ШаблонТекста = СтрШаблон("Не найдена номенклатура по артикулу %1.", Артикул);
		ДобавитьСтрокуВТекстыОшибки(ШаблонТекста, Истина, ПутьФайла, ОбъектДокумент.Ссылка);
		Возврат;
	КонецЕсли;
	
	// Закомментированно Галфинд_ДомнышеваКР_26_02_2024 - не нужна проверка
	//Характеристика = НайтиХарактеристику(ХарактеристикаСтрока, Номенклатура.ВидНоменклатуры);
	//Если Характеристика = Неопределено Тогда
	//	ШаблонТекста = СтрШаблон("Не найдена характеристика со значением %1.", ХарактеристикаСтрока);
	//	ДобавитьСтрокуВТекстыОшибки(ШаблонТекста, Истина, ПутьФайла, ОбъектДокумент.Ссылка);
	//	Возврат;
	//КонецЕсли;
	
	КоличествоОтгружаемых = ?(ТипЗнч(СтрокаXDTO.processed_quantity) = Тип("ОбъектXDTO"), 0, СтрокаXDTO.processed_quantity);
	КоличествоУпаковок = Число(КоличествоОтгружаемых);
	Если КоличествоУпаковок = 0 Тогда
		ШаблонТекста = СтрШаблон("В файле указано количество равное 0 для %1.", СтрокаXDTO.Sku);
		ДобавитьСтрокуВТекстыОшибки(ШаблонТекста, Истина, ПутьФайла, ОбъектДокумент.Ссылка);
		Возврат;
	КонецЕсли;
	
	// ++ Галфинд_ДомнышеваКР_06_03_2024
	Если Номенклатура.гф_ШтукВУпаковке <> 0 Тогда
		КоличествоУпаковок = КоличествоУпаковок / Номенклатура.гф_ШтукВУпаковке; 
	КонецЕсли;
	// ++ Галфинд_ДомнышеваКР_06_03_2024
	
	Если Не ТоварыОбувь Тогда
		НоваяСтрока = ОтгружаемыеТоварыИзФайла.Добавить();
		НоваяСтрока.Номенклатура = Номенклатура;
		НоваяСтрока.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		
		НоваяСтрока.Количество = КоличествоУпаковок;
	Иначе                                                     
		МассивСторкШтрихкодов = Новый Массив;
		
		Если ТипЗнч(СтрокаXDTO.serials.serial) = Тип("СписокXDTO") Тогда
			
			Для Каждого Строка Из СтрокаXDTO.serials.serial Цикл 
				КМ = Строка;
				МассивСторкШтрихкодов.Добавить(КМ);
			КонецЦикла;	
		Иначе	
			КМ = СтрокаXDTO.serials.serial;
			МассивСторкШтрихкодов.Добавить(КМ);
		КонецЕсли;
		
		МассивКМ = ПреобразоватьМассивШтрихкодов(МассивСторкШтрихкодов); 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтрихкодыУпаковокТоваров.Ссылка КАК Штрихкод,
		|	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
		|	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика,
		|	1 КАК Количество
		|ИЗ
		|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|ГДЕ
		|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода В(&МассивСторкаШтрихкода)";
		
		Запрос.УстановитьПараметр("МассивСторкаШтрихкода", МассивКМ);
		
		РезультатЗапроса = Запрос.Выполнить();
		// ++ Галфинд_ДомнышеваКР_19_01_2024
		Если РезультатЗапроса.Пустой() Тогда
			Запрос.УстановитьПараметр("МассивСторкаШтрихкода", МассивСторкШтрихкодов);
		    РезультатЗапроса = Запрос.Выполнить();
		КонецЕсли;
		// -- Галфинд_ДомнышеваКР_19_01_2024
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			//Если Выборка.Штрихкод.Номенклатура = Номенклатура Тогда
			НоваяСтрока = ОтгружаемыеТоварыИзФайла.Добавить();
			НоваяСтрока.Номенклатура = Выборка.Номенклатура;
			НоваяСтрока.Характеристика = Выборка.Характеристика;
			
			//НоваяСтрока.КоличествоУпаковок = КоличествоУпаковок;
			НоваяСтрока.Количество = "1";
			НоваяСтрока.ШтрихкодУпаковки = Выборка.Штрихкод;
			//Иначе
			//	// Записать сообщение о том что штрихкод указан не верный
			//КонецЕсли;
		КонецЦикла;	
		
	КонецЕсли;

КонецПроцедуры// } #wortmann 

Функция  ПреобразоватьМассивШтрихкодов(МассивСторкШтрихкодов)
	
	МассивКМ = Новый Массив; 
	
	Для Индекс = 0 По МассивСторкШтрихкодов.ВГраница() Цикл
		
	    Если   Лев(МассивСторкШтрихкодов[Индекс], 1) <> "("  Тогда
			НовоеЗначение = "(" + Лев(МассивСторкШтрихкодов[Индекс], 2) + ")" + Сред(МассивСторкШтрихкодов[Индекс], 3, 14) 
							+ "(" + Сред(МассивСторкШтрихкодов[Индекс], 17, 2) + ")" + Сред(МассивСторкШтрихкодов[Индекс], 19);
			МассивКМ.Добавить(НовоеЗначение); 
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивКМ;
	
КонецФункции

Процедура ЗаполнитьСлужебныеРеквизитыТЧТовары(Объект, ИмяТЧ, Перенумеровать = Истина)
	
	СтруктураПараметров1 = Новый Структура("Номенклатура", "ХарактеристикиИспользуются");
	СтруктураПараметров2 = Новый Структура("Номенклатура", "ТипНоменклатуры");
	СтруктураПараметров3 = Новый Структура("Номенклатура", "Артикул");
	СтруктураПараметров4 = Новый Структура("Номенклатура", "ТипИзмеряемойВеличины");
	СтруктураПараметров5 = Новый Структура("Номенклатура, Упаковка", "ВесУпаковки");
	СтруктураПараметров6 = Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки");
	СтруктураПараметров7 = Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияВеса");
	СтруктураПараметров8 = Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияОбъема");
	
	Действия = Новый Структура;
	Действия.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", СтруктураПараметров1);
	Действия.Вставить("ЗаполнитьПризнакТипНоменклатуры", СтруктураПараметров2);
	Действия.Вставить("ЗаполнитьПризнакАртикул", СтруктураПараметров3);
	
	Если ИмяТЧ = "ОтгружаемыеТовары" Тогда
		Действия.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины", СтруктураПараметров4);
		Действия.Вставить("ЗаполнитьВесУпаковки", СтруктураПараметров5);
		Действия.Вставить("ЗаполнитьОбъемУпаковки", СтруктураПараметров6);
		Действия.Вставить("ЗаполнитьЕдиницуИзмеренияВеса", СтруктураПараметров7);
		Действия.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема", СтруктураПараметров8);
		ОбработкаТабличнойЧастиКлиентСерверЛокализация.ДополнитьСтруктуруДействийПриИзмененииЭлемента(ЭтотОбъект,
																						"Номенклатура", Действия);		
	
	Иначе
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ТоварыПоРаспоряжениям, Действия);
	КонецЕсли;
	
	Если ИмяТЧ = "ОтгружаемыеТовары" Тогда
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьВесОбъем");
		
		Для Каждого СтрокаТЧ Из Объект.ОтгружаемыеТовары Цикл
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, Неопределено);
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры// } #wortmann

Функция НайтиУпаковочныйЛист(НомерУпаковочногоЛиста)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УпаковочныйЛист.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
		|ГДЕ
		|	УпаковочныйЛист.Код = &Код";
	
	Запрос.УстановитьПараметр("Код", НомерУпаковочногоЛиста);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка.Следующий(); 
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
  
КонецФункции// } #wortmann

// #wortmann { 
// Процедура состаляет таблицу УЛ для разработки по парному складу
// Галфинд_Домнышева 2023/12/28
//
// Параметры:
//  НайденныйДокументОбъект - ДокументОбъект.РасходныйОрдерНаТовары
//  СтрокиДокументаXDTO - ОбъектXDTO 
//	ФайлОбмена - Файл - обрабатываемый файл.
//	ТоварыОбувь - Булево - Истина если номенклатура в документе Обувь, иначе Ложь 
//	ОтгружаемыеТоварыИзФайла - ТаблицаЗначений
//	МассивШтрихкодов - Массив - если ТоварыОбувь, то заполнен элементами спр.ШтрихкодыУпаковокТоваров
Процедура ПроанализироватьИДобавитьИсходящиеУЛ(НайденныйДокументОбъект, СтрокиДокументаXDTO, ФайлОбмена, ТоварыОбувь, ОтгружаемыеТоварыИзФайла, 
	МассивШтрихкодов)
	
	ОписаниеЧисло =  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3));
	ОписаниеСтрока = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200));
	ОписаниеШтрих = Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров");
	ОписаниеНом	=  Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ОписаниеХар =  Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"); 
	
	ТаблицаПоУЛ = Новый ТаблицаЗначений;
	ТаблицаПоУЛ.Колонки.Добавить("Номенклатура", ОписаниеНом);
	ТаблицаПоУЛ.Колонки.Добавить("Характеристика", ОписаниеХар);
	ТаблицаПоУЛ.Колонки.Добавить("Количество", ОписаниеЧисло); 
    ТаблицаПоУЛ.Колонки.Добавить("КодУЛ", ОписаниеСтрока); 
	
	Если ТоварыОбувь Тогда
		
		ТаблицаПоУЛ.Колонки.Добавить("ШтрихкодУпаковки", ОписаниеШтрих);
		
	КонецЕсли;	
	
	Если ТипЗнч(СтрокиДокументаXDTO) = Тип("СписокXDTO") Тогда
		
		Для Каждого СтрокаXDTO Из СтрокиДокументаXDTO Цикл 
			ПолучитьОбработатьИнформациюПоУЛ(НайденныйДокументОбъект, СтрокаXDTO, ФайлОбмена.Файл, ТаблицаПоУЛ, ТоварыОбувь);
		КонецЦикла;	
	Иначе	
		ПолучитьОбработатьИнформациюПоУЛ(НайденныйДокументОбъект, СтрокиДокументаXDTO, ФайлОбмена.Файл, ТаблицаПоУЛ, ТоварыОбувь);
	КонецЕсли; 
	
	ТЧОтгружаемыеТовары = НайденныйДокументОбъект.ОтгружаемыеТовары;
	РазбитьСтроки = ТаблицаПоУЛ.Количество() <> ТЧОтгружаемыеТовары.Количество();
    ПреобразоватьРасходныйОрдерНайтиСоздатьУЛ(НайденныйДокументОбъект, ФайлОбмена, ТаблицаПоУЛ, РазбитьСтроки, ТЧОтгружаемыеТовары);
	
	Если ТоварыОбувь Тогда
		МассивШтрихкодов = ТаблицаПоУЛ.ВыгрузитьКолонку("ШтрихкодУпаковки");
	КонецЕсли;

	ОтгружаемыеТоварыИзФайла = ТаблицаПоУЛ.Скопировать(, "Номенклатура, Характеристика, Количество");
			
КонецПроцедуры// } #wortmann 

// #wortmann { 
// Процедура заполняет данными из файла таблицу УЛ для разработки по парному складу
// Галфинд_Домнышева 2023/12/28
//
// Параметры:
//  НайденныйДокументОбъект - ДокументОбъект.РасходныйОрдерНаТовары
//  СтрокаXDTO - ОбъектXDTO 
//	ПутьФайла - Строка
//	ТаблицаПоУЛ - ТаблицаЗначений - собираемая таблица для создания УЛ 
//	ТоварыОбувь - Булево - Истина если номенклатура в документе Обувь, иначе Ложь
Процедура ПолучитьОбработатьИнформациюПоУЛ(ОбъектДокумент, СтрокаXDTO, ПутьФайла, ТаблицаПоУЛ, ТоварыОбувь) 
	
	ПозицияСлэш = СтрНайти(СтрокаXDTO.Sku, "/");
	ДлинаСтроки = СтрДлина(СтрокаXDTO.Sku);
	Артикул = Лев(СтрокаXDTO.Sku, ПозицияСлэш - 1);
	ХарактеристикаСтрока = Прав(СтрокаXDTO.Sku, ДлинаСтроки - ПозицияСлэш); 
	// ++ Галфинд_ДомнышеваКР_28_02_2024
	Если Не ТоварыОбувь Тогда
		Артикул = СтрокаXDTO.Sku;
	КонецЕсли;
	// -- Галфинд_ДомнышеваКР_28_02_2024
	
	//Номенклатура = ПолучитьНоменклатуруПоАртикулу(Артикул);
	Номенклатура = НайтиНоменклатуруПоАртикулуИзТЧ(ОбъектДокумент, Артикул);
	
	Если Номенклатура = Неопределено Тогда
		ШаблонТекста = СтрШаблон("Не найдена номенклатура по артикулу %1.", Артикул);
		ДобавитьСтрокуВТекстыОшибки(ШаблонТекста, Истина, ПутьФайла, ОбъектДокумент.Ссылка);
		Возврат;
	КонецЕсли;
	
	КоличествоОтгружаемых = ?(ТипЗнч(СтрокаXDTO.processed_quantity) = Тип("ОбъектXDTO"), 0, СтрокаXDTO.processed_quantity);
	КоличествоУпаковок = Число(КоличествоОтгружаемых);
	
	Если КоличествоУпаковок = 0 Тогда 
		ШаблонТекста = СтрШаблон("В файле указано количество равное 0 для %1.", СтрокаXDTO.Sku);
		ДобавитьСтрокуВТекстыОшибки(ШаблонТекста, Истина, ПутьФайла, ОбъектДокумент.Ссылка);
		Возврат;
	КонецЕсли;
	
	// ++ Галфинд_ДомнышеваКР_06_03_2024
	Если Номенклатура.гф_ШтукВУпаковке <> 0 Тогда
		КоличествоУпаковок = КоличествоУпаковок / Номенклатура.гф_ШтукВУпаковке; 
	КонецЕсли;
	// ++ Галфинд_ДомнышеваКР_06_03_2024
	
	Если ТипЗнч(СтрокаXDTO.lp_info) = Тип("СписокXDTO") Тогда
		
		Значение_nest_level = _омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначение("гф_nest_level"); 
		Для каждого Стр Из СтрокаXDTO.lp_info Цикл
			Если Стр.nest_level = Значение_nest_level Тогда
				КодУЛ = Строка(Стр.lp);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе 
		
		КодУЛ = Строка(СтрокаXDTO.lp_info.lp); 
		
	КонецЕсли;
	
	Если Не ТоварыОбувь Тогда
		НоваяСтрока = ТаблицаПоУЛ.Добавить();
		НоваяСтрока.Номенклатура = Номенклатура;
		НоваяСтрока.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		
		НоваяСтрока.Количество = КоличествоУпаковок;
		НоваяСтрока.КодУЛ = КодУЛ;
	Иначе                                                     
		МассивСторкШтрихкодов = Новый Массив;
		
		Если ТипЗнч(СтрокаXDTO.serials.serial) = Тип("СписокXDTO") Тогда
			
			Для Каждого Строка Из СтрокаXDTO.serials.serial Цикл 
				КМ = Строка;
				МассивСторкШтрихкодов.Добавить(КМ);
			КонецЦикла;	
		Иначе	
			КМ = СтрокаXDTO.serials.serial;
			МассивСторкШтрихкодов.Добавить(КМ);
		КонецЕсли;
		
		МассивКМ = ПреобразоватьМассивШтрихкодов(МассивСторкШтрихкодов); 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтрихкодыУпаковокТоваров.Ссылка КАК Штрихкод,
		|	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
		|	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика,
		|	1 КАК Количество
		|ИЗ
		|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|ГДЕ
		|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода В(&МассивСторкаШтрихкода)";
		
		Запрос.УстановитьПараметр("МассивСторкаШтрихкода", МассивКМ);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Запрос.УстановитьПараметр("МассивСторкаШтрихкода", МассивСторкШтрихкодов);
		    РезультатЗапроса = Запрос.Выполнить();
		КонецЕсли;
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = ТаблицаПоУЛ.Добавить();
			НоваяСтрока.Номенклатура = Выборка.Номенклатура;
			НоваяСтрока.Характеристика = Выборка.Характеристика;
			
			НоваяСтрока.Количество = "1";
			НоваяСтрока.ШтрихкодУпаковки = Выборка.Штрихкод;
			НоваяСтрока.КодУЛ = КодУЛ;
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры// } #wortmann

// #wortmann { 
// Функция ищет Номенклатуру по Артикулу из ТЧ ОтгружаемыеТовары РО
// Галфинд_Домнышева 2024/03/27
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.РасходныйОрдерНаТовары
//	Артикул - Строка - артикул номенклатуры из файла
//
// Возвращаемое значение:
//	СправочникСсылка.Номенклатура - результат запроса
Функция НайтиНоменклатуруПоАртикулуИзТЧ(ДокументОбъект, Артикул)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Номенклатура КАК Номенклатура
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары.ОтгружаемыеТовары КАК РасходныйОрдерНаТоварыОтгружаемыеТовары
		|ГДЕ
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Ссылка = &Ссылка
		|	И РасходныйОрдерНаТоварыОтгружаемыеТовары.Номенклатура.Артикул = &Артикул";
	
	Запрос.УстановитьПараметр("Артикул", Артикул);
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка.Следующий();
		Возврат Выборка.Номенклатура;
	КонецЕсли;
	
КонецФункции// } #wortmann

// #wortmann { 
// Процедура ищет и создает УЛ для пар по таблице УЛ и подставляет это значение в РО
// Галфинд_Домнышева 2023/12/28
//
// Параметры:
//  НайденныйДокументОбъект - ДокументОбъект.РасходныйОрдерНаТовары
//  ФайлОбмена - Файл - обрабатываемый файл.
//	ТаблицаПоУЛ - ТаблицаЗначений - собираемая таблица для создания УЛ
//	РазбитьСтроки - Булево
//	ТЧОтгружаемыеТовары - ТабличнаяЧасть - ТЧ ОтгружаемыеТовары док РасходныйОрдерНаТовары 
Процедура  ПреобразоватьРасходныйОрдерНайтиСоздатьУЛ(НайденныйДокументОбъект, ФайлОбмена, ТаблицаПоУЛ, РазбитьСтроки, ТЧОтгружаемыеТовары)

	ТЧТоварыПоРаспоряжениям = НайденныйДокументОбъект.ТоварыПоРаспоряжениям; // Галфинд_ДомнышеваКр_06_03_2024
	
	ТаблицаУЛ =  ТаблицаПоУЛ.Скопировать();
	
	ТаблицаУЛ.Свернуть("КодУЛ");
	СтрокиКДобавлению = Новый Массив;
	
	Перезаполнять = Ложь; // Галфинд_ДомнышеваКР_17_04_2024
	
	Для каждого УЛ Из ТаблицаУЛ Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("КодУЛ", УЛ.КодУЛ);
		
		МассивСтрокПоУЛ = ТаблицаПоУЛ.НайтиСтроки(Отбор);
		НайденУЛ = НайтиУЛДляПар(УЛ.КодУЛ); 
		Если НайденУЛ = Неопределено Тогда
			
			НовыйУЛОбъект = Документы.УпаковочныйЛист.СоздатьДокумент();
			НовыйУЛОбъект.Код = УЛ.КодУЛ;
			НовыйУЛОбъект.Дата = ТекущаяДатаСеанса();
			НовыйУЛОбъект.Вид = Перечисления.ВидыУпаковочныхЛистов.Исходящий;
			НовыйУЛОбъект.Основание = "По данным WMS";
			НовыйУЛОбъект.гф_ФайлЗагрузки = ФайлОбмена.ИмяФайла;
			НовыйУЛОбъект.гф_Организация = НайденныйДокументОбъект.Склад.гф_Организация;
			НовыйУЛОбъект.СкладУпаковки = НайденныйДокументОбъект.Склад;
			НовыйУЛОбъект.гф_ТекущийОрдер = НайденныйДокументОбъект.Ссылка;
			НовыйУЛОбъект.Товары.Очистить();
			Для каждого СТЗ Из МассивСтрокПоУЛ Цикл
				НоваяСтрока = НовыйУЛОбъект.Товары.Добавить();
				НоваяСтрока.Номенклатура = СТЗ.Номенклатура;
				НоваяСтрока.Характеристика = СТЗ.Характеристика; 
				НоваяСтрока.Количество = СТЗ.Количество;
				НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
				ОтборНазначений = Новый Структура;
				ОтборНазначений.Вставить("Номенклатура", СТЗ.Номенклатура);
				ОтборНазначений.Вставить("Характеристика", СТЗ.Характеристика);
				МассивНазначений = ТЧОтгружаемыеТовары.НайтиСтроки(ОтборНазначений);
				Если МассивНазначений.Количество() <> 0 Тогда
					НоваяСтрока.Назначение = МассивНазначений[0].Назначение;
				КонецЕсли;
				
			КонецЦикла;
			НовыйУЛОбъект.ВсегоМест = НовыйУЛОбъект.Товары.Итог("Количество");
			// ++ Галфинд_ДомнышеваКр_06_03_2024
			СтрокиЗаказа = ТЧТоварыПоРаспоряжениям.НайтиСтроки(ОтборНазначений);
			Если СтрокиЗаказа.Количество() <> 0 Тогда
				НовыйУЛОбъект.гф_Заказ = СтрокиЗаказа[0].Распоряжение;
			КонецЕсли;
			// -- Галфинд_ДомнышеваКр_06_03_2024
			НовыйУЛОбъект.Записать();
			НайденУЛ = НовыйУЛОбъект.Ссылка;
		КонецЕсли;

		ОбщееКоличество = НайденУЛ.ВсегоМест; // Галфинд_ДомнышеваКР_17_04_2024
		
		Для каждого Строка Из МассивСтрокПоУЛ Цикл
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Номенклатура", Строка.Номенклатура);
			СтруктураОтбора.Вставить("Характеристика", Строка.Характеристика);
			СтруктураОтбора.Вставить("УпаковочныйЛистРодитель", Документы.УпаковочныйЛист.ПустаяСсылка());
			МассивСтрокУЛ = ТЧОтгружаемыеТовары.НайтиСтроки(СтруктураОтбора);     
			// Галфинд_ДомнышеваКР_17_04_2024
			// Внесены изменения в алгоритм согласно e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811eefbc5729b8037
			//Если РазбитьСтроки Тогда
				
				СтруктураОтбора.Вставить("Количество", Строка.Количество);
				МассивСтрокУЛКол = ТЧОтгружаемыеТовары.НайтиСтроки(СтруктураОтбора); 
				
				Если  МассивСтрокУЛКол.Количество() = 0  Тогда
					
					КоличествоНом = Строка.Количество; 
					Для Каждого СтрокаУЛ Из МассивСтрокУЛ Цикл
						Если КоличествоНом <= 0 Тогда
							 Прервать;
						КонецЕсли;
						КоличествоВСтроке = ?(СтрокаУЛ.Количество <= КоличествоНом, СтрокаУЛ.Количество,
											 КоличествоНом);
						КоличествоДобавить = СтрокаУЛ.Количество - КоличествоВСтроке;
						СтрокаУЛ.УпаковочныйЛистРодитель = НайденУЛ;
						СтрокаУЛ.Количество = КоличествоВСтроке;
						СтрокаУЛ.КоличествоУпаковок = СтрокаУЛ.Количество;
						КоличествоНом = КоличествоНом - КоличествоВСтроке;
					КонецЦикла;
					Если КоличествоДобавить > 0 Тогда
						НоваяСтрока = ТЧОтгружаемыеТовары.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУЛ);
						НоваяСтрока.Количество = КоличествоДобавить;
						НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
						НоваяСтрока.УпаковочныйЛистРодитель = Документы.УпаковочныйЛист.ПустаяСсылка();
						Перезаполнять = Истина; // Галфинд_ДомнышеваКР_17_04_2024
					КонецЕсли;
					ОбщееКоличество = ОбщееКоличество - Строка.Количество;
				Иначе
					
					Для Каждого СтрокаУЛ Из МассивСтрокУЛКол Цикл
						СтрокаУЛ.УпаковочныйЛистРодитель = НайденУЛ;
						ОбщееКоличество = ОбщееКоличество - СтрокаУЛ.Количество;
					КонецЦикла;
					
				КонецЕсли;
				
			//Иначе
				
			//	Для Каждого СтрокаУЛ Из МассивСтрокУЛ Цикл
			//		СтрокаУЛ.УпаковочныйЛистРодитель = НайденУЛ;
			//	КонецЦикла;
			//	
			//КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Если Перезаполнять Тогда
		ПерезаполнитьОтгружаемымиТоварамиСервер(НайденныйДокументОбъект);
	КонецЕсли;
	
КонецПроцедуры// } #wortmann 

// #wortmann { 
// Функция ищет УЛ по коду с виддом "Исходящий
// Галфинд_Домнышева 2023/12/28
//
// Параметры:
//  НомерУпаковочногоЛиста - строка
//
// Возвращаемое значение:
//	Документссылка.УпаковочныйЛист Или Неопределено - результат запроса
Функция НайтиУЛДляПар(НомерУпаковочногоЛиста) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УпаковочныйЛист.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
		|ГДЕ
		|	УпаковочныйЛист.Код = &Код
		|   И УпаковочныйЛист.Вид = Значение(Перечисление.ВидыУпаковочныхЛистов.Исходящий)";
	
	Запрос.УстановитьПараметр("Код", НомерУпаковочногоЛиста);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка.Следующий(); 
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции// } #wortmann

Функция ПолучитьВариантКомплектации(Наименование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВариантыКомплектацииНоменклатуры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
		|ГДЕ
		|	ВариантыКомплектацииНоменклатуры.Наименование = &Наименование";
		
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка.Следующий(); 
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции// } #wortmann

Процедура ЗаписатьКомментарийПересортицаИЛИНедопоставка(НайденныйДокументОбъект, ОтгружаемыеТоварыИзФайла,
								ОтгружаемыеТоварыДокумента, ОтгружаемыеТоварыОдинаковы, СкладПолучательВПарах) 
														
	Если ОтгружаемыеТоварыОдинаковы Тогда
		Возврат;
	КонецЕсли;
	
	Если СкладПолучательВПарах Тогда
		 МассивСтрокДляКомментария = ПолучитьМассивСтрокПоТоварам(ОтгружаемыеТоварыИзФайла, ОтгружаемыеТоварыДокумента);
	 Иначе
		 МассивСтрокДляКомментария = ПолучитьМассивСтрокПоУЛ(ОтгружаемыеТоварыИзФайла, ОтгружаемыеТоварыДокумента); 
	 КонецЕсли; 
	 
	Комментарий = СтрСоединить(МассивСтрокДляКомментария, "; ");
	НайденныйДокументОбъект.Комментарий = Комментарий;
	 
КонецПроцедуры// } #wortmann	 

Функция ПолучитьМассивСтрокПоТоварам(ОтгружаемыеТоварыИзФайла, ОтгружаемыеТоварыДокумента)
	// по каждой строке определяем соответствие с ТЧ
	МассивСтрок = Новый Массив;		
	
	Для каждого Строка Из ОтгружаемыеТоварыИзФайла Цикл
		СтруктураОтбора = Новый Структура("Номенклатура, Характеристика");		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, Строка);
		МассивНайденныхВариантов = ОтгружаемыеТоварыДокумента.НайтиСтроки(СтруктураОтбора);
		Если МассивНайденныхВариантов.Количество() > 0 Тогда
			СтруктураКоличества = Новый Структура("Номенклатура, Характеристика, КоличествоУпаковок");
			ЗаполнитьЗначенияСвойств(СтруктураКоличества, Строка);
			МассивКоличества = ОтгружаемыеТоварыДокумента.НайтиСтроки(СтруктураКоличества);
			Если МассивКоличества.Количество() = 0 Тогда
				Разница = МассивНайденныхВариантов[0].КоличествоУпаковок - Строка.КоличествоУпаковок;
				Сообщение = ?(Разница > 0, 
				"По " + Строка.Номенклатура + "/" + Строка.Характеристика + " недосчитались " + Разница + " пар.",
				"Есть пересортица по " + Строка.Номенклатура + "/" + Строка.Характеристика + "в количестве " + (-Разница) 
				+ " пар."); 
				МассивСтрок.Добавить(Сообщение);
			КонецЕсли;	 
		Иначе
			Сообщение = "По " + Строка.Номенклатура + "/" + Строка.Характеристика + " недосчитались " 
						+ Строка.КоличествоУпаковок + " пар.";
			МассивСтрок.Добавить(Сообщение);					
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрТекущая Из ОтгружаемыеТоварыДокумента Цикл
		СтруктураОтбора = Новый Структура("Номенклатура, Характеристика");		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрТекущая);
		МассивНайденныхВариантов = ОтгружаемыеТоварыИзФайла.НайтиСтроки(СтруктураОтбора);
		Если МассивНайденныхВариантов.Количество() = 0 Тогда
			Сообщение = "По " + Строка.Номенклатура + "/" + Строка.Характеристика + " недосчитались " + Разница + " пар.";
			МассивСтрок.Добавить(Сообщение);					
		КонецЕсли;
	КонецЦикла;	
	
	Возврат МассивСтрок;
														
КонецФункции// } #wortmann 

Функция ПолучитьМассивСтрокПоУЛ(ОтгружаемыеТоварыИзФайла, ОтгружаемыеТоварыДокумента)
	// по каждой строке определяем соответствие с ТЧ
	МассивСтрок = Новый Массив;		
	
	Для каждого Строка Из ОтгружаемыеТоварыИзФайла Цикл
		СтруктураОтбора = Новый Структура("УпаковочныйЛист");		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, Строка);
		МассивНайденныхВариантов = ОтгружаемыеТоварыДокумента.НайтиСтроки(СтруктураОтбора);
		Если МассивНайденныхВариантов.Количество() > 0 Тогда
			СтруктураКоличества = Новый Структура("УпаковочныйЛист, КоличествоУпаковок");
			ЗаполнитьЗначенияСвойств(СтруктураКоличества, Строка);
			МассивКоличества = ОтгружаемыеТоварыДокумента.НайтиСтроки(СтруктураКоличества);
			Если МассивКоличества.Количество() = 0 Тогда
				Разница = МассивНайденныхВариантов[0].КоличествоУпаковок - Строка.КоличествоУпаковок;
				Сообщение = ?(Разница > 0,
				"По " + Строка.Номенклатура + "/" + Строка.Характеристика + " недосчитались " + Разница + " упак.",
				"Есть пересортица по " + Строка.Номенклатура + "/" + Строка.Характеристика + "в количестве " + (-Разница) 
				+ " упак."); 
				МассивСтрок.Добавить(Сообщение);
			КонецЕсли;	 
		Иначе
			Сообщение = "По " + Строка.Номенклатура + "/" + Строка.Характеристика + " недосчитались " 
						+ Строка.КоличествоУпаковок + " упак.";
			МассивСтрок.Добавить(Сообщение);					
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрТекущая Из ОтгружаемыеТоварыДокумента Цикл
		СтруктураОтбора = Новый Структура("УпаковочныйЛист");		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрТекущая);
		МассивНайденныхВариантов = ОтгружаемыеТоварыИзФайла.НайтиСтроки(СтруктураОтбора);
		Если МассивНайденныхВариантов.Количество() = 0 Тогда
			Сообщение = "По " + Строка.Номенклатура + "/" + Строка.Характеристика + " недосчитались " + Разница + " упак.";
			МассивСтрок.Добавить(Сообщение);					
		КонецЕсли;
	КонецЦикла;	
	
	Возврат МассивСтрок;
														
КонецФункции// } #wortmann
													
Функция ПреобразоватьМассивФайлов(МассивЗагружаемыхФайлов, РасходныйОрдер = Ложь)

	Если РасходныйОрдер Тогда
		ИскомыйСимвол = "SO";
	Иначе ИскомыйСимвол = "PO";
	КонецЕсли;
	
	ТаблицаВозврата = МассивЗагружаемыхФайлов.СкопироватьКолонки();
	 
	Для каждого Файл Из МассивЗагружаемыхФайлов Цикл
		Если СтрНайти(Файл.ИмяФайла, ИскомыйСимвол) <> 0 Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаВозврата.Добавить(), Файл); 
		КонецЕсли;
	КонецЦикла;
	
	// ++ Галфинд_ДомнышеваКР_26_02_2024
	Если НЕ РасходныйОрдер Тогда
		Для каждого Файл Из МассивЗагружаемыхФайлов Цикл
			Если СтрНайти(Файл.ИмяФайла, "OWNER_CHANGE") <> 0 Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаВозврата.Добавить(), Файл); 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// -- Галфинд_ДомнышеваКР_26_02_2024
	
	Возврат ТаблицаВозврата;

КонецФункции// } #wortmann

Функция ПолучитьДокумент(ОбъектXDTO, ФайлОбмена, РасходныйОрдер)
	
	ИмяФайла = ФайлОбмена.ИмяФайла;
	Суффикс = "_";	

	ДатаДокумента  = ПолучитьДатуИзСтроки(ОбъектXDTO.header.created_date);
	// 3 - количество цифр в коде клиента
	//  ++ Изменено Галфинд_ДомнышеваКР_27_11_2023
	// Разбор номера документа
	НомерИзФайла = ОбъектXDTO.header.doc_number; 
	//ПОИСКРТУ = Ложь; 
	НомерРТУ = "";
	
	Если СтрЗаканчиваетсяНа(НомерИзФайла, "S") ИЛИ СтрЗаканчиваетсяНа(НомерИзФайла, "V") 
		ИЛИ СтрЗаканчиваетсяНа(НомерИзФайла, "R") Тогда
		НомерДокумента = СокрЛП(Сред(НомерИзФайла, 4, СтрДлина(НомерИзФайла) - 5));
			// ПОИСКРТУ = Ложь;
	ИначеЕсли РасходныйОрдер Тогда 
		НомерДокумента = СокрЛП(Прав(НомерИзФайла, СтрДлина(НомерИзФайла) - 3));
		// ПОИСКРТУ = Истина; 
		НомерРТУ = НомерДокумента;		
	Иначе
		НомерДокумента = СокрЛП(НомерИзФайла);
	КонецЕсли; 
	
	//НомерДокумента = СокрЛП(Прав(ОбъектXDTO.header.doc_number, СтрДлина(ОбъектXDTO.header.doc_number) - 3));
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходныйОрдерНаТовары.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
		|ГДЕ
		|	РасходныйОрдерНаТовары.Дата МЕЖДУ &НачалоДня И &КонецДня
		|	И РасходныйОрдерНаТовары.Номер = &Номер
		|
		|	&ЗапросРТУ";
		
	Если РасходныйОрдер Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЗапросРТУ", "ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслуг.гф_РасходныйОрдер
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Номер = &НомерРТУ
		|	И РеализацияТоваровУслуг.гф_РасходныйОрдер.Дата МЕЖДУ &НачалоДня И &КонецДня");
		Запрос.УстановитьПараметр("НомерРТУ", НомерРТУ);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РасходныйОрдерНаТовары", "ПриходныйОрдерНаТовары");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЗапросРТУ", "");
	КонецЕсли;
	Если РасходныйОрдер И СтрНайти(ИмяФайла, "BL") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РасходныйОрдерНаТовары", "КорректировкаНазначенияТоваров");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЗапросРТУ", "");
	КонецЕсли;
	// -- Галфинд_ДомнышеваКР_27_11_2023
	// ++ Галфинд_ДомнышеваКР_26_02_2024
	Если ОбъектXDTO.header.status = "MOVED" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПриходныйОрдерНаТовары.Дата МЕЖДУ &НачалоДня И &КонецДня
		|	И", "");
	Иначе
	// -- Галфинд_ДомнышеваКР_26_02_2024	
	Запрос.УстановитьПараметр("КонецДня", КонецДня(ДатаДокумента));
	Запрос.УстановитьПараметр("НачалоДня", НачалоДня(ДатаДокумента));
	КонецЕсли; // Галфинд_ДомнышеваКР_26_02_2024
	Запрос.УстановитьПараметр("Номер", НомерДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка.Следующий();
		НайденныйДокументСсылка = Выборка.Ссылка;
		НайденныйДокументОбъект = НайденныйДокументСсылка.ПолучитьОбъект();
		ОпределитьОрганизацию(НайденныйДокументОбъект);
		Возврат НайденныйДокументОбъект;
	Иначе
		Сообщение = "По названию файла " + ИмяФайла + " не найден документ " 
		+ ?(РасходныйОрдер, ?(СтрНайти(ИмяФайла, "BL"), "Корректировка назначения товаров", "Расходный ордер"),
		"Приходный ордер") + ". Файл перемещён в архив.";
		ДобавитьСтрокуВТекстыОшибки(Сообщение, Истина, ФайлОбмена.Файл);
		Возврат Неопределено;
	КонецЕсли;

КонецФункции// } #wortmann

// #wortmann { 
// Функция находит Номенклатуру по артикулу из обрабатываемого файла
// Галфинд_Домнышева 2023/07/31
//
// Параметры:
//	Артикул - Строка
//
// Возвращаемое значение:
//	СправочникСсылка.Номенклатура - результат запроса
Функция ПолучитьНоменклатуруПоАртикулу(Артикул) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Артикул = &Артикул";
	
	Запрос.УстановитьПараметр("Артикул", Артикул);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции// } #wortmann

// #wortmann { 
// Функция находит Характеристику по ее строковому значению из обрабатываемого файла 
// ВидуНоменклатуры из Найденной Номенклатуры
// Галфинд_Домнышева 2023/07/31
//
// Параметры:
//	ХарактеристикаСтрока - Строка
//	ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры
//
// Возвращаемое значение:
//	СправочникСсылка.ХарактеристикиНоменклатуры - результат запроса
Функция НайтиХарактеристику(ХарактеристикаСтрока, ВидНоменклатуры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Характеристики.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК Характеристики
		|ГДЕ
		|	Характеристики.Наименование = &Наименование
		|	И Характеристики.ВидНоменклатуры = &ВидНоменклатуры";
	
	Запрос.УстановитьПараметр("Наименование", ХарактеристикаСтрока);
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции// } #wortmann

Функция ПолучитьДатуИзСтроки(Стр) 

	Массив = СтрРазделить(Стр, " ");
	МассивДень = СтрРазделить(массив[0], "-");
	МассивВремя = СтрРазделить(массив[1], ":");
	
	Дата = Дата(МассивДень[0], МассивДень[1], МассивДень[2], МассивВремя[0], МассивВремя[1], МассивВремя[2]);
	
	Возврат Дата;

КонецФункции// } #wortmann

Процедура УпорядочитьФайлыПоДатеСоздания(МассивФайлов)
	
	МассивФайлов.Колонки.Добавить("Тип", Новый ОписаниеТипов("Число"));
	
	Для Каждого ЭлементМассива Из МассивФайлов Цикл
		НачалоМеткиВремени = 0; 
		КонецМеткиВремени = 0;
		// разбираю имя файла справа, пока не найду точку - это будет символ за конечным символом даты,
		// дальше ищется символ подчеркивания - следующая позиция - начальный символ определения даты.
		Если Не ЗначениеЗаполнено(ЭлементМассива.ДатаПолучения) Тогда
			ЭлементМассива.ДатаПолучения = ПолучитьДатуИзИмениФайла(ЭлементМассива.ИмяФайла);
		КонецЕсли;
		
		Если СтрНайти(Врег(ЭлементМассива.ИмяФайла), "PO") > 0 Тогда
			ЭлементМассива.Тип = 0;
		ИначеЕсли СтрНайти(ВРег(ЭлементМассива.ИмяФайла), "SO") > 0 Тогда
			ЭлементМассива.Тип = 1;
		ИначеЕсли СтрНайти(ВРег(ЭлементМассива.ИмяФайла), "INV") > 0 Тогда
			ЭлементМассива.Тип = 2;
		Иначе
			ЭлементМассива.Тип = 100;
		КонецЕсли;
	КонецЦикла;
	
	МассивФайлов.Сортировать("Тип, ДатаПолучения, ИмяФайла");
	
КонецПроцедуры// } #wortmann

Процедура ПереместитьФайлВАрхив(ИмяФайла)
	
	Файл = Новый Файл(ИмяФайла);
	СтрокаДаты = Строка(ТекущаяДатаСеанса());
	ДатаПапка = Сред(СтрокаДаты, 7, 4) + Сред(СтрокаДаты, 4, 2) + Сред(СтрокаДаты, 0, 2);
	Путь = Файл.Путь + "Archive\" + ДатаПапка;
	
	Каталог = Новый Файл(Путь);
	Если Не Каталог.Существует() Тогда
		СоздатьКаталог(Путь);
	КонецЕсли;
	
	ПереместитьФайл(ИмяФайла, Путь + "\" + Файл.Имя);
	
КонецПроцедуры// } #wortmann

// Функция проверяет имеется ли в системе документ ДанныеЗагрузки для файла с таким именем
//
// Параметры:
//	ИмяФайла - Строка
//
// Возвращаемое значение:
//	Булево - Истина, если файл был загружен ранее иначе Ложь
Функция ЗагружалсяЛиФайл(ИмяФайла) Экспорт  
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	1
	|ИЗ
	|	Документ.гф_ДанныеЗагрузкиПоОбмену КАК ДанныеЗагрузки
	|ГДЕ
	|	ДанныеЗагрузки.ИмяФайла ПОДОБНО &ИмяФайла
	|	И НЕ ДанныеЗагрузки.ПометкаУдаления
	//	|	И ДанныеЗагрузки.СтатусДокумента = Значение(Перечисление.гф_СтатусыДокументаЗагрузкиWMS.Отработан)//ДомнышеваКР_18_01_2024
	|");
	Запрос.УстановитьПараметр("ИмяФайла", ИмяФайла);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции// } #wortmann

Функция ПолучитьТекстФайла(ИмяФайла)
	текст = Новый ЧтениеТекста(ИмяФайла, "utf8");
	Возврат текст.Прочитать();
КонецФункции// } #wortmann

Функция ПолучитьДатуИзИмениФайла(ИмяФайла)
	
	ДлинаИмени = СтрДлина(ИмяФайла);
	
	// чтобы найти описание даты в имени, нахожу самый правый символ "-", от него влево 17 симоволов - это дата.
	// для разных конфигураций определние даты может отличаться !!!!
	Индекс = ДлинаИмени - 4; // минимум 4 символа расширения можно пробросить
	
	Пока Индекс Цикл
		Если Сред(ИмяФайла, Индекс, 1) = "-" Тогда
			Прервать;
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Индекс = Индекс - 15;
	
	Попытка
		ДатаРезультат = Дата(
		Сред(ИмяФайла, Индекс, 4),
		Сред(ИмяФайла, Индекс + 4, 2),
		Сред(ИмяФайла, Индекс + 6, 2),
		Сред(ИмяФайла, Индекс + 9, 2),
		Сред(ИмяФайла, Индекс + 11, 2),
		Сред(ИмяФайла, Индекс + 13, 2));
	Исключение
		// если дата не будет распознана - вернется пустая дата
		ДатаРезультат = Дата(1, 1, 1, 0, 0, 0);
	КонецПопытки;
	
	Возврат ДатаРезультат;
	
КонецФункции// } #wortmann

Процедура УдалитьФайлыНаФТП(НастройкиFTPСоединения, МассивФайловДляУдаления, Соединение) 
	
	Если Соединение = Неопределено Тогда
		Соединение = _омОбщегоНазначенияВызовСервера.гф_ПолучитьСоединение(НастройкиFTPСоединения);       
		Если Соединение = Неопределено Тогда
			Сообщение = "Соединение не установлено, проверьте настройки подключения FTP. " + ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("ОбменСWMS", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, Сообщение);
			ЗаписатьСообщениеОшибки(Сообщение, Истина, "Проверка настроек для обмена");
			НомерОшибки = НомерОшибки + 1;
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Для Каждого Файл Из МассивФайловДляУдаления Цикл 			
		Соединение.Удалить(Файл.ИмяНаФТП);
	КонецЦикла;

КонецПроцедуры// } #wortmann

#КонецОбласти

#Область Общая

// #wortmann { 
// Процедура добавляет в РС гф_ОшибкиЗагрузки запись
// Галфинд_Домнышева 2023/07/07
//
// Параметры:
//  Сообщение - Строка - сообщение с ошибкой
//  Ошибка - Булево 
//  ИмяФайлаБезПути - Строка - имя файла
//	Ордер - ДокументОбъект.РасходныйОрдерНаТовары, ДокументОбъект.ПриходныйОрдерНаТовары
//	зОрганизация - СправочникСсылка.Организации, Неопределено
Процедура ЗаписатьСообщениеОшибки(Сообщение, Ошибка, ИмяФайлаБезПути, Ордер = Неопределено, зОрганизация = Неопределено)
	
	Если зОрганизация = Неопределено Тогда
		зОрганизация = Справочники.Организации.ПустаяСсылка()
	КонецЕсли;

	Попытка
		Запись = РегистрыСведений.гф_ОшибкиЗагрузки.СоздатьМенеджерЗаписи();
		Запись.Дата = ТекущаяДатаСеанса();
		Запись.Номер = 1000 + НомерОшибки;
		Запись.ТекстОшибки = Сообщение; 
		Запись.Интерфейс = Перечисления.гф_Интерфейсы.WMS;
		Запись.ТипИнформации = ?(Ошибка, "Ошибка", "Информация");
		Запись.Организация = зОрганизация; 
		Запись.ПутьФайла = ИмяФайлаБезПути;
		Если Ордер <> Неопределено Тогда
			Запись.Объект = Ордер;	
		КонецЕсли;
		Запись.Записать();
	Исключение
		ЗаписьЖурналаРегистрации("ОбменСWMS", УровеньЖурналаРегистрации.Предупреждение, ЭтотОбъект, ЭтотОбъект, 
								"Не удалось произвести запись сообщения в ""РС Ошибки загрузки""");
	КонецПопытки; 
	
КонецПроцедуры// } #wortmann 

// #wortmann { 
// Заносит записи в РС гф_ОшибкиЗагрузки из ТЗ ТекстыОшибок 
// Галфинд_Домнышева КР 2023/07/07
//
// Параметры:
//	ТекстыОшибок - ТаблицаЗначений 
Процедура ЗаписатьОшибку(ТекстыОшибок)

	ТекущаяДата = ТекущаяДатаСеанса(); 
	Попытка	
		НаборЗаписей = РегистрыСведений.гф_ОшибкиЗагрузки.СоздатьНаборЗаписей(); 
		
		НаборЗаписей.Отбор.Интерфейс.Установить(Перечисления.гф_Интерфейсы.WMS);
		НаборЗаписей.Отбор.Дата.Установить(ТекущаяДата);
		НаборЗаписей.Прочитать();
		
		ТекущиеЗначения = НаборЗаписей.Выгрузить();                             
		
		Для Каждого Строка Из ТекстыОшибок Цикл
				НоваяЗапись = ТекущиеЗначения.Добавить(); 
				НоваяЗапись.Дата = ТекущаяДата;
				НоваяЗапись.ПутьФайла = Строка.ПутьФайла; 
				НоваяЗапись.Номер =  Строка(ТекущиеЗначения.Количество());
				НоваяЗапись.ТекстОшибки = Строка.ТекстОшибки;
				НоваяЗапись.Организация = Строка.Организация;
				НоваяЗапись.Интерфейс = Перечисления.гф_Интерфейсы.WMS;
				НоваяЗапись.ТипИнформации = Строка.ТипИнформации;
				Если Строка.Ордер <> "" Тогда
					НоваяЗапись.Объект = Строка.Ордер;
				КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Загрузить(ТекущиеЗначения);
		НаборЗаписей.Записать(); 
		
	Исключение
		СообщениеОбОшибке = "Ошибка при записи файла " + Строка.ПутьФайла  
		+ ". Описание ошибки: Не удалось загрузить ТекстОшибки в РС гф_ОшибкиЗагрузки. " + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ОбменСWMS", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);		
	КонецПопытки;

КонецПроцедуры// } #wortmann

// #wortmann { 
// Заполняет ТЗ ТекстыОшибок 
// Галфинд_Домнышева КР 2023/07/07
//
// Параметры:
//	СообщениеОбОшибке - Строка - текущая ошибка
//  Ошибка - Булево
//	ПутьФайла - Строка
//	Ордер - ДокументОбъект.РасходныйОрдерНаТовары, ДокументОбъект.ПриходныйОрдерНаТовары
Процедура ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке, Ошибка, ПутьФайла, Ордер = Неопределено)

	СтрокаОшибки = ТекстыОшибок.Добавить();
	СтрокаОшибки.ПутьФайла = ПутьФайла;
	СтрокаОшибки.ТекстОшибки = СообщениеОбОшибке;
	СтрокаОшибки.Организация = Организация;
	СтрокаОшибки.ТипИнформации = ?(Ошибка, "Ошибка", "Информация");
	СтрокаОшибки.Ордер = Ордер;
			
КонецПроцедуры// } #wortmann

Процедура ОпределитьОрганизацию(НайденныйДокументОбъект)

	Если ТипЗнч(НайденныйДокументОбъект) = Тип("ДокументОбъект.КорректировкаНазначенияТоваров") Тогда
		 Организация = НайденныйДокументОбъект.Организация;
	Иначе
		 Организация = НайденныйДокументОбъект.Склад.гф_Организация;
	КонецЕсли;

КонецПроцедуры

// #wortmann { 
// Функция проверяет относится ли номенклатура в обрабатываемом документе к Обуви 
// Галфинд_Домнышева 2023/10/27
//
// Параметры:
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары, ДокументСсылка.ПриходныйОрдерНаТовары - загружаемый документ
//	Расход - булево - тип интерфейса
//
// Возвращаемое значение:
//	Булево - В случае Если ВидНоменклатуры входит в "гф_ВидыНоменклатурыОбувь" - Истина 
Функция Обувь(Документ, Расход)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	гф_ГлобальныеЗначенияСписок.Значение КАК ВидНоменклатуры
	|ПОМЕСТИТЬ Виды
	|ИЗ
	|	ПланВидовХарактеристик.гф_ГлобальныеЗначения.Список КАК гф_ГлобальныеЗначенияСписок
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.гф_ГлобальныеЗначения КАК гф_ГлобальныеЗначения
	|		ПО гф_ГлобальныеЗначенияСписок.Ссылка = гф_ГлобальныеЗначения.Ссылка
	|ГДЕ
	|	гф_ГлобальныеЗначения.Ключ = &Ключ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Документ
	|	И Товары.Номенклатура.ВидНоменклатуры В
	|			(ВЫБРАТЬ
	|				Т.ВидНоменклатуры
	|			ИЗ
	|				Виды КАК Т)
	|	И НЕ Товары.Номенклатура Есть NULL");  
	
	Если Не Расход Тогда
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям", 
								"ПриходныйОрдерНаТовары.Товары");	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ключ", "гф_ВидыНоменклатурыОбувь");
	Запрос.УстановитьПараметр("Документ", Документ); 
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		 Возврат Истина;
	 Иначе
		 Возврат Ложь;
	КонецЕсли;
	
КонецФункции// } #wortmann

#КонецОбласти

#Область Инициализация
// Этой переменной регулируем количество "холостых" итераций цикла -
// тем самым устанавливаем интервал задержки до повторной попытки соединения
// после разрыва почтового соединения с почтовым сервером извне.
ИнтервалЗадержкиПодключенияПослеНеудачи = 1000;   
#КонецОбласти

#КонецЕсли