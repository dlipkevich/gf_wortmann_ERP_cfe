#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных
Перем ЛогВыполненияОбработки;
Перем Соединение;
Перем СкладПолучательВПарах;
Перем СкладОтправительВПарах;
Перем ЭтоОсновнойСклад;
Перем КодКлиента;
Перем КодОрганизации;
Перем ЭтоПеремещение;
Перем ЭтоВозврат;
Перем ЭтоПоступление;
Перем ЭтоРеализация;
Перем СкладМаркетплейса;
Перем ЭтоТаможенныйСклад;
Перем КодКонтрагента; 
Перем Артикулы;
Перем Выборка;
#КонецОбласти

#Область ВыгрузкаДанных

Процедура ВыгрузитьДанные (МассивДокументовРасход = Неопределено, МассивДокументовПриход = Неопределено) Экспорт
	Перем ИмяФайлаБезПути, ИмяФайла;
	
	ОбновитьДанныеВДанныеВыгрузки();
	
	// Если это регламентная задача, то выполняем поиск необходимых документов в РС гф_ДанныеВыгрузки
	Если МассивДокументовРасход = Неопределено И МассивДокументовПриход = Неопределено Тогда 
		
		МассивДокументовРасход = ПолучитьМассивДокументов(Истина); 
		МассивДокументовПриход = ПолучитьМассивДокументов(Ложь);
	
	КонецЕсли;	
	
	НастройкиFTPСоединения = _омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначениеFTP("FTP_НастройкиДляВыгрузкиВWMS");
	
	Если НастройкиFTPСоединения = Неопределено Тогда
		Сообщение = "Не заданы настройки подключния к ftp-серверу.";
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, Сообщение);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ТекущаяДатаСеанса(), "ДЛФ=T") + ". " + Сообщение);
		
		Возврат;
	КонецЕсли;
	//Соединение = _омОбщегоНазначенияВызовСервера.гф_ПолучитьСоединение(НастройкиFTPСоединения);
	
	//Каталог = новый Файл(НастройкиFTPСоединения.Каталог);
	//Если не Каталог.Существует() или не Каталог.ЭтоКаталог() Тогда
	//	Попытка
	//		СоздатьКаталог(НастройкиFTPСоединения.Каталог);
	//	Исключение
	//		сообщить("Каталог " + НастройкиFTPСоединения.Каталог + " отсутствует и нет возможности создать!", СтатусСообщения.Важное);
	//		Возврат;
	//	КонецПопытки;
	//КонецЕсли;
	//
	Для каждого Документ из  МассивДокументовРасход Цикл
		
		Контрагент = Документ.Получатель;
		КодОрганизации = Документ.Склад.гф_Организация.Префикс;
		
		Склад = Документ.Склад;
		СкладМаркетплейса = ПроверитьЗначениеСкладМаркетплейс(Склад); 
		СкладОтправительВПарах = НЕ ПроверитьЗначениеСкладВКоробах(Склад);
		//ОтправительСерийныйНомерВместоКМ = ИспользоватьСерийныйНомерВместоКМ(Склад);
		Если СкладМаркетплейса Тогда
			Сообщение = "У документа " + Документ + " стоит значение ""Склад маркетплейс""";
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, Сообщение);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ТекущаяДата(), "ДЛФ=T") + ". " + Сообщение);
			
			Продолжить;
		КонецЕсли;
		Распоряжение = ПолучитьСвязанныйДокументРО(Документ);
		ЭтоПеремещение = ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ПеремещениеТоваров");
		ЭтоПоступление = ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг");
		ЭтоРеализация = ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ЗаказКлиента");
		ЭтоВозврат = ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента");
		
		//СкладОтправительВПарах = ЛИТ_ОбменДанными.ЭтоПарныйСклад(Склад);
		//ОтправительСерийныйНомерВместоКМ = ИспользоватьСерийныйНомерВместоКМ(Склад);
		ЭтоТаможенныйСклад = ЭтоТаможенныйСклад(Склад);
		ЭтоОсновнойСклад = ЭтоОсновнойСклад(Склад);
		//ЭтоСвободныйСклад = Склад = Справочники.w_Настройки.СкладСвободныеОстатки.Значение;
		//ЭтоСкладТранзитБезРезерва = ЭтоСкладТранзитБезРезерва(Склад);
		//ЭтоСкладРазукомплектации = ЭтоСкладРазукомплектации(Склад);
		//
		НомерСообщения = строка(новый УникальныйИдентификатор);
		Пакет = ПолучитьПакетРасхода(ИмяФайлаБезПути, ИмяФайла, НомерСообщения, Документ, НастройкиFTPСоединения);
		ЗаписатьОтправитьПакет(Пакет, ИмяФайлаБезПути, ИмяФайла, НомерСообщения, Перечисления.гф_ВидыДанныхДляВыгрузки.Документ, Документ, НастройкиFTPСоединения);
	КонецЦикла;
	
	Для каждого Документ из  МассивДокументовПриход Цикл
		
		Склад = Документ.Склад;
		СкладМаркетплейса = ПроверитьЗначениеСкладМаркетплейс(Склад);
		СкладПолучательВПарах = НЕ ПроверитьЗначениеСкладВКоробах(Склад);
		Если СкладМаркетплейса Тогда
			Сообщение = "У документа " + Документ + " стоит значение ""Склад маркетплейс""";
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, Сообщение);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ТекущаяДата(), "ДЛФ=T") + ". " + Сообщение);
			
			Продолжить;
		КонецЕсли;
		
		СкладОтправительВПарах = НЕ ПроверитьЗначениеСкладВКоробах(Склад);
        ЭтоПеремещение = ТипЗнч(Документ.Распоряжение) = Тип("ДокументСсылка.ПеремещениеТоваров");
		ЭтоПоступление = ТипЗнч(Документ.Распоряжение) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг");
		ЭтоРеализация = ТипЗнч(Документ.Распоряжение) = Тип("ДокументСсылка.РеализацияТоваровУслуг");
		ЭтоВозврат = ТипЗнч(Документ.Распоряжение) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента");

		//СкладПолучательВПарах = ЛИТ_ОбменДанными.ЭтоПарныйСклад(Склад);
		//ПолучательСерийныйНомерВместоКМ = ИспользоватьСерийныйНомерВместоКМ(Склад);
		//ОтправительСерийныйНомерВместоКМ = ИспользоватьСерийныйНомерВместоКМ(Склад);
		ЭтоТаможенныйСклад = ЭтоТаможенныйСклад(Склад);
		ЭтоОсновнойСклад = ЭтоОсновнойСклад(Склад);
		//ЭтоСвободныйСклад = Склад = Справочники.w_Настройки.СкладСвободныеОстатки.Значение;
		//ЭтоСкладТранзитБезРезерва = ЭтоСкладТранзитБезРезерва(Склад);
		//ЭтоСкладРазукомплектации = ЭтоСкладРазукомплектации(Склад);
		//
		НомерСообщения = строка(новый УникальныйИдентификатор);
		Пакет = ПолучитьПакетПрихода(ИмяФайлаБезПути, ИмяФайла, НомерСообщения, Документ, НастройкиFTPСоединения);
		ЗаписатьОтправитьПакет(Пакет, ИмяФайлаБезПути, ИмяФайла, НомерСообщения, Перечисления.гф_ВидыДанныхДляВыгрузки.Документ, Документ, НастройкиFTPСоединения);
		
	КонецЦикла;
	
КонецПроцедуры 

Процедура ОбновитьДанныеВДанныеВыгрузки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриходныйОрдерНаТовары.Ссылка КАК Документ
		|ИЗ
		|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
		|ГДЕ
		|	ПриходныйОрдерНаТовары.Статус = &СтатусПО
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	РасходныйОрдерНаТовары.Ссылка
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
		|ГДЕ
		|	РасходныйОрдерНаТовары.Статус = &СтатусРО";
	
	Запрос.УстановитьПараметр("СтатусПО", Перечисления.СтатусыПриходныхОрдеров.КПоступлению);
	Запрос.УстановитьПараметр("СтатусРО", Перечисления.СтатусыРасходныхОрдеров.Подготовлено);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Не РезультатЗапроса.Пустой() Тогда
		МассивДокументов = Новый Массив;
		Пока Выборка.Следующий() Цикл
			
			МассивДокументов.Добавить(Выборка.Документ);
			
		КонецЦикла;
		СделатьОбновитьЗаписьДанныхВыгрузки(МассивДокументов)
	КонецЕсли;
  
КонецПроцедуры 

Процедура СделатьОбновитьЗаписьДанныхВыгрузки(МассивДокументов)
	
	Дата = ТекущаяДатаСеанса();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	гф_ДанныеВыгрузки.Период КАК Период,
		|	гф_ДанныеВыгрузки.ВидДанных КАК ВидДанных,
		|	гф_ДанныеВыгрузки.Документ КАК Документ,
		|	гф_ДанныеВыгрузки.НомерСообщения КАК НомерСообщения,
		|	гф_ДанныеВыгрузки.Состояние КАК Состояние,
		|	гф_ДанныеВыгрузки.ИмяФайла КАК ИмяФайла
		|ИЗ
		|	РегистрСведений.гф_ДанныеВыгрузки КАК гф_ДанныеВыгрузки
		|ГДЕ
		|	гф_ДанныеВыгрузки.Документ В(&МассивДокументов)
		|	И гф_ДанныеВыгрузки.Состояние = &Состояние
		|	И гф_ДанныеВыгрузки.ВидДанных = &ВидДанных";
	
	Запрос.УстановитьПараметр("ВидДанных", Перечисления.гф_ВидыДанныхДляВыгрузки.Документ);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("Состояние", Перечисления.гф_СтатусыВыгрузкиДанных.ГотовоКОтправке);
	
	РезультатЗапроса = Запрос.Выполнить();
	МассивНеВнесенныхДокументов = Новый Массив;
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		МассивДокументовНайденныхВРС = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Документ");
		
		
		Для каждого Элемент из МассивДокументов Цикл 
			ИндексЭлемента = ВернутьИндексВМассиве(МассивДокументовНайденныхВРС, Элемент);
			Если ИндексЭлемента = -1 Тогда  
				МассивНеВнесенныхДокументов.Добавить(Элемент);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Документ из МассивНеВнесенныхДокументов Цикл
			Запись = РегистрыСведений.гф_ДанныеВыгрузки.СоздатьМенеджерЗаписи();
			Запись.Период = Дата;
			Запись.ВидДанных = Перечисления.гф_ВидыДанныхДляВыгрузки.Документ;
			Запись.Документ = Документ;
			Запись.Состояние = Перечисления.гф_СтатусыВыгрузкиДанных.ГотовоКОтправке;
			Запись.Записать();
		КонецЦикла;
		
		//ДанныеРавны = ОбщегоНазначения.СравнитьМассивы(МассивДокументов, МассивДокументовНайденныхВРС);
		//
		//Если ДанныеРавны Тогда
		//	Пока Выборка.Следующий() Цикл 
		//		Если не Выборка.Период = Дата Тогда
		//			Запись = РегистрыСведений.гф_ДанныеВыгрузки.СоздатьМенеджерЗаписи();
		//			Запись.ВидДанных = Перечисления.гф_ВидыДанныхДляВыгрузки.Документ;
		//			Запись.Документ = Выборка.Документ;
		//			Запись.Период = Выборка.Период;
		//			Запись.Прочитать();
		//			Если Запись.Выбран() Тогда
		//				Запись.Период = Дата;
		//				Запись.Записать();
		//			КонецЕсли;
		//			
		//		КонецЕсли;
		//	КонецЦикла;
		//КонецЕсли;
	Иначе
		Для каждого Документ из МассивДокументов Цикл
			Запись = РегистрыСведений.гф_ДанныеВыгрузки.СоздатьМенеджерЗаписи();
			Запись.Период = Дата;
			Запись.ВидДанных = Перечисления.гф_ВидыДанныхДляВыгрузки.Документ;
			Запись.Документ = Документ;
			Запись.Состояние = Перечисления.гф_СтатусыВыгрузкиДанных.ГотовоКОтправке;
			Запись.Записать();
		КонецЦикла;
	КонецЕсли;
			
КонецПроцедуры

Функция ВернутьИндексВМассиве(МассивДанные, Элемент) Экспорт 
	
	Если МассивДанные = Неопределено Тогда
		Возврат -1;
	КонецЕсли;
	
	Для ИндексЭлемента = 0 По МассивДанные.ВГраница() Цикл
		
		Если  (МассивДанные[ИндексЭлемента] = Элемент) Тогда
			Возврат ИндексЭлемента;
		КонецЕсли;	
		
	КонецЦикла;
	
	// не нашли элемент
	Возврат -1;
	
КонецФункции   

Функция ПолучитьМассивДокументов(РасходныйОрдер) 
	
	  Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	гф_ДанныеВыгрузки.Документ КАК Документ
			|ИЗ
			|	РегистрСведений.гф_ДанныеВыгрузки КАК гф_ДанныеВыгрузки
			|ГДЕ
			|	гф_ДанныеВыгрузки.Состояние = &Состояние
			|	И гф_ДанныеВыгрузки.ВидДанных = &ВидДанных
			|	И гф_ДанныеВыгрузки.Документ ССЫЛКА Документ.РасходныйОрдерНаТовары";
		
		Запрос.УстановитьПараметр("ВидДанных", Перечисления.гф_ВидыДанныхДляВыгрузки.Документ);
		Запрос.УстановитьПараметр("Состояние", Перечисления.гф_СтатусыВыгрузкиДанных.ГотовоКОтправке);
		Если Не РасходныйОрдер Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.РасходныйОрдерНаТовары", "Документ.ПриходныйОрдерНаТовары"); 
		КонецЕсли;	
		РезультатЗапроса = Запрос.Выполнить();
		МассивДокументов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Документ");
        Возврат МассивДокументов;
	
КонецФункции

Процедура ЗаписатьСообщение(Сообщение)
	НоваяСтрокаЛога = ЛогВыполненияОбработки.Добавить();
	НоваяСтрокаЛога.Период = ТекущаяДата();
	НоваяСтрокаЛога.НомерСтрокиСообщения = Строка(ЛогВыполненияОбработки.Количество());
	НоваяСтрокаЛога.Описание = Сообщение;
КонецПроцедуры
 
Функция ПолучитьПакетРасхода(ИмяФайлаБезПути, ИмяФайла, НомерСообщения, Документ, НастройкиFTPСоединения)
	
	//Если СкладПолучательВПарах и ПолучательСерийныйНомерВместоКМ
	//	или не СкладОтправительВПарах и не ОтправительСерийныйНомерВместоКМ и ЭтоТаможенныйСклад и не (не СкладПолучательВПарах и не ПолучательСерийныйНомерВместоКМ)
	//	или не СкладОтправительВПарах и ОтправительСерийныйНомерВместоКМ и не СкладПолучательВПарах и не ПолучательСерийныйНомерВместоКМ Тогда
	//	сообщение = "не согласован формат выгрузки со складом. Файл сформирован не будет";
	//	Сообщить(сообщение);
	//	ЛИТ_ОбменДанными.ЛИТ_ЗаписатьСообщение(сообщение, Истина);
	//	возврат Неопределено;
	//КонецЕсли;
	
	//Если ЭтоПеремещение Тогда
	//	КодКлиента = ПолучитьКодКлиента(Документ.СкладОтправитель);
	//	КодКонтрагента = ПолучитьКодКлиента(Документ.СкладПолучатель);
	//	Суфикс = "-S_";
	//Иначе
		КодКлиента = ПолучитьКодКлиента(Документ.Склад);
		//Если Документ.Склад=Справочники.w_Настройки.СкладРазукомплектацииОтгрузкиВПарах.Значение Тогда
		//	Если ЗначениеЗаполнено(Документ.лит_УпаковочныйЛистПокупателя) Тогда
		//		КодКлиента = ПолучитьКодКлиента(Документ.лит_УпаковочныйЛистПокупателя.Склад);
		//	КонецЕсли;
		//КонецЕсли;
		КодКонтрагента = сокрЛП(Документ.Получатель.Код);
		Суфикс = "_";
	//КонецЕсли;
	
	
	ИмяФайлаБезПути = "SO_" + КодКлиента + Формат(СокрЛП(Документ.Номер), "ЧГ=") + Суфикс +  Формат(Документ.Дата, "ДФ=yyyyMMddHHmm") + ".xml"; 
	ИмяФайла = НастройкиFTPСоединения.Каталог + "\" + ИмяФайлаБезПути;
	
	Пакет = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Пакет"));
	Пакет.ИД = НомерСообщения;
	Пакет.Дата = формат(ТекущаяДата(), "ДФ='ггг-ММ-д hh:mm:ss'");
	Пакет.Источник = "1С";
	Пакет.Владелец = КодКлиента;
	Пакет.Код = "01";
	
	// Раздел Компании
	
	Пакет.Каталог = Каталог("Расход", Документ);
	
	// Раздел Документы
	
	Пакет.Документы = РазделДокументы("Расход", Документ);
	
	возврат Пакет;
КонецФункции // ()

Функция ПолучитьПакетПрихода(ИмяФайлаБезПути, ИмяФайла, НомерСообщения, Документ, НастройкиFTPСоединения)
	
	Если СкладПолучательВПарах 
		//и ПолучательСерийныйНомерВместоКМ
		//или не СкладОтправительВПарах и не ОтправительСерийныйНомерВместоКМ и ЭтоТаможенныйСклад и не (не СкладПолучательВПарах и не ПолучательСерийныйНомерВместоКМ)
		//или не СкладОтправительВПарах и ОтправительСерийныйНомерВместоКМ и не СкладПолучательВПарах и не ПолучательСерийныйНомерВместоКМ 
		Тогда
		сообщение = "не согласован формат выгрузки со складом. Файл сформирован не будет";
		Сообщить(сообщение);
		//ЛИТ_ОбменДанными.ЛИТ_ЗаписатьСообщение(сообщение, Истина);
		возврат Неопределено;
	КонецЕсли;
	
	Склад = Документ.Склад;
	
	КодКлиента = ПолучитьКодКлиента(Склад);
	Если ЭтоПеремещение Тогда
		Суфикс = "-S_";
	Иначе
		Суфикс = "_";
	КонецЕсли;
	
	КодКонтрагента = сокрЛП(Документ.Отправитель.Код);
	
	ИмяФайлаБезПути = "PO_" + КодКлиента + Формат(СокрЛП(Документ.Номер), "ЧГ=") + Суфикс +  Формат(Документ.Дата, "ДФ=yyyyMMddHHmm") + ".xml"; 
	ИмяФайла = НастройкиFTPСоединения.Каталог + "\" + ИмяФайлаБезПути;
	//ПараметрыИнтерфейса = ЛИТ_ОбменДанными.ЛИТ_ПолучитьПараметрыИнтерфейса(Справочники.ЛИТ_ИнтерфейсыОбменаДанными.ВыгрузкаЗаказовНаПоступление);
	
	//Если не СкладОтправительВПарах Тогда
	//	ПеремещениеДляСкладаПолучателяПоступлениеАртикулНомерЗаказа = ПеремещениеДляСкладаПолучателяПоступлениеАртикулНомерЗаказа(Склад);
	//КонецЕсли;
	
	
	Пакет = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Пакет"));
	Пакет.ИД = НомерСообщения;
	Пакет.Дата = формат(ТекущаяДата(), "ДФ='ггг-ММ-д hh:mm:ss'");
	Пакет.Источник = "1С";
	Пакет.Владелец = КодКлиента;
	Пакет.Код = "01";
	
	Пакет.Каталог = Каталог("Приход", Документ);
	Пакет.Документы = РазделДокументы("Приход", Документ);
	
	возврат Пакет;
КонецФункции 

Функция ПолучитьСвязанныйДокументРО(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение КАК Распоряжение
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
	|ГДЕ
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка.Следующий();
		Возврат Выборка.Распоряжение;
	КонецЕсли;;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПроверитьЗначениеСкладМаркетплейс(Склад)
	
    Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СкладыДополнительныеРеквизиты.Свойство.Имя КАК Свойство,
		|	СкладыДополнительныеРеквизиты.Значение КАК Значение
		|ИЗ
		|	Справочник.Склады.ДополнительныеРеквизиты КАК СкладыДополнительныеРеквизиты
		|ГДЕ
		|	СкладыДополнительныеРеквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Склад);
	Запрос.УстановитьПараметр("Имя", "гф_СкладыСкладМаркетплейс");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Свойство = "гф_СкладыСкладМаркетплейс" Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Ложь;
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;

КонецФункции

Функция ПроверитьЗначениеСкладВКоробах(Склад)
	
    Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СкладыДополнительныеРеквизиты.Свойство.Имя КАК Свойство,
		|	СкладыДополнительныеРеквизиты.Значение КАК Значение
		|ИЗ
		|	Справочник.Склады.ДополнительныеРеквизиты КАК СкладыДополнительныеРеквизиты
		|ГДЕ
		|	СкладыДополнительныеРеквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Свойство = "гф_СкладыТоварыВКоробах" Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Ложь;
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;

КонецФункции

Функция Каталог(Тип, Документ)
	
	Каталог = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Каталог"));
	
	Если Тип = "Расход" Тогда
		Каталог.Компании = КомпанииРасход(Документ);
		
	ИначеЕсли Тип = "Приход" Тогда
		//раздел Номенклатура
		Каталог.СписокТоваров = СписокТоваров(Документ, Тип);
		
		//раздел компании
		//Если ПеремещениеДляСкладаПолучателяПоступлениеАртикулНомерЗаказа Тогда
			Каталог.Компании = КомпанииПриход(Документ);
		//КонецЕсли;
	КонецЕсли;
	
	возврат Каталог;
КонецФункции // РасходКаталог()

Функция КомпанииРасход(Документ)
	
	Компании = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Компании"));
	Компании.Компания.Добавить(КомпанияРасход(Документ));
	
	возврат Компании;
КонецФункции // РасходКомпании()

Функция КомпанияРасход(Документ)
	Перем КомпанияАдрес;
	
	СвязанныйДокумент = ПолучитьСвязанныйДокументРО(Документ);
	
	Компания = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Компания"));
	Компания.ИД = ПолучитьКодКлиента(Документ.Склад);
	// Компания.ИД = СвязанныйДокумент.гф_АдресДоставки.НомерАдреса;
	Компания.Имя = Документ.Получатель.Наименование;
	//Компания.Имя = СвязанныйДокумент.гф_АдресДоставки.КонтактноеЛицо;   //будет эта строка
	Компания.Адреса = АдресаРасход(КомпанияАдрес, Документ, СвязанныйДокумент);
	Компания.Адрес = КомпанияАдрес;
	
	возврат Компания;
КонецФункции // РасходКомпания()

Функция АдресаРасход(КомпанияАдрес, Документ, СвязанныйДокумент)
	
	Адреса = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Адреса"));
	КомпанияАдрес = "";
	
	ЕстьАдрес = Ложь;
	Структура = ПолучитьАдресПоТипуКомпании(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, Документ.Получатель, ЕстьАдрес);
	Если ЕстьАдрес Тогда
		Адреса.Адрес.Добавить(Адрес(Структура, "Юридический адрес"));
		КомпанияАдрес = Структура.Представление;
	КонецЕсли;
	
	ЕстьАдрес = Ложь;
	Структура = ПолучитьАдресПоТипуКомпании(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, Документ.Получатель, ЕстьАдрес);
	Если ЕстьАдрес Тогда
		Адреса.Адрес.Добавить(Адрес(Структура, "Фактический адрес"));
		КомпанияАдрес = Структура.Представление;
	КонецЕсли;
	
	СтруктураКИ = ПолучитьСтруктуруКИ(СвязанныйДокумент);
	Если ЗначениеЗаполнено(СтруктураКИ) Тогда
		Адреса.Адрес.Добавить(Адрес(новый Структура("Представление, Индекс, Город, Регион", СвязанныйДокумент.АдресДоставки,
													СтруктураКИ.ZIPcode, СтруктураКИ.city, СтруктураКИ.area), "Адрес доставки"));
		КомпанияАдрес = СвязанныйДокумент.АдресДоставки;
	КонецЕсли;

	возврат Адреса; 
	
КонецФункции // РасходАдреса()

Функция ПолучитьСтруктуруКИ(СвязанныйДокумент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	  "ВЫБРАТЬ
		|	гф_АдресаДоставки.Значение КАК Значение
		|ИЗ
		|	Справочник.гф_АдресаДоставки КАК гф_АдресаДоставки
		|		ГДЕ гф_АдресаДоставки.Ссылка = &Адрес";

	Запрос.УстановитьПараметр("Адрес", СвязанныйДокумент.гф_АдресДоставки);

	//"ВЫБРАТЬ
	//	|	ЗаказКлиента.АдресДоставки КАК АдресДоставки
	//	|ПОМЕСТИТЬ АдресПоЗаказу
	//	|ИЗ
	//	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	//	|ГДЕ
	//	|	ЗаказКлиента.Ссылка = &Ссылка
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	гф_АдресаДоставки.Значение КАК Значение
	//	|ИЗ
	//	|	АдресПоЗаказу КАК АдресПоЗаказу
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гф_АдресаДоставки КАК гф_АдресаДоставки
	//	|		ПО АдресПоЗаказу.АдресДоставки = гф_АдресаДоставки.Адрес";
	//
	//Запрос.УстановитьПараметр("Ссылка", СвязанныйДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка.Следующий();
		ИсточникКИ = Выборка.Значение;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Адрес;
		
		СтруктураКИ = УправлениеКонтактнойИнформациейСлужебный.JSONВКонтактнуюИнформациюПоПолям(ИсточникКИ, ТипКИ);
		
		Возврат СтруктураКИ;
	КонецЕсли;

	Возврат Неопределено;
	
КонецФункции

Функция КомпанииПриход(Документ)
	
	Компании = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Компании"));		
	
	Компании.Компания.Добавить(КомпанияПриход(Документ));
	
	возврат Компании;
КонецФункции // Компании()

Функция КомпанияПриход(Документ)
	Перем КомпанияАдрес;
	
	Компания = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Компания"));
	Компания.ИД = ПолучитьКодКлиента(Документ.Склад);
	Компания.Имя = Документ.Отправитель.Наименование;
	Компания.Адреса = АдресаПриход(КомпанияАдрес, Документ.Отправитель);
	Компания.Адрес = КомпанияАдрес;
	
	возврат Компания;
КонецФункции // КомпанииПриход()

Функция АдресаПриход(КомпанияАдрес, Отправитель)
	
	Адреса = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Адреса"));
	КомпанияАдрес = "";
	
	ЕстьАдрес = Ложь;
	структура = ПолучитьАдресПоТипуКомпании(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, Отправитель, ЕстьАдрес);
	Если ЕстьАдрес Тогда
		Адреса.Адрес.Добавить(Адрес(Структура, "Юридический адрес"));
		КомпанияАдрес = структура.Представление;
	КонецЕсли;
	
	ЕстьАдрес = Ложь;
	структура = ПолучитьАдресПоТипуКомпании(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, Отправитель, ЕстьАдрес);
	Если ЕстьАдрес Тогда
		Адреса.Адрес.Добавить(Адрес(Структура, "Фактический адрес"));
		КомпанияАдрес = структура.Представление;
	КонецЕсли;
	
	АдресДоставки = ПолучитьАдресДоставки(Отправитель);
	Если АдресДоставки.Представление <> Неопределено Тогда
		Структура = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(АдресДоставки.Представление,
		Перечисления.ТипыКонтактнойИнформации.Адрес);
		ЕстьАдрес = Истина;
	Иначе 
		Структура = ПолучитьАдресПоТипуКомпании(Справочники.ВидыКонтактнойИнформации.АдресПартнера, Отправитель, ЕстьАдрес);
		
		Если Структура.Представление = Неопределено Тогда	
			сообщение = "Не заполнен адрес доставки для контрагента " + Отправитель;
			ЗаписьЖурналаРегистрации(ЭтотОбъект, УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, Отправитель, сообщение);
			сообщить(сообщение);
			ВызватьИсключение сообщение;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьАдрес Тогда
		Адреса.Адрес.Добавить(Адрес(Структура, "Адрес доставки"));
		КомпанияАдрес = структура.Представление;
	КонецЕсли;

	возврат Адреса;
КонецФункции // ()

Функция Адрес(Структура, ТипАдреса)
	
	Адрес = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Адрес"));
	Адрес.Имя = Структура.Представление;
	Адрес.Индекс = Структура.Индекс;
	Адрес.Город = Структура.Город;
	Адрес.Район = Структура.Регион;
	Адрес.Страна = "Россия";
	Адрес.Тип = ТипАдреса;
	
	возврат Адрес;
КонецФункции // ()

Функция СписокТоваров(Документ, Тип)
	
	СписокТоваров = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "СписокТоваров"));
	
	Если Тип = "Приход" Тогда
		
		Если СкладПолучательВПарах Тогда
			// Посмотри как правильно выгружать информацию с документа	
			Для каждого строка Из Документ.Товары  Цикл
				СписокТоваров.ЭлементСпискаТоваров.Добавить(ЭлементСпискаТоваров_ПарныеСклады(строка, Документ));
			КонецЦикла;
			
		Иначе
			Для каждого строка Из Документ.Товары Цикл
				СписокТоваров.ЭлементСпискаТоваров.Добавить(ЭлементСпискаТоваров(строка, Документ));
			КонецЦикла;
		КонецЕсли;	
	Иначе 
		
		Для каждого строка Из Документ.ТоварыПоРаспоряжениям Цикл
			СписокТоваров.ЭлементСпискаТоваров.Добавить(ЭлементСпискаТоваров(строка, Документ));
		КонецЦикла;
		
	КонецЕсли;	

	возврат СписокТоваров;
КонецФункции // СписокТоваров()

Функция ЭлементСпискаТоваров(Строка, Документ)
	
	Элемент = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "ЭлементСпискаТоваров"));
	
	Элемент.Артикул = ПолучитьАртикулПО(строка);
	
	Элемент.Описание = строка.Номенклатура.НаименованиеПолное;
	Элемент.Наименование = строка.Номенклатура.Наименование;
	Элемент.Активность = 1;
	Элемент.УчетПартий = 1;
	Элемент.УчетНомераПартии = 1;
	Элемент.Цена = ПолучитьЦенуПО(строка);
	
	ЕдиницаИзмерения = строка.Номенклатура.ЕдиницаИзмерения;
	массив = новый Массив;
	массив.Добавить(новый Структура("Единица", ЕдиницаИзмерения.Наименование));
	
	Элемент.Единицы = Единицы(массив);
	
	возврат Элемент;
КонецФункции // ()

Функция ЭлементСпискаТоваров_ПарныеСклады(строка, Документ)
	
	Элемент = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "ЭлементСпискаТоваров_ПарныеСклады"));
	
	Элемент.Артикул = сокрЛП(строка.Артикул);
	Элемент.Описание = строка.Номенклатура.НаименованиеПолное;
	Элемент.Наименование = строка.Номенклатура.Наименование;
	Элемент.Активность = 1;
	Элемент.Цена = ПолучитьЦену(Строка.Номенклатура, Документ.СкладПолучатель);
	Элемент.КонтрольСерий = "INV_DETAIL";
	
	Элемент.Штрихкоды = Штрихкоды(Строка);
	
	ЕдиницаИзмерения = строка.Номенклатура.ЕдиницаХраненияОстатков;
	массив = новый Массив;
	массив.Добавить(новый Структура("Единица", ЕдиницаИзмерения.Наименование));
	
	Элемент.Единицы = Единицы(массив);
	
	возврат Элемент;
КонецФункции // ЭлементСпискаТоваров_ПарныеСклады()

Функция Штрихкоды(Строка)
	
	НоменклатураКод = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
		|	И ШтрихкодыНоменклатуры.Характеристика = &Характеристика";
	
	Запрос.УстановитьПараметр("Номенклатура", Строка.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Строка.Характеристика);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		НоменклатураКод = Выборка.Штрихкод;
	КонецЕсли;
	
	Штрихкоды = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Штрихкоды"));
	Штрихкоды.Штрихкод.Добавить(Штрихкод(НоменклатураКод));
	
	возврат Штрихкоды;
КонецФункции // Штрихкоды()

Функция Штрихкод(НоменклатураКод)

	Штрихкод = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Штрихкод"));
	
	Штрихкод.ТипШК = "EAN13";
	Штрихкод.Используется = 1;
	Штрихкод.Предназначение = 1;
	Штрихкод.ЗначениеШК = СокрЛП(НоменклатураКод);

	возврат Штрихкод;
КонецФункции // Штрихкод()

Функция Единицы(Массив)
	
	Единицы = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Единицы"));
	Для каждого строка Из Массив Цикл
		Единицы.Единица = Единица(строка.Единица);
	КонецЦикла;
	
	возврат Единицы;
КонецФункции // Единицы()

Функция Единица(Значение)

	Единица = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Единица"));
	Единица.Наименование = Значение;
	Единица.Описание = Значение;
	Единица.Коэффициент = 1;
	Единица.ЕдиницаДляОтбора = 1;
	Единица.ЕдиницаПоУмолчанию = 1;

	возврат Единица;
КонецФункции // Единица()

Функция РазделДокументы(Тип, Документ)
	
	РазделДокументы = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Документы"));
	РазделДокументы.Документ = РазделДокумент(Тип, Документ);
	
	возврат РазделДокументы;
КонецФункции // ()

Функция РазделДокумент(Тип, Документ)
	
	РазделДокумент = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Документ"));
	
	Если Тип = "Расход" Тогда
		Если ЭтоОсновнойСклад или ЭтоТаможенныйСклад тогда	
			ТипШапки = "X_DOCK_SO";
		//ИначеЕсли ЭтоСвободныйСклад тогда	
		//	ТипШапки = "FREE_WHSE_SO";
		Иначе	
			ТипШапки = "DEFAULT";
		КонецЕсли;
		
		РазделДокумент.Тип = "SO";
		//РазделДокумент.Шапка = ШапкаРасход();
		РазделДокумент.Шапка = Шапка(КодКлиента, КодКонтрагента, ТипШапки,  Документ, Документ.Получатель, Истина);
		РазделДокумент.Товары = ТоварыРасход(Документ);
		
	ИначеЕсли Тип = "Приход" Тогда
		//Если ЭтоПеремещение Тогда
		//	КодКлиента = ПолучитьКодКлиента(Документ.Склад);
		//	КодКонтрагента = ПолучитьКодКлиента(Документ.Склад);
		//КонецЕсли;
		
		Если ЭтоПоступление Тогда
			ТипШапки = "DEFAULT";
		Иначе
			Если СкладПолучательВПарах Тогда
				ТипШапки = "EL";
			ИначеЕсли Документ.СкладОтправитель = Справочники.w_Настройки.ОсновнойСклад.Значение тогда	
				ТипШапки = "X_DOCK_PO";
			ИначеЕсли Документ.СкладОтправитель = Справочники.w_Настройки.СкладСвободныеОстатки.Значение тогда	
				ТипШапки = "FREE_WHSE_PO";
			Иначе	
				ТипШапки = "DEFAULT";
			КонецЕсли;
		КонецЕсли;
		
		РазделДокумент.Тип = "PO";
		//РазделДокумент.Шапка = ШапкаПриход();
		РазделДокумент.Шапка = Шапка(КодКлиента, КодКонтрагента, ТипШапки, Документ, Документ.Отправитель);
		РазделДокумент.Товары = ТоварыПриход(Документ);
	КонецЕсли;
	
	возврат РазделДокумент;
КонецФункции // ()

Функция Шапка(КодКлиента, КодКонтрагента, Тип, Документ, Партнер, НомерИнвойса = Ложь)
		
	Шапка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Шапка"));
	Шапка.Номер = НомерЗаявки(КодКлиента, Документ);
	Шапка.Статус = "NEW";
	Шапка.Тип = Тип;
	Шапка.ДатаСоздания = формат(Документ.Дата, "ДФ='ггг-ММ-д hh:mm:ss'");
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
		Шапка.ДатаОкончания = формат(Документ.ДатаОтгрузки, "ДФ='ггг-ММ-д hh:mm:ss'"); 
	Иначе
		Шапка.ДатаОкончания = Формат(ЗаполнитьДатуОтгрузки(Документ.Дата), "ДФ='ггг-ММ-д hh:mm:ss'"); 
	КонецЕсли;
	Шапка.Контрагент = Партнер.НаименованиеПолное;
	Шапка.Отправитель = КодКлиента;
	Шапка.Получатель = КодКонтрагента;

	Если ЭтоРеализация Тогда
		КомментарииДляРеализации = Новый Структура; 
		//Комментарий
		КомментарииДляРеализации.Вставить("Комментарий",Документ.Комментарий);
		//ИНН 
		ИНН = НайтиИннПоПартнеру(Партнер);
		КомментарииДляРеализации.Вставить("ИНН", ИНН);
		// Контактное лицо контрагента для транспортной компании
		ИнформацияКонтактноеЛицо = СобратьИнформациюОКонтактномЛице(Партнер); 
		КомментарииДляРеализации.Вставить("КонтактноеЛицо",ИнформацияКонтактноеЛицо);
		//Вес

		ВесНакладной = ""; // пока не заполняем	
		КомментарииДляРеализации.Вставить("Вес", ВесНакладной);
		Шапка.Комментарии = КомментарииРеализации(КомментарииДляРеализации);
	Иначе
		Шапка.Комментарии = Комментарии(Документ.Комментарий);
	КонецЕсли;
	
	СтруктураАдреса = ПолучитьАдресДоставки(Документ);
	Если ЭтоРеализация Тогда
		Если СтруктураАдреса <> Неопределено Тогда
			Шапка.reference2 = СтруктураАдреса.ТКНаименование;
			Шапка.reference5 = СтруктураАдреса.Представление;
		КонецЕсли; 
	КонецЕсли;

	Если ЭтоПеремещение Тогда
		Если СтруктураАдреса <> Неопределено Тогда
			Шапка.reference2 = СтруктураАдреса.ТКНаименование;
			Шапка.Получатель = СтруктураАдреса.НомерАдреса;
		КонецЕсли;
	КонецЕсли;

	Если НомерИнвойса Тогда
		//Шапка.НомерИнвойса = ПолучитьНомерИнвойса();
		Шапка.reference3 = КодКлиента + "-" + КодКонтрагента;
	КонецЕсли;
	
	возврат Шапка;
КонецФункции // ()

Функция  СобратьИнформациюОКонтактномЛице(Партнер)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	гф_АдресаДоставки.КонтактноеЛицо КАК КонтактноеЛицо
		|ИЗ
		|	Справочник.гф_АдресаДоставки КАК гф_АдресаДоставки
		|ГДЕ
		|	гф_АдресаДоставки.Владелец.Наименование = &Наименование
		|";
	
	Запрос.УстановитьПараметр("Наименование", Партнер.Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		КонтактноеЛицо = ВыборкаДетальныеЗаписи.КонтактноеЛицо;
	КонецЦикла;
	
    Запрос = Новый Запрос;
	Запрос.Текст = 
		"
		|ВЫБРАТЬ
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефона КАК НомерТелефона
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
		|ГДЕ
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка = &Ссылка";
    Запрос.УстановитьПараметр("Ссылка", КонтактноеЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Записи = РезультатЗапроса.Выбрать();
	Телефоны = "";
	Пока Записи.Следующий() Цикл
		Телефоны = Телефоны + Записи.НомерТелефона + ", ";
	КонецЦикла;
    ИнформацияКонтактноеЛицо = КонтактноеЛицо.Наименование + " " + Телефоны;
	Возврат ИнформацияКонтактноеЛицо;
	
КонецФункции

Функция ПолучитьАдресДоставки(Документ)
	
	СвязанныйДокумент = ПолучитьСвязанныйДокументРО(Документ);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1 
		|	гф_АдресаДоставки.Представление КАК Представление,
		|	гф_АдресаДоставки.НомерАдреса КАК НомерАдреса,
		|	гф_АдресаДоставки.ТК.Наименование КАК ТКНаименование
		|ИЗ
		|	Справочник.гф_АдресаДоставки КАК гф_АдресаДоставки
		|ГДЕ
		|	гф_АдресаДоставки.Ссылка = &Адрес";
	
	Запрос.УстановитьПараметр("Адрес", СвязанныйДокумент.гф_АдресДоставки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаАдресов = РезультатЗапроса.Выгрузить();
	
	СтруктураАдреса = Новый Структура;
	
	Для каждого Колонка Из ТаблицаАдресов.Колонки Цикл
		СтруктураАдреса.Вставить(Колонка.Имя);
	КонецЦикла;
	Если ТаблицаАдресов.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(СтруктураАдреса, ТаблицаАдресов[0]);
	КонецЕсли;

	Возврат СтруктураАдреса;
	
КонецФункции

Функция НайтиИннПоПартнеру(Партнер)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.ИНН КАК ИНН
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Наименование = &Наименование
		|	И Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)";
	
	Запрос.УстановитьПараметр("Наименование", Партнер.Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка.Следующий();
		Возврат Выборка.ИНН;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция ТоварыРасход(Документ)
	
	Товары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Товары"));
	
	Если СкладОтправительВПарах Тогда
		запрос = новый Запрос(
			"ВЫБРАТЬ
			|	а.Номенклатура.Артикул КАК Артикул,
			|	а.Характеристика КАК Характеристика,
			|	а.Количество КАК Количество,
			|	а.Номенклатура КАК Номенклатура,
			|	а.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК а
			|ГДЕ
			|	а.Ссылка = &Документ
			|
			|УПОРЯДОЧИТЬ ПО
			|	Артикул");
		
		запрос.УстановитьПараметр("Документ", Документ);
		выборка = запрос.Выполнить().Выгрузить();
		
		НПП = 0;
		выборка.Свернуть("Артикул, Характеристика", "Количество");
		Для каждого строка Из выборка Цикл
			НПП = НПП + 1;			
			Товары.Строка.Добавить(СтрокаТовара2(строка, НПП, Истина, выборка));
		КонецЦикла;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОтгружаемыеТовары.УпаковочныйЛист КАК УпаковочныйЛист,
			|	ОтгружаемыеТовары.Количество КАК Количество
			|ПОМЕСТИТЬ УЛ
			|ИЗ
			|	Документ.РасходныйОрдерНаТовары.ОтгружаемыеТовары КАК ОтгружаемыеТовары
			|ГДЕ
			|	ОтгружаемыеТовары.Ссылка = &Ссылка
			|	И ОтгружаемыеТовары.ЭтоУпаковочныйЛист = ИСТИНА
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	УЛ.УпаковочныйЛист КАК УпаковочныйЛист,
			|	УЛ.Количество КАК Количество,
			|	УЛ.УпаковочныйЛист.гф_Комплектация.Наименование КАК Артикул,
			|	УЛ.УпаковочныйЛист.Код КАК СерийныйНомер,
			|	УпаковочныйЛистТовары.Номенклатура КАК Номенклатура
			|ИЗ
			|	УЛ КАК УЛ
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
			|		ПО УЛ.УпаковочныйЛист = УпаковочныйЛистТовары.Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Документ);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выгрузить();
		
		Для каждого строка Из Выборка Цикл
			Товары.Строка.Добавить(СтрокаТовара(строка, Документ));
		КонецЦикла;
		
	КонецЕсли;
	
	возврат Товары;
КонецФункции // ()

Функция СтрокаТовара(строка, Документ)
	
	СтрокаТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "СтрокаТовара"));
	Если ЭтоПеремещение и СкладМаркетплейса Тогда
		СтрокаТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "СтрокаТовара3"));
	КонецЕсли;
	СтрокаТовара.Код = строка.Артикул;
	СтрокаТовара.НомерСтроки = строка.НомерСтроки;
	СтрокаТовара.Количество = строка.Количество;
	СтрокаТовара.Цена = ПолучитьЦенуSO(Документ, Строка);
	
	СтрокаТовара.СерийныйНомер = строка.СерийныйНомер;
	Если ЭтоПеремещение Тогда
		СтрокаТовара.Комментарии = Комментарии(строка.Артикул + "|" + строка.Номенклатура);
	ИначеЕсли ЭтоРеализация Тогда
		СтрокаТовара.Комментарии = Комментарии(строка.Артикул + "|" + строка.Номенклатура);
	КонецЕсли;
	
	возврат СтрокаТовара;
КонецФункции // СтрокаТовара()

Функция СтрокаТовара2(строка, НПП, СерийныйНомер, выборка)
	
	СтрокаТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "СтрокаТовара2"));
	Если ЭтоПеремещение и СкладМаркетплейса Тогда
		СтрокаТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "СтрокаТовара4"));
		СтрокаТовара.Сумма = строка.Сумма;
	КонецЕсли;

	СтрокаТовара.НомерСтроки = НПП;
	СтрокаТовара.Код = строка.Артикул;
	СтрокаТовара.Количество = строка.Количество;
		
	возврат СтрокаТовара;
КонецФункции // ()

Функция ТоварыПриход(Документ)
	
	Если СкладПолучательВПарах Тогда
		КодОрганизацииВместоАртикула = КодОрганизацииВместоАртикула(Документ.Склад);
		
		Товары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Товары"));
		НПП = 1;
		Для каждого строка Из артикулы Цикл
			Товары.Строка.Добавить(СтрокаТовараПриход_ПарныеСклады(строка, НПП, выборка));
			НПП = НПП + 1;
		КонецЦикла;
	Иначе
		Товары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Товары"));
		Для каждого строка Из Документ.Товары Цикл
			Товары.Строка.Добавить(СтрокаТовараПриход(строка));
		КонецЦикла;
	КонецЕсли;
	
	возврат Товары;
КонецФункции // РазделТовары()

Функция СтрокаТовараПриход(строка)
	
	СтрокаТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "СтрокаТовараПриход"));
	
	//Если не ЗначениеЗаполнено(строка.СерияНоменклатуры) или строка.СерияНоменклатуры.СерийныйНомер = "" Тогда
	Артикул = сокрЛП(строка.Номенклатура.Артикул);
	//	
	//ИначеЕсли ПеремещениеДляСкладаПолучателяПоступлениеАртикулНомерЗаказа Тогда
	//	Заказ = строка.ДокументРезерва;
	//	Если ЗначениеЗаполнено(Заказ) Тогда
	//		АдресДоставкиНовый = Заказ.АдресДоставкиНовый;
	//		Если ЗначениеЗаполнено(АдресДоставкиНовый) и ЗначениеЗаполнено(АдресДоставкиНовый.НомерАдреса) Тогда
	//			Артикул = КодОрганизации + "-" + сокрЛП(АдресДоставкиНовый.НомерАдреса);
	//		Иначе
	//			Артикул = СокрЛП(строка.Номенклатура.Артикул);
	//		КонецЕсли;
	//	Иначе
	//		Артикул = СокрЛП(строка.Номенклатура.Артикул);
	//	КонецЕсли;
	//	
	//Иначе
	//	Артикул = СокрЛП(строка.Номенклатура.Артикул);
	//КонецЕсли;
	СтрокаТовара.Код = Артикул;
	
	СтрокаТовара.НомерСтроки = строка.НомерСтроки;
	СтрокаТовара.Код = ПолучитьАртикулПО(строка);
	СтрокаТовара.Количество = строка.Количество;
	СтрокаТовара.Атрибуты = Атрибуты(строка);
	
	//Если не СкладПолучательВПарах 
	//	//и ПолучательСерийныйНомерВместоКМ и СкладОтправительВПарах и ОтправительСерийныйНомерВместоКМ 
	//	Тогда
	//	СтрокаТовара.СерийныеНомера = СерийныеНомера(строка.СерияНоменклатуры.ЛИТ_КМ);
	//Иначе
	//	СтрокаТовара.СерийныйНомер = строка.СерияНоменклатуры.СерийныйНомер;
	//КонецЕсли;
	
	СтрокаТовара.Комментарии = Комментарии(строка.Номенклатура.Артикул + "|" + ПолучитьЦенуПО(строка) + "|" + "строка.Коэффициент" + "|" + строка.Номенклатура);
	
	возврат СтрокаТовара;
КонецФункции // СтрокаТовараПриход()

Функция Атрибуты(строка)

	Атрибуты = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Атрибуты"));
	
	выборка = ПолучитьАтрибутыНоменклатуры(строка.Номенклатура);
	Пока выборка.Следующий() Цикл
		Атрибуты.Атрибут.Добавить(Атрибут(выборка.Имя, формат(выборка.Значение/1000, "ЧРД=.")));
	КонецЦикла;
	
	возврат Атрибуты;
КонецФункции // Атрибуты()

Функция Атрибут(Имя, Значение)
	
	Атрибут = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Атрибут"));
	Атрибут.Имя = Имя;
	Атрибут.Значение = Значение;
	
	возврат Атрибут;
КонецФункции // ()

Функция СтрокаТовараПриход_ПарныеСклады(строка, НПП, выборка)
	
	СтрокаТовара = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "СтрокаТовараПриход_ПарныеСклады"));
	
	//ДокументРезерва = строка.ДокументРезерва;
	Артикул = СокрЛП(строка.Артикул);
	
	СтрокаТовара.НомерСтроки = НПП;
	СтрокаТовара.Код = Артикул;
	СтрокаТовара.Количество = строка.Количество;
	
	СерийныеНомера = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "СерийныеНомера"));
	//СтрокаТовара.СерийныеНомера = СерийныеНомера;
	
	нашли = выборка.НайтиСтроки(новый Структура("Артикул", Артикул));
	Для каждого строкаКМ Из нашли Цикл
		СерийныеНомера.СерийныйНомер.Добавить(сокрЛП(строкаКМ.КМ));
	КонецЦикла;
	
	возврат СтрокаТовара;
КонецФункции // ()

Функция Комментарии(Значение)
	Комментарии = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Комментарии"));
	Комментарии.Комментарий.Добавить(Комментарий(Значение));
	возврат Комментарии;
КонецФункции // Комментарии()

Функция Комментарий(Значение,Последовательность=1)
	
	Комментарий = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Комментарий"));
	Комментарий.Тип = "DISPLAY_WEB";
	Комментарий.Последовательность = Последовательность;
	Комментарий.Значение = Значение;
	
	возврат Комментарий;
КонецФункции // ()

Функция КомментарииРеализации(КомментарииДляРеализации)
	Комментарии = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("WMS", "Комментарии"));
	Комментарии.Комментарий.Добавить(Комментарий(КомментарииДляРеализации.Комментарий,1));
	Комментарии.Комментарий.Добавить(Комментарий(КомментарииДляРеализации.ИНН,2)); 
	Комментарии.Комментарий.Добавить(Комментарий(КомментарииДляРеализации.КонтактноеЛицо,3));
	Комментарии.Комментарий.Добавить(Комментарий(КомментарииДляРеализации.Вес,4));
	возврат Комментарии;
КонецФункции // Комментарии()

Функция ПолучитьАртикулПО(строка)
	
	Если ЭтоТаможенныйСклад или ЭтоОсновнойСклад Тогда
		Если ЭтоПоступление и ЗначениеЗаполнено(строка.Заказ) Тогда
			НомерАдреса = строка.Заказ.АдресДоставкиНовый.НомерАдреса;
			Если НомерАдреса = "" Тогда
				НомерАдреса = строка.ДокументРезерва.Контрагент.Код;
			КонецЕсли;
			//Артикул = ЛИТ_ОбменДанными.ЛИТ_СформироватьАртикулДляСклада(НомерАдреса);
		ИначеЕсли ЭтоПеремещение и ЗначениеЗаполнено(строка.ДокументРезерва) Тогда
			НомерАдреса = строка.ДокументРезерва.АдресДоставкиНовый.НомерАдреса;
			Если НомерАдреса = "" Тогда
				НомерАдреса = строка.ДокументРезерва.Контрагент.Код;
			КонецЕсли;
			//Артикул = ЛИТ_ОбменДанными.ЛИТ_СформироватьАртикулДляСклада(НомерАдреса);
		Иначе
			//Артикул = сокрЛП(строка.Номенклатура.Артикул);
		КонецЕсли;
	Иначе
		Артикул = сокрЛП(строка.Номенклатура.Артикул);
	КонецЕсли;
	
	возврат Артикул;
КонецФункции // ПолучитьАртикулПО()

Функция ПолучитьЦенуПО(строка)

	//Если ЭтоПоступление Тогда
	//	Если Документ.УчитыватьНДС и не Документ.СуммаВключаетНДС Тогда
	//		Цена = формат((строка.Сумма + строка.СуммаНДС)/строка.Количество, "ЧДЦ=2; ЧГ=0");
	//	Иначе
	//		Цена = формат(строка.Цена, "ЧДЦ=2; ЧГ=0");
	//	КонецЕсли;
	//ИначеЕсли ЭтоПеремещение Тогда
	//	Цена = ПолучитьЦену(Строка.Номенклатура, Документ.СкладПолучатель);
	//КонецЕсли;
	
	//возврат Цена;
	Возврат 0;
КонецФункции // ()

Функция ПолучитьТаблицуКомплектующихПоПеремещению(Перемещение)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	а.Регистратор.Номенклатура.Артикул КАК ИсходнаяАртикул,
	|	а.Регистратор.Номенклатура КАК ИсходнаяНоменклатура,
	|	а.Регистратор.СерияНоменклатуры КАК ИсходнаяСерияНоменклатуры,
	|	а.Номенклатура.Артикул КАК Артикул,
	|	а.Номенклатура КАК Номенклатура,
	|	а.СерияНоменклатуры КАК СерияНоменклатуры,
	|	а.СерияНоменклатуры.СерийныйНомер КАК СерийныйНомер,
	|	ЕСТЬNULL(а.СерияНоменклатуры.ЛИТ_КМ, а.СерияНоменклатуры.СерийныйНомер) КАК КМ,
	|	а.КоличествоПриход КАК Количество
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах.Обороты(, , Регистратор, ) КАК а
	|ГДЕ
	|	а.Регистратор.RC_ДокументОснование = &Перемещение");
	Запрос.УстановитьПараметр("Перемещение", Перемещение);
	возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьТаблицуКомплектующихПоПеремещению()

Функция ПолучитьТаблицуКомплектующихПоПеремещению_Старая(СсылкаНаПеремещение)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РН_Партии.Номенклатура КАК Номенклатура,
	|	РН_Партии.Номенклатура.Артикул КАК Артикул,
	|	РН_Партии.СерияНоменклатуры КАК СерияНоменклатуры,
	|	РН_Партии.СерияНоменклатуры.СерийныйНомер КАК СерийныйНомер,
	|	РН_Партии.КоличествоПриход КАК Количество,
	|	ВЫРАЗИТЬ(РН_Партии.ДокументОприходования КАК Документ.КомплектацияНоменклатуры).Номенклатура КАК ИсходнаяНоменклатура,
	|	ВЫРАЗИТЬ(РН_Партии.ДокументОприходования КАК Документ.КомплектацияНоменклатуры).СерияНоменклатуры КАК ИсходнаяСерияНоменклатуры,
	|	ЕСТЬNULL(РН_Партии.СерияНоменклатуры.ЛИТ_КМ, РН_Партии.СерияНоменклатуры.СерийныйНомер) КАК КМ
	//|	ЕСТЬNULL(РН_Партии.СерияНоменклатуры.ЛИТ_КМ.КМ, РН_Партии.СерияНоменклатуры.СерийныйНомер) КАК КМ,
	//|	ЕСТЬNULL(РН_Партии.СерияНоменклатуры.ЛИТ_КМ.Наименование, РН_Партии.СерияНоменклатуры.СерийныйНомер) КАК КМ_Наименование
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.Обороты(
	|			&НачПериода,
	|			&КонПериода,
	|			Период,
	|			ДокументОприходования ССЫЛКА Документ.КомплектацияНоменклатуры
	|				И ВЫРАЗИТЬ(ДокументОприходования КАК Документ.КомплектацияНоменклатуры).RC_ДокументОснование = &НашеПеремещение) КАК РН_Партии
	|ГДЕ
	|	РН_Партии.КоличествоПриход > 0";
	
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(СсылкаНаПеремещение.Дата));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(СсылкаНаПеремещение.Дата));
	Запрос.УстановитьПараметр("НашеПеремещение", СсылкаНаПеремещение);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьТаблицуКомплектующихПоПеремещению()

Функция КодОрганизацииВместоАртикула(Склад)

	запрос = новый Запрос(
	"ВЫБРАТЬ
	|	а.ИдентификаторЗаписи КАК ИдентификаторЗаписи
	|ИЗ
	|	РегистрСведений.КатегорииОбъектов КАК а
	|ГДЕ
	|	а.Объект = &Объект
	|	И а.Категория = &Категория");
	запрос.УстановитьПараметр("Объект", Склад);
	запрос.УстановитьПараметр("Категория", Справочники.w_Настройки.КодОрганизацииВместоАртикулаВЗаявкеНаРасход.Значение);
	результат = запрос.Выполнить();
	возврат не результат.Пустой();

КонецФункции // ()

Процедура ЗаписатьОтправитьПакет(Пакет, ИмяФайлаБезПути, ИмяФайла, НомерСообщения, ВидДанных, Документ, Настройки)
	
	Попытка
		Отказ = Ложь;
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ИмяФайла, "UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Пакет, "instock");
		ЗаписьXML.Закрыть();
		ОбработатьФайл(ИмяФайла);
		
			ЗаписатьСообщениеОшибки("Записан файл '" + ИмяФайла);
			//ОтправитьФайл(ИмяФайла, Настройки, Соединение, , Отказ);
			
			Если Не Отказ Тогда
				Запись = РегистрыСведений.гф_ДанныеВыгрузки.СоздатьМенеджерЗаписи();
				Запись.Период = ТекущаяДатаСеанса();
				Запись.НомерСообщения = НомерСообщения;
				Запись.ВидДанных = ВидДанных;
				Запись.Документ = Документ;
				Запись.Состояние = Перечисления.гф_СтатусыВыгрузкиДанных.Отправлено;
				Запись.ИмяФайла = ИмяФайлаБезПути;
				Запись.Записать();
			КонецЕсли;
	
	Исключение
		Сообщение = "Не удалось записать файл " + ИмяФайла + " " + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Предупреждение", УровеньЖурналаРегистрации.Предупреждение, ЭтотОбъект, ЭтотОбъект, Сообщение);
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ТекущаяДата(), "ДЛФ=T") + ". " + Сообщение);

	КонецПопытки;
КонецПроцедуры 

Процедура ОтправитьФайл(ИмяФайла, Настройки, Соединение = Неопределено, НовоеРасширение = "", Отказ, НомерСклада = "") Экспорт
	
	// пока используем только ftp
	ВыгрузитьНаFTP(ИмяФайла, Настройки, Соединение, Истина, НовоеРасширение, Отказ, НомерСклада);
	
КонецПроцедуры 

Процедура ВыгрузитьНаFTP(ФайлДляВыгрузки, НастройкиFTPСоединения, Соединение = Неопределено, ПомещатьСразуВАрхив = Истина, НовоеРасширение = "", Отказ, НомерСклада = "") Экспорт
	
	Если Не ЗначениеЗаполнено(ФайлДляВыгрузки) Тогда
		ЗаписатьСообщениеОшибки("Не определен файл выгрузки", Истина);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НастройкиFTPСоединения = Неопределено Тогда
		ЗаписатьСообщениеОшибки("Не определены настройки ftp-соединения", Истина);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Соединение = Неопределено Тогда
		Соединение = _омОбщегоНазначенияВызовСервера.гф_ПолучитьСоединение(НастройкиFTPСоединения);
	КонецЕсли;	
	
	МассивПутейНаFTP = Новый Массив;
	
	//++лысов
	// если НомерСклада указан, то это выгрузка на подбор и указываем другой путь, путя из настройки игнорируем
	Если НомерСклада > "" Тогда
		МассивПутейНаFTP.Добавить("/" + сокрЛП(НомерСклада) + "/Inbound/");
	ИначеЕсли НастройкиFTPСоединения.Каталог.Количество() > 0 Тогда
		Для Каждого СтрПапкаFTP Из НастройкиFTPСоединения.Каталог Цикл
			МассивПутейНаFTP.Добавить(СтрПапкаFTP.КаталогFTP);
		КонецЦикла;
	Иначе
		МассивПутейНаFTP.Добавить(Соединение.ТекущийКаталог());
	КонецЕсли;	
	
	Если МассивПутейНаFTP.Количество() = 0 Тогда
		ЗаписатьСообщениеОшибки("Не определены директории для загрузки файлов на ftp", Истина);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(ФайлДляВыгрузки);
	Если не Файл.ЭтоФайл() Тогда
		возврат;
	КонецЕсли;
	СообщениеОбОшибке = "";
	
	Для Каждого СтрокаПутьНаFTP Из МассивПутейНаFTP Цикл
		ТекКаталог = СтрЗаменить(СтрЗаменить(СтрокаПутьНаFTP, "\", "/"), "//", "/");	
		Если Прав(ТекКаталог, 1) <> "/" Тогда
			ТекКаталог = ТекКаталог + "/";
		КонецЕсли;
		
		Попытка
			СообщениеОбОшибке = "Попытка установить каталог " + ТекКаталог + " - ";
			Соединение.УстановитьТекущийКаталог(ТекКаталог);
			ЗаписатьСообщениеОшибки("Установлен каталог: " + ТекКаталог);
			
			СообщениеОбОшибке = "Попытка записи файла " + Файл.ПолноеИмя + " - ";
			
			Если ПомещатьСразуВАрхив Тогда
				// узнать про архивную папку...
				ИмяАрхивнойПапки = НастройкиFTPСоединения.Каталог + ?(Прав(НастройкиFTPСоединения.Каталог, 1) = "\", "", "\") + "Archive";
				СоздатьКаталог(ИмяАрхивнойПапки);
				
				КаталогАрхив = Новый Файл(ИмяАрхивнойПапки);
				Если Не КаталогАрхив.Существует() Тогда
					ЗаписатьСообщениеОшибки("Каталог для архивирования файлов задан неверно или не существует...", Истина);
					Отказ = Истина;
					Возврат;
				КонецЕсли;
				
				КопироватьФайл(Файл.ПолноеИмя, ИмяАрхивнойПапки + "\" + Файл.Имя);
				Соединение.Записать(ИмяАрхивнойПапки + "\" + Файл.Имя, Файл.Имя);
			Иначе
				Соединение.Записать(Файл.ПолноеИмя, Файл.Имя);
			КонецЕсли;
			
			//Проверим записан ли файл на ftp
			Если Соединение.НайтиФайлы(ТекКаталог + Файл.Имя).Количество() > 0 Тогда
				Если Не ПустаяСтрока(НовоеРасширение) Тогда
					// Для пердотвращения немедленной обработки переданного файла внешними роботами, файл может передаваться с фиктивным расширением
					// После того, как убедились, что файл передан удачно, если задан параметр НовоеРасширение - перименовываем файл.
					Соединение.Переместить(ТекКаталог + Файл.Имя, ТекКаталог + Файл.ИмяБезРасширения + "." + НовоеРасширение);
					Соединение.Удалить(ТекКаталог, Файл.Имя);
				КонецЕсли;
				
				ЗаписатьСообщениеОшибки("Файл успешно записан: " + ТекКаталог + Файл.Имя);
				
				СообщениеОбОшибке = "Попытка удаления файла " + Файл.ПолноеИмя + " - ";
				УдалитьФайлы(Файл.ПолноеИмя);
				
				// проверим удален ли с диска файл
				Если НайтиФайлы(Файл.ПолноеИмя).Количество() <> 0 Тогда
					ЗаписатьСообщениеОшибки("Ошибка удаления файла " + Файл.ПолноеИмя + " с диска! ", Истина);
				КонецЕсли;
				
			Иначе // файл не записан
				ЗаписатьСообщениеОшибки("Файл не записан: " + ТекКаталог + Файл.Имя, Истина);	
			КонецЕсли;	
			
		Исключение
			ЗаписатьСообщениеОшибки(СообщениеОбОшибке + ОписаниеОшибки(), Истина);
			Отказ = Истина;
			Возврат;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСвойствоЛогистическаяИнформацияПеремещения()
	//
	//Свойство = Справочники.w_Настройки.СвойствоЛогистическаяИнформацияПеремещения.Значение;
	//
	//запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
	//запись.Объект = Документ;
	//запись.Свойство = Свойство;
	//запись.Прочитать();
	//
	//Если запись.Выбран() Тогда
	//	Значение = запись.Значение;
	//Иначе
	//	Значение = "";
	//КонецЕсли;
	//
	//Если найти(Значение, "Отправили SO/PO") = 0 Тогда
	//	Если Значение = "" Тогда
	//		массив = новый Массив;
	//		массив.Добавить("Отправили SO/PO " + ТекущаяДата());
	//	Иначе
	//		массив = СтрРазделить(Значение, Символы.ПС);
	//		массив.Вставить(0, "Отправили SO/PO " + ТекущаяДата());
	//	КонецЕсли;
	//	запись.Объект = Документ;
	//	запись.Свойство = Свойство;
	//	запись.Значение = СтрСоединить(массив, Символы.ПС);
	//	запись.Записать();
	//КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьАтрибутыНоменклатуры(Номенклатура)
	
	Длина = ПолучитьЗначениеПВХ("Length"); 
	Высота = ПолучитьЗначениеПВХ("Height");
	Ширина = ПолучитьЗначениеПВХ("Width");
	Вес = ПолучитьЗначениеПВХ("Weight");
	
	//МассивПараметров = Новый Массив;
	//МассивПараметров.Добавить(Длина);
	//МассивПараметров.Добавить(Высота);
	//МассивПараметров.Добавить(Ширина);
	//МассивПараметров.Добавить(Вес);
	//
	//Результат = новый Структура("Длина, Высота, Ширина, Вес");
	//
	//Набор = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	//	Набор.Отбор.Объект.Установить(Номенклатура);
	//	Набор.Прочитать();
	//	ТекущиеЗначения = Набор.Выгрузить();                             
	//	
	//	Свойство_GLN_supplier = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("GLN_supplier");
	//		Значение = Новый Структура("Свойство, Значение", Свойство_GLN_supplier, GLN_supplier);
	//		ЗначенияСвойств.Добавить(Значение);

	//	Для Каждого Элемент Из МассивПараметров Цикл
	//		НайденноеЗначение = ТекущиеЗначения.Найти(Элемент, "Свойство");
	//		Если НайденноеЗначение <> Неопределено Тогда
	//			Результат.Вставить(Элемент, НайденноеЗначение); 
	//		КонецЕсли;	
	//	КонецЦикла;
	//		
	запрос = новый Запрос(
	"ВЫБРАТЬ
	|	""LENGTH"" КАК Имя,
	|	а.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК а
	|ГДЕ
	|	а.Объект = &Объект
	|	И а.Свойство = &Длина
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""WIDTH"",
	|	а.Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК а
	|ГДЕ
	|	а.Объект = &Объект
	|	И а.Свойство = &Ширина
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""HEIGHT"",
	|	а.Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК а
	|ГДЕ
	|	а.Объект = &Объект
	|	И а.Свойство = &Высота
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""WEIGHT"",
	|	а.Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК а
	|ГДЕ
	|	а.Объект = &Объект
	|	И а.Свойство = &Вес");
	
	запрос.УстановитьПараметр("Объект", Номенклатура);
	запрос.УстановитьПараметр("Длина", Длина);
	запрос.УстановитьПараметр("Ширина", Ширина);
	запрос.УстановитьПараметр("Высота", Высота);
	запрос.УстановитьПараметр("Вес", Вес);
	
	выборка = запрос.Выполнить().Выбрать();
	
	возврат выборка;
КонецФункции // ()

Функция ПолучитьЗначениеПВХ(Свойство)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
		|ГДЕ
		|	ДополнительныеРеквизитыИСведения.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Свойство);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи.Следующий();
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;	
КонецФункции

Функция ПолучитьЦену(Номенклатура, Склад)
	
	//запрос = новый Запрос(
	//"ВЫБРАТЬ
	//|	а.Номенклатура КАК Номенклатура,
	//|	а.Склад КАК Склад,
	//|	а.СтоимостьОборот / а.КоличествоОборот КАК Цена
	//|ИЗ
	//|	РегистрНакопления.ПартииТоваровНаСкладах.Обороты(, , Регистратор, Номенклатура = &Номенклатура) КАК а
	//|ГДЕ
	//|	а.Регистратор = &Регистратор");
	//запрос.УстановитьПараметр("Регистратор", Документ);
	//запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	//выборкаЦены = запрос.Выполнить().Выбрать();
	//Если выборкаЦены.Следующий() Тогда
	//	Цена = выборкаЦены.Цена;
	//Иначе
	//	Цена = 0;
	//КонецЕсли;
	//
	//возврат формат(Цена, "ЧДЦ=2; ЧГ=0");
КонецФункции // ()

Функция ПолучитьЦенуSO(Документ, Строка)
	Цена=0;
	СвязанныйДокумент = ПолучитьСвязанныйДокументРО(Документ);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказКлиентагф_ТоварыВКоробах.ЦенаКороба КАК ЦенаКороба
		|ИЗ
		|	Документ.ЗаказКлиента.гф_ТоварыВКоробах КАК ЗаказКлиентагф_ТоварыВКоробах
		|ГДЕ
		|	ЗаказКлиентагф_ТоварыВКоробах.Ссылка = &Ссылка
		|	И ЗаказКлиентагф_ТоварыВКоробах.ВариантКомплектации = &ВариантКомплектации";
	
	Запрос.УстановитьПараметр("ВариантКомплектации", Строка.ВариантКомплектации);
	Запрос.УстановитьПараметр("Ссылка", СвязанныйДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
	Выборка.Следующий();
	Цена = Выборка.ЦенаКороба * Строка.Количество; 
	КонецЕсли;

	Возврат СтрЗаменить(формат(Цена, "ЧДЦ=2"), Символы.НПП, "");
	
КонецФункции // ()

Процедура ОбработатьФайл(ИмяФайла)
	чтение = новый ЧтениеТекста(ИмяФайла);
	текст = чтение.Прочитать();
	чтение.Закрыть();
	запись = новый ЗаписьТекста(ИмяФайла);
	текст = СтрЗаменить(текст, " xmlns=""WMS""", "");
	текст = СтрЗаменить(текст, " xmlns:xs=""http://www.w3.org/2001/XMLSchema""", "");
	текст = СтрЗаменить(текст, " xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""", "");
	текст = СтрЗаменить(текст, " xsi:type=""Адреса""", "");
	// НАЧАЛО ИЗМЕНЕНИЙ, МАСТЕР СОФТ, АЛЕКСЕЙ, 23.10.2020. Задача: 
	текст = СтрЗаменить(текст, " xsi:type=""Адрес""", "");
	// КОНЕЦ ИЗМЕНЕНИЙ
	текст = СтрЗаменить(текст, " xsi:type=""СтрокаТовара""", "");
	текст = СтрЗаменить(текст, " xsi:type=""СтрокаТовараПриход""", "");
	текст = СтрЗаменить(текст, " xsi:type=""Атрибут""", "");
	текст = СтрЗаменить(текст, " xsi:type=""Адрес2""", "");
	текст = СтрЗаменить(текст, " xsi:type=""СтрокаТовара2""", "");
	//+ЛИТ Иванов 25102021
	текст = СтрЗаменить(текст, " xsi:type=""СтрокаТовара3""", "");
	текст = СтрЗаменить(текст, " xsi:type=""СтрокаТовара4""", "");
	//-ЛИТ Иванов 25102021	
	текст = СтрЗаменить(текст, " xsi:type=""СерийныеНомера""", "");
	текст = СтрЗаменить(текст, " xsi:type=""Штрихкод""", "");
	текст = СтрЗаменить(текст, " xsi:type=""ЭлементСпискаТоваров_ПарныеСклады""", "");
	текст = СтрЗаменить(текст, " xsi:type=""СтрокаТовараПриход_ПарныеСклады""", "");
	текст = СтрЗаменить(текст, " xsi:type=""ЭлементСпискаТоваров""", "");
	текст = СтрЗаменить(текст, Символы.Таб, "");
	текст = СтрЗаменить(текст, Символы.ПС, "");
	запись.Записать(текст);
	запись.Закрыть();
КонецПроцедуры

Функция НомерЗаявки(КодКлиента, Документ)
	
	Если ЭтоРеализация Тогда
		НомерЗаявки = КодКлиента + Документ.Номер;
	ИначеЕсли ЭтоПоступление Тогда 
		НомерЗаявки = Документ.Номер;
	ИначеЕсли ЭтоПеремещение Тогда
		НомерЗаявки =  КодКлиента + Документ.Номер + "-M";
	Иначе
		ДляПоиска = строка(Документ.СкладПолучатель);
		Если Найти(ДляПоиска, "Товары для розницы") = 0 Тогда  
			НомерЗаявки =  КодКлиента + Документ.Номер + "-S";
		Иначе
			НомерЗаявки =  КодКлиента + Документ.Номер + "-R";
		КонецЕсли;
	КонецЕсли;
	
	возврат НомерЗаявки;
КонецФункции // ()

Функция ЗаполнитьДатуОтгрузки(ДатаОтгр)
	
	ДатаОтгрузки = ДатаОтгр;
	//расчет рабочих дней для отгрузки
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ДанныеПроизводственногоКалендаря.Дата КАК Дата
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.Год МЕЖДУ &ГодНач И &ГодКон
	|	И ДанныеПроизводственногоКалендаря.ВидДня В(&РабДни)";
	
	Запрос.УстановитьПараметр("ГодНач",Год(ТекущаяДата())-1);
	Запрос.УстановитьПараметр("ГодКон",Год(ТекущаяДата())+1);
	МасВидДня = Новый Массив;
	МасВидДня.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	МасВидДня.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
	Запрос.УстановитьПараметр("РабДни",МасВидДня);
	ТзРабДней = Запрос.Выполнить().Выгрузить();
	МасРабДней = ТзРабДней.ВыгрузитьКолонку("Дата");
	//расчет даты отгрузки для письма
	ВремяХ = 13;
	Если ЗначениеЗаполнено(ДатаОтгрузки) Тогда
		ДобавитьДней = 0;
		Час = Час(ДатаОтгрузки);
		Если Час < ВремяХ Тогда
			ДобавитьДней = 1;
		Иначе
			ДобавитьДней = 2;	
		КонецЕсли;
		//проверка по регл. произв. календарю
		Для дн = 1 По ДобавитьДней Цикл
			ДатаОтгрузки = ДатаОтгрузки + 86400;
			Добавлять = Истина;
			сч = 1;
			Пока Добавлять Цикл
				сч = сч+1;
				Если МасРабДней.Найти(НачалоДня(ДатаОтгрузки)) = Неопределено Тогда
					ДатаОтгрузки = ДатаОтгрузки + 86400;
					//ошибка в производственном календаре, нерабочих дней > 20 
					Если сч > 20 Тогда
						Добавлять = Ложь;
						Сообщить("Проверте заполнение производственного календаря!");
						ДатаОтгрузки = ДатаОтгрузки + 86400; 
					КонецЕсли;
				Иначе
					Добавлять = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	Возврат ДатаОтгрузки;
	
КонецФункции

Функция ПолучитьКодКлиента(Склад)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СкладыДополнительныеРеквизиты.Свойство.Имя КАК Свойство,
		|	СкладыДополнительныеРеквизиты.Значение КАК Значение
		|ИЗ
		|	Справочник.Склады.ДополнительныеРеквизиты КАК СкладыДополнительныеРеквизиты
		|ГДЕ
		|	СкладыДополнительныеРеквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Свойство = "гф_СкладыКодКлиентаСклад" Тогда
				Возврат Выборка.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
    Возврат "123";
	
КонецФункции

Функция ПолучитьНомерИнвойса()

	//запрос = новый Запрос(
	//"ВЫБРАТЬ
	//|	а.ДокументОприходования КАК ДокументОприходования,
	//|	а.СерияНоменклатуры.НомерГТД КАК НомерГТД
	//|ПОМЕСТИТЬ выборка
	//|ИЗ
	//|	РегистрНакопления.ПартииТоваровНаСкладах КАК а
	//|ГДЕ
	//|	а.Регистратор = &Регистратор
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	выборка.ДокументОприходования.Номер КАК Номер
	//|ИЗ
	//|	выборка КАК выборка
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	выборка.НомерГТД КАК НомерГТД
	//|ИЗ
	//|	выборка КАК выборка");
	//запрос.УстановитьПараметр("Регистратор", Документ);
	//результат = запрос.ВыполнитьПакет();
	//
	//массив = результат[1].Выгрузить().ВыгрузитьКолонку("Номер");
	//НомерИнвойса = сокрЛП(СтрСоединить(массив, ","));
	//массив = результат[2].Выгрузить().ВыгрузитьКолонку("НомерГТД");
	//НомерИнвойса = НомерИнвойса + "-" + сокрЛП(СтрСоединить(массив, ","));
	//
	//возврат НомерИнвойса;
	Возврат 123;

КонецФункции // ПолучитьНомерИнвойса()

Функция ПеремещениеДляСкладаПолучателяПоступлениеАртикулНомерЗаказа(Склад)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	1 КАК Поле1
	|ИЗ
	|	РегистрСведений.КатегорииОбъектов КАК а
	|ГДЕ
	|	а.Объект = &Объект
	|	И а.Категория = &Категория");
	Запрос.УстановитьПараметр("Объект", Склад);
	Запрос.УстановитьПараметр("Категория", Справочники.w_Настройки.ПеремещениеДляСкладаПолучателяПоступлениеАртикулНомерЗаказа.Значение);
	
	Возврат (НЕ Запрос.Выполнить().Пустой());

КонецФункции // ЭтоПарныйСклад()

Функция ПолучитьАдресПоТипуКомпании(ВидАдреса, Получатель, ЕстьАдрес)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтрагентыКонтактнаяИнформация.Регион КАК Регион,
		|	КонтрагентыКонтактнаяИнформация.Город КАК Город,
		|	КонтрагентыКонтактнаяИнформация.Представление КАК Представление,
		|	КонтрагентыКонтактнаяИнформация.Вид КАК Вид,
		|	КонтрагентыКонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
		|	ПОДСТРОКА(КонтрагентыКонтактнаяИнформация.Представление, 0, 6) КАК Индекс
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|ГДЕ
		|	КонтрагентыКонтактнаяИнформация.Вид = &Вид
		|	И КонтрагентыКонтактнаяИнформация.Тип = &Тип
		|	И КонтрагентыКонтактнаяИнформация.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Вид", ВидАдреса);
	Запрос.УстановитьПараметр("Ссылка", Получатель);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Если ВидАдреса = Справочники.ВидыКонтактнойИнформации.АдресПартнера Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Контрагенты", "Справочник.Партнеры");
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	ТаблицаАдресов = РезультатЗапроса.Выгрузить();
	Адрес = новый Структура; 
	
	Для каждого Колонка Из ТаблицаАдресов.Колонки Цикл
		Адрес.Вставить(Колонка.Имя);
	КонецЦикла;
	Если ТаблицаАдресов.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Адрес, ТаблицаАдресов[0]);
		ЕстьАдрес = Истина;
	КонецЕсли;
	
	Возврат Адрес;

КонецФункции // ()

Функция ЭтоОсновнойСклад(Склад) Экспорт

	Склады = _омОбщегоНазначенияКлиентСервер.ПолучитьГлобальноеЗначениеМассив("гф_ГлобальныеЗначенияОсновнойСклад");
	
	Если Склады.Найти(Склад) <> Неопределено Тогда
			Возврат Истина;			
	КонецЕсли;
		
	Возврат Ложь;

КонецФункции // ЭтоПарныйСклад()

Функция ЭтоТаможенныйСклад(Склад) Экспорт
	Склады = _омОбщегоНазначенияКлиентСервер.ПолучитьГлобальноеЗначениеМассив("гф_ГлобальныеЗначенияТаможенныйСклад");
	
	Если Склады.Найти(Склад) <> Неопределено Тогда
			Возврат Истина;			
	КонецЕсли;
		
	Возврат Ложь;
КонецФункции // ЭтоПарныйСклад()

Функция ЭтоСкладТранзитБезРезерва(Склад) Экспорт
	Возврат Ложь;
КонецФункции // ЭтоПарныйСклад()

Функция ЭтоСкладРазукомплектации(Склад) Экспорт
	Возврат Ложь;
КонецФункции // ЭтоПарныйСклад()

Функция ПолучитьАртикулПоНомеруАдресаДоставки(Заказ, Номенклатура)
	
	Если не ЗначениеЗаполнено(Заказ) Тогда
		возврат СокрЛП(Номенклатура.Артикул);
	КонецЕсли;
	АдресДоставки = ПолучитьАдресДоставки(Заказ.Партнер);
	Если ЗначениеЗаполнено(АдресДоставки) и ЗначениеЗаполнено(АдресДоставки.НомерАдреса) Тогда
		Артикул = КодОрганизации + "-" + сокрЛП(АдресДоставки.НомерАдреса);
	Иначе
		Артикул = СокрЛП(Номенклатура.Артикул);
	КонецЕсли;
	
	возврат Артикул;
КонецФункции // ()


#КонецОбласти

#Область ЗагрузкаДанных

Процедура ЗагрузитьДанные() Экспорт
	
	НастройкиFTPСоединения = _омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначениеFTP("FTP_НастройкиДляЗагрузкиИзWMS");
	
	Если НастройкиFTPСоединения = Неопределено Тогда
		Сообщение = "Не заданы настройки подключния к ftp-серверу.";
		ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, Сообщение);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ТекущаяДатаСеанса(), "ДЛФ=T") + ". " + Сообщение);
		
		Возврат;
	КонецЕсли;
	
	Каталог = новый Файл(НастройкиFTPСоединения.Каталог);
	Если не Каталог.Существует() или не Каталог.ЭтоКаталог() Тогда
		Попытка
			СоздатьКаталог(НастройкиFTPСоединения.Каталог);
		Исключение
			сообщить("Каталог " + НастройкиFTPСоединения.Каталог + " отсутствует и нет возможности создать!", СтатусСообщения.Важное);
			Возврат;
		КонецПопытки;
	КонецЕсли;

	ОбработатьПолученныеФайлы(Каталог);
	
КонецПроцедуры

Процедура ОбработатьПолученныеФайлы(ПутьДляФайловОбмена)
	
	МассивЗагружаемыхФайлов = Новый ТаблицаЗначений;
	МассивЗагружаемыхФайлов.Колонки.Добавить("Файл");
	МассивЗагружаемыхФайлов.Колонки.Добавить("ИмяФайла");
	МассивЗагружаемыхФайлов.Колонки.Добавить("ДатаОтправления");
	МассивЗагружаемыхФайлов.Колонки.Добавить("ДатаПолучения");
	МассивЗагружаемыхФайлов.Колонки.Добавить("УдалитьПослеОбработки");
	
	
	ФайлыКОбработке = НайтиФайлы(ПутьДляФайловОбмена, "*.xml");
	Для Каждого ФайлКОбработке Из ФайлыКОбработке Цикл
		СтрокаЗагружаемыйФайл = МассивЗагружаемыхФайлов.Добавить();
		СтрокаЗагружаемыйФайл.Файл = ФайлКОбработке.ПолноеИмя;
		СтрокаЗагружаемыйФайл.ИмяФайла = ФайлКОбработке.Имя;
		СтрокаЗагружаемыйФайл.УдалитьПослеОбработки = Истина;
	КонецЦикла;
	
	//ФайлыКОбработке = НайтиФайлы(ПутьДляФайловОбмена, "*.log");
	//Для Каждого ФайлКОбработке Из ФайлыКОбработке Цикл
	//	СтрокаЗагружаемыйФайл = МассивЗагружаемыхФайлов.Добавить();
	//	СтрокаЗагружаемыйФайл.Файл = ФайлКОбработке.ПолноеИмя;
	//	СтрокаЗагружаемыйФайл.ИмяФайла = ФайлКОбработке.Имя;
	//	СтрокаЗагружаемыйФайл.УдалитьПослеОбработки = Истина;
	//КонецЦикла;
	
	Если МассивЗагружаемыхФайлов.Количество() > 0 Тогда
		УпорядочитьФайлыПоДатеСоздания(МассивЗагружаемыхФайлов);
		Для Каждого ФайлОбмена Из МассивЗагружаемыхФайлов Цикл
			
			Файл = новый Файл(ФайлОбмена.Файл);
			Если Файл.Размер() = 0 Тогда
				ЗаписатьСообщениеОшибки("Файл " + ФайлОбмена.ИмяФайла + " размер 0.", Истина);
				ПереместитьФайлВАрхив(ФайлОбмена.Файл);
				Продолжить;
			КонецЕсли;
			
			Попытка
				ЧтениеXML = новый ЧтениеXML;
				ЧтениеXML.ОткрытьФайл(ФайлОбмена.Файл,,, "utf8");
				Фабрика = новый ФабрикаXDTO();
				Данные = Фабрика.ПрочитатьXML(ЧтениеXML);
				ЧтениеXML.Закрыть();
			Исключение
				Сообщение = "Файл " + ФайлОбмена.ИмяФайла + " ошибка загрузки. " + ОписаниеОшибки();
				ЗаписатьСообщениеОшибки(Сообщение, Истина);
				Продолжить;
			КонецПопытки;
			
			document = Данные.documents.document;
			этоПеремещение = найти(document.header.doc_number, "-S") > 0;
			Статус = document.header.status;
			
			Попытка
				ТипДокумента = document.header.type; //структура файлов не одинакова
			Исключение
				ТипДокумента = "";
			КонецПопытки;

			ПарныйСклад = найти(Данные.documents.document.type, "SO") > 0 
						И (Статус = "NEW" ИЛИ Статус = "IMPORTED" ИЛИ Статус = "PICKED") И ТипДокумента = "PICKING";
						
			Если ПарныйСклад И Не (Статус = "IMPORTED" или Статус = "PICKED") Тогда
				ПереместитьФайлВАрхив(ФайлОбмена.Файл);
				Продолжить;
			КонецЕсли;	
			
			Если Не (Статус = "SHIPPED" ИЛИ Статус = "CLOSED") И Не этоПеремещение И Не ПарныйСклад Тогда
				ПереместитьФайлВАрхив(ФайлОбмена.Файл);
				Продолжить;
			КонецЕсли;
			
			Если ЗагружалсяЛиФайл(ФайлОбмена.ИмяФайла) Тогда
				Сообщение = "Файл " + ФайлОбмена.ИмяФайла + " загружался ранее. Документ не создан. Документ перемещён в архив.";
				ЗаписатьСообщениеОшибки(Сообщение, Истина);
				ПереместитьФайлВАрхив(ФайлОбмена.Файл);
				Продолжить;
			КонецЕсли;
			
			Документ = Документы.гф_ДанныеЗагрузки.СоздатьДокумент();
			Документ.Дата = ТекущаяДата();
			Документ.ИмяФайла = ФайлОбмена.ИмяФайла;
			Документ.ПолноеИмяФайла = ФайлОбмена.Файл;
			//Документ.ТекущаяЗадача = Справочники.RC_Задачи.СозданиеДанныеЗагрузки;
			Документ.СтатусДокумента = Перечисления.гф_СтатусыОбмена.Создан;
			Документ.ДополнительныеСвойства.Вставить("УдалитьПослеОбработки", ФайлОбмена.УдалитьПослеОбработки);
			Документ.Файл = новый ХранилищеЗначения(ПолучитьТекстФайла(ФайлОбмена.Файл));
			Попытка
				Документ.Записать();
				//ПодобратьСледующуюЗадачу(Документ.СтатусДокумента, Документ);
				//Документ.Записать();
			Исключение
				Сообщение = "Произошла ошибка записи " + СокрЛП(Документ) + Символы.ПС + ОписаниеОшибки();
				ЗаписатьСообщениеОшибки(Сообщение, Истина);
				Продолжить;
			КонецПопытки;
			
			Если этоПеремещение Тогда
				ОбработатьПеремещение(Документ.Ссылка);
			ИначеЕсли ПарныйСклад Тогда
				МС_ОбработатьЗагрузкуПарногоСклада(Документ);
			Иначе
				//ЛИТ_ВыполнитьАвтоматическиеЗадачи(Документ, Документ.ТекущаяЗадача);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьПолученныеФайлы()

Процедура УпорядочитьФайлыПоДатеСоздания(МассивФайлов)
	
	МассивФайлов.Колонки.Добавить("Тип", новый ОписаниеТипов("Число"));
	
	Для Каждого ЭлементМассива Из МассивФайлов Цикл
		НачалоМеткиВремени = 0; КонецМеткиВремени = 0;
		// разбираю имя файла справа, пока не найду точку - это будет символ за конечным символом даты,
		// дальше ищется символ подчеркивания - следующая позиция - начальный символ определения даты.
		Если Не ЗначениеЗаполнено(ЭлементМассива.ДатаПолучения) Тогда
			ЭлементМассива.ДатаПолучения = ПолучитьДатуИзИмениФайла(ЭлементМассива.ИмяФайла);
		КонецЕсли;
		
		Если найти(Врег(ЭлементМассива.ИмяФайла), "PO") > 0 Тогда
			ЭлементМассива.Тип = 0;
		ИначеЕсли найти(ВРег(ЭлементМассива.ИмяФайла), "SO") > 0 Тогда
			ЭлементМассива.Тип = 1;
		ИначеЕсли найти(ВРег(ЭлементМассива.ИмяФайла), "INV") > 0 Тогда
			ЭлементМассива.Тип = 2;
		Иначе
			ЭлементМассива.Тип = 100;
		КонецЕсли;
	КонецЦикла;
	
	МассивФайлов.Сортировать("Тип, ДатаПолучения, ИмяФайла");
	
КонецПроцедуры // УпорядочитьФайлыПоДатеСоздания()

Процедура ЗаписатьСообщениеОшибки(СообщениеОбОшибке, Ошибки = Ложь) Экспорт
	
	НоваяСтрокаЛога = Строка(ТекущаяДата()) + ?(Ошибки," Ошибка: "," Сообщение: ");
	НоваяСтрокаЛога = НоваяСтрокаЛога + " - " + СообщениеОбОшибке;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ТекущаяДатаСеанса(), "ДЛФ=T") + ". " + НоваяСтрокаЛога);
	
	//Если ОбщегоНазначения.ЭтоРегламентноеЗадание(ЭтотОбъект) Тогда 
	//	ЛогФайл = "путь лог файла";
	//	ЗаписьТекста = Новый ЗаписьТекста(ЛогФайл, , , Истина);
	//	ЗаписьТекста.ЗаписатьСтроку(НоваяСтрокаЛога);
	//	ЗаписьТекста.Закрыть();
	//КонецЕсли;
	
	ЗаписьЖурналаРегистрации("Информация", ?(Ошибки, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация), , , НоваяСтрокаЛога);
	
КонецПроцедуры

Процедура ПереместитьФайлВАрхив(ИмяФайла)
	
	Файл = новый Файл(ИмяФайла);
	Путь = Файл.Путь + "Archive\";
	
	Каталог = новый Файл(Путь);
	Если не Каталог.Существует() Тогда
		СоздатьКаталог(Путь);
	КонецЕсли;
	
	ПереместитьФайл(ИмяФайла, Путь + Файл.Имя);
	
КонецПроцедуры

// Функция проверяет имеется ли в системе документ ДанныеЗагрузки для файла с таким именем
//
Функция ЗагружалсяЛиФайл(ИмяФайла, ДокументСсылка = Неопределено) Экспорт  
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	1
	|ИЗ
	|	Документ.гф_ДанныеЗагрузки КАК ДанныеЗагрузки
	|ГДЕ
	|	ДанныеЗагрузки.ИмяФайла ПОДОБНО &ИмяФайла
	|	И НЕ ДанныеЗагрузки.Ссылка = &ЭтотДокументСсылка
	|	И НЕ ДанныеЗагрузки.ПометкаУдаления");
	Запрос.УстановитьПараметр("ИмяФайла", ИмяФайла);
	Запрос.УстановитьПараметр("ЭтотДокументСсылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

Функция ПолучитьТекстФайла(ИмяФайла)
	текст = новый ЧтениеТекста(ИмяФайла, "utf8");
	возврат текст.Прочитать();
КонецФункции // ()

Процедура ОбработатьПеремещение(Документ)
	
	док = Документ.ПолучитьОбъект();
	док.Интерфейс 		= Справочники.ЛИТ_ИнтерфейсыОбменаДанными.ЗагрузкаПодтвержденияПеремещения;
	док.СтатусДокумента = Справочники.RC_СтатусыОбмена.Отработан;
	//док.ТекущаяЗадача 	= НайтиКонечнуюЗадачуПеремещение();
	док.Записать();
	
	Обработка = обработки.ЛИТ_ОбработкаИнформацииСкладаПеремещение.Создать();
	Обработка.ВыполнитьЗадачу(док);
	
КонецПроцедуры

Процедура МС_ОбработатьЗагрузкуПарногоСклада(док)
	
	док.Интерфейс = Справочники.ЛИТ_ИнтерфейсыОбменаДанными.ЗагрузкаПодтвержденияПодбора;
	док.СтатусДокумента = Справочники.RC_СтатусыОбмена.Отработан;
	
	Запрос = новый Запрос(
	"ВЫБРАТЬ
	|	а.Ссылка КАК Задача
	|ИЗ
	|	Справочник.RC_Задачи КАК а
	|ГДЕ
	|	а.Интерфейс = &Интерфейс
	|	И а.КонечныйСтатус = &КонечныйСтатус");
	Запрос.УстановитьПараметр("Интерфейс", Справочники.ЛИТ_ИнтерфейсыОбменаДанными.ЗагрузкаПодтвержденияПодбора);
	Запрос.УстановитьПараметр("КонечныйСтатус", Справочники.RC_СтатусыОбмена.Отработан);
	выборка = запрос.Выполнить().Выбрать();
	Если выборка.Следующий() Тогда
		док.ТекущаяЗадача =  выборка.Задача;
	КонецЕсли;
	док.Записать();
	
	Обработка = обработки.МС_ОбработкаИнформацииСкладаПодбор.Создать();
	Обработка.ВыполнитьЗадачу(док);
	
КонецПроцедуры

Функция ПолучитьДатуИзИмениФайла(ИмяФайла)
	
	ДлинаИмени = СтрДлина(ИмяФайла);
	
	// чтобы найти описание даты в имени, нахожу самый правый символ "-", от него влево 17 симоволов - это дата.
	// для разных конфигураций определние даты может отличаться !!!!
	Индекс = ДлинаИмени - 4; // минимум 4 символа расширения можно пробросить
	
	Пока Индекс Цикл
		Если Сред(ИмяФайла, Индекс, 1) = "-" Тогда
			Прервать;
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Индекс = Индекс - 15;
	
	// если дата не будет распознана - вернется пустая дата
	ДатаРезультат = Дата(1, 1, 1, 0, 0, 0);
	
	Попытка
		ДатаРезультат = Дата(
		Сред(ИмяФайла, Индекс, 4),
		Сред(ИмяФайла, Индекс + 4, 2),
		Сред(ИмяФайла, Индекс + 6, 2),
		Сред(ИмяФайла, Индекс + 9, 2),
		Сред(ИмяФайла, Индекс + 11, 2),
		Сред(ИмяФайла, Индекс + 13, 2));
	Исключение		
	КонецПопытки;
	
	Возврат ДатаРезультат;
	
КонецФункции

#КонецОбласти

#Область Инициализация
// Этой переменной регулируем количество "холостых" итераций цикла -
// тем самым устанавливаем интервал задержки до повторной попытки соединения
// после разрыва почтового соединения с почтовым сервером извне.
ИнтервалЗадержкиПодключенияПослеНеудачи = 1000;   
#КонецОбласти
  

#КонецЕсли