
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДинСписок.Параметры.УстановитьЗначениеПараметра("ТестКонтрагент",
	Справочники.Контрагенты.НайтиПоНаименованию("Кириков Андрей Андреевич"));
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокНаСервере()
	
	ИспользованиеОтбораПоПериоду = ЗначениеЗаполнено(ОтборПоДатеЗаказов.ДатаОкончания)
	ИЛИ ЗначениеЗаполнено(ОтборПоДатеЗаказов.ДатаНачала);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
	ДинСписок, 
	"НачалоПериода", 
	ОтборПоДатеЗаказов.ДатаНачала, 
	ИспользованиеОтбораПоПериоду);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
	ДинСписок, 
	"КонецПериода", 
	?(Не ЗначениеЗаполнено(ОтборПоДатеЗаказов.ДатаОкончания),
	КонецДня(Дата('29991231')), КонецДня(ОтборПоДатеЗаказов.ДатаОкончания)), 
	ИспользованиеОтбораПоПериоду);
		
	СхемаКомпоновкиДанных = Элементы.ДинСписок.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
    НастройкиКомпоновкиДанных = Элементы.ДинСписок.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
    
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, 
	НастройкиКомпоновкиДанных, , ,
	Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
    
    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
    
    тз = Новый ТаблицаЗначений;
    
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ПроцессорВывода.УстановитьОбъект(тз);
    ПроцессорВывода.Вывести(ПроцессорКомпоновки);

	тз.Сортировать("Организация, Поставщик, НаименованиеВарианта");
	
	Объект.ЗаказыКлиентов.Загрузить(тз);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	ОбновитьСписокНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеПометки(Признак= Неопределено)
	
	Для каждого ЭлКоллекции Из Объект.ЗаказыКлиентов Цикл
		Если Признак= Неопределено Тогда
			ЭлКоллекции["Отметка"] = Не ЭлКоллекции["Отметка"];
		Иначе
			ЭлКоллекции["Отметка"] = Признак;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометку(Команда) 
	УстановитьЗначениеПометки(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометку(Команда)
	УстановитьЗначениеПометки(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ИнвертироватьПометку(Команда)
	УстановитьЗначениеПометки();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//ОбновитьСписокНаСервере();
КонецПроцедуры

&НаСервере
Функция ВыбратьОстаткиДляВариантовДляОбработки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	т.Организация КАК Организация,
	|	т.ВариантКомплектации КАК ВариантКомплектации,
	|	т.Поставщик КАК Поставщик,
	|	т.Склад КАК Склад,
	|	т.ЗаказКлиента КАК ЗаказКлиента,
	|	т.Количество КАК Количество,
	|	т.Отметка КАК Отметка
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	&тз КАК т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тз.Организация КАК Организация,
	|	тз.ВариантКомплектации КАК ВариантКомплектации,
	|	тз.Поставщик КАК Поставщик,
	|	тз.Склад КАК Склад,
	|	тз.ЗаказКлиента КАК ЗаказКлиента,
	|	тз.Количество КАК Количество,
	|	ИСТИНА КАК Отметка
	|ПОМЕСТИТЬ ИсходныеДанные
	|ИЗ
	|	вт КАК тз
	|ГДЕ
	|	тз.Отметка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Шапка.Организация КАК Организация,
	|	Номенклатура.ПроизводительИмпортерКонтрагент КАК Поставщик,
	|	Шапка.Склад КАК Склад,
	|	ПродукцияВКоробах.ВариантКомплектации КАК ВариантКомплектации,
	|	СУММА(ВЫБОР
	|			КОГДА ПродукцияВКоробах.Количество = 0
	|				ТОГДА 1
	|			ИНАЧЕ ПродукцияВКоробах.Количество
	|		КОНЕЦ) КАК КоличествоОстаток
	|ПОМЕСТИТЬ ОстаткиПредварительно
	|ИЗ
	|	Документ.ЗаказКлиента.гф_ТоварыВКоробах КАК ПродукцияВКоробах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК Шапка
	|		ПО ПродукцияВКоробах.Ссылка = Шапка.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО ПродукцияВКоробах.ВариантКомплектации.Владелец = Номенклатура.Ссылка
	|ГДЕ
	|	Шапка.Проведен 
	|	И Шапка.Статус  = Значение(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
	|	И Шапка.Организация В
	|			(ВЫБРАТЬ
	|				т.Организация
	|			ИЗ
	|				ИсходныеДанные КАК т)
	|	И Номенклатура.ПроизводительИмпортерКонтрагент В
	|			(ВЫБРАТЬ
	|				т1.Поставщик
	|			ИЗ
	|				ИсходныеДанные КАК т1)
	|	И ПродукцияВКоробах.ВариантКомплектации В
	|			(ВЫБРАТЬ
	|				т2.ВариантКомплектации
	|			ИЗ
	|				ИсходныеДанные КАК т2)
	|	И Шапка.Склад В
	|			(ВЫБРАТЬ
	|				т3.Склад
	|			ИЗ
	|				ИсходныеДанные КАК т3)
	|
	|СГРУППИРОВАТЬ ПО
	|	Шапка.Организация,
	|	ПродукцияВКоробах.ВариантКомплектации,
	|	Номенклатура.ПроизводительИмпортерКонтрагент,
	|	Шапка.Склад
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Шапка.Организация,
	|	Шапка.Контрагент,
	|	Шапка.Склад,
	|	ПродукцияВКоробах.ВариантКомплектации,
	|	СУММА(ВЫБОР
	|			КОГДА ПродукцияВКоробах.КоличествоКоробов = 0
	|				ТОГДА -1
	|			ИНАЧЕ -ПродукцияВКоробах.КоличествоКоробов
	|		КОНЕЦ)
	|ИЗ
	|	Документ.ЗаказПоставщику.гф_ПродукцияВКоробах КАК ПродукцияВКоробах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК Шапка
	|		ПО ПродукцияВКоробах.Ссылка = Шапка.Ссылка
	|ГДЕ
	|	Шапка.Проведен
	|	И Шапка.Организация В
	|			(ВЫБРАТЬ
	|				т.Организация
	|			ИЗ
	|				ИсходныеДанные КАК т)
	|	И Шапка.Контрагент В
	|			(ВЫБРАТЬ
	|				т1.Поставщик
	|			ИЗ
	|				ИсходныеДанные КАК т1)
	|	И ПродукцияВКоробах.ВариантКомплектации В
	|			(ВЫБРАТЬ
	|				т2.ВариантКомплектации
	|			ИЗ
	|				ИсходныеДанные КАК т2)
	|	И Шапка.Склад В
	|			(ВЫБРАТЬ
	|				т3.Склад
	|			ИЗ
	|				ИсходныеДанные КАК т3)
	|
	|СГРУППИРОВАТЬ ПО
	|	Шапка.Организация,
	|	Шапка.Контрагент,
	|	ПродукцияВКоробах.ВариантКомплектации,
	|	Шапка.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиПредварительно.Организация КАК Организация,
	|	ОстаткиПредварительно.Поставщик КАК Поставщик,
	|	ОстаткиПредварительно.Склад КАК Склад,
	|	ОстаткиПредварительно.ВариантКомплектации КАК ВариантКомплектации,
	|	СУММА(ОстаткиПредварительно.КоличествоОстаток) КАК КоличествоОстаток
	|ПОМЕСТИТЬ остатки
	|
	|ИЗ
	|	ОстаткиПредварительно КАК ОстаткиПредварительно
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиПредварительно.Организация,
	|	ОстаткиПредварительно.Поставщик,
	|	ОстаткиПредварительно.Склад,
	|	ОстаткиПредварительно.ВариантКомплектации
	|
	|ИМЕЮЩИЕ
	|	НЕ СУММА(ОстаткиПредварительно.КоличествоОстаток) = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказПоставщику.Ссылка КАК Ссылка,
	|	ЗаказПоставщику.Статус КАК Статус,
	|	ЗаказПоставщику.Контрагент КАК Контрагент,
	|	ЗаказПоставщику.Организация КАК Организация,
	|	ЗаказПоставщику.Склад КАК Склад
	|ПОМЕСТИТЬ ЗаказыПоОстаткам
	|ИЗ
	|	остатки КАК остатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|		ПО (ЗаказПоставщику.Проведен)
	|			И (ЗаказПоставщику.Организация = остатки.Организация)
	|			И (ЗаказПоставщику.Контрагент = остатки.Поставщик)
	|			И (ЗаказПоставщику.Склад = остатки.Склад)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Заказы.Ссылка КАК Ссылка,
	|	Заказы.Статус КАК Статус,
	|	Заказы.Контрагент КАК Контрагент,
	|	Заказы.Организация КАК Организация,
	|	Заказы.Склад КАК Склад,
	|	ПродукцияВКоробах.ВариантКомплектации КАК ВариантКомплектации,
	|	ПродукцияВКоробах.КоличествоКоробов КАК КоличествоКоробов
	|ПОМЕСТИТЬ ВариантыВЗаказахПоОстаткам
	|ИЗ
	|	ЗаказыПоОстаткам КАК Заказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.гф_ПродукцияВКоробах КАК ПродукцияВКоробах
	|		ПО Заказы.Ссылка = ПродукцияВКоробах.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	остатки.Организация КАК Организация,
	|	остатки.Поставщик КАК Поставщик,
	|	остатки.Склад КАК Склад,
	|	остатки.ВариантКомплектации КАК ВариантКомплектации,
	|	остатки.КоличествоОстаток КАК КоличествоОстаток
	|ПОМЕСТИТЬ ЗаказыКСозданию
	|ИЗ
	|	остатки КАК остатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВариантыВЗаказахПоОстаткам КАК ВариантыВЗаказахПоОстаткам
	|		ПО остатки.Организация = ВариантыВЗаказахПоОстаткам.Организация
	|			И остатки.Поставщик = ВариантыВЗаказахПоОстаткам.Контрагент
	|			И остатки.ВариантКомплектации = ВариантыВЗаказахПоОстаткам.ВариантКомплектации
	|ГДЕ
	|	ВариантыВЗаказахПоОстаткам.Ссылка ЕСТЬ NULL
	|	И остатки.КоличествоОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1000000
	|	остатки.Организация КАК Организация,
	|	остатки.Поставщик КАК Поставщик,
	|	остатки.Склад КАК Склад,
	|	остатки.ВариантКомплектации КАК ВариантКомплектации,
	|	ВариантыВЗаказахПоОстаткам.Ссылка КАК ЗаказПоставщику,
	|	ВариантыВЗаказахПоОстаткам.Ссылка.Дата КАК ДатаЗаказаПоставщику,
	|	ВариантыВЗаказахПоОстаткам.Статус КАК СтатусЗаказаПоставщику,
	|	ВЫБОР
	|		КОГДА ВариантыВЗаказахПоОстаткам.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ПорядокПоСтатусу,
	|	ЕСТЬNULL(ВариантыВЗаказахПоОстаткам.КоличествоКоробов, 0) КАК КоличествоКоробовЗаказа,
	|	остатки.КоличествоОстаток КАК КоличествоОстаток
	|ПОМЕСТИТЬ ЗаказыКИзменениюПредварительно
	|ИЗ
	|	остатки КАК остатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВариантыВЗаказахПоОстаткам КАК ВариантыВЗаказахПоОстаткам
	|		ПО остатки.Организация = ВариантыВЗаказахПоОстаткам.Организация
	|			И остатки.Поставщик = ВариантыВЗаказахПоОстаткам.Контрагент
	|			И остатки.ВариантКомплектации = ВариантыВЗаказахПоОстаткам.ВариантКомплектации
	|ГДЕ
	|	ВариантыВЗаказахПоОстаткам.Ссылка ЕСТЬ НЕ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокПоСтатусу,
	|	ДатаЗаказаПоставщику,
	|	ЗаказПоставщику";
	
	тз = Объект.ЗаказыКлиентов.Выгрузить();
	Запрос.УстановитьПараметр("тз", тз);
	УстановитьПривилегированныйРежим(Истина);
	ПакетРезультатов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	Возврат ПакетРезультатов;
	
КонецФункции

&НаСервере
Процедура ВыполнитьАнализПотребностей(ПакетРезультатов)
	Протокол.Очистить();
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Макет = ОбработкаОбъект.ПолучитьМакет("Макет");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	Протокол.Вывести(ОбластьШапка);
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	т.ВариантКомплектации КАК ВариантКомплектации,
	|	т.Поставщик КАК Поставщик,
	|	т.Склад КАК Склад,
	|	т.ЗаказКлиента КАК ЗаказКлиента,
	|	т.Количество КАК Количество
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	&тз КАК т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.КоллекцияНоменклатуры.Наименование КАК Сезон, 
	|	тз.Поставщик КАК Поставщик,
	|	тз.ВариантКомплектации КАК ВариантКомплектации,
	|	тз.ЗаказКлиента КАК ЗаказКлиента,
	|	докЗаказКлиента.Контрагент КАК Клиент,
	|	тз.Количество КАК Количество
	|ИЗ
	|	вт КАК тз
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|			ПО (ВариантыКомплектацииНоменклатуры.Владелец = Номенклатура.Ссылка)
	|		ПО (тз.ВариантКомплектации = ВариантыКомплектацииНоменклатуры.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК докЗаказКлиента
	|		ПО (тз.ЗаказКлиента = докЗаказКлиента.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сезон,
	|	Поставщик,
	|	Клиент
	|ИТОГИ
	|	СУММА(Количество)
	|ПО
	|	Сезон,
	|	Поставщик,
	|	ВариантКомплектации";
	Запрос.УстановитьПараметр("тз", ПакетРезультатов[1]);
	ТаблицаОстатковЗаказано = ПакетРезультатов[5].Выгрузить();
	Результат = Запрос.Выполнить();
	ВыборкаСезон = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСезон.Следующий() Цикл
		ОбластьСезон = Макет.ПолучитьОбласть("Сезон");
		ОбластьСезон.Параметры["Сезон"] = ВыборкаСезон["Сезон"];
		Протокол.Вывести(ОбластьСезон);
		ВыборкаПоставщик = ВыборкаСезон.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоставщик.Следующий() Цикл
			ВыборкаВариант = ВыборкаПоставщик.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаВариант.Следующий()  Цикл
				ЗаказаноПоВарианту = 0;
				струкПоиска = Новый Структура("Контрагент, ВариантКомплектации",
				ВыборкаВариант["Поставщик"], ВыборкаВариант["ВариантКомплектации"]);
				мСтрокЗаказано = ТаблицаОстатковЗаказано.НайтиСтроки(струкПоиска);
				Для каждого стрЗаказано Из мСтрокЗаказано Цикл
					ЗаказаноПоВарианту = ЗаказаноПоВарианту + стрЗаказано["КоличествоКоробов"];
				КонецЦикла;
				
				ОбластьИтогиПоВарианту = Макет.ПолучитьОбласть("ИтогиПоВарианту");
				ОбластьИтогиПоВарианту.Параметры["ВариантКомплектации"] = ВыборкаВариант["ВариантКомплектации"];
				ОбластьИтогиПоВарианту.Параметры["Поставщик"] = ВыборкаВариант["Поставщик"];
				ОбластьИтогиПоВарианту.Параметры["ПотребностьИТОГО"] = ВыборкаВариант["Количество"];
				ОбластьИтогиПоВарианту.Параметры["РазмещеноИТОГО"] = ЗаказаноПоВарианту;
				ОбластьИтогиПоВарианту.Параметры["ОбеспечитьИТОГО"] = Макс(ВыборкаВариант["Количество"] - ЗаказаноПоВарианту, 0);
				Протокол.Вывести(ОбластьИтогиПоВарианту);
				
				ВыборкаДетали = ВыборкаВариант.Выбрать();
				
				Пока ВыборкаДетали.Следующий() Цикл
					ОбластьЗаказ = Макет.ПолучитьОбласть("СтрокаЗаказы");
					ОбластьЗаказ.Параметры["ЗаказКлиента"] = ВыборкаДетали["ЗаказКлиента"];
					ОбластьЗаказ.Параметры["Клиент"] = ВыборкаДетали["Клиент"];
					ОбластьЗаказ.Параметры["Потребность"] = ВыборкаДетали["Количество"];
					Протокол.Вывести(ОбластьЗаказ);
				КонецЦикла;
				Для каждого стрЗаказано Из мСтрокЗаказано Цикл
					ОбластьЗаказ = Макет.ПолучитьОбласть("СтрокаЗаказы");
					ОбластьЗаказ.Параметры["Размещено"] = стрЗаказано["КоличествоКоробов"];
					ОбластьЗаказ.Параметры["ЗаказПоставщику"] = стрЗаказано["Ссылка"];
					Протокол.Вывести(ОбластьЗаказ);
				КонецЦикла;
				Протокол.Вывести(Макет.ПолучитьОбласть("Пустая"));
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаказыПоставщикуНаСервере()
	
	ПакетРезультатов = ВыбратьОстаткиДляВариантовДляОбработки();
	
	// 0. Сформировать протокол распределения потребностей
	ВыполнитьАнализПотребностей(ПакетРезультатов);
	////$$$===========================vvv ОТЛАДКА vvv======================16.05.2023 8:42:35=============| SBB
	//    Возврат;		
	////===========================^^^ КОНЕЦ ОТЛАДКИ ^^^===================16.05.2023 8:42:35=============| SBB
	РезультатОстаткиКСозданию = ПакетРезультатов[6];
	РезультатОстаткиКИзменению = ПакетРезультатов[7];
	
	Если РезультатОстаткиКСозданию.Пустой() И РезультатОстаткиКИзменению.Пустой() Тогда
		Возврат;	
	КонецЕсли;
	
	// 1. Создание новых заказов поставщику
	Если Не РезультатОстаткиКСозданию.Пустой() Тогда
		СоздатьЗаказыПоставщику(РезультатОстаткиКСозданию);
	КонецЕсли;
	
	// 2. Изменение существующих заказов поставщику если статус заказа "НеСогласован"
	// или создание новых заказов поставщику, если любой другой статус
		Если Не РезультатОстаткиКИзменению.Пустой() Тогда
		ИзменитьИлиСоздатьЗаказыПоставщику(РезультатОстаткиКИзменению);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИзменитьИлиСоздатьЗаказыПоставщику(РезультатЗапроса)
	
	ТаблицаДляИзмененияПолная = РезультатЗапроса.Выгрузить();
	ТаблицаСвернутоПоРеквизитамЗаказа = ТаблицаДляИзмененияПолная.Скопировать();
	СтрокаСвертки = "Организация, Поставщик, Склад";
	ТаблицаСвернутоПоРеквизитамЗаказа.Свернуть(СтрокаСвертки);
	СтруктураРеквизитов = Новый Структура(СтрокаСвертки);
	Для каждого стрТз Из ТаблицаСвернутоПоРеквизитамЗаказа Цикл
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, стрТз);
		мСтрок = ТаблицаДляИзмененияПолная.НайтиСтроки(СтруктураРеквизитов);
		ТаблицаПоПоствщикуСкладу = ТаблицаДляИзмененияПолная.Скопировать(мСтрок);
		
		// 1. Изменение заказов
		РезультатЗапросаДанныхДляИзмененияЗаказов =
		ПолучитьРезультатыДляИзмененияЗаказовПоставщику(ТаблицаПоПоствщикуСкладу);
		ВыборкаИтогиЗаказИзменение = 
		РезультатЗапросаДанныхДляИзмененияЗаказов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаИтогиЗаказИзменение.Следующий() Цикл
			обЗаказ = ВыборкаИтогиЗаказИзменение["ЗаказПоставщику"].ПолучитьОбъект();
			Если обЗаказ <> Неопределено Тогда
				ПродукцияВКоробах = обЗаказ["гф_ПродукцияВКоробах"].Выгрузить();
				ПродукцияВКоробах.Колонки.Добавить("КоличествоКоробов1",
				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
				Для каждого стрТЗ Из ПродукцияВКоробах Цикл
					стрТЗ["КоличествоКоробов1"] = стрТЗ["КоличествоКоробов"];
				КонецЦикла;
				ВыборкаИтогиВариант = ВыборкаИтогиЗаказИзменение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаИтогиВариант.Следующий() Цикл
					ВыборкаДетали = ВыборкаИтогиВариант.Выбрать();
					Пока ВыборкаДетали.Следующий() Цикл
						нс = ПродукцияВКоробах.Добавить();
						нс["ВариантКомплектации"] = ВыборкаДетали["ВариантКомплектации"];
						нс["КоличествоКоробов1"] = ВыборкаДетали["КоличествоОстаток"];
					КонецЦикла;
				КонецЦикла;
				
				ПродукцияВКоробах.Свернуть("ВариантКомплектации", "КоличествоКоробов, КоличествоКоробов1");
				Для каждого стрТЗ Из ПродукцияВКоробах Цикл
					стрТЗ["КоличествоКоробов"] = стрТЗ["КоличествоКоробов1"];
				КонецЦикла;
				ПродукцияВКоробах.Колонки.Удалить("КоличествоКоробов1");
				мУдаляемыхСтрок = Новый Массив; 
				Для каждого стрТЗ Из ПродукцияВКоробах Цикл
					Если стрТЗ["КоличествоКоробов"] <= 0 Тогда
						мУдаляемыхСтрок.Добавить(стрТЗ);
					КонецЕсли;
				КонецЦикла;
				Для каждого Эл Из мУдаляемыхСтрок Цикл
					ПродукцияВКоробах.Удалить(Эл);
				КонецЦикла;
				
				ПродукцияВКоробах.Сортировать("КоличествоКоробов");
				обЗаказ["гф_ПродукцияВКоробах"].Загрузить(ПродукцияВКоробах);
				обЗаказ.гф_ПересчитатьТЧТоварыНаОсновнииКоробов();
				
				НачатьТранзакцию();
				Попытка
					обЗаказ.Записать(РежимЗаписиДокумента.Проведение);
					// Записать в протокол документ проведен
				Исключение
					// Записать в протокол ошибка проведения
					ОтменитьТранзакцию();
					НачатьТранзакцию();
					Попытка
						обЗаказ.Проведен = Ложь;
						обЗаказ.Записать(РежимЗаписиДокумента.Запись);
						// записать в протокол документ записан
					Исключение
						// Записать в протокол ошибка записи
						ОтменитьТранзакцию();
					КонецПопытки;
				КонецПопытки;
				
				Если РежимОтладки Тогда
					Если ТранзакцияАктивна() Тогда
						ОтменитьТранзакцию();
					КонецЕсли;
				Иначе
					Если ТранзакцияАктивна() Тогда
						ЗафиксироватьТранзакцию();
					КонецЕсли;	
				КонецЕсли;
				
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		
		// 2. Создание новых заказов
		РезультатЗапросаСозданиеЗаказов =
		ПолучитьРезультатыДляСозданияНовыхЗаказовЕслиЗаказЗаблокирован(ТаблицаПоПоствщикуСкладу);
		ВыборкаОрганизация = РезультатЗапросаСозданиеЗаказов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаОрганизация.Следующий() Цикл
			ВыборкаПоставщик = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоставщик.Следующий() Цикл
				
				ВыборкаСклад = ВыборкаПоставщик.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаСклад.Следующий() Цикл
					
					СтруктураПоиска = Новый Структура("Организация, Поставщик, Склад, Отметка");
					СтруктураПоиска["Отметка"] = Истина;
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаСклад);
					мСтрок = Объект.ЗаказыКлиентов.НайтиСтроки(СтруктураПоиска);
					
					Если мСтрок.Количество()  >= 0 Тогда
						
						Основание = мСтрок[0].ЗаказКлиента;
						ДанныеЗаполнения = СтруктураДокументаОснованияНаСервере(Основание, Истина);
						УстановитьПривилегированныйРежим(Истина);
						ЗаказПоставщику = Документы.ЗаказПоставщику.СоздатьДокумент();
						ЗаказПоставщику.Дата = НачалоДня(ТекущаяДатаСеанса());
						ЗаказПоставщику.Партнер = СтруктураПоиска["Поставщик"].Партнер;
						ЗаказПоставщику.Заполнить(ДанныеЗаполнения);
						
						ЗаказПоставщику.ДокументОснование = "";
						
						ЗаказПоставщику.ЦенаВключаетНДС = Истина;
						ЗаказПоставщику.Товары.Очистить();
						ВыборкаДетали = ВыборкаСклад.Выбрать();
						Пока ВыборкаДетали.Следующий() Цикл
							нс = ЗаказПоставщику.гф_ПродукцияВКоробах.Добавить();
							нс["ВариантКомплектации"] = ВыборкаДетали["ВариантКомплектации"];
							нс["КоличествоКоробов"] = ВыборкаДетали["КоличествоОстаток"];
						КонецЦикла;
						ЗаказПоставщику.гф_ПересчитатьТЧТоварыНаОсновнииКоробов();
						ЗаказПоставщику.Статус = Перечисления.СтатусыЗаказовПоставщикам.НеСогласован;
						
						НачатьТранзакцию();
						Попытка
							ЗаказПоставщику.Записать(РежимЗаписиДокумента.Проведение);
							// Записать в протокол документ проведен
						Исключение
							// Записать в протокол ошибка проведения
							ОтменитьТранзакцию();
							НачатьТранзакцию();
							Попытка
								ЗаказПоставщику.Записать(РежимЗаписиДокумента.Запись);
								// записать в протокол документ записан
							Исключение
								// Записать в протокол ошибка записи
								ОтменитьТранзакцию();
							КонецПопытки;
						КонецПопытки;
						
						Если РежимОтладки Тогда
							Если ТранзакцияАктивна() Тогда
								ОтменитьТранзакцию();
							КонецЕсли;
						Иначе
							Если ТранзакцияАктивна() Тогда
								ЗафиксироватьТранзакцию();
							КонецЕсли;
						КонецЕсли;
						УстановитьПривилегированныйРежим(Ложь);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРезультатыДляСозданияНовыхЗаказовЕслиЗаказЗаблокирован(тз)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("тз", тз);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	т.Организация КАК Организация,
	|	т.Поставщик КАК Поставщик,
	|	т.Склад КАК Склад,
	|	т.ВариантКомплектации КАК ВариантКомплектации,
	|	т.ЗаказПоставщику КАК ЗаказПоставщику,
	|	т.ДатаЗаказаПоставщику КАК ДатаЗаказаПоставщику,
	|	т.СтатусЗаказаПоставщику КАК СтатусЗаказаПоставщику,
	|	т.ПорядокПоСтатусу КАК ПорядокПоСтатусу,
	|	т.КоличествоКоробовЗаказа КАК КоличествоКоробовЗаказа,
	|	т.КоличествоОстаток КАК КоличествоОстаток
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	&тз КАК т
	|ГДЕ
	|	НЕ т.СтатусЗаказаПоставщику = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.Организация КАК Организация,
	|	Данные.Поставщик КАК Поставщик,
	|	Данные.Склад КАК Склад,
	|	Данные.ВариантКомплектации КАК ВариантКомплектации,
	|	МИНИМУМ(Данные.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	Данные КАК Данные
	|
	|СГРУППИРОВАТЬ ПО
	|	Данные.Организация,
	|	Данные.Поставщик,
	|	Данные.Склад,
	|	Данные.ВариантКомплектации
	|
	|ИМЕЮЩИЕ
	|	МИНИМУМ(Данные.КоличествоОстаток) > 0
	|ИТОГИ ПО
	|	Организация,
	|	Поставщик,
	|	Склад";
	
	Результат = Запрос.Выполнить();
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьРезультатыДляИзмененияЗаказовПоставщику(тз)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("тз", тз);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	т.Организация КАК Организация,
	|	т.Поставщик КАК Поставщик,
	|	т.Склад КАК Склад,
	|	т.ВариантКомплектации КАК ВариантКомплектации,
	|	т.ЗаказПоставщику КАК ЗаказПоставщику,
	|	т.ДатаЗаказаПоставщику КАК ДатаЗаказаПоставщику,
	|	т.СтатусЗаказаПоставщику КАК СтатусЗаказаПоставщику,
	|	т.ПорядокПоСтатусу КАК ПорядокПоСтатусу,
	|	т.КоличествоКоробовЗаказа КАК КоличествоКоробовЗаказа,
	|	т.КоличествоОстаток КАК КоличествоОстаток
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	&тз КАК т
	|ГДЕ
	|	т.СтатусЗаказаПоставщику = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.Организация КАК Организация,
	|	Данные.Поставщик КАК Поставщик,
	|	Данные.Склад КАК Склад,
	|	Данные.ВариантКомплектации КАК ВариантКомплектации,
	|	МИНИМУМ(Данные.ДатаЗаказаПоставщику) КАК ДатаЗаказаПоставщику
	|ПОМЕСТИТЬ ДанныеСвернутоПоДатеЗаказа
	|ИЗ
	|	Данные КАК Данные
	|
	|СГРУППИРОВАТЬ ПО
	|	Данные.Организация,
	|	Данные.Поставщик,
	|	Данные.Склад,
	|	Данные.ВариантКомплектации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.Организация КАК Организация,
	|	Данные.Поставщик КАК Поставщик,
	|	Данные.Склад КАК Склад,
	|	Данные.ВариантКомплектации КАК ВариантКомплектации,
	|	Данные.ДатаЗаказаПоставщику КАК ДатаЗаказаПоставщику,
	|	МИНИМУМ(Данные.ЗаказПоставщику) КАК ЗаказПоставщику
	|ПОМЕСТИТЬ ДанныеСвернутоСсылкеЗаказа
	|ИЗ
	|	Данные КАК Данные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеСвернутоПоДатеЗаказа КАК ДанныеСвернутоПоДатеЗаказа
	|		ПО Данные.Организация = ДанныеСвернутоПоДатеЗаказа.Организация
	|			И Данные.Поставщик = ДанныеСвернутоПоДатеЗаказа.Поставщик
	|			И Данные.Склад = ДанныеСвернутоПоДатеЗаказа.Склад
	|			И Данные.ВариантКомплектации = ДанныеСвернутоПоДатеЗаказа.ВариантКомплектации
	|			И Данные.ДатаЗаказаПоставщику = ДанныеСвернутоПоДатеЗаказа.ДатаЗаказаПоставщику
	|
	|СГРУППИРОВАТЬ ПО
	|	Данные.Организация,
	|	Данные.Поставщик,
	|	Данные.Склад,
	|	Данные.ВариантКомплектации,
	|	Данные.ДатаЗаказаПоставщику
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	Данные.ЗаказПоставщику КАК ЗаказПоставщику,
	|	Данные.ВариантКомплектации КАК ВариантКомплектации,
	|	Данные.КоличествоКоробовЗаказа КАК КоличествоКоробовЗаказа,
	|	Данные.КоличествоОстаток КАК КоличествоОстаток
	|ИЗ
	|	Данные КАК Данные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеСвернутоСсылкеЗаказа КАК ДанныеСвернутоСсылкеЗаказа
	|		ПО (Данные.ЗаказПоставщику = ДанныеСвернутоСсылкеЗаказа.ЗаказПоставщику)
	|			И (Данные.ВариантКомплектации = ДанныеСвернутоСсылкеЗаказа.ВариантКомплектации)
	|			И (Данные.ДатаЗаказаПоставщику = ДанныеСвернутоСсылкеЗаказа.ДатаЗаказаПоставщику)
	|ИТОГИ
	|	Сумма(КоличествоКоробовЗаказа),
	|	Максимум(КоличествоОстаток)
	|ПО
	|	ЗаказПоставщику,
	|	ВариантКомплектации";
	Результат = Запрос.Выполнить();
	Возврат Результат;
	
КонецФункции



&НаСервере
Процедура СоздатьЗаказыПоставщику(РезультатЗапроса)
	ТаблицаДанных = Объект.ЗаказыКлиентов.Выгрузить();
	ПолнаяТаблицаКСозданию = РезультатЗапроса.Выгрузить();
	
	ТаблицаДанныхЗаказов = ПолнаяТаблицаКСозданию.Скопировать();
	ТаблицаДанныхЗаказов.Свернуть("Организация, Поставщик, Склад");
	
	ДатаЗаказа = НачалоДня(ТекущаяДатаСеанса());
	Для каждого стрТз Из ТаблицаДанныхЗаказов Цикл
		СтруктураПоиска = Новый Структура("Организация, Поставщик, Склад, Отметка");
		СтруктураПоиска["Отметка"] = Истина;
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, стрТз);
		мСтрок = ТаблицаДанных.НайтиСтроки(СтруктураПоиска);
		ТаблицаПоОтбору = ТаблицаДанных.Скопировать(мСтрок);
		мЗаказов = ТаблицаПоОтбору.ВыгрузитьКолонку("ЗаказКлиента");
		мУникальныхЗаказов = Новый Массив;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(мУникальныхЗаказов, мЗаказов, Истина);
		
		Основание = ТаблицаПоОтбору[0].ЗаказКлиента;
		
		ДанныеЗаполнения = СтруктураДокументаОснованияНаСервере(Основание, Истина);
		УстановитьПривилегированныйРежим(Истина);
		ЗаказПоставщику = Документы.ЗаказПоставщику.СоздатьДокумент();
		ЗаказПоставщику.Дата = ДатаЗаказа;
		ЗаказПоставщику.Партнер = СтруктураПоиска["Поставщик"].Партнер;
		ЗаказПоставщику.Заполнить(ДанныеЗаполнения);
		
		// vvv Галфинд \ Sakovich 07.04.2023
		//Если мУникальныхЗаказов.ВГраница() = 0 Тогда
		//	ЗаказПоставщику.ДокументОснование = мУникальныхЗаказов[0];
		//Иначе
		//	ЗаказПоставщику.ДокументОснование = "";
		//КонецЕсли;
		ЗаказПоставщику.ДокументОснование = "";
		// ^^^ Галфинд \ Sakovich 07.04.2023 
		
		// vvv Галфинд \ Sakovich 19.01.2023
		// e1cib/data/Задача.ЗадачаИсполнителя?ref=8128bcee7bda45d711ed81d995d24d7d
		ЗаказПоставщику.ЦенаВключаетНДС = Истина;
		// ^^^ Галфинд \ Sakovich 19.01.2023 
		
		ЗаказПоставщику.Товары.Очистить();
		СтруктураПоиска.Удалить("Отметка");
		мстрВарианты = ПолнаяТаблицаКСозданию.НайтиСтроки(СтруктураПоиска);
		ДанныеПоКоробам = ПолнаяТаблицаКСозданию.Скопировать(мСтрВарианты);
		ДанныеПоКоробам.Свернуть("ВариантКомплектации", "КоличествоОстаток");
		ДанныеПоКоробам.Сортировать("КоличествоОстаток");
		Для каждого стрТз Из ДанныеПоКоробам Цикл
			нс = ЗаказПоставщику.гф_ПродукцияВКоробах.Добавить();
			нс["ВариантКомплектации"] = стрТз["ВариантКомплектации"];
			нс["КоличествоКоробов"] = стрТз["КоличествоОстаток"];
		КонецЦикла;
		ЗаказПоставщику.гф_ПересчитатьТЧТоварыНаОсновнииКоробов();
		// vvv Галфинд \ Sakovich 05.04.2023
		ЗаказПоставщику.Статус = Перечисления.СтатусыЗаказовПоставщикам.НеСогласован;
		// ^^^ Галфинд \ Sakovich 05.04.2023 
		
		////$$$===========================vvv ОТЛАДКА vvv======================07.02.2023 20:27:15=============| SBB
		//Для каждого стрТч Из ЗаказПоставщику.Товары Цикл
		//	стрТч["Цена"] = 100;
		//	стрТч["Сумма"] = стрТч["Цена"] * стрТч["КоличествоУпаковок"];
		//	стрТч["СуммаНДС"] = стрТч["Сумма"] * 20 / 100;
		//	стрТч["СуммаСНДС"] = стрТч["Сумма"] + стрТч["СуммаНДС"]
		//КонецЦикла;
		//ЗаказПоставщику.гф_ПересчитатьСуммыТчТоваровВКоробахПоТчТовары();
		////===========================^^^ КОНЕЦ ОТЛАДКИ ^^^===================07.02.2023 20:27:15=============| SBB
		
		НачатьТранзакцию();
		Попытка
			ЗаказПоставщику.Записать(РежимЗаписиДокумента.Проведение);
			// Записать в протокол документ проведен
		Исключение
			// Записать в протокол ошибка проведения
			ОтменитьТранзакцию();
			НачатьТранзакцию();
			Попытка
				ЗаказПоставщику.Записать(РежимЗаписиДокумента.Запись);
				// записать в протокол документ записан
			Исключение
				ОтменитьТранзакцию();
				// Записать в протокол ошибка записи
			КонецПопытки;
		КонецПопытки;
		
		Если РежимОтладки Тогда
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
		Иначе
			Если ТранзакцияАктивна() Тогда
				ЗафиксироватьТранзакцию();
			КонецЕсли;
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Функция СтруктураДокументаОснованияНаСервере(ДокументОснование, ИспользованиеСкладов)
	ЕстьРеквизитШапкиСклад = ОбщегоНазначения.ЕстьРеквизитОбъекта("Склад", ДокументОснование.Метаданные());
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Организация", "Организация");
	СтруктураПолей.Вставить("Подразделение", "Подразделение");
	СтруктураПолей.Вставить("ДокументОснование", "Ссылка");
	СтруктураПолей.Вставить("НаправлениеДеятельности");
	
	Если ЕстьРеквизитШапкиСклад Тогда
		СтруктураПолей.Вставить("Склад", "Склад");
		СтруктураПолей.Вставить("Сделка", "Сделка");
		СтруктураПолей.Вставить("СкладЭтоГруппа", "Склад.ЭтоГруппа");
		СтруктураПолей.Вставить("Приоритет", "Приоритет");
	КонецЕсли;
	
	РеквизитыЗаполнения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, СтруктураПолей);
	СтрокаПолей = "Организация, ДокументОснование, Подразделение, Склад, Сделка, Приоритет, НаправлениеДеятельности";
		
	РеквизитыОснования = Новый Структура(СтрокаПолей);
	ЗаполнитьЗначенияСвойств(РеквизитыОснования, РеквизитыЗаполнения, СтрокаПолей);

	Возврат РеквизитыОснования;

КонецФункции 

&НаКлиенте
Процедура СформироватьЗаказыПоставщику(Команда)
	СформироватьЗаказыПоставщикуНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	// Вставить содержимое обработчика.
КонецПроцедуры
