
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДинСписок.Параметры.УстановитьЗначениеПараметра("ТестКонтрагент",
	Справочники.Контрагенты.НайтиПоНаименованию("Кириков Андрей Андреевич"));
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокНаСервере()
	СхемаКомпоновкиДанных = Элементы.ДинСписок.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
    НастройкиКомпоновкиДанных = Элементы.ДинСписок.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
    
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, 
	НастройкиКомпоновкиДанных, , ,
	Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
    
    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
    
    тз = Новый ТаблицаЗначений;
    
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ПроцессорВывода.УстановитьОбъект(тз);
    ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Объект.ЗаказыКлиентов.Загрузить(тз);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	ОбновитьСписокНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеПометки(Признак= Неопределено)
	
	Для каждого ЭлКоллекции Из Объект.ЗаказыКлиентов Цикл
		Если Признак= Неопределено Тогда
			ЭлКоллекции["Отметка"] = Не ЭлКоллекции["Отметка"];
		Иначе
			ЭлКоллекции["Отметка"] = Признак;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометку(Команда) 
	УстановитьЗначениеПометки(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометку(Команда)
	УстановитьЗначениеПометки(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ИнвертироватьПометку(Команда)
	УстановитьЗначениеПометки();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьСписокНаСервере();
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаказыПоставщикуНаСервере()
	тз = Объект.ЗаказыКлиентов.Выгрузить();
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	т.Организация КАК Организация,
	|	т.Склад КАК Склад,
	|	т.ПоставщикТест КАК ПоставщикТест,
	|	т.Поставщик КАК Поставщик,
	|	т.Отметка КАК Отметка
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	&тз КАК т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тз.Организация КАК Организация,
	|	тз.Склад КАК Склад,
	|	тз.ПоставщикТест КАК ПоставщикТест, //ОТЛАДКА
	|	тз.Поставщик КАК Поставщик
	|ИЗ
	|	вт КАК тз
	|ГДЕ
	|	тз.Отметка";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("тз", тз);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;	
	КонецЕсли;
	Выборка = Результат.Выбрать();
	СтруктураПолей = Новый Структура;
	Для каждого Колонка Из Результат.Колонки Цикл
		СтруктураПолей.Вставить(Колонка.Имя);
	КонецЦикла;

	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка["Поставщик"]) Тогда 
		// Записать в протокол
			Продолжить;	
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(СтруктураПолей, Выборка);
		СтруктураПолей.Вставить("Отметка", Истина);
		СоздатьЗаполнитьЗаказПоставщику(СтруктураПолей, тз);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЗаполнитьЗаказПоставщику(СтруктураПоиска, ТаблицаДанных)
	ДатаЗаказа = НачалоДня(ТекущаяДатаСеанса());
	
	мСтрок = ТаблицаДанных.НайтиСтроки(СтруктураПоиска);
	ТаблицаПоОтбору = ТаблицаДанных.Скопировать(мСтрок);
	мЗаказов = ТаблицаПоОтбору.ВыгрузитьКолонку("ЗаказКлиента");
	мУникальныхЗаказов = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(мУникальныхЗаказов, мЗаказов, Истина);
	
	Основание = ТаблицаПоОтбору[0].ЗаказКлиента;
	
	ДанныеЗаполнения = СтруктураДокументаОснованияНаСервере(Основание, Истина);
	
	ЗаказПоставщику = Документы.ЗаказПоставщику.СоздатьДокумент();
	ЗаказПоставщику.Дата = ДатаЗаказа;
	ЗаказПоставщику.Партнер = СтруктураПоиска["Поставщик"].Партнер;
	ЗаказПоставщику.Заполнить(ДанныеЗаполнения);
	
	Если мУникальныхЗаказов.ВГраница() = 0 Тогда
		ЗаказПоставщику.ДокументОснование = мУникальныхЗаказов[0];
	Иначе
		ЗаказПоставщику.ДокументОснование = "";
	КонецЕсли;
	
	// vvv Галфинд \ Sakovich 19.01.2023
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8128bcee7bda45d711ed81d995d24d7d
	ЗаказПоставщику.ЦенаВключаетНДС = Истина;
	// ^^^ Галфинд \ Sakovich 19.01.2023 
	
	ЗаказПоставщику.Товары.Очистить();
	
	ДанныеПоКоробам = ТаблицаПоОтбору.Скопировать();
	ДанныеПоКоробам.Свернуть("ВариантКомплектации, ЦенаКороба", "Количество");
	ДанныеПоКоробам.Сортировать("ВариантКомплектации, ЦенаКороба");
	Для каждого стрТз Из ДанныеПоКоробам Цикл
		нс = ЗаказПоставщику.гф_ПродукцияВКоробах.Добавить();
		нс["ВариантКомплектации"] = стрТз["ВариантКомплектации"];
		нс["КоличествоКоробов"] = стрТз["Количество"];
	КонецЦикла;
	ЗаказПоставщику.гф_ПересчитатьТЧТоварыНаОсновнииКоробов();

	////$$$===========================vvv ОТЛАДКА vvv======================07.02.2023 20:27:15=============| SBB
	//Для каждого стрТч Из ЗаказПоставщику.Товары Цикл
	//	стрТч["Цена"] = 100;
	//	стрТч["Сумма"] = стрТч["Цена"] * стрТч["КоличествоУпаковок"];
	//	стрТч["СуммаНДС"] = стрТч["Сумма"] * 20 / 100;
	//	стрТч["СуммаСНДС"] = стрТч["Сумма"] + стрТч["СуммаНДС"]
	//КонецЦикла;
	//ЗаказПоставщику.гф_ПересчитатьСуммыТчТоваровВКоробахПоТчТовары();
	////===========================^^^ КОНЕЦ ОТЛАДКИ ^^^===================07.02.2023 20:27:15=============| SBB

	Попытка
		ЗаказПоставщику.Записать(РежимЗаписиДокумента.Проведение);
		// Записать в протокол документ проведен
	Исключение
		// Записать в протокол ошибка проведения
		Попытка
			ЗаказПоставщику.Записать(РежимЗаписиДокумента.Запись);
			// записать в протокол документ записан
		Исключение
			// Записать в протокол ошибка записи
		КонецПопытки;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция СтруктураДокументаОснованияНаСервере(ДокументОснование, ИспользованиеСкладов)
	ЕстьРеквизитШапкиСклад = ОбщегоНазначения.ЕстьРеквизитОбъекта("Склад", ДокументОснование.Метаданные());
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Организация", "Организация");
	СтруктураПолей.Вставить("Подразделение", "Подразделение");
	СтруктураПолей.Вставить("ДокументОснование", "Ссылка");
	СтруктураПолей.Вставить("НаправлениеДеятельности");
	
	Если ЕстьРеквизитШапкиСклад Тогда
		СтруктураПолей.Вставить("Склад", "Склад");
		СтруктураПолей.Вставить("Сделка", "Сделка");
		СтруктураПолей.Вставить("СкладЭтоГруппа", "Склад.ЭтоГруппа");
		СтруктураПолей.Вставить("Приоритет", "Приоритет");
	КонецЕсли;
	
	РеквизитыЗаполнения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, СтруктураПолей);
	СтрокаПолей = "Организация, ДокументОснование, Подразделение, Склад, Сделка, Приоритет, НаправлениеДеятельности";
		
	РеквизитыОснования = Новый Структура(СтрокаПолей);
	ЗаполнитьЗначенияСвойств(РеквизитыОснования, РеквизитыЗаполнения, СтрокаПолей);

	Возврат РеквизитыОснования;

КонецФункции 

&НаКлиенте
Процедура СформироватьЗаказыПоставщику(Команда)
	СформироватьЗаказыПоставщикуНаСервере();
КонецПроцедуры
