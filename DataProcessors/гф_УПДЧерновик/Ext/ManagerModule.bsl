// ЕсиповАВ
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	СтруктураТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивОбъектов);
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "УПД(Черновик)") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"УПД(Черновик)",
		НСтр("ru = 'Универсальный передаточный документ (УПД)(Черновик)';
		|en = 'Universal transfer document (UTD)'"),
		СформироватьПечатнуюФормуУПДЧерновик(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "УПД(Свернутый)") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"УПД(Свернутый)",
		НСтр("ru = 'Универсальный передаточный документ (УПД)(Свернутый)';
		|en = 'Universal transfer document (UTD)'"),
		СформироватьПечатнуюФормуУПДСвернутый(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Заявка на отправку груза в СНГ") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"Заявка на отправку груза в СНГ",
		"Заявка на отправку груза в СНГ(Вортманн)",
		СформироватьПечатнуюФормуЗаявкиНаОтгрузкуСНГ(МассивОбъектов, 
		СтруктураТипов,
		ОбъектыПечати,
		ПараметрыПечати));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаявкаНаЭкспорт") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"ЗаявкаНаЭкспорт",
		НСтр("ru = 'Заявка на экспорт';
		|en = 'Application for export'"),
		СформироватьПечатнуюФормуЗаявкаНаЭкспрот(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаявкаНаРеализациюСклад") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"ЗаявкаНаРеализациюСклад",
		НСтр("ru = 'Заявка на расход реализация Склад;
		|en = 'Application for expense sale Warehouse'"),
		СформироватьПечатнуюФормуЗаявкаНаРасходРеализацииСклад(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, СтруктураТипов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

Функция СформироватьПечатнуюФормуЗаявкаНаРасходРеализацииСклад(СтруктураТипов, ОбъектыПечати, ПараметрыПечати = Неопределено) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	МассивДок = Новый Массив;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивДок, СтруктураОбъектов.Значение);
	
    КонецЦикла;
	
	МакетОбработки = ПолучитьМакет("ПФ_MXL_ЗаявкаНаРасходРеализацияСклад");
	ОбластьШапка = МакетОбработки.ПолучитьОбласть("Шапка");
	ОбластьСтрока = МакетОбработки.ПолучитьОбласть("Строка");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслуг.Дата КАК Дата,
	|	РеализацияТоваровУслуг.Валюта КАК Валюта,
	|	РеализацияТоваровУслуг.ЗаказКлиента КАК ЗаказКлиента,
	|	РеализацияТоваровУслуг.Организация КАК Организация,
	|	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
	|	РеализацияТоваровУслуг.Склад КАК Склад,
	|	РеализацияТоваровУслуг.Отпустил КАК Отпустил,
	|	РеализацияТоваровУслуг.Автор КАК Автор,
	|	РеализацияТоваровУслуг.Товары.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура КАК Номенклатура,
	|		Характеристика КАК Характеристика,
	|		Назначение КАК Назначение,
	|		Упаковка КАК Упаковка,
	|		КоличествоУпаковок КАК КоличествоУпаковок,
	|		Количество КАК Количество,
	|		ВидЦены КАК ВидЦены,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		УдалитьСтавкаНДС КАК УдалитьСтавкаНДС,
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДС КАК СуммаНДС,
	|		СуммаСНДС КАК СуммаСНДС,
	|		КодСтроки КАК КодСтроки,
	|		СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|		СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|		ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|		ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|		КлючСвязи КАК КлючСвязи,
	|		Склад КАК Склад,
	|		СтатусУказанияСерий КАК СтатусУказанияСерий,
	|		СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|		ЗаказКлиента КАК ЗаказКлиента,
	|		СрокПоставки КАК СрокПоставки,
	|		ИдентификаторСтроки КАК ИдентификаторСтроки,
	|		Серия КАК Серия,
	|		АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		АналитикаУчетаНаборов КАК АналитикаУчетаНаборов,
	|		КодТНВЭД КАК КодТНВЭД,
	|		ОбъектРасчетов КАК ОбъектРасчетов,
	|		Подразделение КАК Подразделение,
	|		НоменклатураПартнера КАК НоменклатураПартнера,
	|		СуммаБонусныхБалловКСписанию КАК СуммаБонусныхБалловКСписанию,
	|		СуммаБонусныхБалловКСписаниюВВалюте КАК СуммаБонусныхБалловКСписаниюВВалюте,
	|		СуммаНачисленныхБонусныхБалловВВалюте КАК СуммаНачисленныхБонусныхБалловВВалюте
	|	) КАК Товары,
	|	РеализацияТоваровУслуг.гф_ТоварыВКоробах.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		УпаковочныйЛист КАК УпаковочныйЛист,
	|		Артикул КАК Артикул,
	|		КоличествоПар КАК КоличествоПар,
	|		Коэффициент КАК Коэффициент,
	|		ЦенаКороба КАК ЦенаКороба,
	|		НДС КАК НДС
	|	) КАК гф_ТоварыВКоробах
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &Ссылка";
	Запрос.Параметры.Вставить("Ссылка",МассивДок[0].Ссылка);
	Таб = Запрос.Выполнить().Выгрузить();
	
	// Заполнение области Шапка
	Кол = 0;
	Для Каждого Строка Из Таб[0].гф_ТоварыВКоробах Цикл
		Кол = Кол + 1;
	КонецЦикла;	
	//ОбластьШапка.Параметры.НомерЗаявки                   = ;
	ОбластьШапка.Параметры.ДатаЗаполнения                = Таб[0].Дата;
	ОбластьШапка.Параметры.Заполнитель                   = Таб[0].Автор.Наименование;
	ОбластьШапка.Параметры.Организация                   = Таб[0].Контрагент.Наименование;
	ОбластьШапка.Параметры.ОтвественноеЛицо              = Таб[0].Отпустил.ФИО;
	//ОбластьШапка.Параметры.ДатаОтгрузки                  = ;
	ОбластьШапка.Параметры.Примечания                    = Таб[0].ЗаказКлиента.АдресДоставки;
	ОбластьШапка.Параметры.КоличествоСтрок               = Кол;
	ОбластьШапка.Параметры.НомерСклада                   = Таб[0].Склад.Наименование;
	//ОбластьШапка.Параметры.НомерКлиента                  = ;
	//ОбластьШапка.Параметры.Тоннаж                        = ;
	//ОбластьШапка.Параметры.Объем                         = ;
	ОбластьШапка.Параметры.УведомлениеОбОтгрузкиСоСклада = "Уведомление об отгрузке продукции со склада " + Таб[0].Организация.Наименование;
	ТабличныйДокумент.Вывести(ОбластьШапка);
	//
	
	// Заполнение области Строка
	Для Каждого СтрТов Из Таб[0].гф_ТоварыВКоробах Цикл
		
		Для Каждого Стр Из Таб[0].Товары Цикл
			ОбластьСтрока.Параметры.КодТовара             = Стр.Номенклатура.Код;
			ОбластьСтрока.Параметры.НаименованиеПродукции = Стр.Номенклатура.Наименование;
			// условия вывода типа упаковки
			Если Стр.Упаковка.Наименование      = "упак" Тогда
				ОбластьСтрока.Параметры.Упак    = Стр.Упаковка.Наименование;
			ИначеЕсли Стр.Упаковка.Наименование = "короб" Тогда
				ОбластьСтрока.Параметры.Коробов = Стр.Упаковка.Наименование;
			ИначеЕсли Стр.Упаковка.Наименование = "паллет" Тогда
				ОбластьСтрока.Параметры.Паллет  = Стр.Упаковка.Наименование;
			КонецЕсли;		
			//
			ОбластьСтрока.Параметры.Количество            = СтрТов.КоличествоПар;
			ОбластьСтрока.Параметры.НомерПартии           = СтрТов.УпаковочныйЛист.Код;
			ОбластьСтрока.Параметры.Примечания            = СтрТов.Артикул + Стр.Номенклатура.Наименование;
		КонецЦикла;
		ТабличныйДокумент.Вывести(ОбластьСтрока);
	КонецЦикла;
	//
	
	Возврат ТабличныйДокумент;
КонецФункции	

Функция СформироватьПечатнуюФормуЗаявкаНаЭкспрот(СтруктураТипов, ОбъектыПечати, ПараметрыПечати = Неопределено) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	МассивДок = Новый Массив;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивДок, СтруктураОбъектов.Значение);
	
    КонецЦикла;
	
	МакетОбработки = ПолучитьМакет("ПФ_MXL_ЗаявкаНаЭкспорт");
	ОбластьШапка = МакетОбработки.ПолучитьОбласть("Шапка");
	ОбластьСтрока = МакетОбработки.ПолучитьОбласть("Строка");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Товары.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура КАК Номенклатура,
	|		Характеристика КАК Характеристика,
	|		Назначение КАК Назначение,
	|		Упаковка КАК Упаковка,
	|		КоличествоУпаковок КАК КоличествоУпаковок,
	|		Количество КАК Количество,
	|		ВидЦены КАК ВидЦены,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		УдалитьСтавкаНДС КАК УдалитьСтавкаНДС,
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДС КАК СуммаНДС,
	|		СуммаСНДС КАК СуммаСНДС,
	|		КодСтроки КАК КодСтроки,
	|		СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|		СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|		ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|		ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|		КлючСвязи КАК КлючСвязи,
	|		Склад КАК Склад,
	|		СтатусУказанияСерий КАК СтатусУказанияСерий,
	|		СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|		ЗаказКлиента КАК ЗаказКлиента,
	|		СрокПоставки КАК СрокПоставки,
	|		ИдентификаторСтроки КАК ИдентификаторСтроки,
	|		Серия КАК Серия,
	|		АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		АналитикаУчетаНаборов КАК АналитикаУчетаНаборов,
	|		КодТНВЭД КАК КодТНВЭД,
	|		ОбъектРасчетов КАК ОбъектРасчетов,
	|		Подразделение КАК Подразделение,
	|		НоменклатураПартнера КАК НоменклатураПартнера,
	|		СуммаБонусныхБалловКСписанию КАК СуммаБонусныхБалловКСписанию,
	|		СуммаБонусныхБалловКСписаниюВВалюте КАК СуммаБонусныхБалловКСписаниюВВалюте,
	|		СуммаНачисленныхБонусныхБалловВВалюте КАК СуммаНачисленныхБонусныхБалловВВалюте
	|	) КАК Товары,
	|	РеализацияТоваровУслуг.гф_ТоварыВКоробах.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		УпаковочныйЛист КАК УпаковочныйЛист,
	|		Артикул КАК Артикул,
	|		КоличествоПар КАК КоличествоПар,
	|		Коэффициент КАК Коэффициент,
	|		ЦенаКороба КАК ЦенаКороба,
	|		НДС КАК НДС
	|	) КАК гф_ТоварыВКоробах
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &Ссылка";
	Запрос.Параметры.Вставить("Ссылка",МассивДок[0].Ссылка);
	
	Таб = Запрос.Выполнить().Выгрузить();
	
	// Вывод области "Шапка"
	ТабличныйДокумент.Вывести(ОбластьШапка);
	//
	
	Для Каждого Стр Из Таб[0].гф_ТоварыВКоробах Цикл
		
		Для Каждого Тов Из Таб[0].Товары Цикл
			//ОбластьСтрока.Параметры.Номер               = ;
			ОбластьСтрока.Параметры.КодТНВЭД            = Тов.Номенклатура.КодТНВЭД.Код;
			ОбластьСтрока.Параметры.Характеристика      = Тов.Номенклатура.ВидНоменклатуры.Наименование;
			ОбластьСтрока.Параметры.СтранаПроизводитель = Тов.Номенклатура.СтранаПроисхождения.Наименование;
			//ОбластьСтрока.Параметры.СканыДокументов     = ;
		КонецЦикла;
		ТабличныйДокумент.Вывести(ОбластьСтрока);
	КонецЦикла;	
	
	Возврат ТабличныйДокумент;
	
КонецФункции	

Функция СформироватьПечатнуюФормуЗаявкиНаОтгрузкуСНГ(МассивОбъектов, СтруктураТипов, ОбъектыПечати, ПараметрыПечати)
	
	Макет = ПолучитьМакет("ПФ_MXL_ЗаявкаНаОтправкуГрузаСНГ");
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ОбластьШапки = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
	ОбластьСтрокиИтого = Макет.ПолучитьОбласть("СтрокаИтого");
	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслуг.Номер КАК Номер,
	|	РеализацияТоваровУслуг.Валюта КАК Валюта,
	|	РеализацияТоваровУслуг.Грузоотправитель КАК Грузоотправитель,
	|	РеализацияТоваровУслуг.Грузополучатель КАК Грузополучатель,
	|	РеализацияТоваровУслуг.ЗаказКлиента КАК ЗаказКлиента,
	|	РеализацияТоваровУслуг.Организация КАК Организация,
	|	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
	|	РеализацияТоваровУслуг.Договор КАК Договор,
	|	РеализацияТоваровУслуг.Товары.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура КАК Номенклатура,
	|		Характеристика КАК Характеристика,
	|		Назначение КАК Назначение,
	|		Упаковка КАК Упаковка,
	|		КоличествоУпаковок КАК КоличествоУпаковок,
	|		Количество КАК Количество,
	|		ВидЦены КАК ВидЦены,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		УдалитьСтавкаНДС КАК УдалитьСтавкаНДС,
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДС КАК СуммаНДС,
	|		СуммаСНДС КАК СуммаСНДС,
	|		КодСтроки КАК КодСтроки,
	|		СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|		СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|		ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|		ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|		КлючСвязи КАК КлючСвязи,
	|		Склад КАК Склад,
	|		СтатусУказанияСерий КАК СтатусУказанияСерий,
	|		СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|		ЗаказКлиента КАК ЗаказКлиента,
	|		СрокПоставки КАК СрокПоставки,
	|		ИдентификаторСтроки КАК ИдентификаторСтроки,
	|		Серия КАК Серия,
	|		АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		АналитикаУчетаНаборов КАК АналитикаУчетаНаборов,
	|		КодТНВЭД КАК КодТНВЭД,
	|		ОбъектРасчетов КАК ОбъектРасчетов,
	|		Подразделение КАК Подразделение,
	|		НоменклатураПартнера КАК НоменклатураПартнера,
	|		СуммаБонусныхБалловКСписанию КАК СуммаБонусныхБалловКСписанию,
	|		СуммаБонусныхБалловКСписаниюВВалюте КАК СуммаБонусныхБалловКСписаниюВВалюте,
	|		СуммаНачисленныхБонусныхБалловВВалюте КАК СуммаНачисленныхБонусныхБалловВВалюте
	|	) КАК Товары,
	|	РеализацияТоваровУслуг.гф_ТоварыВКоробах.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		УпаковочныйЛист КАК УпаковочныйЛист,
	|		Артикул КАК Артикул,
	|		КоличествоПар КАК КоличествоПар,
	|		Коэффициент КАК Коэффициент,
	|		ЦенаКороба КАК ЦенаКороба,
	|		НДС КАК НДС
	|	) КАК гф_ТоварыВКоробах
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &Ссылка";
	Запрос.Параметры.Вставить("Ссылка",МассивОбъектов[0].Ссылка);
	Таб = Запрос.Выполнить().Выгрузить();
	
	МассивДок = Новый Массив;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивДок, СтруктураОбъектов.Значение);
		
	КонецЦикла;
	
	ПервичныеДокументыВКоробах = УправлениеСвойствами.ЗначениеСвойства(МассивДок[0].Договор, 
	"гф_ДоговорыКонтрагентовПервичныеДокументыВКоробах");
	
	Если ПервичныеДокументыВКоробах = Неопределено Тогда 
		ПервичныеДокументыВКоробах = Ложь;
	КонецЕсли; 
	
	ТабДок.Вывести(ОбластьШапки);
	
	ИтогоОтправка = 0;
	ИтогоМест = 0;
	ИтогоВес = 0;
	ИтогоСумма = 0;
	
	Если ПервичныеДокументыВКоробах Тогда
		
		НомерКороб =0;
		Для Каждого СтрКороб Из Таб[0].гф_ТоварыВКоробах Цикл
			
			НомерКороб = НомерКороб + 1;
			ОбластьСтроки.Параметры.НомерЗаказа              = Таб[0].ЗаказКлиента.Номер;
		    ОбластьСтроки.Параметры.ПредставлениеОтправителя = Таб[0].Грузоотправитель.Наименование + " " + Таб[0].Грузоотправитель.ИНН + "/" + Таб[0].Грузоотправитель.КПП;
			ОбластьСтроки.Параметры.ПредставлениеПолучателя  = Таб[0].Грузополучатель.Наименование + " " + Таб[0].Грузополучатель.ИНН + "/" + Таб[0].Грузополучатель.КПП;
			ОбластьСтроки.Параметры.НПП                      = НомерКороб;
			ОбластьСтроки.Параметры.Номенклатура             = СтрКороб.УпаковочныйЛист;
			ОбластьСтроки.Параметры.Количество               = СтрКороб.Коэффициент;
			ОбластьСтроки.Параметры.ВидУпаковки              = СтрКороб.УпаковочныйЛист.гф_Агрегация.ТипУпаковки;
			//ОбластьСтроки.Параметры.КодВидаУпаковки          = ;
			ОбластьСтроки.Параметры.КолвоМест                = СтрКороб.КоличествоПар;
			ОбластьСтроки.Параметры.КодТНВЭД                 = Таб[0].Товары[0].КодТНВЭД.Код;
			//ОбластьСтроки.Параметры.ВесБруттоТовара          = ;
			ОбластьСтроки.Параметры.ЦенаЗаЕдиницу            = СтрКороб.ЦенаКороба;
			ОбластьСтроки.Параметры.Сумма                    = СтрКороб.ЦенаКороба * СтрКороб.Коэффициент;
			ОбластьСтроки.Параметры.Валюта                   = Таб[0].Валюта.Наименование;
			
			ИтогоМест = ИтогоМест + СтрКороб.КоличествоПар;
			ИтогоСумма = ИтогоСумма + СтрКороб.ЦенаКороба * СтрКороб.Коэффициент;
			
			ТабДок.Вывести(ОбластьСтроки);
			
		КонецЦикла;	
			
	Иначе	
		
		НомерПара = 0;
		Для Каждого СтрТов Из Таб[0].Товары Цикл
			
			НомерПара = НомерПара + 1;
			ОбластьСтроки.Параметры.НомерЗаказа              = Таб[0].ЗаказКлиента.Номер;
			ОбластьСтроки.Параметры.ПредставлениеОтправителя = Таб[0].Грузоотправитель.Наименование + " " + Таб[0].Грузоотправитель.ИНН + "/" + Таб[0].Грузоотправитель.КПП;
			ОбластьСтроки.Параметры.ПредставлениеПолучателя  = Таб[0].Грузополучатель.Наименование + " " + Таб[0].Грузополучатель.ИНН + "/" + Таб[0].Грузополучатель.КПП;
			ОбластьСтроки.Параметры.НПП                      = НомерПара;
			ОбластьСтроки.Параметры.Номенклатура             = СтрТов.Номенклатура;
			ОбластьСтроки.Параметры.Количество               = СтрТов.Количество;
			ОбластьСтроки.Параметры.ВидУпаковки              = СтрТов.Упаковка.Наименование;
			//ОбластьСтроки.Параметры.КодВидаУпаковки          = ;
			ОбластьСтроки.Параметры.КолвоМест                = СтрТов.КоличествоУпаковок;
			ОбластьСтроки.Параметры.КодТНВЭД                 = СтрТов.КодТНВЭД.Код;
			//ОбластьСтроки.Параметры.ВесБруттоТовара          = ;
			ОбластьСтроки.Параметры.ЦенаЗаЕдиницу            = СтрТов.Цена * СтрТов.Количество;
			ОбластьСтроки.Параметры.Сумма                    = СтрТов.СуммаСНДС;
			ОбластьСтроки.Параметры.Валюта                   = Таб[0].Валюта.Наименование;
			
			ИтогоМест = ИтогоМест + СтрТов.КоличествоУпаковок;
			ИтогоСумма = ИтогоСумма + СтрТов.СуммаСНДС;
			
			ТабДок.Вывести(ОбластьСтроки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	//ОбластьСтрокиИтого.Параметры.ИтогоПоОтправке = ;
	ОбластьСтрокиИтого.Параметры.КолвоМест       = ИтогоМест;
	//ОбластьСтрокиИтого.Параметры.ВесБруттоТовара = ;
	ОбластьСтрокиИтого.Параметры.Сумма           = ИтогоСумма;
	
	ТабДок.Вывести(ОбластьСтрокиИтого);
	
	Возврат ТабДок;
КонецФункции
// ЕсиповАВ
Функция СформироватьПечатнуюФормуУПДЧерновик(СтруктураТипов, ОбъектыПечати, ПараметрыПечати = Неопределено) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	МакетОбработки = ПолучитьМакет("ПФ_MXL_УПД_Черновик");
	
	МассивДок = Новый Массив;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивДок, СтруктураОбъектов.Значение);
	
    КонецЦикла; 

    //Сообщить("Создан ЧЕРНОВИК. Планируемая поставка");

	ОбластьШапка = МакетОбработки.ПолучитьОбласть("Шапка");
	ОбластьЗаголовкаТаблицы = МакетОбработки.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьСтрокаКомплектующие = МакетОбработки.ПолучитьОбласть("СтрокаКомплектующие");
	ОбластьСтрокаНабор = МакетОбработки.ПолучитьОбласть("СтрокаНабор");
	ОбластьСтрока = МакетОбработки.ПолучитьОбласть("Строка");
	ОбластьИтого = МакетОбработки.ПолучитьОбласть("Итого");
	ОбластьПодвал = МакетОбработки.ПолучитьОбласть("Подвал");
	ОбластьНумерацияЛистов = МакетОбработки.ПолучитьОбласть("НумерацияЛистов");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслуг.Номер КАК Номер,
	|	РеализацияТоваровУслуг.Дата КАК Дата,
	|	РеализацияТоваровУслуг.Проведен КАК Проведен,
	|	РеализацияТоваровУслуг.Организация КАК Организация,
	|	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
	|	РеализацияТоваровУслуг.Автор КАК Автор,
	|	РеализацияТоваровУслуг.Партнер КАК Партнер,
	|	РеализацияТоваровУслуг.Валюта КАК Валюта,
	|	РеализацияТоваровУслуг.Руководитель КАК Руководитель,
	// ++ Галфинд_ДомнышеваКР_20_09_2023 
	|	РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки,
	// -- Галфинд_ДомнышеваКР_20_09_2023
	|	РеализацияТоваровУслуг.Товары.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура КАК Номенклатура,
	|		Характеристика КАК Характеристика,
	// ++ Галфинд_ДомнышеваКР_20_09_2023
	|		Упаковка.Код КАК УпаковкаКод,
	|		Упаковка.Наименование КАК УпаковкаНаименование,
	// -- Галфинд_ДомнышеваКР_20_09_2023
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДС КАК СуммаНДС,
	|		СуммаСНДС КАК СуммаСНДС
	|	) КАК Товары
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &Имя";
	
	Запрос.Параметры.Вставить("Имя",МассивДок[0].Ссылка);
	
	Таб = Запрос.Выполнить().Выгрузить();
	
	//НомерДок = Прав(Таб[0].Номер, 6);
	//
	//НомерБезНулей = НомерДок;
	//   Пока Найти(НомерБезНулей,"0") = 1 Цикл
	//            НомерБезНулей = Сред(НомерБезНулей,2); //удаляет лидирующие нули
	//   КонецЦикла;
	   
	//ОбластьШапка.Параметры.Номер = НомерБезНулей;
	ОбластьШапка.Параметры.Дата = Формат(Таб[0].Дата, "ДЛФ=DD");
	ОбластьШапка.Параметры.ПредставлениеПоставщика = Таб[0].Организация;
	
	// ++ Галфинд_ДомнышеваКР_20_09_2023
	СведенияОГрузополучателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Таб[0].Контрагент, Таб[0].Дата);
	СведенияОГрузоотправителе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Таб[0].Организация, Таб[0].Дата);
	ОбластьШапка.Параметры.АдресПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1';
						|en = '%1'"),
					ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправителе, "ЮридическийАдрес"));
	ОбластьШапка.Параметры.АдресПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1';
						|en = '%1'"),
					ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ЮридическийАдрес"));
		
	ТекстГрузоотправителя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
				СведенияОГрузоотправителе, "ПолноеНаименование,ФактическийАдрес");

	ОбластьШапка.Параметры.ПредставлениеГрузоотправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1';
				|en = '%1'"), ТекстГрузоотправителя);
			
	ВидыЗапасов = ПолучитьНомераГТДИСтраныИзШтрихкодов(МассивДок[0].Ссылка);
	// -- Галфинд_ДомнышеваКР_20_09_2023
	
	ОбластьШапка.Параметры.ПредставлениеПокупателя = Таб[0].Партнер.НаименованиеПолное;
	ПеремКодВалюты = Таб[0].Валюта.Код;
	ПеремВалюта = Таб[0].Валюта;
	ПеремВалютаЗнач = Строка(ПеремКодВалюты);
	ПеремВалютаЗначКод = Строка(ПеремВалюта);
	ОбластьШапка.Параметры.Валюта = ПеремВалютаЗначКод + ", " + ПеремВалютаЗнач;
	ОбластьШапка.Параметры.ИННПоставщика = Таб[0].Организация.ИНН + "/" + Таб[0].Организация.КПП;
	ОбластьШапка.Параметры.ПредставлениеГрузополучателя = Таб[0].Контрагент.НаименованиеПолное + Таб[0].АдресДоставки;
	ОбластьШапка.Параметры.ИННПокупателя = Таб[0].Контрагент.ИНН + "/" + Таб[0].Контрагент.КПП;
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	ТабличныйДокумент.Вывести(ОбластьЗаголовкаТаблицы);
	
	СуммаВсего = 0; 
	СуммаВсегоСНДС = 0;
	СуммаВсегоНДС = 0;
	СуммаВсегоБезНДС = 0;
	
	// ++ Галфинд ВолковЕВ 18.08.2023
	НомерСтроки = 0;
	// -- Галфинд ВолковЕВ 18.08.2023
	
	Для Каждого Стр Из Таб[0].Товары Цикл
		
		// ++ Галфинд ВолковЕВ 18.08.2023
		//ОбластьСтрокаКомплектующие.Параметры.ПредставлениеНоменклатуры = Таб[0].Товары[0].Номенклатура.Наименование;
		//ОбластьСтрокаКомплектующие.Параметры.Цена = Таб[0].Товары[0].Цена;
		//ОбластьСтрокаКомплектующие.Параметры.Количество = Таб[0].Товары[0].Количество;
		//ОбластьСтрокаКомплектующие.Параметры.СтавкаНДС = Таб[0].Товары[0].СтавкаНДС;
		//ОбластьСтрокаКомплектующие.Параметры.СуммаНДС = Таб[0].Товары[0].СуммаНДС;
		//ОбластьСтрокаКомплектующие.Параметры.СуммаСНДС = Таб[0].Товары[0].СуммаСНДС;
		//
		//СуммаБезНДС = (Таб[0].Товары[0].СуммаСНДС - Таб[0].Товары[0].СуммаНДС) * Таб[0].Товары[0].Количество; 
		//ОбластьСтрокаКомплектующие.Параметры.СуммаБезНДС = СуммаБезНДС;
		//СуммаВсегоБезНДС = СуммаВсегоБезНДС + СуммаБезНДС;
		//СуммаВсего = СуммаВсего + Таб[0].Товары[0].СуммаСНДС;
		//СуммаВсегоСНДС = СуммаВсегоСНДС + Таб[0].Товары[0].СуммаСНДС; 
		//СуммаВсегоНДС = СуммаВсегоНДС + Таб[0].Товары[0].СуммаНДС;
		
		НомерСтроки = НомерСтроки + 1;
		
		ОбластьСтрокаКомплектующие.Параметры.НомерСтроки 				= НомерСтроки;
		
		// ++ Галфинд_ДомнышеваКР_20_09_2023
		//ОбластьСтрокаКомплектующие.Параметры.НоменклатураКод 			= Стр.Номенклатура.Код; 
		//ОбластьСтрокаКомплектующие.Параметры.ПредставлениеНоменклатуры 	= Стр.Номенклатура.Наименование;
		ОбластьСтрокаКомплектующие.Параметры.НоменклатураКод 			= Стр.Номенклатура.Артикул + "/" + Стр.Характеристика;
		ОбластьСтрокаКомплектующие.Параметры.ПредставлениеНоменклатуры 	= Стр.Номенклатура.НаименованиеПолное;
		ОбластьСтрокаКомплектующие.Параметры.ЕдиницаИзмеренияКод 		= Стр.УпаковкаКод;
        ОбластьСтрокаКомплектующие.Параметры.ЕдиницаИзмеренияНаименование = Стр.УпаковкаНаименование;
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Номенклатура", Стр.Номенклатура);	
		ПараметрыПоиска.Вставить("Характеристика", Стр.Характеристика);
		МассивГТД = ВидыЗапасов.НайтиСтроки(ПараметрыПоиска);
		
		Если МассивГТД.Количество() > 0 Тогда
			ОбластьСтрокаКомплектующие.Параметры.СтранаПроисхожденияКод = МассивГТД[0].СтранаПроисхожденияКод;
			ОбластьСтрокаКомплектующие.Параметры.СтранаПроисхождения = МассивГТД[0].СтранаПроисхождения;
			ОбластьСтрокаКомплектующие.Параметры.НомерГТД = МассивГТД[0].НомерГТД;
		КонецЕсли;
		// -- Галфинд_ДомнышеваКР_20_09_2023
		
		ОбластьСтрокаКомплектующие.Параметры.Цена 						= Стр.Цена;
		ОбластьСтрокаКомплектующие.Параметры.Количество 				= Стр.Количество;
		ОбластьСтрокаКомплектующие.Параметры.СтавкаНДС 					= Стр.СтавкаНДС;
		ОбластьСтрокаКомплектующие.Параметры.СуммаНДС 					= Стр.СуммаНДС;
		ОбластьСтрокаКомплектующие.Параметры.СуммаСНДС 					= Стр.СуммаСНДС;
		
		// ++ Галфинд_ДомнышеваКР_20_09_2023
        // Так как суммы "СуммаНДС" и "СуммаСНДС" уже записаны в ТЧ в количественном эквиваленте, то умнажать на количество не нужно.
		//СуммаБезНДС 		= (Стр.СуммаСНДС - Стр.СуммаНДС) * Стр.Количество;
		СуммаБезНДС 		= (Стр.СуммаСНДС - Стр.СуммаНДС);
        // -- Галфинд_ДомнышеваКР_20_09_2023
		
		ОбластьСтрокаКомплектующие.Параметры.СуммаБезНДС 				= СуммаБезНДС;
		
		СуммаВсегоБезНДС 	= СуммаВсегоБезНДС + СуммаБезНДС;
		СуммаВсего 			= СуммаВсего + Стр.СуммаСНДС;
		СуммаВсегоСНДС 		= СуммаВсегоСНДС + Стр.СуммаСНДС; 
		СуммаВсегоНДС 		= СуммаВсегоНДС + Стр.СуммаНДС;
		// -- Галфинд ВолковЕВ 18.08.2023
		
		ТабличныйДокумент.Вывести(ОбластьСтрокаКомплектующие);
		
	КонецЦикла;
	
	ОбластьИтого.Параметры.ИтогоСуммаБезНДС = СуммаВсегоБезНДС;
	ОбластьИтого.Параметры.ИтогоСуммаНДС = СуммаВсегоНДС;
	ОбластьИтого.Параметры.ИтогоСуммаСНДС = СуммаВсего;
	ТабличныйДокумент.Вывести(ОбластьИтого);
	
	//ОбластьПодвал.Параметры.Номер = Таб[0].Номер;
	
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
	Возврат ТабличныйДокумент;
	
КонецФункции
// ЕсиповАВ
Функция СформироватьПечатнуюФормуУПДСвернутый(СтруктураТипов, ОбъектыПечати, ПараметрыПечати = Неопределено) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	МакетОбработки = ПолучитьМакет("ПФ_MXL_УПД_Свернутый");
	
	ТабличныйДокумент = СформироватьПечатнуюФормуУПД(СтруктураТипов, ОбъектыПечати, ПараметрыПечати);
		
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ЗаполнитьРеквизитыПодвалаУПД2_5(ОбластьПодвала, ОбластьПодвалаНакладной, ДанныеПечати, СведенияОбОрганизации, ДанныеКонтрагентов)
	
	ОбластьПодвалаНакладной.Параметры.Заполнить(ДанныеПечати);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ФИООтветственного", ДанныеПечати.Руководитель);
	Если СведенияОбОрганизации.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		СтруктураПараметров.Вставить("ФИОРуководителя", ДанныеПечати.Руководитель);
		СтруктураПараметров.Вставить("ФИОГлавногоБухгалтера", ДанныеПечати.ГлавныйБухгалтер);
	Иначе
		СтруктураПараметров.Вставить("ФИОПБОЮЛ", ДанныеПечати.Руководитель);
		СтруктураПараметров.Вставить("Свидетельство", СведенияОбОрганизации.Свидетельство);
	КонецЕсли;
	
	ОбластьПодвала.Параметры.Заполнить(СтруктураПараметров);
		
	СтруктураПараметров.Вставить("ФИОКладовщика", ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.Кладовщик, ДанныеПечати.Дата));
	СтруктураПараметров.Вставить("ДолжностьКладовщика", ДанныеПечати.ДолжностьКладовщика);
	СтруктураПараметров.Вставить("ДолжностьОтветственного", ДанныеПечати.ДолжностьРуководителя);
	
	ПолнаяДатаДокумента = СтрЗаменить(Формат(ДанныеПечати.Дата, "ДЛФ=DD"),НСтр("ru = 'г.';
																				|en = 'year'", Метаданные.Языки.Русский.КодЯзыка),"");
	ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
	ПозицияРазделителя = СтрНайти(ПолнаяДатаДокумента, " ");
	ПредставлениеДаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '""%1"" %2года';
			|en = '""%1"" %2'", Метаданные.Языки.Русский.КодЯзыка),
		Лев(ПолнаяДатаДокумента, ПозицияРазделителя -1),
		Прав(ПолнаяДатаДокумента, ДлинаСтроки - ПозицияРазделителя));
	
	СтруктураПараметров.Вставить("ДатаОтгрузкиПередачи", ПредставлениеДаты);
	
	ИННПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ИНН,", Ложь);
	Если ЗначениеЗаполнено(ДанныеПечати.КПППоставщика) Тогда
		ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН/КПП %2/%3';
																								|en = '%1, TIN/CRTR %2/%3'", Метаданные.Языки.Русский.КодЯзыка),
			СведенияОбОрганизации.ПолноеНаименование,
			ИННПоставщика,
			ДанныеПечати.КПППоставщика);
	ИначеЕсли ЗначениеЗаполнено(ИННПоставщика) Тогда
		ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН %2';
																								|en = '%1, TIN %2'", Метаданные.Языки.Русский.КодЯзыка),
			СведенияОбОрганизации.ПолноеНаименование,
			ИННПоставщика);
	Иначе
		ПредставлениеОрганизации = СведенияОбОрганизации.ПолноеНаименование;
	КонецЕсли;
	СтруктураПараметров.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
	
	ТаблицаКонтрагентов = ТаблицаКонтрагентовСчетаФактуры(ДанныеПечати, ДанныеКонтрагентов);
	ПредставлениеКонтрагента    = "";
	
	Для Каждого СтрокаТаблицы Из ТаблицаКонтрагентов Цикл
		СведенияОПокупателе = СтрокаТаблицы.СведенияОПокупателе;
		ПолноеНаименование = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование", Ложь);
		ИННПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ИНН", Ложь);
		Если Не ПустаяСтрока(СтрокаТаблицы.КПП) Тогда
			ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1; %2, ИНН/КПП %3/%4';
					|en = '%1; %2, TIN/CRTR %3/%4'", Метаданные.Языки.Русский.КодЯзыка),
				ПредставлениеКонтрагента,
				ПолноеНаименование,
				ИННПокупателя,
				СтрокаТаблицы.КПП);
		ИначеЕсли ЗначениеЗаполнено(ИННПокупателя) Тогда
			ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1; %2, ИНН %3';
					|en = '%1; %2, TIN %3'", Метаданные.Языки.Русский.КодЯзыка),
				ПредставлениеКонтрагента,
				ПолноеНаименование,
				ИННПокупателя);
		Иначе
			ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1; %2';
					|en = '%1; %2'"),
				ПредставлениеКонтрагента,
				ПолноеНаименование);
		КонецЕсли;
	
	КонецЦикла;
	СтруктураПараметров.Вставить("ПредставлениеКонтрагента", Сред(ПредставлениеКонтрагента, 3));
	
	Если ЗначениеЗаполнено(ДанныеПечати.ДоверенностьНомер) И ЗначениеЗаполнено(ДанныеПечати.ДоверенностьДата)
		И (ЗначениеЗаполнено(ДанныеПечати.ДоверенностьВыдана) Или ЗначениеЗаполнено(ДанныеПечати.ДоверенностьЛицо)) Тогда
		
		ТекстОснования = СокрЛП(ДанныеПечати.Основание) + "; "
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'по доверенности №%1 от %2, выданной %3 %4';
																			|en = 'against the letter of authority No. %1 from %2 issued by %3 to %4'", Метаданные.Языки.Русский.КодЯзыка),
				ДанныеПечати.ДоверенностьНомер,
				Формат(ДанныеПечати.ДоверенностьДата, "ДЛФ=DD"),
				ДанныеПечати.ДоверенностьВыдана,
				ДанныеПечати.ДоверенностьЛицо);
		СтруктураПараметров.Вставить("Основание", ТекстОснования);
		
	КонецЕсли;
	
	ОбластьПодвалаНакладной.Параметры.Заполнить(СтруктураПараметров);
	
КонецПроцедуры

Функция СформироватьПечатнуюФормуУПД(СтруктураТипов, ОбъектыПечати, ПараметрыПечати = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УПД";
	
	СтруктураТиповНаПечать               = Новый Структура;
	МассивСчетФактураВыданный            = Новый Массив; // Массив из ДокументСсылка
	МассивСчетФактураКомиссионеру        = Новый Массив; // Массив из ДокументСсылка
	МассивСчетФактураПолученный          = Новый Массив;
	ОснованияНаРеализацию                = Новый Массив;
	ОснованияКомиссионеру                = Новый Массив;
	ОснованияСчетФактураПолученный       = Новый Массив;
	ДокументыБезВыданногоСчетаФактуры    = Новый Массив; // Массив из ДокументСсылка
	ДокументыБезСчетаФактурыКомиссионеру = Новый Массив;
	ДокументыБезПолученногоСчетаФактуры  = Новый Массив; // Массив из ДокументСсылка
	ОснованияОтчетовНаЗакупкуТовары      = Новый Массив;
	
	Если ПараметрыПечати = Неопределено Тогда
		ПараметрыПечати = Новый Структура;
	КонецЕсли;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		ИмяОбъекта = Сред(СтруктураОбъектов.Ключ, 10);
		
		Если ИмяОбъекта = "ОтчетКомитентуОСписании" Или ИмяОбъекта = "ОтчетКомиссионераОСписании" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИмяОбъекта = "СчетФактураВыданный" Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураВыданный, СтруктураОбъектов.Значение);
			
		ИначеЕсли ИмяОбъекта = "СчетФактураКомиссионеру" Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураКомиссионеру, СтруктураОбъектов.Значение);
			
		ИначеЕсли ИмяОбъекта = "ОтчетКомиссионера" Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияКомиссионеру, СтруктураОбъектов.Значение);
			
		ИначеЕсли ИмяОбъекта = "ОтчетКомитентуОЗакупках"
			И Не ПараметрыПечати = Неопределено И ПараметрыПечати.Свойство("ВыводитьТовары") И ПараметрыПечати.ВыводитьТовары Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияОтчетовНаЗакупкуТовары, СтруктураОбъектов.Значение);
			
		ИначеЕсли ИмяОбъекта = "ОтчетКомитенту"
			И Не ПараметрыПечати = Неопределено И ПараметрыПечати.Свойство("ВыводитьТовары") И ПараметрыПечати.ВыводитьТовары Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДокументыБезВыданногоСчетаФактуры, СтруктураОбъектов.Значение);
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияНаРеализацию, СтруктураОбъектов.Значение);
			
		КонецЕсли;
		
		Если ПараметрыПечати.Свойство("ДополнитьПолученнымиСчетамиФактуры")
				И ПараметрыПечати.ДополнитьПолученнымиСчетамиФактуры Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияСчетФактураПолученный, СтруктураОбъектов.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОснованияНаРеализацию.Количество() > 0 Тогда
		
		РезультатАнализа = Документы.СчетФактураВыданный.ПолучитьСчетаФактурыНаПечать(ОснованияНаРеализацию);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураВыданный, РезультатАнализа.СчетаФактурыНаПечать, Истина);
		
		Для Каждого СтрокаТаблицыОшибок Из РезультатАнализа.ТаблицаОшибок Цикл
			Если СтрокаТаблицыОшибок.НеВыставленСчетФактура Тогда
				ДокументыБезВыданногоСчетаФактуры.Добавить(СтрокаТаблицыОшибок.ДокументОснование);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОснованияОтчетовНаЗакупкуТовары.Количество() > 0 Тогда
		
		РезультатАнализа = Документы.СчетФактураВыданный.ПолучитьСчетаФактурыНаПечать(ОснованияОтчетовНаЗакупкуТовары,,,Истина);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураВыданный, РезультатАнализа.СчетаФактурыНаПечать, Истина);
		
		Для Каждого СтрокаТаблицыОшибок Из РезультатАнализа.ТаблицаОшибок Цикл
			Если СтрокаТаблицыОшибок.НеВыставленСчетФактура Тогда
				ДокументыБезВыданногоСчетаФактуры.Добавить(СтрокаТаблицыОшибок.ДокументОснование);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОснованияКомиссионеру.Количество() > 0 Тогда
		
		РезультатАнализа = Документы.СчетФактураКомиссионеру.ПолучитьСчетаФактурыНаПечать(ОснованияКомиссионеру);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураКомиссионеру, РезультатАнализа.СчетаФактурыНаПечать, Истина);
		
		Для Каждого СтрокаТаблицыОшибок Из РезультатАнализа.ТаблицаОшибок Цикл
			Если СтрокаТаблицыОшибок.НеВыставленСчетФактура Тогда
				ДокументыБезВыданногоСчетаФактуры.Добавить(СтрокаТаблицыОшибок.ДокументОснование);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОснованияСчетФактураПолученный.Количество() > 0 Тогда
		
		РезультатАнализа = Документы.СчетФактураПолученный.ПолучитьСчетаФактурыНаПечать(ОснованияСчетФактураПолученный);
		
		ПараметрыПечати.Вставить("МассивСчетФактураПолученный", РезультатАнализа.СчетаФактурыНаПечать);
		
		Для Каждого СтрокаТаблицыОшибок Из РезультатАнализа.ТаблицаОшибок Цикл
			Если СтрокаТаблицыОшибок.НеВыставленСчетФактура Тогда
				ДокументыБезПолученногоСчетаФактуры.Добавить(СтрокаТаблицыОшибок.ДокументОснование);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивСчетФактураВыданный.Количество() > 0 Тогда
		СтруктураТиповНаПечать.Вставить("СчетФактураВыданный", МассивСчетФактураВыданный);
	КонецЕсли;
	
	Если МассивСчетФактураКомиссионеру.Количество() > 0 Тогда
		СтруктураТиповНаПечать.Вставить("СчетФактураКомиссионеру", МассивСчетФактураКомиссионеру);
	КонецЕсли;
	
	Для Каждого Документ Из ДокументыБезВыданногоСчетаФактуры Цикл
		
		ИмяОбъекта = Документ.Метаданные().Имя;
		Если СтруктураТиповНаПечать.Свойство(ИмяОбъекта) Тогда
			МассивДокументовДляСтруктуры = СтруктураТиповНаПечать[ИмяОбъекта]; // Массив из ДокументСсылка
			МассивДокументовДляСтруктуры.Добавить(Документ);
		Иначе
			МассивДокументовТипа = Новый Массив;
			МассивДокументовТипа.Добавить(Документ);
			СтруктураТиповНаПечать.Вставить(ИмяОбъекта, МассивДокументовТипа);
		КонецЕсли;
		
	КонецЦикла;
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТиповНаПечать Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		МенеджерОбъекта = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(СтруктураОбъектов.Ключ);
		Если МенеджерОбъекта = Неопределено Тогда
			МенеджерОбъекта = Документы[СтруктураОбъектов.Ключ];
		КонецЕсли;
		ПараметрыПечати.Вставить("НеВыводитьУПДПосредника", Истина);
		
		ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыУПД(ПараметрыПечати, СтруктураОбъектов.Значение);
		
		Если ДанныеДляПечати <> Неопределено Тогда
			ЗаполнитьТабличныйДокументУПД(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, СтруктураТипов);
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураТиповНаПечать.Очистить();
	Для Каждого Документ Из ДокументыБезПолученногоСчетаФактуры Цикл
		
		ИмяОбъекта = Документ.Метаданные().Имя;
		Если СтруктураТиповНаПечать.Свойство(ИмяОбъекта) Тогда
			МассивДокументовДляСтруктуры = СтруктураТиповНаПечать[ИмяОбъекта]; // Массив из ДокументСсылка
			МассивДокументовДляСтруктуры.Добавить(Документ);
		Иначе
			МассивДокументовТипа = Новый Массив;
			МассивДокументовТипа.Добавить(Документ);
			СтруктураТиповНаПечать.Вставить(ИмяОбъекта, МассивДокументовТипа);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтруктураОбъектов Из СтруктураТиповНаПечать Цикл
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		МенеджерОбъекта = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(СтруктураОбъектов.Ключ);
		Если МенеджерОбъекта = Неопределено Тогда
			МенеджерОбъекта = Документы[СтруктураОбъектов.Ключ];
		КонецЕсли;
		
		ПараметрыПечати.Вставить("НеВыводитьУПДПосредника", Ложь);
		ПараметрыПечати.Вставить("НеВыводитьОсновнойУПД", Истина);
		
		ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыУПД(ПараметрыПечати, СтруктураОбъектов.Значение);
		
		ЗаполнитьТабличныйДокументУПД(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, СтруктураТипов);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ЗаполнитьРеквизитыШапкиУПД(ДанныеПечати, СведенияОПоставщике, ДанныеКонтрагентов, ОбластьМакета, ДанныеПоставщиков, ОпцииПечати)
	
	СведенияОГрузоотправителе = СведенияОГрузоотправителе(ДанныеПечати);
	ВыводитьДанныеПоставщика = Не (ДанныеПечати.СтатусУПД = 2 И ДанныеПечати.ЭтоПередачаНаКомиссию);
	ВыводитьДанныеПокупателя = Не (ДанныеПечати.СтатусУПД = 2 И ДанныеПечати.ЭтоПередачаНаКомиссию);
	
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	
	ПараметрыШапки = Новый Структура;
	
	Если ОпцииПечати.НомерСформированВСчетеФактуре Тогда
		ПараметрыШапки.Вставить("Номер", ДанныеПечати.Номер);
	Иначе
		ПараметрыШапки.Вставить("Номер", НомерСчетаФактурыНаПечать(ДанныеПечати.Номер, ДанныеПечати.ИндексПодразделения));
	КонецЕсли;
	
	ПараметрыШапки.Вставить("Дата", Формат(ДанныеПечати.Дата, "ДЛФ=ДД"));
	ПараметрыШапки.Вставить("НомерИсправления", ?(ДанныеПечати.Исправление, ДанныеПечати.НомерИсправления, "--"));
	ПараметрыШапки.Вставить("ДатаИсправления",
		?(ДанныеПечати.Исправление, Формат(ДанныеПечати.ДатаИсправления, "ДЛФ=ДД"), "--"));
	
	// Выводим данные о поставщике.
	
	Если ДанныеПоставщиков = Неопределено Тогда
		
		ПредставлениеПоставщика = "--";
		ПредставлениеАдресПоставщика = "--";
		ПредставлениеИННПоставщика = "--";
		
		Если ВыводитьДанныеПоставщика Тогда
			ПредставлениеПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1';
					|en = '%1'"),
				СведенияОПоставщике.ПолноеНаименование);
			
			ПредставлениеАдресПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1';
					|en = '%1'"),
				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес"));
			
			ПредставлениеИННПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1%2';
					|en = '%1%2'"),
				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН", Ложь),
				?(Не ПустаяСтрока(ДанныеПечати.КПППоставщика), "/" + ДанныеПечати.КПППоставщика, ""));
		КонецЕсли;
			
		// Выводим данные грузоотправителя.
		ТекстГрузоотправителя = "";
		Если ДанныеПечати.ТолькоУслуги ИЛИ ДанныеПечати.Грузоотправитель = Неопределено Тогда
			ТекстГрузоотправителя = "--";
		ИначеЕсли ВыводитьДанныеПоставщика
			И (ДанныеПечати.Организация = ДанныеПечати.Грузоотправитель
				ИЛИ ТипЗнч(ДанныеПечати.Грузоотправитель) = Тип("СправочникСсылка.РегистрацииВНалоговомОргане")
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеПечати.Организация, "КПП") = 
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеПечати.Грузоотправитель, "КПП")) Тогда
			ТекстГрузоотправителя = НСтр("ru = 'он же';
										|en = 'same'", Метаданные.Языки.Русский.КодЯзыка);
		Иначе
			ТекстГрузоотправителя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
				СведенияОГрузоотправителе, "ПолноеНаименование,ФактическийАдрес");
		КонецЕсли;
		
		ПредставлениеГрузоотправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1';
				|en = '%1'"),
			ТекстГрузоотправителя);
	
	Иначе
	
		ПредставлениеПоставщика       = "";
		ПредставлениеАдресПоставщика = "";
		ПредставлениеИННПоставщика = "";
		ПредставлениеГрузоотправителя  = "";

		ЕстьГрузоотправитель = НЕ ДанныеПечати.ТолькоУслуги;
		
		ТаблицаПоставщиков = ТаблицаПоставщиковСчетаФактуры(ДанныеПечати, ДанныеПоставщиков);
		Для Каждого СтрокаТаблицы Из ТаблицаПоставщиков Цикл
			
			Если ВыводитьДанныеПоставщика Тогда
				СведенияОПоставщикеВрем = СтрокаТаблицы.СведенияОПоставщике;
				
				ПредставлениеПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1; %2';
						|en = '%1; %2'"),
					ПредставлениеПоставщика,
					ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщикеВрем, "ПолноеНаименование", Ложь));
				
				ПредставлениеАдресПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1; %2';
						|en = '%1; %2'"),
					ПредставлениеАдресПоставщика,
					ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщикеВрем, "ЮридическийАдрес", Ложь));
					
				ПредставлениеИННПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1; %2%3';
						|en = '%1; %2%3'"),
					ПредставлениеИННПоставщика,
					СтрокаТаблицы.ИНН,
					?(Не ПустаяСтрока(СтрокаТаблицы.КПП), "/" + СтрокаТаблицы.КПП, ""));
			КонецЕсли;
				
			Если ЕстьГрузоотправитель Тогда
				СведенияОГрузоотправителе = СтрокаТаблицы.СведенияОГрузоотправителе;
				ПредставлениеГрузоотправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1; %2';
					|en = '%1; %2'"),
				ПредставлениеГрузоотправителя,
				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправителе, "ПолноеНаименование,ФактическийАдрес", Ложь));
			КонецЕсли;
			
		КонецЦикла;
		
		ПредставлениеПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1';
				|en = '%1'"),
			?(ВыводитьДанныеПоставщика, Сред(ПредставлениеПоставщика, 3), "--"));
		
		ПредставлениеАдресПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1';
				|en = '%1'"),
			?(ВыводитьДанныеПоставщика, Сред(ПредставлениеАдресПоставщика, 3), "--"));
		
		ПредставлениеИННПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1';
				|en = '%1'"),
			?(ВыводитьДанныеПоставщика, Сред(ПредставлениеИННПоставщика, 3), "--"));
			
		ПредставлениеГрузоотправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1';
				|en = '%1'"),
			?(ЕстьГрузоотправитель, Сред(ПредставлениеГрузоотправителя, 3), "--"));
			
	КонецЕсли;
	
	ПараметрыШапки.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
	ПараметрыШапки.Вставить("АдресПоставщика", ПредставлениеАдресПоставщика);
	ПараметрыШапки.Вставить("ИННПоставщика", ПредставлениеИННПоставщика);
	ПараметрыШапки.Вставить("ПредставлениеГрузоотправителя", ПредставлениеГрузоотправителя);
	
	// Выводим данные грузополучателя и покупателя.
	ТекстГрузополучателя = "--";
	
	ПредставлениеГрузополучателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1';
			|en = '%1'"),
		ТекстГрузополучателя);
	СтрокаПоДокументу = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1';
			|en = '%1'"),
		?(ПустаяСтрока(ДанныеПечати.СтрокаПоДокументу),
			НСтр("ru = '-- от --';
				|en = '-- dated --'", Метаданные.Языки.Русский.КодЯзыка),
			ДанныеПечати.СтрокаПоДокументу));
	
	ПараметрыШапки.Вставить("ПоДокументу", СтрокаПоДокументу);
	
	ЕстьГрузополучатель = Не ДанныеПечати.ТолькоУслуги;
	
	ТаблицаКонтрагентов = ТаблицаКонтрагентовСчетаФактуры(ДанныеПечати, ДанныеКонтрагентов);
	
	ПредставлениеПокупателя       = "";
	ПредставлениеАдресаПокупателя = "";
	ПредставлениеИННПокупателя    = "";
	ПредставлениеГрузополучателя  = "";
	
	Для Каждого СтрокаТаблицы Из ТаблицаКонтрагентов Цикл
		
		Если ВыводитьДанныеПокупателя Тогда
			СведенияОПокупателе = СтрокаТаблицы.СведенияОПокупателе;
			
			ПредставлениеПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1; %2';
					|en = '%1; %2'"),
				ПредставлениеПокупателя,
				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование", Ложь));
			
			ПредставлениеАдресаПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1; %2';
					|en = '%1; %2'"),
				ПредставлениеАдресаПокупателя,
				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес", Ложь));
				
			ПредставлениеИННПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1; %2%3';
					|en = '%1; %2%3'"),
				ПредставлениеИННПокупателя,
				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ИНН", Ложь),
				?(Не ПустаяСтрока(СтрокаТаблицы.КПП), "/" + СтрокаТаблицы.КПП, ""));
		КонецЕсли;
		
		Если ЕстьГрузополучатель Тогда
			СведенияОГрузополучателе = СтрокаТаблицы.СведенияОГрузополучателе;
			ПредставлениеГрузополучателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1; %2';
					|en = '%1; %2'"),
				ПредставлениеГрузополучателя,
				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ФактическийАдрес", Ложь));
		КонецЕсли;
		
	КонецЦикла;
	
	ПредставлениеПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1';
			|en = '%1'"),
		?(ВыводитьДанныеПокупателя, Сред(ПредставлениеПокупателя, 3), "--"));
	
	ПредставлениеАдресаПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1';
			|en = '%1'"),
		?(ВыводитьДанныеПокупателя, Сред(ПредставлениеАдресаПокупателя, 3), "--"));
	
	ПредставлениеИННПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1';
			|en = '%1'"),
		?(ВыводитьДанныеПокупателя, Сред(ПредставлениеИННПокупателя, 3), "--"));
		
	ПредставлениеГрузополучателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1';
			|en = '%1'"),
		?(ЕстьГрузополучатель, Сред(ПредставлениеГрузополучателя, 3), "--"));
		
	ПараметрыШапки.Вставить("ПредставлениеПокупателя", ПредставлениеПокупателя);
	ПараметрыШапки.Вставить("АдресПокупателя", ПредставлениеАдресаПокупателя);
	ПараметрыШапки.Вставить("ИННПокупателя", ПредставлениеИННПокупателя);
	ПараметрыШапки.Вставить("ПредставлениеГрузополучателя", ПредставлениеГрузополучателя);
	ПараметрыШапки.Вставить("Валюта", НСтр("ru = 'Российский рубль, 643';
											|en = 'Russian ruble, 643'", Метаданные.Языки.Русский.КодЯзыка));
	
	СтруктураПараметровИдентификаторГосКонтракта = Новый Структура("ИдентификаторГосКонтракта");
	ЗаполнитьЗначенияСвойств(СтруктураПараметровИдентификаторГосКонтракта, ДанныеПечати);
	Если ДействуетПостановление981(ДанныеПечати.Дата,ДанныеПечати.ДатаИсправления) Тогда
		ПредставлениеИдентификаторГосКонтракта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1';
				|en = '%1'"),
			СокрЛП(СтруктураПараметровИдентификаторГосКонтракта.ИдентификаторГосКонтракта));
	Иначе
		ПредставлениеИдентификаторГосКонтракта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1';
				|en = '%1'"),
			СокрЛП(СтруктураПараметровИдентификаторГосКонтракта.ИдентификаторГосКонтракта));
	КонецЕсли;
	ПараметрыШапки.Вставить("ИдентификаторГосКонтракта", ПредставлениеИдентификаторГосКонтракта);
	
	ОбластьМакета.Параметры.Заполнить(ПараметрыШапки);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПодвалаУПД(ОбластьПодвала, ДанныеПечати, СведенияОбОрганизации, ДанныеКонтрагентов)
	
	ОбластьПодвала.Параметры.Заполнить(ДанныеПечати);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ФИОРуководителя", ДанныеПечати.Руководитель);
	Если СведенияОбОрганизации.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		СтруктураПараметров.Вставить("ФИОРуководителяОрганизации", ДанныеПечати.Руководитель);
		СтруктураПараметров.Вставить("ФИОГлавногоБухгалтера", ДанныеПечати.ГлавныйБухгалтер);
	Иначе
		СтруктураПараметров.Вставить("ФИОПБОЮЛ", ДанныеПечати.Руководитель);
		СтруктураПараметров.Вставить("Свидетельство", СведенияОбОрганизации.Свидетельство);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ФИОКладовщика", ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.Кладовщик, ДанныеПечати.Дата));
	СтруктураПараметров.Вставить("ДолжностьКладовщика", ДанныеПечати.ДолжностьКладовщика);
	
	ПолнаяДатаДокумента = СтрЗаменить(Формат(ДанныеПечати.Дата, "ДЛФ=DD"),НСтр("ru = 'г.';
																				|en = 'year'", Метаданные.Языки.Русский.КодЯзыка),"");
	ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
	ПозицияРазделителя = СтрНайти(ПолнаяДатаДокумента, " ");
	ПредставлениеДаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '""%1"" %2года';
			|en = '""%1"" %2'", Метаданные.Языки.Русский.КодЯзыка),
		Лев(ПолнаяДатаДокумента, ПозицияРазделителя -1),
		Прав(ПолнаяДатаДокумента, ДлинаСтроки - ПозицияРазделителя));
	
	СтруктураПараметров.Вставить("ДатаДокумента", ПредставлениеДаты);
	
	ИННПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ИНН,", Ложь);
	Если ЗначениеЗаполнено(ДанныеПечати.КПППоставщика) Тогда
		ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН/КПП %2/%3';
																								|en = '%1, TIN/CRTR %2/%3'", Метаданные.Языки.Русский.КодЯзыка),
			СведенияОбОрганизации.ПолноеНаименование,
			ИННПоставщика,
			ДанныеПечати.КПППоставщика);
	ИначеЕсли ЗначениеЗаполнено(ИННПоставщика) Тогда
		ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН %2';
																								|en = '%1, TIN %2'", Метаданные.Языки.Русский.КодЯзыка),
			СведенияОбОрганизации.ПолноеНаименование,
			ИННПоставщика);
	Иначе
		ПредставлениеОрганизации = СведенияОбОрганизации.ПолноеНаименование;
	КонецЕсли;
	СтруктураПараметров.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
	
	ТаблицаКонтрагентов = ТаблицаКонтрагентовСчетаФактуры(ДанныеПечати, ДанныеКонтрагентов);
	ПредставлениеКонтрагента    = "";
	
	Для Каждого СтрокаТаблицы Из ТаблицаКонтрагентов Цикл
		СведенияОПокупателе = СтрокаТаблицы.СведенияОПокупателе;
		ПолноеНаименование = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование", Ложь);
		ИННПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ИНН", Ложь);
		Если Не ПустаяСтрока(СтрокаТаблицы.КПП) Тогда
			ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1; %2, ИНН/КПП %3/%4';
					|en = '%1; %2, TIN/CRTR %3/%4'", Метаданные.Языки.Русский.КодЯзыка),
				ПредставлениеКонтрагента,
				ПолноеНаименование,
				ИННПокупателя,
				СтрокаТаблицы.КПП);
		ИначеЕсли ЗначениеЗаполнено(ИННПокупателя) Тогда
			ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1; %2, ИНН %3';
					|en = '%1; %2, TIN %3'", Метаданные.Языки.Русский.КодЯзыка),
				ПредставлениеКонтрагента,
				ПолноеНаименование,
				ИННПокупателя);
		Иначе
			ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1; %2';
					|en = '%1; %2'"),
				ПредставлениеКонтрагента,
				ПолноеНаименование);
		КонецЕсли;
	
	КонецЦикла;
	СтруктураПараметров.Вставить("ПредставлениеКонтрагента", Сред(ПредставлениеКонтрагента, 3));
	
	Если ЗначениеЗаполнено(ДанныеПечати.ДоверенностьНомер) И ЗначениеЗаполнено(ДанныеПечати.ДоверенностьДата)
		И (ЗначениеЗаполнено(ДанныеПечати.ДоверенностьВыдана) Или ЗначениеЗаполнено(ДанныеПечати.ДоверенностьЛицо)) Тогда
		
		ТекстОснования = СокрЛП(ДанныеПечати.Основание) + "; "
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'по доверенности №%1 от %2, выданной %3 %4';
																			|en = 'against the letter of authority No. %1 from %2 issued by %3 to %4'", Метаданные.Языки.Русский.КодЯзыка),
				ДанныеПечати.ДоверенностьНомер,
				Формат(ДанныеПечати.ДоверенностьДата, "ДЛФ=DD"),
				ДанныеПечати.ДоверенностьВыдана,
				ДанныеПечати.ДоверенностьЛицо);
		СтруктураПараметров.Вставить("Основание", ТекстОснования);
		
	КонецЕсли;
	
	ОбластьПодвала.Параметры.Заполнить(СтруктураПараметров);
	
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументУПД(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, СтруктураТипов) Экспорт
	
	ВыводитьСерии = Константы.ВыводитьСерииВПечатныхФормах.Получить() 
					И ДанныеДляПечати.РезультатПоТабличнойЧасти.Колонки.Найти("СерияНаименование") <> Неопределено;
	ИспользоватьПечатныеФормыСФ2_5 = Ложь;
	
	МакетУПД = УправлениеПечатью.МакетПечатнойФормы("Обработка.гф_УПДЧерновик.ПФ_MXL_УПД_Свернутый");
	МакетУПД_625 = УправлениеПечатью.МакетПечатнойФормы("Обработка.гф_УПДЧерновик.ПФ_MXL_УПД_Свернутый");
	МакетУПД_981 = УправлениеПечатью.МакетПечатнойФормы("Обработка.гф_УПДЧерновик.ПФ_MXL_УПД_Свернутый");
	МакетУПД_534 = УправлениеПечатью.МакетПечатнойФормы(
						"Обработка.гф_УПДЧерновик.ПФ_MXL_УПД_Свернутый");
	МакетУПД_534_2_5 = УправлениеПечатью.МакетПечатнойФормы(
						"Обработка.гф_УПДЧерновик.ПФ_MXL_УПД_Свернутый");
	МакетУПД_534Прослеж_2_5 = УправлениеПечатью.МакетПечатнойФормы(
						"Обработка.гф_УПДЧерновик.ПФ_MXL_УПД_Свернутый");
	
	ОпцииПечати = Новый Структура;
	ОпцииПечати.Вставить("НомерСформированВСчетеФактуре", ДанныеДляПечати.Свойство("НомерСформированВСчетеФактуре"));
	ОпцииПечати.Вставить("ИспользоватьПечатныеФормыСФ2_5", ИспользоватьПечатныеФормыСФ2_5);
	
	ДанныеПечати        = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ДанныеДляПечати.Свойство("РезультатПоКонтрагентам") Тогда
		ВыборкаКонтрагентов = ДанныеДляПечати.РезультатПоКонтрагентам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Иначе
		ВыборкаКонтрагентов = Неопределено;
	КонецЕсли;
	Если ДанныеДляПечати.Свойство("РезультатПоИсходнымДанным") Тогда
		ВыборкаОснований = ДанныеДляПечати.РезультатПоИсходнымДанным.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Иначе
		ВыборкаОснований = Неопределено;
	КонецЕсли;
	ПрослеживаемыеТовары = Неопределено;
	ЕстьПрослеживаемыеТоварыВТабличнойЧасти = Ложь;
	Если ДанныеДляПечати.Свойство("Прослеживаемость") Тогда
		ПрослеживаемыеТовары = ДанныеДляПечати.Прослеживаемость.Выгрузить();
		Если ПрослеживаемыеТовары.Количество() > 0 Тогда
			ЕстьПрослеживаемыеТоварыВТабличнойЧасти = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьПостановление534 = ЛОЖЬ;
	ЕстьПостановление981 = ЛОЖЬ;
	ЕстьПостановление1137_625 = ЛОЖЬ;
	ЕстьПостановление1137 = ЛОЖЬ;
	
	ПервыйДокумент = Истина;
	Пока ДанныеПечати.Следующий() Цикл
		
		Если ДанныеПечати.СтатусУПД = 2
			И ЗначениеЗаполнено(ДанныеПечати.НалогообложениеНДС)
			И ДанныеПечати.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС
			И НЕ ДанныеПечати.ЭтоПередачаНаКомиссию
			И ДанныеПечати.ТребуетсяНаличиеСФ Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для документа %1 не введен %2';
					|en = '%2 is not entered for document %1'"),
				ДанныеПечати.Ссылка,
				ДанныеПечати.ПредставлениеДокумента);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка,
				,
				"ТекстСчетФактура");
				
			Продолжить;
		КонецЕсли;
		
		Если ДействуетПостановление534(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления) Тогда
			ИспользоватьПечатныеФормыСФ2_5 = ПолучитьФункциональнуюОпцию("ИспользоватьПечатныеФормыСФ2_5");
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				ОпцииПечати.ИспользоватьПечатныеФормыСФ2_5 = ИспользоватьПечатныеФормыСФ2_5;
				Макет = ?(ЗначениеЗаполнено(ДанныеПечати.ЕстьПрослеживаемыеТовары) И ДанныеПечати.ЕстьПрослеживаемыеТовары Или ЕстьПрослеживаемыеТоварыВТабличнойЧасти, МакетУПД_534Прослеж_2_5, МакетУПД_534_2_5);
			Иначе
				Макет = МакетУПД_534;
			КонецЕсли;
			ЕстьПостановление534 = Истина;
		ИначеЕсли ДействуетПостановление981(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления) Тогда
			Макет = МакетУПД_981;
			ЕстьПостановление981 = Истина;
		ИначеЕсли ВедетсяУчетНДСПоФЗ56(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления) Тогда
			Макет = МакетУПД_625;
			ЕстьПостановление1137_625 = Истина;
		Иначе
			Макет = МакетУПД;
			ЕстьПостановление1137 = Истина;
		КонецЕсли;
		Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
		
		Если ЕстьПостановление1137_625 И ЕстьПостановление1137 Тогда
			
			Текст = НСтр("ru = 'Недоступна одновременная печать универсальных передаточных документов,
				|сформированных до и после начала применения постановления Правительства РФ №625 от 25 мая 2017 г.';
				|en = 'Cannot print universal transfer documents
				|generated both before and after the commencement date of RF Government decree No.625 dated 05/25/2017 at the same time'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
			
			ТабличныйДокумент.Очистить();
			Прервать;
			
		КонецЕсли;
		
		Если (ЕстьПостановление1137_625 ИЛИ ЕстьПостановление1137) И ЕстьПостановление981 Тогда
			
			Текст = НСтр("ru = 'Недоступна одновременная печать универсальных передаточных документов,
				|сформированных до и после начала применения постановления Правительства РФ №981 от 19 августа 2017 г.';
				|en = 'Cannot print universal transfer documents
				|generated both before and after the commencement date of RF Government decree No.981 dated 08/19/2017 at the same time'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
			
			ТабличныйДокумент.Очистить();
			Прервать;
			
		ИначеЕсли (ЕстьПостановление1137_625 Или ЕстьПостановление1137 Или ЕстьПостановление981)
				И ЕстьПостановление534 Тогда
			
			ТекстСообщения = НСтр("ru = 'Недоступна одновременная печать универсальных передаточных документов,
			|сформированных до и после начала применения постановления Правительства РФ №534 от 2 апреля 2021 г.';
			|en = 'Cannot simultaneously print universal transfer documents
			|generated before and after the commencement date of RF Government decree No.534 dated 04/02/2021'");
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДанныеПечати.Ссылка);
			
			ТабличныйДокумент.Очистить();
			Прервать;
			
		КонецЕсли;
		
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если ДанныеДляПечати.Свойство("РезультатПоПоставщикам")
			И ДанныеПечати.ПеревыставленныйСчетФактура Тогда
			ВыборкаПоставщиков = ДанныеДляПечати.РезультатПоПоставщикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		КонецЕсли;
		
			
		// Выводим общие реквизиты шапки
		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьШапка,
			ДанныеПечати.Ссылка);
		
		ЗаполнитьРеквизитыШапкиУПД(ДанныеПечати, СведенияОбОрганизации, ВыборкаКонтрагентов, ОбластьШапка, ВыборкаПоставщиков, ОпцииПечати);
		
		НомерСтраницы = 1;
		
		// Инициализация итогов в документе
		Если ИспользоватьПечатныеФормыСФ2_5 Тогда
			ИтоговыеСуммы = СтруктураИтоговыеСуммы2_5();
		Иначе
			ИтоговыеСуммы = СтруктураИтоговыеСуммы();
		КонецЕсли;
		
		// Создаем массив для проверки вывода
		МассивВыводимыхОбластей = Новый Массив;
		
		// Выводим многострочную часть документа
		ОбластьСтрокаСтандарт = Макет.ПолучитьОбласть("Строка");
		ОбластьИтого = Макет.ПолучитьОбласть("Итого");
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		Если ИспользоватьПечатныеФормыСФ2_5 Тогда
			ОбластьПодвалНакладной = Макет.ПолучитьОбласть("ПодвалНакладной");
		КонецЕсли;
		
		Если ИспользоватьПечатныеФормыСФ2_5 Тогда
			ЗаполнитьРеквизитыПодвалаУПД2_5(ОбластьПодвал, ОбластьПодвалНакладной, ДанныеПечати, СведенияОбОрганизации, ВыборкаКонтрагентов);
		Иначе
			ЗаполнитьРеквизитыПодвалаУПД(ОбластьПодвал, ДанныеПечати, СведенияОбОрганизации, ВыборкаКонтрагентов);
		КонецЕсли;
		
		Если ДанныеДляПечати.РезультатПоШапке.Колонки.Найти("ВыводитьКодНоменклатуры") <> Неопределено Тогда
			ВыводитьКодНоменклатуры = ДанныеПечати.ВыводитьКодНоменклатуры;
		Иначе
			ВыводитьКодНоменклатуры = Истина;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
			
		ИспользоватьНаборы = Ложь;
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ВыборкаПоДокументам, "ЭтоНабор") Тогда
			ИспользоватьНаборы = Истина;
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				ОбластьСтрокаНабор         = Макет.ПолучитьОбласть("Строка");
				ОбластьСтрокаКомплектующие = Макет.ПолучитьОбласть("Строка");
			Иначе
				ОбластьСтрокаНабор         = Макет.ПолучитьОбласть("СтрокаНабор");
				ОбластьСтрокаКомплектующие = Макет.ПолучитьОбласть("СтрокаКомплектующие");
			КонецЕсли;
		КонецЕсли;
		
		ВыводитьКодыТНВЭД = ВыводитьКодыТНВЭД(ДанныеПечати, ЕстьПостановление981 Или ЕстьПостановление534);
		
		ОперацияОблагаетсяНДСУПокупателя = Ложь;
		Если ДанныеПечати.СтатусУПД = 1
		И ДанныеПечати.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя Тогда
			ОперацияОблагаетсяНДСУПокупателя = Истина;
		КонецЕсли;
		
		СтрокаТовары = ВыборкаПоДокументам.Выбрать();
		КоличествоСтрок = 0;
		Пока СтрокаТовары.Следующий() Цикл
			Если Не НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) Тогда
				КоличествоСтрок = КоличествоСтрок + 1;
			КонецЕсли;
		КонецЦикла;
		СтрокаТовары.Сбросить();
		
		Если ЕстьПостановление534 Тогда
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				ОбластьШапка.Параметры.ДокументыОбОтгрузке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '№ п/п %1 № %2 от %3';
							|en = 'Item No. %1 # %2 of %3'"),
						?(КоличествоСтрок = 1, "1" , "1-" + Формат(КоличествоСтрок, "ЧГ=0")),
						ОбластьШапка.Параметры.Номер,
						ОбластьШапка.Параметры.Дата);
			Иначе
				ОбластьШапка.Параметры.ПоДокументуОтгрузки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '№ п/п %1 № %2 от %3';
							|en = 'Item No. %1 # %2 of %3'"),
						?(КоличествоСтрок = 1, "1" , "1-" + Формат(КоличествоСтрок, "ЧГ=0")),
						ОбластьШапка.Параметры.Номер,
						ОбластьШапка.Параметры.Дата);
			КонецЕсли;
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		// Выводим заголовок таблицы
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
		
		ТолькоСтавкаБезНДС = Истина;
		НомерСтроки = 0; 
		
		МассивДок = Новый Массив;
		
		Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивДок, СтруктураОбъектов.Значение);
			
		КонецЦикла;
		
		ПервичныеДокументыВКоробах = УправлениеСвойствами.ЗначениеСвойства(МассивДок[0].Ссылка.Договор, 
		"гф_ДоговорыКонтрагентовПервичныеДокументыВКоробах");
		
		Если ПервичныеДокументыВКоробах = Неопределено Тогда 
			ПервичныеДокументыВКоробах = Ложь;
		КонецЕсли;	
		
		СтрутураИтого = Новый Структура;
		
		Если ПервичныеДокументыВКоробах Тогда
			
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			
			"ВЫБРАТЬ
               |	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
               |	РеализацияТоваровУслуг.Товары.(
               |		Ссылка КАК Ссылка,
               |		НомерСтроки КАК НомерСтроки,
               |		Номенклатура КАК Номенклатура,
               |		Характеристика КАК Характеристика,
               |		Назначение КАК Назначение,
               |		Упаковка КАК Упаковка,
               |		КоличествоУпаковок КАК КоличествоУпаковок,
               |		Количество КАК Количество,
               |		ВидЦены КАК ВидЦены,
               |		Цена КАК Цена,
               |		Сумма КАК Сумма,
               |		УдалитьСтавкаНДС КАК УдалитьСтавкаНДС,
               |		СтавкаНДС КАК СтавкаНДС,
               |		СуммаНДС КАК СуммаНДС,
               |		СуммаСНДС КАК СуммаСНДС,
               |		КодСтроки КАК КодСтроки,
               |		СуммаРучнойСкидки КАК СуммаРучнойСкидки,
               |		СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
               |		ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
               |		ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
               |		КлючСвязи КАК КлючСвязи,
               |		Склад КАК Склад,
               |		СтатусУказанияСерий КАК СтатусУказанияСерий,
               |		СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
               |		ЗаказКлиента КАК ЗаказКлиента,
               |		СрокПоставки КАК СрокПоставки,
               |		ИдентификаторСтроки КАК ИдентификаторСтроки,
               |		Серия КАК Серия,
               |		АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
               |		НоменклатураНабора КАК НоменклатураНабора,
               |		ХарактеристикаНабора КАК ХарактеристикаНабора,
               |		АналитикаУчетаНаборов КАК АналитикаУчетаНаборов,
               |		КодТНВЭД КАК КодТНВЭД,
               |		ОбъектРасчетов КАК ОбъектРасчетов,
               |		Подразделение КАК Подразделение,
               |		НоменклатураПартнера КАК НоменклатураПартнера,
               |		СуммаБонусныхБалловКСписанию КАК СуммаБонусныхБалловКСписанию,
               |		СуммаБонусныхБалловКСписаниюВВалюте КАК СуммаБонусныхБалловКСписаниюВВалюте,
               |		СуммаНачисленныхБонусныхБалловВВалюте КАК СуммаНачисленныхБонусныхБалловВВалюте
               |	) КАК Товары,
               |	РеализацияТоваровУслуг.гф_ТоварыВКоробах.(
               |		Ссылка КАК Ссылка,
               |		НомерСтроки КАК НомерСтроки,
               |		УпаковочныйЛист КАК УпаковочныйЛист,
               |		Артикул КАК Артикул,
               |		КоличествоПар КАК КоличествоПар,
               |		Коэффициент КАК Коэффициент,
               |		ЦенаКороба КАК ЦенаКороба,
               |		НДС КАК НДС
               |	) КАК гф_ТоварыВКоробах
               |ИЗ
               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
               |ГДЕ
               |	РеализацияТоваровУслуг.Ссылка = &Имя";
			
			Запрос.Параметры.Вставить("Имя",МассивДок[0].Ссылка);
			
			Таб = Запрос.Выполнить().Выгрузить();
			
			НомерСтроки = 0;
			ВсегоБезНДС = 0;
		    ВсегоНДС    = 0;
			ВсегоСНДС   = 0;
			//++Галфинд ЕсиповАВ 19.01.24
			ИтогоКоличествоМестШтук = 0;
			ИтогоКоличествоИтого = 0;
			//--Галфинд ЕсиповАВ 19.01.24
			
			Для Каждого СтрТов Из Таб[0].гф_ТоварыВКоробах Цикл //Короба
						
				ОбластьСтрока = ОбластьСтрокаСтандарт;
				
				НомерСтроки = НомерСтроки + 1;
				
				Мест                                                 = СтрТов.Коэффициент;
				
				//++Галфинд ЕсиповАВ 19.01.24
				//ОбластьСтрока.Параметры.НоменклатураКод              = СтрТов.Артикул;
				ОбластьСтрока.Параметры.НоменклатураКод              = Таб[0].Товары[0].Номенклатура.Артикул + "/" + Таб[0].Товары[0].Характеристика.Наименование;
				//--Галфинд ЕсиповАВ 19.01.24
				ОбластьСтрока.Параметры.НомерСтроки                  = НомерСтроки;
				ОбластьСтрока.Параметры.ПредставлениеНоменклатуры    = Таб[0].Товары[0].Номенклатура.НаименованиеПолное;
				ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод          = Таб[0].Товары[0].Номенклатура.ЕдиницаИзмерения.Код;
				ОбластьСтрока.Параметры.ЕдиницаИзмеренияНаименование = Таб[0].Товары[0].Номенклатура.ЕдиницаИзмерения.Наименование;
				//++Галфинд ЕсиповАВ 19.01.24
				//ОбластьСтрока.Параметры.Упак                         = Таб[0].Товары[0].Упаковка.Наименование;
				ОбластьСтрока.Параметры.Упак                         = СтрТов.УпаковочныйЛист.гф_Комплектация.Упаковка.Наименование;
				//++Галфинд ЕсиповАВ 19.01.24
				ОбластьСтрока.Параметры.ВОдномМесте                  = СтрТов.УпаковочныйЛист.ВсегоМест;
				ОбластьСтрока.Параметры.МестШтук                     = Мест;
				ОбластьСтрока.Параметры.Количество                   = СтрТов.УпаковочныйЛист.ВсегоМест * Мест;
				ОбластьСтрока.Параметры.Цена                         = СтрТов.ЦенаКороба;
				ОбластьСтрока.Параметры.СуммаБезНДС                  = СтрТов.ЦенаКороба * Мест;
				ОбластьСтрока.Параметры.Акциз                        = "без акциза";
				ОбластьСтрока.Параметры.СтавкаНДС                    = Таб[0].Товары[0].СтавкаНДС.ПеречислениеСтавкаНДС;
				ОбластьСтрока.Параметры.СуммаНДС                     = СтрТов.НДС * Мест;
				ОбластьСтрока.Параметры.СуммаСНДС                    = СтрТов.ЦенаКороба * Мест + СтрТов.НДС * Мест;
				ОбластьСтрока.Параметры.СтранаПроисхожденияКод       = Таб[0].Товары[0].Номенклатура.СтранаПроисхождения.Код;
				ОбластьСтрока.Параметры.СтранаПроисхождения          = Таб[0].Товары[0].Номенклатура.СтранаПроисхождения.Наименование;
				ОбластьСтрока.Параметры.НомерГТД                     = СтрТов.УпаковочныйЛист.гф_Агрегация.гф_НомерГТД;
				
				ВсегоБезНДС = ВсегоБезНДС + СтрТов.ЦенаКороба * Мест;
				ВсегоНДС    = ВсегоНДС + СтрТов.НДС * Мест;
				ВсегоСНДС   = ВсегоСНДС + СтрТов.ЦенаКороба * Мест + СтрТов.НДС * Мест;
				//++Галфинд ЕсиповАВ 19.01.24
				ИтогоКоличествоМестШтук = ИтогоКоличествоМестШтук + Мест;
				ИтогоКоличествоИтого = ИтогоКоличествоИтого + СтрТов.УпаковочныйЛист.ВсегоМест * Мест;
				//--Галфинд ЕсиповАВ 19.01.24
				
				ТабличныйДокумент.Вывести(ОбластьСтрока);
				
			КонецЦикла;
			
			//++Галфинд ЕсиповАВ 19.01.24
			ОбластьИтого.Параметры.КоличествоМестШтук = ИтогоКоличествоМестШтук; 
			ОбластьИтого.Параметры.КоличествоИтого    = ИтогоКоличествоИтого;
			//--Галфинд ЕсиповАВ 19.01.24
			СтрутураИтого.Вставить("ИтогоСуммаБезНДС", ВсегоБезНДС);
			СтрутураИтого.Вставить("ИтогоСуммаБезНДСНаСтранице", ВсегоБезНДС);
			СтрутураИтого.Вставить("ИтогоСуммаНДС", ВсегоНДС);
			СтрутураИтого.Вставить("ИтогоСуммаНДСНаСтранице", ВсегоНДС);
			СтрутураИтого.Вставить("ИтогоСуммаСНДС", ВсегоСНДС);
			СтрутураИтого.Вставить("ИтогоСуммаСНДСНаСтранице", ВсегоСНДС);
			СтрутураИтого.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", НомерСтроки);
			СтрутураИтого.Вставить("СуммаПрописью", ЧислоПрописью(ВсегоСНДС));
			
			
		Иначе
			
			
			//++Галфинд ЕсиповАВ 19.01.24
			НомерСтрокиТЧ = 1;
			ИтогоКоличествоМестШтук = 0;
			ИтогоКоличествоИтого = 0;
			//--Галфинд ЕсиповАВ 19.01.24
			Пока СтрокаТовары.Следующий() Цикл
				
				Если ПрослеживаемыеТовары <> Неопределено Тогда
					ПрослеживаемыеТоварыСтрокаТовары = ПрослеживаемыеТовары.НайтиСтроки(Новый Структура("НомерСтрокиСФ", СтрокаТовары.НомерСтроки));
				Иначе
					ПрослеживаемыеТоварыСтрокаТовары = Неопределено;
				КонецЕсли;
				
				Если ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.ОтчетКомиссионера")
					ИЛИ ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
					Если СтрокаТовары.Покупатель <> ДанныеПечати.Покупатель
						И СтрокаТовары.Покупатель <> НЕОПРЕДЕЛЕНО Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Если СтрокаТовары.Количество = 0 
					И СтрокаТовары.СуммаСНДС = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) Тогда
					ОбластьСтрока = ОбластьСтрокаНабор;
				ИначеЕсли НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
					ОбластьСтрока = ОбластьСтрокаКомплектующие;
				Иначе
					ОбластьСтрока = ОбластьСтрокаСтандарт;
				КонецЕсли;
				
				Параметры = Новый Структура("Корректировочный,СчетФактураНаАванс", Ложь, Ложь);
				
				Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
					Если ИспользоватьПечатныеФормыСФ2_5 Тогда
						ЗаполнитьРеквизитыСтрокиТовара2_5(СтрокаТовары, ПрослеживаемыеТоварыСтрокаТовары, ОбластьСтрока, Неопределено, Параметры, , ВыводитьКодыТНВЭД, ВыводитьСерии);
					Иначе
						ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьСтрока, Неопределено, , ВыводитьКодыТНВЭД, ВыводитьСерии);
					КонецЕсли;
				Иначе
					НомерСтроки = НомерСтроки + 1;
					Если ИспользоватьПечатныеФормыСФ2_5 Тогда
						ЗаполнитьРеквизитыСтрокиТовара2_5(СтрокаТовары, ПрослеживаемыеТоварыСтрокаТовары, ОбластьСтрока, НомерСтроки, Параметры, , ВыводитьКодыТНВЭД, ВыводитьСерии);
					Иначе
						ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьСтрока, НомерСтроки, , ВыводитьКодыТНВЭД, ВыводитьСерии);
					КонецЕсли;
					ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьСтрока);
				КонецЕсли;
				
				СтруктураПараметров = Новый Структура;
				Если ОперацияОблагаетсяНДСУПокупателя Тогда
					СтруктураПараметров.Вставить("СтавкаНДС", НСтр("ru = 'НДС исчисляется налоговым агентом';
					|en = 'VAT is calculated by tax agent'", Метаданные.Языки.Русский.КодЯзыка));
					Если ИспользоватьПечатныеФормыСФ2_5 Тогда
						СтруктураПараметров.Вставить("Всего", "--");
					Иначе
						СтруктураПараметров.Вставить("СуммаСНДС", "--");
					КонецЕсли;
					ТолькоСтавкаБезНДС = Ложь;
				ИначеЕсли СтрокаТовары.СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда
					СтруктураПараметров.Вставить("СтавкаНДС", НСтр("ru = 'без НДС';
					|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
					СтруктураПараметров.Вставить("СуммаНДС", НСтр("ru = 'без НДС';
					|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
				ИначеЕсли СтрокаТовары.СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.НДС0) Тогда
					СтруктураПараметров.Вставить("СуммаНДС", 0);
					ТолькоСтавкаБезНДС = Ложь;
				Иначе
					ТолькоСтавкаБезНДС = Ложь;
				КонецЕсли;
				Если Не НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
					Если ИспользоватьПечатныеФормыСФ2_5 Тогда
						СтруктураПараметров.Вставить("Акциз", НСтр("ru = 'без
						|акциза';
						|en = 'without
						|excise duty'", Метаданные.Языки.Русский.КодЯзыка));
					Иначе
						СтруктураПараметров.Вставить("Акциз", НСтр("ru = 'без акциза';
						|en = 'no excise'", Метаданные.Языки.Русский.КодЯзыка));
					КонецЕсли;
				КонецЕсли;
				
				ОбластьСтрока.Параметры.Заполнить(СтруктураПараметров);
				
				МассивВыводимыхОбластей.Очистить();
				МассивВыводимыхОбластей.Добавить(ОбластьСтрока);
				
				Если НомерСтроки = КоличествоСтрок Тогда
					МассивВыводимыхОбластей.Добавить(ОбластьИтого);
					МассивВыводимыхОбластей.Добавить(ОбластьПодвал);
					Если ИспользоватьПечатныеФормыСФ2_5 Тогда
						МассивВыводимыхОбластей.Добавить(ОбластьПодвалНакладной);
					КонецЕсли;
				КонецЕсли;
				
				Если НомерСтроки <> 1 И НЕ ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
					
					НомерСтраницы = НомерСтраницы + 1;
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					
					ОбластьНумерацияЛистов = Макет.ПолучитьОбласть("НумерацияЛистов");
					Если ОпцииПечати.НомерСформированВСчетеФактуре Тогда
						ОбластьНумерацияЛистов.Параметры.Номер = ДанныеПечати.Номер;
					Иначе
						ОбластьНумерацияЛистов.Параметры.Номер = НомерСчетаФактурыНаПечать(ДанныеПечати.Номер, ДанныеПечати.ИндексПодразделения);
					КонецЕсли;
					Если ИспользоватьПечатныеФормыСФ2_5 Тогда
						ОбластьНумерацияЛистов.Параметры.НомерЛиста = НомерСтраницы;
					Иначе
						ОбластьНумерацияЛистов.Параметры.НомерСтраницы = НомерСтраницы;
						ОбластьНумерацияЛистов.Параметры.Дата = Формат(ДанныеПечати.Дата, "ДЛФ=ДД; ДП=--");
					КонецЕсли;
					
					ТабличныйДокумент.Вывести(ОбластьНумерацияЛистов);
					ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
					
				КонецЕсли;
				
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				
				"ВЫБРАТЬ
				|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
				|	РеализацияТоваровУслуг.гф_ТоварыВКоробах.(
				|		Ссылка КАК Ссылка,
				|		НомерСтроки КАК НомерСтроки,
				|		УпаковочныйЛист КАК УпаковочныйЛист,
				|		Артикул КАК Артикул,
				|		КоличествоПар КАК КоличествоПар,
				|		Коэффициент КАК Коэффициент,
				|		ЦенаКороба КАК ЦенаКороба,
				|		НДС КАК НДС
				|	) КАК гф_ТоварыВКоробах,
				|	РеализацияТоваровУслуг.Товары.(
				|		Ссылка КАК Ссылка,
				|		НомерСтроки КАК НомерСтроки,
				|		Номенклатура КАК Номенклатура,
				|		Характеристика КАК Характеристика,
				|		Назначение КАК Назначение,
				|		Упаковка КАК Упаковка,
				|		КоличествоУпаковок КАК КоличествоУпаковок,
				|		Количество КАК Количество,
				|		ВидЦены КАК ВидЦены,
				|		Цена КАК Цена,
				|		Сумма КАК Сумма,
				|		УдалитьСтавкаНДС КАК УдалитьСтавкаНДС,
				|		СтавкаНДС КАК СтавкаНДС,
				|		СуммаНДС КАК СуммаНДС,
				|		СуммаСНДС КАК СуммаСНДС,
				|		КодСтроки КАК КодСтроки,
				|		СуммаРучнойСкидки КАК СуммаРучнойСкидки,
				|		СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
				|		ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
				|		ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
				|		КлючСвязи КАК КлючСвязи,
				|		Склад КАК Склад,
				|		СтатусУказанияСерий КАК СтатусУказанияСерий,
				|		СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
				|		ЗаказКлиента КАК ЗаказКлиента,
				|		СрокПоставки КАК СрокПоставки,
				|		ИдентификаторСтроки КАК ИдентификаторСтроки,
				|		Серия КАК Серия,
				|		АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
				|		НоменклатураНабора КАК НоменклатураНабора,
				|		ХарактеристикаНабора КАК ХарактеристикаНабора,
				|		АналитикаУчетаНаборов КАК АналитикаУчетаНаборов,
				|		КодТНВЭД КАК КодТНВЭД,
				|		ОбъектРасчетов КАК ОбъектРасчетов,
				|		Подразделение КАК Подразделение,
				|		НоменклатураПартнера КАК НоменклатураПартнера,
				|		СуммаБонусныхБалловКСписанию КАК СуммаБонусныхБалловКСписанию,
				|		СуммаБонусныхБалловКСписаниюВВалюте КАК СуммаБонусныхБалловКСписаниюВВалюте,
				|		СуммаНачисленныхБонусныхБалловВВалюте КАК СуммаНачисленныхБонусныхБалловВВалюте
				|	) КАК Товары
				|ИЗ
				|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
				|ГДЕ
				|	РеализацияТоваровУслуг.Ссылка = &Ссылка";
				
				Запрос.Параметры.Вставить("Ссылка",МассивДок[0].Ссылка);
				
				Таб = Запрос.Выполнить().Выгрузить();
				
				//++Галфинд ЕсиповАВ 19.01.24
				//ОбластьСтрокаКомплектующие.Параметры.НоменклатураКод           = СтрокаТовары.Номенклатура.Артикул + СтрокаТовары.Характеристика.Наименование;
				ОбластьСтрокаКомплектующие.Параметры.НоменклатураКод           = СтрокаТовары.Номенклатура.Артикул + "/" + СтрокаТовары.Характеристика.Наименование;
				//--Галфинд ЕсиповАВ 19.01.24
				ОбластьСтрокаКомплектующие.Параметры.ПредставлениеНоменклатуры = СтрокаТовары.НоменклатураНаименование;
				//++Галфинд ЕсиповАВ 19.01.24
				//ОбластьСтрокаКомплектующие.Параметры.Упак                      = СтрокаТовары.Упаковка.Наименование;
				ОбластьСтрокаКомплектующие.Параметры.Упак                      = СтрокаТовары.ХарактеристикаНабора.Наименование;
				//--Галфинд ЕсиповАВ 19.01.24
				ОбластьСтрокаКомплектующие.Параметры.ВОдномМесте               = Таб[0].гф_ТоварыВКоробах[0].УпаковочныйЛист.ВсегоМест;
				ОбластьСтрокаКомплектующие.Параметры.МестШтук                  = Таб[0].гф_ТоварыВКоробах[0].Коэффициент;
				ОбластьСтрокаКомплектующие.Параметры.Количество                = СтрокаТовары.Количество;
				ОбластьСтрокаКомплектующие.Параметры.СтранаПроисхожденияКод    = СтрокаТовары.СтранаПроисхождения.Код;
				ОбластьСтрокаКомплектующие.Параметры.СтранаПроисхождения       = СтрокаТовары.СтранаПроисхождения.Наименование;
				ОбластьСтрокаКомплектующие.Параметры.НомерГТД                  = Таб[0].гф_ТоварыВКоробах[0].УпаковочныйЛист.гф_Агрегация.гф_НомерГТД;
				//++Галфинд ЕсиповАВ 19.01.24
				ОбластьСтрокаКомплектующие.Параметры.НомерСтроки                   = НомерСтроки;
				ОбластьСтрокаКомплектующие.Параметры.Упак                          = Таб[0].гф_ТоварыВКоробах[0].УпаковочныйЛист.гф_Комплектация.Упаковка.Наименование;
				ОбластьСтрокаКомплектующие.Параметры.ЕдиницаИзмеренияКод           = СтрокаТовары.ЕдиницаИзмеренияКод;
				ОбластьСтрокаКомплектующие.Параметры.ЕдиницаИзмеренияНаименование  = СтрокаТовары.ЕдиницаИзмерения.Наименование;
				ОбластьСтрокаКомплектующие.Параметры.Цена                          = СтрокаТовары.Цена;
				ОбластьСтрокаКомплектующие.Параметры.СуммаБезНДС                   = СтрокаТовары.СуммаБезНДС;
				ОбластьСтрокаКомплектующие.Параметры.Акциз                         = "без акциза";
				ОбластьСтрокаКомплектующие.Параметры.СтавкаНДС                     = СтрокаТовары.СтавкаНДС.Наименование;
				ОбластьСтрокаКомплектующие.Параметры.СуммаНДС                      = СтрокаТовары.СуммаНДС;
				ОбластьСтрокаКомплектующие.Параметры.СуммаСНДС                     = СтрокаТовары.СуммаСНДС;
				
				НомерСтрокиТЧ = НомерСтрокиТЧ +1;
				
				ИтогоКоличествоМестШтук = ИтогоКоличествоМестШтук + Таб[0].гф_ТоварыВКоробах[0].Коэффициент;
				ИтогоКоличествоИтого = ИтогоКоличествоИтого + СтрокаТовары.Количество;
				//--Галфинд ЕсиповАВ 19.01.24
				
				//++Галфинд ЕсиповАВ 19.01.24
				//ТабличныйДокумент.Вывести(ОбластьСтрока);
				ТабличныйДокумент.Вывести(ОбластьСтрокаКомплектующие);
				//--Галфинд ЕсиповАВ 19.01.24
				
				Если Не НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
					Если ИспользоватьПечатныеФормыСФ2_5 Тогда
						РассчитатьИтоговыеСуммы2_5(ИтоговыеСуммы, СтрокаТовары);
					Иначе
						РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		// Выводим итоги по документу
		ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, НомерСтроки,
							ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДанныеПечати.Организация));
		
		Если ТолькоСтавкаБезНДС Тогда
			ИтоговыеСуммы.ИтогоСуммаНДС = НСтр("ru = 'без НДС';
												|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка);
		КонецЕсли;
		
		Если ОперацияОблагаетсяНДСУПокупателя Тогда
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				ИтоговыеСуммы.Вставить("ИтогоВсего", "--");
				ИтоговыеСуммы.Вставить("ИтогоВсегоНаСтранице", "--");
			Иначе
				ИтоговыеСуммы.Вставить("ИтогоСуммаСНДС", "--");
				ИтоговыеСуммы.Вставить("ИтогоСуммаСНДСНаСтранице", "--");
			КонецЕсли;
		КонецЕсли;
		
		////ЕсповАВ
			ОбластьИтого.Параметры.Заполнить(ИтоговыеСуммы);
			ОбластьИтого.Параметры.КоличествоМестШтук = ИтогоКоличествоМестШтук; 
			ОбластьИтого.Параметры.КоличествоИтого    = ИтогоКоличествоИтого;
			ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьИтого);
			ТабличныйДокумент.Вывести(ОбластьИтого);
	    //ЕсиповАВ
	
		
		// Если строка таблицы одна, то проверим поместится ли все на одной странице
		Если КоличествоСтрок = 1 Тогда
			МассивВыводимыхОбластей = Новый Массив;
			МассивВыводимыхОбластей.Добавить(ОбластьПодвал);
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				МассивВыводимыхОбластей.Добавить(ОбластьПодвалНакладной);
			КонецЕсли;
			Если Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
				НомерСтраницы = НомерСтраницы + 1;
			КонецЕсли;
		КонецЕсли;
		
		КоличествоСтраниц = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Документ составлен на %1 %2';
				|en = 'Document is created on %1 %2'", Метаданные.Языки.Русский.КодЯзыка),
			НомерСтраницы,
			ОбщегоНазначенияУТКлиентСервер.ФормаМножественногоЧисла(
				НСтр("ru = 'листе';
					|en = 'sheet'", Метаданные.Языки.Русский.КодЯзыка),
				НСтр("ru = 'листах';
					|en = 'sheets'", Метаданные.Языки.Русский.КодЯзыка),
				НСтр("ru = 'листах';
					|en = 'sheets'", Метаданные.Языки.Русский.КодЯзыка), НомерСтраницы));
		Если ИспользоватьПечатныеФормыСФ2_5 Тогда
			СтруктураПараметров = Новый Структура("КоличествоЛистов", КоличествоСтраниц);
		Иначе
			СтруктураПараметров = Новый Структура("КоличествоСтраниц", КоличествоСтраниц);
		КонецЕсли;
		ОбластьПодвал.Параметры.Заполнить(СтруктураПараметров);
		
		Если ИспользоватьПечатныеФормыСФ2_5 Тогда
			УдалитьВсеОбластиФаксимиле(ОбластьПодвал);
			УдалитьВсеОбластиФаксимиле(ОбластьПодвалНакладной);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		Если ИспользоватьПечатныеФормыСФ2_5 Тогда
			ТабличныйДокумент.Вывести(ОбластьПодвалНакладной);
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати,
			ДанныеПечати.Ссылка);
			
	КонецЦикла;
	
КонецПроцедуры

#Область Печать_СчетФактура

Функция СформироватьПечатнуюФормуСчетФактура(СтруктураТипов, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактура";
	
	СтруктураТиповНаПечать         = Новый Структура;
	МассивСчетФактураВыданный      = Новый Массив;
	МассивСчетФактураКомиссионеру  = Новый Массив;
	МассивСчетФактураПолученный    = Новый Массив;
	ОснованияНаРеализацию          = Новый Массив;
	ОснованияКомиссионеру          = Новый Массив;
	ОснованияСчетФактураПолученный = Новый Массив;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		ИмяОбъекта = Сред(СтруктураОбъектов.Ключ, 10);
		
		Если ИмяОбъекта = "ОтчетКомитентуОСписании" Или ИмяОбъекта = "ОтчетКомиссионераОСписании" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИмяОбъекта = "СчетФактураВыданный" Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураВыданный, СтруктураОбъектов.Значение);
			
		ИначеЕсли ИмяОбъекта = "СчетФактураКомиссионеру" Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураКомиссионеру, СтруктураОбъектов.Значение);
			
		ИначеЕсли ИмяОбъекта = "СчетФактураНаНеподтвержденнуюРеализацию0"
				Или ИмяОбъекта = "СчетФактураВыданныйАванс"
				Или ИмяОбъекта = "СчетФактураНалоговыйАгент" Тогда
				
			СтруктураТиповНаПечать.Вставить(ИмяОбъекта, СтруктураОбъектов.Значение);
			
		ИначеЕсли ИмяОбъекта = "ОтчетКомиссионера"
				Или (ИмяОбъекта = "ОтчетПоКомиссииМеждуОрганизациями" И ПараметрыПечати.ВидФормы = "Комитент") Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияКомиссионеру, СтруктураОбъектов.Значение);
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияНаРеализацию, СтруктураОбъектов.Значение);
			
		КонецЕсли;
		
		Если ПараметрыПечати.Свойство("ДополнитьПолученнымиСчетамиФактуры")
				И ПараметрыПечати.ДополнитьПолученнымиСчетамиФактуры Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияСчетФактураПолученный, СтруктураОбъектов.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОснованияНаРеализацию.Количество() > 0 Тогда
		
		РезультатАнализа = Документы.СчетФактураВыданный.ПолучитьСчетаФактурыНаПечать(
			ОснованияНаРеализацию, ,
			ПараметрыПечати.ПечатьВВалюте);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураВыданный, РезультатАнализа.СчетаФактурыНаПечать, Истина);
		
		СообщитьОбОшибкахПечатиСчетФактурыПоОснованиям(РезультатАнализа.ТаблицаОшибок, Ложь)
		
	КонецЕсли;
	
	Если ОснованияКомиссионеру.Количество() > 0 Тогда
		
		РезультатАнализа = Документы.СчетФактураКомиссионеру.ПолучитьСчетаФактурыНаПечать(
			ОснованияКомиссионеру,
			ПараметрыПечати.ПечатьВВалюте);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураКомиссионеру, РезультатАнализа.СчетаФактурыНаПечать, Истина);
		
		СообщитьОбОшибкахПечатиСчетФактурыПоОснованиям(РезультатАнализа.ТаблицаОшибок, Истина)
		
	КонецЕсли;
	
	Если ОснованияСчетФактураПолученный.Количество() > 0 Тогда
		
		РезультатАнализа = Документы.СчетФактураПолученный.ПолучитьСчетаФактурыНаПечать(
			ОснованияСчетФактураПолученный, ПараметрыПечати.ПечатьВВалюте);
		
		ПараметрыПечати.Вставить("МассивСчетФактураПолученный", РезультатАнализа.СчетаФактурыНаПечать);
		
		СообщитьОбОшибкахПечатиСчетФактурыПолученного(РезультатАнализа.ТаблицаОшибок)
		
	КонецЕсли;
	
	Если МассивСчетФактураВыданный.Количество() > 0 Тогда
		СтруктураТиповНаПечать.Вставить("СчетФактураВыданный", МассивСчетФактураВыданный);
	КонецЕсли;
	
	Если МассивСчетФактураКомиссионеру.Количество() > 0 Тогда
		СтруктураТиповНаПечать.Вставить("СчетФактураКомиссионеру", МассивСчетФактураКомиссионеру);
	КонецЕсли;
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТиповНаПечать Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		МенеджерОбъекта = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(СтруктураОбъектов.Ключ);
		Если МенеджерОбъекта = Неопределено Тогда
			МенеджерОбъекта = Документы[СтруктураОбъектов.Ключ];
		КонецЕсли;
	
		ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыСчетФактура(ПараметрыПечати, СтруктураОбъектов.Значение);
	
		Если ДанныеДляПечати <> Неопределено Тогда
			ОпцииПечатиСчетаФактуры = Новый Структура;
			ОпцииПечатиСчетаФактуры.Вставить("НомерСформированВСчетеФактуре", ДанныеДляПечати.Свойство("НомерСформированВСчетеФактуре"));
			ОпцииПечатиСчетаФактуры.Вставить("СчетФактураНаАванс",            ДанныеДляПечати.Свойство("СчетФактураНаАванс"));
			ОпцииПечатиСчетаФактуры.Вставить("СчетФактураНалоговыйАгент",     ДанныеДляПечати.Свойство("СчетФактураНалоговыйАгент"));
			ОпцииПечатиСчетаФактуры.Вставить("ПечатьВВалюте",                 ПараметрыПечати.ПечатьВВалюте);
		
			ЗаполнитьТабличныйДокументСчетФактура(
				ТабличныйДокумент,
				ДанныеДляПечати,
				ОбъектыПечати,
				ОпцииПечатиСчетаФактуры);
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ЗаполнитьРеквизитыШапкиСчетФактура(ДанныеПечати, ДанныеОснований, СведенияОПоставщике, ДанныеКонтрагентов, ТабличныйДокумент, ОпцииПечатиСчетаФактуры, ДанныеПоставщиков)
	
	ДействующиеПостановления = ОпцииПечатиСчетаФактуры.ДействующиеПостановления;
	
	Макет = ОпцииПечатиСчетаФактуры.Макет;
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	
	НомераДаты = Новый Структура("Номер, Дата, НомерИсправления, ДатаИсправления, РеквизитыОснований, НомерИсправленияКорректировочного, ДатаИсправленияКорректировочного");
	
	Если ОпцииПечатиСчетаФактуры.НомерСформированВСчетеФактуре Тогда
		НомераДаты.Номер = ДанныеПечати.Номер;
	Иначе
		НомераДаты.Номер = НомерСчетаФактурыНаПечать(ДанныеПечати.Номер, ДанныеПечати.ИндексПодразделения);
	КонецЕсли;
	НомераДаты.Дата = Формат(ДанныеПечати.Дата, "ДЛФ=ДД");
	
	Если ОпцииПечатиСчетаФактуры.ИспользоватьПечатныеФормыСФ2_5 И ДанныеПечати.КорректировочныйСчетФактура Тогда
		НомераДаты.НомерИсправленияКорректировочного = ?(ДанныеПечати.Исправление, ДанныеПечати.НомерИсправления, "--");
		НомераДаты.ДатаИсправленияКорректировочного =  ?(ДанныеПечати.Исправление, Формат(ДанныеПечати.ДатаИсправления, "ДЛФ=ДД"), "--");
	Иначе
		НомераДаты.НомерИсправления = ?(ДанныеПечати.Исправление, ДанныеПечати.НомерИсправления, "--");
		НомераДаты.ДатаИсправления =  ?(ДанныеПечати.Исправление, Формат(ДанныеПечати.ДатаИсправления, "ДЛФ=ДД"), "--");
	КонецЕсли;
	
	Если ДанныеПечати.КорректировочныйСчетФактура Тогда
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ДанныеОснований.НайтиСледующий(СтруктураПоиска);
		СтрокиОснований = ДанныеОснований.Выбрать();
		
		РеквизитыОснований = "";
		
		Пока СтрокиОснований.СледующийПоЗначениюПоля("ИсходныйДокумент") Цикл
			
			Если ОпцииПечатиСчетаФактуры.НомерСформированВСчетеФактуре Тогда
				НомерСчетаФактурыОснования = СтрокиОснований.НомерСчетаФактуры;
			Иначе
				НомерСчетаФактурыОснования = НомерСчетаФактурыНаПечать(СтрокиОснований.НомерСчетаФактуры, ДанныеПечати.ИндексПодразделения);
			КонецЕсли;
			
			ТекстИсходнойСФ = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = ', № %1 от %2, с учетом исправления № %3 от %4';
					|en = ', No. %1 dated %2, considering correction No. %3 dated %4'", Метаданные.Языки.Русский.КодЯзыка),
				НомерСчетаФактурыОснования,
				Формат(СтрокиОснований.ДатаСчетаФактуры, "ДЛФ=ДД; ДП=--"),
				?(ЗначениеЗаполнено(СтрокиОснований.НомерИсправленияСчетаФактуры), СтрокиОснований.НомерИсправленияСчетаФактуры, "--"),
				Формат(СтрокиОснований.ДатаИсправленияСчетаФактуры, "ДЛФ=ДД; ДП=--"));
				
			РеквизитыОснований = РеквизитыОснований + ТекстИсходнойСФ;
			
		КонецЦикла;
		
		Если Не ПустаяСтрока(РеквизитыОснований) Тогда
			РеквизитыОснований = Сред(РеквизитыОснований, 3);
		КонецЕсли;
		НомераДаты.РеквизитыОснований = РеквизитыОснований;
		
	КонецЕсли;
	
	ОбластьМакета.Параметры.Заполнить(НомераДаты);
	
	СтруктураПараметров = Новый Структура;
	
	// Выводим данные о поставщике.

	Если ДанныеПоставщиков = Неопределено Тогда

		СведенияОПоставщике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		СведенияОГрузоотправителе = СведенияОГрузоотправителе(ДанныеПечати);
		
		ДополнительноеПредставление = "";
		Если ДействующиеПостановления.Постановление914 И СведенияОПоставщике.ОфициальноеНаименование <> СведенияОПоставщике.ПолноеНаименование Тогда
			ДополнительноеПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '(%1)';
					|en = '(%1)'"),
				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование"));
		КонецЕсли;
		
		ПредставлениеПоставщика = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 %2';
				|en = '%1 %2'"),
			СведенияОПоставщике.ПолноеНаименование,
			ДополнительноеПредставление));
			
		АдресПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1';
				|en = '%1'"),
			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес"));
			
		ИННПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1%2';
				|en = '%1%2'"),
			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН", Ложь),
			?(Не ПустаяСтрока(ДанныеПечати.КПППоставщика), "/" + ДанныеПечати.КПППоставщика, ""));
		
		Если ОпцииПечатиСчетаФактуры.ИспользоватьПечатныеФормыСФ2_5 И ДанныеПечати.КорректировочныйСчетФактура Тогда
			СтруктураПараметров.Вставить("НаименованиеПродавца", ПредставлениеПоставщика);
			СтруктураПараметров.Вставить("АдресПродавца", АдресПоставщика);
			СтруктураПараметров.Вставить("ИННКПППродавца", ИННПоставщика);
		Иначе
			СтруктураПараметров.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
			СтруктураПараметров.Вставить("АдресПоставщика", АдресПоставщика);
			СтруктураПараметров.Вставить("ИННПоставщика", ИННПоставщика);
		КонецЕсли;
			
		Если НЕ ДанныеПечати.КорректировочныйСчетФактура Тогда
			
			// Выводим данные грузоотправителя.
			ТекстГрузоотправителя = "";
			Если ДанныеПечати.ТолькоУслуги 
			 ИЛИ (ДействующиеПостановления.Постановление1137 И ОпцииПечатиСчетаФактуры.СчетФактураНаАванс)
			 ИЛИ ОпцииПечатиСчетаФактуры.СчетФактураНалоговыйАгент Тогда
				ТекстГрузоотправителя = "--";
			ИначеЕсли ДанныеПечати.Организация = ДанныеПечати.Грузоотправитель 
			 ИЛИ ТипЗнч(ДанныеПечати.Грузоотправитель) = Тип("СправочникСсылка.РегистрацииВНалоговомОргане")
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеПечати.Организация, "КПП") = 
						ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеПечати.Грузоотправитель, "КПП") Тогда
				ТекстГрузоотправителя = НСтр("ru = 'он же';
											|en = 'same'", Метаданные.Языки.Русский.КодЯзыка);
			Иначе
				ТекстГрузоотправителя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
					СведенияОГрузоотправителе, "ПолноеНаименование,ФактическийАдрес");
			КонецЕсли;
			
			ПредставлениеГрузоотправителя = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1';
					|en = '%1'"),
				ТекстГрузоотправителя));
			
			СтруктураПараметров.Вставить("ПредставлениеГрузоотправителя", ПредставлениеГрузоотправителя);
			
			
		КонецЕсли;
	
	Иначе
		
		ПредставлениеПоставщика       = "";
		ПредставлениеАдресПоставщика = "";
		ПредставлениеИННПоставщика = "";
		ПредставлениеГрузоотправителя  = "";

		ЕстьГрузоотправитель = НЕ ДанныеПечати.КорректировочныйСчетФактура 
				И НЕ ДанныеПечати.ТолькоУслуги 
				И НЕ (ДействующиеПостановления.Постановление1137 И ОпцииПечатиСчетаФактуры.СчетФактураНаАванс)
				И НЕ ОпцииПечатиСчетаФактуры.СчетФактураНалоговыйАгент;
		
		ТаблицаПоставщиков = ТаблицаПоставщиковСчетаФактуры(ДанныеПечати, ДанныеПоставщиков);
		Для Каждого СтрокаТаблицы Из ТаблицаПоставщиков Цикл
			
			СведенияОПоставщике = СтрокаТаблицы.СведенияОПоставщике;
			
			ПредставлениеПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1; %2';
					|en = '%1; %2'"),
				ПредставлениеПоставщика,
				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование", Ложь));
			
			ПредставлениеАдресПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1; %2';
					|en = '%1; %2'"),
				ПредставлениеАдресПоставщика,
				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес", Ложь));
				
			ПредставлениеИННПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1; %2%3';
					|en = '%1; %2%3'"),
				ПредставлениеИННПоставщика,
				СтрокаТаблицы.ИНН,
				?(Не ПустаяСтрока(СтрокаТаблицы.КПП), "/" + СтрокаТаблицы.КПП, ""));
				
				
			Если ЕстьГрузоотправитель Тогда
					СведенияОГрузоотправителе = СтрокаТаблицы.СведенияОГрузоотправителе;
					ПредставлениеГрузоотправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1; %2';
						|en = '%1; %2'"),
					ПредставлениеГрузоотправителя,
					ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправителе, "ПолноеНаименование,ФактическийАдрес", Ложь));
			КонецЕсли;
			
		КонецЦикла;
		
		ПредставлениеПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1';
				|en = '%1'"),
			Сред(ПредставлениеПоставщика, 3));
		
		ПредставлениеАдресПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1';
				|en = '%1'"),
			Сред(ПредставлениеАдресПоставщика, 3));
		
		ПредставлениеИННПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1';
				|en = '%1'"),
			Сред(ПредставлениеИННПоставщика, 3));
			
		ПредставлениеГрузоотправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1';
				|en = '%1'"),
			?(ЕстьГрузоотправитель, Сред(ПредставлениеГрузоотправителя, 3), "--"));
		
		Если ОпцииПечатиСчетаФактуры.ИспользоватьПечатныеФормыСФ2_5 И ДанныеПечати.КорректировочныйСчетФактура Тогда
			СтруктураПараметров.Вставить("НаименованиеПродавца", ПредставлениеПоставщика);
			СтруктураПараметров.Вставить("АдресПродавца", ПредставлениеАдресПоставщика);
			СтруктураПараметров.Вставить("ИННКПППродавца", ПредставлениеИННПоставщика);
		Иначе
			СтруктураПараметров.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
			СтруктураПараметров.Вставить("АдресПоставщика", ПредставлениеАдресПоставщика);
			СтруктураПараметров.Вставить("ИННПоставщика", ПредставлениеИННПоставщика);
		КонецЕсли;
	
		СтруктураПараметров.Вставить("ПредставлениеГрузоотправителя", ПредставлениеГрузоотправителя);
		
	КонецЕсли;
	
	СтрокаПоДокументу = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1';
				|en = '%1'"),
			?(ПустаяСтрока(ДанныеПечати.СтрокаПоДокументу),
				НСтр("ru = '-- от --';
					|en = '-- dated --'", Метаданные.Языки.Русский.КодЯзыка),
				ДанныеПечати.СтрокаПоДокументу));
		
	СтруктураПараметров.Вставить("ПоДокументу", СтрокаПоДокументу);
	
	ПоДокументуОтгрузки =
		?(ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеПечати, "ПредставлениеСтроки5а")
			И ЗначениеЗаполнено(ДанныеПечати.ПредставлениеСтроки5а),
		ДанныеПечати.ПредставлениеСтроки5а,
		НСтр("ru = '-- от --';
			|en = '-- dated --'"));
	
	Если ОпцииПечатиСчетаФактуры.ИспользоватьПечатныеФормыСФ2_5 Тогда
		СтруктураПараметров.Вставить("ДокументыОбОтгрузке", ПоДокументуОтгрузки);
	Иначе
		СтруктураПараметров.Вставить("ПоДокументуОтгрузки", ПоДокументуОтгрузки);
	КонецЕсли;
	
	ЕстьГрузополучатель = Не ДанныеПечати.КорректировочныйСчетФактура
		И НЕ (ДанныеПечати.ТолькоУслуги
		ИЛИ (ДействующиеПостановления.Постановление1137 И ОпцииПечатиСчетаФактуры.СчетФактураНаАванс)
		ИЛИ ОпцииПечатиСчетаФактуры.СчетФактураНалоговыйАгент);
	
	ПредставлениеПокупателя       = "";
	ПредставлениеАдресаПокупателя = "";
	ПредставлениеИННКПППокупателя = "";
	ПредставлениеГрузополучателя  = "";
	
	ТаблицаКонтрагентов = ТаблицаКонтрагентовСчетаФактуры(ДанныеПечати, ДанныеКонтрагентов);
	
	Для Каждого СтрокаТаблицы Из ТаблицаКонтрагентов Цикл
		
		СведенияОПокупателе = СтрокаТаблицы.СведенияОПокупателе;
		
		ПредставлениеПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1; %2';
				|en = '%1; %2'"),
			ПредставлениеПокупателя,
			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование", Ложь));
		
		ПредставлениеАдресаПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1; %2';
				|en = '%1; %2'"),
			ПредставлениеАдресаПокупателя,
			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес", Ложь));
			
		ПредставлениеИННПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1; %2%3';
				|en = '%1; %2%3'"),
			ПредставлениеИННПокупателя,
			СтрокаТаблицы.ИНН,
			?(Не ПустаяСтрока(СтрокаТаблицы.КПП), "/" + СтрокаТаблицы.КПП, ""));
		
		Если ЕстьГрузополучатель Тогда
			СведенияОГрузополучателе = СтрокаТаблицы.СведенияОГрузополучателе;
			ПредставлениеГрузополучателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1; %2';
					|en = '%1; %2'"),
				ПредставлениеГрузополучателя,
				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ФактическийАдрес", Ложь));
		КонецЕсли;
		
	КонецЦикла;
	
	ПредставлениеПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1';
			|en = '%1'"),
		Сред(ПредставлениеПокупателя, 3));
	
	ПредставлениеАдресаПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1';
			|en = '%1'"),
		Сред(ПредставлениеАдресаПокупателя, 3));
	
	ПредставлениеИННПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1';
			|en = '%1'"),
		Сред(ПредставлениеИННПокупателя, 3));
		
	ПредставлениеГрузополучателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1';
			|en = '%1'"),
		?(ЕстьГрузополучатель, Сред(ПредставлениеГрузополучателя, 3), "--"));
	
	СтруктураПараметров.Вставить("АдресПокупателя", ПредставлениеАдресаПокупателя);
	Если ОпцииПечатиСчетаФактуры.ИспользоватьПечатныеФормыСФ2_5 И ДанныеПечати.КорректировочныйСчетФактура Тогда
		СтруктураПараметров.Вставить("НаименованиеПокупателя", ПредставлениеПокупателя);
		СтруктураПараметров.Вставить("ИННКПППокупателя", ПредставлениеИННПокупателя);
	Иначе
		СтруктураПараметров.Вставить("ПредставлениеПокупателя", ПредставлениеПокупателя);
		СтруктураПараметров.Вставить("ИННПокупателя", ПредставлениеИННПокупателя);
	КонецЕсли;

	Если Не ДанныеПечати.КорректировочныйСчетФактура Тогда
		СтруктураПараметров.Вставить("ПредставлениеГрузополучателя", ПредставлениеГрузополучателя);
	КонецЕсли;
	
	Если ДействующиеПостановления.Постановление1137 И ЗначениеЗаполнено(ДанныеПечати.Валюта) 
		И ОпцииПечатиСчетаФактуры.ПечатьВВалюте Тогда
		
		СтруктураПараметров.Вставить("Валюта", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1, %2';
				|en = '%1, %2'"),
			ДанныеПечати.ВалютаНаименованиеПолное,
			ДанныеПечати.ВалютаКод));
			
	ИначеЕсли ДействующиеПостановления.Постановление1137 Тогда
		СтруктураПараметров.Вставить("Валюта", НСтр("ru = 'Российский рубль, 643';
													|en = 'Russian ruble, 643'", Метаданные.Языки.Русский.КодЯзыка));
	КонецЕсли;
	
	СтруктураПараметровИдентификаторГосКонтракта = Новый Структура("ИдентификаторГосКонтракта");
	ЗаполнитьЗначенияСвойств(СтруктураПараметровИдентификаторГосКонтракта, ДанныеПечати);
	Если ДействующиеПостановления.Постановление981 Тогда
		ПредставлениеИдентификаторГосКонтракта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1';
				|en = '%1'"),
			СокрЛП(СтруктураПараметровИдентификаторГосКонтракта.ИдентификаторГосКонтракта));
	Иначе
		ПредставлениеИдентификаторГосКонтракта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1';
				|en = '%1'"),
			СокрЛП(СтруктураПараметровИдентификаторГосКонтракта.ИдентификаторГосКонтракта));
	КонецЕсли;
	СтруктураПараметров.Вставить("ИдентификаторГосКонтракта", ПредставлениеИдентификаторГосКонтракта);
	
	Если ОпцииПечатиСчетаФактуры.СчетФактураНалоговыйАгент Тогда
		// для печати подвала берем сведения об организации из сведений о покупателе
		СведенияОПоставщике = СведенияОПокупателе;
	КонецЕсли;
	
	ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если ОпцииПечатиСчетаФактуры.ИспользоватьПечатныеФормыСФ2_5 И ДанныеПечати.КорректировочныйСчетФактура И Не ОпцииПечатиСчетаФактуры.СчетФактураНаАванс Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ИдентификаторГосКонтракта");
		ОбластьМакета.Параметры.ИдентификаторГосКонтракта = ПредставлениеИдентификаторГосКонтракта;
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПодвалаСчетФактура(ОбластьПодвала, ДанныеПечати, СведенияОбОрганизации)
	
	СтруктураПараметров = Новый Структура;
	
	Если СведенияОбОрганизации.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		СтруктураПараметров.Вставить("ФИОРуководителя", ДанныеПечати.Руководитель);
		СтруктураПараметров.Вставить("ФИОГлавногоБухгалтера", ДанныеПечати.ГлавныйБухгалтер);
	Иначе
		СтруктураПараметров.Вставить("ФИОПБОЮЛ", ДанныеПечати.Руководитель);
		СтруктураПараметров.Вставить("Свидетельство", СведенияОбОрганизации.Свидетельство);
	КонецЕсли;
	
	ОбластьПодвала.Параметры.Заполнить(СтруктураПараметров);
	
КонецПроцедуры

// Параметры:
// 	ТабличныйДокумент - ТабличныйДокумент
// 	ДанныеДляПечати - Структура:
// 		* РезультатПоШапке			 - РезультатЗапроса
// 		* РезультатПоИсходнымДанным	 - РезультатЗапроса
// 		* РезультатПоКонтрагентам	 - РезультатЗапроса
// 		* РезультатПоТабличнойЧасти	 - РезультатЗапроса
// 		* РезультатПоПоставщикам	 - РезультатЗапроса
//	ОбъектыПечати - СписокЗначений - список объектов печати
//
Процедура ЗаполнитьТабличныйДокументСчетФактура(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ОпцииПечатиСчетаФактуры) Экспорт
	
	Перем ВыборкаОснований, ВыборкаКонтрагентов, ВыборкаПоставщиков;
	
	ВыводитьСерии = Константы.ВыводитьСерииВПечатныхФормах.Получить() 
					И ДанныеДляПечати.РезультатПоТабличнойЧасти.Колонки.Найти("СерияНаименование") <> Неопределено;
	ИспользоватьПечатныеФормыСФ2_5 = Ложь;
	ОпцииПечатиСчетаФактуры.Вставить("ИспользоватьПечатныеФормыСФ2_5", ИспользоватьПечатныеФормыСФ2_5);
					
	Макет451            = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактура451_ru");
	Макет1137           = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактура1137_ru");
	Макет1137_625       = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактура1137_625_ru");
	Макет981            = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактура981_ru");
	Макет534            = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактура534_ru");
	Макет534_2_5        = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_СчетФактура534");
	Макет534Прослеж_2_5 = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_СчетФактура534Прослеж");
	МакетКорр           = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактураКорректировочный1137_ru");
	МакетКорр_625       = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактураКорректировочный1137_625_ru");
	МакетКорр_981       = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактураКорректировочный981_ru");
	МакетКорр_534       = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактураКорректировочный534_ru");
	МакетКорр_534_2_5   = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_КорректировочныйСчетФактура534");
	МакетКорр_534Прослеж_2_5 = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_КорректировочныйСчетФактура534Прослеж");
	
	ДанныеПечати        = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ДанныеДляПечати.Свойство("РезультатПоКонтрагентам") И Не ДанныеДляПечати.РезультатПоКонтрагентам.Пустой() Тогда
		ВыборкаКонтрагентов = ДанныеДляПечати.РезультатПоКонтрагентам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	КонецЕсли;
	Если ДанныеДляПечати.Свойство("РезультатПоИсходнымДанным") Тогда
		ВыборкаОснований = ДанныеДляПечати.РезультатПоИсходнымДанным.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	КонецЕсли;
	ПрослеживаемыеТовары = Неопределено;
	ЕстьПрослеживаемыеТоварыВТабличнойЧасти = Ложь;
	Если ДанныеДляПечати.Свойство("Прослеживаемость") Тогда
		ПрослеживаемыеТовары = ДанныеДляПечати.Прослеживаемость.Выгрузить();
		Если ПрослеживаемыеТовары.Количество() > 0 Тогда
			ЕстьПрослеживаемыеТоварыВТабличнойЧасти = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьПостановление914 = ЛОЖЬ;
	ЕстьПостановление534 = ЛОЖЬ;
	ЕстьПостановление981 = ЛОЖЬ;
	ЕстьПостановление1137_625 = ЛОЖЬ;
	ЕстьПостановление1137 = ЛОЖЬ;
	
	ПервыйДокумент = Истина;
	Пока ДанныеПечати.Следующий() Цикл
		
		ВалютаРегламентированногоУчета = ВалютаРегламентированногоУчета(ДанныеПечати);
		
		Если ЗначениеЗаполнено(ДанныеПечати.ВалютаСчетаФактуры)
			И ОпцииПечатиСчетаФактуры.ПечатьВВалюте
			И ДанныеПечати.ВалютаСчетаФактуры = ВалютаРегламентированногоУчета Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для %1 указана валюта: рубли. Не требуется печатать счет-фактуру в иностранной валюте.';
					|en = 'Currency is specified for %1: rubles. No need to print a tax invoice in a foreign currency.'"),
				ДанныеПечати.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
			
		ИначеЕсли ЗначениеЗаполнено(ДанныеПечати.ВалютаСчетаФактуры)
			И НЕ ОпцииПечатиСчетаФактуры.ПечатьВВалюте
			И ДанныеПечати.ВалютаСчетаФактуры <> ВалютаРегламентированногоУчета  Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для %1 указана иностранная валюта. Не требуется печатать счет-фактуру в рублях.';
					|en = 'Foreign currency is specified for %1. No need to print the tax invoice in rubles.'"),
				ДанныеПечати.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
			
		Иначе
			
			ДействующиеПостановления = Новый Структура;
			ДействующиеПостановления.Вставить("Постановление914",  Ложь);
			ДействующиеПостановления.Вставить("Постановление1137", Истина);
			ДействующиеПостановления.Вставить("Постановление1137_625", ВедетсяУчетНДСПоФЗ56(ДанныеПечати.Дата,ДанныеПечати.ДатаИсправления));
			ДействующиеПостановления.Вставить("Постановление981", ДействуетПостановление981(ДанныеПечати.Дата,ДанныеПечати.ДатаИсправления));
			ДействующиеПостановления.Вставить(
				"Постановление534",
				ДействуетПостановление534(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления));
			
			ОпцииПечатиСчетаФактуры.Вставить("ДействующиеПостановления", ДействующиеПостановления);
			
			Если ДанныеПечати.КорректировочныйСчетФактура Тогда
				Если ДействующиеПостановления.Постановление534 Тогда
					ИспользоватьПечатныеФормыСФ2_5 = ПолучитьФункциональнуюОпцию("ИспользоватьПечатныеФормыСФ2_5");
					Если ИспользоватьПечатныеФормыСФ2_5 И Не ОпцииПечатиСчетаФактуры.СчетФактураНаАванс Тогда
						ОпцииПечатиСчетаФактуры.ИспользоватьПечатныеФормыСФ2_5 = ИспользоватьПечатныеФормыСФ2_5;
						Макет = ?(ДанныеПечати.ЕстьПрослеживаемыеТовары, МакетКорр_534Прослеж_2_5, МакетКорр_534_2_5);
					Иначе
						Макет = МакетКорр_534;
					КонецЕсли;
					ЕстьПостановление534 = Истина;
				ИначеЕсли ДействующиеПостановления.Постановление981 Тогда
					Макет = МакетКорр_981;
					ЕстьПостановление981 = Истина;
				ИначеЕсли ДействующиеПостановления.Постановление1137_625 Тогда
					Макет = МакетКорр_625;
					ЕстьПостановление1137_625 = Истина;
				Иначе
					Макет = МакетКорр;
					ЕстьПостановление1137 = Истина;
				КонецЕсли;
			ИначеЕсли ДействующиеПостановления.Постановление914 Тогда
				Макет = Макет451;
				ЕстьПостановление914 = Истина;
			ИначеЕсли ДействующиеПостановления.Постановление534 Тогда
				ИспользоватьПечатныеФормыСФ2_5 = ПолучитьФункциональнуюОпцию("ИспользоватьПечатныеФормыСФ2_5");
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					ОпцииПечатиСчетаФактуры.ИспользоватьПечатныеФормыСФ2_5 = ИспользоватьПечатныеФормыСФ2_5;
					Макет = ?(ДанныеПечати.ЕстьПрослеживаемыеТовары Или ЕстьПрослеживаемыеТоварыВТабличнойЧасти, Макет534Прослеж_2_5, Макет534_2_5);
				Иначе
					Макет = Макет534;
				КонецЕсли;
				ЕстьПостановление534 = Истина;
			ИначеЕсли ДействующиеПостановления.Постановление981 Тогда
				Макет = Макет981;
				ЕстьПостановление981 = Истина;
			ИначеЕсли ДействующиеПостановления.Постановление1137_625 Тогда
				Макет = Макет1137_625;
				ЕстьПостановление1137_625 = Истина;
			Иначе
				Макет = Макет1137;
				ЕстьПостановление1137 = Истина;
			КонецЕсли;
			Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
			
			Если (ЕстьПостановление914 И ЕстьПостановление1137)
				ИЛИ (ЕстьПостановление914 И ЕстьПостановление981)
				ИЛИ ((ЕстьПостановление1137 ИЛИ ЕстьПостановление1137_625) И ЕстьПостановление981)
				Или ЕстьПостановление534 И (ЕстьПостановление914
											Или ЕстьПостановление1137
											Или ЕстьПостановление1137_625
											Или ЕстьПостановление981) Тогда
				
				Текст = НСтр("ru = 'Недоступна одновременная печать счетов-фактур, сформированных по разным постановлениям Правительства РФ';
							|en = 'Cannot print tax invoices generated by different decrees of the RF Government at the same time'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДанныеПечати.Ссылка);
				
				ТабличныйДокумент.Очистить();
				Прервать;
				
			КонецЕсли;
			
			ОпцииПечатиСчетаФактуры.Вставить("Макет", Макет);
			
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ПервыйДокумент = Ложь;
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			ТекстПредставленияКомиссионера = "";
			ВыборкаПоставщиков = Неопределено;
			Если ДанныеДляПечати.Свойство("РезультатПоПоставщикам")
				И ДанныеПечати.ПеревыставленныйСчетФактура
				И (ЕстьПостановление981 Или ЕстьПостановление534) Тогда
				ВыборкаПоставщиков = ДанныеДляПечати.РезультатПоПоставщикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				СведенияОКомиссионере = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
				
				ДополнительноеПредставление = "";
				Если ДействующиеПостановления.Постановление914 И СведенияОКомиссионере.ОфициальноеНаименование <> СведенияОКомиссионере.ПолноеНаименование Тогда
					ДополнительноеПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '(%1)';
							|en = '(%1)'"),
						ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКомиссионере, "ПолноеНаименование"));
				КонецЕсли;
				
				ПредставлениеКомиссионера = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1 %2';
						|en = '%1 %2'"),
					СведенияОКомиссионере.ПолноеНаименование,
					ДополнительноеПредставление));
					
				АдресКомиссионера = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1';
						|en = '%1'"),
					ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКомиссионере, "ЮридическийАдрес"));
					
				ИННКомиссионера = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1/%2';
						|en = '%1/%2'"),
					ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКомиссионере, "ИНН", Ложь),
					ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКомиссионере, "КПП", Ложь));

				ТекстПредставленияКомиссионера = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Составлен комиссионером (агентом):%1, %2, ИНН/КПП: %3';
						|en = 'Completed by consignee (agent):%1, %2, TIN/CRTR: %3'"),
					ПредставлениеКомиссионера, АдресКомиссионера, ИННКомиссионера);

			ИначеЕсли ЕстьПостановление534 Тогда
				ТекстПредставленияКомиссионера = ДанныеПечати.ПредставлениеВыставленКомиссионеру;
			КонецЕсли;
				
			// Выводим общие реквизиты шапки
			СведенияОбОрганизации = Новый Структура;
			ЗаполнитьРеквизитыШапкиСчетФактура(
				ДанныеПечати,
				ВыборкаОснований,
				СведенияОбОрганизации,
				ВыборкаКонтрагентов,
				ТабличныйДокумент,
				ОпцииПечатиСчетаФактуры,
				ВыборкаПоставщиков);
			
			// Выводим заголовок таблицы
			ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
			Если ДействующиеПостановления.Постановление914 И Не ДанныеПечати.КорректировочныйСчетФактура Тогда
				СтруктураПараметров = Новый Структура;
				Если ОпцииПечатиСчетаФактуры.ПечатьВВалюте Тогда
					СтруктураПараметров.Вставить("Валюта", ДанныеПечати.Валюта)
				Иначе
					СтруктураПараметров.Вставить("Валюта", ВалютаРегламентированногоУчета);
				КонецЕсли;
				ЗаголовокТаблицы.Параметры.Заполнить(СтруктураПараметров);
			КонецЕсли;
			ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
			
			НомерСтраницы = 1;
			
			// Инициализация итогов в документе
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				ИтоговыеСуммы = СтруктураИтоговыеСуммы2_5();
			Иначе
				ИтоговыеСуммы = СтруктураИтоговыеСуммы();
			КонецЕсли;
			
			// Создаем массив для проверки вывода
			МассивВыводимыхОбластей = Новый Массив;
			
			// Выводим многострочную часть документа
			Если ОпцииПечатиСчетаФактуры.СчетФактураНаАванс И ДанныеПечати.КорректировочныйСчетФактура И Не ИспользоватьПечатныеФормыСФ2_5 Тогда
				ОбластьМакетаСтандарт = Макет.ПолучитьОбласть("СтрокаАвансы");
			Иначе
				ОбластьМакетаСтандарт = Макет.ПолучитьОбласть("Строка");
			КонецЕсли;
			ОбластьИтого = Макет.ПолучитьОбласть("Итого");
			ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");
			ВыводитьОбластьКомиссионера = Ложь;
			
			Если Не ПустаяСтрока(ТекстПредставленияКомиссионера) Тогда
				ОбластьКомиссионера = Макет.ПолучитьОбласть("РеквизитыКомиссионера");
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("ПредставлениеКомиссионера",ТекстПредставленияКомиссионера);
				ОбластьКомиссионера.Параметры.Заполнить(СтруктураПараметров);
				ВыводитьОбластьКомиссионера = Истина;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
			ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
			
			ИспользоватьНаборы = Ложь;
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ВыборкаПоДокументам, "ЭтоНабор") Тогда
				ИспользоватьНаборы = Истина;
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					ОбластьМакетаНабор         = Макет.ПолучитьОбласть("Строка");
					ОбластьМакетаКомплектующие = Макет.ПолучитьОбласть("Строка");
				Иначе
					ОбластьМакетаНабор         = Макет.ПолучитьОбласть("СтрокаНабор");
					ОбластьМакетаКомплектующие = Макет.ПолучитьОбласть("СтрокаКомплектующие");
				КонецЕсли;
			КонецЕсли;
			
			ЗаполнитьРеквизитыПодвалаСчетФактура(ОбластьПодвала, ДанныеПечати, СведенияОбОрганизации);
			
			ВыводитьКодыТНВЭД = ВыводитьКодыТНВЭД(ДанныеПечати, ДействующиеПостановления.Постановление981);
			
			ОперацияОблагаетсяНДСУПокупателя = Ложь;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеПечати,"НалогообложениеНДС") 
				И ДанныеПечати.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя Тогда
				ОперацияОблагаетсяНДСУПокупателя = Истина;
			КонецЕсли;
			
			СтрокаТовары = ВыборкаПоДокументам.Выбрать();
			КоличествоСтрок = СтрокаТовары.Количество();
			ТолькоСтавкаБезНДС = Истина;
			НомерСтроки = 0;
			ПрефиксНабора = "";
			ТекущаяНоменклатураНабора = Справочники.Номенклатура.ПустаяСсылка();
			ТекущаяХарактеристикаНабора = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			Пока СтрокаТовары.Следующий() Цикл
			СтрокаБезРасхождений = ДанныеПечати.КорректировочныйСчетФактура
									И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТовары, "РазницаБезНДСУвеличение")
									И СтрокаТовары.РазницаБезНДСУвеличение = СтрокаТовары.РазницаБезНДСУменьшение
									И СтрокаТовары.РазницаНДСУвеличение = СтрокаТовары.РазницаНДСУменьшение
									И СтрокаТовары.РазницаСНДСУвеличение = СтрокаТовары.РазницаСНДСУменьшение;
			Если Не СтрокаБезРасхождений Тогда
				Если ПрослеживаемыеТовары <> Неопределено Тогда
					ПрослеживаемыеТоварыСтрокаТовары = ПрослеживаемыеТовары.НайтиСтроки(Новый Структура("НомерСтрокиСФ", СтрокаТовары.НомерСтроки));
				Иначе
					ПрослеживаемыеТоварыСтрокаТовары = Неопределено;
				КонецЕсли;
				
				Если ДанныеПечати.КорректировочныйСчетФактура Тогда
					ОбластьМакета = ОбластьМакетаСтандарт;
				ИначеЕсли НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) Тогда
					ОбластьМакета = ОбластьМакетаНабор;
				ИначеЕсли НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
					ОбластьМакета = ОбластьМакетаКомплектующие;
				Иначе
					ОбластьМакета = ОбластьМакетаСтандарт;
				КонецЕсли;
				
				ПараметрыПечати = Новый Структура("Корректировочный,СчетФактураНаАванс,ЕстьПрослеживаемыеТовары", ДанныеПечати.КорректировочныйСчетФактура, ОпцииПечатиСчетаФактуры.СчетФактураНаАванс, ДанныеПечати.ЕстьПрослеживаемыеТовары);
				
				Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
					КоличествоСтрок = КоличествоСтрок - 1;
					Если ИспользоватьПечатныеФормыСФ2_5 Тогда
						ЗаполнитьРеквизитыСтрокиТовара2_5(СтрокаТовары,
													   ПрослеживаемыеТоварыСтрокаТовары,
													   ОбластьМакета,
													   Неопределено,
													   ПараметрыПечати,
													   ДанныеПечати.КорректировочныйСчетФактура,
													   ВыводитьКодыТНВЭД,
													   ВыводитьСерии);
													   
						Если НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) 
							И ДанныеПечати.КорректировочныйСчетФактура Тогда
							ПрефиксНабора = ОбластьМакета.Параметры.ТоварНаименование;
							ТекущаяНоменклатураНабора = СтрокаТовары.НоменклатураНабора;
							ТекущаяХарактеристикаНабора = СтрокаТовары.ХарактеристикаНабора;
						КонецЕсли;
					Иначе
						ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, 
													   ОбластьМакета, 
													   Неопределено, 
													   ДанныеПечати.КорректировочныйСчетФактура, 
													   ВыводитьКодыТНВЭД, 
													   ВыводитьСерии,
													   ОпцииПечатиСчетаФактуры.СчетФактураНаАванс);
													   
						Если НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) 
							И ДанныеПечати.КорректировочныйСчетФактура Тогда
							ПрефиксНабора = ОбластьМакета.Параметры.ПредставлениеНоменклатуры;
							ТекущаяНоменклатураНабора = СтрокаТовары.НоменклатураНабора;
							ТекущаяХарактеристикаНабора = СтрокаТовары.ХарактеристикаНабора;
						КонецЕсли;
					КонецЕсли;
				Иначе
					НомерСтроки = НомерСтроки + 1;
					Если ИспользоватьПечатныеФормыСФ2_5 И Не (ОпцииПечатиСчетаФактуры.СчетФактураНаАванс И ДанныеПечати.КорректировочныйСчетФактура) Тогда
						ЗаполнитьРеквизитыСтрокиТовара2_5(СтрокаТовары,
													   ПрослеживаемыеТоварыСтрокаТовары,
													   ОбластьМакета,
													   СтрокаТовары.НомерСтроки,
													   ПараметрыПечати,
													   ДанныеПечати.КорректировочныйСчетФактура,
													   ВыводитьКодыТНВЭД,
													   ВыводитьСерии);
						ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьМакета);
						
						Если НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) 
							И ПрефиксНабора <> ""
							И СтрокаТовары.НоменклатураНабора = ТекущаяНоменклатураНабора
							И СтрокаТовары.ХарактеристикаНабора = ТекущаяХарактеристикаНабора Тогда
							ОбластьМакета.Параметры.ТоварНаименование = ПрефиксНабора
																				+ Символы.ПС
																				+ ОбластьМакета.Параметры.ТоварНаименование;
						КонецЕсли;
					Иначе
						ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, 
													   ОбластьМакета, 
													   СтрокаТовары.НомерСтроки, 
													   ДанныеПечати.КорректировочныйСчетФактура, 
													   ВыводитьКодыТНВЭД, 
													   ВыводитьСерии,
													   ОпцииПечатиСчетаФактуры.СчетФактураНаАванс);
						ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьМакета);
						
						Если НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) 
							И ПрефиксНабора <> ""
							И СтрокаТовары.НоменклатураНабора = ТекущаяНоменклатураНабора
							И СтрокаТовары.ХарактеристикаНабора = ТекущаяХарактеристикаНабора Тогда
							ОбластьМакета.Параметры.ПредставлениеНоменклатуры = ПрефиксНабора
																				+ Символы.ПС
																				+ ОбластьМакета.Параметры.ПредставлениеНоменклатуры;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				СтруктураПараметров = Новый Структура;
				Если ОперацияОблагаетсяНДСУПокупателя Тогда
					Если ИспользоватьПечатныеФормыСФ2_5 Тогда
						СтруктураПараметров.Вставить("СтавкаНДС",               НСтр("ru = 'НДС исчисляется налоговым агентом';
																					|en = 'VAT is calculated by tax agent'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СтавкаНДСДоИзменения",    НСтр("ru = 'НДС исчисляется налоговым агентом';
																					|en = 'VAT is calculated by tax agent'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СтавкаНДСПослеИзменения", НСтр("ru = 'НДС исчисляется налоговым агентом';
																					|en = 'VAT is calculated by tax agent'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СуммаНДСПослеИзменения", "--");
						СтруктураПараметров.Вставить("СуммаНДСДоИзменения", "--");
						СтруктураПараметров.Вставить("СтоимостьСНДСПослеИзменения", "--");
						СтруктураПараметров.Вставить("СтоимостьСНДСДоИзменения", "--");
						СтруктураПараметров.Вставить("Всего", "--");
					Иначе
						СтруктураПараметров.Вставить("СтавкаНДС", НСтр("ru = 'НДС исчисляется налоговым агентом';
																		|en = 'VAT is calculated by tax agent'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СуммаНДС", "--");
						СтруктураПараметров.Вставить("СуммаНДСДо", "--");
						СтруктураПараметров.Вставить("СуммаСНДС", "--");
						СтруктураПараметров.Вставить("СуммаСНДСДо", "--");
					КонецЕсли;
					СтруктураПараметров.Вставить("РазницаНДСУменьшение", "--");
					СтруктураПараметров.Вставить("РазницаНДСУвеличение", "--");
					СтруктураПараметров.Вставить("РазницаСНДСУменьшение", "--");
					СтруктураПараметров.Вставить("РазницаСНДСУвеличение", "--");
					Если ОпцииПечатиСчетаФактуры.СчетФактураНаАванс Тогда
						Если ИспользоватьПечатныеФормыСФ2_5 Тогда
							СтруктураПараметров.Вставить("Стоимость", СтрокаТовары.СуммаСНДС);
						Иначе
							СтруктураПараметров.Вставить("СуммаБезНДС", СтрокаТовары.СуммаСНДС);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли СтрокаТовары.СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда
					Если ИспользоватьПечатныеФормыСФ2_5 Тогда
						СтруктураПараметров.Вставить("СтавкаНДСДоИзменения", НСтр("ru = 'без НДС';
																					|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СтавкаНДСПослеИзменения", НСтр("ru = 'без НДС';
																					|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СуммаНДСПослеИзменения", НСтр("ru = 'без НДС';
																					|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СуммаНДСДоИзменения", НСтр("ru = 'без НДС';
																				|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
					Иначе
						СтруктураПараметров.Вставить("СтавкаНДС", НСтр("ru = 'без НДС';
																		|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СуммаНДС", НСтр("ru = 'без НДС';
																		|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СуммаНДСДо", НСтр("ru = 'без НДС';
																		|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
					КонецЕсли;
				ИначеЕсли СтрокаТовары.СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.НДС0) Тогда
					Если ИспользоватьПечатныеФормыСФ2_5 Тогда
						СтруктураПараметров.Вставить("СуммаНДСПослеИзменения", 0);
						СтруктураПараметров.Вставить("СуммаНДСДоИзменения", 0);
					Иначе
						СтруктураПараметров.Вставить("СуммаНДС", 0);
						СтруктураПараметров.Вставить("СуммаНДСДо", 0);
					КонецЕсли;
					ТолькоСтавкаБезНДС = Ложь;
				Иначе
					ТолькоСтавкаБезНДС = Ложь;
				КонецЕсли;
				
				Если Не НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
					Если ДействующиеПостановления.Постановление914 
						ИЛИ ОпцииПечатиСчетаФактуры.СчетФактураНаАванс
						ИЛИ ОпцииПечатиСчетаФактуры.СчетФактураНалоговыйАгент Тогда
						СтруктураПараметров.Вставить("Акциз", "--");
					Иначе
						СтруктураПараметров.Вставить("Акциз", НСтр("ru = 'без акциза';
																	|en = 'no excise'", Метаданные.Языки.Русский.КодЯзыка));
					КонецЕсли;
				КонецЕсли;
				
				МассивВыводимыхОбластей.Очистить();
				
				Если Не(НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) 
					И ДанныеПечати.КорректировочныйСчетФактура) Тогда
			
					ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
					МассивВыводимыхОбластей.Добавить(ОбластьМакета);
					
					Если НомерСтроки = КоличествоСтрок Тогда
						МассивВыводимыхОбластей.Добавить(ОбластьИтого);
						МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
						
						Если ВыводитьОбластьКомиссионера Тогда
							МассивВыводимыхОбластей.Добавить(ОбластьКомиссионера);
						КонецЕсли;
						
					КонецЕсли;
					
					Если НЕ ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
						
						НомерСтраницы = НомерСтраницы + 1;
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						
						Если Не ДействующиеПостановления.Постановление914 Тогда
							
							ОбластьНумерацияЛистов = Макет.ПолучитьОбласть("НумерацияЛистов");
							Если ОпцииПечатиСчетаФактуры.НомерСформированВСчетеФактуре Тогда
								ОбластьНумерацияЛистов.Параметры.Номер = ДанныеПечати.Номер;
							Иначе
								ОбластьНумерацияЛистов.Параметры.Номер = НомерСчетаФактурыНаПечать(ДанныеПечати.Номер, ДанныеПечати.ИндексПодразделения);
							КонецЕсли;
							Если Не ИспользоватьПечатныеФормыСФ2_5 Или ДанныеПечати.КорректировочныйСчетФактура Тогда
								ОбластьНумерацияЛистов.Параметры.Дата = Формат(ДанныеПечати.Дата, "ДЛФ=ДД; ДП=--");
							КонецЕсли;
							ОбластьНумерацияЛистов.Параметры.НомерЛиста = НомерСтраницы;
							
							ТабличныйДокумент.Вывести(ОбластьНумерацияЛистов);
							
						КонецЕсли;
						
						ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
						
					КонецЕсли;
				
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЕсли;
				
				Если Не НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
					Если ИспользоватьПечатныеФормыСФ2_5 Тогда
						РассчитатьИтоговыеСуммы2_5(ИтоговыеСуммы, СтрокаТовары);
					Иначе
						РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
			
			// Выводим итоги по документу
			ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, НомерСтроки, ВалютаРегламентированногоУчета);
			
			Если ДействующиеПостановления.Постановление1137
				И (НЕ ОпцииПечатиСчетаФактуры.СчетФактураНаАванс)
				И (НЕ ДанныеПечати.КорректировочныйСчетФактура)
				И ТолькоСтавкаБезНДС Тогда
				ИтоговыеСуммы.ИтогоСуммаНДС = НСтр("ru = 'без НДС';
													|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка);
			КонецЕсли;
			
			Если ДанныеПечати.КорректировочныйСчетФактура
				И ТолькоСтавкаБезНДС Тогда
					Если ИспользоватьПечатныеФормыСФ2_5 Тогда
						ИтоговыеСуммы.Вставить("РазницаНДСУвеличение", НСтр("ru = 'без НДС';
																			|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
						ИтоговыеСуммы.Вставить("РазницаНДСУменьшение", НСтр("ru = 'без НДС';
																			|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
					Иначе
						ИтоговыеСуммы.Вставить("ИтогоРазницаНДСУвеличение", НСтр("ru = 'без НДС';
																				|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
						ИтоговыеСуммы.Вставить("ИтогоРазницаНДСУменьшение", НСтр("ru = 'без НДС';
																				|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
					КонецЕсли;
			КонецЕсли;
			
			Если ОперацияОблагаетсяНДСУПокупателя Тогда
				Если ОпцииПечатиСчетаФактуры.СчетФактураНаАванс Тогда
					Если ИспользоватьПечатныеФормыСФ2_5 Тогда
						ИтоговыеСуммы.Вставить("ИтогоСтоимость", ИтоговыеСуммы.ИтогоСтоимость);
					Иначе
						ИтоговыеСуммы.Вставить("ИтогоСуммаБезНДС", ИтоговыеСуммы.ИтогоСуммаСНДС);
						ИтоговыеСуммы.Вставить("ИтогоСуммаБезНДСНаСтранице", ИтоговыеСуммы.ИтогоСуммаСНДСНаСтранице);
					КонецЕсли;
				КонецЕсли;
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					ИтоговыеСуммы.Вставить("ИтогоСуммаНДС", "--");
					ИтоговыеСуммы.Вставить("ИтогоСуммаНДСНаСтранице", "--");
					ИтоговыеСуммы.Вставить("ИтогоВсего", "--");
					ИтоговыеСуммы.Вставить("ИтогоВсегоНаСтранице", "--");
					Если ИтоговыеСуммы.РазницаСНДСУменьшение <> 0 Тогда
						ИтоговыеСуммы.Вставить("РазницаСНДСУменьшение", "--");
						ИтоговыеСуммы.Вставить("РазницаСНДСУменьшениеНаСтранице", "--");
						ИтоговыеСуммы.Вставить("РазницаНДСУменьшение", "--");
						ИтоговыеСуммы.Вставить("РазницаНДСУменьшениеНаСтранице", "--");
					КонецЕсли;
					Если ИтоговыеСуммы.РазницаСНДСУвеличение <> 0 Тогда
						ИтоговыеСуммы.Вставить("РазницаСНДСУвеличение", "--");
						ИтоговыеСуммы.Вставить("РазницаСНДСУвеличениеНаСтранице", "--");
						ИтоговыеСуммы.Вставить("РазницаНДСУвеличение", "--");
						ИтоговыеСуммы.Вставить("РазницаНДСУвеличениеНаСтранице", "--");
					КонецЕсли;
				Иначе
					ИтоговыеСуммы.Вставить("ИтогоСуммаНДС", "--");
					ИтоговыеСуммы.Вставить("ИтогоСуммаНДСНаСтранице", "--");
					ИтоговыеСуммы.Вставить("ИтогоСуммаСНДС", "--");
					ИтоговыеСуммы.Вставить("ИтогоСуммаСНДСНаСтранице", "--");
					Если ИтоговыеСуммы.ИтогоРазницаСНДСУменьшение <> 0 Тогда
						ИтоговыеСуммы.Вставить("ИтогоРазницаСНДСУменьшение", "--");
						ИтоговыеСуммы.Вставить("ИтогоРазницаСНДСУменьшениеНаСтранице", "--");
						ИтоговыеСуммы.Вставить("ИтогоРазницаНДСУменьшение", "--");
						ИтоговыеСуммы.Вставить("ИтогоРазницаНДСУменьшениеНаСтранице", "--");
					КонецЕсли;
					Если ИтоговыеСуммы.ИтогоРазницаСНДСУвеличение <> 0 Тогда
						ИтоговыеСуммы.Вставить("ИтогоРазницаСНДСУвеличение", "--");
						ИтоговыеСуммы.Вставить("ИтогоРазницаСНДСУвеличениеНаСтранице", "--");
						ИтоговыеСуммы.Вставить("ИтогоРазницаНДСУвеличение", "--");
						ИтоговыеСуммы.Вставить("ИтогоРазницаНДСУвеличениеНаСтранице", "--");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ОбластьИтого.Параметры.Заполнить(ИтоговыеСуммы);
			ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьИтого);
			ТабличныйДокумент.Вывести(ОбластьИтого);
			
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				УдалитьВсеОбластиФаксимиле(ОбластьПодвала);
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьПодвала);
			
			Если ВыводитьОбластьКомиссионера Тогда
				ТабличныйДокумент.Вывести(ОбластьКомиссионера);
			КонецЕсли;
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СообщитьОбОшибкахПечатиСчетФактурыПоОснованиям(ТаблицаОшибок, ПечатьКомиссионеру = Ложь)
	
	Если ПечатьКомиссионеру Тогда
		ПредставлениеДокумента = НСтр("ru = 'счет-фактура комиссионера';
										|en = 'consignee tax invoice'");
	Иначе
		ПредставлениеДокумента = НСтр("ru = 'счет-фактура';
										|en = 'tax invoice'");
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
		
		ТекстОшибки = "";
		ПутьКДанным = "";
		
		Если СтрокаТаблицы.НеТребуетсяСчетФактура Тогда
			ТекстОшибки = НСтр("ru = 'Для документа %1 не требуется %2';
								|en = '%2 is not required for document %1'");
		ИначеЕсли СтрокаТаблицы.НеТребуетсяПечатьВВалюте Тогда
			ТекстОшибки = НСтр("ru = 'Для документа %1 не требуется %2 в иностранной валюте';
								|en = '%2 in a foreign currency is not required for document %1'");
		ИначеЕсли СтрокаТаблицы.НеВыставленСчетФактура Тогда
			ТекстОшибки = НСтр("ru = 'Для документа %1 не введен %2';
								|en = '%2 is not entered for document %1'");
			ПутьКДанным = "ТекстСчетФактура";
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОшибки,
				СтрокаТаблицы.ДокументОснование,
				ПредставлениеДокумента);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, СтрокаТаблицы.ДокументОснование, , ПутьКДанным);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СообщитьОбОшибкахПечатиСчетФактурыПолученного(ТаблицаОшибок)
	
	Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
		
		ТекстОшибки = "";
		ПутьКДанным = "";
		
		Если СтрокаТаблицы.НеТребуетсяСчетФактура Тогда
			Продолжить;
		ИначеЕсли СтрокаТаблицы.НеТребуетсяПечатьВВалюте Тогда
			ТекстОшибки = НСтр("ru = 'Для документа %1 не требуется %2 в иностранной валюте';
								|en = '%2 in a foreign currency is not required for document %1'");
		ИначеЕсли СтрокаТаблицы.НеВыставленСчетФактура Тогда
			ТекстОшибки = НСтр("ru = 'Для документа %1 не введен %2';
								|en = '%2 is not entered for document %1'");
			ПутьКДанным = "ПредъявленСчетФактура";
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОшибки,
				СтрокаТаблицы.ДокументОснование,
				НСтр("ru = 'счет-фактура посредника';
					|en = 'intermediary tax invoice'"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, СтрокаТаблицы.ДокументОснование, ПутьКДанным);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СтруктураИтоговыеСуммы()
	
	Структура = Новый Структура;
	
	СтруктураРесурсовДляИтогов = СтруктураРесурсовДляИтогов();
	
	Для Каждого Элемент Из СтруктураРесурсовДляИтогов Цикл
		Структура.Вставить("Итого"+Элемент.Ключ+"НаСтранице", 0);
		Структура.Вставить("Итого"+Элемент.Ключ, 0);
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

Функция СтруктураИтоговыеСуммы2_5()
	
	Структура = Новый Структура;
	
	Структура.Вставить("ИтогоСтоимость",    0);
	Структура.Вставить("ИтогоСуммаНДС",     0);
	Структура.Вставить("ИтогоВсего",        0);
	Структура.Вставить("Количество",        0);
	Структура.Вставить("КоличествоМест",    0);
	Структура.Вставить("КоличествоПринято", 0);
	Структура.Вставить("МассаБрутто",       0);
	Структура.Вставить("МассаНетто",        0);
	Структура.Вставить("Сумма",             0);
	
	Структура.Вставить("РазницаБезНДСУвеличение", 0);
	Структура.Вставить("РазницаБезНДСУменьшение", 0);
	Структура.Вставить("РазницаНДСУвеличение",    0);
	Структура.Вставить("РазницаНДСУменьшение",    0);
	Структура.Вставить("РазницаСНДСУвеличение",   0);
	Структура.Вставить("РазницаСНДСУменьшение",   0);
	Структура.Вставить("КоличествоПрослежУвеличение", 0);
	Структура.Вставить("КоличествоПрослежУменьшение", 0);
	Структура.Вставить("КоличествоПрослежУвеличениеВсего", 0);
	Структура.Вставить("КоличествоПрослежУменьшениеВсего", 0);
	
	Возврат Структура;
	
КонецФункции

Процедура ОбнулитьИтогиПоСтранице(ИтоговыеСуммы)
	
	СтруктураРесурсовДляИтогов = СтруктураРесурсовДляИтогов();
	
	Для Каждого Элемент Из СтруктураРесурсовДляИтогов Цикл
		ИтоговыеСуммы.Вставить("Итого"+Элемент.Ключ+"НаСтранице", 0);
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары)
	
	СтруктураСуммПоСтроке = СтруктураРесурсовДляИтогов();
	
	ЗаполнитьЗначенияСвойств(СтруктураСуммПоСтроке, СтрокаТовары);
	ОкруглитьДоЦелого(СтруктураСуммПоСтроке.КоличествоМест);
	Для Каждого Элемент Из СтруктураСуммПоСтроке Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			ИтоговыеСуммы["Итого"+Элемент.Ключ+"НаСтранице"] = ИтоговыеСуммы["Итого"+Элемент.Ключ+"НаСтранице"] + Элемент.Значение;
			ИтоговыеСуммы["Итого"+Элемент.Ключ] = ИтоговыеСуммы["Итого"+Элемент.Ключ] + Элемент.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьИтоговыеСуммы2_5(ИтоговыеСуммы, СтрокаТовары)
	
	СтруктураСуммПоСтроке = СтруктураИтоговыеСуммы2_5();
	
	ЗаполнитьЗначенияСвойств(СтруктураСуммПоСтроке, СтрокаТовары);
	СтруктураСуммПоСтроке.ИтогоСтоимость = СтрокаТовары.СуммаБезНДС;
	СтруктураСуммПоСтроке.ИтогоСуммаНДС  = СтрокаТовары.СуммаНДС;
	СтруктураСуммПоСтроке.ИтогоВсего     = СтрокаТовары.СуммаСНДС;
	
	ОкруглитьДоЦелого(СтруктураСуммПоСтроке.КоличествоМест);
	Для Каждого Элемент Из СтруктураСуммПоСтроке Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			Если Элемент.Ключ = "КоличествоПрослежУвеличение" Тогда
				ИтоговыеСуммы["КоличествоПрослежУвеличениеВсего"] = ИтоговыеСуммы["КоличествоПрослежУвеличениеВсего"] + Элемент.Значение;
			ИначеЕсли Элемент.Ключ = "КоличествоПрослежУменьшение" Тогда
				ИтоговыеСуммы["КоличествоПрослежУменьшениеВсего"] = ИтоговыеСуммы["КоличествоПрослежУменьшениеВсего"] + Элемент.Значение;
			Иначе
				ИтоговыеСуммы[Элемент.Ключ] = ИтоговыеСуммы[Элемент.Ключ] + Элемент.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, ВсегоНомеров, ВалютаРегламентированногоУчета)
	
	ИтоговыеСуммы.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", ЧислоПрописью(ВсегоНомеров, ,",,,,,,,,0"));
	Если ИтоговыеСуммы.Свойство("ИтогоВсего") Тогда
		ИтоговыеСуммы.Вставить("СуммаПрописью", РаботаСКурсамиВалютУТ.СформироватьСуммуПрописью(ИтоговыеСуммы.ИтогоВсего, ВалютаРегламентированногоУчета));
	Иначе
		ИтоговыеСуммы.Вставить("СуммаПрописью", РаботаСКурсамиВалютУТ.СформироватьСуммуПрописью(ИтоговыеСуммы.ИтогоСуммаСНДС, ВалютаРегламентированногоУчета));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьМакета, НомерСтроки, ВыводитьКодНоменклатуры = Истина, ВыводитьКодТНВД = Неопределено, ВыводитьСерии = Ложь, СчетФактураНаАванс = Ложь)
	
	ИспользоватьНаборы = ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаТовары, "ЭтоНабор");
	
	ПрефиксИПостфикс = НаборыСервер.ПолучитьПрефиксИПостфикс(СтрокаТовары, ИспользоватьНаборы);
	
	ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КоличествоМест", 0);
	СтруктураПараметров.Вставить("КоличествоВОдномМесте", 0);
	СтруктураПараметров.Вставить("НоменклатураКод", "");
	СтруктураПараметров.Вставить("КодТНВЭД", "--");
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтрокаТовары);
	ОкруглитьДоЦелого(СтруктураПараметров.КоличествоМест);
	СтруктураПараметров.Вставить("НомерСтроки", НомерСтроки);
	
	ДополнительныеПараметрыПолученияНаименованияДляПечати = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
	ДополнительныеПараметрыПолученияНаименованияДляПечати.ВозвратнаяТара = СтрокаТовары.ЭтоВозвратнаяТара;	
	ДополнительныеПараметрыПолученияНаименованияДляПечати.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	Если ВыводитьКодТНВД <> Неопределено Тогда
		ДополнительныеПараметрыПолученияНаименованияДляПечати.КодТНВЭД = ?(НЕ ВыводитьКодТНВД.ВыводитьВКолонке И ВыводитьКодТНВД.ВыводитьВСтроке, СтрокаТовары.КодТНВЭД, "");
		Если НЕ ВыводитьКодТНВД.ВыводитьВКолонке Тогда
			СтруктураПараметров.КодТНВЭД = "--";
		КонецЕсли;
	КонецЕсли;
	СерияНаименование = Неопределено;
	Если ВыводитьСерии Тогда
		СерияНаименование = СтрокаТовары.СерияНаименование;
	КонецЕсли;	
	ПредставлениеНоменклатуры =  ПрефиксИПостфикс.Префикс
		+ НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			Строка(СтрокаТовары.НоменклатураНаименование),
			СтрокаТовары.ХарактеристикаНаименование,
			,
			СерияНаименование,
			ДополнительныеПараметрыПолученияНаименованияДляПечати)
		+ ПрефиксИПостфикс.Постфикс;
	
	СтруктураПараметров.Вставить("ПредставлениеНоменклатуры", ПредставлениеНоменклатуры);
		
	Если Не ВыводитьКодНоменклатуры Тогда
		СтруктураПараметров.НоменклатураКод = "";
	КонецЕсли;
	ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
	
	Если ИспользоватьНаборы
		И СтрокаТовары.ЭтоКомплектующие
		И СтрокаТовары.ВариантПредставленияНабораВПечатныхФормах = Перечисления.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие
		И (СтрокаТовары.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям
		   ИЛИ СтрокаТовары.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам) Тогда
		// Область должна остаться незаполненной
		ОбластьМакета.Параметры.Заполнить(НаборыСервер.ПустыеДанные());
	ИначеЕсли ИспользоватьНаборы
		И СтрокаТовары.ЭтоНабор
		И СтрокаТовары.ВариантПредставленияНабораВПечатныхФормах = Перечисления.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие
		И (СтрокаТовары.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих
			ИЛИ СчетФактураНаАванс) Тогда
		// Область должна остаться незаполненной
		ОбластьМакета.Параметры.Заполнить(НаборыСервер.ПустыеДанные());
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыСтрокиТовара2_5(СтрокаТовары, ПрослеживаемыеТовары, ОбластьМакета, НомерСтроки, ПараметрыПечати, ВыводитьКодНоменклатуры = Истина, ВыводитьКодТНВД = Неопределено, ВыводитьСерии = Ложь)
	
	ИспользоватьНаборы = ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаТовары, "ЭтоНабор");
	
	ПрефиксИПостфикс = НаборыСервер.ПолучитьПрефиксИПостфикс(СтрокаТовары, ИспользоватьНаборы);
	
	ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КоличествоМест", 0);
	СтруктураПараметров.Вставить("КоличествоВОдномМесте", 0);
	СтруктураПараметров.Вставить("ТоварКод", "");
	СтруктураПараметров.Вставить("ТоварКодТНВЭД", "--");
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтрокаТовары);
	
	ЕстьКодТНВЭД = ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаТовары, "КодТНВЭД");
	Если Не ПараметрыПечати.СчетФактураНаАванс Тогда
		СтруктураПараметров.Вставить("ТоварКод", СтрокаТовары.НоменклатураКод);
		Если ЕстьКодТНВЭД Тогда
			СтруктураПараметров.Вставить("ТоварКодТНВЭД", СтрокаТовары.КодТНВЭД);
		КонецЕсли;
	КонецЕсли;
	
	ОкруглитьДоЦелого(СтруктураПараметров.КоличествоМест);
	СтруктураПараметров.Вставить("НомерСтроки", НомерСтроки);
	СтруктураПараметров.Вставить("НомерСтрокиУКД", НомерСтроки);
	
	ДополнительныеПараметрыПолученияНаименованияДляПечати = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
	ДополнительныеПараметрыПолученияНаименованияДляПечати.ВозвратнаяТара = СтрокаТовары.ЭтоВозвратнаяТара;	
	ДополнительныеПараметрыПолученияНаименованияДляПечати.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	Если ВыводитьКодТНВД <> Неопределено Тогда
		ДополнительныеПараметрыПолученияНаименованияДляПечати.КодТНВЭД = ?(НЕ ВыводитьКодТНВД.ВыводитьВКолонке И ВыводитьКодТНВД.ВыводитьВСтроке, СтрокаТовары.КодТНВЭД, "");
		Если НЕ ВыводитьКодТНВД.ВыводитьВКолонке Тогда
			СтруктураПараметров.ТоварКодТНВЭД = "--";
		КонецЕсли;
	КонецЕсли;
	СерияНаименование = Неопределено;
	Если ВыводитьСерии Тогда
		СерияНаименование = СтрокаТовары.СерияНаименование;
	КонецЕсли;
	ПредставлениеНоменклатуры =  ПрефиксИПостфикс.Префикс
		+ НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			Строка(СтрокаТовары.НоменклатураНаименование),
			СтрокаТовары.ХарактеристикаНаименование,
			,
			СерияНаименование,
			ДополнительныеПараметрыПолученияНаименованияДляПечати)
		+ ПрефиксИПостфикс.Постфикс;
	
	Если ПараметрыПечати.Корректировочный Тогда
		СтруктураПараметров.Вставить("СтрокаДо",                      "А (до изменения)");
		СтруктураПараметров.Вставить("СтрокаПосле",                   "Б (после изменения)");
		СтруктураПараметров.Вставить("СтрокаУвеличение",              "В (увеличение)");
		СтруктураПараметров.Вставить("СтрокаУменьшение",              "Г (уменьшение)");
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаТовары, "НомерСтрокиИсходногоСФ") Тогда
			СтруктураПараметров.Вставить("НомерСтроки", СтрокаТовары.НомерСтрокиИсходногоСФ);
		Иначе
			СтруктураПараметров.Вставить("НомерСтроки", СтрокаТовары.НомерСтроки);
		КонецЕсли;
		СтруктураПараметров.Вставить("ТоварКодТНВЭДДоИзменения",      СтрокаТовары.КодТНВЭД);
		СтруктураПараметров.Вставить("НаименованиеНоменклатуры",      ПредставлениеНоменклатуры);
		СтруктураПараметров.Вставить("НаименованиеЕдиницыИзмерения",  СтрокаТовары.ЕдиницаИзмеренияНаименование);
		СтруктураПараметров.Вставить("КоличествоДоИзменения",         СтрокаТовары.КоличествоДо);
		СтруктураПараметров.Вставить("КоличествоПослеИзменения",      СтрокаТовары.Количество);
		СтруктураПараметров.Вставить("ЦенаДоИзменения",               СтрокаТовары.ЦенаДо);
		СтруктураПараметров.Вставить("ЦенаПослеИзменения",            СтрокаТовары.Цена);
		СтруктураПараметров.Вставить("СтоимостьБезНДСДоИзменения",    СтрокаТовары.СуммаБезНДСДо);
		СтруктураПараметров.Вставить("СтоимостьБезНДСПослеИзменения", СтрокаТовары.СуммаБезНДС);
		СтруктураПараметров.Вставить("СтавкаНДСДоИзменения",          СтрокаТовары.СтавкаНДС);
		СтруктураПараметров.Вставить("СтавкаНДСПослеИзменения",       СтрокаТовары.СтавкаНДС);
		СтруктураПараметров.Вставить("СуммаНДСДоИзменения",           СтрокаТовары.СуммаНДСДо);
		СтруктураПараметров.Вставить("СуммаНДСПослеИзменения",        СтрокаТовары.СуммаНДС);
		СтруктураПараметров.Вставить("СтоимостьСНДСДоИзменения",      СтрокаТовары.СуммаСНДСДо);
		СтруктураПараметров.Вставить("СтоимостьСНДСПослеИзменения",   СтрокаТовары.СуммаСНДС);
		СтруктураПараметров.Вставить("СтранаПроисхожденияКодДо",      СтрокаТовары.СтранаПроисхожденияКод);
		СтруктураПараметров.Вставить("СтранаПроисхожденияКодПосле",   СтрокаТовары.СтранаПроисхожденияКод);
		СтруктураПараметров.Вставить("ПредставлениеСтраныДо",         СтрокаТовары.СтранаПроисхождения);
		СтруктураПараметров.Вставить("ПредставлениеСтраныПосле",      СтрокаТовары.СтранаПроисхождения);
		СтруктураПараметров.Вставить("ПредставлениеГТДДо",            СтрокаТовары.НомерГТД);
		СтруктураПараметров.Вставить("ПредставлениеГТДПосле",         СтрокаТовары.НомерГТД);
		Если ПараметрыПечати.ЕстьПрослеживаемыеТовары Тогда
			СтруктураПараметров.Вставить("КоличествоПрослежДо",         СтрокаТовары.КоличествоПоРНПТДо);
			СтруктураПараметров.Вставить("КоличествоПрослежПосле",      СтрокаТовары.КоличествоПоРНПТ);
			СтруктураПараметров.Вставить("ЕдиницаИзмеренияПрослежКодДо",    СтрокаТовары.ЕдиницаИзмеренияТНВЭДКод);
			СтруктураПараметров.Вставить("ЕдиницаИзмеренияПрослежДо",       СтрокаТовары.ЕдиницаИзмеренияТНВЭДНаименование);
			СтруктураПараметров.Вставить("ЕдиницаИзмеренияПрослежКодПосле", СтрокаТовары.ЕдиницаИзмеренияТНВЭДКод);
			СтруктураПараметров.Вставить("ЕдиницаИзмеренияПрослежПосле",    СтрокаТовары.ЕдиницаИзмеренияТНВЭДНаименование);
		КонецЕсли;
	Иначе
		СтруктураПараметров.Вставить("ТоварНаименование",          ПредставлениеНоменклатуры);
		Если Не ПараметрыПечати.СчетФактураНаАванс Тогда
			СтруктураПараметров.Вставить("ЕдиницаИзмерения",       СтрокаТовары.ЕдиницаИзмеренияНаименование);
		КонецЕсли;
		СтруктураПараметров.Вставить("Стоимость",                  СтрокаТовары.СуммаБезНДС);
		СтруктураПараметров.Вставить("Всего",                      СтрокаТовары.СуммаСНДС);
		СтруктураПараметров.Вставить("ПредставлениеСтраны",        СтрокаТовары.СтранаПроисхождения);
		СтруктураПараметров.Вставить("ПредставлениеГТД",           СтрокаТовары.НомерГТД);
		Если ПрослеживаемыеТовары <> Неопределено И ПрослеживаемыеТовары.Количество() > 0 Тогда
			РНПТ = "";
			ЕдиницаИзмеренияПрослежКод = "";
			ЕдиницаИзмеренияПрослеж = "";
			КоличествоПоРНПТ = "";
			Для Каждого СтрокаПрослеживаемость Из ПрослеживаемыеТовары Цикл
				РНПТ = РНПТ + СтрокаПрослеживаемость.РНПТ + Символы.ПС;
				ЕдиницаИзмеренияПрослежКод = ЕдиницаИзмеренияПрослежКод + СтрокаПрослеживаемость.ЕдиницаИзмеренияКод + Символы.ПС;
				ЕдиницаИзмеренияПрослеж = ЕдиницаИзмеренияПрослеж + СтрокаПрослеживаемость.ЕдиницаИзмеренияНаименование + Символы.ПС;
				КоличествоПоРНПТ = КоличествоПоРНПТ + СтрокаПрослеживаемость.КоличествоПоРНПТ + Символы.ПС;
			КонецЦикла;
			СтруктураПараметров.Вставить("ПредставлениеГТД",           РНПТ);
			СтруктураПараметров.Вставить("ЕдиницаИзмеренияПрослежКод", ЕдиницаИзмеренияПрослежКод);
			СтруктураПараметров.Вставить("ЕдиницаИзмеренияПрослеж",    ЕдиницаИзмеренияПрослеж);
			СтруктураПараметров.Вставить("КоличествоПрослеж",          КоличествоПоРНПТ);
		ИначеЕсли СтрокаТовары.КоличествоПоРНПТ <> 0 Тогда
			СтруктураПараметров.Вставить("ЕдиницаИзмеренияПрослежКод",      СтрокаТовары.ЕдиницаИзмеренияТНВЭДКод);
			СтруктураПараметров.Вставить("ЕдиницаИзмеренияПрослеж",         СтрокаТовары.ЕдиницаИзмеренияТНВЭДНаименование);
			СтруктураПараметров.Вставить("КоличествоПрослеж",               СтрокаТовары.КоличествоПоРНПТ);
		Иначе
			СтруктураПараметров.Вставить("ЕдиницаИзмеренияПрослежКод", "");
			СтруктураПараметров.Вставить("ЕдиницаИзмеренияПрослеж",    "");
			СтруктураПараметров.Вставить("КоличествоПрослеж",          "");
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыПечати.СчетФактураНаАванс Тогда
		СтруктураПараметров.Вставить("СтавкаНДСДоИзменения", СтрокаТовары.СтавкаНДСДо);
	КонецЕсли;
	
	Если Не ВыводитьКодНоменклатуры Тогда
		СтруктураПараметров.ТоварКод = "";
	КонецЕсли;
	
	ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
	
	Если ИспользоватьНаборы
		И СтрокаТовары.ЭтоКомплектующие
		И СтрокаТовары.ВариантПредставленияНабораВПечатныхФормах = Перечисления.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие
		И (СтрокаТовары.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям
		   ИЛИ СтрокаТовары.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам) Тогда
		// Область должна остаться незаполненной
		ОбластьМакета.Параметры.Заполнить(НаборыСервер.ПустыеДанные());
	ИначеЕсли ИспользоватьНаборы
		И СтрокаТовары.ЭтоНабор
		И СтрокаТовары.ВариантПредставленияНабораВПечатныхФормах = Перечисления.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие
		И (СтрокаТовары.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих
			ИЛИ ПараметрыПечати.СчетФактураНаАванс) Тогда
		// Область должна остаться незаполненной
		ОбластьМакета.Параметры.Заполнить(НаборыСервер.ПустыеДанные());
	КонецЕсли;
	
	Если ИспользоватьНаборы
		И (СтрокаТовары.ЭтоКомплектующие ИЛИ СтрокаТовары.ЭтоНабор)
		И СтрокаТовары.ВариантПредставленияНабораВПечатныхФормах = Перечисления.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие Тогда
			ОбластьМакета.Область().ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 0);
			ОбластьМакета.Область().ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 0);
	КонецЕсли;
	
КонецПроцедуры

Функция НомерСчетаФактурыНаПечать(Номер, ИндексПодразделения, УдалитьПользовательскийПрефикс = Ложь)
	
	НомерНаПечать = "";
	
	Если Номер <> Неопределено Тогда
	
		НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Номер, Ложь, УдалитьПользовательскийПрефикс);
		
		ПозицияРазделителя = СтрНайти(НомерНаПечать, "-");
		Префикс = Лев(НомерНаПечать, ПозицияРазделителя);
		НомерБезПрефикса = Сред(НомерНаПечать, ПозицияРазделителя + 1);
		
		Если Лев(НомерБезПрефикса, 1) = "И" Тогда
			НомерНаПечать = Префикс + Сред(НомерБезПрефикса, 2);
		КонецЕсли;
		Если ЗначениеЗаполнено(ИндексПодразделения) Тогда
			НомерНаПечать = НомерНаПечать + "/" + ИндексПодразделения;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НомерНаПечать;
	
КонецФункции
	
#КонецОбласти


#Область Прочее

Процедура УстановитьПараметр(ОбластьМакета, ИмяПараметра, ЗначениеПараметра)
	ОбластьМакета.Параметры.Заполнить(Новый Структура(ИмяПараметра, ЗначениеПараметра));
КонецПроцедуры

Функция СтруктураРесурсовДляИтогов()
	
	Структура = Новый Структура;
	
	Структура.Вставить("СуммаБезНДС",       0);
	Структура.Вставить("СуммаНДС",          0);
	Структура.Вставить("СуммаСНДС",         0);
	Структура.Вставить("Количество",        0);
	Структура.Вставить("КоличествоМест",    0);
	Структура.Вставить("КоличествоПринято", 0);
	Структура.Вставить("МассаБрутто",       0);
	Структура.Вставить("МассаНетто",        0);
	Структура.Вставить("Сумма",             0);
	
	Структура.Вставить("РазницаБезНДСУвеличение", 0);
	Структура.Вставить("РазницаБезНДСУменьшение", 0);
	Структура.Вставить("РазницаНДСУвеличение",    0);
	Структура.Вставить("РазницаНДСУменьшение",    0);
	Структура.Вставить("РазницаСНДСУвеличение",   0);
	Структура.Вставить("РазницаСНДСУменьшение",   0);
	
	Возврат Структура;
	
КонецФункции

Функция СведенияОГрузоотправителе(ДанныеПечати)
	
	Если ТипЗнч(ДанныеПечати.Грузоотправитель) = Тип("СправочникСсылка.РегистрацииВНалоговомОргане") Тогда
		СведенияОГрузоотправителе = Справочники.РегистрацииВНалоговомОргане.СведенияОПодразделении(ДанныеПечати.Грузоотправитель, ДанныеПечати.Дата);
	Иначе
		СведенияОГрузоотправителе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузоотправитель, ДанныеПечати.Дата);
	КонецЕсли;
	
	Возврат СведенияОГрузоотправителе;
	
КонецФункции

Процедура ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьМакета)

	Для Сч = 0 По ОбластьМакета.Параметры.Количество() - 1 Цикл
		
		ТекПараметр = ОбластьМакета.Параметры.Получить(Сч);
		
		Если НЕ ЗначениеЗаполнено(ТекПараметр) Тогда
			ОбластьМакета.Параметры.Установить(Сч, "--");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОкруглитьДоЦелого(ОкругляемоеЧисло)
	Если ЗначениеЗаполнено(ОкругляемоеЧисло) Тогда
		Если ОкругляемоеЧисло <> Цел(ОкругляемоеЧисло) Тогда
			ОкругляемоеЧисло = Цел(ОкругляемоеЧисло) + 1;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ТаблицаКонтрагентовСчетаФактуры(ДанныеПечати, ДанныеКонтрагентов)
	
	ТаблицаКонтрагентов = Новый ТаблицаЗначений;
	ТаблицаКонтрагентов.Колонки.Добавить("СведенияОПокупателе");
	ТаблицаКонтрагентов.Колонки.Добавить("СведенияОГрузополучателе");
	ТаблицаКонтрагентов.Колонки.Добавить("КПП");
	ТаблицаКонтрагентов.Колонки.Добавить("ИНН");
	
	Если ДанныеКонтрагентов <> Неопределено Тогда
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ДанныеКонтрагентов.НайтиСледующий(СтруктураПоиска);
		ВыборкаКонтрагентов = ДанныеКонтрагентов.Выбрать();
		
		Если ВыборкаКонтрагентов.Количество() Тогда
			Пока ВыборкаКонтрагентов.Следующий() Цикл
				ДобавитьДанныеКонтрагентовВТаблицу(ТаблицаКонтрагентов, ДанныеПечати.Дата, ВыборкаКонтрагентов);
			КонецЦикла;
		Иначе
			ДобавитьДанныеКонтрагентовВТаблицу(ТаблицаКонтрагентов, ДанныеПечати.Дата, ДанныеПечати);
		КонецЕсли;
		
	Иначе
		
		ДобавитьДанныеКонтрагентовВТаблицу(ТаблицаКонтрагентов, ДанныеПечати.Дата, ДанныеПечати);
		
	КонецЕсли;
	
	Возврат ТаблицаКонтрагентов;
	
КонецФункции

Процедура ДобавитьДанныеКонтрагентовВТаблицу(ТаблицаКонтрагентов, Дата, ДанныеКонтрагента)
	
	СтрокаКонтрагента = ТаблицаКонтрагентов.Добавить();
	СтрокаКонтрагента.СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
					ДанныеКонтрагента.Контрагент, Дата);
	СтрокаКонтрагента.СведенияОГрузополучателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
					ДанныеКонтрагента.Грузополучатель, Дата);
		
	Если ПустаяСтрока(ДанныеКонтрагента.КПППокупателя) Тогда
		СтрокаКонтрагента.КПП = СтрокаКонтрагента.СведенияОПокупателе.КПП
	Иначе
		СтрокаКонтрагента.КПП = ДанныеКонтрагента.КПППокупателя;
	КонецЕсли;
	
	СтрокаКонтрагента.ИНН = ДанныеКонтрагента.ИННПокупателя;
	
КонецПроцедуры

Функция ВыводитьКодыТНВЭД(ДанныеПечати, ДействуетПостановление981)
	ПараметрыВывода = Новый Структура("ВыводитьВСтроке, ВыводитьВКолонке");
	
	ПараметрыВывода.ВыводитьВСтроке = ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный")
		И УчетНДСРФ.СтранаЯвляетсяЧленомТаможенногоСоюза(ДанныеПечати.СтранаРегистрации, ДанныеПечати.Дата)
		И ДанныеПечати.Дата >= УчетНДСУП.НастройкиУчета().ДатаРазделенияЭкспорта;
	ПараметрыВывода.ВыводитьВКолонке = ПараметрыВывода.ВыводитьВСтроке И ДействуетПостановление981;
	
	Возврат ПараметрыВывода
	
КонецФункции

Функция ВедетсяУчетНДСПоФЗ56(ДатаДокумента, ДатаИсправления)
	
	НачалоПримененияФЗ56 = '20170701';
	
	Дата = ?(ЗначениеЗаполнено(ДатаИсправления),ДатаИсправления,ДатаДокумента);
	
	Если Дата < НачалоПримененияФЗ56 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ДействуетПостановление981(ДатаДокумента, ДатаИсправления)
	
	НачалоПрименения = '20171001';
	
	Дата = ?(ЗначениеЗаполнено(ДатаИсправления),ДатаИсправления,ДатаДокумента);
	
	Если Дата < НачалоПрименения Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ДействуетПостановление534(ДатаДокумента, ДатаИсправления)
	
	Возврат ?(ЗначениеЗаполнено(ДатаИсправления), ДатаИсправления, ДатаДокумента) >= '20210701';
	
КонецФункции

Функция ТаблицаПоставщиковСчетаФактуры(ДанныеПечати, ДанныеПоставщиков)
	
	ТаблицаПоставщиков = Новый ТаблицаЗначений;

	ТаблицаПоставщиков.Колонки.Добавить("СведенияОПоставщике");
	ТаблицаПоставщиков.Колонки.Добавить("СведенияОГрузоотправителе");
	ТаблицаПоставщиков.Колонки.Добавить("КПП");
	ТаблицаПоставщиков.Колонки.Добавить("ИНН");
	
	Если ДанныеПоставщиков <> Неопределено Тогда
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ДанныеПоставщиков.НайтиСледующий(СтруктураПоиска);
		ВыборкаПоставщиков = ДанныеПоставщиков.Выбрать();
		
		Пока ВыборкаПоставщиков.Следующий() Цикл
			
			СтрокаПоставщика = ТаблицаПоставщиков.Добавить();
			СтрокаПоставщика.СведенияОПоставщике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
				ВыборкаПоставщиков.Поставщик, ДанныеПечати.Дата);
			СтрокаПоставщика.СведенияОГрузоотправителе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
				ВыборкаПоставщиков.Поставщик, ДанныеПечати.Дата);
				
			Если ПустаяСтрока(ВыборкаПоставщиков.КПППоставщика) Тогда
				СтрокаПоставщика.КПП = СтрокаПоставщика.СведенияОПоставщике.КПП;
			Иначе
				СтрокаПоставщика.КПП = ВыборкаПоставщиков.КПППоставщика;
			КонецЕсли;
			
			Если ПустаяСтрока(ВыборкаПоставщиков.ИННПоставщика) Тогда
				СтрокаПоставщика.ИНН = СтрокаПоставщика.СведенияОПоставщике.ИНН;
			Иначе
				СтрокаПоставщика.ИНН = ВыборкаПоставщиков.ИННПоставщика;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		СтрокаПоставщика = ТаблицаПоставщиков.Добавить();
		СтрокаПоставщика.СведенияОПоставщике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
			ДанныеПечати.Организация, ДанныеПечати.Дата);
		СтрокаПоставщика.СведенияОГрузоотправителе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
			ДанныеПечати.Организация, ДанныеПечати.Дата);
		
	КонецЕсли;
	
	Возврат ТаблицаПоставщиков;
	
КонецФункции

Функция ВалютаРегламентированногоУчета(ДанныеПечати)
	
	Если ТипЗнч(ДанныеПечати.Организация) = Тип("СправочникСсылка.Организации") Тогда
		ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДанныеПечати.Организация);
	Иначе
		ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДанныеПечати.Контрагент);
	КонецЕсли;
	
	Возврат ВалютаРегламентированногоУчета;
		
КонецФункции

Процедура УдалитьВсеОбластиФаксимиле(ОбластьМакета)
	
	МассивИменПоказателей = МассивИменПоказателейФаксимиле();
	Для Каждого ЗначениеПоказателя Из МассивИменПоказателей Цикл
		ОчиститьОбластьФаксимиле(ОбластьМакета, ЗначениеПоказателя);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьОбластьФаксимиле(ОбластьМакета, ИмяОбласти)
	
	ОбластьФаксимиле = ОбластьМакета.Области.Найти(ИмяОбласти);
	Если ОбластьФаксимиле <> Неопределено Тогда
		ОбластьМакета.Рисунки.Удалить(ОбластьФаксимиле.Имя);
	КонецЕсли;
	
КонецПроцедуры

Функция МассивИменПоказателейФаксимиле()
	
	МассивИменПоказателей = Новый Массив;
	МассивИменПоказателей.Добавить("ФаксимилеПечать");
	МассивИменПоказателей.Добавить("ФаксимилеПечатьПредприниматель");
	МассивИменПоказателей.Добавить("ФаксимилеРуководитель");
	МассивИменПоказателей.Добавить("ФаксимилеРуководительНакладная");
	МассивИменПоказателей.Добавить("ФаксимилеПредприниматель");
	МассивИменПоказателей.Добавить("ФаксимилеГлавныйБухгалтер");
	МассивИменПоказателей.Добавить("ФаксимилеОтветственныйЗаОформление");
	МассивИменПоказателей.Добавить("ФаксимилеИсполнитель");
	МассивИменПоказателей.Добавить("ФаксимилеИсполнительНакладнаяУслуги");
	МассивИменПоказателей.Добавить("ФаксимилеИсполнительНакладнаяМатериалы");
	МассивИменПоказателей.Добавить("ФаксимилеКладовщик");
	МассивИменПоказателей.Добавить("ФаксимилеДоверенноеЛицо");
	
	Возврат МассивИменПоказателей;
	
КонецФункции

#КонецОбласти

// #wortmann { 
// Функция находит номера ГТД и СтрануПроисхождения по данным КМ из Документа
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee4646db3c7e04
// Галфинд_Домнышева 2023/09/20
//
// Параметры:
//	Документ - ДокументСсылка.РеализацияТоваровУслуг - обрабатываемый документ 
//
// Возвращаемое значение:
//	ТаблицаЗначений - Выгрузка результата запроса
Функция ПолучитьНомераГТДИСтраныИзШтрихкодов(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугШтрихкодыУпаковок.ШтрихкодУпаковки КАК ШтрихкодУпаковки
		|ПОМЕСТИТЬ ТЧШтрихкоды
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.ШтрихкодыУпаковок КАК РеализацияТоваровУслугШтрихкодыУпаковок
		|ГДЕ
		|	РеализацияТоваровУслугШтрихкодыУпаковок.Ссылка = &Имя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка = ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.GS1_DataMatrix)
		|			ТОГДА ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
		|		ИНАЧЕ ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
		|	КОНЕЦ КАК Штрихкод
		|ПОМЕСТИТЬ ШтрихкодыИтого
		|ИЗ
		|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
		|ГДЕ
		|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка В
		|			(ВЫБРАТЬ
		|				Т.ШтрихкодУпаковки
		|			ИЗ
		|				ТЧШтрихкоды КАК Т)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ШтрихкодыИтого.Штрихкод.Ссылка КАК Штрихкод,
		|	ШтрихкодыИтого.Штрихкод.Номенклатура КАК Номенклатура,
		|	ШтрихкодыИтого.Штрихкод.Характеристика КАК Характеристика,
		|	НомераГТД.Код КАК НомерГТД,
		|	СтраныМира.Наименование КАК СтранаПроисхождения,
		|	СтраныМира.Код КАК СтранаПроисхожденияКод
		|ИЗ
		|	ШтрихкодыИтого КАК ШтрихкодыИтого
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК НомераГТД
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтраныМира КАК СтраныМира
		|			ПО НомераГТД.СтранаПроисхождения = СтраныМира.Ссылка
		|		ПО ШтрихкодыИтого.Штрихкод.гф_НомерГТД = НомераГТД.Ссылка";
	
	Запрос.УстановитьПараметр("Имя", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();

КонецФункции// } #wortmann 
