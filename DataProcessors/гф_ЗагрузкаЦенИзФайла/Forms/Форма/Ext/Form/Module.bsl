
&НаКлиенте
Процедура ЗагрузитьЦены(Команда)
	ЗагрузитьЦеныНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьЦеныНаСервере()
	Протокол.Очистить();
	
	ТипЧисло_4_0_Неотрицательное = Новый ОписаниеТипов("Число",
	Новый КвалификаторыЧисла(4, 0, ДопустимыйЗнак.Неотрицательный));
	ТипЦисло_15_2_Неотрицательное = Новый ОписаниеТипов("Число",
	Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный));
	ТипСтрока_50 = Новый ОписаниеТипов("Строка", ,
	Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная));
	ТипСезон = Новый ОписаниеТипов("СправочникСсылка.КоллекцииНоменклатуры");
	ТипНоменклатура =  Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	
	СоответствиеВидовЦен = Новый Соответствие;
	СоответствиеКолонокЦен = Новый Соответствие;
	тзВидыЦен = РеквизитФормыВЗначение("ВидыЦен");
	тзВидыЦен.Сортировать("НомерКолонки");
	
	тз = Новый ТаблицаЗначений;
	тз.Колонки.Добавить("НомерСтрокиФайла", ТипЧисло_4_0_Неотрицательное, "N стр. файла");
	тз.Колонки.Добавить("Номенклатура", ТипНоменклатура);
	тз.Колонки.Добавить("Артикул", ТипСтрока_50);
	тз.Колонки.Добавить("Сезон", ТипСезон);

	
	Для каждого стрТЗ Из тзВидыЦен Цикл
		СоответствиеВидовЦен.Вставить("Цена" + (тзВидыЦен.Индекс(стрТЗ) + 1), стрТЗ["ВидЦены"]);
		СоответствиеКолонокЦен.Вставить(стрТЗ["НомерКолонки"] - 1, "" + (тзВидыЦен.Индекс(стрТЗ) + 1));
		тз.Колонки.Добавить("Цена" + (тзВидыЦен.Индекс(стрТЗ) + 1), ТипЦисло_15_2_Неотрицательное, стрТЗ["ВидЦены"].Наименование);
	КонецЦикла;
	
	тзДанныеФайла = ПреобразоватьТабличныйДокументВТаблицуЗначений(ДанныеФайла);
	МассивАртикулов = тзДанныеФайла.ВыгрузитьКолонку("Артикул");
	МассивСезонов = Сезоны.ВыгрузитьЗначения();
	РезультатыПоискаНоменклатуры = НайтиНоменклатуруПоАртикулуСезону(МассивАртикулов, МассивСезонов);
	ВыборкаАртикулов = РезультатыПоискаНоменклатуры[0].Выбрать();
	ВыборкаДублиАртикуловБезОтбораСезонов = РезультатыПоискаНоменклатуры[3].Выбрать();
	ВыборкаДублиАртикуловСУчетомОтбораСезонов = РезультатыПоискаНоменклатуры[4].Выбрать();
	ВыборкаАртикуловДляЗагрузки = РезультатыПоискаНоменклатуры[6].Выбрать();
	ЕстьОшибкиЗагрузкиЦен = Ложь;
	Для каждого стрТЗ Из тзДанныеФайла Цикл
		ВыборкаАртикулов.Сбросить();
		ВыборкаДублиАртикуловБезОтбораСезонов.Сбросить();
		ВыборкаДублиАртикуловСУчетомОтбораСезонов.Сбросить();
		ВыборкаАртикуловДляЗагрузки.Сбросить();
		Если Не ВыборкаАртикулов.НайтиСледующий(стрТЗ["Артикул"], "Артикул") Тогда
			//артикул вообще отсутсвует в базе
			ЕстьОшибкиЗагрузкиЦен = Истина;
			Протокол.ДобавитьСтроку("По артикулу " + стрТЗ["Артикул"] + " не найдена номенклатура. Данные не загружены. (строка файла " +
			(тзДанныеФайла.Индекс(стрТЗ) + 2) + ")");
			Продолжить;
		КонецЕсли;
		Если ВыборкаДублиАртикуловСУчетомОтбораСезонов.НайтиСледующий(стрТЗ["Артикул"], "Артикул") Тогда
			//артикул присутствует в базе несколько раз с учетом отбора дублей по сезонам
			ЕстьОшибкиЗагрузкиЦен = Истина;
			Протокол.ДобавитьСтроку("По артикулу " + стрТЗ["Артикул"] + " есть дубли. Данные не загружены (строка файла " +
			(тзДанныеФайла.Индекс(стрТЗ) + 2) + ")");
			Продолжить;
		КонецЕсли;
		Если ВыборкаАртикуловДляЗагрузки.НайтиСледующий(стрТЗ["Артикул"], "Артикул") Тогда
			нс = тз.Добавить();
			нс["Артикул"] = стрТЗ["Артикул"];
			нс["НомерСтрокиФайла"] = тзДанныеФайла.Индекс(стрТЗ) + 2;
			нс["Номенклатура"] = ВыборкаАртикуловДляЗагрузки["Номенклатура"];
			нс["Сезон"] = ВыборкаАртикуловДляЗагрузки["Сезон"];
			Для каждого кол Из тзДанныеФайла.Колонки Цикл
				инд = тзДанныеФайла.Колонки.Индекс(кол);
				Если инд = 0 Тогда
					Продолжить;
				Иначе
					ИндексИсточникаЗначения = СоответствиеКолонокЦен.Получить(инд);
					Если ИндексИсточникаЗначения <> Неопределено Тогда
						ЗначениеЦены = Число(стрТЗ[кол.Имя]);
						нс["Цена" + ИндексИсточникаЗначения] = ЗначениеЦены;
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;
		Иначе
			Если ВыборкаДублиАртикуловБезОтбораСезонов.НайтиСледующий(стрТЗ["Артикул"], "Артикул") Тогда
				ЕстьОшибкиЗагрузкиЦен = Истина;
				Протокол.ДобавитьСтроку("По артикулу " + стрТЗ["Артикул"] + " есть дубли. Данные не загружены (строка файла " +
				(тзДанныеФайла.Индекс(стрТЗ) + 2) + ")");
				Продолжить;
			КонецЕсли;		
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОшибкиЗагрузкиЦен Тогда
		Протокол.ВставитьСтроку(1, "Есть ошибки загрузки данных
		|");
		ОбщегоНазначения.СообщитьПользователю("Есть ошибки загрузки данных. См. протокол...");
	Иначе
		Протокол.ВставитьСтроку(1, "Цены успешно загружены для последующей установки...
		|");
		ОбщегоНазначения.СообщитьПользователю("Цены успешно загружены для последующей установки...");
	КонецЕсли;
	
	ДанныеИБ.Загрузить(тз);
	Для каждого КолонкаНаФорме Из Элементы.ДанныеИБ.ПодчиненныеЭлементы Цикл
		ИмяКолонки = КолонкаНаФорме["Имя"];
		Если СтрНайти(ИмяКолонки, "Цена") = 0 Тогда
			Продолжить;
		Иначе
			ИмяКолонкиЦены = СтрЗаменить(ИмяКолонки, "ДанныеИБ", "");
			ВидЦены = СоответствиеВидовЦен.Получить(ИмяКолонкиЦены);
			Если ВидЦены <> Неопределено Тогда
				КолонкаНаФорме.Видимость = Истина;
				КолонкаНаФорме.Заголовок = ВидЦены["Наименование"];
			Иначе
				КолонкаНаФорме.Видимость = Ложь;
				КолонкаНаФорме.Заголовок = "";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ПоместитьВоВременноеХранилище(СоответствиеВидовЦен, АдресВременногоХранилища);
КонецПроцедуры

&НаСервере
Функция НайтиНоменклатуруПоАртикулуСезону(МассивАртикулов, МассивСезонов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Номенклатура.Артикул КАК Артикул,
	|	Номенклатура.КоллекцияНоменклатуры КАК Сезон,
	|	1 КАК Количество
	|ПОМЕСТИТЬ вт_Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	|	И НЕ Номенклатура.ПометкаУдаления
	|	И Номенклатура.Артикул В(&МассивАртикулов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Артикул,
	|	Сезон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_Номенклатура.Артикул КАК Артикул,
	|	КОЛИЧЕСТВО(вт_Номенклатура.Количество) КАК Количество
	|ПОМЕСТИТЬ вт_ДублиАртикулов
	|ИЗ
	|	вт_Номенклатура КАК вт_Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_Номенклатура.Артикул
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(вт_Номенклатура.Количество) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_Номенклатура.Артикул КАК Артикул,
	|	КОЛИЧЕСТВО(вт_Номенклатура.Количество) КАК Количество
	|ПОМЕСТИТЬ вт_АртикулыБезДублей
	|ИЗ
	|	вт_Номенклатура КАК вт_Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_Номенклатура.Артикул
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(вт_Номенклатура.Количество) = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_Номенклатура.Артикул КАК Артикул,
	|	вт_Номенклатура.Сезон КАК Сезон
	|ПОМЕСТИТЬ вт_АртикулыСезоныДляДублей
	|ИЗ
	|	вт_Номенклатура КАК вт_Номенклатура
	|ГДЕ
	|	вт_Номенклатура.Артикул В
	|			(ВЫБРАТЬ
	|				т.Артикул
	|			ИЗ
	|				вт_ДублиАртикулов КАК т)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_АртикулыСезоныДляДублей.Артикул КАК Артикул,
	|	вт_АртикулыСезоныДляДублей.Сезон КАК Сезон,
	|	СУММА(1) КАК Количество
	|ПОМЕСТИТЬ вт_ДублиАртикуловСУчетомОтбораСезонов
	|ИЗ
	|	вт_АртикулыСезоныДляДублей КАК вт_АртикулыСезоныДляДублей
	|ГДЕ
	|	вт_АртикулыСезоныДляДублей.Сезон В(&МассивСезонов)
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_АртикулыСезоныДляДублей.Артикул,
	|	вт_АртикулыСезоныДляДублей.Сезон
	|
	|ИМЕЮЩИЕ
	|	СУММА(1) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_АртикулыСезоныДляДублей.Артикул КАК Артикул,
	|	вт_АртикулыСезоныДляДублей.Сезон КАК Сезон,
	|	СУММА(1) КАК Количество
	|ПОМЕСТИТЬ вт_АртикулыБезДублейСУчетомОтбораСезонов
	|ИЗ
	|	вт_АртикулыСезоныДляДублей КАК вт_АртикулыСезоныДляДублей
	|ГДЕ
	|	вт_АртикулыСезоныДляДублей.Сезон В(&МассивСезонов)
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_АртикулыСезоныДляДублей.Артикул,
	|	вт_АртикулыСезоныДляДублей.Сезон
	|
	|ИМЕЮЩИЕ
	|	СУММА(1) = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	вт_АртикулыБезДублей.Артикул КАК Артикул,
	|	Номенклатура.КоллекцияНоменклатуры КАК Сезон
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_АртикулыБезДублей КАК вт_АртикулыБезДублей
	|		ПО Номенклатура.Артикул = вт_АртикулыБезДублей.Артикул
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	вт_АртикулыБезДублейСУчетомОтбораСезонов.Артикул,
	|	вт_АртикулыБезДублейСУчетомОтбораСезонов.Сезон
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_АртикулыБезДублейСУчетомОтбораСезонов КАК вт_АртикулыБезДублейСУчетомОтбораСезонов
	|		ПО Номенклатура.Артикул = вт_АртикулыБезДублейСУчетомОтбораСезонов.Артикул
	|			И Номенклатура.КоллекцияНоменклатуры = вт_АртикулыБезДублейСУчетомОтбораСезонов.Сезон";
	
	Запрос.УстановитьПараметр("МассивАртикулов", МассивАртикулов);
	Запрос.УстановитьПараметр("МассивСезонов", МассивСезонов);
	
	УстановитьПривилегированныйРежим(Истина);
	МассивРезультатов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	Возврат МассивРезультатов;
	
КонецФункции

&НаСервере
Функция ПреобразоватьТабличныйДокументВТаблицуЗначений(ТабДокумент)
	
	ПоследняяСтрока = ТабДокумент.ВысотаТаблицы;
	ПоследняяКолонка = ТабДокумент.ШиринаТаблицы;
	ОбластьЯчеек = ТабДокумент.Область(1, 1, ПоследняяСтрока, ПоследняяКолонка);
	ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьЯчеек);
	ПостроительОтчета = Новый ПостроительОтчета;
	ПостроительОтчета.ИсточникДанных = ИсточникДанных;
	ПостроительОтчета.Выполнить();
	ТабЗначений = ПостроительОтчета.Результат.Выгрузить();
	
	Колонки = ТабЗначений.Колонки;
	Для каждого стрТЗ Из ТабЗначений Цикл
		Для каждого кол Из Колонки Цикл
			ИндКол = Колонки.Индекс(кол);
			ИмяКол = кол["Имя"];
			Если ИндКол = 0 Тогда
				стрТЗ[ИмяКол] = СокрЛП(стрТЗ[ИмяКол]);
			Иначе
				стрТЗ[ИмяКол] = СтрЗаменить(стрТЗ[ИмяКол], " ", "");
				стрТЗ[ИмяКол] = СтрЗаменить(стрТЗ[ИмяКол], Символы.НПП, "");
				стрТЗ[ИмяКол] = СтрЗаменить(стрТЗ[ИмяКол], ",", ".");
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТабЗначений
КонецФункции

&НаКлиенте
Процедура УстановитьЦеныНоменклатуры(Команда)
	УстановитьЦеныНоменклатурыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьПротокола(Команда)
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДанные Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПротокол;
		Элементы.ФормаВидимостьПротокола.Заголовок = "Скрыть протокол";
	Иначе
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДанные;
		Элементы.ФормаВидимостьПротокола.Заголовок = "Показать протокол";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьЦеныНоменклатурыНаСервере()
	
	ЕстьОшибкиЗаполнения = Ложь;
	Если Не ЗначениеЗаполнено(ДатаЗагрузки) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Дата"".'"), , "ДатаЗагрузки");
		ЕстьОшибкиЗаполнения = Истина;
	КонецЕсли;
	Если ДанныеИБ.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Нет данных для установки цен номенклатуры.'"), , "ДанныеИБ");
		ЕстьОшибкиЗаполнения = Истина;
	КонецЕсли;
	Если ЕстьОшибкиЗаполнения Тогда
		Возврат;
	КонецЕсли;
	
	докУстЦен = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
	докУстЦен.Дата = ДатаЗагрузки;
	докУстЦен.Комментарий = "Создан обработкой ""Загрузка цен из файла"" " + ТекущаяДатаСеанса();
	докУстЦен.Ответственный = Пользователи.АвторизованныйПользователь();
	докУстЦен.Согласован = Истина;
	докУстЦен.Статус = Перечисления.СтатусыУстановокЦенНоменклатуры.Согласован;
	
	тзДанныеИБ = РеквизитФормыВЗначение("ДанныеИБ");
	СоответствиеВидовЦен = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Для каждого стрТЗ Из тзДанныеИБ Цикл
		Для каждого КлючЗначение Из СоответствиеВидовЦен Цикл
		
			нс = докУстЦен.Товары2_5.Добавить();
			нс.Номенклатура = стрТЗ["Номенклатура"];
			нс.ВидЦены = КлючЗначение.Значение;
			нс.Цена = стрТЗ[КлючЗначение.Ключ];
			нс.ЦенаИзмененаВручную = Ложь;
			нс.Валюта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(нс.ВидЦены, "ВалютаЦены");
		КонецЦикла;
	КонецЦикла;
	
	Для каждого КлючЗначение Из СоответствиеВидовЦен Цикл
		нс = докУстЦен.ВидыЦен.Добавить();
		нс.ВидЦены = КлючЗначение.Значение;
	КонецЦикла;
	
	Если РежимОтладки Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	//запись объекта
	докУстЦен.Записать(РежимЗаписиДокумента.Проведение);
	
	ОбщегоНазначения.СообщитьПользователю("Создан документ " + докУстЦен.Ссылка);
	Протокол.ДобавитьСтроку("
	|Создан документ " + докУстЦен.Ссылка);
	
	Если РежимОтладки Тогда
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
КонецПроцедуры

