
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Проверка прав доступа должна располагаться самой первой.
	Если Не ПравоДоступа("Администрирование", Метаданные) Тогда
		ВызватьИсключение НСтр("ru = 'Использование обработки в интерактивном режиме доступно только администратору.'");
	КонецЕсли;
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ПроверитьВерсиюИРежимСовместимостиПлатформы();
	
	Объект.ЭтоИнтерактивныйРежим = Истина;
	
	ЗаголовокФормы = НСтр("ru = 'MoscowSoft. Универсальный обмен данными в формате XML (%ВерсияОбработки%)'");
	ЗаголовокФормы = СтрЗаменить(ЗаголовокФормы, "%ВерсияОбработки%", ВерсияОбъектаСтрокойНаСервере());
	
	Заголовок = ЗаголовокФормы;
	
	Если ПустаяСтрока(ТипУдаленияРегистрацииИзмененийДляУзловОбменаПослеВыгрузки) Тогда
		Объект.ТипУдаленияРегистрацииИзмененийДляУзловОбменаПослеВыгрузки = 0;
	Иначе
		Объект.ТипУдаленияРегистрацииИзмененийДляУзловОбменаПослеВыгрузки = Число(ТипУдаленияРегистрацииИзмененийДляУзловОбменаПослеВыгрузки);
	КонецЕсли;
		
	ЗаполнитьСписокТиповДоступныхДляУдаления();
	
	Объект.ВыводВОкноСообщенийИнформационныхСообщений = Истина;
	Объект.ВыводВПротоколИнформационныхСообщений = Истина;
	Объект.ОткрыватьПротоколыОбменаПослеВыполненияОпераций = Истина;
	Объект.ВестиДополнительныйКонтрольЗаписиВXML = Истина;
	
	//Если Не ЗначениеЗаполнено(Объект.ИмяФайлаПротоколаОбмена) Тогда
	//	Объект.ИмяФайлаПротоколаОбмена = ИмяВременногоФайлаПротоколаНаСервере();
	//КонецЕсли;
	
	ВосстановитьНастройки();
	ВосстановитьНастройкиRabbit();
	
	Объект.ФлагРежимОтладки = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	мсНадписьСостояния = "Авторизуйтесь, чтобы быть в курсе обновлений переноса данных";

	Элементы.ИмяФайлаПравил.СписокВыбора.ЗагрузитьЗначения(ПравилаОбмена.ВыгрузитьЗначения());
	Элементы.ИмяФайлаОбмена.СписокВыбора.ЗагрузитьЗначения(ЗагрузкаДанныхИхФайла.ВыгрузитьЗначения());
	Элементы.ИмяФайлаДанных.СписокВыбора.ЗагрузитьЗначения(ВыгрузкаДанныхВФайл.ВыгрузитьЗначения());
	
	ПриИзмененииПериода();
	
	ОчиститьДанныеОФайлеДляЗагрузкиДанных();
	
	ПрямаяВыгрузка = ?(Объект.НепосредственноеЧтениеВИБПриемнике, 1, 0);
	
	СохраненныйРежимЗагрузки = (Объект.РежимОбмена = "Загрузка");
	
	Если СохраненныйРежимЗагрузки Тогда
		
		// Нужную страницу устанавливаем.
		Элементы.ГлавнаяПанельФормы.ТекущаяСтраница = Элементы.ГлавнаяПанельФормы.ПодчиненныеЭлементы.Загрузка;
		
	КонецЕсли;
	
	ОбработатьДоступностьЭлементовУправленияТранзакциями();
	
	РазвернутьСтрокиДерева(УдаляемыеДанные, Элементы.УдаляемыеДанные, "Пометка");
	
	АрхивироватьФайлПриИзмененииЗначения();
	ПрямаяВыгрузкаПриИзмененииЗначения();
	
	ИзменитьРежимОбработки(ЭтоКлиент);
	
	#Если ВебКлиент Тогда
		Элементы.СтраницыОтладкиВыгрузки.ТекущаяСтраница = Элементы.СтраницыОтладкиВыгрузки.ПодчиненныеЭлементы.ГруппаВыгрузкаВебКлиент;
		Элементы.СтраницыОтладкиЗагрузки.ТекущаяСтраница = Элементы.СтраницыОтладкиЗагрузки.ПодчиненныеЭлементы.ГруппаЗагрузкаВебКлиент;
		Объект.ФлагРежимОтладкиОбработчиков = Ложь;
	#КонецЕсли
	
	УстановитьДоступностьКомандОтладки();
	
	Если СохраненныйРежимЗагрузки
		И Объект.НастройкаАвтоматическойЗагрузкиДанных <> 0 Тогда
		
		Если Объект.НастройкаАвтоматическойЗагрузкиДанных = 1 Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, Нстр("ru = 'Выполнить загрузку данных из файла обмена?'"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			
		Иначе
			
			ПриОткрытииЗавершение(КодВозвратаДиалога.Да, Неопределено);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоLinuxКлиент() Тогда
		Элементы.ГруппаОС.ТекущаяСтраница = Элементы.ГруппаОС.ПодчиненныеЭлементы.ГруппаLinux;
	КонецЕсли;

	// МС - 09.07.2017 - начало
	Если ЗначениеЗаполнено(ИмяФайлаПравил) Тогда
		ИмяФайлаПравилОбмена = ИмяФайлаПравил;
		ПрочитатьПравилаОбмена(Неопределено);
	КонецЕсли;
	
	ОбновлениеЗаказа();
	
	Объект.ФлагРежимОтладки = Истина;
	// МС - 09.07.2017 - конец
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ВыполнитьЗагрузкуИзФормы();
		ПредставлениеПериодаВыгрузки = ПредставлениеПериода(Объект.ДатаНачала, Объект.ДатаОкончания);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура АрхивироватьФайлПриИзменении(Элемент)
	
	АрхивироватьФайлПриИзмененииЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПравилОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборФайла(Элемент, ИмяФайлаПравил, Истина, , Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПравилОбменаОткрытие(Элемент, СтандартнаяОбработка)
	
	ОткрытьВПриложении(Элемент.ТекстРедактирования, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрямаяВыгрузкаПриИзменении(Элемент)
	
	ПрямаяВыгрузкаПриИзмененииЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура ГлавнаяПанельФормыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница.Имя = "Выгрузка" Тогда
		
		Объект.РежимОбмена = "Выгрузка";
		
	ИначеЕсли ТекущаяСтраница.Имя = "Загрузка" Тогда
		
		Объект.РежимОбмена = "Загрузка";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФлагРежимОтладкиПриИзменении(Элемент)
	
	Если Объект.ФлагРежимОтладки Тогда
		
		Объект.ИспользоватьТранзакции = Ложь;
				
	КонецЕсли;
	
	ОбработатьДоступностьЭлементовУправленияТранзакциями();
	УстановитьМодифицированностьНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура КоличествоОбработанныхОбъектовДляОбновленияСтатусаПриИзменении(Элемент)
	
	Если Объект.КоличествоОбработанныхОбъектовДляОбновленияСтатуса = 0 Тогда
		Объект.КоличествоОбработанныхОбъектовДляОбновленияСтатуса = 100;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборФайла(Элемент, ИмяФайлаОбмена, Ложь, , Объект.АрхивироватьФайл);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПротоколаОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборФайла(Элемент, Объект.ИмяФайлаПротоколаОбмена, Ложь, "txt", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПротоколаОбменаЗагрузкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборФайла(Элемент, Объект.ИмяФайлаПротоколаОбменаЗагрузка, Ложь, "txt", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборФайла(Элемент, ИмяФайлаДанных, Ложь, , Объект.АрхивироватьФайл);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогИнформационнойБазыДляПодключенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Выберите каталог информационной базы'");
	ДиалогВыбораФайла.Каталог = Объект.КаталогИнформационнойБазыДляПодключения;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		Объект.КаталогИнформационнойБазыДляПодключения = ДиалогВыбораФайла.Каталог;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПротоколаОбменаОткрытие(Элемент, СтандартнаяОбработка)
	
	ОткрытьВПриложении(Элемент.ТекстРедактирования, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПротоколаОбменаЗагрузкаОткрытие(Элемент, СтандартнаяОбработка)
	
	ОткрытьВПриложении(Элемент.ТекстРедактирования, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогИнформационнойБазыДляПодключенияОткрытие(Элемент, СтандартнаяОбработка)
	
	ОткрытьВПриложении(Элемент.ТекстРедактирования, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АутентификацияWindowsИнформационнойБазыДляПодключенияПриИзменении(Элемент)
	
	Элементы.ПользовательИнформационнойБазыДляПодключения.Доступность = НЕ Объект.АутентификацияWindowsИнформационнойБазыДляПодключения;
	Элементы.ПарольИнформационнойБазыДляПодключения.Доступность = НЕ Объект.АутентификацияWindowsИнформационнойБазыДляПодключения;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПравилПриИзменении(Элемент)
	
	Файл = Новый Файл(ИмяФайлаПравил);
	Если ПустаяСтрока(ИмяФайлаПравил) Или Не Файл.Существует() Тогда
		СообщитьПользователю(НСтр("ru = 'Не найден файл правил обмена'"), "ИмяФайлаПравил");
		УстановитьПризнакЗагрузкиПравил(Ложь);
		Возврат;
	КонецЕсли;
	
	Если ИменаФайловПравилИОбменаСовпадают() Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИмяФайлаПравилПриИзмененииЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Загрузить правила обмена данными?'"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
	УстановитьМодифицированностьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПравилПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ВыполнитьЗагрузкуПравилОбмена();
		
	Иначе
		
		УстановитьПризнакЗагрузкиПравил(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаОбменаОткрытие(Элемент, СтандартнаяОбработка)
	
	ОткрытьВПриложении(Элемент.ТекстРедактирования, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаОбменаПриИзменении(Элемент)
	
	ОчиститьДанныеОФайлеДляЗагрузкиДанных();
	УстановитьМодифицированностьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьТранзакцииПриИзменении(Элемент)
	
	ОбработатьДоступностьЭлементовУправленияТранзакциями();
	
КонецПроцедуры

&НаКлиенте
Процедура ФлагРежимОтладкиОбработчиковЗагрузкиПриИзменении(Элемент)
	
	УстановитьДоступностьКомандОтладки();
	
КонецПроцедуры

&НаКлиенте
Процедура ФлагРежимОтладкиОбработчиковВыгрузкиПриИзменении(Элемент)
	
	УстановитьДоступностьКомандОтладки();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаДанныхОткрытие(Элемент, СтандартнаяОбработка)
	
	ОткрытьВПриложении(Элемент.ТекстРедактирования, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаДанныхПриИзменении(Элемент)
	
	Если ПустоеЗначениеРеквизита(ИмяФайлаДанных, "ИмяФайлаДанных", Элементы.ИмяФайлаДанных.Заголовок)
		Или ИменаФайловПравилИОбменаСовпадают() Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ИмяФайлаОбмена = ИмяФайлаДанных;
	
	Файл = Новый Файл(Объект.ИмяФайлаОбмена);
	АрхивироватьФайл = (ВРЕГ(Файл.Расширение) = ВРЕГ(".zip"));
	
КонецПроцедуры

&НаКлиенте
Процедура ТипИнформационнойБазыДляПодключенияПриИзменении(Элемент)
	
	ТипИнформационнойБазыДляПодключенияПриИзмененииЗначения();
	УстановитьМодифицированностьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ВерсияПлатформыИнформационнойБазыДляПодключенияПриИзменении(Элемент)
	
	Если ПустаяСтрока(Объект.ВерсияПлатформыИнформационнойБазыДляПодключения) Тогда
		
		Объект.ВерсияПлатформыИнформационнойБазыДляПодключения = "V8";
		
	КонецЕсли;
	УстановитьМодифицированностьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипУдаленияРегистрацииИзмененийДляУзловОбменаПослеВыгрузкиПриИзменении(Элемент)
	
	Если ПустаяСтрока(ТипУдаленияРегистрацииИзмененийДляУзловОбменаПослеВыгрузки) Тогда
		Объект.ТипУдаленияРегистрацииИзмененийДляУзловОбменаПослеВыгрузки = 0;
	Иначе
		Объект.ТипУдаленияРегистрацииИзмененийДляУзловОбменаПослеВыгрузки = Число(ТипУдаленияРегистрацииИзмененийДляУзловОбменаПослеВыгрузки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодВыгрузкиПриИзменении(Элемент)
	
	ПриИзмененииПериода();
	УстановитьМодифицированностьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодУдаленияПриИзменении(Элемент)
	
	ПриИзмененииПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура БезопаснаяЗагрузкаПриИзменении(Элемент)
	
	ИзменитьРежимБезопаснаяЗагрузка();
	УстановитьМодифицированностьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПравилЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборФайла(Элемент, ИмяФайлаПравилЗагрузки, Истина, , Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПравилЗагрузкиПриИзменении(Элемент)
	
	ПоместитьФайлПравилЗагрузкиВХранилище();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаПравилВыгрузки

&НаКлиенте
Процедура ТаблицаПравилВыгрузкиПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущийЭлемент.Имя = "СсылкаНаУзелОбмена" Тогда
		
		Если Элемент.ТекущиеДанные.ЭтоГруппа Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПравилВыгрузкиПриИзменении(Элемент)
	
	Если Элемент.ТекущийЭлемент.Имя = "ПВД" Тогда
		
		ТекСтрока = Элемент.ТекущиеДанные;
		
		Если ТекСтрока.Включить = 2 Тогда
			ТекСтрока.Включить = 0;
		КонецЕсли;
		
		УстановитьПометкиПодчиненных(ТекСтрока, "Включить");
		УстановитьПометкиРодителей(ТекСтрока, "Включить");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУдаляемыеДанные

&НаКлиенте
Процедура УдаляемыеДанныеПриИзменении(Элемент)
	
	ТекСтрока = Элемент.ТекущиеДанные;
	
	УстановитьПометкиПодчиненных(ТекСтрока, "Пометка");
	УстановитьПометкиРодителей(ТекСтрока, "Пометка");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ТестПодключения(Команда)
	
	ВыполнитьПодключениеКИБПриемникуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИнформациюОФайлеОбмена(Команда)
	
	АдресФайла = "";
	
	Если ЭтоКлиент Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьИнформациюОФайлеОбменаЗавершение", ЭтотОбъект);
		НачатьПомещениеФайла(ОписаниеОповещения, АдресФайла,Нстр("ru = 'Файл обмена'"),, УникальныйИдентификатор);
		
	Иначе
		
		ПолучитьИнформациюОФайлеОбменаЗавершение(Истина, АдресФайла, "", Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИнформациюОФайлеОбменаЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		
		Попытка
			
			ОткрытьФайлЗагрузкиНаСервере(Адрес);
			ПредставлениеПериодаВыгрузки = ПредставлениеПериода(Объект.ДатаНачала, Объект.ДатаОкончания);
			
		Исключение
			
			СообщитьПользователю(НСтр("ru = 'Не удалось прочитать файл обмена.'"));
			ОчиститьДанныеОФайлеДляЗагрузкиДанных();
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалениеОтметитьВсе(Команда)
	
	Для Каждого Строка Из УдаляемыеДанные.ПолучитьЭлементы() Цикл
		
		Строка.Пометка = 1;
		УстановитьПометкиПодчиненных(Строка, "Пометка");
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалениеОтменитьВсе(Команда)
	
	Для Каждого Строка Из УдаляемыеДанные.ПолучитьЭлементы() Цикл
		Строка.Пометка = 0;
		УстановитьПометкиПодчиненных(Строка, "Пометка");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалениеУдалить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалениеУдалитьЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, Нстр("ru = 'Удалить выбранные данные в информационной базе?'"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалениеУдалитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Состояние(НСтр("ru = 'Выполняется удаление данных. Пожалуйста, подождите...'"));
		УдалитьНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаОтметитьВсе(Команда)
	
	Для Каждого Строка Из Объект.ТаблицаПравилВыгрузки.ПолучитьЭлементы() Цикл
		Строка.Включить = 1;
		УстановитьПометкиПодчиненных(Строка, "Включить");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаОтменитьВсе(Команда)
	
	Для Каждого Строка Из Объект.ТаблицаПравилВыгрузки.ПолучитьЭлементы() Цикл
		Строка.Включить = 0;
		УстановитьПометкиПодчиненных(Строка, "Включить");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаОчиститьУзлыОбмена(Команда)
	
	УстановитьУзелОбменаУСтрокДереваНаСервере(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаУстановитьУзелОбмена(Команда)
	
	Если Элементы.ТаблицаПравилВыгрузки.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьУзелОбменаУСтрокДереваНаСервере(Элементы.ТаблицаПравилВыгрузки.ТекущиеДанные.СсылкаНаУзелОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПараметры(Команда)
	
	СохранитьПараметрыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьПараметры(Команда)
	
	ВосстановитьПараметрыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОтладкиВыгрузки(Команда)
	
	Объект.ИмяФайлаПравилОбмена = ИмяФайлаНаСервереИлиКлиенте(ИмяФайлаПравил, АдресФайлаПравилВХранилище);
	
	ОткрытьФормуНастройкиОтладкиОбработчиков(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НаКлиенте(Команда)
	
	Если Не ЭтоКлиент Тогда
		
		ЭтоКлиент = Истина;
		
		ИзменитьРежимОбработки(ЭтоКлиент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаСервере(Команда)
	
	Если ЭтоКлиент Тогда
		
		ЭтоКлиент = Ложь;
		
		ИзменитьРежимОбработки(ЭтоКлиент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОтладкиЗагрузки(Команда)
	
	АдресФайлаОбменаВХранилище = "";
	ИмяФайлаДляРасширения = "";
	
	Если ЭтоКлиент Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаОтладкиЗагрузкиЗавершение", ЭтотОбъект);
		НачатьПомещениеФайла(ОписаниеОповещения, АдресФайлаОбменаВХранилище,Нстр("ru = 'Файл обмена'"),, УникальныйИдентификатор);
		
	Иначе
		
		Если ПустоеЗначениеРеквизита(ИмяФайлаОбмена, "ИмяФайлаОбмена", Элементы.ИмяФайлаОбмена.Заголовок) Тогда
			Возврат;
		КонецЕсли;
		
		НастройкаОтладкиЗагрузкиЗавершение(Истина, АдресФайлаОбменаВХранилище, ИмяФайлаДляРасширения, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОтладкиЗагрузкиЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		
		Объект.ИмяФайлаОбмена = ИмяФайлаНаСервереИлиКлиенте(ИмяФайлаОбмена ,Адрес, ВыбранноеИмяФайла);
		
		ОткрытьФормуНастройкиОтладкиОбработчиков(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыгрузку(Команда)
	
	// МС - 27.10.2016 - начало
	// ВыполнитьВыгрузкуИзФормы();
	Если Не Объект.МС_ДелитьВыгрузкуНаЧасти И Не Объект.мсДелитьВыгрузкуПоКаждомуПВД Тогда
		
		ВыполнитьВыгрузкуИзФормы();
		
	ИначеЕсли Объект.МС_ДелитьВыгрузкуНаЧасти Тогда
		
		НомерВыгрузки = 1;
		УровеньВложенности = 1;
		
		Пока НомерВыгрузки > 0 Цикл
			
			УровеньВложенности = 1;
			НомерГруппыПВДВторогоУровня = 1;
			СтрокаРодителяТаблицыМС = Объект.МС_ТаблицаПравилВыгрузки;
			СтрВключенныеПравила = "";
			
			ЗаполнитьТаблицуМСРекурсивно(СтрокаРодителяТаблицыМС,
										 Объект.МС_ТаблицаПравилВыгрузки.ПолучитьЭлементы(), 
										 Объект.ТаблицаПравилВыгрузки.ПолучитьЭлементы(), 
										 НомерВыгрузки, 
										 УровеньВложенности,
										 НомерГруппыПВДВторогоУровня, СтрВключенныеПравила);
										 
										 
			Если НомерВыгрузки >= НомерГруппыПВДВторогоУровня Тогда
				НомерВыгрузки = -2;
			Иначе
				ВыполнитьВыгрузкуИзФормыЧастями(НомерВыгрузки, СтрВключенныеПравила);
			КонецЕсли;
				
			НомерВыгрузки = НомерВыгрузки + 1;
		КонецЦикла;
		
	ИначеЕсли Объект.мсДелитьВыгрузкуПоКаждомуПВД Тогда
		
		НомерВыгрузки = 1;
		
		Пока НомерВыгрузки > 0 Цикл
					
			УровеньВложенности = 1;
			НомерПВД = 1;
			СтрВключенныеПравила = "";
			мсТаблицаПравилВыгрузкиИнициализация();
			
			СтрокаРодителяТаблицыМС = Объект.МС_ТаблицаПравилВыгрузки;
		
			ЗаполнитьТаблицуМСРекурсивноПоПВД(СтрокаРодителяТаблицыМС,
										 Объект.МС_ТаблицаПравилВыгрузки.ПолучитьЭлементы(), 
										 Объект.ТаблицаПравилВыгрузки.ПолучитьЭлементы(), 
										 НомерВыгрузки, 
										 УровеньВложенности,
										 НомерПВД, СтрВключенныеПравила);
			
			Если НомерВыгрузки >= НомерПВД Тогда
				НомерВыгрузки = -2;
			Иначе
				ВыполнитьВыгрузкуИзФормыЧастями(НомерВыгрузки, СтрВключенныеПравила);
			КонецЕсли;
				
			НомерВыгрузки = НомерВыгрузки + 1;
		КонецЦикла;
			
	КонецЕсли;
	
	// СорокинСС - 12.01.2022 - начало
	ОтправлятьПисьмоПослеЗавершенияРаботы();
	// СорокинСС - 12.01.2022 - конец
	
КонецПроцедуры

Процедура ОтправлятьПисьмоПослеЗавершенияРаботы()
	
	Если (ОтправлятьПисьмоПослеЗавершенияРаботы ИЛИ ВариантОтправкиПротоколаВыполнения = 1)
		И ЗначениеЗаполнено(НазваниеПроектаПереноса) И ЗначениеЗаполнено(АдресЭлектроннойПочтыДляОтправки) Тогда
		
		СтрВыгрузкаЗагрузка = ?(Элементы.ГлавнаяПанельФормы.ТекущаяСтраница=Элементы.Выгрузка, "Выгрузка", "Загрузка");
		
		ИмяКоманды = "sendEmail";
		СтруктураНастроек = Новый Структура("ТемаПисьма, ТекстПисьма, АдресПолучателяПисьма", 
											НазваниеПроектаПереноса + ". " + СтрВыгрузкаЗагрузка + " завершена",
											СтрВыгрузкаЗагрузка + " данных  завершена",
											АдресЭлектроннойПочтыДляОтправки);
											
		Об = РеквизитФормыВЗначение("Объект");
		Сообщение = Об.ВыполнитьКомандуВебсервисаMoscowSoft(ИмяКоманды, СтруктураНастроек);
		
		Элементы.НадписьРезультатВыполнения.Заголовок = "" + СокрЛП(ТекущаяДата()) + ": " + Сообщение;
		Элементы.ГруппаЛог.Видимость = Истина;
		Элементы.ГлавнаяПанельФормы.ТекущаяСтраница = Элементы.НастройкиMoscowSoft;
		
	КонецЕсли;

КонецПроцедуры

Процедура мсТаблицаПравилВыгрузкиИнициализация()
	
	ТаблицаПравилВыгрузки = ДанныеФормыВЗначение(Объект.ТаблицаПравилВыгрузки, Тип("ДеревоЗначений"));
	// ТаблицаПравилВыгрузки = Объект.ТаблицаПравилВыгрузки.ПолучитьЭлементы();
	
	Об = РеквизитФормыВЗначение("Объект");
	
	Об.МС_ТаблицаПравилВыгрузки.Строки.Очистить();
	Об.МС_ТаблицаПравилВыгрузки.Колонки.Очистить();
	
	Для Каждого Колонка Из ТаблицаПравилВыгрузки.Колонки Цикл
		Об.МС_ТаблицаПравилВыгрузки.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения, Колонка.Заголовок, Колонка.Ширина);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Об, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуМСРекурсивноПоПВД(СтрокаРодителяТаблицыМС, ТаблицаМС, ЭлементыОсновнойТаблицы, НомерВыгрузки, 
									   оУровеньВложенности, НомерПВД, СтрВключенныеПравила)
	
	Для Каждого Строка Из ЭлементыОсновнойТаблицы Цикл
		НоваяСтрока = ТаблицаМС.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		Если НомерПВД = НомерВыгрузки И Строка.Включить <> 0 И Строка.ПолучитьЭлементы().Количество() = 0 Тогда
			НоваяСтрока.Включить = Истина;
			СтрВключенныеПравила = СтрВключенныеПравила + НоваяСтрока.Наименование;
		Иначе
			НоваяСтрока.Включить = Ложь;
		КонецЕсли;
		
		Если Строка.ПолучитьЭлементы().Количество() > 0 И Строка.Включить <> 0 Тогда 
			НоваяСтрока.Включить = Истина;
		КонецЕсли;
		
		// Надо увеличивать номер не если уровень вложенности = 2, а если нет детей и данное ПВД включено! Только тогда!
		Если Строка.ПолучитьЭлементы().Количество() = 0 И Строка.Включить<>0 Тогда
			НомерПВД = НомерПВД + 1;
		КонецЕсли;
		
		мУровеньВложенности = оУровеньВложенности + 1;
		ЗаполнитьТаблицуМСРекурсивноПоПВД(НоваяСтрока, НоваяСтрока.ПолучитьЭлементы(), Строка.ПолучитьЭлементы(), 
									 НомерВыгрузки, мУровеньВложенности, НомерПВД, СтрВключенныеПравила);
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьТаблицуМСРекурсивно(СтрокаРодителяТаблицыМС, ТаблицаМС, ЭлементыОсновнойТаблицы, НомерВыгрузки, 
									   оУровеньВложенности, НомерГруппыПВДВторогоУровня, СтрВключенныеПравила)
	
	Для Каждого Строка Из ЭлементыОсновнойТаблицы Цикл
		НоваяСтрока = ТаблицаМС.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		Если оУровеньВложенности = 1
			Или (оУровеньВложенности = 2 И НомерГруппыПВДВторогоУровня = НомерВыгрузки И Строка.Включить)
			Или (оУровеньВложенности > 2 И СтрокаРодителяТаблицыМС.Включить И Строка.Включить) Тогда
			
			НоваяСтрока.Включить = Истина;
			
			Если оУровеньВложенности = 2 Тогда
				СтрВключенныеПравила = СтрВключенныеПравила + НоваяСтрока.Наименование;
			КонецЕсли;
		Иначе
			НоваяСтрока.Включить = Ложь;
		КонецЕсли;
		
		Если оУровеньВложенности = 2 И Строка.Включить Тогда
			НомерГруппыПВДВторогоУровня = НомерГруппыПВДВторогоУровня + 1;
		КонецЕсли;
		
		мУровеньВложенности = оУровеньВложенности + 1;
		ЗаполнитьТаблицуМСРекурсивно(НоваяСтрока, НоваяСтрока.ПолучитьЭлементы(), Строка.ПолучитьЭлементы(), 
									 НомерВыгрузки, мУровеньВложенности, НомерГруппыПВДВторогоУровня, СтрВключенныеПравила);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузку(Команда)
	
	Если Объект.мсВариантЗагрузкиДанных = 0 Тогда
		ВыполнитьЗагрузкуИзФормы();
	Иначе
		ВыполнитьЗагрузкуНаСервере("", "");
	КонецЕсли;

	Если Не ЭтоКлиент Тогда
		// СорокинСС - 12.01.2022 - начало
		ОтправлятьПисьмоПослеЗавершенияРаботы();
		// СорокинСС - 12.01.2022 - конец
		
		ПеренестиФайлыПротоколовССервераНаКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиФайлыПротоколовССервераНаКлиент()

	Если ЗначениеЗаполнено(Объект.ИмяФайлаПротоколаОбменаНаКлиенте) 
		И ЗначениеЗаполнено(МассивИменФайловПротокола) И МассивИменФайловПротокола.Количество() > 0 Тогда
		
		ФайлНаКлиенте = Новый Файл(Объект.ИмяФайлаПротоколаОбменаНаКлиенте); 
		
		Для Каждого ЭлементСписка Из МассивИменФайловПротокола Цикл
			ФайлНаСервере = Новый Файл(ЭлементСписка.Значение);
			Адрес = ПоместитьФайлВХранилище(ЭлементСписка.Значение);
			
			ИмяФайлаНаКлиенте = ФайлНаКлиенте.Путь + ФайлНаСервере.Имя; 
			
			Описание = Новый ОписаниеПередаваемогоФайла(ИмяФайлаНаКлиенте, Адрес);
			МассивОписаний = Новый Массив;
			МассивОписаний.Добавить(Описание);
			ПолучитьФайлы(МассивОписаний, , , Ложь);
		КонецЦикла;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.ИмяФайлаПротоколаОбменаНаКлиенте) И ЗначениеЗаполнено(Объект.ИмяФайлаПротоколаОбмена) Тогда
		
		Адрес = ПоместитьФайлВХранилище(Объект.ИмяФайлаПротоколаОбмена);
		Описание = Новый ОписаниеПередаваемогоФайла(Объект.ИмяФайлаПротоколаОбменаНаКлиенте, Адрес);
		МассивОписаний = Новый Массив;
		МассивОписаний.Добавить(Описание);
		ПолучитьФайлы(МассивОписаний, , , Ложь);
		
		Объект.ИмяФайлаПротоколаОбмена = Объект.ИмяФайлаПротоколаОбменаНаКлиенте;
		Объект.ИмяФайлаПротоколаОбменаНаКлиенте = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьФайлВХранилище(ИмяФайлаНаСервере)
	
	Двоичное = Новый ДвоичныеДанные(ИмяФайлаНаСервере);
	Адрес = ПоместитьВоВременноеХранилище(Двоичное, ЭтаФорма.УникальныйИдентификатор);
	Возврат Адрес;
	
КонецФункции

&НаКлиенте
Процедура ПрочитатьПравилаОбмена(Команда)
	
	Если ЭтоLinuxКлиент() И ПрямаяВыгрузка = 1 Тогда
		ПоказатьПредупреждение(,Нстр("ru = 'Прямое подключение к информационной базе не поддерживается в клиенте под управлением ОС Linux.'"));
		Возврат;
	КонецЕсли;
	
	ИмяФайлаДляРасширения = "";
	
	Если ЭтоКлиент Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПрочитатьПравилаОбменаЗавершение", ЭтотОбъект);
		НачатьПомещениеФайла(ОписаниеОповещения, АдресФайлаПравилВХранилище, , , УникальныйИдентификатор);
		
	Иначе
		
		АдресФайлаПравилВХранилище = "";
		Если ПустоеЗначениеРеквизита(ИмяФайлаПравил, "ИмяФайлаПравил", Элементы.ИмяФайлаПравил.Заголовок) Тогда
			Возврат;
		КонецЕсли;
		
		ПрочитатьПравилаОбменаЗавершение(Истина, АдресФайлаПравилВХранилище, ИмяФайлаДляРасширения, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьПравилаОбменаЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		
		АдресФайлаПравилВХранилище = Адрес;
		
		Состояние(НСтр("ru = 'Выполняется чтение правил обмена. Пожалуйста, подождите...'"));
		ВыполнитьЗагрузкуПравилОбмена(Адрес, ВыбранноеИмяФайла);
		
		Если Объект.ФлагОшибки Тогда
			
			УстановитьПризнакЗагрузкиПравил(Ложь);
			
		Иначе
			
			УстановитьПризнакЗагрузкиПравил(Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПр6оцедурыИФункции

// Открывает файл обмена во внешнем приложении.
//
// Параметры:
//  
// 
&НаКлиенте
Процедура ОткрытьВПриложении(ИмяФайла, СтандартнаяОбработка = Ложь)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
	ДополнительныеПараметры.Вставить("ОписаниеОповещения", Новый ОписаниеОповещения("ОткрытьКаталогСФайлом", ЭтотОбъект, ДополнительныеПараметры));
	
	Файл = Новый Файл();
	Файл.НачатьИнициализацию(Новый ОписаниеОповещения("ПроверитьСуществованиеФайла", ЭтотОбъект, ДополнительныеПараметры), ИмяФайла);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
&НаКлиенте
Процедура ПроверитьСуществованиеФайла(Файл, ДополнительныеПараметры) Экспорт
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОпределенияСуществованияФайла", ЭтотОбъект, ДополнительныеПараметры);
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
КонецПроцедуры

// Продолжение процедуры (см. выше).
&НаКлиенте
Процедура ПослеОпределенияСуществованияФайла(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		НачатьЗапускПриложения(ДополнительныеПараметры.ОписаниеОповещения, ДополнительныеПараметры.ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
&НаКлиенте
Процедура ОткрытьКаталогСФайлом(КодВозврата, ДополнительныеПараметры) Экспорт
	// Обработка не требуется.
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеОФайлеДляЗагрузкиДанных()
	
	Объект.ВерсияПравилОбмена = "";
	Объект.ДатаВыгрузкиДанных = "";
	ПредставлениеПериодаВыгрузки = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДоступностьЭлементовУправленияТранзакциями()
	
	Элементы.ИспользоватьТранзакции.Доступность = НЕ Объект.ФлагРежимОтладки;
	
	Элементы.КоличествоОбъектовНаТранзакцию.Доступность = Объект.ИспользоватьТранзакции;
	
КонецПроцедуры

&НаКлиенте
Процедура АрхивироватьФайлПриИзмененииЗначения()
	
	Если Объект.АрхивироватьФайл Тогда
		ИмяФайлаДанных = СтрЗаменить(ИмяФайлаДанных, ".xml", ".zip");
	Иначе
		ИмяФайлаДанных = СтрЗаменить(ИмяФайлаДанных, ".zip", ".xml");
	КонецЕсли;
	
	Элементы.ПарольДляСжатияФайлаОбмена.Доступность = Объект.АрхивироватьФайл;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУзелОбменаУСтрокДерева(Дерево, УзелОбмена)
	
	Для Каждого Строка Из Дерево Цикл
		
		Если Строка.ЭтоГруппа Тогда
			
			УстановитьУзелОбменаУСтрокДерева(Строка.ПолучитьЭлементы(), УзелОбмена);
			
		Иначе
			
			Строка.СсылкаНаУзелОбмена = УзелОбмена;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ИменаФайловПравилИОбменаСовпадают()
	
	Если ВРег(СокрЛП(ИмяФайлаПравил)) = ВРег(СокрЛП(ИмяФайлаДанных)) Тогда
		
		СообщитьПользователю(НСтр("ru = 'Файл правил обмена не может совпадать с файлом данных.
		|Выберите другой файл для выгрузки данных.'"));
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

// Заполняет дерево метаданных, доступных для удаления.
&НаСервере
Процедура ЗаполнитьСписокТиповДоступныхДляУдаления()
	
	ДеревоДанных = РеквизитФормыВЗначение("УдаляемыеДанные");
	
	ДеревоДанных.Строки.Очистить();
	
	СтрокаДерева = ДеревоДанных.Строки.Добавить();
	СтрокаДерева.Представление = Нстр("ru = 'Справочники'");
	
	Для каждого ОбъектМД Из Метаданные.Справочники Цикл
		
		Если Не ПравоДоступа("Удаление", ОбъектМД) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаМД = СтрокаДерева.Строки.Добавить();
		СтрокаМД.Представление = ОбъектМД.Имя;
		СтрокаМД.Метаданные = "СправочникСсылка." + ОбъектМД.Имя;
		
	КонецЦикла;
	
	СтрокаДерева = ДеревоДанных.Строки.Добавить();
	СтрокаДерева.Представление = Нстр("ru = 'Планы видов характеристик'");
	
	Для каждого ОбъектМД Из Метаданные.ПланыВидовХарактеристик Цикл
		
		Если Не ПравоДоступа("Удаление", ОбъектМД) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаМД = СтрокаДерева.Строки.Добавить();
		СтрокаМД.Представление = ОбъектМД.Имя;
		СтрокаМД.Метаданные = "ПланВидовХарактеристикСсылка." + ОбъектМД.Имя;
		
	КонецЦикла;
	
	СтрокаДерева = ДеревоДанных.Строки.Добавить();
	СтрокаДерева.Представление = Нстр("ru = 'Документы'");
	
	Для каждого ОбъектМД Из Метаданные.Документы Цикл
		
		Если Не ПравоДоступа("Удаление", ОбъектМД) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаМД = СтрокаДерева.Строки.Добавить();
		СтрокаМД.Представление = ОбъектМД.Имя;
		СтрокаМД.Метаданные = "ДокументСсылка." + ОбъектМД.Имя;
		
	КонецЦикла;
	
	СтрокаДерева = ДеревоДанных.Строки.Добавить();
	СтрокаДерева.Представление = "РегистрыСведений";
	
	Для каждого ОбъектМД Из Метаданные.РегистрыСведений Цикл
		//// МС - 12.10.2017 - начало
		//Попытка
		//	Если Не ПравоДоступа("Удаление", ОбъектМД) Тогда
		//		Продолжить;
		//	КонецЕсли;
		//Исключение
		//	Продолжить;
		//КонецПопытки;
		//// МС - 12.10.2017 - конец
		//
		//Подчинен = (ОбъектМД.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору);
		//Если Подчинен Тогда Продолжить КонецЕсли;
		//
		//СтрокаМД = СтрокаДерева.Строки.Добавить();
		//СтрокаМД.Представление = ОбъектМД.Имя;
		//СтрокаМД.Метаданные = "РегистрСведенийЗапись." + ОбъектМД.Имя;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоДанных, "УдаляемыеДанные");
	
КонецПроцедуры

// Возвращает версию обработки.
&НаСервере
Функция ВерсияОбъектаСтрокойНаСервере()
	
	Возврат РеквизитФормыВЗначение("Объект").ВерсияОбъектаСтрокой();
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьЗагрузкуПравилОбмена(АдресФайлаПравилВХранилище = "", ИмяФайлаДляРасширения = "")
	
	Объект.ФлагОшибки = Ложь;
	Попытка	
		ЗагрузитьПравилаОбменаИПараметрыНаСервере(АдресФайлаПравилВХранилище, ИмяФайлаДляРасширения);
		
		Если Объект.ФлагОшибки Тогда
			
			УстановитьПризнакЗагрузкиПравил(Ложь);
			
		Иначе
			
			УстановитьПризнакЗагрузкиПравил(Истина);
			РазвернутьСтрокиДерева(Объект.ТаблицаПравилВыгрузки, Элементы.ТаблицаПравилВыгрузки, "Включить");
			
		КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	// МС+ - 15.07.2017 - начало
	ОбновлениеЗаказа();
	// МС+ - 15.07.2017 - конец

КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСтрокиДерева(ДеревоДанных, ПредставлениеНаФорме, ИмяФлажка)
	
	СтрокиДерева = ДеревоДанных.ПолучитьЭлементы();
	
	Для Каждого Строка Из СтрокиДерева Цикл
		
		ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
		ПредставлениеНаФорме.Развернуть(ИдентификаторСтроки, Ложь);
		ВключитьРодителяЕслиВключеныПодчиненные(Строка, ИмяФлажка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРодителяЕслиВключеныПодчиненные(СтрокаДерева, ИмяФлажка)
	
	Включить = СтрокаДерева[ИмяФлажка];
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		Если ПодчиненнаяСтрока[ИмяФлажка] = 1 Тогда
			
			Включить = 1;
			
		КонецЕсли;
		
		Если ПодчиненнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
			
			ВключитьРодителяЕслиВключеныПодчиненные(ПодчиненнаяСтрока, ИмяФлажка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаДерева[ИмяФлажка] = Включить;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПериода()
	
	Объект.ДатаНачала = ПериодВыгрузки.ДатаНачала;
	Объект.ДатаОкончания = ПериодВыгрузки.ДатаОкончания;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПравилаОбменаИПараметрыНаСервере(АдресФайлаПравилВХранилище, ИмяФайлаДляРасширения)
	
	ИмяФайлаПравилОбмена = ИмяФайлаНаСервереИлиКлиенте(ИмяФайлаПравил ,АдресФайлаПравилВХранилище, ИмяФайлаДляРасширения);
	
	Если ИмяФайлаПравилОбмена = Неопределено Тогда
		
		Возврат;
		
	Иначе
		
		Объект.ИмяФайлаПравилОбмена = ИмяФайлаПравилОбмена;
		
	КонецЕсли;
	
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	ОбъектДляСервера.ТаблицаПравилВыгрузки = РеквизитФормыВЗначение("Объект.ТаблицаПравилВыгрузки");
	ОбъектДляСервера.ТаблицаНастройкиПараметров = РеквизитФормыВЗначение("Объект.ТаблицаНастройкиПараметров");
	
	ТаблицаКэша = СохранитьОтмеченныеПравилаВыгрузки(ОбъектДляСервера.ТаблицаПравилВыгрузки);
	
	ОбъектДляСервера.ЗагрузитьПравилаОбмена();
	
	ОбъектДляСервера.ИнициализироватьПервоначальныеЗначенияПараметров();
	ОбъектДляСервера.Параметры.Очистить();
	Объект.ФлагОшибки = ОбъектДляСервера.ФлагОшибки;
	Объект.ВерсияПравилОбмена = ОбъектДляСервера.ВерсияПравилОбмена;	
	Если ЭтоКлиент Тогда
		
		УдалитьФайлы(Объект.ИмяФайлаПравилОбмена);
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ОбъектДляСервера.ТаблицаПравилВыгрузки, "Объект.ТаблицаПравилВыгрузки");
	ЗначениеВРеквизитФормы(ОбъектДляСервера.ТаблицаНастройкиПараметров, "Объект.ТаблицаНастройкиПараметров");
	
	ВосстановитьОтмеченныеПравилаВыгрузки(ТаблицаКэша);
	
КонецПроцедуры

Функция СохранитьОтмеченныеПравилаВыгрузки(ДеревоПравил)
	
	ТаблицаКэша = Новый ТаблицаЗначений();
	ТаблицаКэша.Колонки.Добавить("Наименование");
	ТаблицаКэша.Колонки.Добавить("Включить");
	
	ЗаполнитьТаблицуКэшаРекурсивно(ТаблицаКэша, ДеревоПравил.Строки);
	
	ТаблицаКэша.Индексы.Добавить("Наименование");
	
	Возврат ТаблицаКэша;
	
КонецФункции

Процедура ЗаполнитьТаблицуКэшаРекурсивно(ТаблицаКэша, Строки)
	
	Для Каждого Строка Из Строки Цикл
		Если Строка.Включить <> 0 Тогда
			НоваяСтрока = ТаблицаКэша.Добавить();
			НоваяСтрока.Наименование = Строка.Наименование;
			НоваяСтрока.Включить = Строка.Включить;
		КонецЕсли;
		
		ЗаполнитьТаблицуКэшаРекурсивно(ТаблицаКэша, Строка.Строки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВосстановитьОтмеченныеПравилаВыгрузки(ТаблицаКэша)
	
	Если ТипЗнч(Объект.ТаблицаПравилВыгрузки) = Тип("ДанныеФормыДерево") Тогда
		
		ОбойтиРекурсивноДеревоЗначенийНаФорме(ТаблицаКэша, Объект.ТаблицаПравилВыгрузки.ПолучитьЭлементы());
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбойтиРекурсивноДеревоЗначенийНаФорме(ТаблицаКэша, ЭлементыДерева)
	
	Для Каждого Строка Из ЭлементыДерева Цикл
		
		Если ТаблицаКэша.Количество() > 0 Тогда
			Строка.Включить = 0;
		КонецЕсли;
		
		НайденныеСтроки = ТаблицаКэша.НайтиСтроки(Новый Структура("Наименование", Строка.Наименование));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Строка.Включить = НайденныеСтроки[0].Включить;
		КонецЕсли;
		
		ОбойтиРекурсивноДеревоЗначенийНаФорме(ТаблицаКэша, Строка.ПолучитьЭлементы())
	КонецЦикла;
	
КонецПроцедуры	

// Открывает диалог выбора файла.
//
// Параметры:
//  Элемент                - Элемент управления, для которого выбираем файл.
//  ПроверятьСуществование - Если Истина, то выбор отменяется если файл не существует.
// 
&НаКлиенте
Процедура ВыборФайла(Элемент, ИмяСвойства, ПроверятьСуществование, Знач РасширениеПоУмолчанию = "xml",
	АрхивироватьФайлДанных = Истина, ВыборФайлаПравил = Ложь)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);

	Если РасширениеПоУмолчанию = "txt" Тогда
		
		ДиалогВыбораФайла.Фильтр = "Файл протокола обмена (*.txt)|*.txt";
		ДиалогВыбораФайла.Расширение = "txt";
		
	ИначеЕсли Объект.РежимОбмена = "Выгрузка" Тогда
		
		Если АрхивироватьФайлДанных Тогда
			
			ДиалогВыбораФайла.Фильтр = "Архивный файл данных (*.zip)|*.zip";
			ДиалогВыбораФайла.Расширение = "zip";
			
		ИначеЕсли ВыборФайлаПравил Тогда
			
			ДиалогВыбораФайла.Фильтр = "Файл данных (*.xml)|*.xml|Архивный файл данных (*.zip)|*.zip";
			ДиалогВыбораФайла.Расширение = "xml";
			
		Иначе
			
			ДиалогВыбораФайла.Фильтр = "Файл данных (*.xml)|*.xml";
			ДиалогВыбораФайла.Расширение = "xml";
			
		КонецЕсли; 
		
	Иначе
		Если ВыборФайлаПравил Тогда
			ДиалогВыбораФайла.Фильтр = "Файл данных (*.xml)|*.xml";
			ДиалогВыбораФайла.Расширение = "xml";
		Иначе
			ДиалогВыбораФайла.Фильтр = "Файл данных (*.xml)|*.xml|Архивный файл данных (*.zip)|*.zip";
			ДиалогВыбораФайла.Расширение = "xml";
		КонецЕсли;
	КонецЕсли;
	
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Выберите файл'");
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.ИндексФильтра = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла = Элемент.ТекстРедактирования;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = ПроверятьСуществование;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		ИмяСвойства = ДиалогВыбораФайла.ПолноеИмяФайла;
		
		Если Элемент = Элементы.ИмяФайлаПравил Тогда
			ИмяФайлаПравилПриИзменении(Элемент);
		ИначеЕсли Элемент = Элементы.ИмяФайлаОбмена Тогда
			ИмяФайлаОбменаПриИзменении(Элемент);
		ИначеЕсли Элемент = Элементы.ИмяФайлаДанных Тогда
			ИмяФайлаДанныхПриИзменении(Элемент);
		ИначеЕсли Элемент = Элементы.ИмяФайлаПравилЗагрузки Тогда
			ИмяФайлаПравилЗагрузкиПриИзменении(Элемент);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьПодключениеКИБПриемникуНаСервере()
	
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	ЗаполнитьЗначенияСвойств(ОбъектДляСервера, Объект);
	РезультатПодключения = ОбъектДляСервера.ВыполнитьПодключениеКИБПриемнику();
	
	Если РезультатПодключения <> Неопределено Тогда
		
		СообщитьПользователю(НСтр("ru = 'Подключение успешно установлено.'"));
		
	КонецЕсли;
	
КонецФункции

// Устанавливает состояние пометки у подчиненных строк строки дерева значений
// в зависимости от пометки текущей строки.
//
// Параметры:
//  ТекСтрока      - Строка дерева значений.
// 
&НаКлиенте
Процедура УстановитьПометкиПодчиненных(ТекСтрока, ИмяФлажка)
	
	Подчиненные = ТекСтрока.ПолучитьЭлементы();
	
	Если Подчиненные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Подчиненные Цикл
		
		Строка[ИмяФлажка] = ТекСтрока[ИмяФлажка];
		
		УстановитьПометкиПодчиненных(Строка, ИмяФлажка);
		
	КонецЦикла;
		
КонецПроцедуры

// Устанавливает состояние пометки у родительских строк строки дерева значений
// в зависимости от пометки текущей строки.
//
// Параметры:
//  ТекСтрока      - Строка дерева значений.
// 
&НаКлиенте
Процедура УстановитьПометкиРодителей(ТекСтрока, ИмяФлажка)
	
	Родитель = ТекСтрока.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекСостояние = Родитель[ИмяФлажка];
	
	НайденыВключенные  = Ложь;
	НайденыВыключенные = Ложь;
	
	Для Каждого Строка Из Родитель.ПолучитьЭлементы() Цикл
		Если Строка[ИмяФлажка] = 0 Тогда
			НайденыВыключенные = Истина;
		ИначеЕсли Строка[ИмяФлажка] = 1
			ИЛИ Строка[ИмяФлажка] = 2 Тогда
			НайденыВключенные  = Истина;
		КонецЕсли; 
		Если НайденыВключенные И НайденыВыключенные Тогда
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Если НайденыВключенные И НайденыВыключенные Тогда
		Включить = 2;
	ИначеЕсли НайденыВключенные И (Не НайденыВыключенные) Тогда
		Включить = 1;
	ИначеЕсли (Не НайденыВключенные) И НайденыВыключенные Тогда
		Включить = 0;
	ИначеЕсли (Не НайденыВключенные) И (Не НайденыВыключенные) Тогда
		Включить = 2;
	КонецЕсли;
	
	Если Включить = ТекСостояние Тогда
		Возврат;
	Иначе
		Родитель[ИмяФлажка] = Включить;
		УстановитьПометкиРодителей(Родитель, ИмяФлажка);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОткрытьФайлЗагрузкиНаСервере(АдресФайла)
	
	Если ЭтоКлиент Тогда
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища (АдресФайла);
		АдресНаСервере = ПолучитьИмяВременногоФайла(".xml");
		ДвоичныеДанные.Записать(АдресНаСервере);
		Объект.ИмяФайлаОбмена = АдресНаСервере;
		
	Иначе
		
		ФайлНаСервере = Новый Файл(ИмяФайлаОбмена);
		
		Если Не ФайлНаСервере.Существует() Тогда
			
			СообщитьПользователю(НСтр("ru = 'Не найден файл обмена на сервере.'"), "ИмяФайлаОбмена");
			Возврат;
			
		КонецЕсли;
		
		Объект.ИмяФайлаОбмена = ИмяФайлаОбмена;
		
	КонецЕсли;
	
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	
	ОбъектДляСервера.ОткрытьФайлЗагрузки(Истина);
	
	Объект.ДатаНачала = ОбъектДляСервера.ДатаНачала;
	Объект.ДатаОкончания = ОбъектДляСервера.ДатаОкончания;
	Объект.ДатаВыгрузкиДанных = ОбъектДляСервера.ДатаВыгрузкиДанных;
	Объект.ВерсияПравилОбмена = ОбъектДляСервера.ВерсияПравилОбмена;
	Объект.Комментарий = ОбъектДляСервера.Комментарий;
	
КонецПроцедуры

// Удаляет помеченные строки дерева метаданных.
//
&НаСервере
Процедура УдалитьНаСервере()
	
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	ДеревоУдаляемыхДанных = РеквизитФормыВЗначение("УдаляемыеДанные");
	
	ОбъектДляСервера.ИнициализироватьМенеджерыИСообщения();
	
	Для Каждого СтрокаДерева Из ДеревоУдаляемыхДанных.Строки Цикл
		
		Для Каждого СтрокаМД Из СтрокаДерева.Строки Цикл
			
			Если Не СтрокаМД.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			ТипСтрокой = СтрокаМД.Метаданные;
			ОбъектДляСервера.УдалитьОбъектыТипа(ТипСтрокой);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает узел обмена у строк дерева.
//
&НаСервере
Процедура УстановитьУзелОбменаУСтрокДереваНаСервере(УзелОбмена)
	
	УстановитьУзелОбменаУСтрокДерева(Объект.ТаблицаПравилВыгрузки.ПолучитьЭлементы(), УзелОбмена);
	
КонецПроцедуры

// Сохраняет значения параметров.
//
&НаСервере
Процедура СохранитьПараметрыНаСервере()
	
	ТаблицаПараметров = РеквизитФормыВЗначение("Объект.ТаблицаНастройкиПараметров");
	
	СохраняемыеПараметры = Новый Структура;
	
	Для Каждого СтрокаТаблицы Из ТаблицаПараметров Цикл
		СохраняемыеПараметры.Вставить(СтрокаТаблицы.Наименование, СтрокаТаблицы.Значение);
	КонецЦикла;
	
	ХранилищеСистемныхНастроек.Сохранить("УниверсальныйОбменДаннымиXML", "Параметры", СохраняемыеПараметры);
	
КонецПроцедуры

// Восстанавливает значения параметров.
//
&НаСервере
Процедура ВосстановитьПараметрыНаСервере()
	
	ТаблицаПараметров = РеквизитФормыВЗначение("Объект.ТаблицаНастройкиПараметров");
	ВосстановленныеПараметры = ХранилищеСистемныхНастроек.Загрузить("УниверсальныйОбменДаннымиXML", "Параметры");
	
	Если ТипЗнч(ВосстановленныеПараметры) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если ВосстановленныеПараметры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Парам Из ВосстановленныеПараметры Цикл
		
		ИмяПараметра = Парам.Ключ;
		
		СтрокаТаблицы = ТаблицаПараметров.Найти(Парам.Ключ, "Наименование");
		
		Если СтрокаТаблицы <> Неопределено Тогда
			
			СтрокаТаблицы.Значение = Парам.Значение;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаПараметров, "Объект.ТаблицаНастройкиПараметров");
	
КонецПроцедуры

// Интерактивная выгрузка данных.
//
&НаКлиенте
Процедура ВыполнитьЗагрузкуИзФормы()
	
	АдресФайла = "";
	ИмяФайлаДляРасширения = "";
	
	ДобавитьСтрокуКСпискуВыбора(Элементы.ИмяФайлаОбмена.СписокВыбора, ИмяФайлаОбмена, ЗагрузкаДанныхИхФайла);
	
	Если ЭтоКлиент Тогда
		
		Если Объект.МС_ДелитьВыгрузкуНаЧасти Тогда
			ОповещениеОЗавершении = Новый ОписаниеОповещения("ВыполнитьЗагрузкуНесколькихФайловИзФормыЗавершение", ЭтотОбъект);
            ПараметрыДиалога = Новый ПараметрыДиалогаПомещенияФайлов("Выберите файлы для загрузки", Истина, "*.xml");

			НачатьПомещениеФайловНаСервер(ОповещениеОЗавершении, , , ПараметрыДиалога, УникальныйИдентификатор);
		Иначе
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьЗагрузкуИзФормыЗавершение", ЭтотОбъект);
			
			// СорокинСС - 03.11.2020 - начало
			// НачатьПомещениеФайла(ОписаниеОповещения, АдресФайла,Нстр("ru = 'Файл обмена'"),, УникальныйИдентификатор);
			НачатьПомещениеФайла(ОписаниеОповещения, АдресФайла, , , УникальныйИдентификатор);		
			// СорокинСС - 03.11.2020 - конец
		КонецЕсли;	
	Иначе
		
		Если ПустоеЗначениеРеквизита(ИмяФайлаОбмена, "ИмяФайлаОбмена", Элементы.ИмяФайлаОбмена.Заголовок) Тогда
			Возврат;
		КонецЕсли;
		
		ВыполнитьЗагрузкуИзФормыЗавершение(Истина, АдресФайла, ИмяФайлаДляРасширения, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуНесколькихФайловИзФормыЗавершение(ПомещенныеФайлы, Дополнительно) Экспорт

	Если ПомещенныеФайлы = Неопределено Тогда
    	Возврат;
    КонецЕсли;
	
	Для Каждого ПомещенныйФайл Из ПомещенныеФайлы Цикл
		
		НайденныйФайл = ПомещенныйФайл.СсылкаНаФайл.Файл;
		НаименованиеФайла = ПомещенныйФайл.СсылкаНаФайл.Файл.ИмяБезРасширения;
		ИмяФайла = ПомещенныйФайл.СсылкаНаФайл.Имя;
        АдресФайла = ПомещенныйФайл.Адрес;
		
		Сообщить("Наименование файла: " + НаименованиеФайла + ", ИмяФайла: " + ИмяФайла + ", Адрес: " + АдресФайла);
		
		ВыполнитьЗагрузкуНаСервере(АдресФайла, НайденныйФайл.ПолноеИмя, НайденныйФайл.ПолноеИмя);
		
	КонецЦикла;

КонецПроцедуры

// Сорокин - 01.04.2017 - начало
&НаСервере
Процедура СообщитьНаСервере(Сообщение)
	
	ЗаписьЖурналаРегистрации("УниверсальныйОбменВФорматеXML", УровеньЖурналаРегистрации.Информация, Метаданные.Обработки.УниверсальныйОбменДаннымиXML, , Сообщение);
	Сообщить(Сообщение);
	
КонецПроцедуры
// Сорокинн - 01.04.2017 - конец

&НаКлиенте
Процедура ВыполнитьЗагрузкуИзФормыЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		
		Состояние(НСтр("ru = 'Выполняется загрузка данных. Пожалуйста, подождите...'"));
		
		// Сорокин - 29.10.016 - начало
		Если Объект.МС_ДелитьВыгрузкуНаЧасти Тогда
			
			МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяФайлаОбмена, "\");
			ИмяКаталога = Лев(ИмяФайлаОбмена, СтрДлина(ИмяФайлаОбмена) - СтрДлина(МассивПодстрок[МассивПодстрок.Количество()-1]));
			НайденныеФайлы = НайтиФайлы(ИмяКаталога, "*.xml", Ложь);
			
			Сообщение = "Найдено файлов: " + НайденныеФайлы.Количество();
			СообщитьНаСервере(Сообщение);
			
			// Первичное заполнение таблицы найденных файлов
			Объект.НайденныеФайлы.Очистить();
			Для Каждого НайденныйФайл Из НайденныеФайлы Цикл
				Если Не ЗначениеЗаполнено(НайденныйФайл.Расширение) Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = Объект.НайденныеФайлы.Добавить();
				НоваяСтрока.ПолноеИмяФайла = НайденныйФайл.ПолноеИмя;
				Файл = Новый Файл(НоваяСтрока.ПолноеИмяФайла);
				НоваяСтрока.ДатаИзменения = Файл.ПолучитьВремяИзменения();
				
			КонецЦикла;
			Объект.НайденныеФайлы.Сортировать("ДатаИзменения Возр");
			
			НомерЧасти = 1;
			К = 0;
			КоличествоСтрокТаблицыФайлов = Объект.НайденныеФайлы.Количество()-1;
			// Для Каждого НайденныйФайл Из НайденныеФайлы Цикл
			Пока К <= КоличествоСтрокТаблицыФайлов - 1 Цикл
				
				СтрокаТаблицы = Объект.НайденныеФайлы.Получить(К);
				НайденныйФайл = Новый Файл(СтрокаТаблицы.ПолноеИмяФайла);
				
				Если Не ЗначениеЗаполнено(НайденныйФайл.Расширение) Тогда
					К = К + 1;
					Продолжить;
				КонецЕсли;
				
				Сообщение = НайденныйФайл.ПолноеИмя;
				СообщитьНаСервере(Сообщение);
			
				ВыполнитьЗагрузкуНаСервере(Адрес, НайденныйФайл.ПолноеИмя, НайденныйФайл.ПолноеИмя);
				
				Сообщение = "Завершена загрузка части данных № " + СокрЛП(НомерЧасти);
				СообщитьНаСервере(Сообщение);
			
				НомерЧасти = НомерЧасти + 1;
				
				К = К + 1;
				
				// если за время загрузки одной из частей была выгружена еще одна часть (появился новый файл),
				// то добавим его в таблицу файлов к загрузке в конец таблицы
				ДополнитьТаблицуНайденныхФайловНовымиФайлами();
				КоличествоСтрокТаблицыФайлов = Объект.НайденныеФайлы.Количество()-1;
				
			КонецЦикла;
		Иначе
			ВыполнитьЗагрузкуНаСервере(Адрес, ВыбранноеИмяФайла);
		КонецЕсли;
		
		// Сорокин - 29.10.016 - конец
		
		Если ЭтоКлиент Тогда
			// СорокинСС - 12.01.2022 - начало
			ОтправлятьПисьмоПослеЗавершенияРаботы();
			// СорокинСС - 12.01.2022 - конец
			
			ПеренестиФайлыПротоколовССервераНаКлиент();
		КонецЕсли;
		
		ОткрытьДанныеПротоколовОбменаПриНеобходимости();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьТаблицуНайденныхФайловНовымиФайлами()
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяФайлаОбмена, "\");
	ИмяКаталога = Лев(ИмяФайлаОбмена, СтрДлина(ИмяФайлаОбмена) - СтрДлина(МассивПодстрок[МассивПодстрок.Количество()-1]));
	НайденныеФайлы = НайтиФайлы(ИмяКаталога, "*.xml", Ложь);
	
	Для Каждого НайденныйФайл Из НайденныеФайлы Цикл
		СуществующиеСтроки = Объект.НайденныеФайлы.НайтиСтроки(Новый Структура("ПолноеИмяФайла", НайденныйФайл.ПолноеИмя));
		
		Если СуществующиеСтроки.Количество() = 0 Тогда
			// добавляем вниз. Потом отсортируем
			НоваяСтрока = Объект.НайденныеФайлы.Добавить();
			НоваяСтрока.ПолноеИмяФайла = НайденныйФайл.ПолноеИмя;
			
			Файл = Новый Файл(НайденныйФайл.ПолноеИмя);
			НоваяСтрока.ДатаИзменения = Файл.ПолучитьВремяИзменения();
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.НайденныеФайлы.Сортировать("ДатаИзменения Возр");
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗагрузкуНаСервере(Знач АдресФайла, Знач ИмяФайлаДляРасширения, Знач ИмяЧастиФайла = "")
	
	ИмяПротоколаНаКлиенте = "";
	Если ЭтоКлиент Тогда
		Объект.ИмяФайлаПротоколаОбменаНаКлиенте = Объект.ИмяФайлаПротоколаОбмена;
		ИндексИмяФайлаПослеСлэша = СтрНайти(Объект.ИмяФайлаПротоколаОбмена, "\", НаправлениеПоиска.СКонца);
		ИмяФайлаПослеСлэша = Прав(Объект.ИмяФайлаПротоколаОбмена, СтрДлина(Объект.ИмяФайлаПротоколаОбмена) -ИндексИмяФайлаПослеСлэша);
		// +++ Климахин Д.А. МС-2719 09.10.2022
		Если Не ПустаяСтрока(ИмяФайлаПослеСлэша) Тогда
			Объект.ИмяФайлаПротоколаОбмена = КаталогВременныхФайлов() + ИмяФайлаПослеСлэша;
		КонецЕсли;
		// --- Климахин Д.А. МС-2719 09.10.2022
		ИмяПротоколаНаКлиенте = Объект.ИмяФайлаПротоколаОбменаНаКлиенте;
	КонецЕсли;
	
	ИмяЗагружаемогоФайла = "";
	Если Объект.мсВариантЗагрузкиДанных = 0 Тогда
		ИмяЗагружаемогоФайла = ИмяФайлаНаСервереИлиКлиенте(ИмяФайлаОбмена ,АдресФайла, ИмяФайлаДляРасширения);
	КонецЕсли;
	
	Если Объект.МС_ДелитьВыгрузкуНаЧасти Тогда
		// ИмяЗагружаемогоФайла = СтрЗаменить(ИмяЗагружаемогоФайла, ".xml", "_" + СтрЗаменить(СокрЛП(НомерЧасти), Символы.НПП, "") + ".xml");
		// ИмяЗагружаемогоФайла = СтрЗаменить(ИмяЗагружаемогоФайла, ".zip", "_" + СтрЗаменить(СокрЛП(НомерЧасти), Символы.НПП, "") + ".zip");
		ИмяЗагружаемогоФайла = ИмяЧастиФайла;
		
		Файл = Новый Файл(ИмяЗагружаемогоФайла);
		
		Если Не Файл.Существует() Тогда
			Если ЭтоКлиент Тогда
				Данные = ПолучитьИзВременногоХранилища(АдресФайла);
				// Получение имени временного файла
				ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
				// Сохранение данных во временный файл
				Данные.Записать(ИмяВременногоФайла);
				ИмяЗагружаемогоФайла = ИмяВременногоФайла;
			Иначе
				Сообщить("На сервере не существует файл с именем " + ИмяЗагружаемогоФайла);
				НомерЧасти = -10;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяЗагружаемогоФайла = Неопределено Тогда
		
		Сообщить("Не заполнена переменная ИмяЗагружаемогоФайла. Загрузка прекращена");
		Возврат;
		
	Иначе
		
		Объект.ИмяФайлаОбмена = ИмяЗагружаемогоФайла;
		
	КонецЕсли;
	
	Если Объект.БезопаснаяЗагрузка Тогда
		Если ЭтоАдресВременногоХранилища(АдресФайлаПравилЗагрузкиВХранилище) Тогда
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаПравилЗагрузкиВХранилище);
			АдресНаСервере = ПолучитьИмяВременногоФайла("xml");
			ДвоичныеДанные.Записать(АдресНаСервере);
			Объект.ИмяФайлаПравилОбмена = АдресНаСервере;
		Иначе
			СообщитьПользователю(НСтр("ru = 'Не указан файл правил для загрузки данных.'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	
	ЗаполнитьЗначенияСвойств(ОбъектДляСервера, Объект);
	
	ОбъектДляСервера.ВыполнитьЗагрузку();
	
	Попытка
		
		Если Не ПустаяСтрока(АдресФайла) Тогда
			УдалитьФайлы(ИмяЗагружаемогоФайла);
		КонецЕсли;
		
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Универсальный обмен MoscowSoft'", ОбъектДляСервера.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	ОбъектДляСервера.Параметры.Очистить();
	ЗначениеВРеквизитФормы(ОбъектДляСервера, "Объект");
	
	Если ЗначениеЗаполнено(ИмяПротоколаНаКлиенте) Тогда
		Объект.ИмяФайлаПротоколаОбменаНаКлиенте = ИмяПротоколаНаКлиенте;
	КонецЕсли;
	
	ПравилаЗагружены = Ложь;
	Элементы.ФормаВыполнитьВыгрузку.Доступность = Ложь;
	Элементы.НадписьПояснениеВыгрузки.Видимость = Истина;
	Элементы.ГруппаВыгрузкаОтладкаДоступна.Доступность = Ложь; 
	
	ОбъектДляСервера.ОтправитьВсемСмс();
	
КонецПроцедуры

&НаСервере
Функция ИмяФайлаНаСервереИлиКлиенте(ИмяРеквизита ,Знач АдресФайла, Знач ИмяФайлаДляРасширения = ".xml",
	СоздатьНовый = Ложь, ПроверятьСуществование = Истина)
	
	ИмяФайла = Неопределено;
	
	Если ЭтоКлиент Тогда
		
		Если СоздатьНовый Тогда
			
			Расширение = ? (Объект.АрхивироватьФайл, ".zip", ".xml");
			
			ИмяФайла = ПолучитьИмяВременногоФайла(Расширение);
			
			Файл = Новый Файл(ИмяФайла);
			
		Иначе
			
			Расширение = РасширениеФайла(ИмяФайлаДляРасширения);
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
			АдресНаСервере = ПолучитьИмяВременногоФайла(Расширение);
			ДвоичныеДанные.Записать(АдресНаСервере);
			ИмяФайла = АдресНаСервере;
			
		КонецЕсли;
		
	Иначе
		
		ФайлНаСервере = Новый Файл(ИмяРеквизита);
		
		Если Не ФайлНаСервере.Существует() И ПроверятьСуществование Тогда
			
			СообщитьПользователю(НСтр("ru = 'Указанный файл не существует.'"));
			
		Иначе
			
			ИмяФайла = ИмяРеквизита;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИмяФайла;
	
КонецФункции

&НаСервере
Функция РасширениеФайла(Знач ИмяФайла)
	
	ПозицияТочки = ПоследнийРазделитель(ИмяФайла);
	
	Расширение = Прав(ИмяФайла,СтрДлина(ИмяФайла) - ПозицияТочки + 1);
	
	Возврат Расширение;
	
КонецФункции

&НаСервере
Функция ПоследнийРазделитель(СтрокаСРазделителем, Разделитель = ".")
	
	ДлинаСтроки = СтрДлина(СтрокаСРазделителем);
	
	Пока ДлинаСтроки > 0 Цикл
		
		Если Сред(СтрокаСРазделителем, ДлинаСтроки, 1) = Разделитель Тогда
			
			Возврат ДлинаСтроки; 
			
		КонецЕсли;
		
		ДлинаСтроки = ДлинаСтроки - 1;
		
	КонецЦикла;

КонецФункции

&НаКлиенте
Процедура ВыполнитьВыгрузкуИзФормы()
	
	// Запомним файл правил и файл выгрузки.
	ДобавитьСтрокуКСпискуВыбора(Элементы.ИмяФайлаПравил.СписокВыбора, ИмяФайлаПравил, ПравилаОбмена);
	
	Если Не Объект.НепосредственноеЧтениеВИБПриемнике И Не ЭтоКлиент Тогда
		
		Если ИменаФайловПравилИОбменаСовпадают() Тогда
			Возврат;
		КонецЕсли;
		
		ДобавитьСтрокуКСпискуВыбора(Элементы.ИмяФайлаДанных.СписокВыбора, ИмяФайлаДанных, ВыгрузкаДанныхВФайл);
		
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Выполняется выгрузка данных. Пожалуйста, подождите...'"));
	АдресФайлаДанныхВХранилище = ВыполнитьВыгрузкуНаСервере();
	
	Если АдресФайлаДанныхВХранилище = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РазвернутьСтрокиДерева(Объект.ТаблицаПравилВыгрузки, Элементы.ТаблицаПравилВыгрузки, "Включить");
	
	Если ЭтоКлиент И Не ПрямаяВыгрузка И Не Объект.ФлагОшибки Тогда
		
		ТекущаяДатаВремя = Формат(ТекущаяДата(), "ДФ=гггг-ММ-дд-чч-мм-сс-");
		// СорокинСС - 30.09.2021 - начало
		// ИмяСохраняемогоФайла = ?(Объект.АрхивироватьФайл, НСтр("ru = 'Файл выгрузки.zip'"), ТекущаяДатаВремя + " " + НСтр("ru = 'Файл выгрузки.xml'"));
		ИмяСохраняемогоФайла = ?(Объект.АрхивироватьФайл, НСтр("ru = 'Файл выгрузки.zip'"), ИмяФайлаДанных);
		// СорокинСС - 30.09.2021 - конец
		
		ИмяСохраняемогоФайла3 = ИмяСохраняемогоФайла;
		ПолучитьФайл(АдресФайлаДанныхВХранилище, ИмяСохраняемогоФайла3, Ложь);
		Сообщить("Файл выгрузки сохранен по адресу: " + ИмяСохраняемогоФайла3);
		
		//// СорокинСС - 07.07.2020 - начало
		//// ПолучитьФайл(АдресФайлаДанныхВХранилище, ИмяСохраняемогоФайла);
		//ИмяСохраняемогоФайла2 = КаталогВременныхФайлов() + ИмяСохраняемогоФайла;
		//ПолучитьФайл(АдресФайлаДанныхВХранилище, ИмяСохраняемогоФайла2, Ложь);
		//Сообщить("Файл выгрузки сохранен по адресу: " + ИмяСохраняемогоФайла2);
		//
		//ИмяСохраняемогоФайла3 = "C:\Users\sinergo09\Downloads\" + ИмяСохраняемогоФайла;
		//ПолучитьФайл(АдресФайлаДанныхВХранилище, ИмяСохраняемогоФайла3, Ложь);
		//Сообщить("Файл выгрузки сохранен по адресу: " + ИмяСохраняемогоФайла3);
		//// СорокинСС - 07.07.2020 - конец
		
	КонецЕсли;
	
	ОткрытьДанныеПротоколовОбменаПриНеобходимости();
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьВыгрузкуНаСервере(ВыгружатьЧастями = Ложь, НомерЧасти = 0, СтрВключенныеПравила = "")
	
	Если ЭтоКлиент Тогда
		Объект.ИмяФайлаПротоколаОбменаНаКлиенте = Объект.ИмяФайлаПротоколаОбмена;
		Объект.ИмяФайлаПротоколаОбмена = ПолучитьИмяВременногоФайла("txt");
	КонецЕсли;
	
	Объект.ИмяФайлаПравилОбмена = ИмяФайлаНаСервереИлиКлиенте(ИмяФайлаПравил, АдресФайлаПравилВХранилище);
	
	Если Не ПрямаяВыгрузка Тогда
		
		ИмяВременногоФайлаДанных = ИмяФайлаНаСервереИлиКлиенте(ИмяФайлаДанных, "",,Истина, Ложь);
		
		Если ИмяВременногоФайлаДанных = Неопределено Тогда
			
			Возврат Неопределено;
			СообщитьПользователю(НСтр("ru = 'Не определен файл данных'"));
			
		Иначе
			
			Объект.ИмяФайлаОбмена = ИмяВременногоФайлаДанных;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Сорокин - 28.10.2016 - начало
	Если ВыгружатьЧастями Тогда
		ТаблицаПравилВыгрузки = РеквизитФормыВЗначение("Объект.МС_ТаблицаПравилВыгрузки");
	Иначе
		ТаблицаПравилВыгрузки = РеквизитФормыВЗначение("Объект.ТаблицаПравилВыгрузки");
	КонецЕсли;
	// Сорокин - 28.10.2016 - конец
	
	ТаблицаНастройкиПараметров = РеквизитФормыВЗначение("Объект.ТаблицаНастройкиПараметров");
	
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	ЗаполнитьЗначенияСвойств(ОбъектДляСервера, Объект);
	
	Если ОбъектДляСервера.ФлагРежимОтладкиОбработчиков Тогда
		
		Отказ = Ложь;
		
		Файл = Новый Файл(ОбъектДляСервера.ИмяФайлаВнешнейОбработкиОбработчиковСобытий);
		
		Если Не Файл.Существует() Тогда
			
			СообщитьПользователю(НСтр("ru = 'Файл внешней обработки отладчиков событий не существует на сервере'"));
			Возврат Неопределено;
			
		КонецЕсли;
		
		ОбъектДляСервера.ВыгрузитьОбработчикиСобытий(Отказ);
		
		Если Отказ Тогда
			
			СообщитьПользователю(НСтр("ru = 'Не удалось выгрузить обработчики событий'"));
			Возврат "";
			
		КонецЕсли;
		
	Иначе
		
		ОбъектДляСервера.ЗагрузитьПравилаОбмена();
		ОбъектДляСервера.ИнициализироватьПервоначальныеЗначенияПараметров();
		
	КонецЕсли;
	
	ИзменитьДеревоПравилВыгрузки(ОбъектДляСервера.ТаблицаПравилВыгрузки.Строки, ТаблицаПравилВыгрузки.Строки);
	ИзменитьТаблицуПараметров(ОбъектДляСервера.ТаблицаНастройкиПараметров, ТаблицаНастройкиПараметров);
	
	ИменаПараметров = "ВестиРасширенныйПротоколОшибок, ВыводитьДатуВремяСобытияВПротокол, РазбиватьПротоколНаЧастиРазмераМб, ВариантОтправкиПротоколаВыполнения, "
					+ "НазваниеПроектаПереноса, АдресЭлектроннойПочтыДляОтправки, ВерсияПереносаДанных";
	
	СтруктураНастроек = Новый Структура(ИменаПараметров, 
										ВестиРасширенныйПротоколОшибок, 
										ВыводитьДатуВремяСобытияВПротокол, 
										РазбиватьПротоколНаЧастиРазмераМб, 
										ВариантОтправкиПротоколаВыполнения,
										НазваниеПроектаПереноса,
										АдресЭлектроннойПочтыДляОтправки,
										ВерсияПереносаДанных);
										
	ОбъектДляСервера.ВыполнитьВыгрузку(ВыгружатьЧастями, НомерЧасти, СтрВключенныеПравила, СтруктураНастроек);
	
	ОбъектДляСервера.ТаблицаПравилВыгрузки = РеквизитФормыВЗначение("Объект.ТаблицаПравилВыгрузки");
	
	СписокЗначений = Новый СписокЗначений();
	Для Каждого Элемент Из ОбъектДляСервера.МассивИменФайловПротокола Цикл
		СписокЗначений.Добавить(Элемент);
	КонецЦикла;
	МассивИменФайловПротокола = СписокЗначений;
	
	Если ЭтоКлиент И Не ПрямаяВыгрузка Тогда
		
		АдресФайлаДанных = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Объект.ИмяФайлаОбмена), УникальныйИдентификатор);
		УдалитьФайлы(Объект.ИмяФайлаОбмена);
		
	Иначе
		
		АдресФайлаДанных = "";
		
	КонецЕсли;
	
	Если ЭтоКлиент Тогда
		
		УдалитьФайлы(ОбъектДляСервера.ИмяФайлаПравилОбмена);
		
	КонецЕсли;
	
	ОбъектДляСервера.Параметры.Очистить();
	ЗначениеВРеквизитФормы(ОбъектДляСервера, "Объект");
	
	ОбъектДляСервера.ОтправитьВсемСмс();
	
	Возврат АдресФайлаДанных;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьКомандОтладки();
	
	Элементы.НастройкаОтладкиЗагрузки.Доступность = Объект.ФлагРежимОтладкиОбработчиков;
	Элементы.НастройкаОтладкиВыгрузки.Доступность = Объект.ФлагРежимОтладкиОбработчиков;
	
КонецПроцедуры

// Изменяет дерево ПВД в соответствии с деревом на форме.
//
&НаСервере
Процедура ИзменитьДеревоПравилВыгрузки(СтрокиИсходногоДерева, СтрокиЗаменяемогоДерева)
	
	КолонкаВключить = СтрокиЗаменяемогоДерева.ВыгрузитьКолонку("Включить");
	СтрокиИсходногоДерева.ЗагрузитьКолонку(КолонкаВключить, "Включить");
	КолонкаУзел = СтрокиЗаменяемогоДерева.ВыгрузитьКолонку("СсылкаНаУзелОбмена");
	СтрокиИсходногоДерева.ЗагрузитьКолонку(КолонкаУзел, "СсылкаНаУзелОбмена");
	
	Для Каждого СтрокаИсходногоДерева Из СтрокиИсходногоДерева Цикл
		
		ИндексСтроки = СтрокиИсходногоДерева.Индекс(СтрокаИсходногоДерева);
		СтрокаИзменяемогоДерева = СтрокиЗаменяемогоДерева.Получить(ИндексСтроки);
		
		ИзменитьДеревоПравилВыгрузки(СтрокаИсходногоДерева.Строки, СтрокаИзменяемогоДерева.Строки);
		
	КонецЦикла;
	
КонецПроцедуры

// Изменяет таблицу параметров в соответствии с таблицей на форме.
//
&НаСервере
Процедура ИзменитьТаблицуПараметров(ТаблицаБазы, ТаблицаФормы)
	
	КолонкаНаименование = ТаблицаФормы.ВыгрузитьКолонку("Наименование");
	ТаблицаБазы.ЗагрузитьКолонку(КолонкаНаименование, "Наименование");
	КолонкаЗначение = ТаблицаФормы.ВыгрузитьКолонку("Значение");
	ТаблицаБазы.ЗагрузитьКолонку(КолонкаЗначение, "Значение");
	
КонецПроцедуры

&НаКлиенте
Процедура ПрямаяВыгрузкаПриИзмененииЗначения()
	
	ПараметрыВыгрузки = Элементы.ПараметрыВыгрузки;
	
	ПараметрыВыгрузки.ТекущаяСтраница = ?(ПрямаяВыгрузка = 0,
										  ПараметрыВыгрузки.ПодчиненныеЭлементы.ВыгрузкаВФайл,
										  ПараметрыВыгрузки.ПодчиненныеЭлементы.ВыгрузкаВИБПриемник);
	
	Объект.НепосредственноеЧтениеВИБПриемнике = (ПрямаяВыгрузка = 1);
	
	// СорокинСС - 15.09.2020 - начало
	Если ПрямаяВыгрузка = 2 Тогда
		Объект.мсВыгрузкаRabbitMQ = Истина;
		ПараметрыВыгрузки.ТекущаяСтраница = ПараметрыВыгрузки.ПодчиненныеЭлементы.ВыгрузкаRabbitMQ;
		Если Объект.мсПорт = 0 Тогда
			Объект.мсПорт = 5672;
		КонецЕсли;
		
		// временно - заполнение по умолчанию для отладки выгрузки
		Если Не ЗначениеЗаполнено(Объект.мсСерверAMQP) Тогда
			Объект.мсСерверAMQP    = "rattlesnake.rmq.cloudamqp.com";
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.ПользовательИнформационнойБазыДляПодключения) Тогда
			Объект.ПользовательИнформационнойБазыДляПодключения = "lsleqgcw";
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.ПарольИнформационнойБазыДляПодключения) Тогда
			Объект.ПарольИнформационнойБазыДляПодключения = "qfR9y8G2hmey5q6WbikKzR0mtXdSluaJ";
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.мсПорт) Тогда
			Объект.мсПорт = 5672;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.мсХостAMQP) Тогда
			Объект.мсХостAMQP = "lsleqgcw";
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.мсИмяМаршрута) Тогда
			Объект.мсИмяМаршрута     = "testkey";
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.мсИмяОбмена) Тогда
			Объект.мсИмяОбмена       = "test1";
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.мсИмяОчереди) Тогда
			Объект.мсИмяОчереди      = "test2";
		КонецЕсли;
		
		УстановитьКомпонентуРозовогоКролика();
	
	Иначе
		Объект.мсВыгрузкаRabbitMQ = Ложь;
	КонецЕсли;
	// СорокинСС - 15.09.2020 - конец
	
	ТипИнформационнойБазыДляПодключенияПриИзмененииЗначения();
	
КонецПроцедуры

Процедура ТипИнформационнойБазыДляПодключенияПриИзмененииЗначения()
	
	ТипБазы = Элементы.ТипБазы;
	ТипБазы.ТекущаяСтраница = ?(Объект.ТипИнформационнойБазыДляПодключения,
								ТипБазы.ПодчиненныеЭлементы.ФайловаяБаза,
								ТипБазы.ПодчиненныеЭлементы.БазаНаСервере);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуКСпискуВыбора(СписокСохраняемыхЗначений, ЗначениеСохранения, ИмяПараметраДляСохранения)
	
	Если ПустаяСтрока(ЗначениеСохранения) Тогда
		Возврат;
	КонецЕсли;
	
	НайденныйЭлемент = СписокСохраняемыхЗначений.НайтиПоЗначению(ЗначениеСохранения);
	Если НайденныйЭлемент <> Неопределено Тогда
		СписокСохраняемыхЗначений.Удалить(НайденныйЭлемент);
	КонецЕсли;
	
	СписокСохраняемыхЗначений.Вставить(0, ЗначениеСохранения);
	
	Пока СписокСохраняемыхЗначений.Количество() > 10 Цикл
		СписокСохраняемыхЗначений.Удалить(СписокСохраняемыхЗначений.Количество() - 1);
	КонецЦикла;
	
	ИмяПараметраДляСохранения = СписокСохраняемыхЗначений;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиОтладкиОбработчиков(ОбработчикиСобытийИзФайлаПравил)
	
	ИмяОбработки = Лев(ИмяФормы, ПоследнийРазделитель(ИмяФормы));
	ИмяВызываемойФормы = ИмяОбработки + "УправляемаяФормаНастройкиОтладкиОбработчиков";
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяФайлаВнешнейОбработкиОбработчиковСобытий", Объект.ИмяФайлаВнешнейОбработкиОбработчиковСобытий);
	ПараметрыФормы.Вставить("РежимОтладкиАлгоритмов", Объект.РежимОтладкиАлгоритмов);
	ПараметрыФормы.Вставить("ИмяФайлаПравилОбмена", Объект.ИмяФайлаПравилОбмена);
	ПараметрыФормы.Вставить("ИмяФайлаОбмена", Объект.ИмяФайлаОбмена);
	ПараметрыФормы.Вставить("ОбработчикиСобытийЧитаемИзФайлаПравилОбмена", ОбработчикиСобытийИзФайлаПравил);
	ПараметрыФормы.Вставить("ИмяОбработки", ИмяОбработки);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	Обработчик = Новый ОписаниеОповещения("ОткрытьФормуНастройкиОтладкиОбработчиковЗавершение", ЭтотОбъект, ОбработчикиСобытийИзФайлаПравил);
	ПараметрыОтладки = ОткрытьФорму(ИмяВызываемойФормы, ПараметрыФормы, ЭтотОбъект,,,,Обработчик, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиОтладкиОбработчиковЗавершение(ПараметрыОтладки, ОбработчикиСобытийИзФайлаПравил) Экспорт
	
	Если ПараметрыОтладки <> Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(Объект, ПараметрыОтладки);
		
		Если ЭтоКлиент Тогда
			
			Если ОбработчикиСобытийИзФайлаПравил Тогда
				
				ИмяФайла = Объект.ИмяФайлаПравилОбмена;
				
			Иначе
				
				ИмяФайла = Объект.ИмяФайлаОбмена;
				
			КонецЕсли;
			
			УдалитьФайлы(ИмяФайла);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасположениеФайла()
	
	Элементы.ИмяФайлаПравил.Видимость = Не ЭтоКлиент;
	// СорокинСС - 30.09.2021 - начало
	// Элементы.ИмяФайлаДанных.Видимость = Не ЭтоКлиент;
	Если ЭтоКлиент Тогда
		Элементы.ИмяФайлаДанных.Заголовок = "Имя файла данных на клиенте";
	Иначе
		Элементы.ИмяФайлаДанных.Заголовок = "Имя файла данных на сервере";
	КонецЕсли;
	// СорокинСС - 30.09.2021 - конец
	Элементы.ИмяФайлаОбмена.Видимость = Не ЭтоКлиент;
	Элементы.ГруппаБезопаснаяЗагрузка.Видимость = Не ЭтоКлиент;
	
	УстановитьПризнакЗагрузкиПравил(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРежимОбработки(РежимРаботы)
	
	ГруппаРежима = КоманднаяПанель.ПодчиненныеЭлементы.РежимОбработки.ПодчиненныеЭлементы;
	
	ГруппаРежима.ФормаНаКлиенте.Пометка = РежимРаботы;
	ГруппаРежима.ФормаНаСервере.Пометка = Не РежимРаботы;
	
	КоманднаяПанель.ПодчиненныеЭлементы.РежимОбработки.Заголовок = 
	?(РежимРаботы, НСтр("ru = 'Режим работы (на клиенте)'"), НСтр("ru = 'Режим работы (на сервере)'"));
	
	Объект.ТаблицаПравилВыгрузки.ПолучитьЭлементы().Очистить();
	Объект.ТаблицаНастройкиПараметров.Очистить();
	
	ИзменитьРасположениеФайла();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДанныеПротоколовОбменаПриНеобходимости()
	
	Если НЕ Объект.ОткрыватьПротоколыОбменаПослеВыполненияОпераций Тогда
		Возврат;
	КонецЕсли;
	
	#Если Не ВебКлиент  Тогда
		
		Если Не ПустаяСтрока(Объект.ИмяФайлаПротоколаОбмена) Тогда
			ОткрытьВПриложении(Объект.ИмяФайлаПротоколаОбмена);
		КонецЕсли;
		
		Если Объект.НепосредственноеЧтениеВИБПриемнике Тогда
			
			Объект.ИмяФайлаПротоколаОбменаЗагрузка = ПолучитьИмяПротоколаДляВторойИнформационнойБазыComСоединенияНаСервере();
			
			Если Не ПустаяСтрока(Объект.ИмяФайлаПротоколаОбменаЗагрузка) Тогда
				ОткрытьВПриложении(Объект.ИмяПротоколаЗагрузки);
			КонецЕсли;
			
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяПротоколаДляВторойИнформационнойБазыComСоединенияНаСервере()
	
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьИмяПротоколаДляВторойИнформационнойБазыComСоединения();
	
КонецФункции

&НаКлиенте
Функция ПустоеЗначениеРеквизита(Реквизит, ПутьКДанным, Заголовок)
	
	Если ПустаяСтрока(Реквизит) Тогда
		
		ТекстСообщения = Нстр("ru = 'Поле ""%1"" не заполнено'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Заголовок);
		
		СообщитьПользователю(ТекстСообщения, ПутьКДанным);
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УстановитьПризнакЗагрузкиПравил(Признак)
	
	ПравилаЗагружены = Признак;
	Элементы.ФормаВыполнитьВыгрузку.Доступность = Признак;
	Элементы.НадписьПояснениеВыгрузки.Видимость = Не Признак;
	Элементы.ГруппаОтладкиВыгрузки.Доступность = Признак;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьПользователю(Текст, ПутьКДанным = "")
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Сообщение.ПутьКДанным = ПутьКДанным;
	Сообщение.Сообщить();
	
КонецПроцедуры

// Возвращает Истина, если клиентское приложение запущено под управлением ОС Linux.
//
// Возвращаемое значение:
//  Булево. Если нет клиентского приложения, возвращается Ложь.
//
&НаКлиенте
Функция ЭтоLinuxКлиент()
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	ЭтоLinuxКлиент = СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86
				 ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64;
	
	Возврат ЭтоLinuxКлиент;
	
КонецФункции

&НаСервере
Функция ПроверитьВерсиюИРежимСовместимостиПлатформы()
	
	Информация = Новый СистемнаяИнформация;
	Если Не (Лев(Информация.ВерсияПриложения, 3) = "8.3"
		И (Метаданные.РежимСовместимости = Метаданные.СвойстваОбъектов.РежимСовместимости.НеИспользовать
		Или (Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_1
		И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_2_13
		И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости["Версия8_2_16"]
		И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости["Версия8_3_1"]
		И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости["Версия8_3_2"]))) Тогда
		
		ВызватьИсключение Нстр("ru = 'Обработка предназначена для запуска на версии платформы
			|1С:Предприятие 8.3 с отключенным режимом совместимости или выше'");
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьРежимБезопаснаяЗагрузка(Интерактивно = Истина)
	
	Элементы.ГруппаБезопаснаяЗагрузка.Доступность = Объект.БезопаснаяЗагрузка;
	
	ЧерезХранилище = ЭтоКлиент;
	#Если ВебКлиент Тогда
		ЧерезХранилище = Истина;
	#КонецЕсли
	
	Если Объект.БезопаснаяЗагрузка И ЧерезХранилище Тогда
		ПоместитьФайлПравилЗагрузкиВХранилище();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьФайлПравилЗагрузкиВХранилище()
	
	ЧерезХранилище = ЭтоКлиент;
	#Если ВебКлиент Тогда
		ЧерезХранилище = Истина;
	#КонецЕсли
	
	АдресФайла = "";
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоместитьФайлПравилЗагрузкиВХранилищеЗавершить", ЭтотОбъект);
	НачатьПомещениеФайла(ОписаниеОповещения, АдресФайла,
		?(ЧерезХранилище, Нстр("ru = 'Файл обмена'"), ИмяФайлаПравилЗагрузки), ЧерезХранилище, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьФайлПравилЗагрузкиВХранилищеЗавершить(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		АдресФайлаПравилЗагрузкиВХранилище = Адрес;
	КонецЕсли;
	
КонецПроцедуры

// МС - 27.10.2016 - начало
&НаКлиенте
Процедура ВыполнитьВыгрузкуИзФормыЧастями(НомерВыгрузки = 1, СтрВключенныеПравила = "")
	
	// Запомним файл правил и файл выгрузки.
	ДобавитьСтрокуКСпискуВыбора(Элементы.ИмяФайлаПравил.СписокВыбора, ИмяФайлаПравил, ПравилаОбмена);
	
	Если Не Объект.НепосредственноеЧтениеВИБПриемнике И Не ЭтоКлиент Тогда
		
		Если ИменаФайловПравилИОбменаСовпадают() Тогда
			Возврат;
		КонецЕсли;
		
		ДобавитьСтрокуКСпискуВыбора(Элементы.ИмяФайлаДанных.СписокВыбора, ИмяФайлаДанных, ВыгрузкаДанныхВФайл);
		
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Выполняется выгрузка данных. Пожалуйста, подождите...'"));
	
	// Сорокин - 28.10.2016 - начало
	// АдресФайлаДанныхВХранилище = ВыполнитьВыгрузкуНаСервере();
	АдресФайлаДанныхВХранилище = ВыполнитьВыгрузкуНаСервере(Истина, НомерВыгрузки, СтрВключенныеПравила);
	// Сорокин - 28.10.2016 - конец
	
	Если АдресФайлаДанныхВХранилище = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РазвернутьСтрокиДерева(Объект.МС_ТаблицаПравилВыгрузки, Элементы.ТаблицаПравилВыгрузки, "Включить");
	
	Если ЭтоКлиент И Не ПрямаяВыгрузка И Не Объект.ФлагОшибки Тогда
		
		// СорокинСС - 30.09.2021 - начало
		// ИмяСохраняемогоФайла = ?(Объект.АрхивироватьФайл, НСтр("ru = 'Файл выгрузки.zip'"),НСтр("ru = 'Файл выгрузки.xml'"));
		ИмяСохраняемогоФайла = Объект.ИмяФайлаОбмена;
		// СорокинСС - 30.09.2021 - конец
		
		СтрНаЧтоЗаменять = "_" + ЗаменитьЗапрещенныеСимволы(СтрВключенныеПравила) + "_" + СтрЗаменить(СокрЛП(НомерВыгрузки), Символы.НПП, "");
		ИмяСохраняемогоФайла = СтрЗаменить(ИмяСохраняемогоФайла, ".zip", СтрНаЧтоЗаменять + ".zip");
		ИмяСохраняемогоФайла = СтрЗаменить(ИмяСохраняемогоФайла, ".xml", СтрНаЧтоЗаменять + ".xml");
		
		ПолучитьФайл(АдресФайлаДанныхВХранилище, ИмяСохраняемогоФайла);
		
	КонецЕсли;
	
	ОткрытьДанныеПротоколовОбменаПриНеобходимости();
	
КонецПроцедуры

Функция ЗаменитьЗапрещенныеСимволы(С)
	
	Рез = С;
    Рез = СтрЗаменить(Рез, "\", "");
    Рез = СтрЗаменить(Рез, "/", "");
    Рез = СтрЗаменить(Рез, ":", "");
    Рез = СтрЗаменить(Рез, "*", "");
    Рез = СтрЗаменить(Рез, "?", "");
    Рез = СтрЗаменить(Рез, """", "");
    Рез = СтрЗаменить(Рез, "<", "");
    Рез = СтрЗаменить(Рез, ">", "");
    Рез = СтрЗаменить(Рез, "|", "");
    Рез = СтрЗаменить(Рез, "+", "");
    
    Возврат(Рез);
	
КонецФункции
	
	
&НаСервере
Процедура СохранитьНастройки()
	
	КлючНастроек = "MoscowSoft_Обработка_УниверсальныйОбменДаннымиXML";
	Настройки = Новый Соответствие;
	
	Настройки.Вставить("мсНомерЗаказа",                         Объект.мсНомерЗаказа);
	Настройки.Вставить("ВариантОтправкиПротоколаВыполнения",    ВариантОтправкиПротоколаВыполнения);
	Настройки.Вставить("АдресЭлектроннойПочтыДляОтправки",      АдресЭлектроннойПочтыДляОтправки);
	Настройки.Вставить("НазваниеПроектаПереноса",               НазваниеПроектаПереноса);
	Настройки.Вставить("ВерсияПереносаДанных",                  ВерсияПереносаДанных);
	Настройки.Вставить("ОтправлятьПисьмоПослеЗавершенияРаботы", ОтправлятьПисьмоПослеЗавершенияРаботы);
	Настройки.Вставить("мсАдресЭлектроннойПочты",               Объект.мсАдресЭлектроннойПочты);
	
	Настройки.Вставить("ВестиРасширенныйПротоколОшибок",    ВестиРасширенныйПротоколОшибок);
	Настройки.Вставить("ВыводитьДатуВремяСобытияВПротокол", ВыводитьДатуВремяСобытияВПротокол);
	Настройки.Вставить("РазбиватьПротоколНаЧастиРазмераМб", РазбиватьПротоколНаЧастиРазмераМб);
	Настройки.Вставить("МС_ДелитьВыгрузкуНаЧасти",          Объект.МС_ДелитьВыгрузкуНаЧасти);
	Настройки.Вставить("ДелитьВыгрузку",                    ДелитьВыгрузку);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("MoscowSoft_Обработка_УниверсальныйОбменДаннымиXML", КлючНастроек, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	КлючНастроек = "MoscowSoft_Обработка_УниверсальныйОбменДаннымиXML";
	
	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("MoscowSoft_Обработка_УниверсальныйОбменДаннымиXML", КлючНастроек);
	
	Если ТипЗнч(ЗначениеНастроек) = Тип("Соответствие") Тогда
		
		Попытка
			Объект.мсНомерЗаказа = ЗначениеНастроек.Получить("мсНомерЗаказа");
		Исключение
		КонецПопытки;
		
		Попытка
			Объект.мсАдресЭлектроннойПочты = ЗначениеНастроек.Получить("мсАдресЭлектроннойПочты");
		Исключение
		КонецПопытки;
		
		Попытка
			ВариантОтправкиПротоколаВыполнения = ЗначениеНастроек.Получить("ВариантОтправкиПротоколаВыполнения");
		Исключение
		КонецПопытки;
		
		Попытка
			АдресЭлектроннойПочтыДляОтправки = ЗначениеНастроек.Получить("АдресЭлектроннойПочтыДляОтправки");
		Исключение
		КонецПопытки;
		
		Попытка
			НазваниеПроектаПереноса = ЗначениеНастроек.Получить("НазваниеПроектаПереноса");
		Исключение
		КонецПопытки;
		
		Попытка
			ВерсияПереносаДанных = ЗначениеНастроек.Получить("ВерсияПереносаДанных");
		Исключение
		КонецПопытки;
		
		Попытка
			ОтправлятьПисьмоПослеЗавершенияРаботы = ЗначениеНастроек.Получить("ОтправлятьПисьмоПослеЗавершенияРаботы");
		Исключение
		КонецПопытки;
		
		Попытка
			ВестиРасширенныйПротоколОшибок = ЗначениеНастроек.Получить("ВестиРасширенныйПротоколОшибок");
		Исключение
		КонецПопытки;
		
		Попытка
			ВыводитьДатуВремяСобытияВПротокол = ЗначениеНастроек.Получить("ВыводитьДатуВремяСобытияВПротокол");
		Исключение
		КонецПопытки;
		
		Попытка
			РазбиватьПротоколНаЧастиРазмераМб = ЗначениеНастроек.Получить("РазбиватьПротоколНаЧастиРазмераМб");
		Исключение
		КонецПопытки;
		
		Попытка
			ДелитьВыгрузку = ЗначениеНастроек.Получить("ДелитьВыгрузку");
		Исключение
		КонецПопытки;
		
		Попытка
			Объект.МС_ДелитьВыгрузкуНаЧасти = ЗначениеНастроек.Получить("МС_ДелитьВыгрузкуНаЧасти");
		Исключение
		КонецПопытки;
	Иначе
		// первичное заполнение настроек по умолчанию
		ВестиРасширенныйПротоколОшибок = Ложь;
		ВыводитьДатуВремяСобытияВПротокол = Ложь;
		Объект.ФлагРежимОтладки = Истина;
		РазбиватьПротоколНаЧастиРазмераМб = 0;
		ОтправлятьПисьмоПослеЗавершенияРаботы = Ложь;
		ВерсияПереносаДанных = 0;
		АдресЭлектроннойПочтыДляОтправки = "log@moscowsoft.com";
		ВариантОтправкиПротоколаВыполнения = 3;
		
		СохранитьНастройки();
	КонецЕсли;
	
	ДелитьВыгрузкуПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновлениеЗаказа()
	
	ЗначениеНадписи = "";
	
	Если Не ЗначениеЗаполнено(Объект.мсНомерЗаказа) Или Не ЗначениеЗаполнено(Объект.мсАдресЭлектроннойПочты) Тогда
		// не обновляем, ждем ввода номера заказа и адреса почты
		ЗначениеНадписи = "Авторизуйтесь, чтобы быть в курсе обновлений переноса данных";
	Иначе
		СтатусЗаказа = СтатусЗаказаНаИнфостарте();
		
		ИндексРешетки = Найти(СтатусЗаказа, "###");
		
		Если ИндексРешетки > 0 Тогда
			мсНомерПубликации = Прав(СтатусЗаказа, СтрДлина(СтатусЗаказа)-ИндексРешетки-2);
			СтатусЗаказа = Лев(СтатусЗаказа, ИндексРешетки-1);
		КонецЕсли;
		
		ЗначениеНадписи = СтатусЗаказа;
		
	КонецЕсли;
	
	мсУстановитьНадписьСтатуса(ЗначениеНадписи);
	
КонецПроцедуры

&НаСервере
Функция СтатусЗаказаНаИнфостарте()
	
	ИмяКоманды = "getStatus";
	Об = РеквизитФормыВЗначение("Объект");
	Возврат Об.ВыполнитьКомандуВебсервисаMoscowSoft(ИмяКоманды);
	
КонецФункции

&НаСервере
Процедура мсУстановитьНадписьСтатуса(ЗначениеНадписи)
	
	ЭлементСтатуса = Элементы.мсНадписьСостояния;
	ЦветТекста     = ЭлементСтатуса.ЦветТекста;
	КрасныйЦвет    = Новый Цвет(255, 0, 0);
	ЗеленыйЦвет    = WebЦвета.ТемноЗеленый; // Новый Цвет(0, 255, 0);
	РыжийЦвет      = WebЦвета.ТемноЗолотистый;
	ПоказыватьКнопкуПродления = Ложь;
	ТекстПроОбновление = Ложь;
	
	// Не заполнены номер заказа и / или адрес почты
	Если Не ЗначениеЗаполнено(Объект.мсНомерЗаказа) Или Не ЗначениеЗаполнено(Объект.мсАдресЭлектроннойПочты) Тогда
		мсНадписьСостояния = "Авторизуйтесь, чтобы быть в курсе обновлений переноса данных";
		
		Если Элементы.ИзображениеСтатуса.Картинка <> БиблиотекаКартинок.Пользователь Тогда
			Элементы.ИзображениеСтатуса.Картинка= БиблиотекаКартинок.Пользователь;
		КонецЕсли;
		Если ЦветТекста <> КрасныйЦвет Тогда
			Элементы.мсНадписьСостояния.ЦветТекста = КрасныйЦвет;
		КонецЕсли;
		
	Иначе
		мсНадписьСостояния = ЗначениеНадписи;
		
		// Подписка истекла или технические проблемы или указаные неверные номер заказа/почта
		Если Найти(ЗначениеНадписи, "неактуален") > 0 Или Найти(ЗначениеНадписи, "техподдержку") > 0 Или Найти(ЗначениеНадписи, "подключение") > 0
			 Тогда
			
			Если Элементы.ИзображениеСтатуса.Картинка <> БиблиотекаКартинок.Остановить Тогда
				Элементы.ИзображениеСтатуса.Картинка = БиблиотекаКартинок.Остановить;
			КонецЕсли;
			Если ЦветТекста <> КрасныйЦвет Тогда
				Элементы.мсНадписьСостояния.ЦветТекста = КрасныйЦвет;
			КонецЕсли;
			
			Если Найти(ЗначениеНадписи, "неактуален") > 0 Тогда
				ПоказыватьКнопкуПродления = Истина;
			КонецЕсли;
			
		// Подписка действует, но правила устарели
	ИначеЕсли (Найти(ЗначениеНадписи, "активна") > 0 И Найти(ЗначениеНадписи, "актуальна") = 0)
		Или Найти(ЗначениеНадписи, "обновлений") > 0 Тогда
			
			Если Элементы.ИзображениеСтатуса.Картинка <> БиблиотекаКартинок.Обновить Тогда
				Элементы.ИзображениеСтатуса.Картинка = БиблиотекаКартинок.Обновить;
			КонецЕсли;
			Если ЦветТекста <> РыжийЦвет Тогда
				Элементы.мсНадписьСостояния.ЦветТекста = РыжийЦвет;
			КонецЕсли;
			
			Если Найти(ЗначениеНадписи, "обновлений") = 0 Тогда
				ТекстПроОбновление = Истина;
				ПоказыватьКнопкуПродления = Истина;
			КонецЕсли;
			
		// Подписка действует, правила свежие
		ИначеЕсли Найти(ЗначениеНадписи, "активна") > 0 И Найти(ЗначениеНадписи, "актуальна") > 0 Тогда
			
			Если Элементы.ИзображениеСтатуса.Картинка <> БиблиотекаКартинок.ЗаписатьИЗакрыть Тогда
				Элементы.ИзображениеСтатуса.Картинка = БиблиотекаКартинок.ЗаписатьИЗакрыть;
			КонецЕсли;
			Если ЦветТекста <> ЗеленыйЦвет Тогда
				Элементы.мсНадписьСостояния.ЦветТекста = ЗеленыйЦвет;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	//КнопкаПродления = Элементы.ФормамсОбновитьПодписку;
	//Если КнопкаПродления.Доступность <> ПоказыватьКнопкуПродления Тогда
	//	КнопкаПродления.Доступность = ПоказыватьКнопкуПродления;
	//КонецЕсли;
	//Если Не ПоказыватьКнопкуПродления Тогда
	//	КнопкаПродления.Заголовок = "";
	//	//КнопкаПродления.Картинка = Новый Картинка;
	//КонецЕсли;
	//
	//Если ПоказыватьКнопкуПродления Тогда
	//	Если ТекстПроОбновление И КнопкаПродления.Заголовок <> "Скачать обновление" Тогда
	//		КнопкаПродления.Заголовок = "Скачать обновление";
	//	КонецЕсли;
	//	
	//	Если Не ТекстПроОбновление И КнопкаПродления.Заголовок <> "Продлить подписку на обновления" Тогда
	//		КнопкаПродления.Заголовок = "Продлить подписку на обновления";
	//	КонецЕсли;
	//	
	//	//Если КнопкаПродления.Картинка <> БиблиотекаКартинок.ДобавитьВИзбранное Тогда
	//	//	КнопкаПродления.Картинка = БиблиотекаКартинок.ДобавитьВИзбранное;
	//	//КонецЕсли;
	//КонецЕсли;
	//
	//ТекстПроОбновление = Ложь;
	
	Элементы.мсНадписьСостояния.Ширина = 0.65 * СтрДлина(мсНадписьСостояния);
	Элементы.мсНадписьСостояния1.Ширина = Элементы.мсНадписьСостояния.Ширина;
	//Элементы.мсНадписьСостояния.МаксимальнаяШирина = Элементы.мсНадписьСостояния.Ширина;
	
КонецПроцедуры

&НаКлиенте
Процедура мсОбновитьПодписку(Команда)
	
#Если Не ВебКлиент Тогда
	ТемаОбращения = "Тема: продление подписки на обновления";
	ПараметрыАвторизации = Новый Структура("мсНомерЗаказа, мсАдресЭлектроннойПочты, РежимОбмена, ТемаОбращения", 
							Объект.мсНомерЗаказа, Объект.мсАдресЭлектроннойПочты, Объект.РежимОбмена, ТемаОбращения);
						
	ОткрытьФорму("ВнешняяОбработка.УниверсальныйОбменДаннымиXML.Форма.ОбращениеВТехподдержку",
				ПараметрыАвторизации, ЭтаФорма);
	
	//Если Элементы.ФормамсОбновитьПодписку.Заголовок <> "Скачать обновление" Тогда // приобрести продление
	//	
	//	//Если ЗначениеЗаполнено(Объект.мсНомерПубликации) Тогда
	//	//	СсылкиОбновлений = СсылкиОбновлений();
	//	//	ЗапуститьПриложение(СсылкиОбновлений.Получить(Объект.мсНомерПубликации));
	//	//Иначе
	//	//	ЗапуститьПриложение("http://shop.moscowsoft.com/profile/15620/");
	//	//КонецЕсли;
	//	
	//Иначе
		
	//КонецЕсли;
#КонецЕсли

КонецПроцедуры

&НаСервере
Функция ПолучитьФайлНаСервере()
	
	Об = РеквизитФормыВЗначение("Объект");
	ИмяСервера           = Об.ПутьВебСервиса();
	ЕстьОшибкаСкачивания = Ложь;
	ТекстПервойОшибки    = "";
	
	Попытка
		Адрес = Об.ПолучитьПравилаНаСервере(ИмяСервера);
	Исключение
		ЕстьОшибкаСкачивания = Истина;
		ТекстПервойОшибки = ОписаниеОШибки();
	КонецПопытки;
	
	Если ЕстьОшибкаСкачивания Тогда
		Попытка
			ИмяСервера = "192.168.88.248";
			Адрес = Об.ПолучитьПравилаНаСервере(ИмяСервера);
		Исключение
			Адрес = "";
			Сообщение = "Текст первой ошибки: " + ТекстПервойОшибки + ", текст второй ошибки: " + ОписаниеОшибки();
			Сообщить(Сообщение);
			ЗаписьЖурналаРегистрации("УниверсальныйОбменДаннымиXML.ПолучитьФайлНаСервере", УровеньЖурналаРегистрации.Ошибка, , , Сообщение);
			
			Элементы.НадписьРезультатВыполнения.Заголовок = "" + СокрЛП(ТекущаяДатаСеанса()) + ": " + Сообщение;
			Элементы.ГруппаЛог.Видимость = Истина;
			Элементы.ГлавнаяПанельФормы.ТекущаяСтраница = Элементы.НастройкиMoscowSoft;

		КонецПопытки;
	КонецЕсли;
	
	Возврат Адрес;

КонецФункции

&НаСервере
Процедура МС_ЗагрузитьПравила()
КонецПроцедуры


&НаКлиенте
Функция СсылкиОбновлений()
	
	Соответствие = Новый Соответствие();
	
	Соответствие.Вставить("424620", "http://infostart.ru/public/424620/?action=buy&id=539737");
	Соответствие.Вставить("412973", "http://infostart.ru/public/412973/?action=buy&id=540992");
	Соответствие.Вставить("334954", "http://infostart.ru/public/334954/?action=buy&id=544374");
	Соответствие.Вставить("310433", "http://infostart.ru/public/310433/?action=buy&id=540990");
	Соответствие.Вставить("309351", "http://infostart.ru/public/309351/?action=buy&id=527991");
	Соответствие.Вставить("424216", "http://infostart.ru/public/424216/?action=buy&id=540805");
	Соответствие.Вставить("395698", "http://infostart.ru/public/395698/?action=buy&id=544373");
	Соответствие.Вставить("375452", "http://infostart.ru/public/375452/?action=buy&id=540457");
	Соответствие.Вставить("359603", "http://infostart.ru/public/359603/?action=buy&id=540966");
	Соответствие.Вставить("336437", "http://infostart.ru/public/336437/?action=buy&id=539738");
	
	Возврат Соответствие;
	
КонецФункции

&НаКлиенте
Функция РаспаковатьЗипФайл(Знач ПолноеИмяФайлаАрхива, Знач ПутьРаспаковкиФайлов, Знач ПарольАрхива = "") Экспорт
	
	// возвращаемое значение функции
	Результат = Истина;
	
	Попытка
		
		Архиватор = Новый ЧтениеZipФайла(ПолноеИмяФайлаАрхива, ПарольАрхива);
		
	Исключение
		Архиватор = Неопределено;
		Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		#Если Не ВебКлиент Тогда
		Архиватор.ИзвлечьВсе(ПутьРаспаковкиФайлов, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		#КонецЕсли
	Исключение
		
		Сообщить(ОписаниеОшибки());
		
		Результат = Ложь;
	КонецПопытки;
	
	Архиватор.Закрыть();
	Архиватор = Неопределено;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура мсНадписьСостоянияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗначениеНадписи = "";
	
	Если Не ЗначениеЗаполнено(Объект.мсНомерЗаказа) Или Не ЗначениеЗаполнено(Объект.мсАдресЭлектроннойПочты) Тогда
		ПараметрыАвторизации = Новый Структура("мсНомерЗаказа, мсАдресЭлектроннойПочты", Объект.мсНомерЗаказа, Объект.мсАдресЭлектроннойПочты);
		ОткрытьФорму("ВнешняяОбработка.УниверсальныйОбменДаннымиXML.Форма.ФормаАвторизации",ПараметрыАвторизации, ЭтаФорма);
	Иначе
		
		ПараметрыАвторизации = Новый Структура("мсНомерЗаказа, мсАдресЭлектроннойПочты, мсТекущийСтатус", Объект.мсНомерЗаказа, Объект.мсАдресЭлектроннойПочты, мсНадписьСостояния);
		ОткрытьФорму("ВнешняяОбработка.УниверсальныйОбменДаннымиXML.Форма.ФормаИнструкции",ПараметрыАвторизации, ЭтаФорма);

		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Объект.мсНомерЗаказа = ВыбранноеЗначение.мсНомерЗаказа;
		Объект.мсАдресЭлектроннойПочты = ВыбранноеЗначение.мсАдресЭлектроннойПочты;
		
		СохранитьНастройки();
		
		ОбновлениеЗаказа();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура мсОбновитьСтатус(Команда)
	ОбновлениеЗаказа();
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗагрузкиДанныхПриИзменении(Элемент)
	
	Если Объект.мсВариантЗагрузкиДанных = 0 Тогда
		Элементы.СтраницыВариантыЗагрузки.ТекущаяСтраница = Элементы.СтраницаЗагрузкаИзФайла;
	Иначе
		Элементы.СтраницыВариантыЗагрузки.ТекущаяСтраница = Элементы.СтраницаЗагрузкаИзRabbitMQ;
		Объект.БезопаснаяЗагрузка = Истина;
		ИзменитьРежимБезопаснаяЗагрузка();
		
		Если ЗначениеЗаполнено(ИмяФайлаПравилЗагрузки) Тогда
			ПоместитьФайлПравилЗагрузкиВХранилище();
		Иначе
			Сообщить("Загрузка выполняется в безопасном режиме, поэтому обязательно нужно выбрать файл с правилами конвертации");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	//Если ЭтаФорма.Модифицированность Тогда
	//	ПодключитьОбработчикОжидания("ПередЗакрытиемКлиент", 0.0001, Истина);
	//	Отказ = Истина;
	//КонецЕсли;
	
КонецПроцедуры

//&НаКлиенте
//Процедура ПередЗакрытиемКлиент()
//	
//	СохранитьНастройкиRabbit();
//	СохранитьНастройки();
//	
//	ЭтаФорма.Модифицированность = Ложь;
//	ЭтаФорма.Закрыть();
//	
//КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиRabbit()  
	
	КлючОбъекта = "УниверсальныйОбменRabbitMQ";
	КлючНастроек = "УниверсальныйОбменRabbitMQ";
	ОписаниеНастроек = "УниверсальныйОбменRabbitMQ";
	ИмяПользователя = "";


	Настройки = Новый Соответствие;
	Настройки.Вставить("мсСерверAMQP",  Объект.мсСерверAMQP);
	Настройки.Вставить("мсХостAMQP",    Объект.мсХостAMQP);
	Настройки.Вставить("мсИмяОбмена",   Объект.мсИмяОбмена);
	Настройки.Вставить("мсИмяОчереди",  Объект.мсИмяОчереди);
	Настройки.Вставить("мсИмяМаршрута", Объект.мсИмяМаршрута);
	Настройки.Вставить("мсПорт",        Объект.мсПорт);
	Настройки.Вставить("ПарольИнформационнойБазыДляПодключения", Объект.ПарольИнформационнойБазыДляПодключения);
	Настройки.Вставить("ПользовательИнформационнойБазыДляПодключения", Объект.ПользовательИнформационнойБазыДляПодключения);

	ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек, Настройки, ОписаниеНастроек, ИмяПользователя);
	
КонецПроцедуры

 &НаСервере
Процедура ВосстановитьНастройкиRabbit()
	
	КлючОбъекта      = "УниверсальныйОбменRabbitMQ";
	КлючНастроек     = "УниверсальныйОбменRabbitMQ";
	ОписаниеНастроек = "УниверсальныйОбменRabbitMQ";
	ИмяПользователя  = "";

	ЗначениеНастроек = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек, ОписаниеНастроек, ИмяПользователя);

	Если ТипЗнч(ЗначениеНастроек) = Тип("Соответствие") Тогда
		Объект.мсСерверAMQP  = ЗначениеНастроек.Получить("мсСерверAMQP");
		Объект.мсХостAMQP    = ЗначениеНастроек.Получить("мсХостAMQP");
		Объект.мсИмяОбмена   = ЗначениеНастроек.Получить("мсИмяОбмена");
		Объект.мсИмяОчереди  = ЗначениеНастроек.Получить("мсИмяОчереди");
		Объект.мсИмяМаршрута = ЗначениеНастроек.Получить("мсИмяМаршрута");
		Объект.мсПорт        = ЗначениеНастроек.Получить("мсПорт");
		Объект.ПарольИнформационнойБазыДляПодключения = ЗначениеНастроек.Получить("ПарольИнформационнойБазыДляПодключения");
		Объект.ПользовательИнформационнойБазыДляПодключения = ЗначениеНастроек.Получить("ПользовательИнформационнойБазыДляПодключения");
	КонецЕсли;
	
	Если Объект.мсПорт = 0 Тогда
		Объект.мсПорт = 5672;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьТестНаСервере()
	
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	ЗаполнитьЗначенияСвойств(ОбъектДляСервера, Объект);
	// ОбъектДляСервера.ВыполнитьЗагрузку();
	
	ОбъектДляСервера.ВыполнитьТест();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКомпонентуРозовогоКролика()
	
	ОшибкаСуществованияКомпоненты = Ложь;
	Попытка
		КлиентКролика  = Новый("AddIn.BITERP.PinkRabbitMQ");
	Исключение
		ОшибкаСуществованияКомпоненты = Истина;
	КонецПопытки;
	
	Если ОшибкаСуществованияКомпоненты Тогда
		Попытка
			
			ПутьСохранения = КаталогВременныхФайлов() + "PinkRabbitMQWin64.dll";
			СохранитьФайлКомпонентыНаСервере(ПутьСохранения);
			
			// УстановитьВнешнююКомпоненту(ПутьСохранения);
		    ПодключитьВнешнююКомпоненту(ПутьСохранения, "BITERP", ТипВнешнейКомпоненты.Native);
		    КлиентКролика  = Новый("AddIn.BITERP.PinkRabbitMQ");
	    Исключение
			КлиентКролика = Неопределено;
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьФайлКомпонентыНаСервере(ПутьСохранения)
	Об = РеквизитФормыВЗначение("Объект");
	ДвоичныеДанные = Об.ПолучитьМакет("PinkRabbitMQWin64");
	ДвоичныеДанные.Записать(ПутьСохранения);
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьКомпонентуPinkRabbitMQ(Команда)
	
	ЗарегистрироватьКомпонентуНаСервере();
КонецПроцедуры

Процедура ЗарегистрироватьКомпонентуНаСервере()
	
	ПутьСохранения = КаталогВременныхФайлов() + "PinkRabbitMQWin64.dll";
	Об = РеквизитФормыВЗначение("Объект");
	ДвоичныеДанные = Об.ПолучитьМакет("PinkRabbitMQWin64");
	ДвоичныеДанные.Записать(ПутьСохранения);
	ДвоичныеДанные = Неопределено;
	
	// УстановитьВнешнююКомпоненту(ПутьСохранения);
	ПодключитьВнешнююКомпоненту(ПутьСохранения, "BITERP", ТипВнешнейКомпоненты.Native);
	КлиентКролика  = Новый("AddIn.BITERP.PinkRabbitMQ");
	
КонецПроцедуры

&НаКлиенте
Процедура мсСерверAMQP1ПриИзменении(Элемент)
	УстановитьМодифицированностьНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМодифицированностьНаКлиенте()
	
	Если Не ЭтаФорма.Модифицированность Тогда
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура мсХостAMQP1ПриИзменении(Элемент)
	УстановитьМодифицированностьНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура мсИмяОбмена1ПриИзменении(Элемент)
	УстановитьМодифицированностьНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура мсИмяОчереди1ПриИзменении(Элемент)
	УстановитьМодифицированностьНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИнформационнойБазыДляПодключения2ПриИзменении(Элемент)
	УстановитьМодифицированностьНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ПарольИнформационнойБазыДляПодключения2ПриИзменении(Элемент)
	УстановитьМодифицированностьНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура мсПорт1ПриИзменении(Элемент)
	УстановитьМодифицированностьНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура мсИмяМаршрута1ПриИзменении(Элемент)
	УстановитьМодифицированностьНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура КаталогИнформационнойБазыДляПодключенияПриИзменении(Элемент)
	УстановитьМодифицированностьНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИнформационнойБазыДляПодключенияПриИзменении(Элемент)
	УстановитьМодифицированностьНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ПарольИнформационнойБазыДляПодключенияПриИзменении(Элемент)
	УстановитьМодифицированностьНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ПарольДляРаспаковкиФайлаОбменаПриИзменении(Элемент)
	УстановитьМодифицированностьНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура МС_ДелитьВыгрузкуНаЧастиПриИзменении(Элемент)
	СохранитьНастройки();
КонецПроцедуры

Функция ИмяВременногоФайлаПротоколаНаСервере()
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	Возврат ИмяВременногоФайла;
	
КонецФункции

&НаКлиенте
Процедура ЗапуститьВыполнениеВФоне(Команда)
	
	// Описание на Инфостарте:
	// https://infostart.ru/1c/articles/1207439/
	// инициализация реквизитов формы
	ИдентификаторЗадания =  "";
	Индикатор = 0;
	СтрокаСостояния = "";
	
	// инициализация параметов запуска фонового задания
	ПараметрыЗапуска = ПодготовитьДанныеДляДлительнойОперации();
	
	// подготовить фоновое задание на сервере и запомнить его идентификатор в реквизите формы "ИдентификаторЗадания"
	СтруктураФоновогоЗадания = ВыполнитьФоновоеЗаданиеНаСервере(ПараметрыЗапуска, УникальныйИдентификатор);
	ИдентификаторЗадания =  СтруктураФоновогоЗадания.ИдентификаторЗадания;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	//ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	// Если не нужно открывать стандартное окно ожидания, то ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	// необходимость вывода прогресса состояния
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	
	// если не указать, интервал явно, то он будет увеличиваться при каждой итерации в 1.4 раза
	ПараметрыОжидания.Интервал = 2;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		СтруктураФоновогоЗадания,
		Новый ОписаниеОповещения("ФоновоеЗаданиеЗавершение", ЭтотОбъект),
		ПараметрыОжидания);
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияИндикатор", 2);
	
КонецПроцедуры

// Процедура - выполняется после завершения фонового задания
//             Выполнить анализ завершения, в случае успеха получить данные результата из временного хранилища и обработать их
//
// Параметры:
//  Результат				 - Структура - результат выполнения фонового задания
//  ДополнительныеПараметры	 - Произвольный	 - дополнительные параметры фонового задания
//
&НаКлиенте
Процедура ФоновоеЗаданиеЗавершение(Результат, ДополнительныеПараметры) Экспорт

	ОтключитьОбработчикОжидания("ОбработчикОжиданияИндикатор");
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
		СтрокаСостояния = "Задание завершено с ошибками.";
		
		// здесь можно запустить выполнение задания не в фоне, без отображения состояния и сообщить об этом в строке состояния
		
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		
		// успешное выполнение - получить результат из временного хранилища и обработать его
		
		Данные = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		ВозвратноеЗначение = Данные;
		Индикатор = 100;
		СтрокаСостояния = "Задание завершено.";
		
		ОткрытьДанныеПротоколовОбменаПриНеобходимости();
		
	КонецЕсли;
	
	// СорокинСС - 12.01.2022 - начало
	ОтправлятьПисьмоПослеЗавершенияРаботы();
	// СорокинСС - 12.01.2022 - конец
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбработчикОжиданияИндикатор() Экспорт 
	
	Прогресс = ПрочитатьПрогресс(ИдентификаторЗадания);
	
	Если ТипЗнч(Прогресс) = Тип("Строка") И Прогресс="Отключить" Тогда
		СтрокаСостояния = "";
		ОтключитьОбработчикОжидания("ОбработчикОжиданияИндикатор");
		Возврат;
	КонецЕсли;
			
	Если НЕ ТипЗнч(Прогресс) = Тип("Структура") Тогда
		СтрокаСостояния = "";
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Прогресс) = Тип("Структура") И Прогресс.Свойство("ЗавершеноАварийно") Тогда
		ОтключитьОбработчикОжидания("ОбработчикОжиданияИндикатор");
		Возврат;
	КонецЕсли;
	
	Если Прогресс.Свойство("ЗаданиеВыполнено") И Прогресс.ЗаданиеВыполнено Тогда
		Индикатор = 100;
		СтрокаСостояния = "Задание завершено.";
	Иначе
		Если Прогресс.Свойство("Процент") Тогда
			Индикатор = Прогресс.Процент;
		КонецЕсли;
		Если Прогресс.Свойство("Текст") Тогда
			СтрокаСостояния = Прогресс.Текст;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПрочитатьПрогресс(Знач ИдентификаторФоновогоЗадания) Экспорт
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторФоновогоЗадания);
	Если Задание = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
		Возврат "Отключить";
	КонецЕсли;
	
	ПрогрессЗадания = ДлительныеОперации.ПрочитатьПрогресс(ИдентификаторФоновогоЗадания);
	
	// Добавляем флаг "ЗаданиеВыполнено", чтобы различать случаи: когда отсутствуют сообщения и когда завершено задание.
	Если ПрогрессЗадания = Неопределено
	 Или ТипЗнч(ПрогрессЗадания) <> Тип("Структура") Тогда // или нет задания, или нет сообщений
		ПрогрессЗадания = Новый Структура;
	КонецЕсли;
	ПрогрессЗадания.Вставить("ЗаданиеВыполнено", ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторФоновогоЗадания));
	
	Возврат ПрогрессЗадания;
	
КонецФункции


// Функция - создает структуру, содержащую исходные данные для выполнения длительной операции
// 
// Возвращаемое значение:
//   - Структура
//
&НаКлиенте
Функция ПодготовитьДанныеДляДлительнойОперации()
	
	Перем Рез;

	Рез = Новый Структура;
	Рез.Вставить("КоличествоИтераций", Объект.мсСтрокВФайле);
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		// обработка подключена к подсистеме дополнительных отчетов/обработок
		Рез.Вставить("ИспользуемоеИмяФайла", "ВнешняяОбработка.ДлительныеОперацииВоВнешнейОбработке");
		Рез.Вставить("ДополнительнаяОбработкаСсылка", ОбъектСсылка);
	Иначе
		// не подключена
		Рез.Вставить("ИспользуемоеИмяФайла", ИспользуемоеИмяФайла()); // имя файла этой внешней обработки
		Рез.Вставить("ДополнительнаяОбработкаСсылка", ПредопределенноеЗначение("Справочник.ДополнительныеОтчетыИОбработки.ПустаяСсылка"));
	КонецЕсли;
	
	Рез = ДобавитьПараметрыНаСервере(Рез);
	
	Возврат Рез;
	
КонецФункции

Функция ДобавитьПараметрыНаСервере(Рез)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Рез.Вставить("РеквизитыОбработки", Новый Структура());
	Для Каждого Реквизит Из ОбработкаОбъект.Метаданные().Реквизиты Цикл
		
		Если Реквизит.Имя = "ТаблицаНастройкиПараметров"
			Или Реквизит.Имя = "ТаблицаПравилВыгрузки"
			Или Реквизит.Имя = "ТаблицаПравилКонвертации"
			Или Реквизит.Имя = "МС_ТаблицаПравилВыгрузки"
			Или Реквизит.Имя = "ТаблицаПравилОчистки"  Тогда
			Рез.РеквизитыОбработки.Вставить(Реквизит.Имя, ЗначениеВСтрокуВнутр(ОбработкаОбъект[Реквизит.Имя]));
		ИначеЕсли Реквизит.Имя <> "ПостроительОтчета" И Реквизит.Имя <> "Данные"
			 Тогда
			Рез.РеквизитыОбработки.Вставить(Реквизит.Имя, ОбработкаОбъект[Реквизит.Имя]);
			
			Если Реквизит.Имя = "ИмяФайлаОбмена" Тогда
				Рез.РеквизитыОбработки.ИмяФайлаОбмена = ИмяФайлаОбмена;
			КонецЕсли;
		КонецЕсли;
    КонецЦикла;
	
	Возврат Рез;
КонецФункции

// Функция - возвращает имя файла этой внешней обработки.
//           Внимание!!! В клиент-серверном варианте файл обработки должен быть виден с сервера,
//           либо вы должны позаботиться самостоятельно о переносе файла обработки с клиента на сервер,
//           в этом случае результат работы этой функции - имя файла, которое вы поместили на сервер самостоятельно
// 
// Возвращаемое значение:
//   - Строка
//
&НаСервере
Функция ИспользуемоеИмяФайла()
	Возврат РеквизитФормыВЗначение("Объект").ИспользуемоеИмяФайла;
КонецФункции


&НаСервереБезКонтекста
Функция ВыполнитьФоновоеЗаданиеНаСервере(ПараметрыЗапуска, УникальныйИдентификатор)
	
	Попытка
		НаименованиеЗадания = НСтр("ru = 'Запуск длительной операции'");
		ВыполняемыйМетод = "ДлительныеОперации.ВыполнитьПроцедуруМодуляОбъектаОбработки";
		
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("БезопасныйРежим",               Ложь);
		ПараметрыЗадания.Вставить("ИмяОбработки",                  ПараметрыЗапуска.ИспользуемоеИмяФайла); // имя файла этой обработки или "ВнешняяОбработка.ДлительныеОперацииВоВнешнейОбработке"
		ПараметрыЗадания.Вставить("ИмяМетода",                     "ДлительнаяОперация");
		ПараметрыЗадания.Вставить("ПараметрыВыполнения",           ПараметрыЗапуска);
		ПараметрыЗадания.Вставить("ЭтоВнешняяОбработка",           Истина);
		ПараметрыЗадания.Вставить("ДополнительнаяОбработкаСсылка", ПараметрыЗапуска.ДополнительнаяОбработкаСсылка); // СправочникСсылка.ДополнительныеОтчетыИОбработки (может быть пустой ссылкой)
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
		ПараметрыВыполнения.ЗапуститьВФоне = Истина;
		ПараметрыВыполнения.Вставить("ИдентификаторФормы", УникальныйИдентификатор); 
		
		СтруктураФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыЗадания, ПараметрыВыполнения);
		Возврат СтруктураФоновогоЗадания;
	Исключение
		Возврат Новый Структура();
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура ИзображениеСтатуса(Команда)
	
	мсНадписьСостоянияНажатие(Команда, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТехподдержку(Команда)
	
	ТемаОбращения = "Тема: Обращение в техподдержку";
	ПараметрыАвторизации = Новый Структура("мсНомерЗаказа, мсАдресЭлектроннойПочты, РежимОбмена, ТемаОбращения", 
							Объект.мсНомерЗаказа, Объект.мсАдресЭлектроннойПочты, Объект.РежимОбмена, ТемаОбращения);
						
	ОткрытьФорму("ВнешняяОбработка.УниверсальныйОбменДаннымиXML.Форма.ОбращениеВТехподдержку",
				ПараметрыАвторизации, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДелитьВыгрузкуПриИзменении(Элемент)
	
	ДелитьВыгрузкуПриИзмененииНаСервере();
	
КонецПроцедуры

Процедура ДелитьВыгрузкуПриИзмененииНаСервере()
	
	Если ДелитьВыгрузку = 0 Тогда
		
		Объект.мсДелитьВыгрузкуПоКаждомуПВД = Ложь;
		Объект.МС_ДелитьВыгрузкуНаЧасти = Ложь;
		
	ИначеЕсли ДелитьВыгрузку = 1 Тогда
		
		Объект.мсДелитьВыгрузкуПоКаждомуПВД = Ложь;
		Объект.МС_ДелитьВыгрузкуНаЧасти = Истина;

	ИначеЕсли ДелитьВыгрузку = 2 Тогда
		
		Объект.мсДелитьВыгрузкуПоКаждомуПВД = Истина;
		Объект.МС_ДелитьВыгрузкуНаЧасти = Ложь;
	
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура Декорация2Нажатие(Элемент)
	
	ЗапуститьПриложение("https://moscowsoft.com/statii/perenosy_dannykh_1s/obrabotka_universalnyy_obmen_v_formate_xml_ot_moscowsoft/");
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Попытка
		Если ЗначениеЗаполнено(АдресФайлаПравилВХранилище) Тогда
			Настройки.Вставить("_ХранилищеПравилОбмена", Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресФайлаПравилВХранилище), Новый СжатиеДанных(9)));
		КонецЕсли;
		
		Настройки.Вставить("_ТаблицаНастройкиПараметров", РеквизитФормыВЗначение("Объект.ТаблицаНастройкиПараметров"));
		Настройки.Вставить("_ТаблицаПравилВыгрузки", РеквизитФормыВЗначение("Объект.ТаблицаПравилВыгрузки"));
		
		Настройки.Вставить("_мсВариантЗагрузкиДанных",      Объект.мсВариантЗагрузкиДанных);
		Настройки.Вставить("_мсОчиститьОчередь",            Объект.мсОчиститьОчередь);
		Настройки.Вставить("_МС_ДелитьВыгрузкуНаЧасти",     Объект.МС_ДелитьВыгрузкуНаЧасти);
		Настройки.Вставить("_мсДелитьВыгрузкуПоКаждомуПВД", Объект.мсДелитьВыгрузкуПоКаждомуПВД);
		Настройки.Вставить("ТокенСмсРу", Объект.ТокенСмсРу);
		Настройки.Вставить("ТелефоныДляУведомлений", Объект.ТелефоныДляУведомлений);
		Настройки.Вставить("ОтправлятьУведомленияОбОкончанииОбменаПоСмс", Объект.ОтправлятьУведомленияОбОкончанииОбменаПоСмс);
	Исключение
		Сообщение = ОписаниеОшибки();
		Сообщить(Сообщение);
		ЗаписьЖурналаРегистрации("УниверсальныйОбменВФорматеXML.ОшибкаПриСохраненииДанныхВНастройкахНаСервере", УровеньЖурналаРегистрации.Ошибка, , , Сообщение);
	КонецПопытки;
	
	СохранитьНастройкиRabbit();
	
	СохранитьНастройки();

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	//ВосстановитьНастройки();
	//ВосстановитьНастройкиRabbit();
	
	Попытка
		Если Настройки["_ХранилищеПравилОбмена"] <> Неопределено
			И ТипЗнч(Настройки["_ХранилищеПравилОбмена"]) = Тип("ХранилищеЗначения") Тогда
			ДвоичныеДанные = Настройки["_ХранилищеПравилОбмена"].Получить();
			АдресФайлаПравилВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
			Если АдресФайлаПравилВХранилище <> "" Тогда
				Признак_ОбработатьЗагрузкуВариантаНастроек = Истина;
				Объект.ФлагОшибки = Ложь;
				ЗагрузитьПравилаОбменаИПараметрыНаСервере(АдресФайлаПравилВХранилище, ".xml");
			КонецЕсли; 
		КонецЕсли;
		
		Если Настройки["_ТаблицаНастройкиПараметров"] <> Неопределено
			И ТипЗнч(Настройки["_ТаблицаНастройкиПараметров"]) = Тип("ТаблицаЗначений") Тогда
			ЗначениеВРеквизитФормы(Настройки["_ТаблицаНастройкиПараметров"], "Объект.ТаблицаНастройкиПараметров");
		КонецЕсли;
		
		Если Настройки["_ТаблицаПравилВыгрузки"] <> Неопределено
			И ТипЗнч(Настройки["_ТаблицаПравилВыгрузки"]) = Тип("ДеревоЗначений") Тогда
			ЗначениеВРеквизитФормы(Настройки["_ТаблицаПравилВыгрузки"], "Объект.ТаблицаПравилВыгрузки");
		КонецЕсли;
		
		Если Настройки["ТокенСмсРу"] <> Неопределено Тогда
			Объект.ТокенСмсРу = Настройки["ТокенСмсРу"];
		КонецЕсли;	
		Если Настройки["ТелефоныДляУведомлений"] <> Неопределено Тогда
			Объект.ТелефоныДляУведомлений = Настройки["ТелефоныДляУведомлений"];
		КонецЕсли;	
		Если Настройки["ОтправлятьУведомленияОбОкончанииОбменаПоСмс"] <> Неопределено Тогда
			Объект.ОтправлятьУведомленияОбОкончанииОбменаПоСмс = Настройки["ОтправлятьУведомленияОбОкончанииОбменаПоСмс"];
		КонецЕсли;	
		
		//Если Настройки["_мсВариантЗагрузкиДанных"] <> Неопределено И ТипЗнч(Настройки["_мсВариантЗагрузкиДанных"]) = Тип("Число") Тогда
		//	Объект.мсВариантЗагрузкиДанных = Настройки["_мсВариантЗагрузкиДанных"];
		//КонецЕсли;
		//Если Настройки["_мсОчиститьОчередь"] <> Неопределено И ТипЗнч(Настройки["_мсОчиститьОчередь"]) = Тип("Булево") Тогда
		//	Объект.мсОчиститьОчередь = Настройки["_мсОчиститьОчередь"];
		//КонецЕсли;
		//Если Настройки["_МС_ДелитьВыгрузкуНаЧасти"] <> Неопределено И ТипЗнч(Настройки["_МС_ДелитьВыгрузкуНаЧасти"]) = Тип("Булево") Тогда
		//	Объект.МС_ДелитьВыгрузкуНаЧасти = Настройки["_МС_ДелитьВыгрузкуНаЧасти"];
		//КонецЕсли;
		//Если Настройки["_мсДелитьВыгрузкуПоКаждомуПВД"] <> Неопределено И ТипЗнч(Настройки["_мсДелитьВыгрузкуПоКаждомуПВД"]) = Тип("Булево") Тогда
		//	Объект.мсДелитьВыгрузкуПоКаждомуПВД = Настройки["_мсДелитьВыгрузкуПоКаждомуПВД"];
		//КонецЕсли;

	Исключение
		Сообщение = ОписаниеОшибки();
		Сообщить(Сообщение);
		ЗаписьЖурналаРегистрации("УниверсальныйОбменВФорматеXML.ОшибкаПриЗагрузкеДанныхИзНастроекНаСервере", УровеньЖурналаРегистрации.Ошибка, , , Сообщение);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура мсСкачатьОбновление(Команда)
	
	ВременнаяСсылка = ПолучитьФайлНаСервере();

	ДанныеАрхива = ПолучитьИзВременногоХранилища(ВременнаяСсылка);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("zip");
	ДанныеАрхива.Записать(ИмяВременногоФайла);
	
	КаталогРаспаковки = КаталогВременныхФайлов() + "temp_perenos";
	СоздатьКаталог(КаталогРаспаковки);
	УдалитьФайлы(КаталогРаспаковки);
	
	РаспаковатьЗипФайл(ИмяВременногоФайла, КаталогРаспаковки);
	
	РаспакованныеФайлы = НайтиФайлы(КаталогРаспаковки + "\", "*.xml", Истина);
	
	РабочийКаталог = "";
	Если ЗначениеЗаполнено(Объект.ИмяФайлаПравилОбмена) Тогда
		Файл = Новый Файл(Объект.ИмяФайлаПравилОбмена);
		РабочийКаталог = Файл.Путь;
	КонецЕсли;
	
	//Если Не ЗначениеЗаполнено(РабочийКаталог) Тогда
	//	РабочийКаталог = КаталогВременныхФайлов();
	//КонецЕсли;
	
	//Для Каждого ФайлПереноса Из РаспакованныеФайлы Цикл
	//	
	//	
	//	
	//	Прервать;
	//	
	//КонецЦикла;
	
	Если РаспакованныеФайлы.Количество() > 0 Тогда
		
		ФайлПереноса = РаспакованныеФайлы[0];
		
		Если ЗначениеЗаполнено(РабочийКаталог) Тогда
			
			// Первое условие проверки - чтобы не копировать тот же файл в то же место
			// Второе условие проверки - чтобы не замещать старый файл новым таким же
			Если ФайлПереноса.ПолноеИмя <> РабочийКаталог + ФайлПереноса.Имя И ФайлПереноса.Имя <> Файл.Имя Тогда 
				// СорокинСС - 11.01.2022 - начало
				// КопироватьФайл(ФайлПереноса.ПолноеИмя, РабочийКаталог + ФайлПереноса.Имя);
				КопироватьФайл(ФайлПереноса.ПолноеИмя, РабочийКаталог + ФайлПереноса.Имя);
				// СорокинСС - 11.01.2022 - конец
				
				ИмяФайлаПравил = РабочийКаталог + ФайлПереноса.Имя;
				
			ИначеЕсли ФайлПереноса.ПолноеИмя <> РабочийКаталог + ФайлПереноса.Имя Тогда // ситуация - такой файл уже есть!
				ДобавкаДатыВремя = Формат(ТекущаяДата(), "ДФ=yyyy_mm_dd_hh_mm_ss");
				ИмяФайлаПравил = РабочийКаталог + ДобавкаДатыВремя + "_" + ФайлПереноса.Имя;
				КопироватьФайл(ФайлПереноса.ПолноеИмя, ИмяФайлаПравил);
			Иначе
				// файл уже лежит, где надо.
				// Ничего не надо делать.
			КонецЕсли;
			
			Объект.ИмяФайлаПравилОбмена = ИмяФайлаПравил;
		Иначе
			ИмяФайлаПравил = ФайлПереноса.ПолноеИмя;
			Объект.ИмяФайлаПравилОбмена = ИмяФайлаПравил;
		КонецЕсли;
		
		ЗагрузитьПравилаОбменаИПараметрыНаСервере("", "");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура мсЗапроситьПолныйКомплектПереносаНаПочтуНаСервере()
	
	ИмяКоманды = "getFullPackageConvertationRules";
	Об = РеквизитФормыВЗначение("Объект");
	Элементы.НадписьРезультатВыполнения.Заголовок = "" + СокрЛП(ТекущаяДатаСеанса()) + ": " 
													+ Об.ВыполнитьКомандуВебсервисаMoscowSoft(ИмяКоманды);
	// Элементы.НадписьРезультатВыполнения.Ширина    = СтрДлина(Элементы.НадписьРезультатВыполнения.Заголовок);
	Элементы.ГруппаЛог.Видимость = Истина;
	Элементы.ГлавнаяПанельФормы.ТекущаяСтраница = Элементы.НастройкиMoscowSoft;
	
КонецПроцедуры

&НаКлиенте
Процедура мсЗапроситьПолныйКомплектПереносаНаПочту(Команда)
	мсЗапроситьПолныйКомплектПереносаНаПочтуНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВариантОтправкиПротоколаВыполненияПриИзмененииНаСервере()
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтправкиПротоколаВыполненияПриИзменении(Элемент)
	ВариантОтправкиПротоколаВыполненияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура АдресЭлектроннойПочтыДляОтправкиПриИзмененииНаСервере()
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресЭлектроннойПочтыДляОтправкиПриИзменении(Элемент)
	АдресЭлектроннойПочтыДляОтправкиПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьПисьмоПослеЗавершенияРаботыПриИзменении(Элемент)
	СохранитьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура ВестиРасширенныйПротоколОшибокПриИзменении(Элемент)
	СохранитьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьДатуВремяСобытияВПротоколПриИзменении(Элемент)
	СохранитьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура РазбиватьПротоколНаЧастиРазмераМбПриИзменении(Элемент)
	СохранитьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура ВерсияПереносаДанныхПриИзменении(Элемент)
	СохранитьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура НазваниеПроектаПереносаПриИзменении(Элемент)
	СохранитьНастройки();
КонецПроцедуры

#КонецОбласти


