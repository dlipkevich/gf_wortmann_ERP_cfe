#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	РегистрационныеДанные = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(СтандартныеПодсистемыСервер.ВерсияБиблиотеки());
	РегистрационныеДанные.Вставить("Вид",
	ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	РегистрационныеДанные.Вставить("Наименование",    "Корректировка назначений");
	РегистрационныеДанные.Вставить("Версия",          Формат(ТекущаяДатаСеанса(), "ДФ=yyyy-MM-dd"));
	РегистрационныеДанные.Вставить("Информация",      "");
	РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь);
	
	// Добавим команду в таблицу
	Если РегистрационныеДанные.Свойство("Команды") Тогда
		
		ДобавитьКоманду(
		РегистрационныеДанные.Команды,
		"Корректировка назначений",
		"гф_КорректировкаНазначений",
		ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы()
		);
		
		ДобавитьКоманду(
		РегистрационныеДанные.Команды,
		"Корректировка назначений (автоматически)",
		"гф_КорректировкаНазначенийАвтоматически",
		ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода(),
		Истина
		);
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Не соответствующая версия БСП.'");
		
	КонецЕсли;
	
	Возврат РегистрационныеДанные;
	
КонецФункции

// Добавляет команду в таблицу команд по переданному описанию.
//
// Параметры:
//   ТаблицаКоманд - ТаблицаЗначений - состав полей см. в функции ПолучитьТаблицуКоманд
//   Представление - Строка - описание печатной формы для пользователя
//   Идентификатор - Строка - идентификатор макета
//   Использование - Строка - параметр вызова обработки
//     Возможные варианты:
//       ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет
//                       открыть система
//       ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
//       ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
//   ПоказыватьОповещение - Булево - указывает, необходимо ли показывать оповещение при начале и завершению работы обработки
//     Не имеет смысла при открытии формы
//   Модификатор - Строка - для печатной формы должен содержать строку ПечатьMXL.
//
Процедура ДобавитьКоманду(ТаблицаКоманд,
	Представление,
	Идентификатор,
	Использование        = "ОткрытиеФормы",
	ПоказыватьОповещение = Ложь,
	Модификатор          = "ПечатьMXL")
	
	НоваяКоманда = ТаблицаКоманд.Добавить();
	
	НоваяКоманда.Представление        = Представление;
	НоваяКоманда.Идентификатор        = Идентификатор;
	НоваяКоманда.Использование        = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор          = Модификатор;
	
КонецПроцедуры

#КонецОбласти

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыВыполненияКоманды = Неопределено) Экспорт
	
	Если ИдентификаторКоманды = "гф_КорректировкаНазначенийАвтоматически" Тогда
		
		ЗаполнитьСвойствоПроверкаПТУ();
		
		Период.ДатаОкончания = ТекущаяДатаСеанса();
		Период.ДатаНачала    = Период.ДатаОкончания - 7*86400; // 7 дней
		
		Запрос       = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	гф_ГлобальныеЗначенияСписок.Значение КАК Склад
		|ПОМЕСТИТЬ ВТ_Склады
		|ИЗ
		|	ПланВидовХарактеристик.гф_ГлобальныеЗначения.Список КАК гф_ГлобальныеЗначенияСписок
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.гф_ГлобальныеЗначения КАК гф_ГлобальныеЗначения
		|		ПО гф_ГлобальныеЗначенияСписок.Ссылка = гф_ГлобальныеЗначения.Ссылка
		|ГДЕ
		|	гф_ГлобальныеЗначения.Ключ = &Ключ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Склады.гф_Организация КАК Организация,
		|	ВТ_Склады.Склад КАК Склад
		|ИЗ
		|	ВТ_Склады КАК ВТ_Склады
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО ВТ_Склады.Склад = Склады.Ссылка";
		
		Запрос.УстановитьПараметр("Ключ", "гф_ГлобальныеЗначенияОсновнойСклад");
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Организация = ВыборкаДетальныеЗаписи.Организация;
			Склад       = ВыборкаДетальныеЗаписи.Склад;
			ЗаполнитьНаСервере();
			ВыполнитьОбработкуНаСервере(Истина);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОбработкуНаСервере(ЗаписыватьВЖурналРегистрации = Ложь) Экспорт
	
	// 1. Создание документа «Корректировка назначения товаров» (для корректной работы с движениями по регистрам).
	ЗаказыКОбработке = ДанныеДляОтображения.Выгрузить(Новый Структура("Отметка", Истина));
	МассивУЛ = ЗаказыКОбработке.ВыгрузитьКолонку("УпаковочныйЛист");
	ЗаказыКОбработке.Свернуть("ЗаказКлиента");
	
	ШаблонКомментария = "Создан обработкой замены назначений по %1";
	ТекстКомментария = СтрШаблон(ШаблонКомментария, Поставка);
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ШаблонСообщенияОшибка = "Не удалось провести корректировку по заказу %1";
	
	Для Каждого СтрокаЗаказа Из ЗаказыКОбработке Цикл
		
		ДанныеКОбработке = Данные.Выгрузить(Новый Структура("ЗаказКлиента", СтрокаЗаказа.ЗаказКлиента));
		
		ДокументОбъект = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
		
		ДокументОбъект.Дата        = ТекущаяДатаСеанса();
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать;
		ДокументОбъект.Организация = Организация;
		НазначениеЗаказа           = Документы.КорректировкаНазначенияТоваров.НазначениеЗаказа(СтрокаЗаказа.ЗаказКлиента);
		ДокументОбъект.Назначение  = НазначениеЗаказа;
		ДокументОбъект.Комментарий = ТекстКомментария;
		ДокументОбъект.Автор         = ТекущийПользователь;
		ДокументОбъект.Ответственный = ТекущийПользователь;
		
		МассивУЛПоКорректировке = Новый Массив;
		
		Для Каждого СтрокаТабличнойЧасти Из ДанныеКОбработке Цикл
			Если МассивУЛ.Найти(СтрокаТабличнойЧасти.УпаковочныйЛист) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ДокументОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
			НоваяСтрока.ИсходноеНазначение = СтрокаТабличнойЧасти.Назначение;
			НоваяСтрока.НовоеНазначение    = ДокументОбъект.Назначение;
			НоваяСтрока.НовыйЗаказ         = ДокументОбъект.Назначение.Заказ;
			НоваяСтрока.Склад = Склад;
			НоваяСтрока.гф_IDкороба        = СтрокаТабличнойЧасти.УпаковочныйЛист;
			Если МассивУЛПоКорректировке.Найти(СтрокаТабличнойЧасти.УпаковочныйЛист) = Неопределено Тогда
				МассивУЛПоКорректировке.Добавить(СтрокаТабличнойЧасти.УпаковочныйЛист);
			КонецЕсли;
		КонецЦикла;
		
		ДокументПроведен = Ложь;
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			ДокументПроведен = Истина;
			ТекстСообщения = "Создан и проведен документ %1";
			ТекстСообщения = СтрШаблон(ТекстСообщения, ДокументОбъект.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Исключение
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = СтрШаблон(ШаблонСообщенияОшибка, СтрокаЗаказа.ЗаказКлиента);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
			Если ЗаписыватьВЖурналРегистрации Тогда
				
				
			ЗаписьЖурналаРегистрации(
			ТекстОшибки,
				УровеньЖурналаРегистрации.Ошибка,
				ДокументОбъект.Метаданные(),
				,
				ТекстОшибки);
			КонецЕсли;
			
			// у ПТУ должен установиться реквизит «Проверка ПТУ» = Ошибка
			УстановитьДопРеквизитПриобретениеТоваровУслуг(СтрокаЗаказа.ЗаказКлиента);
			
		КонецПопытки;
		
		Если ДокументПроведен Тогда
			// 2. Корректировка назначений в Упаковочном листе (для корректной работы со складскими ордерами).
			ОбработатьУпаковочныеЛисты(МассивУЛПоКорректировке, НазначениеЗаказа, ЗаписыватьВЖурналРегистрации);  
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьУпаковочныеЛисты(УпаковочныеЛистыКОбработке, НазначениеЗаказа, ЗаписыватьВЖурналРегистрации)  
	
	Для Каждого УпаковочныйЛист Из УпаковочныеЛистыКОбработке Цикл
		
		ДокументОбъект = УпаковочныйЛист.ПолучитьОбъект();
		
		Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект.Товары Цикл
			
			СтрокаТабличнойЧасти.Назначение = НазначениеЗаказа;
			
		КонецЦикла;
		
		//ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			ДокументПроведен = Истина;
			ТекстСообщения = "Изменен документ %1";
			ТекстСообщения = СтрШаблон(ТекстСообщения, ДокументОбъект.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		
			Если ЗаписыватьВЖурналРегистрации Тогда
				
				
			ЗаписьЖурналаРегистрации(
			ТекстОшибки,
				УровеньЖурналаРегистрации.Ошибка,
				ДокументОбъект.Метаданные(),
				,
				ТекстОшибки);
			КонецЕсли;
		КонецПопытки;
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ЗаполнитьНаСервере() Экспорт
	Запрос       = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УпаковочныйЛистТовары.Ссылка КАК УпаковочныйЛист,
	|	УпаковочныйЛистТовары.Ссылка.гф_СостояниеКороба КАК СостояниеКороба,
	|	УпаковочныйЛистТовары.Ссылка.гф_Заказ КАК ЗаказКлиента,
	|	УпаковочныйЛистТовары.Назначение КАК Назначение,
	|	УпаковочныйЛистТовары.Номенклатура КАК Номенклатура,
	|	УпаковочныйЛистТовары.Характеристика КАК Характеристика,
	|	УпаковочныйЛистТовары.Серия КАК Серия,
	|	УпаковочныйЛистТовары.Упаковка КАК Упаковка,
	|	УпаковочныйЛистТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	УпаковочныйЛистТовары.Количество КАК Количество,
	|	УпаковочныйЛистТовары.Ссылка.гф_Поставка КАК Поставка,
	|	ЕСТЬNULL(УдаляемыеПК.Обработан, ИСТИНА) КАК Обработан
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВЫБОР
	|				КОГДА гф_ПересортицаУдаляемыеШК.Пересортица ССЫЛКА Документ.ПересортицаТоваров
	|					ТОГДА гф_ПересортицаУдаляемыеШК.Пересортица.гф_IDКороба
	|				ИНАЧЕ гф_ПересортицаУдаляемыеШК.Пересортица
	|			КОНЕЦ КАК УпаковочныйЛист,
	|			МИНИМУМ(гф_ПересортицаУдаляемыеШК.Обработан) КАК Обработан
	|		ИЗ
	|			РегистрСведений.гф_ПересортицаУдаляемыеШК КАК гф_ПересортицаУдаляемыеШК
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВЫБОР
	|				КОГДА гф_ПересортицаУдаляемыеШК.Пересортица ССЫЛКА Документ.ПересортицаТоваров
	|					ТОГДА гф_ПересортицаУдаляемыеШК.Пересортица.гф_IDКороба
	|				ИНАЧЕ гф_ПересортицаУдаляемыеШК.Пересортица
	|			КОНЕЦ) КАК УдаляемыеПК
	|		ПО УпаковочныйЛистТовары.Ссылка = УдаляемыеПК.УпаковочныйЛист
	|ГДЕ
	|	УпаковочныйЛистТовары.Ссылка.гф_Организация = &Организация
	|	И УпаковочныйЛистТовары.Ссылка.Проведен
	|	И ВЫБОР
	|			КОГДА &Поставка = ЗНАЧЕНИЕ(Документ.ПриобретениеТоваровУслуг.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ УпаковочныйЛистТовары.Ссылка.гф_Поставка = &Поставка
	|		КОНЕЦ
	|	И УпаковочныйЛистТовары.Назначение = &ТехническоеНазначение
	|	И НЕ УпаковочныйЛистТовары.Ссылка.гф_СостояниеКороба В (&гф_СостояниеКороба)
	|	И УпаковочныйЛистТовары.Ссылка.гф_Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.УпаковочныйЛист КАК УпаковочныйЛист,
	|	втДанные.ЗаказКлиента КАК ЗаказКлиента,
	|	втДанные.Номенклатура КАК Номенклатура,
	|	втДанные.Характеристика КАК Характеристика,
	|	втДанные.Назначение КАК Назначение,
	|	втДанные.Серия КАК Серия,
	|	втДанные.Упаковка КАК Упаковка,
	|	втДанные.КоличествоУпаковок КАК КоличествоУпаковок,
	|	втДанные.Количество КАК Количество,
	|	втДанные.Поставка КАК Поставка
	|ИЗ
	|	втДанные КАК втДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Обработан КАК Отметка,
	|	втДанные.УпаковочныйЛист КАК УпаковочныйЛист,
	|	втДанные.СостояниеКороба КАК СостояниеКороба,
	|	втДанные.ЗаказКлиента КАК ЗаказКлиента,
	|	втДанные.Назначение КАК Назначение,
	|	втДанные.Обработан КАК Обработан
	|ИЗ
	|	втДанные КАК втДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	втДанные.УпаковочныйЛист,
	|	втДанные.СостояниеКороба,
	|	втДанные.ЗаказКлиента,
	|	втДанные.Назначение,
	|	втДанные.Обработан,
	|	втДанные.Обработан
	|
	|УПОРЯДОЧИТЬ ПО
	|	Обработан";
	
	Запрос.УстановитьПараметр("ДатаНачала",         Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",      КонецДня(Период.ДатаОкончания));
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("Поставка",      Поставка);
	гф_СостояниеКороба = Новый Массив;
	гф_СостояниеКороба.Добавить(Справочники.гф_СостянияКоробов.Сформирован);
	гф_СостояниеКороба.Добавить(Справочники.гф_СостянияКоробов.Реализован);
	гф_СостояниеКороба.Добавить(Справочники.гф_СостянияКоробов.Расформирован);
	Запрос.УстановитьПараметр( "гф_СостояниеКороба", гф_СостояниеКороба);
	Запрос.УстановитьПараметр( "ТехническоеНазначение", Справочники.Назначения.гф_Техническое);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Данные.Загрузить(РезультатЗапроса[1].Выгрузить());
	ДанныеДляОтображения.Загрузить(РезультатЗапроса[2].Выгрузить());
	
КонецПроцедуры

Процедура ЗаполнитьСвойствоПроверкаПТУ() Экспорт
	
	СвойствоПроверкаПТУ = Неопределено;
	
	СвойстваПТУ = УправлениеСвойствами.СвойстваОбъекта(Документы.ПриобретениеТоваровУслуг.ПустаяСсылка(), Истина, Ложь);
	
	Для Каждого СвойствоПТУ Из СвойстваПТУ Цикл
		
		Если СвойствоПТУ.Имя = "гф_ПТУПроверкаПТУ" Тогда // Галфинд_ДомнышеваКР_17_03_2023 (убран криптохвост)
			
			СвойствоПроверкаПТУ = СвойствоПТУ;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СвойствоПроверкаПТУ) Тогда
		
		// определим значение Ошибка
		ЗначенияСвойстваПТУ = УправлениеСвойствамиСлужебный.ДополнительныеЗначенияСвойства(СвойствоПроверкаПТУ);
		
		Для Каждого ЗначениеСвойстваПТУ Из ЗначенияСвойстваПТУ Цикл
			
			Если ЗначениеСвойстваПТУ.Наименование = "Ошибка" Тогда // Галфинд_ДомнышеваКР_17_03_2023 (убран лишний пробел в названии "Ошибка"_
				
				ЗначениеПроверкаПТУ = ЗначениеСвойстваПТУ;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Сообщить(НСтр("ru = 'Не удалось определить свойство ""Проверка ПТУ"".'"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДопРеквизитПриобретениеТоваровУслуг(ЗаказКлиента)
	
	Если НЕ ЗначениеЗаполнено(СвойствоПроверкаПТУ) Тогда
		
		Сообщить(НСтр("ru = 'Не удалось определить свойство ""Проверка ПТУ"" по имени.'"));
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЗначениеПроверкаПТУ) Тогда
		
		Сообщить(НСтр("ru = 'Не удалось определить значение ""Ошибка"" свойства ""Проверка ПТУ"" по наименованию.'"));
		
		Возврат;
		
	КонецЕсли;
	
	ТаблицаДопРеквизитов = Новый ТаблицаЗначений;
	ТаблицаДопРеквизитов.Колонки.Добавить("Свойство",
	Новый ОписаниеТипов(
	"ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблицаДопРеквизитов.Колонки.Добавить("Значение");
	СтрокаДопРеквизитов          = ТаблицаДопРеквизитов.Добавить();
	СтрокаДопРеквизитов.Свойство = СвойствоПроверкаПТУ;
	СтрокаДопРеквизитов.Значение = ЗначениеПроверкаПТУ;
	
	УпаковочныеЛистыСОшибкой = ДанныеДляОтображения.Выгрузить(Новый Структура("Отметка, ЗаказКлиента",
	Истина,
	ЗаказКлиента),
	"УпаковочныйЛист");
	УпаковочныеЛистыСОшибкой.Свернуть("УпаковочныйЛист");
	
	Для Каждого СтрокаУпаковочногоЛистаСОшибкой Из УпаковочныеЛистыСОшибкой Цикл
		
		ПТУКОбработке = СтрокаУпаковочногоЛистаСОшибкой.УпаковочныйЛист.гф_Поставка;
		
		Если ТипЗнч(ПТУКОбработке) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
			
			УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(ПТУКОбработке, ТаблицаДопРеквизитов);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьУдалениеНаСервере() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КорректировкаНазначенияТоваровТовары.Ссылка КАК ДокументКорректировки,
		|	КорректировкаНазначенияТоваровТовары.гф_IDкороба КАК гф_IDкороба
		|ПОМЕСТИТЬ ПоПоставке
		|ИЗ
		|	Документ.КорректировкаНазначенияТоваров.Товары КАК КорректировкаНазначенияТоваровТовары
		|ГДЕ
		|	КорректировкаНазначенияТоваровТовары.гф_IDкороба.гф_Поставка = &Поставка
		|	И КорректировкаНазначенияТоваровТовары.Ссылка.Проведен
		|	И КорректировкаНазначенияТоваровТовары.Ссылка.ВидОперации = &ВидОперации
		|	И КорректировкаНазначенияТоваровТовары.Ссылка.Организация = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КорректировкаНазначенияТоваров.Ссылка КАК ДокументКорректировки,
		|	КорректировкаНазначенияТоваров.ВидОперации КАК ВидОперации,
		|	КорректировкаНазначенияТоваров.ДокументОснование КАК ДокументОснование,
		|	КорректировкаНазначенияТоваров.Ответственный КАК Ответственный,
		|	КорректировкаНазначенияТоваров.Комментарий КАК Комментарий,
		|	ИСТИНА КАК Отметка
		|ИЗ
		|	Документ.КорректировкаНазначенияТоваров КАК КорректировкаНазначенияТоваров
		|ГДЕ
		|	КорректировкаНазначенияТоваров.Ссылка В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ПоПоставке.ДокументКорректировки КАК ДокументКорректировки
		|			ИЗ
		|				ПоПоставке КАК ПоПоставке)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоПоставке.ДокументКорректировки КАК ДокументКорректировки,
		|	ПоПоставке.гф_IDкороба КАК УпаковочныйЛист
		|ИЗ
		|	ПоПоставке КАК ПоПоставке";
	
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Поставка", ПоставкаУдаление);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	КоличествоРезультатов = РезультатЗапроса.Количество();
	
	ОтменаКорректировок.Загрузить(РезультатЗапроса[КоличествоРезультатов - 2].Выгрузить());
	УпаковочныеЛисты.Загрузить(РезультатЗапроса[КоличествоРезультатов - 1].Выгрузить());

КонецПроцедуры

Процедура ВыполнитьУдалениеНаСервере(ЗаписыватьВЖурналРегистрации = Ложь) Экспорт
	ДокиКОбработке = ОтменаКорректировок.Выгрузить(Новый Структура("Отметка", Истина));
	НазначениеУЛ = Справочники.Назначения.гф_Техническое;
	Для каждого Стр Из ДокиКОбработке Цикл
		ДокументОбъект = Стр.ДокументКорректировки.ПолучитьОбъект();
		МассивУЛПоКорректировке = Новый Массив;
	
		Для каждого СтрК Из ДокументОбъект.Товары Цикл
			Если ЗначениеЗаполнено(СтрК.гф_IDкороба) 
				И МассивУЛПоКорректировке.Найти(СтрК.гф_IDкороба) = Неопределено Тогда
				МассивУЛПоКорректировке.Добавить(СтрК.гф_IDкороба);
			КонецЕсли;
		
		КонецЦикла;
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			ДокументПроведен = Истина;
			ТекстСообщения = "Отменено проведение документа %1";
			ТекстСообщения = СтрШаблон(ТекстСообщения, ДокументОбъект.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			
			Если ЗаписыватьВЖурналРегистрации Тогда
				
				
				ЗаписьЖурналаРегистрации(
				ТекстОшибки,
				УровеньЖурналаРегистрации.Ошибка,
				ДокументОбъект.Метаданные(),
				,
				ТекстОшибки);
			КонецЕсли;
			
		КонецПопытки;
		Если ДокументПроведен Тогда
			// 2. Корректировка назначений в Упаковочном листе (для корректной работы со складскими ордерами).
			ОбработатьУпаковочныеЛисты(МассивУЛПоКорректировке, НазначениеУЛ, ЗаписыватьВЖурналРегистрации);  
		КонецЕсли;
		
		
	КонецЦикла;
	

КонецПроцедуры

