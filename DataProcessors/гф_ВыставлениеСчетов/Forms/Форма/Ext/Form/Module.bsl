
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РежимРаботы = 0;
	ОтборПоСписку = Ложь;
	
	СписокДоступныхКонтрагентов.Очистить();
	
	// ++ СадомцевСА 12.02.2024
	ХЗ = Неопределено;
	Если Параметры.Свойство("ТЗ_Заказы", ХЗ) Тогда
		ЭтоОтгрузкаПоЗаказам = Истина;
		РежимРаботы = 1;
		ТЗ_Заказы = ХЗ.Получить();
		
		ЗаполнитьНаПоставкуНаСервереУЛ(ТЗ_Заказы);
		
		Элементы.ТаблицаСпецификацийПоставкиСуммаНДС.ТекстПодвала = Формат(ТаблицаСпецификацийПоставки.Итог("СуммаНДС"), "ЧДЦ=2");
		Элементы.ТаблицаСпецификацийПоставкиСумма.ТекстПодвала = Формат(ТаблицаСпецификацийПоставки.Итог("Сумма"), "ЧДЦ=2"); 
		Элементы.ТаблицаСпецификацийПоставкиСуммаВыставленныхСчетов.ТекстПодвала = Формат(ТаблицаСпецификацийПоставки.Итог("СуммаВыставленныхСчетов"), "ЧДЦ=2");
	КонецЕсли;
	// -- СадомцевСА 12.02.2024
	
	// ++ Галфинд_ДомнышеваКР_08_04_2024
	НеУчитыватьВыстСчета = Ложь;
	Если Параметры.Свойство("НеУчитыватьВыстСчета") Тогда
        НеУчитыватьВыстСчета = Параметры.НеУчитыватьВыстСчета;
	КонецЕсли;
	// -- Галфинд_ДомнышеваКР_08_04_2024
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ) 
	
	РежимРаботыПриИзменении(Элементы.РежимРаботы);
	ОтборПоСпискуПриИзменении(Элементы.ОтборПоСписку);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимРаботыПриИзменении(Элемент)
	
	Если РежимРаботы = 0 Тогда 
		Элементы.СтраницаНаАванс.Видимость = Истина;
		Элементы.СтраницаНаПоставку.Видимость = Ложь;
	Иначе
		Элементы.СтраницаНаАванс.Видимость = Ложь;
		Элементы.СтраницаНаПоставку.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	Если РежимРаботы = 0 Тогда
		// СадомцевСА 20.02.2024 Устанавливаю пометку только у выделенных строк таблицы
        // e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811eecc9889ab2227
		//Для Каждого Элемент Из ТаблицаСпецификацийАванса Цикл
		//	Элемент.Пометка = Истина;
		//КонецЦикла;
		Для Каждого Индекс Из Элементы.ТаблицаСпецификацийАванса.ВыделенныеСтроки Цикл
			СтрокаТаблицы = ТаблицаСпецификацийАванса.НайтиПоИдентификатору(Индекс);
			Если СтрокаТаблицы <> Неопределено Тогда
				СтрокаТаблицы.Пометка = Истина;
			КонецЕсли;
		КонецЦикла;
	Иначе
		// СадомцевСА 20.02.2024 Устанавливаю пометку только у выделенных строк таблицы
        // e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811eecc9889ab2227
		//Для Каждого Элемент Из ТаблицаСпецификацийПоставки Цикл
		//	Элемент.Пометка = Истина;
		//КонецЦикла;
		Для Каждого Индекс Из Элементы.ТаблицаСпецификацийПоставки.ВыделенныеСтроки Цикл
			СтрокаТаблицы = ТаблицаСпецификацийПоставки.НайтиПоИдентификатору(Индекс);
			Если СтрокаТаблицы <> Неопределено Тогда
				СтрокаТаблицы.Пометка = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)  
	
	Если РежимРаботы = 0 Тогда
		Для Каждого Элемент Из ТаблицаСпецификацийАванса Цикл
			Элемент.Пометка = Ложь;
		КонецЦикла;
	Иначе
		Для Каждого Элемент Из ТаблицаСпецификацийПоставки Цикл
			Элемент.Пометка = Ложь;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#Область ЗаполнениеТаблицИСозданиеСчетов

&НаКлиенте
Процедура ЗаполнитьНаПоставку(Команда)
	// СадомцевСА 07.03.2024
	Если Не ЗначениеЗаполнено(НомерПоставки) Тогда
		Сообщить("Укажите Номер поставки!");
		Возврат;
	КонецЕсли;
	Заполнить(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	ТаблицаСпецификацийАванса.Очистить();
	ТаблицаСпецификацийПоставки.Очистить();
	
	Если РежимРаботы = 0 Тогда
		
		Если ДатаНачала = Дата(1,1,1) Или ДатаОкончания = Дата(1,1,1) Тогда
			Сообщить("Выберите период заполнения!");
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Сезон) Тогда
			Сообщить("Выберите не пустой сезон!");
			Возврат;
		КонецЕсли;

		ЗаполнитьНаАвансНаСервере(); 
		
	ИначеЕсли РежимРаботы = 1 Тогда 
		
		//ОчиститьСообщения();
	
		Если ЭтоОтгрузкаПоЗаказам Тогда
			ЗаполнитьНаПоставкуЭтоОтгрузкаПоЗаказам();
		Иначе	
			ЗаполнитьНаПоставкуНаСервере();
		КонецЕсли;
		
		Элементы.ТаблицаСпецификацийПоставкиСуммаНДС.ТекстПодвала = Формат(ТаблицаСпецификацийПоставки.Итог("СуммаНДС"), "ЧДЦ=2");
		Элементы.ТаблицаСпецификацийПоставкиСумма.ТекстПодвала = Формат(ТаблицаСпецификацийПоставки.Итог("Сумма"), "ЧДЦ=2"); 
		Элементы.ТаблицаСпецификацийПоставкиСуммаВыставленныхСчетов.ТекстПодвала = Формат(ТаблицаСпецификацийПоставки.Итог("СуммаВыставленныхСчетов"), "ЧДЦ=2");
		
		// Галфинд СадомцевСА 15.02.2024 Реализовано:
		// 2) при заполнении должен проводиться анализ на заполнение реквизита "Заказ клиента" в УЛ.
		// Если ЗаказКлиента не заполнен, то выводить информационное сообщение "По УЛ <НомерУЛ> не заполнен Заказ клиента"
		// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811eecbdbcf87e004
		Если ЗначениеЗаполнено(НомерПоставки) Тогда
			ПроверитьЗаказыУЛ();
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаПоставкуЭтоОтгрузкаПоЗаказам()
	ТЗ_Заказы = ХЗ.Получить();
	ЗаполнитьНаПоставкуНаСервереУЛ(ТЗ_Заказы);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаАвансНаСервере()

	ТаблицаСпецификацийАванса.Очистить();;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	гф_СпецификацияПокупателя.Ссылка КАК Ссылка,
	|	гф_СпецификацияПокупателя.Контрагент КАК Контрагент,
	|	гф_СпецификацияПокупателя.Организация КАК Организация,
	|	гф_СпецификацияПокупателя.Договор КАК Договор,
	|	СУММА(гф_СпецификацияПокупателяЗаказыКлиентов.ЗаказКлиента.СуммаДокумента) КАК Сумма
	|ПОМЕСТИТЬ втСпецификации
	|ИЗ
	|	Документ.гф_СпецификацияПокупателя КАК гф_СпецификацияПокупателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гф_СпецификацияПокупателя.ЗаказыКлиентов КАК гф_СпецификацияПокупателяЗаказыКлиентов
	|		ПО (гф_СпецификацияПокупателя.Ссылка = гф_СпецификацияПокупателяЗаказыКлиентов.Ссылка)
	|ГДЕ
	|	гф_СпецификацияПокупателя.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И гф_СпецификацияПокупателя.Договор.гф_Сезон = &Сезон
	|	И гф_СпецификацияПокупателя.Проведен
	// СадомцевСА 11.04.2024 Выставление счетов на аванс. Добавил фильтр по Организации (владелец Банковского счета) при заполнении.
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811eef6427a7ca8d6
	|	И гф_СпецификацияПокупателя.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	гф_СпецификацияПокупателя.Ссылка,
	|	гф_СпецификацияПокупателя.Контрагент,
	|	гф_СпецификацияПокупателя.Организация,
	|	гф_СпецификацияПокупателя.Договор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втСпецификации.Договор КАК Договор,
	|	ДополнительныеРеквизитыСтраховойДепозит.Значение КАК СтраховойДепозит,
	|	ДополнительныеРеквизитыПредоплата.Значение КАК Предоплата
	|ПОМЕСТИТЬ втСвойстваДоговора
	|ИЗ
	|	втСпецификации КАК втСпецификации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов.ДополнительныеРеквизиты КАК ДополнительныеРеквизитыСтраховойДепозит
	|		ПО втСпецификации.Договор = ДополнительныеРеквизитыСтраховойДепозит.Ссылка
	|			И (ДополнительныеРеквизитыСтраховойДепозит.Свойство = &СвойствоСтраховойДепозит)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов.ДополнительныеРеквизиты КАК ДополнительныеРеквизитыПредоплата
	|		ПО втСпецификации.Договор = ДополнительныеРеквизитыПредоплата.Ссылка
	|			И (ДополнительныеРеквизитыПредоплата.Свойство = &СвойствоПредоплата)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСвойстваДоговора.Договор КАК Договор
	|ПОМЕСТИТЬ втОтобранныеДоговора
	|ИЗ
	|	втСвойстваДоговора КАК втСвойстваДоговора
	|ГДЕ
	|	(ЕСТЬNULL(втСвойстваДоговора.СтраховойДепозит, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяССылка)) <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяССылка)
	|			ИЛИ ЕСТЬNULL(втСвойстваДоговора.Предоплата, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяССылка)) <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяССылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	втСвойстваДоговора.Договор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИСТИНА КАК Пометка,
	|	втСпецификации.Ссылка КАК Спецификация,
	|	втСпецификации.Контрагент КАК Контрагент,
	|	втСпецификации.Организация КАК Организация,
	|	втСпецификации.Договор КАК Договор,
	|	втСпецификации.Сумма КАК Сумма,
	|	втСвойстваДоговора.СтраховойДепозит КАК УслугаДепозита,
	|	втСвойстваДоговора.Предоплата КАК УслугаПредоплаты,
	|	гф_ПроцентыПредоплатыПоДепозиту.Процент КАК Депозит,
	|	гф_ПроцентыПредоплатыСкидкаЗаПредоплату.Процент КАК Предоплата
	|ИЗ
	|	втСпецификации КАК втСпецификации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОтобранныеДоговора КАК втОтобранныеДоговора
	|			ЛЕВОЕ СОЕДИНЕНИЕ втСвойстваДоговора КАК втСвойстваДоговора
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гф_ПроцентыПредоплаты КАК гф_ПроцентыПредоплатыПоДепозиту
	|				ПО (втСвойстваДоговора.СтраховойДепозит = гф_ПроцентыПредоплатыПоДепозиту.Номеклатура)
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гф_ПроцентыПредоплаты КАК гф_ПроцентыПредоплатыСкидкаЗаПредоплату
	|				ПО (втСвойстваДоговора.Предоплата = гф_ПроцентыПредоплатыСкидкаЗаПредоплату.Номеклатура)
	|			ПО (втОтобранныеДоговора.Договор = втСвойстваДоговора.Договор)
	|		ПО (втСпецификации.Договор = втОтобранныеДоговора.Договор)
	|
	|СГРУППИРОВАТЬ ПО
	|	втСпецификации.Ссылка,
	|	втСпецификации.Контрагент,
	|	втСпецификации.Организация,
	|	втСпецификации.Договор,
	|	втСвойстваДоговора.СтраховойДепозит,
	|	втСвойстваДоговора.Предоплата,
	|	гф_ПроцентыПредоплатыПоДепозиту.Процент,
	|	гф_ПроцентыПредоплатыСкидкаЗаПредоплату.Процент,
	|	втСпецификации.Сумма";
	
	Запрос.УстановитьПараметр("Сезон", Сезон);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	// СадомцевСА 10.04.2024 e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811eef63da0196b36
	// Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);  
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("СвойствоСтраховойДепозит", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "гф_ДоговорыКонтрагентовСтраховойДепозит"));  
	Запрос.УстановитьПараметр("СвойствоПредоплата", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "гф_ДоговорыКонтрагентовПредоплата"));  

	// СадомцевСА 11.04.2024 Выставление счетов на аванс. Добавил фильтр по Организации (владелец Банковского счета) при заполнении.
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		Запрос.УстановитьПараметр("Организация", БанковскийСчет.Владелец);
	Иначе
	     Запрос.Текст = СтрЗаменить(Запрос.Текст, "И гф_СпецификацияПокупателя.Организация = &Организация", "");
	КонецЕсли;
	
	ТзЗапроса = Запрос.Выполнить().Выгрузить();  
	
	Если ТзЗапроса.Количество() = 0 Тогда
		Сообщить("Нет данных для заполнения!");
	КонецЕсли;
	
	ТаблицаСпецификацийАванса.Загрузить(ТзЗапроса); 

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаПоставкуНаСервере()

	ТаблицаСпецификацийПоставки.Очистить();   
	
	Если ОтборПоСписку И СписокВыбранныхКонтрагентов.Количество() > 0 Тогда  
		КонтрагентДляЗапроса = СписокВыбранныхКонтрагентов;
	ИначеЕсли ЗначениеЗаполнено(КонтрагентПоставки) Тогда
		КонтрагентДляЗапроса = КонтрагентПоставки;		
	КонецЕсли;

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	// СадомцевСА 08.02.2024 Добавил настройку "Включая отгруженные УЛ"
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811eec6576f47263a
	// СадомцевСА 07.03.2024 Реализовал Выставление счетов на некоробные Заказы
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811eed7b7794a3014
	ЭтоКоробнойСклад = Истина;
	Если ЗначениеЗаполнено(НомерПоставки.Склад) Тогда
		ЭтоКоробнойСклад = УправлениеСвойствами.ЗначениеСвойства(НомерПоставки.Склад, "гф_СкладыТоварыВКоробах") = Истина;
	КонецЕсли;
	Если ЭтоКоробнойСклад Тогда
		ТзЗапроса = ОбработкаОбъект.ЗаполнитьТаблицуДляВыставленияСчетовНаПоставку(ДатаНачалаПоставки,
		ДатаОкончанияПоставки, НомерПоставки, КонтрагентДляЗапроса, СезонПоставки, флВключаяОтгруженныеУЛ);
	Иначе
		ТзЗапроса = ОбработкаОбъект.ЗаполнитьТаблицуДляВыставленияСчетовНаПоставкуТовары(ДатаНачалаПоставки,
		ДатаОкончанияПоставки, НомерПоставки, КонтрагентДляЗапроса, СезонПоставки, флВключаяОтгруженныеУЛ);
	КонецЕсли;
	ТаблицаСпецификацийПоставки.Загрузить(ТзЗапроса); 

КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	
	СтрокаОшибок = "";
	
	Если РежимРаботы = 0 Тогда		
		СтрокаОшибок = СформироватьНаАвансНаСервере();		
	ИначеЕсли РежимРаботы = 1 Тогда
		СтрокаОшибок = СформироватьНаПоставкуНаСервере();		
	КонецЕсли;  
	
	Если Не ПустаяСтрока(СтрокаОшибок) Тогда
		Сообщить(СтрокаОшибок);
	КонецЕсли;
	
	Заполнить(Неопределено);
	
КонецПроцедуры

&НаСервере
Функция СформироватьНаАвансНаСервере() 
	
	СтрокиДляФормирования = ТаблицаСпецификацийАванса.НайтиСтроки(Новый Структура("Пометка", Истина));
	
	Если СтрокиДляФормирования.Количество() = 0 Тогда
		Возврат "Нет данных для формирования счетов!";
	КонецЕсли;
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;  
	СтрокаСообщений = "";
	
	Для Каждого Элемент Из СтрокиДляФормирования Цикл 
		
		Если ЗначениеЗаполнено(Элемент.УслугаДепозита) Тогда 
			
			СчетСсылка = НайтиСчетНаОплатуПоСпецификации(Элемент.Спецификация, Элемент.УслугаДепозита);
			
			Если СчетСсылка = Неопределено Тогда
				ДокументСчет = Документы.СчетНаОплатуКлиенту.СоздатьДокумент();
			Иначе
				ДокументСчет = СчетСсылка.ПолучитьОбъект();
			КонецЕсли;
			
			ДокументСчет.Дата = ТекущаяДата();
			ДокументСчет.Организация = Элемент.Организация;
			ДокументСчет.СуммаДокумента = Элемент.Сумма * Элемент.Депозит / 100;
			
			ДоговорКонтрагента = Элемент.Договор;
			ДокументСчет.Валюта = ДоговорКонтрагента.ВалютаВзаиморасчетов;
			ДокументСчет.БанковскийСчет = ДоговорКонтрагента.БанковскийСчет;
			ДокументСчет.Договор = ДоговорКонтрагента; 
			ДокументСчет.ДокументОснование = ДоговорКонтрагента;
			ДокументСчет.ЧастичнаяОплата = Истина;     
			
			ДокументСчет.НазначениеПлатежа = Элемент.УслугаДепозита.Наименование + " " + ДоговорКонтрагента;
			ДокументСчет.Контрагент = Элемент.Контрагент; 
			ДокументСчет.Партнер = Элемент.Контрагент.Партнер; 
			
			ДокументСчет.гф_СпецификацияПокупателя = Элемент.Спецификация;
			ДокументСчет.Автор = ТекущийПользователь;
			// ++ Галфинд СадомцевСА 17.01.2024 Реализовал заполнение Банковского счета в Счете на оплату клиенту из обработки
			// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811eeb44517bd9ea7
			Если ЗначениеЗаполнено(БанковскийСчет) Тогда
				ДокументСчет.БанковскийСчет = БанковскийСчет;
			КонецЕсли;
			// -- Галфинд СадомцевСА 17.01.2024
			
			ДокументСчет.ЭтапыГрафикаОплаты.Очистить();
			
			СтрокаПлатежа = ДокументСчет.ЭтапыГрафикаОплаты.Добавить();
			СтрокаПлатежа.ДатаПлатежа = ДокументСчет.Дата;
			СтрокаПлатежа.ПроцентПлатежа = 100;
			СтрокаПлатежа.СуммаПлатежа = Элемент.Сумма * Элемент.Депозит / 100;
			
			Попытка
				ДокументСчет.Записать(РежимЗаписиДокумента.Проведение);
				СтрокаСообщений = СтрокаСообщений + "Записан счет: " + ДокументСчет.Ссылка + Символы.ПС;
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
				СтрокаСообщений = СтрокаСообщений + "Ошибка при записи счета для документа: " + Элемент.Спецификация + " - " + ОписаниеОшибки + Символы.ПС;
			КонецПопытки;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Элемент.УслугаПредоплаты) Тогда 
			
			СчетСсылка = НайтиСчетНаОплатуПоСпецификации(Элемент.Спецификация, Элемент.УслугаПредоплаты);
			
			Если СчетСсылка = Неопределено Тогда
				ДокументСчет = Документы.СчетНаОплатуКлиенту.СоздатьДокумент();
			Иначе
				ДокументСчет = СчетСсылка.ПолучитьОбъект();
			КонецЕсли;
			
			ДокументСчет.Дата = ТекущаяДата();
			ДокументСчет.Организация = Элемент.Организация;
			ДокументСчет.СуммаДокумента =  Элемент.Сумма * Элемент.Предоплата / 100;
			
			ДоговорКонтрагента = Элемент.Договор;
			ДокументСчет.Валюта = ДоговорКонтрагента.ВалютаВзаиморасчетов;
			ДокументСчет.БанковскийСчет = ДоговорКонтрагента.БанковскийСчет;
			ДокументСчет.Договор = ДоговорКонтрагента;  
			ДокументСчет.ДокументОснование = ДоговорКонтрагента; 
			ДокументСчет.ЧастичнаяОплата = Истина;
			
			ДокументСчет.НазначениеПлатежа = Элемент.УслугаПредоплаты.Наименование + " " + ДоговорКонтрагента;
			ДокументСчет.Контрагент = Элемент.Контрагент; 
			ДокументСчет.Партнер = Элемент.Контрагент.Партнер;   
			ДокументСчет.ЧастичнаяОплата = Истина; 
			
			ДокументСчет.гф_СпецификацияПокупателя = Элемент.Спецификация;
			ДокументСчет.Автор = ТекущийПользователь;
			// ++ Галфинд СадомцевСА 17.01.2024 Реализовал заполнение Банковского счета в Счете на оплату клиенту из обработки
			// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811eeb44517bd9ea7
			Если ЗначениеЗаполнено(БанковскийСчет) Тогда
				ДокументСчет.БанковскийСчет = БанковскийСчет;
			КонецЕсли;
			// -- Галфинд СадомцевСА 17.01.2024
			
			ДокументСчет.ЭтапыГрафикаОплаты.Очистить();
			
			СтрокаПлатежа = ДокументСчет.ЭтапыГрафикаОплаты.Добавить();
			СтрокаПлатежа.ДатаПлатежа = ДокументСчет.Дата;
			СтрокаПлатежа.ПроцентПлатежа = 100;
			СтрокаПлатежа.СуммаПлатежа = Элемент.Сумма * Элемент.Предоплата / 100;
			
			Попытка
				ДокументСчет.Записать(РежимЗаписиДокумента.Проведение);  
				СтрокаСообщений = СтрокаСообщений + "Записан счет: " + ДокументСчет.Ссылка + Символы.ПС;
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
				СтрокаСообщений = СтрокаСообщений + "Ошибка при записи счета для документа: " + Элемент.Спецификация + " - " + ОписаниеОшибки + Символы.ПС;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
    Возврат СтрокаСообщений;
	
КонецФункции

&НаСервере
Процедура ТаблицаДанныхЗаполнитьБанковскийСчет(ТаблицаДанных)
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		// ++ Галфинд СадомцевСА 17.01.2024 Реализовал заполнение Банковского счета в Счете на оплату клиенту из обработки
		// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811eeb44517bd9ea7
		Если ЗначениеЗаполнено(БанковскийСчет) Тогда
			СтрокаТаблицы.БанковскийСчет = БанковскийСчет;
		Иначе
			СтрокаТаблицы.БанковскийСчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Договор, "БанковскийСчет");
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция СформироватьНаПоставкуНаСервере() 
	
	ТаблицаДанных = ТаблицаСпецификацийПоставки.Выгрузить(Новый Структура("Пометка", Истина)); 
	Если ТаблицаДанных.Количество() = 0 Тогда
		Возврат "Нет данных для формирования счетов!";
	КонецЕсли;
	
	ТаблицаДанных.Колонки.Добавить("БанковскийСчет", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчетаОрганизаций"));
	
	// СадомцевСА 27.04.2024 Исправил ошибки СонарКуба. Перенес код в процедуру.
	ТаблицаДанныхЗаполнитьБанковскийСчет(ТаблицаДанных);
	//Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
	//	
	//	// ++ Галфинд СадомцевСА 17.01.2024 Реализовал заполнение Банковского счета в Счете на оплату клиенту из обработки
	//	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811eeb44517bd9ea7
	//	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
	//		СтрокаТаблицы.БанковскийСчет = БанковскийСчет;
	//	Иначе
	//		СтрокаТаблицы.БанковскийСчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Договор, "БанковскийСчет");
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
	ТаблицаДляСчетов = ТаблицаДанных.Скопировать();
	
	КолонкиГруппировок = "ПТУ, Организация, Контрагент, Договор, БанковскийСчет";
	ТаблицаДляСчетов.Свернуть(КолонкиГруппировок, "Сумма");
	
	СтуктураПоискаДанных = Новый Структура(КолонкиГруппировок);
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;  
	СтрокаСообщений = "";
	
	Для Каждого СтрокаСчетов Из ТаблицаДляСчетов Цикл 
		
		ЗаполнитьЗначенияСвойств(СтуктураПоискаДанных, СтрокаСчетов);
		ТаблицаВариантов = ТаблицаДанных.Скопировать(СтуктураПоискаДанных,
			// СадомцевСА 31.01.2024 Добавил поле ЗаказКлиента
			//"ВариантКомплектации, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС");
			// СадомцевСА 07.03.2024
			//"ЗаказКлиента, ВариантКомплектации, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС");
			"ЗаказКлиента, ВариантКомплектации, Номенклатура, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС");
			
		Если НЕ НеУчитыватьВыстСчета Тогда // Галфинд_ДомнышеваКР_08_04_2024
		ТаблицаВариантовВыставленных = ВыставленныеРанееВарианты(СтрокаСчетов.ПТУ, СтрокаСчетов.Контрагент, СтрокаСчетов.Договор);
		// ++ Галфинд_ДомнышеваКР_08_04_2024	
		Иначе 
			ТаблицаВариантовВыставленных = Неопределено;
		КонецЕсли;
		// -- Галфинд_ДомнышеваКР_08_04_2024
		ТаблицаВариантовСчета = ОсталосьВыставитьВарианты(ТаблицаВариантов, ТаблицаВариантовВыставленных); 
		
		// СадомцевСА 07.03.2024
		ЭтоКоробнойСклад = Истина;
		Если ТаблицаДанных.Количество() > 0 Тогда
			ЭтоКоробнойСклад = УправлениеСвойствами.ЗначениеСвойства(ТаблицаДанных[0].ЗаказКлиента.Склад, "гф_СкладыТоварыВКоробах") = Истина;
		КонецЕсли;
	
		Если НЕ ЭтоКоробнойСклад Тогда
			ТаблицаВариантовСчета = ТаблицаДанных.Скопировать(СтуктураПоискаДанных,
			// СадомцевСА 31.01.2024 Добавил поле ЗаказКлиента
			//"ВариантКомплектации, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС");
			"ЗаказКлиента, ВариантКомплектации, Номенклатура, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТаблицаВариантовСчета) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументСчет = Документы.СчетНаОплатуКлиенту.СоздатьДокумент();
		
		ДокументСчет.Дата = ТекущаяДата();
		ДокументСчет.Организация = СтрокаСчетов.Организация;
		ДокументСчет.СуммаДокумента = ТаблицаВариантовСчета.Итог("Сумма");
		
		ДоговорКонтрагента = СтрокаСчетов.Договор;
		ДокументСчет.Валюта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВалютаВзаиморасчетов");
		ДокументСчет.БанковскийСчет = СтрокаСчетов.БанковскийСчет;
		ДокументСчет.Договор = ДоговорКонтрагента; 
		ДокументСчет.ДокументОснование = ДоговорКонтрагента;
		//ДокументСчет.ЧастичнаяОплата = Истина;       
		
		ДокументСчет.Контрагент = СтрокаСчетов.Контрагент; 
		ДокументСчет.Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаСчетов.Контрагент, "Партнер"); 
		
		ДокументСчет.гф_НомерПоставки = СтрокаСчетов.ПТУ;
		ДокументСчет.Автор = ТекущийПользователь;
		
		// ЭтапыГрафикаОплаты
		ДокументСчет.ЭтапыГрафикаОплаты.Очистить();
		
		СтрокаПлатежа = ДокументСчет.ЭтапыГрафикаОплаты.Добавить();
		СтрокаПлатежа.ДатаПлатежа = ДокументСчет.Дата;
		СтрокаПлатежа.ПроцентПлатежа = 100;
		СтрокаПлатежа.СуммаПлатежа = ДокументСчет.СуммаДокумента;
		
		// гф_ТоварыВКоробах
		ДокументСчет.гф_ТоварыВКоробах.Загрузить(ТаблицаВариантовСчета);
		
		// НазначениеПлатежа
		НазначенияПлатежа = Новый Массив;
		Для Каждого СтрокаВариантов Из ТаблицаВариантовСчета Цикл
			НазначенияПлатежа.Добавить(СтрокаВариантов.ВариантКомплектации);
		КонецЦикла;
		ДокументСчет.НазначениеПлатежа = СтрСоединить(НазначенияПлатежа, ",");
		// СадомцевСА 31.01.2024 Добавил Договор в Назначение
		//ДокументСчет.НазначениеПлатежа = ДокументСчет.НазначениеПлатежа + Символы.ПС + 
		ДокументСчет.НазначениеПлатежа = "" +
			"Оплата по договору № " + ДокументСчет.Договор.Номер + " от " + Формат(ДокументСчет.Договор.Дата, "ДФ=dd.MM.yyyy");
			//"Оплата по договору " + ДокументСчет.Договор.НаименованиеДляПечати + " от " + Формат(ДокументСчет.Договор.Дата, "ДФ=dd.MM.yyyy");
				
		Попытка
			ДокументСчет.Записать(РежимЗаписиДокумента.Проведение);
			СтрокаСообщений = СтрокаСообщений + "Записан счет: " + ДокументСчет.Ссылка + Символы.ПС;
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			СтрокаСообщений = СтрокаСообщений + "Ошибка при записи счета для документа: " + СтрокаСчетов.ПТУ + " - " + ОписаниеОшибки + Символы.ПС;
		КонецПопытки;
			
	КонецЦикла;
	
    Возврат СтрокаСообщений;
	
КонецФункции

&НаСервере
Функция НайтиСчетНаОплатуПоСпецификации(ДокументСпецификация, НазначениеПлатежа) 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ Разрешенные
	|	СчетНаОплатуКлиенту.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СчетНаОплатуКлиенту КАК СчетНаОплатуКлиенту
	|ГДЕ
	|	СчетНаОплатуКлиенту.гф_СпецификацияПокупателя = &СпецификацияСсылка
	|	И СчетНаОплатуКлиенту.НазначениеПлатежа Подобно &НазначениеПлатежа
	|	И Не СчетНаОплатуКлиенту.ПометкаУдаления";
	Запрос.УстановитьПараметр("СпецификацияСсылка", ДокументСпецификация);
	Запрос.УстановитьПараметр("НазначениеПлатежа", НазначениеПлатежа.Наименование + "%"); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;   
		
	Иначе 
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Ссылка; 
		
	КонецЕсли;
		
КонецФункции

&НаСервереБезКонтекста
Функция НайтиСчетНаОплатуПоПоставке(ДокументПТУ, КонтрагентСчета, ДоговорСчета, НазначениеПлатежа = Неопределено) 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ Разрешенные
	|	СчетНаОплатуКлиенту.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СчетНаОплатуКлиенту КАК СчетНаОплатуКлиенту
	|ГДЕ
	|	СчетНаОплатуКлиенту.гф_НомерПоставки = &ДокументПТУ 
	|	И СчетНаОплатуКлиенту.Контрагент = &КонтрагентСчета
	|	И СчетНаОплатуКлиенту.Договор = &ДоговорСчета
	//|	И СчетНаОплатуКлиенту.НазначениеПлатежа Подобно &НазначениеПлатежа
	|	И Не СчетНаОплатуКлиенту.ПометкаУдаления";
	Запрос.УстановитьПараметр("ДокументПТУ", ДокументПТУ); 
	Запрос.УстановитьПараметр("КонтрагентСчета", КонтрагентСчета);
	Запрос.УстановитьПараметр("ДоговорСчета", ДоговорСчета);
	//Запрос.УстановитьПараметр("НазначениеПлатежа", НазначениеПлатежа.Наименование + "%"); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;   
		
	Иначе 
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Ссылка; 
		
	КонецЕсли;
		
КонецФункции

&НаСервереБезКонтекста
Функция ВыставленныеРанееВарианты(ДокументПТУ, КонтрагентСчета, ДоговорСчета) 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетНаОплатуТоварыВКоробах.ВариантКомплектации КАК ВариантКомплектации,
	|	СчетНаОплатуТоварыВКоробах.ЗаказКлиента КАК ЗаказКлиента, // СадомцевСА 31.01.2024
	|	СчетНаОплатуТоварыВКоробах.Цена КАК Цена,
	|	СчетНаОплатуТоварыВКоробах.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(СчетНаОплатуТоварыВКоробах.Количество) КАК Количество,
	|	СУММА(СчетНаОплатуТоварыВКоробах.СуммаНДС) КАК СуммаНДС,
	|	СУММА(СчетНаОплатуТоварыВКоробах.Сумма) КАК Сумма
	|ИЗ
	|	Документ.СчетНаОплатуКлиенту.гф_ТоварыВКоробах КАК СчетНаОплатуТоварыВКоробах
	|ГДЕ
	|	СчетНаОплатуТоварыВКоробах.Ссылка.гф_НомерПоставки = &ДокументПТУ
	|	И СчетНаОплатуТоварыВКоробах.Ссылка.Контрагент = &КонтрагентСчета
	|	И СчетНаОплатуТоварыВКоробах.Ссылка.Договор = &ДоговорСчета
	|	И НЕ СчетНаОплатуТоварыВКоробах.Ссылка.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетНаОплатуТоварыВКоробах.ВариантКомплектации,
	|	СчетНаОплатуТоварыВКоробах.ЗаказКлиента, // СадомцевСА 31.01.2024
	|	СчетНаОплатуТоварыВКоробах.Цена,
	|	СчетНаОплатуТоварыВКоробах.СтавкаНДС";
	Запрос.УстановитьПараметр("ДокументПТУ", ДокументПТУ); 
	Запрос.УстановитьПараметр("КонтрагентСчета", КонтрагентСчета);
	Запрос.УстановитьПараметр("ДоговорСчета", ДоговорСчета);
	
	Возврат Запрос.Выполнить().Выгрузить();
			
КонецФункции

&НаСервереБезКонтекста
Функция ОсталосьВыставитьВарианты(ТаблицаВариантов, ТаблицаВариантовВыставленных)
	
	ТаблицаВариантовОсталось = ТаблицаВариантов.Скопировать();
	
	Если Не ЗначениеЗаполнено(ТаблицаВариантовВыставленных) Тогда
		Возврат ТаблицаВариантовОсталось;	
	КонецЕсли;
	
	// СадомцевСА 31.01.2024
	//ПараметрыПоиска = Новый Структура("ВариантКомплектации, Цена, СтавкаНДС");
	ПараметрыПоиска = Новый Структура("ЗаказКлиента, ВариантКомплектации, Цена, СтавкаНДС");
	
	КоличествоСтрок = ТаблицаВариантовОсталось.Количество();
	Для Счетчик = 1 По КоличествоСтрок Цикл
		
		СтрокаВариантов = ТаблицаВариантовОсталось[КоличествоСтрок - Счетчик];
		
		ЗаполнитьЗначенияСвойств(ПараметрыПоиска, СтрокаВариантов);
		МассивВыставленных = ТаблицаВариантовВыставленных.НайтиСтроки(ПараметрыПоиска);
		Если МассивВыставленных.Количество() > 0 Тогда
			
			СтрокаВыставленных = МассивВыставленных[0];
			
			СтрокаВариантов["Количество"] = СтрокаВариантов["Количество"] - СтрокаВыставленных["Количество"]; 
			СтрокаВариантов["СуммаНДС"]   = СтрокаВариантов["СуммаНДС"]   - СтрокаВыставленных["СуммаНДС"]; 
			СтрокаВариантов["Сумма"]      = СтрокаВариантов["Сумма"]      - СтрокаВыставленных["Сумма"];
			
		КонецЕсли;
		
		Если СтрокаВариантов["Сумма"] <=0 Тогда
			ТаблицаВариантовОсталось.Удалить(СтрокаВариантов);	
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаВариантовОсталось;	
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ПериодЗаполненияПриИзменении(Элемент)

	ДатаНачала = ПериодЗаполнения.ДатаНачала;
	ДатаОкончания = ПериодЗаполнения.ДатаОкончания;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСпецификацийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "Договор"	
		Или Поле.Имя = "Контрагент"
		Или Поле.Имя = "Спецификация"
		Или Поле.Имя = "УслугаДепозита"
		Или Поле.Имя = "УслугаПредоплаты" Тогда
		
		ПоказатьЗначение(,Элементы.ТаблицаСпецификацийАванса.ТекущиеДанные[Поле.Имя]);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерПоставкиПриИзменении(Элемент)
	
	СписокДоступныхКонтрагентов.Очистить(); 
	Элементы.СписокВыбранныхКонтрагентовЗначение.СписокВыбора.Очистить(); 
	Элементы.СезонПоставки.СписокВыбора.Очистить(); 
	ТаблицаСпецификацийПоставки.Очистить();
	
	КонтрагентПоставки = Неопределено;
	СезонПоставки = Неопределено;
	Элементы.СезонПоставки.РежимВыбораИзСписка = Ложь;
	Элементы.КонтрагентПоставки.РежимВыбораИзСписка = Ложь;
	
	Если ЗначениеЗаполнено(НомерПоставки) Тогда 
		
		ПолучитьДанныеПоПТУ();
		Элементы.СезонПоставки.РежимВыбораИзСписка = Истина; 
		Элементы.КонтрагентПоставки.РежимВыбораИзСписка = Истина;
		
		// СадомцевСА 01.02.2024
		ОчиститьПриНеобходимостиБанковскийСчет();

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеПоПТУ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ Разрешенные
	|	УпаковочныйЛист.Ссылка КАК Ссылка,
	|	УпаковочныйЛист.гф_Заказ.Контрагент КАК Контрагент,
	|	УпаковочныйЛист.гф_Заказ.Договор КАК Договор,
	|	УпаковочныйЛист.гф_Заказ.Договор.гф_Сезон КАК Сезон
	|ПОМЕСТИТЬ втРез
	|ИЗ
	|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
	|ГДЕ
	|	УпаковочныйЛист.гф_Поставка = &гф_Поставка
	|	И НЕ УпаковочныйЛист.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРез.Контрагент КАК Контрагент
	|ИЗ
	|	втРез КАК втРез
	|
	|СГРУППИРОВАТЬ ПО
	|	втРез.Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРез.Сезон КАК Сезон
	|ИЗ
	|	втРез КАК втРез
	|
	|СГРУППИРОВАТЬ ПО
	|	втРез.Сезон";	
	Запрос.УстановитьПараметр("гф_Поставка", НомерПоставки);
	
	ПакетЗапроса = Запрос.ВыполнитьПакет(); 
	
	ТзКонтрагентов = ПакетЗапроса[1].Выгрузить();
	МассивЗаполнения = ТзКонтрагентов.ВыгрузитьКолонку("Контрагент");
	СписокДоступныхКонтрагентов.ЗагрузитьЗначения(МассивЗаполнения); 
	Элементы.КонтрагентПоставки.СписокВыбора.ЗагрузитьЗначения(МассивЗаполнения);
	Элементы.СписокВыбранныхКонтрагентовЗначение.СписокВыбора.ЗагрузитьЗначения(МассивЗаполнения);
	
	ТзСезонов = ПакетЗапроса[2].Выгрузить();
	Элементы.СезонПоставки.СписокВыбора.ЗагрузитьЗначения(ТзСезонов.ВыгрузитьКолонку("Сезон"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСпискуПриИзменении(Элемент)
	
	Элементы.КонтрагентПоставки.Доступность = Не ОтборПоСписку;
	Элементы.СписокВыбранныхКонтрагентов.Видимость = ОтборПоСписку;
	
	Если Не ОтборПоСписку Тогда
		СписокВыбранныхКонтрагентов.Очистить();
	КонецЕсли;
	 
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСпецификацийПоставкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) 
	
	Если Поле.Имя = "ТаблицаСпецификацийПоставкиПТУНомер" Тогда
		
		ПоказатьЗначение(,Элементы.ТаблицаСпецификацийПоставки.ТекущиеДанные["ПТУ"]);
		
	ИначеЕсли Поле.Имя = "ТаблицаСпецификацийПоставкиДоговор"	
		Или Поле.Имя = "ТаблицаСпецификацийПоставкиКонтрагент"
		Или Поле.Имя = "ТаблицаСпецификацийПоставкиПТУ"
		Или Поле.Имя = "ТаблицаСпецификацийПоставкиВариантКомплектации"
		Тогда
		
		ИмяПоля = СтрЗаменить(Поле.Имя, "ТаблицаСпецификацийПоставки", "" );
		ПоказатьЗначение(,Элементы.ТаблицаСпецификацийПоставки.ТекущиеДанные[ИмяПоля]);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодЗаполненияПоставкиПриИзменении(Элемент) 
	
	ДатаНачалаПоставки = ПериодЗаполненияПоставки.ДатаНачала;
	ДатаОкончанияПоставки = ПериодЗаполненияПоставки.ДатаОкончания;
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// СадомцевСА 02.04.2024 Добавил отбор по организации при выборе банковского счета
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	Если ЗначениеЗаполнено(НомерПоставки) Тогда
		ДанныеОтбора = Новый Структура("Владелец", ПолучитьОрганизацию(НомерПоставки));
		ПараметрыФормы.Вставить("Отбор", ДанныеОтбора);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.БанковскиеСчетаОрганизаций.Форма.ФормаВыбора", 
		ПараметрыФормы, Элементы.БанковскийСчет, 
		ЭтаФорма.УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОрганизацию(НомерПоставки)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НомерПоставки, "Организация");
КонецФункции

&НаСервере
Процедура ОчиститьПриНеобходимостиБанковскийСчет()
	Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
		Возврат;
	КонецЕсли;
	Если НомерПоставки.Организация <> БанковскийСчет.Владелец Тогда
		БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаПоставкуНаСервереУЛ(ТЗ_Заказы)
	// СадомцевСА 12.02.2024
	ТаблицаСпецификацийПоставки.Очистить();
	Если ТЗ_Заказы = Неопределено Тогда
		ТЗ_Заказы = ХЗ.Получить();
	КонецЕсли;
	МассивЗаказы = ТЗ_Заказы.ВыгрузитьКолонку("Заказ");
	МассивУЛ = Новый Массив;
	
	ЭтоКоробнойСклад = Истина;
	Если ТЗ_Заказы.Количество() > 0 Тогда
		ЭтоКоробнойСклад = УправлениеСвойствами.ЗначениеСвойства(ТЗ_Заказы[0].Склад, "гф_СкладыТоварыВКоробах") = Истина;
	КонецЕсли;
	
	Если ЭтоКоробнойСклад Тогда
		Для Каждого СтрокаЗаказ Из ТЗ_Заказы Цикл
			Для Каждого СтрокаУЛ Из СтрокаЗаказ.СписокУпаковочныйЛистИлиНоменклатура Цикл
				МассивУЛ.Добавить(СтрокаУЛ.УпаковочныйЛист);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	//Если ОтборПоСписку И СписокВыбранныхКонтрагентов.Количество() > 0 Тогда  
	//	КонтрагентДляЗапроса = СписокВыбранныхКонтрагентов;
	//ИначеЕсли ЗначениеЗаполнено(КонтрагентПоставки) Тогда
	//	КонтрагентДляЗапроса = КонтрагентПоставки;		
	//КонецЕсли;

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Если ЭтоКоробнойСклад Тогда
		ТзЗапроса = ОбработкаОбъект.ЗаполнитьТаблицуДляВыставленияСчетовНаПоставкуУЛ(МассивЗаказы, МассивУЛ);
	Иначе
		ТзЗапроса = ОбработкаОбъект.ЗаполнитьТаблицуДляВыставленияСчетовНаПоставкуТовары(ДатаНачалаПоставки,
		ДатаОкончанияПоставки, НомерПоставки, , СезонПоставки, ТЗ_Заказы);
	КонецЕсли;
	
	ТаблицаСпецификацийПоставки.Загрузить(ТзЗапроса); 

КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаказыУЛ()
	// СадомцевСА 07.03.2024 Реализовал Выставление счетов на некоробные Заказы
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811eed7b7794a3014
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПТУ", НомерПоставки);
	Если ЭтоКоробнойСклад Тогда
		// Галфинд СадомцевСА 15.02.2024 Реализовано:
		// 2) при заполнении должен проводиться анализ на заполнение реквизита "Заказ клиента" в УЛ.
		// Если ЗаказКлиента не заполнен, то выводить информационное сообщение "По УЛ <НомерУЛ> не заполнен Заказ клиента"
		// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811eecbdbcf87e004
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПриобретениеПродукцияВКоробах.IDКороба КАК УпаковочныйЛист,
		|	ПриобретениеПродукцияВКоробах.IDКороба.Код КАК НомерУЛ,
		|	ПриобретениеПродукцияВКоробах.IDКороба.гф_Заказ КАК ЗаказКлиента,
		|	ПриобретениеПродукцияВКоробах.IDКороба.гф_Заказ.Номер КАК IDКоробагф_ЗаказНомер
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг.гф_ПродукцияВКоробах КАК ПриобретениеПродукцияВКоробах
		|ГДЕ
		|	ПриобретениеПродукцияВКоробах.Ссылка = &ПТУ
		|	И ПриобретениеПродукцияВКоробах.IDКороба.гф_Заказ.Номер ЕСТЬ NULL";
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "По УЛ " + Выборка.НомерУЛ + " не заполнен Заказ клиента. Счет выставлен не будет.";
			Сообщение.Сообщить();
		КонецЦикла;
		
	Иначе
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ПриобретениеТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
		               |	ПриобретениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
		               |	ПриобретениеТоваровУслугТовары.Характеристика КАК Характеристика,
		               |	ПриобретениеТоваровУслугТовары.Упаковка КАК Упаковка,
		               |	ПриобретениеТоваровУслугТовары.КоличествоУпаковок КАК КоличествоУпаковок,
		               |	ПриобретениеТоваровУслугТовары.Количество КАК Количество
		               |ИЗ
		               |	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
		               |ГДЕ
		               |	ПриобретениеТоваровУслугТовары.Ссылка.Проведен
		               |	И ПриобретениеТоваровУслугТовары.гф_ЗаказКлиента = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
		               |	И ПриобретениеТоваровУслугТовары.Ссылка = &ПТУ";
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Для позиции" + Выборка.Номенклатура + " не заполнен Заказ клиента. Счет выставлен не будет. Строка:" + Выборка.НомерСтроки;
			Сообщение.Сообщить();
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры
