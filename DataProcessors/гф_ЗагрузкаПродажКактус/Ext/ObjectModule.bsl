Перем МассивНепроведенныхДокументов Экспорт;
                                                                    
#Область ПрограммныйИнтерфейс
Процедура ВыполнитьОсновныеДействия() Экспорт

	тзНастройки = ЗагрузитьНастройкиОбработки();
	
	Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
		// по умолчанию дата получения изменений равна началу предыдущего дня
		ДатаНачала = НачалоДня(НачалоДня(ТекущаяДатаСеанса())-1);
	КонецЕсли;
	
	//Для каждой записи последовательно выполняем запросы API и создаем документы
	Для каждого Настройка из тзНастройки Цикл
		
		ЕстьОшибка = Ложь;
		МассивНепроведенныхДокументов = Новый Массив; //Для каждой настройки массив очищаем
		
		ПроверитьСрокДействияОбновитьТокен(Настройка, ЕстьОшибка);
		
		//если при проверке (запросе) токена возникла ошибка, то дальнейшие действия прерываются
		Если ЕстьОшибка Тогда
			Прервать;
		КонецЕсли;
		
		МассивИзмененийЗаказов = ЗапроситьИзмененияПоAPICactus(Настройка, ДатаНачала);
		
		Если МассивИзмененийЗаказов.Количество() = 0 Тогда Продолжить КонецЕсли; // Если вернулся пустой массив либо ошибка, либо нет изменений
		
		тзВхДанные = ОбработатьМассивИзмененийЗаказов(МассивИзмененийЗаказов);
				
		структураДанныеПродажиВозвраты = ПодобратьНоменклатуру(тзВхДанные, Настройка, ЕстьОшибка);
		
		Если ЕстьОшибка Тогда
			Продолжить;
		КонецЕсли;
		
		СоздатьДокументыРеализации(структураДанныеПродажиВозвраты.Продажи, Настройка);
		
		СоздатьДокументыВозврата(структураДанныеПродажиВозвраты.Возвраты, Настройка);
		
		Если МассивНепроведенныхДокументов.Количество() > 0 И Настройка.ОтправлятьСведенияОбОшибкахНаПочту И ЗначениеЗаполнено(Настройка.Получатели) Тогда
			ОтправитьСообщениеНаПочту(Настройка);		
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры
#КонецОбласти

#Область РаботаСAPI
Функция ЗапроситьИзмененияПоAPICactus(Настройки, Дата)
	
	МассивЗаказовДетализированный = Новый Массив;         //В этот массив записываются детальная информация по заказам
	МассивЗаказов = Новый Массив;
	
	ЕстьОшибка = Ложь;
	ТекстОшибки = "";
	Токен = Настройки.Токен;
	
	НачСтраница 			= 0;
	ПервыйЗапрос 			= Истина;
	ВсегоКолвоСтрокВОтвете 	= 0;
	//КоличествоСтрокВЗапросе = 20;
	КоличествоСтрокВЗапросе = Настройки.КоличествоСтрокВЗапросе;
	
	Пока Истина Цикл
		
		Если НЕ ПервыйЗапрос И ВсегоКолвоСтрокВОтвете <= 0 Тогда
			Прервать;
		КонецЕсли;
		
		СтрокаЗапроса = "/api/lite/orders?updated_from=" + ЗаписатьДатуJSON(НачалоДня(Дата), ФорматДатыJSON.ISO, ВариантЗаписиДатыJSON.ЛокальнаяДата);
		СтрокаЗапроса = СтрокаЗапроса + "&filter_states=ORDER_INFO_DELIVERED,ORDER_INFO_PARTIALLY_DELIVERED_NOT_RETURNED,ORDER_INFO_PARTIALLY_DELIVERED_RETURNED,ORDER_INFO_RETURNED";
		СтрокаЗапроса = СтрокаЗапроса + "&page=" + Формат(НачСтраница, "ЧН=0; ЧГ=0") + "&size="+Формат(КоличествоСтрокВЗапросе, "ЧН=0; ЧГ=0");
		
		СтруктураОтветаСписокЗаказов = ВыполнитьЗапросСервисаAPI(СтрокаЗапроса, Неопределено, "GET", Токен, ЕстьОшибка, ТекстОшибки);
		
		//Обработка ошибки ответа API
		Если ЕстьОшибка Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			ЗаписатьОшибкуВЛогОшибокОбменаСВнешнимиСистемами(Настройки.ВнешняяСистема, Настройки.Организация, "Запрос изменений заказов API Cactus",,"Ошибка получения списка изменний заказов", ТекстОшибки);
			Возврат МассивЗаказовДетализированный;
		КонецЕсли;
		
		Если ПервыйЗапрос Тогда
			ВсегоКолвоСтрокВОтвете = СтруктураОтветаСписокЗаказов.Получить("recordsTotal");
			ПервыйЗапрос = Ложь;
		КонецЕсли;
		
		Если СтруктураОтветаСписокЗаказов["orders"] <> Неопределено Тогда
			мСписокВхЗаказов = СтруктураОтветаСписокЗаказов["orders"];
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивЗаказов, мСписокВхЗаказов);
		Иначе
			Возврат МассивЗаказовДетализированный;
		КонецЕсли;
		ВсегоКолвоСтрокВОтвете = ВсегоКолвоСтрокВОтвете - КоличествоСтрокВЗапросе;
		НачСтраница = НачСтраница + 1;
		
	КонецЦикла;
	
	//По полученному списку изменений запрашиваем детальную информацию о заказе
	Для Каждого Заказ из МассивЗаказов Цикл
	    СтрокаЗапросаПоОдномуЗаказу = "/api/lite/orders?id=" + Заказ["id"] + "&full_info=true";
		ДеталиЗаказа = ВыполнитьЗапросСервисаAPI(СтрокаЗапросаПоОдномуЗаказу, Неопределено, "GET", Токен, ЕстьОшибка, ТекстОшибки);
		Если ДеталиЗаказа["orders"] <> Неопределено Тогда
			Заказ = ДеталиЗаказа["orders"];
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивЗаказовДетализированный, Заказ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивЗаказовДетализированный;
	
КонецФункции

Процедура ВыполнитьЗапросКактусСформироватьДокументы()
	
   	
	
КонецПроцедуры

Функция Авторизоваться(Логин, Пароль, ЕстьОшибка, ТекстОшибки) Экспорт 
		
	СтруктураАвторизации = Новый Структура("login,password", Логин, Пароль);
	СтруктураТокен = Новый Структура("Токен, СрокДействияТокена");
	
	СтруктураJSON = ВыполнитьЗаписьJSON(СтруктураАвторизации, ЕстьОшибка, ТекстОшибки); 
	
	Если ЕстьОшибка Тогда
		Возврат СтруктураТокен;
	КонецЕсли;
	
	СтруктураОтвет = ВыполнитьЗапросСервисаAPI("/api/lite/auth", СтруктураJSON, "POST",,ЕстьОшибка,ТекстОшибки);
	
	Если ЕстьОшибка Тогда
		Возврат СтруктураТокен;
	КонецЕсли;

	Если СтруктураОтвет.Получить("success") = Истина Тогда
		Токен = структураОтвет.Получить("access_token");
		КоличествоСекунд = СтруктураОтвет.Получить("expires_in");
		СрокДействияТокена = ТекущаяДатаСеанса()+КоличествоСекунд;
		СтруктураТокен.Токен = Токен;
		СтруктураТокен.СрокДействияТокена = СрокДействияТокена; 
	Иначе
		Ошибки = структураОтвет.Получить("errors");
		ЕстьОшибка = Истина;
		Для каждого ОшибкаОтвет из Ошибки Цикл
			ТекстОшибки = ТекстОшибки + "Код ошибки " + ОшибкаОтвет.Получить("code") + " " + ОшибкаОтвет.Получить("message") + Символы.ПС;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураТокен;
	
КонецФункции

Функция ВыполнитьЗапросСервисаAPI(РесурсЗапроса, ТекстЗапроса, ТипЗапроса="POST", Токен = "", ЕстьОшибка = Ложь, ТекстОшибки = "") Экспорт
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json; charset=""utf-8""");
	ЗаголовокHTTP.Вставить("Authorization", "Bearer "+Токен);
	
	Сервер =  "app.kak2c.ru";
	//Сервер = "app-test.kak2c.ru";  //Тестовый
	
	Попытка
		Соединение = Новый HTTPСоединение(Сервер);
		ЗапросHTTP = Новый HTTPЗапрос(РесурсЗапроса, ЗаголовокHTTP);

		Если ТипЗапроса = "GET" Тогда
			ЗапросHTTP.УстановитьТелоИзСтроки(ТекстЗапроса);
			ОтветHTTP = Соединение.Получить(ЗапросHTTP);
		Иначе // POST
			ЗапросHTTP.УстановитьТелоИзСтроки(ТекстЗапроса);
			ОтветHTTP = Соединение.ОтправитьДляОбработки(ЗапросHTTP);	
		КонецЕсли;
				
	Исключение
		ТекстОшибки = "Ошибка вызова веб-сервиса: "+ОписаниеОшибки();
		ЕстьОшибка = Истина;
		Возврат Неопределено;
	КонецПопытки;
	
	Если ОтветHTTP.КодСостояния <> 200 Тогда
		ТекстОшибки = "Ошибка вызова веб-сервиса: "+ОтветHTTP.ПолучитьТелоКакСтроку();
		ЕстьОшибка = Истина;
		Возврат Неопределено;
	КонецЕсли;

	ТелоОтветаСервиса = ОтветHTTP.ПолучитьТелоКакСтроку();
	
	СтруктураОтвета = ВыполнитьЧтениеJSON(ТелоОтветаСервиса, ЕстьОшибка, ТекстОшибки);
	
	Возврат СтруктураОтвета;
	
КонецФункции
#КонецОбласти

#Область ОбработкаДанных
Функция ОбработатьМассивИзмененийЗаказов(МассивВхДаных)
	
	ТЗ = СоздатьТзДляВходящихДанных();
	
	Для Каждого строкаМассива из МассивВхДаных Цикл
		
		//Заказы от маркетплейсов не учитываются
		Если строкаМассива["isMarketplaceOrder"] = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		НомерЗаказа = строкаМассива["id"];
		ДатаЗаказа = НачалоДня(ПреобразоватьКДатеВремени(строкаМассива["date"]));
		Для Каждого СтрокаЗаказа Из строкаМассива["items"] Цикл
			//Товары заказа
			Если СтрокаЗаказа["skuType"] = "SKU" Тогда
				
				ДанныеОСтатусеПозиции = СтрокаЗаказа["itemAmountState"];
				
				НовСтр = ТЗ.Добавить();
				НовСтр.НомерЗаказа = НомерЗаказа;
				НовСтр.ДатаЗаказа = ДатаЗаказа;
				НовСтр.Артикул					= СтрокаЗаказа["article"];
				НовСтр.Штрихкод		 			= СтрокаЗаказа["barcode"];
				//НовСтр.НазваниеТовара 			= СтрокаЗаказа["name"];
				НовСтр.ЦенаПродажи				= СтрокаЗаказа["price"];
				НовСтр.Количество 				= СтрокаЗаказа["quantity"];
				НовСтр.НомерСтрокиВЗаказе   	= СтрокаЗаказа["num"];
				НовСтр.АртикулРазмер 			= СтрокаЗаказа["variantExtId"];
				НовСтр.КоличествоВыдано			= ДанныеОСтатусеПозиции["amountDELIVERED"];
				НовСтр.КоличествоВозвращено		= ДанныеОСтатусеПозиции["amountRETURNED"] + ДанныеОСтатусеПозиции["amountRETURNED_AS_CLAIMS"] + ДанныеОСтатусеПозиции["amountRETURNED_DEFECTIVE"];
				НовСтр.КоличествоДоставлено		= ДанныеОСтатусеПозиции["amountSHIPPED"];
			//Услуга доставки. если цена > 0, то включаем строки в таблицу	
			ИначеЕсли СтрокаЗаказа["skuType"] = "SERVICE" Тогда
				
				Если СтрокаЗаказа["price"] <> 0 Тогда
					ЕстьДоставка = Истина;                          			
					НовСтр = ТЗ.Добавить();
					НовСтр.НомерЗаказа        = НомерЗаказа;
					НовСтр.ДатаЗаказа         = ДатаЗаказа;
					НовСтр.Количество 	      = СтрокаЗаказа["quantity"];
					НовСтр.ЦенаПродажи	      = СтрокаЗаказа["price"];
					НовСтр.НомерСтрокиВЗаказе = СтрокаЗаказа["num"];
					НовСтр.ЕстьДоставка       = ЕстьДоставка;
				КонецЕсли;  
				
			КонецЕсли;
			
		КонецЦикла;
		
		//Заполняем дату доставки
		Если строкаМассива["delivery"] <> Неопределено Тогда
			ИнформацияДоставка = строкаМассива["delivery"];
			ДатаДоставки = ПреобразоватьКДатеВремени(ИнформацияДоставка["actualDeliveryDate"]);
			Если ЗначениеЗаполнено(ДатаДоставки) Тогда
				мСтрокиТЗ = ТЗ.НайтиСтроки(новый Структура("ДатаЗаказа, НомерЗаказа", ДатаЗаказа, НомерЗаказа));
				Для Каждого СтрокаТЗ из мСтрокиТЗ Цикл
					СтрокаТЗ.ДатаПродажи = ДатаДоставки;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		//Обрабатываем Возвраты
		Если строкаМассива["returns"] <> Неопределено Тогда
			мВозвратыЗаказа = строкаМассива["returns"];
			Для каждого элВозврата из мВозвратыЗаказа Цикл
				ДатаВозврата = ПреобразоватьКДатеВремени(элВозврата["date"]);
				мСтрокВозвраты = элВозврата["items"];
				Для каждого СтрокаВозврата из мСтрокВозвраты Цикл
					Если СтрокаВозврата["skuType"] = "SKU" Тогда
						НомерСтрокиВЗаказе = СтрокаВозврата["num"];
						Штрихкод = СтрокаВозврата["barcode"];
						мСтрокиТЗ = ТЗ.НайтиСтроки(Новый Структура("ДатаЗаказа, НомерЗаказа, НомерСтрокиВЗаказе, Штрихкод", ДатаЗаказа, НомерЗаказа, НомерСтрокиВЗаказе, Штрихкод));
						Для Каждого строкаТЗ из мСтрокиТЗ Цикл
							СтрокаТЗ.ДатаВозврата = ДатаВозврата;
						КонецЦикла;
					КонецЕсли;						
				КонецЦикла;
			КонецЦикла
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТЗ
	
КонецФункции

Функция ПодобратьНоменклатуру(вхТЗ, Настройки, ЕстьОшибка = Ложь)
	
	ПредопрЗначения = Настройки.ПредопределенныеЗначения;
	Если ПредопрЗначения.Свойство("НоменклатураТранспортныеУслуги") = Неопределено Тогда
		ТекстСообщения = "Для организации "+Настройки.Организация+" не указано значение номенклатуры для отражения доставки";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		ЗаписатьОшибкуВЛогОшибокОбменаСВнешнимиСистемами(Настройки.ВнешняяСистема, Настройки.Организация,"Поиск номенлкатуры",,"Не указана номенклатура для отражения услуги доставки", ТекстСообщения);
		ЕстьОшибка = Истина;
		Возврат Неопределено;
	Иначе
		НоменклатураТранспортныеУслуги = ПредопрЗначения.НоменклатураТранспортныеУслуги;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТЗ", вхТЗ);
	Запрос.УстановитьПараметр("УслугаДоставки", НоменклатураТранспортныеУслуги);
	Запрос.Текст = ПолучитьТекстЗапросаПодборНоменклатуры();
	Результат = Запрос.ВыполнитьПакет();
	НенайденнаяНоменклатура = Результат.Получить(Результат.Количество()-3).Выбрать();
	
	Сч = 1;
	Пока НенайденнаяНоменклатура.Следующий() Цикл
		//Если Сч = 5 Тогда Прервать КонецЕсли; //ТЕСТ
		ТекстСообщения = "штрихкод: "+НенайденнаяНоменклатура.Штрихкод+", артикул: "+НенайденнаяНоменклатура.Артикул+", артикул и размер:"+НенайденнаяНоменклатура.АртикулРазмер;
		ЗаписатьОшибкуВЛогОшибокОбменаСВнешнимиСистемами(Настройки.ВнешняяСистема, Настройки.Организация, "Поиск номенклатуры", Сч, "Не найдена номеклатура",ТекстСообщения);
		Сч = Сч + 1;
	КонецЦикла;
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Продажи", Результат.Получить(Результат.Количество()-2));
	СтруктураОтвета.Вставить("Возвраты", Результат.Получить(Результат.Количество()-1)); 
	
	Возврат СтруктураОтвета;
	
КонецФункции

Процедура СоздатьДокументыРеализации(РезультатЗапроса, Настройки)
	
	//Заполнение структуры шапки документа
	СтруктураШапкиДокумента = Новый Структура;
	СтруктураШапкиДокумента.Вставить("Организация", Настройки.Организация);
	СтруктураШапкиДокумента.Вставить("Автор", ПараметрыСеанса.ТекущийПользователь);
	СтруктураШапкиДокумента.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
	
	Предопределенные = Настройки.ПредопределенныеЗначения;
	
	Для Каждого ПредопрЗнач из Предопределенные Цикл
		СтруктураШапкиДокумента.Вставить(ПредопрЗнач.Ключ, ПредопрЗнач.Значение);
	КонецЦикла;
	
	Комментарий = "Отражение продаж kak2c за ";
	ГраницаЗапрета = Настройки.ДатаЗапретаРедактирования;
	
	//Обработка результата запороса
	ВыборкаЗаказ = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаЗаказ.Следующий() Цикл
		НомерЗаказа = ВыборкаЗаказ.НомерЗаказа;	
		ВыборкаДатаПродажи = ВыборкаЗаказ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
		Пока ВыборкаДатаПродажи.Следующий() Цикл
			ДатаПродажи = ВыборкаДатаПродажи.ДатаПродажи;
			ВыборкаДокументРеализации = ВыборкаДатаПродажи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаДокументРеализации.Следующий() Цикл
				ДокументРеализации = ВыборкаДокументРеализации.ДокументРеализации;
				//Если найден документ реализации и дата документа не находится в закрытом периоде, то производим корректировку
				Если ЗначениеЗаполнено(ДокументРеализации) Тогда
					ДатаРеализации = ДокументРеализации.Дата;
					Если НачалоДня(ДатаРеализации) <= ГраницаЗапрета Тогда
						//Создаем документ РТиУ
						ДатаРеализации = КонецДня(ГраницаЗапрета+86400);
						тзДанныеДляРС = ПолучитьПустуюТзДляДобавленияВРС();
						ДокументОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
						ЗаполнитьЗначенияСвойств(ДокументОбъект, СтруктураШапкиДокумента);
						ДокументОбъект.Комментарий = Комментарий + Формат(ДатаПродажи,"ДЛФ=Д")+" по заказу "+НомерЗаказа;
						ДокументОбъект.Дата = ДатаРеализации;
						тчТовары = ДокументОбъект.Товары;
						ВыборкаТовары = ВыборкаДокументРеализации.Выбрать();
						Пока ВыборкаТовары.Следующий() Цикл
							СтрокаТчТовары = тчТовары.Добавить();
							нСтрокаДанныхРС = тзДанныеДляРС.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаТчТовары, ВыборкаТовары);
							СтрокаТчТовары.КоличествоУпаковок = ВыборкаТовары.НеобходимоРеализовать;
							ЗаполнитьСтрокуДанныеРС(нСтрокаДанныхРС, ВыборкаТовары, СтрокаТчТовары, Настройки.ВнешняяСистема); 
						КонецЦикла;
						ПересчитатьТабличнуюЧасть(ДокументОбъект);
						
						ЗаписатьДокумент(ДокументОбъект);
						тзДанныеДляРС.ЗаполнитьЗначения(ДокументОбъект.Ссылка, "Документ");
						//Пишем в РС гф_ДокументыНаОснованииВнешнихЗаказов
						ЗаписатьДанныеРсДокументыНаОснованииВнешнихЗаказов(тзДанныеДляРС);
						//Дополняем ТЧ Товары	
					Иначе
						ДокументОбъект = ДокументРеализации.ПолучитьОбъект();
						тзДанныеДляРС = ПолучитьПустуюТзДляДобавленияВРС();
						тчТовары = ДокументОбъект.Товары;
						ВыборкаТовары = ВыборкаДокументРеализации.Выбрать();
						Пока ВыборкаТовары.Следующий() Цикл 
							//нСтрокаДанныхРС = тзДанныеДляРС.Добавить();
							Отбор = Новый Структура("Номенклатура, Характеристика, НомерСтроки", ВыборкаТовары.Номенклатура, ВыборкаТовары.Характеристика, ВыборкаТовары.НомерСтрокиДокумента);
							мСтрокТовары = тчТовары.НайтиСтроки(Отбор);
							Если мСтрокТовары.Количество() > 0 Тогда
								СтрокаТчТовары = мСтрокТовары[0];
								СтрокаТчТовары.КоличествоУпаковок = СтрокаТчТовары.КоличествоУпаковок + ВыборкаТовары.НеобходимоРеализовать;
								СтрокаТчТовары.Количество = СтрокаТчТовары.КоличествоУпаковок + ВыборкаТовары.НеобходимоРеализовать;
								ЗаполнитьСтрокуДанныеРС(нСтрокаДанныхРС, ВыборкаТовары, СтрокаТчТовары, Настройки.ВнешняяСистема); 
							Иначе
								СтрокаТчТовары = тчТовары.Добавить();
								ЗаполнитьЗначенияСвойств(СтрокаТчТовары, ВыборкаТовары);
								СтрокаТчТовары.КоличествоУпаковок = ВЫборкаТовары.НеобходимоРеализовать;
								СтрокаТчТовары.Количество = ВЫборкаТовары.НеобходимоРеализовать;
								СтрокаТчТовары.Склад = ДокументОбъект.Склад;
								ЗаполнитьСтрокуДанныеРС(нСтрокаДанныхРС, ВыборкаТовары, СтрокаТчТовары, Настройки.ВнешняяСистема); 
							КонецЕсли;	
						КонецЦикла;
						ПересчитатьТабличнуюЧасть(ДокументОбъект);
						
						ЗаписатьДокумент(ДокументОбъект);
						тзДанныеДляРС.ЗаполнитьЗначения(ДокументОбъект.Ссылка, "Документ");
						//Пишем в РС гф_ДокументыНаОснованииВнешнихЗаказов
						ЗаписатьДанныеРсДокументыНаОснованииВнешнихЗаказов(тзДанныеДляРС);
						
					КонецЕсли;
					//Если документ не найден, создаем новый документ	
				Иначе
					//Проверка на границу периода
					Если ДатаПродажи <= ГраницаЗапрета Тогда
						ДатаРеализации = КонецДня(ГраницаЗапрета+86400);
					Иначе
						ДатаРеализации = КонецДня(ДатаПродажи);
					КонецЕсли;
					ДокументОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
					ЗаполнитьЗначенияСвойств(ДокументОбъект, СтруктураШапкиДокумента);
					ДокументОбъект.Дата = ДатаРеализации;
					ДокументОбъект.Комментарий = Комментарий+Формат(ДатаПродажи,"ДЛФ=Д")+" по заказу "+НомерЗаказа;
					тзДанныеДляРС = ПолучитьПустуюТзДляДобавленияВРС();
					тчТовары = ДокументОбъект.Товары;
					ВыборкаТовары = ВыборкаДокументРеализации.Выбрать();
					Пока ВыборкаТовары.Следующий() Цикл
						СтрокаТчТовары = тчТовары.Добавить();
						нСтрокаДанныхРС = тзДанныеДляРС.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТчТовары, ВыборкаТовары);
						СтрокаТчТовары.КоличествоУпаковок = ВыборкаТовары.НеобходимоРеализовать;
						СтрокаТчТовары.Количество = ВыборкаТовары.НеобходимоРеализовать;
						СтрокаТчТовары.Склад = ДокументОбъект.Склад;
						ЗаполнитьСтрокуДанныеРС(нСтрокаДанныхРС, ВыборкаТовары, СтрокаТчТовары, Настройки.ВнешняяСистема);
					КонецЦикла;
					ПересчитатьТабличнуюЧасть(ДокументОбъект);
					
					ЗаписатьДокумент(ДокументОбъект);
					тзДанныеДляРС.ЗаполнитьЗначения(ДокументОбъект.Ссылка, "Документ");
					//Пишем в РС гф_ДокументыНаОснованииВнешнихЗаказов
					ЗаписатьДанныеРсДокументыНаОснованииВнешнихЗаказов(тзДанныеДляРС);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	
	
КонецПроцедуры

Процедура СоздатьДокументыВозврата(РезультатЗапроса, Настройки)

	СтруктураШапкиДокумента = Новый Структура;
	СтруктураШапкиДокумента.Вставить("Организация", Настройки.Организация);
	СтруктураШапкиДокумента.Вставить("Автор", ПараметрыСеанса.ТекущийПользователь);
	СтруктураШапкиДокумента.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента);
	
	Предопределенные = Настройки.ПредопределенныеЗначения;
	
	Для Каждого ПредопрЗнач из Предопределенные Цикл
		СтруктураШапкиДокумента.Вставить(ПредопрЗнач.Ключ, ПредопрЗнач.Значение);
	КонецЦикла;
	
	Комментарий = "Отражение возвратов kak2c за ";
	ГраницаЗапрета = Настройки.ДатаЗапретаРедактирования;
	
	ВыборкаЗаказ = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаказ.Следующий() Цикл
		НомерЗаказа = ВыборкаЗаказ.НомерЗаказа;
		ВыборкаДата = ВыборкаЗаказ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДата.Следующий() Цикл
			ДатаВозврата = ВыборкаДата.ДатаВозврата;
			ВыборкаДокументВозврата = ВыборкаДата.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаДокументВозврата.Следующий() Цикл
				ТекстСообщенияДопСвойства = "";
				ДокументВозврата = ВыборкаДокументВозврата.ДокументВозврата;
				Если ЗначениеЗаполнено(ДокументВозврата) Тогда
					ДатаДокВозврата = ДокументВозврата.Дата;
					//Если ранее созданный документ находится в закрытом периоде, то создаем новый на ближайшую открытую дату
					Если НачалоДня(ДатаДокВозврата) <= ГраницаЗапрета Тогда
						//Создаем документ Возвтра товара от клиета
						ДатаДокВозврата = КонецДня(ГраницаЗапрета+86400);
						тзДанныеДляРС = ПолучитьПустуюТзДляДобавленияВРС();
						ДокументОбъект = Документы.ВозвратТоваровОтКлиента.СоздатьДокумент();
						ЗаполнитьЗначенияСвойств(ДокументОбъект, СтруктураШапкиДокумента);
						ДокументОбъект.Комментарий = Комментарий + Формат(ДатаВозврата, "ДЛФ=Д")+" по заказу "+НомерЗаказа;
						ДокументОбъект.Дата = ДатаДокВозврата;
						тчТовары = ДокументОбъект.Товары;
						ВыборкаТовары = ВыборкаДокументВозврата.Выбрать();
						Пока ВыборкаТовары.Следующий() Цикл
							СтрокаТчТовары = тчТовары.Добавить();
							нСтрокаДанныхРС = тзДанныеДляРС.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаТчТовары, ВыборкаТовары);
							//СтрокаТчТовары.АналитикаУчетаНоменклатуры
							СтрокаТчТовары.СпособОпределенияСебестоимости = Перечисления.СпособыОпределенияСебестоимости.ИзДокументаПродажи;
							СтрокаТчТовары.КоличествоУпаковок = ВыборкаТовары.НеобходимоВернуть;
							СтрокаТчТовары.Количество = ВыборкаТовары.НеобходимоВернуть;
							ДокРеализацииНайден = Ложь;
							НайтиРеализациюТоваровУслугСкорректироватьСтрокуВозврата(СтрокаТчТовары, ВыборкаТовары, Настройки, ДокРеализацииНайден, ТекстСообщенияДопСвойства);
							Если Не ДокРеализацииНайден Тогда
								ДокументОбъект.ДополнительныеСвойства.Вставить("Проводить", Ложь);
							КонецЕсли;
							ЗаполнитьСтрокуДанныеРС(нСтрокаДанныхРС, ВыборкаТовары, СтрокаТчТовары, Настройки.ВнешняяСистема);
						КонецЦикла;
						ПересчитатьТабличнуюЧасть(ДокументОбъект);
						
						ДокументОбъект.ДополнительныеСвойства.Вставить("ТекстСообщения", ТекстСообщенияДопСвойства);
						
						ЗаписатьДокумент(ДокументОбъект);
						тзДанныеДляРС.ЗаполнитьЗначения(ДокументОбъект.Ссылка, "Документ");
						//Пишем в РС гф_ДокументыНаОснованииВнешнихЗаказов
						ЗаписатьДанныеРсДокументыНаОснованииВнешнихЗаказов(тзДанныеДляРС);
						
					Иначе
						ДокументОбъект = ДокументВозврата.ПолучитьОбъект();
						тзДанныеДляРС = ПолучитьПустуюТзДляДобавленияВРС();
						тчТовары = ДокументОбъект.Товары;
						ВыборкаТовары = ВыборкаДокументВозврата.Выбрать();
						Пока ВыборкаТовары.Следующий() Цикл 
							нСтрокаДанныхРС = тзДанныеДляРС.Добавить();
							Отбор = Новый Структура("Номенклатура, Характеристика, НомерСтроки", ВыборкаТовары.Номенклатура, ВыборкаТовары.Характеристика, ВыборкаТовары.НомерСтрокиДокумента);
							мСтрокТовары = тчТовары.НайтиСтроки(Отбор);
							Если мСтрокТовары.Количество() > 0 Тогда
								СтрокаТчТовары = мСтрокТовары[0];
								СтрокаТчТовары.КоличествоУпаковок = СтрокаТчТовары.КоличествоУпаковок + ВыборкаТовары.НеобходимоВернуть;
								СтрокаТчТовары.Количество = СтрокаТчТовары.КоличествоУпаковок + ВыборкаТовары.НеобходимоВернуть;
								ЗаполнитьСтрокуДанныеРС(нСтрокаДанныхРС, ВыборкаТовары, СтрокаТчТовары, Настройки.ВнешняяСистема); 
							Иначе
								СтрокаТчТовары = тчТовары.Добавить();
								ЗаполнитьЗначенияСвойств(СтрокаТчТовары, ВыборкаТовары);
								СтрокаТчТовары.КоличествоУпаковок = ВЫборкаТовары.НеобходимоВернуть;
								СтрокаТчТовары.Количество = ВЫборкаТовары.НеобходимоВернуть;
								ДокРеализацииНайден = Ложь;
								НайтиРеализациюТоваровУслугСкорректироватьСтрокуВозврата(СтрокаТчТовары, ВыборкаТовары, Настройки, ДокРеализацииНайден, ТекстСообщенияДопСвойства);
								Если Не ДокРеализацииНайден Тогда
									ДокументОбъект.ДополнительныеСвойства.Вставить("Проводить", Ложь);
								КонецЕсли;
								ЗаполнитьСтрокуДанныеРС(нСтрокаДанныхРС, ВыборкаТовары, СтрокаТчТовары, Настройки.ВнешняяСистема); 
							КонецЕсли;	
						КонецЦикла;
						ПересчитатьТабличнуюЧасть(ДокументОбъект);
						
						ДокументОбъект.ДополнительныеСвойства.Вставить("ТекстСообщения", ТекстСообщенияДопСвойства);
						
						ЗаписатьДокумент(ДокументОбъект);
						тзДанныеДляРС.ЗаполнитьЗначения(ДокументОбъект.Ссылка, "Документ");
						//Пишем в РС гф_ДокументыНаОснованииВнешнихЗаказов
						ЗаписатьДанныеРсДокументыНаОснованииВнешнихЗаказов(тзДанныеДляРС);
					КонецЕсли;
				Иначе
					//Проверка на границу периода
					Если ДатаВозврата <= ГраницаЗапрета Тогда
						ДатаДокВозврата = КонецДня(ГраницаЗапрета+86400);
					Иначе
						ДатаДокВозврата = КонецДня(ДатаВозврата);
					КонецЕсли;
					тзДанныеДляРС = ПолучитьПустуюТзДляДобавленияВРС();
					ДокументОбъект = Документы.ВозвратТоваровОтКлиента.СоздатьДокумент();
					ЗаполнитьЗначенияСвойств(ДокументОбъект, СтруктураШапкиДокумента);
					ДокументОбъект.Комментарий = Комментарий + Формат(ДатаВозврата, "ДЛФ=Д")+" по заказу "+НомерЗаказа;
					ДокументОбъект.Дата = ДатаДокВозврата;
					тчТовары = ДокументОбъект.Товары;
					ВыборкаТовары = ВыборкаДокументВозврата.Выбрать();
					Пока ВыборкаТовары.Следующий() Цикл
						СтрокаТчТовары = тчТовары.Добавить();
						нСтрокаДанныхРС = тзДанныеДляРС.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТчТовары, ВыборкаТовары);
						//СтрокаТчТовары.АналитикаУчетаНоменклатуры
						СтрокаТчТовары.СпособОпределенияСебестоимости = Перечисления.СпособыОпределенияСебестоимости.ИзДокументаПродажи;
						СтрокаТчТовары.КоличествоУпаковок = ВыборкаТовары.НеобходимоВернуть;
						СтрокаТчТовары.Количество = ВыборкаТовары.НеобходимоВернуть;
						ДокРеализацииНайден = Ложь;
						НайтиРеализациюТоваровУслугСкорректироватьСтрокуВозврата(СтрокаТчТовары, ВыборкаТовары, Настройки, ДокРеализацииНайден, ТекстСообщенияДопСвойства);
						Если Не ДокРеализацииНайден Тогда
							ДокументОбъект.ДополнительныеСвойства.Вставить("Проводить", Ложь);
						КонецЕсли;
						ЗаполнитьСтрокуДанныеРС(нСтрокаДанныхРС, ВыборкаТовары, СтрокаТчТовары, Настройки.ВнешняяСистема);
					КонецЦикла;
					ПересчитатьТабличнуюЧасть(ДокументОбъект);  
					
					ДокументОбъект.ДополнительныеСвойства.Вставить("ТекстСообщения", ТекстСообщенияДопСвойства);
					
					ЗаписатьДокумент(ДокументОбъект);
					тзДанныеДляРС.ЗаполнитьЗначения(ДокументОбъект.Ссылка, "Документ");
					//Пишем в РС гф_ДокументыНаОснованииВнешнихЗаказов
					ЗаписатьДанныеРсДокументыНаОснованииВнешнихЗаказов(тзДанныеДляРС);
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	
КонецПроцедуры
#КонецОбласти

#Область Служебные
Процедура ПроверитьСрокДействияОбновитьТокен(Настройки, ЕстьОшибка = Ложь)
	
	//Если дата указанная в СрокДействияТокена больше или равна текущей дате сеанса плюс 10 минут,
	//то обновление не требуется
	Если Настройки.СрокДействияТокена >= ТекущаяДатаСеанса()+60*10 Тогда
		//никакие дальше действия не требуются
		Возврат;
	КонецЕсли;
	
	ЕстьОшибка = Ложь;
	ТекстОшибки = "";
	
	Если НЕ ЗначениеЗаполнено(Настройки.Логин) ИЛИ НЕ ЗначениеЗаполнено(Настройки.Пароль) Тогда
		ЕстьОшибка = Истина;
		ТекстОшибки = "Не заданы или не заполнены параметры авторизации (Логин и Пароль) в настройках доступа";
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		ЗаписатьОшибкуВЛогОшибокОбменаСВнешнимиСистемами(Настройки.ВнешняяСистема,Настройки.Организация,"Получения настроек",,"Ошибка получения настроек",ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	СтруктураОтветаТокен = Авторизоваться(Настройки.Логин, Настройки.Пароль, ЕстьОшибка, ТекстОшибки);
	
	//Ошибка получения токена дальнейшие действия прерываются
	Если ЕстьОшибка Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		ЗаписатьОшибкуВЛогОшибокОбменаСВнешнимиСистемами(Настройки.ВнешняяСистема,Настройки.Организация,"Запрос Токена",,"Ошибка запроса Токена",ТекстОшибки); 
	 	Возврат;
	КонецЕсли;
	
	//При успешном обновлении Токена записываем данные в текущие настройки, а также обновляем запись в справочнике ИнтеграцияСВнешнимиСистемами
	Настройки.Токен = СтруктураОтветаТокен.Токен;
	Настройки.СрокДействияТокена = СтруктураОтветаТокен.СрокДействияТокена;
	
	спрОбъект = Настройки.Ссылка.ПолучитьОбъект();
	тчНастройкиДоступа = спрОбъект.НастройкиДоступа;
	//Ищем настройку Токен 
	мСтрокТокен = тчНастройкиДоступа.НайтиСтроки(Новый Структура("Параметр", "Токен"));
	Если мСтрокТокен.Количество() > 0 Тогда
		СтрТокен = мСтрокТокен[0];
		СтрТокен.Значение = Настройки.Токен;
	Иначе
		СтрТокен = тчНастройкиДоступа.Добавить();
		СтрТокен.Параметр = "Токен";
		СтрТокен.Значение = Настройки.Токен;
	КонецЕсли;
	
	//Ищем настройку СрокДействияТокена
	мСтрокСрокДействия = тчНастройкиДоступа.НайтиСтроки(Новый Структура("Параметр", "СрокДействияТокена"));
	Если мСтрокСрокДействия.Количество() > 0 Тогда
		СтрСрок = мСтрокСрокДействия[0];
		СтрСрок.Значение = Настройки.СрокДействияТокена;
	Иначе
		СтрСрок = тчНастройкиДоступа.Добавить();
		СтрСрок.Параметр = "СрокДействияТокена";
		СтрСрок.Значение = Настройки.СрокДействияТокена;
	КонецЕсли;
	
	Попытка 
		спрОбъект.Записать();
	Исключение
		ТекстОшибки = "Ошибка записи настроек авторизации в справочник ""Настройки интеграции с внешними системами"" "+ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки + Символы.ПС+"Полученный токен будет использован только в текущей сессии");
		ЗаписатьОшибкуВЛогОшибокОбменаСВнешнимиСистемами(Настройки.ВнешняяСистема,Настройки.Организация,"Запись в справочник Настройки интеграции с внешиними системами",,"Ошибка записи настроек", ТекстОшибки);
	КонецПопытки;
	
	
	
КонецПроцедуры

Функция ЗагрузитьНастройкиОбработки()
	
	ТЗ = ПолучитьПустуюТзНастроек();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВнешняяСистема", Перечисления.гф_ВнешниеСистемы.Cactus);
	Запрос.УстановитьПараметр("ОтборПоОрганизации", ЗначениеЗаполнено(Организация));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = "ВЫБРАТЬ
	               |	гф_НастройкиИнтеграцииСВнешнимиСистемами.Ссылка КАК Ссылка,
	               |	гф_НастройкиИнтеграцииСВнешнимиСистемами.Организация КАК Организация,
	               |	гф_НастройкиИнтеграцииСВнешнимиСистемами.ВнешняяСистема КАК ВнешняяСистема,
	               |	гф_НастройкиИнтеграцииСВнешнимиСистемами.НастройкиДоступа.(
	               |		Параметр КАК Параметр,
	               |		Значение КАК Значение
	               |	) КАК НастройкиДоступа,
	               |	гф_НастройкиИнтеграцииСВнешнимиСистемами.ПредопределенныеЗначения.(
	               |		Наименование КАК Наименование,
	               |		Значение КАК Значение
	               |	) КАК ПредопределенныеЗначения
	               |ИЗ
	               |	Справочник.гф_НастройкиИнтеграцииСВнешнимиСистемами КАК гф_НастройкиИнтеграцииСВнешнимиСистемами
	               |ГДЕ
	               |	гф_НастройкиИнтеграцииСВнешнимиСистемами.ВнешняяСистема = &ВнешняяСистема
	               |	И ВЫБОР
	               |			КОГДА &ОтборПоОрганизации
	               |				ТОГДА гф_НастройкиИнтеграцииСВнешнимиСистемами.Организация = &Организация
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |	И гф_НастройкиИнтеграцииСВнешнимиСистемами.Использовать";
	Выборка = Запрос.Выполнить().Выбрать();
	
	КолонкиТзНастройки = ТЗ.Колонки;
	
	Пока Выборка.Следующий() Цикл
		нСтрока = ТЗ.Добавить();
		нСтрока.Организация = Выборка.Организация;
		нСтрока.ВнешняяСистема = Выборка.ВнешняяСистема;
		
		тзНастройкиДоступа = Выборка.НастройкиДоступа.Выгрузить();
		тзЗначенияДляЗаполнения = Выборка.ПредопределенныеЗначения.Выгрузить();
		
		Для каждого НастройкаДоступа из тзНастройкиДоступа Цикл
			Параметр = СокрЛП(СтрЗаменить(НастройкаДоступа.Параметр, " ",""));
			Если КолонкиТзНастройки.Найти(Параметр) <> Неопределено Тогда
				Если КолонкиТзНастройки[Параметр].ТипЗначения = Тип("Дата") Тогда
					Попытка 
						Значение = Дата(НастройкаДоступа.Значение);
					Исключение
						Значение = Дата(1,1,1);
					   	ОбщегоНазначения.СообщитьПользователю("Для параметра авторизации "+Параметр+"ошибка преобразования значения "+НастройкаДоступа.Значение+" в тип Дата");
					КонецПопытки;
				ИначеЕсли КолонкиТзНастройки[Параметр].ТипЗначения = Тип("Число") Тогда
					Попытка 
						Значение = Число(НастройкаДоступа.Значение);
					Исключение
						Значение = 0;
						ОбщегоНазначения.СообщитьПользователю("Для параметра авторизации "+Параметр+"ошибка преобразования значения "+НастройкаДоступа.Значение+" в тип Число");
					КонецПопытки;
				Иначе
					Значение = НастройкаДоступа.Значение;
				КонецЕсли;
				нСтрока[Параметр] = Значение;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураПредопределенные = Новый Структура;
		Для каждого стрЗначение из тзЗначенияДляЗаполнения Цикл
			ИмяЗначения = стрЗначение.Наименование;
			КлючСтруктуры = СокрЛП(СтрЗаменить(ИмяЗначения, " ",""));
			Если КолонкиТзНастройки.Найти(КлючСтруктуры) <> Неопределено Тогда
				Попытка
					нСтрока[КлючСтруктуры] = стрЗначение.Значение;
					Продолжить;
				Исключение
					ТекстОшибки = "Ошибка установки параметра """+ИмяЗначения+""" " + ОписаниеОшибки();
				КонецПопытки;
			КонецЕсли;
			СтруктураПредопределенные.Вставить(КлючСтруктуры, стрЗначение.Значение);
        КонецЦикла;
		//Получение границы запрета редактирования данных
		ДатаГраницыЗапрета = ПолучитьДатуЗапрета(Выборка.Организация, ПараметрыСеанса.ТекущийПользователь);
		нСтрока.ДатаЗапретаРедактирования = ДатаГраницыЗапрета;
		нСтрока.ПредопределенныеЗначения = СтруктураПредопределенные;
		нСтрока.Ссылка = Выборка.Ссылка;
 	КонецЦикла;
	
	Возврат ТЗ;
	
КонецФункции

Функция ПолучитьПустуюТзНастроек()
	
	мТиповПолучатели = Новый Массив;
	мТиповПолучатели.Добавить(Тип("Строка"));
	мТиповПолучатели.Добавить(Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты"));
	
	ТЗ = Новый ТаблицаЗначений;
	КолонкиТЗ = ТЗ.Колонки;
	КолонкиТЗ.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.гф_НастройкиИнтеграцииСВнешнимиСистемами"));
	КолонкиТЗ.Добавить("Организация", Новый ОписаниеТипов("СправочникССылка.Организации"));
	КолонкиТЗ.Добавить("ВнешняяСистема", Новый ОписаниеТипов("ПеречислениеСсылка.гф_ВнешниеСистемы"));
	КолонкиТЗ.Добавить("Логин", ОбщегоНазначения.ОписаниеТипаСтрока(300));
	КолонкиТЗ.Добавить("Пароль", ОбщегоНазначения.ОписаниеТипаСтрока(300)); 
	КолонкиТЗ.Добавить("Токен", ОбщегоНазначения.ОписаниеТипаСтрока(300));
	КолонкиТЗ.Добавить("СрокДействияТокена", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)); 
	КолонкиТЗ.Добавить("КоличествоСтрокВЗапросе", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	КолонкиТЗ.Добавить("ДатаЗапретаРедактирования", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	КолонкиТЗ.Добавить("ОтправлятьСведенияОбОшибкахНаПочту", Новый ОписаниеТипов("Булево"));
	КолонкиТЗ.Добавить("Получатели", Новый ОписаниеТипов(мТиповПолучатели));
	КолонкиТЗ.Добавить("ПредопределенныеЗначения", Новый ОписаниеТипов("Структура"));
	
	Возврат ТЗ;
	
КонецФункции

Функция ПолучитьДатуЗапрета(Организация, Пользователь)
	
	// Приоритеты дат запрета изменения.
	// 1. Для раздела, объекта и пользователя.
	// 2. Для раздела, объекта и группы пользователей.
	// 3. Для раздела, объекта и любого пользователя.
	// 4. Для раздела, любого объекта (объект = раздел) и пользователя.
	// 5. Для раздела, любого объекта (объект = раздел) и группы пользователей.
	// 6. Для раздела, любого объекта (объект = раздел) и любого пользователя.
	// 7. Для любого раздела (пустой раздел), любого объекта (объект = раздел) и пользователя.
	// 8. Для любого раздела (пустой раздел), любого объекта (объект = раздел) и группы пользователей.
	// 9. Для любого раздела (пустой раздел), любого объекта (объект = раздел) и любого пользователя.
	
	ГруппаПользователя = Пользователь.Родитель;
	ПроверяемыйРаздел = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.НайтиПоНаименованию("Продажи");
	ПустойРазделСсылка = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка();
	ДляВсехПользователей = Перечисления.ВидыНазначенияДатЗапрета.ДляВсехПользователей;
	ПараметрыЗапрета = ПараметрыСеанса.ДействующиеДатыЗапретаИзменения;
	ДатаЗапрета = Дата(1,1,1,0,0,0);
	ЗапретВключен = ПараметрыЗапрета.ЗапретИзмененияИспользуется;
	Объект = Организация;
	
	Если ЗапретВключен Тогда
		ДляПользователей = ПараметрыЗапрета.ДляПользователей;
		РазделыПользователей = ДляПользователей.Разделы;
		ПустойРаздел = РазделыПользователей.Получить(ПустойРазделСсылка);
		ПустойОбъект = ПустойРаздел.Получить(ПустойРазделСсылка);
		// 9. Для любого раздела (пустой раздел), любого объекта (объект = раздел) и любого пользователя.
		ДатаЗапрета = ПустойОбъект.Получить(ДляВсехПользователей);
		// 8. Для любого раздела (пустой раздел), любого объекта (объект = раздел) и группы пользователей.
		Если ПустойОбъект.Получить(ГруппаПользователя) <> Неопределено Тогда
			ДатаЗапрета = ПустойОбъект.Получить(ГруппаПользователя);
		КонецЕсли;
		// 7. Для любого раздела (пустой раздел), любого объекта (объект = раздел) и пользователя.
		Если ПустойОбъект.Получить(Пользователь) <> Неопределено Тогда
			ДатаЗапрета = ПустойОбъект.Получить(Пользователь);
		КонецЕсли;
		// 6. Для раздела, любого объекта (объект = раздел) и любого пользователя.
		Если РазделыПользователей.Получить(ПроверяемыйРаздел) <> Неопределено Тогда 
			РазделПродажи = РазделыПользователей.Получить(ПроверяемыйРаздел);
			ПустойОбъектПродажи = РазделПродажи.Получить(ПроверяемыйРаздел);
			ДатаЗапрета = ПустойОбъектПродажи.Получить(ДляВсехПользователей);
			// 5. Для раздела, любого объекта (объект = раздел) и группы пользователей.
			Если ПустойОбъектПродажи.Получить(ГруппаПользователя) <> Неопределено Тогда
				ДатаЗапрета = ПустойОбъектПродажи.Получить(ГруппаПользователя);
			КонецЕсли;
			// 4. Для раздела, любого объекта (объект = раздел) и пользователя.
			Если ПустойОбъектПродажи.Получить(Пользователь) <> Неопределено Тогда
				ДатаЗапрета = ПустойОбъектПродажи.Получить(Пользователь);
			КонецЕсли;
			// 3. Для раздела, объекта и любого пользователя.
			Если РазделПродажи.Получить(Объект) <> Неопределено Тогда
				ПроверяемыйОбъект = РазделПродажи.Получить(Объект);
				ДатаЗапрета = ПроверяемыйОбъект.Получить(ДляВсехПользователей);
				// 2. Для раздела, объекта и группы пользователей.
				Если ПроверяемыйОбъект.Получить(ГруппаПользователя) <> Неопределено Тогда
					ДатаЗапрета = ПроверяемыйОбъект.Получить(ГруппаПользователя);
				КонецЕсли;
				// 1. Для раздела, объекта и пользователя.
				Если ПроверяемыйОбъект.Получить(Пользователь) <> Неопределено Тогда
					ДатаЗапрета = ПроверяемыйОбъект.Получить(Пользователь);
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
	
	Возврат ДатаЗапрета;
	
КонецФункции

Функция ВыполнитьЗаписьJSON(Данные, ЕстьОшибка = Ложь, ТекстОшибки) Экспорт 
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	Попытка 
		ЗаписатьJSON(ЗаписьJSON,Данные);
		Результат = ЗаписьJSON.Закрыть();
	Исключение
		ТекстОшибки = "Ошибка записи JSON " +  ОписаниеОшибки();
		ЕстьОшибка = Истина;
		Возврат Неопределено;
	КонецПопытки;	
	
	Возврат Результат;

КонецФункции

//Выполняет чтение в соответствие
Функция ВыполнитьЧтениеJSON(Данные, ЕстьОшибка, ТекстОшибки) Экспорт

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Данные);
	
	Попытка
		Результат = ПрочитатьJSON(ЧтениеJSON, Истина);
		ЧтениеJSON.Закрыть();	
	Исключение
		ТекстОшибки = "Ошибка чтения ответа JSON " + ОписаниеОшибки();
		ЕстьОшибка = Истина;
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции 

Процедура ЗаписатьОшибкуВЛогОшибокОбменаСВнешнимиСистемами(ВнешняяСистема, Организация, Операция, СтрокаНомер = 0, ТекстОшибки, Данные)

	мз = РегистрыСведений.гф_ОшибкиОбменаДаннымиСВнешнимиСистемами.СоздатьМенеджерЗаписи();
	мз.Дата = ТекущаяДата();
	мз.Организация = Организация;
	мз.ВнешняяСистема = ВнешняяСистема;
	мз.Операция = Операция;
	мз.СтрокаНомер = СтрокаНомер;
	мз.ОписаниеОшибки = ТекстОшибки;
	мз.Данные = Данные;
	мз.Записать(Истина);
	
КонецПроцедуры

Функция СоздатьТзДляВходящихДанных()
	
	ТЗ = Новый ТаблицаЗначений;
	КолонкиТЗ = тз.Колонки;
	КолонкиТЗ.Добавить("ДатаЗаказа", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	КолонкиТЗ.Добавить("НомерЗаказа", ОбщегоНазначения.ОписаниеТипаСтрока("250"));
	КолонкиТЗ.Добавить("ДатаПродажи", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	КолонкиТЗ.Добавить("ДатаВозврата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)); 
	КолонкиТЗ.Добавить("Артикул", ОбщегоНазначения.ОписаниеТипаСтрока("250"));
	КолонкиТЗ.Добавить("АртикулРазмер", ОбщегоНазначения.ОписаниеТипаСтрока("250"));
	КолонкиТЗ.Добавить("СтавкаНДС", Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
	КолонкиТЗ.Добавить("ЕстьДоставка", Новый ОписаниеТипов("Булево"));
	КолонкиТЗ.Добавить("Штрихкод", ОбщегоНазначения.ОписаниеТипаСтрока("100"));
	//КолонкиТЗ.Добавить("Операция", ОбщегоНазначения.ОписаниеТипаСтрока("250"));
	//КолонкиТЗ.Добавить("Основание", ОбщегоНазначения.ОписаниеТипаСтрока("250"));
	КолонкиТЗ.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	КолонкиТЗ.Добавить("ЦенаПродажи", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	КолонкиТЗ.Добавить("НомерСтрокиВЗаказе", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	КолонкиТЗ.Добавить("КоличествоВыдано", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	КолонкиТЗ.Добавить("КоличествоДоставлено", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	КолонкиТЗ.Добавить("КоличествоВозвращено", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	
	Возврат ТЗ;
	
КонецФункции

Функция ПолучитьТекстЗапросаПодборНоменклатуры()

	Текст = "ВЫБРАТЬ
	        |	ТЗ.ДатаЗаказа КАК ДатаЗаказа,
	        |	ТЗ.НомерЗаказа КАК НомерЗаказа,
	        |	ТЗ.ДатаПродажи КАК ДатаПродажи,
	        |	ТЗ.ДатаВозврата КАК ДатаВозврата,
	        |	ТЗ.Артикул КАК Артикул,
	        |	ТЗ.АртикулРазмер КАК АртикулРазмер,
	        |	ТЗ.Количество КАК Количество,
	        |	ТЗ.ЦенаПродажи КАК ЦенаПродажи,
	        |	ТЗ.ЕстьДоставка КАК ЕстьДоставка,
	        |	ТЗ.КоличествоВыдано КАК КоличествоВыдано,
	        |	ТЗ.КоличествоДоставлено КАК КоличествоДоставлено,
	        |	ТЗ.КоличествоВозвращено КАК КоличествоВозвращено,
	        |	ТЗ.НомерСтрокиВЗаказе КАК НомерСтрокиВЗаказе,
	        |	ТЗ.Штрихкод КАК Штрихкод
	        |ПОМЕСТИТЬ ВТ_вхТЗ
	        |ИЗ
	        |	&ТЗ КАК ТЗ
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВТ_вхТЗ.ДатаЗаказа КАК ДатаЗаказа,
	        |	ВТ_вхТЗ.НомерЗаказа КАК НомерЗаказа,
	        |	ВТ_вхТЗ.ДатаПродажи КАК ДатаПродажи,
	        |	ВТ_вхТЗ.ДатаВозврата КАК ДатаВозврата,
	        |	ВТ_вхТЗ.Артикул КАК Артикул,
	        |	ВТ_вхТЗ.АртикулРазмер КАК АртикулРазмер,
	        |	ВЫБОР
	        |		КОГДА ВТ_вхТЗ.ЕстьДоставка
	        |			ТОГДА 1
	        |		ИНАЧЕ ВТ_вхТЗ.Количество
	        |	КОНЕЦ КАК Количество,
	        |	ВТ_вхТЗ.ЦенаПродажи КАК ЦенаПродажи,
	        |	ВТ_вхТЗ.ЕстьДоставка КАК ЕстьДоставка,
	        |	ВЫБОР
	        |		КОГДА ВТ_вхТЗ.ЕстьДоставка
	        |			ТОГДА 1
	        |		ИНАЧЕ ВТ_вхТЗ.КоличествоВыдано
	        |	КОНЕЦ КАК КоличествоВыдано,
	        |	ВТ_вхТЗ.КоличествоДоставлено КАК КоличествоДоставлено,
	        |	ВТ_вхТЗ.КоличествоВозвращено КАК КоличествоВозвращено,
	        |	ВТ_вхТЗ.НомерСтрокиВЗаказе КАК НомерСтрокиВЗаказе,
	        |	ВТ_вхТЗ.Штрихкод КАК Штрихкод,
	        |	ВЫБОР
	        |		КОГДА ВТ_вхТЗ.ЕстьДоставка
	        |			ТОГДА &УслугаДоставки
	        |		ИНАЧЕ ЕСТЬNULL(ШтрихкодыНоменклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	        |	КОНЕЦ КАК Номенклатура,
	        |	ЕСТЬNULL(ШтрихкодыНоменклатуры.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	        |	ЕСТЬNULL(ШтрихкодыНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяССылка)) КАК Упаковка
	        |ПОМЕСТИТЬ ВТ_ПоискНоменлкатуры
	        |ИЗ
	        |	ВТ_вхТЗ КАК ВТ_вхТЗ
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	        |		ПО ВТ_вхТЗ.Штрихкод = ШтрихкодыНоменклатуры.Штрихкод
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВТ_ПоискНоменлкатуры.ДатаЗаказа КАК ДатаЗаказа,
	        |	ВТ_ПоискНоменлкатуры.НомерЗаказа КАК НомерЗаказа,
	        |	ВТ_ПоискНоменлкатуры.ДатаПродажи КАК ДатаПродажи,
	        |	ВТ_ПоискНоменлкатуры.ДатаВозврата КАК ДатаВозврата,
	        |	ВТ_ПоискНоменлкатуры.Артикул КАК Артикул,
	        |	ВТ_ПоискНоменлкатуры.АртикулРазмер КАК АртикулРазмер,
	        |	ВТ_ПоискНоменлкатуры.Количество КАК КоличествоВЗаказе,
	        |	ВТ_ПоискНоменлкатуры.ЦенаПродажи КАК ЦенаПродажи,
	        |	ВТ_ПоискНоменлкатуры.ЕстьДоставка КАК ЕстьДоставка,
	        |	ВТ_ПоискНоменлкатуры.КоличествоВыдано КАК КолВыданоЗаказ,
	        |	ВТ_ПоискНоменлкатуры.КоличествоДоставлено КАК КолДоставленоЗаказ,
	        |	ВТ_ПоискНоменлкатуры.КоличествоВозвращено КАК КолВозвращеноЗаказ,
	        |	ВТ_ПоискНоменлкатуры.НомерСтрокиВЗаказе КАК НомерСтрокиВЗаказе,
	        |	ВТ_ПоискНоменлкатуры.Штрихкод КАК Штрихкод,
	        |	ВТ_ПоискНоменлкатуры.Номенклатура КАК Номенклатура,
	        |	ВТ_ПоискНоменлкатуры.Характеристика КАК Характеристика,
	        |	ВТ_ПоискНоменлкатуры.Упаковка КАК Упаковка,
	        |	ЕСТЬNULL(РСДокументыРеализации.Документ, ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)) КАК ДокументРеализации,
	        |	ЕСТЬNULL(РСДокументыРеализации.Количество, 0) КАК КоличествоРеализация,
	        |	ЕСТЬNULL(РСДокументыВозврата.Документ, ЗНАЧЕНИЕ(Документ.ВозвратТоваровОтКлиента.ПустаяСсылка)) КАК ДокументВозврата,
	        |	ЕСТЬNULL(РСДокументыВозврата.Количество, 0) КАК КоличествоВозврат,
	        |	ВЫБОР
	        |		КОГДА ВТ_ПоискНоменлкатуры.ДатаПродажи > ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	        |				И ВТ_ПоискНоменлкатуры.ДатаВозврата = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	        |			ТОГДА ВТ_ПоискНоменлкатуры.КоличествоВыдано - ЕСТЬNULL(РСДокументыРеализации.Количество, 0)
	        |		ИНАЧЕ ВЫБОР
	        |				КОГДА ВТ_ПоискНоменлкатуры.ДатаПродажи > ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	        |						И ВТ_ПоискНоменлкатуры.ДатаВозврата > ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	        |					ТОГДА ВТ_ПоискНоменлкатуры.КоличествоВыдано + ВТ_ПоискНоменлкатуры.КоличествоВозвращено - ЕСТЬNULL(РСДокументыРеализации.Количество, 0)
	        |				ИНАЧЕ 0
	        |			КОНЕЦ
	        |	КОНЕЦ КАК НеобходимоРеализовать,
	        |	ВЫБОР
	        |		КОГДА ВТ_ПоискНоменлкатуры.ДатаПродажи > ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	        |				И ВТ_ПоискНоменлкатуры.ДатаВозврата > ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	        |			ТОГДА ВТ_ПоискНоменлкатуры.КоличествоВозвращено - ЕСТЬNULL(РСДокументыВозврата.Количество, 0)
	        |		ИНАЧЕ 0
	        |	КОНЕЦ КАК НеобходимоВернуть,
	        |	ВТ_ПоискНоменлкатуры.Номенклатура.СтавкаНДС КАК СтавкаНДС
	        |ПОМЕСТИТЬ ВТ_ДанныеПродажиВозвраты
	        |ИЗ
	        |	ВТ_ПоискНоменлкатуры КАК ВТ_ПоискНоменлкатуры
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гф_ДокументыНаОснованииВнешнихЗаказов КАК РСДокументыРеализации
	        |		ПО ВТ_ПоискНоменлкатуры.ДатаЗаказа = РСДокументыРеализации.ДатаЗаказа
	        |			И ВТ_ПоискНоменлкатуры.НомерЗаказа = РСДокументыРеализации.НомерЗаказа
	        |			И ВТ_ПоискНоменлкатуры.Номенклатура = РСДокументыРеализации.Номенклатура
	        |			И ВТ_ПоискНоменлкатуры.Характеристика = РСДокументыРеализации.Характеристика
	        |			И ВТ_ПоискНоменлкатуры.НомерСтрокиВЗаказе = РСДокументыРеализации.НомерСтрокиЗаказа
	        |			И (РСДокументыРеализации.Документ ССЫЛКА Документ.РеализацияТоваровУслуг)
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гф_ДокументыНаОснованииВнешнихЗаказов КАК РСДокументыВозврата
	        |		ПО ВТ_ПоискНоменлкатуры.ДатаЗаказа = РСДокументыВозврата.ДатаЗаказа
	        |			И ВТ_ПоискНоменлкатуры.НомерЗаказа = РСДокументыВозврата.НомерЗаказа
	        |			И ВТ_ПоискНоменлкатуры.Номенклатура = РСДокументыВозврата.Номенклатура
	        |			И ВТ_ПоискНоменлкатуры.Характеристика = РСДокументыВозврата.Характеристика
	        |			И ВТ_ПоискНоменлкатуры.НомерСтрокиВЗаказе = РСДокументыВозврата.НомерСтрокиЗаказа
	        |			И (РСДокументыВозврата.Документ ССЫЛКА Документ.ВозвратТоваровОтКлиента)
	        |ГДЕ
	        |	ВТ_ПоискНоменлкатуры.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	        |	И ВТ_ПоискНоменлкатуры.ДатаПродажи > ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВТ_ПоискНоменлкатуры.Артикул КАК Артикул,
	        |	ВТ_ПоискНоменлкатуры.АртикулРазмер КАК АртикулРазмер,
	        |	ВТ_ПоискНоменлкатуры.Штрихкод КАК Штрихкод
	        |ИЗ
	        |	ВТ_ПоискНоменлкатуры КАК ВТ_ПоискНоменлкатуры
	        |ГДЕ
	        |	ВТ_ПоискНоменлкатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ВТ_ПоискНоменлкатуры.Артикул,
	        |	ВТ_ПоискНоменлкатуры.АртикулРазмер,
	        |	ВТ_ПоискНоменлкатуры.Штрихкод
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВТ_ДанныеПродажиВозвраты.ДатаЗаказа КАК ДатаЗаказа,
	        |	ВТ_ДанныеПродажиВозвраты.НомерЗаказа КАК НомерЗаказа,
	        |	ВТ_ДанныеПродажиВозвраты.ДатаПродажи КАК ДатаПродажи,
	        |	ВТ_ДанныеПродажиВозвраты.ДатаВозврата КАК ДатаВозврата,
	        |	ВТ_ДанныеПродажиВозвраты.Артикул КАК Артикул,
	        |	ВТ_ДанныеПродажиВозвраты.АртикулРазмер КАК АртикулРазмер,
	        |	ВТ_ДанныеПродажиВозвраты.КоличествоВЗаказе КАК КоличествоВЗаказе,
	        |	ВТ_ДанныеПродажиВозвраты.ЦенаПродажи КАК Цена,
	        |	ВТ_ДанныеПродажиВозвраты.ЕстьДоставка КАК ЕстьДоставка,
	        |	ВТ_ДанныеПродажиВозвраты.КолВыданоЗаказ КАК КолВыданоЗаказ,
	        |	ВТ_ДанныеПродажиВозвраты.КолДоставленоЗаказ КАК КолДоставленоЗаказ,
	        |	ВТ_ДанныеПродажиВозвраты.КолВозвращеноЗаказ КАК КолВозвращеноЗаказ,
	        |	ВТ_ДанныеПродажиВозвраты.НомерСтрокиВЗаказе КАК НомерСтрокиВЗаказе,
	        |	ВТ_ДанныеПродажиВозвраты.Штрихкод КАК Штрихкод,
	        |	ВТ_ДанныеПродажиВозвраты.Номенклатура КАК Номенклатура,
	        |	ВТ_ДанныеПродажиВозвраты.Характеристика КАК Характеристика,
	        |	ВТ_ДанныеПродажиВозвраты.Упаковка КАК Упаковка,
	        |	ВТ_ДанныеПродажиВозвраты.ДокументРеализации КАК ДокументРеализации,
	        |	ВТ_ДанныеПродажиВозвраты.КоличествоРеализация КАК КоличествоРеализация,
	        |	ВТ_ДанныеПродажиВозвраты.ДокументВозврата КАК ДокументВозврата,
	        |	ВТ_ДанныеПродажиВозвраты.КоличествоВозврат КАК КоличествоВозврат,
	        |	ВТ_ДанныеПродажиВозвраты.НеобходимоРеализовать КАК НеобходимоРеализовать,
	        |	ВТ_ДанныеПродажиВозвраты.НеобходимоВернуть КАК НеобходимоВернуть,
	        |	ВТ_ДанныеПродажиВозвраты.СтавкаНДС КАК СтавкаНДС
	        |ИЗ
	        |	ВТ_ДанныеПродажиВозвраты КАК ВТ_ДанныеПродажиВозвраты
	        |ГДЕ
	        |	ВТ_ДанныеПродажиВозвраты.НеобходимоРеализовать <> 0
	        |ИТОГИ ПО
	        |	НомерЗаказа,
	        |	ДатаПродажи,
	        |	ДокументРеализации
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВТ_ДанныеПродажиВозвраты.ДатаЗаказа КАК ДатаЗаказа,
	        |	ВТ_ДанныеПродажиВозвраты.НомерЗаказа КАК НомерЗаказа,
	        |	ВТ_ДанныеПродажиВозвраты.ДатаПродажи КАК ДатаПродажи,
	        |	ВТ_ДанныеПродажиВозвраты.ДатаВозврата КАК ДатаВозврата,
	        |	ВТ_ДанныеПродажиВозвраты.Артикул КАК Артикул,
	        |	ВТ_ДанныеПродажиВозвраты.АртикулРазмер КАК АртикулРазмер,
	        |	ВТ_ДанныеПродажиВозвраты.КоличествоВЗаказе КАК КоличествоВЗаказе,
	        |	ВТ_ДанныеПродажиВозвраты.ЦенаПродажи КАК Цена,
	        |	ВТ_ДанныеПродажиВозвраты.ЕстьДоставка КАК ЕстьДоставка,
	        |	ВТ_ДанныеПродажиВозвраты.КолВыданоЗаказ КАК КолВыданоЗаказ,
	        |	ВТ_ДанныеПродажиВозвраты.КолДоставленоЗаказ КАК КолДоставленоЗаказ,
	        |	ВТ_ДанныеПродажиВозвраты.КолВозвращеноЗаказ КАК КолВозвращеноЗаказ,
	        |	ВТ_ДанныеПродажиВозвраты.НомерСтрокиВЗаказе КАК НомерСтрокиВЗаказе,
	        |	ВТ_ДанныеПродажиВозвраты.Штрихкод КАК Штрихкод,
	        |	ВТ_ДанныеПродажиВозвраты.Номенклатура КАК Номенклатура,
	        |	ВТ_ДанныеПродажиВозвраты.Характеристика КАК Характеристика,
	        |	ВТ_ДанныеПродажиВозвраты.Упаковка КАК Упаковка,
	        |	ВТ_ДанныеПродажиВозвраты.ДокументРеализации КАК ДокументРеализации,
	        |	ВТ_ДанныеПродажиВозвраты.КоличествоРеализация КАК КоличествоРеализация,
	        |	ВТ_ДанныеПродажиВозвраты.ДокументВозврата КАК ДокументВозврата,
	        |	ВТ_ДанныеПродажиВозвраты.КоличествоВозврат КАК КоличествоВозврат,
	        |	ВТ_ДанныеПродажиВозвраты.НеобходимоРеализовать КАК НеобходимоРеализовать,
	        |	ВТ_ДанныеПродажиВозвраты.НеобходимоВернуть КАК НеобходимоВернуть,
	        |	ВТ_ДанныеПродажиВозвраты.СтавкаНДС КАК СтавкаНДС
	        |ИЗ
	        |	ВТ_ДанныеПродажиВозвраты КАК ВТ_ДанныеПродажиВозвраты
	        |ГДЕ
	        |	ВТ_ДанныеПродажиВозвраты.НеобходимоВернуть <> 0
	        |ИТОГИ ПО
	        |	НомерЗаказа,
	        |	ДатаВозврата,
	        |	ДокументВозврата";
	Возврат Текст;
	
	
КонецФункции

Функция ПреобразоватьСтавкуНДС_от_Кактуса(СтрСтавкаНДС)
	
	Рез = Перечисления.СтавкиНДС.БезНДС;
	
	Если СтрСтавкаНДС = "NO_VAT" Тогда
		Рез = Перечисления.СтавкиНДС.БезНДС;
	ИначеЕсли СтрСтавкаНДС = "VAT_10" Тогда
		Рез = Перечисления.СтавкиНДС.НДС10;
	ИначеЕсли СтрСтавкаНДС = "VAT_20" Тогда
		Рез = Перечисления.СтавкиНДС.НДС20;
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции // ПреобразоватьСтавкуНДС_от_Кактуса()

Функция ПреобразоватьКДатеВремени(Стр)
	
	Если ТипЗнч(Стр) = Тип("Дата") Тогда
		возврат Стр;
	ИначеЕсли ТипЗнч(Стр) = Тип("Строка") Тогда
		//2022-06-21 21:32:44
		Возврат Дата(СтрЗаменить(СтрЗаменить(СтрЗаменить(Лев(Стр, 19),"-",""),":","")," ",""));
	Иначе
		Возврат Дата(1,1,1);
	КонецЕсли;

КонецФункции // ПреобразоватьКДате()

Функция ПолучитьПустуюТзДляДобавленияВРС()
	
	МассивТиповДокументов = Новый Массив;
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтКлиента"));

	ТЗ = Новый ТаблицаЗначений;
	КолонкиТЗ = ТЗ.Колонки;
	КолонкиТЗ.Добавить("ВнешняяСистема", Новый ОписаниеТипов("ПеречислениеСсылка.гф_ВнешниеСистемы"));
	КолонкиТЗ.Добавить("ДатаЗаказа", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	КолонкиТЗ.Добавить("НомерЗаказа", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	КолонкиТЗ.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	КолонкиТЗ.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КолонкиТЗ.Добавить("Документ", Новый ОписаниеТипов(МассивТиповДокументов));
	КолонкиТЗ.Добавить("НомерСтрокиДокумента", ОбщегоНазначения.ОписаниеТипаЧисло(15));
	КолонкиТЗ.Добавить("НомерСтрокиЗаказа", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	КолонкиТЗ.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(15));
	
	Возврат ТЗ;	
	
КонецФункции 

Процедура ПересчитатьТабличнуюЧасть(Объект)
	
	СтруктураПересчета = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Объект);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчета);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчета);
	СтруктураДействий.Вставить("ЗаполнитьКодТНВЭД", Объект.НалогообложениеНДС);
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	КонецЕсли;
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
	
КонецПроцедуры

Процедура ЗаписатьДанныеРсДокументыНаОснованииВнешнихЗаказов(тзДанные)

	Для каждого Строка из тзДанные Цикл
		мз = РегистрыСведений.гф_ДокументыНаОснованииВнешнихЗаказов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(мз, строка);
		мз.Записать(Истина);		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьДокумент(Объект)
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		ТипДокумента = "Реализация товаров и услуг";
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ВозвратТоваровОтКлиента") Тогда
		ТипДокумента = "Возврат товаров от клиента";
	Иначе
		ТипДокумента = "Документ движения товаров";
	КонецЕсли;
	
	ДокументПроведен = Ложь;
	ТекстСообщения = "";
	ТекстСообщДопСвойства = "";
	
	РежПроведения = РежимЗаписиДокумента.Проведение;
	
	ДопСвойства = Объект.ДополнительныеСвойства;
	Если ДопСвойства.Свойство("Проводить") Тогда
		РежПроведения = ?(ДопСвойства.Проводить,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись);		    	
	КонецЕсли; 
	
	Если ДопСвойства.Свойство("ТекстСообщения") Тогда
		ТекстСообщДопСвойства = ДопСвойства.ТекстСообщения;
	КонецЕсли;
	
	Попытка 
		Объект.Записать(РежПроведения);
		ДокументПроведен = Объект.Проведен;
	Исключение
		ТекстСообщения = "Ошибка проведения документа """+ТипДокумента+""" "+ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Объект.Комментарий = Объект.Комментарий + ТекстСообщения;
		Объект.Записать(РежимЗаписиДокумента.Запись);
	КонецПопытки; 
	
	Если НЕ ДокументПроведен Тогда
		//Записать в ЖР и Лог Ошибок
		ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщДопСвойства),Символы.ПС+ТекстСообщДопСвойства,"");
		ЗаписатьОшибкуВЛогОшибокОбменаСВнешнимиСистемами(Перечисления.гф_ВнешниеСистемы.Wildberries, Объект.Организация, "Проведение документа", ,"Ошибка проведения документа", ТекстСообщения);
		ЗаписатьОшибкуВЖурналРегистрации(ТекстСообщения, Объект);
		СтруктураСообщения = Новый Структура;
		СтруктураСообщения.Вставить("Объект", Строка(Объект));
		СтруктураСообщения.Вставить("ТекстСообщения", ТекстСообщения);
		СтруктураСообщения.Вставить("Операция", "Проведение");
		МассивНепроведенныхДокументов.Добавить(СтруктураСообщения);
   КонецЕсли;
	
КонецПроцедуры 

Процедура ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки, Объект = Неопределено)
	
	МетаданныеОбъект = "";
	Если Объект <> Неопределено Тогда
		МетаданныеОбъект = Объект.Метаданные();
	КонецЕсли; 
	
	ЗаписьЖурналаРегистрации("Обмен с внешними системами. Загрузка продаж Cactus",УровеньЖурналаРегистрации.Ошибка,МетаданныеОбъект,?(Объект = Неопределено,NULL,Объект.Ссылка),ТекстОшибки);
	
конецПроцедуры

Процедура ЗаполнитьСтрокуДанныеРС(нСтрока, ВыборкаТовары, СтрокаТовары, ВнешняяСистема);
	
	нСтрока.ВнешняяСистема = ВнешняяСистема;
	нСтрока.ДатаЗаказа = ВыборкаТовары.ДатаЗаказа;
	нСтрока.НомерЗаказа = ВыборкаТовары.НомерЗаказа;
	нСтрока.Номенклатура = ВыборкаТовары.Номенклатура;
	нСтрока.Характеристика = ВыборкаТовары.Характеристика;
	нСтрока.НомерСтрокиДокумента = СтрокаТовары.НомерСтроки;
	нСтрока.НомерСтрокиЗаказа = ВыборкаТовары.НомерСтрокиВЗаказе;
	нСтрока.Количество = СтрокаТовары.Количество;
	
КонецПроцедуры

Процедура НайтиРеализациюТоваровУслугСкорректироватьСтрокуВозврата(СтрокаТовары, ВыборкаТовары, Настройки, ДокументНайден = Ложь, ТекстСообщения = "")

	Если СтрокаТовары.СпособОпределенияСебестоимости = Перечисления.СпособыОпределенияСебестоимости.ИзДокументаПередачи И ЗначениеЗаполнено(СтрокаТовары.ДокументРеализации) Тогда
		Возврат;
		ДокументНайден = Истина;
	КонецЕсли;
	
	//Попытка повторно найти реализацию, т.к. документа может не быть на момент выполнения запроса
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВнешняяСистема", Настройки.ВнешняяСистема);
	Запрос.УстановитьПараметр("ДатаЗаказа", ВыборкаТовары.ДатаЗаказа);
	Запрос.УстановитьПараметр("НомерЗаказа", ВыборкаТовары.НомерЗаказа);
	Запрос.УстановитьПараметр("Номенклатура", ВыборкаТовары.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", ВыборкаТовары.Характеристика);
	Запрос.УстановитьПараметр("НомерСтрокиЗаказа", ВыборкаТовары.НомерСтрокиВЗаказе);
	Запрос.Текст ="ВЫБРАТЬ
	              |	гф_ДокументыНаОснованииВнешнихЗаказов.Документ КАК Документ
	              |ИЗ
	              |	РегистрСведений.гф_ДокументыНаОснованииВнешнихЗаказов КАК гф_ДокументыНаОснованииВнешнихЗаказов
	              |ГДЕ
	              |	гф_ДокументыНаОснованииВнешнихЗаказов.ВнешняяСистема = &ВнешняяСистема
	              |	И гф_ДокументыНаОснованииВнешнихЗаказов.ДатаЗаказа = &ДатаЗаказа
	              |	И гф_ДокументыНаОснованииВнешнихЗаказов.НомерЗаказа = &НомерЗаказа
	              |	И гф_ДокументыНаОснованииВнешнихЗаказов.Номенклатура = &Номенклатура
	              |	И гф_ДокументыНаОснованииВнешнихЗаказов.Характеристика = &Характеристика
	              |	И гф_ДокументыНаОснованииВнешнихЗаказов.НомерСтрокиЗаказа = &НомерСтрокиЗаказа
	              |	И гф_ДокументыНаОснованииВнешнихЗаказов.Документ ССЫЛКА Документ.РеализацияТоваровУслуг
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	гф_ДокументыНаОснованииВнешнихЗаказов.Документ";
	Выборка = Запрос.Выполнить().Выбрать(); 
	
	Если Выборка.Следующий() Тогда
		СтрокаТовары.ДокументРеализации = Выборка.Документ;
		ДокументНайден = Истина;
		//Ссылку на док реализации установили, можно уходить;
		Возврат;
	КонецЕсли;
	
	//Не нашли реализацию. Меняем способ определения себестоимости
	СпособОпределенияСебестоимости = Перечисления.СпособыОпределенияСебестоимости.Вручную;
	СтрокаТовары.СпособОпределенияСебестоимости = СпособОпределенияСебестоимости;
	ТекстСообщения = ТекстСообщения + "Для строки "+СтрокаТовары.НомерСтроки+" установлен способ определения "+ СпособОпределенияСебестоимости+Символы.ПС;
	//Пока нет информации как вручную устанавливать себестоимость, поэтому на этом пока всё.
	
КонецПроцедуры

Процедура ОтправитьСообщениеНаПочту(Настройки)
	
	ТемаПисьма = "Ошибки создания документов на основании данных внешней системы "+Настройки.ВнешняяСистема;
	
	ТекстПисьма = СформироватьТекстПисьма();
	УчетнаяЗапись = ПредопределенноеЗначение("Справочник.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты");
	
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Кому", Настройки.Получатели);
	ПараметрыПисьма.Вставить("УчетнаяЗапись", УчетнаяЗапись);                                                               
	ПараметрыПисьма.Вставить("Тема", ТемаПисьма);	
	ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
	ПараметрыПисьма.Вставить("ТипТекста", "ПростойТекст");
	
	Письмо = РаботаСПочтовымиСообщениями.ПодготовитьПисьмо(УчетнаяЗапись, ПараметрыПисьма);
	
	РезультатыОтправкиПисем = РаботаСПочтовымиСообщениями.ОтправитьПисьмо(УчетнаяЗапись, Письмо);
	
КонецПроцедуры

Функция СформироватьТекстПисьма()
	// МассивНепроведенныхДокументов - глобальная переменная	
	//Элемент массива должен содержать структуру
	//Объект - Строковое значение (представление объекта или свободный текст - Источник ошибки)
	//ТекстСообщения - Строковое значение, содержащее информацию об ошибке
	//Операция - строковое значение, содержащее тип операции, при которой возникла ошибка
	ТекстПисьма = "Во время обработки данных "+ТекущаяДатаСеанса()+" возникли следующие ошибки:"+Символы.ПС;
	
	Сч = 1;
	
	Для каждого элМассива из МассивНепроведенныхДокументов Цикл
		ТекстПисьма = ТекстПисьма + Сч +". Объект:" + элМассива.Объект + Символы.ПС +
					"Операция: "+элМассива.Операция+Символы.ПС +
					"Описание ошибки: "+элМассива.ТекстСообщения + Символы.ПС;
		Сч = Сч + 1;
	КонецЦикла;
	
	Возврат ТекстПисьма;
	                    	
КонецФункции
#КонецОбласти

МассивНепроведенныхДокументов = Новый Массив;
