Процедура ВыполнитьЗагрузкуДанныхОтчетаИзФайла(АдресВХ, Настройки) Экспорт
	
	Расширение = Прав(ПутьКФайлу, 4);
	Расширение = СтрЗаменить(Расширение, ".", "");
	
	ВрФайл = ПолучитьИмяВременногоФайла(Расширение);
	ДанныеХранилища = ПолучитьИзВременногоХранилища(АдресВХ);
	ДанныеХранилища.Записать(ВрФайл);
	
	//Создание таблицы входящих данных
	тзВхДанные = СоздатьТзДляВходящихДанных();
	
	//Чтение файла из временного хранилища в табличный документ
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Очистить();
	ТабДок.Прочитать(ВрФайл, СпособЧтенияЗначенийТабличногоДокумента.Значение); 
	
	//Удаление временного файла
	ФайлДляУдаления = Новый Файл(ВрФайл);
	Если ФайлДляУдаления.Существует() Тогда
		УдалитьФайлы(ВрФайл);
	КонецЕсли;
	
	ПредопрЗначения = Настройки.ПредопределенныеЗначения;
	
	НомерСтрокиПериод = 1;
	Если ПредопрЗначения.Свойство("НомерСтрокиПериод") Тогда
		Если ЗначениеЗаполнено(ПредопрЗначения.НомерСтрокиПериод) Тогда
			Если ТипЗнч(ПредопрЗначения.НомерСтрокиПериод) = Тип("Число") Тогда
				НомерСтрокиПериод = ПредопрЗначения.НомерСтрокиПериод;
			Иначе
				ОбщегоНазначения.СообщитьПользователю("Настройка НомерСтрокиПериод имеет неверный тип данных. Необходимый тип данных Число");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НомерСтрокиНачалаДанных = 8;
	Если ПредопрЗначения.Свойство("НомерСтрокиНачалаДанных") Тогда
		Если ЗначениеЗаполнено(ПредопрЗначения.НомерСтрокиНачалаДанных) Тогда
			Если ТипЗнч(ПредопрЗначения.НомерСтрокиНачалаДанных) = Тип("Число") Тогда
				НомерСтрокиНачалаДанных = ПредопрЗначения.НомерСтрокиНачалаДанных;
			Иначе
				ОбщегоНазначения.СообщитьПользователю("Настройка НомерСтрокиНачалаДанных имеет неверный тип данных. Необходимый тип данных Число");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	НомерКолонкиШтрихкод = 5;
	Если ПредопрЗначения.Свойство("НомерКолонкиШтрихкод") Тогда
		Если ЗначениеЗаполнено(ПредопрЗначения.НомерКолонкиШтрихкод) Тогда
			Если ТипЗнч(ПредопрЗначения.НомерКолонкиШтрихкод) = Тип("Число") Тогда
				НомерКолонкиШтрихкод = ПредопрЗначения.НомерКолонкиШтрихкод;
			Иначе
				ОбщегоНазначения.СообщитьПользователю("Настройка НомерКолонкиШтрихкод имеет неверный тип данных. Необходимый тип данных Число");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	НомерКолонкиКоличество = 8;
	Если ПредопрЗначения.Свойство("НомерКолонкиКоличество") Тогда
		Если ЗначениеЗаполнено(ПредопрЗначения.НомерКолонкиКоличество) Тогда
			Если ТипЗнч(ПредопрЗначения.НомерКолонкиКоличество) = Тип("Число") Тогда
				НомерКолонкиКоличество = ПредопрЗначения.НомерКолонкиКоличество;
			Иначе
				ОбщегоНазначения.СообщитьПользователю("Настройка НомерКолонкиКоличество имеет неверный тип данных. Необходимый тип данных Число");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НомерКолонкиЦенаПродажи = 10;
	Если ПредопрЗначения.Свойство("НомерКолонкиЦенаПродажи") Тогда
		Если ЗначениеЗаполнено(ПредопрЗначения.НомерКолонкиЦенаПродажи) Тогда
			Если ТипЗнч(ПредопрЗначения.НомерКолонкиЦенаПродажи) = Тип("Число") Тогда
				НомерКолонкиЦенаПродажи = ПредопрЗначения.НомерКолонкиЦенаПродажи;
			Иначе
				ОбщегоНазначения.СообщитьПользователю("Настройка НомерКолонкиЦенаПродажи имеет неверный тип данных. Необходимый тип данных Число");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	НомерКолонкиСуммаВознаграждения = 13;
	Если ПредопрЗначения.Свойство("НомерКолонкиСуммаВознаграждения") Тогда
		Если ЗначениеЗаполнено(ПредопрЗначения.НомерКолонкиСуммаВознаграждения) Тогда
			Если ТипЗнч(ПредопрЗначения.НомерКолонкиСуммаВознаграждения) = Тип("Число") Тогда
				НомерКолонкиСуммаВознаграждения = ПредопрЗначения.НомерКолонкиСуммаВознаграждения;
			Иначе
				ОбщегоНазначения.СообщитьПользователю("Настройка НомерКолонкиСуммаВознаграждения имеет неверный тип данных. Необходимый тип данных Число");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//Дата отчета для создания документа
	НайтиДатуОтчета(ТабДок, НомерСтрокиПериод);
	
	//Дата и номер отчета из файла
	ЗаполнитьНомерДатуВх(ТабДок); 
	
	//Поиск отчета за указанную дату
	ОтчетКомиссионера = НайтиСсылкуНаОтчет();
	
	//Проверка на дату запрета редактирования
	ДатаЗапрета = Настройки.ДатаЗапретаРедактирования;
	
	Если ЗначениеЗаполнено(ОтчетКомиссионера) Тогда                
		ДатаОтчетаКомиссионера = ОтчетКомиссионера.Дата;
		Если ДатаОтчетаКомиссионера <= ДатаЗапрета Тогда
			ОбщегоНазначения.СообщитьПользователю("Найденый отчет комиссионера: "+ОтчетКомиссионера+" находится в закрытом периоде.
			|Изменение запрещено.");
			Настройки.ЗапретОбновленияДокумента = Истина;
			Возврат;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ДатаОтчета) И ДатаОтчета <= ДатаЗапрета Тогда
		ДатаОтчета = НачалоДня(КонецДня(ДатаЗапрета)+1);
		ОбщегоНазначения.СообщитьПользователю("Полученная из файла дата отчета находится в закрытом периоде. Установлена дата отчета: "+ДатаОтчета);
	КонецЕсли;
	
	//Обработка табличного документа 
	КоличествоСтрок = ТабДок.ВысотаТаблицы - 1;
	Если КоличествоСтрок <= 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нет данных для загрузки",5);
		Возврат;
	КонецЕсли;    
	
	ИмяКолонкаШтрихкод = "C" + СокрЛП(Формат(НомерКолонкиШтрихкод, "ЧГ=0"));
	ИмяКолонкиКоличество = "C" + СокрЛП(Формат(НомерКолонкиКоличество, "ЧГ=0"));
	ИмяКолонкиЦенаПродажи = "C" + СокрЛП(Формат(НомерКолонкиЦенаПродажи, "ЧГ=0"));
	ИмяКолонкиСуммаВознаграждения = "C" + СокрЛП(Формат(НомерКолонкиСуммаВознаграждения, "ЧГ=0"));
	ИмяСтрока = "R";
	
	Для сч=НомерСтрокиНачалаДанных По ТабДок.ВысотаТаблицы Цикл
		
		//чтение Штрихкод
		АдресЯчейки = ИмяСтрока + СОКРЛП(сч)+ ИмяКолонкаШтрихкод;
        АдресЯчейки = СтрЗаменить(АдресЯчейки,Символы.НПП,"");
		Штрихкод = СОКРЛП(ТабДок.Область(АдресЯчейки).Текст);	
		
		Если НЕ ЗначениеЗаполнено(Штрихкод) Тогда Продолжить КонецЕсли;
		
		//чтение Количество (тип Число)
		АдресЯчейки = ИмяСтрока + СОКРЛП(сч)+ ИмяКолонкиКоличество;
        АдресЯчейки = СтрЗаменить(АдресЯчейки,Символы.НПП,"");
		Количество = Число(СОКРЛП(ТабДок.Область(АдресЯчейки).Текст));
		
		//чтение ЦенаПродажи (тип Число)
		АдресЯчейки = ИмяСтрока + СОКРЛП(сч)+ ИмяКолонкиЦенаПродажи;
        АдресЯчейки = СтрЗаменить(АдресЯчейки,Символы.НПП,"");
		ЦенаПродажи = Число(СОКРЛП(ТабДок.Область(АдресЯчейки).Текст));
		Если ЦенаПродажи < 0 Тогда
			ЦенаПродажи = ЦенаПродажи * -1;
		КонецЕсли;
		
		//чтение СуммаВознаграждения
		АдресЯчейки = ИмяСтрока + СОКРЛП(сч)+ ИмяКолонкиСуммаВознаграждения;
        АдресЯчейки = СтрЗаменить(АдресЯчейки,Символы.НПП,"");
		СуммаВознаграждения = Число(СОКРЛП(ТабДок.Область(АдресЯчейки).Текст));
		
		//Добавление строки в тзВхДанные
		нСтрока = тзВхДанные.Добавить();
		нСтрока.Штрихкод      = Штрихкод;
		нСтрока.Количество    = Количество;
		нСтрока.ЦенаПродажи   = ЦенаПродажи;
		нСтрока.СуммаВознаграждения = СуммаВознаграждения;

	КонецЦикла;

    ТзОбработанныеДанные = ПодобратьНоменклатуру(тзВхДанные, Настройки);
	
КонецПроцедуры 

Процедура ВыполнитьСозданиеОбновлениеОтчетаКомиссионера(Настройки) Экспорт
	
	Если Товары.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю("Таблица данных пустая. Отчет несоздан");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтчетКомиссионера) Тогда
		Если Настройки.ЗапретОбновленияДокумента Тогда            
			Возврат;
		Иначе
		ДокОбъект = ОтчетКомиссионера.ПолучитьОбъект();
		КонецЕсли;
	Иначе
		ДокОбъект = Документы.ОтчетКомиссионера.СоздатьДокумент();
	КонецЕсли;
	
	//Шапка	
	Если ДокОбъект.ЭтоНовый() Тогда
		ДокОбъект.Дата = ДатаОтчета;
		ДокОбъект.Организация = Организация;
		ДокОбъект.Контрагент = Контрагент;                                                                        
		ДокОбъект.Договор = Договор;
		ДокОбъект.Валюта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВалютаВзаиморасчетов");
		ДокОбъект.ДатаВходящегоДокумента = ДатаВходящегоДокумента;
		ДокОбъект.НомерВходящегоДокумента = НомерВходящегоДокумента;
		ДокОбъект.Автор = ПараметрыСеанса.ТекущийПользователь;
		ДокОбъект.Комментарий = "Lamoda. Отчет комиссионера о продажах "+ДокОбъект.НомерВходящегоДокумента+" от "+ДокОбъект.ДатаВходящегоДокумента;   
		прЗначения = Настройки.ПредопределенныеЗначения;
		ЗаполнитьЗначенияСвойств(ДокОбъект,прЗначения);
	КонецЕсли; 
	
	//Товары
	тчТовары = ДокОбъект.Товары;
	Для каждого стр из Товары цикл
		нСтрока = тчТовары.Добавить();
		ЗаполнитьЗначенияСвойств(нСтрока, стр);
		нСтрока.КоличествоУпаковок = стр.Количество;
	КонецЦикла;
	ПересчитатьТабличнуюЧасть(ДокОбъект);	
	
	ПроцентНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(ДокОбъект.СтавкаНДСВознаграждения);;
	ДокОбъект.СуммаВознаграждения = тчТовары.Итог("СуммаВознаграждения");
	ИтогСуммаПродажи = тчТовары.Итог("СуммаПродажи");
	ДокОбъект.ПроцентВознаграждения = ?(ИтогСуммаПродажи <> 0, ДокОбъект.СуммаВознаграждения / ИтогСуммаПродажи * 100, 0);
	ДокОбъект.СуммаНДСВознаграждения = Окр(ДокОбъект.СуммаВознаграждения * ПроцентНДС / (100 + ПроцентНДС), 2, РежимОкругления.Окр15как20);
	
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		ДокОбъект.Комментарий = ДокОбъект.Комментарий + " "+ТекстОшибки;
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ДокОбъект.Ссылка) Тогда
		ОтчетКомиссионера = ДокОбъект.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьТзДляВходящихДанных()

	Тз = новый ТаблицаЗначений;
	Колонки = Тз.Колонки;
	Колонки.Добавить("Штрихкод", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(15));
	Колонки.Добавить("ЦенаПродажи", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	Колонки.Добавить("СуммаВознаграждения", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	
	Возврат Тз;
	
КонецФункции

Функция ПодобратьНоменклатуру(тзВх, Настройки)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТЗ", тзВх);
	Запрос.Текст = ПолучитьТекстЗапросаНоменклатура();
	Результат = Запрос.ВыполнитьПакет();
	
	//Пустая номенлклатура
	ПустаяНоменклатура = Результат[Результат.Количество()-3].Выбрать();
	
	Сч = 0;
	Пока ПустаяНоменклатура.Следующий() Цикл
		Сч = Сч + 1;
		ТекстОшибки = "По штрихкоду "+ПустаяНоменклатура.Штрихкод+" не найдена номенклатура";
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		ЗаписатьОшибкуВЛогОшибокОбменаСВнешнимиСистемами(Настройки.ВнешняяСистема, Настройки.Организация, "Загрузка отчета комиссионера. Поиск номенклатуры.", ТекстОшибки, ПустаяНоменклатура.Штрихкод, Сч);
	КонецЦикла; 
	
	//Номенклатура у которой включен учет характеристик, но в РС "Штрихкоды номенклатуры" не привязана характеристика к ШК
	НоменклатураБезХарактеристик = Результат[Результат.Количество()-2].Выбрать();
	
	Сч = 0;
	Пока НоменклатураБезХарактеристик.Следующий() Цикл
		Сч = Сч + 1;
		ТекстОшибки = "По штрихкоду "+НоменклатураБезХарактеристик.Штрихкод+" для номенклатуры "+НоменклатураБезХарактеристик.Артикул+" "+НоменклатураБезХарактеристик.Номенклатура+" не указана характеристика";
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
   		ЗаписатьОшибкуВЛогОшибокОбменаСВнешнимиСистемами(Настройки.ВнешняяСистема, Настройки.Организация, "Загрузка отчета комиссионера. Поиск номенклатуры.", ТекстОшибки, НоменклатураБезХарактеристик.Штрихкод+" "+НоменклатураБезХарактеристик.Артикул+" "+НоменклатураБезХарактеристик.Номенклатура, Сч);
	КонецЦикла;
	
	//Итоговая Выборка
	ВыборкаИтоговая = Результат[Результат.Количество()-1].Выбрать();
	
	Пока ВыборкаИтоговая.Следующий() Цикл
		нСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(нСтрока, ВыборкаИтоговая);
	КонецЦикла;

	
	
КонецФункции

Функция ПолучитьТекстЗапросаНоменклатура()
	
	Текст = "ВЫБРАТЬ
	        |	ТЗ.Штрихкод КАК Штрихкод,
	        |	ТЗ.Количество КАК Количество,
	        |	ТЗ.ЦенаПродажи КАК ЦенаПродажи,
	        |	ТЗ.СуммаВознаграждения КАК СуммаВознаграждения
	        |ПОМЕСТИТЬ ВТ_ТЗ
	        |ИЗ
	        |	&ТЗ КАК ТЗ
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВТ_ТЗ.Штрихкод КАК Штрихкод,
	        |	ЕСТЬNULL(ШтрихкодыНоменклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	        |	ЕСТЬNULL(ШтрихкодыНоменклатуры.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	        |	ЕСТЬNULL(ШтрихкодыНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяССылка)) КАК Упаковка,
	        |	ВТ_ТЗ.Количество КАК Количество,
	        |	ВТ_ТЗ.ЦенаПродажи КАК ЦенаПродажи,
	        |	ВТ_ТЗ.СуммаВознаграждения КАК СуммаВознаграждения
	        |ПОМЕСТИТЬ ВТ_ПоискНоменклатуры
	        |ИЗ
	        |	ВТ_ТЗ КАК ВТ_ТЗ
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	        |		ПО ВТ_ТЗ.Штрихкод = ШтрихкодыНоменклатуры.Штрихкод
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВТ_ПоискНоменклатуры.Штрихкод КАК Штрихкод,
	        |	спрНоменклатура.Артикул КАК Артикул,
	        |	ВТ_ПоискНоменклатуры.Номенклатура КАК Номенклатура,
	        |	ВТ_ПоискНоменклатуры.Характеристика КАК Характеристика,
	        |	ВЫБОР
	        |		КОГДА ВТ_ПоискНоменклатуры.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	        |			ТОГДА спрНоменклатура.ЕдиницаИзмерения
	        |		ИНАЧЕ ВТ_ПоискНоменклатуры.Упаковка
	        |	КОНЕЦ КАК Упаковка,
	        |	ВТ_ПоискНоменклатуры.Количество КАК Количество,
	        |	ВТ_ПоискНоменклатуры.ЦенаПродажи КАК ЦенаПродажи,
	        |	ВТ_ПоискНоменклатуры.СуммаВознаграждения КАК СуммаВознаграждения,
	        |	спрВидыНоменклатуры.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики,
	        |	спрНоменклатура.СтавкаНДС КАК СтавкаНДС
	        |ПОМЕСТИТЬ ВТ_Итог
	        |ИЗ
	        |	ВТ_ПоискНоменклатуры КАК ВТ_ПоискНоменклатуры
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спрНоменклатура
	        |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК спрВидыНоменклатуры
	        |			ПО спрНоменклатура.ВидНоменклатуры = спрВидыНоменклатуры.Ссылка
	        |		ПО ВТ_ПоискНоменклатуры.Номенклатура = спрНоменклатура.Ссылка
	        |ГДЕ
	        |	ВТ_ПоискНоменклатуры.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВТ_ПоискНоменклатуры.Штрихкод КАК Штрихкод
	        |ИЗ
	        |	ВТ_ПоискНоменклатуры КАК ВТ_ПоискНоменклатуры
	        |ГДЕ
	        |	ВТ_ПоискНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ВТ_ПоискНоменклатуры.Штрихкод
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВТ_Итог.Штрихкод КАК Штрихкод,
	        |	ВТ_Итог.Артикул КАК Артикул,
	        |	ВТ_Итог.Номенклатура КАК Номенклатура
	        |ИЗ
	        |	ВТ_Итог КАК ВТ_Итог
	        |ГДЕ
	        |	ВЫБОР
	        |			КОГДА ВТ_Итог.ИспользоватьХарактеристики
	        |				ТОГДА ВТ_Итог.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	        |			ИНАЧЕ ИСТИНА
	        |		КОНЕЦ
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ВТ_Итог.Штрихкод,
	        |	ВТ_Итог.Номенклатура,
	        |	ВТ_Итог.Артикул
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВТ_Итог.Штрихкод КАК Штрихкод,
	        |	ВТ_Итог.Артикул КАК Артикул,
	        |	ВТ_Итог.Номенклатура КАК Номенклатура,
	        |	ВТ_Итог.Характеристика КАК Характеристика,
	        |	ВТ_Итог.Упаковка КАК Упаковка,
	        |	ВТ_Итог.Количество КАК Количество,
	        |	ВТ_Итог.ЦенаПродажи КАК ЦенаПродажи,
	        |	ВТ_Итог.СуммаВознаграждения КАК СуммаВознаграждения,
	        |	ВТ_Итог.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики,
	        |	ВТ_Итог.СтавкаНДС КАК СтавкаНДС
	        |ИЗ
	        |	ВТ_Итог КАК ВТ_Итог
	        |ГДЕ
	        |	ВЫБОР
	        |			КОГДА ВТ_Итог.ИспользоватьХарактеристики
	        |				ТОГДА ВТ_Итог.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	        |			ИНАЧЕ ИСТИНА
	        |		КОНЕЦ";
	Возврат Текст;
	
КонецФункции    

Процедура ЗаписатьОшибкуВЛогОшибокОбменаСВнешнимиСистемами(ВнешняяСистема, Организация, Операция, ТекстОшибки, Данные, СтрокаНомер = 0)

	мз = РегистрыСведений.гф_ОшибкиОбменаДаннымиСВнешнимиСистемами.СоздатьМенеджерЗаписи();
	мз.Дата = ТекущаяДатаСеанса();
	мз.Организация = Организация;
	мз.ВнешняяСистема = ВнешняяСистема;
	мз.Операция = Операция;
	мз.СтрокаНомер = СтрокаНомер;
	мз.ОписаниеОшибки = ТекстОшибки;
	мз.Данные = Данные;
	мз.Записать(Истина);
	
КонецПроцедуры

Процедура НайтиДатуОтчета(ТабДок, НомерСтрокиПериод)
	
	тзДаты = Новый ТаблицаЗначений;
	тзДаты.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	
	ИмяСтрока = "R";
	ИмяКолонка = "C";
	Шаблон = "(0?[1-9]|[12][0-9]|3[01])[- /.](0?[1-9]|1[012])[- /.](19|20)?[0-9]{2}";
	
	RegExp = Новый COMОбъект("VBScript.RegExp");
	RegExp.Global = Истина;
	RegExp.IgnoreCase = Истина;
	RegExp.Pattern = Шаблон;
	
	Для кол = 1 по ТабДок.ШиринаТаблицы Цикл
		АдресЯчейки = ИмяСтрока+НомерСтрокиПериод+ИмяКолонка+кол;
		АдресЯчейки = СтрЗаменить(АдресЯчейки,Символы.НПП,"");
		ТекстЯчейки = СокрЛП(ТабДок.Область(АдресЯчейки).Текст);
		Matches = RegExp.Execute(ТекстЯчейки);
		Если Matches.Count > 0 Тогда
			Для Сч = 0 по Matches.Count - 1 Цикл
				СтрокаСовпадение = Matches.Item(Сч).Value;
				ДатаИзСовпадений = СтроковыеФункцииКлиентСервер.СтрокаВДату(СтрокаСовпадение, ЧастиДаты.Дата);
				Если ЗначениеЗаполнено(ДатаИзСовпадений) Тогда
					Нстр = тзДаты.Добавить();
					Нстр.Дата = ДатаИзСовпадений;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если тзДаты.Количество() = 0 Тогда
		//Предупреждение("В указанной строке периода, не найдено ниодной даты. Установите дату отчета вручную",,"Ошибка поиска даты");
		//Если НЕ ВвестиДату(ДатаОтчета, "Введите дату отчета",ЧастиДаты.Дата) Тогда
		//	Сообщить("Выполнение прервано");
		//КонецЕсли;
		Возврат;
	КонецЕсли;
	
	тзДаты.Сортировать("Дата Убыв");
	
	//Установка даты отчета
	ДатаОтчета = КонецДня(тзДаты[0].Дата);
	
КонецПроцедуры   

Процедура ЗаполнитьНомерДатуВх(ТабДок)
	
	тзДаты = Новый ТаблицаЗначений;
	тзДаты.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	
	Шаблон = "(0?[1-9]|[12][0-9]|3[01])[- /.](0?[1-9]|1[012])[- /.](19|20)?[0-9]{2}";
	
	RegExp = Новый COMОбъект("VBScript.RegExp");
	RegExp.Global = Истина;
	RegExp.IgnoreCase = Истина;
	RegExp.Pattern = Шаблон;
	
	АдресЯчейки = "R1C1"; // По этому адресу строка с номером и датой документа
	ТекстЯчейки = СокрЛП(ТабДок.Область(АдресЯчейки).Текст);
	Matches = RegExp.Execute(ТекстЯчейки);
	Если Matches.Count > 0 Тогда
		Для Сч = 0 по Matches.Count - 1 Цикл
			СтрокаСовпадение = Matches.Item(Сч).Value;
			ДатаИзСовпадений = СтроковыеФункцииКлиентСервер.СтрокаВДату(СтрокаСовпадение, ЧастиДаты.Дата);
			Если ЗначениеЗаполнено(ДатаИзСовпадений) Тогда
				Нстр = тзДаты.Добавить();
				Нстр.Дата = ДатаИзСовпадений;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если тзДаты.Количество() > 0 Тогда
		тзДаты.Сортировать("Дата Убыв");
		ДатаВходящегоДокумента = тзДаты[0].Дата;
	КонецЕсли;
	
	ПозицияN = СтрНайти(ТекстЯчейки, "№");
	Если Не ЗначениеЗаполнено(ПозицияN) Тогда Возврат КонецЕсли;
	ПозицияОт = СтрНайти(ТекстЯчейки, "от",,ПозицияN);
	НомерВходящегоДокумента = СокрЛП(Сред(ТекстЯчейки,ПозицияN+1, ПозицияОт-ПозицияN-1));
		
КонецПроцедуры

Функция НайтиСсылкуНаОтчет() Экспорт
	
	Ссылка = Документы.ОтчетКомиссионера.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("ДатаВходящегоДокумента", ДатаВходящегоДокумента);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОтчетКомиссионера.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.ОтчетКомиссионера КАК ОтчетКомиссионера
	               |ГДЕ
	               |	ОтчетКомиссионера.Контрагент = &Контрагент
	               |	И ОтчетКомиссионера.Организация = &Организация
	               |	И ОтчетКомиссионера.Договор = &Договор
	               |	И ОтчетКомиссионера.ДатаВходящегоДокумента = &ДатаВходящегоДокумента
	               |	И НЕ ОтчетКомиссионера.ПометкаУдаления
	               |	И ОтчетКомиссионера.Проведен";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Ссылка = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Ссылка;

КонецФункции

Процедура ПересчитатьТабличнуюЧасть(Объект)
	
	СтруктураПересчета = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Объект);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуПродажи");
	СтруктураДействий.Вставить("Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуПродажиНДС", СтруктураПересчета);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчета);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДСВознаграждения", СтруктураПересчета);
	СтруктураДействий.Вставить("ЗаполнитьКодТНВЭД", Объект.НалогообложениеНДС);
	//Если ТипЗнч(Объект) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
	//	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	//	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	//	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	//КонецЕсли;
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
	
КонецПроцедуры