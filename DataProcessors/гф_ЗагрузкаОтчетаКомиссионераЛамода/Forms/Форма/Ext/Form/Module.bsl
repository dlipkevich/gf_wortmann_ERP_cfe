
&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выберите файл";
	Диалог.ПолноеИмяФайла = ""; 
	Фильтр = "Лист Excel 2007+ (*.xlsx)|*.xlsx| Лист Excel 2003 (*.xls)|*.xls|"; 
	Диалог.Фильтр = Фильтр; 
	Диалог.МножественныйВыбор = Ложь;	
	Диалог.Показать(Новый ОписаниеОповещения("ВыборФайлаЗавершение", ЭтаФорма, Новый Структура("Диалог", Диалог)));
		
КонецПроцедуры  

&НаКлиенте
Процедура ВыборФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог; 
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда				
		Объект.ПутьКФайлу = Диалог.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВозможноЧтение()
	
	Если Не ЗначениеЗаполнено(Объект.ПутьКФайлу) Тогда
		Предупреждение("Файл не выбран!");
		Возврат Ложь;
	КонецЕсли; 
	
	ВыбФайл = Новый Файл(Объект.ПутьКФайлу);
	Если НЕ ВыбФайл.Существует() Тогда
		Предупреждение("Файл не найден!");
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПутьКФайлуОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ВозможноЧтение() Тогда
		Возврат;
	КонецЕсли;

	ЗапуститьПриложение(Объект.ПутьКФайлу);
		
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлНаСервере(АдресВХ)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ВыполнитьЗагрузкуДанныхОтчетаИзФайла(АдресВХ, Настройки);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайл(Команда)
	
	Организация = Объект.Организация;
	ПутьКФайлу = Объект.ПутьКФайлу;
	ТекстПредупреждения = "";
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстПредупреждения = ТекстПредупреждения + "Укажите организацию."+Символы.ПС;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПутьКФайлу) Тогда
		ТекстПредупреждения = ТекстПредупреждения + "Укажите путь к файлу."+Символы.ПС;
	КонецЕсли;   
	
	Если Настройки = Неопределено Тогда
		ТекстПредупреждения = ТекстПредупреждения + "Нет настроек для заполнения документа.";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(,ТекстПредупреждения,,"Ошибка ввода данных");
		Возврат;
	КонецЕсли;
	
	АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПутьКФайлу));	
	
	Объект.Товары.Очистить();
	
	ПрочитатьФайлНаСервере(АдресВХ);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда Возврат КонецЕсли;
	
	//Читаем настройки для Организации
	тзНастройки = ЗаполнитьНастройкиОбработки(Объект.Организация);	
	Если тзНастройки.Количество() > 0 Тогда                         
		Настройки = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(тзНастройки[0]);
		Объект.Контрагент = Настройки.Контрагент;
		Объект.Договор = Настройки.Договор;                                                       
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для организации "+Объект.Организация+" нет настроек. Загрузка отчета невозможна");
		Возврат;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОчиститьЗначенияРеквизитов();
    
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьЗначенияРеквизитов()
	
	//Очищаем значения всех реквизитов
	Настройки = Неопределено;
	Объект.Товары.Очистить();
	Объект.ДатаВходящегоДокумента = Дата(1,1,1);
	Объект.НомерВходящегоДокумента = "";
	Объект.ДатаОтчета = Дата(1,1,1);
	Объект.ОтчетКомиссионера = Документы.ОтчетКомиссионера.ПустаяСсылка();
	Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	Объект.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьНастройкиОбработки(Орг = Неопределено)
	
	мТиповПолучатели = Новый Массив;
	мТиповПолучатели.Добавить(Тип("Строка"));
	мТиповПолучатели.Добавить(Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты"));
	
	ТЗ = Новый ТаблицаЗначений;
	КолонкиТЗ = ТЗ.Колонки;
	КолонкиТЗ.Добавить("Организация", Новый ОписаниеТипов("СправочникССылка.Организации"));
	КолонкиТЗ.Добавить("ВнешняяСистема", Новый ОписаниеТипов("ПеречислениеСсылка.гф_ВнешниеСистемы"));
	//КолонкиТЗ.Добавить("key", ОбщегоНазначения.ОписаниеТипаСтрока(300));
	КолонкиТЗ.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	КолонкиТЗ.Добавить("Договор", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	//КолонкиТЗ.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	//КолонкиТЗ.Добавить("ВремяОжиданияМеждуПакетами", ОбщегоНазначения.ОписаниеТипаЧисло(4));
	//КолонкиТЗ.Добавить("СтрокВПакете", ОбщегоНазначения.ОписаниеТипаЧисло(15));
	КолонкиТЗ.Добавить("ДатаЗапретаРедактирования", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	КолонкиТЗ.Добавить("ЗапретОбновленияДокумента", Новый ОписаниеТипов("Булево"));
	КолонкиТЗ.Добавить("ПредопределенныеЗначения", Новый ОписаниеТипов("Структура"));
	//КолонкиТЗ.Добавить("ОтправлятьСведенияОбОшибкахНаПочту", Новый ОписаниеТипов("Булево"));
	//КолонкиТЗ.Добавить("Получатели", Новый ОписаниеТипов(мТиповПолучатели));

	                                                                                              	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВнешняяСистема", Перечисления.гф_ВнешниеСистемы.Lamoda);
	Запрос.УстановитьПараметр("ОтборПоОрганизации", ЗначениеЗаполнено(Орг));
	Запрос.УстановитьПараметр("Организация", Орг);
	Запрос.Текст = "ВЫБРАТЬ
	               |	гф_НастройкиИнтеграцииСВнешнимиСистемами.Организация КАК Организация,
	               |	гф_НастройкиИнтеграцииСВнешнимиСистемами.ВнешняяСистема КАК ВнешняяСистема,
	               |	гф_НастройкиИнтеграцииСВнешнимиСистемами.НастройкиДоступа.(
	               |		Параметр КАК Параметр,
	               |		Значение КАК Значение
	               |	) КАК НастройкиДоступа,
	               |	гф_НастройкиИнтеграцииСВнешнимиСистемами.ПредопределенныеЗначения.(
	               |		Наименование КАК Наименование,
	               |		Значение КАК Значение
	               |	) КАК ПредопределенныеЗначения
	               |ИЗ
	               |	Справочник.гф_НастройкиИнтеграцииСВнешнимиСистемами КАК гф_НастройкиИнтеграцииСВнешнимиСистемами
	               |ГДЕ
	               |	НЕ гф_НастройкиИнтеграцииСВнешнимиСистемами.ПометкаУдаления
	               |	И гф_НастройкиИнтеграцииСВнешнимиСистемами.Использовать
	               |	И ВЫБОР
	               |			КОГДА &ОтборПоОрганизации
	               |				ТОГДА гф_НастройкиИнтеграцииСВнешнимиСистемами.Организация = &Организация
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |	И гф_НастройкиИнтеграцииСВнешнимиСистемами.ВнешняяСистема = &ВнешняяСистема";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		нСтрока = ТЗ.Добавить();
		нСтрока.Организация = Выборка.Организация;
		нСтрока.ВнешняяСистема = Выборка.ВнешняяСистема;
		//Заполняем ключ доступа
		тзНастройкиДоступа = Выборка.НастройкиДоступа.Выгрузить();
		тзЗначенияДляЗаполнения = Выборка.ПредопределенныеЗначения.Выгрузить();
		Для каждого стрНастройка из тзНастройкиДоступа Цикл
			ИмяНастройки = стрНастройка.Параметр;
			Если КолонкиТЗ.Найти(ИмяНастройки) <> Неопределено Тогда
				нСтрока[ИмяНастройки] = стрНастройка.Значение;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		СтруктураПредопределенные = Новый Структура;
		Для каждого стрЗначение из тзЗначенияДляЗаполнения Цикл
			ИмяЗначения = стрЗначение.Наименование;
			КлючСтруктуры = СокрЛП(СтрЗаменить(ИмяЗначения, " ",""));
			Если КолонкиТз.Найти(КлючСтруктуры) <> Неопределено Тогда
				Попытка
					нСтрока[КлючСтруктуры] = стрЗначение.Значение;
					Продолжить;
				Исключение
					ТекстОшибки = "Ошибка установки параметра """+ИмяЗначения+""" " + ОписаниеОшибки();
				КонецПопытки;
			КонецЕсли;
			СтруктураПредопределенные.Вставить(КлючСтруктуры, стрЗначение.Значение);
		КонецЦикла;
		//Получение границы запрета редактирования данных
		ДатаГраницыЗапрета = ПолучитьДатуЗапрета(Выборка.Организация, ПараметрыСеанса.ТекущийПользователь);
		нСтрока.ДатаЗапретаРедактирования = ДатаГраницыЗапрета;
		нСтрока.ПредопределенныеЗначения = СтруктураПредопределенные;
	КонецЦикла;
	
	Возврат ТЗ;
	
КонецФункции  

&НаСервере
Функция ПолучитьДатуЗапрета(Организация, Пользователь)
	
	// Приоритеты дат запрета изменения.
	// 1. Для раздела, объекта и пользователя.
	// 2. Для раздела, объекта и группы пользователей.
	// 3. Для раздела, объекта и любого пользователя.
	// 4. Для раздела, любого объекта (объект = раздел) и пользователя.
	// 5. Для раздела, любого объекта (объект = раздел) и группы пользователей.
	// 6. Для раздела, любого объекта (объект = раздел) и любого пользователя.
	// 7. Для любого раздела (пустой раздел), любого объекта (объект = раздел) и пользователя.
	// 8. Для любого раздела (пустой раздел), любого объекта (объект = раздел) и группы пользователей.
	// 9. Для любого раздела (пустой раздел), любого объекта (объект = раздел) и любого пользователя.
	
	ГруппаПользователя = Пользователь.Родитель;
	ПроверяемыйРаздел = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.НайтиПоНаименованию("Продажи");
	ПустойРазделСсылка = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка();
	ДляВсехПользователей = Перечисления.ВидыНазначенияДатЗапрета.ДляВсехПользователей;
	ПараметрыЗапрета = ПараметрыСеанса.ДействующиеДатыЗапретаИзменения;
	ДатаЗапрета = Дата(1,1,1,0,0,0);
	ЗапретВключен = ПараметрыЗапрета.ЗапретИзмененияИспользуется;
	//Объект = Организация;
	
	Если ЗапретВключен Тогда
		ДляПользователей = ПараметрыЗапрета.ДляПользователей;
		РазделыПользователей = ДляПользователей.Разделы;
		ПустойРаздел = РазделыПользователей.Получить(ПустойРазделСсылка);
		ПустойОбъект = ПустойРаздел.Получить(ПустойРазделСсылка);
		// 9. Для любого раздела (пустой раздел), любого объекта (объект = раздел) и любого пользователя.
		ДатаЗапрета = ПустойОбъект.Получить(ДляВсехПользователей);
		// 8. Для любого раздела (пустой раздел), любого объекта (объект = раздел) и группы пользователей.
		Если ПустойОбъект.Получить(ГруппаПользователя) <> Неопределено Тогда
			ДатаЗапрета = ПустойОбъект.Получить(ГруппаПользователя);
		КонецЕсли;
		// 7. Для любого раздела (пустой раздел), любого объекта (объект = раздел) и пользователя.
		Если ПустойОбъект.Получить(Пользователь) <> Неопределено Тогда
			ДатаЗапрета = ПустойОбъект.Получить(Пользователь);
		КонецЕсли;
		// 6. Для раздела, любого объекта (объект = раздел) и любого пользователя.
		Если РазделыПользователей.Получить(ПроверяемыйРаздел) <> Неопределено Тогда 
			РазделПродажи = РазделыПользователей.Получить(ПроверяемыйРаздел);
			ПустойОбъектПродажи = РазделПродажи.Получить(ПроверяемыйРаздел);
			ДатаЗапрета = ПустойОбъектПродажи.Получить(ДляВсехПользователей);
			// 5. Для раздела, любого объекта (объект = раздел) и группы пользователей.
			Если ПустойОбъектПродажи.Получить(ГруппаПользователя) <> Неопределено Тогда
				ДатаЗапрета = ПустойОбъектПродажи.Получить(ГруппаПользователя);
			КонецЕсли;
			// 4. Для раздела, любого объекта (объект = раздел) и пользователя.
			Если ПустойОбъектПродажи.Получить(Пользователь) <> Неопределено Тогда
				ДатаЗапрета = ПустойОбъектПродажи.Получить(Пользователь);
			КонецЕсли;
			// 3. Для раздела, объекта и любого пользователя.
			Если РазделПродажи.Получить(Организация) <> Неопределено Тогда
				ПроверяемыйОбъект = РазделПродажи.Получить(Организация);
				ДатаЗапрета = ПроверяемыйОбъект.Получить(ДляВсехПользователей);
				// 2. Для раздела, объекта и группы пользователей.
				Если ПроверяемыйОбъект.Получить(ГруппаПользователя) <> Неопределено Тогда
					ДатаЗапрета = ПроверяемыйОбъект.Получить(ГруппаПользователя);
				КонецЕсли;
				// 1. Для раздела, объекта и пользователя.
				Если ПроверяемыйОбъект.Получить(Пользователь) <> Неопределено Тогда
					ДатаЗапрета = ПроверяемыйОбъект.Получить(Пользователь);
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
	
	Возврат ДатаЗапрета;
	
КонецФункции 

&НаСервере
Процедура СоздатьОтчетНаСервере()

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ВыполнитьСозданиеОбновлениеОтчетаКомиссионера(Настройки);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОтчет(Команда)
	
    ПроверитьЗаполнение();
	
	СоздатьОтчетНаСервере();

КонецПроцедуры
