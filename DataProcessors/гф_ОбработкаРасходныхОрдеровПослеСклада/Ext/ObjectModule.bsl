
Процедура ВыполнитьОперацииСРасходнымиОрдерами() Экспорт
	
	МассивДокументов = ПодобратьРасходныеОрдера();
	
	Если МассивДокументов.Количество() > 0 Тогда  
		
		 СоздатьНовыеРасходныеОрдераНаОстатки(МассивДокументов);
		
	КонецЕсли;
	 
	ДокументыПеремещения = ПолучитьДокументыПеремещений();
	
	Если ДокументыПеремещения.Количество() > 0 Тогда 
		
		ИзменитьСтатусыПеремещений(ДокументыПеремещения); 
		
	КонецЕсли;
	
	Если Истина Тогда  // Должно быть прописано условие выбора из РС КМ для перемаркировки
		
		 // Видимо будем искать в РС документы перемаркировки и при условии что все перемаркировки в РС имеют стату Подтверждено
		 // то переводить Заявку в статус гф_ЗаявкаОбработанаВРМК
		
	КонецЕсли;
	
	ОбработанныеЗаявки = ПодобратьОбработанныеЗаявкиДляПеремещения(); 
	
	Если ОбработанныеЗаявки.Количество() > 0 Тогда
		
		СоздатьПеремещения(ОбработанныеЗаявки);
		
	КонецЕсли;

	
КонецПроцедуры 

Функция ПодобратьРасходныеОрдера() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	гф_ГлобальныеЗначенияСписок.Значение КАК Склад
		|ПОМЕСТИТЬ ВиртуальныеСклады
		|ИЗ
		|	ПланВидовХарактеристик.гф_ГлобальныеЗначения.Список КАК гф_ГлобальныеЗначенияСписок
		|ГДЕ
		|	гф_ГлобальныеЗначенияСписок.Ссылка.Ключ = &Ключ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары.ОтгружаемыеТовары КАК РасходныйОрдерНаТоварыОтгружаемыеТовары
		|ГДЕ
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Ссылка.Статус = &Статус
		|	И РасходныйОрдерНаТоварыОтгружаемыеТовары.Действие = &Действие
		|	И РасходныйОрдерНаТоварыОтгружаемыеТовары.Ссылка.Получатель В
		|			(ВЫБРАТЬ
		|				ВиртуальныеСклады.Склад
		|			ИЗ
		|				ВиртуальныеСклады КАК ВиртуальныеСклады)
		|	И РасходныйОрдерНаТоварыОтгружаемыеТовары.Ссылка.СкладскаяОперация = &СкладскаяОперация";
	
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыРасходныхОрдеров.КОтгрузке);
	Запрос.УстановитьПараметр("Ключ", "гф_ВиртуальныеСклады");
	Запрос.УстановитьПараметр("Действие", Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.НеОтгружать);
	Запрос.УстановитьПараметр("СкладскаяОперация", Перечисления.СкладскиеОперации.ОтгрузкаПоПеремещению);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Процедура СоздатьНовыеРасходныеОрдераНаОстатки(МассивДокументов)
	
	Для каждого Документ Из МассивДокументов Цикл
		
		СтрокиДляПереноса = ПолучитьСтроки(Документ);
		
		Если СтрокиДляПереноса = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(" Нет строки со значением ""не отгружать"" .");
			Продолжить;
		КонецЕсли;
		
		НовыйОрдер = ПеренестиВНовыйОрдерСервер(Неопределено, СтрокиДляПереноса, Документ);
		Если ЗначениеЗаполнено(НовыйОрдер) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Создан новый ордер." + НовыйОрдер.Ссылка);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры     

Функция ПеренестиВНовыйОрдерСервер(ЗаданиеНаПеревозку, СтрокиДляПереноса, Документ)
	
	ИсточникОбъект = Документ.ПолучитьОбъект(); 
	ИсточникОбъект.ДополнительныеСвойства.Вставить("гф_ОбменСоСкладом", Истина);
	НовыйОрдер = Документы.РасходныйОрдерНаТовары.РазбитьОрдер(ИсточникОбъект, СтрокиДляПереноса,,ЗаданиеНаПеревозку);
	НовыйОрдерОбъект = НовыйОрдер.ПолучитьОбъект();
	
	НовыйОрдерОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.Подготовлено;
	НовыйОрдерОбъект.ДополнительныеСвойства.Вставить("гф_ОбменСоСкладом", Истина);
	Для Каждого Стр Из НовыйОрдерОбъект.ОтгружаемыеТовары Цикл
		Стр.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать;
	КонецЦикла;
	Попытка
		НовыйОрдерОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
	    ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не вариант " + ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат НовыйОрдер; 
	
КонецФункции

Функция ПолучитьСтроки(Документ)
	
	СтрокиДляПереноса = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Ссылка КАК Ссылка,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.НомерСтроки КАК НомерСтроки,
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Действие КАК Действие
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары.ОтгружаемыеТовары КАК РасходныйОрдерНаТоварыОтгружаемыеТовары
		|ГДЕ
		|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Действие = &Действие
		|	И РасходныйОрдерНаТоварыОтгружаемыеТовары.Ссылка = &ссылка";
	
	Запрос.УстановитьПараметр("Действие", Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.НеОтгружать);
	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("НомерСтроки");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДокументыПеремещений()  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПеремещениеТоваровТовары.Ссылка КАК Ссылка,
		|	СУММА(ПеремещениеТоваровТовары.Количество) КАК КоличествоПеремещений
		|ПОМЕСТИТЬ ТЧПеремещений
		|ИЗ
		|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		|ГДЕ
		|	ПеремещениеТоваровТовары.Ссылка.Статус = &СтатусПерем
		|
		|СГРУППИРОВАТЬ ПО
		|	ПеремещениеТоваровТовары.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение КАК Распоряжение,
		|	СУММА(РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Количество) КАК КоличествоРО
		|ПОМЕСТИТЬ ТЧРасходныйОрдер
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
		|ГДЕ
		|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение В
		|			(ВЫБРАТЬ
		|				ТЧПеремещений.Ссылка
		|			ИЗ
		|				ТЧПеремещений КАК ТЧПеремещений)
		|	И РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка.Статус = &СтатусРО
		|
		|СГРУППИРОВАТЬ ПО
		|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЧПеремещений.Ссылка КАК Ссылка
		|ИЗ
		|	ТЧПеремещений КАК ТЧПеремещений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЧРасходныйОрдер КАК ТЧРасходныйОрдер
		|		ПО ТЧПеремещений.Ссылка = ТЧРасходныйОрдер.Распоряжение
		|ГДЕ
		|	ТЧПеремещений.КоличествоПеремещений = ТЧРасходныйОрдер.КоличествоРО";
	
	Запрос.УстановитьПараметр("СтатусПерем", Перечисления.СтатусыПеремещенийТоваров.Отгружено);
	Запрос.УстановитьПараметр("СтатусРО", Перечисления.СтатусыРасходныхОрдеров.Отгружен);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецФункции

Процедура ИзменитьСтатусыПеремещений(ДокументыПеремещения) 
	
	Для каждого Перемещение Из ДокументыПеремещения Цикл
		
		ПеремещениеОб = Перемещение.ПолучитьОбъект();
		ПеремещениеОб.Статус = Перечисления.СтатусыПеремещенийТоваров.Принято;
		
		Попытка
			ПеремещениеОб.Записать(РежимЗаписиДокумента.Проведение);
			ЗаявкаНаВозвратПодборЗапись(Перемещение);
		Исключение 
			//ПеремещениеОб.Записать(РежимЗаписиДокумента.Запись);
			Сообщение = "В документе " + Перемещение + " Не измен статус на ""Принято""." + Символы.ПС + ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("Информация", УровеньЖурналаРегистрации.Информация, ЭтотОбъект, ЭтотОбъект, Сообщение);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры 

Процедура ЗаявкаНаВозвратПодборЗапись(Перемещение)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПеремещениеТоваров.гф_ЗаявкаНаВозврат КАК гф_ЗаявкаНаВозврат
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Перемещение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка.Следующий();
		
		ЗаявкаНаВозврат = Выборка.гф_ЗаявкаНаВозврат;
		ЗаявкаНаВозвратОб = ЗаявкаНаВозврат.ПолучитьОбъект();
		ЗаявкаНаВозвратОб.Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.гф_ЗаявкаПереданаВРМК;
		
		Попытка
			ЗаявкаНаВозвратОб.Записать(РежимЗаписиДокумента.Проведение);
		Исключение 
			ЗаявкаНаВозвратОб.Записать(РежимЗаписиДокумента.Запись);
			Сообщение = "В документе " + ЗаявкаНаВозврат + " Измен статус на ""Заявка передана в РМК"", провести документ не удалось";
			ЗаписьЖурналаРегистрации("Информация", УровеньЖурналаРегистрации.Информация, ЭтотОбъект, ЭтотОбъект, Сообщение);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодобратьОбработанныеЗаявкиДляПеремещения()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаНаВозвратТоваровОтКлиента.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозвратТоваровОтКлиента
		|ГДЕ
		|	ЗаявкаНаВозвратТоваровОтКлиента.Статус = &Статус";
	
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.гф_ЗаявкаОбработанаВРМК);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Процедура СоздатьПеремещения(ОбработанныеЗаявки)
	
	УстановитьПривилегированныйРежим(Истина);

	ВиртуальныеСклады = _омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначениеМассив("гф_ВиртуальныеСклады");
	
	Для каждого Документ Из  ОбработанныеЗаявки Цикл
		Для Каждого Склад Из ВиртуальныеСклады Цикл
			Если Склад.гф_Организация = Документ.Организация Тогда
				ВиртуальныйСклад = Склад;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("гф_ЗаказатьКМ", Истина);
		
		ТоварыДляЗагрузки = Документ.ВозвращаемыеТовары.Выгрузить(СтруктураОтбора);
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("Товары", ТоварыДляЗагрузки); 
		
		ПеремещениеОбъект = Документы.ПеремещениеТоваров.СоздатьДокумент();
		ПеремещениеОбъект.Заполнить(ДанныеЗаполнения);
		ПеремещениеОбъект.Организация = Документ.Организация;
		ПеремещениеОбъект.СкладОтправитель = ВиртуальныйСклад;
		ПеремещениеОбъект.СкладПолучатель = Документ.Склад; 
		ПеремещениеОбъект.Дата = ТекущаяДатаСеанса();
		ПеремещениеОбъект.Статус = Перечисления.СтатусыПеремещенийТоваров.Отгружено;
		ПеремещениеОбъект.гф_ЗаявкаНаВозврат = Документ.Ссылка; 
				
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение); 
		
		Попытка
			ПеремещениеОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ПеремещениеОбъект.гф_ПроверитьСоздатьОрдераПоПеремещению(ПеремещениеОбъект, ПараметрыЗаписи);
			ОбщегоНазначения.СообщитьПользователю("Создан документ " + ПеремещениеОбъект.Ссылка );
		Исключение
			ОбщегоНазначения.СообщитьПользователю("Не удалось создать документ ""Перемещение товаров""" +
			"со склада " + ВиртуальныйСклад + " на склад " + Документ.Склад );
		КонецПопытки; 
	КонецЦикла;
	
КонецПроцедуры  
