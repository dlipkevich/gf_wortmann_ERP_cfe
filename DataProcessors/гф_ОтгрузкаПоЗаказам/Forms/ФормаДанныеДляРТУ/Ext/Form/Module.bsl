
//&НаСервере
//Процедура ЗаписатьНаСервере()
//	// Вставить содержимое обработчика.
//КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	Результат = ЗаполнитьРезультат();
	//Результат = ЗаполнитьРезультат();
	ДанныеИзменены = Ложь;
	
	СтруктураВозврата = Новый Структура();
	
	СтруктураВозврата.Вставить("Действие", "ЗаписатьСкидкиПродолжить");
	СтруктураВозврата.Вставить("Результат", Результат);
	Закрыть(СтруктураВозврата);
	
	//Закрыть(Результат);
КонецПроцедуры
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ДатаДляРТУ = ТекущаяДатаСеанса();
	ЦифровойКодВалюты = "978";
	КурсЕвро = ПолучитьКурсЕвро(ДатаДляРТУ, ЦифровойКодВалюты);
	ЗаполнитьТЧСкидкиПоЗаказам();
	ЗаполнитьТЧСкидки();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧСкидкиПоЗаказам()
	Для Каждого ЭлементМассива Из Параметры.СкидкиПоЗаказам Цикл
		нс = Объект.СкидкиПоЗаказам.Добавить();
		ЗаполнитьЗначенияСвойств(нс, ЭлементМассива);
	КонецЦикла;
	Для Каждого ЭлементМассива Из Параметры.МассивЗаказы Цикл
		СтрокиПоЗаказу = Объект.СкидкиПоЗаказам.НайтиСтроки(Новый Структура("Заказ", ЭлементМассива));
		Если СтрокиПоЗаказу.Количество() = 0 Тогда
			нс = Объект.СкидкиПоЗаказам.Добавить();
			нс.Заказ = ЭлементМассива;
		КонецЕсли;
	КонецЦикла;
	Для Каждого нс Из Объект.СкидкиПоЗаказам Цикл
		Если ЗначениеЗаполнено(нс.Заказ.Склад) Тогда
			нс.КоробнойСклад = ЭтоТоварыВКоробах(нс.Заказ.Склад);
		КонецЕсли;
		нс.СезонныйЗаказ = нс.Заказ.гф_СезонныйЗаказ;
		нс.КоличествоДнейОтсрочкиПлатежа = НайтиКоличествоДнейОтсрочкиПлатежа(нс.Заказ.Договор);
		мКоличествоДнейОтсрочкиПлатежа = нс.КоличествоДнейОтсрочкиПлатежа;
		мОрганизация = нс.Заказ.Организация;
		мКонтрагент = нс.Заказ.Контрагент;
		мДоговор = нс.Заказ.Договор;
		мСезонныйЗаказ = нс.Заказ.гф_СезонныйЗаказ;;
	КонецЦикла;
	Объект.СкидкиПоЗаказам.Сортировать("Заказ");
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧСкидки()
	ТаблицаСкидок = Новый ТаблицаЗначений;
	ТаблицаСкидок.Колонки.Добавить("ВидСкидки");
	ТаблицаСкидок.Колонки.Добавить("Порядок");
	
	// добавляем скидки из регистра гф_ДопустимыеЗначенияСкидок
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	гф_ДопустимыеЗначенияСкидок.ВидСкидки КАК ВидСкидки
	               |ИЗ
	               |	РегистрСведений.гф_ДопустимыеЗначенияСкидок КАК гф_ДопустимыеЗначенияСкидок
	               |ГДЕ
	               |	гф_ДопустимыеЗначенияСкидок.ИспользоватьДляРТУ
	               |	И НЕ гф_ДопустимыеЗначенияСкидок.ВидСкидки В(&ВидыСкидок)";
	Запрос.УстановитьПараметр("ВидыСкидок", Объект.Скидки.Выгрузить().ВыгрузитьКолонку("ВидСкидки"));
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТаблицаСкидок.Найти(Выборка.ВидСкидки, "ВидСкидки") = Неопределено Тогда
			СтрокаСкидки = ТаблицаСкидок.Добавить();
			СтрокаСкидки.ВидСкидки = Выборка.ВидСкидки;
			СтрокаСкидки.Порядок = ?(СтрокаСкидки.ВидСкидки = Перечисления.гф_ВидыСкидок.СкидкаЗаПредоплату, 0, 1);
		КонецЕсли;
	КонецЦикла;
	ТаблицаСкидок.Сортировать("Порядок");
	
	СкидкаЗаПредоплату = 0;
	Для Каждого СтрокаСкидки Из ТаблицаСкидок Цикл
		СтруктураПоиска = Новый Структура("ВидСкидки", СтрокаСкидки.ВидСкидки);
		СтрокиПоЗаказу = Объект.Скидки.НайтиСтроки(СтруктураПоиска);
		Если СтрокиПоЗаказу.Количество() = 0 Тогда
			нс = Объект.Скидки.Добавить();
			нс.ВидСкидки = СтрокаСкидки.ВидСкидки;
			нс.СкидкаРасчетная = ПолучитьРасчетнуюСкидкуПоЗаказу(нс.ВидСкидки, ДатаДляРТУ, КурсЕвро, СкидкаЗаПредоплату);
			нс.СкидкаДляРТУ = нс.СкидкаРасчетная;
			нс.СкидкаПоРегистру = ПолучитьСкидкуПоРегистру(нс.ВидСкидки, ДатаДляРТУ);
		КонецЕсли;
	КонецЦикла;
	Объект.Скидки.Сортировать("ВидСкидки");
КонецПроцедуры

&НаСервере
Процедура ВыполнитьРасчетИтогов(Заказ)
	Если Не ЗначениеЗаполнено(Заказ) Тогда
		Возврат;
	КонецЕсли;
	ИтогРасчетнаяСкидка = 0;
	ИтогСкидкаДляРТУ = 0;
	ИтогСкидкаПоРегистру = 0;
	Для Каждого СтрокаТЧ Из Объект.Скидки Цикл
		Если СтрокаТЧ.Заказ <> Заказ Тогда
			Продолжить;
		КонецЕсли;
		// суммирую колонку Скидку расчетную
		ИтогРасчетнаяСкидка = ИтогРасчетнаяСкидка + СтрокаТЧ.СкидкаРасчетная;
		// суммирую колонку Скидку для РТУ
		ИтогСкидкаДляРТУ = ИтогСкидкаДляРТУ + СтрокаТЧ.СкидкаДляРТУ;
		// суммирую колонку Скидку по регистру
		ИтогСкидкаПоРегистру = ИтогСкидкаПоРегистру + СтрокаТЧ.СкидкаПоРегистру;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура РассчитатьСкидкуДляРТУ()
	СкидкаДляРТУ = 1;
	Для Каждого СтрокаТЗ Из Объект.Скидки Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЗ.СкидкаДляРТУ) Тогда
			Продолжить;
		КонецЕсли;
		СкидкаДляРТУ = СкидкаДляРТУ * (1 - СтрокаТЗ.СкидкаДляРТУ/100);
	КонецЦикла;
	// с учетом %Скидки из заказа
	СкидкаДляРТУ = СкидкаДляРТУ * (1 - ПроцентСкидкиМаксимум/100);
	мСкидкаДляРТУ = (1 - СкидкаДляРТУ) * 100;
	// сохраняем Скидку для Заказов
	Для Каждого СтрокаТЧ Из Объект.СкидкиПоЗаказам Цикл
		СтрокаТЧ.СкидкаДляРТУ = мСкидкаДляРТУ;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СохранитьСкидкуДляРТУпоЗаказу(Заказ)
	СтруктураПоиска = Новый Структура("Заказ", Заказ);
	СтрокиЗаказа = Объект.СкидкиПоЗаказам.НайтиСтроки(СтруктураПоиска);
	Если СтрокиЗаказа.Количество() > 0 Тогда
		СтрокаЗаказа = СтрокиЗаказа[0];
		СтрокаЗаказа.СкидкаДляРТУ = ИтогСкидкаДляРТУ;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоТоварыВКоробах(Склад)
	Если Не ЗначениеЗаполнено(Склад) Тогда
		Возврат Ложь;
	КонецЕсли;
	ТоварыВКоробах = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("ИдентификаторДляФормул", "гф_СкладыТоварыВКоробах");
	
	ТоварыВКоробахЗначение = УправлениеСвойствами.ЗначениеСвойства(Склад, ТоварыВКоробах);	
	
	Если ЗначениеЗаполнено(ТоварыВКоробахЗначение) И ТоварыВКоробахЗначение = Истина Тогда
		 Возврат Истина;
	Иначе
		 Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция НайтиКоличествоДнейОтсрочкиПлатежа(Договор)
	Если Не ЗначениеЗаполнено(Договор) Тогда
		Возврат 0;
	КонецЕсли;
	ДопРеквизит = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("ИдентификаторДляФормул", "гф_ДоговорыКонтрагентовКоличествоДнейОтсрочкиПлатежа");
	КоличествоДнейОтсрочкиПлатежа = УправлениеСвойствами.ЗначениеСвойства(Договор, ДопРеквизит);
	Если ЗначениеЗаполнено(КоличествоДнейОтсрочкиПлатежа) Тогда
		Возврат КоличествоДнейОтсрочкиПлатежа;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПолучитьСкидкуПоРегистру(ВидСкидки, Период)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	гф_ИсторияИзмененияСкидокСрезПоследних.Скидка КАК Скидка
	               |ИЗ
	               |	РегистрСведений.гф_ИсторияИзмененияСкидок.СрезПоследних(
	               |			&Период,
	               |			ВидСкидки = &ВидСкидки
	               |				И Договор = &Договор
	               |				И Контрагент = &Контрагент
	               |				И Организация = &Организация) КАК гф_ИсторияИзмененияСкидокСрезПоследних";
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ВидСкидки", ВидСкидки);
	Запрос.УстановитьПараметр("Контрагент", мКонтрагент);
	Запрос.УстановитьПараметр("Договор", мДоговор);
	Запрос.УстановитьПараметр("Организация", мОрганизация);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Скидка;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПолучитьРасчетнуюСкидкуПоЗаказуСезонныйЗаказ(ВидСкидки, Дата, КурсЕвро, СкидкаЗаПредоплату)
	
	// Сезонный заказ
	
	// Скидка за предоплату
	Если ВидСкидки = Перечисления.гф_ВидыСкидок.СкидкаЗаПредоплату Тогда
		СкидкаПоРегистру = ПолучитьСкидкуПоРегистру(ВидСкидки, Дата);
		Если СкидкаПоРегистру > 0 Тогда
			СкидкаЗаПредоплату = СкидкаПоРегистру;
			Возврат СкидкаПоРегистру;
		Иначе
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	// Скидка за курс
	Если	ВидСкидки = Перечисления.гф_ВидыСкидок.СкидкаЗаКурс
		И	СкидкаЗаПредоплату <= 0
		И	КурсЕвро < 70 Тогда
		СкидкаПоРегистру = ПолучитьСкидкуПоРегистру(ВидСкидки, Дата);
		Возврат СкидкаПоРегистру;
	Иначе
		Возврат 0;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции	

&НаСервере
Функция ПолучитьРасчетнуюСкидкуПоЗаказу(ВидСкидки, Дата, КурсЕвро, СкидкаЗаПредоплату)
	
	Если мКоличествоДнейОтсрочкиПлатежа > 0 Тогда
		Возврат 0;
	КонецЕсли;
		
	Если мСезонныйЗаказ Тогда
		// Сезонный заказ
		
		Возврат ПолучитьРасчетнуюСкидкуПоЗаказуСезонныйЗаказ(ВидСкидки, Дата, КурсЕвро, СкидкаЗаПредоплату);
		
	Иначе
		// НЕ Сезонный заказ
		
		// Скидка за курс
		Если	ВидСкидки = Перечисления.гф_ВидыСкидок.СкидкаЗаКурс
			И	КурсЕвро < 70 Тогда
			СкидкаПоРегистру = ПолучитьСкидкуПоРегистру(ВидСкидки, Дата);
			Возврат СкидкаПоРегистру;
		Иначе
			Возврат 0;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПроцентСкидкиПоЗаказу(Заказ)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Заказ);
	Запрос.Текст = "ВЫБРАТЬ
	               |	МАКСИМУМ(ЗаказКлиентаТовары.ПроцентРучнойСкидки) КАК Скидка
	               |ИЗ
	               |	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	               |ГДЕ
	               |	ЗаказКлиентаТовары.Ссылка = &Ссылка";
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Скидка;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ДанныеИзменены = Ложь;
	ЗаполнитьПроцентСкидки();
	РассчитатьСкидкуДляРТУ();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПроцентСкидки()
	ПроцентСкидкиМинимум = 0;
	ПроцентСкидкиМаксимум = 0;
	Для Каждого СтрокаТЗ Из Объект.СкидкиПоЗаказам Цикл
		СкидкаПоЗаказу = ПолучитьПроцентСкидкиПоЗаказу(СтрокаТЗ.Заказ);
		// Процент скидки минимум
		Если Не ЗначениеЗаполнено(ПроцентСкидкиМинимум) Тогда
			ПроцентСкидкиМинимум = СкидкаПоЗаказу;
		Иначе
			ПроцентСкидкиМинимум = ?(ПроцентСкидкиМинимум > СкидкаПоЗаказу, СкидкаПоЗаказу, ПроцентСкидкиМинимум);
		КонецЕсли;
		// Процент скидки максимум
		Если Не ЗначениеЗаполнено(ПроцентСкидкиМаксимум) Тогда
			ПроцентСкидкиМаксимум = СкидкаПоЗаказу;
		Иначе
			ПроцентСкидкиМаксимум = ?(ПроцентСкидкиМаксимум < СкидкаПоЗаказу, СкидкаПоЗаказу, ПроцентСкидкиМаксимум);
		КонецЕсли;
	КонецЦикла;
	Если ПроцентСкидкиМинимум <> ПроцентСкидкиМаксимум Тогда
		ПроцентСкидки = "" + Формат(ПроцентСкидкиМинимум, "ЧДЦ=2; ЧН=0,00") + " - " + Формат(ПроцентСкидкиМаксимум, "ЧДЦ=2; ЧН=0,00");
	Иначе
		ПроцентСкидки = "" + Формат(ПроцентСкидкиМинимум, "ЧДЦ=2; ЧН=0,00");
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКурсЕвро(Дата, ЦифровойКодВалюты)
	Валюта = Справочники.Валюты.НайтиПоКоду(ЦифровойКодВалюты);
	СтруктураКурса = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(Валюта, Дата);
	Возврат СтруктураКурса.КурсЧислитель;
КонецФункции

&НаКлиенте
Процедура ДатаДляРТУПриИзменении(Элемент)
	КурсЕвро = ПолучитьКурсЕвро(ДатаДляРТУ, ЦифровойКодВалюты);
	Объект.Скидки.Очистить();
	ЗаполнитьТЧСкидки();
	ЗаполнитьПроцентСкидки();
	РассчитатьСкидкуДляРТУ();
КонецПроцедуры

&НаКлиенте
Процедура СкидкиПоЗаказамЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаСервере
Функция ЗаполнитьРезультат()
	Результат = Новый Массив;
	
	//Для Каждого СтрокаТЧ Из Объект.СкидкиПоЗаказам Цикл
	//	СкидкаПоЗаказу = Новый Структура("Заказ, СкидкаДляРТУ");
	//	ЗаполнитьЗначенияСвойств(СкидкаПоЗаказу, СтрокаТЧ);
	//	
	//	СкидкаПоЗаказу.Вставить("ДатаДляРТУ", ДатаДляРТУ);
	//	СкидкаПоЗаказу.Вставить("КомментарийРТУ", КомментарийРТУ);
	//	Результат.Добавить(СкидкаПоЗаказу);
	//	
	//КонецЦикла;
	
	Для Каждого СтрокаТЧ Из Объект.Скидки Цикл
		
		Если Не СтрокаТЧ.СкидкаДляРТУ = 0 Тогда
			
			СкидкаПоЗаказу = Новый Структура("Заказ, СкидкаДляРТУ");
			ЗаполнитьЗначенияСвойств(СкидкаПоЗаказу, СтрокаТЧ);
			
			КомментарийРТУ = "" + СтрокаТЧ.ВидСкидки + " " + СтрокаТЧ.СкидкаДляРТУ + "% ";
			
			СкидкаПоЗаказу.Вставить("ДатаДляРТУ", ДатаДляРТУ);
			СкидкаПоЗаказу.Вставить("КомментарийРТУ", КомментарийРТУ);
			
			Результат.Добавить(СкидкаПоЗаказу);
		КонецЕсли;
	
	КонецЦикла;
		
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура СохранитьСкидкуДляРТУ(Команда)
	Для Каждого СтрокаТЧ Из Объект.СкидкиПоЗаказам Цикл
		СтрокаТЧ.СкидкаДляРТУ = мСкидкаДляРТУ;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	//Результат = ЗаполнитьРезультат();
	//Закрыть(Результат);
	
	Если ДанныеИзменены Тогда
		
		Сообщить("Данные не были записаны!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкиСкидкаДляРТУПриИзменении(Элемент)
	РассчитатьСкидкуДляРТУ();
КонецПроцедуры

&НаКлиенте
Процедура СкидкиПоЗаказамПриИзменении(Элемент)
	ДанныеИзменены = Истина;
КонецПроцедуры

#КонецОбласти
