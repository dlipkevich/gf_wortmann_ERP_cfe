
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ДатаДляРТУ = ТекущаяДатаСеанса();
	ЦифровойКодВалюты = "978";
	КурсЕвро = ПолучитьКурсЕвро(ДатаДляРТУ, ЦифровойКодВалюты);
	ЗаполнитьТЧСкидкиПоЗаказам();
	ЗаполнитьТЧСкидки();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧСкидкиПоЗаказам()
	Для Каждого ЭлементМассива Из Параметры.СкидкиПоЗаказам Цикл
		нс = Объект.СкидкиПоЗаказам.Добавить();
		ЗаполнитьЗначенияСвойств(нс, ЭлементМассива);
	КонецЦикла;
	Для Каждого ЭлементМассива Из Параметры.МассивЗаказы Цикл
		СтрокиПоЗаказу = Объект.СкидкиПоЗаказам.НайтиСтроки(Новый Структура("Заказ", ЭлементМассива));
		Если СтрокиПоЗаказу.Количество() = 0 Тогда
			нс = Объект.СкидкиПоЗаказам.Добавить();
			нс.Заказ = ЭлементМассива;
		КонецЕсли;
	КонецЦикла;
	Для Каждого нс Из Объект.СкидкиПоЗаказам Цикл
		Если ЗначениеЗаполнено(нс.Заказ.Склад) Тогда
			нс.КоробнойСклад = ЭтоТоварыВКоробах(нс.Заказ.Склад);
		КонецЕсли;
		Если ЗначениеЗаполнено(нс.Заказ.Договор) Тогда
			Если ЗначениеЗаполнено(нс.Заказ.Договор.гф_Сезон) Тогда
				нс.СезонныйЗаказ = Истина;
			КонецЕсли;
		КонецЕсли;
		нс.КоличествоДнейОтсрочкиПлатежа = НайтиКоличествоДнейОтсрочкиПлатежа(нс.Заказ.Договор);
	КонецЦикла;
	Объект.СкидкиПоЗаказам.Сортировать("Заказ");
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧСкидки()
	МассивВидыСкидок = Новый Массив;
	МассивВидыСкидок.Добавить(Перечисления.гф_ВидыСкидок.СкидкаЗаКурс);
	МассивВидыСкидок.Добавить(Перечисления.гф_ВидыСкидок.СкидкаЗаОбъем);
	МассивВидыСкидок.Добавить(Перечисления.гф_ВидыСкидок.СкидкаЗаПредоплату);
	МассивВидыСкидок.Добавить(Перечисления.гф_ВидыСкидок.РекламационныйБонус);
	МассивВидыСкидок.Добавить(Перечисления.гф_ВидыСкидок.РучнаяСкидка);
	// добавляем скидки из регистра гф_ДопустимыеЗначенияСкидок
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	гф_ДопустимыеЗначенияСкидок.ВидСкидки КАК ВидСкидки
	               |ИЗ
	               |	РегистрСведений.гф_ДопустимыеЗначенияСкидок КАК гф_ДопустимыеЗначенияСкидок
	               |ГДЕ
	               |	гф_ДопустимыеЗначенияСкидок.ИспользоватьДляРТУ
	               |	И НЕ гф_ДопустимыеЗначенияСкидок.ВидСкидки В(&ВидыСкидок)";
	Запрос.УстановитьПараметр("ВидыСкидок", Объект.Скидки.Выгрузить().ВыгрузитьКолонку("ВидСкидки"));
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если МассивВидыСкидок.Найти(Выборка.ВидСкидки) = Неопределено Тогда
			МассивВидыСкидок.Добавить(Выборка.ВидСкидки);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаЗаказа Из Объект.СкидкиПоЗаказам Цикл
		Для Каждого ВидСкидки Из МассивВидыСкидок Цикл
			СтруктураПоиска = Новый Структура("Заказ, ВидСкидки", СтрокаЗаказа.Заказ, ВидСкидки);
			СтрокиПоЗаказу = Объект.Скидки.НайтиСтроки(СтруктураПоиска);
			Если СтрокиПоЗаказу.Количество() = 0 Тогда
				нс = Объект.Скидки.Добавить();
				нс.Заказ = СтрокаЗаказа.Заказ;
				нс.ВидСкидки = ВидСкидки;
				// Ручная скидка
				нс.СкидкаРасчетная = ПолучитьСкидкуПоЗаказу(СтрокаЗаказа.Заказ, СтрокаЗаказа.КоробнойСклад, ВидСкидки, ДатаДляРТУ, КурсЕвро);
				нс.СкидкаПоРегистру = ПолучитьСкидкуПоРегистру(нс.Заказ, нс.ВидСкидки, ДатаДляРТУ);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Объект.Скидки.Сортировать("Заказ, ВидСкидки");
КонецПроцедуры

&НаСервере
Процедура ВыполнитьРасчетИтогов(Заказ)
	Если Не ЗначениеЗаполнено(Заказ) Тогда
		Возврат;
	КонецЕсли;
	// ИтогРасчетнаяСкидка
	РучнаяСкидка = 0;
	СкидкаЗаКурс = 0;
	ИтогРасчетнаяСкидка = 0;
	Для Каждого СтрокаТЧ Из Объект.Скидки Цикл
		Если СтрокаТЧ.Заказ <> Заказ Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаТЧ.ВидСкидки = Перечисления.гф_ВидыСкидок.РучнаяСкидка Тогда
			РучнаяСкидка = СтрокаТЧ.СкидкаРасчетная;
		КонецЕсли;
		Если СтрокаТЧ.ВидСкидки = Перечисления.гф_ВидыСкидок.СкидкаЗаКурс Тогда
			СкидкаЗаКурс = СтрокаТЧ.СкидкаРасчетная;
		КонецЕсли;
		// временно суммирую колонку Скидку расчетную
		ИтогРасчетнаяСкидка = ИтогРасчетнаяСкидка + СтрокаТЧ.СкидкаРасчетная;
	КонецЦикла;
	//Если ЗначениеЗаполнено(СкидкаЗаКурс) Тогда
	//	ИтогРасчетнаяСкидка = РучнаяСкидка * СкидкаЗаКурс;
	//Иначе
	//	ИтогРасчетнаяСкидка = РучнаяСкидка;
	//КонецЕсли;
	СтруктураПоиска = Новый Структура("Заказ", Заказ);
	СтрокиЗаказа = Объект.СкидкиПоЗаказам.НайтиСтроки(СтруктураПоиска);
	Если СтрокиЗаказа.Количество() > 0 Тогда
		СтрокаЗаказа = СтрокиЗаказа[0];
		СтрокаЗаказа.СкидкаДляРТУ = ИтогРасчетнаяСкидка;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоТоварыВКоробах(Склад)
	Если Не ЗначениеЗаполнено(Склад) Тогда
		Возврат Ложь;
	КонецЕсли;
	ТоварыВКоробах = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("ИдентификаторДляФормул", "гф_СкладыТоварыВКоробах");
	
	ТоварыВКоробахЗначение = УправлениеСвойствами.ЗначениеСвойства(Склад, ТоварыВКоробах);	
	
	Если ЗначениеЗаполнено(ТоварыВКоробахЗначение) И ТоварыВКоробахЗначение = Истина Тогда
		 Возврат Истина;
	Иначе
		 Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция НайтиКоличествоДнейОтсрочкиПлатежа(Договор)
	Если Не ЗначениеЗаполнено(Договор) Тогда
		Возврат 0;
	КонецЕсли;
	ДопРеквизит = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("ИдентификаторДляФормул", "гф_ДоговорыКонтрагентовКоличествоДнейОтсрочкиПлатежа");
	КоличествоДнейОтсрочкиПлатежа = УправлениеСвойствами.ЗначениеСвойства(Договор, ДопРеквизит);
	Если ЗначениеЗаполнено(КоличествоДнейОтсрочкиПлатежа) Тогда
		Возврат КоличествоДнейОтсрочкиПлатежа;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСкидкуПоРегистру(Заказ, ВидСкидки, Период)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	гф_ИсторияИзмененияСкидокСрезПоследних.Скидка КАК Скидка
	               |ИЗ
	               |	РегистрСведений.гф_ИсторияИзмененияСкидок.СрезПоследних(
	               |			&Период,
	               |			ВидСкидки = &ВидСкидки
	               |				И Договор = &Договор
	               |				И Контрагент = &Контрагент
	               |				И Организация = &Организация) КАК гф_ИсторияИзмененияСкидокСрезПоследних";
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ВидСкидки", ВидСкидки);
	Запрос.УстановитьПараметр("Контрагент", Заказ.Контрагент);
	Запрос.УстановитьПараметр("Договор", Заказ.Договор);
	Запрос.УстановитьПараметр("Организация", Заказ.Организация);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Скидка;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСкидкуПоЗаказу(Заказ, КоробнойСклад, ВидСкидки, Дата, КурсЕвро)
	Если ВидСкидки = Перечисления.гф_ВидыСкидок.РучнаяСкидка Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Заказ);
		Запрос.Текст = "ВЫБРАТЬ
		               |	МАКСИМУМ(ЗаказКлиентаТовары.ПроцентРучнойСкидки) КАК Скидка
		               |ИЗ
		               |	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		               |ГДЕ
		               |	ЗаказКлиентаТовары.Ссылка = &Ссылка";
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Скидка;
		Иначе
			Возврат 0;
		КонецЕсли;
	ИначеЕсли ВидСкидки = Перечисления.гф_ВидыСкидок.СкидкаЗаКурс Тогда
		Если КурсЕвро < 70 Тогда
			СкидкаПоРегистру = ПолучитьСкидкуПоРегистру(Заказ, ВидСкидки, Дата);
			Возврат СкидкаПоРегистру;
		Иначе
			Возврат 0;
		КонецЕсли;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура СкидкиПоЗаказамПриАктивизацииСтроки(Элемент)
	УстановитьОтборСтрок();
	РассчитатьИтогРасчетнаяСкидка(Элементы.СкидкиПоЗаказам.ТекущиеДанные.Заказ);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьИтогРасчетнаяСкидка(Заказ)
	ИтогРасчетнаяСкидка = 0;
	Для Каждого СтрокаТЧ Из Объект.Скидки Цикл
		Если СтрокаТЧ.Заказ <> Заказ Тогда
			Продолжить;
		КонецЕсли;
		// временно суммирую колонку Скидку расчетную
		ИтогРасчетнаяСкидка = ИтогРасчетнаяСкидка + СтрокаТЧ.СкидкаРасчетная;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСтрок()
	Элементы.Скидки.ОтборСтрок = Новый ФиксированнаяСтруктура("Заказ", Неопределено);
	ТД = Элементы.СкидкиПоЗаказам.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элементы.Скидки.ОтборСтрок = Новый ФиксированнаяСтруктура("Заказ", ТД.Заказ);
	мЗаказКлиента = ТД.Заказ;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьОтборСтрок();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКурсЕвро(Дата, ЦифровойКодВалюты)
	Валюта = Справочники.Валюты.НайтиПоКоду(ЦифровойКодВалюты);
	СтруктураКурса = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(Валюта, Дата);
	Возврат СтруктураКурса.КурсЧислитель;
КонецФункции

&НаКлиенте
Процедура ДатаДляРТУПриИзменении(Элемент)
	КурсЕвро = ПолучитьКурсЕвро(ДатаДляРТУ, ЦифровойКодВалюты);
	ЗаполнитьТЧСкидкиПоЗаказам();
	ЗаполнитьТЧСкидки();
КонецПроцедуры

&НаКлиенте
Процедура СкидкиПоЗаказамЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СкидкиСкидкаРасчетнаяПриИзменении(Элемент)
	РассчитатьИтогРасчетнаяСкидка(Элементы.СкидкиПоЗаказам.ТекущиеДанные.Заказ);
КонецПроцедуры

&НаСервере
Функция ЗаполнитьРезультат()
	Результат = Новый Массив;
	Для Каждого СтрокаТЧ Из Объект.СкидкиПоЗаказам Цикл
		СкидкаПоЗаказу = Новый Структура("Заказ, СкидкаДляРТУ");
		ЗаполнитьЗначенияСвойств(СкидкаПоЗаказу, СтрокаТЧ);
		Результат.Добавить(СкидкаПоЗаказу);
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура СохранитьСкидкуДляРТУ(Команда)
	Для Каждого СтрокаТЧ Из Объект.СкидкиПоЗаказам Цикл
		ВыполнитьРасчетИтогов(СтрокаТЧ.Заказ);
	КонецЦикла;
	РассчитатьИтогРасчетнаяСкидка(Элементы.СкидкиПоЗаказам.ТекущиеДанные.Заказ);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Результат = ЗаполнитьРезультат();
	Закрыть(Результат);
КонецПроцедуры
