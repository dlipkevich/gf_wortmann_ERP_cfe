
#Область ОбработчикиСобытийФормы 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не (РольДоступна("гф_ИспользованиеОтгрузкиПоЗаказам") ИЛИ РольДоступна("ПолныеПрава")) Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'У пользователя недостаточно прав, необходимо право ""Право отгрузки по заказам""!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьЗначениеТоварыВКоробах();
	
	// Временно не используется при открытии
	//Заполнить(Истина);
	
	//РазвернутьДеревоДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДокументовПриИзменении(Элемент)
	
	ЭлементСтрока = Элемент.ТекущиеДанные;
	
	Если Не Объект.ТоварыВКоробках Тогда
		
		Если ЭлементСтрока.КоличествоДоступно >= ЭлементСтрока.КоличествоОтгрузить Тогда
			ЭлементСтрока.Стоимость = ЭлементСтрока.КоличествоОтгрузить * ЭлементСтрока.Цена;
		Иначе 
			
			ЭлементСтрока.КоличествоОтгрузить = ЭлементСтрока.КоличествоДоступно;
			
			ТекстСообщения = НСтр("ru = 'Количество к отгрузке превышает доступное количество!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		    ЭлементСтрока.Отгрузить = Ложь;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.ВидЦены) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указан вид цены!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ЭлементСтрока.Отгрузить = Ложь;
		Возврат;
		
	КонецЕсли;
	
	УстановитьФлажкиНиже(ЭлементСтрока, ЭлементСтрока.Отгрузить);
	УстановитьФлажкиВыше(ЭлементСтрока, ЭлементСтрока.Отгрузить);
	
	РассчитатьОбщуюСтоимостьОтмеченныхКОтгрузкеТоваровКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	УстановитьЗначениеТоварыВКоробах();
	
	Заполнить(Истина);
	
	РазвернутьДеревоДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьРезерв(Команда)
	
	Отказ = Ложь;
	
	СнятьРезервНаСервере(Отказ);
	
	Если Не Отказ Тогда
		Заполнить(Ложь);
		
		РазвернутьДеревоДокументов();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Склад) И Объект.ТоварыВКоробках Тогда
		ЗаполнениеДаннымиПоКоробномуСкладу();
	Иначе
		ЗаполнитьТаблицуОстатковДляНеКоробногоСклада();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеДаннымиПоКоробномуСкладу()
	
	ОтчетОбъект = РеквизитФормыВЗначение("Объект");
	
	СхемаКомпоновки = ОтчетОбъект.ПолучитьМакет("СхемаКомпоновки");
	
	Объект.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
	Объект.КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
	
	СхемаКомпоновкиНоменклатуры = ОтчетОбъект.ПолучитьМакет("СхемаКомпоновкиНоменклатуры");
	
	Объект.КомпоновщикНастроекНоменклатуры.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиНоменклатуры));
	Объект.КомпоновщикНастроекНоменклатуры.ЗагрузитьНастройки(СхемаКомпоновкиНоменклатуры.НастройкиПоУмолчанию);
	
	ДатаПолученияЦен = ТекущаяДата();
	
	ЗаполнитьПоОстаткам(ОтчетОбъект, СхемаКомпоновки, СхемаКомпоновкиНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	
	УстановитьЗначениеТоварыВКоробах();
	
	Заполнить(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура Заполнить(ПервоеОткрытие)
	
	Если Не ПервоеОткрытие И НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		ТекстСообщения = НСтр("ru = 'Не указан Склад!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНаСервере();
	
	РассчитатьОбщуюСтоимостьОтмеченныхКОтгрузкеТоваровКлиент();
	
	Если Не ПервоеОткрытие Тогда
		РазвернутьДеревоДокументов();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОбщуюСтоимостьОтмеченныхКОтгрузкеТоваровКлиент()
	
	Объект.СтоимостьОтмеченныхКОтгрузкеТоваров = 0;
	
	Для Каждого Строка Из ДеревоДокументов.ПолучитьЭлементы() Цикл
		Для Каждого Строка_Н Из Строка.ПолучитьЭлементы() Цикл
			Для Каждого Строка_Т Из Строка_Н.ПолучитьЭлементы() Цикл
				
				Если Строка_Т.Отгрузить И (ЗначениеЗаполнено(Строка_Т.УпаковочныйЛистСсылка) Или ЗначениеЗаполнено(Строка_Т.Номенклатура)) Тогда
					Объект.СтоимостьОтмеченныхКОтгрузкеТоваров = Объект.СтоимостьОтмеченныхКОтгрузкеТоваров + Строка_Т.Стоимость;
				КонецЕсли;
				
			КонецЦикла;	
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткам(ОтчетОбъект, СхемаКомпоновки, СхемаКомпоновкиНоменклатуры)
	
	Дерево = ПолучитьРезультатКомпоновкиДанных(ОтчетОбъект.Склад, ОтчетОбъект.Клиент, СхемаКомпоновки);
	
	Объект.Наличие.Очистить();
	Объект.ДоступностьУпаковочныхЛистов.Очистить();
	
	СтруктураС_ТЗ = ЗаполнитьТаблицуОстатков(Дерево, ОтчетОбъект.Склад, СхемаКомпоновкиНоменклатуры);
	
	// Проверка доступности номенклатуры для формирования расходного ордера,
	// формирование списка упаковочных листов не прошедших проверку
	ПроверкаДоступностиНоменклатуры(Дерево, СтруктураС_ТЗ);
	
	// Удаление строк с упаковочными листами по которым не достаточно номенклатуры для формирования расходного ордера
	УдалениеСтрокСУпаковочнымиЛистамиСверхДоступныхОстатков(Дерево);
	
	// Удаление родителей строк где отсутсвуют упаковочные лмсты полностью
	УдалитьСтрокиБезУпаковочногоЛиста(Дерево);
	
	РассчитатьЛимиты(Дерево);
	
	ПолучитьБлокировки(Дерево);
	
	ДеревоДокументовЭлементы = ДеревоДокументов.ПолучитьЭлементы();
	ДеревоДокументовЭлементы.Очистить();
	
	ЗаполнитьСвойстваСтроки(ДеревоДокументов, Дерево.Строки);
		
КонецПроцедуры

Функция ЗаполнитьТаблицуОстатков(Дерево, Склад, СхемаКомпоновкиДанных)
	
	ТЗУпаковочныеЛисты = Новый ТаблицаЗначений;
	ТЗУпаковочныеЛисты.Колонки.Добавить("УпаковочныйЛист");
	// Заказы необходимы для получения таблицы "Товары" для последующей выгрузки и проверки
	// доступности номенклатуры (оптимизация вемени вывода информации пользователю)
    ТЗУпаковочныеЛисты.Колонки.Добавить("Заказ");
	
	Для Каждого Строка Из Дерево.Строки Цикл
		Для Каждого Строка_Н Из Строка.Строки Цикл
			Для Каждого Строка_Т Из Строка_Н.Строки Цикл
				
				Стр = ТЗУпаковочныеЛисты.Добавить();
				Стр.УпаковочныйЛист = Строка_Т.УпаковочныйЛистСсылка;
                Стр.Заказ = Строка_Т.Заказ;
				// Стоимость с НДС
				Строка_Т.Стоимость = Строка_Т.Стоимость * (1 + Строка_Т.СтавкаНДС.Ставка/100);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	СсылкиНаДокументы = ТЗУпаковочныеЛисты.ВыгрузитьКолонку("УпаковочныйЛист");

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УпаковочныйЛистТовары.Номенклатура КАК Номенклатура
		|ИЗ
		|	Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
		|ГДЕ
		|	УпаковочныйЛистТовары.Ссылка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкиНаДокументы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗНоменклатура = РезультатЗапроса.Выгрузить();
	
	ТЗНоменклатура.Свернуть("Номенклатура");
		
	КомпоновщикНастроек = Объект.КомпоновщикНастроекНоменклатуры;
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	
    ГруппировкаДетальныеПоля = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
    ГруппировкаДетальныеПоля.Использование = Истина;
    Автополе = ГруппировкаДетальныеПоля.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
    Автополе.Использование = Истина;
	
	ПолеПараметрыДанных				= Новый ПолеКомпоновкиДанных("ПараметрыДанных");
	ПолеСистемныеПоля				= Новый ПолеКомпоновкиДанных("СистемныеПоля");
	
    Для Каждого ПолеВыбора Из КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		ВыбранноеПоле = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Использование	= Не (ПолеВыбора.Поле = ПолеПараметрыДанных ИЛИ ПолеВыбора.Поле = ПолеСистемныеПоля);
		ВыбранноеПоле.Поле			= ПолеВыбора.Поле;
	КонецЦикла;	 
	
	ПараметрОбособленныеТовары = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(
		"ПоказатьОбособленныеТовары");
	Если ПараметрОбособленныеТовары <> Неопределено Тогда
		ПараметрОбособленныеТовары.Значение = Истина;
	КонецЕсли;
	
	ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Номенклатура");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ПравоеЗначение	= ТЗНоменклатура.ВыгрузитьКолонку("Номенклатура");
	
	ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Склад");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ПравоеЗначение	= Склад;
	
	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);

	ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.Основной.Запрос;

	ТекстЗапросаВесУпаковки = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
		"Таблица.Номенклатура.ЕдиницаИзмерения", "Таблица.Номенклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаВесНоменклатуры", ТекстЗапросаВесУпаковки);
		
	ТекстЗапросаОбъемУпаковки = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки(
		"Таблица.Номенклатура.ЕдиницаИзмерения", "Таблица.Номенклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаОбъемНоменклатуры", ТекстЗапросаОбъемУпаковки);

	СхемаКомпоновкиДанных.НаборыДанных.Основной.Запрос = ТекстЗапроса;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	ТипГенератора = Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений");
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, , , ТипГенератора);
    
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
    
    ТаблицаКомпоновкаДанных = Новый ТаблицаЗначений;
    
    ПроцессорВыводаРезультатаКомпоновкиДанных = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ПроцессорВыводаРезультатаКомпоновкиДанных.УстановитьОбъект(ТаблицаКомпоновкаДанных);
    ПроцессорВыводаРезультатаКомпоновкиДанных.Вывести(ПроцессорКомпоновкиДанных);
	
	МассивУдалитьСтроки = Новый Массив;
	Для Каждого Строка Из ТаблицаКомпоновкаДанных Цикл
		Если Строка["ТипЗаписи"] <> "Сейчас" Тогда
			МассивУдалитьСтроки.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдалитьСтроку Из МассивУдалитьСтроки Цикл
		ТаблицаКомпоновкаДанных.Удалить(УдалитьСтроку);
	КонецЦикла;
	
	//ТаблицаОстатки = ТаблицаКомпоновкаДанных.Скопировать();
	//ТаблицаОстатки.Свернуть("ЗаказНаОтгрузку, Склад, Номенклатура, Характеристика", "Доступно");
	
	// Заполнение таблицы "Наличие" остатками на складе, данные таблицы используются несколько раз
	//Если Объект.Наличие.Количество() < 1 Тогда
	//	Для Каждого СтрокаОстатки Из ТаблицаОстатки Цикл
	//		Если ЗначениеЗаполнено(СтрокаОстатки.ЗаказНаОтгрузку) Тогда
	//			Строка = Объект.Наличие.Добавить();
	//			Строка.ЗаказНаОтгрузку = СтрокаОстатки.ЗаказНаОтгрузку;
	//			Строка.Склад = СтрокаОстатки.Склад;
	//			Строка.Номенклатура = СтрокаОстатки.Номенклатура;
	//			Строка.Характеристика = СтрокаОстатки.Характеристика;
	//			Строка.Доступно = СтрокаОстатки.Доступно;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаСДанными.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
	|	ТаблицаСДанными.Номенклатура КАК Номенклатура,
	|	ТаблицаСДанными.Характеристика КАК Характеристика,
	|	ТаблицаСДанными.Доступно КАК Доступно
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТаблицаСДанными КАК ТаблицаСДанными
	|ГДЕ
	|	НЕ ТаблицаСДанными.ЗаказНаОтгрузку = Неопределено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
	|	ВТ.Номенклатура КАК Номенклатура,
	|	ВТ.Характеристика КАК Характеристика,
	|	ВТ.Доступно КАК Доступно
	|ИЗ
	|	ВТ КАК ВТ";
	
	Запрос.УстановитьПараметр("ТаблицаСДанными", ТаблицаКомпоновкаДанных);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	РезультатВыборки = РезультатЗапроса.Выгрузить();
	
	Объект.Наличие.Загрузить(РезультатВыборки);
	
	СсылкиНаДокументы = ТЗУпаковочныеЛисты.ВыгрузитьКолонку("УпаковочныйЛист");

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УпаковочныйЛист.Ссылка КАК Ссылка,
		|	УпаковочныйЛист.Товары.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура КАК Номенклатура,
		|		Характеристика КАК Характеристика,
		|		Серия КАК Серия,
		|		Упаковка КАК Упаковка,
		|		КоличествоУпаковок КАК КоличествоУпаковок,
		|		Количество КАК Количество,
		|		УпаковочныйЛист КАК УпаковочныйЛист,
		|		НоменклатураПартнера КАК НоменклатураПартнера,
		|		Комментарий КАК Комментарий,
		|		ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
		|		ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста КАК ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста,
		|		УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
		|		СтатусУказанияСерий КАК СтатусУказанияСерий,
		|		Назначение КАК Назначение,
		|		гф_КодСтроки КАК гф_КодСтроки,
		|		гф_КодСтрокиДополнительныеСведения КАК гф_КодСтрокиДополнительныеСведения
		|	) КАК Товары
		|ИЗ
		|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
		|ГДЕ
		|	УпаковочныйЛист.Ссылка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкиНаДокументы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗ_Результат = РезультатЗапроса.Выгрузить();
	
	Возврат Новый Структура("УпаковочныеЛистыСТаблицейТовары, НаличиеНоменклатурыИзКомпоновкиДанных", ТЗ_Результат, РезультатВыборки);
	
КонецФункции

Функция ПолучитьРезультатКомпоновкиДанных(Склад, Клиент, СхемаКомпоновкиДанных)

	КомпоновщикНастроек = Объект.КомпоновщикНастроек;
	
	ПараметрыДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных;
	ПараметрыДанных.УстановитьЗначениеПараметра("ТипУпаковки", Перечисления.ТипыУпаковок.МультитоварнаяУпаковка);
	ПараметрыДанных.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДата());
	ПараметрыДанных.УстановитьЗначениеПараметра("Склад", Склад);
	ПараметрыДанных.УстановитьЗначениеПараметра("Клиент", Клиент);
	ПараметрыДанных.УстановитьЗначениеПараметра("Период", ТекущаяДата());
	
	Если Не ЗначениеЗаполнено(Склад) Тогда
		СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Запрос = СтрЗаменить(СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Запрос, "ДвижениеКМ.Склад = &Склад", "ДвижениеКМ.Склад.*");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Клиент) Тогда
		СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Запрос = СтрЗаменить(СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Запрос, "ЗаказКлиента.Партнер = &Клиент", "ЗаказКлиента.Партнер.*");
	КонецЕсли;
	
	Компоновщик = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = Компоновщик.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(),,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	Дерево = Новый ДеревоЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.ОтображатьПроцентВывода = Истина;
	ПроцессорВывода.УстановитьОбъект(Дерево);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат Дерево;
	
КонецФункции

Процедура ПроверкаДоступностиНоменклатуры(Дерево, СтруктураС_ТЗ)
	
	НаличиеНоменклатурыИзКомпоновкиДанных = СтруктураС_ТЗ.НаличиеНоменклатурыИзКомпоновкиДанных;
	
	УпаковочныеЛистыСТаблицейТовары = СтруктураС_ТЗ.УпаковочныеЛистыСТаблицейТовары;
	
	Для Каждого Строка Из Дерево.Строки Цикл
		Для Каждого Строка_Н Из Строка.Строки Цикл
			
			Для Каждого Строка_Т Из Строка_Н.Строки Цикл
				
				МассивНоменклатурыПоЗаказу = НаличиеНоменклатурыИзКомпоновкиДанных.НайтиСтроки(Новый Структура("ЗаказНаОтгрузку", Строка_Н.Заказ));
				
				ЗаполнитьРезервыНаСервере(Строка_Т.Заказ, Строка_Т.УпаковочныйЛистСсылка, УпаковочныеЛистыСТаблицейТовары, МассивНоменклатурыПоЗаказу);
				
				ПоступленияНомер = Строка_Т.ДокументПоступленияНомер;
				
			КонецЦикла;
			Строка_Н.ДокументПоступленияНомер = ПоступленияНомер;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьБлокировки(Дерево)
	
	Для Каждого Строка Из Дерево.Строки Цикл
		Для Каждого Строка_Н Из Строка.Строки Цикл
			Для Каждого Строка_Т Из Строка_Н.Строки Цикл
				
				Если Строка_Т.БлокировкиОтгрузок Тогда
					Строка_Т.Блокировка = "Да";
				Иначе
					Строка_Т.Блокировка = "Нет";
				КонецЕсли;
				
			КонецЦикла;	
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалениеСтрокСУпаковочнымиЛистамиСверхДоступныхОстатков(Дерево);
	
	НеДоступныеУпаковочныеЛисты = Объект.ДоступностьУпаковочныхЛистов.НайтиСтроки(Новый Структура("Проверка", Ложь));
	
	Если НеДоступныеУпаковочныеЛисты.Количество() > 0 Тогда
		
		Для Каждого Строка Из Дерево.Строки Цикл
			Для Каждого Строка_Н Из Строка.Строки Цикл
				
				ТЗ = Новый ТаблицаЗначений;
				ТЗ.Колонки.Добавить("УпаковочныйЛистСсылка");
				
				Для Каждого Строка_Т Из Строка_Н.Строки Цикл
					
					НоваяСтрока = ТЗ.Добавить();
					НоваяСтрока.УпаковочныйЛистСсылка = Строка_Т.УпаковочныйЛистСсылка;							
					
				КонецЦикла;
				
				Для Каждого СтрокаТЗ Из ТЗ Цикл
					
					НайденныйОбъект = Строка_Н.Строки.НайтиСтроки(Новый Структура("УпаковочныйЛистСсылка", СтрокаТЗ.УпаковочныйЛистСсылка));
					
					// Не важно сколько строк по отобранному упаковочному листу, важно что строки найдены, что бы проверить доступность упаковочного листа
					Если НайденныйОбъект.Количество() > 0 Тогда
						
						НайденныеСтрокиДоступностьУЛ = Объект.ДоступностьУпаковочныхЛистов.НайтиСтроки(Новый Структура("УпаковочныйЛист", СтрокаТЗ.УпаковочныйЛистСсылка));
						
						Для Каждого СтрокаДоступность Из НайденныеСтрокиДоступностьУЛ Цикл
							
							Если Не СтрокаДоступность.Проверка Тогда	
								
								Строка_Н.Строки.Удалить(НайденныйОбъект[0]);
								
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;
					КонецЕсли;
				
				КонецЦикла;	
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьСтрокиБезУпаковочногоЛиста(ДеревоЗначений)
	
	СпЗнСтрока_Н = Новый ТаблицаЗначений;
	СпЗнСтрока_Н.Колонки.Добавить("Клиент");
	СпЗнСтрока_Н.Колонки.Добавить("АдресДоставки");
	СпЗнСтрока_Н.Колонки.Добавить("Заказ");
	СпЗнСтрока_Н.Колонки.Добавить("ИндексСтроки");
	
	Для Каждого Строка Из ДеревоЗначений.Строки Цикл
		
		ИндексСтроки = Неопределено;
		Для Каждого Строка_Н Из Строка.Строки Цикл
			
			Если Строка_Н.Уровень() = 1 И Строка_Н.Строки.Количество() = 0 Тогда
				ИндексСтроки = Строка.Строки.Индекс(Строка_Н);
			КонецЕсли;
			
			Если Не ИндексСтроки = Неопределено Тогда
				
				Стр = СпЗнСтрока_Н.Добавить();
				Стр.Заказ = Строка_Н.Заказ;
				Стр.ИндексСтроки = ИндексСтроки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого Строка Из ДеревоЗначений.Строки Цикл
		
		Для Каждого Строка_Н Из Строка.Строки Цикл
			
			Счетчик = Строка.Строки.Количество() - 1;
			Пока Счетчик >= 0 Цикл
				
				Для Каждого СтрокаСпЗнСтрока_Н Из СпЗнСтрока_Н Цикл
					
					Если Строка.Строки[Счетчик].Заказ = СтрокаСпЗнСтрока_Н.Заказ Тогда
						
						Строка.Строки.Удалить(СтрокаСпЗнСтрока_Н.ИндексСтроки);
						
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Счетчик = Счетчик - 1;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СпЗнСтрока_Н.Очистить();
	
	Для Каждого Строка Из ДеревоЗначений.Строки Цикл
		
		ИндексСтроки = Неопределено;
		
		Если Строка.Уровень() = 0 И Строка.Строки.Количество() = 0 Тогда
			ИндексСтроки = ДеревоЗначений.Строки.Индекс(Строка);
		КонецЕсли;
		
		Если Не ИндексСтроки = Неопределено Тогда
			
			Стр = СпЗнСтрока_Н.Добавить();
			Стр.Клиент = Строка.Клиент;
			Стр.АдресДоставки = Строка.АдресДоставки;
			Стр.ИндексСтроки = ИндексСтроки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Счетчик = ДеревоЗначений.Строки.Количество() - 1;
	
	Пока Счетчик >= 0 Цикл
		
		Для Каждого СтрокаСпЗнСтрока_Н Из СпЗнСтрока_Н Цикл
			
			Если ДеревоЗначений.Строки[Счетчик].Клиент = СтрокаСпЗнСтрока_Н.Клиент
				И ДеревоЗначений.Строки[Счетчик].АдресДоставки = СтрокаСпЗнСтрока_Н.АдресДоставки Тогда
				
				ДеревоЗначений.Строки.Удалить(СтрокаСпЗнСтрока_Н.ИндексСтроки);
				
				Прервать;
					
			КонецЕсли;
			
		КонецЦикла;
		
		Счетчик = Счетчик - 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьЛимиты(ДеревоЗначений)
	
	СписокКонтрагенты = Новый СписокЗначений;
	
	СписокЗаказы = Новый СписокЗначений;
	
	ТЗКлиентЗаказ = Новый ТаблицаЗначений;
	ТЗКлиентЗаказ.Колонки.Добавить("Клиент");
	ТЗКлиентЗаказ.Колонки.Добавить("Заказ");
	ТЗКлиентЗаказ.Колонки.Добавить("Организация");
	ТЗКлиентЗаказ.Колонки.Добавить("Сумма");
	// Получаем список всех контрагентов из отбора
	Для Каждого Строка Из ДеревоЗначений.Строки Цикл
		Для Каждого Строка_Н Из Строка.Строки Цикл
			Для Каждого Строка_Т Из Строка_Н.Строки Цикл
				
				СписокКонтрагенты.Добавить(Строка.Клиент);
				СписокЗаказы.Добавить(Строка_Т.Заказ);
				
				СтрКЗ = ТЗКлиентЗаказ.Добавить();
				СтрКЗ.Клиент = Строка_Т.Клиент;
				СтрКЗ.Заказ = Строка_Т.Заказ;
				СтрКЗ.Организация = Строка_Т.Организация;
				СтрКЗ.Сумма = 0;
				
			КонецЦикла;	
		КонецЦикла;
	КонецЦикла;
	// Получаем уникальный список по условиям
	ТЗКлиентЗаказ.Свернуть("Клиент, Заказ, Организация", "Сумма");
	// Получаем все возможные лимиты для этого списка контрагентов из регистра
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	гф_ЛимитыКонтрагентовСрезПоследних.Период КАК Период,
		|	гф_ЛимитыКонтрагентовСрезПоследних.Партнер КАК Партнер,
		|	гф_ЛимитыКонтрагентовСрезПоследних.Организация КАК Организация,
		|	гф_ЛимитыКонтрагентовСрезПоследних.ВидЛимита КАК ВидЛимита,
		|	гф_ЛимитыКонтрагентовСрезПоследних.Статус КАК Статус,
		|	гф_ЛимитыКонтрагентовСрезПоследних.Сумма КАК Сумма
		|ИЗ
		|	РегистрСведений.гф_ЛимитыКонтрагентов.СрезПоследних(
		|	&Период,
		|	Партнер в (&Партнер)) КАК гф_ЛимитыКонтрагентовСрезПоследних";

	Запрос.УстановитьПараметр("Партнер", СписокКонтрагенты);
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаВидЛимитаПоКонтрагентам = РезультатЗапроса.Выгрузить();
	 
	ТЗЛимит = Новый ТаблицаЗначений;
	ТЗЛимит.Колонки.Добавить("Период");
	ТЗЛимит.Колонки.Добавить("Партнер");
	ТЗЛимит.Колонки.Добавить("Организация");
	ТЗЛимит.Колонки.Добавить("ВидЛимита");
	ТЗЛимит.Колонки.Добавить("Статус");
	ТЗЛимит.Колонки.Добавить("Сумма");
	//ТЗЛимит.Колонки.Добавить("СуммаВзаиморасчетов");
	
	// Получаем актуальные лимиты по периоду с учетом вида лимита и статуса
	Для Каждого Строка Из ТаблицаВидЛимитаПоКонтрагентам Цикл
		
		Если ТЗЛимит.Количество() = 0 Тогда
			Стр = ТЗЛимит.Добавить();
			Стр.Период = Строка.Период;
			Стр.Партнер = Строка.Партнер;
			Стр.Организация = Строка.Организация;
			Стр.ВидЛимита = Строка.ВидЛимита;
			Стр.Статус = Строка.Статус;
			Стр.Сумма = Строка.Сумма;
			//Стр.СуммаВзаиморасчетов = 0;
		Иначе
			
			НайденЛимит = Ложь;
			
			Для Каждого СтрокаТЗЛимит Из ТЗЛимит Цикл
				
				Если СтрокаТЗЛимит.Партнер = Строка.Партнер
					И СтрокаТЗЛимит.Организация = Строка.Организация
					И СтрокаТЗЛимит.ВидЛимита = Строка.ВидЛимита Тогда
					
					Если СтрокаТЗЛимит.Период < Строка.Период Тогда
						СтрокаТЗЛимит.Период = Строка.Период;
						СтрокаТЗЛимит.Статус = Строка.Статус;
						СтрокаТЗЛимит.Сумма = Строка.Сумма;
						НайденЛимит = Истина;
						Прервать;
					КонецЕсли;
					
					НайденЛимит = Истина;
					Прервать;
					
				Иначе
					НайденЛимит = Ложь;
				КонецЕсли;
				
			КонецЦикла;			 
			
			Если Не НайденЛимит Тогда
				Стр = ТЗЛимит.Добавить();
				Стр.Период = Строка.Период;
				Стр.Партнер = Строка.Партнер;
				Стр.Организация = Строка.Организация;
				Стр.ВидЛимита = Строка.ВидЛимита;
				Стр.Статус = Строка.Статус;
				Стр.Сумма = Строка.Сумма;
				//Стр.СуммаВзаиморасчетов = 0;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Получение сумм по расчетам с контрагентами
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КлючиАналитикиУчетаПоПартнерам.Ссылка КАК Ссылка,
		|	КлючиАналитикиУчетаПоПартнерам.ВерсияДанных КАК ВерсияДанных,
		|	КлючиАналитикиУчетаПоПартнерам.ПометкаУдаления КАК ПометкаУдаления,
		|	КлючиАналитикиУчетаПоПартнерам.Наименование КАК Наименование,
		|	КлючиАналитикиУчетаПоПартнерам.Партнер КАК Партнер,
		|	КлючиАналитикиУчетаПоПартнерам.Организация КАК Организация,
		|	КлючиАналитикиУчетаПоПартнерам.Контрагент КАК Контрагент,
		|	КлючиАналитикиУчетаПоПартнерам.Договор КАК Договор,
		|	КлючиАналитикиУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	КлючиАналитикиУчетаПоПартнерам.Предопределенный КАК Предопределенный,
		|	КлючиАналитикиУчетаПоПартнерам.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
		|	КлючиАналитикиУчетаПоПартнерам.Представление КАК Представление
		|ПОМЕСТИТЬ ВТ_КлючиАналитики
		|ИЗ
		|	Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитикиУчетаПоПартнерам
		|ГДЕ
		|	КлючиАналитикиУчетаПоПартнерам.Партнер В(&Партнер)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	РасчетыСКлиентамиОстатки.ОбъектРасчетов КАК ОбъектРасчетов,
		|	РасчетыСКлиентамиОстатки.Валюта КАК Валюта,
		|	РасчетыСКлиентамиОстатки.УдалитьЗаказКлиента КАК УдалитьЗаказКлиента,
		|	РасчетыСКлиентамиОстатки.СуммаОстаток КАК СуммаОстаток,
		|	РасчетыСКлиентамиОстатки.КОплатеОстаток КАК КОплатеОстаток,
		|	РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток КАК ОплачиваетсяОстаток,
		|	РасчетыСКлиентамиОстатки.КОтгрузкеОстаток КАК КОтгрузкеОстаток,
		|	РасчетыСКлиентамиОстатки.ОтгружаетсяОстаток КАК ОтгружаетсяОстаток,
		|	ВТ_КлючиАналитики.Организация КАК Организация,
		|	ДоговорыКонтрагентов.гф_Сезон КАК гф_Сезон
		|ИЗ
		|	ВТ_КлючиАналитики КАК ВТ_КлючиАналитики
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки КАК РасчетыСКлиентамиОстатки
		|		ПО ВТ_КлючиАналитики.Ссылка = РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО ВТ_КлючиАналитики.Договор = ДоговорыКонтрагентов.Ссылка";
	
	Запрос.УстановитьПараметр("Партнер", СписокКонтрагенты);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выгрузить();
	
	ТЗЛимит.Колонки.Добавить("НайденВТаблицеСЛимитами");
	ТЗЛимит.Колонки.Добавить("АвансОтКонтрагента");
	ТЗЛимит.Колонки.Добавить("ДолгКонтрагентаПередОрганизацией");
	ТЗЛимит.ЗаполнитьЗначения(Ложь, "НайденВТаблицеСЛимитами");
	ТЗЛимит.ЗаполнитьЗначения(0, "АвансОтКонтрагента");
	ТЗЛимит.ЗаполнитьЗначения(0, "ДолгКонтрагентаПередОрганизацией");
	
	//СписокКонтрагентыБезЛимитаНоСОстатком = Новый ТаблицаЗначений;
	//СписокКонтрагентыБезЛимитаНоСОстатком.Колонки.Добавить("Период");
	//СписокКонтрагентыБезЛимитаНоСОстатком.Колонки.Добавить("Партнер");
	//СписокКонтрагентыБезЛимитаНоСОстатком.Колонки.Добавить("Организация");
	//СписокКонтрагентыБезЛимитаНоСОстатком.Колонки.Добавить("НайденВТаблицеСЛимитами");
	
	Для Каждого СтрВыборка Из Выборка Цикл
		Для Каждого Строка_ЛимитыТЗ Из ТЗЛимит Цикл
			
			Если Не СтрВыборка.АналитикаУчетаПоПартнерам = NULL 
				И Строка_ЛимитыТЗ.Партнер = СтрВыборка.АналитикаУчетаПоПартнерам.Партнер
				И Строка_ЛимитыТЗ.Организация = СтрВыборка.Организация
				И Строка_ЛимитыТЗ.Статус = Справочники.гф_СтатусыЛимитов.Действующий Тогда
				
				Если ЗначениеЗаполнено(СтрВыборка.гф_Сезон) Тогда
					//Строка_ЛимитыТЗ.СуммаВзаиморасчетов = Строка_ЛимитыТЗ.СуммаВзаиморасчетов + СтрВыборка.СуммаОстаток;
					
					Если Не СтрВыборка.СуммаОстаток = 0 И СтрВыборка.СуммаОстаток > 0 Тогда
						Строка_ЛимитыТЗ.ДолгКонтрагентаПередОрганизацией = Строка_ЛимитыТЗ.ДолгКонтрагентаПередОрганизацией + СтрВыборка.СуммаОстаток;
					Иначе
						Строка_ЛимитыТЗ.АвансОтКонтрагента = Строка_ЛимитыТЗ.АвансОтКонтрагента + СтрВыборка.СуммаОстаток * (-1);
					КонецЕсли;
					
				КонецЕсли;
			
			КонецЕсли;
			
			// Для последующей обработки тех контрагентов по которым есть остатки но их нет в таблице полученной из регистра с лимитами (на них просто ни разу не ставили лимит)
			Если Не СтрВыборка.АналитикаУчетаПоПартнерам = NULL Тогда
				//Стр = СписокКонтрагентыБезЛимитаНоСОстатком.Добавить();
				//Стр.Партнер 					= СтрВыборка.АналитикаУчетаПоПартнерам.Партнер;
				//Стр.Организация 				= СтрВыборка.Организация;
				//Стр.НайденВТаблицеСЛимитами 	= Истина;
				
				Строка_ЛимитыТЗ.НайденВТаблицеСЛимитами = Истина;
			КонецЕсли;
		КонецЦикла;
				
	КонецЦикла;
	
	// Повторный обход для добавление суммы по лимиту из остатков контрагента у которого лимиты не были установлены в регистре лимитов
	Для Каждого СтрВыборка Из Выборка Цикл
		//Для Каждого Строка_ЛимитыОстатки Из СписокКонтрагентыБезЛимитаНоСОстатком Цикл
			
			Если Не СтрВыборка.АналитикаУчетаПоПартнерам = NULL Тогда
				//И Строка_ЛимитыОстатки.Партнер = СтрВыборка.АналитикаУчетаПоПартнерам.Партнер
				//И Строка_ЛимитыОстатки.Организация = СтрВыборка.Организация
				//И Не Строка_ЛимитыОстатки.НайденВТаблицеСЛимитами Тогда
				
				Если ЗначениеЗаполнено(СтрВыборка.гф_Сезон) Тогда
					
					
					НайденныеСтрокиТЗЛимит = ТЗЛимит.НайтиСтроки(Новый Структура("Партнер, Организация, НайденВТаблицеСЛимитами",
						СтрВыборка.АналитикаУчетаПоПартнерам.Партнер, СтрВыборка.Организация, Ложь));
					
					Если НайденныеСтрокиТЗЛимит.Количество() = 1 Тогда
						
						//НайденныеСтрокиТЗЛимит[0].СуммаВзаиморасчетов = НайденныеСтрокиТЗЛимит[0].СуммаВзаиморасчетов + СтрВыборка.СуммаОстаток * (-1);
						
						Если Не СтрВыборка.СуммаОстаток = 0 И СтрВыборка.СуммаОстаток > 0 Тогда
							НайденныеСтрокиТЗЛимит[0].ДолгКонтрагентаПередОрганизацией = НайденныеСтрокиТЗЛимит[0].ДолгКонтрагентаПередОрганизацией + СтрВыборка.СуммаОстаток;
						Иначе
							НайденныеСтрокиТЗЛимит[0].АвансОтКонтрагента = НайденныеСтрокиТЗЛимит[0].АвансОтКонтрагента + СтрВыборка.СуммаОстаток * (-1);
						КонецЕсли;
						
					ИначеЕсли НайденныеСтрокиТЗЛимит.Количество() = 0 Тогда	
						
						НайденныеСтрокиТЗЛимит = ТЗЛимит.НайтиСтроки(Новый Структура("Партнер, Организация",
						СтрВыборка.АналитикаУчетаПоПартнерам.Партнер, СтрВыборка.Организация));
						
						Если НайденныеСтрокиТЗЛимит.Количество() = 0 Тогда
							
							Стр = ТЗЛимит.Добавить();
							//Стр.Период = Строка.Период;
							Стр.Партнер = СтрВыборка.АналитикаУчетаПоПартнерам.Партнер;
							Стр.Организация = СтрВыборка.Организация;
							//Стр.ВидЛимита = Строка.ВидЛимита;
							//Стр.Статус = Строка.Статус;
							Стр.Сумма = 0;
							Стр.АвансОтКонтрагента = 0;
							Стр.ДолгКонтрагентаПередОрганизацией = 0;
							//Стр.СуммаВзаиморасчетов = СтрВыборка.СуммаОстаток * (-1);
							Стр.НайденВТаблицеСЛимитами = Ложь;
							
							Если Не СтрВыборка.СуммаОстаток = 0 И СтрВыборка.СуммаОстаток > 0 Тогда
								Стр.ДолгКонтрагентаПередОрганизацией = СтрВыборка.СуммаОстаток;
							Иначе
								Стр.АвансОтКонтрагента = СтрВыборка.СуммаОстаток * (-1);
							КонецЕсли;
						КонецЕсли;
						//Строка_ЛимитыТЗ.СуммаВзаиморасчетов = Строка_ЛимитыТЗ.СуммаВзаиморасчетов + СтрВыборка.СуммаОстаток;
					Иначе
						// Мало вероятная ситуация когда несколько строк
						//НайденныеСтрокиТЗЛимит[0].СуммаВзаиморасчетов = НайденныеСтрокиТЗЛимит[0].СуммаВзаиморасчетов + СтрВыборка.СуммаОстаток * (-1);
						
						Если Не СтрВыборка.СуммаОстаток = 0 И СтрВыборка.СуммаОстаток > 0 Тогда
							НайденныеСтрокиТЗЛимит[0].ДолгКонтрагентаПередОрганизацией = НайденныеСтрокиТЗЛимит[0].ДолгКонтрагентаПередОрганизацией + СтрВыборка.СуммаОстаток;
						Иначе
							НайденныеСтрокиТЗЛимит[0].АвансОтКонтрагента = НайденныеСтрокиТЗЛимит[0].АвансОтКонтрагента + СтрВыборка.СуммаОстаток * (-1);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;	
			КонецЕсли;
			
		//КонецЦикла;
	КонецЦикла;
	
	
	
	
	
	// Получение суммы по не проведенным реализациям
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
	|	РеализацияТоваровУслуг.ЗаказКлиента КАК ЗаказКлиента
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.ЗаказКлиента В (&ЗаказКлиента)
	|	И РеализацияТоваровУслуг.Проведен = ЛОЖЬ
	|	И РеализацияТоваровУслуг.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ЗаказКлиента", СписокЗаказы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ТЗКлиентЗаказ.Колонки.Добавить("АвансОтКонтрагента");
	ТЗКлиентЗаказ.Колонки.Добавить("ДолгКонтрагентаПередОрганизацией");
	ТЗКлиентЗаказ.ЗаполнитьЗначения(0, "АвансОтКонтрагента");
	ТЗКлиентЗаказ.ЗаполнитьЗначения(0, "ДолгКонтрагентаПередОрганизацией");

	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Для Каждого Строка_Заказ Из ТЗКлиентЗаказ Цикл
			
			Если Строка_Заказ.Заказ = ВыборкаДетальныеЗаписи.ЗаказКлиента Тогда
				
				Строка_Заказ.Сумма = Строка_Заказ.Сумма - ВыборкаДетальныеЗаписи.СуммаДокумента;
				
				//Если Не ВыборкаДетальныеЗаписи.СуммаДокумента = 0 И ВыборкаДетальныеЗаписи.СуммаДокумента > 0 Тогда
					Строка_Заказ.ДолгКонтрагентаПередОрганизацией = Строка_Заказ.ДолгКонтрагентаПередОрганизацией + ВыборкаДетальныеЗаписи.СуммаДокумента;
				//Иначе
				//	Строка_Заказ.АвансОтКонтрагента = Строка_Заказ.АвансОтКонтрагента + ВыборкаДетальныеЗаписи.СуммаДокумента;
				//КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Строка_ЛимитыТЗ Из ТЗЛимит Цикл
		Для Каждого Строка_Заказ Из ТЗКлиентЗаказ Цикл
			
			Если Строка_ЛимитыТЗ.Партнер = Строка_Заказ.Клиент
				И Строка_ЛимитыТЗ.Организация = Строка_Заказ.Организация Тогда
				
				//Строка_ЛимитыТЗ.СуммаВзаиморасчетов = Строка_ЛимитыТЗ.СуммаВзаиморасчетов - Строка_Заказ.Сумма;
				
				Строка_ЛимитыТЗ.АвансОтКонтрагента = Строка_ЛимитыТЗ.АвансОтКонтрагента + Строка_Заказ.АвансОтКонтрагента;
				Строка_ЛимитыТЗ.ДолгКонтрагентаПередОрганизацией = Строка_ЛимитыТЗ.ДолгКонтрагентаПередОрганизацией + Строка_Заказ.ДолгКонтрагентаПередОрганизацией;

				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	ТЗЛимитыКонтрагентов = РеквизитФормыВЗначение("ЛимитыКонтрагентов");
	ТЗЛимитыКонтрагентов.Очистить();
	
	Для Каждого Строка_Лимиты Из ТЗЛимит Цикл
		
		НайденЛимит = Ложь;
		Если Строка_Лимиты.Статус = Справочники.гф_СтатусыЛимитов.Действующий Тогда
			
			Если ТЗЛимитыКонтрагентов.Количество() = 0 Тогда
				Стр = ТЗЛимитыКонтрагентов.Добавить();
				Стр.Период = Строка_Лимиты.Период;
				Стр.Партнер = Строка_Лимиты.Партнер;
				Стр.Организация = Строка_Лимиты.Организация;
				Стр.Статус = Строка_Лимиты.Статус;
				
				//Стр.Сумма = Строка_Лимиты.Сумма - Строка_Лимиты.СуммаВзаиморасчетов;
				Стр.Сумма = Строка_Лимиты.Сумма + Строка_Лимиты.АвансОтКонтрагента - Строка_Лимиты.ДолгКонтрагентаПередОрганизацией;
			Иначе
				Для Каждого Строка_ЛимитыТЗ Из ТЗЛимитыКонтрагентов Цикл
					
					Если Строка_ЛимитыТЗ.Партнер = Строка_Лимиты.Партнер И Строка_Лимиты.Статус = Справочники.гф_СтатусыЛимитов.Действующий И Строка_ЛимитыТЗ.Организация = Строка_Лимиты.Организация Тогда
						//Строка_ЛимитыТЗ.Сумма = Строка_ЛимитыТЗ.Сумма + Строка_Лимиты.Сумма - Строка_Лимиты.СуммаВзаиморасчетов;
						Строка_ЛимитыТЗ.Сумма = Строка_ЛимитыТЗ.Сумма + Строка_Лимиты.Сумма;
						НайденЛимит = Истина;
					КонецЕсли;
					
				КонецЦикла;
				
				Если Не НайденЛимит Тогда
					Стр = ТЗЛимитыКонтрагентов.Добавить();
					Стр.Период = Строка_Лимиты.Период;
					Стр.Партнер = Строка_Лимиты.Партнер;
					Стр.Организация = Строка_Лимиты.Организация;
					Стр.Статус = Строка_Лимиты.Статус;
					
					//Стр.Сумма = Строка_Лимиты.Сумма - Строка_Лимиты.СуммаВзаиморасчетов;
					Стр.Сумма = Строка_Лимиты.Сумма + Строка_Лимиты.АвансОтКонтрагента - Строка_Лимиты.ДолгКонтрагентаПередОрганизацией;
				КонецЕсли;
				
			КонецЕсли;
		ИначеЕсли Не Строка_Лимиты.Статус = Справочники.гф_СтатусыЛимитов.Действующий И Не Строка_Лимиты.Статус = Неопределено
			И (Строка_Лимиты.АвансОтКонтрагента > 0 Или Строка_Лимиты.АвансОтКонтрагента > 0) Тогда
			
			Если ТЗЛимитыКонтрагентов.Количество() = 0 Тогда
				Стр = ТЗЛимитыКонтрагентов.Добавить();
				Стр.Период = Строка_Лимиты.Период;
				Стр.Партнер = Строка_Лимиты.Партнер;
				Стр.Организация = Строка_Лимиты.Организация;
				Стр.Статус = Справочники.гф_СтатусыЛимитов.Действующий;
				
				//Стр.Сумма = Строка_Лимиты.Сумма + Строка_Лимиты.СуммаВзаиморасчетов;
				Стр.Сумма = Строка_Лимиты.Сумма + Строка_Лимиты.АвансОтКонтрагента - Строка_Лимиты.ДолгКонтрагентаПередОрганизацией;
			Иначе
				Для Каждого Строка_ЛимитыТЗ Из ТЗЛимитыКонтрагентов Цикл
					
					Если Строка_ЛимитыТЗ.Партнер = Строка_Лимиты.Партнер И Строка_Лимиты.Статус = Справочники.гф_СтатусыЛимитов.Действующий И Строка_ЛимитыТЗ.Организация = Строка_Лимиты.Организация Тогда
						Строка_ЛимитыТЗ.Сумма = Строка_ЛимитыТЗ.Сумма + Строка_Лимиты.СуммаВзаиморасчетов;
						НайденЛимит = Истина;
					КонецЕсли;
					
				КонецЦикла;
				
				Если Не НайденЛимит Тогда
					Стр = ТЗЛимитыКонтрагентов.Добавить();
					Стр.Период = Строка_Лимиты.Период;
					Стр.Партнер = Строка_Лимиты.Партнер;
					Стр.Организация = Строка_Лимиты.Организация;
					Стр.Статус = Справочники.гф_СтатусыЛимитов.Действующий;
					
					//Стр.Сумма = Строка_Лимиты.Сумма + Строка_Лимиты.СуммаВзаиморасчетов;
					Стр.Сумма = Строка_Лимиты.Сумма + Строка_Лимиты.АвансОтКонтрагента - Строка_Лимиты.ДолгКонтрагентаПередОрганизацией;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли Строка_Лимиты.Статус = Неопределено И (Строка_Лимиты.АвансОтКонтрагента > 0 Или Строка_Лимиты.ДолгКонтрагентаПередОрганизацией > 0) Тогда
			
			Если ТЗЛимитыКонтрагентов.Количество() = 0 Тогда
				Стр = ТЗЛимитыКонтрагентов.Добавить();
				//Стр.Период = Строка_Лимиты.Период;
				Стр.Партнер = Строка_Лимиты.Партнер;
				Стр.Организация = Строка_Лимиты.Организация;
				//Стр.Статус = Справочники.гф_СтатусыЛимитов.Действующий;
				
				//Стр.Сумма = Строка_Лимиты.Сумма + Строка_Лимиты.СуммаВзаиморасчетов;
				Стр.Сумма = Строка_Лимиты.Сумма + Строка_Лимиты.АвансОтКонтрагента - Строка_Лимиты.ДолгКонтрагентаПередОрганизацией;
			Иначе
				Для Каждого Строка_ЛимитыТЗ Из ТЗЛимитыКонтрагентов Цикл
					
					Если Строка_ЛимитыТЗ.Партнер = Строка_Лимиты.Партнер И Строка_Лимиты.Статус = Неопределено И Строка_ЛимитыТЗ.Организация = Строка_Лимиты.Организация Тогда
						//Строка_ЛимитыТЗ.Сумма = Строка_ЛимитыТЗ.Сумма + Строка_Лимиты.СуммаВзаиморасчетов;
						Строка_ЛимитыТЗ.Сумма = Строка_ЛимитыТЗ.Сумма + Строка_Лимиты.АвансОтКонтрагента - Строка_Лимиты.ДолгКонтрагентаПередОрганизацией;
						НайденЛимит = Истина;
					КонецЕсли;
					
				КонецЦикла;
				
				Если Не НайденЛимит Тогда
					Стр = ТЗЛимитыКонтрагентов.Добавить();
					//Стр.Период = Строка_Лимиты.Период;
					Стр.Партнер = Строка_Лимиты.Партнер;
					Стр.Организация = Строка_Лимиты.Организация;
					//Стр.Статус = Справочники.гф_СтатусыЛимитов.Действующий;
					
					//Стр.Сумма = Строка_Лимиты.Сумма + Строка_Лимиты.СуммаВзаиморасчетов;
					Стр.Сумма = Строка_Лимиты.Сумма + Строка_Лимиты.АвансОтКонтрагента - Строка_Лимиты.ДолгКонтрагентаПередОрганизацией;
				КонецЕсли;
				
			КонецЕсли;
			
			
			
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходныйОрдерНаТовары.гф_СуммаНоменклатуры КАК гф_СуммаНоменклатуры,
		|	РасходныйОрдерНаТовары.Получатель КАК Получатель
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
		|ГДЕ
		|	РасходныйОрдерНаТовары.Проведен = &Проведен
		|	И РасходныйОрдерНаТовары.ПометкаУдаления = &ПометкаУдаления
		|	И РасходныйОрдерНаТовары.Статус = &Статус
		|	И РасходныйОрдерНаТовары.Получатель  В (&Получатель)";
	
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	Запрос.УстановитьПараметр("Проведен", Истина);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыРасходныхОрдеров.Подготовлено);
	Запрос.УстановитьПараметр("Получатель", СписокКонтрагенты);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДет = РезультатЗапроса.Выгрузить();
	
	ВыборкаДет.Свернуть("Получатель", "гф_СуммаНоменклатуры");
	
	Для Каждого Строка_ЛимитыТЗ Из ТЗЛимитыКонтрагентов Цикл
		
		Для Каждого СтрокаВыборка Из ВыборкаДет Цикл
			
			Если Строка_ЛимитыТЗ.Партнер = СтрокаВыборка.Получатель Тогда
				Строка_ЛимитыТЗ.Сумма = Строка_ЛимитыТЗ.Сумма - СтрокаВыборка.гф_СуммаНоменклатуры;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	гф_ПричиныБлокировокСрезПоследних.Период КАК Период,
		|	гф_ПричиныБлокировокСрезПоследних.Партнер КАК Партнер,
		|	гф_ПричиныБлокировокСрезПоследних.Организация КАК Организация,
		|	гф_ПричиныБлокировокСрезПоследних.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	гф_ПричиныБлокировокСрезПоследних.ВидБлокировки КАК ВидБлокировки,
		|	гф_ПричиныБлокировокСрезПоследних.Заблокирован КАК Заблокирован
		|ИЗ
		|	РегистрСведений.гф_ПричиныБлокировок.СрезПоследних(
		|	&Период,
		|	Партнер В (&Партнер)) КАК гф_ПричиныБлокировокСрезПоследних";

	Запрос.УстановитьПараметр("Партнер", СписокКонтрагенты);
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаБлокировок = РезультатЗапроса.Выгрузить();
	БлокировокиКонтрагентовТЗ = РеквизитФормыВЗначение("БлокировокиКонтрагентов");
	
	БлокировокиКонтрагентовТЗ.Очистить();
	
	Для Каждого Строка Из ТаблицаБлокировок Цикл
		
		Если Строка.Заблокирован Тогда
			
			Совпадение = Ложь;
			Если БлокировокиКонтрагентовТЗ.Количество() = 0 Тогда
				Стр = БлокировокиКонтрагентовТЗ.Добавить();
				Стр.Период = Строка.Период;
				Стр.Партнер = Строка.Партнер;
				Стр.Организация = Строка.Организация;
				Стр.ДоговорКонтрагента = Строка.ДоговорКонтрагента;
				Стр.Заблокирован = Строка.Заблокирован;
			Иначе
				
				Для Каждого Строка_БлокировкиТЗ Из БлокировокиКонтрагентовТЗ Цикл
					
					Если Строка_БлокировкиТЗ.Партнер = Строка.Партнер
						И Строка_БлокировкиТЗ.Организация = Строка.Организация
						И Строка_БлокировкиТЗ.ДоговорКонтрагента = Строка.ДоговорКонтрагента Тогда
						
						Совпадение = Истина;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если Не Совпадение Тогда
					
					Стр = БлокировокиКонтрагентовТЗ.Добавить();
					Стр.Период = Строка.Период;
					Стр.Партнер = Строка.Партнер;
					Стр.Организация = Строка.Организация;
					Стр.ДоговорКонтрагента = Строка.ДоговорКонтрагента;
					Стр.Заблокирован = Строка.Заблокирован;
					
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка Из ДеревоЗначений.Строки Цикл
		Для Каждого Строка_Н Из Строка.Строки Цикл
			Для каждого Строка_Т Из Строка_Н.Строки Цикл
				
				Для Каждого Строка_Лимиты Из ТЗЛимитыКонтрагентов Цикл
					Если Строка_Т.Клиент = Строка_Лимиты.Партнер И Строка_Т.Организация = Строка_Лимиты.Организация Тогда
						
						Строка_Т.ДействующийЛимит = Строка_Лимиты.Сумма;
						
					КонецЕсли;	         
				КонецЦикла;
				
				Для Каждого Строка_Блокировки Из БлокировокиКонтрагентовТЗ Цикл
					Если Строка_Т.Клиент = Строка_Блокировки.Партнер 
						И Не ЗначениеЗаполнено(Строка_Блокировки.Организация)
						И Не ЗначениеЗаполнено(Строка_Блокировки.ДоговорКонтрагента) Тогда
							
						Строка_Т.БлокировкиОтгрузок = Истина;
						
					ИначеЕсли Строка_Т.Клиент = Строка_Блокировки.Партнер 
						И Строка_Т.Организация = Строка_Блокировки.Организация
						И Строка_Т.Договор = Строка_Блокировки.ДоговорКонтрагента Тогда
								
						Строка_Т.БлокировкиОтгрузок = Истина;		
								
					КонецЕсли;
				КонецЦикла;
								
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСвойстваСтроки(Приемник, Выборка)
	
	Для Каждого Строка Из Выборка Цикл
		НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		ЗаполнитьСвойстваСтроки(НоваяСтрока, Строка.Строки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоДокументов()
	
	КоллекцияЭлементовДерева = ДеревоДокументов.ПолучитьЭлементы();
	
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл
		
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		Элементы.ДеревоДокументов.Развернуть(ИдентификаторСтроки, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиВыше(Элемент, Отгрузить)
	
	ЭлементыТекущие = Элемент.ПолучитьЭлементы();
	
	Для Каждого Строка Из ЭлементыТекущие Цикл
		Строка.Отгрузить = Отгрузить;
		УстановитьФлажкиВыше(Строка, Отгрузить);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиНиже(Элемент, Отгрузить)
	
	Если Не Элемент.ПолучитьРодителя() = Неопределено Тогда
		ЭлементРодитель = Элемент.ПолучитьРодителя();
		Если Отгрузить Тогда
			ЭлементРодитель.Отгрузить = Отгрузить;
			УстановитьФлажкиНиже(ЭлементРодитель, Отгрузить)
		Иначе
			УстановитьФлажок = Ложь;
			ЭлементРодительЭлементы = ЭлементРодитель.ПолучитьЭлементы();
			Для Каждого Строка Из ЭлементРодительЭлементы Цикл
				УстановитьФлажок = УстановитьФлажок Или Строка.Отгрузить;
				Если УстановитьФлажок Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			ЭлементРодитель.Отгрузить = УстановитьФлажок;
			УстановитьФлажкиНиже(строка.ПолучитьРодителя(), Отгрузить)
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьРольОбходаБлокировок()
	
	Если РольДоступна("гф_ОбходБлокировок") Тогда 
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ПослеВыбораДействия(СтруктураПереданныхДанных, СтруктураПараметров) Экспорт
	
	Если Не СтруктураПереданныхДанных = Неопределено Тогда
		
		Действие = СтруктураПереданныхДанных.Действие;
		
		Если Действие = "НеУчитыватьБлокировки" Тогда
			
			ОтгрузитьПродолжить();
			
		ИначеЕсли Действие = "ЗаписатьСкидкиПродолжить" Тогда
			
			ОтгрузитьПродолжитьСоСкидками(СтруктураПереданныхДанных);
			
		ИначеЕсли Действие = "НеУчитыватьЛимиты" Тогда
			
			ОтгрузитьНаСервере(Ложь, СтруктураПараметров);
			
		ИначеЕсли Действие = "ПродолжитьОтгрузкуСПересортом" Тогда
			
			Объект.ИсключитьКоробСРасхождениями = Ложь;
			ОтгрузитьУстановитьСкидки();
			
		ИначеЕсли Действие = "ИсключитьКоробСРасхождениями" Тогда
			
			Результат = ИсключитьКоробСРасхождениями();
			
			Если Объект.КоличествоУпаковочныхЛистовСРасхождением = Результат.КоличесвоИсключенныхУпаковочныхЛистов И Результат.НаличиеУпаковочногоЛистаСПолнымКомплектом Тогда
				РазвернутьДеревоДокументов();
				Объект.ИсключитьКоробСРасхождениями = Истина;
				ОтгрузитьУстановитьСкидки();
			Иначе	
				РазвернутьДеревоДокументов();	
			КонецЕсли;
			
			Если Результат.НаличиеУпаковочногоЛистаСПолнымКомплектом Тогда	
				
			КонецЕсли;
			
		//ИначеЕсли Действие = "Перемещение" Тогда
		//	
		//	СоздатьПеремещениеТоваров(СтруктураПереданныхДанных);	
			
		ИначеЕсли Действие = "Отменить" Тогда
			
			ТекстСообщения = НСтр("ru = 'Действие отменено! '");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Действие по отгрузке прервано! '");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузитьПродолжить()
	
	Если ЗначениеЗаполнено(Объект.Склад) И Объект.ТоварыВКоробках Тогда
		
		НаличиеУпаковочногоЛистаСРасхождением = ПроверитьНаличиеУпаковочногоЛистаСРасхождением();
		
		Если НаличиеУпаковочногоЛистаСРасхождением Тогда
			ОтгрузитьУпаковочныеЛистыСРасхождением();
		Иначе
			ОтгрузитьУстановитьСкидки();
		КонецЕсли;
		
	Иначе
		ОтгрузитьУстановитьСкидки();
	КонецЕсли;	
	
КонецПроцедуры

Функция ПроверитьНаличиеУпаковочногоЛистаСРасхождением()
	
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоДокументов");
	
	// Таблица для записи всех упаковочных листов с расхождениями для вывода пользователю в окне с действиями по отгрузке таких упаковочных листов
	ТЗ_Расхождение = Новый ТаблицаЗначений;
    ТЗ_Расхождение.Колонки.Добавить("УпаковочныйЛист");
	ТЗ_Расхождение.Колонки.Добавить("СостояниеКороба");
	
	Объект.КоличествоУпаковочныхЛистовСРасхождением = 0;
	
	Для Каждого Строка Из ДеревоЗначений.Строки Цикл
		Для Каждого Строка_Н Из Строка.Строки Цикл
			
			НайденныеСтроки = Строка_Н.Строки.НайтиСтроки(Новый Структура("Отгрузить, СостояниеКороба", Истина, "Пересорт"));
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				Объект.КоличествоУпаковочныхЛистовСРасхождением = Объект.КоличествоУпаковочныхЛистовСРасхождением + НайденныеСтроки.Количество();
				
				Для Каждого ЭлементМассива Из НайденныеСтроки Цикл
					СтрокаРасхождение = ТЗ_Расхождение.Добавить();
					СтрокаРасхождение.УпаковочныйЛист = ЭлементМассива.УпаковочныйЛистСсылка;
					СтрокаРасхождение.СостояниеКороба = ЭлементМассива.СостояниеКороба;
				КонецЦикла;
				
			КонецЕсли;
			
			НайденныеСтроки = Строка_Н.Строки.НайтиСтроки(Новый Структура("Отгрузить, СостояниеКороба", Истина, "Не полный"));
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				Объект.КоличествоУпаковочныхЛистовСРасхождением = Объект.КоличествоУпаковочныхЛистовСРасхождением + НайденныеСтроки.Количество();
				
				Для Каждого ЭлементМассива Из НайденныеСтроки Цикл
					СтрокаРасхождение = ТЗ_Расхождение.Добавить();
					СтрокаРасхождение.УпаковочныйЛист = ЭлементМассива.УпаковочныйЛистСсылка;
					СтрокаРасхождение.СостояниеКороба = ЭлементМассива.СостояниеКороба;
				КонецЦикла;
				
			КонецЕсли;	
			
		КонецЦикла;
	КонецЦикла;
	
	// При согласовании, доработать возврат таблицы с данными
	// ТЗ_Расхождение
	
	Если Объект.КоличествоУпаковочныхЛистовСРасхождением > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
		
КонецФункции

&НаКлиенте
Процедура ОтгрузитьУпаковочныеЛистыСРасхождением()
	
	    СтруктураПараметров = Неопределено;
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораДействия", ЭтотОбъект, СтруктураПараметров);
		
		ПараметрыОткрытия = Неопределено;
		
		Если ИмяФормы = "ВнешняяОбработка.гф_ОтгрузкаПоЗаказам3.Форма.Форма" Тогда
			ОткрытьФорму("ВнешняяОбработка.гф_ОтгрузкаПоЗаказам3.Форма.ФормаВопросаООтгрузкеУпаковочныхЛистовСПересортом", ПараметрыОткрытия,
			ЭтотОбъект, , , , Оповещение);
		Иначе
			ОткрытьФорму("Обработка.гф_ОтгрузкаПоЗаказам.Форма.ФормаВопросаООтгрузкеУпаковочныхЛистовСПересортом", ПараметрыОткрытия,
			ЭтотОбъект, , , , Оповещение);
		КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузитьУстановитьСкидки()
	
	    СтруктураПараметров = Неопределено;
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораДействия", ЭтотОбъект, СтруктураПараметров);
		
		ПараметрыОткрытия = ПолучитьПараметрыФормы();
		
		Если ИмяФормы = "ВнешняяОбработка.гф_ОтгрузкаПоЗаказам3.Форма.Форма" Тогда
			ОткрытьФорму("ВнешняяОбработка.гф_ОтгрузкаПоЗаказам3.Форма.ФормаДанныеДляРТУ", ПараметрыОткрытия,
			ЭтотОбъект, , , , Оповещение);
		Иначе
			ОткрытьФорму("Обработка.гф_ОтгрузкаПоЗаказам.Форма.ФормаДанныеДляРТУ", ПараметрыОткрытия,
			ЭтотОбъект, , , , Оповещение);
		КонецЕсли;
				
КонецПроцедуры

Функция ИсключитьКоробСРасхождениями()
	
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоДокументов");
	
	КоличесвоИсключенныхУпаковочныхЛистов = 0;
	НаличиеУпаковочногоЛистаСПолнымКомплектом = Ложь;
	
	Для Каждого Строка Из ДеревоЗначений.Строки Цикл
		Для Каждого Строка_Н Из Строка.Строки Цикл
			
			НайденныеСтроки = Строка_Н.Строки.НайтиСтроки(Новый Структура("Отгрузить, СостояниеКороба", Истина, "Пересорт"));
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				Для Каждого ЭлементМассива Из НайденныеСтроки Цикл 
					ЭлементМассива.Отгрузить = Ложь;
					КоличесвоИсключенныхУпаковочныхЛистов = КоличесвоИсключенныхУпаковочныхЛистов + 1;
				КонецЦикла;
				
			КонецЕсли;
			
			НайденныеСтроки = Строка_Н.Строки.НайтиСтроки(Новый Структура("Отгрузить, СостояниеКороба", Истина, "Не полный"));
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				Для Каждого ЭлементМассива Из НайденныеСтроки Цикл 
					ЭлементМассива.Отгрузить = Ложь;
					КоличесвоИсключенныхУпаковочныхЛистов = КоличесвоИсключенныхУпаковочныхЛистов + 1;
				КонецЦикла;
				
			КонецЕсли;
			
			НайденныеСтроки = Строка_Н.Строки.НайтиСтроки(Новый Структура("Отгрузить, СостояниеКороба", Истина, "Полный комплект"));
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				НаличиеУпаковочногоЛистаСПолнымКомплектом = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоЗначений, "ДеревоДокументов");
	
	Результат = Новый Структура("КоличесвоИсключенныхУпаковочныхЛистов, НаличиеУпаковочногоЛистаСПолнымКомплектом",
		КоличесвоИсключенныхУпаковочныхЛистов, НаличиеУпаковочногоЛистаСПолнымКомплектом);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОтгрузитьПродолжитьСоСкидками(СтруктураПараметров)
	
	АктивныеЛимитыКлиента = ПолучитьЛимиты();
	
	Если Не АктивныеЛимитыКлиента = Неопределено Тогда
		
		ПроверкаРолиОбходаБлокировок = ПроверитьРольОбходаБлокировок();
		
		Если ПроверкаРолиОбходаБлокировок Тогда
			
			Оповещение = Новый ОписаниеОповещения("ПослеВыбораДействия", ЭтотОбъект, СтруктураПараметров);
			
			Отбор = Новый Структура();
			ПараметрыОткрытия = Новый Структура("Ключ", Отбор);
			
			Если ИмяФормы = "ВнешняяОбработка.гф_ОтгрузкаПоЗаказам3.Форма.Форма" Тогда
				ОткрытьФорму("ВнешняяОбработка.гф_ОтгрузкаПоЗаказам3.Форма.ФормаВопросаООбходеЛимитов", ПараметрыОткрытия,
				ЭтотОбъект, , , , Оповещение);
			Иначе
				ОткрытьФорму("Обработка.гф_ОтгрузкаПоЗаказам.Форма.ФормаВопросаООбходеЛимитов", ПараметрыОткрытия,
				ЭтотОбъект, , , , Оповещение);
			КонецЕсли;
			
		Иначе
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Сумма по отмеченным объектам превышает лимит клиента ""%1""!'"), АктивныеЛимитыКлиента);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		ОтгрузитьНаСервере(Ложь, СтруктураПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отгрузить(Команда)
	
	Отказ = Ложь;
	ЗаказСПермемещением = Ложь;
	// Проверить контрагентнов на различие
	ПроверкаРеквизитовВыбранныхОбъектовДляОтгрузки(Отказ, ЗаказСПермемещением);
	
	Если Не Отказ Тогда
		// Волков исправить
		//ЗаказСПермемещением = Истина;
		
		Если ЗаказСПермемещением Тогда
			
			//ПеремещениеТоваров(Неопределено);
			СоздатьПеремещениеТоваров();
			
		Иначе
			
			АктивныеБлокировкиКлиента = ПолучитьАктивныеБлокировки();
			
			Если Не АктивныеБлокировкиКлиента = Неопределено Тогда
				
				ПроверкаРолиОбходаБлокировок = ПроверитьРольОбходаБлокировок();
				
				Если ПроверкаРолиОбходаБлокировок Тогда
					
					СтруктураПараметров = Неопределено;
					Оповещение = Новый ОписаниеОповещения("ПослеВыбораДействия", ЭтотОбъект, СтруктураПараметров);
					
					Отбор = Новый Структура();
					ПараметрыОткрытия = Новый Структура("Ключ", Отбор);
					
					Если ИмяФормы = "ВнешняяОбработка.гф_ОтгрузкаПоЗаказам3.Форма.Форма" Тогда
						ОткрытьФорму("ВнешняяОбработка.гф_ОтгрузкаПоЗаказам3.Форма.ФормаВопросаООбходеБлокировок", ПараметрыОткрытия,
						ЭтотОбъект, , , , Оповещение);
					Иначе
						ОткрытьФорму("Обработка.гф_ОтгрузкаПоЗаказам.Форма.ФормаВопросаООбходеБлокировок", ПараметрыОткрытия,
						ЭтотОбъект, , , , Оповещение);
					КонецЕсли;
					
				Иначе
					
					Отказ = Истина;
					
					ТекстСообщения = СтрШаблон(НСтр("ru = 'У контрагента ""%1"" есть отметка блокировки, "
					+ "необходимо исключить объекты из отгрузки по контрагенту! '"), АктивныеБлокировкиКлиента);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
					Возврат;
					
				КонецЕсли;	
				
			Иначе
				
				ОтгрузитьПродолжить();
				
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		
		Возврат;
		
	КонецЕсли;
		
КонецПроцедуры

Функция ПолучитьАктивныеБлокировки()
	
	Блокировки = Неопределено;
	
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоДокументов");
	
	Для Каждого Строка Из ДеревоЗначений.Строки Цикл
		Для Каждого Строка_Н Из строка.Строки Цикл
			Для Каждого Строка_Т Из Строка_Н.Строки Цикл
				
				Если Строка_Т.Отгрузить И Строка_Т.БлокировкиОтгрузок Тогда
					Возврат Строка_Т.Клиент;	
				КонецЕсли;
			
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Блокировки;	
	
КонецФункции
	
Процедура ПроверкаРеквизитовВыбранныхОбъектовДляОтгрузки(Отказ, ЗаказСПермемещением)
	
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоДокументов");
	
	СписокДоговоров = Новый ТаблицаЗначений;
	СписокДоговоров.Колонки.Добавить("Договор");
	
	СписокКонтрагентов = Новый ТаблицаЗначений;
	СписокКонтрагентов.Колонки.Добавить("Клиент");
	
	СписокЗаказовСезонность = Новый ТаблицаЗначений;
	СписокЗаказовСезонность.Колонки.Добавить("Сезонность");
	
	НаличиеУпаковочногоЛистаКОтгрузке = Ложь;
	
	Для Каждого Строка Из ДеревоЗначений.Строки Цикл
		Для Каждого Строка_Н Из строка.Строки Цикл
			Для Каждого Строка_Т Из Строка_Н.Строки Цикл
				
				Если Строка_Т.Отгрузить Тогда
					НаличиеУпаковочногоЛистаКОтгрузке = Истина;
				КонецЕсли;
				
				Если Строка_Т.Отгрузить И Не Строка_Т.БлокировкиОтгрузок Тогда
					
					Стр = СписокДоговоров.Добавить();
					Стр.Договор = Строка_Т.Договор;
					
					Стр = СписокКонтрагентов.Добавить();
					Стр.Клиент = Строка_Т.Клиент;
					
					Стр = СписокЗаказовСезонность.Добавить();
					Стр.Сезонность = Строка_Т.Заказ.гф_СезонныйЗаказ;	
					
					Если Строка_Т.ОтгрузкаПеремещением Тогда
					    ЗаказСПермемещением = Истина;
					КонецЕсли;
					
				КонецЕсли;
			
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если Не НаличиеУпаковочногоЛистаКОтгрузке Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Не отмечен к отгрузке ни один объект.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СписокКонтрагентов.Свернуть("Клиент");
	
	Если СписокКонтрагентов.Количество() > 1 Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Необходимо отметить для отгрузки объекты только по одному клиенту.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СписокДоговоров.Свернуть("Договор");
	
	Если СписокДоговоров.Количество() > 1 Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Отмечены для отгрузки объекты с разными договорами! Необходимо отметить только по одному договору.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СписокЗаказовСезонность.Свернуть("Сезонность");
	
	Если СписокЗаказовСезонность.Количество() > 1 Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Отмечены заказы с разной сезонностью! Необходимо отметить объекты по заказу с одинаковой сезонностью'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры
	
Функция ПолучитьЛимиты()	
	
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоДокументов");
	
	// Сбор информации по лимитам контрагента, при превышении лимита общей суммой по упаковочным листам, отмена отгрузки
	Лимиты = Неопределено;
	
	ТабСуммаОтгрузки = Новый ТаблицаЗначений;
	ТабСуммаОтгрузки.Колонки.Добавить("Клиент");
	ТабСуммаОтгрузки.Колонки.Добавить("Заказ");
    ТабСуммаОтгрузки.Колонки.Добавить("УпаковочныйЛист");
    ТабСуммаОтгрузки.Колонки.Добавить("Стоимость");
	ТабСуммаОтгрузки.Колонки.Добавить("ДействующийЛимит");
	
	Для Каждого Строка Из ДеревоЗначений.Строки Цикл
		Для Каждого Строка_Н Из строка.Строки Цикл
			Для Каждого Строка_Т Из Строка_Н.Строки Цикл
				
				Если Строка_Т.Отгрузить И (ЗначениеЗаполнено(Строка_Т.УпаковочныйЛистСсылка) Или (Не Объект.ТоварыВКоробках И ЗначениеЗаполнено(Строка_Т.Номенклатура))) Тогда
					Стр = ТабСуммаОтгрузки.Добавить();
					Стр.Клиент = Строка_Т.Клиент;
					Стр.Заказ = Строка_Т.Заказ;
					Стр.УпаковочныйЛист = Строка_Т.УпаковочныйЛистСсылка;
					Стр.Стоимость = Строка_Т.Стоимость;
					Стр.ДействующийЛимит = Строка_Т.ДействующийЛимит;
				КонецЕсли;
			
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ТабСуммаОтгрузки.Свернуть("Клиент, ДействующийЛимит", "Стоимость");
	
	Для Каждого СтрокаКлиент Из ТабСуммаОтгрузки Цикл
		
		Если СтрокаКлиент.Стоимость > Число(СтрокаКлиент.ДействующийЛимит) Тогда
			
			Возврат СтрокаКлиент.Клиент;
		
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Лимиты;	
	
КонецФункции

&НаКлиенте
Процедура ОтгрузитьНаСервере(Отказ, СтруктураПереданныхДанных)
	
	//Если ЗначениеЗаполнено(Объект.Склад) И Объект.ТоварыВКоробках Тогда
		ВыполнитьДействиеПоОтгрузкеСУчетомСклада(Отказ, СтруктураПереданныхДанных);
	//Иначе
	//	ВыполнитьДействиеПоОтгрузке(Отказ, СтруктураПереданныхДанных);
	//КонецЕсли;
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	ПриОткрытии(Отказ);
		
КонецПроцедуры	

Процедура ВыполнитьДействиеПоОтгрузке(Отказ, СтруктураПереданныхДанных)
	
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоДокументов");
	
	// Таблица для записи каждого заказа с конкретным списком упаковочных листов по этому заказу,
	// Таблица с новыми строками и количеством для отгрузки получившиеся после учета комплектации по каждому упаковочному листу этого заказа
	// При успешном прохождении проверки наличия комплектации из упаковочного листа  в заказе, то "ВозможнаЗаписьЗаказа" запишется Истина
	// При успешном перепроведении заказе с новой таблицей "НовыеДанныеДляТаблицыПоЗаказу", то в "Перепроведен" запишется Истина
	ТЗ_Заказы = Новый ТаблицаЗначений;
	ТЗ_Заказы.Колонки.Добавить("Заказ");
    ТЗ_Заказы.Колонки.Добавить("СписокУпаковочныйЛистИлиНоменклатура");
	ТЗ_Заказы.Колонки.Добавить("НовыеДанныеДляТаблицыПоЗаказу");
	ТЗ_Заказы.Колонки.Добавить("Перепроведен");
	ТЗ_Заказы.Колонки.Добавить("ВозможнаЗаписьЗаказа");
	
	// Проверка и заодно заполнение объектами для огрузки
	Для Каждого Строка Из ДеревоЗначений.Строки Цикл
		Для Каждого Строка_Н Из Строка.Строки Цикл
			Для Каждого Строка_Т Из Строка_Н.Строки Цикл
				
				Если Строка_Т.Отгрузить И (ЗначениеЗаполнено(Строка_Т.УпаковочныйЛистСсылка) Или (Не Объект.ТоварыВКоробках И ЗначениеЗаполнено(Строка_Т.Номенклатура))) Тогда
					
					НайтиЗаказ = ТЗ_Заказы.Найти(Строка_Т.Заказ, "Заказ");
					
					Если НайтиЗаказ = Неопределено Тогда
						СтрокаЗаказы = ТЗ_Заказы.Добавить();
						СтрокаЗаказы.Заказ = Строка_Т.Заказ;
						
						ТЗ_ОбъектыДляОтгрузки = Новый ТаблицаЗначений;
						ТЗ_ОбъектыДляОтгрузки.Колонки.Добавить("ЭлементУпаковочныйЛистНоменклатура");
						ТЗ_ОбъектыДляОтгрузки.Колонки.Добавить("КоличествоОстаток");
						ТЗ_ОбъектыДляОтгрузки.Колонки.Добавить("Цена");
						ТЗ_ОбъектыДляОтгрузки.Колонки.Добавить("СписокКодовСтроки");
						ТЗ_ОбъектыДляОтгрузки.Колонки.Добавить("Перепроведен");
						ТЗ_ОбъектыДляОтгрузки.Колонки.Добавить("Характеристика");
						ТЗ_ОбъектыДляОтгрузки.Колонки.Добавить("Скидка");

						СтрокаОбъектыДляОтгрузки = ТЗ_ОбъектыДляОтгрузки.Добавить();
						
						ЗаполнитьЗначенияИзСтроки(СтрокаОбъектыДляОтгрузки, Строка_Т, Объект.ТоварыВКоробках);
						
						СтрокаЗаказы.СписокУпаковочныйЛистИлиНоменклатура = ТЗ_ОбъектыДляОтгрузки;
					Иначе
						СтрокаОбъектыДляОтгрузки = НайтиЗаказ.СписокУпаковочныйЛистИлиНоменклатура.Добавить();
						
						ЗаполнитьЗначенияИзСтроки(СтрокаОбъектыДляОтгрузки, Строка_Т, Объект.ТоварыВКоробках);
					КонецЕсли;
				
				КонецЕсли;
			
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если ТЗ_Заказы.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не отмечен ни один объект.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	Для Каждого СтрокаЗаказы Из ТЗ_Заказы Цикл
		
		ВозможнаЗаписьЗаказа = Ложь;
		ОбъектЗаказ = СтрокаЗаказы.Заказ.ПолучитьОбъект();
		
		ТЗ_Товары = Новый ТаблицаЗначений;
		ТЗ_Товары = ОбъектЗаказ.Товары.Выгрузить();
		
		// Таблица для получения колонок
		ТЗКолонкиТоваровЗаказа = Новый ТаблицаЗначений;
		ТЗКолонкиТоваровЗаказа = ОбъектЗаказ.Товары.Выгрузить();
		ТЗКолонкиТоваровЗаказа.Очистить();
		
		// Копируем на случай, если один из упаковочных листов не сможет пройти отгрузку по количеству в заказе,
		// тогда заменим таблицу данными до изменения таблицы заказа данными из упаковочного листа
		ТабКомплектацияЗаказ = Новый ТаблицаЗначений;
		ТабКомплектацияЗаказ = ТЗ_Товары.Скопировать();
		
		Для Каждого СтрокаУпаковочныйЛистНоменклатура Из СтрокаЗаказы.СписокУпаковочныйЛистИлиНоменклатура Цикл
			
			УпЛистНайден = Ложь;
			ОтказЗаписьУпаковочногоЛиста = Ложь;
			
			ТЗ = Новый ТаблицаЗначений;
			ТЗ = ТЗКолонкиТоваровЗаказа.СкопироватьКолонки();
			
			Если Объект.ТоварыВКоробках Тогда
				
				ТабКомплектация = Новый ТаблицаЗначений;
				ТабКомплектация.Колонки.Добавить("Номенклатура");
				ТабКомплектация.Колонки.Добавить("Характеристика");
				ТабКомплектация.Колонки.Добавить("Количество");
				
				// Получение списка номенклатуры входящей в упаковочный лист для последующего разделения строк с вычетом количества
				// согласно комплектации упаковочного листа из таблицы заказа
				Для Каждого СтрокаКомплектация Из СтрокаУпаковочныйЛистНоменклатура.УпаковочныйЛист.Товары Цикл
					НоваяСтрокаКомплектация = ТабКомплектация.Добавить();
					НоваяСтрокаКомплектация.Номенклатура = СтрокаКомплектация.Номенклатура;
					НоваяСтрокаКомплектация.Характеристика = СтрокаКомплектация.Характеристика;
					НоваяСтрокаКомплектация.Количество = СтрокаКомплектация.Количество;
				КонецЦикла;
				
				// Запись кодов строк из заказа для последующей записи в табличную часть упаковочного листа
				СписокКодовСтрокиПоУпаковочнымЛистам = Новый ТаблицаЗначений;
				СписокКодовСтрокиПоУпаковочнымЛистам.Колонки.Добавить("УпаковочныйЛист");
				СписокКодовСтрокиПоУпаковочнымЛистам.Колонки.Добавить("КодСтроки");
				СписокКодовСтрокиПоУпаковочнымЛистам.Колонки.Добавить("Номенклатура");
				СписокКодовСтрокиПоУпаковочнымЛистам.Колонки.Добавить("Характеристика");
				СписокКодовСтрокиПоУпаковочнымЛистам.Колонки.Добавить("Количество");
				
			КонецЕсли;
			
			Для Каждого СтрокаТовары Из ТЗ_Товары Цикл
				
				Если СтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Или СтрокаТовары.Отменено Тогда
					Продолжить;
				Иначе
					
					ДополнительныеПараметры = ПолучитьДополнительныеПараметры(СтрокаТовары, Ложь);
					
					ПараметрыРазбиенияСтроки = ПараметрыРазбиенияСтроки();
					
					Количество = 0;
					
					Если Объект.ТоварыВКоробках Тогда
						Для Каждого СтрокаКомплектацияРазбиение Из ТабКомплектация Цикл
							Если СтрокаКомплектацияРазбиение.Номенклатура = СтрокаТовары.Номенклатура
								И СтрокаКомплектацияРазбиение.Характеристика = СтрокаТовары.Характеристика Тогда
								
								Количество = СтрокаКомплектацияРазбиение.Количество;
								
								ПараметрыОбработки = ПолучитьПараметрыОбработки(ТЗ, ЭтаФорма, "", ПараметрыРазбиенияСтроки, ДополнительныеПараметры, Количество);
								
								ДобавитьСтрокуРазбиением(ПараметрыОбработки, ТЗ, СтрокаТовары, ТЗ_Товары, ОтказЗаписьУпаковочногоЛиста, СписокКодовСтрокиПоУпаковочнымЛистам,
									СтрокаУпаковочныйЛистНоменклатура.ЭлементУпаковочныйЛистНоменклатура, СтруктураПереданныхДанных, СтрокаУпаковочныйЛистНоменклатура.Скидка);
								
								Прервать;
								
							КонецЕсли;
						КонецЦикла;
					Иначе	
						Если СтрокаУпаковочныйЛистНоменклатура.ЭлементУпаковочныйЛистНоменклатура = СтрокаТовары.Номенклатура Тогда
							
							Если ЗначениеЗаполнено(СтрокаТовары.Характеристика) Тогда
								
								Если СтрокаУпаковочныйЛистНоменклатура.Характеристика = СтрокаТовары.Характеристика Тогда
									
									Количество = СтрокаУпаковочныйЛистНоменклатура.КоличествоОстаток;
									
									ПараметрыОбработки = ПолучитьПараметрыОбработки(ТЗ, ЭтаФорма, "", ПараметрыРазбиенияСтроки, ДополнительныеПараметры, Количество);
									
									ДобавитьСтрокуРазбиением(ПараметрыОбработки, ТЗ, СтрокаТовары, ТЗ_Товары, ОтказЗаписьУпаковочногоЛиста,
										Неопределено, СтрокаУпаковочныйЛистНоменклатура.ЭлементУпаковочныйЛистНоменклатура, СтруктураПереданныхДанных, СтрокаУпаковочныйЛистНоменклатура.Скидка);
									
									Прервать;
									
								КонецЕсли;
								
							Иначе
								
								Количество = СтрокаУпаковочныйЛистНоменклатура.КоличествоОстаток;
								
								ПараметрыОбработки = ПолучитьПараметрыОбработки(ТЗ, ЭтаФорма, "", ПараметрыРазбиенияСтроки, ДополнительныеПараметры, Количество);
								
								ДобавитьСтрокуРазбиением(ПараметрыОбработки, ТЗ, СтрокаТовары, ТЗ_Товары, ОтказЗаписьУпаковочногоЛиста,
									Неопределено, СтрокаУпаковочныйЛистНоменклатура.ЭлементУпаковочныйЛистНоменклатура, СтруктураПереданныхДанных, СтрокаУпаковочныйЛистНоменклатура.Скидка);
								
								Прервать;
								
							КонецЕсли;
							
						КонецЕсли;			
					КонецЕсли;
					
				КонецЕсли;
				
				Если Объект.ТоварыВКоробках Тогда
					Если ОтказЗаписьУпаковочногоЛиста Тогда
						ТекстСообщения = СтрШаблон(НСтр("ru = 'Не достаточно остатков в ""%1"" по ""%2""'"), ОбъектЗаказ, СтрокаУпаковочныйЛистНоменклатура.УпаковочныйЛист);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						Прервать;	
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			
			//
			//Если Объект.ТоварыВКоробках Тогда
			//	Если Не ОтказЗаписьУпаковочногоЛиста Тогда
			//		
			//		Для Каждого СтрокаТаблицыИсточника Из ТЗ Цикл
			//			СтрокаТаблицыПриемника = ТЗ_Товары.Добавить();
			//			ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
			//		КонецЦикла;
			//		
			//		ТабКомплектацияЗаказ = ТЗ_Товары.Скопировать();
			//		
			//		СтрокаУпаковочныйЛистНоменклатура.СписокКодовСтроки = СписокКодовСтрокиПоУпаковочнымЛистам;
			//		
			//	Иначе
			//		
			//		ТЗ_Товары = ТабКомплектацияЗаказ.Скопировать();
			//		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не достаточно остатков в ""%1"" по ""%2""'"), ОбъектЗаказ, СтрокаУпаковочныйЛистНоменклатура.УпаковочныйЛист);
			//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			//		
			//	КонецЕсли;
			//	
			//Иначе
				
				Для Каждого СтрокаТаблицыИсточника Из ТЗ Цикл
					СтрокаТаблицыПриемника = ТЗ_Товары.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
				КонецЦикла;
				
			//КонецЕсли;
			
		КонецЦикла;
		
		
		
		
		
		
		
		СтрокаЗаказы.НовыеДанныеДляТаблицыПоЗаказу 	= ТЗ_Товары;
		СтрокаЗаказы.ВозможнаЗаписьЗаказа 			= Истина;
		
	КонецЦикла;
	
	Для Каждого СтрокаЗаказы Из ТЗ_Заказы Цикл
		
		Если СтрокаЗаказы.ВозможнаЗаписьЗаказа И СтрокаЗаказы.НовыеДанныеДляТаблицыПоЗаказу.Количество() > 0 Тогда
			
			ОбъектЗаказ = СтрокаЗаказы.Заказ.ПолучитьОбъект();
			
			Попытка
				ОбъектЗаказ.Заблокировать();
			Исключение
				ТекстСообщения = СтрШаблон(НСтр("ru = '%1 находится в процессе редактирования и не может быть изменен.'"), ОбъектЗаказ);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,);
				Продолжить;
			КонецПопытки;
			
			// Загрузка таблицы с новыми данными по отгрузке по заказу с учетом комплектации всех прошедших проверку упаковочных листов 
			// и доступного наличии количества номенклатуры для отгрузки в заказе
			ОбъектЗаказ.Товары.Загрузить(СтрокаЗаказы.НовыеДанныеДляТаблицыПоЗаказу);
			
			// Запись нового максимального значения в реквизит заказа "КодСтроки", так как ранее разбивали строки создавая новые с новым кодом строки
			ТЗМакс = ОбъектЗаказ.Товары.Выгрузить(, "КодСтроки");
			
			МаксКодСтроки = Новый СравнениеЗначений;
			ТЗМакс.Сортировать("КодСтроки Убыв", МаксКодСтроки);
			ОбъектЗаказ.МаксимальныйКодСтроки = ТЗМакс[0].КодСтроки;
			
			//СтруктураДополнительныхСвойств = Новый Структура("гф_ОбработкаОтгрузкаПоЗаказам", Истина);
			
			//ОбъектЗаказ.ДополнительныеСвойства = СтруктураДополнительныхСвойств;
			ОбъектЗаказ.ДополнительныеСвойства.Вставить("гф_ОбработкаОтгрузкаПоЗаказам", Истина);
			
			// Транзакция проводит документы заказ, расходный ордер, упаковочный лист
			// и изменяет агрегацию (элементы справочника с кодами маркировки)
			НачатьТранзакцию();
			
			Попытка
				
				ОбъектЗаказ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
								
				СтрокаЗаказы.Перепроведен = Истина;
				
			Исключение
				
				СтрокаЗаказы.Перепроведен = Ложь;
				
				Если ТранзакцияАктивна() Тогда
					ОтменитьАктивнуюТранзакцию();
				КонецЕсли;
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Заказ не проведен ""%1"" и расходный ордер не сформирован.'"),
					СтрокаЗаказы.Заказ);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Проведение документа ""Заказ клиента""'"), УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ВызватьИсключение;
				
			КонецПопытки;	
			
			Если СтрокаЗаказы.Перепроведен Тогда
				
				Распоряжения = Новый Массив;
				Распоряжения.Добавить(СтрокаЗаказы.Заказ);
				
				МассивРаспоряжений.ЗагрузитьЗначения(Распоряжения);
				
				Если Объект.ТоварыВКоробках Тогда
					ОбъектыДляОрдера = СтрокаЗаказы.УпаковочныеЛисты;
				Иначе
					ОбъектыДляОрдера = СтрокаЗаказы.СписокУпаковочныйЛистИлиНоменклатура
				КонецЕсли;
			
				Попытка
					
					// Дополнительно передаем "ОбъектЗаказ" для получения табличной части "Товары" и последующего отбора по коду строки
					СтруктураЗадания = ОформитьРасходныеОрдераНаСервере(ОбъектыДляОрдера, Отказ, ОбъектЗаказ);
					
					Если Не Отказ Тогда
						Если ТранзакцияАктивна() Тогда
							ЗафиксироватьАктивнуюТранзакцию();
							
							Для Каждого Стр Из СтруктураЗадания.ОформленныеОрдера Цикл
							
								РасходныйОрдерПредставление = Стр.РасходныйОрдер;
								Прервать;
							
							КонецЦикла;
							
							ТекстСообщения = СтрШаблон(НСтр("ru = 'По заказу ""%1"" сформирован расходный ордер и проведен!'"),
							СтрокаЗаказы.Заказ);
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
							
						КонецЕсли;
					Иначе
						
						Если ТранзакцияАктивна() Тогда
							ОтменитьАктивнуюТранзакцию();
						КонецЕсли;
						
						Возврат;
						
					КонецЕсли;
				
				Исключение
					
					// Возможна ситуация когда в момент работы обработки по отгрузке, изменятся доступные остатки
					Если ТранзакцияАктивна() Тогда
						ОтменитьАктивнуюТранзакцию();
					КонецЕсли;
					
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Заказ ""%1"" сформирован но расходный ордер не проведен. Выполена отмена изменения заказа!'"),
						СтрокаЗаказы.Заказ);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Проведение документа ""Расходный ордер""'"), УровеньЖурналаРегистрации.Ошибка,,,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ВызватьИсключение;
					
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Функция ПолучитьКоличествоУпаковокВУпаковочномЛисте(УпаковочныйЛистСсылка)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(УпаковочныйЛистТовары.КоличествоУпаковок) КАК КоличествоУпаковок
	|ИЗ
	|	Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
	|ГДЕ
	|	УпаковочныйЛистТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", УпаковочныйЛистСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.КоличествоУпаковок;
	КонецЦикла;

КонецФункции

Процедура ВыполнитьДействиеПоОтгрузкеСУчетомСклада(Отказ, СтруктураПереданныхДанных)
	
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоДокументов");
	
	// Таблица для записи каждого заказа с конкретным списком упаковочных листов по этому заказу,
	// Добавляем Таблицу "НовыеДанныеДляТаблицыПоЗаказу" с новыми строками и количеством для отгрузки, количество после учета
	// комплектации по каждому упаковочному листу этого заказа
	// При успешном прохождении проверки наличия комплектации из упаковочного листа  в заказе, то "ВозможнаЗаписьЗаказа" запишется Истина
	// При успешном перепроведении заказа с новой таблицей "НовыеДанныеДляТаблицыПоЗаказу", то в "Перепроведен" запишется Истина
	ТЗ_Заказы = Новый ТаблицаЗначений;
	ТЗ_Заказы.Колонки.Добавить("Заказ");
	//ТЗ_Заказы.Колонки.Добавить("УпаковочныеЛисты");
	ТЗ_Заказы.Колонки.Добавить("СписокУпаковочныйЛистИлиНоменклатура");
	ТЗ_Заказы.Колонки.Добавить("НовыеДанныеДляТаблицыПоЗаказу");
	ТЗ_Заказы.Колонки.Добавить("НовыеДанныеДляТаблицыПоЗаказуТоварыВКоробах");
	ТЗ_Заказы.Колонки.Добавить("НовыеДанныеДляТаблицыПоЗаказуПричиныИзмененияТоварыВКоробах");
	ТЗ_Заказы.Колонки.Добавить("Перепроведен");
	ТЗ_Заказы.Колонки.Добавить("ВозможнаЗаписьЗаказа");
	
	Для Каждого Строка Из ДеревоЗначений.Строки Цикл
		Для Каждого Строка_Н Из Строка.Строки Цикл
			Для Каждого Строка_Т Из Строка_Н.Строки Цикл
				
				// Исключение упаковочных листов с пересортом, если пользователь выбрал в окне выбора действий "Исключить короб из отгрузки"
				Если Объект.ТоварыВКоробках И Объект.ИсключитьКоробСРасхождениями И Строка_Т.Отгрузить И ЗначениеЗаполнено(Строка_Т.УпаковочныйЛистСсылка)
					И Строка_Т.СостояниеКороба = "Пересорт" Тогда
					
					Строка_Т.Отгрузить = Ложь;
					
				КонецЕсли;
				
				//Если Строка_Т.Отгрузить И ЗначениеЗаполнено(Строка_Т.УпаковочныйЛистСсылка) Тогда
				Если Строка_Т.Отгрузить И (ЗначениеЗаполнено(Строка_Т.УпаковочныйЛистСсылка) Или (Не Объект.ТоварыВКоробках И ЗначениеЗаполнено(Строка_Т.Номенклатура))) Тогда
					
					НайтиЗаказ = ТЗ_Заказы.Найти(Строка_Т.Заказ, "Заказ");
					
					Если НайтиЗаказ = Неопределено Тогда
						СтрокаЗаказы = ТЗ_Заказы.Добавить();
						СтрокаЗаказы.Заказ = Строка_Т.Заказ;
						
						ТЗ_ОбъектыДляОтгрузки = Новый ТаблицаЗначений;
						ТЗ_ОбъектыДляОтгрузки.Колонки.Добавить("УпаковочныйЛист");
						ТЗ_ОбъектыДляОтгрузки.Колонки.Добавить("ЭлементУпаковочныйЛистНоменклатура");
						ТЗ_ОбъектыДляОтгрузки.Колонки.Добавить("КоличествоОстаток");
						ТЗ_ОбъектыДляОтгрузки.Колонки.Добавить("Цена");
						ТЗ_ОбъектыДляОтгрузки.Колонки.Добавить("ЦенаПары");
						ТЗ_ОбъектыДляОтгрузки.Колонки.Добавить("СписокКодовСтроки");
						ТЗ_ОбъектыДляОтгрузки.Колонки.Добавить("Перепроведен");
						ТЗ_ОбъектыДляОтгрузки.Колонки.Добавить("КоличествоПарОбуви");
						ТЗ_ОбъектыДляОтгрузки.Колонки.Добавить("Характеристика");
						ТЗ_ОбъектыДляОтгрузки.Колонки.Добавить("Скидка");

						СтрокаОбъектыДляОтгрузки = ТЗ_ОбъектыДляОтгрузки.Добавить();
						
						Если Объект.ТоварыВКоробках Тогда
							СтрокаОбъектыДляОтгрузки.УпаковочныйЛист 		= Строка_Т.УпаковочныйЛистСсылка;
							СтрокаОбъектыДляОтгрузки.КоличествоОстаток 		= Строка_Т.КоличествоОстаток;
							СтрокаОбъектыДляОтгрузки.ЦенаПары 				= Строка_Т.Цена;
							
							//СтрокаОбъектыДляОтгрузки.КоличествоПарОбуви 	= Строка_Т.УпаковочныйЛистСсылка.Товары.Количество();
							СтрокаОбъектыДляОтгрузки.КоличествоПарОбуви = ПолучитьКоличествоУпаковокВУпаковочномЛисте(Строка_Т.УпаковочныйЛистСсылка);
							
							//СтрокаЗаказы.УпаковочныеЛисты = ТЗ_ОбъектыДляОтгрузки;
							//СтрокаЗаказы.СписокУпаковочныйЛистИлиНоменклатура = ТЗ_ОбъектыДляОтгрузки;
						Иначе
							ЗаполнитьЗначенияИзСтроки(СтрокаОбъектыДляОтгрузки, Строка_Т, Объект.ТоварыВКоробках);
							
							//СтрокаЗаказы.СписокУпаковочныйЛистИлиНоменклатура = ТЗ_ОбъектыДляОтгрузки;
						КонецЕсли;
						
						СтрокаЗаказы.СписокУпаковочныйЛистИлиНоменклатура = ТЗ_ОбъектыДляОтгрузки;
						
					Иначе
						
						СтрокаОбъектыДляОтгрузки = НайтиЗаказ.СписокУпаковочныйЛистИлиНоменклатура.Добавить();
						
						Если Объект.ТоварыВКоробках Тогда
							//СтрокаОбъектыДляОтгрузки = НайтиЗаказ.УпаковочныеЛисты.Добавить();
							//СтрокаОбъектыДляОтгрузки = НайтиЗаказ.СписокУпаковочныйЛистИлиНоменклатура.Добавить();
							
							СтрокаОбъектыДляОтгрузки.УпаковочныйЛист 		= Строка_Т.УпаковочныйЛистСсылка;
							СтрокаОбъектыДляОтгрузки.КоличествоОстаток 		= Строка_Т.КоличествоОстаток;
							СтрокаОбъектыДляОтгрузки.ЦенаПары 				= Строка_Т.Цена;
							
							//СтрокаОбъектыДляОтгрузки.КоличествоПарОбуви 	= Строка_Т.УпаковочныйЛистСсылка.Товары.Количество();
							СтрокаОбъектыДляОтгрузки.КоличествоПарОбуви = ПолучитьКоличествоУпаковокВУпаковочномЛисте(Строка_Т.УпаковочныйЛистСсылка);
						Иначе
							//СтрокаОбъектыДляОтгрузки = НайтиЗаказ.СписокУпаковочныйЛистИлиНоменклатура.Добавить();
							
							ЗаполнитьЗначенияИзСтроки(СтрокаОбъектыДляОтгрузки, Строка_Т, Объект.ТоварыВКоробках);
						КонецЕсли;
						
					КонецЕсли;
				
				КонецЕсли;
			
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если ТЗ_Заказы.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не отмечен ни один объект.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	Если Объект.ТоварыВКоробках Тогда
		СписокЗаказов = Новый ТаблицаЗначений;
		СписокЗаказов.Колонки.Добавить("ЗаказКлиента");
		СписокЗаказов.Колонки.Добавить("УпаковочныйЛист");
		СписокЗаказов.Колонки.Добавить("СписокКодовСтроки");
	КонецЕсли;
	
	Для Каждого СтрокаЗаказы Из ТЗ_Заказы Цикл
		
		ВозможнаЗаписьЗаказа = Ложь;
		ОбъектЗаказ = СтрокаЗаказы.Заказ.ПолучитьОбъект();
		
		ТЗ_Товары = Новый ТаблицаЗначений;
		ТЗ_Товары = ОбъектЗаказ.Товары.Выгрузить();
		
		// Получения колонок по "Товары" для последующей записи в эту таблицу
		ТЗКолонкиТоваровЗаказа = Новый ТаблицаЗначений;
		ТЗКолонкиТоваровЗаказа = ОбъектЗаказ.Товары.Выгрузить();
		ТЗКолонкиТоваровЗаказа.Очистить();
		
		// Копируем на случай, если один из упаковочных листов не сможет пройти отгрузку по количеству в заказе,
		// тогда заменим таблицу данными до изменения таблицы заказа, данными из упаковочного листа
		// Используется для временного копирования и хранения оригинальных данных
		ТабКомплектацияЗаказ = Новый ТаблицаЗначений;
		ТабКомплектацияЗаказ = ТЗ_Товары.Скопировать();
		
		Если Объект.ТоварыВКоробках Тогда
			ТЗ_ТоварыВКоробах = Новый ТаблицаЗначений;
			ТЗ_ТоварыВКоробах = ОбъектЗаказ.гф_ТоварыВКоробах.Выгрузить();
			ТЗ_ПричиныИзмененияТоварыВКоробах = Новый ТаблицаЗначений;
			ТЗ_ПричиныИзмененияТоварыВКоробах = ОбъектЗаказ.гф_ПричиныИзмененияТоваровВКоробах.Выгрузить();
			
			// Получения колонок по "гф_ТоварыВКоробах" для последующей записи в эту таблицу
			ТЗКолонкиТоварыВКоробахЗаказа = Новый ТаблицаЗначений;
			ТЗКолонкиТоварыВКоробахЗаказа = ОбъектЗаказ.гф_ТоварыВКоробах.Выгрузить();
			ТЗКолонкиТоварыВКоробахЗаказа.Очистить();
			
			// Получения колонок по "гф_ПричиныИзмененияТоваровВКоробах" для последующей записи в эту таблицу
			ТЗКолонкиПричиныИзмененияТоваровВКоробах = Новый ТаблицаЗначений;
			ТЗКолонкиПричиныИзмененияТоваровВКоробах = ОбъектЗаказ.гф_ПричиныИзмененияТоваровВКоробах.Выгрузить();
			ТЗКолонкиПричиныИзмененияТоваровВКоробах.Очистить();
		
			// Используется для временного копирования и хранения оригинальных данных
			ТабКомплектацияЗаказТоварыВКоробах = Новый ТаблицаЗначений;
			ТабКомплектацияЗаказТоварыВКоробах = ТЗ_ТоварыВКоробах.Скопировать();
			
			// Используется для временного копирования и хранения оригинальных данных
			ТабКомплектацияЗаказПричиныИзмененияТоварыВКоробах = Новый ТаблицаЗначений;
			ТабКомплектацияЗаказПричиныИзмененияТоварыВКоробах = ТЗ_ПричиныИзмененияТоварыВКоробах.Скопировать();
		КонецЕсли;
	
		//Для Каждого СтрокаУпаковочныйЛист Из СтрокаЗаказы.УпаковочныеЛисты Цикл
		Для Каждого СтрокаУпаковочныйЛистНоменклатура Из СтрокаЗаказы.СписокУпаковочныйЛистИлиНоменклатура Цикл
			
			УпЛистНайден = Ложь;
			ОтказЗаписьУпаковочногоЛиста = Ложь;
			
			ТЗ = Новый ТаблицаЗначений;
			ТЗ = ТЗКолонкиТоваровЗаказа.СкопироватьКолонки();
			
			Если Объект.ТоварыВКоробках Тогда
				ТЗКВТ = Новый ТаблицаЗначений;
				ТЗКВТ = ТЗКолонкиТоварыВКоробахЗаказа.СкопироватьКолонки();
				
				ТЗПричиныИзменения = Новый ТаблицаЗначений;
				ТЗПричиныИзменения = ТЗКолонкиПричиныИзмененияТоваровВКоробах.СкопироватьКолонки();
				
				
				ТабКомплектация = Новый ТаблицаЗначений;
				ТабКомплектация.Колонки.Добавить("Номенклатура");
				ТабКомплектация.Колонки.Добавить("Характеристика");
				ТабКомплектация.Колонки.Добавить("Количество");
				
				// Получение списка номенклатуры входящей в упаковочный лист для последующего разделения строк с вычетом количества
				// из обрабатываемой текущей строки в заказе согласно перебираемым строкам эталонной комплектации упаковочного листа
				Для Каждого СтрокаКомплектация Из СтрокаУпаковочныйЛистНоменклатура.УпаковочныйЛист.Товары Цикл
					НоваяСтрокаКомплектация = ТабКомплектация.Добавить();
					НоваяСтрокаКомплектация.Номенклатура = СтрокаКомплектация.Номенклатура;
					НоваяСтрокаКомплектация.Характеристика = СтрокаКомплектация.Характеристика;
					НоваяСтрокаКомплектация.Количество = СтрокаКомплектация.Количество;
				КонецЦикла;
				
				// Запись кодов строк из заказа для последующей записи в табличную часть упаковочного листа
				СписокКодовСтрокиПоУпаковочнымЛистам = Новый ТаблицаЗначений;
				СписокКодовСтрокиПоУпаковочнымЛистам.Колонки.Добавить("УпаковочныйЛист");
				СписокКодовСтрокиПоУпаковочнымЛистам.Колонки.Добавить("КодСтроки");
				СписокКодовСтрокиПоУпаковочнымЛистам.Колонки.Добавить("Номенклатура");
				СписокКодовСтрокиПоУпаковочнымЛистам.Колонки.Добавить("Характеристика");
				СписокКодовСтрокиПоУпаковочнымЛистам.Колонки.Добавить("Количество");
			КонецЕсли;
		
			// Разбиваем строки Упаковочных листов, записываем скидкиРТУ датуРТУ и комментарийРТУ.
			// Перебираем строки согласно варианту комплектации упаковочного листа, эталон варианта комплектации сравнивается с текущим состояним короба (Не полный, Пересорт)
			// передаем дальше скидку "СкидкаВКоробах" по текущемуупаковочному листу,
			// с последующей записью для включения "СкидкаВКоробах" в отбор поиска строк по номеменклатуре и характеристике 
			Если Объект.ТоварыВКоробках Тогда
				ВозвратПродолжить = Ложь;
				Отказ = Ложь;
				ОбработкаЗаполненияТоваровВКоробах(Отказ, ВозвратПродолжить, ТЗ_Товары, ТЗ, СтрокаУпаковочныйЛистНоменклатура, СтруктураПереданныхДанных, ОтказЗаписьУпаковочногоЛиста, ОбъектЗаказ,
					ТЗ_ТоварыВКоробах, ТЗ_ПричиныИзмененияТоварыВКоробах, ТЗКВТ, ТЗПричиныИзменения, ТабКомплектация, СписокКодовСтрокиПоУпаковочнымЛистам);
					
				Если Отказ Тогда
					Возврат;	
				ИначеЕсли ВозвратПродолжить Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				ОбработкаЗаполненияТоваров(ТЗ_Товары, ТЗ, СтрокаУпаковочныйЛистНоменклатура, СтруктураПереданныхДанных, ОтказЗаписьУпаковочногоЛиста, ОбъектЗаказ)
			КонецЕсли;
			
			Если Объект.ТоварыВКоробках И Не ОтказЗаписьУпаковочногоЛиста Тогда
				
				Для Каждого СтрокаТаблицыИсточника Из ТЗ Цикл
					СтрокаТаблицыПриемника = ТЗ_Товары.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
				КонецЦикла;
				
				ТабКомплектацияЗаказ = ТЗ_Товары.Скопировать();
				
				Для Каждого СтрокаТаблицыИсточника Из ТЗКВТ Цикл
					СтрокаТаблицыПриемника = ТЗ_ТоварыВКоробах.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
				КонецЦикла;
				
				ТабКомплектацияЗаказТоварыВКоробах = ТЗ_ТоварыВКоробах.Скопировать();
				
				// Добавление строк в таблицы "гф_ПричиныИзмененияТоваровВКоробах" с историей по комплектации
				Для Каждого СтрокаТаблицыИсточника Из ТЗПричиныИзменения Цикл
					СтрокаТаблицыПриемника = ТЗ_ПричиныИзмененияТоварыВКоробах.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
				КонецЦикла;
				
				ТабКомплектацияЗаказПричиныИзмененияТоварыВКоробах = ТЗ_ПричиныИзмененияТоварыВКоробах.Скопировать();
				
				СтрокаУпаковочныйЛистНоменклатура.СписокКодовСтроки = СписокКодовСтрокиПоУпаковочнымЛистам;
				
			ИначеЕсли Объект.ТоварыВКоробках Тогда
				
				ТЗ_Товары 							= ТабКомплектацияЗаказ.Скопировать();
				ТЗ_ТоварыВКоробах 					= ТабКомплектацияЗаказТоварыВКоробах.Скопировать();
				ТЗ_ПричиныИзмененияТоварыВКоробах 	= ТабКомплектацияЗаказПричиныИзмененияТоварыВКоробах.Скопировать();
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не достаточно остатков в ""%1"" по ""%2""'"), ОбъектЗаказ, СтрокаУпаковочныйЛистНоменклатура.УпаковочныйЛист);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Иначе
				
				Для Каждого СтрокаТаблицыИсточника Из ТЗ Цикл
					СтрокаТаблицыПриемника = ТЗ_Товары.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
				КонецЦикла;
				
			КонецЕсли;
	
		КонецЦикла;
		
		
		
		
		
		
		
		
		
		
		
		
		
		СтрокаЗаказы.НовыеДанныеДляТаблицыПоЗаказу 									= ТЗ_Товары;
		СтрокаЗаказы.ВозможнаЗаписьЗаказа 											= Истина;
		
		Если Объект.ТоварыВКоробках Тогда
			ТЗ_ТоварыВКоробах.Свернуть("ВариантКомплектации, Артикул, ЦенаКороба, IDКороба, Добавлено, ПричинаДобавления, Отменено, ПричинаОтмены, ИдентификаторСтроки, ВидЦены,"
			+ "Скидка, СкидкаДляРТУ, ДатаДляРТУ, КомментарийРТУ, ЦенаКоробаСоСкидкой, СтавкаНДС, ВариантОбеспечения", "Количество, Сумма, СуммаНДС, СуммаСНДС");
		
			СтрокаЗаказы.НовыеДанныеДляТаблицыПоЗаказуТоварыВКоробах 					= ТЗ_ТоварыВКоробах;
			СтрокаЗаказы.НовыеДанныеДляТаблицыПоЗаказуПричиныИзмененияТоварыВКоробах 	= ТЗ_ПричиныИзмененияТоварыВКоробах;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаЗаказы Из ТЗ_Заказы Цикл
		
		Если СтрокаЗаказы.ВозможнаЗаписьЗаказа И СтрокаЗаказы.НовыеДанныеДляТаблицыПоЗаказу.Количество() > 0 Тогда
			
			ОбъектЗаказ = СтрокаЗаказы.Заказ.ПолучитьОбъект();
			
			Попытка
				ОбъектЗаказ.Заблокировать();
			Исключение
				ТекстСообщения = СтрШаблон(НСтр("ru = '%1 находится в процессе редактирования и не может быть изменен.'"), ОбъектЗаказ);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,);
				Продолжить;
			КонецПопытки;
			
			// Загрузка таблицы с новыми данными по отгрузке по заказу с учетом комплектации всех прошедших проверку упаковочных листов 
			// и доступного наличии количества номенклатуры для отгрузки в заказе
			ОбъектЗаказ.Товары.Загрузить(СтрокаЗаказы.НовыеДанныеДляТаблицыПоЗаказу);
			
			Если Объект.ТоварыВКоробках Тогда
				// Загрузка таблицы с новыми данными по ТоварыВКоробах
				Если СтрокаЗаказы.НовыеДанныеДляТаблицыПоЗаказуТоварыВКоробах.Количество() > 0 Тогда
					ОбъектЗаказ.гф_ТоварыВКоробах.Загрузить(СтрокаЗаказы.НовыеДанныеДляТаблицыПоЗаказуТоварыВКоробах);
				КонецЕсли;	
				// Загрузка таблицы с новыми данными по ПричиныИзмененияТоварыВКоробах
				Если СтрокаЗаказы.НовыеДанныеДляТаблицыПоЗаказуПричиныИзмененияТоварыВКоробах.Количество() > 0 Тогда
					ОбъектЗаказ.гф_ПричиныИзмененияТоваровВКоробах.Загрузить(СтрокаЗаказы.НовыеДанныеДляТаблицыПоЗаказуПричиныИзмененияТоварыВКоробах);
				КонецЕсли;
			КонецЕсли;
			
			// Запись нового максимального значения кода строки в заказ, так как ранее разбивали строки в заказе и проставляли код строки
			ТЗМакс = ОбъектЗаказ.Товары.Выгрузить(, "КодСтроки");
			
			МаксКодСтроки = Новый СравнениеЗначений;
			ТЗМакс.Сортировать("КодСтроки Убыв", МаксКодСтроки);
			ОбъектЗаказ.МаксимальныйКодСтроки = ТЗМакс[0].КодСтроки;
			
			//СтруктураДополнительныхСвойств = Новый Структура("гф_ОбработкаОтгрузкаПоЗаказам", Истина);
			
			ОбъектЗаказ.ДополнительныеСвойства.Вставить("гф_ОбработкаОтгрузкаПоЗаказам", Истина);
			
			// Транзакция проводит документы заказ, расходный ордер, упаковочный лист
			// и изменяет агрегацию (элементы справочника с кодами маркировки)
			НачатьТранзакцию();
			
			Попытка
				
				ОбъектЗаказ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
								
				СтрокаЗаказы.Перепроведен = Истина;
				
			Исключение
				
				СтрокаЗаказы.Перепроведен = Ложь;
				
				Если ТранзакцияАктивна() Тогда
					ОтменитьАктивнуюТранзакцию();
				КонецЕсли;
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Заказ не проведен ""%1"" и расходный ордер не сформирован.'"),
					СтрокаЗаказы.Заказ);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Проведение документа ""Заказ клиента""'"), УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ВызватьИсключение;
				
			КонецПопытки;	
			
			Если СтрокаЗаказы.Перепроведен Тогда
				
				Распоряжения = Новый Массив;
				Распоряжения.Добавить(СтрокаЗаказы.Заказ);
				
				МассивРаспоряжений.ЗагрузитьЗначения(Распоряжения);
				
				ОбъектыДляОрдера = СтрокаЗаказы.СписокУпаковочныйЛистИлиНоменклатура;
				
				Попытка
					
					// Проведение документов расходный ордер и упаковочный лист, изменение статуса агрегации (справочник кодов маркировки)
					// Дополнительно передаем "ОбъектЗаказ" для получения табличной части "Товары" и последующего отбора по коду строки
					СтруктураЗадания = ОформитьРасходныеОрдераНаСервере(ОбъектыДляОрдера, Отказ, ОбъектЗаказ);
					
					Если Не Отказ Тогда
						Если ТранзакцияАктивна() Тогда
							ЗафиксироватьАктивнуюТранзакцию();
							
							Для Каждого Стр Из СтруктураЗадания.ОформленныеОрдера Цикл
							
								РасходныйОрдерПредставление = Стр.РасходныйОрдер;
								Прервать;
							
							КонецЦикла;
							
							ТекстСообщения = СтрШаблон(НСтр("ru = 'По заказу ""%1"" сформирован и проведен расходный ордер ""%2""!'"),
							СтрокаЗаказы.Заказ, РасходныйОрдерПредставление);
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
							
						КонецЕсли;
					Иначе
						Если ТранзакцияАктивна() Тогда
							ОтменитьАктивнуюТранзакцию();
						КонецЕсли;
						
						Возврат;
						
					КонецЕсли;
					
				Исключение
					
					// Возможна ситуация когда в момент работы обработки по отгрузке, изменятся доступные остатки
					Если ТранзакцияАктивна() Тогда
						ОтменитьАктивнуюТранзакцию();
					КонецЕсли;
					
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Заказ ""%1"" сформирован но расходный ордер не проведен. Выполена отмена изменения заказа!'"),
						СтрокаЗаказы.Заказ);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Проведение документа ""Расходный ордер""'"), УровеньЖурналаРегистрации.Ошибка,,,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ВызватьИсключение;
					
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры, ТекущаяСтрока, ДобавленоПоПричине = Ложь)
	
	Если НоваяСтрока <> Неопределено И Не ДобавленоПоПричине Тогда
		
		ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы, ТекущаяСтрока);
		ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы, НоваяСтрока);
		
		ПересчитатьСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы);
		
	ИначеЕсли НоваяСтрока <> Неопределено И ДобавленоПоПричине Тогда
		
		СтруктураПересчетаСуммы = ДополнительныеПараметры.СтруктураПересчетаСуммы;
		
		СтруктураПересчетаСуммы.Строки.Добавить(НоваяСтрока);
		СтруктураПересчетаСуммы.ИтогКоличество = СтруктураПересчетаСуммы.ИтогКоличество + НоваяСтрока[СтруктураПересчетаСуммы.ИмяПоляКоличество];
		
		ПересчитатьСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы);
		
	КонецЕсли;

КонецПроцедуры

// Пересчитывает суммы в строках, добавленных в структуру пересчета суммы, описание см. функция
//                            ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы.
//
// Параметры:
//  СтруктураПересчетаСуммы - см. ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы
//
Процедура ПересчитатьСуммы(СтруктураПересчетаСуммы)
	
	РазрядностиОкругления = Неопределено;
	Если СтруктураПересчетаСуммы.Свойство("РазрядностиОкругления") Тогда
		РазрядностиОкругления = СтруктураПересчетаСуммы.РазрядностиОкругления;
	КонецЕсли;
	
	Для Каждого Строка Из СтруктураПересчетаСуммы.Строки Цикл
		
		Если СтруктураПересчетаСуммы.ИтогКоличество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Коэффициент = Строка[СтруктураПересчетаСуммы.ИмяПоляКоличество] / СтруктураПересчетаСуммы.ИтогКоличество;
		СтруктураПересчетаСуммы.ИтогКоличество = СтруктураПересчетаСуммы.ИтогКоличество - Строка[СтруктураПересчетаСуммы.ИмяПоляКоличество];

		Для Каждого Поле Из СтруктураПересчетаСуммы.Поля Цикл
			
			НовоеЗначение = Поле.Значение * Коэффициент;
			
			Если РазрядностиОкругления <> Неопределено Тогда
				Строка[Поле.Ключ] = Окр(НовоеЗначение, РазрядностиОкругления[Поле.Ключ]);
			Иначе
				Строка[Поле.Ключ] = НовоеЗначение;
			КонецЕсли;
			
			СтруктураПересчетаСуммы.Поля[Поле.Ключ] = Поле.Значение - Строка[Поле.Ключ];

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

Функция ПолучитьПараметрыОбработки(ТабличнаяЧасть, ЭлементФормы, ОповещениеПослеРазбиения, ПараметрыРазбиенияСтроки, ДополнительныеПараметры, Количество)
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ТабличнаяЧасть",           	ТабличнаяЧасть);
	ПараметрыОбработки.Вставить("ЭлементФормы",             	ЭлементФормы);
	ПараметрыОбработки.Вставить("ОповещениеПослеРазбиения", 	ОповещениеПослеРазбиения);
	ПараметрыОбработки.Вставить("ПараметрыРазбиенияСтроки", 	ПараметрыРазбиенияСтроки);
	ПараметрыОбработки.Вставить("ДополнительныеПараметры", 		ДополнительныеПараметры);
	ПараметрыОбработки.Вставить("Количество", 					Количество);
	
	Возврат ПараметрыОбработки;
	
КонецФункции						

Процедура ЗаполнитьЗначениеКодовСтрокиДляТоваровВКоробах(ТоварыВКоробках, СписокКодовСтроки, ТекущаяСтрока, УпаковочныйЛист)
	
	Если ТоварыВКоробках Тогда
		НоваяСтрокаСписокКодовСтроки = СписокКодовСтроки.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСписокКодовСтроки, ТекущаяСтрока);
		НоваяСтрокаСписокКодовСтроки.УпаковочныйЛист = УпаковочныйЛист;
	КонецЕсли;
	
КонецПроцедуры				

Функция ПолучитьДополнительныеПараметры(СтрокаТоварыВКоробах, ОбрабатываетсяСтрокаУпаковочногоЛиста)
	
	Если ОбрабатываетсяСтрокаУпаковочногоЛиста Тогда
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы(
			"Количество, Сумма, СуммаНДС, СуммаСНДС", "Количество");
	Иначе
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы(
			"Количество, Сумма, СуммаНДС, СуммаСНДС, СуммаРучнойСкидки", "КоличествоУпаковок");
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтруктураПересчетаСуммы", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтруктуруПересчетаСуммы(СтруктураПересчетаСуммы, СтрокаТоварыВКоробах);
	
	Для Каждого СтрокаПересчета Из СтруктураПересчетаСуммы.Поля Цикл
		Если СтрокаПересчета.Значение = Неопределено Тогда
			
			СтруктураПересчетаСуммы.Поля[СтрокаПересчета.Ключ] = 0;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

Процедура ПолучитьМаксНомерСтроки(Таблица0, Таблица1, НоваяСтрока)
	
	ТЗМакс = Таблица0.Скопировать(,"КодСтроки");
	ТоварыМакс = Таблица1.Скопировать(,"КодСтроки");
	
	Если ТЗМакс.Количество() > 0 Тогда
		МаксКодСтроки = Новый СравнениеЗначений;
		ТЗМакс.Сортировать("КодСтроки Убыв", МаксКодСтроки);
		МаксимальныйКодСтрокиТЗ = ТЗМакс[0].КодСтроки;
	Иначе
		МаксимальныйКодСтрокиТЗ = 0;
	КонецЕсли;
	
	Если ТоварыМакс.Количество() > 0 Тогда
		МаксКодСтроки = Новый СравнениеЗначений;
		ТоварыМакс.Сортировать("КодСтроки Убыв", МаксКодСтроки);
		МаксимальныйКодСтрокиТовары = ТоварыМакс[0].КодСтроки;
	Иначе
		МаксимальныйКодСтрокиТовары = 0;
	КонецЕсли;
	
	Если МаксимальныйКодСтрокиТЗ > МаксимальныйКодСтрокиТовары Тогда
		МаксимальныйКодСтроки = МаксимальныйКодСтрокиТЗ;
	Иначе
		МаксимальныйКодСтроки = МаксимальныйКодСтрокиТовары;
	КонецЕсли;
	
	НоваяСтрока.КодСтроки = МаксимальныйКодСтроки + 1;
	
КонецПроцедуры

Процедура ПолучитьКомментарийИСкидкиДляРТУ(КомментарийРТУ, СкидкаДляРТУ, ДатаДляРТУ, ПроцентРучнойСкидки, СтруктураПереданныхДанных)
	
	КомментарийРТУ = "";
	СкидкаДляРТУ = 1 - ПроцентРучнойСкидки / 100;
	ДанныеДляРТУ = СтруктураПереданныхДанных.Результат;
	
	Если ДанныеДляРТУ.Количество() > 0 Тогда
		
		Для Каждого СтрокаСтруктураПереданныхДанных Из ДанныеДляРТУ Цикл
			
			Если Не ЗначениеЗаполнено(КомментарийРТУ) Тогда
				КомментарийРТУ = СтрокаСтруктураПереданныхДанных.КомментарийРТУ;
			Иначе
				КомментарийРТУ = КомментарийРТУ + " " + СтрокаСтруктураПереданныхДанных.КомментарийРТУ;
			КонецЕсли;
			ДатаДляРТУ = СтрокаСтруктураПереданныхДанных.ДатаДляРТУ;
			СкидкаДляРТУ = СкидкаДляРТУ * (1 - СтрокаСтруктураПереданныхДанных.СкидкаДляРТУ / 100);
		КонецЦикла;
		
		 СкидкаДляРТУ = (1 - СкидкаДляРТУ) * 100;
		 
	КонецЕсли;
	
	КомментарийДата = Формат(ДатаДляРТУ, "ДЛФ=Д");
	
	Если ЗначениеЗаполнено(ПроцентРучнойСкидки) И ПроцентРучнойСкидки > 0 И ЗначениеЗаполнено(КомментарийРТУ) Тогда
		КомментарийРТУ = СтрШаблон("Дата получения цен %1, %2 %3, %4.", КомментарийДата, "%Скидки", ПроцентРучнойСкидки, КомментарийРТУ);
	ИначеЕсли ЗначениеЗаполнено(ПроцентРучнойСкидки) И ПроцентРучнойСкидки > 0 И Не ЗначениеЗаполнено(КомментарийРТУ) Тогда
		КомментарийРТУ = СтрШаблон("Дата получения цен %1, %2 %3.", КомментарийДата, "%Скидки", ПроцентРучнойСкидки);
	ИначеЕсли (Не ЗначениеЗаполнено(ПроцентРучнойСкидки) Или ПроцентРучнойСкидки = 0) И ЗначениеЗаполнено(КомментарийРТУ) Тогда
		КомментарийРТУ = СтрШаблон("Дата получения цен %1, %2.", КомментарийДата, КомментарийРТУ);
	ИначеЕсли (Не ЗначениеЗаполнено(ПроцентРучнойСкидки) Или ПроцентРучнойСкидки = 0) И Не ЗначениеЗаполнено(КомментарийРТУ) Тогда
		КомментарийРТУ = СтрШаблон("Скидки отсутствуют.");
	Иначе
		КомментарийРТУ = СтрШаблон("Данная ситуация не предусмотрена условием вывода скидок в комментарий");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуРазбиениемДляУпаковочногоЛиста(ПараметрыОбработки, НоваяТаблица, ТекущаяСтрока, СтруктураПереданныхДанных, ПроверкаОтказ, СкидкаДляРТУДляЗаписьВОрдер)
	
	Количество = ПараметрыОбработки.Количество;
	
	//СкидкаВКоробах = ТекущаяСтрока.Скидка;
	ПараметрыРазбиенияСтроки = ПараметрыОбработки.ПараметрыРазбиенияСтроки;
	ДополнительныеПараметры = ПараметрыОбработки.ДополнительныеПараметры;
	
	// Для Упаковочных листов принято решение не менять статус в строке, если количество равно
	Если ТекущаяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] > Количество 
		Или ТекущаяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] = Количество Тогда
		
		НоваяСтрока  = НоваяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		
		НоваяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] = Количество;
		
		ТекущаяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] =
		ТекущаяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] - Количество;
		
		НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
		НоваяСтрока.Скидка = ТекущаяСтрока.Скидка;
		
		ПолучитьКомментарийИСкидкиДляРТУ(НоваяСтрока.КомментарийРТУ, НоваяСтрока.СкидкаДляРТУ, НоваяСтрока.ДатаДляРТУ, НоваяСтрока.Скидка, СтруктураПереданныхДанных);
		
		СкидкаДляРТУДляЗаписьВОрдер = НоваяСтрока.СкидкаДляРТУ;
		
		РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры, ТекущаяСтрока, Ложь);
		
	Иначе
		ПроверкаОтказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуРазбиением(ПараметрыОбработки, НоваяТаблица, ТекущаяСтрока, Товары, ПроверкаОтказ, СписокКодовСтроки, УпаковочныйЛист, СтруктураПереданныхДанных, СкидкаДляРТУДляЗаписьВОрдер)
	
	Количество = ПараметрыОбработки.Количество;
	
	ПараметрыРазбиенияСтроки = ПараметрыОбработки.ПараметрыРазбиенияСтроки;
	ДополнительныеПараметры = ПараметрыОбработки.ДополнительныеПараметры;
	
	Если ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда
		ПроверкаОтказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] > Количество Тогда
			
		НоваяСтрока = НоваяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		
		НоваяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] = Количество;
		
		ТекущаяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] =
		ТекущаяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] - Количество;
		
		НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
		НоваяСтрока.ДатаОтгрузки = ТекущаяДата();
		
		ПолучитьМаксНомерСтроки(НоваяТаблица, Товары, НоваяСтрока);
		
		ПолучитьКомментарийИСкидкиДляРТУ(НоваяСтрока.гф_КомментарийРТУ, НоваяСтрока.гф_СкидкаДляРТУ, НоваяСтрока.гф_ДатаДляРТУ, НоваяСтрока.ПроцентРучнойСкидки, СтруктураПереданныхДанных);
		
		Если Объект.ТоварыВКоробках Тогда
			НоваяСтрокаСписокКодовСтроки = СписокКодовСтроки.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСписокКодовСтроки, НоваяСтрока);
			НоваяСтрокаСписокКодовСтроки.УпаковочныйЛист = УпаковочныйЛист;
		КонецЕсли;
		
		// Если Неопределено то скидка в ордер идет из упаковочного листа иначе для номенклатуры запишем
		СкидкаДляРТУДляЗаписьВОрдер = НоваяСтрока.гф_СкидкаДляРТУ;
	
		РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры, ТекущаяСтрока, Ложь);
		
	ИначеЕсли ТекущаяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] = Количество Тогда
		
		ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
		ТекущаяСтрока.ДатаОтгрузки = ТекущаяДата();
		
		ПолучитьКомментарийИСкидкиДляРТУ(ТекущаяСтрока.гф_КомментарийРТУ, ТекущаяСтрока.гф_СкидкаДляРТУ, ТекущаяСтрока.гф_ДатаДляРТУ, ТекущаяСтрока.ПроцентРучнойСкидки, СтруктураПереданныхДанных);
		
		Если Объект.ТоварыВКоробках Тогда
			НоваяСтрокаСписокКодовСтроки = СписокКодовСтроки.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСписокКодовСтроки, ТекущаяСтрока);
			НоваяСтрокаСписокКодовСтроки.УпаковочныйЛист = УпаковочныйЛист;
		КонецЕсли;
		
		СкидкаДляРТУДляЗаписьВОрдер = ТекущаяСтрока.гф_СкидкаДляРТУ;
		
		РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры, ТекущаяСтрока, Ложь);
	
	Иначе
		
		ПроверкаОтказ = Истина;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуРазбиениемУбратьКоличество(ПараметрыОбработки, ТЗ, ТекущаяСтрока, Товары, ПроверкаОтказ, СписокКодовСтроки, УпаковочныйЛист, СтруктураПереданныхДанных, СкидкаВКоробах)
	
	Количество = ПараметрыОбработки.Количество;
	
	ПараметрыРазбиенияСтроки = ПараметрыОбработки.ПараметрыРазбиенияСтроки;
	ДополнительныеПараметры = ПараметрыОбработки.ДополнительныеПараметры;
	
	Если ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда
		ПроверкаОтказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] > Количество Тогда
			
		НоваяСтрока  = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		
		НоваяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] = Количество;
		
		ТекущаяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] =
		ТекущаяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] - Количество;
		
		НоваяСтрока.Отменено = Истина;
		
		ПолучитьМаксНомерСтроки(Товары, Товары, НоваяСтрока);
		
		РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры, ТекущаяСтрока, Ложь);
		
	ИначеЕсли ТекущаяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] = Количество Тогда
		
		ТекущаяСтрока.Отменено = Истина;
		
		РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры, ТекущаяСтрока, Ложь);
	
	Иначе
		
		ПроверкаОтказ = Истина;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуРазбиениемДобавитьКоличество(ПараметрыОбработки, ТЗ, ТекущаяСтрока, Товары, ПроверкаОтказ, СписокКодовСтроки, УпаковочныйЛист, СтруктураПереданныхДанных, СкидкаВКоробах)
	
	Количество = ПараметрыОбработки.Количество;
	
	ПараметрыРазбиенияСтроки = ПараметрыОбработки.ПараметрыРазбиенияСтроки;
	ДополнительныеПараметры = ПараметрыОбработки.ДополнительныеПараметры;
	
	НоваяСтрока = Товары.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
	
	НоваяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] = Количество;
	
	НоваяСтрока.ДатаОтгрузки = ТекущаяДата();
	НоваяСтрока.гф_ДобавленоПоПричине = Истина;
	
	ПолучитьМаксНомерСтроки(Товары, Товары, НоваяСтрока);
	
	СтруктураПересчетаСуммы = ДополнительныеПараметры.СтруктураПересчетаСуммы;
	
	РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры, Неопределено, Истина);
	
КонецПроцедуры

Процедура ДобавитьСтрокуРазбиениемПересорт(ПараметрыОбработки, НоваяТаблица, ТекущаяСтрока, Товары, ПроверкаОтказ, СписокКодовСтроки, УпаковочныйЛист, СтруктураПереданныхДанных)
	
	Количество = ПараметрыОбработки.Количество;
	
	ПараметрыРазбиенияСтроки = ПараметрыОбработки.ПараметрыРазбиенияСтроки;
	ДополнительныеПараметры = ПараметрыОбработки.ДополнительныеПараметры;
	
	Если Не ТипЗнч(ТекущаяСтрока) = Тип("Массив") Тогда
		
		Если ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда
			ПроверкаОтказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если ТекущаяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] > Количество Тогда
			
			НоваяСтрока  = НоваяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			
			НоваяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] = Количество;
			
			ТекущаяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] =
			ТекущаяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] - Количество;
			
			НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
			НоваяСтрока.ДатаОтгрузки = ТекущаяДата();
			
			ПолучитьМаксНомерСтроки(НоваяТаблица, Товары, НоваяСтрока);
						
			ПолучитьКомментарийИСкидкиДляРТУ(НоваяСтрока.гф_КомментарийРТУ, НоваяСтрока.гф_СкидкаДляРТУ, НоваяСтрока.гф_ДатаДляРТУ, НоваяСтрока.ПроцентРучнойСкидки, СтруктураПереданныхДанных);
			
			РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры, ТекущаяСтрока);
			
		ИначеЕсли ТекущаяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] = Количество Тогда
			
			ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
			ТекущаяСтрока.ДатаОтгрузки = ТекущаяДата();
			
			ПолучитьКомментарийИСкидкиДляРТУ(ТекущаяСтрока.гф_КомментарийРТУ, ТекущаяСтрока.гф_СкидкаДляРТУ, ТекущаяСтрока.гф_ДатаДляРТУ, ТекущаяСтрока.ПроцентРучнойСкидки, СтруктураПереданныхДанных);
			
			РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры, ТекущаяСтрока);
			
		Иначе
			
			ПроверкаОтказ = Истина;
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		КоличествоОбщееНоменклатуры = 0;
		
		Для Каждого ЭлементМассива Из ТекущаяСтрока Цикл
			
			КоличествоОбщееНоменклатуры = КоличествоОбщееНоменклатуры + ЭлементМассива.КоличествоУпаковок;
			
		КонецЦикла;
		
		Если КоличествоОбщееНоменклатуры > Количество Тогда
			ДополнительноТребуетсяОтгрузитьКоличество = 0;
			
			Для Каждого ЭлементМассива Из ТекущаяСтрока Цикл
				
				Если ЭлементМассива.гф_ДобавленоПоПричине Тогда
					
					Если ЭлементМассива.КоличествоУпаковок = Количество Тогда
						ЭлементМассива.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
						ЭлементМассива.ДатаОтгрузки = ТекущаяДата();
						
						ПолучитьКомментарийИСкидкиДляРТУ(ЭлементМассива.гф_КомментарийРТУ, ЭлементМассива.гф_СкидкаДляРТУ, ЭлементМассива.гф_ДатаДляРТУ, ЭлементМассива.ПроцентРучнойСкидки, СтруктураПереданныхДанных);
			            Прервать;
					ИначеЕсли ЭлементМассива.КоличествоУпаковок > Количество Тогда
						// Данная ситуация исключена, так как подобная номенклатура добавляемая по причине, добавляется в том количестве,
						// которое необходимо для списания с учетом уже существующего количества в заказе
						ПроверкаОтказ = Истина;
						ТекстСообщения = НСтр("ru = 'Частный случай добавления номенклатуры в количестве превышающим требуемое, необходимо обратиться к администратору!""!'");
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						Возврат;
					ИначеЕсли Не ЭлементМассива.КоличествоУпаковок = 0 И ЭлементМассива.КоличествоУпаковок < Количество Тогда
						ЭлементМассива.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
						ЭлементМассива.ДатаОтгрузки = ТекущаяДата();
						
						ПолучитьКомментарийИСкидкиДляРТУ(ЭлементМассива.гф_КомментарийРТУ, ЭлементМассива.гф_СкидкаДляРТУ, ЭлементМассива.гф_ДатаДляРТУ, ЭлементМассива.ПроцентРучнойСкидки, СтруктураПереданныхДанных);
						ДополнительноТребуетсяОтгрузитьКоличество = Количество - ЭлементМассива.КоличествоУпаковок;
					Иначе
						ПроверкаОтказ = Истина;
						Возврат;
					КонецЕсли;	 
					
				КонецЕсли;	 
				
			КонецЦикла;
			
			Если ДополнительноТребуетсяОтгрузитьКоличество Тогда
				
				Для Каждого ЭлементМассива Из ТекущаяСтрока Цикл
					
					Количество = ДополнительноТребуетсяОтгрузитьКоличество;
					Если Не ЭлементМассива.гф_ДобавленоПоПричине Тогда
						
						Если ЭлементМассива.КоличествоУпаковок = Количество Тогда
							ЭлементМассива.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
							ЭлементМассива.ДатаОтгрузки = ТекущаяДата();
							
							ПолучитьКомментарийИСкидкиДляРТУ(ЭлементМассива.гф_КомментарийРТУ, ЭлементМассива.гф_СкидкаДляРТУ, ЭлементМассива.гф_ДатаДляРТУ, ЭлементМассива.ПроцентРучнойСкидки, СтруктураПереданныхДанных);
							Прервать;
						ИначеЕсли ЭлементМассива.КоличествоУпаковок > Количество Тогда
							
							НоваяСтрока  = НоваяТаблица.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементМассива);
							
							НоваяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] = Количество;
							
							ЭлементМассива[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] =
							ЭлементМассива[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] - Количество;
							
							НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
							НоваяСтрока.ДатаОтгрузки = ТекущаяДата();
							
							ПолучитьМаксНомерСтроки(НоваяТаблица, Товары, НоваяСтрока);
							ПолучитьКомментарийИСкидкиДляРТУ(ЭлементМассива.гф_КомментарийРТУ, ЭлементМассива.гф_СкидкаДляРТУ, ЭлементМассива.гф_ДатаДляРТУ, ЭлементМассива.ПроцентРучнойСкидки, СтруктураПереданныхДанных);
							ЗаполнитьЗначениеКодовСтрокиДляТоваровВКоробах(Объект.ТоварыВКоробках, СписокКодовСтроки, ЭлементМассива, УпаковочныйЛист);
							
							РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры, ЭлементМассива);
							
						ИначеЕсли Не ЭлементМассива.КоличествоУпаковок = 0 И Количество > 0 И ЭлементМассива.КоличествоУпаковок < Количество Тогда
							
							ДополнительноТребуетсяОтгрузитьКоличество = Количество - ЭлементМассива.КоличествоУпаковок;
							
							ЭлементМассива.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
							ЭлементМассива.ДатаОтгрузки = ТекущаяДата();
							
							ПолучитьКомментарийИСкидкиДляРТУ(ЭлементМассива.гф_КомментарийРТУ, ЭлементМассива.гф_СкидкаДляРТУ, ЭлементМассива.гф_ДатаДляРТУ, ЭлементМассива.ПроцентРучнойСкидки, СтруктураПереданныхДанных);
							
							РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры, ЭлементМассива);
							
						Иначе
							
							ПроверкаОтказ = Истина;
							Возврат;
							
						КонецЕсли;
						
					КонецЕсли;	
					
				КонецЦикла;
				
			КонецЕсли;
			
		ИначеЕсли КоличествоОбщееНоменклатуры = Количество Тогда
		
			Для Каждого ЭлементМассива Из ТекущаяСтрока Цикл
				
				ЭлементМассива.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
				ЭлементМассива.ДатаОтгрузки = ТекущаяДата();
				
				ПолучитьКомментарийИСкидкиДляРТУ(ЭлементМассива.гф_КомментарийРТУ, ЭлементМассива.гф_СкидкаДляРТУ, ЭлементМассива.гф_ДатаДляРТУ, ЭлементМассива.ПроцентРучнойСкидки, СтруктураПереданныхДанных);
			    ЗаполнитьЗначениеКодовСтрокиДляТоваровВКоробах(Объект.ТоварыВКоробках, СписокКодовСтроки, ЭлементМассива, УпаковочныйЛист);
				
				РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры, ЭлементМассива);
				
			КонецЦикла;
			
		Иначе
			
			ПроверкаОтказ = Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуРазбиениемНеПолный(ПараметрыОбработки, НоваяТаблица, ТекущаяСтрока, Товары, ПроверкаОтказ, СписокКодовСтроки, УпаковочныйЛист, СтруктураПереданныхДанных)
	
	Количество = ПараметрыОбработки.Количество;
	
	Если Не ТипЗнч(ТекущаяСтрока) = Тип("Массив") Тогда
		
		ПараметрыРазбиенияСтроки = ПараметрыОбработки.ПараметрыРазбиенияСтроки;
		ДополнительныеПараметры = ПараметрыОбработки.ДополнительныеПараметры;
		
		Если ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда
			ПроверкаОтказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если ТекущаяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] > Количество Тогда
			
			НоваяСтрока  = НоваяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			
			НоваяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] = Количество;
			
			ТекущаяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] =
			ТекущаяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] - Количество;
			
			НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
			НоваяСтрока.ДатаОтгрузки = ТекущаяДата();
			
			ПолучитьМаксНомерСтроки(НоваяТаблица, Товары, НоваяСтрока);
			
			ПолучитьКомментарийИСкидкиДляРТУ(НоваяСтрока.гф_КомментарийРТУ, НоваяСтрока.гф_СкидкаДляРТУ, НоваяСтрока.гф_ДатаДляРТУ, НоваяСтрока.ПроцентРучнойСкидки, СтруктураПереданныхДанных);
			
			ЗаполнитьЗначениеКодовСтрокиДляТоваровВКоробах(Объект.ТоварыВКоробках, СписокКодовСтроки, НоваяСтрока, УпаковочныйЛист);
			
			РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры, ТекущаяСтрока, Ложь);
			
		ИначеЕсли ТекущаяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] = Количество Тогда
			
			ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
			ТекущаяСтрока.ДатаОтгрузки = ТекущаяДата();
			
			ПолучитьКомментарийИСкидкиДляРТУ(ТекущаяСтрока.гф_КомментарийРТУ, ТекущаяСтрока.гф_СкидкаДляРТУ, ТекущаяСтрока.гф_ДатаДляРТУ, ТекущаяСтрока.ПроцентРучнойСкидки, СтруктураПереданныхДанных);
			
			ЗаполнитьЗначениеКодовСтрокиДляТоваровВКоробах(Объект.ТоварыВКоробках, СписокКодовСтроки, ТекущаяСтрока, УпаковочныйЛист);
			
			РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры, ТекущаяСтрока, Ложь);
			
		Иначе
			
			ПроверкаОтказ = Истина;
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		КоличествоОбщееНоменклатуры = 0;
		
		Для Каждого ЭлементМассива Из ТекущаяСтрока Цикл
			КоличествоОбщееНоменклатуры = КоличествоОбщееНоменклатуры + ЭлементМассива.КоличествоУпаковок;
		КонецЦикла;
		
		Если КоличествоОбщееНоменклатуры > Количество Тогда
			
			// Частный случай, что номенклатыры добавили больше чем отгружаем при неполном коробе
			ПроверкаОтказ = Истина;
			ТекстСообщения = НСтр("ru = 'Частный случай добавления номенклатуры в количестве превышающим требуемое, необходимо обратиться к администратору!""!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
			
		ИначеЕсли КоличествоОбщееНоменклатуры = Количество Тогда
		
			Для Каждого ЭлементМассива Из ТекущаяСтрока Цикл
				
				ЭлементМассива.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
				ЭлементМассива.ДатаОтгрузки = ТекущаяДата();
				
				ПолучитьКомментарийИСкидкиДляРТУ(ЭлементМассива.гф_КомментарийРТУ, ЭлементМассива.гф_СкидкаДляРТУ, ЭлементМассива.гф_ДатаДляРТУ, ЭлементМассива.ПроцентРучнойСкидки, СтруктураПереданныхДанных);
			
				ЗаполнитьЗначениеКодовСтрокиДляТоваровВКоробах(Объект.ТоварыВКоробках, СписокКодовСтроки, ЭлементМассива, УпаковочныйЛист);
				
				РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры, ЭлементМассива, Ложь);
				
			КонецЦикла;
			
		Иначе
			
			ПроверкаОтказ = Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция-конструктор дополнительных параметров разбиения строки.
//
// Возвращаемое значение:
//  Структура:
//     * ИмяПоляКоличество - Строка - имя поля, по которому будет происходить разбиение
//     * Заголовок - Строка - заголовок формы ввода числа
//     * РазрешитьНулевоеКоличество - Булево - признак, что в исходной и конечной строке может быть 0
//     * Количество - Неопределено, Число - количество, которое будет отображено в форме редактирования числа;
//          если Неопределенно - будет показано количество, взятое из исходной строки.
//
Функция ПараметрыРазбиенияСтроки() Экспорт
	
	ПараметрыРазбиенияСтроки = Новый Структура;
	ПараметрыРазбиенияСтроки.Вставить("ИмяПоляКоличество", "КоличествоУпаковок");
	ПараметрыРазбиенияСтроки.Вставить("Заголовок", НСтр("ru = 'Введите количество товара в новой строке';
														|en = 'Enter quantity of goods in a new line'"));
	ПараметрыРазбиенияСтроки.Вставить("РазрешитьНулевоеКоличество", Истина);
	ПараметрыРазбиенияСтроки.Вставить("Количество", Неопределено);
	
	Возврат ПараметрыРазбиенияСтроки;
	
КонецФункции

Функция ЗависимыеРеквизитыСтрокой()
	
	Возврат "СуммаБезВозвратнойТары, СуммаНДСБезВозвратнойТары, СуммаСНДСБезВозвратнойТары,
		|СуммаРучнойСкидкиБезВозвратнойТары, СуммаАвтоматическойСкидкиБезВозвратнойТары,
		|СуммаОтмененоБезВозвратнойТары, СуммаНДСОтмененоБезВозвратнойТары, СуммаСНДСОтмененоБезВозвратнойТары,
		|СуммаРучнойСкидкиОтмененоБезВозвратнойТары, СуммаАвтоматическойСкидкиОтмененоБезВозвратнойТары,
		|СуммаОтменено, СуммаНДСОтменено, СуммаСНДСОтменено,
		|СуммаРучнойСкидкиОтменено, СуммаАвтоматическойСкидкиОтменено";
	
КонецФункции

Процедура ЗаполнитьРезервыНаСервере(Заказ, УпаковочныйЛист, УпаковочныеЛистыСТаблицейТовары, МассивНоменклатурыПоЗаказу)
	
	Проверка = Истина;
	
	НаличиеПроверкаЗаказ = Новый Массив;
	Для Инд = 0 По МассивНоменклатурыПоЗаказу.ВГраница() Цикл
		НаличиеПроверкаЗаказ.Добавить(МассивНоменклатурыПоЗаказу[Инд]);
	КонецЦикла;
	
	ТЗДляПроверкиТоваровИзУпаковочногоЛиста = Новый ТаблицаЗначений;
	
	НайдСтр = УпаковочныеЛистыСТаблицейТовары.Найти(УпаковочныйЛист);
	
	ТЗДляПроверкиТоваровИзУпаковочногоЛиста = НайдСтр.Товары.Скопировать(, "Номенклатура, Характеристика, КоличествоУпаковок");
	
	ТЗДляПроверкиТоваровИзУпаковочногоЛиста.Колонки.Добавить("Проверка");
	ТЗДляПроверкиТоваровИзУпаковочногоЛиста.ЗаполнитьЗначения(Ложь, "Проверка");
	
	ТаблицаДляПроверки = ТЗДляПроверкиТоваровИзУпаковочногоЛиста;
	
	// Предварительное сравнение с номенклатурой, которая в наличии, с номенклатурой из упаковочного листа
	Для Каждого СтрокаДляПроверки Из ТаблицаДляПроверки Цикл
	    Для Каждого СтрокаНаличие Из НаличиеПроверкаЗаказ Цикл
			
			Если СтрокаДляПроверки.Номенклатура = СтрокаНаличие.Номенклатура
				И СтрокаДляПроверки.Характеристика = СтрокаНаличие.Характеристика Тогда
				СтрокаДляПроверки.Проверка = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	// Если вся номенклатура прошла проверку, то получаем Неопределено
	НайденнаяСтрока = ТаблицаДляПроверки.Найти(Ложь, "Проверка");
	
	// Если предварительная проверка пройдена, то из общего доступного наличия вычитается состав номенклатуры с характеристикой 
	// и количеством из одного текущкго упаковочного листа. Данная операция необходима для понимания доступного количества 
	// при обработке нового упаковочного листа в следующей итерации цикла.
	Если НайденнаяСтрока = Неопределено Тогда
		
		ТаблицаДляПроверки.ЗаполнитьЗначения(Ложь, "Проверка");
		
		// Сравнение количества номенклатуры из упаковочного листа с количеством номенклатуры в наличии.
		// При нехватке количества, не будет изменена таблица "Объект.Наличие"
		Для Каждого СтрокаУпковочногоЛиста Из ТаблицаДляПроверки Цикл
			
			Для Каждого СтрокаНаличие Из НаличиеПроверкаЗаказ Цикл
				
				Если СтрокаУпковочногоЛиста.Номенклатура = СтрокаНаличие.Номенклатура
					И СтрокаУпковочногоЛиста.Характеристика = СтрокаНаличие.Характеристика Тогда
					
					Если СтрокаНаличие.Доступно - СтрокаУпковочногоЛиста.КоличествоУпаковок < 0 Тогда
						Проверка = Ложь;
						Прервать;
					Иначе
						СтрокаНаличие.Доступно = СтрокаНаличие.Доступно - СтрокаУпковочногоЛиста.КоличествоУпаковок;
						Проверка = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не Проверка Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		// При прохождении всех проверок, уменьшим доступное количество номенклатуры по текущему упаковочному листу.
		// Новый упаковочный лист, при следующей итерации цикла, будет проходить проверку
		// по количеству уже за вычетом количества из предыдущего упакоыочного листа. 
		Если Проверка Тогда
			
			ОбъектНаличиеЗаказ = Объект.Наличие.НайтиСтроки(Новый Структура("ЗаказНаОтгрузку", Заказ));
			
			Для Каждого СтрокаУпковочногоЛиста Из ТаблицаДляПроверки Цикл
				
				Для Каждого СтрокаНаличие Из ОбъектНаличиеЗаказ Цикл
					
					Если Заказ = СтрокаНаличие.ЗаказНаОтгрузку
						И СтрокаУпковочногоЛиста.Номенклатура = СтрокаНаличие.Номенклатура
						И СтрокаУпковочногоЛиста.Характеристика = СтрокаНаличие.Характеристика Тогда
						
						Если Не СтрокаНаличие.Доступно - СтрокаУпковочногоЛиста.КоличествоУпаковок < 0 Тогда 
							СтрокаНаличие.Доступно = СтрокаНаличие.Доступно - СтрокаУпковочногоЛиста.КоличествоУпаковок;
							// При успешном списании упаковочный лист помечается как доступный и не будет удален из списка вывода в отчет.
							Строка = Объект.ДоступностьУпаковочныхЛистов.Добавить();
							Строка.УпаковочныйЛист = УпаковочныйЛист;
							Строка.Проверка = Истина;
						Иначе
							// Упаковочный лист помечается как не доступный и дальше будет удален из списка вывода в отчет.
							Строка = Объект.ДоступностьУпаковочныхЛистов.Добавить();
							Строка.УпаковочныйЛист = УпаковочныйЛист;
							Строка.Проверка = Ложь;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		// Упаковочный лист не прошедший предварительную проверку помечается как не доступный и дальше будет удален из вывода в отчет.
		Строка = Объект.ДоступностьУпаковочныхЛистов.Добавить();
		Строка.УпаковочныйЛист = УпаковочныйЛист;
		Строка.Проверка = Ложь;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ОформитьРасходныеОрдераНаСервере(ОбъектыДляОрдера, Отказ, ОбъектЗаказ)
	
	// За основу взята типовая процедура "ОформитьРасходныеОрдераНаСервере" из общего модуля УправлениеОтгрузкой
	ПараметрыПереоформленияРасходныхОрдеров = СкладыСервер.ПараметрыПереоформленияРасходныхОрдеров();
		
	Запрос = Новый Запрос;
	Запрос.Текст =	
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДокументТовары.Ссылка КАК ДокументОтгрузки,
	|	ДокументТовары.Склад Склад
	|ПОМЕСТИТЬ ДокументыОтгрузки
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка В(&МассивРаспоряжений)
	|	И ДокументТовары.Ссылка.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(Документ.ЗаданиеНаПеревозку.ПустаяСсылка) КАК ЗаданиеНаПеревозку,
	|	ТоварыКОтгрузке.Склад КАК Склад,
	|	ТоварыКОтгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
	|	ТоварыКОтгрузке.Получатель КАК Получатель,
	|	ЕСТЬNULL(РеквизитыРаспоряжения.ДатаДокументаИБ, ДАТАВРЕМЯ(1,1,1)) КАК Дата
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке КАК ТоварыКОтгрузке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыОтгрузки КАК ДокументыОтгрузки
	|		ПО ТоварыКОтгрузке.ДокументОтгрузки = ДокументыОтгрузки.ДокументОтгрузки
	|			И ТоварыКОтгрузке.Склад = ДокументыОтгрузки.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеквизитыРаспоряжения
	|			ПО ТоварыКОтгрузке.ДокументОтгрузки = РеквизитыРаспоряжения.Ссылка
	|				И НЕ РеквизитыРаспоряжения.ДополнительнаяЗапись";
	
	Запрос.УстановитьПараметр("МассивРаспоряжений", МассивРаспоряжений.ВыгрузитьЗначения());
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();

	УстановитьПривилегированныйРежим(Ложь);
	
	СоздатьОрдера = Ложь;
	
	// Передаем заказ для использования таблицы "Товары" и ссылки на заказ для получения содержимого упаковочного листа
	// по номенлатуре в заказе со статусом "Отгружено" и с отбором по коду строки
	// Так как Упаковочный лист еще не записан с кодами строки из заказ, то сопоставление данных с заказом не возможно
	ПараметрыПереоформленияРасходныхОрдеров.Вставить("гф_Заказ");
	ПараметрыПереоформленияРасходныхОрдеров.гф_Заказ = ОбъектЗаказ;
	
	Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл		
		
		СоздатьОрдера = Истина;
		
		ПараметрыПереоформленияРасходныхОрдеров.Склад = Выборка.Склад;
		
		Пока Выборка.СледующийПоЗначениюПоля("Получатель") Цикл	
			
			ПараметрыПереоформленияРасходныхОрдеров.Получатель = Выборка.Получатель;
			
			Распоряжения = Новый Массив;
			Пока Выборка.Следующий() Цикл
				Распоряжения.Добавить(Выборка.ДокументОтгрузки);
			КонецЦикла;
			
			ПараметрыПереоформленияРасходныхОрдеров.РаспоряженияНаОтгрузку = Распоряжения;
			
			ПараметрыПереоформленияРасходныхОрдеров.Вставить("гф_СоздатьОрдера");
			ПараметрыПереоформленияРасходныхОрдеров.гф_СоздатьОрдера = Ложь;
			
			ПараметрыПереоформленияРасходныхОрдеров.Вставить("гф_ОтгрузкаПеремещением");
			ПараметрыПереоформленияРасходныхОрдеров.гф_ОтгрузкаПеремещением = МассивРаспоряжений[0].Значение.гф_ОтгрузкаПеремещением;
			
			Если Объект.ТоварыВКоробках Тогда
				ПараметрыПереоформленияРасходныхОрдеров.Вставить("гф_УпаковочныйЛист");
				ПараметрыПереоформленияРасходныхОрдеров.гф_УпаковочныйЛист = ОбъектыДляОрдера;
			Иначе
				ПараметрыПереоформленияРасходныхОрдеров.Вставить("гф_Товары");
				ПараметрыПереоформленияРасходныхОрдеров.гф_Товары = ОбъектыДляОрдера;
			КонецЕсли;
		
			СтруктураЗадания = СкладыСервер.ПереоформитьРасходныеОрдера(ПараметрыПереоформленияРасходныхОрдеров);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если Не СоздатьОрдера Тогда
		Отказ = Истина;

		ТекстСообщения = НСтр("ru = 'По выбранным распоряжениям не требуется отгрузка товаров.';
								|en = 'Goods shipment is not required for the selected references.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	ИначеЕсли ПараметрыПереоформленияРасходныхОрдеров.Свойство("гф_СоздатьОрдера") И Не ПараметрыПереоформленияРасходныхОрдеров.гф_СоздатьОрдера Тогда
		Отказ = Истина;

		ТекстСообщения = НСтр("ru = 'По выбранным распоряжениям отгрузка товаров превышает доступный остаток.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат СтруктураЗадания;

КонецФункции

&НаКлиенте
Процедура СнятьПометки(Команда)
	
	УстановитьСнятьФлажкиКлиент(Ложь);
	
	РазвернутьДеревоДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(Команда)
	
	УстановитьСнятьФлажкиКлиент(Истина);
	
	РазвернутьДеревоДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьФлажкиКлиент(Отгрузить)
	
	Для Каждого Строка Из ДеревоДокументов.ПолучитьЭлементы() Цикл
		
		Если Отгрузить И Не Строка.БлокировкиОтгрузок Тогда
			Строка.Отгрузить = Отгрузить;
			УстановитьФлажкиДалееКлиент(Строка, Строка.Отгрузить);
		ИначеЕсли Не Отгрузить Тогда
			Строка.Отгрузить = Отгрузить;
			УстановитьФлажкиДалееКлиент(Строка, Строка.Отгрузить);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиДалееКлиент(Элемент, Отгрузить)
	
	Для Каждого Строка Из Элемент.ПолучитьЭлементы() Цикл
		
		Строка.Отгрузить = Отгрузить;
		
		Если Не Элемент.ПолучитьЭлементы().Количество() = 0 Тогда
			УстановитьФлажкиДалееКлиент(Строка, Отгрузить);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЗагрузкиКодовМаркировки(Команда)
	
	Если ЗначениеЗаполнено(Объект.Склад) И Объект.ТоварыВКоробках Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ВидЦены) Тогда
			ТекстСообщения = НСтр("ru = 'Не указан вид цены!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		Строка = Неопределено;
		Оповещение = Новый ОписаниеОповещения("ПослеЗапоненияСпискаУпаковочныхЛистов", ЭтотОбъект, Строка);
		
		ПараметрыОткрытия = Новый Структура();
		
		ПараметрыОткрытия.Вставить("Заголовок", "Загрузка кодов маркировки");
		ПараметрыОткрытия.Вставить("ИспользоватьКодУпаковки", Ложь);
		
		ОткрытьФорму("Обработка.гф_ОтгрузкаПоЗаказам.Форма.ФормаЗагрузкиКодовМаркировкиУпаковочныхЛистов",ПараметрыОткрытия,,,,,Оповещение,);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Заполнение возможно только если у склада установлен флаг ""Товары в коробах""!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗапоненияСпискаУпаковочныхЛистов(СтруктураПереданныхДанных, Строка) Экспорт
	
	Если НЕ СтруктураПереданныхДанных = Неопределено Тогда
		
		УстановитьОтметкиКодовМаркировкиДляДереваДокументов(СтруктураПереданныхДанных);
		
		РазвернутьДеревоДокументов();

	КонецЕсли;

КонецПроцедуры

Процедура УстановитьОтметкиКодовМаркировкиДляДереваДокументов(СтруктураПереданныхДанных)
	
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоДокументов");
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("УпаковочныйЛист");
	ТЗ.Колонки.Добавить("НайденУЛ");
	
	Для Каждого ЭлементМассива Из СтруктураПереданныхДанных Цикл
		
		Стр = ТЗ.Добавить();
		Стр.УпаковочныйЛист = ЭлементМассива.Штрихкод;
		Стр.НайденУЛ = Ложь;
		
	КонецЦикла;
	
	ТЗ.Свернуть("УпаковочныйЛист, НайденУЛ");
	
	Для Каждого Строка Из ДеревоЗначений.Строки Цикл
		Для Каждого Строка_Н Из Строка.Строки Цикл
			Для Каждого Строка_Т Из Строка_Н.Строки Цикл
				
				Для Каждого ЭлементМассива Из СтруктураПереданныхДанных Цикл
					
					Если ЗначениеЗаполнено(Строка_Т.УпаковочныйЛистСсылка)
						И Не Строка.БлокировкиОтгрузок
						И Строка_Т.УпаковочныйЛистСсылка.гф_Агрегация = Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту("ЗначениеШтрихкода", ЭлементМассива.Штрихкод) Тогда
						
						Строка_Т.Отгрузить = Истина;
						НайденнаяСтрока = ТЗ.Найти(ЭлементМассива.Штрихкод);
						НайденнаяСтрока.НайденУЛ = Истина;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоЗначений, "ДеревоДокументов");
	
	Для Каждого Строка Из ТЗ Цикл
		
		Если Не Строка.НайденУЛ Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Упаковочный лист ""%1"" не найден!'"), Строка.УпаковочныйЛист);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗафиксироватьАктивнуюТранзакцию()
	
	ЗафиксироватьТранзакцию();
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьАктивнуюТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтменитьАктивнуюТранзакцию()
	
	ОтменитьТранзакцию();
	
	Если ТранзакцияАктивна() Тогда
		ОтменитьАктивнуюТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СнятьРезервНаСервере(Отказ)
	
	Если ЗначениеЗаполнено(Объект.Склад) И Объект.ТоварыВКоробках Тогда
		СнятьРезервОбработкаДанныхТоварыВКоробках();
	Иначе
		СнятьРезервОбработкаДанныхТовары();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СнятьРезервОбработкаДанныхТоварыВКоробках()
	
	//ДеревоЗначений = РеквизитФормыВЗначение("ДеревоДокументов");
	//
	//// Таблица для записи каждого заказа с конкретным списком упаковочных листов по этому заказу
	//ТЗ_Заказы = Новый ТаблицаЗначений;
	//ТЗ_Заказы.Колонки.Добавить("Заказ");
	//ТЗ_Заказы.Колонки.Добавить("УпаковочныеЛисты");
	//ТЗ_Заказы.Колонки.Добавить("Склад");
	//ТЗ_Заказы.Колонки.Добавить("Организация");
	//ТЗ_Заказы.Колонки.Добавить("Назначение");
	//
	//Для Каждого Строка Из ДеревоЗначений.Строки Цикл
	//	
	//	Для Каждого Строка_Н Из Строка.Строки Цикл
	//		
	//		Для Каждого Строка_Т Из Строка_Н.Строки Цикл
	//			
	//			Если Строка_Т.Отгрузить И ЗначениеЗаполнено(Строка_Т.УпаковочныйЛистСсылка) Тогда
	//				
	//				НайтиЗаказ = ТЗ_Заказы.Найти(Строка_Т.Заказ, "Заказ");
	//				
	//				Если НайтиЗаказ = Неопределено Тогда
	//					
	//					ОбъектЗаказ = Строка_Т.Заказ.ПолучитьОбъект();
	//					
	//					СтрокаЗаказы = ТЗ_Заказы.Добавить();
	//					СтрокаЗаказы.Заказ = Строка_Т.Заказ;
	//					СтрокаЗаказы.Склад = Строка_Т.Склад;
	//					СтрокаЗаказы.Организация = Строка_Т.Организация;
	//					СтрокаЗаказы.Назначение = ОбъектЗаказ.Назначение;
	//					
	//					ТЗ_УпаковочныеЛисты = Новый ТаблицаЗначений;
	//					ТЗ_УпаковочныеЛисты.Колонки.Добавить("УпаковочныйЛист");
	//					СтрокаУпаковочныеЛисты = ТЗ_УпаковочныеЛисты.Добавить();
	//					
	//					СтрокаУпаковочныеЛисты.УпаковочныйЛист 		= Строка_Т.УпаковочныйЛистСсылка;
	//					
	//					СтрокаЗаказы.УпаковочныеЛисты = ТЗ_УпаковочныеЛисты;
	//						
	//				Иначе
	//					
	//					НайтиУпаковочныйЛист = НайтиЗаказ.УпаковочныеЛисты.Найти(Строка_Т.УпаковочныйЛистСсылка, "УпаковочныйЛист");
	//					
	//					Если НайтиУпаковочныйЛист = Неопределено Тогда
	//						
	//						СтрокаУпаковочныеЛисты = НайтиЗаказ.УпаковочныеЛисты.Добавить();
	//						
	//						СтрокаУпаковочныеЛисты.УпаковочныйЛист = Строка_Т.УпаковочныйЛистСсылка;
	//						
	//					КонецЕсли;
	//					
	//				КонецЕсли;
	//			
	//			КонецЕсли;
	//		
	//		КонецЦикла;
	//		
	//	КонецЦикла;
	//	
	//КонецЦикла;
	//
	//Если ТЗ_Заказы.Количество() = 0 Тогда
	//	
	//	ТекстСообщения = НСтр("ru = 'Не отмечен ни один объект к снятию резерва.'");
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	//	Возврат;
	//	
	//КонецЕсли;
	
	ТЗ_Заказы = ПолучитьОтмеченныеДанныеДереваЗначений();
	
	Для Каждого СтрокаЗаказы Из ТЗ_Заказы Цикл
		
		НачатьТранзакцию();
		
		Попытка
		
		НовыйДокумент = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
		
		НовыйДокумент.Дата = ТекущаяДата();
		НовыйДокумент.Организация = СтрокаЗаказы.Организация;
		НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв;
		НовыйДокумент.Назначение = СтрокаЗаказы.Назначение;
		
		Для Каждого СтрокаУпаковочныйЛист Из СтрокаЗаказы.СписокУпаковочныйЛистИлиНоменклатура Цикл
			ОбъектУпаковочныйЛист = СтрокаУпаковочныйЛист.УпаковочныйЛист.ПолучитьОбъект();
			
			Для Каждого Строка Из ОбъектУпаковочныйЛист.Товары Цикл
				Стр = НовыйДокумент.Товары.Добавить();
				Стр.Номенклатура 		= Строка.Номенклатура;
				Стр.Характеристика 		= Строка.Характеристика;
				Стр.Количество 			= Строка.Количество;
				Стр.КоличествоУпаковок 	= Строка.КоличествоУпаковок;
				Стр.гф_IDкороба 		= ОбъектУпаковочныйЛист.Ссылка;
				Стр.Склад 				= СтрокаЗаказы.Склад;
				Стр.ИсходноеНазначение 	= СтрокаЗаказы.Назначение;
				//СтрокаЗаказы.Назначение = Неопределено;
			КонецЦикла;
			
		КонецЦикла;
		
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			КорректировкаНазначенияПроведен = Истина;
			
		Исключение
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьАктивнуюТранзакцию();
			КонецЕсли;
			
			КорректировкаНазначенияПроведен = Ложь;
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'По заказу ""%1"" не удалось провести документ ""Корректировка назначения товаров""'"),
				СтрокаЗаказы.Заказ);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Продолжить;
			
		КонецПопытки;	
		
		Если КорректировкаНазначенияПроведен Тогда
			
			 Для Каждого СтрокаУпаковочныйЛист Из СтрокаЗаказы.СписокУпаковочныйЛистИлиНоменклатура Цикл
				 
				 ОбъектУпаковочныйЛист = СтрокаУпаковочныйЛист.УпаковочныйЛист.ПолучитьОбъект();
				 
				 Попытка
					 ОбъектУпаковочныйЛист.Заблокировать();
				 Исключение
					 
					 Если ТранзакцияАктивна() Тогда
						 ОтменитьАктивнуюТранзакцию();
					 КонецЕсли;
					 
					 ТекстСообщения = СтрШаблон(НСтр("ru = '%1 находится в процессе редактирования и не может быть изменен.
					 	|Документ ""Корректировка назначения товаров"" не сформирован'"), ОбъектУпаковочныйЛист);
					 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					 ВызватьИсключение;
					 
				 КонецПопытки;
				 
				 // Очищаем ссылку на заказ клиента
				 ОбъектУпаковочныйЛист.гф_Заказ = Неопределено;
				 
				 // Очищаем колонку с назначением по каждой строке
				 Для Каждого Строка Из ОбъектУпаковочныйЛист.Товары Цикл
					 Строка.Назначение = Неопределено;
				 КонецЦикла;
				 
				 Попытка
					 ОбъектУпаковочныйЛист.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);	 
				 Исключение
					 
					 Если ТранзакцияАктивна() Тогда
						 ОтменитьАктивнуюТранзакцию();
					 КонецЕсли;
					 
					 ТекстСообщения = СтрШаблон(НСтр("ru = 'Упаковочный лист ""%1"" не удалось перепровести. '"),
					 	ОбъектУпаковочныйЛист);
					 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					 
					 ЗаписьЖурналаРегистрации(НСтр("ru = 'Проведение документа ""Упаковочный лист""'"), УровеньЖурналаРегистрации.Ошибка,,,
					 	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					 Продолжить;
				 КонецПопытки;
				 
			КонецЦикла;	 
			 
		КонецЕсли;
		
		Попытка
			Если ТранзакцияАктивна() Тогда
				ЗафиксироватьАктивнуюТранзакцию();
			КонецЕсли;
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Сфомирован документ ""%1"". Внесены изменения в ""%2""'"), НовыйДокумент, ОбъектУпаковочныйЛист);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Исключение
			Если ТранзакцияАктивна() Тогда
				ОтменитьАктивнуюТранзакцию();
			КонецЕсли;
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка фиксации транзакции снятия резерва по заказу ""%1"", поробуйте выполнить
			| операцию позднее. Возможно отсутствует доступ на формирование и изменение документов участвующих в снятии резерва'"), СтрокаЗаказы.Заказ);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Продолжить;
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СнятьРезервОбработкаДанныхТовары()
	
	//ДеревоЗначений = РеквизитФормыВЗначение("ДеревоДокументов");
	//
	//// Таблица для записи каждого заказа с конкретным списком упаковочных листов по этому заказу
	//ТЗ_Заказы = Новый ТаблицаЗначений;
	//ТЗ_Заказы.Колонки.Добавить("Заказ");
	//ТЗ_Заказы.Колонки.Добавить("СписокУпаковочныйЛистИлиНоменклатура");
	//ТЗ_Заказы.Колонки.Добавить("Склад");
	//ТЗ_Заказы.Колонки.Добавить("Организация");
	//ТЗ_Заказы.Колонки.Добавить("Назначение");
	//
	//Для Каждого Строка Из ДеревоЗначений.Строки Цикл
	//	
	//	Для Каждого Строка_Н Из Строка.Строки Цикл
	//		
	//		Для Каждого Строка_Т Из Строка_Н.Строки Цикл
	//			
	//			Если Строка_Т.Отгрузить И ЗначениеЗаполнено(Строка_Т.Номенклатура) Тогда
	//				
	//				НайтиЗаказ = ТЗ_Заказы.Найти(Строка_Т.Заказ, "Заказ");
	//				
	//				Если НайтиЗаказ = Неопределено Тогда
	//					
	//					ОбъектЗаказ = Строка_Т.Заказ.ПолучитьОбъект();
	//					
	//					СтрокаЗаказы = ТЗ_Заказы.Добавить();
	//					СтрокаЗаказы.Заказ = Строка_Т.Заказ;
	//					СтрокаЗаказы.Склад = Строка_Т.Склад;
	//					СтрокаЗаказы.Организация = Строка_Т.Организация;
	//					СтрокаЗаказы.Назначение = ОбъектЗаказ.Назначение;
	//					
	//					Если Объект.ТоварыВКоробках Тогда
	//						
	//						ТЗ_УпаковочныеЛисты = Новый ТаблицаЗначений;
	//						ТЗ_УпаковочныеЛисты.Колонки.Добавить("УпаковочныйЛист");
	//						СтрокаУпаковочныеЛисты = ТЗ_УпаковочныеЛисты.Добавить();
	//						
	//						СтрокаУпаковочныеЛисты.УпаковочныйЛист 		= Строка_Т.УпаковочныйЛистСсылка;
	//						
	//						СтрокаЗаказы.СписокУпаковочныйЛистИлиНоменклатура = ТЗ_УпаковочныеЛисты;
	//						
	//					Иначе
	//						
	//						ТЗ_Номенклатура = Новый ТаблицаЗначений;
	//						ТЗ_Номенклатура.Колонки.Добавить("Номенклатура");
	//						ТЗ_Номенклатура.Колонки.Добавить("Характеристика");
	//						ТЗ_Номенклатура.Колонки.Добавить("Количество");
	//						СтрокаНоменклатуры = ТЗ_Номенклатура.Добавить();
	//						
	//						СтрокаНоменклатуры.Номенклатура 		= Строка_Т.Номенклатура;
	//						СтрокаНоменклатуры.Характеристика 		= Строка_Т.Характеристика;
	//						СтрокаНоменклатуры.Количество 			= Строка_Т.КоличествоНоменклатуры;
	//						
	//						СтрокаЗаказы.СписокУпаковочныйЛистИлиНоменклатура = ТЗ_Номенклатура;
	//						
	//					КонецЕсли;	
	//				Иначе
	//					
	//					НайтиНоменклатуру = НайтиЗаказ.Номенклатура.Найти(Строка_Т.Номенклатура, "Номенклатура");
	//					
	//					Если НайтиНоменклатуру = Неопределено Тогда
	//						
	//						СтрокаНоменклатуры = НайтиЗаказ.Номенклатура.Добавить();
	//						
	//						СтрокаНоменклатуры.Номенклатура 		= Строка_Т.Номенклатура;
	//						СтрокаНоменклатуры.Характеристика 		= Строка_Т.Характеристика;
	//						СтрокаНоменклатуры.Количество 			= Строка_Т.КоличествоНоменклатуры;
	//						
	//					КонецЕсли;
	//					
	//				КонецЕсли;
	//			
	//			КонецЕсли;
	//		
	//		КонецЦикла;
	//		
	//	КонецЦикла;
	//	
	//КонецЦикла;
	//
	//Если ТЗ_Заказы.Количество() = 0 Тогда
	//	
	//	ТекстСообщения = НСтр("ru = 'Не отмечен ни один объект к снятию резерва.'");
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	//	Возврат;
	//	
	//КонецЕсли;
	
	ТЗ_Заказы = ПолучитьОтмеченныеДанныеДереваЗначений();
	
	Для Каждого СтрокаЗаказы Из ТЗ_Заказы Цикл
		
		НачатьТранзакцию();
		
		Попытка
		
		НовыйДокумент = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
		
		НовыйДокумент.Дата = ТекущаяДата();
		НовыйДокумент.Организация = СтрокаЗаказы.Организация;
		НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв;
		НовыйДокумент.Назначение = СтрокаЗаказы.Назначение;
		
		Для Каждого СтрокаУпаковочныйЛист Из СтрокаЗаказы.СписокУпаковочныйЛистИлиНоменклатура Цикл
			
			Если Объект.ТоварыВКоробках Тогда
				
				ОбъектУпаковочныйЛист = СтрокаУпаковочныйЛист.УпаковочныйЛист.ПолучитьОбъект();
				
				Для Каждого Строка Из ОбъектУпаковочныйЛист.Товары Цикл
					Стр = НовыйДокумент.Товары.Добавить();
					Стр.Номенклатура 		= Строка.Номенклатура;
					Стр.Характеристика 		= Строка.Характеристика;
					Стр.Количество 			= Строка.Количество;
					Стр.КоличествоУпаковок 	= Строка.КоличествоУпаковок;
					Стр.гф_IDкороба 		= ОбъектУпаковочныйЛист.Ссылка;
					Стр.Склад 				= СтрокаЗаказы.Склад;
					Стр.ИсходноеНазначение 	= СтрокаЗаказы.Назначение;
				КонецЦикла;
				
			Иначе	
				
				Стр = НовыйДокумент.Товары.Добавить();
				Стр.Номенклатура 		= СтрокаУпаковочныйЛист.Номенклатура;
				Стр.Характеристика 		= СтрокаУпаковочныйЛист.Характеристика;
				Стр.Количество 			= СтрокаУпаковочныйЛист.Количество;
				Стр.КоличествоУпаковок 	= СтрокаУпаковочныйЛист.Количество;
				Стр.Склад 				= СтрокаЗаказы.Склад;
				Стр.ИсходноеНазначение 	= СтрокаЗаказы.Назначение;
				
			КонецЕсли;
			
		КонецЦикла;
		
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			КорректировкаНазначенияПроведен = Истина;
			
		Исключение
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьАктивнуюТранзакцию();
			КонецЕсли;
			
			КорректировкаНазначенияПроведен = Ложь;
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'По заказу ""%1"" не удалось провести документ ""Корректировка назначения товаров""'"),
				СтрокаЗаказы.Заказ);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Продолжить;
			
		КонецПопытки;	
		
		Если КорректировкаНазначенияПроведен И Объект.ТоварыВКоробках Тогда
			
			 Для Каждого СтрокаУпаковочныйЛист Из СтрокаЗаказы.УпаковочныеЛисты Цикл
				 
				 ОбъектУпаковочныйЛист = СтрокаУпаковочныйЛист.УпаковочныйЛист.ПолучитьОбъект();
				 
				 Попытка
					 ОбъектУпаковочныйЛист.Заблокировать();
				 Исключение
					 
					 Если ТранзакцияАктивна() Тогда
						 ОтменитьАктивнуюТранзакцию();
					 КонецЕсли;
					 
					 ТекстСообщения = СтрШаблон(НСтр("ru = '%1 находится в процессе редактирования и не может быть изменен.
					 	|Документ ""Корректировка назначения товаров"" не сформирован'"), ОбъектУпаковочныйЛист);
					 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					 ВызватьИсключение;
					 
				 КонецПопытки;
				 
				 // Очищаем ссылку на заказ клиента
				 ОбъектУпаковочныйЛист.гф_Заказ = Неопределено;
				 
				 // Очищаем колонку с назначением по каждой строке
				 Для Каждого Строка Из ОбъектУпаковочныйЛист.Товары Цикл
					 Строка.Назначение = Неопределено;
				 КонецЦикла;
				 
				 Попытка
					 ОбъектУпаковочныйЛист.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);	 
				 Исключение
					 
					 Если ТранзакцияАктивна() Тогда
						 ОтменитьАктивнуюТранзакцию();
					 КонецЕсли;
					 
					 ТекстСообщения = СтрШаблон(НСтр("ru = 'Упаковочный лист ""%1"" не удалось перепровести. '"),
					 	ОбъектУпаковочныйЛист);
					 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					 
					 ЗаписьЖурналаРегистрации(НСтр("ru = 'Проведение документа ""Упаковочный лист""'"), УровеньЖурналаРегистрации.Ошибка,,,
					 	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					 Продолжить;
				 КонецПопытки;
				 
			КонецЦикла;	 
			 
		КонецЕсли;
		
		Попытка
			Если ТранзакцияАктивна() Тогда
				
				ЗафиксироватьАктивнуюТранзакцию();
				
			КонецЕсли;
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Сформирован документ ""%1"".'"), НовыйДокумент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, НовыйДокумент);
		Исключение
			Если ТранзакцияАктивна() Тогда
				ОтменитьАктивнуюТранзакцию();
			КонецЕсли;
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка фиксации транзакции снятия резерва по заказу ""%1"", поробуйте выполнить
			| операцию позднее. Возможно отсутствует доступ на формирование и изменение документов участвующих в снятии резерва'"), СтрокаЗаказы.Заказ);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Продолжить;
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПолучитьОтмеченныеДанныеДереваЗначений()
	
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоДокументов");
	
	// Таблица для записи каждого заказа с конкретным списком упаковочных листов по этому заказу
	ТЗ_Заказы = Новый ТаблицаЗначений;
	ТЗ_Заказы.Колонки.Добавить("Заказ");
    ТЗ_Заказы.Колонки.Добавить("СписокУпаковочныйЛистИлиНоменклатура");
	ТЗ_Заказы.Колонки.Добавить("Склад");
	ТЗ_Заказы.Колонки.Добавить("Организация");
	ТЗ_Заказы.Колонки.Добавить("Назначение");
	
	Для Каждого Строка Из ДеревоЗначений.Строки Цикл
		
		Для Каждого Строка_Н Из Строка.Строки Цикл
			
			Для Каждого Строка_Т Из Строка_Н.Строки Цикл
				
				Если Строка_Т.Отгрузить
					И (ЗначениеЗаполнено(Строка_Т.Номенклатура)
					Или ЗначениеЗаполнено(Строка_Т.УпаковочныйЛистСсылка)) Тогда
					
					НайтиЗаказ = ТЗ_Заказы.Найти(Строка_Т.Заказ, "Заказ");
					
					Если НайтиЗаказ = Неопределено Тогда
						
						ОбъектЗаказ = Строка_Т.Заказ.ПолучитьОбъект();
						
						СтрокаЗаказы = ТЗ_Заказы.Добавить();
						СтрокаЗаказы.Заказ = Строка_Т.Заказ;
						СтрокаЗаказы.Склад = Строка_Т.Склад;
						СтрокаЗаказы.Организация = Строка_Т.Организация;
						СтрокаЗаказы.Назначение = ОбъектЗаказ.Назначение;
						
						Если Объект.ТоварыВКоробках Тогда
							
							ТЗ_УпаковочныеЛисты = Новый ТаблицаЗначений;
							ТЗ_УпаковочныеЛисты.Колонки.Добавить("УпаковочныйЛист");
							СтрокаУпаковочныеЛисты = ТЗ_УпаковочныеЛисты.Добавить();
							
							СтрокаУпаковочныеЛисты.УпаковочныйЛист 		= Строка_Т.УпаковочныйЛистСсылка;
							
							СтрокаЗаказы.СписокУпаковочныйЛистИлиНоменклатура = ТЗ_УпаковочныеЛисты;
							
						Иначе
							
							ТЗ_Номенклатура = Новый ТаблицаЗначений;
							ТЗ_Номенклатура.Колонки.Добавить("Номенклатура");
							ТЗ_Номенклатура.Колонки.Добавить("Характеристика");
							ТЗ_Номенклатура.Колонки.Добавить("Количество");
							СтрокаНоменклатуры = ТЗ_Номенклатура.Добавить();
							
							СтрокаНоменклатуры.Номенклатура 		= Строка_Т.Номенклатура;
							СтрокаНоменклатуры.Характеристика 		= Строка_Т.Характеристика;
							СтрокаНоменклатуры.Количество 			= Строка_Т.КоличествоНоменклатуры;
							
							СтрокаЗаказы.СписокУпаковочныйЛистИлиНоменклатура = ТЗ_Номенклатура;
							
						КонецЕсли;	
					Иначе
						
						Если Объект.ТоварыВКоробках Тогда
							НайтиСписокУпаковочныйЛистИлиНоменклатура = НайтиЗаказ.СписокУпаковочныйЛистИлиНоменклатура.Найти(Строка_Т.УпаковочныйЛистСсылка, "УпаковочныйЛист");
						Иначе
							НайтиСписокУпаковочныйЛистИлиНоменклатура = НайтиЗаказ.СписокУпаковочныйЛистИлиНоменклатура.Найти(Строка_Т.Номенклатура, "Номенклатура");	
						КонецЕсли;
						
						Если НайтиСписокУпаковочныйЛистИлиНоменклатура = Неопределено Тогда
							
							СтрокаСписокУпаковочныйЛистИлиНоменклатура = НайтиЗаказ.СписокУпаковочныйЛистИлиНоменклатура.Добавить();
							//СтрокаСписокУпаковочныйЛистИлиНоменклатура = НайтиЗаказ.СписокУпаковочныйЛистИлиНоменклатура.Добавить();
							
							Если Объект.ТоварыВКоробках Тогда
								СтрокаСписокУпаковочныйЛистИлиНоменклатура.УпаковочныйЛист 		= Строка_Т.УпаковочныйЛистСсылка;
							Иначе
								СтрокаСписокУпаковочныйЛистИлиНоменклатура.Номенклатура 		= Строка_Т.Номенклатура;
								СтрокаСписокУпаковочныйЛистИлиНоменклатура.Характеристика 		= Строка_Т.Характеристика;
								СтрокаСписокУпаковочныйЛистИлиНоменклатура.Количество 			= Строка_Т.КоличествоНоменклатуры;
							КонецЕсли;
							
						КонецЕсли;
							
					КонецЕсли;
				
				КонецЕсли;
			
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТЗ_Заказы.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не отмечен ни один объект к снятию резерва.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат ТЗ_Заказы;
		
	КонецЕсли;
	
	Возврат ТЗ_Заказы;
 	
КонецФункции	

&НаКлиенте
Процедура УстановитьЗначениеТоварыВКоробах()
	
	Объект.ТоварыВКоробках = ПолучитьЗначениеРеквизитаСкладаТоварыВКоробках();
	
	Если Не Объект.ТоварыВКоробках Тогда
		Элементы.ДеревоДокументовНоменклатура.Видимость 				= Истина;
		Элементы.ДеревоДокументовХарактеристика.Видимость 				= Истина;
		Элементы.ДеревоДокументовДокументПоступленияНомер.Видимость 	= Ложь;
		Элементы.ДеревоДокументовУпаковочныйЛистНомер.Видимость 		= Ложь;
		Элементы.ДеревоДокументовСостояниеКороба.Видимость 				= Ложь;
		Элементы.ДеревоДокументовКоличествоВНаличии.Видимость 			= Ложь;
		Элементы.ДеревоДокументовКоличествоДнейХранения.Видимость 		= Ложь;
		Элементы.ДеревоДокументовСтатусКМ.Видимость 					= Ложь;
		Элементы.ДеревоДокументовКоличествоЗакано.Видимость 			= Истина;
		Элементы.ДеревоДокументовКоличествоОтгрузить.Видимость 			= Истина;
		Элементы.ДеревоДокументовКоличествоДоступно.Видимость 			= Истина;
		Элементы.ДеревоДокументовКоличествоНоменклатуры.Видимость 		= Ложь;
		Элементы.ДеревоДокументовЦена.Видимость 						= Истина;
	Иначе
		Элементы.ДеревоДокументовНоменклатура.Видимость 				= Ложь;
		Элементы.ДеревоДокументовХарактеристика.Видимость 				= Ложь;
		Элементы.ДеревоДокументовДокументПоступленияНомер.Видимость 	= Истина;
		Элементы.ДеревоДокументовУпаковочныйЛистНомер.Видимость 		= Истина;
		Элементы.ДеревоДокументовСостояниеКороба.Видимость 				= Истина;
		Элементы.ДеревоДокументовКоличествоВНаличии.Видимость 			= Истина;
		Элементы.ДеревоДокументовКоличествоДнейХранения.Видимость 		= Истина;
		Элементы.ДеревоДокументовСтатусКМ.Видимость 					= Истина;
		Элементы.ДеревоДокументовКоличествоЗакано.Видимость 			= Ложь;
		Элементы.ДеревоДокументовКоличествоОтгрузить.Видимость 			= Ложь;
        Элементы.ДеревоДокументовКоличествоДоступно.Видимость 			= Ложь;
		Элементы.ДеревоДокументовКоличествоНоменклатуры.Видимость 		= Истина;
		Элементы.ДеревоДокументовЦена.Видимость 						= Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеРеквизитаСкладаТоварыВКоробках()
	
	ДеревоДокументовЭлементы = ДеревоДокументов.ПолучитьЭлементы();
	ДеревоДокументовЭлементы.Очистить();
	
	Склад = Объект.Склад;
	
	ДополнительныйРеквизит = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "гф_СкладыТоварыВКоробах");
	ЗначениеДополнительногоРеквизита = Склад.ДополнительныеРеквизиты.Найти(ДополнительныйРеквизит, "Свойство");
	
	Если Не ЗначениеДополнительногоРеквизита = Неопределено Тогда
		Возврат ЗначениеДополнительногоРеквизита.Значение;
	Иначе
		Возврат Ложь;
	КонецЕсли;
 	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуОстатковДляНеКоробногоСклада()
	
	Дерево = ЗаполнитьДеревоЗначенийДляНеКоробногоСклада();
	
	РассчитатьЛимиты(Дерево);
	
	ПолучитьБлокировки(Дерево);
	
	ДеревоДокументовЭлементы = ДеревоДокументов.ПолучитьЭлементы();
	ДеревоДокументовЭлементы.Очистить();
	
	ЗаполнитьСвойстваСтроки(ДеревоДокументов, Дерево.Строки);
	
КонецПроцедуры

Функция ЗаполнитьДеревоЗначенийДляНеКоробногоСклада()
	
	ОтчетОбъект = РеквизитФормыВЗначение("Объект");
	Склад = ОтчетОбъект.Склад;
	
	СхемаКомпоновкиДанных = ОтчетОбъект.ПолучитьМакет("СхемаКомпоновкиНоменклатуры");
	
	Объект.КомпоновщикНастроекНоменклатуры.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	Объект.КомпоновщикНастроекНоменклатуры.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	КомпоновщикНастроек = Объект.КомпоновщикНастроекНоменклатуры;
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	
    ГруппировкаДетальныеПоля = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
    ГруппировкаДетальныеПоля.Использование = Истина;
    Автополе = ГруппировкаДетальныеПоля.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
    Автополе.Использование = Истина;
	
	ПолеПараметрыДанных				= Новый ПолеКомпоновкиДанных("ПараметрыДанных");
	ПолеСистемныеПоля				= Новый ПолеКомпоновкиДанных("СистемныеПоля");
	
    Для Каждого ПолеВыбора Из КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		ВыбранноеПоле = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Использование	= Не (ПолеВыбора.Поле = ПолеПараметрыДанных ИЛИ ПолеВыбора.Поле = ПолеСистемныеПоля);
		ВыбранноеПоле.Поле			= ПолеВыбора.Поле;
	КонецЦикла;	 
	
	ПараметрОбособленныеТовары = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(
		"ПоказатьОбособленныеТовары");
	Если ПараметрОбособленныеТовары <> Неопределено Тогда
		ПараметрОбособленныеТовары.Значение = Истина;
	КонецЕсли;
	
	ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Склад");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ПравоеЗначение	= Склад;
	
	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);

	ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.Основной.Запрос;

	ТекстЗапросаВесУпаковки = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
		"Таблица.Номенклатура.ЕдиницаИзмерения", "Таблица.Номенклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаВесНоменклатуры", ТекстЗапросаВесУпаковки);
		
	ТекстЗапросаОбъемУпаковки = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки(
		"Таблица.Номенклатура.ЕдиницаИзмерения", "Таблица.Номенклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаОбъемНоменклатуры", ТекстЗапросаОбъемУпаковки);

	СхемаКомпоновкиДанных.НаборыДанных.Основной.Запрос = ТекстЗапроса;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	ТипГенератора = Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений");
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, , , ТипГенератора);
    
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
    
    ТаблицаКомпоновкаДанных = Новый ТаблицаЗначений;
    
    ПроцессорВыводаРезультатаКомпоновкиДанных = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ПроцессорВыводаРезультатаКомпоновкиДанных.УстановитьОбъект(ТаблицаКомпоновкаДанных);
    ПроцессорВыводаРезультатаКомпоновкиДанных.Вывести(ПроцессорКомпоновкиДанных);
	
	МассивУдалитьСтроки = Новый Массив;
	Для Каждого Строка Из ТаблицаКомпоновкаДанных Цикл
		Если Строка["ТипЗаписи"] <> "Сейчас" Или Не ЗначениеЗаполнено(Строка.ЗаказНаОтгрузку)Тогда
			МассивУдалитьСтроки.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдалитьСтроку Из МассивУдалитьСтроки Цикл
		ТаблицаКомпоновкаДанных.Удалить(УдалитьСтроку);
	КонецЦикла;
	
	ТаблицаОстатки = ТаблицаКомпоновкаДанных.Скопировать();
	//ТаблицаОстатки.Свернуть("ЗаказНаОтгрузку, Склад, Номенклатура, Характеристика, ЗаказНаОтгрузку", "Доступно");
	ТаблицаОстатки.Свернуть("ЗаказНаОтгрузку, Склад, Номенклатура, НоменклатураАртикул, Характеристика, ЗаказНаОтгрузку", "Доступно");
	
	ТЗЗаказНаОтгрузку = ТаблицаОстатки.Скопировать(, "ЗаказНаОтгрузку");
	ТЗЗаказНаОтгрузку.Свернуть("ЗаказНаОтгрузку");
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказКлиента.Ссылка КАК Заказ,
		|	ЗаказКлиента.гф_АдресДоставки КАК АдресДоставки,
		|	ЗаказКлиента.Партнер КАК Клиент,
		|	ЗаказКлиента.Организация КАК Организация,
		|	ЗаказКлиента.Договор КАК Договор,
		|	ЗаказКлиента.Склад КАК Склад,
		|	ЗаказКлиента.гф_ОтгрузкаПеремещением КАК ОтгрузкаПеремещением,
		|	ЗаказКлиента.Товары КАК Товары
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гф_АдресаДоставки КАК гф_АдресаДоставки
		|		ПО ЗаказКлиента.гф_АдресДоставки = гф_АдресаДоставки.Ссылка
		|ГДЕ
		|	ЗаказКлиента.Ссылка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", ТЗЗаказНаОтгрузку.ВыгрузитьКолонку("ЗаказНаОтгрузку"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗВыборкаЗаказАдрес = РезультатЗапроса.Выгрузить();
	
	ТаблицаОстатки.Колонки.Добавить("Клиент", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ТаблицаОстатки.Колонки.Добавить("АдресДоставки", Новый ОписаниеТипов("СправочникСсылка.гф_АдресаДоставки"));
	ТаблицаОстатки.Колонки.Добавить("Договор",  Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаОстатки.Колонки.Добавить("Организация",  Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаОстатки.Колонки.Добавить("Цена",  Новый ОписаниеТипов("Число"));
	ТаблицаОстатки.Колонки.Добавить("Стоимость",  Новый ОписаниеТипов("Число"));
	ТаблицаОстатки.Колонки.Добавить("КоличествоЗаказано",  Новый ОписаниеТипов("Число"));
	ТаблицаОстатки.Колонки.Добавить("КоличествоОтгрузить",  Новый ОписаниеТипов("Число"));
	ТаблицаОстатки.Колонки.Добавить("ОтгрузкаПеремещением",  Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрокаОстатки Из ТаблицаОстатки Цикл
		ТЗВыборкаЗаказАдресСтрока = ТЗВыборкаЗаказАдрес.Найти(СтрокаОстатки.ЗаказНаОтгрузку, "Заказ");
		
		Если Не ТЗВыборкаЗаказАдресСтрока = Неопределено Тогда
			
			ЗаполнитьЗначенияСвойств(СтрокаОстатки, ТЗВыборкаЗаказАдресСтрока, , "Склад");
			
		КонецЕсли;
		
		СтруктураПоискаНоменклатурахарактеристика = Новый Структура;
		СтруктураПоискаНоменклатурахарактеристика.Вставить("Номенклатура", СтрокаОстатки.Номенклатура);
		СтруктураПоискаНоменклатурахарактеристика.Вставить("Характеристика", СтрокаОстатки.Характеристика);
		
		//ТЗВыборкаНоменклатураСтрока = ТЗВыборкаЗаказАдресСтрока.Товары.Найти(СтрокаОстатки.Номенклатура, "Номенклатура");
		ТЗВыборкаНоменклатураСтрока = ТЗВыборкаЗаказАдресСтрока.Товары.НайтиСтроки(СтруктураПоискаНоменклатурахарактеристика);
		//Если Не ТЗВыборкаНоменклатураСтрока = Неопределено Тогда
		Если ТЗВыборкаНоменклатураСтрока.Количество() > 0 Тогда
			
			СтрокаОстатки.Цена = ТЗВыборкаНоменклатураСтрока[0].Цена;
			
			СтрокаОстатки.КоличествоЗаказано = ТЗВыборкаНоменклатураСтрока[0].КоличествоУпаковок;
			
			Если СтрокаОстатки.Доступно > СтрокаОстатки.КоличествоЗаказано Тогда
				СтрокаОстатки.КоличествоОтгрузить = СтрокаОстатки.КоличествоЗаказано;
			Иначе
				СтрокаОстатки.КоличествоОтгрузить = СтрокаОстатки.Доступно;
			КонецЕсли;
			
			// Стоимость с НДС
			СтрокаОстатки.Стоимость = СтрокаОстатки.КоличествоОтгрузить * ТЗВыборкаНоменклатураСтрока[0].Цена * (1 + ТЗВыборкаНоменклатураСтрока[0].СтавкаНДС.Ставка/100);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОстатки2.Клиент КАК Клиент,
		|	ТаблицаОстатки2.АдресДоставки КАК АдресДоставки,
		|	ТаблицаОстатки2.Номенклатура КАК Номенклатура,
		|	ТаблицаОстатки2.ЗаказНаОтгрузку КАК Заказ,
		|	ТаблицаОстатки2.ОтгрузкаПеремещением КАК ОтгрузкаПеремещением,
		|	ТаблицаОстатки2.Характеристика КАК Характеристика,
		|	ТаблицаОстатки2.Организация КАК Организация,
		|	ТаблицаОстатки2.Договор КАК Договор,
		|	ТаблицаОстатки2.Склад КАК Склад,
		|	ТаблицаОстатки2.Доступно КАК КоличествоДоступно,
		|	ТаблицаОстатки2.КоличествоЗаказано КАК КоличествоЗаказано,
		|	ТаблицаОстатки2.КоличествоОтгрузить КАК КоличествоОтгрузить,
		|	ТаблицаОстатки2.Цена КАК Цена,
		|	ТаблицаОстатки2.Стоимость КАК Стоимость
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&ТаблицаОстатки КАК ТаблицаОстатки2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ.Клиент КАК Клиент,
		|	ВТ.АдресДоставки КАК АдресДоставки,
		|	ВТ.Номенклатура КАК Номенклатура,
		|	ВТ.Заказ КАК Заказ,
		|	ВТ.ОтгрузкаПеремещением КАК ОтгрузкаПеремещением,
		|	ВТ.Характеристика КАК Характеристика,
		|	ВТ.Организация КАК Организация,
		|	ВТ.Договор КАК Договор,
		|	ВТ.Склад КАК Склад,
		|	ВТ.КоличествоДоступно КАК КоличествоДоступно,
		|	ВТ.КоличествоЗаказано КАК КоличествоЗаказано,
		|	ВТ.КоличествоОтгрузить КАК КоличествоОтгрузить,
		|	ВТ.Цена КАК Цена,
		|	ВТ.Стоимость КАК Стоимость,
		|	гф_АдресаДоставки.НомерАдреса КАК НомерАдреса,
		|	ЛОЖЬ КАК Блокировка,
		|	ЛОЖЬ КАК Отгрузить,
		|	ЛОЖЬ КАК БлокировкиОтгрузок,
		|	0 КАК ДействующийЛимит,
		|	НоменклатураЕИ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	НоменклатураЕИ.Артикул КАК Артикул
		|ИЗ
		|	ВТ КАК ВТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гф_АдресаДоставки КАК гф_АдресаДоставки
		|		ПО ВТ.АдресДоставки = гф_АдресаДоставки.Ссылка,
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураЕИ
		|		ПО ВТ.Номенклатура = НоменклатураЕИ.Ссылка
		|ИТОГИ ПО
		|	Клиент,
		|	НомерАдреса";
	
	Запрос.УстановитьПараметр("ТаблицаОстатки", ТаблицаОстатки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗВыборкаЗаказАдрес = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Возврат ТЗВыборкаЗаказАдрес;
	
КонецФункции

Функция ПолучитьНоменклатуруТабличнойЧастиЗаказа(ТЗ_Товары, СкидкаВКоробах, ВариантыОбеспечения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаОстатки2.Номенклатура КАК Номенклатура,
	|	ТаблицаОстатки2.Характеристика КАК Характеристика,
	|	ТаблицаОстатки2.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаОстатки2.ВариантОбеспечения КАК ВариантОбеспечения,
	|	ТаблицаОстатки2.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ТаблицаОстатки2.Отменено КАК Отменено
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТаблицаОстатки КАК ТаблицаОстатки2
	|ГДЕ
	|	ТаблицаОстатки2.ВариантОбеспечения = &ВариантОбеспечения
	|	И ТаблицаОстатки2.ПроцентРучнойСкидки = &ПроцентРучнойСкидки
	|	И Не ТаблицаОстатки2.Отменено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ.Номенклатура КАК Номенклатура,
	|	ВТ.Характеристика КАК Характеристика,
	|	ВТ.КоличествоУпаковок КАК КоличествоУпаковок
	|ИЗ
	|	ВТ КАК ВТ";
	
	Запрос.УстановитьПараметр("ТаблицаОстатки", ТЗ_Товары);
	Запрос.УстановитьПараметр("ПроцентРучнойСкидки", СкидкаВКоробах);
	Запрос.УстановитьПараметр("ВариантОбеспечения", ВариантыОбеспечения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	РезультатВыборки = РезультатЗапроса.Выгрузить();
	
	Возврат РезультатВыборки;
	
КонецФункции

Функция РазницаТаблицЗначений(Таблица0, Таблица1) Экспорт
    
	ВсеКолонки = "";
	
	Для Каждого Колонка Из Таблица0.Колонки Цикл 
		ВсеКолонки = ВсеКолонки + ", " + Колонка.Имя
	КонецЦикла;
	ВсеКолонки = Сред(ВсеКолонки, 2);
	
	Таблица = Таблица1.Скопировать();    
	
	Таблица.Колонки.Добавить("Знак", Новый ОписаниеТипов("Число"));
	
	Таблица.ЗаполнитьЗначения(1, "Знак");
	
	Для Каждого Строка Из Таблица0 Цикл ЗаполнитьЗначенияСвойств(Таблица.Добавить(), Строка) КонецЦикла;
	
	Таблица.Колонки.Добавить("Счёт");
	Таблица.ЗаполнитьЗначения(1, "Счёт");
	
	Таблица.Свернуть(ВсеКолонки, "Знак, Счёт");
	
	Ответ = Таблица.Скопировать(Новый Структура("Счёт", 1), ВсеКолонки + ", Знак");
	
	Возврат Ответ;
    
КонецФункции

Процедура ЗаполнитьЗначенияИзСтроки(СтрокаУпаковочныеЛистыНоменклатура, Строка_Т, ЭтоТоварыВКоробках);
	
	Если ЭтоТоварыВКоробках Тогда
		СтрокаУпаковочныеЛистыНоменклатура.ЭлементУпаковочныйЛистНоменклатура 		= Строка_Т.УпаковочныйЛистСсылка;
	Иначе
		СтрокаУпаковочныеЛистыНоменклатура.ЭлементУпаковочныйЛистНоменклатура 		= Строка_Т.Номенклатура;
		СтрокаУпаковочныеЛистыНоменклатура.Характеристика 							= Строка_Т.Характеристика;
	КонецЕсли;
	
	СтрокаУпаковочныеЛистыНоменклатура.КоличествоОстаток 							= Строка_Т.КоличествоОтгрузить;
	СтрокаУпаковочныеЛистыНоменклатура.Цена 										= Строка_Т.Цена;

КонецПроцедуры

Процедура ОбработкаЗаполненияТоваров(ТЗ_Товары, ТЗ, СтрокаУпаковочныйЛистНоменклатура, СтруктураПереданныхДанных, ОтказЗаписьУпаковочногоЛиста, ОбъектЗаказ)
	
	Для Каждого СтрокаТовары Из ТЗ_Товары Цикл
		
		Если СтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Или СтрокаТовары.Отменено Тогда
			Продолжить;
		Иначе
			
			ДополнительныеПараметры = ПолучитьДополнительныеПараметры(СтрокаТовары, Ложь);
			
			ПараметрыРазбиенияСтроки = ПараметрыРазбиенияСтроки();
			
			Количество = 0;
			
			//Если Объект.ТоварыВКоробках Тогда
			//	Для Каждого СтрокаКомплектацияРазбиение Из ТабКомплектация Цикл
			//		Если СтрокаКомплектацияРазбиение.Номенклатура = СтрокаТовары.Номенклатура
			//			И СтрокаКомплектацияРазбиение.Характеристика = СтрокаТовары.Характеристика Тогда
			//			
			//			Количество = СтрокаКомплектацияРазбиение.Количество;
			//			
			//			ПараметрыОбработки = ПолучитьПараметрыОбработки(ТЗ, ЭтаФорма, "", ПараметрыРазбиенияСтроки, ДополнительныеПараметры, Количество);
			//			
			//			ДобавитьСтрокуРазбиением(ПараметрыОбработки, ТЗ, СтрокаТовары, ТЗ_Товары, ОтказЗаписьУпаковочногоЛиста, СписокКодовСтрокиПоУпаковочнымЛистам,
			//			СтрокаУпаковочныйЛистНоменклатура.ЭлементУпаковочныйЛистНоменклатура, СтруктураПереданныхДанных, СтрокаУпаковочныйЛистНоменклатура.Скидка);
			//			
			//			Прервать;
			//			
			//		КонецЕсли;
			//	КонецЦикла;
			//Иначе	
				Если СтрокаУпаковочныйЛистНоменклатура.ЭлементУпаковочныйЛистНоменклатура = СтрокаТовары.Номенклатура Тогда
					
					Если ЗначениеЗаполнено(СтрокаТовары.Характеристика) Тогда
						
						Если СтрокаУпаковочныйЛистНоменклатура.Характеристика = СтрокаТовары.Характеристика
							Или (ТипЗнч(СтрокаУпаковочныйЛистНоменклатура.Характеристика) = Тип("Строка")
							И СтрокаУпаковочныйЛистНоменклатура.Характеристика = СтрокаТовары.Характеристика.Наименование) Тогда
							
							Количество = СтрокаУпаковочныйЛистНоменклатура.КоличествоОстаток;
							
							ПараметрыОбработки = ПолучитьПараметрыОбработки(ТЗ, ЭтаФорма, "", ПараметрыРазбиенияСтроки, ДополнительныеПараметры, Количество);
							
							ДобавитьСтрокуРазбиением(ПараметрыОбработки, ТЗ, СтрокаТовары, ТЗ_Товары, ОтказЗаписьУпаковочногоЛиста,
							Неопределено, СтрокаУпаковочныйЛистНоменклатура.ЭлементУпаковочныйЛистНоменклатура, СтруктураПереданныхДанных, СтрокаУпаковочныйЛистНоменклатура.Скидка);
							
							Прервать;
							
						КонецЕсли;
						
					Иначе
						
						Количество = СтрокаУпаковочныйЛистНоменклатура.КоличествоОстаток;
						
						ПараметрыОбработки = ПолучитьПараметрыОбработки(ТЗ, ЭтаФорма, "", ПараметрыРазбиенияСтроки, ДополнительныеПараметры, Количество);
						
						ДобавитьСтрокуРазбиением(ПараметрыОбработки, ТЗ, СтрокаТовары, ТЗ_Товары, ОтказЗаписьУпаковочногоЛиста,
						Неопределено, СтрокаУпаковочныйЛистНоменклатура.ЭлементУпаковочныйЛистНоменклатура, СтруктураПереданныхДанных, СтрокаУпаковочныйЛистНоменклатура.Скидка);
						
						Прервать;
						
					КонецЕсли;
					
				КонецЕсли;			
			//КонецЕсли;
			
		КонецЕсли;
		
		Если Объект.ТоварыВКоробках Тогда
			Если ОтказЗаписьУпаковочногоЛиста Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не достаточно остатков в ""%1"" по ""%2""'"), ОбъектЗаказ, СтрокаУпаковочныйЛистНоменклатура.УпаковочныйЛист);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Прервать;	
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияТоваровВКоробах(Отказ, ВозвратПродолжить, ТЗ_Товары, ТЗ, СтрокаУпаковочныйЛистНоменклатура, СтруктураПереданныхДанных, ОтказЗаписьУпаковочногоЛиста, ОбъектЗаказ,
	ТЗ_ТоварыВКоробах, ТЗ_ПричиныИзмененияТоварыВКоробах, ТЗКВТ, ТЗПричиныИзменения, ТабКомплектация, СписокКодовСтрокиПоУпаковочнымЛистам)
	
	Для Каждого СтрокаТоварыВКоробах Из ТЗ_ТоварыВКоробах Цикл
		
		Если СтрокаТоварыВКоробах.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда
			Продолжить;
		ИначеЕсли СтрокаТоварыВКоробах.ВариантКомплектации = СтрокаУпаковочныйЛистНоменклатура.УпаковочныйЛист.гф_Комплектация Тогда
			
			ДополнительныеПараметры = ПолучитьДополнительныеПараметры(СтрокаТоварыВКоробах, Истина);
			
			ПараметрыРазбиенияСтроки = ПараметрыРазбиенияСтроки();
			ПараметрыРазбиенияСтроки.ИмяПоляКоличество = "Количество";
			
			// В цикле перебираются упаковочные листы последовательно всегда по одному, поэтому передаем количестово один для разбиения строки
			Количество = 1;
			
			ПараметрыОбработки = ПолучитьПараметрыОбработки(ТЗКВТ, ЭтаФорма, "", ПараметрыРазбиенияСтроки, ДополнительныеПараметры, Количество);
			
			СкидкаВКоробах = СтрокаТоварыВКоробах.Скидка;
			ОтказЗаписьУпаковочногоЛиста = Ложь;
			
			МассивСтрок = ТЗ_ПричиныИзмененияТоварыВКоробах.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаТоварыВКоробах.ИдентификаторСтроки));
			
			// Проверка истории по строке комплектации, если нет первой строки с историей, то добавим ее 
			Если МассивСтрок.Количество() = 0 Тогда
				Строка = ТЗ_ПричиныИзмененияТоварыВКоробах.Добавить();
				ЗаполнитьЗначенияСвойств(Строка, СтрокаТоварыВКоробах);
			ИначеЕсли МассивСтрок.Количество() = 1 И Не ЗначениеЗаполнено(МассивСтрок[0].Количество) Тогда
				ЗаполнитьЗначенияСвойств(МассивСтрок[0], СтрокаТоварыВКоробах);
			КонецЕсли;
			
			ДобавитьСтрокуРазбиениемДляУпаковочногоЛиста(ПараметрыОбработки, ТЗКВТ, СтрокаТоварыВКоробах, СтруктураПереданныхДанных,
			ОтказЗаписьУпаковочногоЛиста, СтрокаУпаковочныйЛистНоменклатура.Скидка);
			
			Если ОтказЗаписьУпаковочногоЛиста Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не достаточно остатков в ""%1"" по ""%2"" на вкладке ""Товары в коробах""'"), ОбъектЗаказ, СтрокаУпаковочныйЛистНоменклатура.УпаковочныйЛист);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Прервать;	
			КонецЕсли;
			
			//Если ЗначениеЗаполнено(Справочники.ПричиныОтменыЗаказовКлиентов.гф_Отгружено) Тогда
				СтрокаПричиныИзменения = ТЗПричиныИзменения.Добавить();
				СтрокаПричиныИзменения.ИдентификаторСтроки = СтрокаТоварыВКоробах.ИдентификаторСтроки;
				СтрокаПричиныИзменения.ВариантКомплектации = СтрокаТоварыВКоробах.ВариантКомплектации;
				СтрокаПричиныИзменения.Количество = Количество * (-1);
				СтрокаПричиныИзменения.Причина = Справочники.ПричиныОтменыЗаказовКлиентов.гф_Отгружено;
				СтрокаПричиныИзменения.Дата = ТекущаяДата();
				СтрокаПричиныИзменения.Комментарий = "";
				Ответственный = ПользователиИнформационнойБазы.ТекущийПользователь();
				СтрокаПричиныИзменения.Ответственный = Справочники.Пользователи.НайтиПоНаименованию(Ответственный.ПолноеИмя);
				СтрокаПричиныИзменения.Скидка = СтрокаТоварыВКоробах.Скидка;
				СтрокаПричиныИзменения.ЦенаКороба = СтрокаТоварыВКоробах.ЦенаКороба;
				СтрокаПричиныИзменения.ЦенаКоробаСоСкидкой = СтрокаТоварыВКоробах.ЦенаКоробаСоСкидкой;
				Прервать;	
			//Иначе
			//	ТекстСообщения = СтрШаблон(НСтр("ru = 'Не найден статус ""Отгружено"" в Справочнике ""ПричиныОтменыЗаказовКлиентов"" для установки на вкладке ""Товары в коробах"" в ""%1"" по ""%2"" '"), ОбъектЗаказ, СтрокаУпаковочныйЛистНоменклатура.УпаковочныйЛист);
			//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			//	Отказ = Истина;
			//	Возврат;
			//КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Пересорт = СтрокаУпаковочныйЛистНоменклатура.УпаковочныйЛист.гф_СостояниеКороба = Справочники.гф_СостянияКоробов.Пересорт;
	НеПолный = СтрокаУпаковочныйЛистНоменклатура.УпаковочныйЛист.гф_СостояниеКороба = Справочники.гф_СостянияКоробов.НеПолный;
	
	Если Пересорт Тогда
		
		НайденныйЭлемент = Справочники.ВариантыКомплектацииНоменклатуры.НайтиПоНаименованию(СтрокаУпаковочныйЛистНоменклатура.УпаковочныйЛист.гф_Комплектация.Наименование);
		
		Если Не НайденныйЭлемент = Неопределено Тогда
			ТЗ_ЭталонКомплектация = Новый ТаблицаЗначений;
			ТЗ_ЭталонКомплектация = НайденныйЭлемент.Товары.Выгрузить();
			ТЗ_ЭталонКомплектация.Свернуть("Номенклатура, Характеристика, КоличествоУпаковок");
		Иначе
			ОтказЗаписьУпаковочногоЛиста = Истина;
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не возможно сравнить пересорт с эталоном комплектации, комплектация не найдена ""%1"" по ""%2"" для""%3""'"), СтрокаУпаковочныйЛистНоменклатура.УпаковочныйЛист.гф_Комплектация.Наименование, ОбъектЗаказ, СтрокаУпаковочныйЛистНоменклатура.УпаковочныйЛист);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			//Продолжить;
			ВозвратПродолжить = Истина;
			Возврат;
		КонецЕсли;
		
		// Выгрузка актуальных данных из упаковочного листа
		ТЗ_УпаковочныйЛист = Новый ТаблицаЗначений;
		ТЗ_УпаковочныйЛист = СтрокаУпаковочныйЛистНоменклатура.УпаковочныйЛист.Товары.Выгрузить();
		ТЗ_УпаковочныйЛист.Свернуть("Номенклатура, Характеристика, КоличествоУпаковок");
		
		РазницаТаблиц = РазницаТаблицЗначений(ТЗ_ЭталонКомплектация, ТЗ_УпаковочныйЛист);
		
		ТЗСНоменклатуройИКоличествомДляКорректировки = Новый ТаблицаЗначений;
		ТЗСНоменклатуройИКоличествомДляКорректировки.Колонки.Добавить("Номенклатура");
		ТЗСНоменклатуройИКоличествомДляКорректировки.Колонки.Добавить("Характеристика");
		ТЗСНоменклатуройИКоличествомДляКорректировки.Колонки.Добавить("ДобавитьКоличество");
		ТЗСНоменклатуройИКоличествомДляКорректировки.Колонки.Добавить("УбратьКоличество");
		
		НайтиСтрокиРазницаТаблиц = РазницаТаблиц.НайтиСтроки(Новый Структура("Знак", 1));
		
		Для Каждого СтрокаРазницаВНоменклатуре Из НайтиСтрокиРазницаТаблиц Цикл
			
			НайтиСтрокиЭталон = ТЗ_ЭталонКомплектация.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", СтрокаРазницаВНоменклатуре.Номенклатура, СтрокаРазницаВНоменклатуре.Характеристика));
			
			Если Не НайтиСтрокиЭталон = Неопределено И НайтиСтрокиЭталон.Количество() = 1  Тогда
				
				Если НайтиСтрокиЭталон[0].КоличествоУпаковок < СтрокаРазницаВНоменклатуре.КоличествоУпаковок Тогда
					
					ДобавитьКоличество = СтрокаРазницаВНоменклатуре.КоличествоУпаковок - НайтиСтрокиЭталон[0].КоличествоУпаковок;
					
					Стр = ТЗСНоменклатуройИКоличествомДляКорректировки.Добавить();
					Стр.Номенклатура = СтрокаРазницаВНоменклатуре.Номенклатура;
					Стр.Характеристика = СтрокаРазницаВНоменклатуре.Характеристика;
					Стр.ДобавитьКоличество = ДобавитьКоличество;
					Стр.УбратьКоличество = 0;
					
				ИначеЕсли НайтиСтрокиЭталон[0].КоличествоУпаковок > СтрокаРазницаВНоменклатуре.КоличествоУпаковок Тогда	
					
					УбратьКоличество = НайтиСтрокиЭталон[0].КоличествоУпаковок - СтрокаРазницаВНоменклатуре.КоличествоУпаковок;
					
					Стр = ТЗСНоменклатуройИКоличествомДляКорректировки.Добавить();
					Стр.Номенклатура = СтрокаРазницаВНоменклатуре.Номенклатура;
					Стр.Характеристика = СтрокаРазницаВНоменклатуре.Характеристика;
					Стр.ДобавитьКоличество = 0;
					Стр.УбратьКоличество = УбратьКоличество;
					
				КонецЕсли;
				
			Иначе
				
				// Добавление Номенклатуры в заказ
				Стр = ТЗСНоменклатуройИКоличествомДляКорректировки.Добавить();
				Стр.Номенклатура = СтрокаРазницаВНоменклатуре.Номенклатура;
				Стр.Характеристика = СтрокаРазницаВНоменклатуре.Характеристика;
				Стр.ДобавитьКоличество = СтрокаРазницаВНоменклатуре.КоличествоУпаковок;
				Стр.УбратьКоличество = 0;
				
			КонецЕсли;	
			
		КонецЦикла;
		
		Для Каждого СтрокаРазница Из ТЗСНоменклатуройИКоличествомДляКорректировки Цикл
			
			НайтиСтроки_ВариантОбеспечения = ТЗ_Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ПроцентРучнойСкидки, ВариантОбеспечения, Отменено",
			СтрокаРазница.Номенклатура, СтрокаРазница.Характеристика, СкидкаВКоробах, Перечисления.ВариантыОбеспечения.КОбеспечению, Ложь));
			
			Если Не НайтиСтроки_ВариантОбеспечения = Неопределено И НайтиСтроки_ВариантОбеспечения.Количество() > 0 Тогда
				
				СтрокаТовары = НайтиСтроки_ВариантОбеспечения[0];
				
				Если СтрокаРазница.ДобавитьКоличество > 0 Тогда
					
					ДополнительныеПараметры = ПолучитьДополнительныеПараметры(СтрокаТовары, Ложь);
					
					ПараметрыРазбиенияСтроки = ПараметрыРазбиенияСтроки();
					
					Количество = СтрокаРазница.ДобавитьКоличество;
					
					ПараметрыОбработки = ПолучитьПараметрыОбработки(ТЗ, ЭтаФорма, "", ПараметрыРазбиенияСтроки, ДополнительныеПараметры, Количество);
					
					ДобавитьСтрокуРазбиениемДобавитьКоличество(ПараметрыОбработки, ТЗ, СтрокаТовары, ТЗ_Товары, ОтказЗаписьУпаковочногоЛиста,
					СписокКодовСтрокиПоУпаковочнымЛистам, СтрокаУпаковочныйЛистНоменклатура.УпаковочныйЛист, СтруктураПереданныхДанных, СкидкаВКоробах);
					
				ИначеЕсли СтрокаРазница.УбратьКоличество > 0 Тогда
					
					ДополнительныеПараметры = ПолучитьДополнительныеПараметры(СтрокаТовары, Ложь);
					
					ПараметрыРазбиенияСтроки = ПараметрыРазбиенияСтроки();
					Количество = СтрокаРазница.УбратьКоличество;
					
					ПараметрыОбработки = ПолучитьПараметрыОбработки(ТЗ, ЭтаФорма, "", ПараметрыРазбиенияСтроки, ДополнительныеПараметры, Количество);
					
					ДобавитьСтрокуРазбиениемУбратьКоличество(ПараметрыОбработки, ТЗ, СтрокаТовары, ТЗ_Товары, ОтказЗаписьУпаковочногоЛиста,
					СписокКодовСтрокиПоУпаковочнымЛистам, СтрокаУпаковочныйЛистНоменклатура.УпаковочныйЛист, СтруктураПереданныхДанных, СкидкаВКоробах);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;			
		
		Для Каждого СтрокаКомплектацияРазбиение Из ТабКомплектация Цикл
			
			НайтиСтроки_ВариантОбеспечения = ТЗ_Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ПроцентРучнойСкидки, ВариантОбеспечения, Отменено",
			СтрокаКомплектацияРазбиение.Номенклатура, СтрокаКомплектацияРазбиение.Характеристика,СкидкаВКоробах, Перечисления.ВариантыОбеспечения.КОбеспечению, Ложь));
			
			Если НайтиСтроки_ВариантОбеспечения.Количество() > 1 Тогда
				
				ИспользоватьДляОтгрузкиНоменклатуруИзРазныхСтрок = Истина;
				
				СтрокаТовары = НайтиСтроки_ВариантОбеспечения;
			Иначе
				СтрокаТовары = НайтиСтроки_ВариантОбеспечения[0];
			КонецЕсли;
			
			ДополнительныеПараметры = ПолучитьДополнительныеПараметры(СтрокаТовары, Ложь);
			
			ПараметрыРазбиенияСтроки = ПараметрыРазбиенияСтроки();
			Количество = СтрокаКомплектацияРазбиение.Количество;
			
			ПараметрыОбработки = ПолучитьПараметрыОбработки(ТЗ, ЭтаФорма, "", ПараметрыРазбиенияСтроки, ДополнительныеПараметры, Количество);
			
			ДобавитьСтрокуРазбиениемПересорт(ПараметрыОбработки, ТЗ, СтрокаТовары, ТЗ_Товары, ОтказЗаписьУпаковочногоЛиста,
			СписокКодовСтрокиПоУпаковочнымЛистам, СтрокаУпаковочныйЛистНоменклатура.УпаковочныйЛист, СтруктураПереданныхДанных);
			
			Если ОтказЗаписьУпаковочногоЛиста Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не достаточно остатков в ""%1"" по ""%2""'"), ОбъектЗаказ, СтрокаУпаковочныйЛистНоменклатура.УпаковочныйЛист);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Прервать;	
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли НеПолный Тогда
		
		НайденныйЭлемент = Справочники.ВариантыКомплектацииНоменклатуры.НайтиПоНаименованию(СтрокаУпаковочныйЛистНоменклатура.УпаковочныйЛист.гф_Комплектация.Наименование);
		
		Если Не НайденныйЭлемент = Неопределено Тогда
			ТЗ_ЭталонКомплектация = Новый ТаблицаЗначений;
			ТЗ_ЭталонКомплектация = НайденныйЭлемент.Товары.Выгрузить();
			ТЗ_ЭталонКомплектация.Свернуть("Номенклатура, Характеристика, КоличествоУпаковок");
		Иначе
			ОтказЗаписьУпаковочногоЛиста = Истина;
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не возможно сравнить пересорт с эталоном комплектации, комплектация не найдена ""%1"" по ""%2"" для""%3""'"), СтрокаУпаковочныйЛистНоменклатура.УпаковочныйЛист.гф_Комплектация.Наименование, ОбъектЗаказ, СтрокаУпаковочныйЛистНоменклатура.УпаковочныйЛист);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			//Продолжить;
			ВозвратПродолжить = Истина;
			Возврат;
		КонецЕсли;
		
		// Выгрузка актуальных данных из упаковочного листа
		ТЗ_УпаковочныйЛист = Новый ТаблицаЗначений;
		ТЗ_УпаковочныйЛист = СтрокаУпаковочныйЛистНоменклатура.УпаковочныйЛист.Товары.Выгрузить();
		ТЗ_УпаковочныйЛист.Свернуть("Номенклатура, Характеристика, КоличествоУпаковок");
		
		РазницаТаблиц = РазницаТаблицЗначений(ТЗ_ЭталонКомплектация, ТЗ_УпаковочныйЛист);
		
		ТЗСНоменклатуройИКоличествомДляКорректировки = Новый ТаблицаЗначений;
		ТЗСНоменклатуройИКоличествомДляКорректировки.Колонки.Добавить("Номенклатура");
		ТЗСНоменклатуройИКоличествомДляКорректировки.Колонки.Добавить("Характеристика");
		ТЗСНоменклатуройИКоличествомДляКорректировки.Колонки.Добавить("ДобавитьКоличество");
		ТЗСНоменклатуройИКоличествомДляКорректировки.Колонки.Добавить("УбратьКоличество");
		
		НайтиСтрокиРазницаТаблиц = РазницаТаблиц.НайтиСтроки(Новый Структура("Знак", 0));
		
		Для Каждого СтрокаРазницаВНоменклатуре Из НайтиСтрокиРазницаТаблиц Цикл
			
			НайтиСтрокиЭталон = ТЗ_ЭталонКомплектация.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", СтрокаРазницаВНоменклатуре.Номенклатура, СтрокаРазницаВНоменклатуре.Характеристика));
			
			Если Не НайтиСтрокиЭталон = Неопределено И НайтиСтрокиЭталон.Количество() = 1  Тогда
				
				Если НайтиСтрокиЭталон[0].КоличествоУпаковок = СтрокаРазницаВНоменклатуре.КоличествоУпаковок Тогда
					УбратьКоличество = НайтиСтрокиЭталон[0].КоличествоУпаковок;
					
					Стр = ТЗСНоменклатуройИКоличествомДляКорректировки.Добавить();
					Стр.Номенклатура = СтрокаРазницаВНоменклатуре.Номенклатура;
					Стр.Характеристика = СтрокаРазницаВНоменклатуре.Характеристика;
					Стр.ДобавитьКоличество = 0;
					Стр.УбратьКоличество = УбратьКоличество;
					
				ИначеЕсли НайтиСтрокиЭталон[0].КоличествоУпаковок < СтрокаРазницаВНоменклатуре.КоличествоУпаковок Тогда
					
					ДобавитьКоличество = СтрокаРазницаВНоменклатуре.КоличествоУпаковок - НайтиСтрокиЭталон[0].КоличествоУпаковок;
					
					Стр = ТЗСНоменклатуройИКоличествомДляКорректировки.Добавить();
					Стр.Номенклатура = СтрокаРазницаВНоменклатуре.Номенклатура;
					Стр.Характеристика = СтрокаРазницаВНоменклатуре.Характеристика;
					Стр.ДобавитьКоличество = ДобавитьКоличество;
					Стр.УбратьКоличество = 0;
					
				ИначеЕсли НайтиСтрокиЭталон[0].КоличествоУпаковок > СтрокаРазницаВНоменклатуре.КоличествоУпаковок Тогда	
					
					УбратьКоличество = НайтиСтрокиЭталон[0].КоличествоУпаковок - СтрокаРазницаВНоменклатуре.КоличествоУпаковок;
					
					Стр = ТЗСНоменклатуройИКоличествомДляКорректировки.Добавить();
					Стр.Номенклатура = СтрокаРазницаВНоменклатуре.Номенклатура;
					Стр.Характеристика = СтрокаРазницаВНоменклатуре.Характеристика;
					Стр.ДобавитьКоличество = 0;
					Стр.УбратьКоличество = УбратьКоличество;
					
				КонецЕсли;
				
			Иначе
				
				// Добавление номенклатуры в заказ
				Стр = ТЗСНоменклатуройИКоличествомДляКорректировки.Добавить();
				Стр.Номенклатура = СтрокаРазницаВНоменклатуре.Номенклатура;
				Стр.Характеристика = СтрокаРазницаВНоменклатуре.Характеристика;
				Стр.ДобавитьКоличество = СтрокаРазницаВНоменклатуре.КоличествоУпаковок;
				Стр.УбратьКоличество = 0;
				
			КонецЕсли;	
			
		КонецЦикла;
		
		Для Каждого СтрокаРазница Из ТЗСНоменклатуройИКоличествомДляКорректировки Цикл
			
			НайтиСтроки_ВариантОбеспечения = ТЗ_Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ПроцентРучнойСкидки, ВариантОбеспечения, Отменено",
			СтрокаРазница.Номенклатура, СтрокаРазница.Характеристика, СкидкаВКоробах, Перечисления.ВариантыОбеспечения.КОбеспечению, Ложь));
			
			Если Не НайтиСтроки_ВариантОбеспечения = Неопределено И НайтиСтроки_ВариантОбеспечения.Количество() > 0 Тогда
				
				СтрокаТовары = НайтиСтроки_ВариантОбеспечения[0];
				
				Если СтрокаРазница.ДобавитьКоличество > 0 Тогда
					
					ДополнительныеПараметры = ПолучитьДополнительныеПараметры(СтрокаТовары, Ложь);
					
					ПараметрыРазбиенияСтроки = ПараметрыРазбиенияСтроки();
					Количество = СтрокаРазница.ДобавитьКоличество;
					
					ПараметрыОбработки = ПолучитьПараметрыОбработки(ТЗ, ЭтаФорма, "", ПараметрыРазбиенияСтроки, ДополнительныеПараметры, Количество);
					
					ДобавитьСтрокуРазбиениемДобавитьКоличество(ПараметрыОбработки, ТЗ, СтрокаТовары, ТЗ_Товары, ОтказЗаписьУпаковочногоЛиста,
					СписокКодовСтрокиПоУпаковочнымЛистам, СтрокаУпаковочныйЛистНоменклатура.УпаковочныйЛист, СтруктураПереданныхДанных, СкидкаВКоробах);
					
				ИначеЕсли СтрокаРазница.УбратьКоличество > 0 Тогда
					
					ДополнительныеПараметры = ПолучитьДополнительныеПараметры(СтрокаТовары, Ложь);
					
					ПараметрыРазбиенияСтроки = ПараметрыРазбиенияСтроки();
					Количество = СтрокаРазница.УбратьКоличество;
					
					ПараметрыОбработки = ПолучитьПараметрыОбработки(ТЗ, ЭтаФорма, "", ПараметрыРазбиенияСтроки, ДополнительныеПараметры, Количество);
					
					ДобавитьСтрокуРазбиениемУбратьКоличество(ПараметрыОбработки, ТЗ, СтрокаТовары, ТЗ_Товары, ОтказЗаписьУпаковочногоЛиста,
					СписокКодовСтрокиПоУпаковочнымЛистам, СтрокаУпаковочныйЛистНоменклатура.УпаковочныйЛист, СтруктураПереданныхДанных, СкидкаВКоробах);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;			
		
		Для Каждого СтрокаКомплектацияРазбиение Из ТабКомплектация Цикл
			
			НайтиСтроки_ВариантОбеспечения = ТЗ_Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ПроцентРучнойСкидки, ВариантОбеспечения, Отменено",
			СтрокаКомплектацияРазбиение.Номенклатура, СтрокаКомплектацияРазбиение.Характеристика,СкидкаВКоробах, Перечисления.ВариантыОбеспечения.КОбеспечению, Ложь));
			
			Если НайтиСтроки_ВариантОбеспечения.Количество() > 1 Тогда
				
				ИспользоватьДляОтгрузкиНоменклатуруИзРазныхСтрок = Истина;
				
				СтрокаТовары = НайтиСтроки_ВариантОбеспечения;
			Иначе
				СтрокаТовары = НайтиСтроки_ВариантОбеспечения[0];
			КонецЕсли;
			
			ДополнительныеПараметры = ПолучитьДополнительныеПараметры(СтрокаТовары, Ложь);
			
			ПараметрыРазбиенияСтроки = ПараметрыРазбиенияСтроки();
			
			Количество = СтрокаКомплектацияРазбиение.Количество;
			
			ПараметрыОбработки = ПолучитьПараметрыОбработки(ТЗ, ЭтаФорма, "", ПараметрыРазбиенияСтроки, ДополнительныеПараметры, Количество);
			
			ДобавитьСтрокуРазбиениемНеПолный(ПараметрыОбработки, ТЗ, СтрокаТовары, ТЗ_Товары, ОтказЗаписьУпаковочногоЛиста,
			СписокКодовСтрокиПоУпаковочнымЛистам, СтрокаУпаковочныйЛистНоменклатура.УпаковочныйЛист, СтруктураПереданныхДанных);
			
			Если ОтказЗаписьУпаковочногоЛиста Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не достаточно остатков в ""%1"" по ""%2""'"), ОбъектЗаказ, СтрокаУпаковочныйЛистНоменклатура.УпаковочныйЛист);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Прервать;	
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаТовары Из ТЗ_Товары Цикл
			
			Если СтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда
				Продолжить;
			Иначе
				
				ДополнительныеПараметры = ПолучитьДополнительныеПараметры(СтрокаТовары, Ложь);
				
				ПараметрыРазбиенияСтроки = ПараметрыРазбиенияСтроки();
				
				Для Каждого СтрокаКомплектацияРазбиение Из ТабКомплектация Цикл
					
					Если СтрокаКомплектацияРазбиение.Номенклатура = СтрокаТовары.Номенклатура
						И СтрокаКомплектацияРазбиение.Характеристика = СтрокаТовары.Характеристика
						И СкидкаВКоробах = СтрокаТовары.ПроцентРучнойСкидки
						// Есть заказы в которых подобная номенклатура имеет и не имеет отметку отмены, добавлено условие этого
						И Не СтрокаТовары.Отменено Тогда
						
						Количество = СтрокаКомплектацияРазбиение.Количество;
						
						ПараметрыОбработки = ПолучитьПараметрыОбработки(ТЗ, ЭтаФорма, "", ПараметрыРазбиенияСтроки, ДополнительныеПараметры, Количество);
						
						ДобавитьСтрокуРазбиением(ПараметрыОбработки, ТЗ, СтрокаТовары, ТЗ_Товары, ОтказЗаписьУпаковочногоЛиста,
						СписокКодовСтрокиПоУпаковочнымЛистам, СтрокаУпаковочныйЛистНоменклатура.УпаковочныйЛист, СтруктураПереданныхДанных, Неопределено);
						
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если ОтказЗаписьУпаковочногоЛиста Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не достаточно остатков в ""%1"" по ""%2""'"), ОбъектЗаказ, СтрокаУпаковочныйЛистНоменклатура.УпаковочныйЛист);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Прервать;	
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПеремещениеТоваров()
//Процедура СоздатьПеремещениеТоваров(СтруктураПереданныхДанных)	
	//Отказ = Ложь;
	//
	//СоздатьПеремещениеТоваров(Отказ);
	//
	//Если Не Отказ Тогда
	//	Заполнить(Ложь);
	//	
	//	РазвернутьДеревоДокументов();
	//КонецЕсли;
	
	ЗаказСПермемещением = Истина;
	
	Если ЗаказСПермемещением Тогда
		// Волков исправить
		ОтгрузитьПродолжить();
	Иначе	
		Если ЗначениеЗаполнено(Объект.Склад) И Объект.ТоварыВКоробках Тогда
			//СоздатьПеремещениеОбработкаДанныхТоварыВКоробках(СтруктураПереданныхДанных.Склад);
			СоздатьПеремещениеОбработкаДанныхТоварыВКоробках();
		Иначе
			//СоздатьПеремещениеОбработкаДанныхТовары(СтруктураПереданныхДанных.Склад);
			СоздатьПеремещениеОбработкаДанныхТовары();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПеремещениеТоваров(Команда)
	
	СтруктураПараметров = Неопределено;
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораДействия", ЭтотОбъект, СтруктураПараметров);
	
	Отбор = Новый Структура();
	ПараметрыОткрытия = Новый Структура("Ключ", Отбор);
	
	Если ИмяФормы = "ВнешняяОбработка.гф_ОтгрузкаПоЗаказам3.Форма.Форма" Тогда
		ОткрытьФорму("ВнешняяОбработка.гф_ОтгрузкаПоЗаказам3.Форма.ФормаВыбораСкладаПеремещения", ПараметрыОткрытия,
		ЭтотОбъект, , , , Оповещение);
	Иначе
		ОткрытьФорму("Обработка.гф_ОтгрузкаПоЗаказам.Форма.ФормаВыбораСкладаПеремещения", ПараметрыОткрытия,
		ЭтотОбъект, , , , Оповещение);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура СоздатьПеремещениеОбработкаДанныхТовары()
//Процедура СоздатьПеремещениеОбработкаДанныхТовары(Склад)
	
	ТЗ_Заказы = ПолучитьОтмеченныеДанныеДереваЗначений();
	
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПеремещениеОбработкаДанныхТоварыВКоробках()
//Процедура СоздатьПеремещениеОбработкаДанныхТоварыВКоробках(Склад)
	
	ТЗ_Заказы = ПолучитьОтмеченныеДанныеДереваЗначений();
	
	Для Каждого СтрокаЗаказы Из ТЗ_Заказы Цикл
		
		НачатьТранзакцию();
		
		Попытка
		
		НовыйДокумент = Документы.ПеремещениеТоваров.СоздатьДокумент();
		
		НовыйДокумент.Дата = ТекущаяДата();
		НовыйДокумент.Организация = СтрокаЗаказы.Организация;
		//НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв;
		//НовыйДокумент.Назначение = СтрокаЗаказы.Назначение;
		НовыйДокумент.СкладОтправитель = СтрокаЗаказы.Склад;
		//НовыйДокумент.СкладПолучатель = Склад;
		НовыйДокумент.СкладПолучатель = СтрокаЗаказы.гф_СкладПолучатель;
		НовыйДокумент.Статус = Перечисления.СтатусыПеремещенийТоваров.Отгружено;
		НовыйДокумент.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным;
		
		Для Каждого СтрокаУпаковочныйЛист Из СтрокаЗаказы.СписокУпаковочныйЛистИлиНоменклатура Цикл
			ОбъектУпаковочныйЛист = СтрокаУпаковочныйЛист.УпаковочныйЛист.ПолучитьОбъект();
			
			КоличествоПар = 0;
			
			Для Каждого Строка Из ОбъектУпаковочныйЛист.Товары Цикл
				Стр = НовыйДокумент.Товары.Добавить();
				Стр.Номенклатура 		= Строка.Номенклатура;
				Стр.Характеристика 		= Строка.Характеристика;
				Стр.Количество 			= Строка.Количество;
				Стр.КоличествоУпаковок 	= Строка.КоличествоУпаковок;
				//Стр.гф_IDкороба 		= ОбъектУпаковочныйЛист.Ссылка;
				//Стр.Склад 				= СтрокаЗаказы.Склад;
				Стр.НазначениеОтправителя 	= СтрокаЗаказы.Назначение;
				//СтрокаЗаказы.Назначение = Неопределено;
				КоличествоПар = КоличествоПар + 1;
			КонецЦикла;
			
			Стр = НовыйДокумент.гф_ТоварыВКоробах.Добавить();
			Стр.УпаковочныйЛист 	= ОбъектУпаковочныйЛист.Ссылка;
			//Стр.Характеристика 		= Строка.Характеристика;
			Стр.КоличествоПар 			= КоличествоПар;
			
		КонецЦикла;
		
			//НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
			КорректировкаНазначенияПроведен = Истина;
			
		Исключение
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьАктивнуюТранзакцию();
			КонецЕсли;
			
			КорректировкаНазначенияПроведен = Ложь;
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'По заказу ""%1"" не удалось провести документ ""Перемещение товаров""'"),
				СтрокаЗаказы.Заказ);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Продолжить;
			
		КонецПопытки;	
		
		Если КорректировкаНазначенияПроведен Тогда
			
			// Для Каждого СтрокаУпаковочныйЛист Из СтрокаЗаказы.УпаковочныеЛисты Цикл
			//	 
			//	 ОбъектУпаковочныйЛист = СтрокаУпаковочныйЛист.УпаковочныйЛист.ПолучитьОбъект();
			//	 
			//	 Попытка
			//		 ОбъектУпаковочныйЛист.Заблокировать();
			//	 Исключение
			//		 
			//		 Если ТранзакцияАктивна() Тогда
			//			 ОтменитьАктивнуюТранзакцию();
			//		 КонецЕсли;
			//		 
			//		 ТекстСообщения = СтрШаблон(НСтр("ru = '%1 находится в процессе редактирования и не может быть изменен.
			//		 	|Документ ""Корректировка назначения товаров"" не сформирован'"), ОбъектУпаковочныйЛист);
			//		 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			//		 ВызватьИсключение;
			//		 
			//	 КонецПопытки;
			//	 
			//	 // Очищаем ссылку на заказ клиента
			//	 ОбъектУпаковочныйЛист.гф_Заказ = Неопределено;
			//	 
			//	 // Очищаем колонку с назначением по каждой строке
			//	 Для Каждого Строка Из ОбъектУпаковочныйЛист.Товары Цикл
			//		 Строка.Назначение = Неопределено;
			//	 КонецЦикла;
			//	 
			//	 Попытка
			//		 ОбъектУпаковочныйЛист.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);	 
			//	 Исключение
			//		 
			//		 Если ТранзакцияАктивна() Тогда
			//			 ОтменитьАктивнуюТранзакцию();
			//		 КонецЕсли;
			//		 
			//		 ТекстСообщения = СтрШаблон(НСтр("ru = 'Упаковочный лист ""%1"" не удалось перепровести. '"),
			//		 	ОбъектУпаковочныйЛист);
			//		 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			//		 
			//		 ЗаписьЖурналаРегистрации(НСтр("ru = 'Проведение документа ""Упаковочный лист""'"), УровеньЖурналаРегистрации.Ошибка,,,
			//		 	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			//		 Продолжить;
			//	 КонецПопытки;
			//	 
			//КонецЦикла;	 
			 
		КонецЕсли;
		
		Попытка
			Если ТранзакцияАктивна() Тогда
				ЗафиксироватьАктивнуюТранзакцию();
			КонецЕсли;
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Сфомирован документ ""%1"". Внесены изменения в ""%2""'"), НовыйДокумент, ОбъектУпаковочныйЛист);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Исключение
			Если ТранзакцияАктивна() Тогда
				ОтменитьАктивнуюТранзакцию();
			КонецЕсли;
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка фиксации транзакции снятия резерва по заказу ""%1"", поробуйте выполнить
			| операцию позднее. Возможно отсутствует доступ на формирование и изменение документов участвующих в снятии резерва'"), СтрокаЗаказы.Заказ);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Продолжить;
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСтрокиДереваПомеченных(Команда)
	СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(ЭтотОбъект, "ДеревоДокументов");
КонецПроцедуры

&НаКлиенте
Процедура СвернутьСтрокиДереваВыбораПомеченных(Команда)
	ВсеСтроки = Элементы.ДеревоДокументов;
	Для Каждого ДанныеСтроки Из ДеревоДокументов.ПолучитьЭлементы() Цикл
		ВсеСтроки.Свернуть(ДанныеСтроки.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

// ++ СадомцевСА 27.10.2022
// Обработчик завершения ввода данных для РТУ
// 
// Параметры:
// Результат - Массив
// ДополнительныеПараметры - Структура

&НаКлиенте
Процедура ДанныеДляРТУЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Объект.СкидкиПоЗаказам.Очистить();
	Для Каждого ЭлементМассива Из Результат Цикл
		нс = Объект.СкидкиПоЗаказам.Добавить();
		ЗаполнитьЗначенияСвойств(нс, ЭлементМассива);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСкидки(Команда)
	ДополнительныеПараметры = Новый Структура();
	Оповещение = Новый ОписаниеОповещения("ДанныеДляРТУЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыФормы = ПолучитьПараметрыФормы();
	Если ИмяФормы = "ВнешняяОбработка.гф_ОтгрузкаПоЗаказам3.Форма.Форма" Тогда
		ОткрытьФорму("ВнешняяОбработка.гф_ОтгрузкаПоЗаказам3.Форма.ФормаДанныеДляРТУ", ПараметрыФормы,
		ЭтотОбъект, , , , Оповещение);
	Иначе
		ОткрытьФорму("Обработка.гф_ОтгрузкаПоЗаказам.Форма.ФормаДанныеДляРТУ", ПараметрыФормы,
		ЭтотОбъект, , , , Оповещение);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыФормы()
	ПараметрыФормы = Новый Структура();
	
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоДокументов");
	ТаблицаЗначений = ВыгрузитьДеревоЗначенийВТаблицуЗначений(ДеревоЗначений);
	// Массив Заказы
	МассивЗаказы = Новый Массив;
	СезонныйЗаказ = Неопределено;
	Для Каждого СтрокаТЗ Из ТаблицаЗначений Цикл
		Если Не СтрокаТЗ.Отгрузить Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьСезонныйЗаказ(СтрокаТЗ.Заказ, СезонныйЗаказ);
		флДобавитьЗаказ = ДобавитьЗаказ(СтрокаТЗ.Заказ, СезонныйЗаказ);
		Если флДобавитьЗаказ Тогда
			Если МассивЗаказы.Найти(СтрокаТЗ.Заказ) = Неопределено Тогда
				МассивЗаказы.Добавить(СтрокаТЗ.Заказ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ПараметрыФормы.Вставить("МассивЗаказы", МассивЗаказы);
	
	// ТЗ Скидки по Заказам
	СкидкиПоЗаказам = Новый Массив;
	Для Каждого СтрокаТЧ Из Объект.СкидкиПоЗаказам Цикл
		Если МассивЗаказы.Найти(СтрокаТЧ.Заказ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СкидкаПоЗаказу = Новый Структура("Заказ, СкидкаДляРТУ");
		ЗаполнитьЗначенияСвойств(СкидкаПоЗаказу, СтрокаТЧ);
		СкидкиПоЗаказам.Добавить(СкидкаПоЗаказу);
	КонецЦикла;
	ПараметрыФормы.Вставить("СкидкиПоЗаказам", СкидкиПоЗаказам);
	
	Возврат ПараметрыФормы;
КонецФункции

&НаСервереБезКонтекста
Функция ВыгрузитьДеревоЗначенийВТаблицуЗначений(Дерево, Таблица = Неопределено)

    Если Таблица = Неопределено Тогда
        Таблица = Новый ТаблицаЗначений;
        Для Каждого Колонка Из Дерево.Колонки Цикл
            Таблица.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
        КонецЦикла;
    КонецЕсли;
    Для Каждого СтрокаДерева Из Дерево.Строки Цикл
        ЗаполнитьЗначенияСвойств(Таблица.Добавить(), СтрокаДерева);
        ВыгрузитьДеревоЗначенийВТаблицуЗначений(СтрокаДерева, Таблица);
    КонецЦикла;
    Возврат Таблица;

КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьСезонныйЗаказ(Заказ, СезонныйЗаказ)
	Если ЗначениеЗаполнено(Заказ) Тогда
		Если СезонныйЗаказ = Неопределено Тогда
			СезонныйЗаказ = Заказ.гф_СезонныйЗаказ;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДобавитьЗаказ(Заказ, СезонныйЗаказ)
	Если Не ЗначениеЗаполнено(Заказ) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если СезонныйЗаказ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Если СезонныйЗаказ <> Заказ.гф_СезонныйЗаказ Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции



// -- СадомцевСА 27.10.2022

#КонецОбласти

