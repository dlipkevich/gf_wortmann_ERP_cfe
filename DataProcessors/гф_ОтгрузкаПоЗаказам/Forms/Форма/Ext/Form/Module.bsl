Перем Отметки;

&НаСервере
Процедура ПриОткрытииНаСервере()
	
	ЗаполнениеДанными();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПриОткрытииНаСервере();
	
	РазвернутьДеревоДокументов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеДанными()
	
	Отметки = новый ТаблицаЗначений;
	Отметки.Колонки.Добавить("Клиент");
	Отметки.Колонки.Добавить("АдресДоставки");
	Отметки.Колонки.Добавить("Склад");
	Отметки.Колонки.Добавить("ДокументПоступления");
	Отметки.Колонки.Добавить("Заказ");
	Отметки.Колонки.Добавить("УпаковочныйЛист");
	
	ОтчетОбъект = РеквизитФормыВЗначение("Объект");
	
	СхемаКомпоновки = ОтчетОбъект.ПолучитьМакет("СхемаКомпоновки");
	Объект.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
	Объект.КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
	
	НачПериода = НачалоМесяца(ТекущаяДата());
	КонПериода = КонецМесяца(ТекущаяДата());
	
	ДатаОстатков = ТекущаяДата();
	
	ДатаПолученияЦен 				= ТекущаяДата();
	ПредоплатныйКлиент 				= Ложь;
	ПоказалиФормуОПроцентеСкидки 	= Ложь;
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ЗаполнитьПоОстаткам(СхемаКомпоновки, ОтчетОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоДокументов()
	
	КоллекцияЭлементовДерева = ДеревоДокументов.ПолучитьЭлементы();
	ПП = 0;
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл
		ПП = ПП + 1;
		
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		Элементы.ДеревоДокументов.Развернуть(ИдентификаторСтроки, Истина);
		Если ПП > 1 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	
	//СформироватьНаСервере();
	ЗаполнениеДанными();
	//ЭтаФорма.Элементы.ДеревоДокументов.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	
	РазвернутьДеревоДокументов()

КонецПроцедуры

&НаСервере
Процедура УстановитьРежимОтображенияДерева()
	Если РежимРаскрытияУровнейОтоброжения = 1 Тогда
		ЭтаФорма.Элементы.ДеревоДокументов.НачальноеОтображениеДерева = НачальноеОтображениеДерева.НеРаскрывать;
	ИначеЕсли РежимРаскрытияУровнейОтоброжения = 2 Тогда
		ЭтаФорма.Элементы.ДеревоДокументов.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;
	ИначеЕсли РежимРаскрытияУровнейОтоброжения = 3 Тогда
		ЭтаФорма.Элементы.ДеревоДокументов.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткам(СхемаКомпоновки, ОтчетОбъект)
	
	ДД = ДеревоДокументов.ПолучитьЭлементы();
	
	ДД.Очистить();
	
	ПараметрыДанных = Объект.КомпоновщикНастроек.Настройки.ПараметрыДанных;
	ПараметрыДанных.УстановитьЗначениеПараметра("ТипУпаковки", Перечисления.ТипыУпаковок.МультитоварнаяУпаковка);
	ПараметрыДанных.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДата());
	ПараметрыДанных.УстановитьЗначениеПараметра("Склад", ОтчетОбъект.Склад);
	ПараметрыДанных.УстановитьЗначениеПараметра("Клиент", ОтчетОбъект.Клиент);
	ПараметрыДанных.УстановитьЗначениеПараметра("Период", ТекущаяДата());
	
	Если Не ЗначениеЗаполнено(ОтчетОбъект.Склад) Тогда
		СхемаКомпоновки.НаборыДанных.НаборДанных1.Запрос = СтрЗаменить(СхемаКомпоновки.НаборыДанных.НаборДанных1.Запрос, "ДвижениеКМ.Склад = &Склад", "ДвижениеКМ.Склад.*"); 
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ОтчетОбъект.Клиент) Тогда
		СхемаКомпоновки.НаборыДанных.НаборДанных1.Запрос = СтрЗаменить(СхемаКомпоновки.НаборыДанных.НаборДанных1.Запрос, "ЗаказКлиента.Партнер = &Клиент", "ЗаказКлиента.Партнер.*"); 
	КонецЕсли;
	
	Компоновщик = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = Компоновщик.Выполнить(СхемаКомпоновки, Объект.КомпоновщикНастроек.ПолучитьНастройки(),,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	Дерево = Новый ДеревоЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.ОтображатьПроцентВывода = Истина;
	ПроцессорВывода.УстановитьОбъект(Дерево);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Объект.Наличие.Очистить();
	Объект.ДоступностьУпаковочныхЛистов.Очистить();
	
	Для каждого Строка Из Дерево.Строки Цикл
		Для каждого Строка_Н Из Строка.Строки Цикл
			//Для каждого Строка2 Из Строка1.Строки Цикл
			//	Для каждого Строка3 Из Строка2.Строки Цикл
			//		Для каждого Строка4 Из Строка3.Строки Цикл
						Для каждого Строка_Т Из Строка_Н.Строки Цикл
							
							ЗаполнитьРезервыНаСервере(Строка_Т.Заказ, Строка_Т.УпаковочныйЛистСсылка);	
														
						КонецЦикла;
			//		КонецЦикла;
			//	КонецЦикла;
			//КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого Строка Из Дерево.Строки Цикл
		Для каждого Строка_Н Из Строка.Строки Цикл
			//Для каждого Строка2 Из Строка1.Строки Цикл
			//	Для каждого Строка3 Из Строка2.Строки Цикл
			//		Для каждого Строка4 Из Строка3.Строки Цикл
						
						ТЗ = Новый ТаблицаЗначений;
						ТЗ.Колонки.Добавить("УпаковочныйЛистСсылка");
						
						Для каждого Строка_Т Из Строка_Н.Строки Цикл
							
							НоваяСтрока = ТЗ.Добавить();
							НоваяСтрока.УпаковочныйЛистСсылка = Строка_Т.УпаковочныйЛистСсылка;							
							
						КонецЦикла;
						
						Для каждого СтрокаТЗ Из ТЗ Цикл
							
							Нашли = Строка_Н.Строки.НайтиСтроки(Новый Структура("УпаковочныйЛистСсылка", СтрокаТЗ.УпаковочныйЛистСсылка));
							
							Для каждого СтрокаДоступность Из Объект.ДоступностьУпаковочныхЛистов Цикл
								
								Если СтрокаДоступность.УпаковочныйЛист = Нашли[0].УпаковочныйЛистСсылка И Не СтрокаДоступность.Проверка Тогда
									Строка_Н.Строки.Удалить(Нашли[0]);
									
									Прервать
								КонецЕсли;
								
							КонецЦикла;
							
						КонецЦикла;	
						
			//		КонецЦикла;
			//	КонецЦикла;
			//КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ЗаполнитьСвойстваСтроки(ДеревоДокументов, Дерево.Строки);
	
	РассчитатьНовыеЦены();
	
КонецПроцедуры

Процедура РассчитатьНовыеЦены()
	
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоДокументов");
	
	Объект.СтоимостьОтмеченныхКОтгрузкеТоваров = 0;
	
	Для каждого Строка Из ДеревоЗначений.Строки Цикл
		Для каждого Строка_Н Из Строка.Строки Цикл
			//Для каждого Строка2 Из Строка1.Строки Цикл
			//	Для каждого Строка3 Из Строка2.Строки Цикл
			//		Для каждого Строка4 Из Строка3.Строки Цикл
						Для каждого Строка_Т Из Строка_Н.Строки Цикл
							
							Если Строка_Т.Отгрузить Тогда
								Объект.СтоимостьОтмеченныхКОтгрузкеТоваров = Объект.СтоимостьОтмеченныхКОтгрузкеТоваров + Строка_Т.Стоимость;
							КонецЕсли;
							
						КонецЦикла;	
			//		КонецЦикла;
			//	КонецЦикла;
			//КонецЦикла;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьСвойстваСтроки(Куда, Выборка)
	
	Для каждого Строка Из Выборка Цикл
		Новая = Куда.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(Новая, Строка);
		ЗаполнитьСвойстваСтроки(Новая, Строка.Строки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДеревоДокументовПриИзмененииФлажка(Элемент, Колонка)
	
	
КонецПроцедуры



&НаКлиенте
Процедура УстановитьФлажкиНиже(Элемент, Отгрузить)
	
	Если Не Элемент = Неопределено Тогда
		Если Не Элемент.ПолучитьРодителя() = Неопределено Тогда
			Если Отгрузить и Не Элемент.БлокировкиОтгрузок Тогда
				ЭлементРодитель = Элемент.ПолучитьРодителя();
				ЭлементРодитель.Отгрузить = Отгрузить;
				УстановитьФлажкиНиже(ЭлементРодитель, Отгрузить);
			Иначе
				Флаг = Ложь;
				ЭлементРодитель = Элемент.ПолучитьРодителя();
				Родитель = ЭлементРодитель.ПолучитьЭлементы();
				Для каждого Строка Из Родитель Цикл
					Флаг = Флаг или Строка.Отгрузить;
					Если Флаг Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				ЭлементРодитель.Отгрузить = Флаг;
				УстановитьФлажкиНиже(Элемент.ПолучитьРодителя(), Отгрузить);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораДействия(СтруктураПереденныхДанных, Строка, МножественныйВыбор = Неопределено) Экспорт
	
	Если Не СтруктураПереденныхДанных = Неопределено Тогда
		Действие = СтруктураПереденныхДанных.Действие;
		
		Если Не Действие = "Отменить" Тогда
			Объект.ДатаПолученияЦен = СтруктураПереденныхДанных.ДатаЦен;
			Объект.ПроцентСкидки = СтруктураПереденныхДанных.ПроцентСкидки;
		КонецЕсли;
		
		Строка.Отгрузить = Истина;
		
		Если Действие = "ОтгрузитьПоЦенамПрайса" Тогда
			ДеревоДокументовУстановитьФлажки(Строка, "ЦенаПрайса");
		ИначеЕсли Действие = "ОтгрузитьПоЦенамЗаказа" Тогда
			ДеревоДокументовУстановитьФлажки(Строка, "ЦенаЗаказа");
		ИначеЕсли Действие = "ИсключитьИзОтгрузкиРазличные" Тогда
			ДеревоДокументовУстановитьФлажки(Строка, "ЦенаИсключитьРазличные");
		Иначе
			Строка.Отгрузить = Ложь;
		КонецЕсли;
	Иначе
		Строка.Отгрузить = Ложь;
		// МножественныйВыбор при установке флага "Отгрузить" одновременно для всех элементов
		Если Не МножественныйВыбор = Неопределено И МножественныйВыбор Тогда
			УстановитьСнятьФлажки(Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДокументовПриИзменении(Элемент)
	
	Строка = Элемент.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидЦены) Тогда
		Сообщить("Не указан вид цены!");
		Строка.Отгрузить = Ложь;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		Сообщить("Не указан Склад!");
		Строка.Отгрузить = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Строка.Отгрузить И Не Строка.БлокировкиОтгрузок Тогда
		ПроверкаЦены = ПроверкаРазличающихсяЦен(Строка);
		
		Если Не ПроверкаЦены И Не Строка.ИспользоватьЦенуПрайса Тогда
			
			СтруктураДляПолученияСкидки = Новый Структура("ДоговорКонтрагента");
			
			Оповещение = Новый ОписаниеОповещения("ПослеВыбораДействия", ЭтотОбъект, Строка);
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.Добавить("Отгрузить по ценам прайс-листа");
			СписокЗначений.Добавить("Отгрузить по ценам заказа");
			СписокЗначений.Добавить("Исключить из отгрузки товары с различающимися ценами");
			СписокЗначений.Добавить("Отменить все");
			
			Отбор = Новый Структура();
			Отбор.Вставить("Дата", Объект.ДатаПолученияЦен);
			Отбор.Вставить("Скидка", Объект.ПроцентСкидки);
			ПараметрыФормы = Новый Структура("Ключ", Отбор);
			  
			ОткрытьФорму("Обработка.гф_ОтгрузкаПоЗаказам.Форма.ФормаВопросаОДатеЦенИСкидкеКлиента",ПараметрыФормы,,,,,Оповещение,);
			
		Иначе
			
			Строка.Отгрузить = Истина;
			
			ДеревоДокументовУстановитьФлажки(Строка, Неопределено);
			
			УстановитьФлажкиНиже(Строка, Строка.Отгрузить);
			
		КонецЕсли;
		
	ИначеЕсли Не Строка.Отгрузить Тогда
		КоллекцияЭлементовДерева1 = Строка.ПолучитьЭлементы();
		
		Строка.ИспользоватьЦенуПрайса = Ложь;
		Для каждого Строка1 Из КоллекцияЭлементовДерева1 Цикл
			
			Строка1.Отгрузить = Ложь;
			
			КоллекцияЭлементовДерева2 = Строка1.ПолучитьЭлементы();
			Для каждого Строка2 Из КоллекцияЭлементовДерева2 Цикл
				
				Строка2.Отгрузить = Ложь;
				
				КоллекцияЭлементовДерева3 = Строка2.ПолучитьЭлементы();
				Для каждого Строка3 Из КоллекцияЭлементовДерева3 Цикл
					
					Строка3.Отгрузить = Ложь;
					
					//КоллекцияЭлементовДерева4 = Строка3.ПолучитьЭлементы();
					//Для каждого Строка4 Из КоллекцияЭлементовДерева4 Цикл
					//	
					//	Строка4.Отгрузить = Ложь;
					//	
					//	КоллекцияЭлементовДерева5 = Строка4.ПолучитьЭлементы();
					//	Для каждого Строка5 Из КоллекцияЭлементовДерева5 Цикл
					//		
					//		Строка5.Отгрузить = Ложь;
					//		
					//	КонецЦикла;
					//	
					//КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;	
		
	УстановитьФлажкиНиже(Строка, Строка.Отгрузить);	
		
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.ИспользоватьЦенуПрайса И ЗначениеЗаполнено(Элемент.ТекущиеДанные.ЦенаПрайс) Тогда
		 Элемент.ТекущиеДанные.Стоимость = Элемент.ТекущиеДанные.КоличествоНоменклатуры * Элемент.ТекущиеДанные.ЦенаПрайс
	КонецЕсли;
		
	Если Элемент.ТекущиеДанные.Скидка > 0 Тогда
		Элемент.ТекущиеДанные.Стоимость = Элемент.ТекущиеДанные.Стоимость - Элемент.ТекущиеДанные.Стоимость * Элемент.ТекущиеДанные.Скидка / 100;
	КонецЕсли;
	
	РассчитатьНовыеЦены();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДокументовУстановитьФлажки(Строка, ДействиеИсточник)
	
	ДействиеЦенаПрайса = "ЦенаПрайса";
	ДействиеЦенаЗаказа = "ЦенаЗаказа";
	ДействиеЦенаИсключить = "ЦенаИсключитьРазличные";
	
	Если Строка.Отгрузить И Не Строка.БлокировкиОтгрузок Тогда
		
		Если ЗначениеЗаполнено(Строка.УпаковочныйЛистСсылка) И ЗначениеЗаполнено(Строка.Цена) Тогда
			РезультатПроверки = ПроверитьЦеныНоменклатуры(Строка.Заказ, ТекущаяДата());
			Если Не РезультатПроверки = Неопределено Тогда
				Если РезультатПроверки.ПроверкаЦены Тогда
					Строка.Отгрузить = Истина;
				ИначеЕсли ДействиеИсточник = ДействиеЦенаПрайса Тогда
					Строка.Отгрузить = Истина;
					Строка.ИспользоватьЦенуПрайса = Истина;
					Строка.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
					Строка.Скидка = Объект.ПроцентСкидки;
				ИначеЕсли ДействиеИсточник = ДействиеЦенаЗаказа Тогда
					Строка.Отгрузить = Истина;
					Строка.ИспользоватьЦенуПрайса = Ложь;
					Строка.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
					Строка.Скидка = Объект.ПроцентСкидки;
				ИначеЕсли ДействиеИсточник = ДействиеЦенаИсключить Тогда
					Строка.Отгрузить = Ложь;
					Строка.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
					Строка.Скидка = Объект.ПроцентСкидки;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Строка.Отгрузить = Истина;
		КонецЕсли;
		
		КоллекцияЭлементовДерева1 = Строка.ПолучитьЭлементы();
		Для каждого Строка1 Из КоллекцияЭлементовДерева1 Цикл
			
			Если Не Строка1.БлокировкиОтгрузок Тогда
				Если ЗначениеЗаполнено(Строка1.УпаковочныйЛистСсылка) И ЗначениеЗаполнено(Строка1.Цена) Тогда
					РезультатПроверки = ПроверитьЦеныНоменклатуры(Строка.Заказ, ТекущаяДата());
					Если Не РезультатПроверки = Неопределено Тогда
						Если РезультатПроверки.ПроверкаЦены Тогда
							Строка1.Отгрузить = Истина;
						ИначеЕсли ДействиеИсточник = ДействиеЦенаПрайса Тогда
							Строка1.Отгрузить = Истина;
							Строка1.ИспользоватьЦенуПрайса = Истина;
							Строка1.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
							Строка1.Скидка = Объект.ПроцентСкидки;
						ИначеЕсли ДействиеИсточник = ДействиеЦенаЗаказа Тогда
							Строка1.Отгрузить = Истина;
							Строка1.ИспользоватьЦенуПрайса = Ложь;
							Строка1.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
							Строка1.Скидка = Объект.ПроцентСкидки;
						ИначеЕсли ДействиеИсточник = ДействиеЦенаИсключить Тогда
							Строка1.Отгрузить = Ложь;
							Строка1.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
							Строка1.Скидка = Объект.ПроцентСкидки;
						КонецЕсли;
					Иначе
						Строка1.Отгрузить = Истина;
					КонецЕсли;
				Иначе
					Строка1.Отгрузить = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			КоллекцияЭлементовДерева2 = Строка1.ПолучитьЭлементы();
			Для каждого Строка2 Из КоллекцияЭлементовДерева2 Цикл
				
				Если Не Строка2.БлокировкиОтгрузок Тогда
					Если ЗначениеЗаполнено(Строка2.УпаковочныйЛистСсылка) И ЗначениеЗаполнено(Строка2.Цена) Тогда
						РезультатПроверки = ПроверитьЦеныНоменклатуры(Строка.Заказ, ТекущаяДата());
						Если Не РезультатПроверки = Неопределено Тогда
							Если РезультатПроверки.ПроверкаЦены Тогда
								Строка2.Отгрузить = Истина;
							ИначеЕсли ДействиеИсточник = ДействиеЦенаПрайса Тогда
								Строка2.Отгрузить = Истина;
								Строка2.ИспользоватьЦенуПрайса = Истина;
								Строка2.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
								Строка2.Скидка = Объект.ПроцентСкидки;
							ИначеЕсли ДействиеИсточник = ДействиеЦенаЗаказа Тогда
								Строка2.Отгрузить = Истина;
								Строка2.ИспользоватьЦенуПрайса = Ложь;
								Строка2.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
								Строка2.Скидка = Объект.ПроцентСкидки;
							ИначеЕсли ДействиеИсточник = ДействиеЦенаИсключить Тогда
								Строка2.Отгрузить = Ложь;
								Строка2.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
								Строка2.Скидка = Объект.ПроцентСкидки;
							КонецЕсли;
						Иначе
							Строка2.Отгрузить = Истина;
						КонецЕсли;
					Иначе
						Строка2.Отгрузить = Истина;	
					КонецЕсли;
				
				КонецЕсли;
				
				КоллекцияЭлементовДерева3 = Строка2.ПолучитьЭлементы();
				Для каждого Строка3 Из КоллекцияЭлементовДерева3 Цикл
					
					Если Не Строка3.БлокировкиОтгрузок Тогда
						Если ЗначениеЗаполнено(Строка3.УпаковочныйЛистСсылка) И ЗначениеЗаполнено(Строка3.Цена) Тогда
							РезультатПроверки = ПроверитьЦеныНоменклатуры(Строка.Заказ, ТекущаяДата());
							Если Не РезультатПроверки = Неопределено Тогда
								Если РезультатПроверки.ПроверкаЦены Тогда
									Строка3.Отгрузить = Истина;
								ИначеЕсли ДействиеИсточник = ДействиеЦенаПрайса Тогда
									Строка3.Отгрузить = Истина;
									Строка3.ИспользоватьЦенуПрайса = Истина;
									Строка3.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
									Строка3.Скидка = Объект.ПроцентСкидки;
								ИначеЕсли ДействиеИсточник = ДействиеЦенаЗаказа Тогда
									Строка3.Отгрузить = Истина;
									Строка3.ИспользоватьЦенуПрайса = Ложь;
									Строка3.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
									Строка3.Скидка = Объект.ПроцентСкидки;
								ИначеЕсли ДействиеИсточник = ДействиеЦенаИсключить Тогда
									Строка3.Отгрузить = Ложь;
									Строка3.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
									Строка3.Скидка = Объект.ПроцентСкидки;
								КонецЕсли;
							Иначе
								Строка3.Отгрузить = Истина;
							КонецЕсли;
						Иначе
							Строка3.Отгрузить = Истина;
						КонецЕсли;
					КонецЕсли;
					
					//КоллекцияЭлементовДерева4 = Строка3.ПолучитьЭлементы();
					//Для каждого Строка4 Из КоллекцияЭлементовДерева4 Цикл
					//	
					//	Если Не Строка4.БлокировкиОтгрузок Тогда
					//		Если ЗначениеЗаполнено(Строка4.УпаковочныйЛистСсылка) И ЗначениеЗаполнено(Строка4.Цена) Тогда
					//			РезультатПроверки = ПроверитьЦеныНоменклатуры(Строка.Заказ, ТекущаяДата());
					//			Если Не РезультатПроверки = Неопределено Тогда
					//				Если РезультатПроверки.ПроверкаЦены Тогда
					//					Строка4.Отгрузить = Истина;
					//				ИначеЕсли ДействиеИсточник = ДействиеЦенаПрайса Тогда
					//					Строка4.Отгрузить = Истина;
					//					Строка4.ИспользоватьЦенуПрайса = Истина;
					//					Строка4.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
					//					Строка4.Скидка = Объект.ПроцентСкидки;
					//				ИначеЕсли ДействиеИсточник = ДействиеЦенаЗаказа Тогда
					//					Строка4.Отгрузить = Истина;
					//					Строка4.ИспользоватьЦенуПрайса = Ложь;
					//					Строка4.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
					//					Строка4.Скидка = Объект.ПроцентСкидки;
					//				ИначеЕсли ДействиеИсточник = ДействиеЦенаИсключить Тогда
					//					Строка4.Отгрузить = Ложь;
					//					Строка4.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
					//					Строка4.Скидка = Объект.ПроцентСкидки;
					//				КонецЕсли;
					//			Иначе
					//				Строка4.Отгрузить = Истина;
					//			КонецЕсли;
					//		Иначе
					//			Строка4.Отгрузить = Истина;	
					//		КонецЕсли;
					//	КонецЕсли;
					//	
					//	КоллекцияЭлементовДерева5 = Строка4.ПолучитьЭлементы();
					//	Для каждого Строка5 Из КоллекцияЭлементовДерева5 Цикл
					//		
					//		Если Не Строка5.БлокировкиОтгрузок Тогда
					//			Если ЗначениеЗаполнено(Строка5.УпаковочныйЛистСсылка) И ЗначениеЗаполнено(Строка5.Цена) Тогда
					//				РезультатПроверки = ПроверитьЦеныНоменклатуры(Строка.Заказ, ТекущаяДата());
					//				Если Не РезультатПроверки = Неопределено Тогда
					//					Если РезультатПроверки.ПроверкаЦены Тогда
					//						Строка5.Отгрузить = Истина;
					//					ИначеЕсли ДействиеИсточник = ДействиеЦенаПрайса Тогда
					//						Строка5.Отгрузить = Истина;
					//						Строка5.ИспользоватьЦенуПрайса = Истина;
					//						Строка5.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
					//						Строка5.Скидка = Объект.ПроцентСкидки;
					//					ИначеЕсли ДействиеИсточник = ДействиеЦенаЗаказа Тогда
					//						Строка5.Отгрузить = Истина;
					//						Строка5.ИспользоватьЦенуПрайса = Ложь;
					//						Строка5.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
					//						Строка5.Скидка = Объект.ПроцентСкидки;
					//					ИначеЕсли ДействиеИсточник = ДействиеЦенаИсключить Тогда
					//						Строка5.Отгрузить = Ложь;
					//						Строка5.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
					//						Строка5.Скидка = Объект.ПроцентСкидки;
					//					КонецЕсли;
					//				Иначе
					//					Строка5.Отгрузить = Истина;
					//				КонецЕсли;
					//			КонецЕсли;
					//		Иначе
					//			Строка5.Отгрузить = Истина;	
					//		КонецЕсли;
					//		
					//	КонецЦикла;
					//	
					//КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;		
		
	КонецЕсли;
		
	УстановитьФлажкиНиже(Строка, Строка.Отгрузить);
	
	Если Строка.ИспользоватьЦенуПрайса И ЗначениеЗаполнено(Строка.ЦенаПрайс) Тогда
		 Строка.Стоимость = Строка.КоличествоНоменклатуры * Строка.ЦенаПрайс;
	КонецЕсли;
		
	Если Строка.Скидка > 0 Тогда
		Строка.Стоимость = Строка.Стоимость - Строка.Стоимость * Строка.Скидка / 100;
	КонецЕсли;
	
	РассчитатьНовыеЦены();
	
КонецПроцедуры

&НаКлиенте
Функция ПроверкаРазличающихсяЦен(Строка)
	ПроверкаЦены = Истина;
	
	Если Строка.Отгрузить И Не Строка.БлокировкиОтгрузок Тогда
		Строка.Отгрузить = Ложь;
		
		//Если Не Строка.БлокировкиОтгрузок Тогда
		Если ЗначениеЗаполнено(Строка.УпаковочныйЛистСсылка) И ЗначениеЗаполнено(Строка.Цена) Тогда
			РезультатПроверки = ПроверитьЦеныНоменклатуры(Строка.Заказ, ТекущаяДата());
			Если Не РезультатПроверки = Неопределено Тогда
				ПроверкаЦены = РезультатПроверки.ПроверкаЦены;
				Строка.ЦенаПрайс = РезультатПроверки.ЦенаПрайс;
			КонецЕсли;
		КонецЕсли;
		//КонецЕсли;
		
		КоллекцияЭлементовДерева1 = Строка.ПолучитьЭлементы();
		Для каждого Строка1 Из КоллекцияЭлементовДерева1 Цикл
			
			Если Не Строка1.БлокировкиОтгрузок Тогда
				Если ЗначениеЗаполнено(Строка1.УпаковочныйЛистСсылка) И ЗначениеЗаполнено(Строка1.Цена) Тогда
					РезультатПроверки = ПроверитьЦеныНоменклатуры(Строка1.Заказ, ТекущаяДата());
					Если Не РезультатПроверки = Неопределено Тогда
						ПроверкаЦены = РезультатПроверки.ПроверкаЦены;
						Строка1.ЦенаПрайс = РезультатПроверки.ЦенаПрайс;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			КоллекцияЭлементовДерева2 = Строка1.ПолучитьЭлементы();
			Для каждого Строка2 Из КоллекцияЭлементовДерева2 Цикл
				
				Если Не Строка2.БлокировкиОтгрузок Тогда
					Если ЗначениеЗаполнено(Строка2.УпаковочныйЛистСсылка) И ЗначениеЗаполнено(Строка2.Цена) Тогда
					РезультатПроверки = ПроверитьЦеныНоменклатуры(Строка2.Заказ, ТекущаяДата());
					Если Не РезультатПроверки = Неопределено Тогда
						ПроверкаЦены = РезультатПроверки.ПроверкаЦены;
						Строка2.ЦенаПрайс = РезультатПроверки.ЦенаПрайс;
					КонецЕсли;
				КонецЕсли;
				КонецЕсли;
				
				КоллекцияЭлементовДерева3 = Строка2.ПолучитьЭлементы();
				Для каждого Строка3 Из КоллекцияЭлементовДерева3 Цикл
					
					Если Не Строка3.БлокировкиОтгрузок Тогда
						Если ЗначениеЗаполнено(Строка3.УпаковочныйЛистСсылка) И ЗначениеЗаполнено(Строка3.Цена) Тогда
							РезультатПроверки = ПроверитьЦеныНоменклатуры(Строка3.Заказ, ТекущаяДата());
							Если Не РезультатПроверки = Неопределено Тогда
								ПроверкаЦены = РезультатПроверки.ПроверкаЦены;
								Строка3.ЦенаПрайс = РезультатПроверки.ЦенаПрайс;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					//КоллекцияЭлементовДерева4 = Строка3.ПолучитьЭлементы();
					//Для каждого Строка4 Из КоллекцияЭлементовДерева4 Цикл
					//	
					//	Если Не Строка4.БлокировкиОтгрузок Тогда
					//		Если ЗначениеЗаполнено(Строка4.УпаковочныйЛистСсылка) И ЗначениеЗаполнено(Строка4.Цена) Тогда
					//			РезультатПроверки = ПроверитьЦеныНоменклатуры(Строка4.Заказ, ТекущаяДата());
					//			Если Не РезультатПроверки = Неопределено Тогда
					//				ПроверкаЦены = РезультатПроверки.ПроверкаЦены;
					//				Строка4.ЦенаПрайс = РезультатПроверки.ЦенаПрайс;
					//			КонецЕсли;
					//		КонецЕсли;
					//	КонецЕсли;
					//	
					//	КоллекцияЭлементовДерева5 = Строка4.ПолучитьЭлементы();
					//	Для каждого Строка5 Из КоллекцияЭлементовДерева5 Цикл
					//		
					//		Если Не Строка5.БлокировкиОтгрузок Тогда
					//			Если ЗначениеЗаполнено(Строка5.УпаковочныйЛистСсылка) И ЗначениеЗаполнено(Строка5.Цена) Тогда
					//				РезультатПроверки = ПроверитьЦеныНоменклатуры(Строка5.Заказ, ТекущаяДата());
					//				Если Не РезультатПроверки = Неопределено Тогда
					//					ПроверкаЦены = РезультатПроверки.ПроверкаЦены;
					//					Строка5.ЦенаПрайс = РезультатПроверки.ЦенаПрайс;
					//				КонецЕсли;
					//			КонецЕсли;
					//			
					//		КонецЕсли;
					//		
					//	КонецЦикла;
					//	
					//КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;		
		
	КонецЕсли;
	
	Возврат ПроверкаЦены;	
	
КонецФункции

&НаСервере
Функция ПроверитьЦеныНоменклатуры(Заказ, Период)
	
	ОтчетОбъект = РеквизитФормыВЗначение("Объект");
	
	Если ЗначениеЗаполнено(ОтчетОбъект.ВидЦены) Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
		|	ЗаказКлиентаТовары.Цена КАК ЗаказЦена,
		|	ЗаказКлиентаТовары.ВидЦены КАК ВидЦены,
		|	ЦеныНоменклатуры25СрезПоследних.Цена КАК ЦенаПрайс
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(&Период, ) КАК ЦеныНоменклатуры25СрезПоследних
		|		ПО ЗаказКлиентаТовары.Номенклатура = ЦеныНоменклатуры25СрезПоследних.Номенклатура
		|ГДЕ
		|	ЗаказКлиентаТовары.Ссылка = &Ссылка
		|	И ЦеныНоменклатуры25СрезПоследних.ВидЦены = &ВидЦены
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказКлиентаТовары.Номенклатура,
		|	ЗаказКлиентаТовары.Цена,
		|	ЗаказКлиентаТовары.ВидЦены,
		|	ЦеныНоменклатуры25СрезПоследних.Цена";
		
		Запрос.УстановитьПараметр("Ссылка", Заказ);
		Запрос.УстановитьПараметр("ВидЦены", ОтчетОбъект.ВидЦены);
		Запрос.УстановитьПараметр("Период", Период);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Если Не ВыборкаДетальныеЗаписи.ЗаказЦена = ВыборкаДетальныеЗаписи.ЦенаПрайс Тогда
				Структура = Новый Структура("ПроверкаЦены, ЦенаПрайс");
				Структура.ПроверкаЦены = Ложь;
				Структура.ЦенаПрайс = ВыборкаДетальныеЗаписи.ЦенаПрайс;
				Возврат Структура;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Неопределено;	
	
КонецФункции

&НаСервере
Процедура ОтгрузитьНаСервере()
	
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоДокументов");
	
	Таб = Новый ТаблицаЗначений;
	Таб.Колонки.Добавить("Заказ");
    Таб.Колонки.Добавить("УпаковочныйЛист");
    Таб.Колонки.Добавить("КоличествоОстаток");
	Таб.Колонки.Добавить("Цена");
	
	Для каждого Строка1 Из ДеревоЗначений.Строки Цикл
		
		Если Строка1.Отгрузить И ЗначениеЗаполнено(Строка1.УпаковочныйЛистСсылка) Тогда
			Стр = Таб.Добавить();
			Стр.Заказ = Строка1.Заказ;
			Стр.УпаковочныйЛист = Строка1.УпаковочныйЛистСсылка;
			Стр.КоличествоОстаток = Строка1.КоличествоОстаток;
		КонецЕсли;
		
		Для каждого Строка2 Из строка1.Строки Цикл
			
			Если Строка2.Отгрузить И ЗначениеЗаполнено(Строка2.УпаковочныйЛистСсылка) Тогда
				Стр = Таб.Добавить();
				Стр.Заказ = Строка2.Заказ;
				Стр.УпаковочныйЛист = Строка2.УпаковочныйЛистСсылка;
				Стр.КоличествоОстаток = Строка2.КоличествоОстаток;
				Стр.Цена = Строка2.Цена;
			КонецЕсли;
			
			Для каждого Строка3 Из Строка2.Строки Цикл
				
				Если Строка3.Отгрузить И ЗначениеЗаполнено(Строка3.УпаковочныйЛистСсылка) Тогда
					Стр = Таб.Добавить();
					Стр.Заказ = Строка3.Заказ;
					Стр.УпаковочныйЛист = Строка3.УпаковочныйЛистСсылка;
					Стр.КоличествоОстаток = Строка3.КоличествоОстаток;
					Стр.Цена = Строка3.Цена;
				КонецЕсли;
				
				//Для каждого Строка4 Из Строка3.Строки Цикл	
				//	
				//	Если Строка4.Отгрузить И ЗначениеЗаполнено(Строка4.УпаковочныйЛистСсылка) Тогда
				//		Стр = Таб.Добавить();
				//		Стр.Заказ = Строка4.Заказ;
				//		Стр.УпаковочныйЛист = Строка4.УпаковочныйЛистСсылка;
				//		Стр.КоличествоОстаток = Строка4.КоличествоОстаток;
				//		Стр.Цена = Строка4.Цена;
				//	КонецЕсли;
				//	
				//	Для каждого Строка5 Из Строка4.Строки Цикл	
				//		
				//		Если Строка5.Отгрузить И ЗначениеЗаполнено(Строка5.УпаковочныйЛистСсылка) Тогда
				//			Стр = Таб.Добавить();
				//			Стр.Заказ = Строка5.Заказ;
				//			Стр.УпаковочныйЛист = Строка5.УпаковочныйЛистСсылка;
				//			Стр.КоличествоОстаток = Строка5.КоличествоОстаток;
				//			Стр.Цена = Строка5.Цена;
				//		КонецЕсли;
				//		
				//		Для каждого Строка6 Из Строка5.Строки Цикл	
				//			
				//			Если Строка6.Отгрузить И ЗначениеЗаполнено(Строка6.УпаковочныйЛистСсылка) Тогда
				//				Стр = Таб.Добавить();
				//				Стр.Заказ = Строка6.Заказ;
				//				Стр.УпаковочныйЛист = Строка6.УпаковочныйЛистСсылка;
				//				Стр.КоличествоОстаток = Строка6.КоличествоОстаток;
				//				Стр.Цена = Строка6.Цена;
				//			КонецЕсли;
				//										
				//		КонецЦикла;
				//		
				//	КонецЦикла;
				//	
				//КонецЦикла;
				//
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СписокЗаказов = Новый ТаблицаЗначений;
	СписокЗаказов.Колонки.Добавить("ЗаказКлиента");
	СписокЗаказов.Колонки.Добавить("УпаковочныйЛист");
	
	Для Каждого Строка Из Таб Цикл
		ОтказЗапись = Ложь;
		ТабКомплектацияЗаказ = Новый ТаблицаЗначений;
		
		ОбъектЗаказ = Строка.Заказ.ПолучитьОбъект();
		УпЛистНайден = Ложь;
		
		Отказ = Ложь;
			
		ТабКомплектация = Новый ТаблицаЗначений;
		ТабКомплектация.Колонки.Добавить("Номенклатура");
		ТабКомплектация.Колонки.Добавить("Характеристика");
		ТабКомплектация.Колонки.Добавить("Количество");
		
		Для Каждого СтрокаКомплектация Из Строка.УпаковочныйЛист.Товары Цикл
			НоваяСтрокаКомплектация = ТабКомплектация.Добавить();
			НоваяСтрокаКомплектация.Номенклатура = СтрокаКомплектация.Номенклатура;
			НоваяСтрокаКомплектация.Характеристика = СтрокаКомплектация.Характеристика;
			НоваяСтрокаКомплектация.Количество = СтрокаКомплектация.Количество;
		КонецЦикла;
		
		ТЗ = Новый ТаблицаЗначений;
		ТЗ = ОбъектЗаказ.Товары.Выгрузить();
		
		Для Каждого СтрокаТовары Из ОбъектЗаказ.Товары Цикл
			
			Если СтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда
				Продолжить;
			Иначе
				
				СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы(
				"Количество, Сумма, СуммаНДС, СуммаСНДС, СуммаРучнойСкидки", "КоличествоУпаковок");
				
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("СтруктураПересчетаСуммы", СтруктураПересчетаСуммы);
				
				ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтруктуруПересчетаСуммы(СтруктураПересчетаСуммы, СтрокаТовары);
				Для Каждого СтрокаПересчета Из СтруктураПересчетаСуммы.Поля Цикл
					Если СтрокаПересчета.Значение = Неопределено Тогда
						
						СтруктураПересчетаСуммы.Поля[СтрокаПересчета.Ключ] = 0;
						
					КонецЕсли;
				КонецЦикла;
				
				ПараметрыРазбиенияСтроки = ПараметрыРазбиенияСтроки();
				
				Количество = 0;
				
				Для Каждого СтрокаКомплектацияРазбиение Из ТабКомплектация Цикл
					Если СтрокаКомплектацияРазбиение.Номенклатура = СтрокаТовары.Номенклатура
						И СтрокаКомплектацияРазбиение.Характеристика = СтрокаТовары.Характеристика Тогда
						
						Количество = СтрокаКомплектацияРазбиение.Количество;
						
						ПараметрыОбработки = Новый Структура;
						ПараметрыОбработки.Вставить("ТабличнаяЧасть",           ТЗ);
						ПараметрыОбработки.Вставить("ЭлементФормы",             ЭтаФорма);
						
						ПараметрыОбработки.Вставить("ОповещениеПослеРазбиения", "");
						
						ПараметрыОбработки.Вставить("ПараметрыРазбиенияСтроки", ПараметрыРазбиенияСтроки);
						ПараметрыОбработки.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
						ПараметрыОбработки.Вставить("Количество", Количество);
						
						ВвестиКоличествоДляРазбиения(ПараметрыОбработки, ТЗ, СтрокаТовары, ОбъектЗаказ.Товары, Отказ);
						
						Прервать;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			Если Отказ Тогда
				Прервать;	
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не Отказ Тогда
			ТабКомплектацияЗаказ = ТЗ.Скопировать();
		Иначе
			ОтказЗапись = Истина;
			Сообщить("Не достаточно остатков " +  ОбъектЗаказ + " и " + Строка.УпаковочныйЛист);
		КонецЕсли;
		
		Если Не ОтказЗапись И ТабКомплектацияЗаказ.Количество() > 0 Тогда
			ОбъектЗаказ.Товары.Загрузить(ТабКомплектацияЗаказ);
			
			Попытка
				ОбъектЗаказ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				
				Стр = СписокЗаказов.Добавить();
				Стр.ЗаказКлиента = ОбъектЗаказ.Ссылка;
				Стр.УпаковочныйЛист = Строка.УпаковочныйЛист;
			Исключение
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ВызватьИсключение;
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	СписокЗаказовСУпаковочнымиЛистами = Новый ТаблицаЗначений;
	СписокЗаказовСУпаковочнымиЛистами.Колонки.Добавить("ЗаказКлиента");
	СписокЗаказовСУпаковочнымиЛистами.Колонки.Добавить("СписокУпаковочныхЛистов");
	
	Для Каждого СтрокаРаспоряжений Из СписокЗаказов Цикл
		
		Нашли = СписокЗаказовСУпаковочнымиЛистами.НайтиСтроки(Новый Структура("ЗаказКлиента", СтрокаРаспоряжений.ЗаказКлиента));
		Если Нашли.Количество() = 0 Тогда
			Стр = СписокЗаказовСУпаковочнымиЛистами.Добавить();
			Стр.ЗаказКлиента = СтрокаРаспоряжений.ЗаказКлиента;
			
			СписокЗначенийУпаковочныйЛист = Новый СписокЗначений;
			СписокЗначенийУпаковочныйЛист.Добавить(СтрокаРаспоряжений.УпаковочныйЛист);
			
			Стр.СписокУпаковочныхЛистов = СписокЗначенийУпаковочныйЛист;
			
		Иначе
			
			Для Каждого Строка Из СписокЗаказовСУпаковочнымиЛистами Цикл
				
				Если Строка.ЗаказКлиента = СтрокаРаспоряжений.ЗаказКлиента Тогда
					Строка.СписокУпаковочныхЛистов.Добавить(СтрокаРаспоряжений.УпаковочныйЛист);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка Из СписокЗаказовСУпаковочнымиЛистами Цикл
		
		Распоряжения = Новый Массив;
		Распоряжения.Добавить(Строка.ЗаказКлиента);
		
		МассивРаспоряжений.ЗагрузитьЗначения(Распоряжения);
		
		УпаковочныйЛистДляОрдера = Строка.СписокУпаковочныхЛистов;
		
		Попытка
			
			ОформитьРасходныеОрдераНаСервере();
			
			Для Каждого СтрокаУЛ Из УпаковочныйЛистДляОрдера Цикл
				
				УпаковочныйЛистДляАгрегации = СтрокаУЛ.Значение;
				
				ТекущийОрдер = УпаковочныйЛистДляАгрегации.гф_ТекущийОрдер;
				
				Если ЗначениеЗаполнено(ТекущийОрдер) И Не ПустаяСтрока(ТекущийОрдер.ВерсияДанных) Тогда
					
					Агрегация = УпаковочныйЛистДляАгрегации.гф_Агрегация.ПолучитьОбъект();
					Агрегация.гф_Автодействие = Перечисления.гф_АвтодействияКМ.КОтгрузке;
					Агрегация.Записать();
					
				КонецЕсли;
				
			КонецЦикла;
				
		Исключение
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			//ВызватьИсключение;	
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСтрокуРазбиением(Количество, ПараметрыОбработки, ТЗ, ТекущаяСтрока, Товары, Отказ)
	
	ПараметрыРазбиенияСтроки = ПараметрыОбработки.ПараметрыРазбиенияСтроки;
	ДополнительныеПараметры = ПараметрыОбработки.ДополнительныеПараметры;
	
	Если ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ТЗ.Получить(Товары.Индекс(ТекущаяСтрока))[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] > Количество Тогда
		
		НоваяСтрока  = ТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		
		НоваяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] = Количество;
		
		СтрокаТЗ = ТЗ.Получить(Товары.Индекс(ТекущаяСтрока));
		
		СтрокаТЗ[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] =
		СтрокаТЗ[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] - Количество;
		
		НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
		НоваяСтрока.ДатаОтгрузки = ТекущаяДата();
		
		РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры, СтрокаТЗ);
		
	ИначеЕсли ТЗ.Получить(Товары.Индекс(ТекущаяСтрока))[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] = Количество Тогда
		
		СтрокаТЗ = ТЗ.Получить(Товары.Индекс(ТекущаяСтрока));
		СтрокаТЗ.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
		СтрокаТЗ.ДатаОтгрузки = ТекущаяДата();
		
		РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры, СтрокаТЗ);
	
	Иначе
		
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры, СтрокаТЗ) 
	
	ТекущаяСтрока = СтрокаТЗ;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		НоваяСтрока.КодСтроки = 0;
		
		ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы, ТекущаяСтрока);
		ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы, НоваяСтрока);
		
		ПересчитатьСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы);
		
		СтруктураДействий = Новый Структура;
				
	КонецЕсли;

КонецПроцедуры

// Пересчитывает суммы в строках, добавленных в структуру пересчета суммы, описание см. функция
//                            ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы.
//
// Параметры:
//  СтруктураПересчетаСуммы - см. ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы
//
Процедура ПересчитатьСуммы(СтруктураПересчетаСуммы)
	
	РазрядностиОкругления = Неопределено;
	Если СтруктураПересчетаСуммы.Свойство("РазрядностиОкругления") Тогда
		РазрядностиОкругления = СтруктураПересчетаСуммы.РазрядностиОкругления;
	КонецЕсли;
	
	Для Каждого Строка Из СтруктураПересчетаСуммы.Строки Цикл
		
		Если СтруктураПересчетаСуммы.ИтогКоличество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Коэффициент = Строка[СтруктураПересчетаСуммы.ИмяПоляКоличество] / СтруктураПересчетаСуммы.ИтогКоличество;
		СтруктураПересчетаСуммы.ИтогКоличество = СтруктураПересчетаСуммы.ИтогКоличество - Строка[СтруктураПересчетаСуммы.ИмяПоляКоличество];

		Для Каждого Поле Из СтруктураПересчетаСуммы.Поля Цикл
			
			НовоеЗначение = Поле.Значение * Коэффициент;
			
			Если РазрядностиОкругления <> Неопределено Тогда
				Строка[Поле.Ключ] = Окр(НовоеЗначение, РазрядностиОкругления[Поле.Ключ]);
			Иначе
				Строка[Поле.Ключ] = НовоеЗначение;
			КонецЕсли;
			
			СтруктураПересчетаСуммы.Поля[Поле.Ключ] = Поле.Значение - Строка[Поле.Ключ];

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

Процедура ВвестиКоличествоДляРазбиения(ПараметрыОбработки, ТЗ, СтрокаТовары, Товары, Отказ)
	
	Количество = ПараметрыОбработки.Количество;
	
	ВвестиКоличествоДляРазбиенияПослеВвода(Количество, ПараметрыОбработки, ТЗ, СтрокаТовары, Товары, Отказ);
	
КонецПроцедуры

Процедура ВвестиКоличествоДляРазбиенияПослеВвода(Количество, ПараметрыОбработки, ТЗ, СтрокаТовары,  Товары, Отказ)
	
	ДобавитьСтрокуРазбиением(Количество, ПараметрыОбработки, ТЗ, СтрокаТовары, Товары, Отказ);
	
КонецПроцедуры
	
// Функция-конструктор дополнительных параметров разбиения строки.
//
// Возвращаемое значение:
//  Структура:
//     * ИмяПоляКоличество - Строка - имя поля, по которому будет происходить разбиение
//     * Заголовок - Строка - заголовок формы ввода числа
//     * РазрешитьНулевоеКоличество - Булево - признак, что в исходной и конечной строке может быть 0
//     * Количество - Неопределено, Число - количество, которое будет отображено в форме редактирования числа;
//          если Неопределенно - будет показано количество, взятое из исходной строки.
//
Функция ПараметрыРазбиенияСтроки() Экспорт
	
	ПараметрыРазбиенияСтроки = Новый Структура;
	ПараметрыРазбиенияСтроки.Вставить("ИмяПоляКоличество", "КоличествоУпаковок");
	ПараметрыРазбиенияСтроки.Вставить("Заголовок", НСтр("ru = 'Введите количество товара в новой строке';
														|en = 'Enter quantity of goods in a new line'"));
	ПараметрыРазбиенияСтроки.Вставить("РазрешитьНулевоеКоличество", Истина);
	ПараметрыРазбиенияСтроки.Вставить("Количество", Неопределено);
	
	Возврат ПараметрыРазбиенияСтроки;
	
КонецФункции

Функция ЗависимыеРеквизитыСтрокой()
	
	Возврат "СуммаБезВозвратнойТары, СуммаНДСБезВозвратнойТары, СуммаСНДСБезВозвратнойТары,
		|СуммаРучнойСкидкиБезВозвратнойТары, СуммаАвтоматическойСкидкиБезВозвратнойТары,
		|СуммаОтмененоБезВозвратнойТары, СуммаНДСОтмененоБезВозвратнойТары, СуммаСНДСОтмененоБезВозвратнойТары,
		|СуммаРучнойСкидкиОтмененоБезВозвратнойТары, СуммаАвтоматическойСкидкиОтмененоБезВозвратнойТары,
		|СуммаОтменено, СуммаНДСОтменено, СуммаСНДСОтменено,
		|СуммаРучнойСкидкиОтменено, СуммаАвтоматическойСкидкиОтменено";
	
КонецФункции

&НаКлиенте
Процедура Отгрузить(Команда)
	
	ОтгрузитьНаСервере();
	
	ПриОткрытии(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРезервыНаСервере(Заказ, УпаковочныйЛист)
	
	//мЗаказКлиента = Заказ;
	
	СхемаКомпоновкиДанных = Отчеты.гф_ОстаткиИДоступностьТоваров.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	НастройкиОтчета = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтчета);
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	
    ГруппировкаДетальныеПоля = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
    ГруппировкаДетальныеПоля.Использование = Истина;
    Автополе = ГруппировкаДетальныеПоля.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
    Автополе.Использование = Истина;
	
	ПолеПараметрыДанных	= Новый ПолеКомпоновкиДанных("ПараметрыДанных");
	ПолеСистемныеПоля	= Новый ПолеКомпоновкиДанных("СистемныеПоля"); 
    Для Каждого ПолеВыбора Из КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		ВыбранноеПоле = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Использование	= Не (ПолеВыбора.Поле = ПолеПараметрыДанных ИЛИ ПолеВыбора.Поле = ПолеСистемныеПоля);
		ВыбранноеПоле.Поле			= ПолеВыбора.Поле;
	КонецЦикла;	 
	
	ПараметрОбособленныеТовары = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(
		"ПоказатьОбособленныеТовары");
	Если ПараметрОбособленныеТовары <> Неопределено Тогда
		ПараметрОбособленныеТовары.Значение = Истина;
	КонецЕсли;
	
	ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Номенклатура");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ПравоеЗначение	= УпаковочныйЛист.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
	ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Склад");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ПравоеЗначение	= Заказ.Склад;
	
	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);

	ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.Основной.Запрос;

	ТекстЗапросаВесУпаковки = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
		"Таблица.Номенклатура.ЕдиницаИзмерения", "Таблица.Номенклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаВесНоменклатуры", ТекстЗапросаВесУпаковки);
		
	ТекстЗапросаОбъемУпаковки = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки(
		"Таблица.Номенклатура.ЕдиницаИзмерения", "Таблица.Номенклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаОбъемНоменклатуры", ТекстЗапросаОбъемУпаковки);

	СхемаКомпоновкиДанных.НаборыДанных.Основной.Запрос = ТекстЗапроса;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();    
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	ТипГенератора = Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений");
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, , , ТипГенератора);
    
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
    
    ТаблицаКомпоновкаДанных = Новый ТаблицаЗначений;
    
    ПроцессорВыводаРезультатаКомпоновкиДанных = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ПроцессорВыводаРезультатаКомпоновкиДанных.УстановитьОбъект(ТаблицаКомпоновкаДанных);
    ПроцессорВыводаРезультатаКомпоновкиДанных.Вывести(ПроцессорКомпоновкиДанных);
	
	МассивУдалитьСтроки = Новый Массив;
	Для Каждого Строка Из ТаблицаКомпоновкаДанных Цикл
		Если Строка["ТипЗаписи"] <> "Сейчас" Тогда
			МассивУдалитьСтроки.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдалитьСтроку Из МассивУдалитьСтроки Цикл
		ТаблицаКомпоновкаДанных.Удалить(УдалитьСтроку);
	КонецЦикла;
	
	ТаблицаОстатки = ТаблицаКомпоновкаДанных.Скопировать();
	ТаблицаОстатки.Свернуть("Склад, Номенклатура, Характеристика, ЗаказНаОтгрузку", "Доступно");
	
	Если Объект.Наличие.Количество() < 1 Тогда
		Для Каждого СтрокаОстатки Из ТаблицаОстатки Цикл
			Строка = Объект.Наличие.Добавить();
			Строка.Склад = СтрокаОстатки.Склад;
			Строка.Номенклатура = СтрокаОстатки.Номенклатура;
			Строка.Характеристика = СтрокаОстатки.Характеристика;
			Строка.ЗаказНаОтгрузку = СтрокаОстатки.ЗаказНаОтгрузку;
			Строка.Доступно = СтрокаОстатки.Доступно;
		КонецЦикла;
	КонецЕсли;
	
	НаличиеПроверка = Новый ТаблицаЗначений;
	НаличиеПроверка = Объект.Наличие.Выгрузить();
	Проверка = Истина;
	
	ТаблицаДляПроверки = Новый ТаблицаЗначений;
	ТаблицаДляПроверки = УпаковочныйЛист.Товары.Выгрузить();
	ТаблицаДляПроверки.Колонки.Добавить("Проверка");
	//ТаблицаДляПроверки.Колонки.Добавить("Строка1");
	
	Для Каждого СтрокаДляПроверки Из ТаблицаДляПроверки Цикл
	    Для Каждого СтрокаНаличие Из НаличиеПроверка Цикл
			
			 Если УпаковочныйЛист.гф_Заказ = СтрокаНаличие.ЗаказНаОтгрузку
				И СтрокаДляПроверки.Номенклатура = СтрокаНаличие.Номенклатура
				И СтрокаДляПроверки.Характеристика = СтрокаНаличие.Характеристика Тогда
				СтрокаДляПроверки.Проверка = Истина;
				СтрокаДляПроверки.УпаковочныйЛист = УпаковочныйЛист;
				Прервать;
			Иначе
				СтрокаДляПроверки.Проверка = Ложь;
				СтрокаДляПроверки.УпаковочныйЛист = УпаковочныйЛист;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	НайденнаяСтрока = ТаблицаДляПроверки.Найти(Ложь, "Проверка");
	Если НайденнаяСтрока = Неопределено Тогда
		
		Для Каждого СтрокаУпковочногоЛиста Из УпаковочныйЛист.Товары Цикл
			
			Для Каждого СтрокаНаличие Из НаличиеПроверка Цикл
				
				Если УпаковочныйЛист.гф_Заказ = СтрокаНаличие.ЗаказНаОтгрузку
					И СтрокаУпковочногоЛиста.Номенклатура = СтрокаНаличие.Номенклатура
					И СтрокаУпковочногоЛиста.Характеристика = СтрокаНаличие.Характеристика Тогда
					
					Если СтрокаНаличие.Доступно - СтрокаУпковочногоЛиста.КоличествоУпаковок < 0 Тогда
						Проверка = Ложь;
						Прервать;
					Иначе
						СтрокаНаличие.Доступно = СтрокаНаличие.Доступно - СтрокаУпковочногоЛиста.КоличествоУпаковок; 
						Проверка = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не Проверка Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Проверка Тогда
			
			Для Каждого СтрокаУпковочногоЛиста Из УпаковочныйЛист.Товары Цикл
				
				Для Каждого СтрокаНаличие Из Объект.Наличие Цикл
					
					Если УпаковочныйЛист.гф_Заказ = СтрокаНаличие.ЗаказНаОтгрузку
						И СтрокаУпковочногоЛиста.Номенклатура = СтрокаНаличие.Номенклатура
						И СтрокаУпковочногоЛиста.Характеристика = СтрокаНаличие.Характеристика Тогда
						
						Если Не СтрокаНаличие.Доступно - СтрокаУпковочногоЛиста.КоличествоУпаковок <= 0 Тогда 
							СтрокаНаличие.Доступно = СтрокаНаличие.Доступно - СтрокаУпковочногоЛиста.КоличествоУпаковок; 
							Строка = Объект.ДоступностьУпаковочныхЛистов.Добавить();
							Строка.УпаковочныйЛист = УпаковочныйЛист;
							Строка.Проверка = Истина;
						Иначе
							Строка = Объект.ДоступностьУпаковочныхЛистов.Добавить();
							Строка.УпаковочныйЛист = УпаковочныйЛист;
							Строка.Проверка = Ложь;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		Строка = Объект.ДоступностьУпаковочныхЛистов.Добавить();
		Строка.УпаковочныйЛист = УпаковочныйЛист;
		Строка.Проверка = Ложь;
		
	КонецЕсли;
	
	ТаблицаОстаткиДоступноВсего = ТаблицаОстатки.Скопировать();
	ТаблицаОстаткиДоступноВсего.Свернуть("Склад, Номенклатура, Характеристика", "Доступно");	
	
КонецПроцедуры

&НаСервере
Процедура ОформитьРасходныеОрдераНаСервере()
	
	// За основу взята типовая процедура "ОформитьРасходныеОрдераНаСервере" из общего модуля УправлениеОтгрузкой
	ПараметрыПереоформленияРасходныхОрдеров = СкладыСервер.ПараметрыПереоформленияРасходныхОрдеров();
		
	Запрос = Новый Запрос;
	Запрос.Текст =	
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТовары.Ссылка КАК ДокументОтгрузки,
	|	ДокументТовары.Склад Склад
	|ПОМЕСТИТЬ ДокументыОтгрузки
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка В(&МассивРаспоряжений)
	|	И ДокументТовары.Ссылка.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(Документ.ЗаданиеНаПеревозку.ПустаяСсылка) КАК ЗаданиеНаПеревозку,
	|	ТоварыКОтгрузке.Склад КАК Склад,
	|	ТоварыКОтгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
	|	ТоварыКОтгрузке.Получатель КАК Получатель,
	|	ЕСТЬNULL(РеквизитыРаспоряжения.ДатаДокументаИБ, ДАТАВРЕМЯ(1,1,1)) КАК Дата
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке КАК ТоварыКОтгрузке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыОтгрузки КАК ДокументыОтгрузки
	|		ПО ТоварыКОтгрузке.ДокументОтгрузки = ДокументыОтгрузки.ДокументОтгрузки
	|			И ТоварыКОтгрузке.Склад = ДокументыОтгрузки.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеквизитыРаспоряжения
	|			ПО ТоварыКОтгрузке.ДокументОтгрузки = РеквизитыРаспоряжения.Ссылка
	|				И НЕ РеквизитыРаспоряжения.ДополнительнаяЗапись";
	
	Запрос.УстановитьПараметр("МассивРаспоряжений", МассивРаспоряжений.ВыгрузитьЗначения());
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();

	УстановитьПривилегированныйРежим(Ложь);
	
	СоздатьОрдера = Ложь; 
	
	Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл		
		
		СоздатьОрдера = Истина;
		
		ПараметрыПереоформленияРасходныхОрдеров.Склад = Выборка.Склад;
		
		Пока Выборка.СледующийПоЗначениюПоля("Получатель") Цикл	
			
			ПараметрыПереоформленияРасходныхОрдеров.Получатель = Выборка.Получатель;
			
			Распоряжения = Новый Массив;
			Пока Выборка.Следующий() Цикл
				Распоряжения.Добавить(Выборка.ДокументОтгрузки);
			КонецЦикла;
			
			ПараметрыПереоформленияРасходныхОрдеров.РаспоряженияНаОтгрузку = Распоряжения;
			
			ПараметрыПереоформленияРасходныхОрдеров.Вставить("гф_УпаковочныйЛист");
			ПараметрыПереоформленияРасходныхОрдеров.гф_УпаковочныйЛист = УпаковочныйЛистДляОрдера;
			
			СтруктураЗадания = СкладыСервер.ПереоформитьРасходныеОрдера(ПараметрыПереоформленияРасходныхОрдеров);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если Не СоздатьОрдера Тогда
		Отказ = Истина;

		ТекстСообщения = НСтр("ru = 'По выбранным распоряжениям не требуется отгрузка товаров.';
								|en = 'Goods shipment is not required for the selected references.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	
	УстановитьСнятьФлажки(Ложь);
	
	РазвернутьДеревоДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(Команда)
	
	УстановитьСнятьФлажки(Истина);
	
	РазвернутьДеревоДокументов();
	
КонецПроцедуры

Процедура УстановитьФлажкиДалее(Элемент, Отгрузить)
	
	Для каждого Строка Из Элемент.Строки Цикл
		
		Строка.Отгрузить = Отгрузить;
		
		Если Не Элемент.Строки.Количество() = 0 Тогда
			УстановитьФлажкиДалее(Строка, Отгрузить);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСнятьФлажки(Отгрузить)
	
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоДокументов");
	Для каждого Строка Из ДеревоЗначений.Строки Цикл
		Строка.Отгрузить = Отгрузить;
		УстановитьФлажкиДалее(Строка, Строка.Отгрузить);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоЗначений, "ДеревоДокументов");
	
	//СписокЗначений = Новый СписокЗначений;
	//СписокЗначений.Добавить(Строка);
	//СписокЗначений.Добавить("Отгрузить по ценам заказа");
	//СписокЗначений.Добавить("Исключить из отгрузки товары с различающимися ценами");
	//СписокЗначений.Добавить("Отменить все");
	//
	//Оповещение = Новый ОписаниеОповещения("ПослеВыбораДействия", ЭтотОбъект, Строка);
	//
	//
	//Отбор = Новый Структура();
	//Отбор.Вставить("Дата", Объект.ДатаПолученияЦен);
	//Отбор.Вставить("Скидка", Объект.ПроцентСкидки);
	//ПараметрыФормы = Новый Структура("Ключ", Отбор);
	//
	//ОткрытьФорму("Обработка.гф_ОтгрузкаПоЗаказам.Форма.ФормаВопросаОДатеЦенИСкидкеКлиента",ПараметрыФормы,,,,,Оповещение,);
	
КонецПроцедуры
