Перем Отметки;
Перем УстановкаЦен;

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаСервере
Процедура ПриОткрытииНаСервере()
	
	//Отметки = новый ТаблицаЗначений;
	//Отметки.Колонки.Добавить("Клиент");
	//Отметки.Колонки.Добавить("АдресДоставки");
	//Отметки.Колонки.Добавить("Склад");
	//Отметки.Колонки.Добавить("ДокументПоступления");
	//Отметки.Колонки.Добавить("Заказ");
	//Отметки.Колонки.Добавить("УпаковочныйЛист");
	//
	//ОтчетОбъект = РеквизитФормыВЗначение("Объект");
	//
	//СхемаКомпоновки = ОтчетОбъект.ПолучитьМакет("СхемаКомпоновки");
	//Объект.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
	//Объект.КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
	//
	//НачПериода = НачалоМесяца(ТекущаяДата());
	//КонПериода = КонецМесяца(ТекущаяДата());
	//
	//ДатаОстатков = ТекущаяДата();
	//
	//ДатаПолученияЦен 				= ТекущаяДата();
	//ПредоплатныйКлиент 				= Ложь;
	//ПоказалиФормуОПроцентеСкидки 	= Ложь;
	//
	//РежимРаскрытияУровнейОтоброжения = 3;
	//УстановитьРежимОтображенияДерева();
	//
	//ЗаполнитьПоОстаткам(СхемаКомпоновки, ОтчетОбъект);
	
	ЗаполнениеДанными();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПриОткрытииНаСервере();
	
	//ДД = ДеревоДокументов.ПолучитьЭлементы();
	
	РазвернутьДеревоДокументов()
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеДанными()
	
	Отметки = новый ТаблицаЗначений;
	Отметки.Колонки.Добавить("Клиент");
	Отметки.Колонки.Добавить("АдресДоставки");
	Отметки.Колонки.Добавить("Склад");
	Отметки.Колонки.Добавить("ДокументПоступления");
	Отметки.Колонки.Добавить("Заказ");
	Отметки.Колонки.Добавить("УпаковочныйЛист");
	
	ОтчетОбъект = РеквизитФормыВЗначение("Объект");
	
	СхемаКомпоновки = ОтчетОбъект.ПолучитьМакет("СхемаКомпоновки");
	Объект.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
	Объект.КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
	
	НачПериода = НачалоМесяца(ТекущаяДата());
	КонПериода = КонецМесяца(ТекущаяДата());
	
	ДатаОстатков = ТекущаяДата();
	
	ДатаПолученияЦен 				= ТекущаяДата();
	ПредоплатныйКлиент 				= Ложь;
	ПоказалиФормуОПроцентеСкидки 	= Ложь;
	
	//РежимРаскрытияУровнейОтоброжения = 3;
	//УстановитьРежимОтображенияДерева();
	
	ЗаполнитьПоОстаткам(СхемаКомпоновки, ОтчетОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоДокументов()
	
	КоллекцияЭлементовДерева = ДеревоДокументов.ПолучитьЭлементы();
	ПП = 0;
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл
		ПП = ПП + 1;
		
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		Элементы.ДеревоДокументов.Развернуть(ИдентификаторСтроки, Истина);
		Если ПП > 1 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	
	//СформироватьНаСервере();
	ЗаполнениеДанными();
	//ЭтаФорма.Элементы.ДеревоДокументов.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	
	РазвернутьДеревоДокументов()

КонецПроцедуры

&НаСервере
Процедура УстановитьРежимОтображенияДерева()
	Если РежимРаскрытияУровнейОтоброжения = 1 Тогда
		ЭтаФорма.Элементы.ДеревоДокументов.НачальноеОтображениеДерева = НачальноеОтображениеДерева.НеРаскрывать;
	ИначеЕсли РежимРаскрытияУровнейОтоброжения = 2 Тогда
		ЭтаФорма.Элементы.ДеревоДокументов.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;
	ИначеЕсли РежимРаскрытияУровнейОтоброжения = 3 Тогда
		ЭтаФорма.Элементы.ДеревоДокументов.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткам(СхемаКомпоновки, ОтчетОбъект)
	
	//запоминаем отметки
	ДД = ДеревоДокументов.ПолучитьЭлементы();
	//ДеревоЗначений = РеквизитФормыВЗначение("ДеревоДокументов");
	//Для каждого Строка1 Из ДеревоЗначений.Строки Цикл
	//	//ОбработкаПрерыванияПользователя();
	//	
	//	Если не Строка1.Отгрузить Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	Для каждого Строка2 Из строка1.Строки Цикл
	//		//ОбработкаПрерыванияПользователя();
	//		
	//		Если не Строка1.Отгрузить Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		Для каждого Строка3 Из Строка2.Строки Цикл
	//			//ОбработкаПрерыванияПользователя();
	//			
	//			Для каждого Строка4 Из Строка3.Строки Цикл	
	//				
	//				Для каждого Строка5 Из Строка4.Строки Цикл	
	//					
	//					Для каждого Строка6 Из Строка5.Строки Цикл	
	//						
	//						Если Строка6.Отгрузить Тогда
	//							Новая 						= Отметки.Добавить();
	//							Новая.Клиент 				= Строка6.Клиент;
	//							Новая.АдресДоставки 		= строка6.АдресДоставки;
	//							Новая.Склад 				= Строка6.Склад;
	//							Новая.ДокументПоступления 	= Строка6.ДокументПоступления;
	//							Новая.Заказ 				= Строка6.Заказ;
	//							Новая.УпаковочныйЛист 		= Строка6.УпаковочныйЛистСсылка;	
	//						КонецЕсли;
	//						
	//					КонецЦикла;
	//					
	//				КонецЦикла;
	//				
	//			КонецЦикла;
	//		КонецЦикла;
	//	КонецЦикла;
	//КонецЦикла;
	//
	//Если Не Отметки = Неопределено Тогда
	//	Отметки.Сортировать("Клиент, АдресДоставки, Склад, ДокументПоступления, Заказ, УпаковочныйЛист");
	//КонецЕсли;
	//ЗначениеВРеквизитФормы(ДеревоЗначений, "ДеревоДокументов");	
	
	//запрос остатков
	
	//ДеревоДокументов.Строки.Очистить();
	ДД.Очистить();
	
	ПараметрыДанных = Объект.КомпоновщикНастроек.Настройки.ПараметрыДанных;
	ПараметрыДанных.УстановитьЗначениеПараметра("ТипУпаковки", Перечисления.ТипыУпаковок.МультитоварнаяУпаковка);
	ПараметрыДанных.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДата());
	ПараметрыДанных.УстановитьЗначениеПараметра("Склад", ОтчетОбъект.Склад);
	ПараметрыДанных.УстановитьЗначениеПараметра("Клиент", ОтчетОбъект.Клиент);
	ПараметрыДанных.УстановитьЗначениеПараметра("Период", ТекущаяДата());
	
	Если Не ЗначениеЗаполнено(ОтчетОбъект.Склад) Тогда
		СхемаКомпоновки.НаборыДанных.НаборДанных1.Запрос = СтрЗаменить(СхемаКомпоновки.НаборыДанных.НаборДанных1.Запрос, "ДвижениеКМ.Склад = &Склад", "ДвижениеКМ.Склад.*"); 
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ОтчетОбъект.Клиент) Тогда
		СхемаКомпоновки.НаборыДанных.НаборДанных1.Запрос = СтрЗаменить(СхемаКомпоновки.НаборыДанных.НаборДанных1.Запрос, "ЗаказКлиента.Партнер = &Клиент", "ЗаказКлиента.Партнер.*"); 
	КонецЕсли;
	
	Компоновщик = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = Компоновщик.Выполнить(СхемаКомпоновки, Объект.КомпоновщикНастроек.ПолучитьНастройки(),,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	Дерево = Новый ДеревоЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.ОтображатьПроцентВывода = Истина;
	ПроцессорВывода.УстановитьОбъект(Дерево);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Объект.Наличие.Очистить();
	Объект.ДоступностьУпаковочныхЛистов.Очистить();
	
	Для каждого Строка Из Дерево.Строки Цикл
		Для каждого Строка1 Из Строка.Строки Цикл
			Для каждого Строка2 Из Строка1.Строки Цикл
				Для каждого Строка3 Из Строка2.Строки Цикл
					Для каждого Строка4 Из Строка3.Строки Цикл
						
						Для каждого Строка5 Из Строка4.Строки Цикл
							ЗаполнитьРезервыНаСервере(Строка5.Заказ, Строка5.УпаковочныйЛистСсылка);	
							
							Для каждого Стр Из Объект.ДоступностьУпаковочныхЛистов Цикл
								Если Стр.УпаковочныйЛист = Строка5.УпаковочныйЛистСсылка И Не Стр.Проверка Тогда
									Строка4.Строки.Удалить(Строка5);
									Прервать
							    КонецЕсли;
							КонецЦикла;
							
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
		
	
	
	ЗаполнитьСвойстваСтроки(ДеревоДокументов, Дерево.Строки);
	
	//ДеревоЗначений = РеквизитФормыВЗначение("ДеревоДокументов");
	//
	//
	//Для каждого Строка Из Объект.ДоступностьУпаковочныхЛистов Цикл

	//Нашли6 = Строка5.Строки.НайтиСтроки(Новый Структура("УпаковочныйЛистСсылка", Строка.УпаковочныйЛист));
	
	
	
	
	
	//УстановитьРежимОтображенияДерева(); 
	
	
	
	
	
	//// восстановление отметок
	//Если Не Отметки = Неопределено Тогда
	//	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоДокументов");	
	//	Для каждого Строка Из Отметки Цикл
	//		//	ОбработкаПрерыванияПользователя();
	//		
	//		Нашли1 = ДеревоЗначений.Строки.НайтиСтроки(Новый Структура("Клиент", Строка.Клиент));
	//		Для каждого Строка1 Из Нашли1 Цикл
	//			//		ОбработкаПрерыванияПользователя();
	//			
	//			Строка1.Отгрузить = Истина;
	//			Нашли2 = Строка1.Строки.НайтиСтроки(Новый Структура("АдресДоставки", Строка.АдресДоставки));
	//			Для каждого Строка2 Из Нашли2 Цикл
	//				//			ОбработкаПрерыванияПользователя();
	//				
	//				Строка2.Отгрузить = Истина;
	//				Нашли3 = Строка2.Строки.НайтиСтроки(Новый Структура("Склад", Строка.Склад));
	//				Для каждого Строка3 Из Нашли3 Цикл
	//					//				ОбработкаПрерыванияПользователя();
	//					
	//					Строка3.Отгрузить = Истина;
	//					Нашли4 = Строка3.Строки.НайтиСтроки(Новый Структура("ДокументПоступления", Строка.ДокументПоступления));
	//					Для каждого Строка4 Из Нашли4 Цикл
	//						//				ОбработкаПрерыванияПользователя();
	//						
	//						Строка4.Отгрузить = Истина;
	//						Нашли5 = Строка4.Строки.НайтиСтроки(Новый Структура("Заказ", Строка.Заказ));
	//						Для каждого Строка5 Из Нашли5 Цикл
	//							//				ОбработкаПрерыванияПользователя();
	//							
	//							Строка5.Отгрузить = Истина;
	//							Нашли6 = Строка5.Строки.НайтиСтроки(Новый Структура("УпаковочныйЛистСсылка", Строка.УпаковочныйЛист));
	//							Для каждого Строка6 Из Нашли6 Цикл
	//								//				ОбработкаПрерыванияПользователя();
	//								
	//								Строка6.Отгрузить = Истина;
	//								
	//							КонецЦикла;
	//						КонецЦикла;
	//					КонецЦикла;
	//				КонецЦикла;
	//			КонецЦикла;
	//		КонецЦикла;
	//	КонецЦикла;
	//	
	//	ЗначениеВРеквизитФормы(ДеревоЗначений, "ДеревоДокументов");
	//	
	//КонецЕсли;
	
	//Если Элемент.ТекущиеДанные.Скидка > 0 Тогда
	//    Элемент.ТекущиеДанные.Стоимость = Элемент.ТекущиеДанные.Стоимость - Элемент.ТекущиеДанные.Стоимость * Элемент.ТекущиеДанные.Скидка / 100;
	//КонецЕсли;
	
	РассчитатьНовыеЦены();
	
КонецПроцедуры

Процедура РассчитатьНовыеЦены()
	
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоДокументов");
	
	Объект.СтоимостьОтмеченныхКОтгрузкеТоваров = 0;
	//ДеревоЗначений
	Для каждого Строка1 Из ДеревоЗначений.Строки Цикл
		Для каждого Строка2 Из Строка1.Строки Цикл
			Для каждого Строка3 Из Строка2.Строки Цикл
				Для каждого Строка4 Из Строка3.Строки Цикл
					Для каждого Строка5 Из Строка4.Строки Цикл
						//Для каждого Строка6 Из Строка5.Строки Цикл
						Для каждого СтрокаТ Из Строка5.Строки Цикл
							//ОбработкаПрерыванияПользователя();
							
							Если СтрокаТ.Отгрузить Тогда
								Объект.СтоимостьОтмеченныхКОтгрузкеТоваров = Объект.СтоимостьОтмеченныхКОтгрузкеТоваров + СтрокаТ.Стоимость;
							КонецЕсли;
							
						КонецЦикла;	
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьСвойстваСтроки(Куда, Выборка)
	//Для каждого строка Из Выборка Цикл
	//	новая = Куда.Добавить();
	//	ЗаполнитьЗначенияСвойств(новая, строка);
	//	ЗаполнитьСвойстваСтроки(новая.Строки, строка.Строки);
	//КонецЦикла;
	
	Для каждого Строка Из Выборка Цикл
		Новая = Куда.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(Новая, Строка);
		ЗаполнитьСвойстваСтроки(Новая, Строка.Строки);
	КонецЦикла;
	
КонецПроцедуры



Процедура ДеревоДокументовПриИзмененииФлажка(Элемент, Колонка)
	
	
КонецПроцедуры

Процедура КоманднаяПанель3НСнятьФлажки(Кнопка)
	СнятьФлажки();
	Отметки.Очистить();
КонецПроцедуры

Процедура СнятьФлажки()
	ВыбраннаяСумма = 0;
	
	Для каждого строка Из ДеревоДокументов.Строки Цикл
		//ОбработкаПрерыванияПользователя();
		строка.Флаг = Ложь;
		//УстановитьФлажкиВыше(строка, строка.Флаг);
	КонецЦикла;
КонецПроцедуры

Процедура КоманднаяПанель3НУстановитьФлажки(Кнопка)
	
	ВыбраннаяСумма = 0;
	
	Для каждого строка Из ДеревоДокументов.Строки Цикл
		//ОбработкаПрерыванияПользователя();
		строка.Флаг = Истина;
		//УстановитьФлажкиВыше(строка, строка.Флаг);
	КонецЦикла;
	
	//РассчитатьНовыеЦены();
	
КонецПроцедуры


&НаСервере
Процедура ДеревоДокументовОтгрузитьПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура УстановитьФлажкиВыше(Элемент, Флаг)
	
	Строка = Элемент.ТекущиеДанные;
	
	
	Для каждого Строка1 Из Строка Цикл
	//	Строка1.Флаг = Флаг;
		Если строка.Строки.Количество() = 0 Тогда
	//		ВыбраннаяСумма = ВыбраннаяСумма + ?(флаг, 1, -1) * строка.СуммаСНДС;
		ИНаче
			УстановитьФлажкиВыше(Строка1, Флаг);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиНиже(Элемент, Отгрузить)
	
	//Строка = Элемент.ТекущиеДанные;
	//Флаг = Элемент.Отгрузить;
	//ДеревоДокументов.НайтиПоИдентификатору(Элементы.ДеревоДокументов.ТекущаяСтрока).ПолучитьРодителя()
	//Элемент.ПолучитьРодителя()
	Если Не Элемент = Неопределено Тогда
		Если Не Элемент.ПолучитьРодителя() = Неопределено Тогда
			Если Отгрузить и Не Элемент.БлокировкиОтгрузок Тогда
				ЭлементРодитель = Элемент.ПолучитьРодителя();
				ЭлементРодитель.Отгрузить = Отгрузить;
				//Элемент.Родитель.Флаг = Флаг;
				//Родитель = ЭлементРодитель.ПолучитьРодителя();
				//Родитель.ПолучитьРодителя()
				//Строка = ЭлементРодитель.ТекущиеДанные;
				УстановитьФлажкиНиже(ЭлементРодитель, Отгрузить);
			Иначе
				фыв = Ложь;
				ЭлементРодитель = Элемент.ПолучитьРодителя();
				Родитель = ЭлементРодитель.ПолучитьЭлементы();
				Для каждого Строка Из Родитель Цикл
					фыв = фыв или Строка.Отгрузить;
					Если фыв Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				ЭлементРодитель.Отгрузить = фыв;
				УстановитьФлажкиНиже(Элемент.ПолучитьРодителя(), Отгрузить);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораДействия(СтруктураПереденныхДанных, Строка) Экспорт
	
	Если Не СтруктураПереденныхДанных = Неопределено Тогда
		Действие = СтруктураПереденныхДанных.Действие;
		
		Если Не Действие = "Отменить" Тогда
			Объект.ДатаПолученияЦен = СтруктураПереденныхДанных.ДатаЦен;
			Объект.ПроцентСкидки = СтруктураПереденныхДанных.ПроцентСкидки;
		КонецЕсли;
		
		Строка.Отгрузить = Истина;
		
		Если Действие = "ОтгрузитьПоЦенамПрайса" Тогда
			ДеревоДокументовУстановитьФлажки(Строка, "ЦенаПрайса");
		ИначеЕсли Действие = "ОтгрузитьПоЦенамЗаказа" Тогда
			ДеревоДокументовУстановитьФлажки(Строка, "ЦенаЗаказа");
		ИначеЕсли Действие = "ИсключитьИзОтгрузкиРазличные" Тогда
			ДеревоДокументовУстановитьФлажки(Строка, "ЦенаИсключитьРазличные");
		Иначе
			Строка.Отгрузить = Ложь;
		КонецЕсли;
	Иначе
		Строка.Отгрузить = Ложь;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДокументовПриИзменении(Элемент)
	
	Строка = Элемент.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидЦены) Тогда
		Сообщить("Не указан вид цены!");
		Строка.Отгрузить = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Строка.Отгрузить И Не Строка.БлокировкиОтгрузок Тогда
		ПроверкаЦены = ПроверкаРазличающихсяЦен(Строка);
		
		Если Не ПроверкаЦены И Не Строка.ИспользоватьЦенуПрайса Тогда
			
			СтруктураДляПолученияСкидки = Новый Структура("ДоговорКонтрагента");
			
			Оповещение = Новый ОписаниеОповещения("ПослеВыбораДействия", ЭтотОбъект, Строка);
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.Добавить("Отгрузить по ценам прайс-листа");
			СписокЗначений.Добавить("Отгрузить по ценам заказа");
			СписокЗначений.Добавить("Исключить из отгрузки товары с различающимися ценами");
			СписокЗначений.Добавить("Отменить все");
			
			Отбор = Новый Структура();
			Отбор.Вставить("Дата", Объект.ДатаПолученияЦен);
			Отбор.Вставить("Скидка", Объект.ПроцентСкидки);
			ПараметрыФормы = Новый Структура("Ключ", Отбор);
			  
			ОткрытьФорму("ВнешняяОбработка.гф_ОтгрузкаПоЗаказам.Форма.ФормаВопросаОДатеЦенИСкидкеКлиента",ПараметрыФормы,,,,,Оповещение,);
			
		Иначе
			Строка.Отгрузить = Истина;
			
			ДеревоДокументовУстановитьФлажки(Строка, Неопределено);
			
			УстановитьФлажкиНиже(Строка, Строка.Отгрузить);
			
		КонецЕсли;
		
	ИначеЕсли Не Строка.Отгрузить Тогда
		КоллекцияЭлементовДерева1 = Строка.ПолучитьЭлементы();
		
		Строка.ИспользоватьЦенуПрайса = Ложь;
		Для каждого Строка1 Из КоллекцияЭлементовДерева1 Цикл
			
			Строка1.Отгрузить = Ложь;
			
			КоллекцияЭлементовДерева2 = Строка1.ПолучитьЭлементы();
			Для каждого Строка2 Из КоллекцияЭлементовДерева2 Цикл
				
				Строка2.Отгрузить = Ложь;
				
				КоллекцияЭлементовДерева3 = Строка2.ПолучитьЭлементы();
				Для каждого Строка3 Из КоллекцияЭлементовДерева3 Цикл
					
					Строка3.Отгрузить = Ложь;
					
					КоллекцияЭлементовДерева4 = Строка3.ПолучитьЭлементы();
					Для каждого Строка4 Из КоллекцияЭлементовДерева4 Цикл
						
						Строка4.Отгрузить = Ложь;
						
						КоллекцияЭлементовДерева5 = Строка4.ПолучитьЭлементы();
						Для каждого Строка5 Из КоллекцияЭлементовДерева5 Цикл
							
							Строка5.Отгрузить = Ложь;
							
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;	
		
	УстановитьФлажкиНиже(Строка, Строка.Отгрузить);	
		
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.ИспользоватьЦенуПрайса И ЗначениеЗаполнено(Элемент.ТекущиеДанные.ЦенаПрайс) Тогда
		 Элемент.ТекущиеДанные.Стоимость = Элемент.ТекущиеДанные.КоличествоНоменклатуры * Элемент.ТекущиеДанные.ЦенаПрайс
	КонецЕсли;
		
	Если Элемент.ТекущиеДанные.Скидка > 0 Тогда
		Элемент.ТекущиеДанные.Стоимость = Элемент.ТекущиеДанные.Стоимость - Элемент.ТекущиеДанные.Стоимость * Элемент.ТекущиеДанные.Скидка / 100;
	КонецЕсли;
	
	РассчитатьНовыеЦены();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДокументовУстановитьФлажки(Строка, ДействиеИсточник)
	
	ДействиеЦенаПрайса = "ЦенаПрайса";
	ДействиеЦенаЗаказа = "ЦенаЗаказа";
	ДействиеЦенаИсключить = "ЦенаИсключитьРазличные";
	
	Если Строка.Отгрузить И Не Строка.БлокировкиОтгрузок Тогда
		
		Если ЗначениеЗаполнено(Строка.УпаковочныйЛистСсылка) И ЗначениеЗаполнено(Строка.Цена) Тогда
			РезультатПроверки = ПроверитьЦеныНоменклатуры(Строка.Заказ, ТекущаяДата());
			Если Не РезультатПроверки = Неопределено Тогда
				Если РезультатПроверки.ПроверкаЦены Тогда
					Строка.Отгрузить = Истина;
				ИначеЕсли ДействиеИсточник = ДействиеЦенаПрайса Тогда
					Строка.Отгрузить = Истина;
					Строка.ИспользоватьЦенуПрайса = Истина;
					Строка.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
					Строка.Скидка = Объект.ПроцентСкидки;
				ИначеЕсли ДействиеИсточник = ДействиеЦенаЗаказа Тогда
					Строка.Отгрузить = Истина;
					Строка.ИспользоватьЦенуПрайса = Ложь;
					Строка.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
					Строка.Скидка = Объект.ПроцентСкидки;
				ИначеЕсли ДействиеИсточник = ДействиеЦенаИсключить Тогда
					Строка.Отгрузить = Ложь;
					Строка.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
					Строка.Скидка = Объект.ПроцентСкидки;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Строка.Отгрузить = Истина;
		КонецЕсли;
		
		КоллекцияЭлементовДерева1 = Строка.ПолучитьЭлементы();
		Для каждого Строка1 Из КоллекцияЭлементовДерева1 Цикл
			
			Если Не Строка1.БлокировкиОтгрузок Тогда
				Если ЗначениеЗаполнено(Строка1.УпаковочныйЛистСсылка) И ЗначениеЗаполнено(Строка1.Цена) Тогда
					РезультатПроверки = ПроверитьЦеныНоменклатуры(Строка.Заказ, ТекущаяДата());
					Если Не РезультатПроверки = Неопределено Тогда
						Если РезультатПроверки.ПроверкаЦены Тогда
							Строка1.Отгрузить = Истина;
						ИначеЕсли ДействиеИсточник = ДействиеЦенаПрайса Тогда
							Строка1.Отгрузить = Истина;
							Строка1.ИспользоватьЦенуПрайса = Истина;
							Строка1.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
							Строка1.Скидка = Объект.ПроцентСкидки;
						ИначеЕсли ДействиеИсточник = ДействиеЦенаЗаказа Тогда
							Строка1.Отгрузить = Истина;
							Строка1.ИспользоватьЦенуПрайса = Ложь;
							Строка1.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
							Строка1.Скидка = Объект.ПроцентСкидки;
						ИначеЕсли ДействиеИсточник = ДействиеЦенаИсключить Тогда
							Строка1.Отгрузить = Ложь;
							Строка1.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
							Строка1.Скидка = Объект.ПроцентСкидки;
						КонецЕсли;
					Иначе
						Строка1.Отгрузить = Истина;
					КонецЕсли;
				Иначе
					Строка1.Отгрузить = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			КоллекцияЭлементовДерева2 = Строка1.ПолучитьЭлементы();
			Для каждого Строка2 Из КоллекцияЭлементовДерева2 Цикл
				
				Если Не Строка2.БлокировкиОтгрузок Тогда
					Если ЗначениеЗаполнено(Строка2.УпаковочныйЛистСсылка) И ЗначениеЗаполнено(Строка2.Цена) Тогда
						РезультатПроверки = ПроверитьЦеныНоменклатуры(Строка.Заказ, ТекущаяДата());
						Если Не РезультатПроверки = Неопределено Тогда
							Если РезультатПроверки.ПроверкаЦены Тогда
								Строка2.Отгрузить = Истина;
							ИначеЕсли ДействиеИсточник = ДействиеЦенаПрайса Тогда
								Строка2.Отгрузить = Истина;
								Строка2.ИспользоватьЦенуПрайса = Истина;
								Строка2.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
								Строка2.Скидка = Объект.ПроцентСкидки;
							ИначеЕсли ДействиеИсточник = ДействиеЦенаЗаказа Тогда
								Строка2.Отгрузить = Истина;
								Строка2.ИспользоватьЦенуПрайса = Ложь;
								Строка2.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
								Строка2.Скидка = Объект.ПроцентСкидки;
							ИначеЕсли ДействиеИсточник = ДействиеЦенаИсключить Тогда
								Строка2.Отгрузить = Ложь;
								Строка2.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
								Строка2.Скидка = Объект.ПроцентСкидки;
							КонецЕсли;
						Иначе
							Строка2.Отгрузить = Истина;
						КонецЕсли;
					Иначе
						Строка2.Отгрузить = Истина;	
					КонецЕсли;
				
				КонецЕсли;
				
				КоллекцияЭлементовДерева3 = Строка2.ПолучитьЭлементы();
				Для каждого Строка3 Из КоллекцияЭлементовДерева3 Цикл
					
					Если Не Строка3.БлокировкиОтгрузок Тогда
						Если ЗначениеЗаполнено(Строка3.УпаковочныйЛистСсылка) И ЗначениеЗаполнено(Строка3.Цена) Тогда
							РезультатПроверки = ПроверитьЦеныНоменклатуры(Строка.Заказ, ТекущаяДата());
							Если Не РезультатПроверки = Неопределено Тогда
								Если РезультатПроверки.ПроверкаЦены Тогда
									Строка3.Отгрузить = Истина;
								ИначеЕсли ДействиеИсточник = ДействиеЦенаПрайса Тогда
									Строка3.Отгрузить = Истина;
									Строка3.ИспользоватьЦенуПрайса = Истина;
									Строка3.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
									Строка3.Скидка = Объект.ПроцентСкидки;
								ИначеЕсли ДействиеИсточник = ДействиеЦенаЗаказа Тогда
									Строка3.Отгрузить = Истина;
									Строка3.ИспользоватьЦенуПрайса = Ложь;
									Строка3.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
									Строка3.Скидка = Объект.ПроцентСкидки;
								ИначеЕсли ДействиеИсточник = ДействиеЦенаИсключить Тогда
									Строка3.Отгрузить = Ложь;
									Строка3.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
									Строка3.Скидка = Объект.ПроцентСкидки;
								КонецЕсли;
							Иначе
								Строка3.Отгрузить = Истина;
							КонецЕсли;
						Иначе
							Строка3.Отгрузить = Истина;
						КонецЕсли;
					КонецЕсли;
					
					КоллекцияЭлементовДерева4 = Строка3.ПолучитьЭлементы();
					Для каждого Строка4 Из КоллекцияЭлементовДерева4 Цикл
						
						Если Не Строка4.БлокировкиОтгрузок Тогда
							Если ЗначениеЗаполнено(Строка4.УпаковочныйЛистСсылка) И ЗначениеЗаполнено(Строка4.Цена) Тогда
								РезультатПроверки = ПроверитьЦеныНоменклатуры(Строка.Заказ, ТекущаяДата());
								Если Не РезультатПроверки = Неопределено Тогда
									Если РезультатПроверки.ПроверкаЦены Тогда
										Строка4.Отгрузить = Истина;
									ИначеЕсли ДействиеИсточник = ДействиеЦенаПрайса Тогда
										Строка4.Отгрузить = Истина;
										Строка4.ИспользоватьЦенуПрайса = Истина;
										Строка4.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
										Строка4.Скидка = Объект.ПроцентСкидки;
									ИначеЕсли ДействиеИсточник = ДействиеЦенаЗаказа Тогда
										Строка4.Отгрузить = Истина;
										Строка4.ИспользоватьЦенуПрайса = Ложь;
										Строка4.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
										Строка4.Скидка = Объект.ПроцентСкидки;
									ИначеЕсли ДействиеИсточник = ДействиеЦенаИсключить Тогда
										Строка4.Отгрузить = Ложь;
										Строка4.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
										Строка4.Скидка = Объект.ПроцентСкидки;
									КонецЕсли;
								Иначе
									Строка4.Отгрузить = Истина;
								КонецЕсли;
							Иначе
								Строка4.Отгрузить = Истина;	
							КонецЕсли;
						КонецЕсли;
						
						КоллекцияЭлементовДерева5 = Строка4.ПолучитьЭлементы();
						Для каждого Строка5 Из КоллекцияЭлементовДерева5 Цикл
							
							Если Не Строка5.БлокировкиОтгрузок Тогда
								Если ЗначениеЗаполнено(Строка5.УпаковочныйЛистСсылка) И ЗначениеЗаполнено(Строка5.Цена) Тогда
									РезультатПроверки = ПроверитьЦеныНоменклатуры(Строка.Заказ, ТекущаяДата());
									Если Не РезультатПроверки = Неопределено Тогда
										Если РезультатПроверки.ПроверкаЦены Тогда
											Строка5.Отгрузить = Истина;
										ИначеЕсли ДействиеИсточник = ДействиеЦенаПрайса Тогда
											Строка5.Отгрузить = Истина;
											Строка5.ИспользоватьЦенуПрайса = Истина;
											Строка5.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
											Строка5.Скидка = Объект.ПроцентСкидки;
										ИначеЕсли ДействиеИсточник = ДействиеЦенаЗаказа Тогда
											Строка5.Отгрузить = Истина;
											Строка5.ИспользоватьЦенуПрайса = Ложь;
											Строка5.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
											Строка5.Скидка = Объект.ПроцентСкидки;
										ИначеЕсли ДействиеИсточник = ДействиеЦенаИсключить Тогда
											Строка5.Отгрузить = Ложь;
											Строка5.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
											Строка5.Скидка = Объект.ПроцентСкидки;
										КонецЕсли;
									Иначе
										Строка5.Отгрузить = Истина;
									КонецЕсли;
								КонецЕсли;
							Иначе
								Строка5.Отгрузить = Истина;	
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;		
		
	КонецЕсли;
		
	УстановитьФлажкиНиже(Строка, Строка.Отгрузить);
	
	Если Строка.ИспользоватьЦенуПрайса И ЗначениеЗаполнено(Строка.ЦенаПрайс) Тогда
		 Строка.Стоимость = Строка.КоличествоНоменклатуры * Строка.ЦенаПрайс;
	КонецЕсли;
		
	Если Строка.Скидка > 0 Тогда
		Строка.Стоимость = Строка.Стоимость - Строка.Стоимость * Строка.Скидка / 100;
	КонецЕсли;
	
	РассчитатьНовыеЦены();
	
КонецПроцедуры




&НаКлиенте
Функция ПроверкаРазличающихсяЦен(Строка)
	ПроверкаЦены = Истина;
	
	Если Строка.Отгрузить И Не Строка.БлокировкиОтгрузок Тогда
		Строка.Отгрузить = Ложь;
		//Если Не Строка.БлокировкиОтгрузок Тогда
		Если ЗначениеЗаполнено(Строка.УпаковочныйЛистСсылка) И ЗначениеЗаполнено(Строка.Цена) Тогда
			РезультатПроверки = ПроверитьЦеныНоменклатуры(Строка.Заказ, ТекущаяДата());
			Если Не РезультатПроверки = Неопределено Тогда
				ПроверкаЦены = РезультатПроверки.ПроверкаЦены;
				Строка.ЦенаПрайс = РезультатПроверки.ЦенаПрайс;
			КонецЕсли;
		КонецЕсли;
		//КонецЕсли;
		
		КоллекцияЭлементовДерева1 = Строка.ПолучитьЭлементы();
		Для каждого Строка1 Из КоллекцияЭлементовДерева1 Цикл
			
			Если Не Строка1.БлокировкиОтгрузок Тогда
				Если ЗначениеЗаполнено(Строка1.УпаковочныйЛистСсылка) И ЗначениеЗаполнено(Строка1.Цена) Тогда
					РезультатПроверки = ПроверитьЦеныНоменклатуры(Строка1.Заказ, ТекущаяДата());
					Если Не РезультатПроверки = Неопределено Тогда
						ПроверкаЦены = РезультатПроверки.ПроверкаЦены;
						Строка1.ЦенаПрайс = РезультатПроверки.ЦенаПрайс;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			КоллекцияЭлементовДерева2 = Строка1.ПолучитьЭлементы();
			Для каждого Строка2 Из КоллекцияЭлементовДерева2 Цикл
				
				Если Не Строка2.БлокировкиОтгрузок Тогда
					Если ЗначениеЗаполнено(Строка2.УпаковочныйЛистСсылка) И ЗначениеЗаполнено(Строка2.Цена) Тогда
					РезультатПроверки = ПроверитьЦеныНоменклатуры(Строка2.Заказ, ТекущаяДата());
					Если Не РезультатПроверки = Неопределено Тогда
						ПроверкаЦены = РезультатПроверки.ПроверкаЦены;
						Строка2.ЦенаПрайс = РезультатПроверки.ЦенаПрайс;
					КонецЕсли;
				КонецЕсли;
				КонецЕсли;
				
				КоллекцияЭлементовДерева3 = Строка2.ПолучитьЭлементы();
				Для каждого Строка3 Из КоллекцияЭлементовДерева3 Цикл
					
					Если Не Строка3.БлокировкиОтгрузок Тогда
						Если ЗначениеЗаполнено(Строка3.УпаковочныйЛистСсылка) И ЗначениеЗаполнено(Строка3.Цена) Тогда
							РезультатПроверки = ПроверитьЦеныНоменклатуры(Строка3.Заказ, ТекущаяДата());
							Если Не РезультатПроверки = Неопределено Тогда
								ПроверкаЦены = РезультатПроверки.ПроверкаЦены;
								Строка3.ЦенаПрайс = РезультатПроверки.ЦенаПрайс;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					КоллекцияЭлементовДерева4 = Строка3.ПолучитьЭлементы();
					Для каждого Строка4 Из КоллекцияЭлементовДерева4 Цикл
						
						Если Не Строка4.БлокировкиОтгрузок Тогда
							Если ЗначениеЗаполнено(Строка4.УпаковочныйЛистСсылка) И ЗначениеЗаполнено(Строка4.Цена) Тогда
								РезультатПроверки = ПроверитьЦеныНоменклатуры(Строка4.Заказ, ТекущаяДата());
								Если Не РезультатПроверки = Неопределено Тогда
									ПроверкаЦены = РезультатПроверки.ПроверкаЦены;
									Строка4.ЦенаПрайс = РезультатПроверки.ЦенаПрайс;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
						КоллекцияЭлементовДерева5 = Строка4.ПолучитьЭлементы();
						Для каждого Строка5 Из КоллекцияЭлементовДерева5 Цикл
							
							Если Не Строка5.БлокировкиОтгрузок Тогда
								Если ЗначениеЗаполнено(Строка5.УпаковочныйЛистСсылка) И ЗначениеЗаполнено(Строка5.Цена) Тогда
									РезультатПроверки = ПроверитьЦеныНоменклатуры(Строка5.Заказ, ТекущаяДата());
									Если Не РезультатПроверки = Неопределено Тогда
										ПроверкаЦены = РезультатПроверки.ПроверкаЦены;
										Строка5.ЦенаПрайс = РезультатПроверки.ЦенаПрайс;
									КонецЕсли;
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;		
		
	КонецЕсли;
	
	Возврат ПроверкаЦены;	
	
КонецФункции

&НаСервере
Функция ПроверитьЦеныНоменклатуры(Заказ, Период)
	
	ОтчетОбъект = РеквизитФормыВЗначение("Объект");
	
	Если ЗначениеЗаполнено(ОтчетОбъект.ВидЦены) Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
		|	ЗаказКлиентаТовары.Цена КАК ЗаказЦена,
		|	ЗаказКлиентаТовары.ВидЦены КАК ВидЦены,
		|	ЦеныНоменклатуры25СрезПоследних.Цена КАК ЦенаПрайс
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(&Период, ) КАК ЦеныНоменклатуры25СрезПоследних
		|		ПО ЗаказКлиентаТовары.Номенклатура = ЦеныНоменклатуры25СрезПоследних.Номенклатура
		|ГДЕ
		|	ЗаказКлиентаТовары.Ссылка = &Ссылка
		|	И ЦеныНоменклатуры25СрезПоследних.ВидЦены = &ВидЦены
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказКлиентаТовары.Номенклатура,
		|	ЗаказКлиентаТовары.Цена,
		|	ЗаказКлиентаТовары.ВидЦены,
		|	ЦеныНоменклатуры25СрезПоследних.Цена";
		
		Запрос.УстановитьПараметр("Ссылка", Заказ);
		Запрос.УстановитьПараметр("ВидЦены", ОтчетОбъект.ВидЦены);
		Запрос.УстановитьПараметр("Период", Период);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Если Не ВыборкаДетальныеЗаписи.ЗаказЦена = ВыборкаДетальныеЗаписи.ЦенаПрайс Тогда
				Структура = Новый Структура("ПроверкаЦены, ЦенаПрайс");
				Структура.ПроверкаЦены = Ложь;
				Структура.ЦенаПрайс = ВыборкаДетальныеЗаписи.ЦенаПрайс;
				Возврат Структура;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Неопределено;	
	
КонецФункции














&НаСервереБезКонтекста
Процедура ДеревоДокументовПриАктивизацииСтрокиНаСервере()
	
КонецПроцедуры


&НаКлиенте
Процедура ДеревоДокументовПриАктивизацииСтроки(Элемент)
	
	//Короб = Элемент.ТекущиеДанные;
	//
	//Если Не Короб = Неопределено И Не Короб.Склад = Неопределено И ЗначениеЗаполнено(Короб.Склад) Тогда
	//	ЗаполнитьПоОстаткамКороб(Короб.Клиент, Короб.АдресДоставки, Короб.Склад);
	//КонецЕсли;
	//
	//ДеревоДокументовПриАктивизацииСтрокиНаСервере();
	
КонецПроцедуры


&НаСервере
Процедура ДеревоДокументовСкидкаПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры


&НаКлиенте
Процедура ДеревоДокументовСкидкаПриИзменении(Элемент)
	ДеревоДокументовСкидкаПриИзмененииНаСервере();
	
	
	//Строка = Элемент.ТекущиеДанные;
	//
	//Если Строка.Скидка > 0 Тогда
	//    Строка.Стоимость = Строка.Стоимость - Строка.Стоимость * Строка.Скидка / 100;
	//КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ОтгрузитьНаСервере()
	
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоДокументов");
	
	Таб = Новый ТаблицаЗначений;
	Таб.Колонки.Добавить("Заказ");
    Таб.Колонки.Добавить("УпаковочныйЛист");
    Таб.Колонки.Добавить("КоличествоОстаток");
	Таб.Колонки.Добавить("Цена");
	
	Для каждого Строка1 Из ДеревоЗначений.Строки Цикл
		
		Если Строка1.Отгрузить И ЗначениеЗаполнено(Строка1.УпаковочныйЛистСсылка) Тогда
			Стр = Таб.Добавить();
			Стр.Заказ = Строка1.Заказ;
			Стр.УпаковочныйЛист = Строка1.УпаковочныйЛистСсылка;
			Стр.КоличествоОстаток = Строка1.КоличествоОстаток;
		КонецЕсли;
		
		Для каждого Строка2 Из строка1.Строки Цикл
			
			Если Строка2.Отгрузить И ЗначениеЗаполнено(Строка2.УпаковочныйЛистСсылка) Тогда
				Стр = Таб.Добавить();
				Стр.Заказ = Строка2.Заказ;
				Стр.УпаковочныйЛист = Строка2.УпаковочныйЛистСсылка;
				Стр.КоличествоОстаток = Строка2.КоличествоОстаток;
				Стр.Цена = Строка2.Цена;
			КонецЕсли;
			
			Для каждого Строка3 Из Строка2.Строки Цикл
				
				Если Строка3.Отгрузить И ЗначениеЗаполнено(Строка3.УпаковочныйЛистСсылка) Тогда
					Стр = Таб.Добавить();
					Стр.Заказ = Строка3.Заказ;
					Стр.УпаковочныйЛист = Строка3.УпаковочныйЛистСсылка;
					Стр.КоличествоОстаток = Строка3.КоличествоОстаток;
					Стр.Цена = Строка3.Цена;
				КонецЕсли;
				
				Для каждого Строка4 Из Строка3.Строки Цикл	
					
					Если Строка4.Отгрузить И ЗначениеЗаполнено(Строка4.УпаковочныйЛистСсылка) Тогда
						Стр = Таб.Добавить();
						Стр.Заказ = Строка4.Заказ;
						Стр.УпаковочныйЛист = Строка4.УпаковочныйЛистСсылка;
						Стр.КоличествоОстаток = Строка4.КоличествоОстаток;
						Стр.Цена = Строка4.Цена;
					КонецЕсли;
					
					Для каждого Строка5 Из Строка4.Строки Цикл	
						
						Если Строка5.Отгрузить И ЗначениеЗаполнено(Строка5.УпаковочныйЛистСсылка) Тогда
							Стр = Таб.Добавить();
							Стр.Заказ = Строка5.Заказ;
							Стр.УпаковочныйЛист = Строка5.УпаковочныйЛистСсылка;
							Стр.КоличествоОстаток = Строка5.КоличествоОстаток;
							Стр.Цена = Строка5.Цена;
						КонецЕсли;
						
						Для каждого Строка6 Из Строка5.Строки Цикл	
							
							Если Строка6.Отгрузить И ЗначениеЗаполнено(Строка6.УпаковочныйЛистСсылка) Тогда
								Стр = Таб.Добавить();
								Стр.Заказ = Строка6.Заказ;
								Стр.УпаковочныйЛист = Строка6.УпаковочныйЛистСсылка;
								Стр.КоличествоОстаток = Строка6.КоличествоОстаток;
								Стр.Цена = Строка6.Цена;
							КонецЕсли;
														
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СписокЗаказов = Новый ТаблицаЗначений;
	СписокЗаказов.Колонки.Добавить("ЗаказКлиента");
	СписокЗаказов.Колонки.Добавить("УпаковочныйЛист");
	
	Для Каждого Строка Из Таб Цикл
		ОтказЗапись = Ложь;
		ТабКомплектацияЗаказ = Новый ТаблицаЗначений;
		
		ОбъектЗаказ = Строка.Заказ.ПолучитьОбъект();
		УпЛистНайден = Ложь;
		
		Для Каждого СтрокаУпаковочныеЛисты Из ОбъектЗаказ.гф_УпаковочныеЛисты Цикл
			
			Отказ = Ложь;
			
			Если Строка.УпаковочныйЛист = СтрокаУпаковочныеЛисты.УпаковочныйЛист Тогда
				
				УпЛистНайден = Истина;
				
				ТабКомплектация = Новый ТаблицаЗначений;
				ТабКомплектация.Колонки.Добавить("Номенклатура");
				ТабКомплектация.Колонки.Добавить("Характеристика");
				ТабКомплектация.Колонки.Добавить("Количество");
				Для Каждого СтрокаКомплектация Из СтрокаУпаковочныеЛисты.УпаковочныйЛист.гф_Комплектация.Товары Цикл
					НоваяСтрокаКомплектация = ТабКомплектация.Добавить();
					НоваяСтрокаКомплектация.Номенклатура = СтрокаКомплектация.Номенклатура;
					НоваяСтрокаКомплектация.Характеристика = СтрокаКомплектация.Характеристика;
					НоваяСтрокаКомплектация.Количество = СтрокаКомплектация.Количество;
				КонецЦикла;
				
				ТЗ = Новый ТаблицаЗначений;
				ТЗ = ОбъектЗаказ.Товары.Выгрузить();
				
				Для Каждого СтрокаТовары Из ОбъектЗаказ.Товары Цикл
					
					Если СтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда
						Продолжить;
					Иначе
						
						СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы(
						"Количество, Сумма, СуммаНДС, СуммаСНДС, СуммаРучнойСкидки", "КоличествоУпаковок");
						
						ДополнительныеПараметры = Новый Структура;
						ДополнительныеПараметры.Вставить("СтруктураПересчетаСуммы", СтруктураПересчетаСуммы);
						
						ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтруктуруПересчетаСуммы(СтруктураПересчетаСуммы, СтрокаТовары);
						Для Каждого СТР Из СтруктураПересчетаСуммы.Поля Цикл
							Если СТР.Значение = Неопределено Тогда
								
								СтруктураПересчетаСуммы.Поля[СТР.Ключ] = 0;
								
							КонецЕсли;
						КонецЦикла;
						
						ПараметрыРазбиенияСтроки = ПараметрыРазбиенияСтроки();
						
						Количество = 0;
						Для Каждого СтрокаКомплектацияРазбиение Из ТабКомплектация Цикл
							Если СтрокаКомплектацияРазбиение.Номенклатура = СтрокаТовары.Номенклатура
								И СтрокаКомплектацияРазбиение.Характеристика = СтрокаТовары.Характеристика Тогда
								
								Количество = СтрокаКомплектацияРазбиение.Количество;
								
								ПараметрыОбработки = Новый Структура;
								ПараметрыОбработки.Вставить("ТабличнаяЧасть",           ТЗ);
								ПараметрыОбработки.Вставить("ЭлементФормы",             ЭтаФорма);
								
								ПараметрыОбработки.Вставить("ОповещениеПослеРазбиения", "");
								
								ПараметрыОбработки.Вставить("ПараметрыРазбиенияСтроки", ПараметрыРазбиенияСтроки);
								ПараметрыОбработки.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
								ПараметрыОбработки.Вставить("Количество", Количество);
								
								ВвестиКоличествоДляРазбиения(ПараметрыОбработки, ТЗ, СтрокаТовары, ОбъектЗаказ.Товары, Отказ);
								
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
					КонецЕсли;
					
					Если Отказ Тогда
						Прервать;	
					КонецЕсли;
					
				КонецЦикла;
				
				Если Не Отказ Тогда
					ТабКомплектацияЗаказ = ТЗ.Скопировать();
				Иначе
					ОтказЗапись = Истина;
					Сообщить("Не достаточно остатков " +  ОбъектЗаказ + " и " + Строка.УпаковочныйЛист);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не УпЛистНайден Тогда
				Сообщить("В заказе " + ОбъектЗаказ.Ссылка + " не найден " + Строка.УпаковочныйЛист);
		ИначеЕсли Не ОтказЗапись И ТабКомплектацияЗаказ.Количество() > 0 Тогда
			ОбъектЗаказ.Товары.Загрузить(ТабКомплектацияЗаказ);
			Попытка
				ОбъектЗаказ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				
				Стр = СписокЗаказов.Добавить();
				Стр.ЗаказКлиента = ОбъектЗаказ.Ссылка;
				Стр.УпаковочныйЛист = Строка.УпаковочныйЛист;
			Исключение
				
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	СписокЗаказовСУпаковочнымиЛистами = Новый ТаблицаЗначений;
	СписокЗаказовСУпаковочнымиЛистами.Колонки.Добавить("ЗаказКлиента");
	СписокЗаказовСУпаковочнымиЛистами.Колонки.Добавить("СписокУпаковочныхЛистов");
	
	Для Каждого СтрокаРаспоряжений Из СписокЗаказов Цикл
		
		Нашли = СписокЗаказовСУпаковочнымиЛистами.НайтиСтроки(Новый Структура("ЗаказКлиента", СтрокаРаспоряжений.ЗаказКлиента));
		Если Нашли.Количество() = 0 Тогда
			Стр = СписокЗаказовСУпаковочнымиЛистами.Добавить();
			Стр.ЗаказКлиента = СтрокаРаспоряжений.ЗаказКлиента;
			
			СписокЗначенийУпаковочныйЛист = Новый СписокЗначений;
			СписокЗначенийУпаковочныйЛист.Добавить(СтрокаРаспоряжений.УпаковочныйЛист);
			
			Стр.СписокУпаковочныхЛистов = СписокЗначенийУпаковочныйЛист;
			
		Иначе
			
			Для Каждого СтрЛП Из СписокЗаказовСУпаковочнымиЛистами Цикл
				
				Если СтрЛП.ЗаказКлиента = СтрокаРаспоряжений.ЗаказКлиента Тогда
					СтрЛП.СписокУпаковочныхЛистов.Добавить(СтрокаРаспоряжений.УпаковочныйЛист);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаРаспоряжений Из СписокЗаказовСУпаковочнымиЛистами Цикл
		
		Распоряжения = Новый Массив;
		Распоряжения.Добавить(СтрокаРаспоряжений.ЗаказКлиента);
		
		МассивРаспоряжений.ЗагрузитьЗначения(Распоряжения);
		//УпаковочныйЛистДляОрдера = СтрокаРаспоряжений.УпаковочныйЛист;
		
		УпаковочныйЛистДляОрдера = СтрокаРаспоряжений.СписокУпаковочныхЛистов;
		Попытка
			
			ОформитьРасходныеОрдераНаСервере();
			
			
			
			Для Каждого УП Из УпаковочныйЛистДляОрдера Цикл
				
				УпаковочныйЛистДляОрдера2 = УП.Значение;
				
				ТекущийОрдер = УпаковочныйЛистДляОрдера2.гф_ТекущийОрдер;
				
				Если ЗначениеЗаполнено(ТекущийОрдер) И Не ПустаяСтрока(ТекущийОрдер.ВерсияДанных) Тогда
					
					Агрегация = УпаковочныйЛистДляОрдера2.гф_Агрегация.ПолучитьОбъект();
					Агрегация.гф_Автодействие = Перечисления.гф_АвтодействияКМ.КОтгрузке;
					Агрегация.Записать();
					
				КонецЕсли;
				
			КонецЦикла;
			
		Исключение
			
		КонецПопытки;
		
	КонецЦикла;
	
	
	
КонецПроцедуры

Процедура ДобавитьСтрокуРазбиением(Количество, ПараметрыОбработки, ТЗ, ТекущаяСтрока, Товары, Отказ)
	
	ПараметрыРазбиенияСтроки = ПараметрыОбработки.ПараметрыРазбиенияСтроки;
	ДополнительныеПараметры = ПараметрыОбработки.ДополнительныеПараметры;
	
	Если ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ТЗ.Получить(Товары.Индекс(ТекущаяСтрока))[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] > Количество Тогда
		
		НоваяСтрока  = ТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		
		НоваяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] = Количество;
		
		СтрокаТЗ = ТЗ.Получить(Товары.Индекс(ТекущаяСтрока));
		
		СтрокаТЗ[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] =
		СтрокаТЗ[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] - Количество;
		
		НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
		НоваяСтрока.ДатаОтгрузки = ТекущаяДата();
		
		РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры, СтрокаТЗ);
		
	ИначеЕсли ТЗ.Получить(Товары.Индекс(ТекущаяСтрока))[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] = Количество Тогда
		
		СтрокаТЗ = ТЗ.Получить(Товары.Индекс(ТекущаяСтрока));
		СтрокаТЗ.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
		СтрокаТЗ.ДатаОтгрузки = ТекущаяДата();
		
		РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры, СтрокаТЗ);
	
	Иначе
		
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры, СтрокаТЗ) Экспорт 
	
	ТекущаяСтрока = СтрокаТЗ;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		НоваяСтрока.КодСтроки = 0;
		
		ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы, ТекущаяСтрока);
		ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы, НоваяСтрока);
		//ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы);
		ПересчитатьСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы);
		//РассчитатьСкидкиНаценкиКлиент();
		
		//РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
		
		СтруктураДействий = Новый Структура;
		
		КэшированныеЗначения = Неопределено;
		
		//ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий,"ОбновитьКэшНоменклатура");
		//ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;

КонецПроцедуры

// Пересчитывает суммы в строках, добавленных в структуру пересчета суммы, описание см. функция
//                            ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы.
//
// Параметры:
//  СтруктураПересчетаСуммы - см. ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы
//
Процедура ПересчитатьСуммы(СтруктураПересчетаСуммы) Экспорт
	
	РазрядностиОкругления = Неопределено;
	Если СтруктураПересчетаСуммы.Свойство("РазрядностиОкругления") Тогда
		РазрядностиОкругления = СтруктураПересчетаСуммы.РазрядностиОкругления;
	КонецЕсли;
	
	Для Каждого Строка Из СтруктураПересчетаСуммы.Строки Цикл
		
		Если СтруктураПересчетаСуммы.ИтогКоличество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Коэффициент = Строка[СтруктураПересчетаСуммы.ИмяПоляКоличество] / СтруктураПересчетаСуммы.ИтогКоличество;
		СтруктураПересчетаСуммы.ИтогКоличество = СтруктураПересчетаСуммы.ИтогКоличество - Строка[СтруктураПересчетаСуммы.ИмяПоляКоличество];

		Для Каждого Поле Из СтруктураПересчетаСуммы.Поля Цикл
			
			НовоеЗначение = Поле.Значение * Коэффициент;
			
			Если РазрядностиОкругления <> Неопределено Тогда
				Строка[Поле.Ключ] = Окр(НовоеЗначение, РазрядностиОкругления[Поле.Ключ]);
			Иначе
				Строка[Поле.Ключ] = НовоеЗначение;
			КонецЕсли;
			
			СтруктураПересчетаСуммы.Поля[Поле.Ключ] = Поле.Значение - Строка[Поле.Ключ];

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

Процедура ВвестиКоличествоДляРазбиения(ПараметрыОбработки, ТЗ, СтрокаТовары, Товары, Отказ) Экспорт
	
	Количество = ПараметрыОбработки.Количество;
	
	ВвестиКоличествоДляРазбиенияПослеВвода(Количество, ПараметрыОбработки, ТЗ, СтрокаТовары, Товары, Отказ);
	
КонецПроцедуры

Процедура ВвестиКоличествоДляРазбиенияПослеВвода(Количество, ПараметрыОбработки, ТЗ, СтрокаТовары,  Товары, Отказ) Экспорт
	
	ДобавитьСтрокуРазбиением(Количество, ПараметрыОбработки, ТЗ, СтрокаТовары, Товары, Отказ);
	
КонецПроцедуры
	




// Функция-конструктор дополнительных параметров разбиения строки.
//
// Возвращаемое значение:
//  Структура:
//     * ИмяПоляКоличество - Строка - имя поля, по которому будет происходить разбиение
//     * Заголовок - Строка - заголовок формы ввода числа
//     * РазрешитьНулевоеКоличество - Булево - признак, что в исходной и конечной строке может быть 0
//     * Количество - Неопределено, Число - количество, которое будет отображено в форме редактирования числа;
//          если Неопределенно - будет показано количество, взятое из исходной строки.
//
Функция ПараметрыРазбиенияСтроки() Экспорт
	
	ПараметрыРазбиенияСтроки = Новый Структура;
	ПараметрыРазбиенияСтроки.Вставить("ИмяПоляКоличество", "КоличествоУпаковок");
	ПараметрыРазбиенияСтроки.Вставить("Заголовок", НСтр("ru = 'Введите количество товара в новой строке';
														|en = 'Enter quantity of goods in a new line'"));
	ПараметрыРазбиенияСтроки.Вставить("РазрешитьНулевоеКоличество", Истина);
	ПараметрыРазбиенияСтроки.Вставить("Количество", Неопределено);
	
	Возврат ПараметрыРазбиенияСтроки;
	
КонецФункции

Функция ЗависимыеРеквизитыСтрокой()
	
	Возврат "СуммаБезВозвратнойТары, СуммаНДСБезВозвратнойТары, СуммаСНДСБезВозвратнойТары,
		|СуммаРучнойСкидкиБезВозвратнойТары, СуммаАвтоматическойСкидкиБезВозвратнойТары,
		|СуммаОтмененоБезВозвратнойТары, СуммаНДСОтмененоБезВозвратнойТары, СуммаСНДСОтмененоБезВозвратнойТары,
		|СуммаРучнойСкидкиОтмененоБезВозвратнойТары, СуммаАвтоматическойСкидкиОтмененоБезВозвратнойТары,
		|СуммаОтменено, СуммаНДСОтменено, СуммаСНДСОтменено,
		|СуммаРучнойСкидкиОтменено, СуммаАвтоматическойСкидкиОтменено";
	
КонецФункции

&НаКлиенте
Процедура Отгрузить(Команда)
	
	ОтгрузитьНаСервере();
	
	ПриОткрытии(Ложь);
	//
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРезервыНаСервере(Заказ, УпаковочныйЛист)
	
	мЗаказКлиента = Заказ;
	
	СхемаКомпоновкиДанных = Отчеты.ОстаткиИДоступностьТоваров.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	НастройкиОтчета = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтчета);
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	
    ГруппировкаДетальныеПоля = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
    ГруппировкаДетальныеПоля.Использование = Истина;
    Автополе = ГруппировкаДетальныеПоля.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
    Автополе.Использование = Истина;
	
	ПолеПараметрыДанных	= Новый ПолеКомпоновкиДанных("ПараметрыДанных");
	ПолеСистемныеПоля	= Новый ПолеКомпоновкиДанных("СистемныеПоля"); 
    Для Каждого ПолеВыбора Из КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		ВыбранноеПоле = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Использование	= Не (ПолеВыбора.Поле = ПолеПараметрыДанных ИЛИ ПолеВыбора.Поле = ПолеСистемныеПоля);
		ВыбранноеПоле.Поле			= ПолеВыбора.Поле;
	КонецЦикла;	 
	
	ПараметрОбособленныеТовары = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(
		"ПоказатьОбособленныеТовары");
	Если ПараметрОбособленныеТовары <> Неопределено Тогда
		ПараметрОбособленныеТовары.Значение = Истина;
	КонецЕсли;
	
	ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Номенклатура");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.Использование		= Истина;
	//ЭлементОтбора.ПравоеЗначение	= Объект.Резервы.Выгрузить().ВыгрузитьКолонку("Номенклатура");
	ЭлементОтбора.ПравоеЗначение	= УпаковочныйЛист.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
	ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Склад");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ПравоеЗначение	= мЗаказКлиента.Склад;
	
	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);

	ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.Основной.Запрос;

	ТекстЗапросаВесУпаковки = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
		"Таблица.Номенклатура.ЕдиницаИзмерения", "Таблица.Номенклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаВесНоменклатуры", ТекстЗапросаВесУпаковки);
		
	ТекстЗапросаОбъемУпаковки = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки(
		"Таблица.Номенклатура.ЕдиницаИзмерения", "Таблица.Номенклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаОбъемНоменклатуры", ТекстЗапросаОбъемУпаковки);

	СхемаКомпоновкиДанных.НаборыДанных.Основной.Запрос = ТекстЗапроса;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();    
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	ТипГенератора = Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений");
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, , , ТипГенератора);
    
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
    
    Таблица = Новый ТаблицаЗначений;
    
    ПроцессорВыводаРезультатаКомпоновкиДанных = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ПроцессорВыводаРезультатаКомпоновкиДанных.УстановитьОбъект(Таблица);
    ПроцессорВыводаРезультатаКомпоновкиДанных.Вывести(ПроцессорКомпоновкиДанных);
	
	МассивУдалитьСтроки = Новый Массив;
	Для Каждого СтрокаТЗ Из Таблица Цикл
		Если СтрокаТЗ["ТипЗаписи"] <> "Сейчас" Тогда
			МассивУдалитьСтроки.Добавить(СтрокаТЗ);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдалитьСтроку Из МассивУдалитьСтроки Цикл
		Таблица.Удалить(УдалитьСтроку);
	КонецЦикла;
	ТаблицаОстатки = Таблица.Скопировать();
	ТаблицаОстатки.Свернуть("Склад, Номенклатура, Характеристика, ЗаказНаОтгрузку", "Доступно");
	
	
	
	Если Объект.Наличие.Количество() < 1 Тогда
		//НаличиеДоступнойНоменклатуры = ТаблицаОстатки.СкопироватьКолонки();
		
		Для Каждого СтрокаОстатки Из ТаблицаОстатки Цикл
			Строка = Объект.Наличие.Добавить();
			Строка.Склад = СтрокаОстатки.Склад;
			Строка.Номенклатура = СтрокаОстатки.Номенклатура;
			Строка.Характеристика = СтрокаОстатки.Характеристика;
			Строка.ЗаказНаОтгрузку = СтрокаОстатки.ЗаказНаОтгрузку;
			Строка.Доступно = СтрокаОстатки.Доступно;
		КонецЦикла;
	КонецЕсли;
	//.ЗаполнитьЗначения(, "Склад, Номенклатура, Характеристика, ЗаказНаОтгрузку, Доступно");
	
	НаличиеПроверка = Новый ТаблицаЗначений;
	НаличиеПроверка = Объект.Наличие.Выгрузить();
	Проверка = Истина;
	
	Для Каждого СтрокаУпковочногоЛиста Из УпаковочныйЛист.Товары Цикл
		
		Для Каждого СтрокаНаличие Из НаличиеПроверка Цикл
			
			Если УпаковочныйЛист.гф_Заказ = СтрокаНаличие.ЗаказНаОтгрузку
				И СтрокаУпковочногоЛиста.Номенклатура = СтрокаНаличие.Номенклатура
				И СтрокаУпковочногоЛиста.Характеристика = СтрокаНаличие.Характеристика Тогда
				
				Если СтрокаНаличие.Доступно - СтрокаУпковочногоЛиста.КоличествоУпаковок < 0 Тогда
					Проверка = Ложь;
					Прервать;
				Иначе
					СтрокаНаличие.Доступно = СтрокаНаличие.Доступно - СтрокаУпковочногоЛиста.КоличествоУпаковок; 
					Проверка = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не Проверка Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	Если Проверка Тогда
		
		Для Каждого СтрокаУпковочногоЛиста Из УпаковочныйЛист.Товары Цикл
			
			Для Каждого СтрокаНаличие Из Объект.Наличие Цикл
				
				Если УпаковочныйЛист.гф_Заказ = СтрокаНаличие.ЗаказНаОтгрузку
					И СтрокаУпковочногоЛиста.Номенклатура = СтрокаНаличие.Номенклатура
					И СтрокаУпковочногоЛиста.Характеристика = СтрокаНаличие.Характеристика Тогда
					
					Если Не СтрокаНаличие.Доступно - СтрокаУпковочногоЛиста.КоличествоУпаковок <= 0 Тогда 
						СтрокаНаличие.Доступно = СтрокаНаличие.Доступно - СтрокаУпковочногоЛиста.КоличествоУпаковок; 
						Строка = Объект.ДоступностьУпаковочныхЛистов.Добавить();
						Строка.УпаковочныйЛист = УпаковочныйЛист;
						Строка.Проверка = Истина;
					Иначе
						Строка = Объект.ДоступностьУпаковочныхЛистов.Добавить();
						Строка.УпаковочныйЛист = УпаковочныйЛист;
						Строка.Проверка = Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		//Объект.ДоступностьУпаковочныхЛистов.Свернуть("УпаковочныйЛист, Проверка");
		
	КонецЕсли;
	
	
	
	
	ТаблицаОстаткиДоступноВсего = ТаблицаОстатки.Скопировать();
	ТаблицаОстаткиДоступноВсего.Свернуть("Склад, Номенклатура, Характеристика", "Доступно");
	
	//СтруктураПоиска = Новый Структура("Склад, Номенклатура, Характеристика, ЗаказНаОтгрузку");
	//Для Каждого СтрокаТЧ Из Объект.Резервы Цикл
	//	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЧ);
	//	СтруктураПоиска["ЗаказНаОтгрузку"] = мЗаказКлиента;
	//	НайденныеСтроки = ТаблицаОстатки.НайтиСтроки(СтруктураПоиска);
	//	Доступно = 0;
	//	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
	//		Доступно = Доступно + НайденнаяСтрока["Доступно"];
	//	КонецЦикла;
	//	СтрокаТЧ["ТоварВРезерве"] = Доступно;
	//	
	//	СтруктураПоиска["ЗаказНаОтгрузку"] = Неопределено;
	//	НайденныеСтроки = ТаблицаОстатки.НайтиСтроки(СтруктураПоиска);
	//	Доступно = 0;
	//	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
	//		Доступно = Доступно + НайденнаяСтрока["Доступно"];
	//	КонецЦикла;
	//	СтрокаТЧ["ДоступноНаСкладе"] = Доступно;
	//КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОформитьРасходныеОрдераНаСервере()
	
	ПараметрыПереоформленияРасходныхОрдеров = СкладыСервер.ПараметрыПереоформленияРасходныхОрдеров();
		
	Запрос = Новый Запрос;
	Запрос.Текст =	
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТовары.ЗаказНаВнутреннееПотребление КАК ДокументОтгрузки,
	|	ДокументТовары.Ссылка.Склад КАК Склад
	|ПОМЕСТИТЬ ДокументыОтгрузки
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка В(&МассивРаспоряжений)
	|	И ДокументТовары.Ссылка.ПотреблениеПоЗаказам
	|	И ДокументТовары.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТовары.Ссылка,
	|	ДокументТовары.Склад
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка В(&МассивРаспоряжений)
	|	И ДокументТовары.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТовары.Ссылка,
	|	ДокументТовары.Склад
	|ИЗ
	|	Документ.ЗаказНаВнутреннееПотребление КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка В(&МассивРаспоряжений)
	|	И ДокументТовары.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТовары.ЗаказНаПеремещение,
	|	ДокументТовары.Ссылка.СкладОтправитель
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка В(&МассивРаспоряжений)
	|	И ДокументТовары.Ссылка.ПеремещениеПоЗаказам
	|	И ДокументТовары.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТовары.Ссылка,
	|	ДокументТовары.СкладОтправитель
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка В(&МассивРаспоряжений)
	|	И ДокументТовары.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТовары.Ссылка,
	|	ДокументТовары.СкладОтправитель
	|ИЗ
	|	Документ.ЗаказНаПеремещение КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка В(&МассивРаспоряжений)
	|	И ДокументТовары.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТовары.ЗаказКлиента,
	|	ДокументТовары.Склад
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка В(&МассивРаспоряжений)
	|	И ДокументТовары.Ссылка.РеализацияПоЗаказам
	|	И ДокументТовары.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТовары.Ссылка,
	|	ДокументТовары.Склад
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка В(&МассивРаспоряжений)
	|	И ДокументТовары.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТовары.Ссылка,
	|	ДокументТовары.Склад
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка В(&МассивРаспоряжений)
	|	И ДокументТовары.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТовары.Ссылка,
	|	ДокументТовары.Склад
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка В(&МассивРаспоряжений)
	|	И ДокументТовары.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документ.ЗаказНаСборку,
	|	Документ.Склад
	|ИЗ
	|	Документ.СборкаТоваров КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивРаспоряжений)
	|	И Документ.ЗаказНаСборку <> ЗНАЧЕНИЕ(Документ.ЗаказНаСборку.ПустаяСсылка)
	|	И Документ.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документ.Ссылка,
	|	Документ.Склад
	|ИЗ
	|	Документ.СборкаТоваров КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивРаспоряжений)
	|	И Документ.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТовары.Ссылка,
	|	ДокументТовары.Склад
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка В(&МассивРаспоряжений)
	|	И ДокументТовары.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документ.Ссылка,
	|	Документ.Склад
	|ИЗ
	|	Документ.ЗаказНаСборку КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивРаспоряжений)
	|	И Документ.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТовары.Ссылка,
	|	ДокументТовары.Склад
	|ИЗ
	|	Документ.АктОРасхожденияхПослеПриемки.Товары КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка В(&МассивРаспоряжений)
	|	И ДокументТовары.Ссылка.Проведен
	|
	//++ НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТовары.Распоряжение,
	|	ДокументТовары.Ссылка.Отправитель
	|ИЗ
	|	Документ.ДвижениеПродукцииИМатериалов.Товары КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка В(&МассивРаспоряжений)
	|	И ДокументТовары.Ссылка.ПоРаспоряжениям
	|	И ДокументТовары.Ссылка.Проведен
	|	И ДокументТовары.Ссылка.ХозяйственнаяОперация В(
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаМатериаловВПроизводство),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаМатериаловВКладовую))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТовары.Ссылка,
	|	ДокументТовары.Отправитель
	|ИЗ
	|	Документ.ДвижениеПродукцииИМатериалов КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка В(&МассивРаспоряжений)
	|	И ДокументТовары.Проведен
	|	И ДокументТовары.Ссылка.ХозяйственнаяОперация В(
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаМатериаловВПроизводство),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаМатериаловВКладовую))
	|
	//-- НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документ.Ссылка,
	|	Документ.Склад
	|ИЗ
	|	Документ.ОтгрузкаТоваровСХранения КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивРаспоряжений)
	|	И Документ.Ссылка.Проведен
	|
	//++ НЕ УТ
	//++ Устарело_Производство21
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТовары.Распоряжение,
	|	ДокументТовары.Ссылка.Склад
	|ИЗ
	|	Документ.ПередачаМатериаловВПроизводство.Товары КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка В(&МассивРаспоряжений)
	|	И ДокументТовары.Ссылка.ПередачаПоРаспоряжениям
	|	И ДокументТовары.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТовары.Ссылка,
	|	ДокументТовары.Склад
	|ИЗ
	|	Документ.ПередачаМатериаловВПроизводство КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка В(&МассивРаспоряжений)
	|	И ДокументТовары.Проведен
	//-- Устарело_Производство21
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТовары.Ссылка,
	|	ДокументТовары.Склад
	|ИЗ
	|	Документ.ЗаказМатериаловВПроизводство КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка В(&МассивРаспоряжений)
	|	И ДокументТовары.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТовары.ЗаказПереработчику,
	|	ДокументТовары.Склад
	|ИЗ
	|	Документ.ПередачаСырьяПереработчику.Товары КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка В(&МассивРаспоряжений)
	|	И ДокументТовары.Ссылка.ПередачаПоЗаказам
	|	И ДокументТовары.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТовары.Ссылка,
	|	ДокументТовары.Склад
	|ИЗ
	|	Документ.ПередачаСырьяПереработчику.Товары КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка В(&МассивРаспоряжений)
	|	И ДокументТовары.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТовары.Ссылка,
	|	ДокументТовары.Склад
	|ИЗ
	|	Документ.ЗаказПереработчику.Материалы КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка В(&МассивРаспоряжений)
	|	И ДокументТовары.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТовары.Ссылка,
	|	ДокументТовары.Склад
	|ИЗ
	|	Документ.ЗаказПереработчику2_5.ОбеспечениеМатериаламиИРаботами КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка В(&МассивРаспоряжений)
	|	И ДокументТовары.Ссылка.Проведен
	|
	//-- НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТовары.ЗаказКлиента,
	|	ДокументТовары.Склад
	|ИЗ
	|	Документ.ПередачаТоваровХранителю.Товары КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка В(&МассивРаспоряжений)
	|	И ДокументТовары.Ссылка.ПередачаПоЗаказам
	|	И ДокументТовары.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТовары.Ссылка,
	|	ДокументТовары.Склад
	|ИЗ
	|	Документ.ПередачаТоваровХранителю КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка В(&МассивРаспоряжений)
	|	И ДокументТовары.Ссылка.Проведен
	//++ НЕ УТ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТовары.Ссылка,
	|	ДокументТовары.Склад
	|ИЗ
	|	Документ.ПроизводствоБезЗаказа.МатериалыИРаботы КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка В(&МассивРаспоряжений)
	|	И ДокументТовары.Ссылка.Проведен
	//++ НЕ УТКА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТовары.Ссылка,
	|	ДокументТовары.Склад
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ДокументТовары
	|	ПО ЭтапПроизводства.Ссылка = ДокументТовары.Ссылка
	|	
	|ГДЕ
	|	ЭтапПроизводства.ЗаказПереработчику В(&МассивРаспоряжений)
	|	И ЭтапПроизводства.Проведен
	|	И НЕ ДокументТовары.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТовары.Ссылка,
	|	ДокументТовары.Склад
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка В(&МассивРаспоряжений)
	|	И ДокументТовары.Ссылка.Проведен
	|	И НЕ ДокументТовары.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТовары.ЗаказДавальца,
	|	ДокументТовары.Склад
	|ИЗ
	|	Документ.ПередачаДавальцу.Товары КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка В(&МассивРаспоряжений)
	|	И ДокументТовары.Ссылка.ПередачаПоЗаказам
	|	И ДокументТовары.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТовары.Ссылка,
	|	ДокументТовары.Склад
	|ИЗ
	|	Документ.ПередачаДавальцу.Товары КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка В(&МассивРаспоряжений)
	|	И ДокументТовары.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТовары.Ссылка,
	|	ДокументТовары.Склад
	|ИЗ
	|	Документ.ЗаказДавальца.Продукция КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка В(&МассивРаспоряжений)
	|	И ДокументТовары.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТовары.Ссылка,
	|	ДокументТовары.Склад
	|ИЗ
	|	Документ.ВозвратСырьяДавальцу КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка В(&МассивРаспоряжений)
	|	И ДокументТовары.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТовары.Ссылка,
	|	ДокументТовары.Склад
	|ИЗ
	|	Документ.ЗаказНаРемонт.МатериалыИРаботы КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка В(&МассивРаспоряжений)
	|	И ДокументТовары.Ссылка.Проведен
	//++ Устарело_Производство21
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТовары.Ссылка,
	|	ДокументТовары.Склад
	|ИЗ
	|	Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка В(&МассивРаспоряжений)
	|	И ДокументТовары.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТовары.Ссылка,
	|	ДокументТовары.Склад
	|ИЗ
	|	Документ.КорректировкаЗаказаМатериаловВПроизводство.МатериалыИУслуги КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка В(&МассивРаспоряжений)
	|	И ДокументТовары.Ссылка.Проведен
	|
	//-- Устарело_Производство21
	//-- НЕ УТКА
	//-- НЕ УТ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаданиеНаПеревозкуРаспоряжения.Ссылка КАК ЗаданиеНаПеревозку,
	|	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение КАК ДокументОтгрузки,
	|	ЗаданиеНаПеревозкуРаспоряжения.Склад КАК Склад
	|ПОМЕСТИТЬ ДокументыОтгрузкиЗаданияНаПерервозку
	|ИЗ
	|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
	|ГДЕ
	|	ЗаданиеНаПеревозкуРаспоряжения.Ссылка В(&МассивРаспоряжений)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(Документ.ЗаданиеНаПеревозку.ПустаяСсылка) КАК ЗаданиеНаПеревозку,
	|	ТоварыКОтгрузке.Склад КАК Склад,
	|	ТоварыКОтгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
	|	ТоварыКОтгрузке.Получатель КАК Получатель,
	|	ЕСТЬNULL(РеквизитыРаспоряжения.ДатаДокументаИБ, ДАТАВРЕМЯ(1,1,1)) КАК Дата
	|ПОМЕСТИТЬ ДанныеДляПереоформленияОрдеров
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке КАК ТоварыКОтгрузке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыОтгрузки КАК ДокументыОтгрузки
	|		ПО ТоварыКОтгрузке.ДокументОтгрузки = ДокументыОтгрузки.ДокументОтгрузки
	|			И ТоварыКОтгрузке.Склад = ДокументыОтгрузки.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеквизитыРаспоряжения
	|			ПО ТоварыКОтгрузке.ДокументОтгрузки = РеквизитыРаспоряжения.Ссылка
	|				И НЕ РеквизитыРаспоряжения.ДополнительнаяЗапись
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыОтгрузкиЗаданияНаПерервозку.ЗаданиеНаПеревозку,
	|	ТоварыКОтгрузке.Склад,
	|	ТоварыКОтгрузке.ДокументОтгрузки,
	|	ТоварыКОтгрузке.Получатель,
	|	ДокументыОтгрузкиЗаданияНаПерервозку.ЗаданиеНаПеревозку.ДатаВремяРейсаПланС
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке КАК ТоварыКОтгрузке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыОтгрузкиЗаданияНаПерервозку КАК ДокументыОтгрузкиЗаданияНаПерервозку
	|		ПО ТоварыКОтгрузке.ДокументОтгрузки = ДокументыОтгрузкиЗаданияНаПерервозку.ДокументОтгрузки
	|			И ТоварыКОтгрузке.Склад = ДокументыОтгрузкиЗаданияНаПерервозку.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныДляПереофрмленияОррдеров.ЗаданиеНаПеревозку,
	|	ДанныДляПереофрмленияОррдеров.Склад,
	|	ДанныДляПереофрмленияОррдеров.ДокументОтгрузки,
	|	ДанныДляПереофрмленияОррдеров.Получатель
	|ИЗ
	|	ДанныеДляПереоформленияОрдеров КАК ДанныДляПереофрмленияОррдеров
	|ГДЕ
	|	ДанныДляПереофрмленияОррдеров.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|	И ДанныДляПереофрмленияОррдеров.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке <= ДанныДляПереофрмленияОррдеров.Дата";
	
	//Запрос.УстановитьПараметр("МассивРаспоряжений", МассивРаспоряжений.ВыгрузитьЗначения());
	//МассивРаспоряжений = Новый Массив;
	//МассивРаспоряжений.Добавить(Распоряжение);
	//спПараметр = Новый СписокЗначений;
	//спПараметр.Добавить(Распоряжение);
	
	Запрос.УстановитьПараметр("МассивРаспоряжений", МассивРаспоряжений.ВыгрузитьЗначения());
	
	УстановитьПривилегированныйРежим(Истина);
	ЗапросПакет = Запрос.ВыполнитьПакет(); 
	Выборка = ЗапросПакет[3].Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	СоздатьОрдера = Ложь; 
	
	Пока Выборка.СледующийПоЗначениюПоля("ЗаданиеНаПеревозку") Цикл
		
		ПараметрыПереоформленияРасходныхОрдеров.ЗаданиеНаПеревозку = Выборка.ЗаданиеНаПеревозку;
		
		Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл		
			
			СоздатьОрдера = Истина;
			
			ПараметрыПереоформленияРасходныхОрдеров.Склад = Выборка.Склад;
			
			Пока Выборка.СледующийПоЗначениюПоля("Получатель") Цикл	
				
				ПараметрыПереоформленияРасходныхОрдеров.Получатель = Выборка.Получатель;
				
				Распоряжения = Новый Массив;
				Пока Выборка.Следующий() Цикл
					Распоряжения.Добавить(Выборка.ДокументОтгрузки);
				КонецЦикла;
				
				ПараметрыПереоформленияРасходныхОрдеров.РаспоряженияНаОтгрузку = Распоряжения;
				
				//
				ПараметрыПереоформленияРасходныхОрдеров.Вставить("гф_УпаковочныйЛист");
				ПараметрыПереоформленияРасходныхОрдеров.гф_УпаковочныйЛист = УпаковочныйЛистДляОрдера;
				//
				
				СтруктураЗадания = СкладыСервер.ПереоформитьРасходныеОрдера(ПараметрыПереоформленияРасходныхОрдеров);
				//Для Каждого ОформленныеОрдераСтрока Из СтруктураЗадания.ОформленныеОрдера Цикл
				//	НоваяСтрока = ОформленныеРасходныеОрдера.Добавить();
				//	ЗаполнитьЗначенияСвойств(НоваяСтрока, ОформленныеОрдераСтрока);
				//	НоваяСтрока.Получатель = Выборка.Получатель;
				//КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
	Если Не СоздатьОрдера Тогда
		Отказ = Истина;

		ТекстСообщения = НСтр("ru = 'По выбранным распоряжениям не требуется отгрузка товаров.';
								|en = 'Goods shipment is not required for the selected references.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры


Процедура ПометкаКОтгрузкеУпаковочногоЛиста(УпаковочныйЛист)

КонецПроцедуры

//Функция ИмяТаблицыПоСсылке(Ссылка) Экспорт
//    
//    Возврат Метаданные.НайтиПоТипу(ТипЗнч(Ссылка)).ПолноеИмя();
//    
//КонецФункции