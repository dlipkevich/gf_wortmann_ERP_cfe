Перем Отметки;

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Заполнить(Истина);
	
	РазвернутьДеревоДокументов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеДанными()
	
	Отметки = Новый ТаблицаЗначений;
	Отметки.Колонки.Добавить("Клиент");
	Отметки.Колонки.Добавить("АдресДоставки");
	Отметки.Колонки.Добавить("Склад");
	Отметки.Колонки.Добавить("ДокументПоступления");
	Отметки.Колонки.Добавить("Заказ");
	Отметки.Колонки.Добавить("УпаковочныйЛист");
	
	ОтчетОбъект = РеквизитФормыВЗначение("Объект");
	
	СхемаКомпоновки = ОтчетОбъект.ПолучитьМакет("СхемаКомпоновки");
	
	Объект.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
	Объект.КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
	
	СхемаКомпоновкиНоменклатуры = ОтчетОбъект.ПолучитьМакет("СхемаКомпоновкиНоменклатуры");
	
	Объект.КомпоновщикНастроекНоменклатуры.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиНоменклатуры));
	Объект.КомпоновщикНастроекНоменклатуры.ЗагрузитьНастройки(СхемаКомпоновкиНоменклатуры.НастройкиПоУмолчанию);
	
	ДатаПолученияЦен = ТекущаяДата();
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ЗаполнитьПоОстаткам(ОтчетОбъект, СхемаКомпоновки, СхемаКомпоновкиНоменклатуры);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	
	Заполнить(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура Заполнить(ПервоеОткрытие)
	
	Если Не ПервоеОткрытие И НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		//Сообщить("Не указан Склад!");
		ТекстСообщения = НСтр("ru = 'Не указан Склад!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЗаполнениеДанными();
	
	РазвернутьДеревоДокументов();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткам(ОтчетОбъект, СхемаКомпоновки, СхемаКомпоновкиНоменклатуры)
	
	Дерево = ПолучитьРезультатКомпоновкиДанных(ОтчетОбъект.Склад, ОтчетОбъект.Клиент, СхемаКомпоновки);
	
	Объект.Наличие.Очистить();
	Объект.ДоступностьУпаковочныхЛистов.Очистить();
	
	ЗаполнитьТаблицуОстатков(Дерево, ОтчетОбъект.Склад, СхемаКомпоновкиНоменклатуры);
	
	// Проверка доступности номенклатуры для формирования расходного ордера,
	// формирование списка упаковочных листов не прошедших проверку
	ПроверкаДоступностиНоменклатуры(Дерево);
	
	// Удаление строк с упаковочными листами по которым не достаточно номенклатуры для формирования расходного ордера
	УдалениеСтрокСУпаковочнымиЛистамиСверхДоступныхОстатков(Дерево);
	
	// Удаление родителей строк где отсутсвуют упаковочные лмсты полностью
	УдалитьСтрокиБезУпаковочногоЛиста(Дерево);
	
	РассчитатьНовыеЦены(Дерево);
	
	РассчитатьЛимиты(Дерево);
	
	ПолучитьБлокировки(Дерево);
	
	ДеревоДокументовЭлементы = ДеревоДокументов.ПолучитьЭлементы();
	ДеревоДокументовЭлементы.Очистить();
	
	ЗаполнитьСвойстваСтроки(ДеревоДокументов, Дерево.Строки);
		
КонецПроцедуры

Процедура ЗаполнитьТаблицуОстатков(Дерево, Склад, СхемаКомпоновкиДанных)
	
	ТЗУпаковочныеЛисты = Новый ТаблицаЗначений;
	ТЗУпаковочныеЛисты.Колонки.Добавить("УпаковочныйЛист");

	Для каждого Строка Из Дерево.Строки Цикл
		Для каждого Строка_Н Из Строка.Строки Цикл
			Для каждого Строка_Т Из Строка_Н.Строки Цикл
				
				Стр = ТЗУпаковочныеЛисты.Добавить();
				Стр.УпаковочныйЛист = Строка_Т.УпаковочныйЛистСсылка;

			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	СсылкаУпаковочныеЛисты = ТЗУпаковочныеЛисты.ВыгрузитьКолонку("УпаковочныйЛист");

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УпаковочныйЛистТовары.Номенклатура КАК Номенклатура
		|ИЗ
		|	Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
		|ГДЕ
		|	УпаковочныйЛистТовары.Ссылка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаУпаковочныеЛисты);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗНоменклатура = РезультатЗапроса.Выгрузить();
	
	ТЗНоменклатура.Свернуть("Номенклатура");
		
	КомпоновщикНастроек = Объект.КомпоновщикНастроекНоменклатуры;
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	
    ГруппировкаДетальныеПоля = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
    ГруппировкаДетальныеПоля.Использование = Истина;
    Автополе = ГруппировкаДетальныеПоля.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
    Автополе.Использование = Истина;
	
	ПолеПараметрыДанных				= Новый ПолеКомпоновкиДанных("ПараметрыДанных");
	ПолеСистемныеПоля				= Новый ПолеКомпоновкиДанных("СистемныеПоля");
	
    Для Каждого ПолеВыбора Из КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		ВыбранноеПоле = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Использование	= Не (ПолеВыбора.Поле = ПолеПараметрыДанных ИЛИ ПолеВыбора.Поле = ПолеСистемныеПоля);
		ВыбранноеПоле.Поле			= ПолеВыбора.Поле;
	КонецЦикла;	 
	
	ПараметрОбособленныеТовары = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(
		"ПоказатьОбособленныеТовары");
	Если ПараметрОбособленныеТовары <> Неопределено Тогда
		ПараметрОбособленныеТовары.Значение = Истина;
	КонецЕсли;
	
	ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Номенклатура");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.Использование		= Истина;
	//ЭлементОтбора.ПравоеЗначение	= УпаковочныйЛист.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура");
	ЭлементОтбора.ПравоеЗначение	= ТЗНоменклатура.ВыгрузитьКолонку("Номенклатура");
	
	ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Склад");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ПравоеЗначение	= Склад;
	
	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);

	ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.Основной.Запрос;

	ТекстЗапросаВесУпаковки = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
		"Таблица.Номенклатура.ЕдиницаИзмерения", "Таблица.Номенклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаВесНоменклатуры", ТекстЗапросаВесУпаковки);
		
	ТекстЗапросаОбъемУпаковки = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки(
		"Таблица.Номенклатура.ЕдиницаИзмерения", "Таблица.Номенклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаОбъемНоменклатуры", ТекстЗапросаОбъемУпаковки);

	СхемаКомпоновкиДанных.НаборыДанных.Основной.Запрос = ТекстЗапроса;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	ТипГенератора = Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений");
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, , , ТипГенератора);
    
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
    
    ТаблицаКомпоновкаДанных = Новый ТаблицаЗначений;
    
    ПроцессорВыводаРезультатаКомпоновкиДанных = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ПроцессорВыводаРезультатаКомпоновкиДанных.УстановитьОбъект(ТаблицаКомпоновкаДанных);
    ПроцессорВыводаРезультатаКомпоновкиДанных.Вывести(ПроцессорКомпоновкиДанных);
	
	МассивУдалитьСтроки = Новый Массив;
	Для Каждого Строка Из ТаблицаКомпоновкаДанных Цикл
		Если Строка["ТипЗаписи"] <> "Сейчас" Тогда
			МассивУдалитьСтроки.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдалитьСтроку Из МассивУдалитьСтроки Цикл
		ТаблицаКомпоновкаДанных.Удалить(УдалитьСтроку);
	КонецЦикла;
	
	ТаблицаОстатки = ТаблицаКомпоновкаДанных.Скопировать();
	ТаблицаОстатки.Свернуть("ЗаказНаОтгрузку, Склад, Номенклатура, Характеристика, ЗаказНаОтгрузку", "Доступно");
	
	// Зополнение таблицы "Наличие" остатками на складе, данные таблицы используются несколько раз
	Если Объект.Наличие.Количество() < 1 Тогда
		Для Каждого СтрокаОстатки Из ТаблицаОстатки Цикл
			Строка = Объект.Наличие.Добавить();
			Строка.ЗаказНаОтгрузку = СтрокаОстатки.ЗаказНаОтгрузку;
			Строка.Склад = СтрокаОстатки.Склад;
			Строка.Номенклатура = СтрокаОстатки.Номенклатура;
			Строка.Характеристика = СтрокаОстатки.Характеристика;
			Строка.Доступно = СтрокаОстатки.Доступно;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьРезультатКомпоновкиДанных(Склад, Клиент, СхемаКомпоновкиДанных)

	КомпоновщикНастроек = Объект.КомпоновщикНастроек;
	
	ПараметрыДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных;
	ПараметрыДанных.УстановитьЗначениеПараметра("ТипУпаковки", Перечисления.ТипыУпаковок.МультитоварнаяУпаковка);
	ПараметрыДанных.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДата());
	ПараметрыДанных.УстановитьЗначениеПараметра("Склад", Склад);
	ПараметрыДанных.УстановитьЗначениеПараметра("Клиент", Клиент);
	ПараметрыДанных.УстановитьЗначениеПараметра("Период", ТекущаяДата());
	
	Если Не ЗначениеЗаполнено(Склад) Тогда
		СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Запрос = СтрЗаменить(СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Запрос, "ДвижениеКМ.Склад = &Склад", "ДвижениеКМ.Склад.*");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Клиент) Тогда
		СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Запрос = СтрЗаменить(СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Запрос, "ЗаказКлиента.Партнер = &Клиент", "ЗаказКлиента.Партнер.*");
	КонецЕсли;
	
	Компоновщик = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = Компоновщик.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(),,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	Дерево = Новый ДеревоЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.ОтображатьПроцентВывода = Истина;
	ПроцессорВывода.УстановитьОбъект(Дерево);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат Дерево;
	
КонецФункции

Процедура ПроверкаДоступностиНоменклатуры(Дерево)
	
	Для Каждого Строка Из Дерево.Строки Цикл
		Для Каждого Строка_Н Из Строка.Строки Цикл
			
			Для Каждого Строка_Т Из Строка_Н.Строки Цикл
				
				ЗаполнитьРезервыНаСервере(Строка_Т.Заказ, Строка_Т.УпаковочныйЛистСсылка);
				
				ПоступленияНомер = Строка_Т.ДокументПоступления.Номер;
				Строка_Т.ДокументПоступленияНомер = ПоступленияНомер;
								
				Строка_Т.УпаковочныйЛистНомер = Строка_Т.УпаковочныйЛистСсылка.Код;
				
			КонецЦикла;
			Строка_Н.ДокументПоступленияНомер = ПоступленияНомер;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьБлокировки(Дерево)
	
	Для Каждого Строка Из Дерево.Строки Цикл
		Для Каждого Строка_Н Из Строка.Строки Цикл
			Для Каждого Строка_Т Из Строка_Н.Строки Цикл
				
				Если Строка_Т.БлокировкиОтгрузок Тогда
					Строка_Т.Блокировка = "Да";
				Иначе
					Строка_Т.Блокировка = "Нет";
				КонецЕсли;
				
			КонецЦикла;	
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалениеСтрокСУпаковочнымиЛистамиСверхДоступныхОстатков(Дерево);
	
	НеДоступныеУпаковочныеЛисты = Объект.ДоступностьУпаковочныхЛистов.НайтиСтроки(Новый Структура("Проверка", Ложь));
	
	Если НеДоступныеУпаковочныеЛисты.Количество() > 0 Тогда
		
		Для Каждого Строка Из Дерево.Строки Цикл
			Для Каждого Строка_Н Из Строка.Строки Цикл
				
				ТЗ = Новый ТаблицаЗначений;
				ТЗ.Колонки.Добавить("УпаковочныйЛистСсылка");
				
				Для Каждого Строка_Т Из Строка_Н.Строки Цикл
					
					НоваяСтрока = ТЗ.Добавить();
					НоваяСтрока.УпаковочныйЛистСсылка = Строка_Т.УпаковочныйЛистСсылка;							
					
				КонецЦикла;
				
				Для Каждого СтрокаТЗ Из ТЗ Цикл
					
					НайденныйОбъект = Строка_Н.Строки.НайтиСтроки(Новый Структура("УпаковочныйЛистСсылка", СтрокаТЗ.УпаковочныйЛистСсылка));
					
					Для Каждого СтрокаДоступность Из Объект.ДоступностьУпаковочныхЛистов Цикл
						
						Если СтрокаДоступность.УпаковочныйЛист = НайденныйОбъект[0].УпаковочныйЛистСсылка И Не СтрокаДоступность.Проверка Тогда
							
							Строка_Н.Строки.Удалить(НайденныйОбъект[0]);
							
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;	
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьСтрокиБезУпаковочногоЛиста(ДеревоЗначений)
	
	СпЗнСтрока_Н = Новый ТаблицаЗначений;
	СпЗнСтрока_Н.Колонки.Добавить("Клиент");
	СпЗнСтрока_Н.Колонки.Добавить("АдресДоставки");
	СпЗнСтрока_Н.Колонки.Добавить("Заказ");
	СпЗнСтрока_Н.Колонки.Добавить("ИндексСтроки");
	
	Для Каждого Строка Из ДеревоЗначений.Строки Цикл
		
		ИндексСтроки = Неопределено;
		Для Каждого Строка_Н Из Строка.Строки Цикл
			
			Если Строка_Н.Уровень() = 1 И Строка_Н.Строки.Количество() = 0 Тогда
				ИндексСтроки = Строка.Строки.Индекс(Строка_Н);
			КонецЕсли;
			
			Если Не ИндексСтроки = Неопределено Тогда
				
				Стр = СпЗнСтрока_Н.Добавить();
				Стр.Заказ = Строка_Н.Заказ;
				Стр.ИндексСтроки = ИндексСтроки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого Строка Из ДеревоЗначений.Строки Цикл
		
		Для Каждого Строка_Н Из Строка.Строки Цикл
			
			Счетчик = Строка.Строки.Количество() - 1;
			Пока Счетчик >= 0 Цикл
				
				Для Каждого СтрокаСпЗнСтрока_Н Из СпЗнСтрока_Н Цикл
					
					Если Строка.Строки[Счетчик].Заказ = СтрокаСпЗнСтрока_Н.Заказ Тогда
						
						Строка.Строки.Удалить(СтрокаСпЗнСтрока_Н.ИндексСтроки);
						
						//Если Счетчик = 0 Тогда
							Прервать;
						//КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Счетчик = Счетчик - 1;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СпЗнСтрока_Н.Очистить();
	
	Для Каждого Строка Из ДеревоЗначений.Строки Цикл
		
		ИндексСтроки = Неопределено;
		
		Если Строка.Уровень() = 0 И Строка.Строки.Количество() = 0 Тогда
			ИндексСтроки = ДеревоЗначений.Строки.Индекс(Строка);
		КонецЕсли;
		
		Если Не ИндексСтроки = Неопределено Тогда
			
			Стр = СпЗнСтрока_Н.Добавить();
			Стр.Клиент = Строка.Клиент;
			Стр.АдресДоставки = Строка.АдресДоставки;
			Стр.ИндексСтроки = ИндексСтроки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Счетчик = ДеревоЗначений.Строки.Количество() - 1;
	
	Пока Счетчик >= 0 Цикл
		
		Для Каждого СтрокаСпЗнСтрока_Н Из СпЗнСтрока_Н Цикл
			
			Если ДеревоЗначений.Строки[Счетчик].Клиент = СтрокаСпЗнСтрока_Н.Клиент
				И ДеревоЗначений.Строки[Счетчик].АдресДоставки = СтрокаСпЗнСтрока_Н.АдресДоставки Тогда
				
				ДеревоЗначений.Строки.Удалить(СтрокаСпЗнСтрока_Н.ИндексСтроки);
				
				//Если Счетчик = 0 Тогда
					Прервать;
				//КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Счетчик = Счетчик - 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьНовыеЦены(ДеревоЗначений)
	
	ДеревоЗначенийРевизитИзФормы = Ложь;
	
	Если ДеревоЗначений = Неопределено Тогда
		ДеревоЗначений = РеквизитФормыВЗначение("ДеревоДокументов");
		ДеревоЗначенийРевизитИзФормы = Истина;
	КонецЕсли;

	Объект.СтоимостьОтмеченныхКОтгрузкеТоваров = 0;
	
	Для каждого Строка Из ДеревоЗначений.Строки Цикл
		Для каждого Строка_Н Из Строка.Строки Цикл
			Для каждого Строка_Т Из Строка_Н.Строки Цикл
				
				Если Строка_Т.Отгрузить Тогда
					Объект.СтоимостьОтмеченныхКОтгрузкеТоваров = Объект.СтоимостьОтмеченныхКОтгрузкеТоваров + Строка_Т.Стоимость;
				КонецЕсли;
				
			КонецЦикла;	
		КонецЦикла;
	КонецЦикла;
	
	Если ДеревоЗначенийРевизитИзФормы Тогда
		ЗначениеВРеквизитФормы(ДеревоЗначений, "ДеревоДокументов");
		ДеревоЗначений = Неопределено
	КонецЕсли;

КонецПроцедуры

Процедура РассчитатьЛимиты(ДеревоЗначений)
	
	//ДеревоЗначений = РеквизитФормыВЗначение("ДеревоДокументов");
	
	СписокКонтрагенты = Новый СписокЗначений;
	
	СписокЗаказы = Новый СписокЗначений;
	
	ТЗКлиентЗаказ = Новый ТаблицаЗначений;
	ТЗКлиентЗаказ.Колонки.Добавить("Клиент");
	ТЗКлиентЗаказ.Колонки.Добавить("Заказ");
	ТЗКлиентЗаказ.Колонки.Добавить("Организация");
	ТЗКлиентЗаказ.Колонки.Добавить("Сумма");
	
	Для Каждого Строка Из ДеревоЗначений.Строки Цикл
		Для Каждого Строка_Н Из Строка.Строки Цикл
			Для Каждого Строка_Т Из Строка_Н.Строки Цикл
				
				СписокКонтрагенты.Добавить(Строка.Клиент);
				СписокЗаказы.Добавить(Строка_Т.Заказ);
				
				СтрКЗ = ТЗКлиентЗаказ.Добавить();
				СтрКЗ.Клиент = Строка_Т.Клиент;
				СтрКЗ.Заказ = Строка_Т.Заказ;
				СтрКЗ.Организация = Строка_Т.Организация;
				СтрКЗ.Сумма = 0;
				
			КонецЦикла;	
		КонецЦикла;
	КонецЦикла;
	
	ТЗКлиентЗаказ.Свернуть("Клиент, Заказ, Организация", "Сумма");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	гф_ЛимитыКонтрагентовСрезПоследних.Период КАК Период,
		|	гф_ЛимитыКонтрагентовСрезПоследних.Партнер КАК Партнер,
		|	гф_ЛимитыКонтрагентовСрезПоследних.Организация КАК Организация,
		|	гф_ЛимитыКонтрагентовСрезПоследних.ВидЛимита КАК ВидЛимита,
		|	гф_ЛимитыКонтрагентовСрезПоследних.Статус КАК Статус,
		|	гф_ЛимитыКонтрагентовСрезПоследних.Сумма КАК Сумма
		|ИЗ
		|	РегистрСведений.гф_ЛимитыКонтрагентов.СрезПоследних(
		|	&Период,
		|	Партнер в (&Партнер)) КАК гф_ЛимитыКонтрагентовСрезПоследних";

	Запрос.УстановитьПараметр("Партнер", СписокКонтрагенты);
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаВидЛимитаПоКонтрагента = РезультатЗапроса.Выгрузить();
	 
	ТЗЛимит = Новый ТаблицаЗначений;
	ТЗЛимит.Колонки.Добавить("Период");
	ТЗЛимит.Колонки.Добавить("Партнер");
	ТЗЛимит.Колонки.Добавить("Организация");
	ТЗЛимит.Колонки.Добавить("ВидЛимита");
	ТЗЛимит.Колонки.Добавить("Статус");
	ТЗЛимит.Колонки.Добавить("Сумма");
	ТЗЛимит.Колонки.Добавить("СуммаВзаиморасчетов");
	
	Для Каждого Строка Из ТаблицаВидЛимитаПоКонтрагента Цикл
		
		Если ТЗЛимит.Количество() = 0 Тогда
			Стр = ТЗЛимит.Добавить();
			Стр.Период = Строка.Период;
			Стр.Партнер = Строка.Партнер;
			Стр.Организация = Строка.Организация;
			Стр.ВидЛимита = Строка.ВидЛимита;
			Стр.Статус = Строка.Статус;
			Стр.Сумма = Строка.Сумма;
			Стр.СуммаВзаиморасчетов = 0;
		Иначе
			
			НайденЛимит = Ложь;
			
			Для Каждого СтрокаТЗЛимит Из ТЗЛимит Цикл
				
				Если СтрокаТЗЛимит.Партнер = Строка.Партнер
					И СтрокаТЗЛимит.Организация = Строка.Организация
					И СтрокаТЗЛимит.ВидЛимита = Строка.ВидЛимита Тогда
					
					Если СтрокаТЗЛимит.Период < Строка.Период Тогда
						СтрокаТЗЛимит.Период = Строка.Период;
						СтрокаТЗЛимит.Статус = Строка.Статус;
						СтрокаТЗЛимит.Сумма = Строка.Сумма;
						НайденЛимит = Истина;
						Прервать;
					КонецЕсли;
					
					НайденЛимит = Истина;
					Прервать;
					
				Иначе
					НайденЛимит = Ложь;
				КонецЕсли;
				
			КонецЦикла;			 
			
			Если Не НайденЛимит Тогда
				Стр = ТЗЛимит.Добавить();
				Стр.Период = Строка.Период;
				Стр.Партнер = Строка.Партнер;
				Стр.Организация = Строка.Организация;
				Стр.ВидЛимита = Строка.ВидЛимита;
				Стр.Статус = Строка.Статус;
				Стр.Сумма = Строка.Сумма;
				Стр.СуммаВзаиморасчетов = 0;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Получение сумм по расчетам с контрагентами
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлючиАналитикиУчетаПоПартнерам.Ссылка КАК Ссылка,
		|	КлючиАналитикиУчетаПоПартнерам.ВерсияДанных КАК ВерсияДанных,
		|	КлючиАналитикиУчетаПоПартнерам.ПометкаУдаления КАК ПометкаУдаления,
		|	КлючиАналитикиУчетаПоПартнерам.Наименование КАК Наименование,
		|	КлючиАналитикиУчетаПоПартнерам.Партнер КАК Партнер,
		|	КлючиАналитикиУчетаПоПартнерам.Организация КАК Организация,
		|	КлючиАналитикиУчетаПоПартнерам.Контрагент КАК Контрагент,
		|	КлючиАналитикиУчетаПоПартнерам.Договор КАК Договор,
		|	КлючиАналитикиУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	КлючиАналитикиУчетаПоПартнерам.Предопределенный КАК Предопределенный,
		|	КлючиАналитикиУчетаПоПартнерам.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
		|	КлючиАналитикиУчетаПоПартнерам.Представление КАК Представление
		|ПОМЕСТИТЬ ВТ_КлючиАналитики
		|ИЗ
		|	Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитикиУчетаПоПартнерам
		|ГДЕ
		|	КлючиАналитикиУчетаПоПартнерам.Партнер В(&Партнер)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	РасчетыСКлиентамиОстатки.ОбъектРасчетов КАК ОбъектРасчетов,
		|	РасчетыСКлиентамиОстатки.Валюта КАК Валюта,
		|	РасчетыСКлиентамиОстатки.УдалитьЗаказКлиента КАК УдалитьЗаказКлиента,
		|	РасчетыСКлиентамиОстатки.СуммаОстаток КАК СуммаОстаток,
		|	РасчетыСКлиентамиОстатки.КОплатеОстаток КАК КОплатеОстаток,
		|	РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток КАК ОплачиваетсяОстаток,
		|	РасчетыСКлиентамиОстатки.КОтгрузкеОстаток КАК КОтгрузкеОстаток,
		|	РасчетыСКлиентамиОстатки.ОтгружаетсяОстаток КАК ОтгружаетсяОстаток,
		|	ВТ_КлючиАналитики.Организация КАК Организация,
		|	ДоговорыКонтрагентов.гф_Сезон КАК гф_Сезон
		|ИЗ
		|	ВТ_КлючиАналитики КАК ВТ_КлючиАналитики
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки КАК РасчетыСКлиентамиОстатки
		|		ПО ВТ_КлючиАналитики.Ссылка = РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО ВТ_КлючиАналитики.Договор = ДоговорыКонтрагентов.Ссылка";
	
	Запрос.УстановитьПараметр("Партнер", СписокКонтрагенты);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Для Каждого Строка_ЛимитыТЗ Из ТЗЛимит Цикл
			
			Если Не ВыборкаДетальныеЗаписи.АналитикаУчетаПоПартнерам = NULL 
				И Строка_ЛимитыТЗ.Партнер = ВыборкаДетальныеЗаписи.АналитикаУчетаПоПартнерам.Партнер
				И Строка_ЛимитыТЗ.Организация = ВыборкаДетальныеЗаписи.Организация
				И Строка_ЛимитыТЗ.Статус = Справочники.гф_СтатусыЛимитов.Действующий Тогда
				
				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.гф_Сезон) Тогда
					Строка_ЛимитыТЗ.СуммаВзаиморасчетов = Строка_ЛимитыТЗ.СуммаВзаиморасчетов + ВыборкаДетальныеЗаписи.СуммаОстаток;
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	// Получение суммы по не проведенным реализациям
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
	|	РеализацияТоваровУслуг.ЗаказКлиента КАК ЗаказКлиента
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.ЗаказКлиента В (&ЗаказКлиента)
	|	И РеализацияТоваровУслуг.Проведен = ЛОЖЬ
	|	И РеализацияТоваровУслуг.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ЗаказКлиента", СписокЗаказы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Для Каждого Строка_Заказ Из ТЗКлиентЗаказ Цикл
			
			Если Строка_Заказ.Заказ = ВыборкаДетальныеЗаписи.ЗаказКлиента Тогда
				
				Строка_Заказ.Сумма = Строка_Заказ.Сумма + ВыборкаДетальныеЗаписи.СуммаДокумента;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Строка_ЛимитыТЗ Из ТЗЛимит Цикл
		Для Каждого Строка_Заказ Из ТЗКлиентЗаказ Цикл
			
			Если Строка_ЛимитыТЗ.Партнер = Строка_Заказ.Клиент
				И Строка_ЛимитыТЗ.Организация = Строка_Заказ.Организация Тогда
				
				Строка_ЛимитыТЗ.СуммаВзаиморасчетов = Строка_ЛимитыТЗ.СуммаВзаиморасчетов + Строка_Заказ.Сумма;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	ТЗЛимитыКонтрагентов = РеквизитФормыВЗначение("ЛимитыКонтрагентов");
	ТЗЛимитыКонтрагентов.Очистить();
	
	Для Каждого Строка_Лимиты Из ТЗЛимит Цикл
		
		НайденЛимит = Ложь;
		Если Строка_Лимиты.Статус = Справочники.гф_СтатусыЛимитов.Действующий Тогда
			
			Если ТЗЛимитыКонтрагентов.Количество() = 0 Тогда
				Стр = ТЗЛимитыКонтрагентов.Добавить();
				Стр.Период = Строка_Лимиты.Период;
				Стр.Партнер = Строка_Лимиты.Партнер;
				Стр.Организация = Строка_Лимиты.Организация;
				Стр.Статус = Строка_Лимиты.Статус;
				
				Стр.Сумма = Строка_Лимиты.Сумма - Строка_Лимиты.СуммаВзаиморасчетов;
			Иначе
				Для Каждого Строка_ЛимитыТЗ Из ТЗЛимитыКонтрагентов Цикл
					
					Если Строка_ЛимитыТЗ.Партнер = Строка_Лимиты.Партнер И Строка_Лимиты.Статус = Справочники.гф_СтатусыЛимитов.Действующий Тогда
						Строка_ЛимитыТЗ.Сумма = Строка_ЛимитыТЗ.Сумма + Строка_Лимиты.Сумма - Строка_Лимиты.СуммаВзаиморасчетов;
						НайденЛимит = Истина;
					КонецЕсли;
					
				КонецЦикла;
				
				Если Не НайденЛимит Тогда
					Стр = ТЗЛимитыКонтрагентов.Добавить();
					Стр.Период = Строка_Лимиты.Период;
					Стр.Партнер = Строка_Лимиты.Партнер;
					Стр.Организация = Строка_Лимиты.Организация;
					Стр.Статус = Строка_Лимиты.Статус;
					
					Стр.Сумма = Строка_Лимиты.Сумма - Строка_Лимиты.СуммаВзаиморасчетов;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	гф_ПричиныБлокировокСрезПоследних.Период КАК Период,
		|	гф_ПричиныБлокировокСрезПоследних.Партнер КАК Партнер,
		|	гф_ПричиныБлокировокСрезПоследних.Организация КАК Организация,
		|	гф_ПричиныБлокировокСрезПоследних.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	гф_ПричиныБлокировокСрезПоследних.ВидБлокировки КАК ВидБлокировки,
		|	гф_ПричиныБлокировокСрезПоследних.Заблокирован КАК Заблокирован
		|ИЗ
		|	РегистрСведений.гф_ПричиныБлокировок.СрезПоследних(
		|	&Период,
		|	Партнер В (&Партнер)) КАК гф_ПричиныБлокировокСрезПоследних";

	Запрос.УстановитьПараметр("Партнер", СписокКонтрагенты);
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаБлокировок = РезультатЗапроса.Выгрузить();
	БлокировокиКонтрагентовТЗ = РеквизитФормыВЗначение("БлокировокиКонтрагентов");
	
	БлокировокиКонтрагентовТЗ.Очистить();
	
	Для Каждого Строка Из ТаблицаБлокировок Цикл
		
		Если Строка.Заблокирован Тогда
			
			Совпадение = Ложь;
			Если БлокировокиКонтрагентовТЗ.Количество() = 0 Тогда
				Стр = БлокировокиКонтрагентовТЗ.Добавить();
				Стр.Период = Строка.Период;
				Стр.Партнер = Строка.Партнер;
				Стр.Организация = Строка.Организация;
				Стр.ДоговорКонтрагента = Строка.ДоговорКонтрагента;
				Стр.Заблокирован = Строка.Заблокирован;
			Иначе
				
				Для Каждого Строка_БлокировкиТЗ Из БлокировокиКонтрагентовТЗ Цикл
					
					Если Строка_БлокировкиТЗ.Партнер = Строка.Партнер
						И Строка_БлокировкиТЗ.Организация = Строка.Организация
						И Строка_БлокировкиТЗ.ДоговорКонтрагента = Строка.ДоговорКонтрагента Тогда
						
						Совпадение = Истина;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если Не Совпадение Тогда
					
					Стр = БлокировокиКонтрагентовТЗ.Добавить();
					Стр.Период = Строка.Период;
					Стр.Партнер = Строка.Партнер;
					Стр.Организация = Строка.Организация;
					Стр.ДоговорКонтрагента = Строка.ДоговорКонтрагента;
					Стр.Заблокирован = Строка.Заблокирован;
					
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка Из ДеревоЗначений.Строки Цикл
		Для Каждого Строка_Н Из Строка.Строки Цикл
			Для каждого Строка_Т Из Строка_Н.Строки Цикл
				
				Для Каждого Строка_Лимиты Из ТЗЛимитыКонтрагентов Цикл
					Если Строка_Т.Клиент = Строка_Лимиты.Партнер Тогда
						
						Строка_Т.ДействующийЛимит = Строка_Лимиты.Сумма;
						
					КонецЕсли;	         
				КонецЦикла;
				
				Для Каждого Строка_Блокировки Из БлокировокиКонтрагентовТЗ Цикл
					Если Строка_Т.Клиент = Строка_Блокировки.Партнер 
						И Не ЗначениеЗаполнено(Строка_Блокировки.Организация)
						И Не ЗначениеЗаполнено(Строка_Блокировки.ДоговорКонтрагента) Тогда
							
						Строка_Т.БлокировкиОтгрузок = Истина;
						
					ИначеЕсли Строка_Т.Клиент = Строка_Блокировки.Партнер 
						И Строка_Т.Организация = Строка_Блокировки.Организация
						И Строка_Т.Договор = Строка_Блокировки.ДоговорКонтрагента Тогда
								
						Строка_Т.БлокировкиОтгрузок = Истина;		
								
					КонецЕсли;
				КонецЦикла;
								
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСвойстваСтроки(Приемник, Выборка)
	
	Для каждого Строка Из Выборка Цикл
		НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		ЗаполнитьСвойстваСтроки(НоваяСтрока, Строка.Строки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоДокументов()
	
	КоллекцияЭлементовДерева = ДеревоДокументов.ПолучитьЭлементы();
	
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл
		
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		Элементы.ДеревоДокументов.Развернуть(ИдентификаторСтроки, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиНиже(Элемент, Отгрузить)
	
	Если Не Элемент = Неопределено Тогда
		Если Не Элемент.ПолучитьРодителя() = Неопределено Тогда
			Если Отгрузить и Не Элемент.БлокировкиОтгрузок Тогда
				ЭлементРодитель = Элемент.ПолучитьРодителя();
				ЭлементРодитель.Отгрузить = Отгрузить;
				УстановитьФлажкиНиже(ЭлементРодитель, Отгрузить);
			Иначе
				Флаг = Ложь;
				ЭлементРодитель = Элемент.ПолучитьРодителя();
				Родитель = ЭлементРодитель.ПолучитьЭлементы();
				Для каждого Строка Из Родитель Цикл
					Флаг = Флаг или Строка.Отгрузить;
					Если Флаг Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				ЭлементРодитель.Отгрузить = Флаг;
				УстановитьФлажкиНиже(Элемент.ПолучитьРодителя(), Отгрузить);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДокументовПриИзменении(Элемент)
	
	Строка = Элемент.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидЦены) Тогда
		//Сообщить("Не указан вид цены!");
		
		ТекстСообщения = НСтр("ru = 'Не указан вид цены!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Строка.Отгрузить = Ложь;
		Возврат;
	КонецЕсли;
	
	//Если Строка.Отгрузить И Не Строка.БлокировкиОтгрузок Тогда
	Если Строка.Отгрузить Тогда
		ПроверкаЦены = ПроверкаРазличающихсяЦен(Строка);
		
		Если Не ПроверкаЦены И Не Строка.ИспользоватьЦенуПрайса Тогда
			
			Оповещение = Новый ОписаниеОповещения("ПослеВыбораДействия", ЭтотОбъект, Строка);
			
			Отбор = Новый Структура();
			Отбор.Вставить("Дата", Объект.ДатаПолученияЦен);
			Отбор.Вставить("Скидка", Объект.ПроцентСкидки);
			ПараметрыОткрытия = Новый Структура("Ключ", Отбор);
			  
			ОткрытьФорму("Обработка.гф_ОтгрузкаПоЗаказам.Форма.ФормаВопросаОДатеЦенИСкидкеКлиента",ПараметрыОткрытия,,,,,Оповещение,);
			Возврат;
		Иначе
			
			Строка.Отгрузить = Истина;
			
			ДеревоДокументовУстановитьФлажки(Строка, Неопределено);
				
		КонецЕсли;
		
	ИначеЕсли Не Строка.Отгрузить Тогда
		КоллекцияЭлементовДерева1 = Строка.ПолучитьЭлементы();
		
		Строка.ИспользоватьЦенуПрайса = Ложь;
		Для каждого Строка1 Из КоллекцияЭлементовДерева1 Цикл
			
			Строка1.Отгрузить = Ложь;
			
			КоллекцияЭлементовДерева2 = Строка1.ПолучитьЭлементы();
			Для каждого Строка2 Из КоллекцияЭлементовДерева2 Цикл
				
				Строка2.Отгрузить = Ложь;
				
				КоллекцияЭлементовДерева3 = Строка2.ПолучитьЭлементы();
				Для каждого Строка3 Из КоллекцияЭлементовДерева3 Цикл
					
					Строка3.Отгрузить = Ложь;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;	
		
		УстановитьФлажкиНиже(Строка, Строка.Отгрузить);	
		
	КонецЕсли;
	
	УстановитьСтоимость(Элемент.ТекущиеДанные);
	
	РазвернутьДеревоДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтоимость(ТекущиеДанные)
	
	Если ТекущиеДанные.ИспользоватьЦенуПрайса И ЗначениеЗаполнено(ТекущиеДанные.ЦенаПрайс) Тогда
		ТекущиеДанные.Стоимость = ТекущиеДанные.КоличествоНоменклатуры * ТекущиеДанные.ЦенаПрайс
	ИначеЕсли Не ТекущиеДанные.ИспользоватьЦенуПрайса Тогда
		ТекущиеДанные.Стоимость = ТекущиеДанные.КоличествоНоменклатуры * ТекущиеДанные.Цена
	КонецЕсли;
	
	Если ТекущиеДанные.Скидка > 0 Тогда
		ТекущиеДанные.Стоимость = ТекущиеДанные.Стоимость - ТекущиеДанные.Стоимость * ТекущиеДанные.Скидка / 100;
	КонецЕсли;
	
	РассчитатьНовыеЦены(Неопределено);
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораДействия(СтруктураПереденныхДанных, Строка) Экспорт
	
	Если Не СтруктураПереденныхДанных = Неопределено Тогда
		Действие = СтруктураПереденныхДанных.Действие;
		
		Если Не Действие = "Отменить" Тогда
			Объект.ДатаПолученияЦен = СтруктураПереденныхДанных.ДатаЦен;
			Объект.ПроцентСкидки = СтруктураПереденныхДанных.ПроцентСкидки;
		КонецЕсли;
		
		Строка.Отгрузить = Истина;
		
		Если Действие = "ОтгрузитьПоЦенамПрайса" Тогда
			ДеревоДокументовУстановитьФлажки(Строка, "ЦенаПрайса");
		ИначеЕсли Действие = "ОтгрузитьПоЦенамЗаказа" Тогда
			ДеревоДокументовУстановитьФлажки(Строка, "ЦенаЗаказа");
		ИначеЕсли Действие = "ИсключитьИзОтгрузкиРазличные" Тогда
			ДеревоДокументовУстановитьФлажки(Строка, "ЦенаИсключитьРазличные");
		Иначе
			Строка.Отгрузить = Ложь;
		КонецЕсли;
	Иначе
		Строка.Отгрузить = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДокументовУстановитьФлажки(Строка, ДействиеИсточник)
	
	ДействиеЦенаПрайса 		= "ЦенаПрайса";
	ДействиеЦенаЗаказа 		= "ЦенаЗаказа";
	ДействиеЦенаИсключить 	= "ЦенаИсключитьРазличные";
	
	Если Строка.Отгрузить И Не Строка.БлокировкиОтгрузок Тогда
		
		Если ЗначениеЗаполнено(Строка.УпаковочныйЛистСсылка) И ЗначениеЗаполнено(Строка.Цена) Тогда
			РезультатПроверки = ПроверитьЦеныНоменклатуры(Строка.Заказ, ТекущаяДата());
			Если Не РезультатПроверки = Неопределено Тогда
				Если РезультатПроверки.ПроверкаЦены Тогда
					Строка.Отгрузить = Истина;
				ИначеЕсли ДействиеИсточник = ДействиеЦенаПрайса Тогда
					Строка.Отгрузить = Истина;
					Строка.ИспользоватьЦенуПрайса = Истина;
					Строка.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
					Строка.Скидка = Объект.ПроцентСкидки;
				ИначеЕсли ДействиеИсточник = ДействиеЦенаЗаказа Тогда
					Строка.Отгрузить = Истина;
					Строка.ИспользоватьЦенуПрайса = Ложь;
					Строка.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
					Строка.Скидка = Объект.ПроцентСкидки;
				ИначеЕсли ДействиеИсточник = ДействиеЦенаИсключить Тогда
					Строка.Отгрузить = Ложь;
					Строка.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
					Строка.Скидка = Объект.ПроцентСкидки;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Строка.Отгрузить = Истина;
		КонецЕсли;
		
		КоллекцияЭлементовДерева1 = Строка.ПолучитьЭлементы();
		Для каждого Строка1 Из КоллекцияЭлементовДерева1 Цикл
			
			Если Не Строка1.БлокировкиОтгрузок Тогда
				Если ЗначениеЗаполнено(Строка1.УпаковочныйЛистСсылка) И ЗначениеЗаполнено(Строка1.Цена) Тогда
					РезультатПроверки = ПроверитьЦеныНоменклатуры(Строка.Заказ, ТекущаяДата());
					Если Не РезультатПроверки = Неопределено Тогда
						Если РезультатПроверки.ПроверкаЦены Тогда
							Строка1.Отгрузить = Истина;
						ИначеЕсли ДействиеИсточник = ДействиеЦенаПрайса Тогда
							Строка1.Отгрузить = Истина;
							Строка1.ИспользоватьЦенуПрайса = Истина;
							Строка1.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
							Строка1.Скидка = Объект.ПроцентСкидки;
						ИначеЕсли ДействиеИсточник = ДействиеЦенаЗаказа Тогда
							Строка1.Отгрузить = Истина;
							Строка1.ИспользоватьЦенуПрайса = Ложь;
							Строка1.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
							Строка1.Скидка = Объект.ПроцентСкидки;
						ИначеЕсли ДействиеИсточник = ДействиеЦенаИсключить Тогда
							Строка1.Отгрузить = Ложь;
							Строка1.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
							Строка1.Скидка = Объект.ПроцентСкидки;
						КонецЕсли;
					Иначе
						Строка1.Отгрузить = Истина;
					КонецЕсли;
				Иначе
					Строка1.Отгрузить = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			КоллекцияЭлементовДерева2 = Строка1.ПолучитьЭлементы();
			Для каждого Строка2 Из КоллекцияЭлементовДерева2 Цикл
				
				Если Не Строка2.БлокировкиОтгрузок Тогда
					Если ЗначениеЗаполнено(Строка2.УпаковочныйЛистСсылка) И ЗначениеЗаполнено(Строка2.Цена) Тогда
						РезультатПроверки = ПроверитьЦеныНоменклатуры(Строка.Заказ, ТекущаяДата());
						Если Не РезультатПроверки = Неопределено Тогда
							Если РезультатПроверки.ПроверкаЦены Тогда
								Строка2.Отгрузить = Истина;
							ИначеЕсли ДействиеИсточник = ДействиеЦенаПрайса Тогда
								Строка2.Отгрузить = Истина;
								Строка2.ИспользоватьЦенуПрайса = Истина;
								Строка2.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
								Строка2.Скидка = Объект.ПроцентСкидки;
							ИначеЕсли ДействиеИсточник = ДействиеЦенаЗаказа Тогда
								Строка2.Отгрузить = Истина;
								Строка2.ИспользоватьЦенуПрайса = Ложь;
								Строка2.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
								Строка2.Скидка = Объект.ПроцентСкидки;
							ИначеЕсли ДействиеИсточник = ДействиеЦенаИсключить Тогда
								Строка2.Отгрузить = Ложь;
								Строка2.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
								Строка2.Скидка = Объект.ПроцентСкидки;
							КонецЕсли;
						Иначе
							Строка2.Отгрузить = Истина;
						КонецЕсли;
					Иначе
						Строка2.Отгрузить = Истина;	
					КонецЕсли;
					
				КонецЕсли;
				
				КоллекцияЭлементовДерева3 = Строка2.ПолучитьЭлементы();
				Для каждого Строка3 Из КоллекцияЭлементовДерева3 Цикл
					
					Если Не Строка3.БлокировкиОтгрузок Тогда
						Если ЗначениеЗаполнено(Строка3.УпаковочныйЛистСсылка) И ЗначениеЗаполнено(Строка3.Цена) Тогда
							РезультатПроверки = ПроверитьЦеныНоменклатуры(Строка.Заказ, ТекущаяДата());
							Если Не РезультатПроверки = Неопределено Тогда
								Если РезультатПроверки.ПроверкаЦены Тогда
									Строка3.Отгрузить = Истина;
								ИначеЕсли ДействиеИсточник = ДействиеЦенаПрайса Тогда
									Строка3.Отгрузить = Истина;
									Строка3.ИспользоватьЦенуПрайса = Истина;
									Строка3.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
									Строка3.Скидка = Объект.ПроцентСкидки;
								ИначеЕсли ДействиеИсточник = ДействиеЦенаЗаказа Тогда
									Строка3.Отгрузить = Истина;
									Строка3.ИспользоватьЦенуПрайса = Ложь;
									Строка3.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
									Строка3.Скидка = Объект.ПроцентСкидки;
								ИначеЕсли ДействиеИсточник = ДействиеЦенаИсключить Тогда
									Строка3.Отгрузить = Ложь;
									Строка3.ДатаПрайсЛиста = Объект.ДатаПолученияЦен;
									Строка3.Скидка = Объект.ПроцентСкидки;
								КонецЕсли;
							Иначе
								Строка3.Отгрузить = Истина;
							КонецЕсли;
						Иначе
							Строка3.Отгрузить = Истина;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;		
		
	КонецЕсли;
	
	УстановитьФлажкиНиже(Строка, Строка.Отгрузить);
	
	Если Не ДействиеИсточник = Неопределено Тогда
		
		УстановитьСтоимость(Строка);
		
		РазвернутьДеревоДокументов();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПроверкаРазличающихсяЦен(Строка)

	ПроверкаЦены = Истина;
	
	Если Строка.Отгрузить И Не Строка.БлокировкиОтгрузок Тогда
		Строка.Отгрузить = Ложь;
		
		Если ЗначениеЗаполнено(Строка.УпаковочныйЛистСсылка) И ЗначениеЗаполнено(Строка.Цена) Тогда
			РезультатПроверки = ПроверитьЦеныНоменклатуры(Строка.Заказ, ТекущаяДата());
			Если Не РезультатПроверки = Неопределено Тогда
				ПроверкаЦены = РезультатПроверки.ПроверкаЦены;
				Строка.ЦенаПрайс = РезультатПроверки.ЦенаПрайс;
			КонецЕсли;
		КонецЕсли;
			
		КоллекцияЭлементовДерева1 = Строка.ПолучитьЭлементы();
		Для каждого Строка1 Из КоллекцияЭлементовДерева1 Цикл
			
			Если Не Строка1.БлокировкиОтгрузок Тогда
				Если ЗначениеЗаполнено(Строка1.УпаковочныйЛистСсылка) И ЗначениеЗаполнено(Строка1.Цена) Тогда
					РезультатПроверки = ПроверитьЦеныНоменклатуры(Строка1.Заказ, ТекущаяДата());
					Если Не РезультатПроверки = Неопределено Тогда
						ПроверкаЦены = РезультатПроверки.ПроверкаЦены;
						Строка1.ЦенаПрайс = РезультатПроверки.ЦенаПрайс;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			КоллекцияЭлементовДерева2 = Строка1.ПолучитьЭлементы();
			Для каждого Строка2 Из КоллекцияЭлементовДерева2 Цикл
				
				Если Не Строка2.БлокировкиОтгрузок Тогда
					Если ЗначениеЗаполнено(Строка2.УпаковочныйЛистСсылка) И ЗначениеЗаполнено(Строка2.Цена) Тогда
					РезультатПроверки = ПроверитьЦеныНоменклатуры(Строка2.Заказ, ТекущаяДата());
					Если Не РезультатПроверки = Неопределено Тогда
						ПроверкаЦены = РезультатПроверки.ПроверкаЦены;
						Строка2.ЦенаПрайс = РезультатПроверки.ЦенаПрайс;
					КонецЕсли;
				КонецЕсли;
				КонецЕсли;
				
				КоллекцияЭлементовДерева3 = Строка2.ПолучитьЭлементы();
				Для каждого Строка3 Из КоллекцияЭлементовДерева3 Цикл
					
					Если Не Строка3.БлокировкиОтгрузок Тогда
						Если ЗначениеЗаполнено(Строка3.УпаковочныйЛистСсылка) И ЗначениеЗаполнено(Строка3.Цена) Тогда
							РезультатПроверки = ПроверитьЦеныНоменклатуры(Строка3.Заказ, ТекущаяДата());
							Если Не РезультатПроверки = Неопределено Тогда
								ПроверкаЦены = РезультатПроверки.ПроверкаЦены;
								Строка3.ЦенаПрайс = РезультатПроверки.ЦенаПрайс;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;		
		
	КонецЕсли;
	
	Возврат ПроверкаЦены;	
	
КонецФункции

&НаСервере
Функция ПроверитьЦеныНоменклатуры(Заказ, Период)
	
	ОтчетОбъект = РеквизитФормыВЗначение("Объект");
	
	Если ЗначениеЗаполнено(ОтчетОбъект.ВидЦены) Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
		|	ЗаказКлиентаТовары.Цена КАК ЗаказЦена,
		|	ЗаказКлиентаТовары.ВидЦены КАК ВидЦены,
		|	ЦеныНоменклатуры25СрезПоследних.Цена КАК ЦенаПрайс
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(&Период, ) КАК ЦеныНоменклатуры25СрезПоследних
		|		ПО ЗаказКлиентаТовары.Номенклатура = ЦеныНоменклатуры25СрезПоследних.Номенклатура
		|ГДЕ
		|	ЗаказКлиентаТовары.Ссылка = &Ссылка
		|	И ЦеныНоменклатуры25СрезПоследних.ВидЦены = &ВидЦены
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказКлиентаТовары.Номенклатура,
		|	ЗаказКлиентаТовары.Цена,
		|	ЗаказКлиентаТовары.ВидЦены,
		|	ЦеныНоменклатуры25СрезПоследних.Цена";
		
		Запрос.УстановитьПараметр("Ссылка", Заказ);
		Запрос.УстановитьПараметр("ВидЦены", ОтчетОбъект.ВидЦены);
		Запрос.УстановитьПараметр("Период", Период);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Если Не ВыборкаДетальныеЗаписи.ЗаказЦена = ВыборкаДетальныеЗаписи.ЦенаПрайс Тогда
				Структура = Новый Структура("ПроверкаЦены, ЦенаПрайс");
				Структура.ПроверкаЦены = Ложь;
				Структура.ЦенаПрайс = ВыборкаДетальныеЗаписи.ЦенаПрайс;
				Возврат Структура;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Неопределено;	
	
КонецФункции

&НаСервере
Процедура ОтгрузитьНаСервере(Отказ)
	
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоДокументов");
	
	Для Каждого Строка Из ДеревоЗначений.Строки Цикл
		
		Для Каждого Строка_Н Из строка.Строки Цикл
			
			Для Каждого Строка_Т Из Строка_Н.Строки Цикл
				
				Если Строка_Т.Отгрузить И Строка_Т.БлокировкиОтгрузок Тогда
					Отказ = Истина;
					
					ТекстСообщения = СтрШаблон(НСтр("ru = 'У контрагента ""%1"" есть отметка блокировки,
						| необходимо исключить из отгрузки упаковочные листы по контрагенту! '"), Строка_Т.Клиент);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
					Возврат;
				КонецЕсли;
			
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Сбор информации по лимитам контрагента, при привышении лимита общей суммой по упаковочным листам, отмена отгрузки
	ТабСуммаОтгрузки = Новый ТаблицаЗначений;
	ТабСуммаОтгрузки.Колонки.Добавить("Клиент");
	ТабСуммаОтгрузки.Колонки.Добавить("Заказ");
    ТабСуммаОтгрузки.Колонки.Добавить("УпаковочныйЛист");
    ТабСуммаОтгрузки.Колонки.Добавить("Стоимость");
	ТабСуммаОтгрузки.Колонки.Добавить("ДействующийЛимит");
	
	Для Каждого Строка Из ДеревоЗначений.Строки Цикл
		
		Для Каждого Строка_Н Из строка.Строки Цикл
			
			Для Каждого Строка_Т Из Строка_Н.Строки Цикл
				
				Если Строка_Т.Отгрузить И ЗначениеЗаполнено(Строка_Т.УпаковочныйЛистСсылка) Тогда
					Стр = ТабСуммаОтгрузки.Добавить();
					Стр.Клиент = Строка_Т.Клиент;
					Стр.Заказ = Строка_Т.Заказ;
					Стр.УпаковочныйЛист = Строка_Т.УпаковочныйЛистСсылка;
					Стр.Стоимость = Строка_Т.Стоимость;
					Стр.ДействующийЛимит = Строка_Т.ДействующийЛимит;
				КонецЕсли;
			
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТабСуммаОтгрузки.Свернуть("Клиент, ДействующийЛимит", "Стоимость");

	Для Каждого СтрокаКлиент Из ТабСуммаОтгрузки Цикл
		
		Если СтрокаКлиент.Стоимость > Число(СтрокаКлиент.ДействующийЛимит) Тогда
			
			//Сообщить("Сумма по отмеченным коробам клиента " + СтрокаКлиент.Клиент + " превышает лимит!");
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Сумма по отмеченным коробам клиента ""%1"" превышает лимит!'"), СтрокаКлиент.Клиент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Таблица для записи каждого заказа с конкретным списком упаковочных листов по этому заказу,
	// Таблица с новыми строками и количеством для отгрузки получившиеся после учета комплектации по каждому упаковочному листу этого заказа
	// При успешном прохождении проверки наличия комплектации из упаковочного листа  в заказе, то "ВозможнаЗаписьЗаказа" запишется Истина
	// При успешном перепроведении заказе с новой таблицей "НовыеДанныеДляТаблицыПоЗаказу", то в "Перепроведен" запишется Истина
	ТЗ_Заказы = Новый ТаблицаЗначений;
	ТЗ_Заказы.Колонки.Добавить("Заказ");
    ТЗ_Заказы.Колонки.Добавить("УпаковочныеЛисты");
	ТЗ_Заказы.Колонки.Добавить("НовыеДанныеДляТаблицыПоЗаказу");
	ТЗ_Заказы.Колонки.Добавить("Перепроведен");
	ТЗ_Заказы.Колонки.Добавить("ВозможнаЗаписьЗаказа");
	
	Для Каждого Строка Из ДеревоЗначений.Строки Цикл
		
		Для Каждого Строка_Н Из Строка.Строки Цикл
			
			Для Каждого Строка_Т Из Строка_Н.Строки Цикл
				
				Если Строка_Т.Отгрузить И ЗначениеЗаполнено(Строка_Т.УпаковочныйЛистСсылка) Тогда
					
					НайтиЗаказ = ТЗ_Заказы.Найти(Строка_Т.Заказ, "Заказ");
					
					Если НайтиЗаказ = Неопределено Тогда
						СтрокаЗаказы = ТЗ_Заказы.Добавить();
						СтрокаЗаказы.Заказ = Строка_Т.Заказ;
						
						ТЗ_УпаковочныеЛисты = Новый ТаблицаЗначений;
						//ТЗ_УпаковочныеЛисты.Колонки.Добавить("Заказ");
						ТЗ_УпаковочныеЛисты.Колонки.Добавить("УпаковочныйЛист");
						ТЗ_УпаковочныеЛисты.Колонки.Добавить("КоличествоОстаток");
						ТЗ_УпаковочныеЛисты.Колонки.Добавить("Цена");
						ТЗ_УпаковочныеЛисты.Колонки.Добавить("СписокКодовСтроки");
						ТЗ_УпаковочныеЛисты.Колонки.Добавить("Перепроведен");

						СтрокаУпаковочныеЛисты = ТЗ_УпаковочныеЛисты.Добавить();
						
						//СтрокаУпаковочныеЛисты.Заказ 				= Строка_Т.Заказ;
						СтрокаУпаковочныеЛисты.УпаковочныйЛист 		= Строка_Т.УпаковочныйЛистСсылка;
						СтрокаУпаковочныеЛисты.КоличествоОстаток 	= Строка_Т.КоличествоОстаток;
						СтрокаУпаковочныеЛисты.Цена 				= Строка_Т.Цена;
						
						СтрокаЗаказы.УпаковочныеЛисты = ТЗ_УпаковочныеЛисты;
					Иначе
						
						СтрокаУпаковочныеЛисты = НайтиЗаказ.УпаковочныеЛисты.Добавить();
						
						//СтрокаУпаковочныеЛисты.Заказ 				= Строка_Т.Заказ;
						СтрокаУпаковочныеЛисты.УпаковочныйЛист 		= Строка_Т.УпаковочныйЛистСсылка;
						СтрокаУпаковочныеЛисты.КоличествоОстаток 	= Строка_Т.КоличествоОстаток;
						СтрокаУпаковочныеЛисты.Цена 				= Строка_Т.Цена;
						
					КонецЕсли;
				
				КонецЕсли;
			
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТЗ_Заказы.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не отмечен ни один упаковочный лист.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	СписокЗаказов = Новый ТаблицаЗначений;
	СписокЗаказов.Колонки.Добавить("ЗаказКлиента");
	СписокЗаказов.Колонки.Добавить("УпаковочныйЛист");
	СписокЗаказов.Колонки.Добавить("СписокКодовСтроки");
	
	Для Каждого СтрокаЗаказы Из ТЗ_Заказы Цикл
		
		ВозможнаЗаписьЗаказа = Ложь;
		ОбъектЗаказ = СтрокаЗаказы.Заказ.ПолучитьОбъект();
		
		ТЗ_Товары = Новый ТаблицаЗначений;
		ТЗ_Товары = ОбъектЗаказ.Товары.Выгрузить();
		
		// Таблица для получения колонок
		ТЗКолонкиТоваровЗаказа = Новый ТаблицаЗначений;
		ТЗКолонкиТоваровЗаказа = ОбъектЗаказ.Товары.Выгрузить();
		ТЗКолонкиТоваровЗаказа.Очистить();
		
		// Копируем на случай, если один из упаковочных листов не сможет пройти отгрузку по количеству в заказе,
		// тогда заменим таблицу данными до изменения таблицы заказа данными из упаковочного листа
		ТабКомплектацияЗаказ = Новый ТаблицаЗначений;
		ТабКомплектацияЗаказ = ТЗ_Товары.Скопировать();
		
		Для Каждого СтрокаУпаковочныйЛист Из СтрокаЗаказы.УпаковочныеЛисты Цикл
			
			УпЛистНайден = Ложь;
			ОтказЗаписьУпаковочногоЛиста = Ложь;
			
			ТЗ = Новый ТаблицаЗначений;
			ТЗ = ТЗКолонкиТоваровЗаказа.СкопироватьКолонки();
			
			ТабКомплектация = Новый ТаблицаЗначений;
			ТабКомплектация.Колонки.Добавить("Номенклатура");
			ТабКомплектация.Колонки.Добавить("Характеристика");
			ТабКомплектация.Колонки.Добавить("Количество");
			
			// Получение списка номенклатуры входящей в упаковочный лист для последующего разделения строк с вычетом количества
			// согласно комплектации упаковочного листа из таблицы заказа
			Для Каждого СтрокаКомплектация Из СтрокаУпаковочныйЛист.УпаковочныйЛист.Товары Цикл
				НоваяСтрокаКомплектация = ТабКомплектация.Добавить();
				НоваяСтрокаКомплектация.Номенклатура = СтрокаКомплектация.Номенклатура;
				НоваяСтрокаКомплектация.Характеристика = СтрокаКомплектация.Характеристика;
				НоваяСтрокаКомплектация.Количество = СтрокаКомплектация.Количество;
			КонецЦикла;
			
			// Запись кодов строк из заказа для последующей записи в табличную часть упаковочного листа
			СписокКодовСтрокиПоУпаковочнымЛистам = Новый ТаблицаЗначений;
			СписокКодовСтрокиПоУпаковочнымЛистам.Колонки.Добавить("УпаковочныйЛист");
			СписокКодовСтрокиПоУпаковочнымЛистам.Колонки.Добавить("КодСтроки");
			СписокКодовСтрокиПоУпаковочнымЛистам.Колонки.Добавить("Номенклатура");
			СписокКодовСтрокиПоУпаковочнымЛистам.Колонки.Добавить("Характеристика");
			СписокКодовСтрокиПоУпаковочнымЛистам.Колонки.Добавить("Количество");
			
			Для Каждого СтрокаТовары Из ТЗ_Товары Цикл
				
				Если СтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда
					Продолжить;
				Иначе
					
					СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы(
					"Количество, Сумма, СуммаНДС, СуммаСНДС, СуммаРучнойСкидки", "КоличествоУпаковок");
					
					ДополнительныеПараметры = Новый Структура;
					ДополнительныеПараметры.Вставить("СтруктураПересчетаСуммы", СтруктураПересчетаСуммы);
					
					ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтруктуруПересчетаСуммы(СтруктураПересчетаСуммы, СтрокаТовары);
					Для Каждого СтрокаПересчета Из СтруктураПересчетаСуммы.Поля Цикл
						Если СтрокаПересчета.Значение = Неопределено Тогда
							
							СтруктураПересчетаСуммы.Поля[СтрокаПересчета.Ключ] = 0;
							
						КонецЕсли;
					КонецЦикла;
					
					ПараметрыРазбиенияСтроки = ПараметрыРазбиенияСтроки();
					
					Количество = 0;
					
					Для Каждого СтрокаКомплектацияРазбиение Из ТабКомплектация Цикл
						Если СтрокаКомплектацияРазбиение.Номенклатура = СтрокаТовары.Номенклатура
							И СтрокаКомплектацияРазбиение.Характеристика = СтрокаТовары.Характеристика Тогда
							
							Количество = СтрокаКомплектацияРазбиение.Количество;
							
							ПараметрыОбработки = Новый Структура;
							ПараметрыОбработки.Вставить("ТабличнаяЧасть",           	ТЗ);
							ПараметрыОбработки.Вставить("ЭлементФормы",             	ЭтаФорма);
							ПараметрыОбработки.Вставить("ОповещениеПослеРазбиения", 	"");
							ПараметрыОбработки.Вставить("ПараметрыРазбиенияСтроки", 	ПараметрыРазбиенияСтроки);
							ПараметрыОбработки.Вставить("ДополнительныеПараметры", 		ДополнительныеПараметры);
							ПараметрыОбработки.Вставить("Количество", 					Количество);
							
							ДобавитьСтрокуРазбиением(ПараметрыОбработки, ТЗ, СтрокаТовары, ТЗ_Товары, ОтказЗаписьУпаковочногоЛиста,
								СписокКодовСтрокиПоУпаковочнымЛистам, СтрокаУпаковочныйЛист.УпаковочныйЛист);
							
							Прервать;
							
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
				Если ОтказЗаписьУпаковочногоЛиста Тогда
					//Сообщить("Не достаточно остатков " +  ОбъектЗаказ + " и " + СтрокаУпаковочныйЛист.УпаковочныйЛист);
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Не достаточно остатков в ""%1"" по ""%2""'"), ОбъектЗаказ, СтрокаУпаковочныйЛист.УпаковочныйЛист);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					Прервать;	
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не ОтказЗаписьУпаковочногоЛиста Тогда
				
				Для каждого СтрокаТаблицыИсточника Из ТЗ Цикл
					СтрокаТаблицыПриемника = ТЗ_Товары.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
				КонецЦикла;
				
				ТабКомплектацияЗаказ = ТЗ_Товары.Скопировать();
				
				СтрокаУпаковочныйЛист.СписокКодовСтроки = СписокКодовСтрокиПоУпаковочнымЛистам;
				
			Иначе
				
				ТЗ_Товары = ТабКомплектацияЗаказ.Скопировать();
				//Сообщить("Не достаточно остатков в " +  ОбъектЗаказ + " по " + СтрокаУпаковочныйЛист.УпаковочныйЛист);
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не достаточно остатков в ""%1"" по ""%2""'"), ОбъектЗаказ, СтрокаУпаковочныйЛист.УпаковочныйЛист);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
	
		КонецЦикла;
		
		СтрокаЗаказы.НовыеДанныеДляТаблицыПоЗаказу 	= ТЗ_Товары;
		СтрокаЗаказы.ВозможнаЗаписьЗаказа 			= Истина;
		
	КонецЦикла;
	
	Для Каждого СтрокаЗаказы Из ТЗ_Заказы Цикл
		
		Если СтрокаЗаказы.ВозможнаЗаписьЗаказа И СтрокаЗаказы.НовыеДанныеДляТаблицыПоЗаказу.Количество() > 0 Тогда
			
			ОбъектЗаказ = СтрокаЗаказы.Заказ.ПолучитьОбъект();
			
			Попытка
				ОбъектЗаказ.Заблокировать();
			Исключение
				ТекстСообщения =
				СтрШаблон(НСтр("ru = '%1 находится в процессе редактирования и не может быть изменен.'"), ОбъектЗаказ);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,);
				Продолжить;
			КонецПопытки;
			
			// Загрузка таблицы с новыми данными по отгрузке по заказу с учетом комплектации всех прошедших проверку упаковочных листов 
			// и доступного наличии количества номенклатуры для отгрузки в заказе
			ОбъектЗаказ.Товары.Загрузить(СтрокаЗаказы.НовыеДанныеДляТаблицыПоЗаказу);
			
			// Запись нового максимального значения кода строки в заказ, так как ранее разбивали строки в заказе и проставляли код строки
			ТЗМакс = ОбъектЗаказ.Товары.Выгрузить();
			
			МаксКодСтроки = Новый СравнениеЗначений;
			ТЗМакс.Сортировать("КодСтроки Убыв", МаксКодСтроки);
			ОбъектЗаказ.МаксимальныйКодСтроки = ТЗМакс[0].КодСтроки;
			
			// Транзакция проводит документы заказ, расходный ордер, упаковочный лист
			// и изменяет агрегацию (элементы справочника с кодами маркировки)
			НачатьТранзакцию();
			
			Попытка
				
				// Возможна ситуация когда в момент работы обработки по отгрузке, изменятся доступные остатки 
				ОбъектЗаказ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
								
				СтрокаЗаказы.Перепроведен = Истина;
				
			Исключение
				
				СтрокаЗаказы.Перепроведен = Ложь;
				
				Если ТранзакцияАктивна() Тогда
					ОтменитьАктивнуюТранзакцию();
				КонецЕсли;
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Заказ не проведен ""%1"" и расходный ордер не сформирован.'"),
					СтрокаЗаказы.Заказ);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Проведение документа ""Заказ клиента""'"), УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ВызватьИсключение;
				
			КонецПопытки;	
			
			Если СтрокаЗаказы.Перепроведен Тогда
				
				Распоряжения = Новый Массив;
				Распоряжения.Добавить(СтрокаЗаказы.Заказ);
				
				МассивРаспоряжений.ЗагрузитьЗначения(Распоряжения);
				
				УпаковочныйЛистДляОрдера = СтрокаЗаказы.УпаковочныеЛисты;
				
				Попытка
					
					// Проведение документов расходный ордер и упаковочный лист, изменение статуса агрегации (справочник кодов маркировки)
					ОформитьРасходныеОрдераНаСервере(УпаковочныйЛистДляОрдера);
					
					Если ТранзакцияАктивна() Тогда
						ЗафиксироватьАктивнуюТранзакцию();
					КонецЕсли;
					
				Исключение
					
					// Возможна ситуация когда в момент работы обработки по отгрузке, изменятся доступные остатки
					Если ТранзакцияАктивна() Тогда
						ОтменитьАктивнуюТранзакцию();
					КонецЕсли;
					
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Заказ ""%1"" сформирован но расходный ордер не проведен. Выполена отмена изменения заказа!'"),
						СтрокаЗаказы.Заказ);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Проведение документа ""Расходный ордер""'"), УровеньЖурналаРегистрации.Ошибка,,,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ВызватьИсключение;
					
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры, СтрокаТЗ)
	
	ТекущаяСтрока = СтрокаТЗ;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы, ТекущаяСтрока);
		ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы, НоваяСтрока);
		
		ПересчитатьСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы);
		
		СтруктураДействий = Новый Структура;
				
	КонецЕсли;

КонецПроцедуры

// Пересчитывает суммы в строках, добавленных в структуру пересчета суммы, описание см. функция
//                            ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы.
//
// Параметры:
//  СтруктураПересчетаСуммы - см. ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы
//
Процедура ПересчитатьСуммы(СтруктураПересчетаСуммы)
	
	РазрядностиОкругления = Неопределено;
	Если СтруктураПересчетаСуммы.Свойство("РазрядностиОкругления") Тогда
		РазрядностиОкругления = СтруктураПересчетаСуммы.РазрядностиОкругления;
	КонецЕсли;
	
	Для Каждого Строка Из СтруктураПересчетаСуммы.Строки Цикл
		
		Если СтруктураПересчетаСуммы.ИтогКоличество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Коэффициент = Строка[СтруктураПересчетаСуммы.ИмяПоляКоличество] / СтруктураПересчетаСуммы.ИтогКоличество;
		СтруктураПересчетаСуммы.ИтогКоличество = СтруктураПересчетаСуммы.ИтогКоличество - Строка[СтруктураПересчетаСуммы.ИмяПоляКоличество];

		Для Каждого Поле Из СтруктураПересчетаСуммы.Поля Цикл
			
			НовоеЗначение = Поле.Значение * Коэффициент;
			
			Если РазрядностиОкругления <> Неопределено Тогда
				Строка[Поле.Ключ] = Окр(НовоеЗначение, РазрядностиОкругления[Поле.Ключ]);
			Иначе
				Строка[Поле.Ключ] = НовоеЗначение;
			КонецЕсли;
			
			СтруктураПересчетаСуммы.Поля[Поле.Ключ] = Поле.Значение - Строка[Поле.Ключ];

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьСтрокуРазбиением(ПараметрыОбработки, ТЗ, ТекущаяСтрока, Товары, ПроверкаОтказ, СписокКодовСтроки, УпаковочныйЛист)
	
	Количество = ПараметрыОбработки.Количество;
	
	ПараметрыРазбиенияСтроки = ПараметрыОбработки.ПараметрыРазбиенияСтроки;
	ДополнительныеПараметры = ПараметрыОбработки.ДополнительныеПараметры;
	
	Если ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда
		ПроверкаОтказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] > Количество Тогда
			
		НоваяСтрока  = ТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		
		НоваяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] = Количество;
		
		ТекущаяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] =
		ТекущаяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] - Количество;
		
		НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
		НоваяСтрока.ДатаОтгрузки = ТекущаяДата();
		
		ТЗМакс = ТЗ.Скопировать();
		
		МаксКодСтроки = Новый СравнениеЗначений;
		ТЗМакс.Сортировать("КодСтроки Убыв", МаксКодСтроки);
		МаксимальныйКодСтроки = ТЗМакс[0].КодСтроки;
		
		НоваяСтрока.КодСтроки = МаксимальныйКодСтроки + 1;
		
		НоваяСтрокаСписокКодовСтроки = СписокКодовСтроки.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСписокКодовСтроки, НоваяСтрока);
		НоваяСтрокаСписокКодовСтроки.УпаковочныйЛист = УпаковочныйЛист;
				
		РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры, ТекущаяСтрока);
		
	ИначеЕсли ТекущаяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] = Количество Тогда
		
		ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
		ТекущаяСтрока.ДатаОтгрузки = ТекущаяДата();
		
		НоваяСтрокаСписокКодовСтроки = СписокКодовСтроки.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСписокКодовСтроки, ТекущаяСтрока);
		НоваяСтрокаСписокКодовСтроки.УпаковочныйЛист = УпаковочныйЛист;
		
		РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры, ТекущаяСтрока);
	
	Иначе
		
		ПроверкаОтказ = Истина;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры
	
// Функция-конструктор дополнительных параметров разбиения строки.
//
// Возвращаемое значение:
//  Структура:
//     * ИмяПоляКоличество - Строка - имя поля, по которому будет происходить разбиение
//     * Заголовок - Строка - заголовок формы ввода числа
//     * РазрешитьНулевоеКоличество - Булево - признак, что в исходной и конечной строке может быть 0
//     * Количество - Неопределено, Число - количество, которое будет отображено в форме редактирования числа;
//          если Неопределенно - будет показано количество, взятое из исходной строки.
//
Функция ПараметрыРазбиенияСтроки() Экспорт
	
	ПараметрыРазбиенияСтроки = Новый Структура;
	ПараметрыРазбиенияСтроки.Вставить("ИмяПоляКоличество", "КоличествоУпаковок");
	ПараметрыРазбиенияСтроки.Вставить("Заголовок", НСтр("ru = 'Введите количество товара в новой строке';
														|en = 'Enter quantity of goods in a new line'"));
	ПараметрыРазбиенияСтроки.Вставить("РазрешитьНулевоеКоличество", Истина);
	ПараметрыРазбиенияСтроки.Вставить("Количество", Неопределено);
	
	Возврат ПараметрыРазбиенияСтроки;
	
КонецФункции

Функция ЗависимыеРеквизитыСтрокой()
	
	Возврат "СуммаБезВозвратнойТары, СуммаНДСБезВозвратнойТары, СуммаСНДСБезВозвратнойТары,
		|СуммаРучнойСкидкиБезВозвратнойТары, СуммаАвтоматическойСкидкиБезВозвратнойТары,
		|СуммаОтмененоБезВозвратнойТары, СуммаНДСОтмененоБезВозвратнойТары, СуммаСНДСОтмененоБезВозвратнойТары,
		|СуммаРучнойСкидкиОтмененоБезВозвратнойТары, СуммаАвтоматическойСкидкиОтмененоБезВозвратнойТары,
		|СуммаОтменено, СуммаНДСОтменено, СуммаСНДСОтменено,
		|СуммаРучнойСкидкиОтменено, СуммаАвтоматическойСкидкиОтменено";
	
КонецФункции

&НаКлиенте
Процедура Отгрузить(Команда)
	
	Отказ = Ложь;
	
	ОтгрузитьНаСервере(Отказ);
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	ПриОткрытии(Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРезервыНаСервере(Заказ, УпаковочныйЛист)
	
	// Выгрузка актуальных данных из таблицы "Наличие"
	НаличиеПроверка = Новый ТаблицаЗначений;
	НаличиеПроверка = Объект.Наличие.Выгрузить();
	Проверка = Истина;
	
	// Выгрузка актуальных данных из упаковочного листа
	ТаблицаДляПроверки = Новый ТаблицаЗначений;
	ТаблицаДляПроверки = УпаковочныйЛист.Товары.Выгрузить();
	ТаблицаДляПроверки.Колонки.Добавить("Проверка");
	
	// Предварительное сравнение с номенклатурой, которая в наличии, с номенклатурой из упаковочного листа
	Для Каждого СтрокаДляПроверки Из ТаблицаДляПроверки Цикл
	    Для Каждого СтрокаНаличие Из НаличиеПроверка Цикл
			
			 Если УпаковочныйЛист.гф_Заказ = СтрокаНаличие.ЗаказНаОтгрузку
				И СтрокаДляПроверки.Номенклатура = СтрокаНаличие.Номенклатура
				И СтрокаДляПроверки.Характеристика = СтрокаНаличие.Характеристика Тогда
				СтрокаДляПроверки.Проверка = Истина;
				СтрокаДляПроверки.УпаковочныйЛист = УпаковочныйЛист;
				Прервать;
			Иначе
				СтрокаДляПроверки.Проверка = Ложь;
				СтрокаДляПроверки.УпаковочныйЛист = УпаковочныйЛист;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	// Если вся номенклатура прошла проверку, то получаем Неопределено
	НайденнаяСтрока = ТаблицаДляПроверки.Найти(Ложь, "Проверка");
	
	// Если предварительная проверка пройдена, то из общего доступного наличия вычитается состав номенклатуры с характеристикой 
	// и количеством из одного текущкго упаковочного листа, для понимания доступного количества для обработки нового упаковочного листа
	// в следующей итерации цикла
	Если НайденнаяСтрока = Неопределено Тогда
		
		// Сравнение количества номенклатуры из упаковочного листа с количеством номенклатуры в наличии
		// При не хватке количества не будет именена таблица "Объект.Наличие"
		Для Каждого СтрокаУпковочногоЛиста Из УпаковочныйЛист.Товары Цикл
			
			Для Каждого СтрокаНаличие Из НаличиеПроверка Цикл
				
				Если УпаковочныйЛист.гф_Заказ = СтрокаНаличие.ЗаказНаОтгрузку
					И СтрокаУпковочногоЛиста.Номенклатура = СтрокаНаличие.Номенклатура
					И СтрокаУпковочногоЛиста.Характеристика = СтрокаНаличие.Характеристика Тогда
					
					Если СтрокаНаличие.Доступно - СтрокаУпковочногоЛиста.КоличествоУпаковок < 0 Тогда
						Проверка = Ложь;
						Прервать;
					Иначе
						СтрокаНаличие.Доступно = СтрокаНаличие.Доступно - СтрокаУпковочногоЛиста.КоличествоУпаковок;
						Проверка = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не Проверка Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		// При прохождении всех проверок, уменьшим доступное количество номенклатуры по текущему упаковочному листу.
		// Новый упаковочный лист при следующей итерации цикла будет пройдет проверку
		// по количеству уже за вычетом количества из предыдущего упакоыочного листа 
		Если Проверка Тогда
			
			Для Каждого СтрокаУпковочногоЛиста Из УпаковочныйЛист.Товары Цикл
				
				Для Каждого СтрокаНаличие Из Объект.Наличие Цикл
					
					Если УпаковочныйЛист.гф_Заказ = СтрокаНаличие.ЗаказНаОтгрузку
						И СтрокаУпковочногоЛиста.Номенклатура = СтрокаНаличие.Номенклатура
						И СтрокаУпковочногоЛиста.Характеристика = СтрокаНаличие.Характеристика Тогда
						
						Если Не СтрокаНаличие.Доступно - СтрокаУпковочногоЛиста.КоличествоУпаковок < 0 Тогда 
							СтрокаНаличие.Доступно = СтрокаНаличие.Доступно - СтрокаУпковочногоЛиста.КоличествоУпаковок;
							// При успешном списании упаковочный лист помечается как доступный и не будет удален из отчета
							Строка = Объект.ДоступностьУпаковочныхЛистов.Добавить();
							Строка.УпаковочныйЛист = УпаковочныйЛист;
							Строка.Проверка = Истина;
						Иначе
							// Упаковочный лист помечается как не доступный и дальше будет удален из отчета
							Строка = Объект.ДоступностьУпаковочныхЛистов.Добавить();
							Строка.УпаковочныйЛист = УпаковочныйЛист;
							Строка.Проверка = Ложь;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		// Упаковочный лист не прошедший прелварительную проверку помечается как не доступный и дальше будет удален из отчета
		Строка = Объект.ДоступностьУпаковочныхЛистов.Добавить();
		Строка.УпаковочныйЛист = УпаковочныйЛист;
		Строка.Проверка = Ложь;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОформитьРасходныеОрдераНаСервере(УпаковочныйЛистДляОрдера)
	
	// За основу взята типовая процедура "ОформитьРасходныеОрдераНаСервере" из общего модуля УправлениеОтгрузкой
	ПараметрыПереоформленияРасходныхОрдеров = СкладыСервер.ПараметрыПереоформленияРасходныхОрдеров();
		
	Запрос = Новый Запрос;
	Запрос.Текст =	
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТовары.Ссылка КАК ДокументОтгрузки,
	|	ДокументТовары.Склад Склад
	|ПОМЕСТИТЬ ДокументыОтгрузки
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка В(&МассивРаспоряжений)
	|	И ДокументТовары.Ссылка.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(Документ.ЗаданиеНаПеревозку.ПустаяСсылка) КАК ЗаданиеНаПеревозку,
	|	ТоварыКОтгрузке.Склад КАК Склад,
	|	ТоварыКОтгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
	|	ТоварыКОтгрузке.Получатель КАК Получатель,
	|	ЕСТЬNULL(РеквизитыРаспоряжения.ДатаДокументаИБ, ДАТАВРЕМЯ(1,1,1)) КАК Дата
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке КАК ТоварыКОтгрузке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыОтгрузки КАК ДокументыОтгрузки
	|		ПО ТоварыКОтгрузке.ДокументОтгрузки = ДокументыОтгрузки.ДокументОтгрузки
	|			И ТоварыКОтгрузке.Склад = ДокументыОтгрузки.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеквизитыРаспоряжения
	|			ПО ТоварыКОтгрузке.ДокументОтгрузки = РеквизитыРаспоряжения.Ссылка
	|				И НЕ РеквизитыРаспоряжения.ДополнительнаяЗапись";
	
	Запрос.УстановитьПараметр("МассивРаспоряжений", МассивРаспоряжений.ВыгрузитьЗначения());
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();

	УстановитьПривилегированныйРежим(Ложь);
	
	СоздатьОрдера = Ложь;
	
	Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл		
		
		СоздатьОрдера = Истина;
		
		ПараметрыПереоформленияРасходныхОрдеров.Склад = Выборка.Склад;
		
		Пока Выборка.СледующийПоЗначениюПоля("Получатель") Цикл	
			
			ПараметрыПереоформленияРасходныхОрдеров.Получатель = Выборка.Получатель;
			
			Распоряжения = Новый Массив;
			Пока Выборка.Следующий() Цикл
				Распоряжения.Добавить(Выборка.ДокументОтгрузки);
			КонецЦикла;
			
			ПараметрыПереоформленияРасходныхОрдеров.РаспоряженияНаОтгрузку = Распоряжения;
			
			ПараметрыПереоформленияРасходныхОрдеров.Вставить("гф_УпаковочныйЛист");
			ПараметрыПереоформленияРасходныхОрдеров.гф_УпаковочныйЛист = УпаковочныйЛистДляОрдера;
			
			СтруктураЗадания = СкладыСервер.ПереоформитьРасходныеОрдера(ПараметрыПереоформленияРасходныхОрдеров);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если Не СоздатьОрдера Тогда
		Отказ = Истина;

		ТекстСообщения = НСтр("ru = 'По выбранным распоряжениям не требуется отгрузка товаров.';
								|en = 'Goods shipment is not required for the selected references.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	
	УстановитьСнятьФлажки(Ложь);
	
	РазвернутьДеревоДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(Команда)
	
	УстановитьСнятьФлажки(Истина);
	
	РазвернутьДеревоДокументов();
	
КонецПроцедуры

Процедура УстановитьФлажкиДалее(Элемент, Отгрузить)
	
	Для каждого Строка Из Элемент.Строки Цикл
		
		Строка.Отгрузить = Отгрузить;
		
		Если Не Элемент.Строки.Количество() = 0 Тогда
			УстановитьФлажкиДалее(Строка, Отгрузить);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСнятьФлажки(Отгрузить)
	
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоДокументов");
	
	Для каждого Строка Из ДеревоЗначений.Строки Цикл
		
		Если Отгрузить И Не Строка.БлокировкиОтгрузок Тогда
			Строка.Отгрузить = Отгрузить;
			УстановитьФлажкиДалее(Строка, Строка.Отгрузить);
		ИначеЕсли Не Отгрузить Тогда
			Строка.Отгрузить = Отгрузить;
			УстановитьФлажкиДалее(Строка, Строка.Отгрузить);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоЗначений, "ДеревоДокументов");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЗагрузкиКодовМаркировки(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидЦены) Тогда
		//Сообщить("Не указан вид цены!");
		ТекстСообщения = НСтр("ru = 'Не указан вид цены!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Строка = Неопределено;
	Оповещение = Новый ОписаниеОповещения("ПослеЗапоненияСпискаУпаковочныхЛистов", ЭтотОбъект, Строка);
	
	ПараметрыОткрытия = Новый Структура();
	
	ПараметрыОткрытия.Вставить("Заголовок", "Загрузка кодов маркировки");
	ПараметрыОткрытия.Вставить("ИспользоватьКодУпаковки", Ложь);
	
	ОткрытьФорму("Обработка.гф_ОтгрузкаПоЗаказам.Форма.ФормаЗагрузкиКодовМаркировкиУпаковочныхЛистов",ПараметрыОткрытия,,,,,Оповещение,);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗапоненияСпискаУпаковочныхЛистов(СтруктураПереденныхДанных, Строка) Экспорт
	
	Если НЕ СтруктураПереденныхДанных = Неопределено Тогда
		
		ПроверкаЦены = АктуализироватьДанныеДереваДокументов(СтруктураПереденныхДанных);
		
		Если Не ПроверкаЦены Тогда
			
			Оповещение = Новый ОписаниеОповещения("ПослеВыбораДействияВопросаОДатеЦенИСкидкеКлиентаПриЗагрузкиКодовМаркировки", ЭтотОбъект, СтруктураПереденныхДанных);
			Отбор = Новый Структура();
			Отбор.Вставить("Дата", Объект.ДатаПолученияЦен);
			Отбор.Вставить("Скидка", Объект.ПроцентСкидки);
			ПараметрыОткрытия = Новый Структура("Ключ", Отбор);
			
			ОткрытьФорму("Обработка.гф_ОтгрузкаПоЗаказам.Форма.ФормаВопросаОДатеЦенИСкидкеКлиента",ПараметрыОткрытия,,,,,Оповещение,);
			
		Иначе
			
			РазвернутьДеревоДокументов();
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Функция АктуализироватьДанныеДереваДокументов(СтруктураПереденныхДанных)
	
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоДокументов");
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("УпаковочныйЛист");
	ТЗ.Колонки.Добавить("НайденУЛ");
	
	Для Каждого ЭлементМассива Из СтруктураПереденныхДанных Цикл
		
		Стр = ТЗ.Добавить();
		Стр.УпаковочныйЛист = ЭлементМассива.Штрихкод;
		Стр.НайденУЛ = Ложь;
		
	КонецЦикла;
	
	ТЗ.Свернуть("УпаковочныйЛист, НайденУЛ");
	
	Для Каждого Строка Из ДеревоЗначений.Строки Цикл
		Для Каждого Строка_Н Из Строка.Строки Цикл
			Для Каждого Строка_Т Из Строка_Н.Строки Цикл
				
				Для Каждого ЭлементМассива Из СтруктураПереденныхДанных Цикл
					
					Если ЗначениеЗаполнено(Строка_Т.УпаковочныйЛистСсылка)
						И Не Строка.БлокировкиОтгрузок
						И Строка_Т.УпаковочныйЛистСсылка.гф_Агрегация = Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту("ЗначениеШтрихкода", ЭлементМассива.Штрихкод) Тогда
						
						ПроверкаЦены = ПроверкаРазличающихсяЦенПриЗагрузкеКодовМаркировкиУпаковочныхЛистов(Строка_Т);
						
						Если Не ПроверкаЦены Тогда
							Возврат ПроверкаЦены;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецФункции

Процедура УстановитьОтметкиКодовМаркировкиДляДереваДокументов(СтруктураПереденныхДанных, Действие)
	
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоДокументов");
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("УпаковочныйЛист");
	ТЗ.Колонки.Добавить("НайденУЛ");
	
	Для Каждого ЭлементМассива Из СтруктураПереденныхДанных Цикл
		
		Стр = ТЗ.Добавить();
		Стр.УпаковочныйЛист = ЭлементМассива.Штрихкод;
		Стр.НайденУЛ = Ложь;
		
	КонецЦикла;
	
	ТЗ.Свернуть("УпаковочныйЛист, НайденУЛ");
	
	Для Каждого Строка Из ДеревоЗначений.Строки Цикл
		Для Каждого Строка_Н Из Строка.Строки Цикл
			Для Каждого Строка_Т Из Строка_Н.Строки Цикл
				
				Для Каждого ЭлементМассива Из СтруктураПереденныхДанных Цикл
					
					Если ЗначениеЗаполнено(Строка_Т.УпаковочныйЛистСсылка)
						И Не Строка.БлокировкиОтгрузок
						И Строка_Т.УпаковочныйЛистСсылка.гф_Агрегация = Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту("ЗначениеШтрихкода", ЭлементМассива.Штрихкод) Тогда
						
						Строка_Т.Отгрузить = Истина;
						НайденнаяСтрока = ТЗ.Найти(ЭлементМассива.Штрихкод);
						НайденнаяСтрока.НайденУЛ = Истина;
						
						//Если Действие = "ОтгрузитьПоЦенамПрайса" Тогда
						//	ДеревоДокументовУстановитьФлажки(Строка_Т, "ЦенаПрайса");
						//ИначеЕсли Действие = "ОтгрузитьПоЦенамЗаказа" Тогда
						//	ДеревоДокументовУстановитьФлажки(Строка_Т, "ЦенаЗаказа");
						//ИначеЕсли Действие = "ИсключитьИзОтгрузкиРазличные" Тогда
						//	ДеревоДокументовУстановитьФлажки(Строка_Т, "ЦенаИсключитьРазличные");
						//Иначе
						//	Строка_Т.Отгрузить = Ложь;
						//КонецЕсли;
						
						
						
					КонецЕсли;
					
				КонецЦикла;
				
								
			КонецЦикла;
			
			
			
		КонецЦикла;
		
		
		
	КонецЦикла;
	
	
	ЗначениеВРеквизитФормы(ДеревоЗначений, "ДеревоДокументов");
	
	Для Каждого Строка Из ТЗ Цикл
		
		Если Не Строка.НайденУЛ Тогда
			//Сообщить("Упаковочный лист " + Строка.УпаковочныйЛист + " не найден!");
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Упаковочный лист ""%1"" не найден!'"), Строка.УпаковочныйЛист);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверкаРазличающихсяЦенПриЗагрузкеКодовМаркировкиУпаковочныхЛистов(Строка)

	ПроверкаЦены = Истина;
	
	Если Не Строка.БлокировкиОтгрузок Тогда
		Строка.Отгрузить = Ложь;
		
		Если ЗначениеЗаполнено(Строка.УпаковочныйЛистСсылка) И ЗначениеЗаполнено(Строка.Цена) Тогда
			РезультатПроверки = ПроверитьЦеныНоменклатуры(Строка.Заказ, ТекущаяДата());
			Если Не РезультатПроверки = Неопределено Тогда
				ПроверкаЦены = РезультатПроверки.ПроверкаЦены;
				Строка.ЦенаПрайс = РезультатПроверки.ЦенаПрайс;
			КонецЕсли;
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат ПроверкаЦены;	
	
КонецФункции

&НаКлиенте
Процедура ПослеВыбораДействияВопросаОДатеЦенИСкидкеКлиента(СтруктураПереденныхДанных, Строка) Экспорт
	
	Если Не СтруктураПереденныхДанных = Неопределено Тогда
		Действие = СтруктураПереденныхДанных.Действие;
		
		Если Не Действие = "Отменить" Тогда
			Объект.ДатаПолученияЦен = СтруктураПереденныхДанных.ДатаЦен;
			Объект.ПроцентСкидки = СтруктураПереденныхДанных.ПроцентСкидки;
		КонецЕсли;
		
		Строка.Отгрузить = Истина;
		
		Если Действие = "ОтгрузитьПоЦенамПрайса" Тогда
			ДеревоДокументовУстановитьФлажки(Строка, "ЦенаПрайса");
		ИначеЕсли Действие = "ОтгрузитьПоЦенамЗаказа" Тогда
			ДеревоДокументовУстановитьФлажки(Строка, "ЦенаЗаказа");
		ИначеЕсли Действие = "ИсключитьИзОтгрузкиРазличные" Тогда
			ДеревоДокументовУстановитьФлажки(Строка, "ЦенаИсключитьРазличные");
		Иначе
			Строка.Отгрузить = Ложь;
		КонецЕсли;
	Иначе
		Строка.Отгрузить = Ложь;
		//// МножественныйВыбор при установке флага "Отгрузить" одновременно для всех элементов
		//Если Не МножественныйВыбор = Неопределено И МножественныйВыбор Тогда
		//	УстановитьСнятьФлажки(Ложь);
		//КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗафиксироватьАктивнуюТранзакцию()
	
	ЗафиксироватьТранзакцию();
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьАктивнуюТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтменитьАктивнуюТранзакцию()
	
	ОтменитьТранзакцию();
	
	Если ТранзакцияАктивна() Тогда
		ОтменитьАктивнуюТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораДействияВопросаОДатеЦенИСкидкеКлиентаПриЗагрузкиКодовМаркировки(СтруктураПереденныхДанных, Строка) Экспорт
	
	Если Не СтруктураПереденныхДанных = Неопределено Тогда
		Действие = СтруктураПереденныхДанных.Действие;
		
		Если Не Действие = "Отменить" Тогда
			Объект.ДатаПолученияЦен = СтруктураПереденныхДанных.ДатаЦен;
			Объект.ПроцентСкидки = СтруктураПереденныхДанных.ПроцентСкидки;
		КонецЕсли;
		
		//Строка.Отгрузить = Истина;
		
		Если Действие = "ОтгрузитьПоЦенамПрайса" Тогда
			ДеревоДокументовУстановитьФлажки(Строка, "ЦенаПрайса");
		ИначеЕсли Действие = "ОтгрузитьПоЦенамЗаказа" Тогда
			ДеревоДокументовУстановитьФлажки(Строка, "ЦенаЗаказа");
		ИначеЕсли Действие = "ИсключитьИзОтгрузкиРазличные" Тогда
			ДеревоДокументовУстановитьФлажки(Строка, "ЦенаИсключитьРазличные");
		Иначе
			Строка.Отгрузить = Ложь;
		КонецЕсли;
		
		
		УстановитьОтметкиКодовМаркировкиДляДереваДокументов(СтруктураПереденныхДанных, Действие);
		
		РазвернутьДеревоДокументов();
		
	Иначе
		//Строка.Отгрузить = Ложь;
		Возврат;
		//// МножественныйВыбор при установке флага "Отгрузить" одновременно для всех элементов
		//Если Не МножественныйВыбор = Неопределено И МножественныйВыбор Тогда
		//	УстановитьСнятьФлажки(Ложь);
		//КонецЕсли;
	КонецЕсли;
	
	
	
	
	
	
КонецПроцедуры

&НаСервере
Процедура СнятьРезервНаСервере()
	
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоДокументов");
	
	// Таблица для записи каждого заказа с конкретным списком упаковочных листов по этому заказу,
	ТЗ_Заказы = Новый ТаблицаЗначений;
	ТЗ_Заказы.Колонки.Добавить("Заказ");
    ТЗ_Заказы.Колонки.Добавить("УпаковочныеЛисты");
	ТЗ_Заказы.Колонки.Добавить("Склад");
	ТЗ_Заказы.Колонки.Добавить("Организация");
	ТЗ_Заказы.Колонки.Добавить("Назначение");
	
	Для Каждого Строка Из ДеревоЗначений.Строки Цикл
		
		Для Каждого Строка_Н Из Строка.Строки Цикл
			
			Для Каждого Строка_Т Из Строка_Н.Строки Цикл
				
				Если Строка_Т.Отгрузить И ЗначениеЗаполнено(Строка_Т.УпаковочныйЛистСсылка) Тогда
					
					НайтиЗаказ = ТЗ_Заказы.Найти(Строка_Т.Заказ, "Заказ");
					
					Если НайтиЗаказ = Неопределено Тогда
						
						ОбъектЗаказ = Строка_Т.Заказ.ПолучитьОбъект();
						
						СтрокаЗаказы = ТЗ_Заказы.Добавить();
						СтрокаЗаказы.Заказ = Строка_Т.Заказ;
						СтрокаЗаказы.Склад = Строка_Т.Склад;
						СтрокаЗаказы.Организация = Строка_Т.Организация;
						СтрокаЗаказы.Назначение = ОбъектЗаказ.Назначение;
						
						ТЗ_УпаковочныеЛисты = Новый ТаблицаЗначений;
						ТЗ_УпаковочныеЛисты.Колонки.Добавить("УпаковочныйЛист");
						СтрокаУпаковочныеЛисты = ТЗ_УпаковочныеЛисты.Добавить();
						
						СтрокаУпаковочныеЛисты.УпаковочныйЛист 		= Строка_Т.УпаковочныйЛистСсылка;
						
						СтрокаЗаказы.УпаковочныеЛисты = ТЗ_УпаковочныеЛисты;
							
					Иначе
						
						НайтиУпаковочныйЛист = НайтиЗаказ.УпаковочныеЛисты.Найти(Строка_Т.УпаковочныйЛистСсылка, "УпаковочныйЛист");
						
						Если НайтиУпаковочныйЛист = Неопределено Тогда
							
							СтрокаУпаковочныеЛисты = НайтиЗаказ.УпаковочныеЛисты.Добавить();
							
							СтрокаУпаковочныеЛисты.УпаковочныйЛист = Строка_Т.УпаковочныйЛистСсылка;
							
						КонецЕсли;
						
					КонецЕсли;
				
				КонецЕсли;
			
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТЗ_Заказы.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не отмечен ни один упаковочный лист к снятию резерва.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;	
	
	Для Каждого СтрокаЗаказы Из ТЗ_Заказы Цикл
		
		НачатьТранзакцию();
		
		Попытка
		
		НовыйДокумент = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
		
		НовыйДокумент.Дата = ТекущаяДата();
		НовыйДокумент.Организация = СтрокаЗаказы.Организация;
		НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв;
		НовыйДокумент.Назначение = СтрокаЗаказы.Назначение;
		
		Для Каждого СтрокаУпаковочныйЛист Из СтрокаЗаказы.УпаковочныеЛисты Цикл
			ОбъектУпаковочныйЛист = СтрокаУпаковочныйЛист.УпаковочныйЛист.ПолучитьОбъект();
			
			Для Каждого Строка Из ОбъектУпаковочныйЛист.Товары Цикл
				Стр = НовыйДокумент.Товары.Добавить();
				Стр.Номенклатура 		= Строка.Номенклатура;
				Стр.Характеристика 		= Строка.Характеристика;
				Стр.Количество 			= Строка.Количество;
				Стр.КоличествоУпаковок 	= Строка.КоличествоУпаковок;
				Стр.гф_IDкороба 		= ОбъектУпаковочныйЛист.Ссылка;
				Стр.Склад 				= СтрокаЗаказы.Склад;
				Стр.ИсходноеНазначение 	= СтрокаЗаказы.Назначение;
			КонецЦикла;
			
		КонецЦикла;
		
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			КорректировкаНазначенияПроведен = Истина;
			
		Исключение
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьАктивнуюТранзакцию();
			КонецЕсли;
			
			КорректировкаНазначенияПроведен = Ложь;
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'По заказу ""%1"" не удалось провести документ ""Корректировка назначения товаров""'"),
				СтрокаЗаказы.Заказ);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Продолжить;
			
		КонецПопытки;	
		
		Если КорректировкаНазначенияПроведен Тогда
			
			 Для Каждого СтрокаУпаковочныйЛист Из СтрокаЗаказы.УпаковочныеЛисты Цикл
				 
				 ОбъектУпаковочныйЛист = СтрокаУпаковочныйЛист.УпаковочныйЛист.ПолучитьОбъект();
				 
				 Попытка
					 ОбъектУпаковочныйЛист.Заблокировать();
				 Исключение
					 
					 Если ТранзакцияАктивна() Тогда
						 ОтменитьАктивнуюТранзакцию();
					 КонецЕсли;
					 
					 ТекстСообщения = СтрШаблон(НСтр("ru = '%1 находится в процессе редактирования и не может быть изменен.
					 	|Документ ""Корректировка назначения товаров"" не сформирован'"), ОбъектУпаковочныйЛист);
					 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					 ВызватьИсключение;
					 
				 КонецПопытки;
			
				 ОбъектУпаковочныйЛист.гф_Заказ = Неопределено;
				 
				 Попытка
					 ОбъектУпаковочныйЛист.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);	 
				 Исключение
					 
					 Если ТранзакцияАктивна() Тогда
						 ОтменитьАктивнуюТранзакцию();
					 КонецЕсли;
					 
					 ТекстСообщения = СтрШаблон(НСтр("ru = 'Упаковочный лист ""%1"" не удалось перепровести. '"),
					 	ОбъектУпаковочныйЛист);
					 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					 
					 ЗаписьЖурналаРегистрации(НСтр("ru = 'Проведение документа ""Упаковочный лист""'"), УровеньЖурналаРегистрации.Ошибка,,,
					 	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					 Продолжить;
				 КонецПопытки;
				 
			КонецЦикла;	 
			 
		КонецЕсли;
		
		Попытка
			Если ТранзакцияАктивна() Тогда
				ЗафиксироватьАктивнуюТранзакцию();
			КонецЕсли;
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Сфомирован документ ""%1"".'"), НовыйДокумент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Исключение
			Если ТранзакцияАктивна() Тогда
				ОтменитьАктивнуюТранзакцию();
			КонецЕсли;
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка фиксации транзакции снятия резерва по заказу ""%1"", поробуйте выполнить
			| операцию позднее. Возможно отсутствует доступ на формирование и изменение документов участвующих в снятии резерва'"), СтрокаЗаказы.Заказ);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Продолжить;
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СнятьРезерв(Команда)
	
	СнятьРезервНаСервере();
	
	Заполнить(Ложь);
	
КонецПроцедуры

// ++ СадомцевСА 27.10.2022
// Обработчик завершения ввода данных для РТУ
// 
// Параметры:
// Результат - Массив
// ДополнительныеПараметры - Структура

&НаКлиенте
Процедура ДанныеДляРТУЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Объект.СкидкиПоЗаказам.Очистить();
	Для Каждого ЭлементМассива Из Результат Цикл
		нс = Объект.СкидкиПоЗаказам.Добавить();
		ЗаполнитьЗначенияСвойств(нс, ЭлементМассива);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСкидки(Команда)
	ДополнительныеПараметры = Новый Структура();
	Оповещение = Новый ОписаниеОповещения("ДанныеДляРТУЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыФормы = ПолучитьПараметрыФормы();
	Если ИмяФормы = "ВнешняяОбработка.гф_ОтгрузкаПоЗаказам.Форма.Форма" Тогда
		ОткрытьФорму("ВнешняяОбработка.гф_ОтгрузкаПоЗаказам.Форма.ФормаДанныеДляРТУ", ПараметрыФормы,
		ЭтотОбъект, , , , Оповещение);
	Иначе
		ОткрытьФорму("Обработка.гф_ОтгрузкаПоЗаказам.Форма.ФормаДанныеДляРТУ", ПараметрыФормы,
		ЭтотОбъект, , , , Оповещение);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыФормы()
	ПараметрыФормы = Новый Структура();
	
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоДокументов");
	ТаблицаЗначений = ВыгрузитьДеревоЗначенийВТаблицуЗначений(ДеревоЗначений);
	// Массив Заказы
	МассивЗаказы = Новый Массив;
	Для Каждого СтрокаТЗ Из ТаблицаЗначений Цикл
		Если ЗначениеЗаполнено(СтрокаТЗ.Заказ) Тогда
			Если МассивЗаказы.Найти(СтрокаТЗ.Заказ) = Неопределено Тогда
				МассивЗаказы.Добавить(СтрокаТЗ.Заказ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ПараметрыФормы.Вставить("МассивЗаказы", МассивЗаказы);
	// ТЗ Скидки по Заказам
	СкидкиПоЗаказам = Новый Массив;
	Для Каждого СтрокаТЧ Из Объект.СкидкиПоЗаказам Цикл
		СкидкаПоЗаказу = Новый Структура("Заказ, СкидкаДляРТУ");
		ЗаполнитьЗначенияСвойств(СкидкаПоЗаказу, СтрокаТЧ);
		СкидкиПоЗаказам.Добавить(СкидкаПоЗаказу);
	КонецЦикла;
	ПараметрыФормы.Вставить("СкидкиПоЗаказам", СкидкиПоЗаказам);
	
	Возврат ПараметрыФормы;
КонецФункции

&НаСервереБезКонтекста
Функция ВыгрузитьДеревоЗначенийВТаблицуЗначений(Дерево, Таблица = Неопределено)

    Если Таблица = Неопределено Тогда
        Таблица = Новый ТаблицаЗначений;
        Для Каждого Колонка Из Дерево.Колонки Цикл
            Таблица.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
        КонецЦикла;
    КонецЕсли;
    Для Каждого СтрокаДерева Из Дерево.Строки Цикл
        ЗаполнитьЗначенияСвойств(Таблица.Добавить(), СтрокаДерева);
        ВыгрузитьДеревоЗначенийВТаблицуЗначений(СтрокаДерева, Таблица);
    КонецЦикла;
    Возврат Таблица;

КонецФункции
// -- СадомцевСА 27.10.2022
