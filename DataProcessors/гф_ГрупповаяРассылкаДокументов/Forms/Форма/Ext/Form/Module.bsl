#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьСписокВыбораТиповДокументов();  
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПриОткрытииНаСервере();
	
	Если Не ЗначениеЗаполнено(Объект.ФорматВложений) Тогда
		
		Объект.ФорматВложений = ПредопределенноеЗначение("Перечисление.ФорматыСохраненияОтчетов.PDF");
		
	КонецЕсли;	   
	
	Элементы.СписокДокументовКомандаГруппировать.Пометка = Объект.ГруппироватьПисьма;
	
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииНаСервере()
	
	Если Не ЗначениеЗаполнено(Объект.Период.ДатаНачала) Тогда
		
		Объект.Период.ДатаНачала	= НачалоМесяца(ТекущаяДатаСеанса());
		Объект.Период.ДатаОкончания	= КонецМесяца(ТекущаяДатаСеанса());
		
	КонецЕсли;	
	
	ТипДокументаПриИзмененииНаСервере();   
	
КонецПроцедуры

#КонецОбласти   

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Процедура ТипДокументаПриИзмененииНаСервере()        
	
	ЗаполнитьСписокВыбораПечатныхФорм();   
	
	УстановитьКомпоновку();
	
	ПериодПриИзмененииНаСервере();	
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДокументаПриИзменении(Элемент)
	
	ТипДокументаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ПараметрОрганизация = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Организация");
	
	ПараметрОрганизация.Значение = Объект.Организация;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("КаталогВыгрузкиЗавершение", ЭтотОбъект);
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога; 
	
	ДиалогОткрытия = Новый ДиалогВыбораФайла(Режим); 
	
	ДиалогОткрытия.Каталог				= Объект.КаталогВыгрузки;  
	ДиалогОткрытия.Заголовок			= "Выберите каталог выгрузки файлов"; 	
	ДиалогОткрытия.МножественныйВыбор	= Ложь;
	
	ДиалогОткрытия.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) И Результат.Количество()>0 Тогда
		
		Объект.КаталогВыгрузки = Результат[0];
		
	КонецЕсли;            
	
КонецПроцедуры

&НаСервере
Процедура ПериодПриИзмененииНаСервере()
	
	ПараметрДатаНачала		= КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ДатаНачала");
	ПараметрДатаОкончания	= КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ДатаОкончания");
	
	ПараметрДатаНачала.Значение		= Объект.Период.ДатаНачала;
	ПараметрДатаОкончания.Значение	= Объект.Период.ДатаОкончания;

КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ПериодПриИзмененииНаСервере();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Процедура СохранитьПечатныеФормыНаДискНаСервере()    
	
	КаталогСохранения = КаталогВременныхФайлов()+"РассылкаДокументов";
	
	УдалитьФайлы(КаталогСохранения);
	
	СоздатьКаталог(КаталогСохранения);
	
	ОтборДокументов = Новый Структура("Отметка", Истина);
	
	МассивВыгружаемыхСтрок = СписокДокументов.НайтиСтроки(ОтборДокументов);
	
	Для Каждого ВыгружаемаяСтрока Из МассивВыгружаемыхСтрок Цикл 
		
		МассивОбъектов = Новый Массив;
		
		МассивОбъектов.Добавить(ВыгружаемаяСтрока.Документ);    
		
		ПараметрыПечати = Новый Структура;      
		
		ОбъектыПечати = Новый СписокЗначений;        
		
		ПараметрыВывода =  Новый Структура;      
		
		КоллекцияПечатныхФорм = УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм(Объект.ПечатнаяФорма);
		
		Выполнить("Документы." + Объект.ТипДокумента + "." + 
			"Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода)");
		
		Если Объект.ФорматВложений = Перечисления.ФорматыСохраненияОтчетов.XLSX Тогда
			
			ТипФайла = ТипФайлаТабличногоДокумента.XLSX;
			
		Иначе
			
			ТипФайла = ТипФайлаТабличногоДокумента.PDF;
			
		КонецЕсли;	
		
		ИмяФайла = КаталогСохранения + "/" + ВыгружаемаяСтрока.ИмяФайла;
		
		КоллекцияПечатныхФорм[0].ТабличныйДокумент.Записать(ИмяФайла, ТипФайла); 
		
		ДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
		
		ВыгружаемаяСтрока.Адрес = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
		
	КонецЦикла;
	
	УдалитьФайлы(КаталогСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПечатныеФормыНаДиск(Команда)   
	
	Если Не ПроверитьВозможностьСохранения() Тогда
		
		Возврат;	
		
	КонецЕсли;	
	
	СохранитьПечатныеФормыНаДискНаСервере();                                
	
	УдалитьФайлы(Объект.КаталогВыгрузки, "*.*");
	
	ОтборДокументов = Новый Структура("Отметка", Истина);
	
	МассивВыгружаемыхСтрок = СписокДокументов.НайтиСтроки(ОтборДокументов);
	
	Для Каждого ВыгружаемаяСтрока Из МассивВыгружаемыхСтрок Цикл 
		
		Если ЗначениеЗаполнено(ВыгружаемаяСтрока.ИмяФайла) И ЭтоАдресВременногоХранилища(ВыгружаемаяСтрока.Адрес) Тогда
			
			ИмяФайла = Объект.КаталогВыгрузки + "/" + ВыгружаемаяСтрока.ИмяФайла;
			
			Данные = ПолучитьИзВременногоХранилища(ВыгружаемаяСтрока.Адрес);
			
			Данные.Записать(ИмяФайла);   
			
		КонецЕсли;
		
	КонецЦикла;	
	
	ОчиститьВременныеХранилища();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьВременныеХранилища()
	
	Для Каждого СтрокаДокументов Из СписокДокументов Цикл
		
		Если ЭтоАдресВременногоХранилища(СтрокаДокументов.Адрес) Тогда   
			
			УдалитьИзВременногоХранилища(СтрокаДокументов.Адрес);
			
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Функция ПроверитьВозможностьСохранения()  
	
	ОтборДокументов = Новый Структура("Отметка", Истина);
	
	МассивВыгружаемыхСтрок = СписокДокументов.НайтиСтроки(ОтборДокументов);
	
	Если МассивВыгружаемыхСтрок.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нет документов для выгрузки");
		
		Возврат Ложь;
		
	КонецЕсли;	     
	
	КонтрагентыБезАдресов = Новый Массив;
	
	Для Каждого ВыгружаемаяСтрока Из МассивВыгружаемыхСтрок Цикл
		
		Если Не ЗначениеЗаполнено(ВыгружаемаяСтрока.Email) Тогда
			
			Контрагент = ВыгружаемаяСтрока.Контрагент;
			
			Если КонтрагентыБезАдресов.Найти(Контрагент) = Неопределено Тогда
				
				КонтрагентыБезАдресов.Добавить(Контрагент);
				
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;	 
	
	Если КонтрагентыБезАдресов.Количество()>0 Тогда
		
		Для Каждого Контрагент Из КонтрагентыБезАдресов Цикл
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен Emai контрагента " + Контрагент);
			
		КонецЦикла;
		
		Возврат Ложь;
		
	КонецЕсли;	
	
	Файл = Новый Файл(Объект.КаталогВыгрузки);
	
	Если Не (Файл.Существует() И Файл.ЭтоКаталог()) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Каталог выгрузки " + Объект.КаталогВыгрузки + " не найден");
		
		Возврат Ложь;
		
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура КомандаОтметитьВсе(Команда)
	
	Для Каждого СтрокаДокумента Из СписокДокументов Цикл
		
		СтрокаДокумента.Отметка = Истина;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСнятьОтметки(Команда)
	
	Для Каждого СтрокаДокумента Из СписокДокументов Цикл
		
		СтрокаДокумента.Отметка = Ложь;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПисьмаНаСервере()
	
	ПараметрыОтправки = Новый Структура;
	
	ПараметрыОтправки.Шаблон = Объект.Шаблон;

	Сообщение = ШаблоныСообщенийСлужебный.СформироватьСообщение(ПараметрыОтправки);


КонецПроцедуры

&НаКлиенте
Процедура СформироватьПисьма(Команда)
	СформироватьПисьмаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КомандаГруппировать(Команда)
	
	Объект.ГруппироватьПисьма = Не Объект.ГруппироватьПисьма;
	
	Элементы.СписокДокументовКомандаГруппировать.Пометка = Объект.ГруппироватьПисьма;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораТиповДокументов()  
	
	ИсточникиКомандПечати = УправлениеПечатью.ИсточникиКомандПечати();  
	
	ТаблицаИсточников = Новый ТаблицаЗначений;
	
	ТаблицаИсточников.Колонки.Добавить("Метаданные");
	ТаблицаИсточников.Колонки.Добавить("Имя");
	ТаблицаИсточников.Колонки.Добавить("Синоним");
	
	Для Каждого ИсточникКомандПечати Из ИсточникиКомандПечати Цикл
		
		СтрокаИсточников = ТаблицаИсточников.Добавить();
		
		СтрокаИсточников.Метаданные = ИсточникКомандПечати;
		СтрокаИсточников.Имя = ИсточникКомандПечати.Имя;
		СтрокаИсточников.Синоним = ИсточникКомандПечати.Синоним;
		
	КонецЦикла;	     
	
	ТаблицаИсточников.Сортировать("Синоним");
	
	Для Каждого СтрокаИсточников Из ТаблицаИсточников Цикл
		
		Документ = СтрокаИсточников.Метаданные;
		
		Если Метаданные.Документы.Содержит(Документ) 
			И (Документ.Реквизиты.Найти("Партнер") <> Неопределено
			ИЛИ Документ.Реквизиты.Найти("Контрагент") <> Неопределено)
			И Документ.Реквизиты.Найти("Организация") <> Неопределено
			Тогда  
			
			КомандыПечати = УправлениеПечатью.СоздатьКоллекциюКомандПечати(); 
			
			Выполнить("Документы." + СтрокаИсточников.Имя + "." + "ДобавитьКомандыПечати(" + "КомандыПечати" + ")");
			
			Для Каждого КомандаПечати Из КомандыПечати Цикл
				
				Если Не ЗначениеЗаполнено(КомандаПечати.Обработчик) Тогда
					
					Элементы.ТипДокумента.СписокВыбора.Добавить(СтрокаИсточников.Имя, СтрокаИсточников.Синоним);
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;	
			
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораПечатныхФорм()   
	
	Элементы.ПечатнаяФорма.СписокВыбора.Очистить();
	
	Если ЗначениеЗаполнено(Объект.ТипДокумента) Тогда
		
		КомандыПечати = УправлениеПечатью.СоздатьКоллекциюКомандПечати(); 
		
		Выполнить("Документы." + Объект.ТипДокумента + "." + "ДобавитьКомандыПечати(" + "КомандыПечати" + ")");
		
		Для Каждого КомандаПечати Из КомандыПечати Цикл 
			
			Если Не ЗначениеЗаполнено(КомандаПечати.Обработчик) Тогда
				
				Элементы.ПечатнаяФорма.СписокВыбора.Добавить(КомандаПечати.Идентификатор, КомандаПечати.Представление);
				
			КонецЕсли;	
			
		КонецЦикла;	    
		
		Если Элементы.ПечатнаяФорма.СписокВыбора.Количество() > 0 Тогда
			
			Объект.ПечатнаяФорма = Элементы.ПечатнаяФорма.СписокВыбора[0].Значение;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКомпоновку()
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипДокумента) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	СхемаКомпоновки = Новый СхемаКомпоновкиДанных();		
	
	Источник					= СхемаКомпоновки.ИсточникиДанных.Добавить();
	Источник.Имя				= "ИсточникДанных";
	Источник.СтрокаСоединения	= "";
	Источник.ТипИсточникаДанных	= "local";
	
	НаборДанных	= СхемаКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	
	НаборДанных.Запрос							= ТекстЗапросаДокументов(Объект.ТипДокумента);
	НаборДанных.Имя								= "НаборДанныхЗапроса";
	НаборДанных.ИсточникДанных					= Источник.Имя;
	НаборДанных.АвтоЗаполнениеДоступныхПолей	= Истина;
	
	ЭлементГруппировка = СхемаКомпоновки.ВариантыНастроек[0].Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	
	ЭлементГруппировка.Использование = Истина;
	ЭлементГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ЭлементГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));	
	
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновки, УникальныйИдентификатор);
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы)); 
	
	ПолеПараметрыДанных	= Новый ПолеКомпоновкиДанных("ПараметрыДанных");
	ПолеСистемныеПоля	= Новый ПолеКомпоновкиДанных("СистемныеПоля"); 
	ПолеКонтрагент		= Новый ПолеКомпоновкиДанных("Контрагент"); 
	ПолеДокумент		= Новый ПолеКомпоновкиДанных("Документ"); 
	
	Для Каждого ПолеВыбора Из КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		
		ВыбранноеПоле = СхемаКомпоновки.ВариантыНастроек[0].Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		
		ВыбранноеПоле.Использование	= Не (ПолеВыбора.Поле = ПолеПараметрыДанных ИЛИ ПолеВыбора.Поле = ПолеСистемныеПоля);
		ВыбранноеПоле.Поле			= ПолеВыбора.Поле;
		
	КонецЦикла;	                                                                             
	
	Для Каждого ПолеПорялкаКомпоновщика Из КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка.Элементы Цикл
		
		ПолеПорядка = СхемаКомпоновки.ВариантыНастроек[0].Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		
		ПолеПорядка.Поле = ПолеКонтрагент;
		
		ПолеПорядка = СхемаКомпоновки.ВариантыНастроек[0].Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		
		ПолеПорядка.Поле = ПолеДокумент;
		
	КонецЦикла;	                                                                             
	
	Для Каждого ПараметрКомпоновки Из КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры.Элементы Цикл
		
		ЭлементПараметр = СхемаКомпоновки.ВариантыНастроек[0].Настройки.ПараметрыДанных.Элементы.Добавить();
		
		ЭлементПараметр.Параметр		= ПараметрКомпоновки.Параметр;
		ЭлементПараметр.Использование	= Истина;
		
		ПараметрСхемы = СхемаКомпоновки.Параметры.Добавить(); 
		
		ЗаполнитьЗначенияСвойств(ПараметрСхемы, ПараметрКомпоновки);		
		
		ПараметрСхемы.Имя						= Строка(ПараметрКомпоновки.Параметр);
		ПараметрСхемы.ВключатьВДоступныеПоля	= Ложь;
		
	КонецЦикла;	                                                                             
	
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстЗапросаДокументов(ТипДокумента)
	
	МетаданныеДокумента = Метаданные.Документы[ТипДокумента]; 
	
	Результат = "ВЫБРАТЬ
	            |	Контрагенты.Ссылка КАК Контрагент,
	            |	Документ.Ссылка КАК Документ,
	            |	ЕСТЬNULL(КонтрагентыКонтактнаяИнформация.Представление, """") КАК Email
	            |ИЗ
	            |	Документ.ЗаказКлиента КАК Документ
	            |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	            |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	            |			ПО (КонтрагентыКонтактнаяИнформация.Ссылка = Контрагенты.Ссылка)
	            |				И (КонтрагентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailКонтрагента))
	            |		ПО Документ.Контрагент = Контрагенты.Ссылка
	            |ГДЕ
	            |	Документ.Организация = &Организация
	            |	И Документ.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";  
	
	Результат = СтрЗаменить(Результат, "Документ.ЗаказКлиента", "Документ." + ТипДокумента);
	
	Если МетаданныеДокумента.Реквизиты.Найти("Партнер") <> Неопределено Тогда
		
		Результат = СтрЗаменить(Результат, "Документ.Контрагент = Контрагенты.Ссылка",
								"Документ.Партнер = Контрагенты.Партнер");
		
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОчиститьНастройкиСКД(Настройки)
	
	Если Настройки = Неопределено ИЛИ Тип(Настройки) <> Тип("НастройкиКомпоновкиДанных") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого Параметр Из Настройки.ПараметрыДанных.Элементы Цикл
		
		Параметр.Значение		= Неопределено;
		Параметр.Использование	= Ложь;
		
	КонецЦикла;
	
	Настройки.ПользовательскиеПоля.Элементы.Очистить();
	Настройки.Отбор.Элементы.Очистить();
	Настройки.Порядок.Элементы.Очистить();
	Настройки.Структура.Очистить();
	Настройки.Выбор.Элементы.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ОтобратьНаСервере()
	
	СхемаКомпоновки = ПолучитьИзВременногоХранилища(АдресСхемы);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных; 
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки, КомпоновщикНастроек.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКД = Новый ПроцессорКомпоновкиДанных;
	
	ПроцессорКД.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	Результат = Новый ТаблицаЗначений;
	
	ПроцессорВывода.УстановитьОбъект(Результат);
	
	ПроцессорВывода.Вывести(ПроцессорКД);
	
	СписокДокументов.Загрузить(Результат);
	
	Для Каждого СтрокаДокумента Из СписокДокументов Цикл
		
		СтрокаДокумента.Отметка = Истина;   
		СтрокаДокумента.ИмяФайла = СтрокаДокумента.Документ.Номер + "_" + 
		?(ЗначениеЗаполнено(СтрокаДокумента.Email), СтрокаДокумента.Email, "НетEmail") + "_" +
		Формат(СтрокаДокумента.Документ.Дата, "ДФ=yyyyMMdd")
		+ "." + ИмяПеречисления(Объект.ФорматВложений);
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура Отобрать(Команда)
	
	ОтобратьНаСервере();
	
КонецПроцедуры     

&НаСервере
Функция ИмяПеречисления(ЗначениеПеречисления) 
	
	Если Не ЗначениеЗаполнено(ЗначениеПеречисления) Тогда
		
		Возврат "";
		
	КонецЕсли;	
	
	ИмяПеречисления = ЗначениеПеречисления.Метаданные().Имя;
	
	ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);
	
	ИмяЗначенияПеречисления	= Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;		
	
	Возврат НРег(ИмяЗначенияПеречисления);
	
КонецФункции	

#КонецОбласти



