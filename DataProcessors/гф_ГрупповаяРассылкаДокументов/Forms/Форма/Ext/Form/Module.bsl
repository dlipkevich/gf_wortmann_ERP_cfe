#Область ОбработчикиСобытийФормы

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьСписокВыбораТиповДокументов(); 
	
	Объект.ГруппироватьПисьма = Истина;
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПриОткрытииНаСервере();
	
	Если Не ЗначениеЗаполнено(Объект.ФорматВложений) Тогда
		
		Объект.ФорматВложений = ПредопределенноеЗначение("Перечисление.ФорматыСохраненияОтчетов.PDF");
		
	КонецЕсли;	 
	
	Элементы.СписокДокументовКомандаГруппировать.Пометка = Объект.ГруппироватьПисьма;
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
//
&НаСервере
Процедура ПриОткрытииНаСервере()
	
	Элементы.Шаблон.ФормаВыбора = "Справочник.ШаблоныСообщений.Форма.гф_ФормаВыбора";
	
	Если Не ЗначениеЗаполнено(Объект.Период.ДатаНачала) Тогда
		
		Объект.Период.ДатаНачала	= НачалоМесяца(ТекущаяДатаСеанса());
		Объект.Период.ДатаОкончания	= КонецМесяца(ТекущаяДатаСеанса());
		
	КонецЕсли;	
	
	ТипДокументаПриИзмененииНаСервере(); 
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник) 
	
	Если ИмяСобытия = "Запись_ЭлектронноеПисьмоИсходящее" Тогда 
		
		Для Каждого СтрокаСпискаДокументов Из СписокДокументов Цикл
					
			Если СтрокаСпискаДокументов.Письмо = Источник Тогда
				
				ОбновитьДанныеПисьмаНаСервере(Источник);
				
				Прервать;
				
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры// } #wortmann

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
//
&НаСервере
Процедура ТипДокументаПриИзмененииНаСервере() 
	
	ЗаполнитьСписокВыбораПечатныхФорм(); 
	
	Если ЗначениеЗаполнено(Объект.ТипДокумента) Тогда
		
		УстановитьКомпоновку();
		
		ПериодПриИзмененииНаСервере();	
		
		ОрганизацияПриИзмененииНаСервере(); 
		
		ОтображатьОтправленыеПриИзмененииНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
//
&НаКлиенте
Процедура ТипДокументаПриИзменении(Элемент)
	
	ТипДокументаПриИзмененииНаСервере();
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
//
&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ПараметрОрганизация = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Организация");
	
	ПараметрОрганизация.Значение = Объект.Организация;
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
//
&НаКлиенте
Процедура КаталогВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("КаталогВыгрузкиЗавершение", ЭтотОбъект);
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога; 
	
	ДиалогОткрытия = Новый ДиалогВыбораФайла(Режим); 
	
	ДиалогОткрытия.Каталог				= Объект.КаталогВыгрузки; 
	ДиалогОткрытия.Заголовок			= "Выберите каталог выгрузки файлов"; 	
	ДиалогОткрытия.МножественныйВыбор	= Ложь;
	
	ДиалогОткрытия.Показать(Оповещение);
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
//
&НаКлиенте
Процедура КаталогВыгрузкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) И Результат.Количество()>0 Тогда
		
		Объект.КаталогВыгрузки = Результат[0];
		
	КонецЕсли; 
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
//
&НаСервере
Процедура ПериодПриИзмененииНаСервере()
	
	ПараметрДатаНачала		= КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ДатаНачала");
	ПараметрДатаОкончания	= КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ДатаОкончания");
	
	ПараметрДатаНачала.Значение		= Объект.Период.ДатаНачала;
	ПараметрДатаОкончания.Значение	= Объект.Период.ДатаОкончания;

КонецПроцедуры// } #wortmann

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
//
&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ПериодПриИзмененииНаСервере();

КонецПроцедуры// } #wortmann

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
//
&НаСервере
Процедура ОтображатьОтправленыеПриИзмененииНаСервере()

	ПараметрОтображатьОтправленые = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ОтображатьОтправленые");
	
	ПараметрОтображатьОтправленые.Значение = Объект.ОтображатьОтправленые; 
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
//
&НаКлиенте
Процедура ОтображатьОтправленыеПриИзменении(Элемент) 
	
	ОтображатьОтправленыеПриИзмененииНаСервере();
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
//
&НаКлиенте
Процедура ПечатныеФормыПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПечатныеФормы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		Возврат;	
		
	КонецЕсли;	
	
	ОтборСтрок = Новый Структура;
	
	ОтборСтрок.Вставить("ТипДокумента",		Объект.ТипДокумента);
	ОтборСтрок.Вставить("ПечатнаяФорма",	ТекущиеДанные.Значение);
	
	НайденныеСтроки = ВыбранныеПечатныеФормы.НайтиСтроки(ОтборСтрок);
	
	Если ТекущиеДанные.Пометка Тогда
		
		Если Не НайденныеСтроки.Количество() Тогда
			
			НоваяСтрока = ВыбранныеПечатныеФормы.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОтборСтрок);
			
		КонецЕсли;	
		
	Иначе     
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			ИндексСтроки = ВыбранныеПечатныеФормы.Индекс(НайденнаяСтрока);
			
			ВыбранныеПечатныеФормы.Удалить(ИндексСтроки);
			
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры// } #wortmann

#КонецОбласти 

#Область ОбработчикСобытийТаблицыФормы

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
//
&НаКлиенте
Процедура СписокДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) 
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли;	
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле.Имя = "СписокДокументовДокумент" Тогда 
		
		ПараметрыОткрытия = Новый Структура("Ключ", ТекущиеДанные.Документ);
		
		ИмяФормыДокумента = "Документ." + Объект.ТипДокумента + ".ФормаОбъекта";
		
		ОткрытьФорму(ИмяФормыДокумента, ПараметрыОткрытия);
		
	ИначеЕсли Поле.Имя = "СписокДокументовКонтрагент" Тогда

		ПараметрыОткрытия = Новый Структура("Ключ", ТекущиеДанные.Контрагент);
			
		ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыОткрытия);
		
	ИначеЕсли Поле.Имя = "СписокДокументовПисьмо" 
				ИЛИ Поле.Имя = "СписокДокументовПисьмоСтатусПисьма" 
				ИЛИ Поле.Имя = "СписокДокументовПисьмоДата" 
				ИЛИ Поле.Имя = "СписокДокументовПисьмоДатаОтправления"
				ИЛИ Поле.Имя = "СписокДокументовТема" Тогда

		ПараметрыОткрытия = Новый Структура("Ключ", ТекущиеДанные.Письмо);
		
		ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыОткрытия);
		
	Иначе	
		
		СтандартнаяОбработка = Истина;
			
	КонецЕсли;	
	
КонецПроцедуры// } #wortmann
	
#КонецОбласти

#Область ОбработчикиКомандФормы

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
//
&НаКлиенте
Процедура СохранитьПечатныеФормыНаДиск(Команда) 
	
	Ошибки = Неопределено;                        
	
	Отказ = Ложь;
	
	ПроверитьВозможностьФормированияПисем(Ошибки);
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
	Если Отказ Тогда
		
		Возврат;	
		
	КонецЕсли;	
	
	ПоместитьПечатныеФормыВХранилище(Ошибки); 
		
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		
	УдалитьФайлы(Объект.КаталогВыгрузки, "*.*");
	
	ОтборДокументов = Новый Структура("Отметка", Истина);
	
	МассивВыгружаемыхСтрок = СписокДокументов.НайтиСтроки(ОтборДокументов);
	
	Для Каждого ВыгружаемаяСтрока Из МассивВыгружаемыхСтрок Цикл 
		
		Если ЗначениеЗаполнено(ВыгружаемаяСтрока.ИмяФайла) И ЭтоАдресВременногоХранилища(ВыгружаемаяСтрока.Адрес) Тогда
			
			ИмяФайла = Объект.КаталогВыгрузки + "/" + ВыгружаемаяСтрока.ИмяФайла;
			
			Данные = ПолучитьИзВременногоХранилища(ВыгружаемаяСтрока.Адрес);
			
			Данные.Записать(ИмяФайла); 
			
		КонецЕсли;
		
	КонецЦикла;	
	
	//ОчиститьВременныеХранилища();
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
//
&НаСервере
Процедура ОчиститьВременныеХранилища()
	
	Для Каждого СтрокаДокументов Из СписокДокументов Цикл
		
		Если ЭтоАдресВременногоХранилища(СтрокаДокументов.Адрес) Тогда 
			
			УдалитьИзВременногоХранилища(СтрокаДокументов.Адрес);
			
		КонецЕсли;	  
		
		Для Каждого Файл Из СтрокаДокументов.Файлы Цикл
			
			Если ЭтоАдресВременногоХранилища(Файл.Адрес) Тогда 
				
				УдалитьИзВременногоХранилища(Файл.Адрес);
				
			КонецЕсли;	  
			
		КонецЦикла;	   
		
		СтрокаДокументов.Файлы.Очистить();
		
	КонецЦикла;	
	
КонецПроцедуры// } #wortmann	

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
//
&НаКлиенте
Процедура ПроверитьВозможностьФормированияПисем(Ошибки) 
	
	ОтборДокументов = Новый Структура("Отметка", Истина);
	
	МассивВыгружаемыхСтрок = СписокДокументов.НайтиСтроки(ОтборДокументов);  
	
	Если МассивВыгружаемыхСтрок.Количество() = 0 Тогда
		
	
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
							"", 
							"Нет документов для отправки");
		
		Возврат;
		
	КонецЕсли;	     
	
	ОтборСтрок = Новый Структура;
	
	ОтборСтрок.Вставить("ТипДокумента",		Объект.ТипДокумента);
	
	НайденныеСтроки = ВыбранныеПечатныеФормы.НайтиСтроки(ОтборСтрок);
	
	Если Не НайденныеСтроки.Количество() Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
							"", 
							"Не выбрано ни одной печатной формы");
		
		Возврат;
		
	КонецЕсли;	
	
	КонтрагентыБезАдресов = Новый Массив; 
	
	ЕстьОтправленныеПисьма = Ложь;
	
	Для Каждого ВыгружаемаяСтрока Из МассивВыгружаемыхСтрок Цикл
		
		Если Не ЗначениеЗаполнено(ВыгружаемаяСтрока.Email) Тогда
			
			Контрагент = ВыгружаемаяСтрока.Контрагент;
			
			Если КонтрагентыБезАдресов.Найти(Контрагент) = Неопределено Тогда
				
				КонтрагентыБезАдресов.Добавить(Контрагент);
				
			КонецЕсли;	
			
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ВыгружаемаяСтрока.СтатусПисьма) 
				И ВыгружаемаяСтрока.СтатусПисьма <> ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик") Тогда
			
			ЕстьОтправленныеПисьма = Истина;	
			
		КонецЕсли;	
		
	КонецЦикла;	 
	
	Если КонтрагентыБезАдресов.Количество()>0 Тогда
		
		Для Каждого Контрагент Из КонтрагентыБезАдресов Цикл   
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
			"", 
			СтрШаблон("Не заполнен Emai контрагента %1", Контрагент));
			
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;	
	
	Если ЕстьОтправленныеПисьма И Не Объект.ОтправлятьПовторно Тогда  
		
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
		"", 
		"В списке есть отмеченные строки с письмами не в статусе черновик
		|Если хотите отправить письма повторно нажите кнопку ""Отправлять повторно""");
		
		Возврат;
		
	КонецЕсли;		
	
	Файл = Новый Файл(Объект.КаталогВыгрузки);
	
	//Если Не (Файл.Существует() И Файл.ЭтоКаталог()) Тогда
	//	
	//	ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
	//	"", 
	//	СтрШаблон("Каталог выгрузки %1 не найден", Объект.КаталогВыгрузки));
	//	
	//	Возврат;
	//	
	//КонецЕсли;	
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
//
&НаКлиенте
Процедура КомандаОтметитьВсе(Команда)
	
	Для Каждого СтрокаДокумента Из СписокДокументов Цикл
		
		СтрокаДокумента.Отметка = Истина;
		
	КонецЦикла;	
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
//
&НаКлиенте
Процедура КомандаСнятьОтметки(Команда)
	
	Для Каждого СтрокаДокумента Из СписокДокументов Цикл
		
		СтрокаДокумента.Отметка = Ложь;
		
	КонецЦикла;	
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
//
&НаСервере
Процедура СформироватьПисьмаНаСервере(Ошибки) 
	
	ПоместитьПечатныеФормыВХранилище(Ошибки); 
		
	Если Объект.ГруппироватьПисьма Тогда
		
		ТаблицаКонтрагентов = СписокДокументов.Выгрузить(, "Контрагент");
		
		ТаблицаКонтрагентов.Свернуть("Контрагент");
		
		Для Каждого СтрокаКонтрагента Из ТаблицаКонтрагентов Цикл
			
			ОтборСтрок = Новый Структура;
			
			ОтборСтрок.Вставить("Контрагент", СтрокаКонтрагента.Контрагент);
			ОтборСтрок.Вставить("Отметка", Истина); 
			
			МассивСтрок = СписокДокументов.НайтиСтроки(ОтборСтрок);
			
			Если МассивСтрок.Количество() Тогда
				
				СформироватьПисьмо(МассивСтрок);
				
			КонецЕсли;	
			
		КонецЦикла;	
		
	Иначе	
		
		ОтборСтрок = Новый Структура;
		
		ОтборСтрок.Вставить("Отметка", Истина); 
		
		ДокументыКОтправке = СписокДокументов.НайтиСтроки(ОтборСтрок);
		
		Для Каждого ДокументКОтправке Из ДокументыКОтправке Цикл
			
			МассивСтрок = Новый Массив;
			
			МассивСтрок.Добавить(ДокументКОтправке);
			
			СформироватьПисьмо(МассивСтрок);
			
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
//
&НаКлиенте
Процедура СформироватьПисьма(Команда)
	
	Ошибки = Неопределено;
	
	Отказ = Ложь;
	
	ПроверитьВозможностьФормированияПисем(Ошибки);
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;	
		
	СформироватьПисьмаНаСервере(Ошибки); 
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	ОбновитьДанныеПисем();

КонецПроцедуры// } #wortmann

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
//
&НаКлиенте
Процедура КомандаГруппировать(Команда)
	
	Объект.ГруппироватьПисьма = Не Объект.ГруппироватьПисьма;
	
	Элементы.СписокДокументовКомандаГруппировать.Пометка = Объект.ГруппироватьПисьма;
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
//
&НаСервере
Процедура КомандаОтправлятьПовторноНаСервере()

	Объект.ОтправлятьПовторно = Не Объект.ОтправлятьПовторно;
	
	Элементы.СписокДокументовКомандаОтправлятьПовторно.Пометка = Объект.ОтправлятьПовторно;
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
//
&НаКлиенте
Процедура КомандаОтправлятьПовторно(Команда)
	
	КомандаОтправлятьПовторноНаСервере();
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
//
 &НаСервере
 Процедура КомандаПоместитьВИсходящиеНаСервере()

	ОтборСтрок = Новый Структура("Отметка", Истина);
	
	ОтборСтрок.Вставить("СтатусПисьма", 
		ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик"));
	
	СтрокиПисем = СписокДокументов.НайтиСтроки(ОтборСтрок);
	
	ПисьмаКОтправке = Новый Массив;
	
	Для Каждого СтрокаПисем Из СтрокиПисем Цикл
		
		Если ПисьмаКОтправке.Найти(СтрокаПисем.Письмо) = Неопределено Тогда
			
			ПисьмаКОтправке.Добавить(СтрокаПисем.Письмо);
			
		КонецЕсли;	
		
	КонецЦикла; 
	
	Для Каждого Письмо Из ПисьмаКОтправке Цикл
		
		ПисьмоОбъект = Письмо.ПолучитьОбъект();
		
		ПисьмоОбъект.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Исходящее");
		
		ПисьмоОбъект.Записать(); 
		
		ОбновитьДанныеПисьмаНаСервере(Письмо);
		
	КонецЦикла;	
	 
КонецПроцедуры// } #wortmann

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
//
&НаКлиенте
Процедура КомандаПоместитьВИсходящие(Команда)
	
	КомандаПоместитьВИсходящиеНаСервере();
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
//
&НаСервере
Процедура КомандаОтправитьСейчасНаСервере()
	
	ОтборСтрок = Новый Структура("Отметка", Истина);
	
	СтрокиПисем = СписокДокументов.НайтиСтроки(ОтборСтрок);
	
	ПисьмаКОтправке = Новый Массив;
	
	Для Каждого СтрокаПисем Из СтрокиПисем Цикл
		
		Если СтрокаПисем.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик")
			ИЛИ СтрокаПисем.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Исходящее")
			Тогда
			
			Если ПисьмаКОтправке.Найти(СтрокаПисем.Письмо) = Неопределено Тогда
				
				ПисьмаКОтправке.Добавить(СтрокаПисем.Письмо);
				
			КонецЕсли;	
			
		КонецЕсли;		
		
	КонецЦикла; 
	
	Для Каждого ПисьмоКОтправке Из ПисьмаКОтправке Цикл 
		
		ПисьмоОбъект = ПисьмоКОтправке.ПолучитьОбъект();
		
		ПараметрыПисьма = Взаимодействия.ПараметрыПисьмаДляОтправки(ПисьмоОбъект);
		
		Письмо = РаботаСПочтовымиСообщениями.ПодготовитьПисьмо(ПисьмоОбъект.УчетнаяЗапись, ПараметрыПисьма);
		
		РезультатОтправки = РаботаСПочтовымиСообщениями.ОтправитьПисьмо(ПисьмоОбъект.УчетнаяЗапись, Письмо); 
		
		ПараметрыОбработкиОшибки = УправлениеЭлектроннойПочтой.ПараметрыОбработкиОшибкиОтправки();
		ПараметрыОбработкиОшибки.ПисьмоОбъект = ПисьмоОбъект;
		ПараметрыОбработкиОшибки.Ссылка = ПисьмоОбъект.Ссылка;
		ПараметрыОбработкиОшибки.ПредставлениеПисьма = Взаимодействия.ПредставлениеПисьма(ПисьмоОбъект.Тема, ПисьмоОбъект.Дата);
		ПараметрыОбработкиОшибки.КоличествоПопыток = 0;
		ПараметрыОбработкиОшибки.ИнкрементироватьКоличествоПопыток = Ложь;
		ПараметрыОбработкиОшибки.СообщатьПользователю = Истина;
		
		Если ЗначениеЗаполнено(РезультатОтправки.ОшибочныеПолучатели) Тогда
			
			Результат = УправлениеЭлектроннойПочтой.ОбработатьОшибкуОтправкиПисьма(ПараметрыОбработкиОшибки, РезультатОтправки.ОшибочныеПолучатели);
			
			Если Не Результат.ПисьмоОтправлено Тогда
				
				Продолжить;
				
			КонецЕсли;  
			
		КонецЕсли;
	
		ПисьмоОбъект.СтатусПисьма		= ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено");
		ПисьмоОбъект.ДатаОтправления	= ТекущаяДатаСеанса();
		
		ПисьмоОбъект.Записать(); 
		
		ОбновитьДанныеПисьмаНаСервере(ПисьмоКОтправке);
		
	КонецЦикла;	
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
//
&НаКлиенте
Процедура КомандаОтправитьСейчас(Команда)
	
	КомандаОтправитьСейчасНаСервере();
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
//
&НаКлиенте
Процедура КомандаОткрытьСписокПисем(Команда)
	
	ОтборСписка = Новый Структура;
	
	ОтборСписка.Вставить("УчетнаяЗапись", Объект.УчетнаяЗапись);
	
	ПараметрыОткрытия = Новый Структура;
	
	ПараметрыОткрытия.Вставить("Отбор", ОтборСписка);

	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаСписка", ПараметрыОткрытия);

КонецПроцедуры// } #wortmann

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
//
&НаСервере
Процедура ЗаполнитьСписокВыбораТиповДокументов() 
	
	ИсточникиКомандПечати = УправлениеПечатью.ИсточникиКомандПечати(); 
	
	ТаблицаИсточников = Новый ТаблицаЗначений;
	
	ТаблицаИсточников.Колонки.Добавить("Метаданные");
	ТаблицаИсточников.Колонки.Добавить("Имя");
	ТаблицаИсточников.Колонки.Добавить("Синоним");
	
	Для Каждого ИсточникКомандПечати Из ИсточникиКомандПечати Цикл
		
		СтрокаИсточников = ТаблицаИсточников.Добавить();
		
		СтрокаИсточников.Метаданные = ИсточникКомандПечати;
		СтрокаИсточников.Имя = ИсточникКомандПечати.Имя;
		СтрокаИсточников.Синоним = ИсточникКомандПечати.Синоним;
		
	КонецЦикла;	 
	
	ТаблицаИсточников.Сортировать("Синоним");
	
	Для Каждого СтрокаИсточников Из ТаблицаИсточников Цикл
		
		Документ = СтрокаИсточников.Метаданные;
		
		Если Метаданные.Документы.Содержит(Документ) 
			И (Документ.Реквизиты.Найти("Партнер") <> Неопределено
			ИЛИ Документ.Реквизиты.Найти("Контрагент") <> Неопределено)
			И Документ.Реквизиты.Найти("Организация") <> Неопределено
			Тогда 
			
			КомандыПечати = УправлениеПечатью.КомандыПечатиОбъектаДоступныеДляВложений(Документ);
			
			Для Каждого КомандаПечати Из КомандыПечати Цикл
				
				Если Не ЗначениеЗаполнено(КомандаПечати.Обработчик) Тогда
					
					Элементы.ТипДокумента.СписокВыбора.Добавить(СтрокаИсточников.Имя, СтрокаИсточников.Синоним);
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;	
			
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
//
&НаСервере
Процедура ЗаполнитьСписокВыбораПечатныхФорм() 
	
	Объект.ПечатныеФормы.Очистить();
	
	Если ЗначениеЗаполнено(Объект.ТипДокумента) Тогда
		
		ОтборСтрок = Новый Структура;
		
		ОтборСтрок.Вставить("ТипДокумента", Объект.ТипДокумента);
		
		КомандыПечати = УправлениеПечатью.КомандыПечатиОбъектаДоступныеДляВложений(Метаданные.Документы[Объект.ТипДокумента]);
		
		Для Каждого КомандаПечати Из КомандыПечати Цикл 
			
			Если Не ЗначениеЗаполнено(КомандаПечати.Обработчик) Тогда

				ОтборСтрок.Вставить("ПечатнаяФорма", КомандаПечати.Идентификатор);
	
				НайденныеСтроки = ВыбранныеПечатныеФормы.НайтиСтроки(ОтборСтрок);

				Пометка = НайденныеСтроки.Количество() > 0;
				
				Объект.ПечатныеФормы.Добавить(КомандаПечати.Идентификатор, КомандаПечати.Представление, Пометка);
				
			КонецЕсли;	
			
		КонецЦикла;	 
		
	КонецЕсли;	
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
//
&НаСервере
Процедура УстановитьКомпоновку()
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипДокумента) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	СхемаКомпоновки = Новый СхемаКомпоновкиДанных();		
	
	Источник					= СхемаКомпоновки.ИсточникиДанных.Добавить();
	Источник.Имя				= "ИсточникДанных";
	Источник.СтрокаСоединения	= "";
	Источник.ТипИсточникаДанных	= "local";
	
	НаборДанных	= СхемаКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	
	НаборДанных.Запрос							= ТекстЗапросаДокументов(Объект.ТипДокумента);
	НаборДанных.Имя								= "НаборДанныхЗапроса";
	НаборДанных.ИсточникДанных					= Источник.Имя;
	НаборДанных.АвтоЗаполнениеДоступныхПолей	= Истина;
	
	ЭлементГруппировка = СхемаКомпоновки.ВариантыНастроек[0].Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	
	ЭлементГруппировка.Использование = Истина;
	ЭлементГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ЭлементГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));	
	
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновки, УникальныйИдентификатор);
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы)); 
	
	ПолеПараметрыДанных	= Новый ПолеКомпоновкиДанных("ПараметрыДанных");
	ПолеСистемныеПоля	= Новый ПолеКомпоновкиДанных("СистемныеПоля"); 
	ПолеКонтрагент		= Новый ПолеКомпоновкиДанных("Контрагент"); 
	ПолеДокумент		= Новый ПолеКомпоновкиДанных("Документ"); 
	
	Для Каждого ПолеВыбора Из КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		
		ВыбранноеПоле = СхемаКомпоновки.ВариантыНастроек[0].Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		
		ВыбранноеПоле.Использование	= Не (ПолеВыбора.Поле = ПолеПараметрыДанных ИЛИ ПолеВыбора.Поле = ПолеСистемныеПоля);
		ВыбранноеПоле.Поле			= ПолеВыбора.Поле;
		
	КонецЦикла;	 
	
	ПолеПорядка = СхемаКомпоновки.ВариантыНастроек[0].Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	
	ПолеПорядка.Поле = ПолеКонтрагент;
	
	ПолеПорядка = СхемаКомпоновки.ВариантыНастроек[0].Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	
	ПолеПорядка.Поле = ПолеДокумент;
	
	Для Каждого ПараметрКомпоновки Из КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры.Элементы Цикл
		
		ЭлементПараметр = СхемаКомпоновки.ВариантыНастроек[0].Настройки.ПараметрыДанных.Элементы.Добавить();
		
		ЭлементПараметр.Параметр		= ПараметрКомпоновки.Параметр;
		ЭлементПараметр.Использование	= Истина;
		
		ПараметрСхемы = СхемаКомпоновки.Параметры.Добавить(); 
		
		ЗаполнитьЗначенияСвойств(ПараметрСхемы, ПараметрКомпоновки);		
		
		ПараметрСхемы.Имя						= Строка(ПараметрКомпоновки.Параметр);
		ПараметрСхемы.ВключатьВДоступныеПоля	= Ложь;
		
	КонецЦикла;	 
	
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
//
&НаСервереБезКонтекста
Функция ТекстЗапросаДокументов(ТипДокумента)
	
	МетаданныеДокумента = Метаданные.Документы[ТипДокумента]; 
	
	Результат = "ВЫБРАТЬ
	 |	Контрагенты.Ссылка КАК Контрагент, 
	 |	Документ.Ссылка КАК Документ, 
	 |	ЕСТЬNULL(КонтрагентыКонтактнаяИнформация.Представление, """") КАК Email
	 |ПОМЕСТИТЬ ВТ_Документы
	 |ИЗ
	 |	Документ.ЗаказКлиента КАК Документ
	 |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	 |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	 |			ПО (КонтрагентыКонтактнаяИнформация.Ссылка = Контрагенты.Ссылка)
	 |				И (КонтрагентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailКонтрагента))
	 |		ПО Документ.Контрагент = Контрагенты.Ссылка
	 |ГДЕ
	 |	Документ.Организация = &Организация
	 |	И Документ.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	 |	И НЕ Документ.ПометкаУдаления
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ЭлектронноеПисьмоИсходящеегф_ПрикрепленныеДокументы.Ссылка КАК Письмо, 
	 |	ВТ_Документы.Документ КАК Документ, 
	 |	ЭлектронноеПисьмоИсходящее.Дата КАК Дата, 
	 |	ЭлектронноеПисьмоИсходящее.СтатусПисьма КАК СтатусПисьма, 
	 |	ЭлектронноеПисьмоИсходящее.ДатаОтправления КАК ДатаОтправления, 
	 |	ЭлектронноеПисьмоИсходящее.Тема КАК Тема
	 |ПОМЕСТИТЬ ВТ_ВсеПисьма
	 |ИЗ
	 |	ВТ_Документы КАК ВТ_Документы
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее.гф_ПрикрепленныеДокументы КАК ЭлектронноеПисьмоИсходящеегф_ПрикрепленныеДокументы
	 |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	 |			ПО ЭлектронноеПисьмоИсходящеегф_ПрикрепленныеДокументы.Ссылка = ЭлектронноеПисьмоИсходящее.Ссылка
	 |		ПО ВТ_Документы.Документ = ЭлектронноеПисьмоИсходящеегф_ПрикрепленныеДокументы.Документ
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	Подзапрос.Документ КАК Документ, 
	 |	ВТ_Письма.Письмо КАК Письмо, 
	 |	ВТ_Письма.СтатусПисьма КАК СтатусПисьма, 
	 |	ВТ_Письма.ДатаОтправления КАК ДатаОтправления, 
	 |	ВТ_Письма.Дата КАК Дата, 
	 |	ВТ_Письма.Тема КАК Тема
	 |ПОМЕСТИТЬ ВТ_Письма
	 |ИЗ
	 |	(ВЫБРАТЬ
	 |		ВТ_Письма.Документ КАК Документ, 
	 |		МАКСИМУМ(ВТ_Письма.Дата) КАК Дата
	 |	ИЗ
	 |		ВТ_ВсеПисьма КАК ВТ_Письма
	 |	
	 |	СГРУППИРОВАТЬ ПО
	 |		ВТ_Письма.Документ) КАК Подзапрос
	 |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВсеПисьма КАК ВТ_Письма
	 |		ПО Подзапрос.Дата = ВТ_Письма.Дата
	 |			И Подзапрос.Документ = ВТ_Письма.Документ
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ВТ_Документы.Контрагент КАК Контрагент, 
	 |	ВТ_Документы.Документ КАК Документ, 
	 |	ВТ_Документы.Email КАК Email, 
	 |	ВТ_Письма.Письмо КАК Письмо, 
	 |	ВТ_Письма.СтатусПисьма КАК СтатусПисьма, 
	 |	ВТ_Письма.ДатаОтправления КАК ДатаОтправления, 
	 |	ВТ_Письма.Дата КАК Дата, 
	 |	ВТ_Письма.Тема КАК Тема
	 |ИЗ
	 |	ВТ_Документы КАК ВТ_Документы
	 |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Письма КАК ВТ_Письма
	 |		ПО ВТ_Документы.Документ = ВТ_Письма.Документ
	 |ГДЕ
	 |	(ВТ_Письма.Письмо ЕСТЬ NULL
	 |			ИЛИ ВТ_Письма.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик)
	 |			ИЛИ &ОтображатьОтправленые)"; 
	
	Результат = СтрЗаменить(Результат, "Документ.ЗаказКлиента", "Документ." + ТипДокумента);
	
	Если МетаданныеДокумента.Реквизиты.Найти("Партнер") <> Неопределено Тогда
		
		Результат = СтрЗаменить(Результат, "Документ.Контрагент = Контрагенты.Ссылка", 
								"Документ.Партнер = Контрагенты.Партнер");
		
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции// } #wortmann

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
//
&НаСервере
Процедура ОтобратьНаСервере() 
	
	Если Не ЭтоАдресВременногоХранилища(АдресСхемы) Тогда
		
		Возврат;
		
	КонецЕсли;	
	
	СхемаКомпоновки = ПолучитьИзВременногоХранилища(АдресСхемы);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных; 
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки, КомпоновщикНастроек.ПолучитьНастройки(), , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКД = Новый ПроцессорКомпоновкиДанных;
	
	ПроцессорКД.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	Результат = Новый ТаблицаЗначений;
	
	ПроцессорВывода.УстановитьОбъект(Результат);
	
	ПроцессорВывода.Вывести(ПроцессорКД);
	
	СписокДокументов.Загрузить(Результат);
	
	Для Каждого СтрокаДокумента Из СписокДокументов Цикл
		
		СтрокаДокумента.Отметка = Истина; 
		СтрокаДокумента.ИмяФайла = СтрокаДокумента.Документ.Номер + "_" + 
									?(ЗначениеЗаполнено(СтрокаДокумента.Email), СтрокаДокумента.Email, "НетEmail") + "_" +
									Формат(СтрокаДокумента.Документ.Дата, "ДФ=yyyyMMdd")
									+ "." + ИмяПеречисления(Объект.ФорматВложений);
		
	КонецЦикла;	
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
//
&НаКлиенте
Процедура Отобрать(Команда)
	
	ОтобратьНаСервере();
	
КонецПроцедуры// } #wortmann 

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
//
&НаСервере
Функция ИмяПеречисления(ЗначениеПеречисления) 
	
	Если Не ЗначениеЗаполнено(ЗначениеПеречисления) Тогда
		
		Возврат "";
		
	КонецЕсли;	
	
	ИмяПеречисления = ЗначениеПеречисления.Метаданные().Имя;
	
	ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);
	
	ИмяЗначенияПеречисления	= Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;		
	
	Возврат НРег(ИмяЗначенияПеречисления);
	
КонецФункции// } #wortmann	

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
// Производит подстановку параметров в шаблон сообщения
//
// Параметры:
// Сообщение - Структрура - см. ШаблоныСообщений.СформироватьСообщение
//
Процедура ВставитьПараметрыВТекстСообщения(Сообщение, МассивСтрок)

	гф_РассылкаПечатныхФорм.ВставитьЛоготипВТекстСообщения(Сообщение, Объект.Организация);
	
	Если МассивСтрок.Количество()>1 Тогда
		
		НаименованиеДокумента = НРег(Метаданные.Документы[Объект.ТипДокумента].ПредставлениеСписка);
		
		НаименованиеПодписанного = "подписанные документы " + НаименованиеДокумента;
		
	Иначе
		
		НаименованиеДокумента = НРег(Метаданные.Документы[Объект.ТипДокумента].ПредставлениеОбъекта);

		НаименованиеПодписанного = "подписанный документ " + НаименованиеДокумента;
		
	КонецЕсли;	
	
	Падеж = 2;
	
	НаименованиеПодписанного = СклонениеПредставленийОбъектов.ПросклонятьПредставление(НаименованиеПодписанного, Падеж, Неопределено);

	Если МассивСтрок.Количество()>1 Тогда
		
		НаименованиеПодписанного = "сканы " + НаименованиеПодписанного;
		
	Иначе
		
		НаименованиеПодписанного = "скан " + НаименованиеПодписанного;
		
	КонецЕсли;	
	
	Падеж = 4;
	
	НаименованиеДокумента = СклонениеПредставленийОбъектов.ПросклонятьПредставление(НаименованиеДОкумента, Падеж, Неопределено);
	
	гф_РассылкаПечатныхФорм.ВставитьПараметрВТекстСообщения(Сообщение, "Наименование документа", НаименованиеДокумента); 

	гф_РассылкаПечатныхФорм.ВставитьПараметрВТекстСообщения(Сообщение, "Скан подписанного документа", НаименованиеПодписанного); 
	
	гф_РассылкаПечатныхФорм.ВставитьПараметрВТекстСообщения(Сообщение, "Адрес отправителя", Объект.АдресОтправителя); 
	
	гф_РассылкаПечатныхФорм.ВставитьПараметрВТекстСообщения(Сообщение, "Наименование организации", Объект.Организация.НаименованиеПолное); 
	
	Для Каждого КонтактнаяИнформация ИЗ Объект.Организация.КонтактнаяИнформация Цикл
		
		Если КонтактнаяИнформация.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.ВебСтраница") Тогда
			
			гф_РассылкаПечатныхФорм.ВставитьПараметрВТекстСообщения(Сообщение, "Сайт", КонтактнаяИнформация.Представление); 
			
			Прервать;	
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Объект.Организация, Объект.Период.ДатаОкончания);
	
	гф_РассылкаПечатныхФорм.ВставитьПараметрВТекстСообщения(Сообщение, "Адрес офиса", 
		ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ЮридическийАдрес"));
	
	гф_РассылкаПечатныхФорм.ВставитьПараметрВТекстСообщения(Сообщение, "Телефон организации", 
		ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "Телефоны"));
		
КонецПроцедуры// } #wortmann // ВставитьПараметрыВТекстСообщения()

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
//
&НаСервере
Процедура ПоместитьПечатныеФормыВХранилище(Ошибки) 
	
	ОчиститьВременныеХранилища();   
	
	Если Объект.ФорматВложений = Перечисления.ФорматыСохраненияОтчетов.XLSX Тогда
			
		ФорматФайла = ТипФайлаТабличногоДокумента.XLSX;
			
	Иначе
			
		ФорматФайла = ТипФайлаТабличногоДокумента.PDF;
			
	КонецЕсли;	
	
	ОтборДокументов = Новый Структура("Отметка", Истина);
	
	МассивВыгружаемыхСтрок = СписокДокументов.НайтиСтроки(ОтборДокументов);  
	
	Для Каждого ВыгружаемаяСтрока Из МассивВыгружаемыхСтрок Цикл   
		
		ТаблицаПечатныхФорм = гф_РассылкаПечатныхФорм.ИнициализироватьТаблицуПечатныхФорм();
		
		Для Каждого ПечатнаяФорма Из Объект.ПечатныеФормы Цикл   
			
			Если ПечатнаяФорма.Пометка Тогда
				
				СтрокаПечатнойФормы = ТаблицаПечатныхФорм.Добавить();
				
				СтрокаПечатнойФормы.Документ					= ВыгружаемаяСтрока.Документ;
				СтрокаПечатнойФормы.ИдентификаторПечатнойФормы	= ПечатнаяФорма.Значение;
				СтрокаПечатнойФормы.ПредставлениеПечатнойФормы	= ПечатнаяФорма.Представление;
				СтрокаПечатнойФормы.ФорматФайла					= ФорматФайла;
				СтрокаПечатнойФормы.ИмяФайла 					= СтрЗаменить(ПечатнаяФорма.Представление, " ", "_")
																+ "_" + ВыгружаемаяСтрока.ИмяФайла;	
				
			КонецЕсли;	
			
		КонецЦикла;	
		
		гф_РассылкаПечатныхФорм.ВывестиДокументыВТаблицуПечатныхФорм(ТаблицаПечатныхФорм, УникальныйИдентификатор, Ошибки);   
		
		Если ТаблицаПечатныхФорм.Количество() Тогда															
			
			ВыгружаемаяСтрока.Файлы.Загрузить(ТаблицаПечатныхФорм);
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
// Формирует письмо по строкам списка документов
//
// Параметры:
// МассивСтрок - Массив
//
&НаСервере
Процедура СформироватьПисьмо(МассивСтрок)   
	
	ПерваяСтрока = Истина;  
	
	ТаблицаФайлов = Неопределено;
	
	Для Каждого СтрокаМассива Из МассивСтрок Цикл  
		
		Если ПерваяСтрока Тогда 
			
			ТаблицаФайлов = СтрокаМассива.Файлы.Выгрузить();
			
			ПерваяСтрока = Ложь;
			
		Иначе                  
			
			Для Каждого Файл Из СтрокаМассива.Файлы Цикл
				
				СтрокаФайлов = ТаблицаФайлов.Добавить();  
				
				ЗаполнитьЗначенияСвойств(СтрокаФайлов, Файл);
				
			КонецЦикла;
			
		КонецЕсли;	
		
	КонецЦикла; 
	
	Предмет = МассивСтрок[0].Контрагент;           
	
	Письмо = МассивСтрок[0].Письмо; 
	
	Если Объект.Организация.ИНН = "7705855199" Тогда
		
		ТемаСообщения = "Wortmann/Tamaris";
		
	Иначе	
		
		ТемаСообщения = Объект.Организация.НаименованиеПолное;
		
	КонецЕсли;	
	
	Если МассивСтрок.Количество()>1 Тогда
		
		ТемаСообщения = ТемаСообщения + " " + Метаданные.Документы[Объект.ТипДокумента].ПредставлениеСписка;
		
	Иначе	
		
		ТемаСообщения = ТемаСообщения + " " + Метаданные.Документы[Объект.ТипДокумента].ПредставлениеОбъекта;
		
	КонецЕсли; 
	
	ПервыйДокумент = Истина;
	
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		
		Если ПервыйДокумент Тогда 
			
			Разделитель = " ";
			
			ПервыйДокумент = Ложь;
			
		Иначе	
			
			Разделитель = ", ";
			
		КонецЕсли;	
		
		ТемаСообщения = ТемаСообщения + Разделитель + СтрокаМассива.Документ.Номер; 
		
	КонецЦикла;	
	
	ДополнительныеПараметры	= Новый Структура; 
	
	Сообщение = ШаблоныСообщений.СформироватьСообщение(Объект.Шаблон, Предмет, УникальныйИдентификатор, ДополнительныеПараметры);
	
	Сообщение.Тема = ТемаСообщения;
	
	ВставитьПараметрыВТекстСообщения(Сообщение, МассивСтрок); 
	
	МассивДокументов = Новый Массив;

	Для Каждого СтрокаМассива Из МассивСтрок Цикл  
		
		МассивДокументов.Добавить(СтрокаМассива.Документ);
		
		Для Каждого Файл Из СтрокаМассива.Файлы Цикл  
			
			Если ЭтоАдресВременногоХранилища(Файл.Адрес) Тогда
				
				Вложение = Сообщение.Вложения.Добавить();
				
				Вложение.АдресВоВременномХранилище	= Файл.Адрес;
				Вложение.Представление				= Файл.ИмяФайла;
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЦикла; 
	
	гф_РассылкаПечатныхФорм.СоздатьИлиЗаполнитьПисьмо(Письмо, Сообщение, МассивДокументов, Объект.УчетнаяЗапись, Объект.АдресОтправителя, Объект.ПоставитьВКопию);
	
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		
		СтрокаМассива.Письмо = Письмо;
		
	КонецЦикла; 
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
//
&НаКлиенте
Процедура ОбновитьДанныеПисем()
	
	ОтборСтрок = Новый Структура("Отметка", Истина);
	
	МассивОбновленныхПисем = Новый Массив;
	
	СтрокиПисем = СписокДокументов.НайтиСтроки(ОтборСтрок);
	
	Для Каждого СтрокаПисем Из СтрокиПисем Цикл
		
		Если ЗначениеЗаполнено(СтрокаПисем.Письмо) И МассивОбновленныхПисем.Найти(СтрокаПисем.Письмо) = Неопределено Тогда
			
			МассивОбновленныхПисем.Добавить(СтрокаПисем.Письмо);
			
			ОбновитьДанныеПисьмаНаСервере(СтрокаПисем.Письмо);
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры// } #wortmann	

// #wortmann {
// #Спецификация покупателя
// Галфинд Окунев 2022/07/20
// Обновляет статус и даты письма в табличной части
//
// Параметры:
// Письмо - ДокументСсылка.ЭлектронноеПисьмоВходящее
//
&НаСервере
Процедура ОбновитьДанныеПисьмаНаСервере(Письмо)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	 |	ЭлектронноеПисьмоИсходящее.Дата КАК Дата, 
	 |	ЭлектронноеПисьмоИсходящее.ДатаОтправления КАК ДатаОтправления, 
	 |	ЭлектронноеПисьмоИсходящее.СтатусПисьма КАК СтатусПисьма, 
	 |	ЭлектронноеПисьмоИсходящее.Тема КАК Тема
	 |ИЗ
	 |	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	 |ГДЕ
	 |	ЭлектронноеПисьмоИсходящее.Ссылка = &Письмо";
	
	Запрос.Параметры.Вставить("Письмо", Письмо); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ОтборСтрок = Новый Структура("Письмо", Письмо);
		
		СтрокиПисем = СписокДокументов.НайтиСтроки(ОтборСтрок);
		
		Для Каждого СтрокаПисем Из СтрокиПисем Цикл
			
			ЗаполнитьЗначенияСвойств(СтрокаПисем, Выборка);
			
		КонецЦикла;	 
		
	КонецЕсли;

КонецПроцедуры// } #wortmann

#КонецОбласти      
