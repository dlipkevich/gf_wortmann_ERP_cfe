    #Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ЗагрузкаИзФайлаВТЧ

// Переопределяет параметры загрузки данных из файла.
//
// Параметры:
//  Параметры - Структура:
//   * ИмяМакетаСШаблоном - Строка - наименование макета. Например, "ЗагрузкаИзФайла".
//   * ИмяТабличнойЧасти - Строка - Полное имя табличной части. Например, "Документ._ДемоСчетНаОплатуПокупателю.ТабличнаяЧасть.Товары"
//   * ОбязательныеКолонки - Массив из Строка - наименования обязательных для заполнения колонок.
//   * ТипДанныхКолонки - Соответствие из КлючИЗначение:
//      * Ключ - Строка - имя колонки;
//      * Значение - ОписаниеТипов - тип колонки загружаемых данных.
//   * ДополнительныеПараметры - Структура
//
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(Параметры) Экспорт

КонецПроцедуры

// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
// 
// Параметры:
// 	АдресЗагружаемыхДанных- Строка - адрес временного хранилища с таблицей значений, в которой
//                                   находятся загруженные данные из файла.
// 	АдресТаблицыСопоставления - Строка - адрес временного хранилища с пустой таблицей значений,
//                                       являющейся копией табличной части документа, 
//                                       которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
// 	СписокНеоднозначностей - ТаблицаЗначений - состоит из:
//  * Идентификатор - Число - идентификатор
//  * Колонка - Строка - имя колонки
// 	ПолноеИмяТабличнойЧасти - Строка - полное имя табличной части
// 	ДополнительныеПараметры - Структура - дополнительные параметры, переданные из формы-источнике.
//
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
	
	Блокировка = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления); // ТаблицаЗначений
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных); // ТаблицаЗначений
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ДанныеДляСопоставления.ИнвентарныйНомер КАК СТРОКА(15)) КАК ИнвентарныйНомер,
		|	ДанныеДляСопоставления.ОсновноеСредство КАК ОсновноеСредство,
		|	ДанныеДляСопоставления.Идентификатор КАК Идентификатор
		|ПОМЕСТИТЬ ДанныеДляСопоставления
		|ИЗ
		|	&ДанныеДляСопоставления КАК ДанныеДляСопоставления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИнвентарныйНомер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбъектыЭксплуатации.Ссылка КАК Ссылка,
		|	ОбъектыЭксплуатации.Ссылка.ИнвентарныйНомер КАК ИнвентарныйНомер,
		|	ДанныеДляСопоставления.Идентификатор КАК Идентификатор
		|ПОМЕСТИТЬ СопоставленнаяНоменклатураПоИнвентарномуНомеру
		|ИЗ
		|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
		|		ПО (ОбъектыЭксплуатации.Ссылка.ИнвентарныйНомер = ДанныеДляСопоставления.ИнвентарныйНомер)
		|		И (ДанныеДляСопоставления.ИнвентарныйНомер <> """")
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДляСопоставления.ОсновноеСредство КАК ОсновноеСредство,
		|	ДанныеДляСопоставления.Идентификатор КАК Идентификатор
		|ПОМЕСТИТЬ ДанныеДляСопоставленияПоНаименованию
		|ИЗ
		|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
		|		ЛЕВОЕ СОЕДИНЕНИЕ СопоставленнаяНоменклатураПоИнвентарномуНомеру КАК СопоставленнаяНоменклатураПоИнвентарномуНомеру
		|		ПО ДанныеДляСопоставления.Идентификатор = СопоставленнаяНоменклатураПоИнвентарномуНомеру.Идентификатор
		|ГДЕ
		|	СопоставленнаяНоменклатураПоИнвентарномуНомеру.Идентификатор ЕСТЬ NULL
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ОбъектыЭксплуатации.Ссылка) КАК Ссылка,
		|	ДанныеДляСопоставленияПоНаименованию.Идентификатор КАК Идентификатор,
		|	КОЛИЧЕСТВО(ДанныеДляСопоставленияПоНаименованию.Идентификатор) КАК Количество
		|ИЗ
		|	ДанныеДляСопоставленияПоНаименованию КАК ДанныеДляСопоставленияПоНаименованию
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
		|		ПО (ОбъектыЭксплуатации.Наименование = (ВЫРАЗИТЬ(ДанныеДляСопоставленияПоНаименованию.ОсновноеСредство КАК
		|			СТРОКА(500))))
		|СГРУППИРОВАТЬ ПО
		|	ДанныеДляСопоставленияПоНаименованию.Идентификатор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МАКСИМУМ(СопоставленнаяНоменклатураПоИнвентарномуНомеру.Ссылка),
		|	СопоставленнаяНоменклатураПоИнвентарномуНомеру.Идентификатор,
		|	КОЛИЧЕСТВО(СопоставленнаяНоменклатураПоИнвентарномуНомеру.Идентификатор)
		|ИЗ
		|	СопоставленнаяНоменклатураПоИнвентарномуНомеру КАК СопоставленнаяНоменклатураПоИнвентарномуНомеру
		|СГРУППИРОВАТЬ ПО
		|	СопоставленнаяНоменклатураПоИнвентарномуНомеру.Идентификатор";

	Запрос.УстановитьПараметр("ДанныеДляСопоставления", ЗагружаемыеДанные);
	РезультатыЗапросов = Запрос.ВыполнитьПакет(); // Массив из РезультатЗапроса
	
	ТаблицаОС = РезультатыЗапросов[3].Выгрузить(); // ТаблицаЗначений

	Для каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл
		
		СтрокаБлокировки = Блокировка.Добавить();
		СтрокаБлокировки.Идентификатор = СтрокаТаблицы.Идентификатор;
		СтрокаБлокировки.СрокИспользованияБУ = СтрокаТаблицы.СрокИспользованияБУ;
		СтрокаБлокировки.СрокИспользованияУУ = СтрокаТаблицы.СрокИспользованияУУ;
		СтрокаБлокировки.ОбъемНаработки = СтрокаТаблицы.ОбъемНаработки;
		СтрокаБлокировки.ЛиквидационнаяСтоимостьРегл = СтрокаТаблицы.ЛиквидационнаяСтоимостьРегл;
		СтрокаБлокировки.ЛиквидационнаяСтоимость = СтрокаТаблицы.ЛиквидационнаяСтоимость;
		
		СтрокаОС = ТаблицаОС.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		Если СтрокаОС <> Неопределено Тогда 
			Если СтрокаОС.Количество = 1 Тогда 
				СтрокаБлокировки.ОсновноеСредство = СтрокаОС.Ссылка;
				СтрокаБлокировки.ИнвентарныйНомер = СтрокаТаблицы.ИнвентарныйНомер;
			ИначеЕсли СтрокаОС.Количество > 1 Тогда
				ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
				ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор;
				ЗаписьОНеоднозначности.Колонка = "ОсновноеСредство";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Блокировка, АдресТаблицыСопоставления);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли