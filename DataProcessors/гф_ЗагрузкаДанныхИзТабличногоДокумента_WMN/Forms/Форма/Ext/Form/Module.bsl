
///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Функция ИдентификаторОбработки()
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектОбработка.Метаданные().ПолноеИмя();
КонецФункции

&НаСервереБезКонтекста
Процедура мСообщитьОбОшибке(ТекстСообщения, Отказ = Ложь, Заголовок = "") Экспорт
// Выводит сообщение об ошибке и выставляет параметр Отказ в "Истина". 
// В случае работы на клиенте или на сервере выводит в окно сообщений,
// в случае внешнего соединения вызывает исключение.
//
// Параметры:
//  ТекстСообщения - строка, текст сообщения.
//  Отказ          - булево, признак отказа (необязательный).
//

	НачалоСлужебногоСообщения    = Найти(ТекстСообщения, "{");
	ОкончаниеСлужебногоСообщения = Найти(ТекстСообщения, "}:");
	Если ОкончаниеСлужебногоСообщения > 0 И НачалоСлужебногоСообщения > 0 Тогда
		ТекстСообщения = Лев(ТекстСообщения, (НачалоСлужебногоСообщения - 1)) +
		                 Сред(ТекстСообщения, (ОкончаниеСлужебногоСообщения + 2));
	КонецЕсли;
	
	Отказ = Истина;
	
	Если ЗначениеЗаполнено(Заголовок) Тогда
		Сообщить(Заголовок);
		Заголовок = "";
	КонецЕсли;
	
	Сообщить(ТекстСообщения, СтатусСообщения.Важное);
	
КонецПроцедуры // ОбщегоНазначения.СообщитьОбОшибке()

&НаСервере
Функция мРазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",")
// Функция "расщепляет" строку на подстроки, используя заданный
//		разделитель. Разделитель может иметь любую длину.
//		Если в качестве разделителя задан пробел, рядом стоящие пробелы
//		считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//		игнорируются.
//		Например,
//		ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(",ку,,,му", ",") возвратит массив значений из пяти элементов,
//		три из которых - пустые строки, а
//		ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(" ку   му", " ") возвратит массив значений из двух элементов
//
//	Параметры:
//		Стр - 			строка, которую необходимо разложить на подстроки.
//						Параметр передается по значению.
//		Разделитель - 	строка-разделитель, по умолчанию - запятая.
//
//
//	Возвращаемое значение:
//		массив значений, элементы которого - подстроки
//
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		// ..Пока 1=1 Цикл
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		// ..Пока 1=1 Цикл
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции // глРазложить

&НаСервере
Функция мПривестиКЧислу(Представление, Знач ОписаниеТипов = Неопределено, Примечание = "")
// Функция приводит строковое представление числа к его значению
//
// Параметры:
//  Представление - Представление числа
//  ОписаниеТипов - Допустимое описание типов численного значения
//
// Возвращаемое значение:
//  Значение типа число
//
	
	Если ОписаниеТипов = Неопределено Тогда
		ОписаниеТипов = Новый ОписаниеТипов("Число");
	КонецЕсли;
	
	НРегПредставление = НРег(Представление);
	Если НРегПредставление = "да" или НРегПредставление = "истина" или НРегПредставление = "включено" Тогда
		Возврат 1;
	ИначеЕсли НРегПредставление = "нет" или НРегПредставление = "ложь" или НРегПредставление = "выключено" Тогда
		Возврат 0;
	// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
	// ++
	Иначе
		а = 0;
	//--
	КонецЕсли;
	
	Результат = СтрЗаменить(Представление, " ", "");
	// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
	// ++
	//Попытка
	//	Результат = Число(Результат);
	//Исключение
	//	Примечание = "Неправильный формат числа";
	//	Возврат 0;
	//КонецПопытки;
	Результат = ОписаниеТипов.ПривестиЗначение(Результат);
	//--
	
	Результат1 = ОписаниеТипов.ПривестиЗначение(Результат);
	
	Если Не Результат1 = Результат Тогда
		Примечание = "Недопустимое числовое значение";
	КонецЕсли;
	
	Возврат Результат1;
	
КонецФункции // мПривестиКЧислу()

&НаСервере
Функция мПривестиКДате(Представление, ТипРеквизита, Примечание = "")
// Функция приводит строковое представление даты к его значению
//
// Параметры:
//  Представление - Представление числа
//  ОписаниеТипов - Допустимое описание типов значения типа дата
//
// Возвращаемое значение:
//  Значение типа дата
//
	
	Результат = ТипРеквизита.ПривестиЗначение(Представление);
	// ++ Галфинд СадомцевСА 04.08.2023 Исправил "ошибку" СонарКуба
	//Если Результат = '00010101' Тогда
	Если Результат <> '00010101' Тогда
		Возврат Результат;
	КонецЕсли;
	
	МассивЧастей = ПолучитьЧастиПредставленияДаты(Представление);
	Если ТипРеквизита.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Время Тогда
		
		// Галфинд СадомцевСА 07.08.2023 Исправил "ошибки" СонарКуба
		ПривестиКДате_ПустаяДатаВремя(Результат, МассивЧастей, Примечание);
		
	ИначеЕсли МассивЧастей.Количество() = 3 или МассивЧастей.Количество() = 6 Тогда
		
		Если МассивЧастей[0] >= 1000 Тогда
			Временно = МассивЧастей[0];
			МассивЧастей[0] = МассивЧастей[2];
			МассивЧастей[2] = Временно;
		КонецЕсли;
		
		Если МассивЧастей[2] < 100 Тогда
			МассивЧастей[2] = МассивЧастей[2] + ?(МассивЧастей[2] < 30, 2000,1900);
		КонецЕсли;
		
		// Галфинд СадомцевСА 07.08.2023 Исправил "ошибки" СонарКуба
		ПривестиКДате_ДатаВремя(Результат, МассивЧастей, Примечание, ТипРеквизита);
		
	// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
	// ++
	Иначе
		а = 0;
	//--
	КонецЕсли;
		
	//КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьЧастиПредставленияДаты(ЗНАЧ Представление)
// Функция возвращает части представления даты
//
// Параметры:
//  Представление - Представление даты
//
// Возвращаемое значение:
//  массив частей даты
//
	
	МассивЧастей = Новый Массив;
	НачалоЦифры = 0;
	Для к = 1 По СтрДлина(Представление) Цикл
		
		Символ = Сред(Представление, к ,1);
		ЭтоЦифра = Символ >= "0" и Символ <= "9";
		
		Если ЭтоЦифра Тогда
			
			Если НачалоЦифры = 0 Тогда
				НачалоЦифры = к;
			КонецЕсли;
			
		Иначе
			
			Если Не НачалоЦифры = 0 Тогда
				МассивЧастей.Добавить(Число(Сред(Представление,НачалоЦифры, к - НачалоЦифры)));
			КонецЕсли;
			
			НачалоЦифры = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не НачалоЦифры = 0 Тогда
		МассивЧастей.Добавить(Число(Сред(Представление,НачалоЦифры)));
	КонецЕсли;
	
	Возврат МассивЧастей;
КонецФункции // ()

&НаСервере
Функция ПолучитьМенеджераПоТипу(ТипЗначения) Экспорт
// Функция возвращает менеджер по типу значения
//
// Параметры:
//  ТипЗначения - Тип значения, по которому нужна вернуть менеджер
//
// Возвращаемое значение:
//  менеджер
	
	Если Не ТипЗначения = Неопределено Тогда
		МенеджерыОбъектовМетаданных = Новый Структура("Справочники, Перечисления, Документы, ПланыВидовХарактеристик, ПланыСчетов, ПланыВидовРасчета, БизнесПроцессы, Задачи",
				Справочники,
				Перечисления,
				Документы,
				ПланыВидовХарактеристик,
				ПланыСчетов,
				ПланыВидовРасчета,
				БизнесПроцессы,
				Задачи);
		Для Каждого МенеджерОбъектаМетаданных Из МенеджерыОбъектовМетаданных Цикл
			Если МенеджерОбъектаМетаданных.Значение.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда
				Менеджер = МенеджерОбъектаМетаданных.Значение[Метаданные.НайтиПоТипу(ТипЗначения).Имя];
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Возврат Менеджер;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьОписаниеТипа(ОписаниеТиповРеквизита) Экспорт
	
	ОписаниеТипов = "";
	
	Для каждого Тип Из ОписаниеТиповРеквизита.Типы() Цикл
		
		// ++ Галфинд СадомцевСА 04.08.2023 Исправил "ошибку" СонарКуба
		гф_ДополнитьОписаниеТипов(ОписаниеТиповРеквизита, Тип, ОписаниеТипов);
		
	КонецЦикла;	
	
	Возврат ОписаниеТипов;

КонецФункции // ПолучитьОписаниеТипа()

////////////////////////////////////////////////////////////////////////////////
//

&НаСервере
Функция мВосстановитьЗначение(Имя)
	// ++
	//Возврат ХранилищеНастроекДанныхФорм.Загрузить(ИдентификаторОбработки(), Имя);
	ИмяОбъектаМетаданных = Объект.СсылкаИсточника.Метаданные().Имя;
	УИДПользователя = Строка(ПараметрыСеанса.ТекущийПользователь.УникальныйИдентификатор());
	Возврат ХранилищеНастроекДанныхФорм.Загрузить(ИдентификаторОбработки() + "_МетаданныеИмя_" + ИмяОбъектаМетаданных + УИДПользователя, Имя);
	// --
КонецФункции

&НаСервере
Процедура мСохранитьЗначение(Имя, Знач Значение)
	
	Если ТипЗнч(Значение) = Тип("ДанныеФормыКоллекция") Тогда
	
		Значение = ДанныеФормыВЗначение(Значение, Тип("ТаблицаЗначений"));
	
	КонецЕсли; 

	// ++
	//ХранилищеНастроекДанныхФорм.Сохранить(ИдентификаторОбработки(), Имя, Значение);
	УстановитьПривилегированныйРежим(Истина);
	ИмяОбъектаМетаданных = Объект.СсылкаИсточника.Метаданные().Имя;
	УИДПользователя = Строка(ПараметрыСеанса.ТекущийПользователь.УникальныйИдентификатор());
	ХранилищеНастроекДанныхФорм.Сохранить(ИдентификаторОбработки() + "_МетаданныеИмя_" + ИмяОбъектаМетаданных + УИДПользователя, Имя, Значение);
	// --

КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкуПоУмолчанию(СписокНастроек)
// Функция возвращает настройку, сохраненную в списке сохраненных настроек
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  табличный документ - настройки загружаемых реквизитов
//
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	
	Если МетаданныеИсточника = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	//ТЗ = РеквизитФормыВЗначение("СписокСохраненныхНастроек");
	Для каждого СтрокаСписка Из СписокНастроек Цикл
		Если СтрокаСписка.Пометка Тогда
			Возврат СтрокаСписка.Значение;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции // ()

////////////////////////////////////////////////////////////////////////////////
//

&НаСервере
Процедура УстановитьСписокТабличныхЧастей()
// Процедура заполняет список выбора элемента управления "ТабличнаяЧастьИсточника"
//
	
	СписокВыбора = Элементы.ТабличнаяЧастьИсточника.СписокВыбора;
	СписокВыбора.Очистить();
	Если Объект.СсылкаИсточника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Для каждого ТабличнаяЧасть Из Объект.СсылкаИсточника.Метаданные().ТабличныеЧасти Цикл
		СписокВыбора.Добавить(ТабличнаяЧасть.Имя, ТабличнаяЧасть.Представление());
	КонецЦикла;
	Если НЕ ПустаяСтрока(Объект.ТабличнаяЧастьИсточника) И СписокВыбора.НайтиПоЗначению(Объект.ТабличнаяЧастьИсточника) = Неопределено Тогда
		Объект.ТабличнаяЧастьИсточника = "";
	КонецЕсли;
	
КонецПроцедуры // ()

&НаСервере
Процедура СформироватьСтруктуруКолонок()
// Процедура формирует структуру колонок загружаемых реквизитов из табличной части "ТаблицаЗагружаемыхРеквизитов"
//
// Параметры:
//  нет
//
	
	НомерКолонки = 1;
	Колонки = Новый Структура;
	
	ТЗ = РеквизитФормыВЗначение("ТаблицаЗагружаемыхРеквизитов");
	
	ВремКолонки = ТЗ.СкопироватьКолонки();
	Для каждого ЗагружаемыйРеквизит Из ТЗ Цикл
		Колонка = Новый Структура;
		Для каждого КолонкаЗагружаемыхРеквизитов Из ВремКолонки.Колонки Цикл
			Если Не Объект.РучнаяНумерацияКолонокТабличногоДокумента И КолонкаЗагружаемыхРеквизитов.Имя = "НомерКолонки" Тогда
				Если ЗагружаемыйРеквизит.Пометка Тогда
					Колонка.Вставить("НомерКолонки",НомерКолонки);
					НомерКолонки = НомерКолонки + 1;
				Иначе
					Колонка.Вставить("НомерКолонки",0);
				КонецЕсли;
			Иначе
				Колонка.Вставить(КолонкаЗагружаемыхРеквизитов.Имя,ЗагружаемыйРеквизит[КолонкаЗагружаемыхРеквизитов.Имя]);
			КонецЕсли;
			
		КонецЦикла;
		
		Колонки.Вставить(Колонка.ИмяРеквизита,Колонка);
		
	КонецЦикла;
	
	Объект.ДополнительныеСвойства.Вставить("Колонки", Колонки);
	
КонецПроцедуры // ()

&НаСервере
Процедура СформироватьШапкуТабличногоДокумента(ТабличныйДокумент)
// Процедура формирует шапку табличного документа, в соответствии с таблицей загружаемых реквизитов
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент, у которого необходимо сформировать шапку
//
	
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
	
	ТЗ = РеквизитФормыВЗначение("ТаблицаЗагружаемыхРеквизитов");
	
	Таблица = ТЗ.Скопировать();
	Таблица.Сортировать("НомерКолонки");
	
	Колонки = Объект.ДополнительныеСвойства.Колонки;
	
	Для каждого КлючИЗначение Из Колонки Цикл
		ЗагружаемыйРеквизит = КлючИЗначение.Значение;
		НомерКолонки = ЗагружаемыйРеквизит.НомерКолонки;
		Если Не ЗагружаемыйРеквизит.Пометка Или НомерКолонки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// ++ Галфинд СадомцевСА 04.08.2023 Исправил "ошибку" СонарКуба
		ШиринаКолонки = ОпределитьШиринуКолонки(ЗагружаемыйРеквизит);
		
		Область = ТабличныйДокумент.Область("R1C"+НомерКолонки);
		БылТекст = Не ПустаяСтрока(Область.Текст);
		Область.Текст       = ?(БылТекст,Область.Текст + Символы.ПС,"") + ЗагружаемыйРеквизит.ПредставлениеРеквизита;
		Область.Расшифровка = ЗагружаемыйРеквизит.ИмяРеквизита;
		Область.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
		Область.Обвести(Линия, Линия, Линия, Линия);
		
		ОбластьКолонки = ТабличныйДокумент.Область("C"+НомерКолонки);
		ОбластьКолонки.ШиринаКолонки = ?(БылТекст,Макс(ОбластьКолонки.ШиринаКолонки,ШиринаКолонки),ШиринаКолонки);
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьШапкуТабличногоДокумента()

&НаСервере
Функция ПолучитьМетаданныеИсточника()
// Функция возвращает метаданные источника данных
//
// Параметры:
//  нет
//
// Возвращаемое значение:
//  Объект метаданных
//
	
	Если Объект.РежимЗагрузки = 0 Тогда
		Если НЕ ПустаяСтрока(Объект.ТипОбъектаСправочника) Тогда
			Возврат Метаданные.Справочники[Объект.ТипОбъектаСправочника];
		КонецЕсли; 
	ИначеЕсли Объект.РежимЗагрузки = 1 Тогда
		Если Не Объект.СсылкаИсточника = Неопределено и Не Объект.ТабличнаяЧастьИсточника = Неопределено Тогда
			Возврат Объект.СсылкаИсточника.Метаданные().ТабличныеЧасти.Найти(Объект.ТабличнаяЧастьИсточника);
		КонецЕсли; 
	ИначеЕсли Объект.РежимЗагрузки = 2 Тогда
		Если Не ПустаяСтрока(Объект.ИмяВидаРегистра) Тогда
			Возврат Метаданные.РегистрыСведений[Объект.ИмяВидаРегистра];
		КонецЕсли; 
	// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
	// ++
	Иначе
		а = 0;
	//--
	КонецЕсли; 
	
	Возврат Неопределено;
	
КонецФункции // ()

&НаСервере
Функция ЕстьВыбранныеМетаданные()

	Возврат Не ПолучитьМетаданныеИсточника() = Неопределено;

КонецФункции // ЕстьВыбранныеМетаданные()

&НаСервере
Функция ПолучитьТекстВопросаИсточника()
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	
	Ошибка = "";
	ТекстВопросаИсточника = "";
	
	Если Объект.РежимЗагрузки = 0 Тогда
		ТекстВопросаИсточника = " элементов в справочник: """ + МетаданныеИсточника.Представление() + """";
		
	ИначеЕсли Объект.РежимЗагрузки = 1 Тогда
		
		Если Объект.СсылкаИсточника.Пустая() Тогда
			Ошибка = "Не выбрана ссылка";
		Иначе
			ОбъектИсточника = Объект.СсылкаИсточника.ПолучитьОбъект();
			ТекстВопросаИсточника = " строк в табличную часть: """ + МетаданныеИсточника.Представление() + """";
		КонецЕсли;
		
	ИначеЕсли Объект.РежимЗагрузки = 2 Тогда
		
		ТекстВопросаИсточника = " записей в регистр сведений: """ + МетаданныеИсточника.Представление() + """";
		
	// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
	// ++
	Иначе
		а = 0;
	//--
	КонецЕсли;
	
	Возврат Новый Структура("Ошибка, ТекстВопроса", Ошибка, ТекстВопросаИсточника);
	
КонецФункции

&НаСервере
Функция ЗагрузитьДанныеСервер()

	ЗаписыватьОбъект = истина;
	
	СформироватьСтруктуруКолонок();
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	
	Колонки = Объект.ДополнительныеСвойства.Колонки;
	
	// ++ Галфинд СадомцевСА 04.08.2023 Исправил "ошибку" СонарКуба
	Источник = Неопределено;
	ОбъектИсточника = Неопределено;
	ПодготовитьИсточникОбъектИсточника(Источник, ОбъектИсточника);
	//Если Объект.РежимЗагрузки = 0 Тогда
	//	Источник = Справочники[Объект.ТипОбъектаСправочника].ПустаяСсылка();
	//ИначеЕсли Объект.РежимЗагрузки = 1 Тогда
	//	ОбъектИсточника = Объект.СсылкаИсточника.ПолучитьОбъект();
	//	Источник = ОбъектИсточника[Объект.ТабличнаяЧастьИсточника];
	//КонецЕсли;
	// -- Галфинд СадомцевСА 04.08.2023 Исправил "ошибку" СонарКуба
	
	ТекстВопросаИсточника = ПолучитьТекстВопросаИсточника().ТекстВопроса;
	КоличествоЭлементов = ТабличныйДокумент.ВысотаТаблицы - Объект.ПерваяСтрокаДанныхТабличногоДокумента + 1;
	
	Запрос = Неопределено;
	// ++ Галфинд СадомцевСА 04.08.2023 Исправил "ошибку" СонарКуба
	ИзмеренияРегистра = Неопределено;
	СтрокиПоиска = Неопределено;
	ПодготовитьСтрокиПоискаЗапросИзмеренияРегистраКолонки(СтрокиПоиска, Запрос, Источник, ИзмеренияРегистра,
		Колонки, МетаданныеИсточника);
	//Если Объект.РежимЗагрузки = 0 Тогда
	//	
	//	СтрокиПоиска = ТаблицаЗагружаемыхРеквизитов.НайтиСтроки(Новый Структура("ПолеПоиска,Пометка",Истина,Истина));
	//	Если Не СтрокиПоиска.Количество() = 0 Тогда
	//		
	//		ТекстЗапроса =
	//		"Выбрать Первые 1
	//		|Справочник.Ссылка КАК Ссылка
	//		|Из Справочник."+МетаданныеИсточника.Имя+" КАК Справочник
	//		|Где";
	//		
	//		Для каждого СтрокаПоиска Из СтрокиПоиска Цикл
	//			ТекстЗапроса = ТекстЗапроса +"
	//			|Справочник."+СтрокаПоиска.ИмяРеквизита+" = &" + СтрокаПоиска.ИмяРеквизита + "
	//			|И";
	//			
	//		КонецЦикла;
	//		
	//		ТекстЗапроса = Лев(ТекстЗапроса,СтрДлина(ТекстЗапроса) - 2);
	//		Запрос = Новый Запрос (ТекстЗапроса);
	//	КонецЕсли;
	//ИначеЕсли Объект.РежимЗагрузки = 1 Тогда
	//	
	//	Источник.Очистить();
	//ИначеЕсли Объект.РежимЗагрузки = 2 Тогда
	//	
	//	ИзмеренияРегистра = Новый Структура;
	//	Для каждого Колонка Из Колонки Цикл
	//		Если Колонка.Значение.МожетБытьПолемПоиска Тогда
	//			ИзмеренияРегистра.Вставить(Колонка.Ключ,Колонка.Значение);
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	// -- Галфинд СадомцевСА 04.08.2023 Исправил "ошибку" СонарКуба
	
	Сообщить("Выполняется загрузка"+ ТекстВопросаИсточника, СтатусСообщения.Информация);
	Сообщить("Всего: " + КоличествоЭлементов, СтатусСообщения.Информация);
	Сообщить("---------------------------------------------", СтатусСообщения.БезСтатуса);
	НомерТекущейСтроки = 0;
	Загружено = 0;
	Для К = Объект.ПерваяСтрокаДанныхТабличногоДокумента По ТабличныйДокумент.ВысотаТаблицы Цикл
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
		ТекстыЯчеек = Неопределено;
		Отказ = Ложь;
		ТекущаяСтрока = КонтрольЗаполненияСтроки(ТабличныйДокумент, К, ТекстыЯчеек);
		// ++ Галфинд СадомцевСА 04.08.2023 Исправил "ошибку" СонарКуба
		ЗагружаемыйОбъект = Неопределено;
		ОбъектНайден = Неопределено;
		ПодготовитьЗагружаемыйОбъектОбъектНайден(ТекущаяСтрока, НомерТекущейСтроки, ЗагружаемыйОбъект, ОбъектНайден,
			СтрокиПоиска, Запрос, Источник, ИзмеренияРегистра, МетаданныеИсточника);
		//Если Объект.РежимЗагрузки =0 Тогда
		//	
		//	ЗагружаемыйОбъект = Неопределено;
		//	Если Не Запрос = Неопределено Тогда
		//		СтрокаОшибок = "";
		//		Для каждого СтрокаПоиска Из СтрокиПоиска Цикл
		//			
		//			ЗначениеРеквизита = Неопределено;
		//			
		//			ТекущаяСтрока.Свойство(СтрокаПоиска.ИмяРеквизита,ЗначениеРеквизита);
		//			Если ПустаяСтрока(ЗначениеРеквизита) Тогда
		//				СтрокаОшибок = ?(ПустаяСтрока(СтрокаОшибок),"",СтрокаОшибок + ", ") + СтрокаПоиска.ПредставлениеРеквизита;
		//			Иначе
		//				Запрос.УстановитьПараметр(СтрокаПоиска.ИмяРеквизита,ТекущаяСтрока[СтрокаПоиска.ИмяРеквизита]);
		//			КонецЕсли;
		//			
		//		КонецЦикла;
		//		
		//		Если Не ПустаяСтрока(СтрокаОшибок) Тогда
		//			Сообщить("Строка " + НомерТекущейСтроки + " не может быть записана.Не указано значение ключевых реквизитов: " + СтрокаОшибок,СтатусСообщения.Важное);
		//			Продолжить;
		//		КонецЕсли;
		//		
		//		Выборка = Запрос.Выполнить().Выбрать();
		//		Если Выборка.Следующий() Тогда
		//			ЗагружаемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
		//		КонецЕсли;
		//		
		//	КонецЕсли;
		//	
		//	ОбъектНайден = Не ЗагружаемыйОбъект = Неопределено;
		//	Если Не ОбъектНайден Тогда
		//		Если Объект.НеСоздаватьНовыхЭлементов Тогда
		//			Продолжить;
		//		Иначе
		//			ЗагружаемыйОбъект = Справочники[МетаданныеИсточника.Имя].СоздатьЭлемент();
		//		КонецЕсли;
		//		
		//	КонецЕсли;
		//ИначеЕсли Объект.РежимЗагрузки = 1 Тогда
		//	ЗагружаемыйОбъект = Источник.Добавить();
		//	ОбъектНайден = Ложь;
		//ИначеЕсли Объект.РежимЗагрузки = 2 Тогда
		//	ЗагружаемыйОбъект = РегистрыСведений[МетаданныеИсточника.Имя].СоздатьМенеджерЗаписи();
		//	Для каждого КлючИЗначение Из ТекущаяСтрока Цикл
		//		
		//		Если ИзмеренияРегистра.Свойство(КлючИЗначение.Ключ) Тогда
		//			ЗагружаемыйОбъект[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		//		КонецЕсли;
		//		
		//	КонецЦикла;
		//	
		//	Если Не Объект.ЗамещатьСуществующиеЗаписи Тогда
		//		ЗагружаемыйОбъект.Прочитать();
		//		ОбъектНайден = ЗагружаемыйОбъект.Выбран();
		//	Иначе
		//		ОбъектНайден = Ложь;
		//	КонецЕсли;
		//	
		//КонецЕсли;
		// -- Галфинд СадомцевСА 04.08.2023 Исправил "ошибку" СонарКуба
		
		// ++ Галфинд СадомцевСА 04.08.2023 Исправил "ошибку" СонарКуба
		ЗагружаемыйОбъектУстановитьЗначенияРеквизитов(ТекущаяСтрока, ОбъектНайден, Колонки, ЗагружаемыйОбъект, Отказ);
		//Для каждого КлючИЗначение Из ТекущаяСтрока Цикл
		//	
		//	Если Не ОбъектНайден или Колонки[КлючИЗначение.Ключ].Пометка  Тогда
		//		Попытка
		//			ЗагружаемыйОбъект[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		//		Исключение
		//			мСообщитьОбОшибке("Ошибка при установки значения реквизита """ + КлючИЗначение.Ключ + "" + ОписаниеОшибки());
		//			Отказ = Истина;
		//			Прервать;
		//		КонецПопытки;
		//	КонецЕсли;
		//	
		//КонецЦикла;
		// -- Галфинд СадомцевСА 04.08.2023 Исправил "ошибку" СонарКуба
		
		// ++ Галфинд СадомцевСА 04.08.2023 Исправил "ошибку" СонарКуба
		ЗагружаемыйОбъектЗаписать(ОбъектИсточника, ЗагружаемыйОбъект, ОбъектНайден, ТекстыЯчеек, Загружено,
			ЗаписыватьОбъект, НомерТекущейСтроки, Отказ);
		//Если Объект.РежимЗагрузки = 0 Тогда
		//	Если Не Отказ и ЗаписатьОбъект(ЗагружаемыйОбъект, ТекстыЯчеек, Объект.ПередЗаписьюОбъекта, Объект.ПриЗаписиОбъекта) Тогда
		//		Сообщить(?(ОбъектНайден,"Изменен","Загружен") + " элемент справочника: " + ЗагружаемыйОбъект.Ссылка, СтатусСообщения.Информация);
		//		Загружено = Загружено + 1;
		//	Иначе
		//		Сообщить("Объект не " + ?(ОбъектНайден,"изменен","загружен") + ". Элемент справочника: " + ЗагружаемыйОбъект + ".", СтатусСообщения.Важное);
		//	КонецЕсли;
		//ИначеЕсли Объект.РежимЗагрузки = 1 Тогда
		//	
		//	Если Не ОбработатьСобытиеПослеДобавленияСтроки(ОбъектИсточника, ЗагружаемыйОбъект, ТекстыЯчеек, Объект.ПослеДобавленияСтроки) Тогда
		//		Отказ = Истина;
		//	КонецЕсли;
		//	
		//	Если Не Отказ Тогда
		//		Сообщить("Добавлена строка: " + (Загружено + 1));
		//	Иначе
		//		Сообщить("При добавлении строки " + (Загружено + 1) + " возникли ошибки. ");
		//		ЗаписыватьОбъект = Ложь;
		//	КонецЕсли;
		//	
		//	Загружено = Загружено + 1;
		//	
		//ИначеЕсли Объект.РежимЗагрузки = 2 Тогда
		//	Если Не Отказ и ЗаписатьОбъект(ЗагружаемыйОбъект, ТекстыЯчеек, Объект.ПередЗаписьюОбъекта, Объект.ПриЗаписиОбъекта) Тогда
		//		Сообщить(?(ОбъектНайден,"Изменена","Добавлена") + " запись № " + НомерТекущейСтроки + ".");
		//		Загружено = Загружено + 1;
		//	Иначе
		//		Сообщить("Запись не " + ?(ОбъектНайден,"изменена","загружена") + ". № записи: " + НомерТекущейСтроки + ".", СтатусСообщения.Важное);
		//	КонецЕсли;
		//КонецЕсли;
		
	КонецЦикла;
	Сообщить("---------------------------------------------", СтатусСообщения.БезСтатуса);
	
	Если Объект.РежимЗагрузки = 1  Тогда
		// ++ Галфинд СадомцевСА 26.01.2023
		//Реализовал заполнение "связанных" полей при загрузке ТЧ Товары в коробах документа Перемещение товаров
		//e1cib/data/Задача.ЗадачаИсполнителя?ref=812abcee7bda45d711ed9ceb78015173
		ЗаполнитьПеремещениеТоваров(Источник, ОбъектИсточника);
		//Если ТипЗнч(Объект.СсылкаИсточника) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		//	Если ТипЗнч(Источник) = Тип("ДокументТабличнаяЧасть.ПеремещениеТоваров.гф_ТоварыВКоробах") Тогда
		//		ОбъектИсточника.Товары.Очистить();
		//		Для Каждого СтрокаТЧ Из ОбъектИсточника.гф_ТоварыВКоробах Цикл
		//			Если ЗначениеЗаполнено(СтрокаТЧ.УпаковочныйЛист) Тогда
		//				ДанныеПоУЛ = гф_ПолучитьДанныеПоУЛ(СтрокаТЧ["УпаковочныйЛист"]);
		//				Если Не ЗначениеЗаполнено(СтрокаТЧ.Артикул) Тогда
		//					СтрокаТЧ.Артикул = ДанныеПоУЛ.Артикул;
		//				КонецЕсли;
		//				Если Не ЗначениеЗаполнено(СтрокаТЧ.IDКороба) Тогда
		//					СтрокаТЧ.IDКороба = ДанныеПоУЛ.IDКороба;
		//				КонецЕсли;
		//				Если Не ЗначениеЗаполнено(СтрокаТЧ.КоличествоПар) Тогда
		//					СтрокаТЧ.КоличествоПар = ДанныеПоУЛ.КоличествоПар;
		//				КонецЕсли;
		//				ЗагрузитьТоварыПоУЛ(СтрокаТЧ["УпаковочныйЛист"], ОбъектИсточника);
		//			КонецЕсли;
		//		КонецЦикла;
		//	КонецЕсли;
		//КонецЕсли;
		//Реализовал заполнение "связанных" полей при загрузке ТЧ Товары в коробах документа Заказ клиента
		ЗаполнитьЗаказКлиента(Источник, ОбъектИсточника);
		//Если ТипЗнч(Объект.СсылкаИсточника) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		//	Если ТипЗнч(Источник) = Тип("ДокументТабличнаяЧасть.ЗаказКлиента.гф_ТоварыВКоробах") Тогда
		//		СтруктураДействий = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Объект.СсылкаИсточника, Истина);
		//		Для Каждого СтрокаТЧ Из ОбъектИсточника.гф_ТоварыВКоробах Цикл
		//			СтрокаТЧ.ВидЦены = ОбъектИсточника.гф_ВидЦены;
		//			СтрокаТЧ.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению;
		//			Если ЗначениеЗаполнено(СтрокаТЧ.ВариантКомплектации) Тогда
		//				Если Не ЗначениеЗаполнено(СтрокаТЧ.ЦенаКороба) Тогда
		//					СтрокаТЧ.ЦенаКороба = РассчитатьЦенуКороба(СтрокаТЧ.ВариантКомплектации, СтрокаТЧ.ВидЦены, ОбъектИсточника.Дата);
		//				КонецЕсли;
		//				Если Не ЗначениеЗаполнено(СтрокаТЧ.СтавкаНДС) Тогда
		//					// ++ 27.01.2023 Галфинд СадомцевСА Исправил заполнение Ставки НДС для Варианта комплектации с учетом показателя НалогооблажениеНДС
		//					//СтрокаТЧ.СтавкаНДС = ЗаполнитьСтавкуНДС(СтрокаТЧ.ВариантКомплектации);
		//					СтрокаТЧ.СтавкаНДС = ЗаполнитьСтавкуНДС(СтрокаТЧ.ВариантКомплектации, СтруктураДействий);
		//				КонецЕсли;
		//			КонецЕсли;
		//			СтрокаТЧ.ЦенаКоробаСоСкидкой = СтрокаТЧ.ЦенаКороба * (1 - СтрокаТЧ.Скидка / 100);
		//			СтрокаТЧ.Сумма = СтрокаТЧ.Количество * СтрокаТЧ.ЦенаКоробаСоСкидкой;
		//			ПересчитатьСуммуСНДС(СтрокаТЧ);
		//		КонецЦикла;
		//	КонецЕсли;
		//КонецЕсли;
		// -- Галфинд СадомцевСА 26.01.2023
		Если ЗаписыватьОбъект и ЗаписатьОбъект(ОбъектИсточника, "", Объект.ПередЗаписьюОбъекта, Объект.ПриЗаписиОбъекта) Тогда
			
			Сообщить("Выполнена загрузка"+ 	ТекстВопросаИсточника, СтатусСообщения.Информация);
			Сообщить("" +Загружено +" из "+ КоличествоЭлементов + " элементов.", СтатусСообщения.Информация);
			Возврат Истина;
		Иначе
			Сообщить("Объект не записан: " + ЗагружаемыйОбъект + ".", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли Объект.РежимЗагрузки = 0 Тогда
		Сообщить("Выполнена загрузка"+ 	ТекстВопросаИсточника, СтатусСообщения.Информация);
		Сообщить("" +Загружено +" из "+ КоличествоЭлементов + " элементов.", СтатусСообщения.Информация);
		Возврат Истина;
	ИначеЕсли Объект.РежимЗагрузки = 2 Тогда
		Сообщить("Выполнена загрузка"+ 	ТекстВопросаИсточника, СтатусСообщения.Информация);
		Сообщить("" +Загружено +" из "+ КоличествоЭлементов + " записей.", СтатусСообщения.Информация);
		Возврат Истина;
	// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
	// ++
	Иначе
		а = 0;
	//--
	КонецЕсли;

КонецФункции // ()

&НаСервереБезКонтекста
Функция ВычислитьЗначениеЯчейки(Знач Выражение,Знач ТекущиеДанные,Знач ТекстЯчейки, Знач ТекстыЯчеек,Знач Результат)
// Функция вычисляет значение ячейки для режима "Вычислять"
//
// Параметры:
//  Выражение - програмный код, который необходимо выполнить
//  ТекущиеДанные  - структура загруженных значений
//  ТекстЯчейки    - текст текущей ячейки
//  ТекстыЯчеек    - массив текстов ячеек строки
//  Результат      - результат вычисления
//
// Возвращаемое значение:
//  Структура, сордержащая Результат и ОписаниеОшибки
	
	ТекстЯчейки = СокрЛП(ТекстЯчейки);
	ОписаниеОшибки = "";
	Попытка
		// ++ Галфинд СадомцевСА 04.08.2023 Исправил "ошибку" СонарКуба
		//Выполнить(Выражение);
		ОбщегоНазначения.ВыполнитьВБезопасномРежиме(Выражение);
		// -- Галфинд СадомцевСА 04.08.2023 Исправил "ошибку" СонарКуба
	Исключение
		мСообщитьОбОшибке(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Новый Структура("Результат,ОписаниеОшибки",Результат,ОписаниеОшибки);
	
КонецФункции // ВычислитьЗначениеЯчейки(ТекущаяСтрока,Представление)()

&НаСервереБезКонтекста
Функция ЗаписатьОбъект(Объект, ТекстыЯчеек, ПередЗаписьюОбъекта, ПриЗаписиОбъекта)
// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба: сделал параметр ТекстыЯчеек обязательным
// Функция ЗаписатьОбъект(Объект, ТекстыЯчеек = Неопределено, ПередЗаписьюОбъекта, ПриЗаписиОбъекта)

// Функция записывает объект в информационную базу данных, используя
// события определенные пользователем в форме редактирования событий
//
// Параметры:
//  Объект      - записываемый объект
//  ТекстыЯчеек - массив текстов ячеек, загружаемой строки
//
// Возвращаемое значение:
//  Истина, если объект записан, Ложь - иначе
//
	
	ТипЗначения = ТипЗнч(Объект);
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных) 
		Или Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		Объект.ОбменДанными.Загрузка = Истина;
	КонецЕсли;
	
	// Галфинд СадомцевСА 07.08.2023 Исправил "ошибки" СонарКуба: добавил ОписаниеОшибки = "";
	ОписаниеОшибки = "";
	Отказ = Ложь;
	// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба: перенес НачатьТранзакцию() в процедуру ВыполнитьВПопыткеПередЗаписьюОбъекта()
	// НачатьТранзакцию();
	Если Не ПустаяСтрока(ПередЗаписьюОбъекта) Тогда
		// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
		ВыполнитьВПопыткеПередЗаписьюОбъекта(ПередЗаписьюОбъекта, ОписаниеОшибки, Отказ);
		//Попытка
		//	// ++ Галфинд СадомцевСА 04.08.2023 Исправил "ошибку" СонарКуба
		//	//Выполнить(ПередЗаписьюОбъекта);
		//	ОбщегоНазначения.ВыполнитьВБезопасномРежиме(ПередЗаписьюОбъекта);
		//	// -- Галфинд СадомцевСА 04.08.2023 Исправил "ошибку" СонарКуба
		//	// Галфинд СадомцевСА 07.08.2023 Исправил "ошибки" СонарКуба: заремарил 3 строки
		//	//Если Отказ Тогда
		//	//	ОписаниеОшибки = "";//Установлен отказ перед записью объекта
		//	//КонецЕсли;
		//Исключение
		//	// Галфинд СадомцевСА 07.08.2023 Исправил "ошибки" СонарКуба: добавил ОтменитьТранзакцию();
		//	ОтменитьТранзакцию();
		//	
		//	Отказ = Истина;
		//	ОписаниеОшибки = ОписаниеОшибки();
		//КонецПопытки;
	КонецЕсли;
	
	Если Не Отказ  Тогда
		Попытка
			Объект.Записать();
		Исключение
			//// Галфинд СадомцевСА 07.08.2023 Исправил "ошибки" СонарКуба: добавил ОтменитьТранзакцию();
			//ОтменитьТранзакцию();
			
			Отказ = Истина;
			ОписаниеОшибки = ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
	
	Если Не Отказ и Не ПустаяСтрока(ПриЗаписиОбъекта) Тогда
		
		// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
		ВыполнитьВПопыткеПриЗаписиОбъекта(ПриЗаписиОбъекта, ОписаниеОшибки, Отказ);
		//Попытка
		//	// ++ Галфинд СадомцевСА 04.08.2023 Исправил "ошибку" СонарКуба
		//	//Выполнить(ПриЗаписиОбъекта);
		//	ОбщегоНазначения.ВыполнитьВБезопасномРежиме(ПриЗаписиОбъекта);
		//	// -- Галфинд СадомцевСА 04.08.2023 Исправил "ошибку" СонарКуба
		//	// Галфинд СадомцевСА 07.08.2023 Исправил "ошибки" СонарКуба: заремарил 3 строки
		//	//Если Отказ Тогда
		//	//	ОписаниеОшибки = "";//Установлен отказ при записи объекта
		//	//КонецЕсли;
		//	
		//Исключение
		//	// Галфинд СадомцевСА 07.08.2023 Исправил "ошибки" СонарКуба: добавил ОтменитьТранзакцию();
		//	ОтменитьТранзакцию();
		//	
		//	Отказ = Истина;
		//	ОписаниеОшибки = ОписаниеОшибки();
		//КонецПопытки;
		
		Если Не Отказ  Тогда
			Попытка
				Объект.Записать();
			Исключение
				//// Галфинд СадомцевСА 07.08.2023 Исправил "ошибки" СонарКуба: добавил ОтменитьТранзакцию();
				//ОтменитьТранзакцию();
				
				Отказ = Истина;
				ОписаниеОшибки = ОписаниеОшибки();
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба: перенес ЗафиксироватьТранзакцию() в процедуру ВыполнитьВПопыткеПередЗаписьюОбъекта()
	//Если Не Отказ Тогда
	//	ЗафиксироватьТранзакцию();
	//Иначе
	Если Отказ Тогда
		мСообщитьОбОшибке(ОписаниеОшибки);
		// Галфинд СадомцевСА 07.08.2023 Исправил "ошибки" СонарКуба: заремарил ОтменитьТранзакцию();
		//ОтменитьТранзакцию();
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции // ()

&НаСервереБезКонтекста
Функция ОбработатьСобытиеПослеДобавленияСтроки(Объект, ТекущиеДанные, ТекстыЯчеек, ПослеДобавленияСтроки)
// Функция обрабатывает событие "После добавления строки",
// определенное пользователем в форме редактирования событий
//
// Параметры:
//  Объект      - записываемый объект
//  ТекущиеДанные  - структура загруженных значений
//  ТекстыЯчеек    - массив текстов ячеек строки
//
// Возвращаемое значение:
//  Истина, если в событие "После добавления строки" не был установлен Отказ, Ложь - иначе
//
	
	Попытка
		
		// ++ Галфинд СадомцевСА 04.08.2023 Исправил "ошибку" СонарКуба
		//Выполнить(ПослеДобавленияСтроки);
		ОбщегоНазначения.ВыполнитьВБезопасномРежиме(ПослеДобавленияСтроки);
		// -- Галфинд СадомцевСА 04.08.2023 Исправил "ошибку" СонарКуба
		
	Исключение
		
		мСообщитьОбОшибке(ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // ()

////////////////////////////////////////////////////////////////////////////////
//

&НаСервере
Процедура КонтрольЗаполнения(ТабличныйДокумент) Экспорт
// Процедура выполняет контроль заполнения данных табличного документа
// сообщает об ошибках и устанавливает коментарии к ошибочным ячейкам
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент, у которого необходимо сформировать шапку
//  Индикатор         - Элемент управления индикатор, в котором необходимо отображать процент выполнения операции
//
	
	КоличествоЭлементов = ТабличныйДокумент.ВысотаТаблицы - Объект.ПерваяСтрокаДанныхТабличногоДокумента + 1;
	
	КоличествоОшибок = 0;
	Для К = 0  По КоличествоЭлементов - 1 Цикл
		//Состояние("Выполняется контроль заполнения строки № " + (К + 1));
		КонтрольЗаполненияСтроки(ТабличныйДокумент, К + Объект.ПерваяСтрокаДанныхТабличногоДокумента,,КоличествоОшибок);
	КонецЦикла;
	
	Сообщить("Контроль заполнения завершен. Проверено строк: " + КоличествоЭлементов);
	Если КоличествоОшибок Тогда
		Сообщить("Выявлено ячеек, содержащих ошибки/неоднозначное представление: " + КоличествоОшибок);
	Иначе
		Сообщить("Ячеек, содержащих ошибки не выявлено");
	КонецЕсли;
	
КонецПроцедуры // КонтрольЗаполнения()

&НаСервере
Функция КонтрольЗаполненияСтроки(ТабличныйДокумент, НомерСтроки, ТекстыЯчеек = Неопределено, КоличествоОшибок = 0)
// Функция выполняет контроль заполнения строки данных табличного документа
// сообщает об ошибках и устанавливает коментарии к ошибочным ячейкам
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент, у которого необходимо сформировать шапку
//  НомерСтроки       - Число, номер строки табличного документа
//  ТекстыЯчеек    - возвращает массив текстов ячеек строки,
//
// Возвращаемое значение:
//  структура, ключ - Имя загружаемого реквизита, Значение - Значение загружаемого реквизита
//
	
	ТекстыЯчеек = Новый Массив;
	ТекстыЯчеек.Добавить(Неопределено);
	Для к = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
		ТекстыЯчеек.Добавить(СокрЛП(ТабличныйДокумент.Область("R"+Формат(НомерСтроки,"ЧГ=")+"C"+Формат(К,"ЧГ=")).Текст));
	КонецЦикла;
	
	Колонки = Объект.ДополнительныеСвойства.Колонки;
	
	ТекущаяСтрока     = Новый Структура;
	Для каждого КлючИЗначение Из Колонки Цикл
		
		Колонка = КлючИЗначение.Значение;
		
		// ++ Галфинд СадомцевСА 04.08.2023 Исправил "ошибку" СонарКуба
		//Если Колонка.Пометка Тогда
		Если НЕ Колонка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		// -- Галфинд СадомцевСА 04.08.2023 Исправил "ошибку" СонарКуба
		
		Если Колонка.РежимЗагрузки = "Устанавливать" Тогда
			
			Результат = Колонка.ЗначениеПоУмолчанию;
			ТекущаяСтрока.Вставить(Колонка.ИмяРеквизита,Результат);
			
		ИначеЕсли Не Колонка.НомерКолонки = 0 Тогда
			
			Если Не ОбработатьОбласть(ТабличныйДокумент.Область("R"+Формат(НомерСтроки,"ЧГ=")+"C"+Формат(Колонка.НомерКолонки,"ЧГ=")), Колонка, ТекущаяСтрока, ТекстыЯчеек) Тогда
				КоличествоОшибок = КоличествоОшибок + 1;
			КонецЕсли;
			
		ИначеЕсли Колонка.РежимЗагрузки = "Вычислять" Тогда
			
			Вычисление  = ВычислитьЗначениеЯчейки(Колонка.Выражение,ТекущаяСтрока,"",ТекстыЯчеек,Колонка.ЗначениеПоУмолчанию);
			Результат   = Вычисление.Результат;
			Примечание  = Вычисление.ОписаниеОшибки;
			
			// Галфинд СадомцевСА 07.08.2023 Исправил "ошибки" СонарКуба
			ЗаполнитьРезультатЗначениемПоУмолчанию(Результат, Колонка);
			//Если НЕ ЗначениеЗаполнено(Результат) Тогда
			//	Результат = Колонка.ЗначениеПоУмолчанию;
			//КонецЕсли;
			
			ТекущаяСтрока.Вставить(Колонка.ИмяРеквизита,Результат);
			
			// Галфинд СадомцевСА 07.08.2023 Исправил "ошибки" СонарКуба
			СообщитьПримечаниеКоличествоОшибок(Примечание, НомерСтроки, Колонка, КоличествоОшибок);
			//Если Не ПустаяСтрока(Примечание) Тогда
			//	Сообщить("Строка ["+НомерСтроки+"]("+Колонка.ПредставлениеРеквизита+"): "+ Примечание);
			//	КоличествоОшибок = КоличествоОшибок + 1;
			//КонецЕсли;
			
		// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
		// ++
		Иначе
			а = 0;
		//--
		КонецЕсли;
		
		//КонецЕсли;
		
	КонецЦикла;
	Возврат ТекущаяСтрока;
	
КонецФункции

&НаСервере
Функция ОбработатьОбласть(Область, Колонка, ТекущиеДанные, ТекстыЯчеек)
// Процедура выполняет обработку области табличного документа:
// заполняет расшифровку по представлению ячейки в соответствии со структурой загружаемых реквизитов
// сообщает об ошибке и устанавливает коментарий, если ячейка содержит ошибку
//
// Параметры:
//  Область - область табличного документа
//  Колонка - Структура, свойства, в соответствии с которыми необходимо выполнить обработку области
//  ТекущиеДанные  - структура загруженных значений
//  ТекстыЯчеек    - массив текстов ячеек строки
//
	
	Представление = Область.Текст;
	Примечание = "";
	
	// ++ Галфинд СадомцевСА 04.08.2023 Исправил "ошибку" СонарКуба
	Результат = ПодготовитьРезультат(Область, Колонка, ТекущиеДанные, ТекстыЯчеек, Представление);
	//Если Колонка.РежимЗагрузки = "Вычислять" Тогда
	//	
	//	Вычисление = ВычислитьЗначениеЯчейки(Колонка.Выражение,ТекущиеДанные,Представление, ТекстыЯчеек, Колонка.ЗначениеПоУмолчанию);
	//	Если Не ПустаяСтрока(Вычисление.ОписаниеОшибки) Тогда
	//		Результат   = Неопределено;
	//		Примечание = ""+ Вычисление.ОписаниеОшибки;
	//	Иначе
	//		Результат = Вычисление.Результат;
	//	КонецЕсли;
	//	
	//ИначеЕсли ПустаяСтрока(Представление) Тогда
	//	Результат = Неопределено;
	//Иначе
	//	НайденныеЗначения = ПолучитьВозможныеЗначения(Колонка, Представление, Примечание, ТекущиеДанные);
	//	
	//	Если НайденныеЗначения.Количество() = 0 Тогда
	//		
	//		Примечание = "Не найден"+?(Примечание = "","", Символы.ПС+Примечание);
	//		Результат = Неопределено;
	//		
	//	ИначеЕсли НайденныеЗначения.Количество() = 1 Тогда
	//		
	//		Результат = НайденныеЗначения[0];
	//		
	//		
	//	Иначе
	//		
	//		Примечание = "Не однозначное представление. Вариантов: "+НайденныеЗначения.Количество()+?(Примечание = "","", Символы.ПС+Примечание);
	//		
	//		Нашли = Ложь;
	//		НашлиЗначениеПоУмолчанию = Ложь;
	//		Для каждого НайденноеЗначение Из НайденныеЗначения Цикл
	//			Если НайденноеЗначение = Область.Расшифровка Тогда
	//				Нашли = Истина;
	//				Прервать;
	//			КонецЕсли;
	//			Если НайденноеЗначение = Колонка.ЗначениеПоУмолчанию Тогда
	//				НашлиЗначениеПоУмолчанию = Истина;
	//			КонецЕсли;
	//		КонецЦикла;
	//		
	//		Если Не Нашли Тогда
	//			
	//			Если НашлиЗначениеПоУмолчанию Тогда
	//				НайденноеЗначение = Колонка.ЗначениеПоУмолчанию;
	//			Иначе
	//				НайденноеЗначение = НайденныеЗначения[0];
	//			КонецЕсли;
	//		КонецЕсли;
	//		Результат = НайденноеЗначение;
	//	КонецЕсли;
	//КонецЕсли;
	// -- Галфинд СадомцевСА 04.08.2023 Исправил "ошибку" СонарКуба
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Колонка.ЗначениеПоУмолчанию;
	КонецЕсли;
			
	ТекущиеДанные.Вставить(Колонка.ИмяРеквизита,Результат);
	
	Область.Расшифровка = Результат;
	Область.Примечание.Текст = Примечание;
	
	Если Не ПустаяСтрока(Примечание) Тогда
		Сообщить("Ячейка["+Область.Имя+"]("+Колонка.ПредставлениеРеквизита+"): " + Примечание);
	КонецЕсли;
	
	Возврат ПустаяСтрока(Примечание);
	
КонецФункции

&НаСервере
Функция ПолучитьВозможныеЗначения(Колонка, Представление, Примечание, ТекущиеДанные)
// Функция возвращает массив возможных значений для текущей колонки по представлению
//
// Параметры:
//  Колонка - Структура, свойства, в соответствии с которыми необходимо получить возможные значения
//  Представление - Строка, по которой необходимо вернуть массив значений
//  Примечание    - массив текстов ячеек строки
//  ТекущиеДанные  - структура загруженных значений
//
// Возвращаемое значение:
//  массив возможных значений
//
	
	Примечание = "";
	
	НайденныеЗначения = Новый Массив;
	
	Если ПустаяСтрока(Представление) Тогда
		
		Возврат НайденныеЗначения;
		
	// ++ Галфинд СадомцевСА 04.08.2023 Исправил "ошибку" СонарКуба
	//Иначе
	КонецЕсли;
	// -- Галфинд СадомцевСА 04.08.2023 Исправил "ошибку" СонарКуба

		СвязьПоТипу = Неопределено;
		Если Не ПустаяСтрока(Колонка.СвязьПоТипу)  Тогда
			
			// Галфинд СадомцевСА 07.08.2023 Исправил "ошибки" СонарКуба
			СвязьПоТипуСтрока(СвязьПоТипу, Колонка, ТекущиеДанные);
			//Если ТипЗНЧ(Колонка.СвязьПоТипу) = Тип("Строка") Тогда
			//	ТекущиеДанные.Свойство(Колонка.СвязьПоТипу,СвязьПоТипу);
			//Иначе
			//	СвязьПоТипу = Колонка.СвязьПоТипу;
			//КонецЕсли;
			Если Не СвязьПоТипу = Неопределено Тогда
				
				ЭлементСвязиПоТипу = Колонка.ЭлементСвязиПоТипу;
				Если ЭлементСвязиПоТипу = 0 Тогда
					ЭлементСвязиПоТипу = 1;
				КонецЕсли;
				ВидыСубконто = СвязьПоТипу.ВидыСубконто;
				Если ЭлементСвязиПоТипу > ВидыСубконто.Количество() Тогда
					Возврат НайденныеЗначения;
				КонецЕсли;
				Тип = СвязьПоТипу.ВидыСубконто[ЭлементСвязиПоТипу-1].ВидСубконто.ТипЗначения;
			Иначе
				Тип = Колонка.ОписаниеТипов;
			КонецЕсли;
			 
		Иначе
			Тип = Колонка.ОписаниеТипов;
		КонецЕсли;
	//КонецЕсли;
	
	ПримитивныеТипы = Новый Структура ("Число, Строка, Дата, Булево", Тип("Число"), Тип("Строка"), Тип("Дата"), Тип("Булево"));
	Для каждого ТипРеквизита Из Тип.Типы() Цикл
		
		// ++ Галфинд СадомцевСА 04.08.2023 Исправил "ошибку" СонарКуба
		ОбработатьТипРеквизита(ТипРеквизита, Колонка, Представление, Примечание, ТекущиеДанные, НайденныеЗначения, ПримитивныеТипы);
		//Если ТипРеквизита = ПримитивныеТипы.Число Или ТипРеквизита = ПримитивныеТипы.Булево Тогда
		//	НайденныеЗначения.Добавить(мПривестиКЧислу(Представление, Колонка.ОписаниеТипов, Примечание));
		//ИначеЕсли ТипРеквизита = ПримитивныеТипы.Строка или ТипРеквизита = ПримитивныеТипы.Дата Тогда
		//	НайденныеЗначения.Добавить(мПривестиКДате(Представление, Колонка.ОписаниеТипов, Примечание));
		//	
		//Иначе
		//	
		//	МетаданныеТипа = Метаданные.НайтиПоТипу(ТипРеквизита);
		//	
		//	Если Перечисления.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда
		//		
		//		//Это Перечисление
		//		Для каждого Перечисление Из ПолучитьМенеджераПоТипу(ТипРеквизита) Цикл
		//			Если Строка(Перечисление) = Представление Тогда
		//				НайденныеЗначения.Добавить(Перечисление);
		//			КонецЕсли;
		//		КонецЦикла;
		//		
		//	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда
		//		
		//		//Это документ
		//		
		//		Менеджер = ПолучитьМенеджераПоТипу(ТипРеквизита);
		//		Если Колонка.ИскатьПо = "Номер" Тогда
		//			//НайденноеЗначение = Менеджер.НайтиПоКоду(Представление);
		//		ИначеЕсли Колонка.ИскатьПо = "Дата" Тогда
		//			//НайденноеЗначение = Менеджер.Найти
		//		// ++ Галфинд СадомцевСА 23.01.2023 Реализовал поиск Упаковочного листа по коду
		//		//e1cib/data/Задача.ЗадачаИсполнителя?ref=8129bcee7bda45d711ed999bd652afbf
		//		ИначеЕсли Колонка.ИскатьПо = "Код" Тогда
		//			НайденноеЗначение = Менеджер.НайтиПоРеквизиту("Код", Представление);
		//			Если Не НайденноеЗначение.Пустая() Тогда
		//				НайденныеЗначения.Добавить(НайденноеЗначение);
		//			КонецЕсли;
		//		// --
		//		Иначе
		//				
		//			ДлиннаСинонима = СтрДлина(""+МетаданныеТипа);
		//				
		//			Если Лев(Представление, ДлиннаСинонима) = ""+МетаданныеТипа Тогда
		//				НомерИДата = СокрЛП(Сред(Представление, ДлиннаСинонима+1));
		//				ПозицияОт = Найти(НомерИДата, " от ");
		//				Если Не ПозицияОт = 0 Тогда
		//					НомерДок = Лев(НомерИДата, ПозицияОт-1);
		//					Попытка
		//						ДатаДок  = Дата(Сред(НомерИДата, ПозицияОт+4));
		//					Исключение
		//						ДатаДок = Неопределено;
		//					КонецПопытки;
		//					Если Не ДатаДок = Неопределено Тогда
		//						НайденноеЗначение = Менеджер.НайтиПоНомеру(НомерДок, ДатаДок);
		//						Если Не НайденноеЗначение.Пустая() Тогда
		//							НайденныеЗначения.Добавить(НайденноеЗначение);
		//						КонецЕсли;
		//					КонецЕсли;
		//				КонецЕсли;
		//			КонецЕсли;
		//				
		//		КонецЕсли;
		//			
		//	ИначеЕсли Не МетаданныеТипа = Неопределено Тогда
		//		
		//		ИскатьПо = Колонка.ИскатьПо;
		//		ЭтоСправочник = Справочники.ТипВсеСсылки().СодержитТип(ТипРеквизита);
		//		Если ПустаяСтрока(ИскатьПо) Тогда
		//			СтрокаОсновногоПредставления = Строка(МетаданныеТипа.ОсновноеПредставление);
		//			
		//			Если СтрокаОсновногоПредставления = "ВВидеКода" Тогда
		//				ИскатьПо = "Код";
		//			ИначеЕсли СтрокаОсновногоПредставления = "ВВидеНаименования" Тогда
		//				ИскатьПо = "Наименование";
		//			ИначеЕсли СтрокаОсновногоПредставления = "ВВидеНомера" Тогда
		//				ИскатьПо = "Номер";
		//			КонецЕсли;
		//		КонецЕсли;
		//			
		//		Запрос = Новый Запрос;
		//		Запрос.Текст =
		//		"ВЫБРАТЬ
		//		|	_Таблица.Ссылка
		//		|ИЗ
		//		|	" + МетаданныеТипа.ПолноеИмя() + " КАК _Таблица
		//		|ГДЕ";
		//		
		//		Запрос.Текст = Запрос.Текст + "
		//		|	_Таблица." + ИскатьПо + " = &Представление";
		//		Запрос.УстановитьПараметр("Представление",Представление);
		//		
		//		Если ЭтоСправочник и Не ПустаяСтрока(Колонка.СвязьПоВладельцу) и МетаданныеТипа.Владельцы.Количество() Тогда
		//			
		//			СвязьПоВладельцу = Неопределено;
		//			Если ТипЗНЧ(Колонка.СвязьПоВладельцу) = Тип("Строка") Тогда
		//				ТекущиеДанные.Свойство(Колонка.СвязьПоВладельцу,СвязьПоВладельцу);
		//			Иначе
		//				СвязьПоВладельцу = Колонка.СвязьПоВладельцу;
		//			КонецЕсли;
		//			
		//			Если Не СвязьПоВладельцу = Неопределено Тогда
		//				Запрос.Текст = Запрос.Текст + "
		//				|	И _Таблица.Владелец = &СвязьПоВладельцу";
		//				Запрос.УстановитьПараметр("СвязьПоВладельцу",СвязьПоВладельцу);
		//			КонецЕсли;
		//			
		//		КонецЕсли;
		//		
		//		Выборка =  Запрос.Выполнить().Выбрать();
		//			
		//		Пока Выборка.Следующий() Цикл
		//			НайденныеЗначения.Добавить(Выборка.Ссылка);
		//		КонецЦикла;
		//	Иначе
		//		Примечание = "Не описан способ поиска";
		//		Примечание = "Для Колонки не определен тип значения";
		//	КонецЕсли;
		//КонецЕсли;
		
	КонецЦикла;
	Возврат НайденныеЗначения;
КонецФункции // ()

////////////////////////////////////////////////////////////////////////////////
//

&НаСервере
Функция ПолучитьСписокИменПредставлений(ОписаниеТипов)
// Функция возвращает массив, элементами которого выступают возможные имена представления загружаемого реквизита
//
// Параметры:
//  ЗагружаемыйРеквизит - Строка таблицы значений загружаемого реквизита
//
// Возвращаемое значение:
//  список значений; значение списка - строка имя представления
//
	
	СписокВыбора = Новый СписокЗначений;
	Если ОписаниеТипов.Типы().Количество() = 1 Тогда
		
		Тип = ОписаниеТипов.Типы()[0];
		// ++ Галфинд СадомцевСА 01.11.2022
		Если Тип = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокВыбора.Добавить("Партнер.Код", "Код партнера");
			СписокВыбора.Добавить("гф_GLN_номер", "GLN номер");
		КонецЕсли;
		
		ЭтоДокумент = Документы.ТипВсеСсылки().СодержитТип(Тип);
		// --
		
		МетаданныеТипа      = Метаданные.НайтиПоТипу(Тип);
		ЭтоСправочник       = Справочники.ТипВсеСсылки().СодержитТип(Тип);
		ЭтоСчет             = ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип);
		ЭтоВидХарактеристик = ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип);
		Если ЭтоСправочник ИЛИ ЭтоСчет Или ЭтоВидХарактеристик Тогда
			
			// Галфинд СадомцевСА 07.08.2023 Исправил "ошибки" СонарКуба
			СписокВыборкаСправочникСчетВидХарактеристик(СписокВыбора, МетаданныеТипа, ЭтоСправочник, ЭтоСчет);
			//ЕстьКод = МетаданныеТипа.ДлинаКода > 0;
			//ЕстьИмя = МетаданныеТипа.ДлинаНаименования > 0;
			//
			//ВидОсновногоПредставление = ?(ЭтоСправочник, Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСправочника,
			//?(ЭтоСчет,Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСчета,Метаданные.СвойстваОбъектов.ОсновноеПредставлениеВидаХарактеристики));
			
			//Если МетаданныеТипа.ОсновноеПредставление = ВидОсновногоПредставление.ВВидеКода Тогда
			//	
			//	Если ЕстьКод Тогда
			//		СписокВыбора.Добавить("Код", "Код");
			//	КонецЕсли;
			//	
			//	Если ЕстьИмя Тогда
			//		СписокВыбора.Добавить("Наименование", "Наименование");
			//	КонецЕсли;
			//	
			//Иначе
			//	
			//	Если ЕстьИмя Тогда
			//		СписокВыбора.Добавить("Наименование", "Наименование");
			//	КонецЕсли;
			//	
			//	Если ЕстьКод Тогда
			//		СписокВыбора.Добавить("Код", "Код");
			//	КонецЕсли;
			//	
			//КонецЕсли;
			//
			//Для каждого Реквизит Из МетаданныеТипа.Реквизиты Цикл
			//	
			//	Если Не Реквизит.Индексирование = Метаданные.СвойстваОбъектов.Индексирование.НеИндексировать
			//		И Реквизит.Тип.Типы().Количество() = 1 и Реквизит.Тип.Типы()[0] = Тип ("Строка")
			//	Тогда
			//		
			//		СписокВыбора.Добавить(Реквизит.Имя, Реквизит.Представление());
			//		
			//	КонецЕсли;
			//	
			//КонецЦикла;
			
		Иначе
			// ++ Галфинд СадомцевСА 23.01.2023 Реализовал поиск Упаковочного листа по коду
			//e1cib/data/Задача.ЗадачаИсполнителя?ref=8129bcee7bda45d711ed999bd652afbf
			Если ЭтоДокумент Тогда
			
				//ЕстьНомер = МетаданныеТипа.ДлинаНомера > 0;
				//Если ЕстьНомер Тогда
				//	СписокВыбора.Добавить("Номер", "Номер");
				//КонецЕсли;
				Если Тип = Тип("ДокументСсылка.УпаковочныйЛист") Тогда
					СписокВыбора.Добавить("Код", "Код");
				КонецЕсли;
		    КонецЕсли;
			// --
		
		КонецЕсли;
		
	КонецЕсли;
	Возврат СписокВыбора;
КонецФункции // ()

&НаСервере
Функция ПолучитьСписокСвязейПоТипу(ЗагружаемыйРеквизит, ТЗ)
// Функция возвращает список, элементами которого выступают возможные связи по типу для загружаемого реквизита
//
// Параметры:
//  ЗагружаемыйРеквизит - Строка таблицы значений загружаемого реквизита
//
// Возвращаемое значение:
//  список значений; значение списка - строка имя колонки связи или ссылка на элемент связи
//
	
	СписокВыбора = Новый СписокЗначений;
	
	ВозможныеПланыСчетов = Новый Структура;
	Для каждого ПланСчетов Из Метаданные.ПланыСчетов Цикл
		Попытка
			Если ПланСчетов.ВидыСубконто.Тип = ЗагружаемыйРеквизит.ОписаниеТипов Тогда
				
				ВозможныеПланыСчетов.Вставить(ПланСчетов.Имя,ПланыСчетов[ПланСчетов.Имя]);
				
			КонецЕсли;
		Исключение
			// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
			// ++
			а = 0;
			//--
			
		КонецПопытки;
	КонецЦикла;
	
	Для каждого ПланСчетов Из ВозможныеПланыСчетов Цикл
		ТипЗНЧПланСчетов = ТипЗНЧ(ПланСчетов.Значение.ПустаяСсылка());
		Для каждого КолонкаСвязиПоТипу Из ТЗ Цикл
			Если КолонкаСвязиПоТипу.ОписаниеТипов.Типы()[0] = ТипЗНЧПланСчетов Тогда
				СписокВыбора.Добавить(КолонкаСвязиПоТипу.ИмяРеквизита,КолонкаСвязиПоТипу.ИмяРеквизита);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если Не ВозможныеПланыСчетов.Количество() = 0 Тогда
		СписокВыбора.Добавить(Неопределено, "< пустое значение >");
	КонецЕсли;
	
	Для каждого ПланСчетов Из ВозможныеПланыСчетов Цикл
		СписокВыбора.Добавить("ПланСчетовСсылка."+ПланСчетов.Ключ,"<"+ПланСчетов.Ключ+">");
	КонецЦикла;
	
	Возврат СписокВыбора;
КонецФункции // ()

&НаСервере
Функция ПолучитьСписокСвязейПоВладельцу(ОписаниеТипов, ТаблицаКолонок)
// Функция возвращает список, элементами которого выступают возможные связи по владельцу для загружаемого реквизита
//
// Параметры:
//  ЗагружаемыйРеквизит - Строка таблицы значений загружаемого реквизита
//
// Возвращаемое значение:
//  список значений; значение списка - строка имя колонки связи или ссылка на элемент связи
//
	
	ЕстьТипСамогоОбъекта = Ложь;
	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	Если Объект.РежимЗагрузки = 0 Тогда
		ОписаниеТиповСправочника = Тип(СтрЗаменить(МетаданныеИсточника.ПолноеИмя(),".","Ссылка."));
	Иначе
		ОписаниеТиповСправочника = Неопределено;
	КонецЕсли;
	
	СписокВыбора = Новый СписокЗначений;
	ТипыВладельцев = Новый Соответствие;
	Для каждого ТипКолонки Из ОписаниеТипов.Типы() Цикл
		// ++ Галфинд СадомцевСА 04.08.2023 Исправил "ошибку" СонарКуба
		ОбработатьТипКолонки(ТипКолонки, ЕстьТипСамогоОбъекта, СписокВыбора, ТипыВладельцев, ОписаниеТиповСправочника, ТаблицаКолонок);
		//Если Справочники.ТипВсеСсылки().СодержитТип(ТипКолонки) Тогда
		//	Для каждого Владелец Из Метаданные.НайтиПоТипу(ТипКолонки).Владельцы Цикл
		//		ТипВладельца   = Тип(СтрЗаменить(Владелец.ПолноеИмя(), ".", "Ссылка."));
		//		Если ТипыВладельцев[ТипВладельца] = Неопределено Тогда
		//			
		//			Если ТипВладельца = ОписаниеТиповСправочника Тогда
		//				
		//				ЕстьТипСамогоОбъекта = Истина;
		//				
		//			КонецЕсли;
		//			 
		//			ТипыВладельцев.Вставить(Владелец.ПолноеИмя(), Владелец.ПолноеИмя());
		//			Для каждого КолонкаСвязиПоВладельцу Из ТаблицаКолонок Цикл
		//				Если КолонкаСвязиПоВладельцу.ОписаниеТипов.Типы()[0] = ТипВладельца И СписокВыбора.НайтиПоЗначению(КолонкаСвязиПоВладельцу.ИмяРеквизита) = Неопределено Тогда
		//					// Возможно надо будет по всем типам проходить
		//					СписокВыбора.Добавить(КолонкаСвязиПоВладельцу.ИмяРеквизита,КолонкаСвязиПоВладельцу.ИмяРеквизита);
		//				КонецЕсли;
		//			КонецЦикла;
		//		КонецЕсли;
		//	КонецЦикла;
		//КонецЕсли;
		// -- Галфинд СадомцевСА 04.08.2023 Исправил "ошибку" СонарКуба
	КонецЦикла;
	
	Если Не ТипыВладельцев.Количество() = 0 Тогда
		СписокВыбора.Добавить(Неопределено, "< пустое значение >");
	КонецЕсли;
	 
	
	Для каждого КлючИЗначение Из ТипыВладельцев Цикл
		СписокВыбора.Добавить(КлючИЗначение.Значение, "<"+КлючИЗначение.Значение+">");
	КонецЦикла;
	
	Если ЕстьТипСамогоОбъекта Тогда
		
		СписокВыбора.Вставить(0,"<Создаваемый объект>", "<Создаваемый объект>");
		
	КонецЕсли;
	
	Возврат СписокВыбора;
	
КонецФункции // ()

&НаСервере
Функция ПолучитьСписокВыбораСвязиПоВладельцу(ИмяРеквизита)
// Возвращает список выбора, закэшированный в таблице значений для реквизита
//
// Параметры
//  ИмяРеквизита  - Строка - Имя реквизита, для которого нужно
//		получить связанный список выбора
//
// Возвращаемое значение:
//   СписокЗначений - список значений для выбора для этого реквизита
//

	ТЗ = РеквизитФормыВЗначение("СпискиВыбораСвязиПоВладельцу");
	Стр = ТЗ.Найти(ИмяРеквизита, "ИмяРеквизита");
	
	Возврат Стр.СписокВыбора;

КонецФункции // ПолучитьСписокВыбораСвязиПоВладельцу()

&НаСервере
Процедура СохранитьСписокВыбораСвязиПоВладельцу(ИмяРеквизита, Знач НовыйСписокВыбора)
// Сохраняет в кэше список выбора для реквизита
//
// Параметры
//  ИмяРеквизита  - Строка - Имя реквизита, для которого нужно
//		сохранить связанный список выбора
//  НовыйСписокВыбора  - СписокЗначений - сохраняемый список значений
//

	ТЗ = РеквизитФормыВЗначение("СпискиВыбораСвязиПоВладельцу");
	Стр = ТЗ.Найти(ИмяРеквизита, "ИмяРеквизита");
	Стр.СписокВыбора = НовыйСписокВыбора;
	ЗначениеВРеквизитФормы(ТЗ, "СпискиВыбораСвязиПоВладельцу");

КонецПроцедуры // СохранитьСписокВыбораСвязиПоВладельцу()

&НаСервере
Процедура КонтрольЗаполненияСервер()

	СформироватьСтруктуруКолонок();
	КоличествоЭлементов = ТабличныйДокумент.ВысотаТаблицы - Объект.ПерваяСтрокаДанныхТабличногоДокумента + 1;
	
	КоличествоОшибок = 0;
	Для К = 0  По КоличествоЭлементов - 1 Цикл
		//Состояние("Выполняется контроль заполнения строки № " + (К + 1));
		КонтрольЗаполненияСтроки(ТабличныйДокумент, К + Объект.ПерваяСтрокаДанныхТабличногоДокумента,,КоличествоОшибок);
	КонецЦикла;
	
	Сообщить("Контроль заполнения завершен. Проверено строк: " + КоличествоЭлементов);
	Если КоличествоОшибок Тогда
		Сообщить("Выявлено ячеек, содержащих ошибки/неоднозначное представление: " + КоличествоОшибок);
	Иначе
		Сообщить("Ячеек, содержащих ошибки не выявлено");
	КонецЕсли;

КонецПроцедуры // КонтрольЗаполненияСервер()

////////////////////////////////////////////////////////////////////////////////
//

&НаСервере
Процедура ЗаполнитьНастройкиКолонок(Настройки)
// Заполняет настройки колонок по умолчанию или по переданным настройкам
//
// Параметры:
//  Настройки - табличный документ или неопределено
//
	
	ПередЗаписьюОбъекта   = "";
	ПриЗаписиОбъекта      = "";
	ПослеДобавленияСтроки = "";
	
	Если ТипЗнч(Настройки) = Тип("ТабличныйДокумент") Тогда
		
		ВерсияОбработки = СокрЛП(Настройки.Область("R1C5").Текст);
		// Галфинд СадомцевСА 07.08.2023 Исправил "ошибки" СонарКуба
		ТекущаяСтрока = ТекущаяСтрокаПоВерсииОбработки(ВерсияОбработки);
		//Если Не ВерсияОбработки = "1.2" Тогда
		//	ВерсияОбработки = "1.1";
		//	ТекущаяСтрока = 9; //Строка с которой начинается таблица реквизитов
		//Иначе
		//	ТекущаяСтрока = 11; //Строка с которой начинается таблица реквизитов
		//КонецЕсли;
		
		Попытка
			
			ТекстВосстановленногоРежимаЗагрузки = СокрЛП(Настройки.Область(?(ВерсияОбработки = "1.1","R1","R2") + "C5").Текст);
			// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
			ВосстановленныйРежимЗагрузки = ПолучитьВосстановленныйРежимЗагрузки(ТекстВосстановленногоРежимаЗагрузки);
			//Если ТекстВосстановленногоРежимаЗагрузки = "в справочник" или ТекстВосстановленногоРежимаЗагрузки = "" Тогда
			//	ВосстановленныйРежимЗагрузки = 0;
			//ИначеЕсли ТекстВосстановленногоРежимаЗагрузки = "в табличную часть" или ТекстВосстановленногоРежимаЗагрузки = "Х" Тогда
			//	ВосстановленныйРежимЗагрузки = 1;
			//ИначеЕсли ТекстВосстановленногоРежимаЗагрузки = "в регистр сведений" Тогда
			//	ВосстановленныйРежимЗагрузки = 2;
			//КонецЕсли;
			
			// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
			МетаданныеОбъекта = ПолучитьМетаданныеОбъекта(Настройки, ВерсияОбработки);
			//МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(Настройки.Область(?(ВерсияОбработки = "1.1","R2","R3") + "C5").Текст);
			//Если МетаданныеОбъекта = Неопределено Тогда
			//	ВызватьИсключение "Неправильный формат файла";
			//КонецЕсли;
			
			// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
			ВосстановленныйСсылкаИсточника = ПолучитьВосстановленныйСсылкаИсточника(ВосстановленныйРежимЗагрузки, МетаданныеОбъекта);
			//Если ВосстановленныйРежимЗагрузки = 0 Тогда
			//	ВосстановленныйСсылкаИсточника = Новый(СтрЗаменить(МетаданныеОбъекта.ПолноеИмя(),".","Ссылка."))
			//ИначеЕсли ВосстановленныйРежимЗагрузки = 1 Тогда
			//	ВосстановленныйСсылкаИсточника = Новый(СтрЗаменить(МетаданныеОбъекта.Родитель().ПолноеИмя(),".","Ссылка."))
			//Иначе
			//	ВосстановленныйСсылкаИсточника = Неопределено;
			//КонецЕсли;
			
			//СсылкаИсточника = ПустаяСсылка();
			СтруктураУмолчаний = Новый Структура;
			ТекущаяСтрокаОбласти = "R" + Формат(ТекущаяСтрока, "ЧГ=");
			ИмяРеквизита = Настройки.Область(ТекущаяСтрокаОбласти + "C2").Текст;
			// Галфинд СадомцевСА 07.08.2023 Исправил "ошибки" СонарКуба
			ЗаполнитьСтруктуруУмолчаний(СтруктураУмолчаний, ТекущаяСтрокаОбласти, ИмяРеквизита, Настройки);
			//Пока Не ПустаяСтрока(ИмяРеквизита) Цикл
			//	СтруктураУмолчанияРеквизита = Новый Структура;
			//	СтруктураУмолчанияРеквизита.Вставить("ИмяРеквизита",ИмяРеквизита);
			//	СтруктураУмолчанияРеквизита.Вставить("Пометка",Не ПустаяСтрока(Настройки.Область(ТекущаяСтрокаОбласти + "C1").Текст));
			//	СтруктураУмолчанияРеквизита.Вставить("ПолеПоиска",Не ПустаяСтрока(Настройки.Область(ТекущаяСтрокаОбласти + "C3").Текст));
			//	
			//	Типы = Новый Массив;
			//	ОписаниеТиповСтрокой = Настройки.Область(ТекущаяСтрокаОбласти + "C4").Текст;
			//	Для к = 1 По СтрЧислоСтрок(ОписаниеТиповСтрокой)  Цикл
			//		
			//		кс = Неопределено;кч = Неопределено;кд = Неопределено;
			//		МассивЧастейТипа = мРазложитьСтрокуВМассивПодстрок(НРег(СокрЛП(СтрПолучитьСтроку(ОписаниеТиповСтрокой,к ))), ",");
			//		Если МассивЧастейТипа.Количество() = 0 Тогда
			//			Продолжить;
			//		ИначеЕсли Найти(МассивЧастейТипа[0],".") Тогда
			//			Тип = Тип(СтрЗаменить(МассивЧастейТипа[0],".","Ссылка."));
			//		ИначеЕсли МассивЧастейТипа[0] = "строка" Тогда
			//			Тип = Тип("Строка");
			//			Если МассивЧастейТипа.Количество() = 2 Тогда
			//				кс = Новый КвалификаторыСтроки(мПривестиКЧислу(МассивЧастейТипа[1]),ДопустимаяДлина.Переменная);
			//			ИначеЕсли МассивЧастейТипа.Количество() = 3 Тогда
			//				кс = Новый КвалификаторыСтроки(мПривестиКЧислу(МассивЧастейТипа[1]),ДопустимаяДлина.Фиксированная);
			//			Иначе
			//				кс = Новый КвалификаторыСтроки;
			//			КонецЕсли;
			//		ИначеЕсли МассивЧастейТипа[0] = "число" Тогда
			//			Тип = Тип("Число");
			//			кч = Новый КвалификаторыЧисла(мПривестиКЧислу(МассивЧастейТипа[1]),мПривестиКЧислу(МассивЧастейТипа[2]),?(МассивЧастейТипа.Количество() = 4, ДопустимыйЗнак.Неотрицательный, ДопустимыйЗнак.Любой));
			//		ИначеЕсли МассивЧастейТипа[0] = "булево" Тогда
			//			Тип = Тип("Булево");
			//		ИначеЕсли МассивЧастейТипа[0] = "дата" Тогда
			//			Тип = Тип("Дата");
			//			кд = Новый КвалификаторыДаты(ЧастиДаты.Дата);
			//		ИначеЕсли МассивЧастейТипа[0] = "время" Тогда
			//			Тип = Тип("Дата");
			//			кд = Новый КвалификаторыДаты(ЧастиДаты.Время);
			//		ИначеЕсли МассивЧастейТипа[0] = "дата и время" Тогда
			//			Тип = Тип("Дата");
			//			кд = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
			//		Иначе
			//			Продолжить;
			//		КонецЕсли;
			//		Типы.Добавить(Тип);
			//	КонецЦикла;
			//	ОписаниеТипов = Новый ОписаниеТипов(Типы, кч, кс, кд);
			//	СтруктураУмолчанияРеквизита.Вставить("ОписаниеТипов",ОписаниеТипов);
			//	
			//	РежимЗагрузкиРеквизита = Настройки.Область(ТекущаяСтрокаОбласти + "C5").Текст;
			//	
			//	СтруктураУмолчанияРеквизита.Вставить("РежимЗагрузки",РежимЗагрузкиРеквизита);
			//	
			//	ЗначениеПоУмолчанию = Настройки.Область(ТекущаяСтрокаОбласти + "C6").Текст;
			//	СтруктураУмолчанияРеквизита.Вставить("ЗначениеПоУмолчанию",?(ПустаяСтрока(ЗначениеПоУмолчанию), ОписаниеТипов.ПривестиЗначение(Неопределено), ЗначениеИзСтрокиВнутр(ЗначениеПоУмолчанию)));
			//	
			//	Если РежимЗагрузкиРеквизита = "Вычислять" Тогда
			//		
			//		СтруктураУмолчанияРеквизита.Вставить("Выражение",Настройки.Область(ТекущаяСтрокаОбласти + "C7").Текст);
			//		
			//	Иначе
			//		СтруктураУмолчанияРеквизита.Вставить("ИскатьПо",Настройки.Область(ТекущаяСтрокаОбласти + "C7").Текст);
			//		
			//		СвязьПоВладельцу   = Настройки.Область(ТекущаяСтрокаОбласти + "C8").Текст;
			//		СтруктураУмолчанияРеквизита.Вставить("СвязьПоВладельцу",?(Лев(СвязьПоВладельцу,1) = "{",ЗначениеИзСтрокиВнутр(СвязьПоВладельцу), СвязьПоВладельцу));
			//		
			//		СвязьПоТипу        = Настройки.Область(ТекущаяСтрокаОбласти + "C9").Текст;
			//		СтруктураУмолчанияРеквизита.Вставить("СвязьПоТипу",?(Лев(СвязьПоТипу,1) = "{",ЗначениеИзСтрокиВнутр(СвязьПоТипу), СвязьПоТипу));
			//		
			//		СтруктураУмолчанияРеквизита.Вставить("ЭлементСвязиПоТипу",мПривестиКЧислу(Настройки.Область(ТекущаяСтрокаОбласти + "C10").Текст));
			//	КонецЕсли;
			//	
			//	СтруктураУмолчанияРеквизита.Вставить("НомерКолонки",Настройки.Область(ТекущаяСтрокаОбласти + "C11").Текст);

			//	СтруктураУмолчаний.Вставить(ИмяРеквизита,СтруктураУмолчанияРеквизита);
			//	ТекущаяСтрока = ТекущаяСтрока + 1;
			//	ТекущаяСтрокаОбласти = "R" + Формат(ТекущаяСтрока, "ЧГ=");
			//	ИмяРеквизита = Настройки.Область(ТекущаяСтрокаОбласти + "C2").Текст;
			//	
			//КонецЦикла;
			
		Исключение
			мСообщитьОбОшибке(ОписаниеОшибки());
		КонецПопытки;
		
		//МетаданныеИсточника = ПолучитьМетаданныеИсточника();
		//Если МетаданныеИсточника = Неопределено Тогда
		//	Возврат;
		//КонецЕсли;
	
		// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
		ЗаполнитьРеквизитыОбъекта(ВосстановленныйРежимЗагрузки, МетаданныеОбъекта, Настройки, ВерсияОбработки, ТекущаяСтрока);
		//Объект.РежимЗагрузки   = ВосстановленныйРежимЗагрузки;
		//Если ВосстановленныйРежимЗагрузки = 0 Тогда
		//	Объект.ТипОбъектаСправочника = МетаданныеОбъекта.Имя;
		//ИначеЕсли ВосстановленныйРежимЗагрузки = 1 Тогда
		//	//Объект.СсылкаИсточника = ВосстановленныйСсылкаИсточника;
		//	Объект.ТабличнаяЧастьИсточника = ?(ВосстановленныйРежимЗагрузки,МетаданныеОбъекта.Имя,Неопределено);
		//ИначеЕсли ВосстановленныйРежимЗагрузки = 2 Тогда
		//	Объект.ИмяВидаРегистра = МетаданныеОбъекта.Имя;
		//КонецЕсли;
		//Объект.НеСоздаватьНовыхЭлементов                 = Не ПустаяСтрока(Настройки.Область(?(ВерсияОбработки = "1.1","R3","R4") + "C5").Текст);
		//Объект.ЗамещатьСуществующиеЗаписи = ?(ВерсияОбработки = "1.1",Ложь, Не ПустаяСтрока(Настройки.Область("R5C5").Текст));
		//Объект.РучнаяНумерацияКолонокТабличногоДокумента = Не ПустаяСтрока(Настройки.Область(?(ВерсияОбработки = "1.1","R4","R6") + "C5").Текст);
		//Объект.ПерваяСтрокаДанныхТабличногоДокумента     = мПривестиКЧислу(Настройки.Область(?(ВерсияОбработки = "1.1","R5","R7") + "C5").Текст);
		//
		//Объект.ПередЗаписьюОбъекта = Настройки.Область("R" + Формат(ТекущаяСтрока + 2, "ЧГ=") + "C3").Текст;
		//Объект.ПриЗаписиОбъекта    = Настройки.Область("R" + Формат(ТекущаяСтрока + 3, "ЧГ=") + "C3").Текст;
		//
		//Если Объект.РежимЗагрузки Тогда
		//	Объект.ПослеДобавленияСтроки = Настройки.Область("R" + Формат(ТекущаяСтрока + 4, "ЧГ=") + "C3").Текст;
		//КонецЕсли;
		
		ТекущаяСтрока = ТекущаяСтрока + 1;
		
	КонецЕсли;
	Оформление = Неопределено;
	//МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	
	ТЗ = РеквизитФормыВЗначение("ТаблицаЗагружаемыхРеквизитов");
	
	// ++
	Если ТЗ.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	// --
	
	ТЗ.Очистить();
	
	// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
	ЗаполнитьНастройкиКолонокТЗ(ТЗ);
	//Если      Объект.РежимЗагрузки = 0 Тогда
	//	ЗаполнитьНастройкиКолонокСправочника(ТЗ);
	//ИначеЕсли Объект.РежимЗагрузки = 1 Тогда
	//	ЗаполнитьНастройкиКолонокТабличнойЧасти(ТЗ);
	//ИначеЕсли Объект.РежимЗагрузки = 2 Тогда
	//	ЗаполнитьНастройкиКолонокРегистраСведений(ТЗ);
	//КонецЕсли;
	
	Если Не СтруктураУмолчаний = Неопределено Тогда
		
		// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
		ЗаполнитьТЗпоСтруктуреУмолчаний(ТЗ, СтруктураУмолчаний);
		//НомерКолонкиОформления = 0;
		//НомерКолонки = 1;
		//Для каждого КлючИЗначение Из СтруктураУмолчаний Цикл
		//	Колонка = КлючИЗначение.Значение;
		//	ЗагружаемыйРеквизит = ТЗ.Найти(Колонка.ИмяРеквизита,"ИмяРеквизита");
		//	Если Не ЗагружаемыйРеквизит = Неопределено Тогда
		//		Индекс = ТЗ.Индекс(ЗагружаемыйРеквизит);
		//		Если Индекс >= НомерКолонкиОформления Тогда
		//			ЗаполнитьЗначенияСвойств(ЗагружаемыйРеквизит, Колонка);
		//			
		//			ТЗ.Сдвинуть(ЗагружаемыйРеквизит, НомерКолонкиОформления - Индекс);
		//			//Если Колонка.Пометка Тогда
		//			//	ЗагружаемыйРеквизит.НомерКолонки = НомерКолонки;
		//			//	НомерКолонки = НомерКолонки + 1;
		//			//КонецЕсли;
		//			НомерКолонкиОформления = НомерКолонкиОформления + 1;
		//			
		//		КонецЕсли;
		//	КонецЕсли;
		//		
		//КонецЦикла;
		
	Иначе
		 
		// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
		ЗаполнитьТЗНомерКолонки(ТЗ);
		//НомерКолонки = 1;
		//Для каждого ЗагружаемыйРеквизит Из ТЗ Цикл
		//	
		//	ЗагружаемыйРеквизит.Пометка      = Истина;
		//	ЗагружаемыйРеквизит.НомерКолонки = НомерКолонки;
		//	НомерКолонки = НомерКолонки + 1;
		//	
		//КонецЦикла;
		
	КонецЕсли;
	
	// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
	ЗаполнитьТЗПредставлениеДопУсловий(ТЗ);
	//Для каждого ЗагружаемыйРеквизит Из ТЗ Цикл
	//	Если ЗагружаемыйРеквизит.РежимЗагрузки = "Вычислять" Тогда
	//		ЗагружаемыйРеквизит.ПредставлениеДопУсловий = ЗагружаемыйРеквизит.Выражение;
	//	Иначе
	//		ЗагружаемыйРеквизит.ПредставлениеДопУсловий = ?(ПустаяСтрока(ЗагружаемыйРеквизит.ИскатьПо), "", "Искать по "+ЗагружаемыйРеквизит.ИскатьПо)
	//									+?(ПустаяСтрока(ЗагружаемыйРеквизит.СвязьПоВладельцу), "", " по владельцу "+ЗагружаемыйРеквизит.СвязьПоВладельцу);
	//	КонецЕсли; 
	//КонецЦикла; 
	
	ЗначениеВРеквизитФормы(ТЗ, "ТаблицаЗагружаемыхРеквизитов");
	
КонецПроцедуры // ()

&НаСервере
Процедура ЗаполнитьНастройкиКолонокТабличнойЧасти(ТЗ)
// Заполняет настройки колонок по умолчанию для табличной части
//
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	
	Если МетаданныеИсточника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл
		ЗагружаемыйРеквизит                        = ТЗ.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
		ЗагружаемыйРеквизит.ОписаниеТипов = МетаданныеИсточника.Реквизиты[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
	КонецЦикла;
	
	Для каждого ЗагружаемыйРеквизит Из ТЗ Цикл
		
		СписокВыбора = ПолучитьСписокИменПредставлений(ЗагружаемыйРеквизит.ОписаниеТипов);
		ЗагружаемыйРеквизит.ИскатьПо = ?(СписокВыбора.Количество() = 0, "",СписокВыбора[0].Значение);
		
		СписокВыбора = ПолучитьСписокСвязейПоВладельцу(ЗагружаемыйРеквизит.ОписаниеТипов, ТЗ);
		ЗагружаемыйРеквизит.СвязьПоВладельцу = ?(СписокВыбора.Количество() = 0, "",СписокВыбора[0].Значение);
		
		СписокВыбора = ПолучитьСписокСвязейПоТипу(ЗагружаемыйРеквизит, ТЗ);
		Если СписокВыбора.Количество() = 0 Тогда
			ЗагружаемыйРеквизит.СвязьПоТипу = "";
			ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 0;
		Иначе
			ЗагружаемыйРеквизит.СвязьПоТипу = СписокВыбора[0].Значение;
			Если Найти(ЗагружаемыйРеквизит.ИмяРеквизита,"3") <> 0 Тогда
				
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 3;
				
			ИначеЕсли Найти(ЗагружаемыйРеквизит.ИмяРеквизита,"2") <> 0 Тогда
				
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 2;
				
			Иначе
				
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 1;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗагружаемыйРеквизит.ЗначениеПоУмолчанию = ЗагружаемыйРеквизит.ОписаниеТипов.ПривестиЗначение(Неопределено);
		ЗагружаемыйРеквизит.ДоступныеТипы = ЗагружаемыйРеквизит.ОписаниеТипов;
		ЗагружаемыйРеквизит.РежимЗагрузки = "Искать";
	КонецЦикла;
	
КонецПроцедуры // ()

&НаСервере
Процедура ЗаполнитьНастройкиКолонокСправочника(ТЗ)
// Заполняет настройки колонок по умолчанию для справочника
//
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	
	Если МетаданныеИсточника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если МетаданныеИсточника.ДлинаКода > 0 Тогда
		
		ЗагружаемыйРеквизит = ТЗ.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = "Код";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Код";
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска   =  Истина;
		
		Если МетаданныеИсточника.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
			ЗагружаемыйРеквизит.ОписаниеТипов = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(МетаданныеИсточника.ДлинаКода));
		Иначе
			ЗагружаемыйРеквизит.ОписаниеТипов = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(МетаданныеИсточника.ДлинаКода));
		КонецЕсли;
		
	КонецЕсли;
	
	Если МетаданныеИсточника.ДлинаНаименования > 0 Тогда
		
		ЗагружаемыйРеквизит = ТЗ.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = "Наименование";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Наименование";
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска   =  Истина;
		ЗагружаемыйРеквизит.ОписаниеТипов = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(МетаданныеИсточника.ДлинаНаименования));
		
	КонецЕсли;
	
	Если МетаданныеИсточника.Владельцы.Количество() > 0 Тогда
		
		ЗагружаемыйРеквизит = ТЗ.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = "Владелец";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Владелец";
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска   =  Истина;
		
		СтрокаОписанияТипов = "";
			
		Для каждого Владелец Из МетаданныеИсточника.Владельцы Цикл
			СтрокаОписанияТипов = ?(ПустаяСтрока(СтрокаОписанияТипов),"",СтрокаОписанияТипов + ", ") + Владелец.ПолноеИмя();
		КонецЦикла;
			
		СтрокаОписанияТипов = СтрЗаменить(СтрокаОписанияТипов,".","Ссылка.");
		ЗагружаемыйРеквизит.ОписаниеТипов = Новый ОписаниеТипов(СтрокаОписанияТипов);
		
	КонецЕсли;
	
	Если МетаданныеИсточника.Иерархический Тогда
		
		ЗагружаемыйРеквизит = ТЗ.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = "Родитель";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Родитель";
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска   = Истина;
		ЗагружаемыйРеквизит.ОписаниеТипов = Новый ОписаниеТипов(СтрЗаменить(МетаданныеИсточника.ПолноеИмя(),".","Ссылка."));
		
	КонецЕсли;
	
	// Галфинд СадомцевСА 07.08.2023 Исправил "ошибки" СонарКуба
	ЗаполнитьНастройкиКолонокСправочникаРеквизиты(ТЗ, МетаданныеИсточника);
	//Для каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл
	//	Если Не Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы Тогда
	//		ЗагружаемыйРеквизит                        = ТЗ.Добавить();
	//		ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
	//		ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
	//		ЗагружаемыйРеквизит.МожетБытьПолемПоиска   = Не Реквизит.Индексирование = Метаданные.СвойстваОбъектов.Индексирование.НеИндексировать;
	//		ЗагружаемыйРеквизит.ОписаниеТипов = МетаданныеИсточника.Реквизиты[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
	//	КонецЕсли;
	//КонецЦикла;
	
	// Галфинд СадомцевСА 07.08.2023 Исправил "ошибки" СонарКуба
	ДополнитьНастройкиКолонокСправочника(ТЗ, МетаданныеИсточника);
	//Для каждого ЗагружаемыйРеквизит Из ТЗ Цикл
	//	
	//	СписокВыбора = ПолучитьСписокИменПредставлений(ЗагружаемыйРеквизит.ОписаниеТипов);
	//	ЗагружаемыйРеквизит.ИскатьПо = ?(СписокВыбора.Количество() = 0, "",СписокВыбора[0].Значение);
	//	
	//	СписокВыбора = ПолучитьСписокСвязейПоВладельцу(ЗагружаемыйРеквизит.ОписаниеТипов, ТЗ);
	//	ЗагружаемыйРеквизит.СвязьПоВладельцу = ?(СписокВыбора.Количество() = 0, "",СписокВыбора[0].Значение);
	//	
	//	СписокВыбора = ПолучитьСписокСвязейПоТипу(ЗагружаемыйРеквизит, ТЗ);
	//	Если СписокВыбора.Количество() = 0 Тогда
	//		ЗагружаемыйРеквизит.СвязьПоТипу = "";
	//		ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 0;
	//	Иначе
	//		ЗагружаемыйРеквизит.СвязьПоТипу = СписокВыбора[0].Значение;
	//		Если Найти(ЗагружаемыйРеквизит.ИмяРеквизита,"3") <> 0 Тогда
	//			
	//			ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 3;
	//			
	//		ИначеЕсли Найти(ЗагружаемыйРеквизит.ИмяРеквизита,"2") <> 0 Тогда
	//			
	//			ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 2;
	//			
	//		Иначе
	//			
	//			ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 1;
	//			
	//		КонецЕсли;
	//		 
	//		
	//	КонецЕсли;
	//	
	//	ЗагружаемыйРеквизит.ЗначениеПоУмолчанию = ЗагружаемыйРеквизит.ОписаниеТипов.ПривестиЗначение(Неопределено);
	//	ЗагружаемыйРеквизит.ДоступныеТипы = ЗагружаемыйРеквизит.ОписаниеТипов;
	//	ЗагружаемыйРеквизит.РежимЗагрузки = "Искать";
	//КонецЦикла;
	
	
КонецПроцедуры // ()

&НаСервере
Процедура ЗаполнитьНастройкиКолонокРегистраСведений(ТЗ)
// Заполняет настройки колонок по умолчанию для регистра сведений
//
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	
	Если МетаданныеИсточника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не МетаданныеИсточника.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		
		ЗагружаемыйРеквизит = ТЗ.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = "Период";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Период";
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска = Истина;
		ЗагружаемыйРеквизит.ПолеПоиска           = Истина;
		
		ЗагружаемыйРеквизит.ОписаниеТипов = Новый ОписаниеТипов("Дата", , , ,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
		
	КонецЕсли;
	
	Для каждого Реквизит Из МетаданныеИсточника.Измерения Цикл
		ЗагружаемыйРеквизит                        = ТЗ.Добавить();
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска = Истина;
		ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
		ЗагружаемыйРеквизит.ОписаниеТипов = МетаданныеИсточника.Измерения[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
	КонецЦикла;
	
	Для каждого Реквизит Из МетаданныеИсточника.Ресурсы Цикл
		ЗагружаемыйРеквизит                        = ТЗ.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
		ЗагружаемыйРеквизит.ОписаниеТипов = МетаданныеИсточника.Ресурсы[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
	КонецЦикла;
	
	Для каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл
		ЗагружаемыйРеквизит                        = ТЗ.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
		ЗагружаемыйРеквизит.ОписаниеТипов = МетаданныеИсточника.Реквизиты[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
	КонецЦикла;
	
	// Галфинд СадомцевСА 07.08.2023 Исправил "ошибки" СонарКуба
	ДополнитьНастройкиКолонокСправочника(ТЗ, МетаданныеИсточника);
	//Для каждого ЗагружаемыйРеквизит Из ТЗ Цикл
	//	
	//	СписокВыбора = ПолучитьСписокИменПредставлений(ЗагружаемыйРеквизит.ОписаниеТипов);
	//	ЗагружаемыйРеквизит.ИскатьПо = ?(СписокВыбора.Количество() = 0, "",СписокВыбора[0].Значение);
	//	
	//	СписокВыбора = ПолучитьСписокСвязейПоВладельцу(ЗагружаемыйРеквизит.ОписаниеТипов, ТЗ);
	//	ЗагружаемыйРеквизит.СвязьПоВладельцу = ?(СписокВыбора.Количество() = 0, "",СписокВыбора[0].Значение);
	//	
	//	СписокВыбора = ПолучитьСписокСвязейПоТипу(ЗагружаемыйРеквизит, ТЗ);
	//	Если СписокВыбора.Количество() = 0 Тогда
	//		ЗагружаемыйРеквизит.СвязьПоТипу = "";
	//		ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 0;
	//	Иначе
	//		ЗагружаемыйРеквизит.СвязьПоТипу = СписокВыбора[0].Значение;
	//		Если Найти(ЗагружаемыйРеквизит.ИмяРеквизита,"3") <> 0 Тогда
	//			
	//			ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 3;
	//			
	//		ИначеЕсли Найти(ЗагружаемыйРеквизит.ИмяРеквизита,"2") <> 0 Тогда
	//			
	//			ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 2;
	//			
	//		Иначе
	//			
	//			ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 1;
	//			
	//		КонецЕсли;
	//		 
	//		
	//	КонецЕсли;
	//	
	//	ЗагружаемыйРеквизит.ЗначениеПоУмолчанию = ЗагружаемыйРеквизит.ОписаниеТипов.ПривестиЗначение(Неопределено);
	//	ЗагружаемыйРеквизит.ДоступныеТипы = ЗагружаемыйРеквизит.ОписаниеТипов;
	//	ЗагружаемыйРеквизит.РежимЗагрузки = "Искать";
	//КонецЦикла;
	
	
КонецПроцедуры // ()

&НаСервере
Функция ПолучитьНастройки()
// Функция формирует табличный документ с настройками обработки
	
	МетаданныеОбъекта = ПолучитьМетаданныеИсточника();
	
	Если МетаданныеОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВидОбъекта     = МетаданныеОбъекта.ПолноеИмя();
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Макет = ОбработкаОбъект.ПолучитьМакетОбработки("МакетСохраненияНастроек");
	
	ОбластьШапки = Макет.ПолучитьОбласть("Шапка");
	
	
	Если Объект.РежимЗагрузки = 0 Тогда
		ОбластьШапки.Параметры.РежимЗагрузки = "в справочник";
	ИначеЕсли Объект.РежимЗагрузки = 1 Тогда
		ОбластьШапки.Параметры.РежимЗагрузки = "в табличную часть";
	ИначеЕсли Объект.РежимЗагрузки = 2 Тогда
		ОбластьШапки.Параметры.РежимЗагрузки = "в регистр сведений";
	// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
	// ++
	Иначе
		а = 0;
	//--
	КонецЕсли;
	
	ОбластьШапки.Параметры.ВидОбъекта                                = ВидОбъекта;
	ОбластьШапки.Параметры.НеСоздаватьНовыхЭлементов                 = ?(Объект.НеСоздаватьНовыхЭлементов, "Х","");
	ОбластьШапки.Параметры.ЗамещатьСуществующиеЗаписи                 = ?(Объект.ЗамещатьСуществующиеЗаписи, "Х","");
	ОбластьШапки.Параметры.РучнаяНумерацияКолонокТабличногоДокумента = ?(Объект.РучнаяНумерацияКолонокТабличногоДокумента, "Х","");
	ОбластьШапки.Параметры.ПерваяСтрокаДанныхТабличногоДокумента     = Объект.ПерваяСтрокаДанныхТабличногоДокумента;
	
	ДокументРезультат.Вывести(ОбластьШапки);
	
	// Галфинд СадомцевСА 07.08.2023 Исправил "ошибки" СонарКуба
	ПолучитьНастройкиТЗ(ДокументРезультат, Макет);
	//ТЗ = РеквизитФормыВЗначение("ТаблицаЗагружаемыхРеквизитов");
	//
	//Для каждого ЗагружаемыйРеквизит Из ТЗ Цикл
	//	ОбластьСтроки = Макет.ПолучитьОбласть("Строка" + ?(ЗагружаемыйРеквизит.РежимЗагрузки = "Вычислять","Выражение",""));
	//	
	//	ОбластьСтроки.Параметры.Пометка      = ?(ЗагружаемыйРеквизит.Пометка, "Х","");
	//	ОбластьСтроки.Параметры.ИмяРеквизита = ЗагружаемыйРеквизит.ИмяРеквизита;
	//	ОбластьСтроки.Параметры.ПолеПоиска   = ?(ЗагружаемыйРеквизит.ПолеПоиска, "Х","");
	//	
	//	ОбластьСтроки.Параметры.ОписаниеТипов       = ПолучитьОписаниеТипа(ЗагружаемыйРеквизит.ОписаниеТипов);
	//	
	//	ОбластьСтроки.Параметры.РежимЗагрузки       = ЗагружаемыйРеквизит.РежимЗагрузки;
	//	Если ЗагружаемыйРеквизит.ОписаниеТипов.ПривестиЗначение(Неопределено) = ЗагружаемыйРеквизит.ЗначениеПоУмолчанию Тогда
	//		ОбластьСтроки.Параметры.ЗначениеПоУмолчанию = "";
	//	Иначе
	//		ОбластьСтроки.Параметры.ЗначениеПоУмолчанию = ЗначениеВСтрокуВнутр(ЗагружаемыйРеквизит.ЗначениеПоУмолчанию);
	//	КонецЕсли;
	//	
	//	Если ЗагружаемыйРеквизит.РежимЗагрузки = "Вычислять" Тогда
	//		
	//		ОбластьСтроки.Параметры.Выражение           = ЗагружаемыйРеквизит.Выражение;
	//		
	//	Иначе
	//		ОбластьСтроки.Параметры.ИскатьПо            = ЗагружаемыйРеквизит.ИскатьПо;
	//		ОбластьСтроки.Параметры.СвязьПоВладельцу    = ?(ТипЗнч(ЗагружаемыйРеквизит.СвязьПоВладельцу) = Тип("Строка"),ЗагружаемыйРеквизит.СвязьПоВладельцу,ЗначениеВСтрокуВнутр(ЗагружаемыйРеквизит.СвязьПоВладельцу));
	//		ОбластьСтроки.Параметры.СвязьПоТипу         = ?(ТипЗнч(ЗагружаемыйРеквизит.СвязьПоТипу) = Тип("Строка"),ЗагружаемыйРеквизит.СвязьПоТипу,ЗначениеВСтрокуВнутр(ЗагружаемыйРеквизит.СвязьПоТипу));
	//		ОбластьСтроки.Параметры.ЭлементСвязиПоТипу  = ЗагружаемыйРеквизит.ЭлементСвязиПоТипу;
	//	КонецЕсли;
	//	
	//	ОбластьСтроки.Параметры.НомерКолонки = ЗагружаемыйРеквизит.НомерКолонки;
	//	
	//	ДокументРезультат.Вывести(ОбластьСтроки);
	//	
	//КонецЦикла;
	
	ОбластьПодвала = Макет.ПолучитьОбласть("События");
	ОбластьПодвала.Параметры.ПередЗаписьюОбъекта = Объект.ПередЗаписьюОбъекта;
	ОбластьПодвала.Параметры.ПриЗаписиОбъекта = Объект.ПриЗаписиОбъекта;
	ДокументРезультат.Вывести(ОбластьПодвала);
	Если Объект.РежимЗагрузки Тогда
		
		ОбластьПодвала = Макет.ПолучитьОбласть("СобытияПослеДобавленияСтроки");
		ОбластьПодвала.Параметры.ПослеДобавленияСтроки = Объект.ПослеДобавленияСтроки;
		ДокументРезультат.Вывести(ОбластьПодвала);
		
	КонецЕсли;
	 
	Возврат ДокументРезультат;
	
КонецФункции

&НаСервере
Функция ПрочитатьНастройкиНаСервере(АдресХранилища)
// Функция читает mxl-файл с настройками обработки
	
	Данные = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	ИмяФайлаВременное = ПолучитьИмяВременногоФайла("mxl");
	ВремДок = Новый ТабличныйДокумент;
	Данные.Записать(ИмяФайлаВременное);
	ВремДок.Прочитать(ИмяФайлаВременное);
	УдалитьФайлы(ИмяФайлаВременное);
	
	Возврат ВремДок;
КонецФункции

&НаКлиенте
Функция мПрочитатьНастройкиИзФайла(ИмяФайла)
// Функция возвращает содержимое mxl-файла с настройками обработки
	
	ДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
	
	АдресФайла = "";
	АдресФайла = ПоместитьВоВременноеХранилище(ДанныеФайла, ЭтаФорма.УникальныйИдентификатор);
	
	Возврат ПрочитатьНастройкиНаСервере(АдресФайла);
	
КонецФункции

&НаСервере
Процедура СкопироватьНастройки(Знач Источник, Приемник)
	
	//Если ТипЗнч(Источник) = Тип("ДанныеФормыКоллекция") Тогда
	//	Источник = ДанныеФормыВЗначение(Источник, Тип("ТаблицаЗначений"));
	//Иначе
	Если НЕ ТипЗнч(Источник) = Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Приемник.Очистить();
	
	Для каждого Стр Из Источник Цикл
		НовСтр = Приемник.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Стр);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()

	//..мСохранитьЗначение("РежимЗагрузки",				Объект.РежимЗагрузки);
	//..мСохранитьЗначение("СсылкаИсточника",			Объект.СсылкаИсточника);
	мСохранитьЗначение("ТабличнаяЧастьИсточника",	Объект.ТабличнаяЧастьИсточника);
	мСохранитьЗначение("ИмяВидаРегистра",			Объект.ИмяВидаРегистра);
	мСохранитьЗначение("ТипОбъектаСправочника",		Объект.ТипОбъектаСправочника);
	//++
	мСохранитьЗначение("ТаблицаЗагружаемыхРеквизитов", ТаблицаЗагружаемыхРеквизитов);
	//--

КонецПроцедуры // ПриЗакрытииНаСервере()

////////////////////////////////////////////////////////////////////////////////
//

&НаСервере
Процедура ОбновитьДанныеТабличногоДокументаСервер()

	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруКолонок();
	СформироватьШапкуТабличногоДокумента(ТабличныйДокумент);
	
	НомерСтроки = Объект.ПерваяСтрокаДанныхТабличногоДокумента;
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	Если Объект.РежимЗагрузки =0 или Объект.РежимЗагрузки =2 или МетаданныеИсточника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Источник = Объект.СсылкаИсточника[Объект.ТабличнаяЧастьИсточника];
	
	//ТЗ = РеквизитФормыВЗначение("ТаблицаЗагружаемыхРеквизитов");
	
	Для каждого Строка Из Источник Цикл
		
		НомерКолонки = 0;
		
		Для каждого ЗагружаемыйРеквизит Из ТаблицаЗагружаемыхРеквизитов Цикл
			
			// Галфинд СадомцевСА 07.08.2023 Исправил "ошибки" СонарКуба
			ЗаполнитьОбласть(Строка, ЗагружаемыйРеквизит, НомерСтроки, НомерКолонки);
			//Если ЗагружаемыйРеквизит.Пометка Тогда
			//	
			//	Если Объект.РучнаяНумерацияКолонокТабличногоДокумента Тогда
			//		НомерКолонки = ЗагружаемыйРеквизит.НомерКолонки;
			//	Иначе
			//		НомерКолонки = НомерКолонки + 1;
			//	КонецЕсли;
			//	
			//	Область = ТабличныйДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=") + "C"+НомерКолонки);
			//	Значение = Строка[ЗагружаемыйРеквизит.ИмяРеквизита];
			//	
			//	Попытка
			//		Представление = Значение[ЗагружаемыйРеквизит.ИскатьПо];
			//		
			//	Исключение
			//		
			//		Представление = Значение;
			//		
			//	КонецПопытки;
			//	
			//	Область.Текст = Представление;
			//	Область.Расшифровка = Значение;
			//	
			//КонецЕсли;
			
		КонецЦикла;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;

КонецПроцедуры // ОбновитьДанныеТабличногоДокументаСервер()

&НаКлиенте
Процедура ОбновитьДанныеТабличногоДокумента(БезВопросов = Ложь)
	
	//Если (Объект.РежимЗагрузки = 0 или Объект.РежимЗагрузки = 2) и Элементы.ТабДокумент.Высота > 1 И Не БезВопросов Тогда
	//	Результат = Вопрос("Табличный документ содержит данные. Очистить?", РежимДиалогаВопрос.ДаНет);
	//	Если  Результат = КодВозвратаДиалога.Нет Тогда
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	
	ОбновитьДанныеТабличногоДокументаСервер();
	
КонецПроцедуры

&НаКлиенте
Функция мПрочитатьТабличныйДокументИзExcel(ИмяФайла, НомерЛистаExcel = 1) Экспорт
// Функция считывает в табличный документ данные из файла в формате Excel
//
// Параметры:
//  ТабличныйДокумент  - ТабличныйДокумент, в который необходимо прочитать данные
//  ИмяФайла           - имя файла в формате Excel, из которого необходимо прочитать данные
//  НомерЛистаExcel    - номер листа книги Excel, из которого необходимо прочитать данные
//
// Возвращаемое значение:
//  Истина, если файл прочитан, Ложь - иначе
//
	
	// ++ Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
	СистемнаяИнформация = Новый СистемнаяИнформация();
	Если	СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86
		ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		Сообщить("Тип платформы:" + СистемнаяИнформация.ТипПлатформы + ". Загрузка из Excel не доступна!");
		Возврат Ложь;
	КонецЕсли;
	// -- Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
	xlLastCell = 11;
	
	ВыбФайл = Новый Файл(ИмяФайла);
	Если НЕ ВыбФайл.Существует() Тогда
		Сообщить("Файл не существует!");
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Excel = Новый COMОбъект("Excel.Application");
		Excel.WorkBooks.Open(ИмяФайла);
		Сообщить("Обработка файла Microsoft Excel...");
		ExcelЛист = Excel.Sheets(НомерЛистаExcel);
	Исключение
		Сообщить("Ошибка. Возможно неверно указан номер листа книги Excel.");
		Возврат ложь;
		
	КонецПопытки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ActiveCell = Excel.ActiveCell.SpecialCells(xlLastCell);
	RowCount = ActiveCell.Row;
	ColumnCount = ActiveCell.Column;
	Для Column = 1 По ColumnCount Цикл
		ТабличныйДокумент.Область("C" + Формат(Column, "ЧГ=")).ШиринаКолонки = ExcelЛист.Columns(Column).ColumnWidth;
	КонецЦикла;
	Для Row = 1 По RowCount Цикл
		
		Для Column = 1 По ColumnCount Цикл
			ТабличныйДокумент.Область("R" + Формат(Row, "ЧГ=") +"C" + Формат(Column, "ЧГ=")).Текст = ExcelЛист.Cells(Row,Column).Text;
		КонецЦикла;
		
	КонецЦикла;
	
	Excel.WorkBooks.Close();
	Excel = 0;
	
	Возврат Истина;
	
КонецФункции // ()

&НаКлиенте
Функция мПрочитатьТабличныйДокументИзТекста(ИмяФайла) Экспорт
// Функция считывает в табличный документ данные из файла в формате TXT
//
// Параметры:
//  ТабличныйДокумент  - ТабличныйДокумент, в который необходимо прочитать данные
//  ИмяФайла           - имя файла в формате TXT, из которого необходимо прочитать данные
//
// Возвращаемое значение:
//  Истина, если файл прочитан, Ложь - иначе
//
	
	ВыбФайл = Новый Файл(ИмяФайла);
	Если НЕ ВыбФайл.Существует() Тогда
		Сообщить("Файл не существует!");
		Возврат Ложь;
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	Попытка
		ТекстовыйДокумент.Прочитать(ИмяФайла);
	Исключение
		Сообщить("Ошибка открытия файла!");
		Возврат Ложь;
	КонецПопытки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Для ТекущаяСтрока = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
		ТекущаяКолонка = 0;
		Для каждого Значение Из мРазложитьСтрокуВМассивПодстрок(ТекстовыйДокумент.ПолучитьСтроку(ТекущаяСтрока),Символы.Таб) Цикл
			ТекущаяКолонка = ТекущаяКолонка + 1;
			ТабличныйДокумент.Область("R" + Формат(ТекущаяСтрока, "ЧГ=") +"C" + Формат(ТекущаяКолонка, "ЧГ=")).Текст = Значение;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ()

&НаКлиенте
Функция мПрочитатьТабличныйДокументИзDBF(ИмяФайла) Экспорт
// Функция считывает в табличный документ данные из файла в формате dBase III (*.dbf)
//
// Параметры:
//  ТабличныйДокумент  - ТабличныйДокумент, в который необходимо прочитать данные
//  ИмяФайла           - имя файла в формате TXT, из которого необходимо прочитать данные
//
// Возвращаемое значение:
//  Истина, если файл прочитан, Ложь - иначе
//
	
	ВыбФайл = Новый Файл(ИмяФайла);
	Если НЕ ВыбФайл.Существует() Тогда
		Сообщить("Файл не существует!");
		Возврат Ложь;
	КонецЕсли;
	
	
	XBase  = Новый XBase;
	XBase.Кодировка = КодировкаXBase.OEM;
	Попытка
		XBase.ОткрытьФайл(ИмяФайла);
	Исключение
		Сообщить("Ошибка открытия файла!");
		Возврат Ложь;
	КонецПопытки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТекущаяСтрока = 1;
	
	
	ТекущаяКолонка = 0;
	Для каждого Поле Из XBase.поля Цикл
		ТекущаяКолонка = ТекущаяКолонка + 1;
		ТабличныйДокумент.Область("R" + Формат(ТекущаяСтрока, "ЧГ=") +"C" + Формат(ТекущаяКолонка, "ЧГ=")).Текст = Поле.Имя;
	КонецЦикла;
	
	
	Рез = XBase.Первая();
	Пока Не XBase.ВКонце() Цикл
		ТекущаяСтрока = ТекущаяСтрока + 1;
		
		ТекущаяКолонка = 0;
		Для каждого Поле Из XBase.поля Цикл
			// ++
			ПолеИмя = Поле.Имя;
			// --
			ТекущаяКолонка = ТекущаяКолонка + 1;
			ТабличныйДокумент.Область("R" + Формат(ТекущаяСтрока, "ЧГ=") +"C" + Формат(ТекущаяКолонка, "ЧГ=")).Текст = XBase.ПолучитьЗначениеПоля(ТекущаяКолонка - 1);
		КонецЦикла;
		
		XBase.Следующая();
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ()

&НаСервере
Процедура ПрочитатьТабличныйДокументИзMXLНаСервере(АдресХранилища)

	Данные = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	ИмяФайлаВременное = ПолучитьИмяВременногоФайла("mxl");
	
	Данные.Записать(ИмяФайлаВременное);
	ТабличныйДокумент.Прочитать(ИмяФайлаВременное);
	УдалитьФайлы(ИмяФайлаВременное);
	
КонецПроцедуры // ПрочитатьТабличныйДокументИзMXLНаСервере()

&НаКлиенте
Процедура мПрочитатьТабличныйДокументИзMXL(ИмяФайла)

	ДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
	
	АдресФайла = "";
	АдресФайла = ПоместитьВоВременноеХранилище(ДанныеФайла, ЭтаФорма.УникальныйИдентификатор);
	
	ПрочитатьТабличныйДокументИзMXLНаСервере(АдресФайла);

КонецПроцедуры // ()

////////////////////////////////////////////////////////////////////////////////
//

&НаКлиенте
Процедура УправлениеВидимостью()
	
	РежимЗагрузки = Объект.РежимЗагрузки;
	РучнаяНумерацияКолонокТабличногоДокумента = Объект.РучнаяНумерацияКолонокТабличногоДокумента;
	
	Если РежимЗагрузки = 0 Тогда
		ТекЭлемент = Элементы.ГруппаЗагрузкаВСправочник;
	ИначеЕсли РежимЗагрузки = 1 Тогда
		ТекЭлемент = Элементы.ГруппаЗагрузкаВТабличнуюЧасть;
	ИначеЕсли РежимЗагрузки = 2 Тогда
		ТекЭлемент = Элементы.ГруппаЗагрузкаВРегистрСведений;
	Иначе
		Возврат; // Неизвестный режим
	КонецЕсли;
	Если Не Элементы.ГруппаПанельРежима.ТекущаяСтраница = ТекЭлемент Тогда
		Элементы.ГруппаПанельРежима.ТекущаяСтраница = ТекЭлемент;
	КонецЕсли;
	
	Элементы.ТаблицаЗагружаемыхРеквизитовПолеПоиска.Видимость         = РежимЗагрузки = 0;
	
	Элементы.НеСоздаватьНовыхЭлементов. Видимость = РежимЗагрузки = 0;
	Элементы.ЗамещатьСуществующиеЗаписи.Видимость = РежимЗагрузки = 2;
	
	ДоступностьКнопкиСохранитьЗначения    = ЕстьВыбранныеМетаданные();
	ДоступностьКнопкиВосстановитьЗначения = Ложь; //Не СписокСохраненныхНастроек.Количество() = 0;
	
	Элементы.СохранитьЗначения.   Доступность = Ложь; //ДоступностьКнопкиСохранитьЗначения;
	Элементы.ВосстановитьЗначения.Доступность = ДоступностьКнопкиВосстановитьЗначения;
	
	Элементы.СохранитьЗначенияВФайл.Доступность = ДоступностьКнопкиСохранитьЗначения;
	
	Элементы.ТаблицаЗагружаемыхРеквизитовНомерКолонки.Видимость = РучнаяНумерацияКолонокТабличногоДокумента;
	Элементы.ПеренумероватьКолонки.Доступность = РучнаяНумерацияКолонокТабличногоДокумента;
	Элементы.РучнаяНумерацияКолонокТабличногоДокумента.Пометка = РучнаяНумерацияКолонокТабличногоДокумента;

КонецПроцедуры // УправлениеВидимостью()

&НаСервере
Процедура УстановитьИсточник(СписокНастроек = Неопределено)
// Процедура выполняет установку реквизитов, связанных с источником данных
//
	
	Источник        = Неопределено;
	ОбъектИсточника = Неопределено;
	//СписокСохраненныхНастроек.Очистить();
	ПрошлыйМетаданныеСсылкиИсточника = Неопределено;
	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	Если МетаданныеИсточника = Неопределено Тогда
		ТаблицаЗагружаемыхРеквизитов.Очистить();
	Иначе
		//..Врем = мВосстановитьЗначение(МетаданныеИсточника.ПолноеИмя());
		//Если НЕ СписокНастроек = Неопределено Тогда
		//	СкопироватьНастройки(Врем, СписокНастроек);
		//	Настройка = ПолучитьНастройкуПоУмолчанию(СписокНастроек);
		//	ВосстановитьНастройкиИзСписка(Настройка);
		//Иначе
		//	ВосстановитьНастройкиИзСписка(Неопределено);
		ЗаполнитьНастройкиКолонок(Неопределено);
		//КонецЕсли;
	КонецЕсли;
	
	ОбновитьДанныеТабличногоДокументаСервер();
	
	СпискиВыбораСвязиПоВладельцу.Очистить();
	
	ТЗ = РеквизитФормыВЗначение("ТаблицаЗагружаемыхРеквизитов");
	
	Для каждого ЗагружаемыйРеквизит Из ТЗ Цикл
		
		СтрокаСписка = СпискиВыбораСвязиПоВладельцу.Добавить();
		СтрокаСписка.ИмяРеквизита = ЗагружаемыйРеквизит.ИмяРеквизита;
		СтрокаСписка.СписокВыбора = ПолучитьСписокСвязейПоВладельцу(ЗагружаемыйРеквизит.ОписаниеТипов, ТЗ);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура Инициализация()	
// Процедура выполняет инициализацию служебных переменных и констант модуля
//
	
	Объект.ДополнительныеСвойства = Новый Структура;
	
	Объект.ДополнительныеСвойства.Вставить("ПримитивныеТипы", Новый Структура ("Число, Строка, Дата, Булево",
	Тип("Число"), Тип("Строка"), Тип("Дата"), Тип("Булево")));
	
	Если Объект.ПерваяСтрокаДанныхТабличногоДокумента < 2 Тогда
		Объект.ПерваяСтрокаДанныхТабличногоДокумента = 2;
	КонецЕсли;
	
	Объект.ДополнительныеСвойства.Вставить("Колонки", Новый Структура);

КонецПроцедуры // ()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД

&НаКлиенте
Процедура КомандаЗагрузить(Команда)
	
	//СтруктураТекстВопроса = ПолучитьТекстВопросаИсточника();
	//КоличествоЭлементов = ТабличныйДокумент.ВысотаТаблицы - Объект.ПерваяСтрокаДанныхТабличногоДокумента + 1;
	//Если НЕ ПустаяСтрока(СтруктураТекстВопроса.Ошибка) Тогда
	//	Предупреждение(СтруктураТекстВопроса.Ошибка);
	//ИначеЕсли Вопрос("Загрузить "+КоличествоЭлементов  + СтруктураТекстВопроса.ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		ОчиститьСообщения();
		ЗагрузитьДанныеСервер();
	//КонецЕсли;
	
	// ++ Галфинд СадомцевСА 01.11.2022
	//Сообщить("ВладелецФормы:" + ВладелецФормы + " тип:" + ТипЗнч(ВладелецФормы));
	Если ВладелецФормы <> Неопределено Тогда
		ВладелецФормы.Прочитать();
		//Параметр = "";
		//Если Объект.ИдентификаторКоманды = "гф_ЗаполнениеТЧТоварыДокументаЗаказКлиента" Тогда
		//	// здесь загрузка в тч Товары
		//	Параметр = "Товары";
		//ИначеЕсли Объект.ИдентификаторКоманды = "гф_ЗаполнениеТЧТоварыВКоробахДокументаЗаказКлиента" Тогда
		//	// здесь загрузка в тч Товары в коробах
		//	Параметр = "гф_ТоварыВКоробах";
		//КонецЕсли;
		//Сообщить("Параметр:" + Параметр);
		//Оповестить("Загружена табличная часть документа", Параметр, ЭтотОбъект);
	КонецЕсли;
	//ВладелецФормы.ОбновитьОтображениеДанных();
	//ВладелецФормы.ОповеститьОбАктивизации(Объект.СсылкаИсточника);
	//ВладелецФормы.ОповеститьОВыборе("Загружена табличная часть документа");
	//Если ВладелецФормы.ИмяФормы = "Документ.РеализацияТоваровУслуг.Форма.ФормаДокументаТовары" Тогда
	// 	ОбъектФормы = ВладелецФормы.Объект;
	// 	УстановитьСкидкуНаСервере(ОбъектФормы);
		//КопироватьДанныеФормы(ОбъектФормы, ВладелецФормы.Объект);
		//ВладелецФормы.ОбновитьОтображениеДанных();
	//КонецЕсли;
	//--
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрыть(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Заголовок = "Прочитать табличный документ из файла";
	ДиалогВыбораФайла.Фильтр    = "Табличный документ (*.mxl)|*.mxl|Лист Excel (*.xls)|*.xls|Текстовый документ (*.txt)|*.txt|dBase III (*.dbf)|*.dbf|";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		ТабличныйДокумент = Элементы.ТабДокумент;
		ФайлНаДиске = Новый Файл(ДиалогВыбораФайла.ПолноеИмяФайла);
		Если нРег(ФайлНаДиске.Расширение) = ".mxl" Тогда
			мПрочитатьТабличныйДокументИзMXL(ДиалогВыбораФайла.ПолноеИмяФайла);
		ИначеЕсли нРег(ФайлНаДиске.Расширение) = ".xls" Тогда
			мПрочитатьТабличныйДокументИзExcel(ДиалогВыбораФайла.ПолноеИмяФайла);
		ИначеЕсли нРег(ФайлНаДиске.Расширение) = ".txt" Тогда
			мПрочитатьТабличныйДокументИзТекста(ДиалогВыбораФайла.ПолноеИмяФайла);
		ИначеЕсли нРег(ФайлНаДиске.Расширение) = ".dbf" Тогда
			мПрочитатьТабличныйДокументИзDBF(ДиалогВыбораФайла.ПолноеИмяФайла);
		// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
		// ++
		Иначе
			а = 0;
		//--
		КонецЕсли;
		УправлениеВидимостью();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранить(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	
	ДиалогВыбораФайла.Заголовок = "Сохранить табличный документ в файл";
	ДиалогВыбораФайла.Фильтр    = "Табличный документ (*.mxl)|*.mxl|Лист Excel (*.xls)|*.xls|Текстовый документ (*.txt)|*.txt|";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		ТабличныйДокумент = Элементы.ТабДокумент;
		ФайлНаДиске = Новый Файл(ДиалогВыбораФайла.ПолноеИмяФайла);
		Если нРег(ФайлНаДиске.Расширение) = ".mxl" Тогда
			ТабличныйДокумент.Записать(ДиалогВыбораФайла.ПолноеИмяФайла,ТипФайлаТабличногоДокумента.MXL);
		ИначеЕсли нРег(ФайлНаДиске.Расширение) = ".xls" Тогда
			ТабличныйДокумент.Записать(ДиалогВыбораФайла.ПолноеИмяФайла,ТипФайлаТабличногоДокумента.XLS);
		ИначеЕсли нРег(ФайлНаДиске.Расширение) = ".txt" Тогда
			ТабличныйДокумент.Записать(ДиалогВыбораФайла.ПолноеИмяФайла,ТипФайлаТабличногоДокумента.TXT);
		// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
		// ++
		Иначе
			а = 0;
		//--
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновить(Команда)
	ОбновитьДанныеТабличногоДокумента();
КонецПроцедуры

&НаКлиенте
Процедура КомандаКонтрольЗаполнения(Команда)
	КонтрольЗаполненияСервер();
КонецПроцедуры

&НаКлиенте
Процедура КомандаСледующееПримечание(Команда)
	
	//ТабличныйДокумент = Элементы.ТабДокумент;
	
	Нашли = Ложь;
	
	Колонка = ТабличныйДокумент.ТекущаяОбласть.Лево + 1;
	Строка  = ТабличныйДокумент.ТекущаяОбласть.Верх;
	
	Пока Не Нашли и Строка <= ТабличныйДокумент.ВысотаТаблицы Цикл
		
		Пока Не Нашли и Колонка <=  ТабличныйДокумент.ШиринаТаблицы Цикл
			
			Область = ТабличныйДокумент.Область("R" + Формат(Строка, "ЧГ=") + "C" + Формат(Колонка, "ЧГ="));
			Нашли = Не ПустаяСтрока(Область.Примечание.Текст);
			
			Колонка = Колонка + 1;
		КонецЦикла;
		Строка = Строка + 1;
		Колонка = 1;
	КонецЦикла;
	
	Если Нашли Тогда
		ТабличныйДокумент.ТекущаяОбласть = Область;
	Иначе
		Сообщить("Достигнут конец документа");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПредыдущееПримечание(Команда)
	
	//ТабличныйДокумент = Элементы.ТабДокумент;
	
	Нашли = Ложь;
	
	Колонка = ТабличныйДокумент.ТекущаяОбласть.Лево - 1;
	Строка  = ТабличныйДокумент.ТекущаяОбласть.Верх;
	
	Пока Не Нашли и Строка > 0 Цикл
		
		Пока Не Нашли и Колонка > 0 Цикл
			
			Область = ТабличныйДокумент.Область("R" + Формат(Строка, "ЧГ=") + "C" + Формат(Колонка, "ЧГ="));
			Нашли = Не ПустаяСтрока(Область.Примечание.Текст);
			
			Колонка = Колонка - 1;
		КонецЦикла;
		Строка = Строка - 1;
		Колонка = ТабличныйДокумент.ШиринаТаблицы;
	КонецЦикла;
	
	Если Нашли Тогда
		ТабличныйДокумент.ТекущаяОбласть = Область;
	Иначе
		Сообщить("Достигнуто начало документа");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВосстановитьЗначенияИзФайла(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок	= "Восстановить значения из файла";
	ДиалогВыбораФайла.Фильтр	= "Настройка загрузки в табличный документ (*.mxlz)|*.mxlz|Все файлы (*.*)|*.*|";
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Настройки = мПрочитатьНастройкиИзФайла(ДиалогВыбораФайла.ПолноеИмяФайла);
		ЗаполнитьНастройкиКолонок(Настройки);
		УстановитьСписокТабличныхЧастей();
		ОбновитьДанныеТабличногоДокумента(Истина);
	КонецЕсли;
	
	УправлениеВидимостью();

КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранитьЗначенияВФайл(Команда)
	
	Настройки = ПолучитьНастройки();
	Если Настройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	
	ДиалогВыбораФайла.Заголовок = "Сохранить значения настройки в файл";
	ДиалогВыбораФайла.Фильтр    = "Настройка загрузки в табличный документ (*.mxlz)|*.mxlz|Все файлы (*.*)|*.*|";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		Настройки.Записать(ДиалогВыбораФайла.ПолноеИмяФайла);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВосстановитьЗначения(Команда)
	
	ФормаВыбораНастройки = ПолучитьФорму(ИдентификаторОбработки()+".Форма.ФормаВыбораНастройки", ,ЭтаФорма);
	ФормаВыбораНастройки.СписокНастроек = СписокСохраненныхНастроек;
	ТекущиеДанные = ФормаВыбораНастройки.Открыть();
	Если Не ТекущиеДанные = Неопределено Тогда
		ЗаполнитьНастройкиКолонок(ТекущиеДанные.Значение);
	КонецЕсли;
	
	мСохранитьЗначение(ИдентификаторОбработки(),ФормаВыбораНастройки.СписокНастроек);

КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранитьЗначения(Команда)
	
	ФормаСохраненияНастройки = ПолучитьФорму(ИдентификаторОбработки()+".Форма.ФормаСохраненияНастройки", ,ЭтаФорма);
	Если Не СписокСохраненныхНастроек.Количество() = 0 Тогда
		//ФормаСохраненияНастройки.СписокНастроек = СписокСохраненныхНастроек;
		Для каждого Стр Из СписокСохраненныхНастроек Цикл
		
			НовСтр = ФормаСохраненияНастройки.СписокНастроек.Добавить();
			НовСтр.Пометка = Стр.Пометка;
			НовСтр.Представление = Стр.Представление;
		
		КонецЦикла; 
	КонецЕсли;
	
	ТекущиеДанные = ФормаСохраненияНастройки.Открыть();
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		//ПолучитьНастройкиСписком(ТекущиеДанные.Значение);
		//СкопироватьНастройки(ФормаСохраненияНастройки.СписокНастроек);
		//УстановитьТекущиеНастройки(СписокСохраненныхНастроек, ТекущиеДанные.Пометка, ТекущиеДанные.Представление, ПолучитьСтруктуруНастроек());
		мСохранитьЗначение(ИдентификаторОбработки(), СписокСохраненныхНастроек);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПеречитать(Команда)
	ЗаполнитьНастройкиКолонок(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьФлажки(Команда)
	Для каждого ЗагружаемыйРеквизит Из ТаблицаЗагружаемыхРеквизитов Цикл
		ЗагружаемыйРеквизит.Пометка = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура КомандаСнятьФлажки(Команда)
	Для каждого ЗагружаемыйРеквизит Из ТаблицаЗагружаемыхРеквизитов Цикл
		ЗагружаемыйРеквизит.Пометка = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура КомандаРучнаяНумерацияКолонокТабличногоДокумента(Команда)
	Элементы.РучнаяНумерацияКолонокТабличногоДокумента.Пометка = НЕ Элементы.РучнаяНумерацияКолонокТабличногоДокумента.Пометка;
	Объект.РучнаяНумерацияКолонокТабличногоДокумента = Элементы.РучнаяНумерацияКолонокТабличногоДокумента.Пометка;
	УправлениеВидимостью();
КонецПроцедуры

&НаКлиенте
Процедура КомандаПеренумероватьКолонки(Команда)
	НомерКолонки = 1;
	Для каждого Реквизит Из ТаблицаЗагружаемыхРеквизитов Цикл
		Если Реквизит.Пометка Тогда
			Если Не Реквизит.НомерКолонки = НомерКолонки Тогда
				Реквизит.НомерКолонки = НомерКолонки;
			КонецЕсли;
			НомерКолонки = НомерКолонки + 1;
		Иначе
			Реквизит.НомерКолонки = 0;
		КонецЕсли;
		
		Если Реквизит.НомерКолонки = 0 И Реквизит.РежимЗагрузки = "Искать" Тогда
			Реквизит.РежимЗагрузки = "Устанавливать"
		ИначеЕсли Не Реквизит.НомерКолонки = 0 И Реквизит.РежимЗагрузки = "Устанавливать" Тогда
			Реквизит.РежимЗагрузки = "Искать"
		// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
		// ++
		Иначе
			а = 0;
		//--
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура КомандаСобытия(Команда)
	
	ФормаРедактированиеСобытий = ПолучитьФорму(ИдентификаторОбработки()+".Форма.ФормаРедактированияСобытий", ,ЭтаФорма);
	
	ФормаРедактированиеСобытий.РежимЗагрузки = Объект.РежимЗагрузки;
	
	ФормаРедактированиеСобытий.ПередЗаписьюОбъекта	.УстановитьТекст(Объект.ПередЗаписьюОбъекта);
	ФормаРедактированиеСобытий.ПриЗаписиОбъекта		.УстановитьТекст(Объект.ПриЗаписиОбъекта);
	ФормаРедактированиеСобытий.ПослеДобавленияСтроки.УстановитьТекст(Объект.ПослеДобавленияСтроки);
	
	ФормаРедактированиеСобытий.Открыть();
	
	// .. Если Истина = Истина Тогда
		
		Объект.ПередЗаписьюОбъекта   = ФормаРедактированиеСобытий.ПередЗаписьюОбъекта  .ПолучитьТекст();
		Объект.ПриЗаписиОбъекта      = ФормаРедактированиеСобытий.ПриЗаписиОбъекта     .ПолучитьТекст();
		Объект.ПослеДобавленияСтроки = ФормаРедактированиеСобытий.ПослеДобавленияСтроки.ПолучитьТекст();
		
	// .. КонецЕсли;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЁННЫЕ ОБРАБОТЧИКИ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Для каждого МДСправочник Из Метаданные.Справочники Цикл
		Элементы.ТипОбъекта.СписокВыбора.Добавить(МДСправочник.Имя, МДСправочник.Синоним);
	КонецЦикла;
	МДНезависимый = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый;
	Для каждого МДРегистрСведений Из Метаданные.РегистрыСведений Цикл
		Если МДРегистрСведений.РежимЗаписи = МДНезависимый Тогда
			Элементы.ИмяВидаРегистра.СписокВыбора.Добавить(МДРегистрСведений.Имя, МДРегистрСведений.Синоним);
		КонецЕсли; 
	КонецЦикла;
	
	Типы = Новый Массив;
	ВидыТипов = Новый Структура("Справочники,Документы");
	Для каждого КлючИЗначение Из ВидыТипов Цикл
		Для каждого ОбъектМетаданных Из Метаданные[КлючИЗначение.Ключ] Цикл
			Если ОбъектМетаданных.ТабличныеЧасти.Количество() Тогда
				Типы.Добавить(Тип(СтрЗаменить(ОбъектМетаданных.ПолноеИмя(),".","Ссылка.")));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Элементы.СсылкаИсточника.ОграничениеТипа = Новый ОписаниеТипов(Типы);
	
	// ++ Галфинд СадомцевСА 01.11.2022
	//Сообщить("Параметры тип:" + ТипЗнч(Параметры));
	ПараметрыФормы = Новый Структура("ИдентификаторКоманды, ОбъектыНазначения", Неопределено, Неопределено);
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Параметры);
	//Сообщить("Параметры.ИдентификаторКоманды:" + ПараметрыФормы.ИдентификаторКоманды + " тип:" + ТипЗнч(ПараметрыФормы.ИдентификаторКоманды));
	//Сообщить("Параметры.ОбъектыНазначения:" + ПараметрыФормы.ОбъектыНазначения + " тип:" + ТипЗнч(ПараметрыФормы.ОбъектыНазначения));
	
	Если ПараметрыФормы.ОбъектыНазначения = Неопределено Тогда
		Отладка = Истина;
		Объект.РежимЗагрузки = 0;
		Объект.СсылкаИсточника = Неопределено;
	Иначе
		Объект.РежимЗагрузки = 1;
		Объект.СсылкаИсточника = ПараметрыФормы.ОбъектыНазначения[0];
		Объект.ИдентификаторКоманды = ПараметрыФормы.ИдентификаторКоманды;
	КонецЕсли;
	
	//Если Объект.ИдентификаторКоманды = "гф_ЗаполнениеТЧТоварыДокументаЗаказКлиента" Тогда
	//	// здесь загрузка в тч Товары
	//	Если ЭтоТоварыВКоробах(Объект.СсылкаИсточника.Склад) Тогда
	//		Сообщить("В этом Заказе надо заполнять тч Товары в коробах!");
	//		Отказ = Истина;
	//	КонецЕсли;
	//ИначеЕсли Объект.ИдентификаторКоманды = "гф_ЗаполнениеТЧТоварыВКоробахДокументаЗаказКлиента" Тогда
	//	// здесь загрузка в тч Товары в коробах
	//	Если НЕ ЭтоТоварыВКоробах(Объект.СсылкаИсточника.Склад) Тогда
	//		Сообщить("В этом Заказе надо заполнять тч Товары!");
	//		Отказ = Истина;
	//	КонецЕсли;
	//КонецЕсли;
	//Сообщить("Параметры.ИдентификаторКоманды:" + Параметры.ИдентификаторКоманды);
	//Сообщить("Объект.ИдентификаторКоманды:" + Объект.ИдентификаторКоманды);
	//Сообщить("Владелец:" + ЭтотОбъект.ВладелецФормы);
	//ЭтаФорма.Элементы.ГруппаОтладка.Видимость = Отладка;
	
	//Команда.Идентификатор = "гф_ЗаполнениеТЧТоварыДокументаЗаказКлиента";
	//Команда.Представление = "Заполнить Товары из табличного документа";
	//Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	//
	//Команда = ПараметрыРегистрации.Команды.Добавить();
	//Команда.Идентификатор = "гф_ЗаполнениеТЧТоварыВКоробахДокументаЗаказКлиента";
	//--
	
	//..Объект.РежимЗагрузки           = мВосстановитьЗначение("РежимЗагрузки");		
	//..Объект.ИмяВидаРегистра         = мВосстановитьЗначение("ИмяВидаРегистра");
	//..Объект.ТипОбъектаСправочника   = мВосстановитьЗначение("ТипОбъектаСправочника");
	//..Объект.СсылкаИсточника         = мВосстановитьЗначение("СсылкаИсточника");
	
	УстановитьСписокТабличныхЧастей();
	
	Объект.ТабличнаяЧастьИсточника = мВосстановитьЗначение("ТабличнаяЧастьИсточника");
	// ++ Галфинд СадомцевСА
	мТаблицаЗагружаемыхРеквизитов = мВосстановитьЗначение("ТаблицаЗагружаемыхРеквизитов");
	Если мТаблицаЗагружаемыхРеквизитов <> Неопределено Тогда
		ТаблицаЗагружаемыхРеквизитов.Загрузить(мВосстановитьЗначение("ТаблицаЗагружаемыхРеквизитов"));
	КонецЕсли;
	// --
	
	Инициализация();
	
	УстановитьИсточник();
	
	ОбновитьДанныеТабличногоДокументаСервер();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СисИнфо = Новый СистемнаяИнформация;
	Если Лев(СисИнфо.ВерсияПриложения, 3) = "8.3" Тогда
		Выполнить("Элементы.СсылкаИсточника.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;");
		Выполнить("Элементы.ТаблицаЗагружаемыхРеквизитовЗначениеПоУмолчанию.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;");
	КонецЕсли;

	УправлениеВидимостью();
	// ++ Галфинд СадомцевСА 01.11.2022
	СсылкаИсточникаПриИзменении(Неопределено);
	//Если Объект.ИдентификаторКоманды = "гф_ЗаполнениеТЧТоварыДокументаЗаказКлиента" Тогда
	//	Объект.ТабличнаяЧастьИсточника = "Товары";
	//	ТабличнаяЧастьИсточникаПриИзменении(Неопределено);
	//ИначеЕсли Объект.ИдентификаторКоманды = "гф_ЗаполнениеТЧТоварыВКоробахДокументаЗаказКлиента" Тогда
	//	Объект.ТабличнаяЧастьИсточника = "гф_ТоварыВКоробах";
	//	ТабличнаяЧастьИсточникаПриИзменении(Неопределено);
	//КонецЕсли;
	//--
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ПриЗакрытииНаСервере();
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура РежимЗагрузкиПриИзменении(Элемент)
	Объект.ТипОбъектаСправочника	= Неопределено;
	Объект.СсылкаИсточника			= Неопределено;
	Объект.ИмяВидаРегистра			= Неопределено;
	Объект.ТабличнаяЧастьИсточника	= Неопределено;
	УстановитьСписокТабличныхЧастей();
	УстановитьИсточник();
	УправлениеВидимостью();
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаПриИзменении(Элемент)
	УстановитьИсточник();
	УправлениеВидимостью();
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ПустаяСтрока(Объект.ТипОбъектаСправочника) Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ПолучитьФорму("Справочник."+Объект.ТипОбъектаСправочника+".ФормаСписка");
	Форма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура СсылкаИсточникаПриИзменении(Элемент)
	УстановитьСписокТабличныхЧастей();
	УстановитьИсточник();
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьИсточникаПриИзменении(Элемент)
	//Сообщить("Объект.ТабличнаяЧастьИсточника:" + Объект.ТабличнаяЧастьИсточника + " тип:" + ТипЗнч(Объект.ТабличнаяЧастьИсточника));
	УстановитьИсточник();
	УправлениеВидимостью();
КонецПроцедуры

&НаКлиенте
Процедура ИмяВидаРегистраПриИзменении(Элемент)
	УстановитьИсточник();
	УправлениеВидимостью();
КонецПроцедуры

&НаКлиенте
Процедура ИмяВидаРегистраОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ПустаяСтрока(Объект.ИмяВидаРегистра) Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ПолучитьФорму("РегистрСведений."+Объект.ИмяВидаРегистра+".ФормаСписка");
	Форма.Открыть();
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ТАБЛИЦЫ ЗНАЧЕНИЙ ЗАГРУЖАЕМЫХ РЕКВИЗИТОВ

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитовОписаниеТиповНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов.ТекущиеДанные;
	Элемент.ДоступныеТипы = ТекДанные.ДоступныеТипы;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитовПредставлениеДопУсловийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;
	Если ТекДанные.РежимЗагрузки = "Вычислять" Тогда
		ФормаРедактированияВыражения = ПолучитьФорму(ИдентификаторОбработки()+".Форма.ФормаРедактированияВыражения", ,ЭтаФорма);
		
		ПолеТекстовогоДокумента = ФормаРедактированияВыражения.ПолеТекстовогоДокумента;
		ПолеТекстовогоДокумента.УстановитьТекст(ТекДанные.Выражение);
		
		ФормаРедактированияВыражения.Открыть();
		//Если ФормаРедактированияВыражения.Открыть() = Истина Тогда
		//	ТекДанные.Выражение = ПолеТекстовогоДокумента.ПолучитьТекст();
		//КонецЕсли;
	Иначе
		ДоступныеТипы	= ТекДанные.ОписаниеТипов;
		СписокВыбораВладельца	= ПолучитьСписокВыбораСвязиПоВладельцу(ТекДанные.ИмяРеквизита);
		ФормаРедактированияСвязи = ПолучитьФорму(ИдентификаторОбработки()+".Форма.ФормаРедактированияСвязи", ,ЭтаФорма);
		ФормаРедактированияСвязи.ИспользуемыеТипы = ДоступныеТипы;
		ФормаРедактированияСвязи.ИскатьПо = ТекДанные.ИскатьПо;
		ФормаРедактированияСвязи.ИспользоватьВладельца = (СписокВыбораВладельца.Количество() > 0);
		ФормаРедактированияСвязи.СвязьПоВладельцу = ТекДанные.СвязьПоВладельцу;
		
		СписокВыбораИскатьПо = ПолучитьСписокИменПредставлений(ТекДанные.ОписаниеТипов);
		Сп = ФормаРедактированияСвязи.Элементы.ИскатьПо.СписокВыбора;
		Сп.Очистить();
		Для каждого ЭлСписка Из СписокВыбораИскатьПо Цикл
			Сп.Добавить(ЭлСписка.Значение, ЭлСписка.Представление);
		КонецЦикла;
		
		Сп = ФормаРедактированияСвязи.Элементы.СвязьПоВладельцу.СписокВыбора;
		Сп.Очистить();
		Для каждого ЭлСписка Из СписокВыбораВладельца Цикл
			Сп.Добавить(ЭлСписка.Значение, ЭлСписка.Представление);
		КонецЦикла;
		ФормаРедактированияСвязи.Открыть();
		//Если ФормаРедактированияСвязи.Открыть() = Истина Тогда
		//	ТекДанные.ИскатьПо = ФормаРедактированияСвязи.ИскатьПо;
		//	ТекДанные.СвязьПоВладельцу = ФормаРедактированияСвязи.СвязьПоВладельцу;
		//КонецЕсли;
	КонецЕсли;
	//Если ТекДанные.РежимЗагрузки = "Вычислять" Тогда
	//	ТекДанные.ПредставлениеДопУсловий = ТекДанные.Выражение;
	//Иначе
	//	ТекДанные.ПредставлениеДопУсловий = ?(ПустаяСтрока(ТекДанные.ИскатьПо), "", "Искать по "+ТекДанные.ИскатьПо)
	//			+?(ПустаяСтрока(ТекДанные.СвязьПоВладельцу), "", " по владельцу "+ТекДанные.СвязьПоВладельцу);
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитовПредставлениеДопУсловийОчистка(Элемент, СтандартнаяОбработка)
	ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов.ТекущиеДанные;
	ТекДанные.ПредставлениеДопУсловий = "";
	ТекДанные.ИскатьПо = "";
	ТекДанные.СвязьПоВладельцу = "";
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитовРежимЗагрузкиПриИзменении(Элемент)
	ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов.ТекущиеДанные;
	Если ТекДанные.РежимЗагрузки = "Вычислять" Тогда
		ТекДанные.ПредставлениеДопУсловий = ТекДанные.Выражение;
	Иначе
		ТекДанные.ПредставлениеДопУсловий = ?(ПустаяСтрока(ТекДанные.ИскатьПо), "", "Искать по "+ТекДанные.ИскатьПо)
				+?(ПустаяСтрока(ТекДанные.СвязьПоВладельцу), "", " по владельцу "+ТекДанные.СвязьПоВладельцу);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
	
		Если ВыбранноеЗначение.Источник = "ФормаРедактированияСобытий" И ВыбранноеЗначение.Результат = Истина Тогда
			Объект.ПередЗаписьюОбъекта		= ВыбранноеЗначение.ПередЗаписьюОбъекта;
			Объект.ПриЗаписиОбъекта			= ВыбранноеЗначение.ПриЗаписиОбъекта;
			Объект.ПослеДобавленияСтроки	= ВыбранноеЗначение.ПослеДобавленияСтроки;
		ИначеЕсли ВыбранноеЗначение.Источник = "ФормаРедактированияВыражения" И ВыбранноеЗначение.Результат = Истина Тогда
			ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов.ТекущиеДанные;
			ТекДанные.Выражение = ВыбранноеЗначение.Выражение;
			ТекДанные.ПредставлениеДопУсловий = ТекДанные.Выражение;
		ИначеЕсли ВыбранноеЗначение.Источник = "ФормаРедактированияСвязи" И ВыбранноеЗначение.Результат = Истина Тогда
			ТекДанные = Элементы.ТаблицаЗагружаемыхРеквизитов.ТекущиеДанные;
			ТекДанные.ИскатьПо = ВыбранноеЗначение.ИскатьПо;
			ТекДанные.СвязьПоВладельцу = ВыбранноеЗначение.СвязьПоВладельцу;
			ТекДанные.ПредставлениеДопУсловий = ?(ПустаяСтрока(ТекДанные.ИскатьПо), "", "Искать по "+ТекДанные.ИскатьПо)
				+?(ПустаяСтрока(ТекДанные.СвязьПоВладельцу), "", " по владельцу "+ТекДанные.СвязьПоВладельцу);
		// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
		// ++
		Иначе
			а = 0;
		//--
		КонецЕсли;
	
	КонецЕсли; 
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервереБезКонтекста
Функция ЭтоТоварыВКоробах(Склад)
	Если Не ЗначениеЗаполнено(Склад) Тогда
		Возврат Ложь;
	КонецЕсли;
	ТоварыВКоробах = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("ИдентификаторДляФормул",
		"гф_СкладыТоварыВКоробах");
	
	ТоварыВКоробахЗначение = УправлениеСвойствами.ЗначениеСвойства(Склад, ТоварыВКоробах);	
	
	Если ЗначениеЗаполнено(ТоварыВКоробахЗначение) И ТоварыВКоробахЗначение = Истина Тогда
		 Возврат Истина;
	Иначе
		 Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервере
Функция гф_ПолучитьДанныеПоУЛ(УпаковочныйЛист)
// Копия функции из Формы документа Перемещение товаров
	
	ДанныеПоУЛ = Новый Структура("Артикул, IDКороба, КоличествоПар");
	стрУЛ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УпаковочныйЛист,
	Новый Структура("IDКороба, КоличествоПар, Комплектация", "Код", "ВсегоМест", "гф_Комплектация"));
	ЗаполнитьЗначенияСвойств(ДанныеПоУЛ, стрУЛ);
	Комплектация = стрУЛ["Комплектация"];
	Если ЗначениеЗаполнено(Комплектация) Тогда
		ДанныеПоУЛ["Артикул"] = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Комплектация, "Владелец.Артикул");
	КонецЕсли;
	Возврат ДанныеПоУЛ;

КонецФункции

&НаСервереБезКонтекста
Функция РассчитатьЦенуКороба(ВариантКомплектации, ВидЦены, Период)
// Копия функции из Формы документа Заказ клиента
	Если Не ЗначениеЗаполнено(ВариантКомплектации) ИЛИ Не ЗначениеЗаполнено(ВидЦены) Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура КАК Номенклатура,
		|	СУММА(ВариантыКомплектацииНоменклатурыТовары.Количество) КАК Количество
		|ИЗ
		|	Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ВариантыКомплектацииНоменклатурыТовары
		|ГДЕ
		|	ВариантыКомплектацииНоменклатурыТовары.Ссылка = &ВариантКомплектации
		|
		|СГРУППИРОВАТЬ ПО
		|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура";
	Запрос.УстановитьПараметр("ВариантКомплектации", ВариантКомплектации);
	Результат = Запрос.Выполнить();
	ТЗВариантКомплектации = Результат.Выгрузить();
	Запрос.Текст = "ВЫБРАТЬ
		|	ЦеныНоменклатуры25СрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатуры25СрезПоследних.Цена КАК Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(&Период,
		|			Номенклатура В (&СписокНоменклатуры)
		|				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатуры25СрезПоследних";
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	Запрос.УстановитьПараметр("СписокНоменклатуры", ТЗВариантКомплектации.ВыгрузитьКолонку("Номенклатура"));
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ЦенаКороба = 0;
	Для Каждого СтрокаНоменклатуры Из ТЗВариантКомплектации Цикл
		СтруктураПоиска = Новый Структура("Номенклатура", СтрокаНоменклатуры.Номенклатура);
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(СтруктураПоиска) Тогда
			ЦенаКороба = ЦенаКороба + Выборка.Цена * СтрокаНоменклатуры.Количество;
		КонецЕсли;
	КонецЦикла;
	Возврат ЦенаКороба;
КонецФункции
	
&НаСервереБезКонтекста
Функция ЗаполнитьСтавкуНДС(ВариантКомплектации, СтруктураПараметровДействия)
// Копия функции из Формы документа Заказ клиента
	СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
	Если ЗначениеЗаполнено(ВариантКомплектации) Тогда
		Если ЗначениеЗаполнено(ВариантКомплектации.Владелец) Тогда
			// ++ 27.01.2023 Галфинд СадомцевСА Исправил заполнение Ставки НДС для Варианта комплектации с учетом показателя НалогооблажениеНДС
			//СтавкаНДС = ВариантКомплектации.Владелец.СтавкаНДС;
			Номенклатура = ВариантКомплектации.Владелец;
			НалогообложениеНДС = СтруктураПараметровДействия.НалогообложениеНДС;
			Дата = СтруктураПараметровДействия.Дата;
			Организация = СтруктураПараметровДействия.Организация;
			СтавкаНДС = УчетНДСУП.СтавкаНДСПоНоменклатуреИНалогообложению(Номенклатура, НалогообложениеНДС, Организация, Дата);
			// -- 27.01.2023 Галфинд СадомцевСА
		КонецЕсли;
	КонецЕсли;
	Возврат СтавкаНДС;
КонецФункции

&НаСервереБезКонтекста
Процедура ПересчитатьСуммуСНДС(ТД)
// Копия функции из Формы документа Заказ клиента
	ЗначениеСто = 100;
	Ставка = 0;
	Если ЗначениеЗаполнено(ТД.СтавкаНДС) Тогда
		Ставка = ТД.СтавкаНДС.Ставка;
	КонецЕсли;
	ТД.СуммаНДС = ТД.Сумма * (Ставка / ЗначениеСто);
	ТД.СуммаСНДС = ТД.Сумма + ТД.СуммаНДС;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗагрузитьТоварыПоУЛ(УпаковочныйЛист, Объект)
// Копия функции из Формы документа Перемещение товаров. Добавил параметр Объект
   	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УпаковочныйЛистТовары.Номенклатура КАК Номенклатура,
		|	УпаковочныйЛистТовары.Характеристика КАК Характеристика,
		// #wortmann {
		// Подбор осуществляется и по "Назначению"  
		// e1cib/data/Задача.ЗадачаИсполнителя?ref=811fbcee7bda45d711ed282b494b9fc4
		// Галфинд_Домнышева 2022/08/30
		|	УпаковочныйЛистТовары.Назначение КАК Назначение,
		// } #wortmann
		|	УпаковочныйЛистТовары.Количество КАК Количество
		|ИЗ
		|	Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
		|ГДЕ
		|	УпаковочныйЛистТовары.Ссылка = &УпаковочныйЛист";
	
	Запрос.УстановитьПараметр("УпаковочныйЛист", УпаковочныйЛист);
		
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл
		
		// #wortmann {
		// Подбор осуществляется и по "Назначению"  
		// e1cib/data/Задача.ЗадачаИсполнителя?ref=811fbcee7bda45d711ed282b494b9fc4
		// Галфинд_Домнышева 2022/08/30
		//СтруВыборки = Новый Структура("Номенклатура, Характеристика");
		СтруВыборки = Новый Структура("Номенклатура, Характеристика, Назначение");
		// } #wortmann
		
		ЗаполнитьЗначенияСвойств(СтруВыборки, Выборка);
		
		Если Объект.Товары.НайтиСтроки(СтруВыборки).Количество() = 0 Тогда
			СтрокаТоваров = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТоваров, Выборка);
			СтрокаТоваров.КоличествоУпаковок = Выборка.Количество;
			
			// #wortmann {
			// Галфинд Sakovich 2022/10/22
			СтрокаТоваров.Количество = Выборка.Количество;
			// } #wortman
			
		ИначеЕсли Объект.Товары.НайтиСтроки(СтруВыборки).Количество() > 0 Тогда	
			Объект.Товары.НайтиСтроки(СтруВыборки)[0].КоличествоУпаковок = 
										Объект.Товары.НайтиСтроки(СтруВыборки)[0].КоличествоУпаковок + Выборка.Количество;	
			// #wortmann {
			// Галфинд Sakovich 2022/10/22
			Объект.Товары.НайтиСтроки(СтруВыборки)[0].Количество = 
										Объект.Товары.НайтиСтроки(СтруВыборки)[0].Количество + Выборка.Количество;	
			// } #wortmann
			
		// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
		// ++
		Иначе
			а = 0;
		//--
		КонецЕсли;
	КонецЦикла;
	// #wortmann {
	// Добавлена запись НазначениеОтправителя (исходя из стандартной лигики документа)   
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=811fbcee7bda45d711ed282b494b9fc4
	// Галфинд_Домнышева 2022/08/30
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		Если Не Объект.ПеремещениеПоЗаказам Или СтрокаТовары.КодСтроки = 0 Тогда
			СтрокаТовары.НазначениеОтправителя = СтрокаТовары.Назначение;
		КонецЕсли;
	КонецЦикла;
    // } #wortmann
	
	//ПараметрыЗаполненияРеквизитов = Новый Структура;	
	//ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
	//										Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	//// #wortmann {
	//// Добавлено заполнение признаков для отображения Назначения (исходя из стандартной лигики документа)   
	//// e1cib/data/Задача.ЗадачаИсполнителя?ref=811fbcee7bda45d711ed282b494b9fc4
	//// Галфинд_Домнышева 2022/08/30										
	//ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакАртикул",
	//										Новый Структура("Номенклатура", "Артикул"));
	//ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипНоменклатуры",
	//										Новый Структура("Номенклатура", "ТипНоменклатуры"));																				
	//// } #wortmann										
	//НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, ПараметрыЗаполненияРеквизитов);
   
КонецПроцедуры// } #wortmann 

// ++ Галфинд СадомцевСА 04.08.2023 Исправил "ошибку" СонарКуба

&НаСервере
Процедура гф_ДополнитьОписаниеТипов(ОписаниеТиповРеквизита, Тип, ОписаниеТипов)
	МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
	Если Не МетаданныеТипа = Неопределено Тогда
		ОписаниеТипа = МетаданныеТипа.ПолноеИмя();
	ИначеЕсли Тип = Тип("Строка") Тогда
		
		ОписаниеТипа = "Строка";
		Если ОписаниеТиповРеквизита.КвалификаторыСтроки.Длина Тогда
			ОписаниеТипа = ОписаниеТипа + ", " + ОписаниеТиповРеквизита.КвалификаторыСтроки.Длина;
			Если ОписаниеТиповРеквизита.КвалификаторыСтроки.ДопустимаяДлина = ДопустимаяДлина.Фиксированная Тогда
				ОписаниеТипа = ОписаниеТипа + ", " + ДопустимаяДлина.Фиксированная;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Тип = Тип("Число") Тогда
		ОписаниеТипа = "Число"
		+ ", "+ ОписаниеТиповРеквизита.КвалификаторыЧисла.Разрядность
		+ ", "+ ОписаниеТиповРеквизита.КвалификаторыЧисла.РазрядностьДробнойЧасти
		+ ?(ОписаниеТиповРеквизита.КвалификаторыЧисла.ДопустимыйЗнак = ДопустимыйЗнак.Неотрицательный,", Неотрицательный","");
	ИначеЕсли Тип = Тип("Дата") Тогда
		ОписаниеТипа = "" + ОписаниеТиповРеквизита.КвалификаторыДаты.ЧастиДаты;
	ИначеЕсли Тип = Тип("Булево") Тогда
		ОписаниеТипа = "Булево";
	Иначе
		//Продолжить;
		a = 1;
	КонецЕсли;
	
	ОписаниеТипов = ?(ПустаяСтрока(ОписаниеТипов),"",ОписаниеТипов +Символы.ПС) + ОписаниеТипа;
КонецПроцедуры

&НаСервере
Функция ОпределитьШиринуКолонки(ЗагружаемыйРеквизит)
	Если ЗагружаемыйРеквизит.ШиринаКолонки = 0 Тогда
		
		ШиринаКолонки = 40;
		Если ЗагружаемыйРеквизит.ОписаниеТипов.Типы().Количество() = 1 Тогда
			ПервыйТип = ЗагружаемыйРеквизит.ОписаниеТипов.Типы()[0];
			Если ПервыйТип = Тип("Строка") Тогда
				Если ЗагружаемыйРеквизит.ОписаниеТипов.КвалификаторыСтроки.Длина = 0 Тогда
					ШиринаКолонки = 80;
				Иначе
					ШиринаКолонки = Мин(Макс(ЗагружаемыйРеквизит.ОписаниеТипов.КвалификаторыСтроки.Длина,10),80);
				КонецЕсли;
			ИначеЕсли ПервыйТип = Тип("Число") Тогда
				ШиринаКолонки = Макс(ЗагружаемыйРеквизит.ОписаниеТипов.КвалификаторыЧисла.Разрядность,10);
			ИначеЕсли ПервыйТип = Тип("Булево") Тогда
				ШиринаКолонки = 10;
			// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
			// ++
			Иначе
				а = 0;
			//--
			КонецЕсли;
		КонецЕсли;
	Иначе
		ШиринаКолонки = ЗагружаемыйРеквизит.ШиринаКолонки;
	КонецЕсли;
	
	Возврат ШиринаКолонки;
КонецФункции

&НаСервере
Процедура ПодготовитьИсточникОбъектИсточника(Источник, ОбъектИсточника)
	Если Объект.РежимЗагрузки = 0 Тогда
		Источник = Справочники[Объект.ТипОбъектаСправочника].ПустаяСсылка();
	ИначеЕсли Объект.РежимЗагрузки = 1 Тогда
		ОбъектИсточника = Объект.СсылкаИсточника.ПолучитьОбъект();
		Источник = ОбъектИсточника[Объект.ТабличнаяЧастьИсточника];
	// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
	// ++
	Иначе
		а = 0;
	//--
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПодготовитьСтрокиПоискаЗапросИзмеренияРегистраКолонки(СтрокиПоиска, Запрос, Источник, ИзмеренияРегистра,
	Колонки, МетаданныеИсточника)
	Если Объект.РежимЗагрузки = 0 Тогда
		
		СтрокиПоиска = ТаблицаЗагружаемыхРеквизитов.НайтиСтроки(Новый Структура("ПолеПоиска,Пометка",Истина,Истина));
		Если Не СтрокиПоиска.Количество() = 0 Тогда
			
			ТекстЗапроса =
			"Выбрать Первые 1
			|Справочник.Ссылка КАК Ссылка
			|Из Справочник."+МетаданныеИсточника.Имя+" КАК Справочник
			|Где";
			
			Для каждого СтрокаПоиска Из СтрокиПоиска Цикл
				ТекстЗапроса = ТекстЗапроса +"
				|Справочник."+СтрокаПоиска.ИмяРеквизита+" = &" + СтрокаПоиска.ИмяРеквизита + "
				|И";
				
			КонецЦикла;
			
			ТекстЗапроса = Лев(ТекстЗапроса,СтрДлина(ТекстЗапроса) - 2);
			Запрос = Новый Запрос (ТекстЗапроса);
		КонецЕсли;
	ИначеЕсли Объект.РежимЗагрузки = 1 Тогда
		
		Источник.Очистить();
	ИначеЕсли Объект.РежимЗагрузки = 2 Тогда
		
		ИзмеренияРегистра = Новый Структура;
		Для каждого Колонка Из Колонки Цикл
			Если Колонка.Значение.МожетБытьПолемПоиска Тогда
				ИзмеренияРегистра.Вставить(Колонка.Ключ,Колонка.Значение);
			КонецЕсли;
		КонецЦикла;
	// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
	// ++
	Иначе
		а = 0;
	//--
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПодготовитьЗагружаемыйОбъектОбъектНайден(ТекущаяСтрока, НомерТекущейСтроки, ЗагружаемыйОбъект, ОбъектНайден,
		СтрокиПоиска, Запрос, Источник, ИзмеренияРегистра, МетаданныеИсточника)
	Если Объект.РежимЗагрузки =0 Тогда
		
		ЗагружаемыйОбъект = Неопределено;
		// Галфинд СадомцевСА 07.08.2023 Исправил "ошибки" СонарКуба
		ПодготовитьЗагружаемыйОбъектОбъектНайденРежЗаг0(ТекущаяСтрока, НомерТекущейСтроки, ЗагружаемыйОбъект,
			СтрокиПоиска, Запрос);
		//Если Не Запрос = Неопределено Тогда
		//	СтрокаОшибок = "";
		//	Для каждого СтрокаПоиска Из СтрокиПоиска Цикл
		//		
		//		ЗначениеРеквизита = Неопределено;
		//		
		//		ТекущаяСтрока.Свойство(СтрокаПоиска.ИмяРеквизита,ЗначениеРеквизита);
		//		Если ПустаяСтрока(ЗначениеРеквизита) Тогда
		//			СтрокаОшибок = ?(ПустаяСтрока(СтрокаОшибок),"",СтрокаОшибок + ", ") + СтрокаПоиска.ПредставлениеРеквизита;
		//		Иначе
		//			Запрос.УстановитьПараметр(СтрокаПоиска.ИмяРеквизита,ТекущаяСтрока[СтрокаПоиска.ИмяРеквизита]);
		//		КонецЕсли;
		//		
		//	КонецЦикла;
		//	
		//	Если Не ПустаяСтрока(СтрокаОшибок) Тогда
		//		Сообщить("Строка " + НомерТекущейСтроки + " не может быть записана.Не указано значение ключевых реквизитов: "
		//			+ СтрокаОшибок,СтатусСообщения.Важное);
		//		//Продолжить;
		//		Возврат;
		//	КонецЕсли;
		//	
		//	Выборка = Запрос.Выполнить().Выбрать();
		//	Если Выборка.Следующий() Тогда
		//		ЗагружаемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
		//	КонецЕсли;
		//	
		//КонецЕсли;
		
		ОбъектНайден = Не ЗагружаемыйОбъект = Неопределено;
		Если Не ОбъектНайден Тогда
			Если Объект.НеСоздаватьНовыхЭлементов Тогда
				//Продолжить;
				Возврат;
			Иначе
				ЗагружаемыйОбъект = Справочники[МетаданныеИсточника.Имя].СоздатьЭлемент();
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Объект.РежимЗагрузки = 1 Тогда
		ЗагружаемыйОбъект = Источник.Добавить();
		ОбъектНайден = Ложь;
	ИначеЕсли Объект.РежимЗагрузки = 2 Тогда
		// Галфинд СадомцевСА 07.08.2023 Исправил "ошибки" СонарКуба
		ПодготовитьЗагружаемыйОбъектОбъектНайденРежЗаг2(ТекущаяСтрока, ЗагружаемыйОбъект, ОбъектНайден,
			ИзмеренияРегистра, МетаданныеИсточника);
		//ЗагружаемыйОбъект = РегистрыСведений[МетаданныеИсточника.Имя].СоздатьМенеджерЗаписи();
		//Для каждого КлючИЗначение Из ТекущаяСтрока Цикл
		//	
		//	Если ИзмеренияРегистра.Свойство(КлючИЗначение.Ключ) Тогда
		//		ЗагружаемыйОбъект[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		//	КонецЕсли;
		//	
		//КонецЦикла;
		//
		//Если Не Объект.ЗамещатьСуществующиеЗаписи Тогда
		//	ЗагружаемыйОбъект.Прочитать();
		//	ОбъектНайден = ЗагружаемыйОбъект.Выбран();
		//Иначе
		//	ОбъектНайден = Ложь;
		//КонецЕсли;
		
	// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
	// ++
	Иначе
		а = 0;
	//--
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗагружаемыйОбъектУстановитьЗначенияРеквизитов(ТекущаяСтрока, ОбъектНайден, Колонки, ЗагружаемыйОбъект, Отказ)
	Для каждого КлючИЗначение Из ТекущаяСтрока Цикл
		
		Если Не ОбъектНайден или Колонки[КлючИЗначение.Ключ].Пометка  Тогда
			Попытка
				ЗагружаемыйОбъект[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
			Исключение
				мСообщитьОбОшибке("Ошибка при установки значения реквизита """ + КлючИЗначение.Ключ + "" + ОписаниеОшибки());
				Отказ = Истина;
				Прервать;
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗагружаемыйОбъектЗаписать(ОбъектИсточника, ЗагружаемыйОбъект, ОбъектНайден, ТекстыЯчеек, Загружено,
	ЗаписыватьОбъект, НомерТекущейСтроки, Отказ)
	Если Объект.РежимЗагрузки = 0 Тогда
		// Галфинд СадомцевСА 07.08.2023 Исправил "ошибки" СонарКуба
		ЗагружаемыйОбъектЗаписатьРежЗаг0(ЗагружаемыйОбъект, ОбъектНайден, ТекстыЯчеек, Загружено, Отказ);
		//Если Не Отказ и ЗаписатьОбъект(ЗагружаемыйОбъект, ТекстыЯчеек, Объект.ПередЗаписьюОбъекта, Объект.ПриЗаписиОбъекта) Тогда
		//	Сообщить(?(ОбъектНайден,"Изменен","Загружен") + " элемент справочника: " + ЗагружаемыйОбъект.Ссылка, СтатусСообщения.Информация);
		//	Загружено = Загружено + 1;
		//Иначе
		//	Сообщить("Объект не " + ?(ОбъектНайден,"изменен","загружен") + ". Элемент справочника: " + ЗагружаемыйОбъект + ".", СтатусСообщения.Важное);
		//КонецЕсли;
	ИначеЕсли Объект.РежимЗагрузки = 1 Тогда
		
		// Галфинд СадомцевСА 07.08.2023 Исправил "ошибки" СонарКуба
		ЗагружаемыйОбъектЗаписатьРежЗаг1(ОбъектИсточника, ЗагружаемыйОбъект, ТекстыЯчеек, Загружено,
			ЗаписыватьОбъект, Отказ);
		//Если Не ОбработатьСобытиеПослеДобавленияСтроки(ОбъектИсточника, ЗагружаемыйОбъект, ТекстыЯчеек, Объект.ПослеДобавленияСтроки) Тогда
		//	Отказ = Истина;
		//КонецЕсли;
		//
		//Если Не Отказ Тогда
		//	Сообщить("Добавлена строка: " + (Загружено + 1));
		//Иначе
		//	Сообщить("При добавлении строки " + (Загружено + 1) + " возникли ошибки. ");
		//	ЗаписыватьОбъект = Ложь;
		//КонецЕсли;
		
		Загружено = Загружено + 1;
		
	ИначеЕсли Объект.РежимЗагрузки = 2 Тогда
		// Галфинд СадомцевСА 07.08.2023 Исправил "ошибки" СонарКуба
		ЗагружаемыйОбъектЗаписатьРежЗаг2(ЗагружаемыйОбъект, ОбъектНайден, ТекстыЯчеек, Загружено,
			НомерТекущейСтроки, Отказ);
		//Если Не Отказ и ЗаписатьОбъект(ЗагружаемыйОбъект, ТекстыЯчеек, Объект.ПередЗаписьюОбъекта, Объект.ПриЗаписиОбъекта) Тогда
		//	Сообщить(?(ОбъектНайден,"Изменена","Добавлена") + " запись № " + НомерТекущейСтроки + ".");
		//	Загружено = Загружено + 1;
		//Иначе
		//	Сообщить("Запись не " + ?(ОбъектНайден,"изменена","загружена") + ". № записи: " + НомерТекущейСтроки + ".", СтатусСообщения.Важное);
		//КонецЕсли;
	// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
	// ++
	Иначе
		а = 0;
	//--
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПеремещениеТоваров(Источник, ОбъектИсточника)
	Если ТипЗнч(Объект.СсылкаИсточника) <> Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(Источник) <> Тип("ДокументТабличнаяЧасть.ПеремещениеТоваров.гф_ТоварыВКоробах") Тогда
		Возврат;
	КонецЕсли;
		
	ОбъектИсточника.Товары.Очистить();
	Для Каждого СтрокаТЧ Из ОбъектИсточника.гф_ТоварыВКоробах Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.УпаковочныйЛист) Тогда
			Продолжить;
		КонецЕсли;
		ДанныеПоУЛ = гф_ПолучитьДанныеПоУЛ(СтрокаТЧ["УпаковочныйЛист"]);
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Артикул) Тогда
			СтрокаТЧ.Артикул = ДанныеПоУЛ.Артикул;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТЧ.IDКороба) Тогда
			СтрокаТЧ.IDКороба = ДанныеПоУЛ.IDКороба;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТЧ.КоличествоПар) Тогда
			СтрокаТЧ.КоличествоПар = ДанныеПоУЛ.КоличествоПар;
		КонецЕсли;
		ЗагрузитьТоварыПоУЛ(СтрокаТЧ["УпаковочныйЛист"], ОбъектИсточника);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаказКлиента(Источник, ОбъектИсточника)
	Если ТипЗнч(Объект.СсылкаИсточника) <> Тип("ДокументСсылка.ЗаказКлиента") Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(Источник) <> Тип("ДокументТабличнаяЧасть.ЗаказКлиента.гф_ТоварыВКоробах") Тогда
		Возврат;
	КонецЕсли;
	СтруктураДействий = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Объект.СсылкаИсточника, Истина);
	Для Каждого СтрокаТЧ Из ОбъектИсточника.гф_ТоварыВКоробах Цикл
		СтрокаТЧ.ВидЦены = ОбъектИсточника.гф_ВидЦены;
		СтрокаТЧ.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению;
		Если ЗначениеЗаполнено(СтрокаТЧ.ВариантКомплектации) Тогда
			Если Не ЗначениеЗаполнено(СтрокаТЧ.ЦенаКороба) Тогда
				СтрокаТЧ.ЦенаКороба = РассчитатьЦенуКороба(СтрокаТЧ.ВариантКомплектации, СтрокаТЧ.ВидЦены, ОбъектИсточника.Дата);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаТЧ.СтавкаНДС) Тогда
				// ++ 27.01.2023 Галфинд СадомцевСА Исправил заполнение Ставки НДС для Варианта комплектации с учетом показателя НалогооблажениеНДС
				//СтрокаТЧ.СтавкаНДС = ЗаполнитьСтавкуНДС(СтрокаТЧ.ВариантКомплектации);
				СтрокаТЧ.СтавкаНДС = ЗаполнитьСтавкуНДС(СтрокаТЧ.ВариантКомплектации, СтруктураДействий);
			КонецЕсли;
		КонецЕсли;
		СтрокаТЧ.ЦенаКоробаСоСкидкой = СтрокаТЧ.ЦенаКороба * (1 - СтрокаТЧ.Скидка / 100);
		СтрокаТЧ.Сумма = СтрокаТЧ.Количество * СтрокаТЧ.ЦенаКоробаСоСкидкой;
		ПересчитатьСуммуСНДС(СтрокаТЧ);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПодготовитьРезультат(Область, Колонка, ТекущиеДанные, ТекстыЯчеек, Представление)
	// Галфинд СадомцевСА 07.08.2023 Исправил "ошибки" СонарКуба: добавил Примечание = "";
	Примечание = "";
	Если Колонка.РежимЗагрузки = "Вычислять" Тогда
		
		Вычисление = ВычислитьЗначениеЯчейки(Колонка.Выражение,ТекущиеДанные, Представление, ТекстыЯчеек,
			Колонка.ЗначениеПоУмолчанию);
		// Галфинд СадомцевСА 07.08.2023 Исправил "ошибки" СонарКуба
		Результат = ПодготовитьРезультатРедЗагВычисление(Вычисление);
		//Если Не ПустаяСтрока(Вычисление.ОписаниеОшибки) Тогда
		//	Результат   = Неопределено;
		//	Примечание = ""+ Вычисление.ОписаниеОшибки;
		//Иначе
		//	Результат = Вычисление.Результат;
		//КонецЕсли;
		
	ИначеЕсли ПустаяСтрока(Представление) Тогда
		Результат = Неопределено;
	Иначе
		НайденныеЗначения = ПолучитьВозможныеЗначения(Колонка, Представление, Примечание, ТекущиеДанные);
		
		Если НайденныеЗначения.Количество() = 0 Тогда
			
			Примечание = "Не найден"+?(Примечание = "","", Символы.ПС+Примечание);
			Результат = Неопределено;
			
		ИначеЕсли НайденныеЗначения.Количество() = 1 Тогда
			
			Результат = НайденныеЗначения[0];
			
		Иначе
			
			Примечание = "Не однозначное представление. Вариантов: "+НайденныеЗначения.Количество()+?(Примечание = "","", Символы.ПС+Примечание);
			
			// Галфинд СадомцевСА 07.08.2023 Исправил "ошибки" СонарКуба
			НайденноеЗначение = ЗаполнитьНайденноеЗначение(Область, Колонка, НайденныеЗначения);
			//Нашли = Ложь;
			//НашлиЗначениеПоУмолчанию = Ложь;
			//Для каждого НайденноеЗначение Из НайденныеЗначения Цикл
			//	Если НайденноеЗначение = Область.Расшифровка Тогда
			//		Нашли = Истина;
			//		Прервать;
			//	КонецЕсли;
			//	Если НайденноеЗначение = Колонка.ЗначениеПоУмолчанию Тогда
			//		НашлиЗначениеПоУмолчанию = Истина;
			//	КонецЕсли;
			//КонецЦикла;
			//
			//Если Не Нашли Тогда
			//	
			//	Если НашлиЗначениеПоУмолчанию Тогда
			//		НайденноеЗначение = Колонка.ЗначениеПоУмолчанию;
			//	Иначе
			//		НайденноеЗначение = НайденныеЗначения[0];
			//	КонецЕсли;
			//КонецЕсли;
			Результат = НайденноеЗначение;
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ОбработатьТипРеквизита(ТипРеквизита, Колонка, Представление, Примечание, ТекущиеДанные, НайденныеЗначения, ПримитивныеТипы)
	Если ТипРеквизита = ПримитивныеТипы.Число Или ТипРеквизита = ПримитивныеТипы.Булево Тогда
		НайденныеЗначения.Добавить(мПривестиКЧислу(Представление, Колонка.ОписаниеТипов, Примечание));
	ИначеЕсли ТипРеквизита = ПримитивныеТипы.Строка или ТипРеквизита = ПримитивныеТипы.Дата Тогда
		НайденныеЗначения.Добавить(мПривестиКДате(Представление, Колонка.ОписаниеТипов, Примечание));
		
	Иначе
		
		МетаданныеТипа = Метаданные.НайтиПоТипу(ТипРеквизита);
		
		Если Перечисления.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда
			
			//Это Перечисление
			
			// Галфинд СадомцевСА 07.08.2023 Исправил "ошибки" СонарКуба
			ОбработатьТипРеквизитаПеречисление(ТипРеквизита, Представление, НайденныеЗначения);
			//Для каждого Перечисление Из ПолучитьМенеджераПоТипу(ТипРеквизита) Цикл
			//	Если Строка(Перечисление) = Представление Тогда
			//		НайденныеЗначения.Добавить(Перечисление);
			//	КонецЕсли;
			//КонецЦикла;
			
		ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда
			
			//Это документ
			
			// Галфинд СадомцевСА 07.08.2023 Исправил "ошибки" СонарКуба
			ОбработатьТипРеквизитаДокумент(ТипРеквизита, Колонка, Представление, НайденныеЗначения, МетаданныеТипа);
			//Менеджер = ПолучитьМенеджераПоТипу(ТипРеквизита);
			//Если Колонка.ИскатьПо = "Номер" Тогда
			//	//НайденноеЗначение = Менеджер.НайтиПоКоду(Представление);
			//ИначеЕсли Колонка.ИскатьПо = "Дата" Тогда
			//	//НайденноеЗначение = Менеджер.Найти
			//	// ++ Галфинд СадомцевСА 23.01.2023 Реализовал поиск Упаковочного листа по коду
			//	//e1cib/data/Задача.ЗадачаИсполнителя?ref=8129bcee7bda45d711ed999bd652afbf
			//ИначеЕсли Колонка.ИскатьПо = "Код" Тогда
			//	НайденноеЗначение = Менеджер.НайтиПоРеквизиту("Код", Представление);
			//	Если Не НайденноеЗначение.Пустая() Тогда
			//		НайденныеЗначения.Добавить(НайденноеЗначение);
			//	КонецЕсли;
			//	// --
			//Иначе
			//	
			//	ДлиннаСинонима = СтрДлина(""+МетаданныеТипа);
			//	
			//	Если Лев(Представление, ДлиннаСинонима) = ""+МетаданныеТипа Тогда
			//		НомерИДата = СокрЛП(Сред(Представление, ДлиннаСинонима+1));
			//		ПозицияОт = Найти(НомерИДата, " от ");
			//		Если Не ПозицияОт = 0 Тогда
			//			НомерДок = Лев(НомерИДата, ПозицияОт-1);
			//			Попытка
			//				ДатаДок  = Дата(Сред(НомерИДата, ПозицияОт+4));
			//			Исключение
			//				ДатаДок = Неопределено;
			//			КонецПопытки;
			//			Если Не ДатаДок = Неопределено Тогда
			//				НайденноеЗначение = Менеджер.НайтиПоНомеру(НомерДок, ДатаДок);
			//				Если Не НайденноеЗначение.Пустая() Тогда
			//					НайденныеЗначения.Добавить(НайденноеЗначение);
			//				КонецЕсли;
			//			КонецЕсли;
			//		КонецЕсли;
			//	КонецЕсли;
			//	
			//КонецЕсли;
			
		ИначеЕсли Не МетаданныеТипа = Неопределено Тогда
			
			// Галфинд СадомцевСА 07.08.2023 Исправил "ошибки" СонарКуба
			ОбработатьТипРеквизитаМетаданныеТипа(ТипРеквизита, Колонка, Представление, ТекущиеДанные, НайденныеЗначения, МетаданныеТипа);
			//ИскатьПо = Колонка.ИскатьПо;
			//ЭтоСправочник = Справочники.ТипВсеСсылки().СодержитТип(ТипРеквизита);
			//Если ПустаяСтрока(ИскатьПо) Тогда
			//	СтрокаОсновногоПредставления = Строка(МетаданныеТипа.ОсновноеПредставление);
			//	
			//	Если СтрокаОсновногоПредставления = "ВВидеКода" Тогда
			//		ИскатьПо = "Код";
			//	ИначеЕсли СтрокаОсновногоПредставления = "ВВидеНаименования" Тогда
			//		ИскатьПо = "Наименование";
			//	ИначеЕсли СтрокаОсновногоПредставления = "ВВидеНомера" Тогда
			//		ИскатьПо = "Номер";
			//	КонецЕсли;
			//КонецЕсли;
			//
			//Запрос = Новый Запрос;
			//Запрос.Текст =
			//"ВЫБРАТЬ
			//|	_Таблица.Ссылка
			//|ИЗ
			//|	" + МетаданныеТипа.ПолноеИмя() + " КАК _Таблица
			//|ГДЕ";
			//
			//Запрос.Текст = Запрос.Текст + "
			//|	_Таблица." + ИскатьПо + " = &Представление";
			//Запрос.УстановитьПараметр("Представление",Представление);
			//
			//Если ЭтоСправочник и Не ПустаяСтрока(Колонка.СвязьПоВладельцу) и МетаданныеТипа.Владельцы.Количество() Тогда
			//	
			//	СвязьПоВладельцу = Неопределено;
			//	Если ТипЗНЧ(Колонка.СвязьПоВладельцу) = Тип("Строка") Тогда
			//		ТекущиеДанные.Свойство(Колонка.СвязьПоВладельцу,СвязьПоВладельцу);
			//	Иначе
			//		СвязьПоВладельцу = Колонка.СвязьПоВладельцу;
			//	КонецЕсли;
			//	
			//	Если Не СвязьПоВладельцу = Неопределено Тогда
			//		Запрос.Текст = Запрос.Текст + "
			//		|	И _Таблица.Владелец = &СвязьПоВладельцу";
			//		Запрос.УстановитьПараметр("СвязьПоВладельцу",СвязьПоВладельцу);
			//	КонецЕсли;
			//	
			//КонецЕсли;
			//
			//Выборка =  Запрос.Выполнить().Выбрать();
			//
			//Пока Выборка.Следующий() Цикл
			//	НайденныеЗначения.Добавить(Выборка.Ссылка);
			//КонецЦикла;
		Иначе
			Примечание = "Не описан способ поиска";
			Примечание = "Для Колонки не определен тип значения";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработатьТипКолонки(ТипКолонки, ЕстьТипСамогоОбъекта, СписокВыбора, ТипыВладельцев, ОписаниеТиповСправочника, ТаблицаКолонок)
	Если НЕ Справочники.ТипВсеСсылки().СодержитТип(ТипКолонки) Тогда
		Возврат;
	КонецЕсли;
	Для каждого Владелец Из Метаданные.НайтиПоТипу(ТипКолонки).Владельцы Цикл
		ТипВладельца   = Тип(СтрЗаменить(Владелец.ПолноеИмя(), ".", "Ссылка."));
		Если ТипыВладельцев[ТипВладельца] = Неопределено Тогда
			
			Если ТипВладельца = ОписаниеТиповСправочника Тогда
				
				ЕстьТипСамогоОбъекта = Истина;
				
			КонецЕсли;
			
			ТипыВладельцев.Вставить(Владелец.ПолноеИмя(), Владелец.ПолноеИмя());
			Для каждого КолонкаСвязиПоВладельцу Из ТаблицаКолонок Цикл
				Если КолонкаСвязиПоВладельцу.ОписаниеТипов.Типы()[0] = ТипВладельца И СписокВыбора.НайтиПоЗначению(КолонкаСвязиПоВладельцу.ИмяРеквизита) = Неопределено Тогда
					// Возможно надо будет по всем типам проходить
					СписокВыбора.Добавить(КолонкаСвязиПоВладельцу.ИмяРеквизита,КолонкаСвязиПоВладельцу.ИмяРеквизита);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// -- Галфинд СадомцевСА 04.08.2023 Исправил "ошибку" СонарКуба

// ++ Галфинд СадомцевСА 07.08.2023 Исправил "ошибки" СонарКуба

&НаСервере
Процедура ПривестиКДате_ПустаяДатаВремя(Результат, МассивЧастей, Примечание)
	Попытка
		Если МассивЧастей.Количество() = 3 Тогда
			Результат = Дата(1,1,1, МассивЧастей[0],МассивЧастей[1],МассивЧастей[2]);
		ИначеЕсли МассивЧастей.Количество() = 6 Тогда
			Результат = Дата(1,1,1, МассивЧастей[3],МассивЧастей[4],МассивЧастей[5]);
		// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
		// ++
		Иначе
			а = 0;
		//--
		КонецЕсли;
	Исключение
		Примечание = "Неправильный формат даты";
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ПривестиКДате_ДатаВремя(Результат, МассивЧастей, Примечание, ТипРеквизита)
	Попытка
		Если МассивЧастей.Количество() = 3 или ТипРеквизита.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Дата Тогда
			Результат = Дата(МассивЧастей[2],МассивЧастей[1],МассивЧастей[0]);
		Иначе
			Результат = Дата(МассивЧастей[2],МассивЧастей[1],МассивЧастей[0],МассивЧастей[3],МассивЧастей[4],МассивЧастей[5]);
		КонецЕсли;
	Исключение
		Примечание = "Неправильный формат даты";
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРезультатЗначениемПоУмолчанию(Результат, Колонка)
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Колонка.ЗначениеПоУмолчанию;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СообщитьПримечаниеКоличествоОшибок(Примечание, НомерСтроки, Колонка, КоличествоОшибок)
	Если Не ПустаяСтрока(Примечание) Тогда
		Сообщить("Строка ["+НомерСтроки+"]("+Колонка.ПредставлениеРеквизита+"): "+ Примечание);
		КоличествоОшибок = КоличествоОшибок + 1;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СвязьПоТипуСтрока(СвязьПоТипу, Колонка, ТекущиеДанные)
	Если ТипЗНЧ(Колонка.СвязьПоТипу) = Тип("Строка") Тогда
		ТекущиеДанные.Свойство(Колонка.СвязьПоТипу,СвязьПоТипу);
	Иначе
		СвязьПоТипу = Колонка.СвязьПоТипу;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СписокВыборкаСправочникСчетВидХарактеристик(СписокВыбора, МетаданныеТипа, ЭтоСправочник, ЭтоСчет)
	ЕстьКод = МетаданныеТипа.ДлинаКода > 0;
	ЕстьИмя = МетаданныеТипа.ДлинаНаименования > 0;
	
	// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба: заменил 1 оператор 2-мя операторами
	//ВидОсновногоПредставление = ?(ЭтоСправочник, Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСправочника,
	//?(ЭтоСчет,Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСчета,Метаданные.СвойстваОбъектов.ОсновноеПредставлениеВидаХарактеристики));
	ВидОсновногоПредставлениеСчетПВХ = ?(ЭтоСчет,Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСчета,Метаданные.СвойстваОбъектов.ОсновноеПредставлениеВидаХарактеристики);
	ВидОсновногоПредставление = ?(ЭтоСправочник, Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСправочника,ВидОсновногоПредставлениеСчетПВХ);
	
	Если МетаданныеТипа.ОсновноеПредставление = ВидОсновногоПредставление.ВВидеКода Тогда
		
		// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
		СписокВыбораДобавитьКодНаименование(СписокВыбора, ЕстьКод, ЕстьИмя);
		//Если ЕстьКод Тогда
		//	СписокВыбора.Добавить("Код", "Код");
		//КонецЕсли;
		//
		//Если ЕстьИмя Тогда
		//	СписокВыбора.Добавить("Наименование", "Наименование");
		//КонецЕсли;
		
	Иначе
		
		// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
		СписокВыбораДобавитьНаименованиеКод(СписокВыбора, ЕстьКод, ЕстьИмя);
		//Если ЕстьИмя Тогда
		//	СписокВыбора.Добавить("Наименование", "Наименование");
		//КонецЕсли;
		//
		//Если ЕстьКод Тогда
		//	СписокВыбора.Добавить("Код", "Код");
		//КонецЕсли;
		
	КонецЕсли;
	
	Для каждого Реквизит Из МетаданныеТипа.Реквизиты Цикл
		
		Если Не Реквизит.Индексирование = Метаданные.СвойстваОбъектов.Индексирование.НеИндексировать
			И Реквизит.Тип.Типы().Количество() = 1 и Реквизит.Тип.Типы()[0] = Тип ("Строка")
			Тогда
			
			СписокВыбора.Добавить(Реквизит.Имя, Реквизит.Представление());
			
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ТекущаяСтрокаПоВерсииОбработки(ВерсияОбработки)
	Если Не ВерсияОбработки = "1.2" Тогда
		ВерсияОбработки = "1.1";
		ТекущаяСтрока = 9; //Строка с которой начинается таблица реквизитов
	Иначе
		ТекущаяСтрока = 11; //Строка с которой начинается таблица реквизитов
	КонецЕсли;
	Возврат ТекущаяСтрока;
КонецФункции

&НаСервере
Процедура ЗаполнитьСтруктуруУмолчаний(СтруктураУмолчаний, ТекущаяСтрокаОбласти, ИмяРеквизита, Настройки)
	Пока Не ПустаяСтрока(ИмяРеквизита) Цикл
		СтруктураУмолчанияРеквизита = Новый Структура;
		СтруктураУмолчанияРеквизита.Вставить("ИмяРеквизита",ИмяРеквизита);
		СтруктураУмолчанияРеквизита.Вставить("Пометка",Не ПустаяСтрока(Настройки.Область(ТекущаяСтрокаОбласти + "C1").Текст));
		СтруктураУмолчанияРеквизита.Вставить("ПолеПоиска",Не ПустаяСтрока(Настройки.Область(ТекущаяСтрокаОбласти + "C3").Текст));
		
		Типы = Новый Массив;
		ОписаниеТиповСтрокой = Настройки.Область(ТекущаяСтрокаОбласти + "C4").Текст;
		// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
		кс = Неопределено; кч = Неопределено; кд = Неопределено;
		ЗаполнитьТипы(Типы, ОписаниеТиповСтрокой, кс, кч, кд);
		//Для к = 1 По СтрЧислоСтрок(ОписаниеТиповСтрокой)  Цикл
		//	
		//	кс = Неопределено;кч = Неопределено;кд = Неопределено;
		//	МассивЧастейТипа = мРазложитьСтрокуВМассивПодстрок(НРег(СокрЛП(СтрПолучитьСтроку(ОписаниеТиповСтрокой,к ))), ",");
		//	Если МассивЧастейТипа.Количество() = 0 Тогда
		//		Продолжить;
		//	ИначеЕсли Найти(МассивЧастейТипа[0],".") Тогда
		//		Тип = Тип(СтрЗаменить(МассивЧастейТипа[0],".","Ссылка."));
		//	ИначеЕсли МассивЧастейТипа[0] = "строка" Тогда
		//		Тип = Тип("Строка");
		//		Если МассивЧастейТипа.Количество() = 2 Тогда
		//			кс = Новый КвалификаторыСтроки(мПривестиКЧислу(МассивЧастейТипа[1]),ДопустимаяДлина.Переменная);
		//		ИначеЕсли МассивЧастейТипа.Количество() = 3 Тогда
		//			кс = Новый КвалификаторыСтроки(мПривестиКЧислу(МассивЧастейТипа[1]),ДопустимаяДлина.Фиксированная);
		//		Иначе
		//			кс = Новый КвалификаторыСтроки;
		//		КонецЕсли;
		//	ИначеЕсли МассивЧастейТипа[0] = "число" Тогда
		//		Тип = Тип("Число");
		//		кч = Новый КвалификаторыЧисла(мПривестиКЧислу(МассивЧастейТипа[1]),мПривестиКЧислу(МассивЧастейТипа[2]),?(МассивЧастейТипа.Количество() = 4, ДопустимыйЗнак.Неотрицательный, ДопустимыйЗнак.Любой));
		//	ИначеЕсли МассивЧастейТипа[0] = "булево" Тогда
		//		Тип = Тип("Булево");
		//	ИначеЕсли МассивЧастейТипа[0] = "дата" Тогда
		//		Тип = Тип("Дата");
		//		кд = Новый КвалификаторыДаты(ЧастиДаты.Дата);
		//	ИначеЕсли МассивЧастейТипа[0] = "время" Тогда
		//		Тип = Тип("Дата");
		//		кд = Новый КвалификаторыДаты(ЧастиДаты.Время);
		//	ИначеЕсли МассивЧастейТипа[0] = "дата и время" Тогда
		//		Тип = Тип("Дата");
		//		кд = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
		//	Иначе
		//		Продолжить;
		//	КонецЕсли;
		//	Типы.Добавить(Тип);
		//КонецЦикла;
		ОписаниеТипов = Новый ОписаниеТипов(Типы, кч, кс, кд);
		СтруктураУмолчанияРеквизита.Вставить("ОписаниеТипов",ОписаниеТипов);
		
		РежимЗагрузкиРеквизита = Настройки.Область(ТекущаяСтрокаОбласти + "C5").Текст;
		
		СтруктураУмолчанияРеквизита.Вставить("РежимЗагрузки",РежимЗагрузкиРеквизита);
		
		ЗначениеПоУмолчанию = Настройки.Область(ТекущаяСтрокаОбласти + "C6").Текст;
		СтруктураУмолчанияРеквизита.Вставить("ЗначениеПоУмолчанию",?(ПустаяСтрока(ЗначениеПоУмолчанию), ОписаниеТипов.ПривестиЗначение(Неопределено), ЗначениеИзСтрокиВнутр(ЗначениеПоУмолчанию)));
		
		Если РежимЗагрузкиРеквизита = "Вычислять" Тогда
			
			СтруктураУмолчанияРеквизита.Вставить("Выражение",Настройки.Область(ТекущаяСтрокаОбласти + "C7").Текст);
			
		Иначе
			СтруктураУмолчанияРеквизита.Вставить("ИскатьПо",Настройки.Область(ТекущаяСтрокаОбласти + "C7").Текст);
			
			СвязьПоВладельцу   = Настройки.Область(ТекущаяСтрокаОбласти + "C8").Текст;
			СтруктураУмолчанияРеквизита.Вставить("СвязьПоВладельцу",?(Лев(СвязьПоВладельцу,1) = "{",ЗначениеИзСтрокиВнутр(СвязьПоВладельцу), СвязьПоВладельцу));
			
			СвязьПоТипу        = Настройки.Область(ТекущаяСтрокаОбласти + "C9").Текст;
			СтруктураУмолчанияРеквизита.Вставить("СвязьПоТипу",?(Лев(СвязьПоТипу,1) = "{",ЗначениеИзСтрокиВнутр(СвязьПоТипу), СвязьПоТипу));
			
			СтруктураУмолчанияРеквизита.Вставить("ЭлементСвязиПоТипу",мПривестиКЧислу(Настройки.Область(ТекущаяСтрокаОбласти + "C10").Текст));
		КонецЕсли;
		
		СтруктураУмолчанияРеквизита.Вставить("НомерКолонки",Настройки.Область(ТекущаяСтрокаОбласти + "C11").Текст);
		
		СтруктураУмолчаний.Вставить(ИмяРеквизита,СтруктураУмолчанияРеквизита);
		ТекущаяСтрока = ТекущаяСтрока + 1;
		ТекущаяСтрокаОбласти = "R" + Формат(ТекущаяСтрока, "ЧГ=");
		ИмяРеквизита = Настройки.Область(ТекущаяСтрокаОбласти + "C2").Текст;
		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиКолонокСправочникаРеквизиты(ТЗ, МетаданныеИсточника)
	Для каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл
		Если Не Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы Тогда
			ЗагружаемыйРеквизит                        = ТЗ.Добавить();
			ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
			ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
			ЗагружаемыйРеквизит.МожетБытьПолемПоиска   = Не Реквизит.Индексирование = Метаданные.СвойстваОбъектов.Индексирование.НеИндексировать;
			ЗагружаемыйРеквизит.ОписаниеТипов = МетаданныеИсточника.Реквизиты[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДополнитьНастройкиКолонокСправочника(ТЗ, МетаданныеИсточника)
	Для каждого ЗагружаемыйРеквизит Из ТЗ Цикл
		
		СписокВыбора = ПолучитьСписокИменПредставлений(ЗагружаемыйРеквизит.ОписаниеТипов);
		ЗагружаемыйРеквизит.ИскатьПо = ?(СписокВыбора.Количество() = 0, "",СписокВыбора[0].Значение);
		
		СписокВыбора = ПолучитьСписокСвязейПоВладельцу(ЗагружаемыйРеквизит.ОписаниеТипов, ТЗ);
		ЗагружаемыйРеквизит.СвязьПоВладельцу = ?(СписокВыбора.Количество() = 0, "",СписокВыбора[0].Значение);
		
		СписокВыбора = ПолучитьСписокСвязейПоТипу(ЗагружаемыйРеквизит, ТЗ);
		Если СписокВыбора.Количество() = 0 Тогда
			ЗагружаемыйРеквизит.СвязьПоТипу = "";
			ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 0;
		Иначе
			ЗагружаемыйРеквизит.СвязьПоТипу = СписокВыбора[0].Значение;
			Если Найти(ЗагружаемыйРеквизит.ИмяРеквизита,"3") <> 0 Тогда
				
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 3;
				
			ИначеЕсли Найти(ЗагружаемыйРеквизит.ИмяРеквизита,"2") <> 0 Тогда
				
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 2;
				
			Иначе
				
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 1;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗагружаемыйРеквизит.ЗначениеПоУмолчанию = ЗагружаемыйРеквизит.ОписаниеТипов.ПривестиЗначение(Неопределено);
		ЗагружаемыйРеквизит.ДоступныеТипы = ЗагружаемыйРеквизит.ОписаниеТипов;
		ЗагружаемыйРеквизит.РежимЗагрузки = "Искать";
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПолучитьНастройкиТЗ(ДокументРезультат, Макет)
	ТЗ = РеквизитФормыВЗначение("ТаблицаЗагружаемыхРеквизитов");
	
	Для каждого ЗагружаемыйРеквизит Из ТЗ Цикл
		ОбластьСтроки = Макет.ПолучитьОбласть("Строка" + ?(ЗагружаемыйРеквизит.РежимЗагрузки = "Вычислять","Выражение",""));
		
		ОбластьСтроки.Параметры.Пометка      = ?(ЗагружаемыйРеквизит.Пометка, "Х","");
		ОбластьСтроки.Параметры.ИмяРеквизита = ЗагружаемыйРеквизит.ИмяРеквизита;
		ОбластьСтроки.Параметры.ПолеПоиска   = ?(ЗагружаемыйРеквизит.ПолеПоиска, "Х","");
		
		ОбластьСтроки.Параметры.ОписаниеТипов       = ПолучитьОписаниеТипа(ЗагружаемыйРеквизит.ОписаниеТипов);
		
		ОбластьСтроки.Параметры.РежимЗагрузки       = ЗагружаемыйРеквизит.РежимЗагрузки;
		// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
		ОбластьСтрокиЗаполнитьПараметры(ОбластьСтроки, ЗагружаемыйРеквизит);
		//Если ЗагружаемыйРеквизит.ОписаниеТипов.ПривестиЗначение(Неопределено) = ЗагружаемыйРеквизит.ЗначениеПоУмолчанию Тогда
		//	ОбластьСтроки.Параметры.ЗначениеПоУмолчанию = "";
		//Иначе
		//	ОбластьСтроки.Параметры.ЗначениеПоУмолчанию = ЗначениеВСтрокуВнутр(ЗагружаемыйРеквизит.ЗначениеПоУмолчанию);
		//КонецЕсли;
		//
		//Если ЗагружаемыйРеквизит.РежимЗагрузки = "Вычислять" Тогда
		//	
		//	ОбластьСтроки.Параметры.Выражение           = ЗагружаемыйРеквизит.Выражение;
		//	
		//Иначе
		//	ОбластьСтроки.Параметры.ИскатьПо            = ЗагружаемыйРеквизит.ИскатьПо;
		//	ОбластьСтроки.Параметры.СвязьПоВладельцу    = ?(ТипЗнч(ЗагружаемыйРеквизит.СвязьПоВладельцу) = Тип("Строка"),ЗагружаемыйРеквизит.СвязьПоВладельцу,ЗначениеВСтрокуВнутр(ЗагружаемыйРеквизит.СвязьПоВладельцу));
		//	ОбластьСтроки.Параметры.СвязьПоТипу         = ?(ТипЗнч(ЗагружаемыйРеквизит.СвязьПоТипу) = Тип("Строка"),ЗагружаемыйРеквизит.СвязьПоТипу,ЗначениеВСтрокуВнутр(ЗагружаемыйРеквизит.СвязьПоТипу));
		//	ОбластьСтроки.Параметры.ЭлементСвязиПоТипу  = ЗагружаемыйРеквизит.ЭлементСвязиПоТипу;
		//КонецЕсли;
		
		ОбластьСтроки.Параметры.НомерКолонки = ЗагружаемыйРеквизит.НомерКолонки;
		
		ДокументРезультат.Вывести(ОбластьСтроки);
		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбласть(Строка, ЗагружаемыйРеквизит, НомерСтроки, НомерКолонки)
	Если ЗагружаемыйРеквизит.Пометка Тогда
		
		Если Объект.РучнаяНумерацияКолонокТабличногоДокумента Тогда
			НомерКолонки = ЗагружаемыйРеквизит.НомерКолонки;
		Иначе
			НомерКолонки = НомерКолонки + 1;
		КонецЕсли;
		
		Область = ТабличныйДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=") + "C"+НомерКолонки);
		Значение = Строка[ЗагружаемыйРеквизит.ИмяРеквизита];
		
		Попытка
			Представление = Значение[ЗагружаемыйРеквизит.ИскатьПо];
			
		Исключение
			
			Представление = Значение;
			
		КонецПопытки;
		
		Область.Текст = Представление;
		Область.Расшифровка = Значение;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПодготовитьЗагружаемыйОбъектОбъектНайденРежЗаг2(ТекущаяСтрока, ЗагружаемыйОбъект, ОбъектНайден,
	ИзмеренияРегистра, МетаданныеИсточника)
	
	ЗагружаемыйОбъект = РегистрыСведений[МетаданныеИсточника.Имя].СоздатьМенеджерЗаписи();
	Для каждого КлючИЗначение Из ТекущаяСтрока Цикл
		
		Если ИзмеренияРегистра.Свойство(КлючИЗначение.Ключ) Тогда
			ЗагружаемыйОбъект[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не Объект.ЗамещатьСуществующиеЗаписи Тогда
		ЗагружаемыйОбъект.Прочитать();
		ОбъектНайден = ЗагружаемыйОбъект.Выбран();
	Иначе
		ОбъектНайден = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПодготовитьЗагружаемыйОбъектОбъектНайденРежЗаг0(ТекущаяСтрока, НомерТекущейСтроки, ЗагружаемыйОбъект,
	СтрокиПоиска, Запрос)
	Если Не Запрос = Неопределено Тогда
		СтрокаОшибок = "";
		Для каждого СтрокаПоиска Из СтрокиПоиска Цикл
			
			ЗначениеРеквизита = Неопределено;
			
			ТекущаяСтрока.Свойство(СтрокаПоиска.ИмяРеквизита,ЗначениеРеквизита);
			Если ПустаяСтрока(ЗначениеРеквизита) Тогда
				СтрокаОшибок = ?(ПустаяСтрока(СтрокаОшибок),"",СтрокаОшибок + ", ") + СтрокаПоиска.ПредставлениеРеквизита;
			Иначе
				Запрос.УстановитьПараметр(СтрокаПоиска.ИмяРеквизита,ТекущаяСтрока[СтрокаПоиска.ИмяРеквизита]);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ПустаяСтрока(СтрокаОшибок) Тогда
			Сообщить("Строка " + НомерТекущейСтроки + " не может быть записана.Не указано значение ключевых реквизитов: "
			+ СтрокаОшибок,СтатусСообщения.Важное);
			//Продолжить;
			Возврат;
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗагружаемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗагружаемыйОбъектЗаписатьРежЗаг0(ЗагружаемыйОбъект, ОбъектНайден, ТекстыЯчеек, Загружено, Отказ)
	Если Не Отказ и ЗаписатьОбъект(ЗагружаемыйОбъект, ТекстыЯчеек, Объект.ПередЗаписьюОбъекта, Объект.ПриЗаписиОбъекта) Тогда
		Сообщить(?(ОбъектНайден,"Изменен","Загружен") + " элемент справочника: " + ЗагружаемыйОбъект.Ссылка, СтатусСообщения.Информация);
		Загружено = Загружено + 1;
	Иначе
		Сообщить("Объект не " + ?(ОбъектНайден,"изменен","загружен") + ". Элемент справочника: " + ЗагружаемыйОбъект + ".", СтатусСообщения.Важное);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗагружаемыйОбъектЗаписатьРежЗаг1(ОбъектИсточника, ЗагружаемыйОбъект, ТекстыЯчеек, Загружено,
	ЗаписыватьОбъект, Отказ)
	Если Не ОбработатьСобытиеПослеДобавленияСтроки(ОбъектИсточника, ЗагружаемыйОбъект, ТекстыЯчеек, Объект.ПослеДобавленияСтроки) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Не Отказ Тогда
		Сообщить("Добавлена строка: " + (Загружено + 1));
	Иначе
		Сообщить("При добавлении строки " + (Загружено + 1) + " возникли ошибки. ");
		ЗаписыватьОбъект = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗагружаемыйОбъектЗаписатьРежЗаг2(ЗагружаемыйОбъект, ОбъектНайден, ТекстыЯчеек, Загружено,
	НомерТекущейСтроки, Отказ);
	Если Не Отказ и ЗаписатьОбъект(ЗагружаемыйОбъект, ТекстыЯчеек, Объект.ПередЗаписьюОбъекта, Объект.ПриЗаписиОбъекта) Тогда
		Сообщить(?(ОбъектНайден,"Изменена","Добавлена") + " запись № " + НомерТекущейСтроки + ".");
		Загружено = Загружено + 1;
	Иначе
		Сообщить("Запись не " + ?(ОбъектНайден,"изменена","загружена") + ". № записи: " + НомерТекущейСтроки + ".", СтатусСообщения.Важное);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПодготовитьРезультатРедЗагВычисление(Вычисление)
		Если Не ПустаяСтрока(Вычисление.ОписаниеОшибки) Тогда
			Результат   = Неопределено;
			Примечание = ""+ Вычисление.ОписаниеОшибки;
		Иначе
			Результат = Вычисление.Результат;
		КонецЕсли;
	Возврат Результат;
КонецФункции

&НаСервере
Функция ЗаполнитьНайденноеЗначение(Область, Колонка, НайденныеЗначения)
	Нашли = Ложь;
	НашлиЗначениеПоУмолчанию = Ложь;
	Для каждого НайденноеЗначение Из НайденныеЗначения Цикл
		Если НайденноеЗначение = Область.Расшифровка Тогда
			Нашли = Истина;
			Прервать;
		КонецЕсли;
		Если НайденноеЗначение = Колонка.ЗначениеПоУмолчанию Тогда
			НашлиЗначениеПоУмолчанию = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не Нашли Тогда
		
		Если НашлиЗначениеПоУмолчанию Тогда
			НайденноеЗначение = Колонка.ЗначениеПоУмолчанию;
		Иначе
			НайденноеЗначение = НайденныеЗначения[0];
		КонецЕсли;
	КонецЕсли;
	Возврат НайденноеЗначение;
КонецФункции

&НаСервере
Процедура ОбработатьТипРеквизитаПеречисление(ТипРеквизита, Представление, НайденныеЗначения)
	Для каждого Перечисление Из ПолучитьМенеджераПоТипу(ТипРеквизита) Цикл
		Если Строка(Перечисление) = Представление Тогда
			НайденныеЗначения.Добавить(Перечисление);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбработатьТипРеквизитаДокумент(ТипРеквизита, Колонка, Представление, НайденныеЗначения, МетаданныеТипа)
	Менеджер = ПолучитьМенеджераПоТипу(ТипРеквизита);
	Если Колонка.ИскатьПо = "Номер" Тогда
		//НайденноеЗначение = Менеджер.НайтиПоКоду(Представление);
		а = 0;
	ИначеЕсли Колонка.ИскатьПо = "Дата" Тогда
		//НайденноеЗначение = Менеджер.Найти
		// ++ Галфинд СадомцевСА 23.01.2023 Реализовал поиск Упаковочного листа по коду
		//e1cib/data/Задача.ЗадачаИсполнителя?ref=8129bcee7bda45d711ed999bd652afbf
		а = 0;
	ИначеЕсли Колонка.ИскатьПо = "Код" Тогда
		НайденноеЗначение = Менеджер.НайтиПоРеквизиту("Код", Представление);
		Если Не НайденноеЗначение.Пустая() Тогда
			НайденныеЗначения.Добавить(НайденноеЗначение);
		КонецЕсли;
		// --
	Иначе
		
		// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
		ОбработатьТипРеквизитаДокументМетаданныеТипа(Менеджер, Представление, НайденныеЗначения, МетаданныеТипа);
		//ДлиннаСинонима = СтрДлина(""+МетаданныеТипа);
		//
		//Если Лев(Представление, ДлиннаСинонима) = ""+МетаданныеТипа Тогда
		//	НомерИДата = СокрЛП(Сред(Представление, ДлиннаСинонима+1));
		//	ПозицияОт = Найти(НомерИДата, " от ");
		//	Если Не ПозицияОт = 0 Тогда
		//		НомерДок = Лев(НомерИДата, ПозицияОт-1);
		//		Попытка
		//			ДатаДок  = Дата(Сред(НомерИДата, ПозицияОт+4));
		//		Исключение
		//			ДатаДок = Неопределено;
		//		КонецПопытки;
		//		Если Не ДатаДок = Неопределено Тогда
		//			НайденноеЗначение = Менеджер.НайтиПоНомеру(НомерДок, ДатаДок);
		//			Если Не НайденноеЗначение.Пустая() Тогда
		//				НайденныеЗначения.Добавить(НайденноеЗначение);
		//			КонецЕсли;
		//		КонецЕсли;
		//	КонецЕсли;
		//КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработатьТипРеквизитаМетаданныеТипа(ТипРеквизита, Колонка, Представление, ТекущиеДанные, НайденныеЗначения, МетаданныеТипа)
	ИскатьПо = Колонка.ИскатьПо;
	ЭтоСправочник = Справочники.ТипВсеСсылки().СодержитТип(ТипРеквизита);
	Если ПустаяСтрока(ИскатьПо) Тогда
		СтрокаОсновногоПредставления = Строка(МетаданныеТипа.ОсновноеПредставление);
		
		Если СтрокаОсновногоПредставления = "ВВидеКода" Тогда
			ИскатьПо = "Код";
		ИначеЕсли СтрокаОсновногоПредставления = "ВВидеНаименования" Тогда
			ИскатьПо = "Наименование";
		ИначеЕсли СтрокаОсновногоПредставления = "ВВидеНомера" Тогда
			ИскатьПо = "Номер";
		// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
		// ++
		Иначе
			а = 0;
		//--
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	_Таблица.Ссылка
	|ИЗ
	|	" + МетаданныеТипа.ПолноеИмя() + " КАК _Таблица
	|ГДЕ";
	
	Запрос.Текст = Запрос.Текст + "
	|	_Таблица." + ИскатьПо + " = &Представление";
	Запрос.УстановитьПараметр("Представление",Представление);
	
	Если ЭтоСправочник и Не ПустаяСтрока(Колонка.СвязьПоВладельцу) и МетаданныеТипа.Владельцы.Количество() Тогда
		
		СвязьПоВладельцу = Неопределено;
		Если ТипЗНЧ(Колонка.СвязьПоВладельцу) = Тип("Строка") Тогда
			ТекущиеДанные.Свойство(Колонка.СвязьПоВладельцу,СвязьПоВладельцу);
		Иначе
			СвязьПоВладельцу = Колонка.СвязьПоВладельцу;
		КонецЕсли;
		
		Если Не СвязьПоВладельцу = Неопределено Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И _Таблица.Владелец = &СвязьПоВладельцу";
			Запрос.УстановитьПараметр("СвязьПоВладельцу",СвязьПоВладельцу);
		КонецЕсли;
		
	КонецЕсли;
	
	Выборка =  Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НайденныеЗначения.Добавить(Выборка.Ссылка);
	КонецЦикла;
КонецПроцедуры

// -- Галфинд СадомцевСА 07.08.2023 Исправил "ошибки" СонарКуба

// ++ Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба

&НаСервере
Функция ПолучитьВосстановленныйРежимЗагрузки(ТекстВосстановленногоРежимаЗагрузки)
	Если ТекстВосстановленногоРежимаЗагрузки = "в справочник" или ТекстВосстановленногоРежимаЗагрузки = "" Тогда
		ВосстановленныйРежимЗагрузки = 0;
	ИначеЕсли ТекстВосстановленногоРежимаЗагрузки = "в табличную часть" или ТекстВосстановленногоРежимаЗагрузки = "Х" Тогда
		ВосстановленныйРежимЗагрузки = 1;
	ИначеЕсли ТекстВосстановленногоРежимаЗагрузки = "в регистр сведений" Тогда
		ВосстановленныйРежимЗагрузки = 2;
	// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
	// ++
	Иначе
		а = 0;
	//--
	КонецЕсли;
	Возврат ВосстановленныйРежимЗагрузки;
КонецФункции

&НаСервере
Функция ПолучитьМетаданныеОбъекта(Настройки, ВерсияОбработки)
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(Настройки.Область(?(ВерсияОбработки = "1.1","R2","R3") + "C5").Текст);
	Если МетаданныеОбъекта = Неопределено Тогда
		ВызватьИсключение "Неправильный формат файла";
	КонецЕсли;
	Возврат МетаданныеОбъекта;
КонецФункции

&НаСервере
Функция ПолучитьВосстановленныйСсылкаИсточника(ВосстановленныйРежимЗагрузки, МетаданныеОбъекта)
	Если ВосстановленныйРежимЗагрузки = 0 Тогда
		ВосстановленныйСсылкаИсточника = Новый(СтрЗаменить(МетаданныеОбъекта.ПолноеИмя(),".","Ссылка."))
	ИначеЕсли ВосстановленныйРежимЗагрузки = 1 Тогда
		ВосстановленныйСсылкаИсточника = Новый(СтрЗаменить(МетаданныеОбъекта.Родитель().ПолноеИмя(),".","Ссылка."))
	Иначе
		ВосстановленныйСсылкаИсточника = Неопределено;
	КонецЕсли;
	Возврат ВосстановленныйСсылкаИсточника;
КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитыОбъекта(ВосстановленныйРежимЗагрузки, МетаданныеОбъекта, Настройки, ВерсияОбработки, ТекущаяСтрока)
	Объект.РежимЗагрузки   = ВосстановленныйРежимЗагрузки;
	Если ВосстановленныйРежимЗагрузки = 0 Тогда
		Объект.ТипОбъектаСправочника = МетаданныеОбъекта.Имя;
	ИначеЕсли ВосстановленныйРежимЗагрузки = 1 Тогда
		//Объект.СсылкаИсточника = ВосстановленныйСсылкаИсточника;
		Объект.ТабличнаяЧастьИсточника = ?(ВосстановленныйРежимЗагрузки,МетаданныеОбъекта.Имя,Неопределено);
	ИначеЕсли ВосстановленныйРежимЗагрузки = 2 Тогда
		Объект.ИмяВидаРегистра = МетаданныеОбъекта.Имя;
	// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
	// ++
	Иначе
		а = 0;
	//--
	КонецЕсли;
	Объект.НеСоздаватьНовыхЭлементов                 = Не ПустаяСтрока(Настройки.Область(?(ВерсияОбработки = "1.1","R3","R4") + "C5").Текст);
	Объект.ЗамещатьСуществующиеЗаписи = ?(ВерсияОбработки = "1.1",Ложь, Не ПустаяСтрока(Настройки.Область("R5C5").Текст));
	Объект.РучнаяНумерацияКолонокТабличногоДокумента = Не ПустаяСтрока(Настройки.Область(?(ВерсияОбработки = "1.1","R4","R6") + "C5").Текст);
	Объект.ПерваяСтрокаДанныхТабличногоДокумента     = мПривестиКЧислу(Настройки.Область(?(ВерсияОбработки = "1.1","R5","R7") + "C5").Текст);
	
	Объект.ПередЗаписьюОбъекта = Настройки.Область("R" + Формат(ТекущаяСтрока + 2, "ЧГ=") + "C3").Текст;
	Объект.ПриЗаписиОбъекта    = Настройки.Область("R" + Формат(ТекущаяСтрока + 3, "ЧГ=") + "C3").Текст;
	
	Если Объект.РежимЗагрузки Тогда
		Объект.ПослеДобавленияСтроки = Настройки.Область("R" + Формат(ТекущаяСтрока + 4, "ЧГ=") + "C3").Текст;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиКолонокТЗ(ТЗ)
	Если      Объект.РежимЗагрузки = 0 Тогда
		ЗаполнитьНастройкиКолонокСправочника(ТЗ);
	ИначеЕсли Объект.РежимЗагрузки = 1 Тогда
		ЗаполнитьНастройкиКолонокТабличнойЧасти(ТЗ);
	ИначеЕсли Объект.РежимЗагрузки = 2 Тогда
		ЗаполнитьНастройкиКолонокРегистраСведений(ТЗ);
	// Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
	// ++
	Иначе
		а = 0;
	//--
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЗпоСтруктуреУмолчаний(ТЗ, СтруктураУмолчаний)
	НомерКолонкиОформления = 0;
	НомерКолонки = 1;
	Для каждого КлючИЗначение Из СтруктураУмолчаний Цикл
		Колонка = КлючИЗначение.Значение;
		ЗагружаемыйРеквизит = ТЗ.Найти(Колонка.ИмяРеквизита,"ИмяРеквизита");
		Если Не ЗагружаемыйРеквизит = Неопределено Тогда
			Индекс = ТЗ.Индекс(ЗагружаемыйРеквизит);
			Если Индекс >= НомерКолонкиОформления Тогда
				ЗаполнитьЗначенияСвойств(ЗагружаемыйРеквизит, Колонка);
				
				ТЗ.Сдвинуть(ЗагружаемыйРеквизит, НомерКолонкиОформления - Индекс);
				//Если Колонка.Пометка Тогда
				//	ЗагружаемыйРеквизит.НомерКолонки = НомерКолонки;
				//	НомерКолонки = НомерКолонки + 1;
				//КонецЕсли;
				НомерКолонкиОформления = НомерКолонкиОформления + 1;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЗНомерКолонки(ТЗ)
	НомерКолонки = 1;
	Для каждого ЗагружаемыйРеквизит Из ТЗ Цикл
		
		ЗагружаемыйРеквизит.Пометка      = Истина;
		ЗагружаемыйРеквизит.НомерКолонки = НомерКолонки;
		НомерКолонки = НомерКолонки + 1;
		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЗПредставлениеДопУсловий(ТЗ)
	Для каждого ЗагружаемыйРеквизит Из ТЗ Цикл
		Если ЗагружаемыйРеквизит.РежимЗагрузки = "Вычислять" Тогда
			ЗагружаемыйРеквизит.ПредставлениеДопУсловий = ЗагружаемыйРеквизит.Выражение;
		Иначе
			ЗагружаемыйРеквизит.ПредставлениеДопУсловий = ?(ПустаяСтрока(ЗагружаемыйРеквизит.ИскатьПо), "", "Искать по "+ЗагружаемыйРеквизит.ИскатьПо)
			+?(ПустаяСтрока(ЗагружаемыйРеквизит.СвязьПоВладельцу), "", " по владельцу "+ЗагружаемыйРеквизит.СвязьПоВладельцу);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СписокВыбораДобавитьКодНаименование(СписокВыбора, ЕстьКод, ЕстьИмя)
	Если ЕстьКод Тогда
		СписокВыбора.Добавить("Код", "Код");
	КонецЕсли;
	
	Если ЕстьИмя Тогда
		СписокВыбора.Добавить("Наименование", "Наименование");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СписокВыбораДобавитьНаименованиеКод(СписокВыбора, ЕстьКод, ЕстьИмя)
	Если ЕстьИмя Тогда
		СписокВыбора.Добавить("Наименование", "Наименование");
	КонецЕсли;
	
	Если ЕстьКод Тогда
		СписокВыбора.Добавить("Код", "Код");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТипы(Типы, ОписаниеТиповСтрокой, кс, кч, кд)
	Для к = 1 По СтрЧислоСтрок(ОписаниеТиповСтрокой)  Цикл
		
		кс = Неопределено;кч = Неопределено;кд = Неопределено;
		МассивЧастейТипа = мРазложитьСтрокуВМассивПодстрок(НРег(СокрЛП(СтрПолучитьСтроку(ОписаниеТиповСтрокой,к ))), ",");
		Если МассивЧастейТипа.Количество() = 0 Тогда
			Продолжить;
		ИначеЕсли Найти(МассивЧастейТипа[0],".") Тогда
			Тип = Тип(СтрЗаменить(МассивЧастейТипа[0],".","Ссылка."));
		ИначеЕсли МассивЧастейТипа[0] = "строка" Тогда
			Тип = Тип("Строка");
			кс = ЗаполнитьТипыСтрока(МассивЧастейТипа);
		ИначеЕсли МассивЧастейТипа[0] = "число" Тогда
			Тип = Тип("Число");
			кч = Новый КвалификаторыЧисла(мПривестиКЧислу(МассивЧастейТипа[1]),мПривестиКЧислу(МассивЧастейТипа[2]),?(МассивЧастейТипа.Количество() = 4, ДопустимыйЗнак.Неотрицательный, ДопустимыйЗнак.Любой));
		ИначеЕсли МассивЧастейТипа[0] = "булево" Тогда
			Тип = Тип("Булево");
		ИначеЕсли МассивЧастейТипа[0] = "дата" Тогда
			Тип = Тип("Дата");
			кд = Новый КвалификаторыДаты(ЧастиДаты.Дата);
		ИначеЕсли МассивЧастейТипа[0] = "время" Тогда
			Тип = Тип("Дата");
			кд = Новый КвалификаторыДаты(ЧастиДаты.Время);
		ИначеЕсли МассивЧастейТипа[0] = "дата и время" Тогда
			Тип = Тип("Дата");
			кд = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
		Иначе
			Продолжить;
		КонецЕсли;
		Типы.Добавить(Тип);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбластьСтрокиЗаполнитьПараметры(ОбластьСтроки, ЗагружаемыйРеквизит)
	Если ЗагружаемыйРеквизит.ОписаниеТипов.ПривестиЗначение(Неопределено) = ЗагружаемыйРеквизит.ЗначениеПоУмолчанию Тогда
		ОбластьСтроки.Параметры.ЗначениеПоУмолчанию = "";
	Иначе
		ОбластьСтроки.Параметры.ЗначениеПоУмолчанию = ЗначениеВСтрокуВнутр(ЗагружаемыйРеквизит.ЗначениеПоУмолчанию);
	КонецЕсли;
	
	Если ЗагружаемыйРеквизит.РежимЗагрузки = "Вычислять" Тогда
		
		ОбластьСтроки.Параметры.Выражение           = ЗагружаемыйРеквизит.Выражение;
		
	Иначе
		ОбластьСтроки.Параметры.ИскатьПо            = ЗагружаемыйРеквизит.ИскатьПо;
		ОбластьСтроки.Параметры.СвязьПоВладельцу    = ?(ТипЗнч(ЗагружаемыйРеквизит.СвязьПоВладельцу) = Тип("Строка"),ЗагружаемыйРеквизит.СвязьПоВладельцу,ЗначениеВСтрокуВнутр(ЗагружаемыйРеквизит.СвязьПоВладельцу));
		ОбластьСтроки.Параметры.СвязьПоТипу         = ?(ТипЗнч(ЗагружаемыйРеквизит.СвязьПоТипу) = Тип("Строка"),ЗагружаемыйРеквизит.СвязьПоТипу,ЗначениеВСтрокуВнутр(ЗагружаемыйРеквизит.СвязьПоТипу));
		ОбластьСтроки.Параметры.ЭлементСвязиПоТипу  = ЗагружаемыйРеквизит.ЭлементСвязиПоТипу;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработатьТипРеквизитаДокументМетаданныеТипа(Менеджер, Представление, НайденныеЗначения, МетаданныеТипа)
	ДлиннаСинонима = СтрДлина(""+МетаданныеТипа);
	
	Если Лев(Представление, ДлиннаСинонима) = ""+МетаданныеТипа Тогда
		НомерИДата = СокрЛП(Сред(Представление, ДлиннаСинонима+1));
		ПозицияОт = Найти(НомерИДата, " от ");
		Если Не ПозицияОт = 0 Тогда
			НомерДок = Лев(НомерИДата, ПозицияОт-1);
			Попытка
				ДатаДок  = Дата(Сред(НомерИДата, ПозицияОт+4));
			Исключение
				ДатаДок = Неопределено;
			КонецПопытки;
			Если Не ДатаДок = Неопределено Тогда
				НайденноеЗначение = Менеджер.НайтиПоНомеру(НомерДок, ДатаДок);
				Если Не НайденноеЗначение.Пустая() Тогда
					НайденныеЗначения.Добавить(НайденноеЗначение);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыполнитьВПопыткеПередЗаписьюОбъекта(ПередЗаписьюОбъекта, ОписаниеОшибки, Отказ)
	НачатьТранзакцию();
	Попытка
		// ++ Галфинд СадомцевСА 04.08.2023 Исправил "ошибку" СонарКуба
		//Выполнить(ПередЗаписьюОбъекта);
		ОбщегоНазначения.ВыполнитьВБезопасномРежиме(ПередЗаписьюОбъекта);
		// -- Галфинд СадомцевСА 04.08.2023 Исправил "ошибку" СонарКуба
		// Галфинд СадомцевСА 07.08.2023 Исправил "ошибки" СонарКуба: заремарил 3 строки
		//Если Отказ Тогда
		//	ОписаниеОшибки = "";//Установлен отказ перед записью объекта
		//КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		// Галфинд СадомцевСА 07.08.2023 Исправил "ошибки" СонарКуба: добавил ОтменитьТранзакцию();
		ОтменитьТранзакцию();
		
		Отказ = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыполнитьВПопыткеПриЗаписиОбъекта(ПриЗаписиОбъекта, ОписаниеОшибки, Отказ)
	НачатьТранзакцию();
	Попытка
		// ++ Галфинд СадомцевСА 04.08.2023 Исправил "ошибку" СонарКуба
		//Выполнить(ПриЗаписиОбъекта);
		ОбщегоНазначения.ВыполнитьВБезопасномРежиме(ПриЗаписиОбъекта);
		// -- Галфинд СадомцевСА 04.08.2023 Исправил "ошибку" СонарКуба
		// Галфинд СадомцевСА 07.08.2023 Исправил "ошибки" СонарКуба: заремарил 3 строки
		//Если Отказ Тогда
		//	ОписаниеОшибки = "";//Установлен отказ при записи объекта
		//КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		// Галфинд СадомцевСА 07.08.2023 Исправил "ошибки" СонарКуба: добавил ОтменитьТранзакцию();
		ОтменитьТранзакцию();
		
		Отказ = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
КонецПроцедуры

&НаСервере
Функция ЗаполнитьТипыСтрока(МассивЧастейТипа)
	Если МассивЧастейТипа.Количество() = 2 Тогда
		кс = Новый КвалификаторыСтроки(мПривестиКЧислу(МассивЧастейТипа[1]),ДопустимаяДлина.Переменная);
	ИначеЕсли МассивЧастейТипа.Количество() = 3 Тогда
		кс = Новый КвалификаторыСтроки(мПривестиКЧислу(МассивЧастейТипа[1]),ДопустимаяДлина.Фиксированная);
	Иначе
		кс = Новый КвалификаторыСтроки;
	КонецЕсли;
	Возврат кс;
КонецФункции

// -- Галфинд СадомцевСА 14.08.2023 Исправил "ошибки" СонарКуба
