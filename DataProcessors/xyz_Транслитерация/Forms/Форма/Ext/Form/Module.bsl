
&НаКлиенте
Процедура Перевести(Команда)
	
	ВывестиНаСервере();
	
	Индикатор = 0;
	КоличествоСтрок = Результат.ВысотаТаблицы;
	КоличествоКолонок = Результат.ШиринаТаблицы;

	//ДляПеревода = Новый ТаблицаЗначений;
	//ДляПеревода.Колонки.Добавить("Колонка", новый ОписаниеТипов("Число"));
	//ДляПеревода.Колонки.Добавить("Строка", новый ОписаниеТипов("Число"));
	//ДляПеревода.Колонки.Добавить("Текст", новый ОписаниеТипов("Строка"));
	
	ГраницаИндикатора = КоличествоСтрок * 2;
	
	Для Строка=1 По КоличествоСтрок Цикл
		ОбработкаПрерыванияПользователя();
		
		Индикатор = Индикатор + 1;
		процент = Окр(100 * Индикатор / ГраницаИндикатора, 0);
		Состояние("Трансляция ", процент, "Обработка таблицы источника");
		
		Для Колонка=1 По КоличествоКолонок Цикл
			ОбработкаПрерыванияПользователя();
			Текст = Результат.Область(Строка, Колонка, Строка, Колонка).Текст;
			Если Текст > "" Тогда
				новая = ДляПеревода.Добавить();
				новая.Колонка = Колонка;
				новая.Строка = Строка;
				новая.Текст = Текст;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ГраницаИндикатора = КоличествоСтрок + ДляПеревода.Количество();
	
	Если ИспользоватьAPI Тогда
		
		Если ЯзыкПеревода = ПредопределенноеЗначение("Справочник.xyz_ВидыЯзыков.Deutsch") Тогда
			НаправлениеПеревода = "ru-de";
		ИначеЕсли ЯзыкПеревода = ПредопределенноеЗначение("Справочник.xyz_ВидыЯзыков.Français") Тогда
			НаправлениеПеревода = "ru-fr";
		Иначе
			НаправлениеПеревода = "ru-en";
		КонецЕсли;
		
		ссл = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows(СпособВыбораСертификатаWindows.Выбирать), Новый СертификатыУдостоверяющихЦентровWindows());
		сервер = новый HTTPСоединение("translate.yandex.net",,,,,, ссл);
		ИмяФайла = ПолучитьИмяВременногоФайла();
		Для каждого строка Из ДляПеревода Цикл
			ОбработкаПрерыванияПользователя();
			
			Индикатор = Индикатор + 1;
			процент = Окр(100 * Индикатор / ГраницаИндикатора, 0);
			Состояние("Трансляция", процент, "Обработка таблицы результата");
			
			СтрокаПараметраПолучения = "api/v1.5/tr/translate?key=trnsl.1.1.20181226T125308Z.54dca3bae7d879b4.18dcda3aa231b8f440cd6afcc1fada05483d49bc&lang=" + НаправлениеПеревода + "&text=" + строка.Текст;
			запрос = Новый HTTPЗапрос(СтрокаПараметраПолучения); 
			ответ = сервер.Получить(запрос, ИмяФайла);
			Если ответ.КодСостояния = 200 Тогда
				текст = ПолучитьОтвет(ИмяФайла);
				Результат.Область(строка.Строка, строка.Колонка, строка.Строка, строка.Колонка).Текст = текст;
			ИначеЕсли ответ.КодСостояния = 403 Тогда
				текст = ПолучитьОтветОшибки(ИмяФайла);
			КонецЕсли;
			Сообщить("Ошибка использования API: " + текст);
		КонецЦикла;
	Иначе
		Если не ЗначениеЗаполнено(ЯзыкПеревода) Тогда
			сообщить("Язык перевода не задан, будет использована транслитерация.");
		КонецЕсли;
		Для каждого строка Из ДляПеревода Цикл
			ОбработкаПрерыванияПользователя();
			
			Индикатор = Индикатор + 1;
			процент = Окр(100 * Индикатор / ГраницаИндикатора, 0);
			Состояние("Трансляция", процент, "Обработка таблицы результата");
			
			Результат.Область(строка.Строка, строка.Колонка, строка.Строка, строка.Колонка).Текст = Транслитерация(строка.Текст);
		КонецЦикла;
	КонецЕсли;
	
	Элементы.Панель.ТекущаяСтраница = Элементы.ГруппаРезультат;
	Состояние("");
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаСервере()

	Результат.Очистить();
	Результат.Вывести(Источник);	

КонецПроцедуры

&НаСервере
Функция ПолучитьОтвет(ИмяФайла)
	
	текст = "";
	
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(ИмяФайла);
	Пока Чтение.Прочитать() Цикл
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента и Чтение.Имя = "text" Тогда
			
			Если Чтение.Прочитать() и Чтение.ТипУзла = ТипУзлаXML.Текст Тогда
				текст = Чтение.Значение;
				Прервать;
			КонецЕсли;
			
		КонецЕсли;		
	КонецЦикла;
	
	возврат текст;
КонецФункции // ПолучитьОтвет()

&НаСервере
Функция ПолучитьОтветОшибки(ИмяФайла)
	
	текст = "";
	
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(ИмяФайла);
	Пока Чтение.Прочитать() Цикл
		
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента и Чтение.Имя = "Error" Тогда
			текст = Чтение.значениеАтрибута("message");
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	возврат текст;
КонецФункции 

&НаСервере
Функция Транслитерация(Данные)
	
	Если Данные = "" Тогда
		возврат "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЯзыкПеревода) Тогда
		запрос = новый Запрос(
		"ВЫБРАТЬ
		|	а.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.xyz_ПереводЗначенийРеквизитовИСвойств КАК а
		|ГДЕ
		|	а.Объект = &Объект
		|	И а.Язык = &Язык");
		запрос.УстановитьПараметр("Объект", Данные);
		запрос.УстановитьПараметр("Язык", ЯзыкПеревода);
		выборка = запрос.Выполнить().Выбрать();
		Если выборка.Следующий() Тогда
			возврат выборка.Значение;
		КонецЕсли;
	КонецЕсли;
	
	длина = СтрДлина(Данные);
	рез = "";
	Для а=1 По длина Цикл
		символ = сред(Данные, а, 1);
		Отбор = Новый Структура;
		Отбор.Вставить("Источник", символ);
		нашли = Перевод.НайтиСтроки(Отбор);
		
		Если нашли.Количество() = 0 Тогда
			рез = рез + символ;
		Иначе
			рез = рез + нашли[0].Перевод;
		КонецЕсли;
	КонецЦикла;
	
	возврат рез;
КонецФункции // Транслитерация()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьAPI = Ложь;
	
	Структура = новый Структура("а, б, в, г, д, е, ё, ж, з, и, й, к,
	|л, м, н, о, п, р, с, т, у, ф, х, ц, ч, ш,
	|щ, ъ, ы, ь, э, ю, я",
	"a", "b", "v", "g", "d", "e", "yo", "zh", "z", "i", "y",
	"k", "l", "m", "n", "o", "p", "r", "s", "t", "u", "f", "kh", "ts", "ch",
	"sh", "sch", "''", "y", "'", "e", "yu", "ya");
	
	Для каждого строка Из Структура Цикл
		новая = Перевод.Добавить();
		новая.Источник = строка.Ключ;
		новая.Перевод = строка.Значение;
	КонецЦикла;
	
	Структура = новый Структура("А, Б, В, Г, Д, Е,
	|Ё, Ж, З, И, Й, К, Л, М, Н, О, П, Р,
	|С, Т, У, Ф, Х, Ц, Ч, Ш, Щ, Ъ, Ы, Ь, Э, Ю, Я",
	"A", "B", "V", "G", "D",
	"E", "Yo", "Zh", "Z", "I", "J", "K", "L", "M", "N", "O", "P", "R",
	"S", "T", "U", "F", "Kh", "Ts", "Ch", "Sh", "Sch", "''", "Y", "'", "E", "Yu", "Ya");
	
	Для каждого строка Из Структура Цикл
		новая = Перевод.Добавить();
		новая.Источник = строка.Ключ;
		новая.Перевод = строка.Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьAPI(Команда)
	ИспользоватьAPI = не ИспользоватьAPI;
	Элементы.ФормаИспользоватьAPI.Пометка = ИспользоватьAPI;
КонецПроцедуры
