Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	СтруктураТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивОбъектов);
	//ПараметрыПечати.Вставить("ВыводитьУслуги", Истина);
	//ПараметрыПечати.Вставить("ДополнитьКомплектВнешнимиПечатннымиФормами", Ложь);
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Этикетка_Декларация4") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"Этикетка_Декларация4",                                               
		НСтр("ru = 'Этикетка_Декларация4';                          
		|en = 'Label_Declarayion4'"),
		ПечатьЭтикетки(СтруктураТипов, ОбъектыПечати, ПараметрыПечати)); 
		
	КонецЕсли;
КонецПроцедуры

Функция ПечатьЭтикетки(СтруктураТипов, ОбъектыПечати, ПараметрыПечати = Неопределено) Экспорт
	Перем ТекущийАртикул;
	Перем Производитель;
	Перем АдресПроизводителя;
	Перем Декларация;  
	
	//ТабличныйДокумент = Новый ТабличныйДокумент;
	//ТабличныйДокумент.АвтоМасштаб = Истина;
	//ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	//
	//Макет = Обработки.гф_ПечатьЭтикетокГС1.ПолучитьМакет("Этикетка_Декларация4");
	        
	
	СоответствиеПоставщиков = новый Соответствие;
	ДеревоТовары = ПолучитьДеревоДанных(ПараметрыПечати);
	
	//Если Не ПроверитьЗаполнениеНеобходимыхДанных(ДеревоТовары) Тогда
	//	Возврат;
	//КонецЕсли;
	
	//МакетАртикул = ЭтотОбъект.ПолучитьМакет("Артикул").ПолучитьОбласть("Заголовок");
	МакетАртикул = Обработки.гф_ПечатьЭтикетокГС1.ПолучитьМакет("Артикул").ПолучитьОбласть("Заголовок");
	
	ГраницаМакета = 13;
	КоличествоСтрок = 3;
	КоличествоКолонок = 6;
	//КоличествоСтрок = 5;
	//КоличествоКолонок = 4;
	ЭтикетокНаЛисте = КоличествоСтрок * КоличествоКолонок;
	ИндексЭтикетки = 0;
	
	ТД = Новый ТабличныйДокумент;
	
	// Волков
	//запрос = новый Запрос(
	//"ВЫБРАТЬ
	//|	выборка.Ссылка,
	//|	выборка.ХранилищеНастроек
	//|ИЗ
	//|	Справочник.СохраненныеНастройки КАК выборка
	//|ГДЕ
	//|	выборка.ТипНастройки = ЗНАЧЕНИЕ(Перечисление.ТипыНастроек.ПроизвольныеНастройки)
	//|	И выборка.НастраиваемыйОбъект = ""ПечатьЭтикеток.Соответствия""");
	//выборка = запрос.Выполнить().Выбрать();
	//Если выборка.Следующий() Тогда
	//	СоответствиеНастроек = новый Соответствие;
	//	НастрокиСоответствия = выборка.ХранилищеНастроек.Получить();
	//	Для каждого строка Из НастрокиСоответствия Цикл
	//		СоответствиеНастроек.Вставить(строка.ВидНоменклатуры, строка.Настройка);
	//	КонецЦикла;
	//Иначе
	//	ВызватьИсключение "Не заданы настройки этикеток для печати!";
	//КонецЕсли;
	
	СоответствиеНастроек = новый Соответствие;
	// Волков
	
	Свойство_GLN_manufacturer 	= Справочники.B2B_w_Настройки.Свойство_GLN_manufacturer.Значение;
	Свойство_Material_Surface 	= Справочники.B2B_w_Настройки.Свойство_Material_Surface.Значение;
	Свойство_Material_Lining 	= Справочники.B2B_w_Настройки.Свойство_Material_Lining.Значение;
	Свойство_Material_Bottom 	= Справочники.B2B_w_Настройки.Свойство_Material_Bottom.Значение;
	Свойство_Сезон 				= Справочники.B2B_w_Настройки.Свойство_Supplier_season.Значение;
	Свойство_Декларация 		= Справочники.B2B_w_Настройки.Свойсво_Код_Декларации.Значение;
	Свойство_Размер 			= Справочники.B2B_w_Настройки.Свойство_Size.Значение;
	
	Свойство_ДатаИзготовления 	= Справочники.B2B_w_Настройки.Свойство_Дата_Изготовления.Значение;
	
	ВнешняяКомпонента 			= ПодключитьВнешнююКомпонентуПечатиШтрихкода();
	ВнешняяКомпонента_стар 		= ПодключитьВнешнююКомпонентуПечатиШтрихкода_старый();
	
	//НАЧАЛО ИЗМЕНЕНИЙ, МАСТЕР СОФТ, АЛЕКСЕЙ, 09.06.2020
	//получим даты получения КМ
	//Состояние("Получение дат изготовления КМ...");
	//нач_запрос = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ЗапросКМ = Новый Запрос;
	ЗапросКМ.Текст = 
	"ВЫБРАТЬ
	|	ТЧ.Номенклатура КАК Номенклатура,
	|	ТЧ.КМ КАК КМ
	|ПОМЕСТИТЬ ВТ_ТЧ
	|ИЗ
	|	&ТЧ КАК ТЧ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТЧ.Номенклатура КАК Номенклатура,
	|	ВТ_ТЧ.КМ КАК КМ,
	|	ЕСТЬNULL(Т1.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаИзготовленияКМ
	|ИЗ
	|	ВТ_ТЧ КАК ВТ_ТЧ
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Т.Номенклатура КАК Номенклатура,
	|			Т.КМ КАК КМ,
	|			МИНИМУМ(Т.Период) КАК Период
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ЛИТ_ЗаказКодовМаркировкиОбороты.Номенклатура КАК Номенклатура,
	|				ЛИТ_ЗаказКодовМаркировкиОбороты.КМ КАК КМ,
	|				ЛИТ_ЗаказКодовМаркировкиОбороты.КоличествоРасход КАК КоличествоРасход,
	|				ЛИТ_ЗаказКодовМаркировкиОбороты.Период КАК Период
	|			ИЗ
	|				РегистрНакопления.ЛИТ_ЗаказКодовМаркировки.Обороты(
	|						,
	|						,
	|						День,
	|						(Номенклатура, КМ) В
	|							(ВЫБРАТЬ
	|								ВТ_ТЧ.Номенклатура,
	|								ВТ_ТЧ.КМ
	|							ИЗ
	|								ВТ_ТЧ)) КАК ЛИТ_ЗаказКодовМаркировкиОбороты
	|			ГДЕ
	|				ЛИТ_ЗаказКодовМаркировкиОбороты.КоличествоРасход > 0) КАК Т
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Т.Номенклатура,
	|			Т.КМ) КАК Т1
	|		ПО ВТ_ТЧ.Номенклатура = Т1.Номенклатура
	|			И ВТ_ТЧ.КМ = Т1.КМ";
	// Волков
	//ЗапросКМ.УстановитьПараметр("ТЧ", ЭтотОбъект.Товары.Выгрузить(,"Номенклатура, КМ"));
	ЗапросКМ.УстановитьПараметр("ТЧ", ПараметрыПечати.РеквиизитФорма.Товары.Выгрузить(,"Номенклатура, КМ"));
	// Волков
	
	// Волков
	///ТаблицаСДатами = ЗапросКМ.Выполнить().Выгрузить();
	//ТаблицаСДатами.Индексы.Добавить("Номенклатура,КМ");
	ТаблицаСДатами = Новый ТаблицаЗначений;
	// Волков
	
	//Состояние("");
	//кон_запрос = ТекущаяУниверсальнаяДатаВМиллисекундах();
	//Сообщить("Запрос КМ занял " + (кон_запрос - нач_запрос) + " мс");
	СтруктураПоискаДаты = Новый Структура("Номенклатура, КМ");
	//КОНЕЦ ИЗМЕНЕНИЙ
	
	//Макет = ЭтотОбъект.ПолучитьМакет("Этикетка_Декларация4");
	Макет = Обработки.гф_ПечатьЭтикетокГС1.ПолучитьМакет("Этикетка_Декларация4");
	//Макет = ПараметрыПечати.РеквиизитФорма.ПолучитьМакет("Этикетка_Декларация4");
	
	// Волков
	серии = ПараметрыПечати.РеквиизитФорма.товары.Выгрузить(, "НомерСерии, АртикулУпаковки");
	// Волков
	
	серии.Свернуть("НомерСерии, АртикулУпаковки");
	
	Для каждого строкаС Из серии Цикл
		//ОбработкаПрерыванияПользователя();
		
		// Волков
		выборка = ПараметрыПечати.РеквиизитФорма.товары.НайтиСтроки(новый Структура("Пометка, НомерСерии, АртикулУпаковки", Истина, строкаС.НомерСерии, строкаС.АртикулУпаковки));
	    // Волков
		
		Если выборка.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИндексЭтикетки > 0 Тогда
			ТД.ВывестиГоризонтальныйРазделительСтраниц();
			ИндексСтроки = 1;
			ИндексЭтикетки = 0;
		КонецЕсли;
		
		ПечатьЗаголовка(ТД, Макет, строкаС, ВнешняяКомпонента_стар);
		
		ИндексСтроки = 1;
		ИндексКолонки = 1;
		
		Для Каждого строка Из выборка Цикл
			//ОбработкаПрерыванияПользователя();
			
			Номенклатура = строка.Номенклатура;
			
			ОписаниеТовара = Строка(Номенклатура) + " (" + строка.Артикул + ")";
			//Состояние("Печать этикеток для номенклатуры " + ОписаниеТовара + "...");
			
			нашли = ДеревоТовары.строки.Найти(Номенклатура);
			Если нашли = Неопределено Тогда
				сообщить("" + Номенклатура + " не найдены свойства для печати этикетки!", СтатусСообщения.Важное);
				Продолжить;
			Иначе
				таб = нашли.Строки;
			КонецЕсли;
			
		    //таблица настройки полей
			//настройка = ПолучитьСоответствие(Номенклатура.ВидНоменклатуры, СоответствиеНастроек).ХранилищеНастроек.Получить();
			//настройка = ПолучитьСоответствие(Номенклатура.ВидНоменклатуры, СоответствиеНастроек).ВариантыОтчетов.Получить();
			
			Настройка = Новый ТаблицаЗначений;
			//Настройка.Колонки.Добавить("Значение элемента");
			//Настройка.Колонки.Добавить("Тип элемента");
			Настройка.Колонки.Добавить("Поле");
			Настройка.Колонки.Добавить("Заголовок");
			Настройка.Колонки.Добавить("ОформлениеЗаголовка");
			Настройка.Колонки.Добавить("ОформлениеПоля");
			Настройка.Колонки.Добавить("Маска"); 
			
			Стр = Настройка.Добавить();
			Стр.Поле      = "Brand_name";
			Стр.Заголовок = "Торговая марка";
			Стр.Маска     = "";
			
			Стр = Настройка.Добавить();
			Стр.Поле      = "Импортер";
			Стр.Заголовок = "Производитель";
			Стр.Маска     = "";
			
			Стр = Настройка.Добавить();
			Стр.Поле      = "Адрес импортера";
			Стр.Заголовок = "Адрес";
			Стр.Маска     = "";
			
			Стр = Настройка.Добавить();
			Стр.Поле      = "Импортер";
			Стр.Заголовок = "Продавец";
			Стр.Маска     = "";
			
			Стр = Настройка.Добавить();
			Стр.Поле      = "Адрес импортера";
			Стр.Заголовок = "Адрес";
			Стр.Маска     = "";
			
			Стр = Настройка.Добавить();
			Стр.Поле           = "Артикул";
			Стр.Заголовок      = "Артикул";
			Стр.ОформлениеПоля = "Шрифт";
			Стр.Маска          = "";
			
			Стр = Настройка.Добавить();
			Стр.Поле      = "Color_Name";
			Стр.Заголовок = "Цвет";
			Стр.Маска     = "";
			
			Стр = Настройка.Добавить();
			Стр.Поле      = "Material surface";
			Стр.Заголовок = "Материал верха";
			Стр.Маска     = "";
			
			Стр = Настройка.Добавить();
			Стр.Поле      = "Material lining";
			Стр.Заголовок = "Материал подкладки";
			Стр.Маска     = "";
			
			Стр = Настройка.Добавить();
			Стр.Поле      = "Material bottom";
			Стр.Заголовок = "Материал подошвы";
			Стр.Маска     = "";
			
			Стр = Настройка.Добавить();
			Стр.Поле      = "Дата_изготовления";
			Стр.Заголовок = "Дата изготовления";
			Стр.Маска     = "";
			
			Если ТипЗнч(настройка) = Тип("Структура") Тогда
				НастройкаПолей = настройка.СписокПолей;
			ИначеЕсли ТипЗнч(настройка) = Тип("ТаблицаЗначений") Тогда
				НастройкаПолей = настройка;
			КонецЕсли;
			
			нашли = таб.Найти(Свойство_Размер, "Свойство");
			Если нашли = Неопределено Тогда
				нашли = найти(строка.Артикул, "/");
				Если нашли = 0 Тогда
					Размер = "";
				Иначе
					Размер = сред(строка.Артикул, нашли + 1);
				КонецЕсли;
			Иначе
				Размер = нашли.Значение
			КонецЕсли;
			
			ОбластьОсновная = Макет.ПолучитьОбласть("ОбластьОсновная");
			ОбластьОсновная.Параметры.Размер = Размер;
			
			Этикетка = "";
			
			РисунокШтрихкод = ОбластьОсновная.Рисунки.Штрихкод;
			
			Если строка.КМ.Пустая() Тогда
				ОбластьОсновная.Рисунки.Удалить(РисунокШтрихкод);
			Иначе
				ОбластьОсновная.Рисунки.Удалить(ОбластьОсновная.Рисунки.eac);
				//++Галфин ЕсиповАВ
				//Штрихкод = СтрЗаменить(строка.КМ.КМ, "\u001D", символ(29));
				Штрихкод = СтрЗаменить(строка.КМ.Код, "\u001D", символ(29));
				//--Галфин ЕсиповАВ
				Штрихкод = СтрЗаменить(Штрихкод, "\u001d", символ(29));
				
				Штрихкод = СтрЗаменить(Штрихкод, " ", символ(29));
				
				Если 1 = 0 Тогда
					
					//так раньше было, старый компонента, которая не поддерживала формирование через base64
					
					Если Найти(Штрихкод, "(")>0 OR Найти(Штрихкод, ")")>0 Тогда
						ПараметрыШтрихкода = новый Структура("ТипКода, Штрихкод, Ширина, Высота, ОтображатьТекст",
						24, Штрихкод, 120, 120, Ложь); //Юра попросил пока оставить инвалидов
						//18, Штрихкод, 220, 220, Ложь); //это просто datamatrix
					Иначе
						ПараметрыШтрихкода = новый Структура("ТипКода, Штрихкод, Ширина, Высота, ОтображатьТекст",
						//24, Штрихкод, 120, 120, Ложь);
						24, Штрихкод, 220, 220, Ложь);
					КонецЕсли;
					
				Иначе
					
					Если НЕ КодСимвола(Прав(Штрихкод, 1), 1) = 29 Тогда
						Штрихкод = Штрихкод + символ(29);
					КонецЕсли;
					
					ДвоичныеДанныеСтроки = ПолучитьДвоичныеДанныеИзСтроки(Штрихкод);
					ВходныеДанные = Base64Строка(ДвоичныеДанныеСтроки); 
					
					ТипКода = 24;
					Ширина = 220;
					Высота = 220;
					УголПоворота = 0;
					УровеньКоррекцииQR = 0;
					
					ПараметрыШтрихкода = Новый Структура;
					ПараметрыШтрихкода.Вставить("Ширина", Ширина);
					ПараметрыШтрихкода.Вставить("Высота", Высота);
					ПараметрыШтрихкода.Вставить("Штрихкод", ВходныеДанные); // Значение штрихкода передается в виде base64
					ПараметрыШтрихкода.Вставить("ТипКода", ТипКода);
					ПараметрыШтрихкода.Вставить("ОтображатьТекст", Истина);
					ПараметрыШтрихкода.Вставить("РазмерШрифта" , 10);
					ПараметрыШтрихкода.Вставить("УголПоворота" , Число(УголПоворота)); //Одно из следующих значений: 0, 90, 180, 270.
					ПараметрыШтрихкода.Вставить("ПрозрачныйФон", Истина);
					ПараметрыШтрихкода.Вставить("УровеньКоррекцииQR", УровеньКоррекцииQR); //Одно из следующих значений: 0, 1, 2, 3. Соответствует: L, M, Q, H.
					ПараметрыШтрихкода.Вставить("ТипВходныхДанных", 1); // Тип входных данных (0-Строка, 1-Base64).
					
				КонецЕсли;
				
				картинка = ПолучитьКартинкуШтрихкода(ВнешняяКомпонента, ПараметрыШтрихкода);
				
				//РисунокШтрихкод.Лево = 0;
				РисунокШтрихкод.Картинка = картинка;
				//РисунокШтрихкод.Высота = 25;
				//РисунокШтрихкод.Ширина = 25;
				РисунокШтрихкод.ГраницаСверху = Ложь;
				РисунокШтрихкод.ГраницаСлева = Ложь;
				РисунокШтрихкод.ГраницаСнизу = Ложь;
				РисунокШтрихкод.ГраницаСправа = Ложь;
				РисунокШтрихкод.Защита = Ложь;
				ОбластьОсновная.Параметры.КодМаркировки = Лев(Штрихкод, 31);
			КонецЕсли;
			
			// НАЧАЛО ИЗМЕНЕНИЙ, МАСТЕР СОФТ, ГЕННАДИЙ 19.08.2020
			
			
			//// декларация
			нашли = таб.Найти(Свойство_Декларация, "Свойство");
			Если не нашли = Неопределено Тогда
				Декларация = нашли.Значение;
			Иначе
				нашли = таб.Найти(Свойство_Material_Surface, "Свойство");
				Если не нашли = Неопределено Тогда
					Декларация = нашли.Значение + " " + Номенклатура;
				Иначе
					Декларация = строка(Номенклатура);
				КонецЕсли;
				
				нашли = таб.Найти(Свойство_Сезон, "Свойство");
				Если не нашли = Неопределено Тогда
					Декларация = сокрЛП(СтрЗаменить(Декларация, нашли.Значение, ""));
				КонецЕсли;
				
				//Декларация = Переводчик.ПолучитьПереводОбъекта(Декларация, Справочники.RC_Язык.Russian);
				//Декларация = Обработки.RC_ДиспетчерПереводов.ПолучитьПереводОбъекта(Декларация, Справочники.RC_Язык.Russian);
				//Декларация = Перевод(Декларация, Справочники.RC_Язык.Russian);
			КонецЕсли;
			
			
			//Декларация = строка.СерияНоменклатуры.МС_ДекларацияСоответствия;
			
			// КОНЕЦ ИЗМЕНЕНИЙ

			// обход полей
			ЕстьОписание = Ложь;
			СтрокаОписание = Неопределено;
			ЗначениеОписание = Неопределено;
			Граница = мин(НастройкаПолей.Количество(), ГраницаМакета);
			Для а=1 По Граница Цикл
				//ОбработкаПрерыванияПользователя();
				
				значение = "";
				СтрокаНастройки = НастройкаПолей[а-1];
				
				//НАЧАЛО ИЗМЕНЕНИЙ, МАСТЕР СОФТ, АЛЕКСЕЙ, 09.06.2020
				ЗаполнитьЗначенияСвойств(СтруктураПоискаДаты, Строка);
				//НайденныеСтрокиИзготовленияКМ = ТаблицаСДатами.НайтиСтроки(СтруктураПоискаДаты);
				ДатаИзготовленияКМ = Дата(1,1,1);
				//Если НайденныеСтрокиИзготовленияКМ.Количество() > 0 Тогда
				//	ДатаИзготовленияКМ = НайденныеСтрокиИзготовленияКМ[0].ДатаИзготовленияКМ;
				//КонецЕсли;
				//КОНЕЦ ИЗМЕНЕНИЙ
				
				Если СтрокаНастройки.Поле = "Производитель" Тогда
					Производитель = Неопределено;
					Если не Номенклатура.Производитель.Пустая() Тогда
						Производитель = Номенклатура.Производитель;
					Иначе
						нашли = таб.Найти(Свойство_GLN_manufacturer, "Свойство");
						Если не нашли = Неопределено Тогда
							Производитель = Справочники.Контрагенты.НайтиПоРеквизиту("RC_GLN_номер", нашли.Значение);
						КонецЕсли;
					КонецЕсли;
					
					Если не Производитель = Неопределено Тогда
						АдресПроизводителя = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Производитель, "Фактический");
					КонецЕсли;
					
					значение = Производитель;
					
				ИначеЕсли СтрокаНастройки.Поле = "Адрес производителя" Тогда
					значение = АдресПроизводителя;
					
				ИначеЕсли СтрокаНастройки.Поле = "Адрес основного поставщика" Тогда
					значение = "";
					ОсновнойПоставщик = Номенклатура.ОсновнойПоставщик;
					Если не ОсновнойПоставщик.Пустая() Тогда
						значение = СоответствиеПоставщиков.Получить(ОсновнойПоставщик);
						Если значение = Неопределено Тогда
							значение = "";
							СведенияО = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ОсновнойПоставщик, ТекущаяДата());
							СведенияО.Свойство("ЮридическийАдрес", значение);
							СоответствиеПоставщиков.Вставить(ОсновнойПоставщик, значение);
						КонецЕсли;
					КонецЕсли;
					
				//ИначеЕсли СтрокаНастройки.Поле = "Импортер" Тогда
				//	Если ПараметрыПечати.РеквиизитФорма.ВзятьАдресОрганизации Тогда
				//		значение = ПараметрыПечати.РеквиизитФорма.Организация;
				//	Иначе
				//		значение = Производитель;
				//	КонецЕсли;
					
				ИначеЕсли СтрокаНастройки.Поле = "Адрес импортера" Тогда
					//Если ПараметрыПечати.РеквиизитФорма.ВзятьАдресОрганизации Тогда
					//	значение = ПараметрыПечати.РеквиизитФорма.Адрес;
					//Иначе
					//	значение = АдресПроизводителя;
					//КонецЕсли;
					
				//ИначеЕсли СтрокаНастройки.Поле = "Декларация о соответствии" Тогда
				//	значение = Декларация;
					
				ИначеЕсли Найти(СтрокаНастройки.Поле, "ДополнительноеОписание") > 0 Тогда
					ЕстьОписание = Истина;
					СтрокаОписание = СтрокаНастройки;
					ЗначениеОписание = Номенклатура[СтрокаНастройки.Поле];
					Продолжить;
					
				ИначеЕсли СтрокаНастройки.Поле = "ЦенаОптовая" Тогда
					значение = НайтиЦенуПоТипу(Номенклатура, ПараметрыПечати.РеквиизитФорма.ТипЦенОптовая);
					
				ИначеЕсли СтрокаНастройки.Поле = "ЦенаРозничная" Тогда
					значение = НайтиЦенуПоТипу(Номенклатура, ПараметрыПечати.РеквиизитФорма.ТипЦенРозничная);
					
				//ИначеЕсли ТипЗнч(СтрокаНастройки.Поле) = Тип("Строка") Тогда
				//	значение = Номенклатура[СтрокаНастройки.Поле];
				Иначе
					Если СтрокаНастройки.Поле = Свойство_GLN_manufacturer Тогда
						значение = Производитель;
						
						//ИначеЕсли ИзменитьМатериалВерх и СтрокаНастройки.Поле = Свойство_Material_Surface Тогда
						//	значение = МатериалВерх;
						//	
						//ИначеЕсли ИзменитьМатериалПодкладка и СтрокаНастройки.Поле = Свойство_Material_Lining Тогда
						//	значение = МатериалПодкладка;
						//	
						//ИначеЕсли ИзменитьМатериалПодошва и СтрокаНастройки.Поле = Свойство_Material_Bottom Тогда
						//	значение = МатериалПодошва;
						
					Иначе
						
						//НАЧАЛО ИЗМЕНЕНИЙ, МАСТЕР СОФТ, АЛЕКСЕЙ, 09.06.2020
						Если СтрокаНастройки.Поле = Свойство_ДатаИзготовления И НЕ ДатаИзготовленияКМ = Дата(1,1,1) Тогда
							значение = ДатаИзготовленияКМ;
						Иначе
							нашли = таб.Найти(СтрокаНастройки.Поле, "Свойство");
							Если не нашли = Неопределено Тогда
								значение = нашли.Значение;
								Если ТипЗнч(значение) = Тип("Строка") Тогда
									//значение = Переводчик.ПолучитьПереводОбъекта(Значение, Справочники.RC_Язык.Russian);
									//значение = Обработки.RC_ДиспетчерПереводов.ПолучитьПереводОбъекта(Значение, Справочники.RC_Язык.Russian);
									значение = Перевод(Значение, Справочники.RC_Язык.Russian);
								КонецЕсли;
							КонецЕсли;
							
						КонецЕсли;
						//КОНЕЦ ИЗМЕНЕНИЙ
					КонецЕсли;
				КонецЕсли;
				
				//ОбластьОсновная.Параметры["Поле" + а] = СтрокаНастройки.Заголовок;
				//ОбластьОсновная.Параметры["Значение" + а] = значение;
				Этикетка = Этикетка + СтрокаНастройки.Заголовок + ": ";
				
				Если ЗначениеЗаполнено(СтрокаНастройки.Маска) Тогда
					область = ОбластьОсновная.Область("R"+(а+2)+"C3");
					область.Маска = СтрокаНастройки.Маска;
					ОбластьОсновная.Параметры["Значение" + а] = сред(значение, 1, СтрДлина(СтрокаНастройки.Маска));
					Этикетка = Этикетка + сред(значение, 1, СтрДлина(СтрокаНастройки.Маска)) + ", ";
				//Иначе
				//	ОбластьОсновная.Параметры["Значение" + а] = ?(ТипЗнч(значение) = Тип("Дата"), формат(значение, "ДФ=dd.MM.yyyy"), значение);
				//	Этикетка = Этикетка + ?(ТипЗнч(значение) = Тип("Дата"), формат(значение, "ДФ=dd.MM.yyyy"), значение) + ", ";
				КонецЕсли;
				
				//заголовок
				Если ЗначениеЗаполнено(СтрокаНастройки.ОформлениеЗаголовка) Тогда
					ЗадатьОформление(ОбластьОсновная.Область("R"+(а+2)+"C2"), СтрокаНастройки.ОформлениеЗаголовка);
					Если СтрокаНастройки.ОформлениеЗаголовка.Текст.Использование Тогда
						ОбластьОсновная.Параметры["Поле" + а] = СтрокаНастройки.ОформлениеЗаголовка.Текст.Значение;
						Этикетка = СтрокаНастройки.ОформлениеЗаголовка.Текст.Значение + СтрокаНастройки.Заголовок + ": ";
					КонецЕсли;
				КонецЕсли;
				//значение
				Если ЗначениеЗаполнено(СтрокаНастройки.ОформлениеПоля) Тогда
					ЗадатьОформление(ОбластьОсновная.Область("R"+(а+2)+"C3"), СтрокаНастройки.ОформлениеПоля);
					//Если СтрокаНастройки.ОформлениеПоля.Текст.Использование Тогда
					//	ОбластьОсновная.Параметры["Значение" + а] = СтрокаНастройки.ОформлениеПоля.Текст.Значение;
					//	Этикетка = Этикетка + СтрокаНастройки.ОформлениеПоля.Текст.Значение + ", ";
					//КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			ОбластьОсновная.Параметры.Этикетка = Этикетка;
			
			Для а = 1 По строка.КоличествоЭтикеток Цикл
				//ОбработкаПрерыванияПользователя();
				
				ИндексЭтикетки = ИндексЭтикетки + 1;
				
				Если ИндексКолонки = 1 Тогда
					ТД.Вывести(ОбластьОсновная);
				Иначе	
					ТД.Присоединить(ОбластьОсновная);
				КонецЕсли;
				
				Если ИндексКолонки = КоличествоКолонок Тогда
					ИндексКолонки = 1;
					ИндексСтроки = ИндексСтроки + 1;
				Иначе
					ИндексКолонки = ИндексКолонки + 1;
				КонецЕсли;
				
				Если ИндексЭтикетки = ЭтикетокНаЛисте или ИндексСтроки > КоличествоСтрок Тогда
					//ЛИТ Разумова 10.08.21++
					ПечатьПодвала(ТД, Макет, строкаС);
					//ЛИТ Разумова 10.08.21--
					ТД.ВывестиГоризонтальныйРазделительСтраниц();
					ПечатьЗаголовка(ТД, Макет, строкаС, ВнешняяКомпонента_стар);
					ИндексСтроки = 1;
					ИндексЭтикетки = 0;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		//ЛИТ Разумова 10.08.21++
		ПечатьПодвала(ТД, Макет, строкаС);
		//ЛИТ Разумова 10.08.21--

		//Если НаПринтер Тогда
		//	ТД.Напечатать();
		//	ТД = Новый ТабличныйДокумент;
		//Иначе
		//	ТД.ВывестиГоризонтальныйРазделительСтраниц();
		//КонецЕсли;
	КонецЦикла;
	
	ТД.РазмерСтраницы = "A4";
	ТД.АвтоМасштаб = Ложь;
	ТД.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	//ТД.ПолеСверху = 13; ТД.ПолеСнизу = 20; ТД.ПолеСлева = 21; ТД.ПолеСправа = 20;//ЛИТ АР увеличена рабочая область сраницы
	ТД.ПолеСверху = 12; ТД.ПолеСнизу = 12; ТД.ПолеСлева = 21; ТД.ПолеСправа = 20;
	ТД.КоличествоЭкземпляров = 1;
	ТД.Защита = Истина;
	//ТД.ПолеСлева = 2;
	ТД.ТолькоПросмотр = Истина;
	ТД.ОтображатьСетку = Истина;
	ТД.ОтображатьЗаголовки = Ложь;
	
		
	//Возврат ТабличныйДокумент;
	Возврат ТД;
КонецФункции

Процедура ПечатьЗаголовка(ТД, Макет, строкаС, ВнешняяКомпонента)
	
	Область = Макет.ПолучитьОбласть("НомерСерии");
	Область.Параметры.НомерСерии = строкаС.НомерСерии;
	Область.Параметры.Артикул = строкаС.АртикулУпаковки;
	
	Если ЗначениеЗаполнено(строкаС.НомерСерии) Тогда
		ПараметрыШтрихкода = новый Структура("ТипКода, Штрихкод, Ширина, Высота, ПрозрачныйФон, ОтображатьТекст",
		99, строкаС.НомерСерии, 300, 5, Истина, Ложь);
		
		картинка = ПолучитьКартинкуШтрихкода(ВнешняяКомпонента, ПараметрыШтрихкода);
		Область.Рисунки.Штрих2.Картинка = картинка;
	КонецЕсли;
	
	ТД.Вывести(Область);
	
КонецПроцедуры

Процедура ПечатьПодвала(ТД, Макет, строкаС)
	
	ПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
	ТестоваяСтрока = Макет.ПолучитьОбласть("ТестоваяСтрока");
	
	Область = Макет.ПолучитьОбласть("НомерСерииПодвал");
	Область.Параметры.НомерСерии = строкаС.НомерСерии;
	
	Пока ТД.ПроверитьВывод(ТестоваяСтрока)и ТД.ВысотаТаблицы%47<>0   цикл
		ТД.Вывести(ПустаяСтрока);
	КонецЦикла;
	 		
	ТД.Вывести(Область);
	
КонецПроцедуры

Процедура ЗадатьОформление(область, ОформлениеПоля)
	//Если ОформлениеПоля.АвтоОтступ.Использование Тогда
	//	область.АвтоОтступ = ОформлениеПоля.АвтоОтступ.Значение;
	//КонецЕсли;
	//Если ОформлениеПоля.ВертикальноеПоложение.Использование Тогда
	//	область.ВертикальноеПоложение = ОформлениеПоля.ВертикальноеПоложение.Значение;
	//КонецЕсли;
	//Если ОформлениеПоля.ВыделятьОтрицательные.Использование Тогда
	//	область.ВыделятьОтрицательные = ОформлениеПоля.ВыделятьОтрицательные.Значение;
	//КонецЕсли;
	//Если ОформлениеПоля.ГоризонтальноеПоложение.Использование Тогда
	//	область.ГоризонтальноеПоложение = ОформлениеПоля.ГоризонтальноеПоложение.Значение;
	//КонецЕсли;
	//Если ОформлениеПоля.ОриентацияТекста.Использование Тогда
	//	область.ОриентацияТекста = ОформлениеПоля.ОриентацияТекста.Значение;
	//КонецЕсли;
	//Если ОформлениеПоля.Отступ.Использование Тогда
	//	область.Отступ = ОформлениеПоля.Отступ.Значение;
	//КонецЕсли;
	//Если ОформлениеПоля.Текст.Использование Тогда
	//	область.Текст = ОформлениеПоля.Текст.Значение;
	//КонецЕсли;
	//Если ОформлениеПоля.Формат.Использование Тогда
	//	область.Формат = ОформлениеПоля.Формат.Значение;
	//КонецЕсли;
	//Если ОформлениеПоля.ЦветТекста.Использование Тогда
	//	область.ЦветТекста = ОформлениеПоля.ЦветТекста.Значение;
	//КонецЕсли;
	//Если ОформлениеПоля.ЦветФона.Использование Тогда
	//	область.ЦветФона = ОформлениеПоля.ЦветФона.Значение;
	//КонецЕсли;
	//Если ОформлениеПоля.Шрифт.Использование Тогда
	//	область.Шрифт = ОформлениеПоля.Шрифт.Значение;
	//КонецЕсли;
КонецПроцедуры

Функция ПолучитьКартинкуШтрихкода(ВнешняяКомпонента, ПараметрыШтрихкода) Экспорт
	
	Если ВнешняяКомпонента = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка подключения внешней компоненты печати штрихкода.'");
	КонецЕсли;
	
	// Зададим размер формируемой картинки.
	ВнешняяКомпонента.Ширина = Окр(ПараметрыШтрихкода.Ширина);
	ВнешняяКомпонента.Высота = Окр(ПараметрыШтрихкода.Высота);
	ВнешняяКомпонента.АвтоТип = Ложь;
	
	ШтрихкодВрем = Строка(ПараметрыШтрихкода.Штрихкод); // Преобразуем явно в строку.
	
	Если ПараметрыШтрихкода.ТипКода = 99 Тогда
		ТипШтрихкодаВрем = ОпределитьТипШтрихкода(ШтрихкодВрем);
		Если ТипШтрихкодаВрем = "EAN8" Тогда
			ВнешняяКомпонента.ТипКода = 0;
		ИначеЕсли ТипШтрихкодаВрем = "EAN13" Тогда
			ВнешняяКомпонента.ТипКода = 1;
			// Если код содержит контрольный символ, обязательно указываем.
			ВнешняяКомпонента.СодержитКС = СтрДлина(ШтрихкодВрем) = 13;
		ИначеЕсли ТипШтрихкодаВрем = "EAN128" Тогда
			ВнешняяКомпонента.ТипКода = 2;
		ИначеЕсли ТипШтрихкодаВрем = "CODE39" Тогда
			ВнешняяКомпонента.ТипКода = 3;
		ИначеЕсли ТипШтрихкодаВрем = "CODE128" Тогда
			ВнешняяКомпонента.ТипКода = 4;
		ИначеЕсли ТипШтрихкодаВрем = "ITF14" Тогда
			ВнешняяКомпонента.ТипКода = 11;
		ИначеЕсли ТипШтрихкодаВрем = "QR" Тогда
			ВнешняяКомпонента.ТипКода = 16;
		ИначеЕсли ТипШтрихкодаВрем = "EAN13Addon2" Тогда
			ВнешняяКомпонента.ТипКода = 14;
		ИначеЕсли ТипШтрихкодаВрем = "EAN13Addon5" Тогда
			ВнешняяКомпонента.ТипКода = 15;
		Иначе
			ВнешняяКомпонента.АвтоТип = Истина;
		КонецЕсли;
	Иначе
		ВнешняяКомпонента.АвтоТип = Ложь;
		ВнешняяКомпонента.ТипКода = ПараметрыШтрихкода.ТипКода;
	КонецЕсли;
	
	Если ПараметрыШтрихкода.Свойство("ПрозрачныйФон") Тогда
		ВнешняяКомпонента.ПрозрачныйФон = ПараметрыШтрихкода.ПрозрачныйФон;
	КонецЕсли;
	
	Если ПараметрыШтрихкода.Свойство("ТипВходныхДанных") Тогда
		ВнешняяКомпонента.ТипВходныхДанных = ПараметрыШтрихкода.ТипВходныхДанных;
	КонецЕсли;
	
	Если ПараметрыШтрихкода.Свойство("GS1DatabarКоличествоСтрок") Тогда
		ВнешняяКомпонента.GS1DatabarКоличествоСтрок = ПараметрыШтрихкода.GS1DatabarКоличествоСтрок;
	КонецЕсли;
	
	ВнешняяКомпонента.ОтображатьТекст = ПараметрыШтрихкода.ОтображатьТекст;
	// Формируем картинку штрихкода.
	ВнешняяКомпонента.ЗначениеКода = ШтрихкодВрем;
	// Угол поворота штрихкода.
	ВнешняяКомпонента.УголПоворота = ?(ПараметрыШтрихкода.Свойство("УголПоворота"), ПараметрыШтрихкода.УголПоворота, 0);
	// Уровень коррекции QR кода (L=0, M=1, Q=2, H=3).
	ВнешняяКомпонента.УровеньКоррекцииQR = ?(ПараметрыШтрихкода.Свойство("УровеньКоррекцииQR"), ПараметрыШтрихкода.УровеньКоррекцииQR, 1);
	
	// Для обеспечения совместимости с предыдущими версиями БПО.
	Если Не ПараметрыШтрихкода.Свойство("Масштабировать")
		Или (ПараметрыШтрихкода.Свойство("Масштабировать") И ПараметрыШтрихкода.Масштабировать) Тогда
		
		Если Не ПараметрыШтрихкода.Свойство("СохранятьПропорции")
				Или (ПараметрыШтрихкода.Свойство("СохранятьПропорции") И Не ПараметрыШтрихкода.СохранятьПропорции) Тогда
			
			// Если установленная нами ширина меньше минимально допустимой для этого штрихкода.
			Если ВнешняяКомпонента.Ширина < ВнешняяКомпонента.МинимальнаяШиринаКода Тогда
				ВнешняяКомпонента.Ширина = ВнешняяКомпонента.МинимальнаяШиринаКода;
			КонецЕсли;
			
			// Если установленная нами высота меньше минимально допустимой для этого штрихкода.
			Если ВнешняяКомпонента.Высота < ВнешняяКомпонента.МинимальнаяВысотаКода Тогда
				ВнешняяКомпонента.Высота = ВнешняяКомпонента.МинимальнаяВысотаКода;
			КонецЕсли;
			
		ИначеЕсли ПараметрыШтрихкода.Свойство("СохранятьПропорции") И ПараметрыШтрихкода.СохранятьПропорции Тогда
			
			Пока ВнешняяКомпонента.Ширина < ВнешняяКомпонента.МинимальнаяШиринаКода 
				Или ВнешняяКомпонента.Высота < ВнешняяКомпонента.МинимальнаяВысотаКода Цикл
				
				// Если установленная нами ширина меньше минимально допустимой для этого штрихкода.
				Если ВнешняяКомпонента.Ширина < ВнешняяКомпонента.МинимальнаяШиринаКода Тогда
					ВнешняяКомпонента.Ширина = ВнешняяКомпонента.МинимальнаяШиринаКода;
					ВнешняяКомпонента.Высота = (ВнешняяКомпонента.МинимальнаяШиринаКода / Окр(ПараметрыШтрихкода.Ширина)) * Окр(ПараметрыШтрихкода.Высота);
				КонецЕсли;
				
				// Если установленная нами высота меньше минимально допустимой для этого штрихкода.
				Если ВнешняяКомпонента.Высота < ВнешняяКомпонента.МинимальнаяВысотаКода Тогда
					ВнешняяКомпонента.Высота = ВнешняяКомпонента.МинимальнаяВысотаКода;
					ВнешняяКомпонента.Ширина = (ВнешняяКомпонента.МинимальнаяВысотаКода / Окр(ПараметрыШтрихкода.Высота)) * Окр(ПараметрыШтрихкода.Ширина);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	// ВертикальноеВыравниваниеКода: 1 - по верхнему краю, 2 - по центру, 3 - по нижнему краю.
	Если ПараметрыШтрихкода.Свойство("ВертикальноеВыравнивание") И (ПараметрыШтрихкода.ВертикальноеВыравнивание > 0) Тогда
		ВнешняяКомпонента.ВертикальноеВыравниваниеКода = ПараметрыШтрихкода.ВертикальноеВыравнивание;
	Иначе
		ВнешняяКомпонента.ВертикальноеВыравниваниеКода = 2;	
	КонецЕсли;
	
	Если ПараметрыШтрихкода.Свойство("РазмерШрифта") И (ПараметрыШтрихкода.РазмерШрифта > 0) 
		И (ПараметрыШтрихкода.ОтображатьТекст) И (ВнешняяКомпонента.РазмерШрифта <> ПараметрыШтрихкода.РазмерШрифта) Тогда
		ВнешняяКомпонента.РазмерШрифта = ПараметрыШтрихкода.РазмерШрифта;
	КонецЕсли;
	
	Если ПараметрыШтрихкода.Свойство("РазмерШрифта") И ПараметрыШтрихкода.РазмерШрифта > 0
		И ПараметрыШтрихкода.Свойство("МонохромныйШрифт") Тогда
		
		Если ПараметрыШтрихкода.МонохромныйШрифт Тогда
			ВнешняяКомпонента.МаксимальныйРазмерШрифтаДляПринтеровНизкогоРазрешения = ПараметрыШтрихкода.РазмерШрифта + 1;
		Иначе
			ВнешняяКомпонента.МаксимальныйРазмерШрифтаДляПринтеровНизкогоРазрешения = -1;
		КонецЕсли;
		
	КонецЕсли;
	
	// Сформируем картинку
	ДвоичныеДанныеКартинки = ВнешняяКомпонента.ПолучитьШтрихкод();
	
	// Если картинка сформировалась.
	Если ДвоичныеДанныеКартинки <> Неопределено Тогда
		// Формируем из двоичных данных.
		Возврат Новый Картинка(ДвоичныеДанныеКартинки);
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

Функция ОпределитьТипШтрихкода(Штрихкод) Экспорт
	
	Возврат МенеджерОборудованияКлиентСервер.ОпределитьТипШтрихкода(Штрихкод);
	
КонецФункции

Функция ПодключитьВнешнююКомпонентуПечатиШтрихкода_старый() Экспорт
	
	//ПодключениеВыполнено = ПодключитьВнешнююКомпоненту(ПоместитьВоВременноеХранилище(ПолучитьМакет("КомпонентаПечатиШтрихкодов")), "КартинкаШтрихкодаOLD", ТипВнешнейКомпоненты.COM);
	//ПодключениеВыполнено = ПодключитьВнешнююКомпоненту(ПоместитьВоВременноеХранилище(ЭтотОбъект.ПолучитьМакет("КомпонентаПечатиШтрихкодов_БП")), "КартинкаШтрихкодаOLD", ТипВнешнейКомпоненты.COM);
	//ПодключениеВыполнено = ПодключитьВнешнююКомпоненту(ПоместитьВоВременноеХранилище(ПолучитьМакет("КомпонентаПечатиШтрихкодов_БПО")), "КартинкаШтрихкода", ТипВнешнейКомпоненты.COM);
	
	ПодключениеВыполнено = ПодключитьВнешнююКомпоненту(ПоместитьВоВременноеХранилище(Обработки.гф_ПечатьЭтикетокГС1.ПолучитьМакет("КомпонентаПечатиШтрихкодов_БП")), "КартинкаШтрихкодаOLD", ТипВнешнейКомпоненты.COM);
		
	// Создадим объект внешней компоненты.
	Если ПодключениеВыполнено Тогда
		ВнешняяКомпонента = Новый("AddIn.КартинкаШтрихкодаOLD.Barcode");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	// Если нет возможности рисовать.
	Если НЕ ВнешняяКомпонента.ГрафикаУстановлена Тогда
		// То картинку сформировать не сможем.
		Возврат Неопределено;
	Иначе
		// Установим основные параметры компоненты.
		ВнешняяКомпонента.РазмерШрифта = 12;
		ВнешняяКомпонента.ВидимостьКС = Ложь;
		ВнешняяКомпонента.ОтображатьТекст = Ложь;
		ВнешняяКомпонента.ПрозрачныйФон = Истина;
		ВнешняяКомпонента.Высота = 120;
		ВнешняяКомпонента.Ширина = 120;
		ВнешняяКомпонента.Пропорции = "1:1";
		ВнешняяКомпонента.РазделителиКода = 29;
		Возврат ВнешняяКомпонента;
	КонецЕсли;
	
КонецФункции

Функция ПодключитьВнешнююКомпонентуПечатиШтрихкода() Экспорт
	
	//ПодключениеВыполнено = ПодключитьВнешнююКомпоненту(ПоместитьВоВременноеХранилище(ПолучитьМакет("КомпонентаПечатиШтрихкодов")), "КартинкаШтрихкода", ТипВнешнейКомпоненты.COM);
	//ПодключениеВыполнено = ПодключитьВнешнююКомпоненту(ПоместитьВоВременноеХранилище(ПолучитьМакет("КомпонентаПечатиШтрихкодов_БП")), "КартинкаШтрихкода", ТипВнешнейКомпоненты.COM);
	
	//ПодключениеВыполнено = ПодключитьВнешнююКомпоненту(ПоместитьВоВременноеХранилище(ЭтотОбъект.ПолучитьМакет("КомпонентаПечатиШтрихкодов_БПО")), "КартинкаШтрихкода", ТипВнешнейКомпоненты.COM);
	ПодключениеВыполнено = ПодключитьВнешнююКомпоненту(ПоместитьВоВременноеХранилище(Обработки.гф_ПечатьЭтикетокГС1.ПолучитьМакет("КомпонентаПечатиШтрихкодов_БПО")), "КартинкаШтрихкода", ТипВнешнейКомпоненты.COM);
	
	// Создадим объект внешней компоненты.
	Если ПодключениеВыполнено Тогда
		ВнешняяКомпонента = Новый("AddIn.КартинкаШтрихкода.Barcode");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	// Если нет возможности рисовать.
	Если НЕ ВнешняяКомпонента.ГрафикаУстановлена Тогда
		// То картинку сформировать не сможем.
		Возврат Неопределено;
	Иначе
		// Установим основные параметры компоненты.
		ВнешняяКомпонента.РазмерШрифта = 12;
		ВнешняяКомпонента.ВидимостьКС = Ложь;
		ВнешняяКомпонента.ОтображатьТекст = Ложь;
		ВнешняяКомпонента.ПрозрачныйФон = Истина;
		ВнешняяКомпонента.Высота = 120;
		ВнешняяКомпонента.Ширина = 120;
		ВнешняяКомпонента.Пропорции = "1:1";
		ВнешняяКомпонента.РазделителиКода = 29;
		Возврат ВнешняяКомпонента;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДеревоДанных(ПараметрыПечати) 
	
	//Запрос = Новый Запрос(
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	Т.Номенклатура КАК Номенклатура
	//|ПОМЕСТИТЬ Товары
	//|ИЗ
	//|	&Товары КАК Т
	//|ГДЕ
	//|	Т.Пометка
	//|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	Номенклатура
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	Т.Номенклатура КАК Номенклатура,
	//|	С.Свойство КАК Свойство,
	//|	С.Значение КАК Значение
	//|ИЗ
	//|	Товары КАК Т
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК С
	//|		ПО Т.Номенклатура = С.Объект
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	Номенклатура,
	//|	Свойство
	//|ИТОГИ ПО
	//|	Номенклатура
	//|АВТОУПОРЯДОЧИВАНИЕ");
	
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	&Товары КАК Т
		|ГДЕ
		|	Т.Пометка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Номенклатура КАК Номенклатура,
		|	НоменклатураДополнительныеРеквизиты.Свойство КАК Свойство,
		|	НоменклатураДополнительныеРеквизиты.Значение КАК Значение
		|ИЗ
		|	Товары КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|		ПО Т.Номенклатура = НоменклатураДополнительныеРеквизиты.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Свойство
		|ИТОГИ ПО
		|	Номенклатура
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	//ТаблицаУслуги=Объект.Товары.Выгрузить();  реквизитформыВзначение("Объект.Товары")
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Товары", ПараметрыПечати.РеквиизитФорма.Товары.Выгрузить());
	Запрос.УстановитьПараметр("Объекты", ПараметрыПечати.РеквиизитФорма.СписокОбъектов);
	результат = Запрос.Выполнить();
	
	Возврат результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

Функция ПолучитьСоответствие(ВидНоменклатуры, Соответствие)
	
	нашли = Соответствие.Получить(ВидНоменклатуры);
	//Если нашли = Неопределено Тогда
	//	ПолучитьСоответствие(ВидНоменклатуры.Родитель, Соответствие);
	//КонецЕсли;
	
	возврат нашли;
КонецФункции

Функция НайтиЦенуПоТипу(Номенклатура, ТипЦен)
	
	запрос = новый Запрос(
	"ВЫБРАТЬ
	|	а.ТипЦен КАК ТипЦен,
	|	а.Номенклатура КАК Номенклатура,
	|	а.Цена / ЕСТЬNULL(а.ЕдиницаИзмерения.Коэффициент, 1) КАК Цена,
	|	а.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			,
	|			Номенклатура = &Номенклатура
	|				И ТипЦен = &ТипЦен) КАК а");
	запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	запрос.УстановитьПараметр("ТипЦен", ТипЦен);
	выборка = запрос.Выполнить().Выбрать();
	
	Если выборка.Следующий() Тогда
		возврат выборка.Цена;
	Иначе
		возврат 0;
	КонецЕсли;
	
КонецФункции 

Функция Перевод(Объект, Язык)
	ОбъектБокс = Обработки.RC_ДиспетчерПереводов.ПолучитьСлужебныйКонтейнер(Объект);
	Значение = ?(ОбъектБокс.ЭтоДокумент,
	ПолучитьПереводПредставленияДокумента(ОбъектБокс.Объект, Язык),
	РегистрыСведений.RC_Переводы.Получить(Новый Структура("Объект, Язык", ОбъектБокс.Объект, Язык)).Значение);
	возврат Значение;
КонецФункции // Перевод()

Функция ПолучитьПереводПредставленияДокумента(Объект, Язык)
	
	Возврат Перевод(Объект.Метаданные().Синоним, Язык) + " " + Объект.Номер + " " + Перевод("от", Язык) + " " + Объект.Дата;
	
КонецФункции

         
