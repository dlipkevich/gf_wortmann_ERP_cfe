
&НаКлиенте
Процедура Перевести(Команда)
	
	ВывестиНаСервере();
	
	Индикатор = 0;
	КоличествоСтрок = Результат.ВысотаТаблицы;
	КоличествоКолонок = Результат.ШиринаТаблицы;

	ДляПеревода.Очистить();
	
	значениеМножитель = 2;
	
	ГраницаИндикатора = КоличествоСтрок * значениеМножитель;
	
	значениеПроцент = 100;
	
	Для Строка = 1 По КоличествоСтрок Цикл
		ОбработкаПрерыванияПользователя();
		
		Индикатор = Индикатор + 1;
		процент = Окр(значениеПроцент * Индикатор / ГраницаИндикатора, 0);
		Состояние("Трансляция ", процент, "Обработка таблицы источника");
		
		Для Колонка = 1 По КоличествоКолонок Цикл
			ОбработкаПрерыванияПользователя();
			Текст = Результат.Область(Строка, Колонка, Строка, Колонка).Текст;
			Если Текст > "" Тогда
				новая = ДляПеревода.Добавить();
				новая.Колонка = Колонка;
				новая.Строка = Строка;
				новая.Текст = СокрЛП(Текст);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ГраницаИндикатора = КоличествоСтрок + ДляПеревода.Количество();
	
	ПеревестиТекст(значениеПроцент, ГраницаИндикатора, Индикатор);
	
	Элементы.Панель.ТекущаяСтраница = Элементы.ГруппаРезультат;
	Состояние("");
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиТекст(значениеПроцент, ГраницаИндикатора, Индикатор)

	Если ИспользоватьАПИ Тогда
		
		НаправлениеПеревода = ОпределитьНаправлениеПеревода();		
		
		ИмяФайла = ПолучитьИмяВременногоФайла();
		
		Для каждого строка Из ДляПеревода Цикл
			ОбработкаПрерыванияПользователя();
			
			Индикатор = Индикатор + 1;
			процент = Окр(значениеПроцент * Индикатор / ГраницаИндикатора, 0);
			Состояние("Трансляция", процент, "Обработка таблицы результата");
			
			значениеТекст = ПереводОнлайн(строка.Текст, НаправлениеПеревода, ИмяФайла);			
			Результат.Область(строка.Строка, строка.Колонка, строка.Строка, строка.Колонка).Текст = значениеТекст;
			
		КонецЦикла;
		
		Если ИмяФайла.Существует() Тогда		
			УдалитьФайлы(ИмяФайла);		
		КонецЕсли;
		
	ИначеЕсли ИспользоватьСловарь Тогда
		Если Не ЗначениеЗаполнено(ЯзыкПеревода) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю("Язык перевода не задан, будет использована транслитерация.");
		КонецЕсли;
		
		Для каждого строка Из ДляПеревода Цикл
			ОбработкаПрерыванияПользователя();
			
			Индикатор = Индикатор + 1;
			процент = Окр(значениеПроцент * Индикатор / ГраницаИндикатора, 0);
			Состояние("Трансляция", процент, "Обработка таблицы результата");
			
			Транслит = Транслитерация(строка.Текст);
			Результат.Область(строка.Строка, строка.Колонка, строка.Строка, строка.Колонка).Текст = Транслит;
		КонецЦикла;	
	Иначе
		Для каждого строка Из ДляПеревода Цикл
			ОбработкаПрерыванияПользователя();
			
			Индикатор = Индикатор + 1;
			процент = Окр(значениеПроцент * Индикатор / ГраницаИндикатора, 0);
			Состояние("Трансляция", процент, "Обработка таблицы результата");
			
			Транслит = Транслитерация(строка.Текст, Истина);
			Результат.Область(строка.Строка, строка.Колонка, строка.Строка, строка.Колонка).Текст = Транслит;
		КонецЦикла;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Функция ОпределитьНаправлениеПеревода()

	Если ЯзыкПеревода = ПредопределенноеЗначение("Справочник.гф_ВидыЯзыков.Deutsch") Тогда
		НаправлениеПеревода = "ru-de";
	ИначеЕсли ЯзыкПеревода = ПредопределенноеЗначение("Справочник.гф_ВидыЯзыков.Français") Тогда
		НаправлениеПеревода = "ru-fr";
	Иначе
		НаправлениеПеревода = "ru-en";
	КонецЕсли;
	
	Возврат НаправлениеПеревода;

КонецФункции

&НаСервере
Процедура ВывестиНаСервере()

	Результат.Очистить();
	Результат.Вывести(Источник);	

КонецПроцедуры

&НаСервере
Функция ПолучитьОтвет(ИмяФайла)
	
	текст = "";
	
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(ИмяФайла);
	Пока Чтение.Прочитать() Цикл
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя = "text" Тогда
			
			Если Чтение.Прочитать() И Чтение.ТипУзла = ТипУзлаXML.Текст Тогда
				текст = Чтение.Значение;
				Прервать;
			КонецЕсли;
			
		КонецЕсли;		
	КонецЦикла;
	
	Возврат текст;
КонецФункции // ПолучитьОтвет()

&НаСервере
Функция ПолучитьОтветОшибки(ИмяФайла)
	
	текст = "";
	
	Чтение = Новый ЧтениеXML;
	
	ФайлСуществует = ПолучениеОбновленийПрограммыКлиентСервер.ФайлСуществует(ИмяФайла);
	
	Если ФайлСуществует Тогда
		
		Чтение.ОткрытьФайл(ИмяФайла);
		Пока Чтение.Прочитать() Цикл
			
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя = "Error" Тогда
				текст = Чтение.значениеАтрибута("message");
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		текст = "";	
	КонецЕсли;
	
	Возврат текст;
	
КонецФункции 

&НаСервере
Функция ПереводВСловаре(Данные)
	
	Если ЗначениеЗаполнено(ЯзыкПеревода) Тогда
		запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	а.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.гф_ПереводЗначенийРеквизитовИСвойств КАК а
		|ГДЕ
		|	а.Объект = &Объект
		|	И а.Язык = &Язык");
		запрос.УстановитьПараметр("Объект", Данные);
		запрос.УстановитьПараметр("Язык", ЯзыкПеревода);
		выборка = запрос.Выполнить().Выбрать();
		Если выборка.Следующий() Тогда
			Возврат выборка.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
		
КонецФункции

&НаКлиенте
Функция ПереводОнлайн(Данные, НаправлениеПеревода, ИмяФайла)
	
	Если Данные = "" Тогда
		Возврат "";
	КонецЕсли;
	
	ПереводДанных = ПереводВСловаре(Данные);
	
	Если ПереводДанных <> Неопределено Тогда
		Возврат ПереводДанных;
	КонецЕсли;
	
	значениеСертификатКлиента = Новый СертификатКлиентаWindows(СпособВыбораСертификатаWindows.Выбирать);
	
	SSL = Новый ЗащищенноеСоединениеOpenSSL(значениеСертификатКлиента, Новый СертификатыУдостоверяющихЦентровWindows());
	Сервер = Новый HTTPСоединение("translate.yandex.net", , , , , 1800, SSL);
	
	строкаЧасть1 = "api/v1.5/tr/translate?key=trnsl.1.1.20181226T125308Z.";
	строкаЧасть2 = "54dca3bae7d879b4.18dcda3aa231b8f440cd6afcc1fada05483d49bc&lang=";
	
	СтрокаПараметраПолучения = строкаЧасть1 + строкаЧасть2 + НаправлениеПеревода + "&text=" + Данные;
	запрос = Новый HTTPЗапрос(СтрокаПараметраПолучения); 
	ответ = Сервер.Получить(запрос, ИмяФайла);
	
	статусУспеха = 200;
	
	Если ответ.КодСостояния = статусУспеха Тогда
		текст = ПолучитьОтвет(ИмяФайла);
		Возврат текст;
	Иначе
		текст = ПолучитьОтветОшибки(ИмяФайла);
	КонецЕсли;
	
	ОбщегоНазначенияКлиент.СообщитьПользователю("Ошибка использования API: " + текст);
	
КонецФункции

&НаСервере
Функция Транслитерация(Данные, ТолькоТранслитерация = Ложь)
	
	Если Данные = "" Тогда
		Возврат "";
	КонецЕсли;
		
	Если ТолькоТранслитерация = Ложь Тогда
	
		ПереводДанных = ПереводВСловаре(Данные);
		мСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Данные, " .");
		
		ПереводСлова = "";
		ПереводТекСлова = "";
			
		ПереводДанных = ПроизвестиТранслитерацию(ПереводДанных, ПереводСлова, мСлов, Данные);
		
		Если ЗначениеЗаполнено(ПереводДанных) Тогда
			Возврат ПереводДанных;
		КонецЕсли;
		
	Иначе	
		
		рез = Транслит(Данные);
		
		Возврат рез;
	
	КонецЕсли;
	
КонецФункции // Транслитерация()

&НаСервере
Функция ПроизвестиТранслитерацию(ПереводДанных, ПереводСлова, мСлов, Данные)
	
	ПороговоеЗначение = 2;
	
	Если ПереводДанных = Неопределено Тогда
		Если мСлов.Количество() >= ПороговоеЗначение Тогда
			Для каждого Слово  Из мСлов Цикл
				ПереводТекСлова = ПереводВСловаре(Слово);
				Если ПереводТекСлова <> Неопределено Тогда
					ПереводСлова = ПереводСлова + " " + ПереводТекСлова;
				Иначе
					рез = Транслит(Слово);
					ПереводСлова = ПереводСлова + " " + рез;
				КонецЕсли;
			КонецЦикла;
			ПереводДанных = СокрЛП(ПереводСлова);
		Иначе
			ПереводДанных = Транслит(Данные);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПереводДанных;

КонецФункции

&НаСервере
Функция Транслит(Данные)

	длина = СтрДлина(Данные);
	рез = "";
	Для а = 1 По длина Цикл
		символ = сред(Данные, а, 1);
		Отбор = Новый Структура;
		Отбор.Вставить("Источник", символ);
		нашли = Перевод.НайтиСтроки(Отбор);
		
		Если нашли.Количество() = 0 Тогда
			рез = рез + символ;
		Иначе
			рез = рез + нашли[0].Перевод;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат рез;	

КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьАПИ = Ложь;	
	
	Структура = Новый Структура;
	Структура.Вставить("а", "a");
	Структура.Вставить("б", "b");
	Структура.Вставить("в", "v");
	Структура.Вставить("г", "g");
	Структура.Вставить("д", "d");
	Структура.Вставить("е", "e");
	Структура.Вставить("ё", "yo");
	Структура.Вставить("ж", "zh");
	Структура.Вставить("з", "z");
	Структура.Вставить("и", "i");
	Структура.Вставить("й", "y");
	Структура.Вставить("к", "k");
	Структура.Вставить("л", "l");
	Структура.Вставить("м", "m");
	Структура.Вставить("н", "n");
	Структура.Вставить("о", "o");
	Структура.Вставить("п", "p");
	Структура.Вставить("р", "r");
	Структура.Вставить("с", "s");
	Структура.Вставить("т", "t");
	Структура.Вставить("у", "u");
	Структура.Вставить("ф", "f");
	Структура.Вставить("х", "kh");
	Структура.Вставить("ц", "ts");
	Структура.Вставить("ч", "ch");
	Структура.Вставить("ш", "sh");
	Структура.Вставить("щ", "sch");
	Структура.Вставить("ъ", "''");
	Структура.Вставить("ы", "y");
	Структура.Вставить("ь", "'");
	Структура.Вставить("э", "e");
	Структура.Вставить("ю", "yu");
	Структура.Вставить("я", "ya");	
	
	Для каждого строка Из Структура Цикл
		новая = Перевод.Добавить();
		новая.Источник = строка.Ключ;
		новая.Перевод = строка.Значение;
	КонецЦикла;
	
	Структура = Новый Структура;
	Структура.Вставить("А", "A");
	Структура.Вставить("Б", "B");
	Структура.Вставить("В", "V");
	Структура.Вставить("Г", "G");
	Структура.Вставить("Д", "D");
	Структура.Вставить("Е", "E");
	Структура.Вставить("Ё", "Yo");
	Структура.Вставить("Ж", "Zh");
	Структура.Вставить("З", "Z");
	Структура.Вставить("И", "I");
	Структура.Вставить("Й", "J");
	Структура.Вставить("К", "K");
	Структура.Вставить("Л", "L");
	Структура.Вставить("М", "M");
	Структура.Вставить("Н", "N");
	Структура.Вставить("О", "O");
	Структура.Вставить("П", "P");
	Структура.Вставить("Р", "R");
	Структура.Вставить("С", "S");
	Структура.Вставить("Т", "T");
	Структура.Вставить("У", "U");
	Структура.Вставить("Ф", "F");
	Структура.Вставить("Х", "Kh");
	Структура.Вставить("Ц", "Ts");
	Структура.Вставить("Ч", "Ch");
	Структура.Вставить("Ш", "Sh");
	Структура.Вставить("Щ", "Sch");
	Структура.Вставить("Ъ", "''");
	Структура.Вставить("Ы", "Y");
	Структура.Вставить("Ь", "'");
	Структура.Вставить("Э", "E");
	Структура.Вставить("Ю", "Yu");
	Структура.Вставить("Я", "Ya");	
	
	Для каждого строка Из Структура Цикл
		новая = Перевод.Добавить();
		новая.Источник = строка.Ключ;
		новая.Перевод = строка.Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАПИ(Команда)
	ИспользоватьАПИ = Не ИспользоватьАПИ;
	Элементы.ФормаИспользоватьAPI.Пометка = ИспользоватьАПИ;
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСловарь(Команда)
	ИспользоватьСловарь = Не ИспользоватьСловарь;
	Элементы.ФормаИспользоватьСловарь.Пометка = ИспользоватьСловарь;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ФормаИспользоватьAPI.Пометка = ИспользоватьАПИ;
	ИспользоватьСловарь = Истина;
	Элементы.ФормаИспользоватьСловарь.Пометка = ИспользоватьСловарь;
	ЯзыкПеревода = ПредопределенноеЗначение("Справочник.гф_ВидыЯзыков.English");
	Источник.Область().РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	Результат.Область().РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРСПеревод(Команда)
	
	ОткрытьФорму("РегистрСведений.гф_ПереводЗначенийРеквизитовИСвойств.ФормаСписка", , ВладелецФормы);
	
КонецПроцедуры
