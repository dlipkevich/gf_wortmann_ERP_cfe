
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Объект.Дата = ТекущаяДатаСеанса();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораНазначения()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РаспределениеЗапасов.Номенклатура КАК Номенклатура,
	|	РаспределениеЗапасов.Назначение КАК Назначение,
	|	СУММА(РаспределениеЗапасов.Свободно) КАК Свободно
	|ПОМЕСТИТЬ СвободныеТовары
	|ИЗ
	|	РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
	|ГДЕ
	|	РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
	|	И РаспределениеЗапасов.Склад = &Склад
	|	И НЕ РаспределениеЗапасов.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	РаспределениеЗапасов.Номенклатура,
	|	РаспределениеЗапасов.Назначение
	|
	|ИМЕЮЩИЕ
	|	СУММА(РаспределениеЗапасов.Свободно) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ Различные
	|	СвободныеТовары.Назначение КАК Назначение
	|ИЗ
	|	СвободныеТовары КАК СвободныеТовары";
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Элементы.ИсходноеНазначение.СписокВыбора.Добавить(Выборка.Назначение);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущиеПриоритетыПриИзменении(Элемент)
	
	Для каждого стрТЧ Из Объект.ТекущиеПриоритеты Цикл
		ИсходныйНомерСтроки = стрТЧ.ПервоначальныйНомерСтроки;
		НовыйНомерСтроки = стрТЧ.НомерСтроки;
		Если Не ИзмененПриоритетВручную Тогда
			РазницаНомеровСтрок = стрТЧ.НомерСтроки - ИсходныйНомерСтроки;
			стрТЧ.НовыйПриоритет = стрТЧ.НовыйПриоритет + РазницаНомеровСтрок;
		КонецЕсли;
		стрТЧ.ПервоначальныйНомерСтроки = НовыйНомерСтроки;
	КонецЦикла;
	ИзмененПриоритетВручную = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущиеПриоритетыНовыйПриоритетПриИзменении(Элемент)
	ИзмененПриоритетВручную = Истина;
	Объект.ТекущиеПриоритеты.Сортировать("НовыйПриоритет Возр");
КонецПроцедуры

&НаКлиенте
Процедура ТекущиеПриоритетыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ИзмененПриоритетВручную = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТекущиеПриоритетыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекДанные = Элемент.ТекущиеДанные;
	Если Не ОтменаРедактирования И Не ЗначениеЗаполнено(ТекДанные["НовыйПриоритет"]) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(, "Не заполнено значение ""Новый приоритет""");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТекущиеПриоритетыЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы.ТекущиеПриоритеты.ТекущиеДанные;
	Партнер = ПолучитьПартнера(ТекДанные["Контрагент"]);
	П = Новый Структура;
	Отбор = Новый Структура;
	Если ЗначениеЗаполнено(ТекДанные["Организация"]) Тогда
		Отбор.Вставить("Организация", ТекДанные["Организация"]);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекДанные["Склад"]) Тогда
		Отбор.Вставить("Склад", ТекДанные["Склад"]);
	КонецЕсли;
	Отбор.Вставить("Партнер", Партнер);
	П.Вставить("Отбор", Отбор);
	ОткрытьФорму("Документ.ЗаказКлиента.ФормаВыбора", П, Элемент, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Асинх Процедура ЗаполнитьПриоритеты(Команда)
	Если Объект.ТекущиеПриоритеты.Количество() > 0 Тогда
		ТекстВопроса = "Табличная часть ""Текущие приоритеты"" непустая!
		|При заполнении существующие строки будут очищены.
		|Продолжить?";
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, , "Внимание!", КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Объект.ТекущиеПриоритеты.Очистить();
			ЗаполнитьПриоритетыНаСервере();
		КонецЕсли;
	Иначе
		ЗаполнитьПриоритетыНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПриоритетыНаСервере()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Приоритеты.Контрагент КАК Контрагент,
	|	Приоритеты.Организация КАК Организация,
	|	Приоритеты.Склад КАК Склад,
	|	Приоритеты.Заказ КАК Заказ,
	|	Приоритеты.Приоритет КАК ТекущийПриоритет,
	|	Приоритеты.Приоритет КАК НовыйПриоритет
	|ИЗ
	|	РегистрСведений.гф_ПриоритетыРезервов.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И Склад = &Склад) КАК Приоритеты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритеты.Приоритет";
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	ТаблицаПриоритетов = Запрос.Выполнить().Выгрузить();
	Объект.ТекущиеПриоритеты.Загрузить(ТаблицаПриоритетов);
	Для каждого стрПриоритеты Из Объект.ТекущиеПриоритеты Цикл
		стрПриоритеты["ПервоначальныйНомерСтроки"] = стрПриоритеты["НомерСтроки"];
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СохранитьНаСервере()
	тзТекущиеПриоритеты = Объект.ТекущиеПриоритеты.Выгрузить();
	мСтрокКЗаписи = Новый Массив;
	Для каждого стрТз Из тзТекущиеПриоритеты Цикл
		Если стрТз["ТекущийПриоритет"] <> стрТз["НовыйПриоритет"] Тогда
			мСтрокКЗаписи.Добавить(стрТз);
		КонецЕсли;
	КонецЦикла;
	тзКЗаписи = тзТекущиеПриоритеты.Скопировать(мСтрокКЗаписи);
	вспТЗ = тзКЗаписи.Скопировать();
	КвалификаторЧисла = Новый КвалификаторыЧисла(6, 0, ДопустимыйЗнак.Неотрицательный);
	ТипЧисло = Новый ОписаниеТипов("Число", КвалификаторЧисла);
	вспТЗ.Колонки.Добавить("колич", ТипЧисло);
	вспТЗ.ЗаполнитьЗначения(1, "колич");
	вспТЗ.Свернуть("Контрагент, Организация, Склад, Заказ", "колич");
	ЕстьДубли = Ложь;
	Для каждого стрТз Из вспТЗ Цикл
		Если стрТз["колич"] > 1 Тогда
			ЕстьДубли = Истина;
			ТекстСообщения = "найдены дубли строк по значениям: "
			+ " || Контрагент: " + стрТз["Контрагент"]
			+ " || Организация: " + стрТз["Организация"]
			+ " || Склад: " + стрТз["Склад"]
			+ " || Заказ: " + стрТз["Заказ"];
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЦикла;
	Если ЕстьДубли Тогда
		Возврат;
	КонецЕсли;
	Для каждого стрТз Из тзКЗаписи Цикл
		мз = РегистрыСведений.гф_ПриоритетыРезервов.СоздатьМенеджерЗаписи();
		мз.Контрагент = стрТз["Контрагент"];
		мз.Организация = стрТз["Организация"];
		мз.Склад = стрТз["Склад"];
		мз.Заказ = стрТз["Заказ"];
		мз.Период = Объект.Дата;
		мз.Прочитать();
		Если Не мз.Выбран() Тогда
			ЗаполнитьЗначенияСвойств(мз, стрТз);
			мз.Приоритет = стрТз["НовыйПриоритет"];
			мз.Период = Объект.Дата;
			мз.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	СохранитьНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПартнера(Контрагент)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "Партнер");
КонецФункции

&НаСервере
Процедура СкладПриИзмененииНаСервере()
	Элементы.ИсходноеНазначение.СписокВыбора.Очистить();
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ЗаполнитьСписокВыбораНазначения();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	СкладПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ИсходноеНазначениеПоУмолчанию = _омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначение(
	"СлужебноеНазначениеДляТоваров");
	Если ИсходноеНазначение.Количество() = 0 Тогда
		ИсходноеНазначение.Добавить(ИсходноеНазначениеПоУмолчанию);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ЗаполнитьСписокВыбораНазначения();
	КонецЕсли;	
	Элементы.ИсходноеНазначение.СписокВыбора.Добавить(ИсходноеНазначениеПоУмолчанию);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходноеНазначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПослеВыбораНазначенияИзСписка", ЭтотОбъект);
	СписокВыбора = Элементы.ИсходноеНазначение.СписокВыбора;
	СписокВыбораОтмеченные = Новый СписокЗначений;
	Для каждого Эл Из ИсходноеНазначение Цикл
		СписокВыбораОтмеченные.Добавить(Эл.Значение);
	КонецЦикла;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отмеченные", СписокВыбораОтмеченные);
	ПараметрыФормы.Вставить("ЗначенияДляВыбора", СписокВыбора);
	ПараметрыФормы.Вставить("ЗначенияДляВыбораЗаполнены", Истина);
	ПараметрыФормы.Вставить("ОграничиватьВыборУказаннымиЗначениями", Истина);
	ПараметрыФормы.Вставить("Представление",  НСтр("ru = 'Выбор назначений'"));
	ПараметрыФормы.Вставить("ОписаниеТипов", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	УИД = Новый УникальныйИдентификатор();
	ОткрытьФорму(
		"ОбщаяФорма.ВводЗначенийСпискомСФлажками",
		ПараметрыФормы,
		ЭтотОбъект,
		УИД, , ,
		ОписаниеОповещенияОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораНазначенияИзСписка(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИсходноеНазначение.Очистить();
	Для каждого Эл Из Результат Цикл
		Если Эл.Пометка Тогда
			ИсходноеНазначение.Добавить(Эл.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНераспределеннымиОстатками(Команда)
	ЗаполнитьНераспределеннымиОстаткамиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНераспределеннымиОстаткамиНаСервере()
	// 5.2.08 (пункт 1.1.2.6)
КонецПроцедуры

#КонецОбласти
