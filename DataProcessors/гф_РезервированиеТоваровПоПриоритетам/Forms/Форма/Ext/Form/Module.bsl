
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Объект.Дата = ТекущаяДатаСеанса();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораНазначения()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Назначения.Ссылка КАК Назначение
	|ИЗ
	|	РегистрНакопления.гф_ДвижениеКодовМаркировкиОрганизации.Остатки(,
	|		ИСТИНА
	|			И Склад = &Склад
	|			И КМ.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка)) КАК КодаМаркировки
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист КАК УпаковочныйЛист
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК Назначения
	|		ПО УпаковочныйЛист.гф_Заказ = Назначения.Заказ
	|	ПО КодаМаркировки.КМ.ЗначениеШтрихкода = УпаковочныйЛист.Код";
	
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Элементы.ИсходноеНазначение.СписокВыбора.Добавить(Выборка.Назначение);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущиеПриоритетыПриИзменении(Элемент)

	Для каждого стрТЧ Из Объект.ТекущиеПриоритеты Цикл
		ПеремещениеСтрокиЧислом = стрТЧ["НомерСтроки"] - стрТЧ["ПервоначальныйНомерСтроки"];
		Если ПеремещениеСтрокиЧислом = 0 Тогда
			Продолжить;
		КонецЕсли;
		НаправлениеПеремещения =?(ПеремещениеСтрокиЧислом < 0, "вниз", "вверх");
		
		СтрокаКонкурент = ?(НаправлениеПеремещения = "вверх", 
		Объект.ТекущиеПриоритеты.Получить(Объект.ТекущиеПриоритеты.Индекс(стрТЧ) - 1), 
		Объект.ТекущиеПриоритеты.Получить(Объект.ТекущиеПриоритеты.Индекс(стрТЧ) + 1));
		
		стрТЧ["ПервоначальныйНомерСтроки"] = стрТЧ["НомерСтроки"];
		СтрокаКонкурент["ПервоначальныйНомерСтроки"] = СтрокаКонкурент["НомерСтроки"];
		Если Не ИзмененПриоритетВручную Тогда	
			Если СтрокаКонкурент["НовыйПриоритет"] = стрТЧ["НовыйПриоритет"] Тогда
				Продолжить;
			Иначе
				ПриоритетСдвигаемойСтроки = стрТЧ["ТекущийПриоритетИзменение"];
				ПриоритетСтрокиКонкурента = СтрокаКонкурент["ТекущийПриоритетИзменение"];
				
				стрТЧ["НовыйПриоритет"] = ПриоритетСтрокиКонкурента;
				СтрокаКонкурент["НовыйПриоритет"] = ПриоритетСдвигаемойСтроки;
				
				стрТЧ["ТекущийПриоритетИзменение"] = стрТЧ["НовыйПриоритет"];
				СтрокаКонкурент["ТекущийПриоритетИзменение"] = СтрокаКонкурент["НовыйПриоритет"]
			КонецЕсли;
		Иначе	
			стрТЧ["ТекущийПриоритетИзменение"] = стрТЧ["НовыйПриоритет"];
		КонецЕсли;
	КонецЦикла;
	ИзмененПриоритетВручную = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущиеПриоритетыНовыйПриоритетПриИзменении(Элемент)
	ТекДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные["НовыйПриоритет"] < 1 Тогда
			ТекДанные["НовыйПриоритет"] = 1;
		КонецЕсли;
	КонецЕсли;
	ИзмененПриоритетВручную = Истина;
	Объект.ТекущиеПриоритеты.Сортировать("НовыйПриоритет Возр");
КонецПроцедуры

&НаКлиенте
Процедура ТекущиеПриоритетыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ИзмененПриоритетВручную = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТекущиеПриоритетыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекДанные = Элемент.ТекущиеДанные;
	Если НоваяСтрока Тогда
		ТекДанные["ТекущийПриоритет"] = 0;
	КонецЕсли;
	Если Не ОтменаРедактирования И Не ЗначениеЗаполнено(ТекДанные["НовыйПриоритет"]) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(, "Не заполнено значение ""Новый приоритет""");
	КонецЕсли;
	
	Если Не Отказ Тогда
		ТекущиеПриоритетыПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущиеПриоритетыЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы.ТекущиеПриоритеты.ТекущиеДанные;
	Партнер = ПолучитьПартнера(ТекДанные["Контрагент"]);
	П = Новый Структура;
	Отбор = Новый Структура;
	Если ЗначениеЗаполнено(ТекДанные["Организация"]) Тогда
		Отбор.Вставить("Организация", ТекДанные["Организация"]);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекДанные["Склад"]) Тогда
		Отбор.Вставить("Склад", ТекДанные["Склад"]);
	КонецЕсли;
	Отбор.Вставить("Партнер", Партнер);
	П.Вставить("Отбор", Отбор);
	ОткрытьФорму("Документ.ЗаказКлиента.ФормаВыбора", П, Элемент, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура ЗаполнитьПриоритеты(Команда)
	Если Объект.ТекущиеПриоритеты.Количество() > 0 Тогда
		ТекстВопроса = "Табличная часть ""Текущие приоритеты"" непустая!
		|При заполнении существующие строки будут очищены.
		|Продолжить?";
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, , "Внимание!", КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Объект.ТекущиеПриоритеты.Очистить();
			ЗаполнитьПриоритетыНаСервере();
		КонецЕсли;
	Иначе
		ЗаполнитьПриоритетыНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПриоритетыНаСервере()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Приоритеты.Контрагент КАК Контрагент,
	|	Приоритеты.Организация КАК Организация,
	|	Приоритеты.Склад КАК Склад,
	|	Приоритеты.Заказ КАК Заказ,
	|	Приоритеты.Приоритет КАК ТекущийПриоритет,
	|	Приоритеты.Приоритет КАК НовыйПриоритет,
	|	Приоритеты.Приоритет КАК ТекущийПриоритетИзменение
	|ИЗ
	|	РегистрСведений.гф_ПриоритетыРезервов.СрезПоследних(
	|			&Дата,
	|			&УсловиеПоОрганизации
	|				И &УсловиеПоСкладу) КАК Приоритеты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритеты.Приоритет";

	Если ЗначениеЗаполнено(Объект.гф_Организация) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоОрганизации", "Организация В (&Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))");
		Запрос.УстановитьПараметр("Организация", Объект.гф_Организация);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоОрганизации", "ИСТИНА");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСкладу", "Склад В (&Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))");
		Запрос.УстановитьПараметр("Склад", Объект.Склад);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСкладу", "ИСТИНА");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	ТаблицаПриоритетов = Запрос.Выполнить().Выгрузить();
	Объект.ТекущиеПриоритеты.Загрузить(ТаблицаПриоритетов);
	Для каждого стрПриоритеты Из Объект.ТекущиеПриоритеты Цикл
		стрПриоритеты["ПервоначальныйНомерСтроки"] = стрПриоритеты["НомерСтроки"];
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СохранитьНаСервере()
	тзТекущиеПриоритеты = Объект.ТекущиеПриоритеты.Выгрузить();
	мСтрокКЗаписи = Новый Массив;
	Для каждого стрТз Из тзТекущиеПриоритеты Цикл
		Если стрТз["ТекущийПриоритет"] <> стрТз["НовыйПриоритет"] Тогда
			мСтрокКЗаписи.Добавить(стрТз);
		КонецЕсли;
	КонецЦикла;
	тзКЗаписи = тзТекущиеПриоритеты.Скопировать(мСтрокКЗаписи);
	вспТЗ = тзКЗаписи.Скопировать();
	КвалификаторЧисла = Новый КвалификаторыЧисла(6, 0, ДопустимыйЗнак.Неотрицательный);
	ТипЧисло = Новый ОписаниеТипов("Число", КвалификаторЧисла);
	вспТЗ.Колонки.Добавить("колич", ТипЧисло);
	вспТЗ.ЗаполнитьЗначения(1, "колич");
	вспТЗ.Свернуть("Контрагент, Организация, Склад, Заказ", "колич");
	ЕстьДубли = Ложь;
	Для каждого стрТз Из вспТЗ Цикл
		Если стрТз["колич"] > 1 Тогда
			ЕстьДубли = Истина;
			ТекстСообщения = "найдены дубли строк по значениям: "
			+ " || Контрагент: " + стрТз["Контрагент"]
			+ " || Организация: " + стрТз["Организация"]
			+ " || Склад: " + стрТз["Склад"]
			+ " || Заказ: " + стрТз["Заказ"];
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЦикла;
	Если ЕстьДубли Тогда
		Возврат;
	КонецЕсли;
	Для каждого стрТз Из тзКЗаписи Цикл
		мз = РегистрыСведений.гф_ПриоритетыРезервов.СоздатьМенеджерЗаписи();
		мз.Контрагент = стрТз["Контрагент"];
		мз.Организация = стрТз["Организация"];
		мз.Склад = стрТз["Склад"];
		мз.Заказ = стрТз["Заказ"];
		мз.Период = Объект.Дата;
		мз.Прочитать();
		Если Не мз.Выбран() Тогда
			ЗаполнитьЗначенияСвойств(мз, стрТз);
			мз.Приоритет = стрТз["НовыйПриоритет"];
			мз.Период = Объект.Дата;
			мз.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	СохранитьНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПартнера(Контрагент)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "Партнер");
КонецФункции

&НаСервере
Процедура СкладПриИзмененииНаСервере()
	Элементы.ИсходноеНазначение.СписокВыбора.Очистить();
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ЗаполнитьСписокВыбораНазначения();
	КонецЕсли;
	Если ЗначениеЗаполнено(ИсходноеНазначениеПоУмолчанию) Тогда
		Элементы.ИсходноеНазначение.СписокВыбора.Добавить(ИсходноеНазначениеПоУмолчанию);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	СкладПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ИсходноеНазначениеПоУмолчанию = ПредопределенноеЗначение("Справочник.Назначения.гф_Техническое");
	Если ИсходноеНазначение.Количество() = 0 Тогда
		ИсходноеНазначение.Добавить(ИсходноеНазначениеПоУмолчанию);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ЗаполнитьСписокВыбораНазначения();
	КонецЕсли;	
	Элементы.ИсходноеНазначение.СписокВыбора.Добавить(ИсходноеНазначениеПоУмолчанию);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходноеНазначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПослеВыбораНазначенияИзСписка", ЭтотОбъект);
	СписокВыбора = Элементы.ИсходноеНазначение.СписокВыбора;
	СписокВыбораОтмеченные = Новый СписокЗначений;
	Для каждого Эл Из ИсходноеНазначение Цикл
		СписокВыбораОтмеченные.Добавить(Эл.Значение);
	КонецЦикла;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отмеченные", СписокВыбораОтмеченные);
	ПараметрыФормы.Вставить("ЗначенияДляВыбора", СписокВыбора);
	ПараметрыФормы.Вставить("ЗначенияДляВыбораЗаполнены", Истина);
	ПараметрыФормы.Вставить("ОграничиватьВыборУказаннымиЗначениями", Истина);
	ПараметрыФормы.Вставить("Представление",  НСтр("ru = 'Выбор назначений'"));
	ПараметрыФормы.Вставить("ОписаниеТипов", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	УИД = Новый УникальныйИдентификатор();
	ОткрытьФорму(
	"ОбщаяФорма.ВводЗначенийСпискомСФлажками",
	ПараметрыФормы,
	ЭтотОбъект,
	УИД, , ,
	ОписаниеОповещенияОЗакрытии,
	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораНазначенияИзСписка(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИсходноеНазначение.Очистить();
	Для каждого Эл Из Результат Цикл
		Если Эл.Пометка Тогда
			ИсходноеНазначение.Добавить(Эл.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Объект.Склад = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНераспределеннымиОстатками(Команда)
	ВыполнитьЗаполнениеНераспределеннымиОстатками();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаполнениеНераспределеннымиОстатками()
	ЗаполнитьНераспределеннымиОстаткамиНаСервере();
	УстановитьОтборСтрокРаспределениеРезервов();
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаПоПустымНазначениям()
	
	Возврат "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УпаковочныйЛист.Ссылка КАК УпаковочныйЛист
	|ПОМЕСТИТЬ УЛ_безЗаказа
	|ИЗ
	|	РегистрНакопления.гф_ДвижениеКодовМаркировкиОрганизации.Остатки(, Склад = &Склад) КАК ДвижениеКодовОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист КАК УпаковочныйЛист
	|		ПО (ДвижениеКодовОстатки.КМ.ЗначениеШтрихкода = УпаковочныйЛист.Код)
	|ГДЕ
	|	УпаковочныйЛист.Ссылка ЕСТЬ НЕ NULL
	|	И УпаковочныйЛист.Проведен
	|	И УпаковочныйЛист.гф_Заказ = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
	|	И УпаковочныйЛист.гф_ТекущийОрдер = ЗНАЧЕНИЕ(Документ.РасходныйОрдерНаТовары.ПустаяСсылка)
	|	И ДвижениеКодовОстатки.КоличествоОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////01
	|ВЫБРАТЬ РАЗЛИЧНЫЕ 
	
	// //отладка
	//|первые 10 
	
	|	УпаковочныйЛистТовары.Ссылка КАК УпаковочныйЛист
	|ПОМЕСТИТЬ УЛ_безЗаказа_безНазначения
	|ИЗ
	|	Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ УЛ_безЗаказа КАК УЛ_безЗаказа
	|		ПО УпаковочныйЛистТовары.Ссылка = УЛ_безЗаказа.УпаковочныйЛист
	|ГДЕ
	|	УпаковочныйЛистТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////02
	|ВЫБРАТЬ
	|	УпаковочныйЛистТовары.Ссылка КАК УпаковочныйЛист,
	|	УпаковочныйЛистТовары.Номенклатура.Артикул КАК Артикул,
	|	УпаковочныйЛистТовары.Номенклатура КАК Номенклатура,
	|	УпаковочныйЛистТовары.Характеристика КАК Характеристика,
	|	УпаковочныйЛистТовары.Назначение КАК Назначение,
	|	УпаковочныйЛистТовары.КоличествоУпаковок КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ТоварыУпЛистаБезЗаказаБезНазначения
	|ИЗ
	|	Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ УЛ_безЗаказа_безНазначения КАК УЛ_безЗаказа_безНазначения
	|		ПО УпаковочныйЛистТовары.Ссылка = УЛ_безЗаказа_безНазначения.УпаковочныйЛист
	|
	|ГДЕ
	|	НЕ УпаковочныйЛистТовары.ЭтоУпаковочныйЛист
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////03
	|ВЫБРАТЬ
	|	РаспределениеЗапасов.Номенклатура.Артикул КАК Артикул,
	|	РаспределениеЗапасов.Номенклатура КАК Номенклатура,
	|	РаспределениеЗапасов.Характеристика КАК Характеристика,
	|	РаспределениеЗапасов.Назначение КАК Назначение,
	|	СУММА(РаспределениеЗапасов.Свободно) КАК КоличествоСвободно
	|ПОМЕСТИТЬ СвободныеЗапасы
	|ИЗ
	|	РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
	|ГДЕ
	|	РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
	|	И РаспределениеЗапасов.Склад = &Склад
	|	И РаспределениеЗапасов.Назначение = Значение(Справочник.Назначения.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	РаспределениеЗапасов.Номенклатура,
	|	РаспределениеЗапасов.Характеристика,
	|	РаспределениеЗапасов.Назначение,
	|	РаспределениеЗапасов.Номенклатура.Артикул
	|
	|ИМЕЮЩИЕ
	|	СУММА(РаспределениеЗапасов.Свободно) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////04
	|ВЫБРАТЬ
	|	ТоварыУпЛистаБезЗаказаБезНазначения.УпаковочныйЛист КАК IDКороба,
	|	ТоварыУпЛистаБезЗаказаБезНазначения.УпаковочныйЛист.гф_Комплектация КАК Комплектация,
	|	ТоварыУпЛистаБезЗаказаБезНазначения.Артикул КАК Артикул,
	|	ТоварыУпЛистаБезЗаказаБезНазначения.Номенклатура КАК Номенклатура,
	|	ТоварыУпЛистаБезЗаказаБезНазначения.Характеристика КАК Характеристика,
	|	ТоварыУпЛистаБезЗаказаБезНазначения.Назначение КАК ИсходноеНазначение,
	|	ТоварыУпЛистаБезЗаказаБезНазначения.КоличествоУпаковок КАК Количество,
	|	МАКСИМУМ(ЕСТЬNULL(СвободныеЗапасы.КоличествоСвободно, 0)) КАК КоличествоСвободно,
	|	ВЫБОР
	|		КОГДА ТоварыУпЛистаБезЗаказаБезНазначения.КоличествоУпаковок <= МАКСИМУМ(ЕСТЬNULL(СвободныеЗапасы.КоличествоСвободно, 0))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОстатковХватаетДоРаспределения,
	|	ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка) КАК НовоеНазначение,
	|	ЛОЖЬ КАК ЕстьНовоеНазначение
	|ПОМЕСТИТЬ ТаблицаНоменклатура
	|ИЗ
	|	ТоварыУпЛистаБезЗаказаБезНазначения КАК ТоварыУпЛистаБезЗаказаБезНазначения
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвободныеЗапасы КАК СвободныеЗапасы
	|		ПО ТоварыУпЛистаБезЗаказаБезНазначения.Номенклатура = СвободныеЗапасы.Номенклатура
	|			И ТоварыУпЛистаБезЗаказаБезНазначения.Характеристика = СвободныеЗапасы.Характеристика
	|ГДЕ
	|	НЕ ТоварыУпЛистаБезЗаказаБезНазначения.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыУпЛистаБезЗаказаБезНазначения.УпаковочныйЛист,
	|	ТоварыУпЛистаБезЗаказаБезНазначения.УпаковочныйЛист.гф_Комплектация,
	|	ТоварыУпЛистаБезЗаказаБезНазначения.Артикул,
	|	ТоварыУпЛистаБезЗаказаБезНазначения.Номенклатура,
	|	ТоварыУпЛистаБезЗаказаБезНазначения.Характеристика,
	|	ТоварыУпЛистаБезЗаказаБезНазначения.Назначение,
	|	ТоварыУпЛистаБезЗаказаБезНазначения.КоличествоУпаковок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаНоменклатура.IDКороба КАК IDКороба,
	|	ТаблицаНоменклатура.Комплектация КАК Комплектация,
	|	спрНоменклатура.Ссылка КАК НоменклатураКороба,
	|	спрНоменклатура.Артикул КАК Артикул
	|ИЗ
	|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спрНоменклатура
	|			ПО ВариантыКомплектацииНоменклатуры.Владелец = спрНоменклатура.Ссылка
	|		ПО ТаблицаНоменклатура.Комплектация = ВариантыКомплектацииНоменклатуры.Ссылка";
	
КонецФункции // ()

&НаСервере
Функция ТекстЗапросаПоНазначениям()
	
	Возврат "ВЫБРАТЬ
	|	КодаМаркировки.Организация КАК Организация,
	|	КодаМаркировки.Склад КАК Склад,
	|	КодаМаркировки.КМ КАК NVE,
	|	УпаковочныйЛистТовары.Номенклатура КАК Номенклатура,
	|	УпаковочныйЛистТовары.Характеристика КАК Характеристика,
	|	УпаковочныйЛистТовары.Номенклатура.Артикул КАК Артикул,
	|	УпаковочныйЛистТовары.Ссылка КАК IDКороба,
	|	ЗаказКлиента.Ссылка КАК ЗаказКороба,
	|	УпаковочныйЛистТовары.Назначение КАК Назначение,
	|	УпаковочныйЛистТовары.КоличествоУпаковок КАК КоличествоУпаковок
	|ПОМЕСТИТЬ вт_00
	|ИЗ
	|	РегистрНакопления.гф_ДвижениеКодовМаркировкиОрганизации.Остатки(
	|			,
	|			Склад = &Склад
	|				И КМ.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка)) КАК КодаМаркировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
	|			ПО УпаковочныйЛистТовары.Ссылка.гф_Заказ = ЗаказКлиента.Ссылка
	|		ПО КодаМаркировки.КМ.ЗначениеШтрихкода = УпаковочныйЛистТовары.Ссылка.Код
	|ГДЕ
	|	УпаковочныйЛистТовары.Назначение.Ссылка В(&Назначения)
	|	И НЕ УпаковочныйЛистТовары.ЭтоУпаковочныйЛист
	|	И УпаковочныйЛистТовары.Ссылка.Проведен
	|	И УпаковочныйЛистТовары.Ссылка.гф_ТекущийОрдер = ЗНАЧЕНИЕ(Документ.РасходныйОрдерНаТовары.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////01
	|ВЫБРАТЬ
	|	РаспределениеЗапасов.Номенклатура.Артикул КАК Артикул,
	|	РаспределениеЗапасов.Номенклатура КАК Номенклатура,
	|	РаспределениеЗапасов.Характеристика КАК Характеристика,
	|	РаспределениеЗапасов.Назначение КАК Назначение,
	|	СУММА(РаспределениеЗапасов.Свободно) КАК КоличествоСвободно
	|ПОМЕСТИТЬ СвободныеЗапасы
	|ИЗ
	|	РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
	|ГДЕ
	|	РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
	|	И РаспределениеЗапасов.Склад = &Склад
	|	И РаспределениеЗапасов.Назначение В(&Назначения)
	|
	|СГРУППИРОВАТЬ ПО
	|	РаспределениеЗапасов.Номенклатура,
	|	РаспределениеЗапасов.Характеристика,
	|	РаспределениеЗапасов.Назначение,
	|	РаспределениеЗапасов.Номенклатура.Артикул
	|
	|ИМЕЮЩИЕ
	|	СУММА(РаспределениеЗапасов.Свободно) > 0
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////02
	|ВЫБРАТЬ
	|	вт_00.Артикул КАК Артикул,
	|	вт_00.Номенклатура КАК Номенклатура,
	|	вт_00.Характеристика КАК Характеристика,
	|	вт_00.IDКороба КАК IDКороба,
	|	вт_00.IDКороба.гф_Комплектация КАК Комплектация,
	|	вт_00.Назначение КАК ИсходноеНазначение,
	|	вт_00.КоличествоУпаковок КАК Количество,
	|	ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка) КАК НовоеНазначение,
	|	ЛОЖЬ КАК ЕстьНовоеНазначение,
	|	МАКСИМУМ(ЕСТЬNULL(СвободныеЗапасы.КоличествоСвободно, 0)) КАК КоличествоСвободно,
	|	ВЫБОР
	|		КОГДА вт_00.КоличествоУпаковок <= МАКСИМУМ(ЕСТЬNULL(СвободныеЗапасы.КоличествоСвободно, 0))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОстатковХватаетДоРаспределения
	|ПОМЕСТИТЬ ТаблицаНоменклатура
	|ИЗ
	|	вт_00 КАК вт_00
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвободныеЗапасы КАК СвободныеЗапасы
	|		ПО вт_00.Номенклатура = СвободныеЗапасы.Номенклатура
	|			И вт_00.Характеристика = СвободныеЗапасы.Характеристика
	|			И вт_00.Назначение = СвободныеЗапасы.Назначение
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_00.Артикул,
	|	вт_00.Номенклатура,
	|	вт_00.Характеристика,
	|	вт_00.IDКороба,
	|	вт_00.IDКороба.гф_Комплектация,
	|	вт_00.Назначение,
	|	вт_00.КоличествоУпаковок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////03
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаНоменклатура.IDКороба КАК IDКороба,
	|	ТаблицаНоменклатура.Комплектация КАК Комплектация,
	|	спрНоменклатура.Ссылка КАК Номенклатура,
	|	спрНоменклатура.Артикул КАК Артикул
	|ИЗ
	|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спрНоменклатура
	|			ПО ВариантыКомплектацииНоменклатуры.Владелец = спрНоменклатура.Ссылка
	|		ПО ТаблицаНоменклатура.Комплектация = ВариантыКомплектацииНоменклатуры.Ссылка";
КонецФункции // ()

&НаСервере
Функция ТекстЗапросРаспределениеНоменклатурыПоЗаказамПоПриоритетам()
	
	Возврат "
	|//{Запрос: 0, -6 ////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УпаковочныйЛист.Ссылка КАК УпаковочныйЛист,
	|	УпаковочныйЛист.гф_Комплектация КАК Комплектация,
	|	ВариантыКомплектацииНоменклатурыТ.Владелец КАК Номенклатура,
	|	Номенклатура.Артикул КАК Артикул
	|ПОМЕСТИТЬ УЛ_безЗаказа
	|ИЗ
	|	РегистрНакопления.гф_ДвижениеКодовМаркировкиОрганизации.Остатки(,
	|		Склад = &Склад) КАК ДвижениеКодовОстатки
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист КАК УпаковочныйЛист
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатурыТ
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|			ПО ВариантыКомплектацииНоменклатурыТ.Владелец = Номенклатура.Ссылка
	|		ПО УпаковочныйЛист.гф_Комплектация = ВариантыКомплектацииНоменклатурыТ.Ссылка
	|	ПО ДвижениеКодовОстатки.КМ.ЗначениеШтрихкода = УпаковочныйЛист.Код
	|ГДЕ ИСТИНА
	|	И УпаковочныйЛист.Ссылка ЕСТЬ НЕ NULL
	|	И УпаковочныйЛист.Проведен
	|	И УпаковочныйЛист.гф_Заказ = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
	|	И УпаковочныйЛист.гф_ТекущийОрдер = ЗНАЧЕНИЕ(Документ.РасходныйОрдерНаТовары.ПустаяСсылка)
	|	И ДвижениеКодовОстатки.КоличествоОстаток > 0
	|;
	|//{Запрос: 1, -5 ////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УпаковочныйЛистТовары.Ссылка КАК УпаковочныйЛист,
	|	УЛ_безЗаказа.Комплектация КАК Комплектация,
	|	УЛ_безЗаказа.Номенклатура КАК Номенклатура,
	|	УЛ_безЗаказа.Артикул КАК Артикул
	|ПОМЕСТИТЬ УЛ_безЗаказа_безНазначения
	|ИЗ
	|	Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ УЛ_безЗаказа КАК УЛ_безЗаказа
	|	ПО УпаковочныйЛистТовары.Ссылка = УЛ_безЗаказа.УпаковочныйЛист
	// vvv Галфинд \ Sakovich 14.11.2023
	//|ГДЕ УпаковочныйЛистТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|ГДЕ УпаковочныйЛистТовары.Назначение В (&Назначения)
	// ^^^ Галфинд \ Sakovich 14.11.2023
	|;
	|//{Запрос: 2, -4 ////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаспределениеЗапасов.Склад КАК Склад,
	|	РаспределениеЗапасов.Номенклатура.Артикул КАК Артикул,
	|	РаспределениеЗапасов.Номенклатура КАК Номенклатура,
	|	РаспределениеЗапасов.Характеристика КАК Характеристика,
	|	СУММА(РаспределениеЗапасов.Свободно) КАК КоличествоСвободно
	|ПОМЕСТИТЬ СвободныеЗапасы
	|ИЗ
	|	РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
	|ГДЕ ИСТИНА
	|	И РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
	|	И РаспределениеЗапасов.Склад = &Склад
	|	И РаспределениеЗапасов.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И РаспределениеЗапасов.Номенклатура В (
	|		ВЫБРАТЬ
	|			т.Номенклатура КАК Номенклатура
	|		ИЗ
	|			УЛ_безЗаказа_безНазначения КАК т)
	|СГРУППИРОВАТЬ ПО
	|	РаспределениеЗапасов.Склад,
	|	РаспределениеЗапасов.Номенклатура.Артикул,
	|	РаспределениеЗапасов.Номенклатура,
	|	РаспределениеЗапасов.Характеристика
	|ИМЕЮЩИЕ СУММА(РаспределениеЗапасов.Свободно) > 0
	|;
	|//{Запрос: 3, -3 ////////////////////////////////////////
	|ВЫБРАТЬ
	|	Заказ_ТоварыВКоробах.Ссылка КАК Заказ,
	|	Заказ_ТоварыВКоробах.ВариантКомплектации КАК Комплектация,
	|	УЛ_безЗаказа_безНазначения.УпаковочныйЛист КАК УпаковочныйЛист,
	|	Заказ_ТоварыВКоробах.ВариантКомплектации.Владелец КАК НоменклатураУл,
	|	Заказ_ТоварыВКоробах.ВариантКомплектации.Владелец.Артикул КАК АртикулНоменклатурыУл,
	|	Заказ_ТоварыВКоробах.Количество КАК КоличествоКоробов,
	|	Заказ_ТоварыВКоробах.Ссылка.Контрагент КАК Контрагент,
	|	Заказ_ТоварыВКоробах.Ссылка.Склад КАК Склад,
	|	Заказ_ТоварыВКоробах.Ссылка.Организация КАК Организация
	|ПОМЕСТИТЬ Итоговая_Заказы
	|ИЗ
	|	УЛ_безЗаказа_безНазначения КАК УЛ_безЗаказа_безНазначения
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.гф_ТоварыВКоробах КАК Заказ_ТоварыВКоробах
	|	ПО УЛ_безЗаказа_безНазначения.Комплектация = Заказ_ТоварыВКоробах.ВариантКомплектации
	|ГДЕ ИСТИНА
	|	И Заказ_ТоварыВКоробах.Ссылка.Склад = &Склад
	|	И Заказ_ТоварыВКоробах.Ссылка.Проведен
	|	И Заказ_ТоварыВКоробах.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.КОбеспечению)
	|;
	|//{Запрос: 4, -2 ////////////////////////////////////////
	|ВЫБРАТЬ
	|	гф_ПриоритетыРезервовСрезПоследних.Контрагент КАК Контрагент,
	|	гф_ПриоритетыРезервовСрезПоследних.Организация КАК Организация,
	|	гф_ПриоритетыРезервовСрезПоследних.Склад КАК Склад,
	|	гф_ПриоритетыРезервовСрезПоследних.Заказ КАК Заказ,
	|	гф_ПриоритетыРезервовСрезПоследних.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ вт_Приоритеты
	|ИЗ
	|	РегистрСведений.гф_ПриоритетыРезервов.СрезПоследних(&Дата,
	|		) КАК гф_ПриоритетыРезервовСрезПоследних
	|;
	|//{Запрос: 5, -1 ////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 999999
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(вт_Приоритеты.Заказ, ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПриоритетПодобранПоЗаказу,
	|	ВЫБОР
	|		КОГДА вт_Приоритеты.Контрагент ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОтсутствуетЗаписьОПриоритете,
	|	ВЫБОР
	|		КОГДА вт_Приоритеты.Контрагент ЕСТЬ NULL
	|			ТОГДА 999999
	|		ИНАЧЕ вт_Приоритеты.Приоритет
	|	КОНЕЦ КАК Приоритет,
	|	вт_Приоритеты.Контрагент КАК пКонтрагент,
	|	Итоговая_Заказы.Контрагент КАК зКонтрагент,
	|	вт_Приоритеты.Организация КАК пОрганизация,
	|	Итоговая_Заказы.Организация КАК зОрганизация,
	|	вт_Приоритеты.Склад КАК пСклад,
	|	Итоговая_Заказы.Склад КАК зСклад,
	|	вт_Приоритеты.Заказ КАК пЗаказ,
	|	Итоговая_Заказы.Заказ КАК зЗаказ,
	|	Итоговая_Заказы.Заказ.Дата КАК зДата,
	|	Итоговая_Заказы.Заказ.Номер КАК зНомер,
	|	Итоговая_Заказы.Комплектация КАК Комплектация,
	|	Итоговая_Заказы.УпаковочныйЛист КАК УпаковочныйЛист,
	|	Итоговая_Заказы.НоменклатураУл КАК НоменклатураУл,
	|	Итоговая_Заказы.АртикулНоменклатурыУл КАК АртикулНоменклатурыУл,
	|	Итоговая_Заказы.КоличествоКоробов КАК КоличествоКоробов
	|ПОМЕСТИТЬ вт_ПриоритетыПоЗаказам
	|ИЗ
	|	Итоговая_Заказы КАК Итоговая_Заказы
	|	ЛЕВОЕ СОЕДИНЕНИЕ вт_Приоритеты КАК вт_Приоритеты
	|	ПО ИСТИНА
	|		И вт_Приоритеты.Контрагент = Итоговая_Заказы.Контрагент
	|		И ВЫБОР
	|			КОГДА вт_Приоритеты.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ вт_Приоритеты.Заказ = Итоговая_Заказы.Заказ
	|		КОНЕЦ
	|		И ВЫБОР
	|			КОГДА вт_Приоритеты.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ вт_Приоритеты.Организация = Итоговая_Заказы.Организация
	|		КОНЕЦ
	|		И ВЫБОР
	|			КОГДА вт_Приоритеты.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ вт_Приоритеты.Склад = Итоговая_Заказы.Склад
	|		КОНЕЦ
	|УПОРЯДОЧИТЬ ПО
	|	ОтсутствуетЗаписьОПриоритете,
	|	Приоритет,
	|	ПриоритетПодобранПоЗаказу УБЫВ,
	|	зДата,
	|	зНомер
	|;
	|//{Запрос: 6, -1 ////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ПриоритетыПоЗаказам.зЗаказ КАК Заказ,
	|	вт_ПриоритетыПоЗаказам.зКонтрагент КАК зКонтрагент,
	|	вт_ПриоритетыПоЗаказам.Комплектация КАК Комплектация,
	|	МАКСИМУМ(вт_ПриоритетыПоЗаказам.КоличествоКоробов) КАК КоличествоКоробов,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.Ссылка) КАК РастраченоКоробов,
	|	МАКСИМУМ(вт_ПриоритетыПоЗаказам.КоличествоКоробов) - КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.Ссылка) КАК ЕщеЕстьСвободныхКоробов
	|ПОМЕСТИТЬ вт_КоличествоКоробовПоЗаказам
	|ИЗ
	|	вт_ПриоритетыПоЗаказам КАК вт_ПриоритетыПоЗаказам
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			УпаковочныйЛист.Ссылка КАК Ссылка,
	|			УпаковочныйЛист.гф_Заказ КАК гф_Заказ,
	|			УпаковочныйЛист.гф_Комплектация КАК гф_Комплектация
	|		ИЗ
	|			Документ.УпаковочныйЛист КАК УпаковочныйЛист
	|		ГДЕ НЕ (УпаковочныйЛист.ПометкаУдаления)) КАК ВложенныйЗапрос
	|	ПО ИСТИНА
	|		И вт_ПриоритетыПоЗаказам.зЗаказ = ВложенныйЗапрос.гф_Заказ
	|		И вт_ПриоритетыПоЗаказам.Комплектация = ВложенныйЗапрос.гф_Комплектация
	|СГРУППИРОВАТЬ ПО
	|	вт_ПриоритетыПоЗаказам.зЗаказ,
	|	вт_ПриоритетыПоЗаказам.зКонтрагент,
	|	вт_ПриоритетыПоЗаказам.Комплектация
	|ИМЕЮЩИЕ МАКСИМУМ(вт_ПриоритетыПоЗаказам.КоличествоКоробов) - КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.Ссылка) > 0";
	
КонецФункции 

&НаСервере
Процедура ЗаполнитьНераспределеннымиОстаткамиНаСервере() // 5.2.08 (пункт 1.1.2.6)
	
	Запрос = Новый Запрос;
	
	Если ИсходноеНазначение.Количество() = 0 Тогда
		Запрос.Текст = ТекстЗапросаПоПустымНазначениям();
		Запрос.УстановитьПараметр("Склад", Объект.Склад);
		ПакетРезультатов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
		ТаблицаКороба = ПакетРезультатов[5].Выгрузить();
		ТаблицаНоменклатура = ПакетРезультатов[4].Выгрузить();
		ТаблицаСвободныеОстатки = ПакетРезультатов[3].Выгрузить();
	КонецЕсли;
	
	Если ИсходноеНазначение.Количество() > 0 Тогда
		Запрос.Текст = ТекстЗапросаПоНазначениям();
		Запрос.УстановитьПараметр("Склад", Объект.Склад);
		Запрос.УстановитьПараметр("Назначения", ИсходноеНазначение);
		ПакетРезультатов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
		ТаблицаКороба = ПакетРезультатов[3].Выгрузить();
		ТаблицаНоменклатура = ПакетРезультатов[2].Выгрузить();
		ТаблицаСвободныеОстатки = ПакетРезультатов[1].Выгрузить();
	КонецЕсли;
	
	Объект.УпаковочныеЛисты.Загрузить(ТаблицаКороба);
	Объект.РаспределениеРезервов.Загрузить(ТаблицаНоменклатура);
	
	Запрос.Текст = ТекстЗапросРаспределениеНоменклатурыПоЗаказамПоПриоритетам();
	Запрос.Параметры.Вставить("Дата", Объект.Дата);
	Запрос.Параметры.Вставить("Склад", Объект.Склад);
	
	// ирОбщий.ОтЛкс(Запрос) - для отладки запроса в точке останова
	ПакетРезультатов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	Таблица_КоличествоКоробовПоЗаказам = ПакетРезультатов[6].Выгрузить();
	
	ТаблицаПриоритетов = ПакетРезультатов[5].Выгрузить();
	ТаблицаПриоритетов.Колонки.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
	сч = 0;
	
	КонтрольнаяЦифраСвободныеОстаткиДоРаспределения = ТаблицаСвободныеОстатки.Итог("КоличествоСвободно");
	тз_п1 = Объект.УпаковочныеЛисты.Выгрузить();
	
	тзКороба = тз_п1.СкопироватьКолонки();
	мСтрокТаблицаНоменклатураНужные = Новый Массив;
	

	Для каждого сП Из ТаблицаПриоритетов Цикл
		Если сп["Обработано"] Тогда
			Продолжить;
		КонецЕсли;
		сч = сч + 1;
		мСтрок = ТаблицаПриоритетов.НайтиСтроки(Новый Структура("УпаковочныйЛист, Обработано", сП["УпаковочныйЛист"], Ложь));
		Для каждого сУЛ Из мСтрок Цикл
			сУЛ["Обработано"] = Истина;
		КонецЦикла;
		ОбрабатываемаяСтрока = Неопределено;
		//$$$===========================vvv ОТЛАДКА vvv======================09.01.2023 10:37:44=============| SBB
		// оформить процедуру [ОбрабатываемаяСтрока]
		Если мСтрок.Количество() > 1 Тогда
			пПриоритет = мСтрок[0].Приоритет;
			вспТЗ_приоритет = ТаблицаПриоритетов.Скопировать(мСтрок);
			мСтрокПриоритет = вспТЗ_приоритет.НайтиСтроки(Новый Структура("Приоритет", пПриоритет));
			Если мСтрокПриоритет.Количество() > 1 Тогда
				пНомер = мСтрокПриоритет[0].зНомер;
				вспТЗ_номер = вспТЗ_приоритет.Скопировать(мСтрокПриоритет);
				мСтрокНомер = вспТЗ_номер.НайтиСтроки(Новый Структура("зНомер", пНомер));
				Если мСтрокНомер.Количество() > 1 Тогда
					пДата = мСтрокНомер[0].зДата;
					вспТЗ_дата = вспТЗ_номер.Скопировать(мСтрокНомер);
					мСтрокДата = вспТЗ_Дата.НайтиСтроки(Новый Структура("зДата", пДата));
					Если мСтрокДата.Количество() > 0 Тогда
						ОбрабатываемаяСтрока = мСтрокДата[0];
					КонецЕсли;
				Иначе
					ОбрабатываемаяСтрока = мСтрокНомер[0];
				КонецЕсли;
			Иначе
				ОбрабатываемаяСтрока = мСтрокПриоритет[0];
			КонецЕсли;
		Иначе
			ОбрабатываемаяСтрока = мСтрок[0];
		КонецЕсли;
		//===========================^^^ КОНЕЦ ОТЛАДКИ ^^^===================09.01.2023 10:37:44=============| SBB	
		
		Если ОбрабатываемаяСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		//$$$===========================vvv ОТЛАДКА vvv======================10.01.2023 0:10:53=============| SBB
		// тут оформить фунцию по проверке остатка свободных коробов	
		мСтрокТаблицыКоличестваКоробов = Таблица_КоличествоКоробовПоЗаказам.НайтиСтроки(
		Новый Структура("Заказ, Комплектация", ОбрабатываемаяСтрока["зЗаказ"], ОбрабатываемаяСтрока["Комплектация"]));
		Если мСтрокТаблицыКоличестваКоробов.Количество() > 0 Тогда
			строкаКоличестваКоробов = мСтрокТаблицыКоличестваКоробов[0];
			Если строкаКоличестваКоробов["КоличествоКоробов"] > 0 Тогда
				строкаКоличестваКоробов["КоличествоКоробов"] = строкаКоличестваКоробов["КоличествоКоробов"] - 1;
			Иначе
				Продолжить;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		//===========================^^^ КОНЕЦ ОТЛАДКИ ^^^===================10.01.2023 0:10:53=============| SBB

		УпаковочныйЛист = ОбрабатываемаяСтрока["УпаковочныйЛист"];
		НоменклатураУл = ОбрабатываемаяСтрока["НоменклатураУл"];
		//$$$===========================vvv ОТЛАДКА vvv======================09.01.2023 9:39:19=============| SBB
		// оформить функцию[ТовараПоУлХватает]
		// проверяем наличие свободных остатков по УЛ
		строкиСвободныхОстатковПоУЛ = ТаблицаСвободныеОстатки.НайтиСтроки(Новый Структура("Номенклатура", НоменклатураУл));
		тзНоменклатураУлСвободныеОстатки = ТаблицаСвободныеОстатки.Скопировать(строкиСвободныхОстатковПоУЛ);
		ТовараПоУлХватает = Истина;	
		Для каждого стрТоварыУл Из УпаковочныйЛист.Товары Цикл
			мСтрок_01 = таблицаСвободныеОстатки.НайтиСтроки(
			Новый Структура("Номенклатура, Характеристика", стрТоварыУл["Номенклатура"], стрТоварыУл["Характеристика"]));
			тзСвОстНомХар = тзНоменклатураУлСвободныеОстатки.Скопировать(мСтрок_01);
			тзСвОстНомХар.Свернуть("Номенклатура, Характеристика", "КоличествоСвободно");
			Если тзСвОстНомХар.Количество() > 0 Тогда
				Если тзСвОстНомХар[0]["КоличествоСвободно"] < стрТоварыУл["КоличествоУпаковок"] Тогда
					ТовараПоУлХватает = Ложь;
					Прервать;
				КонецЕсли;
			Иначе	
				ТовараПоУлХватает = Ложь;
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		Если Не ТовараПоУлХватает Тогда
			Продолжить;	
		КонецЕсли;
		//===========================^^^ КОНЕЦ ОТЛАДКИ ^^^===================09.01.2023 9:39:19=============| SBB	
		
		//$$$===========================vvv ОТЛАДКА vvv======================09.01.2023 10:36:31=============| SBB
		// оформить процедуру
		// уменьшаем остатки для последующих проверок
		Для каждого стрТоварыУл Из УпаковочныйЛист.Товары Цикл
			пНужноСписать = стрТоварыУл["КоличествоУпаковок"];
			мСтрок_01 = ТаблицаСвободныеОстатки.НайтиСтроки(
			Новый Структура("Номенклатура, Характеристика", стрТоварыУл["Номенклатура"], стрТоварыУл["Характеристика"]));
			
			Для каждого стрОст Из мСтрок_01 Цикл
				Если пНужноСписать = 0 Тогда
					Прервать;	
				КонецЕсли;
				Списываем = Мин(пНужноСписать, стрОст["КоличествоСвободно"]);
				стрОст["КоличествоСвободно"] = стрОст["КоличествоСвободно"] - Списываем;
				пНужноСписать = пНужноСписать - Списываем;
			КонецЦикла;
			
			мСтрокНоменклаутрыПоУпЛисту = ТаблицаНоменклатура.НайтиСтроки(
			Новый Структура("IDКороба, Номенклатура, Характеристика",
			сП["УпаковочныйЛист"], стрТоварыУл["Номенклатура"], стрТоварыУл["Характеристика"]));
			Для каждого стрНомПоУл Из мСтрокНоменклаутрыПоУпЛисту Цикл
				стрНомПоУл["ЕстьНовоеНазначение"] = Истина;
				стрНомПоУл["НовоеНазначение"] = ОбрабатываемаяСтрока["зЗаказ"];
				Если мСтрокТаблицаНоменклатураНужные.Найти(стрНомПоУл) = Неопределено Тогда
					мСтрокТаблицаНоменклатураНужные.Добавить(стрНомПоУл);
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		//===========================^^^ КОНЕЦ ОТЛАДКИ ^^^===================09.01.2023 10:36:31=============| SBB
		
		нсУпаковочныеЛисты = тзКороба.Добавить();
		нсУпаковочныеЛисты["IDКороба"] = ОбрабатываемаяСтрока["УпаковочныйЛист"];
		нсУпаковочныеЛисты["НовоеНазначение"] = ОбрабатываемаяСтрока["зЗаказ"]
	КонецЦикла;

	КонтрольнаяЦифраСвободныеОстаткиПослеРаспределения = ТаблицаСвободныеОстатки.Итог("КоличествоСвободно");
	ТаблицаНоменклатураУточненная = ТаблицаНоменклатура.Скопировать(мСтрокТаблицаНоменклатураНужные);
	
	Объект.УпаковочныеЛисты.Загрузить(тзКороба);
	Объект.РаспределениеРезервов.Загрузить(ТаблицаНоменклатураУточненная);
	
КонецПроцедуры

&НаСервере
Функция ОпределелитьВариантыКомплектацииЗаказа(Заказ)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЗаказКлиентагф_ТоварыВКоробах.ВариантКомплектации КАК ВариантКомплектации
	|ИЗ
	|	Документ.ЗаказКлиента.гф_ТоварыВКоробах КАК ЗаказКлиентагф_ТоварыВКоробах
	|ГДЕ
	|	ЗаказКлиентагф_ТоварыВКоробах.Ссылка = &Заказ
	|	И НЕ ЗаказКлиентагф_ТоварыВКоробах.ВариантКомплектации 
	|		= ЗНАЧЕНИЕ(Справочник.ВариантыКомплектацииНоменклатуры.ПустаяСсылка)");
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("ВариантКомплектации");
	
КонецФункции // ()


&НаКлиенте
Процедура УпаковочныеЛистыПриАктивизацииСтроки(Элемент)
	УстановитьОтборСтрокРаспределениеРезервов();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСтрокРаспределениеРезервов()
	
	Если Объект.УпаковочныеЛисты.Количество() > 0 
		И Элементы.УпаковочныеЛисты.ТекущаяСтрока = Неопределено Тогда
		Элементы.УпаковочныеЛисты.ТекущаяСтрока = 0;
	КонецЕсли;
	
	Если Элементы.УпаковочныеЛисты.ТекущаяСтрока <> Неопределено Тогда
		ТекущийIDКороба = Элементы.УпаковочныеЛисты.ТекущиеДанные["IDКороба"];
		СтруктураОтбора = Новый Структура("IDКороба", ТекущийIDКороба);
		ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
		Элементы.РаспределениеРезервов.ОтборСтрок = ОтборСтрок;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковочныеЛистыНовоеНазначениеПриИзменении(Элемент)
	ТекущиеДанные = Элементы.УпаковочныеЛисты.ТекущиеДанные;
	ЗаказНовоеНазначение = ТекущиеДанные["НовоеНазначение"];
	ИДКороба = ТекущиеДанные["IDКороба"];
	СтрПоиска = Новый Структура("IDКороба", ИДКороба);
	мСтрокРезервов = Объект.РаспределениеРезервов.НайтиСтроки(СтрПоиска);
	Для каждого Эл Из мСтрокРезервов Цикл
		Эл["НовоеНазначение"] = ЗаказНовоеНазначение;
		Эл["ЕстьНовоеНазначение"] = ЗначениеЗаполнено(ЗаказНовоеНазначение);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРезервПоПриоритетам(Команда)
	УстановитьРезервПоПриоритетамНаСервере();
	ВыполнитьЗаполнениеНераспределеннымиОстатками();
КонецПроцедуры

&НаСервере
Процедура ДобавитьВПротокол(Текст)
	Протокол.ДобавитьСтроку(Текст);
КонецПроцедуры

&НаСервере
Процедура УстановитьРезервПоПриоритетамНаСервере()

	ДатаНачалаОбработки = ТекущаяДатаСеанса();
	ДобавитьВПротокол("" + Символы.ПС + Символы.ПС + "
	|==============================================================");
	ДобавитьВПротокол("Начало обработки: " + ДатаНачалаОбработки);
	
	тзРезервы = Объект.РаспределениеРезервов.Выгрузить();
	мСтрокСНазначениями = тзРезервы.НайтиСтроки(Новый Структура("ЕстьНовоеНазначение", Истина));
	ВспТЗ_01 = тзРезервы.Скопировать(мСтрокСНазначениями);
	
	мНазначений = ВспТЗ_01.ВыгрузитьКолонку("ИсходноеНазначение");
	мНазначенийСвернуто = ОбщегоНазначенияКлиентСервер.СвернутьМассив(мНазначений);
	
	Для каждого ЭлНазначение Из мНазначенийСвернуто Цикл
		
		ТаблицаНазначенийКоробов = Новый ТаблицаЗначений;
		ТаблицаНазначенийКоробов.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
		ТаблицаНазначенийКоробов.Колонки.Добавить("IDКороба", Новый ОписаниеТипов("ДокументСсылка.УпаковочныйЛист"));
		
		ДокКорректировки = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
		ДокКорректировки.Дата = Объект.Дата;
		ДокКорректировки.Организация = Объект.гф_Организация;
		ДокКорректировки.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв;
		ДокКорректировки.Назначение = ЭлНазначение;
		ДокКорректировки.Комментарий = "Документ создан обработкой ""Резервирование товаров по приоритетам"".";
		ДокКорректировки.Автор = Пользователи.АвторизованныйПользователь();
		ДокКорректировки.Ответственный = Пользователи.АвторизованныйПользователь();
		
		стрПоиска = Новый Структура("ИсходноеНазначение", ЭлНазначение);
		мСтрокРезервы = ВспТЗ_01.НайтиСтроки(стрПоиска);
		ВспТЗ_02 = ВспТЗ_01.Скопировать(мСтрокРезервы);
		    		
		мКоробов = ВспТЗ_02.ВыгрузитьКолонку("IDКороба");
		мКоробовСвернуто = ОбщегоНазначенияКлиентСервер.СвернутьМассив(мКоробов);
		
		тчТоварыКорректировка = ДокКорректировки.Товары;
		мКоробовСтрокой = Новый Массив;

		Для каждого элКороб Из мКоробовСвернуто Цикл
		
			мСтрокРезервыПоКоробу = ВспТЗ_02.НайтиСтроки(Новый Структура("IDКороба", элКороб));
			ВспТЗ_03 = ВспТЗ_02.Скопировать(мСтрокРезервыПоКоробу);
			НовыйЗаказ = ВспТЗ_03[0]["НовоеНазначение"];
			НовоеНазначение = ПолучитьНазначениеПоЗаказу(НовыйЗаказ);
		
			мКоробовСтрокой.Добавить(Строка(элКороб));
			тчТоварыУпЛист = элКороб.Товары;

			Для каждого стрТчУпЛист Из тчТоварыУпЛист Цикл
				Если стрТчУпЛист["ЭтоУпаковочныйЛист"] Тогда
					Продолжить;
				КонецЕсли;
				
				Если Не (ЗначениеЗаполнено(стрТчУпЛист["Номенклатура"])
					И ЗначениеЗаполнено(стрТчУпЛист["Характеристика"])) Тогда
					Продолжить;
				КонецЕсли;
				
				нс = тчТоварыКорректировка.Добавить();
				ЗаполнитьЗначенияСвойств(нс, стрТчУпЛист);
				нс.Склад = Объект.Склад;
				нс.ИсходноеНазначение = ЭлНазначение;
				нс.ИсходныйЗаказ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлНазначение, "Заказ");
				нс.НовоеНазначение =  НовоеНазначение;
				нс.НовыйЗаказ = НовыйЗаказ;
				нс.гф_IDкороба = элКороб;
				
				стрНазначений = ТаблицаНазначенийКоробов.Добавить();
				стрНазначений["Назначение"] = НовоеНазначение;
				стрНазначений["IDКороба"] = элКороб;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ДокументКорректировкиЗаписан = Ложь;
		НачатьТранзакцию();
		Попытка
			ДокКорректировки.Записать(РежимЗаписиДокумента.Проведение);
			Текст = "Записан документ """ + ДокКорректировки.Ссылка + """ с исходным назначением """ + 
			?(Не ЗначениеЗаполнено(ЭлНазначение), "<пустое>", ЭлНазначение) + """
			|по Упаковочным листам: 
			|" + СтрСоединить(мКоробовСтрокой, "
			|") + "
			|";
			ОбщегоНазначения.СообщитьПользователю(Текст);
			ДобавитьВПротокол(Текст);
			ДокументКорректировкиЗаписан = Истина;
		Исключение
			ОтменитьТранзакцию();
			Текст = "Не удалось записать документ ""Корректировка назначения товаров"" с исходным назначением """
			+ ?(Не ЗначениеЗаполнено(ЭлНазначение), "<пустое>", ЭлНазначение) + """ 
			|по Упаковочным листам: 
			|" + СтрСоединить(мКоробовСтрокой, "
			|") + "
			|";
			Текст = Текст + ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(Текст);
			ДобавитьВПротокол(Текст);
		КонецПопытки;
		
		Если ДокументКорректировкиЗаписан Тогда
			ТаблицаНазначенийКоробов.Свернуть("Назначение, IDКороба");
			Для каждого стрНазначений Из ТаблицаНазначенийКоробов Цикл
				ДокУпЛист = стрНазначений["IDКороба"].ПолучитьОбъект();
				Если ДокУпЛист <> Неопределено Тогда
					Для каждого стрТЧ Из ДокУпЛист.Товары Цикл
						Если стрТЧ["Назначение"] <> стрНазначений["Назначение"] Тогда
							стрТЧ["Назначение"] = стрНазначений["Назначение"];
						КонецЕсли;
					КонецЦикла;
					ДокУпЛист["гф_Заказ"] = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(стрНазначений["Назначение"], "Заказ");
				КонецЕсли;
				Если ДокУпЛист.Модифицированность() Тогда
					Попытка
						ДокУпЛист.Записать(РежимЗаписиДокумента.Проведение);
						Текст = "В документе """ + ДокУпЛист.Ссылка + """ установлено новое Назначение """+ стрНазначений["Назначение"] + "";
						ОбщегоНазначения.СообщитьПользователю(Текст);
						ДобавитьВПротокол(Текст);
					Исключение
						ОтменитьТранзакцию();
						Текст = "Не удалось записать документ """ + ДокУпЛист.Ссылка + """ с новым назначением """+ стрНазначений["Назначение"] + "";
						ОбщегоНазначения.СообщитьПользователю(Текст);
						ДобавитьВПротокол(Текст);
					КонецПопытки;	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ТранзакцияАктивна() Тогда
			Если РежимОтладки Тогда
				ОтменитьТранзакцию();
			Иначе
				ЗафиксироватьТранзакцию();
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ДатаОкончанияОбработки = ТекущаяДатаСеанса();
	ДобавитьВПротокол("Окончание обработки: " + ДатаОкончанияОбработки);
	ДобавитьВПротокол("Длительность обработки: " + РазностьВремени(ДатаНачалаОбработки, ДатаОкончанияОбработки));
КонецПроцедуры

&НаСервере
Функция РазностьВремени(ВремяНачала, ВремяОкончания)
	Разность = ВремяОкончания - ВремяНачала;
	Если Разность > 0 Тогда
		Часов = Цел(Разность / 3600);
		Минут = Цел((Разность - Часов * 3600) / 60);
		Секунд = Разность - Часов * 3600 - Минут * 60;
		Возврат "" + Часов + "ч. " + Минут + "м. " +  Секунд + "с.";
	Иначе
		Возврат "" + Разность + "с.";
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНазначениеПоЗаказу(Заказ)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Назначения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Назначения КАК Назначения
	|ГДЕ
	|	Назначения.Заказ = &Заказ
	|	И Назначения.Заказ ССЫЛКА Документ.ЗаказКлиента
	|			И НЕ Назначения.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)");
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции

#КонецОбласти

#Область Область_отладка

&НаСервере
Процедура РаспределениеРезервовОтладкаПриИзмененииНаСервере()
	Для каждого СтрТабл Из РаспределениеРезервовОтладка Цикл
		СтрТабл.Артикул = СтрТабл.Номенклатура.Артикул;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеРезервовОтладкаПриИзменении(Элемент)
	РаспределениеРезервовОтладкаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНераспределеннымиОстаткамиОтладкаНаСервере()
	Объект.РаспределениеРезервов.Загрузить(РаспределениеРезервовОтладка.Выгрузить());
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНераспределеннымиОстаткамиОтладка(Команда)
	ЗаполнитьНераспределеннымиОстаткамиОтладкаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеРезервовОтладкаИсходноеНазначениеПриИзменении(Элемент)
	
	ТекДанные = Элементы.РаспределениеРезервовОтладка.ТекущиеДанные;
	ТекДанные.Заказ = ПолучитьЗаказОтладка(ТекДанные.ИсходноеНазначение);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗаказОтладка(Назначение)
	Возврат Назначение.Заказ;
КонецФункции 

&НаСервере
Процедура УпаковочныеЛистыПриИзмененииНаСервере()
	тзУЛ = Объект.УпаковочныеЛисты.Выгрузить();
	тзРаспределениеРезервов = Объект.РаспределениеРезервов.Выгрузить();
	мУдаляемыхСтрок = Новый Массив;
	Для каждого СтрРаспрРезервов Из тзРаспределениеРезервов Цикл
		стрПоиска = Новый Структура("IDКороба",СтрРаспрРезервов["IDКороба"]);
		мСтрокУЛ = тзУЛ.НайтиСтроки(стрПоиска);
		Если мСтрокУЛ.ВГраница() = -1 Тогда
			мУдаляемыхСтрок.Добавить(СтрРаспрРезервов);
		КонецЕсли;
	КонецЦикла;
	Для каждого Эл Из мУдаляемыхСтрок Цикл
		тзРаспределениеРезервов.Удалить(Эл);
	КонецЦикла;
	Объект.РаспределениеРезервов.Загрузить(тзРаспределениеРезервов);
КонецПроцедуры

&НаКлиенте
Процедура УпаковочныеЛистыПриИзменении(Элемент)
	УпаковочныеЛистыПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПриоритетыПоПорядкуСтрок(Команда)
	
	ИзмененПриоритетВручную = Истина;
	Для каждого ЭлКоллекции Из Объект.ТекущиеПриоритеты Цикл
		ЭлКоллекции["НовыйПриоритет"] = ЭлКоллекции["НомерСтроки"];
		ЭлКоллекции["ПервоначальныйНомерСтроки"] = ЭлКоллекции["НомерСтроки"];
		ЭлКоллекции["ТекущийПриоритетИзменение"] = ЭлКоллекции["НомерСтроки"];
	КонецЦикла;
	Объект.ТекущиеПриоритеты.Сортировать("НовыйПриоритет");
	ИзмененПриоритетВручную = Ложь;
	
КонецПроцедуры

#КонецОбласти