#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьДоступностьКолонокТаблиц();
	
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииНаСервере() 
	
	Если Не ЗначениеЗаполнено(Объект.Период) Тогда
		
		Объект.Период.ДатаНачала	= НачалоМесяца(ТекущаяДатаСеанса());
		Объект.Период.ДатаОкончания	= НачалоМесяца(ТекущаяДатаСеанса());
		
	КонецЕсли;	                    
	
	УстановитьКомпоновку("Поставка");	
	УстановитьКомпоновку("Отгрузка");	
	УстановитьКомпоновку("Перемещение");	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПриОткрытииНаСервере();
	
	ОбновитьТекущуюТаблицу();
	
КонецПроцедуры              

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ОбновитьТекущуюТаблицу();
	
КонецПроцедуры                    

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбновитьТекущуюТаблицу();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьТекущуюТаблицу();
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастройкиОтборПриИзменении(Элемент)
	
   	ОбновитьТекущуюТаблицу();

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли;	
	
	СтандартнаяОбработка = Ложь;  
	
	ИмяТаблицы = ИмяТекущейТаблицы();
	
	ИмяДанных = СтрЗаменить(Поле.Имя, ИмяТаблицы, "");
	
	Данные = ТекущиеДанные[ИмяДанных];  
	
	Если ЗначениеЗаполнено(Данные) Тогда
		
		ИмяФормыОбъекта = ПолучитьИмяФормыОбъекта(Данные);
		
		Если ИмяФормыОбъекта <> Неопределено Тогда
			
			ПараметрыОткрытия = Новый Структура("Ключ", Данные);
			
			ОткрытьФорму(ИмяФормыОбъекта, ПараметрыОткрытия);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоставка
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьМетки(Команда)  
	
	ТекущаяТаблица = ИмяТекущейТаблицы();
	
	Если ТекущаяТаблица = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;	
	
	Если Команда = ЭтотОбъект.Команды.ОтметитьВсе Тогда
		
		Флаг = Истина;
		
	ИначеЕсли Команда = ЭтотОбъект.Команды.СнятьВсеМетки Тогда
		
		Флаг = Ложь;
		
	Иначе       
		
		Возврат;
		
	КонецЕсли;		
	
	
	Для Каждого СтрокаТаблицы Из Объект[ТекущаяТаблица] Цикл
		
		СтрокаТаблицы.Флаг = Флаг;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеДокументы(Команда)

	ИмяТаблицы = ИмяТекущейТаблицы(); 
	
	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда
			
			ПараметрыОткрытия = Новый Структура;
			
			ПараметрыОткрытия.Вставить("ОбъектОтбора", ТекущиеДанные.Документ);
			
			ОткрытьФорму("ОбщаяФорма.СвязанныеДокументы", ПараметрыОткрытия);
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ИмяТекущейТаблицы()
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаПоставка Тогда
		
		Возврат "Поставка";
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаОтгрузка Тогда
		
		Возврат "Отгрузка";
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаПеремещение Тогда
		
		Возврат "Перемещение";
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;	                         
	
КонецФункции

&НаКлиенте
Процедура ОбновитьТекущуюТаблицу(Команда = Неопределено) 
	
	ТекущаяТаблица = ИмяТекущейТаблицы();
	
	Если ТекущаяТаблица <> Неопределено Тогда
		
		ОбновитьТаблицу(ТекущаяТаблица);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстЗапросаДляТаблицы(Таблица)
	
	Если Таблица = "Поставка" Тогда
		
		Возврат ПолучитьТекстЗапросаПоставка();
		
	ИначеЕсли Таблица = "Отгрузка" Тогда
		
		Возврат ПолучитьТекстЗапросаОтгрузка();
		
	ИначеЕсли Таблица = "Перемещение" Тогда
		
		Возврат ПолучитьТекстЗапросаПеремещение();
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
КонецФункции	

&НаСервере
Процедура УстановитьКомпоновку(ИмяТаблицы)
	
	ИмяКомпоновщика = ИмяТаблицы + "Компоновщик";
	ИмяАдресаСхемы	= ИмяТаблицы + "АдресСхемы";
		
	КомпоновщикНастроек = Объект[ИмяКомпоновщика];   
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	СхемаКомпоновки = Новый СхемаКомпоновкиДанных();		
	
	Источник					= СхемаКомпоновки.ИсточникиДанных.Добавить();
	Источник.Имя				= "ИсточникДанных";
	Источник.СтрокаСоединения	= "";
	Источник.ТипИсточникаДанных	= "local";
	
	НаборДанных	= СхемаКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	
	НаборДанных.Запрос							= ПолучитьТекстЗапросаДляТаблицы(ИмяТаблицы);
	НаборДанных.Имя								= "НаборДанныхЗапроса";
	НаборДанных.ИсточникДанных					= Источник.Имя;
	НаборДанных.АвтоЗаполнениеДоступныхПолей	= Истина;
	
	ЭлементГруппировка = СхемаКомпоновки.ВариантыНастроек[0].Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	
	ЭлементГруппировка.Использование = Истина;
	ЭлементГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ЭлементГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));	
	
	Объект[ИмяАдресаСхемы] = ПоместитьВоВременноеХранилище(СхемаКомпоновки, УникальныйИдентификатор);
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Объект[ИмяАдресаСхемы])); 
	
	ПолеПараметрыДанных	= Новый ПолеКомпоновкиДанных("ПараметрыДанных");
	ПолеСистемныеПоля	= Новый ПолеКомпоновкиДанных("СистемныеПоля"); 
	
	Для Каждого ПолеВыбора Из КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		
		ВыбранноеПоле = СхемаКомпоновки.ВариантыНастроек[0].Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		
		ВыбранноеПоле.Использование	= Не (ПолеВыбора.Поле = ПолеПараметрыДанных ИЛИ ПолеВыбора.Поле = ПолеСистемныеПоля);
		ВыбранноеПоле.Поле			= ПолеВыбора.Поле;
		
	КонецЦикла;	                                                                             
	
	Для Каждого ПараметрКомпоновки Из КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры.Элементы Цикл
		
		ЭлементПараметр = СхемаКомпоновки.ВариантыНастроек[0].Настройки.ПараметрыДанных.Элементы.Добавить();
		
		ЭлементПараметр.Параметр		= ПараметрКомпоновки.Параметр;
		ЭлементПараметр.Использование	= Истина;
		
		ПараметрСхемы = СхемаКомпоновки.Параметры.Добавить(); 
		
		ЗаполнитьЗначенияСвойств(ПараметрСхемы, ПараметрКомпоновки);		
		
		ПараметрСхемы.Имя						= Строка(ПараметрКомпоновки.Параметр);
		ПараметрСхемы.ВключатьВДоступныеПоля	= Ложь;
		
	КонецЦикла;	                                                                             
	
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
	
	СкопироватьОтбор(КомпоновщикНастроек.Настройки.Отбор, Настройки.Отбор)
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицу(ИмяТаблицы)
	
	ИмяКомпоновщика = ИмяТаблицы + "Компоновщик";
	ИмяАдресаСхемы	= ИмяТаблицы + "АдресСхемы";
	
	ПараметрДатаНачала		= Объект[ИмяКомпоновщика].Настройки.ПараметрыДанных.Элементы.Найти("ДатаНачала");
	ПараметрДатаОкончания	= Объект[ИмяКомпоновщика].Настройки.ПараметрыДанных.Элементы.Найти("ДатаОкончания");
	ПараметрОрганизация		= Объект[ИмяКомпоновщика].Настройки.ПараметрыДанных.Элементы.Найти("Организация");
	
	ПараметрДатаНачала.Значение		= Объект.Период.ДатаНачала;
	ПараметрДатаОкончания.Значение	= Объект.Период.ДатаОкончания;
	ПараметрОрганизация.Значение	= Объект.Организация;
	
	СхемаКомпоновки = ПолучитьИзВременногоХранилища(Объект[ИмяАдресаСхемы]);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных; 
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки, Объект[ИмяКомпоновщика].ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	Результат = Новый ТаблицаЗначений;
	
	ПроцессорВывода.УстановитьОбъект(Результат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);   
	
	ОтборСтрок = Новый Структура("Флаг", Истина);
	
	ОтмеченныеСтроки = Объект[ИмяТаблицы].НайтиСтроки(ОтборСтрок);
	
	МассивОтмеченных = Новый Массив;
	
	Для Каждого ОтмеченнаяСтрока Из ОтмеченныеСтроки Цикл
		
		МассивОтмеченных.Добавить(ОтмеченнаяСтрока.Документ);
		
	КонецЦикла;	
	
	Объект[ИмяТаблицы].Загрузить(Результат);       
	
	Если МассивОтмеченных.Количество() Тогда
		
		Для Каждого СтрокаТаблицы Из Объект[ИмяТаблицы] Цикл
			
			Если МассивОтмеченных.Найти(СтрокаТаблицы.Документ) <> Неопределено Тогда
				
				СтрокаТаблицы.Флаг = Истина;
				
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьОтбор(ОтборКуда, ОтборОткуда)
	
	Для Каждого СтрокаОтбора Из ОтборОткуда.Элементы Цикл    
		
		Если ТипЗнч(СтрокаОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		
			НоваяСтрока = ОтборКуда.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОтбора);
			
		Иначе
			
			НоваяСтрока = ОтборКуда.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОтбора);
			
			СкопироватьОтбор(НоваяСтрока, СтрокаОтбора);
			
		КонецЕсли;	
			
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстЗапросаПоставка()
	
	Результат = "ВЫБРАТЬ
	            |	ПриобретениеТоваровУслуг.Ссылка КАК Документ,
	            |	ПриобретениеТоваровУслуг.СуммаДокумента КАК Сумма,
	            |	ПриобретениеТоваровУслуг.Валюта КАК Валюта,
	            |	ПриобретениеТоваровУслуг.Склад КАК Склад,
	            |	Контрагенты.Ссылка КАК Контрагент
	            |ИЗ
	            |	Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	            |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	            |		ПО ПриобретениеТоваровУслуг.Партнер = Контрагенты.Партнер
	            |ГДЕ
	            |	ПриобретениеТоваровУслуг.Проведен
	            |	И ПриобретениеТоваровУслуг.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	            |	И ПриобретениеТоваровУслуг.Организация = &Организация";    
	
	Возврат Результат;
	
КонецФункции	

&НаСервере
Функция ПолучитьТекстЗапросаОтгрузка()
	
	Результат = "ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Документ,
	|	РеализацияТоваровУслуг.СуммаДокумента КАК Сумма,
	|	РеализацияТоваровУслуг.Валюта КАК Валюта,
	|	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
	|	РеализацияТоваровУслуг.Склад КАК Склад
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Проведен
	|	И РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И РеализацияТоваровУслуг.Организация = &Организация";    
	
	Возврат Результат;
	
КонецФункции	

&НаСервере
Функция ПолучитьТекстЗапросаПеремещение()
	
	Результат = "ВЫБРАТЬ
	            |	ПеремещениеТоваров.Ссылка КАК Документ,
	            |	ПеремещениеТоваров.СкладОтправитель КАК СкладОтправитель,
	            |	ПеремещениеТоваров.СкладПолучатель КАК СкладПолучатель
	            |ИЗ
	            |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	            |ГДЕ
	            |	ПеремещениеТоваров.Проведен
	            |	И ПеремещениеТоваров.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	            |	И ПеремещениеТоваров.Организация = &Организация";    
	
	Возврат Результат;
	
КонецФункции	     

&НаСервере
Процедура УстановитьДоступностьКолонокТаблиц()

	УстановитьДоступностьКолонокТаблицы("Поставка");
	УстановитьДоступностьКолонокТаблицы("Отгрузка");
	УстановитьДоступностьКолонокТаблицы("Перемещение");
	
КонецПроцедуры


&НаСервере
Процедура УстановитьДоступностьКолонокТаблицы(ИмяТаблицы)
	
	Для Каждого Колонка Из Элементы[ИмяТаблицы].ПодчиненныеЭлементы Цикл
		
		Если Колонка.Имя <> ИмяТаблицы + "Флаг" Тогда
			
			Колонка.ТолькоПросмотр = Истина;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяФормыОбъекта(СсылкаНаОбъект)
	
	ТипОбъекта = ТипЗнч(СсылкаНаОбъект);   
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипОбъекта) Тогда
		
		МетаданныеОбъекта = СсылкаНаОбъект.Метаданные();
	
		Если ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта) Тогда
			
			Возврат "Документ." + МетаданныеОбъекта.Имя + ".ФормаОбъекта";
			
		ИначеЕсли ОбщегоНазначения.ЭтоСправочник(МетаданныеОбъекта) Тогда
			
			Возврат "Справочник." + МетаданныеОбъекта.Имя + ".ФормаОбъекта";
			
		Иначе
			
			Возврат Неопределено;
			
		КонецЕсли;		
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
КонецФункции	

#КонецОбласти

