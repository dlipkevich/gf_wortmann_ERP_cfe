#Область ОбработчикиСобытийФормы

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// Отказ				- Булево
// СтандартнаяОбработка	- Булево
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьДоступностьКолонокТаблиц();
	
	ЗаполнитьСписокВыбораТиповДокументов();
	
	ЧасовМеждуЗапросами = Константы.гф_ПочтаРоссииПромежутокМеждуЗапросамиКОдномуТрекНомеру.Получить();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.гф_ПочтаРоссии_ЗапросКТрекеру);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗапрашиватьДанныеПоРасписанию = Задание.Использование;
	
	Элементы.ГруппаНастройкиЗадания.Видимость = ЗапрашиватьДанныеПоРасписанию;
	
	Администратор = Пользователи.ЭтоПолноправныйПользователь();
	
	Элементы.ГруппаНастройки.ТолькоПросмотр = Не Администратор;
	Элементы.КомандаРасписание.Доступность  = Администратор;
	
	УправлениеСтатусами = Пользователи.РолиДоступны("гф_УправлениеСтатусамиСкладскихОрдеров");
	
	Элементы.ИзменитьСтатусыПО.Видимость = УправлениеСтатусами;
	Элементы.ИзменитьСтатусыРО.Видимость = УправлениеСтатусами;
	Элементы.ГруппаПеремещениеИзменитьСтатусы.Видимость = УправлениеСтатусами;
	
	ФормированиеЗаявок = Пользователи.РолиДоступны("гф_ФормированиеЗаявокВТК");
	
	Элементы.ФормаСоздатьЗаявкиНаДоставку.Видимость = ФормированиеЗаявок;
	
	ПечатныеФормы = Пользователи.РолиДоступны("гф_ФормированиеПечатныхФорм");
	
	Элементы.ОтгрузкаПечатныеФормы.Видимость = ПечатныеФормы;
	Элементы.ПечатныеФормы1.Видимость        = ПечатныеФормы;
	Элементы.ПечатныеФормы2.Видимость        = ПечатныеФормы;
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
&НаСервере
Процедура ПриОткрытииНаСервере()
	
	Если Не ЗначениеЗаполнено(Объект.Период) Тогда
		
		Объект.Период.ДатаНачала    = НачалоМесяца(ТекущаяДатаСеанса());
		Объект.Период.ДатаОкончания = НачалоМесяца(ТекущаяДатаСеанса());
		
	КонецЕсли;
	
	УстановитьКомпоновку("Поставка");
	УстановитьКомпоновку("Отгрузка");
	УстановитьКомпоновку("Перемещение");
	
	Если Не ЗначениеЗаполнено(Объект.ТипДокумента) Тогда
		
		Объект.ТипДокумента = Метаданные.Документы.РеализацияТоваровУслуг.Имя;
		
	КонецЕсли;
	
	ТипДокументаПриИзмененииНаСервере();
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// Отказ				- Булево
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПриОткрытииНаСервере();
	
	ОбновитьТекущуюТаблицу();
	
КонецПроцедуры // } #wortmann

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// Элемент - ПолеФормы
//
&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ОбновитьТекущуюТаблицу();
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// Элемент - ПолеФормы
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбновитьТекущуюТаблицу();
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// Элемент			- ПолеФормы
// ТекущаяСтраница	- ГруппаФормы
//
&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьТекущуюТаблицу();
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// Элемент - ПолеФормы
//
&НаКлиенте
Процедура КомпоновщикНастройкиОтборПриИзменении(Элемент)
	
	ОбновитьТекущуюТаблицу();
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// Элемент 				- ПолеФормы
// ВыбраннаяСтрока 		- СтрокаТаблицы
// Поле 				- ПолеФормы
// СтандартнаяОбработка - Булево
//
&НаКлиенте
Процедура ТаблицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИмяТаблицы = ИмяТекущейТаблицы();
	
	Если Не Поле.ТолькоПросмотр Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ИмяДанных = СтрЗаменить(Поле.Имя, ИмяТаблицы, "");
	
	Данные = ДанныеПоИмени(ТекущиеДанные, ИмяДанных);
	
	Если ЗначениеЗаполнено(Данные) Тогда
		
		ИмяФормыОбъекта = ПолучитьИмяФормыОбъекта(Данные);
		
		Если ИмяФормыОбъекта <> Неопределено Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияФормыОбъекта", ЭтотОбъект);
			
			ПараметрыОткрытия = Новый Структура("Ключ", Данные);
			
			ОткрытьФорму(ИмяФормыОбъекта,
			ПараметрыОткрытия,
			ЭтотОбъект, , , ,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// ТекущиеДанные 	- СтрокаТаблицы
// ИмяДанных 		- Строка
//
// Возвращаемое значение:
//
//	- Произвольный - Данные из колонки текущих данных
//
&НаКлиенте
Функция ДанныеПоИмени(ТекущиеДанные, ИмяДанных)
	
	Если ИмяДанных = "Прямая" Тогда
		
		Возврат Неопределено;
		
	ИначеЕсли ИмяДанных = "ТипДокумента"
		ИЛИ ИмяДанных = "Дата"
		ИЛИ ИмяДанных = "Номер"
		ИЛИ ИмяДанных = "Статус" Тогда
		
		Данные = ТекущиеДанные.Документ;
		
	ИначеЕсли ИмяДанных = "СтатусПО"
		ИЛИ ИмяДанных = "ДатаПО"
		ИЛИ ИмяДанных = "НомерПО" Тогда
		
		Данные = ТекущиеДанные.ПриходныйОрдер;
		
	ИначеЕсли ИмяДанных = "СостояниеПосылки"
		ИЛИ ИмяДанных = "ДатаСостоянияПосылки" Тогда
		
		Данные = ТекущиеДанные.Посылка;
		
	ИначеЕсли ИмяДанных = "СтатусРО"
		ИЛИ ИмяДанных = "ДатаРО"
		ИЛИ ИмяДанных = "НомерРО" Тогда
		
		Данные = ТекущиеДанные.РасходныйОрдер;
		
	ИначеЕсли ИмяДанных = "СтатусКМ" Тогда
		
		Если ТекущиеДанные.СтатусКМ = "Другое" Тогда
			
			Данные = Неопределено;
			
			ПараметрОтбор = Новый Структура("ДокументОснование", ТекущиеДанные.Документ);
			
			ПараметрыОткрытия = Новый Структура("Отбор", ПараметрОтбор);
			
			ПараметрыОткрытия.Вставить("РежимВыбора ", Истина);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыборкаМаркировкаТоваровИСМП", ЭтотОбъект);
			
			ОткрытьФорму("Документ.МаркировкаТоваровИСМП.Форма.ФормаСпискаДокументов",
			ПараметрыОткрытия,
			ЭтотОбъект,         , , ,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Иначе
			
			Данные = ТекущиеДанные.ДокументМаркировка;
			
		КонецЕсли;
		
	Иначе
		
		Данные = ТекущиеДанные[ИмяДанных];
		
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// Результат 				- Произвольный
// ДополнительныеПараметры	- Структура - Произвольная структура.
//
&НаКлиенте
Процедура ПослеЗакрытияФормыОбъекта(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьТекущуюТаблицу();
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// Результат 				- Произвольный
// ДополнительныеПараметры	- Произвольный
//
&НаКлиенте
Процедура ОбработкаВыборкаМаркировкаТоваровИСМП(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		ПараметрыОткрытия = Новый Структура("Ключ", Результат);
		
		ОткрытьФорму("Документ.МаркировкаТоваровИСМП.Форма.ФормаДокумента",
		ПараметрыОткрытия,
		ЭтотОбъект,        , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
&НаСервере
Процедура ТипДокументаПриИзмененииНаСервере()
	
	ЗаполнитьСписокВыбораПечатныхФорм();
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// Элемент - ПолеФормы
//
&НаКлиенте
Процедура ТипДокументаПриИзменении(Элемент)
	
	ТипДокументаПриИзмененииНаСервере();
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// ЧасовМеждуЗапросами	- Число
//
&НаСервереБезКонтекста
Процедура ЧасовМеждуЗапросамиПриИзмененииНаСервере(ЧасовМеждуЗапросами)
	
	Константы.гф_ПочтаРоссииПромежутокМеждуЗапросамиКОдномуТрекНомеру.Установить(ЧасовМеждуЗапросами);
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// Элемент - ПолеФормы
//
&НаКлиенте
Процедура ЧасовМеждуЗапросамиПриИзменении(Элемент)
	
	ЧасовМеждуЗапросамиПриИзмененииНаСервере(ЧасовМеждуЗапросами);
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
&НаСервере
Процедура ЗапрашиватьДанныеПоРасписаниюПриИзмененииНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.гф_ПочтаРоссии_ЗапросКТрекеру);
	
	Задание.Использование = ЗапрашиватьДанныеПоРасписанию;
	
	Задание.Записать();
	
	Элементы.ГруппаНастройкиЗадания.Видимость = ЗапрашиватьДанныеПоРасписанию;
	
	УстановитьПривилегированныйРежим(Истина);
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// Элемент - ПолеФормы
//
&НаКлиенте
Процедура ЗапрашиватьДанныеПоРасписаниюПриИзменении(Элемент)
	
	ЗапрашиватьДанныеПоРасписаниюПриИзмененииНаСервере();
	
КонецПроцедуры // } #wortmann

#КонецОбласти

#Область ОбработчикиКомандФормы

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// Команда				- Строка
//
&НаКлиенте
Процедура УстановитьМетки(Команда)
	
	ТекущаяТаблица = ИмяТекущейТаблицы();
	
	Если ТекущаяТаблица = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Команда = ЭтотОбъект.Команды.ОтметитьВсе Тогда
		
		Флаг = Истина;
		
	ИначеЕсли Команда = ЭтотОбъект.Команды.СнятьВсеМетки Тогда
		
		Флаг = Ложь;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	
	Для Каждого СтрокаТаблицы Из Объект[ТекущаяТаблица] Цикл
		
		СтрокаТаблицы.Флаг = Флаг;
		
	КонецЦикла;
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// Команда				- Строка
//
&НаКлиенте
Процедура СвязанныеДокументы(Команда)
	
	ИмяТаблицы = ИмяТекущейТаблицы();
	
	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда
			
			ПараметрыОткрытия = Новый Структура;
			
			ПараметрыОткрытия.Вставить("ОбъектОтбора", ТекущиеДанные.Документ);
			
			ОткрытьФорму("ОбщаяФорма.СвязанныеДокументы", ПараметрыОткрытия);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// Команда				- Строка
//
&НаКлиенте
Процедура ИзменитьСтатусыПО(Команда)
	
	ОтмеченныеСтроки = ПолучитьОтмеченныеСтроки();
	
	Если Не ОтмеченныеСтроки.Количество() Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нет отмеченных строк");
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьСтатусыПОПродолжение", ЭтотОбъект, ОтмеченныеСтроки);
	
	Значение = ПредопределенноеЗначение("Перечисление.СтатусыПриходныхОрдеров.ВРаботе");
	
	ПоказатьВводЗначения(ОписаниеОповещения, Значение, "Выберите статус ПО");
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// Статус				- Перечисление
// ОтмеченныеСтроки		- Массив
//
&НаКлиенте
Процедура ИзменитьСтатусыПОПродолжение(Статус, ОтмеченныеСтроки) Экспорт
	
	Если ЗначениеЗаполнено(Статус) Тогда
		
		МассивОрдеров = Новый Массив;
		
		Для Каждого ОтмеченнаяСтрока Из ОтмеченныеСтроки Цикл
			
			Если ЗначениеЗаполнено(ОтмеченнаяСтрока.ПриходныйОрдер) И ОтмеченнаяСтрока.СтатусПО <> Статус Тогда
				
				МассивОрдеров.Добавить(ОтмеченнаяСтрока.ПриходныйОрдер);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивОрдеров.Количество() Тогда
			
			УстановитьСтатусыОрдеров(МассивОрдеров, Статус);
			
			ОбновитьТекущуюТаблицу();
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нет ордеров для изменения статусов");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// Команда				- Строка
//
&НаКлиенте
Процедура ИзменитьСтатусыРО(Команда)
	
	ОтмеченныеСтроки = ПолучитьОтмеченныеСтроки();
	
	Если Не ОтмеченныеСтроки.Количество() Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нет отмеченных строк");
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьСтатусыРОПродолжение", ЭтотОбъект, ОтмеченныеСтроки);
	
	Значение = ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров.ВПроцессеПроверки");
	
	ПоказатьВводЗначения(ОписаниеОповещения, Значение, "Выберите статус РО");
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// Статус				- Перечисление
// ОтмеченныеСтроки		- Массив
//
&НаКлиенте
Процедура ИзменитьСтатусыРОПродолжение(Статус, ОтмеченныеСтроки) Экспорт
	
	Если ЗначениеЗаполнено(Статус) Тогда
		
		МассивОрдеров = Новый Массив;
		
		Для Каждого ОтмеченнаяСтрока Из ОтмеченныеСтроки Цикл
			
			Если ЗначениеЗаполнено(ОтмеченнаяСтрока.РасходныйОрдер) И ОтмеченнаяСтрока.СтатусРО <> Статус Тогда
				
				МассивОрдеров.Добавить(ОтмеченнаяСтрока.РасходныйОрдер);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивОрдеров.Количество() Тогда
			
			УстановитьСтатусыОрдеров(МассивОрдеров, Статус);
			
			ОбновитьТекущуюТаблицу();
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нет ордеров для изменения статусов");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// Команда				- Строка
//
&НаКлиенте
Процедура СоздатьПО(Команда)
	
	ОтмеченныеСтроки = ПолучитьОтмеченныеСтроки();
	
	Если Не ОтмеченныеСтроки.Количество() Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нет отмеченных строк");
		
		Возврат;
		
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	
	Для Каждого ОтмеченнаяСтрока Из ОтмеченныеСтроки Цикл
		
		Если ЗначениеЗаполнено(ОтмеченнаяСтрока.Документ) И Не ЗначениеЗаполнено(ОтмеченнаяСтрока.ПриходныйОрдер) Тогда
			
			МассивСтрок.Добавить(ОтмеченнаяСтрока.ПолучитьИдентификатор());
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСтрок.Количество() Тогда
		
		ИмяТаблицы = ИмяТекущейТаблицы();
		
		СоздатьПОНаСервере(МассивСтрок, ИмяТаблицы);
		
		ОбновитьТекущуюТаблицу();
		
	КонецЕсли;
	
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// МассивСтрок	- Массив
// ИмяТаблицы	- Строка
//
&НаСервере
Процедура СоздатьПОНаСервере(МассивСтрок, ИмяТаблицы)
	
	Для Каждого ИдентификаторСтроки Из МассивСтрок Цикл
		
		ОтмеченнаяСтрока = Объект[ИмяТаблицы].НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Основание = Новый Структура;
		
		Основание.Вставить("Распоряжение",            ОтмеченнаяСтрока.Документ);
		Основание.Вставить("Отправитель",             ОтмеченнаяСтрока.Партнер);
		Основание.Вставить("Склад",     ОтмеченнаяСтрока.СкладПолучатель);
		Основание.Вставить("Помещение", ПредопределенноеЗначение("Справочник.СкладскиеПомещения.ПустаяСсылка"));
		Основание.Вставить("ЗонаПриемки",             ПредопределенноеЗначение("Справочник.СкладскиеЯчейки.ПустаяСсылка"));
		Основание.Вставить("ДатаВходящегоДокумента",  ОтмеченнаяСтрока.Дата);
		Основание.Вставить("НомерВходящегоДокумента", ОтмеченнаяСтрока.Номер);
		Основание.Вставить("ДатаПоступления",         ОтмеченнаяСтрока.Дата);
		Основание.Вставить("ХозяйственнаяОперация",   ОтмеченнаяСтрока.ХозяйственнаяОперация);
		
		ПриходныйОрдер = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
		
		ПриходныйОрдер.Заполнить(Основание);
		
		ПриходныйОрдер.Дата = ТекущаяДатаСеанса();
		
		ПриходныйОрдер.ЗаполнитьТоварыПоТоварамКПоступлению("НоменклатураКоличество", ОтмеченнаяСтрока.Дата);
		
		ПриходныйОрдер.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// Команда				- Строка
//
&НаКлиенте
Процедура СоздатьЗаявкиНаДоставку(Команда)
	
	МассивОрдеров = Новый Массив;
	
	ДобавитьОтмеченныеСтрокиВМассивОрдеров(МассивОрдеров, "Отгрузка");
	
	ДобавитьОтмеченныеСтрокиВМассивОрдеров(МассивОрдеров, "Перемещение");
	
	Если Не МассивОрдеров.Количество() Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не найдено отмеченных строк с расходыми ордерами и ТК");
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("МассивОрдеров", МассивОрдеров);
	
	Уникальность = Новый УникальныйИдентификатор;
	
	ОткрытьФорму("Обработка.гф_ЗаявкиНаДоставку.Форма.Форма", ПараметрыОткрытия, ЭтотОбъект, Уникальность);
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// МассивОрдеров	- Массив
// ИмяРаздела	- Строка
//
&НаКлиенте
Процедура ДобавитьОтмеченныеСтрокиВМассивОрдеров(МассивОрдеров, ИмяРаздела)
	
	ОтборОтмеченных = Новый Структура("Флаг", Истина);
	
	МассивОтмеченныхСтрок = Объект[ИмяРаздела].НайтиСтроки(ОтборОтмеченных);
	
	Для Каждого ОтмеченнаяСтрока Из МассивОтмеченныхСтрок Цикл
		
		Если ЗначениеЗаполнено(ОтмеченнаяСтрока.РасходныйОрдер) Тогда
			
			Если ЗначениеЗаполнено(ОтмеченнаяСтрока.ТК) Тогда
				
				Ордер = Новый Структура("РасходныйОрдер, ТК");
				
				Ордер.Вставить("РасходныйОрдер", ОтмеченнаяСтрока.РасходныйОрдер);
				Ордер.Вставить("ТК",             ОтмеченнаяСтрока.ТК);
				// ++ Волков
				Ордер.Вставить("РеализацияТоваровИУслуг", ОтмеченнаяСтрока.Документ);
                // -- Волков
				
				МассивОрдеров.Добавить(Ордер);
				
			Иначе
				
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"В разделе ""%1"" в строке %2 не указана транспортная компания",
				ИмяРаздела, ОтмеченнаяСтрока.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
				
			КонецЕсли;
			
		Иначе
			
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"В разделе ""%1"" в строке %2 не указан расходный ордер",
			ИмяРаздела, ОтмеченнаяСтрока.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// Команда				- Строка
//
&НаКлиенте
Процедура ПечатныеФормы(Команда)
	
	ОтмеченныеСтроки = ПолучитьОтмеченныеСтроки();
	
	МассивДокументов = Новый Массив;
	
	Для Каждого ОтмеченнаяСтрока Из ОтмеченныеСтроки Цикл
		
		Если ЗначениеЗаполнено(ОтмеченнаяСтрока.Документ) Тогда
			
			МассивДокументов.Добавить(ОтмеченнаяСтрока.Документ);
			
			ТипДокумента = ТипДокумента(ОтмеченнаяСтрока.Документ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	Если Не МассивДокументов.Количество() Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нет отмеченных документов для печати");
		
		Возврат;
		
	КонецЕсли;
	
	
	ПараметрыОткрытия = Новый Структура();
	
	ПараметрыОткрытия.Вставить("МассивДокументов",       МассивДокументов);
	ПараметрыОткрытия.Вставить("ТипДокумента",           ТипДокумента);
	ПараметрыОткрытия.Вставить("ВыбранныеПечатныеФормы", ВыбранныеПечатныеФормы);
	
	ОткрытьФорму(ЭтотОбъект.ИмяФормы + "Печать",
	ПараметрыОткрытия,
	,
	Истина,
	,
	,
	,
	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// Команда				- Строка
//
&НаКлиенте
Процедура КомандаЗапрос(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена учетная запись.");
		
		Возврат;
		
	КонецЕсли;
	
	КомандаЗапросНаСервере();
	
	ОповеститьОбИзменении(Объект.ПочтовоеОтправление);
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
&НаСервере
Процедура КомандаЗапросНаСервере()
	
	УчетнаяЗапись       = Объект.УчетнаяЗапись;
	ПочтовоеОтправление = Объект.ПочтовоеОтправление;
	
	Ошибки = Новый Массив;
	
	ОтветМассив = гф_ПочтаРоссии.ПолучитьДанныеОтслеживания(УчетнаяЗапись, ПочтовоеОтправление, Ошибки);
	
	Если Ошибки.Количество() Тогда
		
		Для Каждого Ошибка Из Ошибки Цикл
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ошибка);
			
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	Объект.История.Очистить();
	
	Для Каждого СтрокаОтвета Из ОтветМассив Цикл
		
		НоваяСтрока = Объект.История.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОтвета.Операция);
		
	КонецЦикла;
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
&НаСервере
Процедура ПрочитатьРасписаниеНаСервере();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.гф_ПочтаРоссии_ЗапросКТрекеру);
	
	РасписаниеРегламентногоЗадания = Задание.Расписание;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
&НаСервере
Процедура ЗаписатьРасписаниеНаСервере();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.гф_ПочтаРоссии_ЗапросКТрекеру);
	
	Задание.Расписание = РасписаниеРегламентногоЗадания;
	
	Задание.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// Команда				- Строка
//
&НаКлиенте
Процедура КомандаРасписание(Команда)
	
	ПрочитатьРасписаниеНаСервере();
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	
	ДополнительныеПараметры = Новый Структура;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриУстановкеРасписания", ЭтотОбъект, ДополнительныеПараметры);
	
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// Результат 				- Структура
// ДополнительныеПараметры	- Структура - произвольная структура.
//
&НаКлиенте
Процедура ПриУстановкеРасписания(Результат, ДополнительныеПараметры) Экспорт
	
	РасписаниеРегламентногоЗадания = Результат;
	
	ЗаписатьРасписаниеНаСервере();
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// Ошибки - Массив
//
&НаСервере
Процедура КомандаНомализацияАдресаНаСервере(Ошибки)
	
	ТаблицаАдресов = ПроверяемыеАдреса.Выгрузить(, "Адрес");
	
	МассивАдресов = ТаблицаАдресов.ВыгрузитьКолонку("Адрес");
	
	ТекстОтвета = гф_ПочтаРоссии.ОтправкаЗапросНормализацииАдреса(Объект.УчетнаяЗаписьОтправка, МассивАдресов, Ошибки);
	
	ОтветОтПочты.УстановитьТекст(ТекстОтвета);
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// Команда				- Строка
//
&НаКлиенте
Процедура КомандаНомализацияАдреса(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.УчетнаяЗаписьОтправка) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена учетная запись.");
		
		Возврат;
		
	КонецЕсли;
	
	Ошибки = Новый Массив;
	
	КомандаНомализацияАдресаНаСервере(Ошибки);
	
	Если Ошибки.Количество() Тогда
		
		Для Каждого Ошибка Из Ошибки Цикл
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ошибка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// Ошибки - Массив
//
&НаСервере
Процедура КомандаНормализацияФИОНаСервере(Ошибки)
	
	ТаблицаФИО = ПроверяемыеФИО.Выгрузить(, "ФИО");
	
	МассивФИО = ТаблицаФИО.ВыгрузитьКолонку("ФИО");
	
	ТекстОтвета = гф_ПочтаРоссии.ОтправкаЗапросНормализацииФИО(Объект.УчетнаяЗаписьОтправка, МассивФИО, Ошибки);
	
	ОтветОтПочты.УстановитьТекст(ТекстОтвета);
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// Команда				- Строка
//
&НаКлиенте
Процедура КомандаНормализацияФИО(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.УчетнаяЗаписьОтправка) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена учетная запись.");
		
		Возврат;
		
	КонецЕсли;
	
	Ошибки = Новый Массив;
	
	КомандаНормализацияФИОНаСервере(Ошибки);
	
	Если Ошибки.Количество() Тогда
		
		Для Каждого Ошибка Из Ошибки Цикл
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ошибка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // } #wortmann

&НаСервере
Процедура КомандаНормализацияТелефонаНаСервере(Ошибки)
	
	ТаблицаТелефонов = ПроверяемыеТелефоны.Выгрузить(, "Телефон");
	
	МассивТелефонов = ТаблицаТелефонов.ВыгрузитьКолонку("Телефон");
	
	ТекстОтвета = гф_ПочтаРоссии.ОтправкаЗапросНормализацииТелефона(Объект.УчетнаяЗаписьОтправка,
	МассивТелефонов,
	Ошибки);
	
	ОтветОтПочты.УстановитьТекст(ТекстОтвета);
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// Команда				- Строка
//
&НаКлиенте
Процедура КомандаНормализацияТелефона(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.УчетнаяЗаписьОтправка) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена учетная запись.");
		
		Возврат;
		
	КонецЕсли;
	
	Ошибки = Новый Массив;
	
	КомандаНормализацияТелефонаНаСервере(Ошибки);
	
	Если Ошибки.Количество() Тогда
		
		Для Каждого Ошибка Из Ошибки Цикл
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ошибка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// Ошибки - Массив
//
&НаСервере
Процедура КомандаКоличествоЗапросовНаСервере(Ошибки)
	
	ТекстОтвета = гф_ПочтаРоссии.ОтправкаЗапросКоличествоЗапросов(Объект.УчетнаяЗаписьОтправка, Ошибки);
	
	ОтветОтПочты.УстановитьТекст(ТекстОтвета);
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// Команда				- Строка
//
&НаКлиенте
Процедура КомандаКоличествоЗапросов(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.УчетнаяЗаписьОтправка) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена учетная запись.");
		
		Возврат;
		
	КонецЕсли;
	
	Ошибки = Новый Массив;
	
	КомандаКоличествоЗапросовНаСервере(Ошибки);
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Команда по загрузке выбранных документов в WMS
// Галфинд_Домнышева 2022/09/28.
&НаКлиенте
Процедура ВыгрузитьWMS(Команда)
	ТекстВопроса = НСтр("ru = 'Загрузка выбранных вручную документов?'");
	Оповещение   = Новый ОписаниеОповещения("ВопросОВыгрузки", ЭтотОбъект);
	ПоказатьВопрос(     Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,);
	
КонецПроцедуры // } #wortmann// } #wortmann

// #wortmann {
// Команда по загрузке выбранных документов в WMS
// Галфинд_Домнышева 2022/10/26.
&НаКлиенте
Процедура ЗагрузитьWMS(Команда)
	
	ТекстВопроса = НСтр("ru = 'Загрузить документы из WMS?'");
	Оповещение   = Новый ОписаниеОповещения("ВопросОЗагрузки", ЭтотОбъект);
	ПоказатьВопрос(     Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,);
	
КонецПроцедуры // } #wortmann// } #wortmann

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоставка

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// Документ			- Ссылка
// ДатаПоступления	- Дата
//
&НаСервереБезКонтекста
Процедура ПоставкаДатаПоступленияПриИзмененииНаСервере(Документ, ДатаПоступления)
	
	Если Документ.ДатаПоступления <> ДатаПоступления Тогда
		
		ДокументОбъект = Документ.ПолучитьОбъект();
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		ДокументОбъект.ДатаПоступления = ДатаПоступления;
		
		ДокументОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// Элемент - ПолеФормы
//
&НаКлиенте
Процедура ПоставкаДатаПоступленияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Поставка.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда
		
		ПоставкаДатаПоступленияПриИзмененииНаСервере(ТекущиеДанные.Документ, ТекущиеДанные.ДатаПоступления);
		
	Иначе
		
		ТекущиеДанные.ДатаПоставки = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// Элемент - ПолеФормы
//
&НаКлиенте
Процедура ПоставкаПрямаяПоставкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Поставка.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда
		
		УстановитьСвойствоОбъекта(ТекущиеДанные.Документ, "гф_ПТУПрямаяПоставка", ТекущиеДанные.ПрямаяПоставка);
		
	Иначе
		
		ТекущиеДанные.ПрямаяПоставка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // } #wortmann

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтгрузка

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// Элемент - ПолеФормы
//
&НаКлиенте
Процедура ОтгрузкаАдресДоставкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Отгрузка.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ЗаказКлиента) Тогда
		
		ОтгрузкаАдресДоставкиПриИзмененииНаСервере(ТекущиеДанные.Документ, ТекущиеДанные.АдресДоставки);
		
		ОбновитьТекущуюТаблицу();
		
	Иначе
		
		ТекущиеДанные.АдресДоставки = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// Документ			- Ссылка
// АдресДоставки	- Ссылка
//
&НаСервереБезКонтекста
Процедура ОтгрузкаАдресДоставкиПриИзмененииНаСервере(Документ, АдресДоставки)
	
	Если Документ.гф_АдресДоставки <> АдресДоставки Тогда
		
		ДокументОбъект = Документ.ПолучитьОбъект();
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		ДокументОбъект.гф_АдресДоставки = АдресДоставки;
		
		ДокументОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// АдресДоставки	- Ссылка
// ТК				- Ссылка
//
&НаСервереБезКонтекста
Процедура ОтгрузкаТКПриИзмененииНаСервере(АдресДоставки, ТК)
	
	Если АдресДоставки.ТК <> ТК Тогда
		
		АдресДоставкиОбъект = АдресДоставки.ПолучитьОбъект();
		
		АдресДоставкиОбъект.ОбменДанными.Загрузка = Истина;
		
		АдресДоставкиОбъект.ТК = ТК;
		
		АдресДоставкиОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// Элемент - ПолеФормы
//
&НаКлиенте
Процедура ОтгрузкаТКПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Отгрузка.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.АдресДоставки) Тогда
		
		ОтгрузкаТКПриИзмененииНаСервере(ТекущиеДанные.АдресДоставки, ТекущиеДанные.ТК);
		
		ОбновитьТекущуюТаблицу();
		
	Иначе
		
		ТекущиеДанные.ТК = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры // } #wortmann

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Возвращаемое значение:
//	- Строка - имя текущей активной таблицы.
//
&НаКлиенте
Функция ИмяТекущейТаблицы()
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаПоставка Тогда
		
		Возврат "Поставка";
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаОтгрузка Тогда
		
		Возврат "Отгрузка";
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаПеремещение Тогда
		
		Возврат "Перемещение";
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Параметры:
//
// Команда - Строка
//
&НаКлиенте
Процедура ОбновитьТекущуюТаблицу(Команда = Неопределено)
	
	ИмяТаблицы = ИмяТекущейТаблицы();
	
	Если ИмяТаблицы <> Неопределено Тогда
		
		Если Элементы[ИмяТаблицы].ТекущиеДанные <> Неопределено Тогда
			
			ТекущийДокумент = Элементы[ИмяТаблицы].ТекущиеДанные.Документ;
			
		Иначе
			
			ТекущийДокумент = Неопределено;
			
		КонецЕсли;
		
		ОбновитьТаблицу(ИмяТаблицы);
		
		Если ЗначениеЗаполнено(ТекущийДокумент) Тогда
			
			ОтборСтрок = Новый Структура;
			
			ОтборСтрок.Вставить("Документ", ТекущийДокумент);
			
			МассивСтрок = Объект[ИмяТаблицы].НайтиСтроки(ОтборСтрок);
			
			Если МассивСтрок.Количество() Тогда
				
				Элементы[ИмяТаблицы].ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
// Параметры:
//
// Таблица - Строка
//
// Возвращаемое значение:
//	- Строка - текст запроса
//
&НаСервере
Функция ПолучитьТекстЗапросаДляТаблицы(Таблица)
	
	Если Таблица = "Поставка" Тогда
		
		Возврат ПолучитьТекстЗапросаПоставка();
		
	ИначеЕсли Таблица = "Отгрузка" Тогда
		
		Возврат ПолучитьТекстЗапросаОтгрузка();
		
	ИначеЕсли Таблица = "Перемещение" Тогда
		
		Возврат ПолучитьТекстЗапросаПеремещение();
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
// Параметры:
//
// ИмяТаблицы - Строка
//
&НаСервере
Процедура УстановитьКомпоновку(ИмяТаблицы)
	
	ИмяКомпоновщика = ИмяТаблицы + "Компоновщик";
	ИмяАдресаСхемы  = ИмяТаблицы + "АдресСхемы";
	
	КомпоновщикНастроек = Объект[ИмяКомпоновщика];
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	СхемаКомпоновки = Новый СхемаКомпоновкиДанных();
	
	Источник     = СхемаКомпоновки.ИсточникиДанных.Добавить();
	Источник.Имя = "ИсточникДанных";
	Источник.СтрокаСоединения   = "";
	Источник.ТипИсточникаДанных = "local";
	
	НаборДанных = СхемаКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	
	НаборДанных.Запрос         = ПолучитьТекстЗапросаДляТаблицы(ИмяТаблицы);
	НаборДанных.Имя            = "НаборДанныхЗапроса";
	НаборДанных.ИсточникДанных = Источник.Имя;
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	
	ЭлементГруппировка = СхемаКомпоновки.ВариантыНастроек[0].Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	
	ЭлементГруппировка.Использование = Истина;
	ЭлементГруппировка.Выбор.Элементы.Добавить(  Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ЭлементГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
	Объект[ИмяАдресаСхемы] = ПоместитьВоВременноеХранилище(СхемаКомпоновки, УникальныйИдентификатор);
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Объект[ИмяАдресаСхемы]));
	
	УстановитьПоляИПараметры(КомпоновщикНастроек, СхемаКомпоновки);
	
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
	
	СкопироватьОтбор(КомпоновщикНастроек.Настройки.Отбор, Настройки.Отбор)
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
// Параметры:
//
// КомпоновщикНастроек	- КомпоновщикНастроекКомпоновкиДанных
// СхемаКомпоновки		- СхемаКомпоновкиДанных
//
&НаСервере
Процедура УстановитьПоляИПараметры(КомпоновщикНастроек, СхемаКомпоновки)
	
	ПолеПараметрыДанных = Новый ПолеКомпоновкиДанных("ПараметрыДанных");
	ПолеСистемныеПоля   = Новый ПолеКомпоновкиДанных("СистемныеПоля");
	
	Для Каждого ПолеВыбора Из КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		
		ВыбранноеПоле = СхемаКомпоновки.ВариантыНастроек[0].Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		
		ВыбранноеПоле.Использование = Не (ПолеВыбора.Поле = ПолеПараметрыДанных ИЛИ ПолеВыбора.Поле = ПолеСистемныеПоля);
		ВыбранноеПоле.Поле          = ПолеВыбора.Поле;
		
	КонецЦикла;
	
	Для Каждого ПараметрКомпоновки Из КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры.Элементы Цикл
		
		ЭлементПараметр = СхемаКомпоновки.ВариантыНастроек[0].Настройки.ПараметрыДанных.Элементы.Добавить();
		
		ЭлементПараметр.Параметр      = ПараметрКомпоновки.Параметр;
		ЭлементПараметр.Использование = Истина;
		
		ПараметрСхемы = СхемаКомпоновки.Параметры.Добавить();
		
		ЗаполнитьЗначенияСвойств(ПараметрСхемы, ПараметрКомпоновки);
		
		ПараметрСхемы.Имя = Строка(ПараметрКомпоновки.Параметр);
		ПараметрСхемы.ВключатьВДоступныеПоля = Ложь;
		
	КонецЦикла;
	
	Для Каждого ПараметрКомпоновки Из КомпоновщикНастроек.Настройки.Порядок.ДоступныеПоляПорядка.Элементы Цикл
		
		Если ПараметрКомпоновки.Заголовок = "Дата" Тогда
			
			ЭлементПорядок = СхемаКомпоновки.ВариантыНастроек[0].Настройки.Порядок.Элементы.Добавить(
			Тип("ЭлементПорядкаКомпоновкиДанных"));
			
			ЭлементПорядок.Поле          = ПараметрКомпоновки.Поле;
			ЭлементПорядок.Использование = Истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
// Параметры:
//
// ИмяТаблицы - Строка
//
&НаСервере
Процедура ОбновитьТаблицу(ИмяТаблицы)
	
	ИмяКомпоновщика = ИмяТаблицы + "Компоновщик";
	ИмяАдресаСхемы  = ИмяТаблицы + "АдресСхемы";
	
	ПараметрДатаНачала    = Объект[ИмяКомпоновщика].Настройки.ПараметрыДанных.Элементы.Найти("ДатаНачала");
	ПараметрДатаОкончания = Объект[ИмяКомпоновщика].Настройки.ПараметрыДанных.Элементы.Найти("ДатаОкончания");
	ПараметрОрганизация   = Объект[ИмяКомпоновщика].Настройки.ПараметрыДанных.Элементы.Найти("Организация");
	ПараметрВидЦены       = Объект[ИмяКомпоновщика].Настройки.ПараметрыДанных.Элементы.Найти("ВидЦены");
	ПараметрКонецВремен   = Объект[ИмяКомпоновщика].Настройки.ПараметрыДанных.Элементы.Найти("КонецВремен");
	
	ПараметрДатаНачала.Значение    = Объект.Период.ДатаНачала;
	ПараметрДатаОкончания.Значение = Объект.Период.ДатаОкончания;
	ПараметрОрганизация.Значение   = Объект.Организация;
	ПараметрКонецВремен.Значение   = '29991231';
	
	Если ПараметрВидЦены <> Неопределено Тогда
		
		ПараметрВидЦены.Значение = Объект.ВидЦены;
		
	КонецЕсли;
	
	СхемаКомпоновки = ПолучитьИзВременногоХранилища(Объект[ИмяАдресаСхемы]);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки, Объект[ИмяКомпоновщика].ПолучитьНастройки()
	, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	Результат = Новый ТаблицаЗначений;
	
	ПроцессорВывода.УстановитьОбъект(Результат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	МассивОтмеченных = ПолучитьМассивОтмеченныхСтрок(ИмяТаблицы);
	
	Объект[ИмяТаблицы].Загрузить(Результат);
	
	Если МассивОтмеченных.Количество() Тогда
		
		Для Каждого СтрокаТаблицы Из Объект[ИмяТаблицы] Цикл
			
			Если МассивОтмеченных.Найти(СтрокаТаблицы.Документ) <> Неопределено
				ИЛИ (СтрокаТаблицы.Свойство("РасходныйОрдер")
				И МассивОтмеченных.Найти(СтрокаТаблицы.РасходныйОрдер) <> Неопределено)
				ИЛИ (СтрокаТаблицы.Свойство("ПриходныйОрдер")
				И МассивОтмеченных.Найти(СтрокаТаблицы.ПриходныйОрдер) <> Неопределено) Тогда
				
				СтрокаТаблицы.Флаг = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
// Параметры:
//
// ИмяТаблицы - Строка
//
// Возвращаемое значение:
//	- Массив - массив отмеченных строк.
//
&НаСервере
Функция ПолучитьМассивОтмеченныхСтрок(ИмяТаблицы)
	
	ОтборСтрок = Новый Структура("Флаг", Истина);
	
	ОтмеченныеСтроки = Объект[ИмяТаблицы].НайтиСтроки(ОтборСтрок);
	
	МассивОтмеченных = Новый Массив;
	
	Для Каждого ОтмеченнаяСтрока Из ОтмеченныеСтроки Цикл
		
		Если ЗначениеЗаполнено(ОтмеченнаяСтрока.Документ) Тогда
			
			МассивОтмеченных.Добавить(ОтмеченнаяСтрока.Документ);
			
		ИначеЕсли ОтмеченнаяСтрока.Свойство("РасходныйОрдер") И ЗначениеЗаполнено(ОтмеченнаяСтрока.РасходныйОрдер) Тогда
			
			МассивОтмеченных.Добавить(ОтмеченнаяСтрока.РасходныйОрдер);
			
		ИначеЕсли ОтмеченнаяСтрока.Свойство("ПриходныйОрдер") И ЗначениеЗаполнено(ОтмеченнаяСтрока.ПриходныйОрдер) Тогда
			
			МассивОтмеченных.Добавить(ОтмеченнаяСтрока.ПриходныйОрдер);
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивОтмеченных;
	
КонецФункции // } #wortmann

&НаСервере
Процедура СкопироватьОтбор(ОтборКуда, ОтборОткуда)
	
	Для Каждого СтрокаОтбора Из ОтборОткуда.Элементы Цикл
		
		Если ТипЗнч(СтрокаОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			НоваяСтрока = ОтборКуда.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОтбора);
			
		Иначе
			
			НоваяСтрока = ОтборКуда.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОтбора);
			
			СкопироватьОтбор(НоваяСтрока, СтрокаОтбора);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Возвращаемое значение:
//
//	- Строка - текст запроса
//
// BSLLS:MethodSize-off
// Объединение нескольких таблиц в запросах
// не позволяет разбить их на отдельные тексты.
//
// BSLLS:FullOuterJoinQuery-off
// Запрос не реализуется без использования полного соединения.
//
&НаСервере
Функция ПолучитьТекстЗапросаПоставка()
	
	Результат = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|ПОМЕСТИТЬ ВТ_Цены
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(&ДатаОкончания, ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
	
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Подзапрос.Дата КАК Дата,
	|	Подзапрос.Номер КАК Номер,
	|	Подзапрос.ТипДокумента КАК ТипДокумента,
	|	Подзапрос.Документ КАК Документ,
	|	Подзапрос.Сумма КАК Сумма,
	|	Подзапрос.Валюта КАК Валюта,
	|	Подзапрос.Склад КАК Склад,
	|	Подзапрос.Контрагент КАК Контрагент,
	|	Подзапрос.КоличествоКоробов КАК КоличествоКоробов,
	|	Подзапрос.КоличествоПар КАК КоличествоПар,
	|	МАКСИМУМ(МаркировкаТоваровИСМП.Ссылка) КАК ДокументМаркировка,
	|	NULL КАК СтатусКМ,
	|	Подзапрос.Партнер КАК Партнер,
	|	Подзапрос.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Подзапрос.ДатаПоступления КАК ДатаПоступления,
	|	Подзапрос.Комментарий КАК Комментарий,
	|	Подзапрос.ВидКонтрагента КАК ВидКонтрагента,
	|	Подзапрос.ПрямаяПоставка КАК ПрямаяПоставка,
	|	Подзапрос.Проведен КАК Проведен,
	|	Подзапрос.КМЭмитирован КАК КМЭмитирован
	|ПОМЕСТИТЬ ВТ_Поставка
	|ИЗ
	|	(ВЫБРАТЬ
	|		Подзапрос.Дата КАК Дата,
	|		Подзапрос.Номер КАК Номер,
	|		Подзапрос.ТипДокумента КАК ТипДокумента,
	|		Подзапрос.Документ КАК Документ,
	|		Подзапрос.Сумма КАК Сумма,
	|		Подзапрос.Валюта КАК Валюта,
	|		Подзапрос.Склад КАК Склад,
	|		Подзапрос.Контрагент КАК Контрагент,
	|		МАКСИМУМ(ПриобретениеТоваровУслуггф_ПродукцияВКоробах.IDКороба) КАК КоличествоКоробов,
	|		Подзапрос.КоличествоПар КАК КоличествоПар,
	|		Подзапрос.Партнер КАК Партнер,
	|		Подзапрос.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|		Подзапрос.ДатаПоступления КАК ДатаПоступления,
	|		Подзапрос.Комментарий КАК Комментарий,
	|		Подзапрос.ВидКонтрагента КАК ВидКонтрагента,
	|		МАКСИМУМ(Подзапрос.ПрямаяПоставка) КАК ПрямаяПоставка,
	|		Подзапрос.Проведен КАК Проведен,
	|		Подзапрос.КМЭмитирован КАК КМЭмитирован
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ПриобретениеТоваровУслуг.Дата КАК Дата,
	|			ПриобретениеТоваровУслуг.Номер КАК Номер,
	|			ТИПЗНАЧЕНИЯ(ПриобретениеТоваровУслуг.Ссылка) КАК ТипДокумента,
	|			ПриобретениеТоваровУслуг.Ссылка КАК Документ,
	|			СУММА(ПриобретениеТоваровУслугТовары.СуммаСНДС) КАК Сумма,
	|			ПриобретениеТоваровУслуг.Валюта КАК Валюта,
	|			МАКСИМУМ(ВЫБОР
	|					КОГДА ПриобретениеТоваровУслугТовары.НомерСтроки = 1
	|						ТОГДА ПриобретениеТоваровУслугТовары.Склад
	|					ИНАЧЕ NULL
	|				КОНЕЦ) КАК Склад,
	|			Контрагенты.Ссылка КАК Контрагент,
	|			СУММА(ПриобретениеТоваровУслугТовары.Количество) КАК КоличествоПар,
	|			ПриобретениеТоваровУслуг.Партнер КАК Партнер,
	|			ПриобретениеТоваровУслуг.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|			ПриобретениеТоваровУслуг.ДатаПоступления КАК ДатаПоступления,
	|			ПОДСТРОКА(ПриобретениеТоваровУслуг.Комментарий, 1, 100) КАК Комментарий,
	|			ВЫБОР
	|				КОГДА Контрагенты.ОбособленноеПодразделение
	|					ТОГДА ""Обособленное подразделение""
	|				ИНАЧЕ Контрагенты.ЮридическоеФизическоеЛицо
	|			КОНЕЦ КАК ВидКонтрагента,
	|			ПриобретениеТоваровУслугДополнительныеРеквизиты.Значение КАК ПрямаяПоставка,
	|			ПриобретениеТоваровУслуг.Проведен КАК Проведен,
	|			ПриобретениеТоваровУслуг.гф_КМЭмитированы КАК КМЭмитирован
	|		ИЗ
	|			Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
	|				ПО ПриобретениеТоваровУслуг.Ссылка = ПриобретениеТоваровУслугТовары.Ссылка
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|				ПО ПриобретениеТоваровУслуг.Партнер = Контрагенты.Партнер
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.ДополнительныеРеквизиты КАК ПриобретениеТоваровУслугДополнительныеРеквизиты
	|				ПО (ПриобретениеТоваровУслугДополнительныеРеквизиты.Свойство = ПриобретениеТоваровУслугДополнительныеРеквизиты.Ссылка)
	|					И (ПриобретениеТоваровУслугДополнительныеРеквизиты.Свойство.Имя = ""гф_ПТУПрямаяПоставка"")
	|		ГДЕ
	|			ПриобретениеТоваровУслуг.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			И (ПриобретениеТоваровУслуг.Организация = &Организация
	|					ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|			И Контрагенты.гф_Логистика
	|
	|		СГРУППИРОВАТЬ ПО
	|			ПриобретениеТоваровУслуг.Дата,
	|			ПриобретениеТоваровУслуг.Номер,
	|			ТИПЗНАЧЕНИЯ(ПриобретениеТоваровУслуг.Ссылка),
	|			ПриобретениеТоваровУслуг.Ссылка,
	|			Контрагенты.Ссылка,
	|			ПриобретениеТоваровУслуг.Валюта,
	|			ПриобретениеТоваровУслуг.Партнер,
	|			ПриобретениеТоваровУслуг.ХозяйственнаяОперация,
	|			ПОДСТРОКА(ПриобретениеТоваровУслуг.Комментарий, 1, 100),
	|			ВЫБОР
	|				КОГДА Контрагенты.ОбособленноеПодразделение
	|					ТОГДА ""Обособленное подразделение""
	|				ИНАЧЕ Контрагенты.ЮридическоеФизическоеЛицо
	|			КОНЕЦ,
	|			ПриобретениеТоваровУслуг.ДатаПоступления,
	|			ПриобретениеТоваровУслугДополнительныеРеквизиты.Значение,
	|			ПриобретениеТоваровУслуг.Проведен,
	|			ПриобретениеТоваровУслуг.гф_КМЭмитированы) КАК Подзапрос
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.гф_ПродукцияВКоробах КАК ПриобретениеТоваровУслуггф_ПродукцияВКоробах
	|			ПО Подзапрос.Документ = ПриобретениеТоваровУслуггф_ПродукцияВКоробах.Ссылка
	|
	|	СГРУППИРОВАТЬ ПО
	|		Подзапрос.ХозяйственнаяОперация,
	|		Подзапрос.Дата,
	|		Подзапрос.Номер,
	|		Подзапрос.ТипДокумента,
	|		Подзапрос.Документ,
	|		Подзапрос.Валюта,
	|		Подзапрос.Склад,
	|		Подзапрос.Контрагент,
	|		Подзапрос.Партнер,
	|		Подзапрос.Сумма,
	|		Подзапрос.КоличествоПар,
	|		Подзапрос.ДатаПоступления,
	|		Подзапрос.Комментарий,
	|		Подзапрос.ВидКонтрагента,
	|		Подзапрос.Проведен,
	|		Подзапрос.КМЭмитирован) КАК Подзапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаркировкаТоваровИСМП КАК МаркировкаТоваровИСМП
	|		ПО Подзапрос.Документ = МаркировкаТоваровИСМП.ДокументОснование
	
	|СГРУППИРОВАТЬ ПО
	|	Подзапрос.ХозяйственнаяОперация,
	|	Подзапрос.Дата,
	|	Подзапрос.Номер,
	|	Подзапрос.ТипДокумента,
	|	Подзапрос.Документ,
	|	Подзапрос.Валюта,
	|	Подзапрос.Склад,
	|	Подзапрос.Контрагент,
	|	Подзапрос.Партнер,
	|	Подзапрос.Сумма,
	|	Подзапрос.КоличествоПар,
	|	Подзапрос.КоличествоКоробов,
	|	Подзапрос.ДатаПоступления,
	|	Подзапрос.Комментарий,
	|	Подзапрос.ВидКонтрагента,
	|	Подзапрос.ПрямаяПоставка,
	|	Подзапрос.Проведен,
	|	Подзапрос.КМЭмитирован
	
	|ОБЪЕДИНИТЬ ВСЕ
	
	|ВЫБРАТЬ
	|	ПроизводствоБезЗаказа.Дата,
	|	ПроизводствоБезЗаказа.Номер,
	|	ТИПЗНАЧЕНИЯ(ПроизводствоБезЗаказа.Ссылка),
	|	ПроизводствоБезЗаказа.Ссылка,
	|	СУММА(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * ПроизводствоБезЗаказаВыходныеИзделия.Количество),
	|	ПроизводствоБезЗаказа.Валюта,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПроизводствоБезЗаказаВыходныеИзделия.НомерСтроки = 1
	|				ТОГДА КлючиАналитикиУчетаНоменклатуры.МестоХранения
	|			ИНАЧЕ NULL
	|		КОНЕЦ),
	|	ПроизводствоБезЗаказа.Организация,
	|	СУММА(ЕСТЬNULL(ПроизводствоБезЗаказагф_ПродукцияВКоробах.КоличествоКоробов, 0)),
	|	СУММА(ПроизводствоБезЗаказаВыходныеИзделия.Количество),
	|	МаркировкаТоваровИСМП.Ссылка,
	|	СтатусыДокументовИСМП.Статус,
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции),
	|	ПроизводствоБезЗаказа.ДатаПоступления,
	|	ПОДСТРОКА(ПроизводствоБезЗаказа.Комментарий, 1, 100),
	|	NULL,
	|	NULL,
	|	ПроизводствоБезЗаказа.Проведен,
	|	ИСТИНА
	|ИЗ
	|	Документ.ПроизводствоБезЗаказа КАК ПроизводствоБезЗаказа
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПроизводствоБезЗаказа.гф_ПродукцияВКоробах КАК ПроизводствоБезЗаказагф_ПродукцияВКоробах
	|		ПО (ПроизводствоБезЗаказагф_ПродукцияВКоробах.Ссылка = ПроизводствоБезЗаказа.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПроизводствоБезЗаказа.ВыходныеИзделия КАК ПроизводствоБезЗаказаВыходныеИзделия
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК КлючиАналитикиУчетаНоменклатуры
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Цены КАК ЦеныНоменклатурыСрезПоследних
	|				ПО КлючиАналитикиУчетаНоменклатуры.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			ПО ПроизводствоБезЗаказаВыходныеИзделия.АналитикаУчетаНоменклатуры = КлючиАналитикиУчетаНоменклатуры.Ссылка
	|		ПО ПроизводствоБезЗаказа.Ссылка = ПроизводствоБезЗаказаВыходныеИзделия.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаркировкаТоваровИСМП КАК МаркировкаТоваровИСМП
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовИСМП КАК СтатусыДокументовИСМП
	|			ПО МаркировкаТоваровИСМП.Ссылка = СтатусыДокументовИСМП.Документ
	|		ПО ПроизводствоБезЗаказа.Ссылка = МаркировкаТоваровИСМП.ДокументОснование
	|ГДЕ
	|	ПроизводствоБезЗаказа.Проведен
	|	И ПроизводствоБезЗаказа.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И (ПроизводствоБезЗаказа.Организация = &Организация
	|			ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	
	|СГРУППИРОВАТЬ ПО
	|	ПроизводствоБезЗаказа.Ссылка,
	|	СтатусыДокументовИСМП.Статус,
	|	МаркировкаТоваровИСМП.Ссылка,
	|	ПроизводствоБезЗаказа.Дата,
	|	ПроизводствоБезЗаказа.Номер,
	|	ТИПЗНАЧЕНИЯ(ПроизводствоБезЗаказа.Ссылка),
	|	ПроизводствоБезЗаказа.Валюта,
	|	ПроизводствоБезЗаказа.Организация,
	|	ПОДСТРОКА(ПроизводствоБезЗаказа.Комментарий, 1, 100),
	|	ПроизводствоБезЗаказа.ДатаПоступления,
	|	ПроизводствоБезЗаказа.Проведен
	
	|ОБЪЕДИНИТЬ ВСЕ
	
	|ВЫБРАТЬ
	|	ЗаявкаНаВозвратТоваровОтКлиента.Дата,
	|	ЗаявкаНаВозвратТоваровОтКлиента.Номер,
	|	ТИПЗНАЧЕНИЯ(ЗаявкаНаВозвратТоваровОтКлиента.Ссылка),
	|	ЗаявкаНаВозвратТоваровОтКлиента.Ссылка,
	|	СУММА(ЗаявкаНаВозвратТоваровОтКлиентаТовары.СуммаСНДС),
	|	ЗаявкаНаВозвратТоваровОтКлиента.Валюта,
	|	ЗаявкаНаВозвратТоваровОтКлиента.Склад,
	|	Контрагенты.Ссылка,
	|	СУММА(0),
	|	СУММА(ЗаявкаНаВозвратТоваровОтКлиентаТовары.Количество),
	|	МаркировкаТоваровИСМП.Ссылка,
	|	СтатусыДокументовИСМП.Статус,
	|	ЗаявкаНаВозвратТоваровОтКлиента.Партнер,
	|	ЗаявкаНаВозвратТоваровОтКлиента.ХозяйственнаяОперация,
	|	ЗаявкаНаВозвратТоваровОтКлиента.ДатаПоступления,
	|	ПОДСТРОКА(ЗаявкаНаВозвратТоваровОтКлиента.Комментарий, 1, 100),
	|	ВЫБОР
	|		КОГДА Контрагенты.ОбособленноеПодразделение
	|			ТОГДА ""Обособленное подразделение""
	|		ИНАЧЕ Контрагенты.ЮридическоеФизическоеЛицо
	|	КОНЕЦ,
	|	NULL,
	|	ЗаявкаНаВозвратТоваровОтКлиента.Проведен,
	|	ИСТИНА
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозвратТоваровОтКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ЗаявкаНаВозвратТоваровОтКлиента.Партнер = Контрагенты.Партнер
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ЗаявкаНаВозвратТоваровОтКлиентаТовары
	|		ПО ЗаявкаНаВозвратТоваровОтКлиента.Ссылка = ЗаявкаНаВозвратТоваровОтКлиентаТовары.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаркировкаТоваровИСМП КАК МаркировкаТоваровИСМП
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовИСМП КАК СтатусыДокументовИСМП
	|			ПО МаркировкаТоваровИСМП.Ссылка = СтатусыДокументовИСМП.Документ
	|		ПО ЗаявкаНаВозвратТоваровОтКлиента.Ссылка = МаркировкаТоваровИСМП.ДокументОснование
	|ГДЕ
	|	ЗаявкаНаВозвратТоваровОтКлиента.Проведен
	|	И ЗаявкаНаВозвратТоваровОтКлиента.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И (ЗаявкаНаВозвратТоваровОтКлиента.Организация = &Организация
	|			ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	
	|СГРУППИРОВАТЬ ПО
	|	СтатусыДокументовИСМП.Статус,
	|	Контрагенты.Ссылка,
	|	МаркировкаТоваровИСМП.Ссылка,
	|	ЗаявкаНаВозвратТоваровОтКлиента.Ссылка,
	|	ЗаявкаНаВозвратТоваровОтКлиента.Дата,
	|	ЗаявкаНаВозвратТоваровОтКлиента.Номер,
	|	ТИПЗНАЧЕНИЯ(ЗаявкаНаВозвратТоваровОтКлиента.Ссылка),
	|	ЗаявкаНаВозвратТоваровОтКлиента.Валюта,
	|	ЗаявкаНаВозвратТоваровОтКлиента.Склад,
	|	ЗаявкаНаВозвратТоваровОтКлиента.Партнер,
	|	ЗаявкаНаВозвратТоваровОтКлиента.ХозяйственнаяОперация,
	|	ПОДСТРОКА(ЗаявкаНаВозвратТоваровОтКлиента.Комментарий, 1, 100),
	|	ВЫБОР
	|		КОГДА Контрагенты.ОбособленноеПодразделение
	|			ТОГДА ""Обособленное подразделение""
	|		ИНАЧЕ Контрагенты.ЮридическоеФизическоеЛицо
	|	КОНЕЦ,
	|	ЗаявкаНаВозвратТоваровОтКлиента.ДатаПоступления,
	|	ЗаявкаНаВозвратТоваровОтКлиента.Проведен
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Поставка.Дата КАК Дата,
	|	ВТ_Поставка.Номер КАК Номер,
	|	ВТ_Поставка.ТипДокумента КАК ТипДокумента,
	|	ВТ_Поставка.Документ КАК Документ,
	|	ВТ_Поставка.Сумма КАК Сумма,
	|	ВТ_Поставка.Валюта КАК Валюта,
	|	ВТ_Поставка.Склад КАК СкладПолучатель,
	|	ВТ_Поставка.Контрагент КАК Контрагент,
	|	ВТ_Поставка.КоличествоКоробов КАК КоличествоКоробов,
	|	ВТ_Поставка.КоличествоПар КАК КоличествоПар,
	|	ВТ_Поставка.ДокументМаркировка КАК ДокументМаркировка,
	|	ВТ_Поставка.СтатусКМ КАК СтатусКМ,
	|	ПриходныйОрдерНаТовары.Ссылка КАК ПриходныйОрдер,
	|	ПриходныйОрдерНаТовары.Дата КАК ДатаПО,
	|	ПриходныйОрдерНаТовары.Номер КАК НомерПО,
	|	ПриходныйОрдерНаТовары.Статус КАК СтатусПО,
	|	ПриходныйОрдерНаТовары.Ответственный КАК Ответственный,
	|	ВТ_Поставка.Партнер КАК Партнер,
	|	ЕСТЬNULL(ВТ_Поставка.ХозяйственнаяОперация, ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)) КАК ХозяйственнаяОперация,
	|	ВТ_Поставка.ДатаПоступления КАК ДатаПоступления,
	|	ВТ_Поставка.Комментарий КАК Комментарий,
	|	ВТ_Поставка.ВидКонтрагента КАК ВидКонтрагента,
	|	ВТ_Поставка.ПрямаяПоставка КАК ПрямаяПоставка,
	|	ВТ_Поставка.Проведен КАК Проведен,
	|	ВТ_Поставка.КМЭмитирован КАК КМЭмитирован
	|ПОМЕСТИТЬ ВТ_ПО
	|ИЗ
	|	ВТ_Поставка КАК ВТ_Поставка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|		ПО ВТ_Поставка.Документ = ПриходныйОрдерНаТовары.Распоряжение
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	гф_ИсторияСтатусовПриходныхОрдеровСрезПоследних.Период КАК ДатаОприходования,
	|	ЕСТЬNULL(гф_ИсторияСтатусовПриходныхОрдеровСрезПоследних.СтатусИзменил, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК ПОСтатусИзменил,
	|	гф_ИсторияСтатусовПриходныхОрдеровСрезПоследних.Объект КАК Объект
	|ПОМЕСТИТЬ ВТ_ИсторияСтатусов
	|ИЗ
	|	РегистрСведений.гф_ИсторияСтатусовПриходныхОрдеров.СрезПоследних(
	|			&КонецВремен,
	|			Объект В
	|				(ВЫБРАТЬ
	|					Т.ПриходныйОрдер
	|				ИЗ
	|					ВТ_ПО КАК Т)) КАК гф_ИсторияСтатусовПриходныхОрдеровСрезПоследних
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПО.Дата КАК Дата,
	|	ВТ_ПО.Номер КАК Номер,
	|	ВТ_ПО.ТипДокумента КАК ТипДокумента,
	|	ВТ_ПО.Документ КАК Документ,
	|	ВТ_ПО.Сумма КАК Сумма,
	|	ВТ_ПО.Валюта КАК Валюта,
	|	ВТ_ПО.СкладПолучатель КАК СкладПолучатель,
	|	ВТ_ПО.Контрагент КАК Контрагент,
	|	ВТ_ПО.КоличествоКоробов КАК КоличествоКоробов,
	|	ВТ_ПО.КоличествоПар КАК КоличествоПар,
	|	ВТ_ПО.ДокументМаркировка КАК ДокументМаркировка,
	|	ВТ_ПО.СтатусКМ КАК СтатусКМ,
	|	ВТ_ПО.ПриходныйОрдер КАК ПриходныйОрдер,
	|	ВТ_ПО.ДатаПО КАК ДатаПО,
	|	ВТ_ПО.НомерПО КАК НомерПО,
	|	ВТ_ПО.СтатусПО КАК СтатусПО,
	|	ВТ_ПО.Ответственный КАК Ответственный,
	|	ВТ_ПО.Партнер КАК Партнер,
	|	ВТ_ПО.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ВТ_ПО.ДатаПоступления КАК ДатаПоступления,
	|	ВТ_ПО.Комментарий КАК Комментарий,
	|	ВТ_ПО.ВидКонтрагента КАК ВидКонтрагента,
	|	ВТ_ПО.ПрямаяПоставка КАК ПрямаяПоставка,
	|	ВТ_ПО.Проведен КАК Проведен,
	|	ВТ_ПО.КМЭмитирован КАК КМЭмитирован,
	|	ВТ_ИсторияСтатусов.ДатаОприходования КАК ДатаОприходования,
	|	ВТ_ИсторияСтатусов.ПОСтатусИзменил КАК ПОСтатусИзменил
	|ИЗ
	|	ВТ_ПО КАК ВТ_ПО
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсторияСтатусов КАК ВТ_ИсторияСтатусов
	|		ПО ВТ_ПО.ПриходныйОрдер = ВТ_ИсторияСтатусов.Объект";
	
	Возврат Результат;
	
КонецФункции // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Возвращаемое значение:
//
//	- Строка - текст запроса
//
&НаСервере
Функция ПолучитьТекстЗапросаОтгрузка()
	
	Результат = "ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Дата КАК Дата,
	|	РеализацияТоваровУслуг.Номер КАК Номер,
	|	ТИПЗНАЧЕНИЯ(РеализацияТоваровУслуг.Ссылка) КАК ТипДокумента,
	|	РеализацияТоваровУслуг.Ссылка КАК Документ,
	|	РеализацияТоваровУслуг.Валюта КАК Валюта,
	|	СУММА(РеализацияТоваровУслугТовары.СуммаСНДС) КАК Сумма,
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент) КАК Нерезидент,
	|	Партнеры.Код КАК КодКлиента,
	|	РеализацияТоваровУслуг.Склад КАК Склад,
	|	СУММА(РеализацияТоваровУслугТовары.Количество) КАК КоличествоПар,
	|	Заказ.Ссылка КАК ЗаказКлиента,
	|	РеализацияТоваровУслуг.гф_РасходныйОрдер КАК РасходныйОрдер,
	|	гф_АдресаДоставкиСправочник.Ссылка КАК АдресДоставки,
	|	гф_АдресаДоставкиСправочник.НомерАдреса КАК НомерАдреса,
	|	гф_АдресаДоставкиСправочник.РегионКод КАК КодРегиона,
	|	гф_АдресаДоставкиСправочник.РегионНаименование КАК Регион,
	|	гф_АдресаДоставкиСправочник.ТипПрайсЛистаТК КАК ТипПрайсЛистаТК,
	|	гф_АдресаДоставкиСправочник.ТК КАК ТК,
	|	РеализацияТоваровУслуг.гф_ПочтовоеОтправление КАК гф_ПочтовоеОтправление
	|ПОМЕСТИТЬ ВТ_Подзапрос1
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО РеализацияТоваровУслуг.Контрагент = Контрагенты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	|		ПО РеализацияТоваровУслуг.Партнер = Партнеры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ПО РеализацияТоваровУслуг.Ссылка = РеализацияТоваровУслугТовары.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК Заказ
	|		ПО РеализацияТоваровУслуг.ЗаказКлиента = Заказ.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гф_АдресаДоставки КАК гф_АдресаДоставкиСправочник
	|		ПО РеализацияТоваровУслуг.гф_АдресДоставки = гф_АдресаДоставкиСправочник.Ссылка
	|ГДЕ
	|	РеализацияТоваровУслуг.Проведен
	|	И РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И (РеализацияТоваровУслуг.Организация = &Организация
	|			ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	
	|СГРУППИРОВАТЬ ПО
	|	гф_АдресаДоставкиСправочник.Ссылка,
	|	Заказ.Ссылка,
	|	РеализацияТоваровУслуг.Ссылка,
	|	Контрагенты.Ссылка,
	|	Партнеры.Код,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.Номер,
	|	ТИПЗНАЧЕНИЯ(РеализацияТоваровУслуг.Ссылка),
	|	РеализацияТоваровУслуг.Валюта,
	|	Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент),
	|	РеализацияТоваровУслуг.Склад,
	|	РеализацияТоваровУслуг.гф_РасходныйОрдер,
	|	гф_АдресаДоставкиСправочник.НомерАдреса,
	|	гф_АдресаДоставкиСправочник.РегионКод,
	|	гф_АдресаДоставкиСправочник.РегионНаименование,
	|	гф_АдресаДоставкиСправочник.ТипПрайсЛистаТК,
	|	гф_АдресаДоставкиСправочник.ТК,
	|	РеализацияТоваровУслуг.гф_ПочтовоеОтправление
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Подзапрос1.Дата КАК Дата,
	|	ВТ_Подзапрос1.Номер КАК Номер,
	|	ВТ_Подзапрос1.ТипДокумента КАК ТипДокумента,
	|	ВТ_Подзапрос1.Документ КАК Документ,
	|	ВТ_Подзапрос1.Валюта КАК Валюта,
	|	ВТ_Подзапрос1.Сумма КАК Сумма,
	|	ВТ_Подзапрос1.Контрагент КАК Контрагент,
	|	ВТ_Подзапрос1.Нерезидент КАК Нерезидент,
	|	ВТ_Подзапрос1.КодКлиента КАК КодКлиента,
	|	ВТ_Подзапрос1.Склад КАК Склад,
	|	ВТ_Подзапрос1.КоличествоПар КАК КоличествоПар,
	|	ВТ_Подзапрос1.ЗаказКлиента КАК ЗаказКлиента,
	|	ВТ_Подзапрос1.РасходныйОрдер КАК РасходныйОрдер,
	|	ВТ_Подзапрос1.АдресДоставки КАК АдресДоставки,
	|	ВТ_Подзапрос1.НомерАдреса КАК НомерАдреса,
	|	ВТ_Подзапрос1.КодРегиона КАК КодРегиона,
	|	ВТ_Подзапрос1.Регион КАК Регион,
	|	ВТ_Подзапрос1.ТипПрайсЛистаТК КАК ТипПрайсЛистаТК,
	|	ВТ_Подзапрос1.ТК КАК ТК,
	|	ВТ_Подзапрос1.гф_ПочтовоеОтправление КАК гф_ПочтовоеОтправление,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ЗаказКлиентаТовары.ДатаОтгрузки) < НАЧАЛОПЕРИОДА(ВТ_Подзапрос1.Дата, ДЕНЬ)
	|			ТОГДА РАЗНОСТЬДАТ(МАКСИМУМ(ЗаказКлиентаТовары.ДатаОтгрузки), ВТ_Подзапрос1.Дата, ДЕНЬ)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДниЗадержкиОтгрузки,
	|	МАКСИМУМ(ЗаказКлиентаТовары.ДатаОтгрузки) КАК ДатаПлановойОтгрузки
	|ПОМЕСТИТЬ ВТ_Подзапрос2
	|ИЗ
	|	ВТ_Подзапрос1 КАК ВТ_Подзапрос1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|		ПО ВТ_Подзапрос1.ЗаказКлиента = ЗаказКлиентаТовары.Ссылка
	
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Подзапрос1.КодКлиента,
	|	ВТ_Подзапрос1.гф_ПочтовоеОтправление,
	|	ВТ_Подзапрос1.Документ,
	|	ВТ_Подзапрос1.ТипДокумента,
	|	ВТ_Подзапрос1.Номер,
	|	ВТ_Подзапрос1.Валюта,
	|	ВТ_Подзапрос1.ТК,
	|	ВТ_Подзапрос1.ТипПрайсЛистаТК,
	|	ВТ_Подзапрос1.Нерезидент,
	|	ВТ_Подзапрос1.Контрагент,
	|	ВТ_Подзапрос1.РасходныйОрдер,
	|	ВТ_Подзапрос1.АдресДоставки,
	|	ВТ_Подзапрос1.Дата,
	|	ВТ_Подзапрос1.Склад,
	|	ВТ_Подзапрос1.ЗаказКлиента,
	|	ВТ_Подзапрос1.НомерАдреса,
	|	ВТ_Подзапрос1.Регион,
	|	ВТ_Подзапрос1.Сумма,
	|	ВТ_Подзапрос1.КоличествоПар,
	|	ВТ_Подзапрос1.КодРегиона
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Подзапрос2.Дата КАК Дата,
	|	ВТ_Подзапрос2.Номер КАК Номер,
	|	ВТ_Подзапрос2.ТипДокумента КАК ТипДокумента,
	|	ВТ_Подзапрос2.Документ КАК Документ,
	|	ВТ_Подзапрос2.Валюта КАК Валюта,
	|	ВТ_Подзапрос2.Сумма КАК Сумма,
	|	ВТ_Подзапрос2.Контрагент КАК Контрагент,
	|	ВТ_Подзапрос2.Нерезидент КАК Нерезидент,
	|	ВТ_Подзапрос2.КодКлиента КАК КодКлиента,
	|	ВТ_Подзапрос2.Склад КАК Склад,
	|	ВТ_Подзапрос2.КоличествоПар КАК КоличествоПар,
	|	ВТ_Подзапрос2.ЗаказКлиента КАК ЗаказКлиента,
	|	ВТ_Подзапрос2.РасходныйОрдер КАК РасходныйОрдер,
	|	ВТ_Подзапрос2.АдресДоставки КАК АдресДоставки,
	|	ВТ_Подзапрос2.НомерАдреса КАК НомерАдреса,
	|	ВТ_Подзапрос2.КодРегиона КАК КодРегиона,
	|	ВТ_Подзапрос2.Регион КАК Регион,
	|	ВТ_Подзапрос2.ТипПрайсЛистаТК КАК ТипПрайсЛистаТК,
	|	ВТ_Подзапрос2.ТК КАК ТК,
	|	ВТ_Подзапрос2.гф_ПочтовоеОтправление КАК гф_ПочтовоеОтправление,
	|	ВТ_Подзапрос2.ДниЗадержкиОтгрузки КАК ДниЗадержкиОтгрузки,
	|	ВТ_Подзапрос2.ДатаПлановойОтгрузки КАК ДатаПлановойОтгрузки,
	|	КОЛИЧЕСТВО(ТоварыВКоробах.НомерСтроки) КАК КоличествоКоробов
	|ПОМЕСТИТЬ ВТ_РТУ
	|ИЗ
	|	ВТ_Подзапрос2 КАК ВТ_Подзапрос2
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.гф_ТоварыВКоробах КАК ТоварыВКоробах
	|		ПО ВТ_Подзапрос2.Документ = ТоварыВКоробах.Ссылка
	
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Подзапрос2.ЗаказКлиента,
	|	ВТ_Подзапрос2.РасходныйОрдер,
	|	ВТ_Подзапрос2.ТипДокумента,
	|	ВТ_Подзапрос2.гф_ПочтовоеОтправление,
	|	ВТ_Подзапрос2.Дата,
	|	ВТ_Подзапрос2.Контрагент,
	|	ВТ_Подзапрос2.ТК,
	|	ВТ_Подзапрос2.НомерАдреса,
	|	ВТ_Подзапрос2.Номер,
	|	ВТ_Подзапрос2.ДатаПлановойОтгрузки,
	|	ВТ_Подзапрос2.Документ,
	|	ВТ_Подзапрос2.АдресДоставки,
	|	ВТ_Подзапрос2.Склад,
	|	ВТ_Подзапрос2.Валюта,
	|	ВТ_Подзапрос2.Регион,
	|	ВТ_Подзапрос2.ТипПрайсЛистаТК,
	|	ВТ_Подзапрос2.КодКлиента,
	|	ВТ_Подзапрос2.Нерезидент,
	|	ВТ_Подзапрос2.Сумма,
	|	ВТ_Подзапрос2.КоличествоПар,
	|	ВТ_Подзапрос2.КодРегиона,
	|	ВТ_Подзапрос2.ДниЗадержкиОтгрузки
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныйОрдерНаТовары.Ссылка КАК РасходныйОрдер,
	|	РасходныйОрдерНаТовары.Номер КАК НомерРО,
	|	РасходныйОрдерНаТовары.Дата КАК ДатаРО,
	|	РасходныйОрдерНаТовары.ДатаОтгрузки КАК ДатаОтгрузки,
	|	РасходныйОрдерНаТовары.Статус КАК СтатусРО,
	|	РасходныйОрдерНаТовары.Ответственный КАК Ответственный,
	|	РасходныйОрдерНаТовары.Склад КАК Склад,
	|	СУММА(РасходныйОрдерНаТоварыОтгружаемыеТовары.Количество) КАК КоличествоПар,
	|	Склады.гф_Организация КАК гф_Организация
	|ПОМЕСТИТЬ ВТ_РО
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары.ОтгружаемыеТовары КАК РасходныйОрдерНаТоварыОтгружаемыеТовары
	|		ПО РасходныйОрдерНаТовары.Ссылка = РасходныйОрдерНаТоварыОтгружаемыеТовары.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|		ПО РасходныйОрдерНаТовары.Склад = Склады.Ссылка
	|ГДЕ
	|	РасходныйОрдерНаТовары.Проведен
	|	И РасходныйОрдерНаТовары.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И РасходныйОрдерНаТовары.СкладскаяОперация = ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ОтгрузкаКлиенту)
	|	И (Склады.гф_Организация = &Организация
	|			ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерНаТовары.Ссылка,
	|	РасходныйОрдерНаТовары.Номер,
	|	РасходныйОрдерНаТовары.Дата,
	|	РасходныйОрдерНаТовары.ДатаОтгрузки,
	|	РасходныйОрдерНаТовары.Статус,
	|	РасходныйОрдерНаТовары.Ответственный,
	|	РасходныйОрдерНаТовары.Склад,
	|	Склады.гф_Организация
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	гф_ПочтаРоссииИсторияОтслеживанияСрезПоследних.ПочтовоеОтправление КАК ПочтовоеОтправление,
	|	гф_ПочтаРоссииИсторияОтслеживанияСрезПоследних.Период КАК Период,
	|	гф_ПочтаРоссииИсторияОтслеживанияСрезПоследних.Операция КАК Операция
	|ПОМЕСТИТЬ ВТ_ИсторияОтслеживания
	|ИЗ
	|	РегистрСведений.гф_ПочтаРоссииИсторияОтслеживания.СрезПоследних(
	|			&КонецВремен,
	|			ПочтовоеОтправление В
	|				(ВЫБРАТЬ
	|					Т.гф_ПочтовоеОтправление
	|				ИЗ
	|					ВТ_РТУ КАК Т)) КАК гф_ПочтаРоссииИсторияОтслеживанияСрезПоследних
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РТУ.Документ КАК Документ,
	|	ВТ_РТУ.гф_ПочтовоеОтправление КАК гф_ПочтовоеОтправление,
	|	МАКСИМУМ(ВТ_ИсторияОтслеживания.Операция) КАК Операция
	|ПОМЕСТИТЬ ВТ_СостояниеПосылки
	|ИЗ
	|	ВТ_РТУ КАК ВТ_РТУ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИсторияОтслеживания КАК ВТ_ИсторияОтслеживания
	|		ПО ВТ_РТУ.гф_ПочтовоеОтправление = ВТ_ИсторияОтслеживания.ПочтовоеОтправление
	
	|СГРУППИРОВАТЬ ПО
	|	ВТ_РТУ.Документ,
	|	ВТ_РТУ.гф_ПочтовоеОтправление
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подзапрос.РТУ КАК РТУ,
	|	Подзапрос.РасходныйОрдер КАК РасходныйОрдер
	|ПОМЕСТИТЬ ВТ_Связи
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_РТУ.Документ КАК РТУ,
	|		ВТ_РТУ.РасходныйОрдер КАК РасходныйОрдер
	|	ИЗ
	|		ВТ_РТУ КАК ВТ_РТУ) КАК Подзапрос
	|ГДЕ
	|	Подзапрос.РТУ <> ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)
	|	И Подзапрос.РасходныйОрдер <> ЗНАЧЕНИЕ(Документ.РасходныйОрдерНаТовары.ПустаяСсылка)
	
	|СГРУППИРОВАТЬ ПО
	|	Подзапрос.РТУ,
	|	Подзапрос.РасходныйОрдер
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Связи.РТУ КАК Документ,
	|	ВТ_Связи.РасходныйОрдер КАК РасходныйОрдер
	|ПОМЕСТИТЬ ВТ_Документы
	|ИЗ
	|	ВТ_Связи КАК ВТ_Связи
	
	|ОБЪЕДИНИТЬ ВСЕ
	
	|ВЫБРАТЬ
	|	ВТ_РТУ.Документ,
	|	ЗНАЧЕНИЕ(Документ.РасходныйОрдерНаТовары.ПустаяСсылка)
	|ИЗ
	|	ВТ_РТУ КАК ВТ_РТУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Связи КАК ВТ_Связи
	|		ПО ВТ_РТУ.Документ = ВТ_Связи.РТУ
	|ГДЕ
	|	ВТ_Связи.РасходныйОрдер ЕСТЬ NULL
	
	|ОБЪЕДИНИТЬ ВСЕ
	
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка),
	|	ВТ_РО.РасходныйОрдер
	|ИЗ
	|	ВТ_РО КАК ВТ_РО
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Связи КАК ВТ_Связи
	|		ПО ВТ_РО.РасходныйОрдер = ВТ_Связи.РасходныйОрдер
	|ГДЕ
	|	ВТ_Связи.РТУ ЕСТЬ NULL
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	гф_ИсторияСтатусовРасходныхОрдеровСрезПоследних.Объект КАК Объект,
	|	гф_ИсторияСтатусовРасходныхОрдеровСрезПоследних.Период КАК ДатаОтгрузки,
	|	ЕСТЬNULL(гф_ИсторияСтатусовРасходныхОрдеровСрезПоследних.СтатусИзменил, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК РОСтатусИзменил
	|ПОМЕСТИТЬ ВТ_ИсторияСтатусов
	|ИЗ
	|	РегистрСведений.гф_ИсторияСтатусовРасходныхОрдеров.СрезПоследних(
	|			&КонецВремен,
	|			Объект В
	|				(ВЫБРАТЬ
	|					Т.РасходныйОрдер
	|				ИЗ
	|					ВТ_РО КАК Т)) КАК гф_ИсторияСтатусовРасходныхОрдеровСрезПоследних
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РТУ.Дата КАК Дата,
	|	ВТ_РТУ.Номер КАК Номер,
	|	ВТ_РТУ.ТипДокумента КАК ТипДокумента,
	|	ВТ_РТУ.Документ КАК Документ,
	|	ВТ_РТУ.Валюта КАК Валюта,
	|	ВТ_РТУ.Сумма КАК Сумма,
	|	ВТ_РТУ.Контрагент КАК Контрагент,
	|	ВТ_РТУ.Нерезидент КАК Нерезидент,
	|	ВТ_РТУ.КодКлиента КАК КодКлиента,
	|	ЕСТЬNULL(ВТ_РТУ.Склад, ВТ_РО.Склад) КАК Склад,
	|	ЕСТЬNULL(ВТ_РТУ.КоличествоПар, ВТ_РО.КоличествоПар) КАК КоличествоПар,
	|	ВТ_РТУ.ЗаказКлиента КАК ЗаказКлиента,
	|	ВТ_РТУ.КоличествоКоробов КАК КоличествоКоробов,
	|	ВТ_РТУ.АдресДоставки КАК АдресДоставки,
	|	ВТ_РТУ.НомерАдреса КАК НомерАдреса,
	|	ВТ_РТУ.КодРегиона КАК КодРегиона,
	|	ВТ_РТУ.Регион КАК Регион,
	|	ВТ_РТУ.ТК КАК ТК,
	|	ВТ_РТУ.ТипПрайсЛистаТК КАК ТипПрайсЛистаТК,
	|	ВТ_РТУ.ДатаПлановойОтгрузки КАК ДатаПлановойОтгрузки,
	|	ВТ_РТУ.ДниЗадержкиОтгрузки КАК ДниЗадержкиОтгрузки,
	|	ВТ_РО.РасходныйОрдер КАК РасходныйОрдер,
	|	ВТ_РО.НомерРО КАК НомерРО,
	|	ВТ_РО.ДатаРО КАК ДатаРО,
	|	ВТ_РО.СтатусРО КАК СтатусРО,
	|	ВТ_РО.Ответственный КАК Ответственный,
	|	ВТ_СостояниеПосылки.Операция КАК СостояниеПосылки,
	|	ВТ_СостояниеПосылки.гф_ПочтовоеОтправление КАК Посылка
	|ИЗ
	|	ВТ_Документы КАК ВТ_Документы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РТУ КАК ВТ_РТУ
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СостояниеПосылки КАК ВТ_СостояниеПосылки
	|			ПО ВТ_РТУ.Документ = ВТ_СостояниеПосылки.Документ
	|		ПО ВТ_Документы.Документ = ВТ_РТУ.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РО КАК ВТ_РО
	|		ПО ВТ_Документы.РасходныйОрдер = ВТ_РО.РасходныйОрдер
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсторияСтатусов КАК ВТ_ИсторияСтатусов
	|		ПО (ВТ_РО.РасходныйОрдер = ВТ_ИсторияСтатусов.Объект)";
	
	Возврат Результат;
	
КонецФункции // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Возвращаемое значение:
//
//	- Строка - текст запроса
//
&НаСервере
Функция ПолучитьТекстЗапросаПеремещение()
	
	Результат = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПеремещениеТоваров.Дата КАК Дата,
	|	ПеремещениеТоваров.Номер КАК Номер,
	|	ТИПЗНАЧЕНИЯ(ПеремещениеТоваров.Ссылка) КАК ТипДокумента,
	|	ПеремещениеТоваров.Ссылка КАК Документ,
	|	ПеремещениеТоваров.СкладОтправитель КАК СкладОтправитель,
	|	ПеремещениеТоваров.СкладПолучатель КАК СкладПолучатель,
	|	СУММА(ПеремещениеТоваровТовары.Количество) КАК КоличествоПар,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПеремещениеТоваровгф_ТоварыВКоробах.УпаковочныйЛист) КАК КоличествоКоробов,
	|	ПеремещениеТоваров.Статус КАК Статус,
	|	ПеремещениеТоваров.ПеревозчикПартнер КАК ТК,
	|	ПеремещениеТоваров.ДокументОснование КАК РасходныйОрдер,
	|	ПеремещениеТоваров.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ПеремещениеТоваров.гф_ПочтовоеОтправление КАК гф_ПочтовоеОтправление
	|ПОМЕСТИТЬ ВТ_Перемещение
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|		ПО ПеремещениеТоваров.Ссылка = ПеремещениеТоваровТовары.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.гф_ТоварыВКоробах КАК ПеремещениеТоваровгф_ТоварыВКоробах
	|		ПО ПеремещениеТоваров.Ссылка = ПеремещениеТоваровгф_ТоварыВКоробах.Ссылка
	|ГДЕ
	|	ПеремещениеТоваров.Проведен
	|	И ПеремещениеТоваров.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И (ПеремещениеТоваров.Организация = &Организация
	|			ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	
	|СГРУППИРОВАТЬ ПО
	|	ПеремещениеТоваров.Ссылка,
	|	ПеремещениеТоваров.Дата,
	|	ПеремещениеТоваров.Номер,
	|	ТИПЗНАЧЕНИЯ(ПеремещениеТоваров.Ссылка),
	|	ПеремещениеТоваров.СкладОтправитель,
	|	ПеремещениеТоваров.СкладПолучатель,
	|	ПеремещениеТоваров.Статус,
	|	ПеремещениеТоваров.ПеревозчикПартнер,
	|	ПеремещениеТоваров.ХозяйственнаяОперация,
	|	ПеремещениеТоваров.ДокументОснование,
	|	ПеремещениеТоваров.гф_ПочтовоеОтправление
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	гф_ПочтаРоссииИсторияОтслеживанияСрезПоследних.ПочтовоеОтправление КАК ПочтовоеОтправление,
	|	гф_ПочтаРоссииИсторияОтслеживанияСрезПоследних.Период КАК Период,
	|	гф_ПочтаРоссииИсторияОтслеживанияСрезПоследних.Операция КАК Операция
	|ПОМЕСТИТЬ ВТ_ИсторияОтслеживания
	|ИЗ
	|	РегистрСведений.гф_ПочтаРоссииИсторияОтслеживания.СрезПоследних(
	|			&КонецВремен,
	|			ПочтовоеОтправление В
	|				(ВЫБРАТЬ
	|					Т.гф_ПочтовоеОтправление
	|				ИЗ
	|					ВТ_Перемещение КАК Т)) КАК гф_ПочтаРоссииИсторияОтслеживанияСрезПоследних
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Перемещение.Документ КАК Документ,
	|	гф_ПочтаРоссииИсторияОтслеживанияСрезПоследних.ПочтовоеОтправление КАК ПочтовоеОтправление,
	|	гф_ПочтаРоссииИсторияОтслеживанияСрезПоследних.Период КАК Период,
	|	гф_ПочтаРоссииИсторияОтслеживанияСрезПоследних.Операция КАК Операция
	|ПОМЕСТИТЬ ВТ_СостояниеПосылки
	|ИЗ
	|	ВТ_Перемещение КАК ВТ_Перемещение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИсторияОтслеживания КАК гф_ПочтаРоссииИсторияОтслеживанияСрезПоследних
	|		ПО ВТ_Перемещение.гф_ПочтовоеОтправление = гф_ПочтаРоссииИсторияОтслеживанияСрезПоследних.ПочтовоеОтправление
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныйОрдерНаТовары.Ссылка КАК РасходныйОрдер,
	|	РасходныйОрдерНаТовары.Номер КАК НомерРО,
	|	РасходныйОрдерНаТовары.Дата КАК ДатаРО,
	|	РасходныйОрдерНаТовары.ДатаОтгрузки КАК ДатаОтгрузки,
	|	РасходныйОрдерНаТовары.Статус КАК СтатусРО,
	|	РасходныйОрдерНаТовары.Ответственный КАК Отгрузил,
	|	РасходныйОрдерНаТовары.Склад КАК СкладОтправитель,
	|	СУММА(РасходныйОрдерНаТоварыОтгружаемыеТовары.Количество) КАК КоличествоПар,
	|	Склады.гф_Организация КАК гф_Организация
	|ПОМЕСТИТЬ ВТ_РО
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары.ОтгружаемыеТовары КАК РасходныйОрдерНаТоварыОтгружаемыеТовары
	|		ПО РасходныйОрдерНаТовары.Ссылка = РасходныйОрдерНаТоварыОтгружаемыеТовары.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|		ПО РасходныйОрдерНаТовары.Склад = Склады.Ссылка
	|ГДЕ
	|	РасходныйОрдерНаТовары.Проведен
	|	И РасходныйОрдерНаТовары.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И РасходныйОрдерНаТовары.СкладскаяОперация = ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ОтгрузкаПоПеремещению)
	|	И (Склады.гф_Организация = &Организация
	|			ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерНаТовары.Ссылка,
	|	РасходныйОрдерНаТовары.Номер,
	|	РасходныйОрдерНаТовары.Дата,
	|	РасходныйОрдерНаТовары.ДатаОтгрузки,
	|	РасходныйОрдерНаТовары.Статус,
	|	РасходныйОрдерНаТовары.Ответственный,
	|	РасходныйОрдерНаТовары.Склад,
	|	Склады.гф_Организация
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходныйОрдерНаТовары.Ссылка КАК ПриходныйОрдер,
	|	ПриходныйОрдерНаТовары.Номер КАК НомерПО,
	|	ПриходныйОрдерНаТовары.Дата КАК ДатаПО,
	|	ПриходныйОрдерНаТовары.Статус КАК СтатусПО,
	|	ПриходныйОрдерНаТовары.Ответственный КАК Оприходовал,
	|	ПриходныйОрдерНаТовары.Дата КАК ДатаОприходования,
	|	ПриходныйОрдерНаТовары.Распоряжение КАК Распоряжение,
	|	ПриходныйОрдерНаТовары.Склад КАК СкладПолучатель,
	|	СУММА(ПриходныйОрдерНаТоварыТовары.Количество) КАК КоличествоПар,
	|	Склады.гф_Организация КАК гф_Организация
	|ПОМЕСТИТЬ ВТ_ПО
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
	|		ПО ПриходныйОрдерНаТовары.Ссылка = ПриходныйОрдерНаТоварыТовары.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|		ПО ПриходныйОрдерНаТовары.Склад = Склады.Ссылка
	|ГДЕ
	|	ПриходныйОрдерНаТовары.Проведен
	|	И ПриходныйОрдерНаТовары.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ПриходныйОрдерНаТовары.СкладскаяОперация = ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ПриемкаПоПеремещению)
	|	И (Склады.гф_Организация = &Организация
	|			ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	
	|СГРУППИРОВАТЬ ПО
	|	ПриходныйОрдерНаТовары.Ссылка,
	|	ПриходныйОрдерНаТовары.Номер,
	|	ПриходныйОрдерНаТовары.Дата,
	|	ПриходныйОрдерНаТовары.Статус,
	|	ПриходныйОрдерНаТовары.Ответственный,
	|	ПриходныйОрдерНаТовары.Склад,
	|	ПриходныйОрдерНаТовары.Распоряжение,
	|	Склады.гф_Организация,
	|	ПриходныйОрдерНаТовары.Дата
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подзапрос.Документ КАК Документ,
	|	Подзапрос.РасходныйОрдер КАК РасходныйОрдер,
	|	ВТ_ПО.ПриходныйОрдер КАК ПриходныйОрдер
	|ПОМЕСТИТЬ ВТ_Связи
	|ИЗ
	|	(ВЫБРАТЬ
	|		Подзапрос.Документ КАК Документ,
	|		Подзапрос.РасходныйОрдер КАК РасходныйОрдер
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВТ_Перемещение.Документ КАК Документ,
	|			ВТ_РО.РасходныйОрдер КАК РасходныйОрдер
	|		ИЗ
	|			ВТ_Перемещение КАК ВТ_Перемещение
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РО КАК ВТ_РО
	|				ПО ВТ_Перемещение.РасходныйОрдер = ВТ_РО.РасходныйОрдер
	|		ГДЕ
	|			НЕ ВТ_РО.РасходныйОрдер ЕСТЬ NULL
	|
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ
	|			ВТ_Перемещение.Документ,
	|			ВТ_РО.РасходныйОрдер
	|		ИЗ
	|			ВТ_РО КАК ВТ_РО
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Перемещение КАК ВТ_Перемещение
	|					ПО РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение = ВТ_Перемещение.Документ
	|				ПО ВТ_РО.РасходныйОрдер = РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка
	|		ГДЕ
	|			НЕ ВТ_Перемещение.Документ ЕСТЬ NULL) КАК Подзапрос
	|
	|	СГРУППИРОВАТЬ ПО
	|		Подзапрос.Документ,
	|		Подзапрос.РасходныйОрдер) КАК Подзапрос
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ПО КАК ВТ_ПО
	|		ПО Подзапрос.Документ = ВТ_ПО.Распоряжение
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Перемещение.Дата КАК Дата,
	|	ВТ_Перемещение.Номер КАК Номер,
	|	ВТ_Перемещение.ТипДокумента КАК ТипДокумента,
	|	ВТ_Перемещение.Документ КАК Документ,
	|	ЕСТЬNULL(ВТ_Перемещение.СкладОтправитель, ВТ_РО.СкладОтправитель) КАК СкладОтправитель,
	|	ЕСТЬNULL(ВТ_Перемещение.СкладПолучатель, ВТ_ПО.СкладПолучатель) КАК СкладПолучатель,
	|	ЕСТЬNULL(ВТ_Перемещение.КоличествоПар, ЕСТЬNULL(ВТ_ПО.КоличествоПар, ВТ_РО.КоличествоПар)) КАК КоличествоПар,
	|	ВТ_Перемещение.КоличествоКоробов КАК КоличествоКоробов,
	|	ВТ_Перемещение.Статус КАК Статус,
	|	ВТ_Перемещение.ТК КАК ТК,
	|	ВТ_ПО.ПриходныйОрдер КАК ПриходныйОрдер,
	|	ВТ_ПО.НомерПО КАК НомерПО,
	|	ВТ_ПО.ДатаПО КАК ДатаПО,
	|	ВТ_ПО.СтатусПО КАК СтатусПО,
	|	ВТ_ПО.Оприходовал КАК Оприходовал,
	|	ВТ_ПО.ДатаОприходования КАК ДатаОприходования,
	|	ВТ_ПО.Распоряжение КАК Распоряжение,
	|	ВТ_РО.РасходныйОрдер КАК РасходныйОрдер,
	|	ВТ_РО.НомерРО КАК НомерРО,
	|	ВТ_РО.ДатаРО КАК ДатаРО,
	|	ВТ_РО.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ВТ_РО.СтатусРО КАК СтатусРО,
	|	ВТ_РО.Отгрузил КАК Отгрузил,
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) КАК Партнер,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеремещениеТоваров) КАК ХозяйственнаяОперация,
	|	ВТ_СостояниеПосылки.ПочтовоеОтправление КАК Посылка,
	|	ВТ_СостояниеПосылки.Период КАК ДатаСостоянияПослылки,
	|	ВТ_СостояниеПосылки.Операция КАК СостояниеПосылки
	// #wortmann { 
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee3cc9d681d499
	// Галфинд_Домнышева 2023/08/18
	|Поместить ИТОГО
	// } #wortmann
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_Связи.Документ КАК Документ,
	|		ВТ_Связи.РасходныйОрдер КАК РасходныйОрдер,
	|		ВТ_Связи.ПриходныйОрдер КАК ПриходныйОрдер
	|	ИЗ
	|		ВТ_Связи КАК ВТ_Связи
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ВТ_Связи.Документ,
	|		ВТ_РО.РасходныйОрдер,
	|		ВТ_Связи.ПриходныйОрдер
	|	ИЗ
	|		ВТ_РО КАК ВТ_РО
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Связи КАК ВТ_Связи
	|			ПО ВТ_РО.РасходныйОрдер = ВТ_Связи.РасходныйОрдер
	|	ГДЕ
	|		ВТ_Связи.РасходныйОрдер ЕСТЬ NULL) КАК Подзапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Перемещение КАК ВТ_Перемещение
	|		ПО Подзапрос.Документ = ВТ_Перемещение.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РО КАК ВТ_РО
	|		ПО Подзапрос.РасходныйОрдер = ВТ_РО.РасходныйОрдер
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПО КАК ВТ_ПО
	|		ПО Подзапрос.ПриходныйОрдер = ВТ_ПО.ПриходныйОрдер
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СостояниеПосылки КАК ВТ_СостояниеПосылки
	|		ПО Подзапрос.Документ = ВТ_СостояниеПосылки.Документ
	// #wortmann {
	// Не должны попадать Перемещения по виртуальным складам
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee3cc9d681d499
	// Галфинд_Домнышева 2023/08/18
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(гф_ГлобальныеЗначенияСписок.Значение КАК Справочник.Склады) КАК Склад
	|ПОМЕСТИТЬ ВиртуальныеСклады
	|ИЗ
	|	ПланВидовХарактеристик.гф_ГлобальныеЗначения.Список КАК гф_ГлобальныеЗначенияСписок
	|ГДЕ
	|	гф_ГлобальныеЗначенияСписок.Ссылка.Ключ = ""гф_ВиртуальныеСклады""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Итого.Дата КАК Дата,
	|	Итого.Номер КАК Номер,
	|	Итого.ТипДокумента КАК ТипДокумента,
	|	Итого.Документ КАК Документ,
	|	Итого.СкладОтправитель КАК СкладОтправитель,
	|	Итого.СкладПолучатель КАК СкладПолучатель,
	|	Итого.КоличествоПар КАК КоличествоПар,
	|	Итого.КоличествоКоробов КАК КоличествоКоробов,
	|	Итого.Статус КАК Статус,
	|	Итого.ТК КАК ТК,
	|	Итого.ПриходныйОрдер КАК ПриходныйОрдер,
	|	Итого.НомерПО КАК НомерПО,
	|	Итого.ДатаПО КАК ДатаПО,
	|	Итого.СтатусПО КАК СтатусПО,
	|	Итого.Оприходовал КАК Оприходовал,
	|	Итого.ДатаОприходования КАК ДатаОприходования,
	|	Итого.Распоряжение КАК Распоряжение,
	|	Итого.РасходныйОрдер КАК РасходныйОрдер,
	|	Итого.НомерРО КАК НомерРО,
	|	Итого.ДатаРО КАК ДатаРО,
	|	Итого.ДатаОтгрузки КАК ДатаОтгрузки,
	|	Итого.СтатусРО КАК СтатусРО,
	|	Итого.Отгрузил КАК Отгрузил,
	|	Итого.Партнер КАК Партнер,
	|	Итого.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Итого.Посылка КАК Посылка,
	|	Итого.ДатаСостоянияПослылки КАК ДатаСостоянияПослылки,
	|	Итого.СостояниеПосылки КАК СостояниеПосылки
	|ИЗ
	|	ИТОГО КАК Итого
	|ГДЕ
	|	НЕ Итого.СкладОтправитель В
	|				(ВЫБРАТЬ
	|					Склады.Склад
	|				ИЗ
	|					ВиртуальныеСклады КАК Склады)
	|	И НЕ Итого.СкладПолучатель В
	|				(ВЫБРАТЬ
	|					Склады.Склад
	|				ИЗ
	|					ВиртуальныеСклады КАК Склады)
	// } #wortmann
	|";
	
	Возврат Результат;
	
КонецФункции // } #wortmann

// BSLLS:MethodSize-on
// BSLLS:FullOuterJoinQuery-on

&НаСервере
Процедура УстановитьДоступностьКолонокТаблиц()
	
	УстановитьДоступностьКолонокТаблицы("Поставка");
	УстановитьДоступностьКолонокТаблицы("Отгрузка");
	УстановитьДоступностьКолонокТаблицы("Перемещение");
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
// Параметры:
//
// ИмяТаблицы - Строка
//
&НаСервере
Процедура УстановитьДоступностьКолонокТаблицы(ИмяТаблицы)
	
	ИмяГруппы        = ИмяТаблицы + "Группа";
	ДлинаИмениГруппы = СтрДлина(ИмяГруппы);
	
	Для Каждого Колонка Из Элементы[ИмяТаблицы].ПодчиненныеЭлементы Цикл
		
		Если Лев(Колонка.Имя, ДлинаИмениГруппы) = ИмяГруппы Тогда
			
			УстановитьДоступностьПодчиненныхЭлементов(ИмяТаблицы, Колонка)
			
		Иначе
			
			Колонка.ТолькоПросмотр = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МассивИменДоступныхПолей = Новый Массив;
	
	МассивИменДоступныхПолей.Добавить("Флаг");
	МассивИменДоступныхПолей.Добавить("ТК");
	МассивИменДоступныхПолей.Добавить("ПрямаяПоставка");
	МассивИменДоступныхПолей.Добавить("ДатаПоступления");
	МассивИменДоступныхПолей.Добавить("АдресДоставки");
	
	Для Каждого ИмяПоля Из МассивИменДоступныхПолей Цикл
		
		Элемент = Элементы.Найти(ИмяТаблицы + ИмяПоля);
		
		Если Элемент <> Неопределено Тогда
			
			Элемент.ТолькоПросмотр = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
// Параметры:
//
// ИмяТаблицы	- Строка
// Элемент		- ЭлементФормы
//
&НаСервере
Процедура УстановитьДоступностьПодчиненныхЭлементов(ИмяТаблицы, Элемент)
	
	ИмяГруппы        = ИмяТаблицы + "Группа";
	ДлинаИмениГруппы = СтрДлина(ИмяГруппы);
	
	Для Каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
		
		Если Лев(ПодчиненныйЭлемент.Имя, ДлинаИмениГруппы) = ИмяГруппы Тогда
			
			Для Каждого ПодПодчиненныеЭлемент Из ПодчиненныйЭлемент.ПодчиненныеЭлементы Цикл
				
				ПодПодчиненныеЭлемент.ТолькоПросмотр = Истина;
				
			КонецЦикла;
			
		Иначе
			
			ПодчиненныйЭлемент.ТолькоПросмотр = Истина;
			
		КонецЕсли;
		
		
	КонецЦикла;
	
КонецПроцедуры // } #wortmann

&НаСервереБезКонтекста

//
// Параметры:
// 	СсылкаНаОбъект	- ДокументСсылка, СправочникСсылка
//
// Возвращаемое значение:
//	- Строка - имя формы объекта
//
Функция ПолучитьИмяФормыОбъекта(СсылкаНаОбъект)
	
	ТипОбъекта = ТипЗнч(СсылкаНаОбъект);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипОбъекта) Тогда
		
		МетаданныеОбъекта = СсылкаНаОбъект.Метаданные();
		
		Если ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта) Тогда
			
			Возврат "Документ." + МетаданныеОбъекта.Имя + ".ФормаОбъекта";
			
		ИначеЕсли ОбщегоНазначения.ЭтоСправочник(МетаданныеОбъекта) Тогда
			
			Возврат "Справочник." + МетаданныеОбъекта.Имя + ".ФормаОбъекта";
			
		Иначе
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции // } #wortmann

&НаСервере
Процедура УстановитьСтатусыОрдеров(МассивОрдеров, Статус)
	
	Для Каждого Ордер Из МассивОрдеров Цикл
		
		ОрдерОбъект = Ордер.ПолучитьОбъект();
		
		ОрдерОбъект.Статус = Статус;
		
		ОрдерОбъект.ОбменДанными.Загрузка = Истина;
		
		ОрдерОбъект.Записать();
		
	КонецЦикла
	
КонецПроцедуры // } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
// Возвращаемое значение:
//
//	- Массив - массив отмеченных строк
//
&НаКлиенте
Функция ПолучитьОтмеченныеСтроки()
	
	ИмяТаблицы = ИмяТекущейТаблицы();
	
	ОтборОтмеченных = Новый Структура("Флаг", Истина);
	
	ОтмеченныеСтроки = Объект[ИмяТаблицы].НайтиСтроки(ОтборОтмеченных);
	
	Возврат ОтмеченныеСтроки;
	
КонецФункции // } #wortmann

// #wortmann {
// #Монитор логиста
// Галфинд Окунев 2022/09/27
//
&НаСервере
Процедура ЗаполнитьСписокВыбораТиповДокументов()
	
	Элементы.ТипДокумента.СписокВыбора.Очистить();
	
	Реализация  = Метаданные.Документы.РеализацияТоваровУслуг;
	Перемещение = Метаданные.Документы.ПеремещениеТоваров;
	
	Элементы.ТипДокумента.СписокВыбора.Добавить(Реализация.Имя,  Реализация.Синоним);
	Элементы.ТипДокумента.СписокВыбора.Добавить(Перемещение.Имя, Перемещение.Синоним);
	
КонецПроцедуры // } #wortmann// } #wortmann

// #wortmann {
// Галфинд Окунев 2023/06/18
//
&НаСервере
Процедура ЗаполнитьСписокВыбораПечатныхФорм()
	
	Объект.ПечатныеФормы.Очистить();
	
	Если ЗначениеЗаполнено(Объект.ТипДокумента) Тогда
		
		ОтборСтрок = Новый Структура;
		
		ОтборСтрок.Вставить("ТипДокумента", Объект.ТипДокумента);
		
		КомандыПечати = УправлениеПечатью.КомандыПечатиОбъектаДоступныеДляВложений(Метаданные.Документы[Объект.ТипДокумента]);
		
		Для Каждого КомандаПечати Из КомандыПечати Цикл
			
			Если Не ЗначениеЗаполнено(КомандаПечати.Обработчик) Тогда
				
				ОтборСтрок.Вставить("ПечатнаяФорма", КомандаПечати.Идентификатор);
				
				НайденныеСтроки = ВыбранныеПечатныеФормы.НайтиСтроки(ОтборСтрок);
				
				Пометка = НайденныеСтроки.Количество() > 0;
				
				Объект.ПечатныеФормы.Добавить(КомандаПечати.Идентификатор, КомандаПечати.Представление, Пометка);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // } #wortmann// } #wortmann

// #wortmann {
// #Монитор логиста
// Галфинд Окунев 2022/09/27
//
// Параметры:
// Элемент	- ПолеФормы
//
&НаКлиенте
Процедура ПечатныеФормыПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПечатныеФормы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОтборСтрок = Новый Структура;
	
	ОтборСтрок.Вставить("ТипДокумента",  Объект.ТипДокумента);
	ОтборСтрок.Вставить("ПечатнаяФорма", ТекущиеДанные.Значение);
	
	НайденныеСтроки = ВыбранныеПечатныеФормы.НайтиСтроки(ОтборСтрок);
	
	Если ТекущиеДанные.Пометка Тогда
		
		Если Не НайденныеСтроки.Количество() Тогда
			
			НоваяСтрока = ВыбранныеПечатныеФормы.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОтборСтрок);
			
		КонецЕсли;
		
	Иначе
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			ИндексСтроки = ВыбранныеПечатныеФормы.Индекс(НайденнаяСтрока);
			
			ВыбранныеПечатныеФормы.Удалить(ИндексСтроки);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // } #wortmann// } #wortmann

// #wortmann {
// #Монитор логиста
// Галфинд Окунев 2022/09/27
//
// Параметры:
// Документ	- ДокументСсылка
//
// Возвращаемое значение:
//
//	- Строка - имя метаданных объекта
//
&НаСервереБезКонтекста
Функция ТипДокумента(Документ)
	
	Возврат Документ.Метаданные().Имя;
	
КонецФункции // } #wortmann// } #wortmann

// #wortmann {
// #Монитор логиста
// Галфинд Окунев 2022/10/20
//
// Параметры:
// СсылкаНаОбъект	- Ссылка
// ИмяСвойства		- Строка
// ЗначениеСвойства	- Строка
//
&НаСервереБезКонтекста
Процедура УстановитьСвойствоОбъекта(СсылкаНаОбъект, ИмяСвойства, ЗначениеСвойства)
	
	СвойствоСсылка = Неопределено;
	
	Свойства = УправлениеСвойствами.СвойстваОбъекта(СсылкаНаОбъект, Истина, Ложь);
	
	Для Каждого Свойство Из Свойства Цикл
		
		Если Свойство.ИдентификаторДляФормул = ИмяСвойства Тогда
			
			СвойствоСсылка = Свойство.Ссылка;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(СвойствоСсылка) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекущееЗначение = УправлениеСвойствами.ЗначениеСвойства(СсылкаНаОбъект, ИмяСвойства);
	
	Если ТипЗнч(ЗначениеСвойства) = Тип("Булево") Тогда
		
		ТекущееЗначение = ?(ТекущееЗначение = Неопределено, Ложь, ТекущееЗначение);
		
	КонецЕсли;
	
	Если ТекущееЗначение <> ЗначениеСвойства Тогда
		
		Объект = СсылкаНаОбъект.ПолучитьОбъект();
		
		Если ЗначениеСвойства = Ложь Или ЗначениеСвойства = Неопределено Тогда
			
			УдалитьСвойствоОбъекта(Объект, СвойствоСсылка);
			
		Иначе
			
			ДополнительныйРеквизит = Объект.ДополнительныеРеквизиты.Добавить();
			
			ДополнительныйРеквизит.Свойство        = СвойствоСсылка;
			ДополнительныйРеквизит.Значение        = ЗначениеСвойства;
			ДополнительныйРеквизит.ТекстоваяСтрока = ЗначениеСвойства;
			
		КонецЕсли;
		
		Объект.ОбменДанными.Загрузка = Истина;
		
		Объект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры // } #wortmann

// #wortmann {
// #Монитор логиста
// Галфинд Окунев 2022/10/20
//
// Параметры:
// Объект			- Объект
// СвойствоСсылка	- Ссылка
//
&НаСервереБезКонтекста
Процедура УдалитьСвойствоОбъекта(Объект, СвойствоСсылка)
	
	Индекс = Неопределено;
	
	Для Каждого ДополнительныйРеквизит Из Объект.ДополнительныеРеквизиты Цикл
		
		Если ДополнительныйРеквизит.Свойство = СвойствоСсылка Тогда
			
			Индекс = Объект.ДополнительныеРеквизиты.Индекс(ДополнительныйРеквизит);
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Индекс <> Неопределено Тогда
		
		Объект.ДополнительныеРеквизиты.Удалить(Индекс);
		
	КонецЕсли;
	
КонецПроцедуры // } #wortmann


// #wortmann {
// Процедура собирает массив документов и передает в серверную процедуру
// Галфинд_Домнышева 2022/09/28
// Параметры:
// <Результат> - значение результата, переданное вторым параметром при вызове метода,
// <ДопПараметры> - значение, которое было указано при создании объекта оповещения.
&НаКлиенте
Процедура ВопросОВыгрузки (Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		МассивДокументовРасход = Новый Массив;
		МассивДокументовПриход = Новый Массив;
		
		ДобавитьОтмеченныеСтрокиВМассивДокументов(МассивДокументовРасход, "Отгрузка", Ложь);
		ДобавитьОтмеченныеСтрокиВМассивДокументов(МассивДокументовРасход, "Перемещение", Ложь);
		
		ДобавитьОтмеченныеСтрокиВМассивДокументов(МассивДокументовПриход, "Поставка", Истина);
		ДобавитьОтмеченныеСтрокиВМассивДокументов(МассивДокументовПриход, "Перемещение", Истина);
		
		Если Не МассивДокументовРасход.Количество() И Не МассивДокументовПриход.Количество() Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не найдено отмеченных строк для выгрузки");
			
			Возврат;
			
		КонецЕсли;
		
		ВызватьОбработку(МассивДокументовРасход, МассивДокументовПриход);
		
	Иначе
		
		ВызватьОбработку();
		
	КонецЕсли;
	
КонецПроцедуры// } #wortmann

// #wortmann {
// Процедура вызывает обработку гф_ОбменСWMS
// Галфинд_Домнышева 2022/09/28
// Параметры:
//	МассивОрдеров - <Массив> - ссылки на документы ПриходныйОрдерНаТовары и РасходныйОрдерНаТовары.
&НаСервере
Процедура ВызватьОбработку(МассивДокументовРасход = Неопределено, МассивДокументовПриход = Неопределено)
	
	ОбработкаОбъект = Обработки.гф_ОбменСWMS.Создать();
	ОбработкаОбъект.ВыгрузитьДанные(МассивДокументовРасход, МассивДокументовПриход);
	
КонецПроцедуры// } #wortmann

// #wortmann {
// Процедура добавляет в Массив значения документов выбранных строк
// Галфинд_Домнышева 2022/09/28
// Параметры:
//	МассивОрдеров - <Массив> - ссылки на документы ПриходныйОрдерНаТовары и РасходныйОрдерНаТовары
//  ИмяРаздела - <Строка> - Наименование табличной части
//  ПрО - <Булево>, Истина если ПриходныйОрдерНаТовары, Ложь если РасходныйОрдерНаТовары.
&НаКлиенте
Процедура ДобавитьОтмеченныеСтрокиВМассивДокументов(МассивДокументов, ИмяРаздела, ПрО)
	
	ОтборОтмеченных = Новый Структура("Флаг", Истина);
	
	МассивОтмеченныхСтрок = Объект[ИмяРаздела].НайтиСтроки(ОтборОтмеченных);
	
	Для Каждого ОтмеченнаяСтрока Из МассивОтмеченныхСтрок Цикл
		
		Если ПрО = Истина Тогда
			
			Если ЗначениеЗаполнено(ОтмеченнаяСтрока.ПриходныйОрдер)
				И ПравильныйСтатусДокумента(ОтмеченнаяСтрока.ПриходныйОрдер) Тогда
				
				МассивДокументов.Добавить(ОтмеченнаяСтрока.ПриходныйОрдер);
				
			Иначе
				
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"В разделе ""%1"" в строке %2 не указан приходный ордер или статус документа Не ""К Поступлению""",
				ИмяРаздела, ОтмеченнаяСтрока.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
				
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(ОтмеченнаяСтрока.РасходныйОрдер)
				И ПравильныйСтатусДокумента(ОтмеченнаяСтрока.РасходныйОрдер) Тогда
				
				МассивДокументов.Добавить(ОтмеченнаяСтрока.РасходныйОрдер);
				
			Иначе
				
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"В разделе ""%1"" в строке %2 не указан расходный ордер или статус документа Не ""К отбору""",
				ИмяРаздела, ОтмеченнаяСтрока.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры// } #wortmann

// #wortmann {
// Функция проверяет статус документа
// Замена процедуры ПроверитьСтатусДокумента
// Галфинд_Домнышева 2023/07/10
// Параметры:
//	Документ - ДокументСсылка.РасходныйОрдерНаТовары, ДокументСсылка.ПриходныйОрдерНаТовары.
//
// Возвращаемое значение:
//	Булево - Если Статус подходит для загрузки Истина, иначе Ложь.
//
&НаСервере
Функция ПравильныйСтатусДокумента(Документ)
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
		
		Если НЕ Документ.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтбору Тогда
			
			Возврат Ложь;
			
		Иначе
			
			Возврат Истина;
			
		КонецЕсли;
		
	Иначе
		
		Если НЕ Документ.Статус = Перечисления.СтатусыПриходныхОрдеров.КПоступлению Тогда
			
			Возврат Ложь;
			
		Иначе
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции// } #wortmann

// #wortmann {
// Процедура вызывает серверную процедуру при "ответе - Да"
// Галфинд_Домнышева 2022/10/26
// Параметры:
// <Результат> - значение результата, переданное вторым параметром при вызове метода,
// <ДопПараметры> - значение, которое было указано при создании объекта оповещения.
&НаКлиенте
Процедура ВопросОЗагрузки (Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ВызватьОбработкуЗагрузки();
		
	КонецЕсли;
	
КонецПроцедуры// } #wortmann

// #wortmann {
// Процедура вызывает обработку гф_ОбменСWMS
// Галфинд_Домнышева 2022/09/28
// Параметры:
//	МассивОрдеров - <Массив> - ссылки на документы ПриходныйОрдерНаТовары и РасходныйОрдерНаТовары.
&НаСервере
Процедура ВызватьОбработкуЗагрузки()
	
	ОбработкаОбъект = Обработки.гф_ОбменСWMS.Создать();
	ОбработкаОбъект.ЗагрузитьДанные();
	
КонецПроцедуры// } #wortmann

#КонецОбласти

