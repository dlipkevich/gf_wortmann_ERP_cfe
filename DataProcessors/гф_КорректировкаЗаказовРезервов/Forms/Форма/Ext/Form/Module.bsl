
#Область ОбработчикиСобытийФормы 

&НаКлиенте
Процедура ОтборыПриИзменении(Элемент)
	ЗаполнитьТаблицаЗаказы();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаказыПриАктивизацииЯчейки(Элемент)
	ТД = Элементы.ТаблицаЗаказы.ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		Если мЗаказКлиента <> ТД.ЗаказКлиента Тогда
			флЗадатьВопрос = Ложь;
			Если	РежимРаботы = 1
				И НЕ флТоварыВКоробах Тогда
				флЗадатьВопрос = Объект.Резервы.Количество() > 0;
			ИначеЕсли	РежимРаботы = 1
				И		флТоварыВКоробах Тогда
				флЗадатьВопрос = Объект.РезервыВКоробах.Количество() > 0;
			ИначеЕсли флТоварыВКоробах Тогда
				флЗадатьВопрос = Объект.ТоварыВКоробах.Количество() > 0;
			Иначе
				флЗадатьВопрос = Объект.Товары.Количество() > 0;
			КонецЕсли;
			Если флЗадатьВопрос Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОчиститьСтрокиЗаказа", ЭтотОбъект);
				ПоказатьВопрос(ОписаниеОповещения, "Очистить строки заказа?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			Иначе
				мЗаказКлиента = ТД.ЗаказКлиента;
				мНазначение = ПолучитьНазначение(мЗаказКлиента);
				мКомментарий = ТД.Комментарий;
				мДатаОбновленияИзИ5 = _омОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(мЗаказКлиента,
					"Документ.ЗаказКлиента", "гф_ДатаОбновленияИзИ5");
				мИдентификаторТаблицыЗаказы = ТД.ПолучитьИдентификатор();
				ЗаполнитьЗаказИзменен();
				УправлениеДоступностьюЗаказыВКоробах();
				УправлениеДоступностьюРезервы();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЗаполнитьТаблицаЗаказы();
	УправлениеДоступностью();
	УправлениеДоступностьюТаблиц();
КонецПроцедуры

&НаКлиенте
Процедура флТоварыВКоробахПриИзменении(Элемент)
	УправлениеДоступностьюТаблиц();
КонецПроцедуры

&НаКлиенте
Процедура мНазначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураОтбора = Новый Структура("Организация, Заказ", отборОрганизация, мЗаказКлиента);
	ПараметрыФормы = Новый Структура("Отбор", СтруктураОтбора);
	ОткрытьФорму("Документ.КорректировкаНазначенияТоваров.Форма.ФормаВыбораНазначения", ПараметрыФормы, Элемент,
		УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДобавитьПриИзменении(Элемент)
	ПересчитатьИтогПоСтроке();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУдалитьПриИзменении(Элемент)
	ПересчитатьИтогПоСтроке();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	ПересчитатьИтогПоСтроке();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	ТД = Элементы.Товары.ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		Если ТД.флТолькоПросмотр = Истина Тогда
			Отказ = Истина;
		КонецЕсли;
		Если ТД.флНаличиеВЗаказе = Истина Тогда
			Если Элемент.ТекущийЭлемент.Имя = "ТоварыНоменклатура" ИЛИ Элемент.ТекущийЭлемент.Имя = "ТоварыХарактеристика" Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВКоробахДобавитьПриИзменении(Элемент)
	ПересчитатьИтогПоСтрокеВКоробах("ТоварыВКоробах", "Добавить", "Удалить");
	ЗаполнитьФлажкиДобавленоОтмененоПоСтрокеВКоробах();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВКоробахУдалитьПриИзменении(Элемент)
	ПересчитатьИтогПоСтрокеВКоробах("ТоварыВКоробах", "Добавить", "Удалить");
	ЗаполнитьФлажкиДобавленоОтмененоПоСтрокеВКоробах();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВКоробахЦенаКоробаПриИзменении(Элемент)
	ПересчитатьИтогПоСтрокеВКоробах("ТоварыВКоробах", "Добавить", "Удалить");
	ЗаполнитьФлажкиДобавленоОтмененоПоСтрокеВКоробах();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВКоробахПередНачаломИзменения(Элемент, Отказ)
	ТД = Элементы.ТоварыВКоробах.ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		Если ТД.флНаличиеВЗаказе = Истина Тогда
			Если Элемент.ТекущийЭлемент.Имя = "ТоварыВКоробахВариантКомплектации" Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВКоробахВариантКомплектацииПриИзменении(Элемент)
	ТД = Элементы.ТоварыВКоробах.ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		ТД.Артикул = "";
		Если ЗначениеЗаполнено(ТД.ВариантКомплектации) Тогда
			ТД.Артикул = ПолучитьАртикул(ТД.ВариантКомплектации);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РезервыПередНачаломИзменения(Элемент, Отказ)
	ТД = Элементы.Резервы.ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		Если ТД.флТолькоПросмотр = Истина Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РезервыВКоробахЗарезервироватьПриИзменении(Элемент)
	ПересчитатьИтогПоСтрокеВКоробах("РезервыВКоробах", "", "", "ПеренестиВДругойЗаказ");
КонецПроцедуры

&НаКлиенте
Процедура РезервыВКоробахСнятьРезервПриИзменении(Элемент)
	ПересчитатьИтогПоСтрокеВКоробах("РезервыВКоробах", "", "", "ПеренестиВДругойЗаказ");
КонецПроцедуры

&НаКлиенте
Процедура РезервыВКоробахЦенаКоробаПриИзменении(Элемент)
	ПересчитатьИтогПоСтрокеВКоробах("РезервыВКоробах", "", "", "ПеренестиВДругойЗаказ");
КонецПроцедуры

&НаКлиенте
Процедура РезервыВКоробахПеренестиВДругойЗаказПриИзменении(Элемент)
	ПересчитатьИтогПоСтрокеВКоробах("РезервыВКоробах", "", "", "ПеренестиВДругойЗаказ");
КонецПроцедуры

&НаКлиенте
Процедура РезервыНовоеНазначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Организация", отборОрганизация);
	ОткрытьФорму("Документ.КорректировкаНазначенияТоваров.Форма.ФормаВыбораНазначения", ПараметрыФормы, Элемент,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РезервыПеренестиНовоеНазначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Организация", отборОрганизация);
	ОткрытьФорму("Документ.КорректировкаНазначенияТоваров.Форма.ФормаВыбораНазначения", ПараметрыФормы, Элемент,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РезервыЗарезервироватьПриИзменении(Элемент)
	ПересчитатьИтогПоСтрокеРезерва();
КонецПроцедуры

&НаКлиенте
Процедура РезервыСнятьРезервПриИзменении(Элемент)
	ПересчитатьИтогПоСтрокеРезерва();
КонецПроцедуры

&НаКлиенте
Процедура РезервыПеренестиВДругойЗаказПриИзменении(Элемент)
	ПересчитатьИтогПоСтрокеРезерва();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьТаблицаЗаказы()
	// сначала заполним отборСтатус
	Если РежимРаботы = 0 Тогда
		отборСтатус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
	Иначе
		отборСтатус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказКлиента.Ссылка КАК ЗаказКлиента,
	               |	ЗаказКлиента.Комментарий КАК Комментарий
	               |ИЗ
	               |	Документ.ЗаказКлиента КАК ЗаказКлиента
	               |ГДЕ
	               |	ЗаказКлиента.Проведен
	               |	И ЗаказКлиента.Организация = &Организация
	               |	И ЗаказКлиента.Статус = &Статус
	               |	И ЗаказКлиента.Склад = &Склад
	               |	И ЗаказКлиента.Контрагент = &Контрагент
	               |	И ЗаказКлиента.Договор.гф_Сезон = &гф_Сезон
				   |	И ЗаказКлиента.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
	Запрос.УстановитьПараметр("Организация", отборОрганизация);
	Запрос.УстановитьПараметр("Статус", отборСтатус);
	Запрос.УстановитьПараметр("Склад", отборСклад);
	Запрос.УстановитьПараметр("Контрагент", отборКонтрагент);
	Запрос.УстановитьПараметр("гф_Сезон", отборСезон);
	Если Не ЗначениеЗаполнено(отборСклад) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказКлиента.Склад = &Склад", "ИСТИНА");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(отборКонтрагент) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказКлиента.Контрагент = &Контрагент", "ИСТИНА");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(отборСезон) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказКлиента.Договор.гф_Сезон = &гф_Сезон", "ИСТИНА");
	КонецЕсли;
	ДатаНачала = отборПериод.ДатаНачала;
	ДатаОкончания = отборПериод.ДатаОкончания;
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Если Не ЗначениеЗаполнено(ДатаНачала) И Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказКлиента.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания", "ИСТИНА");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	ТаблицаЗаказы.Загрузить(Результат.Выгрузить());
КонецПроцедуры

&НаКлиенте
Процедура ВопросОчиститьСтрокиЗаказа(Ответ, ДопПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если	РежимРаботы = 1
			И НЕ флТоварыВКоробах Тогда
			Объект.Резервы.Очистить();
		ИначеЕсли	РежимРаботы = 1
				И		флТоварыВКоробах Тогда
			Объект.РезервыВКоробах.Очистить();
		ИначеЕсли флТоварыВКоробах Тогда
			Объект.ТоварыВКоробах.Очистить();
		Иначе
			Объект.Товары.Очистить();
		КонецЕсли;
		ТД = Элементы.ТаблицаЗаказы.ТекущиеДанные;
		Если ТД <> Неопределено Тогда
			мЗаказКлиента = ТД.ЗаказКлиента;
			мНазначение = ПолучитьНазначение(мЗаказКлиента);
			мКомментарий = ТД.Комментарий;
			мДатаОбновленияИзИ5 = _омОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(мЗаказКлиента,
				"Документ.ЗаказКлиента", "гф_ДатаОбновленияИзИ5");
			мИдентификаторТаблицыЗаказы = ТД.ПолучитьИдентификатор();
			ЗаполнитьЗаказИзменен();
			УправлениеДоступностьюЗаказыВКоробах();
			УправлениеДоступностьюРезервы();
		КонецЕсли;
	Иначе
		Элементы.ТаблицаЗаказы.ТекущаяСтрока = мИдентификаторТаблицыЗаказы;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокОбъект()
	ЗаказОбъект = мЗаказКлиента.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(ЗаказОбъект, "ДокОбъект");
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеЗаказаНаСервере()
	
	Объект.Товары.Очистить();
	Объект.ТоварыВКоробах.Очистить();
	Объект.Резервы.Очистить();
	Объект.РезервыВКоробах.Очистить();
	
	Если Не ЗначениеЗаполнено(мЗаказКлиента) Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимРаботы = 1 Тогда
		ЗаполнитьТЧРезервыНаСервере();
	Иначе
		ЗаполнитьТЧТоварыНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧТоварыНаСервере()
			
	НомерВерсииЗаказа = НайтиНомерВерсииЗаказа(мЗаказКлиента);
	Если НомерВерсииЗаказа = Неопределено Тогда
		ТекстСообщения = "Для Заказа:" + мЗаказКлиента
		+ " НЕТ сохраненных ранее версий объекта. Заполнение не возможно!";
		СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	Если флТоварыВКоробах Тогда
		// здесь надо получить первоначальные данные заказа из регистра сведений ВерсииОбъектов и текущие данные заказа
		ЗаполнитьТЧВКоробах("ТоварыВКоробах");
		
	Иначе	
		// здесь надо получить первоначальные данные заказа из регистра сведений ВерсииОбъектов и текущие данные заказа
		ЗаполнитьТЧВПарах("Товары");
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧРезервыНаСервере()
	
	НомерВерсииЗаказа = НайтиНомерВерсииЗаказаПоСтатусу(мЗаказКлиента, ВыборСтатуса);
	Если НомерВерсииЗаказа = Неопределено Тогда
		ТекстСообщения = "Для Заказа:" + мЗаказКлиента
		+ " НЕТ сохраненных ранее версий объекта. Заполнение не возможно!";
		СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	Если флТоварыВКоробах Тогда
		// здесь надо получить первоначальные данные заказа из регистра сведений ВерсииОбъектов и текущие данные заказа
		// в зависимости от переключателя: "На согласовании/К выполнению"
		ЗаполнитьТЧВКоробах("РезервыВКоробах", НомерВерсииЗаказа);
			
		ЗаполнитьРезервыВКоробахНаСервере();

	Иначе
		// здесь надо получить первоначальные данные заказа из регистра сведений ВерсииОбъектов и текущие данные заказа
		// в зависимости от переключателя: "На согласовании/К выполнению"
		ЗаполнитьТЧВПарах("Резервы", НомерВерсииЗаказа);
		
		ЗаполнитьРезервыНаСервере();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеЗаказа(Команда)
	ЗаполнитьДанныеЗаказаНаСервере();
	флЗаказИзменен = Ложь;
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИтогПоСтроке()
	ТД = Элементы.Товары.ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		ТД.Количество = ТД.КоличествоСИзменениями + ТД.Добавить - ТД.Удалить;
		ТД.КоличествоУпаковок = ТД.Количество;
		Если ТД.Количество < 0 Тогда
			ТекстСообщения = "Отрицательный предварительный итог в строке заказа:" + ТД.НомерСтроки;
			СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТД.Добавить) ИЛИ ЗначениеЗаполнено(ТД.Удалить) Тогда
			ТД["Пометка"] = Истина;
		Иначе
			ТД["Пометка"] = Ложь;
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьЗаказИзменен();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаказИзменен()
	Если РежимРаботы = 1 Тогда
		Если	Объект.Резервы.Итог("Зарезервировать") <> 0
			ИЛИ	Объект.Резервы.Итог("СнятьРезерв") <> 0
			ИЛИ	Объект.Резервы.Итог("ПеренестиВДругойЗаказ") <> 0 Тогда
			флЗаказИзменен = Истина;
		Иначе
			флЗаказИзменен = Ложь;
		КонецЕсли;
	ИначеЕсли флТоварыВКоробах Тогда
		Если	Объект.ТоварыВКоробах.Итог("Добавить") <> 0
			ИЛИ	Объект.ТоварыВКоробах.Итог("Удалить") <> 0 Тогда
			флЗаказИзменен = Истина;
		Иначе
			флЗаказИзменен = Ложь;
		КонецЕсли;
	Иначе
		Если	Объект.Товары.Итог("Добавить") <> 0
			ИЛИ	Объект.Товары.Итог("Удалить") <> 0 Тогда
			флЗаказИзменен = Истина;
		Иначе
			флЗаказИзменен = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеПередЗаписьюРезервы()
	Если НЕ ЗначениеЗаполнено(мНазначение) Тогда
		СообщитьПользователю("Необходимо выбрать Текущее назначение.");
		флЕстьОшибкиЗаполнения = Истина;
	КонецЕсли;
	Если Объект.Резервы.Итог("Зарезервировать") > 0
		И НЕ ЗначениеЗаполнено(мПричинаДобавления) Тогда
		СообщитьПользователю("Необходимо указать Причину добавления.");
		флЕстьОшибкиЗаполнения = Истина;
	КонецЕсли;
	Если Объект.Резервы.Итог("СнятьРезерв") > 0
		И НЕ ЗначениеЗаполнено(мПричинаУдаления) Тогда
		СообщитьПользователю("Необходимо указать Причину удаления.");
		флЕстьОшибкиЗаполнения = Истина;
	КонецЕсли;
	Если	Объект.Резервы.Итог("ПеренестиВДругойЗаказ") > 0
		И 	(НЕ ЗначениеЗаполнено(мПричинаДобавления)
		ИЛИ НЕ ЗначениеЗаполнено(мПричинаУдаления)) Тогда
		СообщитьПользователю("Необходимо указать Причину добавления и Причину удаления.");
		флЕстьОшибкиЗаполнения = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступноНаСкладеПоСтроке(СтрокаТЧ, ТекстОшибки)
	Если	ЗначениеЗаполнено(СтрокаТЧ["Зарезервировать"])
		И	СтрокаТЧ["Зарезервировать"] > СтрокаТЧ["ДоступноНаСкладе"] Тогда
		ТекстОшибки = ТекстОшибки + "Зарезервировать превышает Остатки на складе. ";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗарезервироватьСнятьРезервПоСтроке(СтрокаТЧ, ТекстОшибки)
	Если	ЗначениеЗаполнено(СтрокаТЧ["Зарезервировать"])
		И	ЗначениеЗаполнено(СтрокаТЧ["СнятьРезерв"]) Тогда
		ТекстОшибки = ТекстОшибки + "В строка указаны Зарезервировать и Снять резерв одновременно. ";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПеренестиРезервПоСтроке(СтрокаТЧ, ТекстОшибки)
	Если	ЗначениеЗаполнено(СтрокаТЧ["ПеренестиРезерв"])
		И	НЕ ЗначениеЗаполнено(СтрокаТЧ["НовоеНазначение"]) Тогда
		ТекстОшибки = ТекстОшибки + "Для переноса резерва надо указать Количество и Новое назначение одновременно. ";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПеренестиВДругойЗаказПоСтроке(СтрокаТЧ, ТекстОшибки)
	Если	ЗначениеЗаполнено(СтрокаТЧ["ПеренестиВДругойЗаказ"])
		И	НЕ ЗначениеЗаполнено(СтрокаТЧ["ПеренестиНовоеНазначение"]) Тогда
		ТекстОшибки = ТекстОшибки
		+ "Для переноса резерва в другой заказ надо указать Количество и Новое назначение одновременно. ";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКоличествоПоСтроке(СтрокаТЧ, ТекстОшибки)
	Если СтрокаТЧ["Количество"] < 0 Тогда
		ТекстОшибки = ТекстОшибки + "Отрицательный предварительный итог. ";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеПередЗаписьюТЧРезервы()
	Для Каждого СтрокаТЧ Из Объект.Резервы Цикл
		ТекстОшибки = "";
		ПроверитьДоступноНаСкладеПоСтроке(СтрокаТЧ, ТекстОшибки);
		ПроверитьЗарезервироватьСнятьРезервПоСтроке(СтрокаТЧ, ТекстОшибки);
		ПроверитьПеренестиРезервПоСтроке(СтрокаТЧ, ТекстОшибки);
		ПроверитьПеренестиВДругойЗаказПоСтроке(СтрокаТЧ, ТекстОшибки);
		ПроверитьКоличествоПоСтроке(СтрокаТЧ, ТекстОшибки);
		Если ТекстОшибки <> "" Тогда
			ТекстСообщения = ТекстОшибки + " в строке:" + СтрокаТЧ["НомерСтроки"];
			СообщитьПользователю(ТекстСообщения);
			флЕстьОшибкиЗаполнения = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеПередЗаписьюТЧРезервыВКоробах()
	Для Каждого СтрокаТЧ Из Объект.РезервыВКоробах Цикл
		ТекстОшибки = "";
		//ПроверитьДоступноНаСкладеПоСтроке(СтрокаТЧ, ТекстОшибки);
		//ПроверитьЗарезервироватьСнятьРезервПоСтроке(СтрокаТЧ, ТекстОшибки);
		ПроверитьПеренестиРезервПоСтроке(СтрокаТЧ, ТекстОшибки);
		ПроверитьПеренестиВДругойЗаказПоСтроке(СтрокаТЧ, ТекстОшибки);
		//ПроверитьКоличествоПоСтроке(СтрокаТЧ, ТекстОшибки);
		Если ТекстОшибки <> "" Тогда
			ТекстСообщения = ТекстОшибки + " в строке:" + СтрокаТЧ["НомерСтроки"];
			СообщитьПользователю(ТекстСообщения);
			флЕстьОшибкиЗаполнения = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеПередЗаписьюТЧТоварыВКоробах()
	Для Каждого СтрокаТЧ Из Объект.ТоварыВКоробах Цикл
		ТекстОшибки = "";
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ["ВариантКомплектации"]) Тогда
			ТекстОшибки = ТекстОшибки + "Не указан ВариантКомплектации. ";
		КонецЕсли;
		Если	ЗначениеЗаполнено(СтрокаТЧ["Количество"])
			И	НЕ ЗначениеЗаполнено(СтрокаТЧ["ЦенаКороба"]) Тогда
			ТекстОшибки = ТекстОшибки + "Не указана Цена короба. ";
		КонецЕсли;
		Если	ЗначениеЗаполнено(СтрокаТЧ["Добавить"])
			И	ЗначениеЗаполнено(СтрокаТЧ["Удалить"]) Тогда
			ТекстОшибки = ТекстОшибки + "В строка указаны Добавить и Удалить одновременно. ";
		КонецЕсли;
		Если ТекстОшибки <> "" Тогда
			ТекстСообщения = ТекстОшибки + " в строке:" + СтрокаТЧ["НомерСтроки"];
			СообщитьПользователю(ТекстСообщения);
			флЕстьОшибкиЗаполнения = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеПередЗаписьюТЧТовары()
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		ТекстОшибки = "";
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ["Номенклатура"]) Тогда
			ТекстОшибки = ТекстОшибки + "Не указана Номенклатура. ";
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТЧ["Номенклатура"]) Тогда
			ПроверитьЗаполнениеХарактеристики(СтрокаТЧ["Номенклатура"], СтрокаТЧ["Характеристика"], ТекстОшибки);
		КонецЕсли;
		Если	ЗначениеЗаполнено(СтрокаТЧ["Количество"])
			И	НЕ ЗначениеЗаполнено(СтрокаТЧ["Цена"]) Тогда
			ТекстОшибки = ТекстОшибки + "Не указана Цена. ";
		КонецЕсли;
		Если	ЗначениеЗаполнено(СтрокаТЧ["Добавить"])
			И	ЗначениеЗаполнено(СтрокаТЧ["Удалить"]) Тогда
			ТекстОшибки = ТекстОшибки + "В строке указаны Добавить и Удалить одновременно. ";
		КонецЕсли;
		Если СтрокаТЧ["Количество"] < 0 Тогда
			ТекстОшибки = ТекстОшибки + "Отрицательный предварительный итог. ";
		КонецЕсли;
		Если ТекстОшибки <> "" Тогда
			ТекстСообщения = ТекстОшибки + " в строке:" + СтрокаТЧ["НомерСтроки"];
			СообщитьПользователю(ТекстСообщения);
			флЕстьОшибкиЗаполнения = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеПередЗаписью()
	флЕстьОшибкиЗаполнения = Ложь;
	Если РежимРаботы = 1 Тогда
		//===================
		// Резервы по заказам
		//===================
		Если флТоварыВКоробах Тогда
			ПроверитьЗаполнениеПередЗаписьюТЧРезервыВКоробах();
		Иначе
			ПроверитьЗаполнениеПередЗаписьюРезервы();
			ПроверитьЗаполнениеПередЗаписьюТЧРезервы();
		КонецЕсли;
	Иначе
		//=======================
		// Заказы на согласовании
		//=======================
		Если флТоварыВКоробах Тогда
			ПроверитьЗаполнениеПередЗаписьюТЧТоварыВКоробах();
		Иначе
			ПроверитьЗаполнениеПередЗаписьюТЧТовары();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьЗаказ(Ответ, ДопПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыполнитьСохранениеЗаказа();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	ПроверитьЗаполнениеПередЗаписью();
	Если флЕстьОшибкиЗаполнения Тогда
		Возврат;
	Иначе
		ВыполнитьСохранениеЗаказа();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТЧТоварыПоРезервам()
	МаксимальныйКодСтроки = МаксимальныйКодСтрокиРезервы();
	Для Каждого СтрокаТЧ Из Объект.Резервы Цикл
		флПродолжить = ПроверитьКоличествоНаличиеВЗаказе(СтрокаТЧ);
		Если флПродолжить Тогда
			// здесь строки нет в текущей версии заказа (была в первой версии) и количество не указано - пропускаем эту строку
			Продолжить;
		КонецЕсли;
		
		нс = тчТовары.Добавить();
		ЗаполнитьЗначенияСвойств(нс, СтрокаТЧ);
		флПродолжить = ПроверитьЗарезервироватьСнятьРезервПеренестиВДругойЗаказ(СтрокаТЧ);
		Если флПродолжить Тогда
			нс.Количество = СтрокаТЧ["КоличествоСИзменениями"];
			нс.КоличествоУпаковок = нс.Количество;
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТЧ["Зарезервировать"]) Тогда
			нс.Количество = СтрокаТЧ["КоличествоСИзменениями"];
			нс.КоличествоУпаковок = нс.Количество;
			нс = тчТовары.Добавить();
			ЗаполнитьЗначенияСвойств(нс, СтрокаТЧ);
			нс.ИдентификаторСтроки = Новый УникальныйИдентификатор;
			нс.Количество = СтрокаТЧ["Зарезервировать"];
			нс.КоличествоУпаковок = нс.Количество;
			нс.гф_ДобавленоПоПричине = Истина;
			нс.гф_ПричинаДобавления = мПричинаДобавления;
			нс.Отменено = Ложь;
			нс.ПричинаОтмены = Неопределено;
			МаксимальныйКодСтроки = МаксимальныйКодСтроки + 1;
			нс.КодСтроки = МаксимальныйКодСтроки;
			нс.флПересчитатьСтроку = Истина;
		КонецЕсли;
		УдалитьИзЗаказа = СтрокаТЧ["СнятьРезерв"] + СтрокаТЧ["ПеренестиВДругойЗаказ"];
		флУдалитьВсеКоличествоИзЗаказа = УдалитьВсеКоличествоИзЗаказа(СтрокаТЧ, УдалитьИзЗаказа);
		Если флУдалитьВсеКоличествоИзЗаказа Тогда
			// здесь из заказа удаляется ВСЕ количество - ставим галку Отменено и указываем причину
			нс.Количество = СтрокаТЧ["КоличествоСИзменениями"];
			нс.КоличествоУпаковок = нс.Количество;
			нс.Отменено = Истина;
			нс.ПричинаОтмены = мПричинаУдаления;
			нс.флПересчитатьСтроку = Истина;
		ИначеЕсли ЗначениеЗаполнено(УдалитьИзЗаказа) Тогда
			нс.флПересчитатьСтроку = Истина;
			нс = тчТовары.Добавить();
			ЗаполнитьЗначенияСвойств(нс, СтрокаТЧ);
			нс.ИдентификаторСтроки = Новый УникальныйИдентификатор;
			нс.Количество = УдалитьИзЗаказа;
			нс.КоличествоУпаковок = нс.Количество;
			нс.гф_ДобавленоПоПричине = Ложь;
			нс.гф_ПричинаДобавления = Неопределено;
			нс.Отменено = Истина;
			нс.ПричинаОтмены = мПричинаУдаления;
			МаксимальныйКодСтроки = МаксимальныйКодСтроки + 1;
			нс.КодСтроки = МаксимальныйКодСтроки;
			нс.флПересчитатьСтроку = Истина;
		Иначе
			Заглушка = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТЧ["ПеренестиВДругойЗаказ"]) Тогда
			// здесь готовим строки для переноса в другие заказы
			нс = тчТовары.Добавить();
			ЗаполнитьЗначенияСвойств(нс, СтрокаТЧ);
			нс.ИдентификаторСтроки = Новый УникальныйИдентификатор;
			нс.Количество = СтрокаТЧ["ПеренестиВДругойЗаказ"];
			нс.КоличествоУпаковок = нс.Количество;
			нс.гф_ДобавленоПоПричине = Истина;
			нс.гф_ПричинаДобавления = мПричинаДобавления;
			нс.Отменено = Ложь;
			нс.ПричинаОтмены = Неопределено;
			нс.флПересчитатьСтроку = Истина;
			нс.Назначение = СтрокаТЧ["ПеренестиНовоеНазначение"];
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПроверитьКоличествоНаличиеВЗаказе(СтрокаТЧ)
	Если Не ЗначениеЗаполнено(СтрокаТЧ["Количество"]) И СтрокаТЧ["флНаличиеВЗаказе"] = Ложь Тогда
		// здесь строки нет в текущей версии заказа (была в первой версии) и количество не указано - пропускаем эту строку
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ПроверитьДобавитьУдалить(СтрокаТЧ)
	Если	Не ЗначениеЗаполнено(СтрокаТЧ["Добавить"])
		И	Не ЗначениеЗаполнено(СтрокаТЧ["Удалить"]) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ПроверитьЗарезервироватьСнятьРезервПеренестиВДругойЗаказ(СтрокаТЧ)
	Если	Не ЗначениеЗаполнено(СтрокаТЧ["Зарезервировать"])
		И	Не ЗначениеЗаполнено(СтрокаТЧ["СнятьРезерв"])
		И	Не ЗначениеЗаполнено(СтрокаТЧ["ПеренестиВДругойЗаказ"]) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция УдалитьВсеКоличествоИзЗаказа(СтрокаТЧ, УдалитьИзЗаказа)
	Если	ЗначениеЗаполнено(УдалитьИзЗаказа)
		И	СтрокаТЧ["Количество"] = 0
		И	СтрокаТЧ["КоличествоСИзменениями"] = УдалитьИзЗаказа Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьТЧТоварыПоТоварам()
	МаксимальныйКодСтроки = МаксимальныйКодСтрокиТовары();
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		флПродолжить = ПроверитьКоличествоНаличиеВЗаказе(СтрокаТЧ);
		Если флПродолжить Тогда
			// здесь строки нет в текущей версии заказа (была в первой версии) и количество не указано - пропускаем эту строку
			Продолжить;
		КонецЕсли;
		
		нс = тчТовары.Добавить();
		ЗаполнитьЗначенияСвойств(нс, СтрокаТЧ);
		флПродолжить = ПроверитьДобавитьУдалить(СтрокаТЧ);
		Если флПродолжить Тогда
			нс.Количество = СтрокаТЧ["КоличествоСИзменениями"];
			нс.КоличествоУпаковок = нс.Количество;
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТЧ["Добавить"]) Тогда
			нс.Количество = СтрокаТЧ["КоличествоСИзменениями"];
			нс.КоличествоУпаковок = нс.Количество;
			нс = тчТовары.Добавить();
			ЗаполнитьЗначенияСвойств(нс, СтрокаТЧ);
			нс.ИдентификаторСтроки = Новый УникальныйИдентификатор;
			нс.Количество = СтрокаТЧ["Добавить"];
			нс.КоличествоУпаковок = нс.Количество;
			нс.гф_ДобавленоПоПричине = Истина;
			нс.гф_ПричинаДобавления = СтрокаТЧ["ПричинаДобавления"];
			нс.Отменено = Ложь;
			нс.ПричинаОтмены = Неопределено;
			МаксимальныйКодСтроки = МаксимальныйКодСтроки + 1;
			нс.КодСтроки = МаксимальныйКодСтроки;
			нс.флПересчитатьСтроку = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТЧ["Удалить"]) Тогда
			Если	СтрокаТЧ["Количество"] = 0
				И	СтрокаТЧ["КоличествоСИзменениями"] = СтрокаТЧ["Удалить"] Тогда
				// здесь из заказа удаляется ВСЕ количество - ставим галку Отменено и указываем причину
				нс.Количество = СтрокаТЧ["КоличествоСИзменениями"];
				нс.КоличествоУпаковок = нс.Количество;
				нс.Отменено = Истина;
				нс.ПричинаОтмены = СтрокаТЧ["ПричинаУдаления"];
				нс.флПересчитатьСтроку = Истина;
			Иначе
				нс.флПересчитатьСтроку = Истина;
				нс = тчТовары.Добавить();
				ЗаполнитьЗначенияСвойств(нс, СтрокаТЧ);
				нс.ИдентификаторСтроки = Новый УникальныйИдентификатор;
				нс.Количество = СтрокаТЧ["Удалить"];
				нс.КоличествоУпаковок = нс.Количество;
				нс.гф_ДобавленоПоПричине = Ложь;
				нс.гф_ПричинаДобавления = Неопределено;
				нс.Отменено = Истина;
				нс.ПричинаОтмены = СтрокаТЧ["ПричинаУдаления"];
				МаксимальныйКодСтроки = МаксимальныйКодСтроки + 1;
				нс.КодСтроки = МаксимальныйКодСтроки;
				нс.флПересчитатьСтроку = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьТЧТовары(флЗаписатьЗаказ)
	Для Каждого СтрокаТЧ Из тчТовары Цикл
		Если НЕ СтрокаТЧ.флПересчитатьСтроку Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ДокОбъект);
		СтруктураДействий.ЗаполнитьДубликатыЗависимыхРеквизитов = Неопределено;
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, Неопределено);
		флЗаписатьЗаказ = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьРезервы(флЗаписатьЗаказ)
	
	тчТовары.Очистить();
	ЗаполнитьТЧТоварыПоРезервам();
		
	ЗаполнитьДокОбъект();
	ПересчитатьТЧТовары(флЗаписатьЗаказ);
		
	Если Объект.Резервы.Итог("ПеренестиРезерв") > 0 Тогда
		// здесь надо создать столько документов - сколько различных новых назначений указано в таблице
		ПеренестиРезервНаСервере("ПеренестиРезерв", "НовоеНазначение");
	КонецЕсли;
	Если Объект.Резервы.Итог("ПеренестиВДругойЗаказ") > 0 Тогда
		// здесь надо создать столько документов - сколько различных новых назначений указано в таблице
		ПеренестиРезервНаСервере("ПеренестиВДругойЗаказ", "ПеренестиНовоеНазначение", Истина);
	КонецЕсли;
		
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьУпаковочныеЛисты()
	мУпаковочныеЛисты.Очистить();
	Если ЗначениеЗаполнено(мЗаказКлиента) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	УпаковочныйЛист.Ссылка КАК УпаковочныйЛист,
		               |	УпаковочныйЛист.гф_Комплектация КАК ВариантКомплектации
		               |ИЗ
		               |	Документ.УпаковочныйЛист КАК УпаковочныйЛист
		               |ГДЕ
		               |	УпаковочныйЛист.Проведен
		               |	И УпаковочныйЛист.гф_Заказ = &гф_Заказ";
		Запрос.УстановитьПараметр("гф_Заказ", мЗаказКлиента);
		Результат = Запрос.Выполнить();
		мУпаковочныеЛисты.Загрузить(Результат.Выгрузить());
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьРезервыВКоробах(флЗаписатьЗаказ)
	
	ЗаполнитьУпаковочныеЛисты();
	
	Если Объект.РезервыВКоробах.Итог("Зарезервировать") > 0 Тогда
		СоздатьКорректировкуРезервированиеНаСервере();
	КонецЕсли;
	Если Объект.РезервыВКоробах.Итог("СнятьРезерв") > 0 Тогда
		СоздатьКорректировкуСнятиеРезерваНаСервере();
	КонецЕсли;
	Если Не ЗначениеЗаполнено(мНазначение) Тогда
		// здесь не заполнено Назначение - документ НЕ сохраняем
		ТекстСообщения = "Не удалось получить Назначение для Заказа:" + мЗаказКлиента;
		СообщитьПользователю(ТекстСообщения);
	Иначе
		Если Объект.РезервыВКоробах.Итог("ПеренестиРезерв") > 0 Тогда
			// здесь надо создать столько документов - сколько различных новых назначений указано в таблице
			ПеренестиРезервВКоробахНаСервере("ПеренестиРезерв", "НовоеНазначение");
		КонецЕсли;
		Если Объект.РезервыВКоробах.Итог("ПеренестиВДругойЗаказ") > 0 Тогда
			// здесь надо создать столько документов - сколько различных новых назначений указано в таблице
			ПеренестиРезервВКоробахНаСервере("ПеренестиВДругойЗаказ", "ПеренестиНовоеНазначение", Истина);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура СоздатьКорректировкуСнятиеРезерваНаСервере()
	ДокСнятиеРезерва = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
	ДокСнятиеРезерва.Автор = ПараметрыСеанса.ТекущийПользователь;
	ДокСнятиеРезерва.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ДокСнятиеРезерва.Организация = отборОрганизация;
	ДокСнятиеРезерва.Дата = ТекущаяДатаСеанса();
	ДокСнятиеРезерва.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв;
	ДокСнятиеРезерва.Комментарий = "Создан автоматически обработкой Корректировка заказов и резервов "
	+ ТекущаяДатаСеанса();
	ДокСнятиеРезерва.Назначение = мНазначение;
	Если Не ЗначениеЗаполнено(ДокСнятиеРезерва.Назначение) Тогда
		// здесь не заполнено Назначение - документ НЕ сохраняем
		ДокСнятиеРезерва = Неопределено;
		ТекстСообщения = "Не удалось получить Назначение для Заказа:" + мЗаказКлиента;
		СообщитьПользователю(ТекстСообщения);
	Иначе
		// здесь заполняем тч документа
		Для Каждого СтрокаРезерва Из Объект.РезервыВКоробах Цикл
			Если ЗначениеЗаполнено(СтрокаРезерва["СнятьРезерв"]) Тогда
				// заполняем Номенклатуру из Упаковочных листов
				УпаковочныеЛисты = мУпаковочныеЛисты.НайтиСтроки(Новый Структура("ВариантКомплектации", СтрокаРезерва["ВариантКомплектации"]));
				СнятьРезерв = СтрокаРезерва["СнятьРезерв"];
				Индекс = 0;
				Пока СнятьРезерв > 0 Цикл
					УпаковочныйЛист = УпаковочныеЛисты[Индекс].УпаковочныйЛист;
					Для Каждого СтрокаТЧ Из УпаковочныйЛист.Товары Цикл
						нс = ДокСнятиеРезерва.Товары.Добавить();
						ЗаполнитьЗначенияСвойств(нс, СтрокаТЧ);
						нс.ИсходноеНазначение = ДокСнятиеРезерва.Назначение;
						нс.ИсходныйЗаказ = мЗаказКлиента;
						нс.ИсходноеНазначениеДвиженияПоСкладскимРегистрам = Истина;
						нс.Склад = мЗаказКлиента.Склад;
						нс.гф_IDкороба = УпаковочныйЛист;
						// Аналитика учета заполняется при проведении документа автоматически...
						СнятьРезерв = СнятьРезерв - 1;
						Индекс = Индекс + 1;
					КонецЦикла;
					// в Упаковочном листе надо очистить Заказ и Назначение (в тч Товары)
					ДокУпаковочныйЛист = УпаковочныйЛист.ПолучитьОбъект();
					ДокУпаковочныйЛист.гф_Заказ = Документы.ЗаказКлиента.ПустаяСсылка();
					Для Каждого СтрокаТЧ Из ДокУпаковочныйЛист.Товары Цикл
						СтрокаТЧ.Назначение = Справочники.Назначения.ПустаяСсылка();
					КонецЦикла;
					ЗаписатьДокументВПопытке(ДокУпаковочныйЛист, "Проведен:", ТЗПротокол, "Изменен и проведен");
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ЗаписатьДокументВПопытке(ДокСнятиеРезерва, "Проведен:", ТЗПротокол, "Создан и проведен");
КонецПроцедуры

&НаСервере
Процедура СоздатьКорректировкуРезервированиеНаСервере()
	ДокРезервирование = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
	ДокРезервирование.Автор = ПараметрыСеанса.ТекущийПользователь;
	ДокРезервирование.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ДокРезервирование.Организация = отборОрганизация;
	ДокРезервирование.Дата = ТекущаяДатаСеанса();
	ДокРезервирование.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.Резервировать;
	ДокРезервирование.Комментарий = "Создан автоматически обработкой Корректировка заказов и резервов "
	+ ТекущаяДатаСеанса();
	ДокРезервирование.Назначение = мНазначение;
	Если Не ЗначениеЗаполнено(ДокРезервирование.Назначение) Тогда
		// здесь не заполнено Назначение - документ НЕ сохраняем
		ДокРезервирование = Неопределено;
		ТекстСообщения = "Не удалось получить Назначение для Заказа:" + мЗаказКлиента;
		СообщитьПользователю(ТекстСообщения);
	Иначе
		// здесь заполняем тч документа
		Для Каждого СтрокаРезерва Из Объект.РезервыВКоробах Цикл
			Если ЗначениеЗаполнено(СтрокаРезерва["Зарезервировать"]) Тогда
				// заполняем Номенклатуру из "свободных" Упаковочных листов: мСвободныеУпаковочныеЛисты
				Зарезервировать = СтрокаРезерва["Зарезервировать"];
				СтрокиУпаковочныхЛистов = мСвободныеУпаковочныеЛисты.НайтиСтроки(Новый Структура("ВариантКомплектации", СтрокаРезерва["ВариантКомплектации"]));
				Сч = 0;
				Для Каждого СтрокаУпаковочногоЛиста Из СтрокиУпаковочныхЛистов Цикл
					УпаковочныйЛист = СтрокаУпаковочногоЛиста.УпаковочныйЛист;
					Для Каждого СтрокаТЧ Из УпаковочныйЛист.Товары Цикл
						нс = ДокРезервирование.Товары.Добавить();
						ЗаполнитьЗначенияСвойств(нс, СтрокаТЧ);
						нс.НовоеНазначение = ДокРезервирование.Назначение;
						нс.НовыйЗаказ = мЗаказКлиента;
						нс.ИсходноеНазначениеДвиженияПоСкладскимРегистрам = Истина;
						нс.Склад = мЗаказКлиента.Склад;
						нс.гф_IDкороба = УпаковочныйЛист;
						// Аналитика учета заполняется при проведении документа автоматически...
					КонецЦикла;
					// в Упаковочном листе надо записать Заказ и Назначение (в тч Товары)
					ДокУпаковочныйЛист = УпаковочныйЛист.ПолучитьОбъект();
					ДокУпаковочныйЛист.гф_Заказ = мЗаказКлиента;
					Для Каждого СтрокаТЧ Из ДокУпаковочныйЛист.Товары Цикл
						СтрокаТЧ.Назначение = мНазначение;
					КонецЦикла;
					ЗаписатьДокументВПопытке(ДокУпаковочныйЛист, "Проведен:", ТЗПротокол, "Изменен и проведен");
					Сч = Сч + 1;
					Если Сч >= Зарезервировать Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ЗаписатьДокументВПопытке(ДокРезервирование, "Проведен:", ТЗПротокол, "Создан и проведен");
КонецПроцедуры

&НаКлиенте
Функция НадоЗаписатьЗаказВКоробах(ТоварыВКоробах)
			
	флЗаписатьЗаказ = Ложь;
	Для Каждого СтрокаТЧ Из ТоварыВКоробах Цикл
		Если	Не ЗначениеЗаполнено(СтрокаТЧ["Добавить"])
			И	Не ЗначениеЗаполнено(СтрокаТЧ["Удалить"]) Тогда
			Продолжить;
		КонецЕсли;
		флЗаписатьЗаказ = Истина;
		Прервать;
	КонецЦикла;
	Возврат флЗаписатьЗаказ;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьСохранениеЗаказа()
	ТЗПротокол.Очистить();
	ОчиститьСообщения();
	флЗаписатьЗаказ = Ложь;
	Если РежимРаботы = 1 Тогда
		//===================
		// Резервы по заказам
		//===================
		Если флТоварыВКоробах Тогда
			СохранитьРезервыВКоробах(флЗаписатьЗаказ);
		Иначе
			СохранитьРезервы(флЗаписатьЗаказ);
		КонецЕсли;

	Иначе
		//=======================
		// Заказы на согласовании
		//=======================
		Если флТоварыВКоробах Тогда
			флЗаписатьЗаказ = НадоЗаписатьЗаказВКоробах(Объект.ТоварыВКоробах);
			
		Иначе
			тчТовары.Очистить();
			ЗаполнитьТЧТоварыПоТоварам();
		
			ЗаполнитьДокОбъект();
			ПересчитатьТЧТовары(флЗаписатьЗаказ);
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если флЗаписатьЗаказ = Истина Тогда
		ЗаписатьЗаказНаСервере();
	КонецЕсли;
	Если ТЗПротокол.Количество() > 0 Тогда
		ТабДок = ПодготовитьТабДокНаСервере();
		ТабДок.Показать("Протокол выполнения Корректировка заказов и резервов");
	КонецЕсли;
	
	ЗаполнитьДанныеЗаказаНаСервере();
	флЗаказИзменен = Ложь;
	УправлениеДоступностью();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗависимыеРеквизиты()
	
	Возврат Новый Структура(
		"БезВозвратнойТары,ОтмененоБезВозвратнойТары,Отменено",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаРучнойСкидки,СуммаАвтоматическойСкидки",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаРучнойСкидки,СуммаАвтоматическойСкидки",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаРучнойСкидки,СуммаАвтоматическойСкидки");
	
КонецФункции

&НаКлиенте
Процедура СкрытьОтборы(Команда)
	Если Элементы.Отборы.Видимость = Истина Тогда
		Элементы.Отборы.Видимость = Ложь;
		Элементы.ФормаСкрытьОтборы.Заголовок = "Показать отборы";
	Иначе
		Элементы.Отборы.Видимость = Истина;
		Элементы.ФормаСкрытьОтборы.Заголовок = "Скрыть отборы";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаказОбъектТовары(ЗаказОбъект)
	Если	Объект.Резервы.Итог("Зарезервировать") = 0
		И	Объект.Резервы.Итог("СнятьРезерв") = 0
		И	Объект.Резервы.Итог("ПеренестиВДругойЗаказ") = 0 Тогда
		// условие для изменения "исходного" Заказа
		Возврат;
	КонецЕсли;
	Для Каждого СтрокаТЧ Из тчТовары Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.Назначение) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ СтрокаТЧ.флПересчитатьСтроку Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("ИдентификаторСтроки", СтрокаТЧ.ИдентификаторСтроки);
		СтрокиЗаказа = ЗаказОбъект.Товары.НайтиСтроки(СтруктураПоиска);
		Если СтрокиЗаказа.Количество() > 0 Тогда
			СтрокаЗаказа = СтрокиЗаказа[0];
			
			ЗаполнитьЗначенияСвойств(СтрокаЗаказа, СтрокаТЧ, "
			|Отменено,
			|ПричинаОтмены,
			|КоличествоУпаковок,
			|Количество,
			|Сумма,
			|СтавкаНДС,
			|СуммаНДС,
			|СуммаСНДС");
		Иначе
			// здесь строка с идентификатором НЕ найдена
			СтрокаЗаказа = ЗаказОбъект.Товары.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаЗаказа, СтрокаТЧ);
		КонецЕсли;
		
	КонецЦикла;
	СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(ЗаказОбъект, "Товары");
КонецПроцедуры

&НаСервере
Процедура СоздатьДокЗарезервировать()
	Если Объект.Резервы.Итог("Зарезервировать") = 0 Тогда
		Возврат;
	КонецЕсли;
	ДокРезервирование = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
	ДокРезервирование.Автор = ПараметрыСеанса.ТекущийПользователь;
	ДокРезервирование.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ДокРезервирование.Организация = отборОрганизация;
	ДокРезервирование.Дата = ТекущаяДатаСеанса();
	ДокРезервирование.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать;
	ДокРезервирование.Комментарий = "Создан автоматически обработкой Корректировка заказов и резервов "
	+ ТекущаяДатаСеанса();
	ДокРезервирование.Назначение = мНазначение;
	Если Не ЗначениеЗаполнено(ДокРезервирование.Назначение) Тогда
		// здесь не заполнено Назначение - документ НЕ сохраняем
		ДокРезервирование = Неопределено;
		ТекстСообщения = "Не удалось получить Назначение для Заказа:" + мЗаказКлиента;
		СообщитьПользователю(ТекстСообщения);
	Иначе
		// здесь заполняем тч документа
		Для Каждого СтрокаТЧ Из Объект.Резервы Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ["Зарезервировать"]) Тогда
				нс = ДокРезервирование.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(нс, СтрокаТЧ);
				нс.Количество = СтрокаТЧ["Зарезервировать"];
				нс.КоличествоУпаковок = СтрокаТЧ["Зарезервировать"];
				нс.НовоеНазначение = ДокРезервирование.Назначение;
				нс.НовыйЗаказ = мЗаказКлиента;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ЗаписатьДокументВПопытке(ДокРезервирование, "Проведен:", ТЗПротокол, "Создан и проведен");
КонецПроцедуры

&НаСервере
Процедура СоздатьДокСнятьРезерв()
	Если Объект.Резервы.Итог("СнятьРезерв") = 0 Тогда
		Возврат;
	КонецЕсли;
	ДокСнятиеРезерва = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
	ДокСнятиеРезерва.Автор = ПараметрыСеанса.ТекущийПользователь;
	ДокСнятиеРезерва.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ДокСнятиеРезерва.Организация = отборОрганизация;
	ДокСнятиеРезерва.Дата = ТекущаяДатаСеанса();
	ДокСнятиеРезерва.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв;
	ДокСнятиеРезерва.Комментарий = "Создан автоматически обработкой Корректировка заказов и резервов "
	+ ТекущаяДатаСеанса();
	ДокСнятиеРезерва.Назначение = мНазначение;
	Если Не ЗначениеЗаполнено(ДокСнятиеРезерва.Назначение) Тогда
		// здесь не заполнено Назначение - документ НЕ сохраняем
		ДокСнятиеРезерва = Неопределено;
		ТекстСообщения = "Не удалось получить Назначение для Заказа:" + мЗаказКлиента;
		СообщитьПользователю(ТекстСообщения);
	Иначе
		// здесь заполняем тч документа
		Для Каждого СтрокаТЧ Из Объект.Резервы Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ["СнятьРезерв"]) Тогда
				нс = ДокСнятиеРезерва.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(нс, СтрокаТЧ);
				нс.Количество = СтрокаТЧ["СнятьРезерв"];
				нс.КоличествоУпаковок = СтрокаТЧ["СнятьРезерв"];
				нс.ИсходноеНазначение = ДокСнятиеРезерва.Назначение;
				нс.ИсходныйЗаказ = мЗаказКлиента;
				нс.ИсходноеНазначениеДвиженияПоСкладскимРегистрам = Истина;
				// Аналитика учета заполняется при проведении документа автоматически...
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ЗаписатьДокументВПопытке(ДокСнятиеРезерва, "Проведен:", ТЗПротокол, "Создан и проведен");
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьЗаказОбъектТоварыНаСогласовании(ЗаказОбъект, тчТовары)
	Для Каждого СтрокаТЧ Из тчТовары Цикл
		Если НЕ СтрокаТЧ.флПересчитатьСтроку Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьСтрокуЗаказа(ЗаказОбъект, СтрокаТЧ);
	КонецЦикла;
	СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(ЗаказОбъект, "Товары");
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСтрокуЗаказа(ЗаказОбъект, СтрокаТЧ)
	СтруктураПоиска = Новый Структура("ИдентификаторСтроки", СтрокаТЧ.ИдентификаторСтроки);
	СтрокиЗаказа = ЗаказОбъект.Товары.НайтиСтроки(СтруктураПоиска);
	Если СтрокиЗаказа.Количество() > 0 Тогда
		СтрокаЗаказа = СтрокиЗаказа[0];
				
		ЗаполнитьЗначенияСвойств(СтрокаЗаказа, СтрокаТЧ, "
				|Отменено,
				|ПричинаОтмены,
				|КоличествоУпаковок,
				|Количество,
				|Сумма,
				|СтавкаНДС,
				|СуммаНДС,
				|СуммаСНДС");
	Иначе
		// здесь строка с идентификатором НЕ найдена
		СтрокаЗаказа = ЗаказОбъект.Товары.Добавить();
				
		ЗаполнитьЗначенияСвойств(СтрокаЗаказа, СтрокаТЧ);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧТоварыВКоробах(ЗаказОбъект, ТоварыВКоробах)
	Для Каждого СтрокаТЧ Из ТоварыВКоробах Цикл
		СтрокаЗаказа = ЗаказОбъект.гф_ТоварыВКоробах.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗаказа, СтрокаТЧ);
		СтрокаЗаказа["Добавлено"] = СтрокаТЧ["флДобавлено"];
		СтрокаЗаказа["Отменено"] = СтрокаТЧ["флОтменено"];
	КонецЦикла;
	ЗаполнитьТоварыНаСервере(ЗаказОбъект);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьДокументВПопытке(ЗаказОбъект, ТекстСообщения, ТЗПротокол, Комментарий)
	Попытка
		ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ТекстСообщения = ТекстСообщения + ЗаказОбъект.Ссылка;
		СообщитьПользователю(ТекстСообщения);
		СтрокаПротокола = ТЗПротокол.Добавить();
		СтрокаПротокола.Документ = ЗаказОбъект.Ссылка;
		СтрокаПротокола.Комментарий = Комментарий;
	Исключение
		ТекстСообщения = "Ошибка при записи:" + ОписаниеОшибки();
		СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЗаказНаСервере()
	
	ЗаказОбъект = мЗаказКлиента.ПолучитьОбъект();
	Если ЗначениеЗаполнено(мКомментарий) Тогда
		ЗаказОбъект.Комментарий = мКомментарий;
	КонецЕсли;
	
	Если РежимРаботы = 1 Тогда
		//===================
		// Резервы по заказам
		//===================
		Если флТоварыВКоробах Тогда
		Иначе
			ЗаполнитьЗаказОбъектТовары(ЗаказОбъект);
		
			// здесь создаем документы Корректировка назначения товаров
			СоздатьДокЗарезервировать();
			СоздатьДокСнятьРезерв();
		КонецЕсли;
		
	Иначе
		//=======================
		// Заказы на согласовании
		//=======================
		Если флТоварыВКоробах Тогда
			ЗаказОбъект.гф_ТоварыВКоробах.Очистить();
			ЗаполнитьТЧТоварыВКоробах(ЗаказОбъект, Объект.ТоварыВКоробах);
		
		Иначе
			ЗаполнитьЗаказОбъектТоварыНаСогласовании(ЗаказОбъект, тчТовары);
			
		КонецЕсли;
	КонецЕсли;

	ЗаписатьДокументВПопытке(ЗаказОбъект, "Проведен:", ТЗПротокол, "Изменен и проведен");
	
КонецПроцедуры

// Копия процедуры из модуля формы документа Заказ клиента (расширение гф_ОсновныеДоработки)
//Изменения:
// - добавил параметр ЗаказОбъект
// - заремерил строки кода в конце процедуры
&НаСервере
Процедура ЗаполнитьТоварыНаСервере(ЗаказОбъект)
	
	ТипЦеныЗакупочная = ПланыВидовХарактеристик.гф_ГлобальныеЗначения.НайтиПоРеквизиту("Ключ",
														"гф_ГлобальныеЗначенияОптоваяЗакупочнаяЦена").Значение;

	//..МассивВариантов = Объект.гф_ТоварыВКоробах.Выгрузить(, "ВариантКомплектации"); 
	
	//..Объект.Товары.Очистить();
	ЗаказОбъект.Товары.Очистить();
		
	ВременнаяТаблицаТЧТовары = Новый ТаблицаЗначений;
	ВременнаяТаблицаТЧТовары.Колонки.Добавить("Номенклатура");
	ВременнаяТаблицаТЧТовары.Колонки.Добавить("Характеристика");
	ВременнаяТаблицаТЧТовары.Колонки.Добавить("КоличествоУпаковок"); 
	ВременнаяТаблицаТЧТовары.Колонки.Добавить("гф_ДобавленоПоПричине");
	ВременнаяТаблицаТЧТовары.Колонки.Добавить("гф_ПричинаДобавления");
	ВременнаяТаблицаТЧТовары.Колонки.Добавить("Отменено");
	ВременнаяТаблицаТЧТовары.Колонки.Добавить("ПричинаОтмены");
	//..Для каждого СтрокаТоварыВКоробах Из Объект.гф_ТоварыВКоробах Цикл
	Для каждого СтрокаТоварыВКоробах Из ЗаказОбъект.гф_ТоварыВКоробах Цикл
		
		Для каждого СтрокаСостава Из СтрокаТоварыВКоробах.ВариантКомплектации.Товары Цикл
			
			НоваяСтрока = ВременнаяТаблицаТЧТовары.Добавить();
			НоваяСтрока.Номенклатура = СтрокаСостава.Номенклатура;
			НоваяСтрока.Характеристика = СтрокаСостава.Характеристика;
			НоваяСтрока.КоличествоУпаковок = СтрокаТоварыВКоробах.Количество * СтрокаСостава.КоличествоУпаковок;			
			НоваяСтрока.гф_ДобавленоПоПричине = СтрокаТоварыВКоробах.Добавлено;
			НоваяСтрока.гф_ПричинаДобавления = СтрокаТоварыВКоробах.ПричинаДобавления;
			НоваяСтрока.Отменено = СтрокаТоварыВКоробах.Отменено;
			НоваяСтрока.ПричинаОтмены = СтрокаТоварыВКоробах.ПричинаОтмены;
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	ВременнаяТаблицаТЧТовары.Свернуть("Номенклатура,Характеристика,гф_ДобавленоПоПричине,гф_ПричинаДобавления,Отменено,ПричинаОтмены",
																								"КоличествоУпаковок");
	тчТовары.Очистить();//++
	НомерСтроки = 0; //++
	
	Для каждого Строка из ВременнаяТаблицаТЧТовары Цикл
		//..НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока = тчТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", Строка.Номенклатура);			
		Отбор.Вставить("ВидЦены", ТипЦеныЗакупочная);
		НоваяСтрока.Количество = Строка.КоличествоУпаковок;
		НоваяСтрока.Цена = РегистрыСведений.ЦеныНоменклатуры25.ПолучитьПоследнее(ТекущаяДатаСеанса(), Отбор).Цена;
		НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению;
		НоваяСтрока.Обособленно = Истина;		
		НомерСтроки = НомерСтроки + 1; //++
		НоваяСтрока.НомерСтроки = НомерСтроки; //++
		
	КонецЦикла;	  
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;	
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
												Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	//..НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, ПараметрыЗаполненияРеквизитов);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(тчТовары, ПараметрыЗаполненияРеквизитов);
	
	//..СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЗаказОбъект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(
																											//..Объект,
																											ЗаказОбъект,
																											Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСумму"); 
		
	//..ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(тчТовары, СтруктураДействий, Неопределено);
		
	//..СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(Объект.Склад);
	//..СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(Объект.Склад, СкладГруппа, Объект.Товары, Ложь);
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(ЗаказОбъект.Склад);
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(ЗаказОбъект.Склад, СкладГруппа, тчТовары, Ложь);
	
	// заремерил строки кода в конце процедуры
	//ПриИзмененииСкладаВТабличнойЧастиСервер();
	//	
	//ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
	//
	//ОбновитьДубликатыЗависимыхРеквизитов();
	//	
	//РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	//	
	//ЭтотОбъект.Модифицированность = Истина;	
	
	//++
	Для каждого Строка из тчТовары Цикл
		НоваяСтрока = ЗаказОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	//--
	
КонецПроцедуры	

&НаСервере
Процедура ДобавитьСтрокуЗаказаНаСервере()
	СтрокаТаблицы = Объект.Товары.Добавить();
	СтрокаТаблицы.флДобавленаВручную	= Истина;
	// здесь заполняем поля значениями из первой строки тч
	СтрокаТаблицы.ИдентификаторСтроки	= Новый УникальныйИдентификатор();
	СтрокаТаблицы.СтавкаНДС				= Объект.Товары[0].СтавкаНДС;
	СтрокаТаблицы.Склад					= Объект.Товары[0].Склад;
	СтрокаТаблицы.ДатаОтгрузки			= Объект.Товары[0].ДатаОтгрузки;
	СтрокаТаблицы.ВариантОбеспечения	= Объект.Товары[0].ВариантОбеспечения;
	СтрокаТаблицы.Упаковка				= Объект.Товары[0].Упаковка;
	
	Идентификатор = СтрокаТаблицы.ПолучитьИдентификатор();
	
	ТекущийЭлемент = Элементы.Товары;
	Элементы.Товары.ТекущаяСтрока = Идентификатор;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуЗаказа(Команда)
	ДобавитьСтрокуЗаказаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДоступностью()
	Элементы.ТоварыДобавитьСтрокуЗаказа.Доступность = Объект.Товары.Количество() > 0;
	ТД = Элементы.Товары.ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		Элементы.ТоварыУдалитьСтрокуЗаказа.Доступность = ТД.флДобавленаВручную;
	КонецЕсли;
	Если РежимРаботы = 1 Тогда
		Элементы.ВыборСтатуса.Доступность = Истина;
	Иначе
		Элементы.ВыборСтатуса.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(Команда)
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		СтрокаТЧ["Пометка"] = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		СтрокаТЧ["Пометка"] = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПричинуДобавления(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	ДополнительныеПараметры = Новый Структура("ИмяТЧ", "Товары");
	Оповещение = Новый ОписаниеОповещения("ВыборПричиныДобавленияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Справочник.ПричиныОтменыЗаказовКлиентов.Форма.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, , , ,
		Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПричинуДобавленияКороба(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	ДополнительныеПараметры = Новый Структура("ИмяТЧ", "ТоварыВКоробах");
	Оповещение = Новый ОписаниеОповещения("ВыборПричиныДобавленияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Справочник.ПричиныОтменыЗаказовКлиентов.Форма.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, , , ,
		Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ВыборПричиныДобавленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИмяТЧ = ДополнительныеПараметры["ИмяТЧ"];
	Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
		Если СтрокаТЧ["Пометка"] = Ложь Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ["Добавить"]) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТЧ["ПричинаДобавления"] = Результат;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПричинуУдаления(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	ДополнительныеПараметры = Новый Структура("ИмяТЧ, ИмяРеквизита", "Товары", "ПричинаУдаления");
	Оповещение = Новый ОписаниеОповещения("ВыборПричиныУдаленияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Справочник.ПричиныОтменыЗаказовКлиентов.Форма.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, , , ,
		Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПричинуУдаленияКороба(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	ДополнительныеПараметры = Новый Структура("ИмяТЧ, ИмяРеквизита", "ТоварыВКоробах", "ПричинаОтмены");
	Оповещение = Новый ОписаниеОповещения("ВыборПричиныУдаленияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Справочник.ПричиныОтменыЗаказовКлиентов.Форма.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, , , ,
		Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ВыборПричиныУдаленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИмяТЧ = ДополнительныеПараметры["ИмяТЧ"];
	ИмяРеквизита = ДополнительныеПараметры["ИмяРеквизита"];
	Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
		Если СтрокаТЧ["Пометка"] = Ложь Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ["Удалить"]) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТЧ[ИмяРеквизита] = Результат;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗаказа(Команда)
	ТД = Элементы.Товары.ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		ИдентификаторСтроки = ТД.ПолучитьИдентификатор();
		СтрокаЗаказа = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если СтрокаЗаказа <> Неопределено Тогда
			Индекс = Объект.Товары.Индекс(СтрокаЗаказа);
			Объект.Товары.Удалить(Индекс);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьТоварыВКоробах(ЗаказКлиента)
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",
		"гф_СкладыТоварыВКоробах");
	Если ЗначениеЗаполнено(Свойство) Тогда
		Если ЗначениеЗаполнено(ЗаказКлиента.Склад) Тогда
			Возврат ПолучитьЗначениеДопРеквизита(ЗаказКлиента.Склад, Свойство);
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеДопРеквизита(Ссылка, Свойство) Экспорт
    ПараметрыОтбора = Новый Структура;
    ПараметрыОтбора.Вставить("Свойство", Свойство);
    Массив = Ссылка.ДополнительныеРеквизиты.НайтиСтроки(ПараметрыОтбора);
    Если Массив.Количество() = 0 Тогда
        Возврат Ложь;
    Иначе
        Возврат Массив[0].Значение;
    КонецЕсли;
КонецФункции

&НаКлиенте
Процедура УправлениеДоступностьюРезервы()
	Элементы.РезервыЗарезервировать.Доступность = Истина;
	Элементы.РезервыСнятьРезерв.Доступность = Истина;
	Если ЗначениеЗаполнено(мЗаказКлиента) Тогда
		Если ЗначениеЗаполнено(мДатаОбновленияИзИ5) Тогда
			Элементы.РезервыЗарезервировать.Доступность = Ложь;
			Элементы.РезервыСнятьРезерв.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДоступностьюЗаказыВКоробах()
	Если ЗначениеЗаполнено(мЗаказКлиента) Тогда
		ТоварыВКоробах = ВернутьТоварыВКоробах(мЗаказКлиента);
		флТоварыВКоробах = ТоварыВКоробах;
	КонецЕсли;
	УправлениеДоступностьюТаблиц();
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДоступностьюТаблиц()
	Элементы.Товары.Видимость = Ложь;
	Элементы.ТоварыВКоробах.Видимость = Ложь;
	Элементы.Резервы.Видимость = Ложь;
	Элементы.РезервыВКоробах.Видимость = Ложь;
	Элементы.ГруппаПричины.Видимость = Ложь;
	Если РежимРаботы = 1 Тогда
		Элементы.Резервы.Видимость = НЕ флТоварыВКоробах;
		Элементы.РезервыВКоробах.Видимость = флТоварыВКоробах;
		Элементы.ГруппаПричины.Видимость = Истина;
	Иначе
		Элементы.Товары.Видимость = НЕ флТоварыВКоробах;
		Элементы.ТоварыВКоробах.Видимость = флТоварыВКоробах;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзЭксель(Команда)
	Оповещение = Новый ОписаниеОповещения("ЗагрузкаИзЭксельЗавершение", ЭтотОбъект);
	ПараметрыФормы = Новый Структура("флТоварыВКоробах", флТоварыВКоробах);
	Если ИмяФормы = "ВнешняяОбработка.гф_КорректировкаЗаказовРезервов.Форма.Форма" Тогда
		ОткрытьФорму("ВнешняяОбработка.гф_КорректировкаЗаказовРезервов.Форма.ФормаЗагрузкиИзЭксель", ПараметрыФормы,
			ЭтотОбъект, , , , Оповещение);
	Иначе
		ОткрытьФорму("Обработка.гф_КорректировкаЗаказовРезервов.Форма.ФормаЗагрузкиИзЭксель", ПараметрыФормы,
			ЭтотОбъект, , , , Оповещение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьКоличествоТоварыВКоробах(Элемент, СтрокиЗаказа, ОсталосьДобавить, ОсталосьУдалить)
		ОсталосьДобавить = Элемент["Добавить"];
		ОсталосьУдалить = Элемент["Удалить"];
		Для Каждого ТД Из СтрокиЗаказа Цикл
			Если ОсталосьДобавить > 0 Тогда
				ТД["Добавить"] = Элемент["Добавить"];
				ОсталосьДобавить = ОсталосьДобавить - ТД["Добавить"];
			КонецЕсли;
			Если ОсталосьУдалить > 0 И ТД["Количество"] > 0 Тогда
				Удалить = Мин(ОсталосьУдалить, ТД["Количество"]);
				ТД["Удалить"] = Удалить;
				ОсталосьУдалить = ОсталосьУдалить - Удалить;
			КонецЕсли;
			// пересчитываем количество по строке заказа
			ТД.Количество = ТД.КоличествоСИзменениями + ТД.Добавить - ТД.Удалить;
			ТД.Сумма = ТД.Количество * ТД.ЦенаКороба;
			Если ОсталосьДобавить = 0 И ОсталосьУдалить = 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзЭксельСтрокуТоварыВКоробах(Элемент, ОсталосьДобавить, ОсталосьУдалить)
	СтруктураПоиска = Новый Структура("ВариантКомплектации, флНаличиеВЗаказе", Элемент["ВариантКомплектации"], Истина);
	СтрокиЗаказа = Объект.ТоварыВКоробах.НайтиСтроки(СтруктураПоиска);
	Если СтрокиЗаказа.Количество() > 0 Тогда
		// здесь надо "распределить" количество Добавить/Удалить по строкам
		РаспределитьКоличествоТоварыВКоробах(Элемент, СтрокиЗаказа, ОсталосьДобавить, ОсталосьУдалить);
		
	Иначе
		// здесь не найдены строки для "ВариантКомплектации"
		ТД = Объект.ТоварыВКоробах.Добавить();
		ЗаполнитьЗначенияСвойств(ТД, Элемент);
		
		ТД.Количество = ТД.КоличествоСИзменениями + ТД.Добавить - ТД.Удалить;
		ТД.Сумма = ТД.Количество * ТД.ЦенаКороба;
		
	КонецЕсли;
КонецПроцедуры					

&НаКлиенте
Процедура РаспределитьКоличествоТовары(Элемент, СтрокиЗаказа, ОсталосьДобавить, ОсталосьУдалить)
	ОсталосьДобавить = Элемент["Добавить"];
	ОсталосьУдалить = Элемент["Удалить"];
	Для Каждого ТД Из СтрокиЗаказа Цикл
		Если ОсталосьДобавить > 0 Тогда
			ТД["Добавить"] = Элемент["Добавить"];
			ОсталосьДобавить = ОсталосьДобавить - ТД["Добавить"];
		КонецЕсли;
		Если ОсталосьУдалить > 0 И ТД["Количество"] > 0 Тогда
			Удалить = Мин(ОсталосьУдалить, ТД["Количество"]);
			ТД["Удалить"] = Удалить;
			ОсталосьУдалить = ОсталосьУдалить - Удалить;
		КонецЕсли;
		// пересчитываем количество по строке заказа
		ТД.Количество = ТД.КоличествоСИзменениями + ТД.Добавить - ТД.Удалить;
		ТД.КоличествоУпаковок = ТД.Количество;
		Если ОсталосьДобавить = 0 И ОсталосьУдалить = 0 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры					

&НаКлиенте
Процедура ЗагрузитьИзЭксельСтрокуТовары(Элемент, ОсталосьДобавить, ОсталосьУдалить)
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, флНаличиеВЗаказе", Элемент["Номенклатура"],
		Элемент["Характеристика"], Истина);
	СтрокиЗаказа = Объект.Товары.НайтиСтроки(СтруктураПоиска);
	Если СтрокиЗаказа.Количество() > 0 Тогда
		// здесь надо "распределить" количество Добавить/Удалить по строкам
		РаспределитьКоличествоТовары(Элемент, СтрокиЗаказа, ОсталосьДобавить, ОсталосьУдалить);
		
	Иначе
		// здесь не найдены строки для "Номенклатуры - Характеристики"
		ТД = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТД, Элемент);
		
		ТД.Количество = ТД.КоличествоСИзменениями + ТД.Добавить - ТД.Удалить;
		ТД.КоличествоУпаковок = ТД.Количество;
		
		ТД.ИдентификаторСтроки	= Новый УникальныйИдентификатор();
		Если Объект.Товары.Количество() > 0 Тогда
			ТД.СтавкаНДС			= Объект.Товары[0].СтавкаНДС;
			ТД.Склад				= Объект.Товары[0].Склад;
			ТД.ДатаОтгрузки			= Объект.Товары[0].ДатаОтгрузки;
			ТД.ВариантОбеспечения	= Объект.Товары[0].ВариантОбеспечения;
			ТД.Упаковка				= Объект.Товары[0].Упаковка;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
		
&НаКлиенте
Процедура ЗагрузкаИзЭксельЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДанныеФайла.Очистить();
	ОчиститьСообщения();
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		Для Каждого Элемент Из Результат Цикл
			ОсталосьДобавить = 0;
			ОсталосьУдалить = 0;
			Если флТоварыВКоробах Тогда
				// Товары в коробах
				ЗагрузитьИзЭксельСтрокуТоварыВКоробах(Элемент, ОсталосьДобавить, ОсталосьУдалить);
				ПоказатьНеРаспределеноТоварыВКоробах(Элемент, ОсталосьДобавить, ОсталосьУдалить);
				
			Иначе
				// Товары в парах
				ЗагрузитьИзЭксельСтрокуТовары(Элемент, ОсталосьДобавить, ОсталосьУдалить);
				ПоказатьНеРаспределеноТовары(Элемент, ОсталосьДобавить, ОсталосьУдалить);
				
			КонецЕсли;
		КонецЦикла;
		ЗаполнитьЗаказИзменен();
		Если флТоварыВКоробах Тогда
			ПроверитьОтрицательныйИтогТаблицы("ТоварыВКоробах");
		Иначе
			ПроверитьОтрицательныйИтогТаблицы("Товары");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНеРаспределеноТоварыВКоробах(Элемент, ОсталосьДобавить, ОсталосьУдалить)
	НеРаспределено = "";
	Если ОсталосьДобавить > 0 Тогда
		НеРаспределено = НеРаспределено + "Не получилось добавить:"
		+ ОсталосьДобавить + ". ВариантКомплектации:"
		+ Элемент["ВариантКомплектации"];
	КонецЕсли;
	Если ОсталосьУдалить > 0 Тогда
		НеРаспределено = НеРаспределено + "Не получилось удалить:"
		+ ОсталосьУдалить + ". ВариантКомплектации:"
		+ Элемент["ВариантКомплектации"];
	КонецЕсли;
	Если НеРаспределено <> "" Тогда
		СообщитьПользователю(НеРаспределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНеРаспределеноТовары(Элемент, ОсталосьДобавить, ОсталосьУдалить)
	НеРаспределено = "";
	Если ОсталосьДобавить > 0 Тогда
		НеРаспределено = НеРаспределено + "Не получилось добавить:"	+ ОсталосьДобавить
		+ ". Номенклатура:" + Элемент["Номенклатура"]
		+ ". Характеристика:" + Элемент["Характеристика"];
	КонецЕсли;
	Если ОсталосьУдалить > 0 Тогда
		НеРаспределено = НеРаспределено + "Не получилось удалить:" + ОсталосьУдалить
		+ ". Номенклатура:" + Элемент["Номенклатура"]
		+ ". Характеристика:" + Элемент["Характеристика"];
	КонецЕсли;
	Если НеРаспределено <> "" Тогда
		СообщитьПользователю(НеРаспределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОтрицательныйИтогТаблицы(ИмяТЧ)
	Для Каждого ТД Из Объект[ИмяТЧ] Цикл
		Если ТД.Количество < 0 Тогда
			ТекстСообщения = "Отрицательный предварительный итог в строке заказа:" + ТД.НомерСтроки;
			СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если ИмяТЧ = "Товары" Тогда
			Если ЗначениеЗаполнено(ТД.Добавить) ИЛИ ЗначениеЗаполнено(ТД.Удалить) Тогда
				ТД["Пометка"] = Истина;
			Иначе
				ТД["Пометка"] = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуВКоробах(Команда)
	СтрокаТаблицы = Объект.ТоварыВКоробах.Добавить();
	СтрокаТаблицы.флДобавленаВручную	= Истина;
	
	Идентификатор = СтрокаТаблицы.ПолучитьИдентификатор();
	
	ТекущийЭлемент = Элементы.ТоварыВКоробах;
	Элементы.ТоварыВКоробах.ТекущаяСтрока = Идентификатор;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьАртикул(ВариантКомплектации)
	Возврат ВариантКомплектации.Владелец.Артикул;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьФлажкиДобавленоОтмененоПоСтрокеВКоробах()
	ТД = Элементы["ТоварыВКоробах"].ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТД["Добавить"]) Тогда
			ТД["флДобавлено"] = Истина;
		Иначе
			ТД["флДобавлено"] = Ложь;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТД["Удалить"]) Тогда
			ТД["флОтменено"] = Истина;
		Иначе
			ТД["флОтменено"] = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПересчитатьИтогПоСтрокеВКоробах(ИмяТЧ, ПолеДобавить, ПолеУдалить, ПолеПеренестиВДругойЗаказ = "")
	ТД = Элементы[ИмяТЧ].ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		ТД.Количество = ТД.КоличествоСИзменениями;
		Если ПолеДобавить <> "" Тогда
			ТД.Количество = ТД.Количество + ТД[ПолеДобавить];
		КонецЕсли;
		Если ПолеУдалить <> "" Тогда
			ТД.Количество = ТД.Количество - ТД[ПолеУдалить];
		КонецЕсли;
		Если ПолеПеренестиВДругойЗаказ <> "" Тогда
			ТД.Количество = ТД.Количество - ТД[ПолеПеренестиВДругойЗаказ];
		КонецЕсли;
		ТД.Сумма = ТД.Количество * ТД.ЦенаКороба;
		Если ТД.Количество < 0 Тогда
			ТекстСообщения = "Отрицательный предварительный итог в строке заказа:" + ТД.НомерСтроки;
			СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		ТД["Пометка"] = Ложь;
		Если	(ПолеДобавить <> ""					И ЗначениеЗаполнено(ТД[ПолеДобавить]))
			ИЛИ	(ПолеУдалить <> ""					И ЗначениеЗаполнено(ТД[ПолеУдалить]))
			ИЛИ	(ПолеПеренестиВДругойЗаказ <> ""	И ЗначениеЗаполнено(ТД[ПолеПеренестиВДругойЗаказ]))
			Тогда
			ТД["Пометка"] = Истина;
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьЗаказИзменен();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуВКоробах(Команда)
	ТД = Элементы.ТоварыВКоробах.ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		ИдентификаторСтроки = ТД.ПолучитьИдентификатор();
		СтрокаЗаказа = Объект.ТоварыВКоробах.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если СтрокаЗаказа <> Неопределено Тогда
			Индекс = Объект.ТоварыВКоробах.Индекс(СтрокаЗаказа);
			Объект.ТоварыВКоробах.Удалить(Индекс);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВКоробахПриАктивизацииСтроки(Элемент)
	Элементы.ТоварыВКоробахУдалитьСтрокуВКоробах.Доступность = Ложь;
	ТД = Элементы.ТоварыВКоробах.ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		Элементы.ТоварыВКоробахУдалитьСтрокуВКоробах.Доступность = ТД.флДобавленаВручную;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РежимРаботыПриИзменении(Элемент)
	ЗаполнитьТаблицаЗаказы();
	УправлениеДоступностьюТаблиц();
	Если РежимРаботы = 1 Тогда
		Элементы.ВыборСтатуса.Доступность = Истина;
	Иначе
		Элементы.ВыборСтатуса.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРезервыНаСервере()
	
	СписокНоменклатуры = Объект.Резервы.Выгрузить().ВыгрузитьКолонку("Номенклатура");
	ТаблицаОстатки = ПолучитьТаблицуОстатков(СписокНоменклатуры, мЗаказКлиента, Истина,
				"Склад, Номенклатура, Характеристика, ЗаказНаОтгрузку", "Доступно");
	
	СтруктураПоиска = Новый Структура("Склад, Номенклатура, Характеристика, ЗаказНаОтгрузку");
	Для Каждого СтрокаТЧ Из Объект.Резервы Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЧ);
		СтруктураПоиска["ЗаказНаОтгрузку"] = мЗаказКлиента;
		НайденныеСтроки = ТаблицаОстатки.НайтиСтроки(СтруктураПоиска);
		Доступно = 0;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Доступно = Доступно + НайденнаяСтрока["Доступно"];
		КонецЦикла;
		СтрокаТЧ["ТоварВРезерве"] = Доступно;
		
		СтруктураПоиска["ЗаказНаОтгрузку"] = Неопределено;
		НайденныеСтроки = ТаблицаОстатки.НайтиСтроки(СтруктураПоиска);
		Доступно = 0;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Доступно = Доступно + НайденнаяСтрока["Доступно"];
		КонецЦикла;
		СтрокаТЧ["ДоступноНаСкладе"] = Доступно;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРезервыВКоробахНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	//==============
	// ТоварВРезерве
	//==============
	Запрос.Текст = "ВЫБРАТЬ
	               |	гф_ДвижениеКодовМаркировкиОрганизацииОстатки.Организация КАК Организация,
	               |	гф_ДвижениеКодовМаркировкиОрганизацииОстатки.Склад КАК Склад,
	               |	гф_ДвижениеКодовМаркировкиОрганизацииОстатки.КМ КАК КМ,
	               |	гф_ДвижениеКодовМаркировкиОрганизацииОстатки.КМ.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
	               |	гф_ДвижениеКодовМаркировкиОрганизацииОстатки.Резерв КАК Резерв,
	               |	гф_ДвижениеКодовМаркировкиОрганизацииОстатки.КоличествоОстаток КАК КоличествоОстаток,
	               |	УпаковочныйЛист.гф_Заказ КАК ЗаказКлиента,
	               |	УпаковочныйЛист.гф_Комплектация КАК ВариантКомплектации,
	               |	УпаковочныйЛист.Ссылка КАК УпаковочныйЛист
	               |ПОМЕСТИТЬ втОстаткиКоробов
	               |ИЗ
	               |	РегистрНакопления.гф_ДвижениеКодовМаркировкиОрганизации.Остатки(
	               |			,
	               |			Организация = &Организация
	               |				И Склад = &Склад
	               |				И КМ.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка)) КАК гф_ДвижениеКодовМаркировкиОрганизацииОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист КАК УпаковочныйЛист
	               |		ПО гф_ДвижениеКодовМаркировкиОрганизацииОстатки.КМ.ЗначениеШтрихкода = УпаковочныйЛист.Код
	               |			И (УпаковочныйЛист.Ссылка.Проведен)
	               |ГДЕ
	               |	УпаковочныйЛист.гф_Заказ = &гф_Заказ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СУММА(втОстаткиКоробов.КоличествоОстаток) КАК КоличествоОстаток,
	               |	втОстаткиКоробов.ВариантКомплектации КАК ВариантКомплектации
	               |ИЗ
	               |	втОстаткиКоробов КАК втОстаткиКоробов
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втОстаткиКоробов.ВариантКомплектации";
	Запрос.УстановитьПараметр("Организация", мЗаказКлиента.Организация);
	Запрос.УстановитьПараметр("Склад", мЗаказКлиента.Склад);
	Запрос.УстановитьПараметр("гф_Заказ", мЗаказКлиента);
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Для Каждого СтрокаТЧ Из Объект.РезервыВКоробах Цикл
		Выборка.Сбросить();
		СтруктураПоиска = Новый Структура("ВариантКомплектации", СтрокаТЧ["ВариантКомплектации"]);
		Если Выборка.НайтиСледующий(СтруктураПоиска) Тогда
			СтрокаТЧ["ТоварВРезерве"] = Выборка.КоличествоОстаток;
		КонецЕсли;
	КонецЦикла;

	//=================
	// ДоступноНаСкладе
	//=================
	Запрос.Текст = "ВЫБРАТЬ
	               |	1 КАК КоличествоОстаток,
	               |	УпаковочныйЛист.гф_Комплектация КАК ВариантКомплектации,
	               |	УпаковочныйЛист.Ссылка КАК УпаковочныйЛист
	               |ПОМЕСТИТЬ втСвободныеОстаткиКоробов
	               |ИЗ
	               |	РегистрНакопления.гф_ДвижениеКодовМаркировкиОрганизации.Остатки(
	               |			,
	               |			Организация = &Организация
	               |				И Склад = &Склад
	               |				И КМ.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка)) КАК гф_ДвижениеКодовМаркировкиОрганизацииОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист КАК УпаковочныйЛист
	               |		ПО гф_ДвижениеКодовМаркировкиОрганизацииОстатки.КМ.ЗначениеШтрихкода = УпаковочныйЛист.Код
	               |			И (УпаковочныйЛист.Ссылка.Проведен)
	               |ГДЕ
	               |	УпаковочныйЛист.гф_Заказ = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
	               |	И УпаковочныйЛист.гф_Комплектация В(&ВариантыКомплектации)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СУММА(втСвободныеОстаткиКоробов.КоличествоОстаток) КАК КоличествоОстаток,
	               |	втСвободныеОстаткиКоробов.ВариантКомплектации КАК ВариантКомплектации
	               |ИЗ
	               |	втСвободныеОстаткиКоробов КАК втСвободныеОстаткиКоробов
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втСвободныеОстаткиКоробов.ВариантКомплектации";
	РезервыВКоробах = Объект.РезервыВКоробах.Выгрузить(, "ВариантКомплектации");
	ВариантыКомплектации = РезервыВКоробах.ВыгрузитьКолонку("ВариантКомплектации");
	Запрос.УстановитьПараметр("ВариантыКомплектации", ВариантыКомплектации);
	Результат = Запрос.Выполнить();
	СвободныеОстатки = Результат.Выгрузить();
	
	// "свободные" Упаковочные листы - служебная таблица
	// используется при создании Корректировки назначения с видом операции: Резервирование
	Запрос.Текст = "ВЫБРАТЬ
	               |	втСвободныеОстаткиКоробов.УпаковочныйЛист КАК УпаковочныйЛист,
	               |	втСвободныеОстаткиКоробов.ВариантКомплектации КАК ВариантКомплектации
	               |ИЗ
	               |	втСвободныеОстаткиКоробов КАК втСвободныеОстаткиКоробов";
	Результат = Запрос.Выполнить();
	мСвободныеУпаковочныеЛисты.Загрузить(Результат.Выгрузить());

	Для Каждого СтрокаРезерва Из Объект.РезервыВКоробах Цикл
		СтрокаСвободныхОстатков = СвободныеОстатки.Найти(СтрокаРезерва["ВариантКомплектации"], "ВариантКомплектации");
		Если СтрокаСвободныхОстатков <> Неопределено Тогда
			// значение по-умолчанию
			СтрокаРезерва["ДоступноНаСкладе"] = СтрокаСвободныхОстатков["КоличествоОстаток"];
		
			Запрос.Текст = "ВЫБРАТЬ
	               |	втСвободныеОстаткиКоробов.ВариантКомплектации КАК ВариантКомплектации,
	               |	УпаковочныйЛистТовары.Номенклатура КАК Номенклатура,
	               |	УпаковочныйЛистТовары.Характеристика КАК Характеристика,
	               |	СУММА(УпаковочныйЛистТовары.Количество) КАК Количество
	               |ИЗ
	               |	втСвободныеОстаткиКоробов КАК втСвободныеОстаткиКоробов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
	               |		ПО втСвободныеОстаткиКоробов.УпаковочныйЛист = УпаковочныйЛистТовары.Ссылка
	               |ГДЕ
	               |	втСвободныеОстаткиКоробов.ВариантКомплектации = &ВариантКомплектации
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втСвободныеОстаткиКоробов.ВариантКомплектации,
	               |	УпаковочныйЛистТовары.Номенклатура,
	               |	УпаковочныйЛистТовары.Характеристика";
			Запрос.УстановитьПараметр("ВариантКомплектации", СтрокаРезерва["ВариантКомплектации"]);
			Результат = Запрос.Выполнить();
			СписокНоменклатуры = Результат.Выгрузить().ВыгрузитьКолонку("Номенклатура");
			
			ТаблицаОстатки = ПолучитьТаблицуОстатков(СписокНоменклатуры, мЗаказКлиента, Ложь,
				"Номенклатура, Характеристика", "Доступно");
	
			// проверка "свободных" остатков Номенклатуры по Варианту комплектации
			мДоступноНаСкладе = СтрокаРезерва["ДоступноНаСкладе"];
			Для Каждого СтрокаКомплектации Из СтрокаСвободныхОстатков["ВариантКомплектации"].Товары Цикл
				СтруктураПоиска = Новый Структура("Номенклатура, Характеристика", СтрокаКомплектации["Номенклатура"],
					СтрокаКомплектации["Характеристика"]);
				СтрокиОстатковНоменклатуры = ТаблицаОстатки.НайтиСтроки(СтруктураПоиска);
				Если СтрокиОстатковНоменклатуры.Количество() > 0 Тогда
					ДоступноНаСкладе = СтрокаРезерва["ДоступноНаСкладе"];
					ТребуемыйОстатокНоменклатуры = СтрокаРезерва["ДоступноНаСкладе"] * СтрокаКомплектации.Количество;
					//здесь найдены свободные остатки по Номенклатуре
					СтрокаОстатковНоменклатуры = СтрокиОстатковНоменклатуры[0];
					НеХватает = ТребуемыйОстатокНоменклатуры - СтрокаОстатковНоменклатуры.Доступно;
					Пока НеХватает > 0 Цикл
						НеХватает = НеХватает - СтрокаКомплектации.Количество;
						ДоступноНаСкладе = ДоступноНаСкладе - 1;
					КонецЦикла;
					мДоступноНаСкладе = МИН(мДоступноНаСкладе, ДоступноНаСкладе);
				Иначе
					//здесь НЕ найдены свободные остатки по Номенклатуре
					СтрокаРезерва["ДоступноНаСкладе"] = 0;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			СтрокаРезерва["ДоступноНаСкладе"] = МИН(мДоступноНаСкладе, СтрокаРезерва["ДоступноНаСкладе"]);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТаблицуОстатков(СписокНоменклатуры, мЗаказКлиента, парамОбособленныеТовары, ПоляГруппировки,
			ПоляСуммирования)
	
	СхемаКомпоновкиДанных = Отчеты.ОстаткиИДоступностьТоваров.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	НастройкиОтчета = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтчета);
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	
    ГруппировкаДетальныеПоля = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
    ГруппировкаДетальныеПоля.Использование = Истина;
    Автополе = ГруппировкаДетальныеПоля.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
    Автополе.Использование = Истина;
	
	ПолеПараметрыДанных	= Новый ПолеКомпоновкиДанных("ПараметрыДанных");
	ПолеСистемныеПоля	= Новый ПолеКомпоновкиДанных("СистемныеПоля"); 
    Для Каждого ПолеВыбора Из КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		ВыбранноеПоле = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Использование	= Не (ПолеВыбора.Поле = ПолеПараметрыДанных ИЛИ ПолеВыбора.Поле = ПолеСистемныеПоля);
		ВыбранноеПоле.Поле			= ПолеВыбора.Поле;
	КонецЦикла;	 
	
	ПараметрОбособленныеТовары = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(
		"ПоказатьОбособленныеТовары");
	Если ПараметрОбособленныеТовары <> Неопределено Тогда
		ПараметрОбособленныеТовары.Значение = парамОбособленныеТовары;
	КонецЕсли;
	
	ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Номенклатура");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ПравоеЗначение	= СписокНоменклатуры;
	
	ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Склад");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ПравоеЗначение	= мЗаказКлиента.Склад;
	
	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);

	ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.Основной.Запрос;

	ТекстЗапросаВесУпаковки = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
		"Таблица.Номенклатура.ЕдиницаИзмерения", "Таблица.Номенклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаВесНоменклатуры", ТекстЗапросаВесУпаковки);
		
	ТекстЗапросаОбъемУпаковки = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки(
		"Таблица.Номенклатура.ЕдиницаИзмерения", "Таблица.Номенклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаОбъемНоменклатуры", ТекстЗапросаОбъемУпаковки);

	СхемаКомпоновкиДанных.НаборыДанных.Основной.Запрос = ТекстЗапроса;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();    
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	ТипГенератора = Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений");
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, , , ТипГенератора);
    
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
    
    Таблица = Новый ТаблицаЗначений;
    
    ПроцессорВыводаРезультатаКомпоновкиДанных = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ПроцессорВыводаРезультатаКомпоновкиДанных.УстановитьОбъект(Таблица);
    ПроцессорВыводаРезультатаКомпоновкиДанных.Вывести(ПроцессорКомпоновкиДанных);
	
	МассивУдалитьСтроки = Новый Массив;
	Для Каждого СтрокаТЗ Из Таблица Цикл
		Если СтрокаТЗ["ТипЗаписи"] <> "Сейчас" Тогда
			МассивУдалитьСтроки.Добавить(СтрокаТЗ);
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдалитьСтроку Из МассивУдалитьСтроки Цикл
		Таблица.Удалить(УдалитьСтроку);
	КонецЦикла;
	ТаблицаОстатки = Таблица.Скопировать();
	ТаблицаОстатки.Свернуть(ПоляГруппировки, ПоляСуммирования);
	
	Возврат ТаблицаОстатки;
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьИтогПоСтрокеРезерва()
	ТД = Элементы.Резервы.ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		ТД.Количество = ТД.КоличествоСИзменениями + ТД.Зарезервировать - ТД.СнятьРезерв - ТД.ПеренестиВДругойЗаказ;
		ТД.КоличествоУпаковок = ТД.Количество;
		Если ТД.Количество < 0 Тогда
			ТекстСообщения = "Отрицательный предварительный итог в строке заказа:" + ТД.НомерСтроки;
			СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьЗаказИзменен();
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиНомерВерсииЗаказаПоСтатусу(мЗаказКлиента, ВыборСтатуса)
	
	НомерВерсииЗаказа = 1;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	             |	ВерсииОбъектов.НомерВерсии КАК НомерВерсии,
	             |	ВерсииОбъектов.ВерсияОбъекта КАК ВерсияОбъекта,
	             |	ВерсииОбъектов.ЕстьДанныеВерсии КАК ЕстьДанныеВерсии
	             |ИЗ
	             |	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
	             |ГДЕ
	             |	ВерсииОбъектов.Объект = &Объект
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	НомерВерсии";
	Запрос.УстановитьПараметр("Объект", мЗаказКлиента);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если ВыборСтатуса = 0 Тогда
		Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
	ИначеЕсли ВыборСтатуса = 1 Тогда
		Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
	Иначе
		Статус = Перечисления.СтатусыЗаказовКлиентов.ПустаяСсылка();
	КонецЕсли;
	Если Статус = Перечисления.СтатусыЗаказовКлиентов.ПустаяСсылка() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ВерсияОбъекта  = ВерсионированиеОбъектов.РазборВерсии(мЗаказКлиента, Выборка.НомерВерсии);
		СтрокаСтатус = ВерсияОбъекта.Реквизиты.Найти("Статус", "НаименованиеРеквизита");
		Если СтрокаСтатус <> Неопределено Тогда
			Если СтрокаСтатус["ЗначениеРеквизита"] = Статус Тогда
				Возврат Выборка.НомерВерсии;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат НомерВерсииЗаказа;
КонецФункции

&НаСервереБезКонтекста
Функция НайтиНомерВерсииЗаказа(мЗаказКлиента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	             |	ВерсииОбъектов.НомерВерсии КАК НомерВерсии,
	             |	ВерсииОбъектов.ВерсияОбъекта КАК ВерсияОбъекта,
	             |	ВерсииОбъектов.ЕстьДанныеВерсии КАК ЕстьДанныеВерсии
	             |ИЗ
	             |	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
	             |ГДЕ
	             |	ВерсииОбъектов.Объект = &Объект
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	НомерВерсии";
	Запрос.УстановитьПараметр("Объект", мЗаказКлиента);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.НомерВерсии;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ПеречитатьЗаказ(Команда)
	мДатаОбновленияИзИ5 = _омОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(мЗаказКлиента, "Документ.ЗаказКлиента",
		"гф_ДатаОбновленияИзИ5");
КонецПроцедуры

&НаСервере
Функция ПолучитьНазначение(Заказ)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Назначения.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Назначения КАК Назначения
	               |ГДЕ
	               |	Назначения.Заказ = &Заказ
	               |	И НЕ Назначения.ПометкаУдаления";
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Назначение = Справочники.Назначения.СоздатьЭлемент();
		Назначение.Заказ = Заказ;
		Назначение.ТипНазначения = Перечисления.ТипыНазначений.Собственное;
		Назначение.ВидДеятельностиНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
		Назначение.ДвиженияПоСкладскимРегистрам = Истина;
		Назначение.Записать();
		ТекстСообщения = "Создан Назначение:" + Назначение.Ссылка + " для Заказа" + Заказ;
		СообщитьПользователю(ТекстСообщения);
		Возврат Назначение.Ссылка;
	Иначе
		Выборка = Результат.Выбрать();
		Элементы.мНазначение.Доступность = Истина;
		Если Выборка.Количество() = 1 Тогда
			Если Выборка.Следующий() Тогда
				Возврат Выборка.Ссылка;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
			Элементы.мНазначение.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьАналитикуУчетаНоменклатуры(Номенклатура, Характеристика, Склад, Назначение)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КлючиАналитикиУчетаНоменклатуры.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.КлючиАналитикиУчетаНоменклатуры КАК КлючиАналитикиУчетаНоменклатуры
	               |ГДЕ
	               |	КлючиАналитикиУчетаНоменклатуры.Номенклатура = &Номенклатура
	               |	И КлючиАналитикиУчетаНоменклатуры.Характеристика = &Характеристика
	               |	И КлючиАналитикиУчетаНоменклатуры.МестоХранения = &МестоХранения
	               |	И КлючиАналитикиУчетаНоменклатуры.Назначение = &Назначение
	               |	И НЕ КлючиАналитикиУчетаНоменклатуры.ПометкаУдаления";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("МестоХранения", Склад);
	Запрос.УстановитьПараметр("Назначение", Назначение);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Аналитика = Справочники.КлючиАналитикиУчетаНоменклатуры.СоздатьЭлемент();
		Аналитика.Номенклатура = Номенклатура;
		Аналитика.Характеристика = Характеристика;
		Аналитика.МестоХранения = Склад;
		Аналитика.СкладскаяТерритория = Склад;
		Аналитика.Назначение = Назначение;
		Аналитика.ТипМестаХранения = Перечисления.ТипыМестХранения.Склад;
		Аналитика.Записать();
		Возврат Аналитика.Ссылка;
	Иначе
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПодготовитьТабДокНаСервере()
	ТабПротокол = Новый ТабличныйДокумент;
	
	ТабПротокол.АвтоМасштаб = Истина;
	ТабПротокол.ОтображатьЗаголовки = Ложь;
	ТабПротокол.ОтображатьСетку = Ложь;
	ТабПротокол.ТолькоПросмотр = Истина;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Макет = ОбработкаОбъект.ПолучитьМакет("Протокол");
	
	ОбластьШапка	= Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока	= Макет.ПолучитьОбласть("Строка");
	
	ТабПротокол.Вывести(ОбластьШапка);
	Для Каждого СтрокаПротокола Из ТЗПротокол Цикл
		ОбластьСтрока.Параметры.Заполнить(СтрокаПротокола);
		ТабПротокол.Вывести(ОбластьСтрока);
	КонецЦикла;
		
	Возврат ТабПротокол;
	
КонецФункции

&НаСервере
Функция МаксимальныйКодСтрокиТовары()
	МаксимальныйКодСтроки = 0;
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		Если МаксимальныйКодСтроки < СтрокаТЧ["КодСтроки"] Тогда
			МаксимальныйКодСтроки = СтрокаТЧ["КодСтроки"];
		КонецЕсли;
	КонецЦикла;
	Возврат МаксимальныйКодСтроки;
КонецФункции

&НаСервере
Функция МаксимальныйКодСтрокиРезервы()
	МаксимальныйКодСтроки = 0;
	Для Каждого СтрокаТЧ Из Объект.Резервы Цикл
		Если МаксимальныйКодСтроки < СтрокаТЧ["КодСтроки"] Тогда
			МаксимальныйКодСтроки = СтрокаТЧ["КодСтроки"];
		КонецЕсли;
	КонецЦикла;
	Возврат МаксимальныйКодСтроки;
КонецФункции

&НаСервере
Процедура ИзменитьЗаказНовоеНазначение(ИзменитьЗаказ, ДокКорректировка)
	Если ИзменитьЗаказ Тогда
		// здесь вносим изменения в Заказ (новое назначение)
		Если ЗначениеЗаполнено(ДокКорректировка.Назначение.Заказ) Тогда
			ДокЗаказ = ДокКорректировка.Назначение.Заказ.ПолучитьОбъект();
			СтруктураПоиска = Новый Структура("Назначение", ДокКорректировка.Назначение);
			СтрокиРезерва = тчТовары.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаТЧ Из СтрокиРезерва Цикл
				СтрокаЗаказа = ДокЗаказ.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗаказа, СтрокаТЧ);
			КонецЦикла;
			СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(ДокЗаказ, "Товары");
		КонецЕсли;
		ЗаписатьДокументВПопытке(ДокЗаказ, "Проведен:", ТЗПротокол, "Изменен и проведен");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ИзменитьИсходныйЗаказВКоробах(ИзменитьЗаказ)
	Если ИзменитьЗаказ Тогда
		// здесь вносим изменения в "исходный" Заказ
		ЗаказОбъект = мЗаказКлиента.ПолучитьОбъект();
		Если ЗначениеЗаполнено(мКомментарий) Тогда
			ЗаказОбъект.Комментарий = мКомментарий;
		КонецЕсли;
		ЗаказОбъект.гф_ТоварыВКоробах.Очистить();
		Для Каждого СтрокаТЧ Из Объект.РезервыВКоробах Цикл
			СтрокаЗаказа = ЗаказОбъект.гф_ТоварыВКоробах.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗаказа, СтрокаТЧ);
		КонецЦикла;
		ЗаполнитьТоварыНаСервере(ЗаказОбъект);
		ЗаписатьДокументВПопытке(ЗаказОбъект, "Проведен:", ТЗПротокол, "Изменен и проведен");
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ИзменитьЗаказВКоробахНовоеНазначение(ИзменитьЗаказ, Назначение)
	Если ИзменитьЗаказ Тогда
		// здесь вносим изменения в Заказ (новое назначение)
		Если ЗначениеЗаполнено(Назначение.Заказ) Тогда
			ЗаказОбъект = Назначение.Заказ.ПолучитьОбъект();
			СтрокиРезерва = Объект.РезервыВКоробах.НайтиСтроки(Новый Структура("ПеренестиНовоеНазначение", Назначение));
			Для Каждого СтрокаТЧ Из СтрокиРезерва Цикл
				СтрокаЗаказа = ЗаказОбъект.гф_ТоварыВКоробах.Найти(СтрокаТЧ.ВариантКомплектации);
				Если СтрокаЗаказа = Неопределено Тогда
					СтрокаЗаказа = ЗаказОбъект.гф_ТоварыВКоробах.Добавить();
					СтрокаЗаказа["ВариантКомплектации"] = СтрокаТЧ.ВариантКомплектации;
					СтрокаЗаказа["ЦенаКороба"] = СтрокаТЧ.ЦенаКороба;
				Иначе
				КонецЕсли;
				СтрокаЗаказа["Количество"] = СтрокаЗаказа["Количество"] + СтрокаТЧ.ПеренестиВДругойЗаказ;
				СтрокаЗаказа["Сумма"] = СтрокаЗаказа["Количество"] * СтрокаЗаказа["ЦенаКороба"];
			КонецЦикла;
			ЗаполнитьТоварыНаСервере(ЗаказОбъект);
			ЗаписатьДокументВПопытке(ЗаказОбъект, "Проведен:", ТЗПротокол, "Изменен и проведен");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПеренестиРезервНаСервере(ПолеКоличество, ПолеНазначение, ИзменитьЗаказ = Ложь)
	ТаблицаНазначений = Объект.Резервы.Выгрузить();
	ТаблицаНазначений.Свернуть(ПолеНазначение);
	ИсходноеНазначение = мНазначение;
	Для Каждого СтрокаНазначение Из ТаблицаНазначений Цикл
		Если Не ЗначениеЗаполнено(СтрокаНазначение[ПолеНазначение]) Тогда
			Продолжить;
		КонецЕсли;
		ДокКорректировка = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
		ДокКорректировка.Автор = ПараметрыСеанса.ТекущийПользователь;
		ДокКорректировка.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ДокКорректировка.Организация = отборОрганизация;
		ДокКорректировка.Дата = ТекущаяДатаСеанса();
		ДокКорректировка.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать;
		ДокКорректировка.Комментарий = "Создан автоматически обработкой Корректировка заказов и резервов "
		+ ТекущаяДатаСеанса();
		ДокКорректировка.Назначение = СтрокаНазначение[ПолеНазначение];
		СтруктураПоиска = Новый Структура(ПолеНазначение, ДокКорректировка.Назначение);
		СтрокиРезерва = Объект.Резервы.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаТЧ Из СтрокиРезерва Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ[ПолеКоличество]) Тогда
				нс = ДокКорректировка.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(нс, СтрокаТЧ);
				нс.Количество = СтрокаТЧ[ПолеКоличество];
				нс.КоличествоУпаковок = СтрокаТЧ[ПолеКоличество];
				нс.ИсходноеНазначение = ИсходноеНазначение;
				нс.ИсходныйЗаказ = мЗаказКлиента;
				нс.ИсходноеНазначениеДвиженияПоСкладскимРегистрам = Истина;
				// Аналитика учета заполняется при проведении документа автоматически...
			КонецЕсли;
		КонецЦикла;
		ЗаписатьДокументВПопытке(ДокКорректировка, "Проведен:", ТЗПротокол, "Создан и проведен");
		
		// здесь вносим изменения в Заказ (новое назначение)
		ИзменитьЗаказНовоеНазначение(ИзменитьЗаказ, ДокКорректировка);
		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПеренестиРезервВКоробахНаСервере(ПолеКоличество, ПолеНазначение, ИзменитьЗаказ = Ложь)
	ТаблицаНазначений = Объект.РезервыВКоробах.Выгрузить();
	ТаблицаНазначений.Свернуть(ПолеНазначение);
	ИсходноеНазначение = мНазначение;
	Для Каждого СтрокаНазначение Из ТаблицаНазначений Цикл
		Если Не ЗначениеЗаполнено(СтрокаНазначение[ПолеНазначение]) Тогда
			Продолжить;
		КонецЕсли;
		ДокКорректировка = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
		ДокКорректировка.Автор = ПараметрыСеанса.ТекущийПользователь;
		ДокКорректировка.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ДокКорректировка.Организация = отборОрганизация;
		ДокКорректировка.Дата = ТекущаяДатаСеанса();
		ДокКорректировка.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать;
		ДокКорректировка.Комментарий = "Создан автоматически обработкой Корректировка заказов и резервов "
		+ ТекущаяДатаСеанса();
		ДокКорректировка.Назначение = СтрокаНазначение[ПолеНазначение];
		СтруктураПоиска = Новый Структура(ПолеНазначение, ДокКорректировка.Назначение);
		СтрокиРезерва = Объект.РезервыВКоробах.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаТЧ Из СтрокиРезерва Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ[ПолеКоличество]) Тогда
				// заполняем Номенклатуру из Упаковочных листов
				УпаковочныеЛисты = мЗаказКлиента.гф_УпаковочныеЛисты.Выгрузить();
				УпаковочныеЛисты.Свернуть("УпаковочныйЛист");
				СнятьРезерв = СтрокаТЧ[ПолеКоличество];
				Индекс = 0;
				Пока СнятьРезерв > 0 Цикл
					УпаковочныйЛист = УпаковочныеЛисты[Индекс].УпаковочныйЛист;
					Для Каждого СтрокаТЧ Из УпаковочныйЛист.Товары Цикл
						нс = ДокКорректировка.Товары.Добавить();
						ЗаполнитьЗначенияСвойств(нс, СтрокаТЧ);
						нс.ИсходноеНазначение = ИсходноеНазначение;
						нс.ИсходныйЗаказ = мЗаказКлиента;
						нс.ИсходноеНазначениеДвиженияПоСкладскимРегистрам = Истина;
						нс.Склад = мЗаказКлиента.Склад;
						нс.гф_IDкороба = УпаковочныйЛист;
						// Аналитика учета заполняется при проведении документа автоматически...
						СнятьРезерв = СнятьРезерв - 1;
						Индекс = Индекс + 1;
					КонецЦикла;
					// в Упаковочном листе надо изменить Заказ и Назначение (в тч Товары)
					ДокУпаковочныйЛист = УпаковочныйЛист.ПолучитьОбъект();
					ДокУпаковочныйЛист.гф_Заказ = СтрокаНазначение[ПолеНазначение].Заказ;
					Для Каждого СтрокаТЧ Из ДокУпаковочныйЛист.Товары Цикл
						СтрокаТЧ.Назначение = СтрокаНазначение[ПолеНазначение];
					КонецЦикла;
					ЗаписатьДокументВПопытке(ДокУпаковочныйЛист, "Проведен:", ТЗПротокол, "Изменен и проведен");
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		ЗаписатьДокументВПопытке(ДокКорректировка, "Проведен:", ТЗПротокол, "Создан и проведен");
		
		// здесь вносим изменения в Заказ (новое назначение)
		ИзменитьЗаказВКоробахНовоеНазначение(ИзменитьЗаказ, ДокКорректировка.Назначение);
		
	КонецЦикла;
	// здесь вносим изменения в "исходный" Заказ
	ИзменитьИсходныйЗаказВКоробах(ИзменитьЗаказ);
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧВКоробах(ИмяТЧ, НомерВерсии = 1)
	// здесь надо получить первоначальные данные заказа из регистра сведений ВерсииОбъектов
	ВерсияОбъекта  = ВерсионированиеОбъектов.РазборВерсии(мЗаказКлиента, НомерВерсии);
	Если ТипЗнч(ВерсияОбъекта) = Тип("Структура") Тогда
		Для Каждого СтрокаТЧ Из ВерсияОбъекта.ТабличныеЧасти["гф_ТоварыВКоробах"] Цикл
			нс = Объект[ИмяТЧ].Добавить();
			ЗаполнитьЗначенияСвойств(нс, СтрокаТЧ, "
			|ВариантКомплектации,
			|ЦенаКороба,
			|Сумма,
			|IDКороба");
			нс.Артикул = нс.ВариантКомплектации.Владелец.Артикул;
			нс.КоличествоПервоначально = СтрокаТЧ.Количество;
		КонецЦикла;
	КонецЕсли;
	
	// и текущие данные заказа
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказКлиентагф_ТоварыВКоробах.Ссылка КАК Ссылка,
	|	ЗаказКлиентагф_ТоварыВКоробах.НомерСтроки КАК НомерСтроки,
	|	ЗаказКлиентагф_ТоварыВКоробах.ВариантКомплектации КАК ВариантКомплектации,
	|	ЗаказКлиентагф_ТоварыВКоробах.Количество КАК Количество,
	|	ЗаказКлиентагф_ТоварыВКоробах.ЦенаКороба КАК ЦенаКороба,
	|	ЗаказКлиентагф_ТоварыВКоробах.Сумма КАК Сумма,
	|	ЗаказКлиентагф_ТоварыВКоробах.IDКороба КАК IDКороба
	|ИЗ
	|	Документ.ЗаказКлиента.гф_ТоварыВКоробах КАК ЗаказКлиентагф_ТоварыВКоробах
	|ГДЕ
	|	ЗаказКлиентагф_ТоварыВКоробах.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", мЗаказКлиента);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураПоиска = Новый Структура("ВариантКомплектации", Выборка.ВариантКомплектации);
		СтрокиЗаказа = Объект[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
		Если СтрокиЗаказа.Количество() > 0 Тогда
			СтрокаЗаказа = СтрокиЗаказа[0];
		Иначе
			СтрокаЗаказа = Объект[ИмяТЧ].Добавить();
			СтрокаЗаказа.Артикул = СтрокаЗаказа.ВариантКомплектации.Владелец.Артикул;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаЗаказа, Выборка);
		СтрокаЗаказа.Артикул = СтрокаЗаказа.ВариантКомплектации.Владелец.Артикул;
		СтрокаЗаказа.КоличествоСИзменениями = Выборка.Количество;
		СтрокаЗаказа.флНаличиеВЗаказе = Истина;
	КонецЦикла;
	
	Для Каждого СтрокаЗаказа Из Объект[ИмяТЧ] Цикл
		Если СтрокаЗаказа.КоличествоСИзменениями > СтрокаЗаказа.КоличествоПервоначально Тогда
			СтрокаЗаказа.Добавлено = СтрокаЗаказа.КоличествоСИзменениями - СтрокаЗаказа.КоличествоПервоначально;
		Иначе
			СтрокаЗаказа.Удалено = СтрокаЗаказа.КоличествоПервоначально - СтрокаЗаказа.КоличествоСИзменениями;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧВПарах(ИмяТЧ, НомерВерсии = 1)
	// здесь надо получить первоначальные данные заказа из регистра сведений ВерсииОбъектов
	ВерсияОбъекта  = ВерсионированиеОбъектов.РазборВерсии(мЗаказКлиента, НомерВерсии);
	Если ТипЗнч(ВерсияОбъекта) = Тип("Структура") Тогда
		Для Каждого СтрокаТЧ Из ВерсияОбъекта.ТабличныеЧасти["Товары"] Цикл
			нс = Объект[ИмяТЧ].Добавить();
			ЗаполнитьЗначенияСвойств(нс, СтрокаТЧ, "
			|Номенклатура,
			|Характеристика,
			|Упаковка,
			|Обособленно,
			|Отменено,
			|ПричинаОтмены,
			|гф_ДобавленоПоПричине,
			|гф_ПричинаДобавления,
			|Цена,
			|Сумма,
			|СтавкаНДС,
			|СуммаНДС,
			|СуммаСНДС,
			|КодСтроки,
			|КлючСвязи,
			|Склад,
			|ДатаОтгрузки,
			|ВариантОбеспечения,
			|ИдентификаторСтроки");
			Если НЕ СтрокаТЧ.Отменено Тогда
				нс.КоличествоПервоначально = СтрокаТЧ.Количество;
				нс.КоличествоУпаковок = СтрокаТЧ.Количество;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// и текущие данные заказа
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	|	ЗаказКлиентаТовары.Характеристика КАК Характеристика,
	|	ЗаказКлиентаТовары.Упаковка КАК Упаковка,
	|	ЗаказКлиентаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ЗаказКлиентаТовары.Количество КАК Количество,
	|	ЗаказКлиентаТовары.Обособленно КАК Обособленно,
	|	ЗаказКлиентаТовары.Отменено КАК Отменено,
	|	ЗаказКлиентаТовары.ПричинаОтмены КАК ПричинаОтмены,
	|	ЗаказКлиентаТовары.гф_ДобавленоПоПричине КАК гф_ДобавленоПоПричине,
	|	ЗаказКлиентаТовары.гф_ПричинаДобавления КАК гф_ПричинаДобавления,
	|	ЗаказКлиентаТовары.Цена КАК Цена,
	|	ЗаказКлиентаТовары.Сумма КАК Сумма,
	|	ЗаказКлиентаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказКлиентаТовары.СуммаНДС КАК СуммаНДС,
	|	ЗаказКлиентаТовары.СуммаСНДС КАК СуммаСНДС,
	|	ЗаказКлиентаТовары.КодСтроки КАК КодСтроки,
	|	ЗаказКлиентаТовары.КлючСвязи КАК КлючСвязи,
	|	ЗаказКлиентаТовары.Склад КАК Склад,
	|	ЗаказКлиентаТовары.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ЗаказКлиентаТовары.ВариантОбеспечения КАК ВариантОбеспечения,
	|	ЗаказКлиентаТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ЗаказКлиентаТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", мЗаказКлиента);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураПоиска = Новый Структура("ИдентификаторСтроки", Выборка.ИдентификаторСтроки);
		СтрокиЗаказа = Объект[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
		Если СтрокиЗаказа.Количество() > 0 Тогда
			СтрокаЗаказа = СтрокиЗаказа[0];
		Иначе
			СтрокаЗаказа = Объект[ИмяТЧ].Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаЗаказа, Выборка);
		СтрокаЗаказа.КоличествоСИзменениями = Выборка.Количество;
		СтрокаЗаказа.флНаличиеВЗаказе = Истина;
	КонецЦикла;
	
	ЗаполнитьДобавленоУдалено(ИмяТЧ);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленоУдалено(ИмяТЧ)
	Для Каждого СтрокаЗаказа Из Объект[ИмяТЧ] Цикл
		Если СтрокаЗаказа.Отменено Тогда
			СтрокаЗаказа.Количество = 0;
			СтрокаЗаказа.КоличествоУпаковок = 0;
			СтрокаЗаказа.КоличествоСИзменениями = 0;
		КонецЕсли;
		Если СтрокаЗаказа.КоличествоСИзменениями > СтрокаЗаказа.КоличествоПервоначально Тогда
			СтрокаЗаказа.Добавлено = СтрокаЗаказа.КоличествоСИзменениями - СтрокаЗаказа.КоличествоПервоначально;
		Иначе
			СтрокаЗаказа.Удалено = СтрокаЗаказа.КоличествоПервоначально - СтрокаЗаказа.КоличествоСИзменениями;
		КонецЕсли;
		Если СтрокаЗаказа.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда
			СтрокаЗаказа.флТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СообщитьПользователю(Текст)
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = Текст;
	Сообщение.Сообщить();
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура ПроверитьЗаполнениеХарактеристики(Номенклатура, Характеристика, ТекстОшибки)
	Если Номенклатура.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	Если Номенклатура.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Характеристика) Тогда
		ТекстОшибки = ТекстОшибки + "Не указана Характеристика. ";
	КонецЕсли;
КонецПроцедуры	

#КонецОбласти
