
#Область ОбработчикиСобытийФормы 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Элементы.ФормаЗакрытьСезон.Доступность = РольДоступна("гф_ПравоЗакрытиеСезона") ИЛИ РольДоступна("ПолныеПрава");
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПриИзменении(Элемент)
	Объект.Товары.Очистить();
	Объект.ТоварыВКоробах.Очистить();
	Объект.Резервы.Очистить();
	Объект.РезервыВКоробах.Очистить();
	ЗаполнитьТаблицаЗаказы();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаказыПриАктивизацииЯчейки(Элемент)
	ТД = Элементы.ТаблицаЗаказы.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если мЗаказКлиента <> ТД.Ссылка Тогда
		флЗадатьВопрос = Ложь;
		Если	РежимРаботы = 1
			И НЕ флТоварыВКоробах Тогда
			флЗадатьВопрос = Объект.Резервы.Количество() > 0;
		ИначеЕсли	РежимРаботы = 1
			И		флТоварыВКоробах Тогда
			флЗадатьВопрос = Объект.РезервыВКоробах.Количество() > 0;
		ИначеЕсли флТоварыВКоробах Тогда
			флЗадатьВопрос = Объект.ТоварыВКоробах.Количество() > 0;
		Иначе
			флЗадатьВопрос = Объект.Товары.Количество() > 0;
		КонецЕсли;
		Если флЗадатьВопрос Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОчиститьСтрокиЗаказа", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, "Очистить строки заказа?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Иначе
			мЗаказКлиента = ТД.Ссылка;
			мНазначение = ПолучитьНазначение(мЗаказКлиента);
			мКомментарий = _омОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(мЗаказКлиента,
				"Документ.ЗаказКлиента", "Комментарий");
			мДатаОбновленияИзИ5 = _омОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(мЗаказКлиента,
				"Документ.ЗаказКлиента", "гф_ДатаОбновленияИзИ5");
			мТекущаяСтрока = Элементы.ТаблицаЗаказы.ТекущаяСтрока;
			мСуммаЗаказа = _омОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(мЗаказКлиента,
				"Документ.ЗаказКлиента", "СуммаДокумента");
			мВидЦены = _омОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(мЗаказКлиента,
				"Документ.ЗаказКлиента", "гф_ВидЦены");
			ЗаполнитьЗаказИзменен();
			УправлениеДоступностьюЗаказыВКоробах();
			УправлениеДоступностьюРезервы();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЗаполнитьТаблицаЗаказы();
	УправлениеДоступностью();
	УправлениеДоступностьюТаблиц();
КонецПроцедуры

&НаКлиенте
Процедура флТоварыВКоробахПриИзменении(Элемент)
	УправлениеДоступностьюТаблиц();
КонецПроцедуры

&НаКлиенте
Процедура мНазначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураОтбора = Новый Структура("Организация, Заказ", отборОрганизация, мЗаказКлиента);
	ПараметрыФормы = Новый Структура("Отбор", СтруктураОтбора);
	ОткрытьФорму("Документ.КорректировкаНазначенияТоваров.Форма.ФормаВыбораНазначения", ПараметрыФормы, Элемент,
		УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДобавитьПриИзменении(Элемент)
	ПересчитатьИтогПоСтроке();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУдалитьПриИзменении(Элемент)
	ПересчитатьИтогПоСтроке();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	ПересчитатьИтогПоСтроке();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаСоСкидкойПриИзменении(Элемент)
	ПересчитатьИтогПоСтроке();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	ТД = Элементы.Товары.ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		Если ТД.флТолькоПросмотр = Истина Тогда
			Отказ = Истина;
		КонецЕсли;
		Если ТД.флНаличиеВЗаказе = Истина Тогда
			Если ЗапретитьИзменениеКолонки(Элемент.ТекущийЭлемент.Имя) Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВКоробахДобавитьПриИзменении(Элемент)
	ПересчитатьКоличествоПоСтрокеВКоробах("ТоварыВКоробах", "Добавить", "Удалить");
	ЗаполнитьФлажкиДобавленоОтмененоПоСтрокеВКоробах();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВКоробахУдалитьПриИзменении(Элемент)
	ПересчитатьКоличествоПоСтрокеВКоробах("ТоварыВКоробах", "Добавить", "Удалить");
	ЗаполнитьФлажкиДобавленоОтмененоПоСтрокеВКоробах();
КонецПроцедуры

//&НаКлиенте
//Процедура ТоварыВКоробахЦенаКоробаПриИзменении(Элемент)
//	ПересчитатьКоличествоПоСтрокеВКоробах("ТоварыВКоробах", "Добавить", "Удалить");
//	ЗаполнитьФлажкиДобавленоОтмененоПоСтрокеВКоробах();
//КонецПроцедуры

&НаКлиенте
Процедура ТоварыВКоробахПередНачаломИзменения(Элемент, Отказ)
	ТД = Элементы.ТоварыВКоробах.ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		Если ТД.флНаличиеВЗаказе = Истина Тогда
			Если Элемент.ТекущийЭлемент.Имя = "ТоварыВКоробахВариантКомплектации" Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВКоробахВариантКомплектацииПриИзменении(Элемент)
	ЗначениеСто = 100;
	ТД = Элементы.ТоварыВКоробах.ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		ТД.Артикул = "";
		Если ЗначениеЗаполнено(ТД.ВариантКомплектации) Тогда
			ТД.ВариантКомплектацииКоличествоПар = ЗаполнитьВариантКомплектацииКоличествоПар(ТД.ВариантКомплектации);
			ТД.Артикул = ПолучитьАртикул(ТД.ВариантКомплектации);
			ТД.ЦенаКороба = РассчитатьЦенуКороба(ТД.ВариантКомплектации);
			ТД.ЦенаКоробаСоСкидкой = ТД.ЦенаКороба * (1 - ТД.Скидка / ЗначениеСто);
			//ТД.СтавкаНДС = гф_ЗаполнитьСтавкуНДС(ТД.ВариантКомплектации);
	ЗаполнитьДокОбъект();
	СтруктураДействий = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(ДокОбъект, Истина);
	ТД.СтавкаНДС = гф_ЗаполнитьСтавкуНДС(ТД.ВариантКомплектации, СтруктураДействий);
			ПересчитатьКоличествоПоСтрокеВКоробах("ТоварыВКоробах", "Добавить", "Удалить");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ЗапретитьИзменениеКолонки(Имя)
	// тч Товары
	Если Имя = "ТоварыНоменклатура" Тогда
		Возврат Истина;
	КонецЕсли;
	Если Имя = "ТоварыХарактеристика" Тогда
		Возврат Истина;
	КонецЕсли;
	Если Имя = "ТоварыЦена" Тогда
		Возврат Истина;
	КонецЕсли;
	Если Имя = "Товарыгф_ЦенаСоСкидкой" Тогда
		Возврат Истина;
	КонецЕсли;
	Если Имя = "ТоварыСтавкаНДС" Тогда
		Возврат Истина;
	КонецЕсли;
	// тч Резервы
	Если Имя = "РезервыНоменклатура" Тогда
		Возврат Истина;
	КонецЕсли;
	Если Имя = "РезервыХарактеристика" Тогда
		Возврат Истина;
	КонецЕсли;
	Если Имя = "РезервыЦена" Тогда
		Возврат Истина;
	КонецЕсли;
	Если Имя = "Резервыгф_ЦенаСоСкидкой" Тогда
		Возврат Истина;
	КонецЕсли;
	Если Имя = "РезервыСтавкаНДС" Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура РезервыПередНачаломИзменения(Элемент, Отказ)
	ТД = Элементы.Резервы.ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		Если ТД.флТолькоПросмотр = Истина Тогда
			Отказ = Истина;
		КонецЕсли;
		Если ТД.флНаличиеВЗаказе = Истина Тогда
			Если ЗапретитьИзменениеКолонки(Элемент.ТекущийЭлемент.Имя) Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РезервыВКоробахЗарезервироватьПриИзменении(Элемент)
	ПересчитатьКоличествоПоСтрокеВКоробах("РезервыВКоробах", "", "", "ПеренестиВДругойЗаказ");
КонецПроцедуры

&НаКлиенте
Процедура РезервыВКоробахСнятьРезервПриИзменении(Элемент)
	ПересчитатьКоличествоПоСтрокеВКоробах("РезервыВКоробах", "", "", "ПеренестиВДругойЗаказ");
КонецПроцедуры

&НаКлиенте
Процедура РезервыВКоробахЦенаКоробаПриИзменении(Элемент)
	ПересчитатьКоличествоПоСтрокеВКоробах("РезервыВКоробах", "", "", "ПеренестиВДругойЗаказ");
КонецПроцедуры

&НаКлиенте
Процедура РезервыВКоробахПеренестиВДругойЗаказПриИзменении(Элемент)
	ПересчитатьКоличествоПоСтрокеВКоробах("РезервыВКоробах", "", "", "ПеренестиВДругойЗаказ");
КонецПроцедуры

&НаКлиенте
Процедура РезервыНовоеНазначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДополнительныеПараметры = Новый Структура("ИмяТЧ, ИмяРеквизита", "Резервы", "НовоеНазначение");
	Оповещение = Новый ОписаниеОповещения("РезервыВыборНазначенияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Номенклатура = Неопределено;
	Характеристика = Неопределено;
	ТД = Элементы["Резервы"].ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		Номенклатура = ТД["Номенклатура"];
		Характеристика = ТД["Характеристика"];
	КонецЕсли;
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("мЗаказКлиента", мЗаказКлиента);
	ПараметрыФормы.Вставить("ВариантКомплектации", Неопределено);
	ПараметрыФормы.Вставить("Номенклатура", Номенклатура);
	ПараметрыФормы.Вставить("Характеристика", Характеристика);
	ПараметрыФормы.Вставить("РезервыВКоробах", Ложь);
	ПараметрыФормы.Вставить("ПеренестиНовоеНазначение", Ложь);
	Если ИмяФормы = "ВнешняяОбработка.гф_КорректировкаЗаказовРезервов.Форма.Форма" Тогда
		ОткрытьФорму("ВнешняяОбработка.гф_КорректировкаЗаказовРезервов.Форма.ФормаВыбораНазначения", ПараметрыФормы,
			ЭтотОбъект, , , , Оповещение);
	Иначе
		ОткрытьФорму("Обработка.гф_КорректировкаЗаказовРезервов.Форма.ФормаВыбораНазначения", ПараметрыФормы,
			ЭтотОбъект, , , , Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезервыВыборНазначенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИмяТЧ = ДополнительныеПараметры.ИмяТЧ;
	ИмяРеквизита = ДополнительныеПараметры.ИмяРеквизита;
	Если ИмяРеквизита = "НовоеНазначение" Тогда
		ИмяРеквизитаКоличество = "ПеренестиРезерв";
	Иначе
		ИмяРеквизитаКоличество = "ПеренестиВДругойЗаказ";
	КонецЕсли;
	ТД = Элементы[ИмяТЧ].ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		ТД[ИмяРеквизита] = Результат.Назначение;
		Если ИмяРеквизита = "НовоеНазначение" Тогда
			ТД[ИмяРеквизитаКоличество] = Результат.Количество;
			ТД["ПеренестиРезервМаксимум"] = Результат.Количество;
			//ЗаполнитьПеренестиРезервВКоробах(ИмяТЧ, ТД, Результат.Назначение);
			//Если ИмяТЧ = "РезервыВКоробах" Тогда
			//КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПеренестиРезервВКоробах(ИмяТЧ, ТД, Назначение)
	Если ИмяТЧ <> "РезервыВКоробах" Тогда
		Возврат;
	КонецЕсли;
	// здесь надо заполнить поле Перенести резерв с учетом "недостачи" Варианта комплектации в Новом назначении
КонецПроцедуры

&НаКлиенте
Процедура РезервыПеренестиНовоеНазначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ДополнительныеПараметры = Новый Структура("ИмяТЧ, ИмяРеквизита", "Резервы", "ПеренестиНовоеНазначение");
	Оповещение = Новый ОписаниеОповещения("РезервыВыборНазначенияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	// при переносе в другой заказ фильтр по Номенклатуре - Характеристике не применяем
	Номенклатура = Неопределено;
	Характеристика = Неопределено;
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("мЗаказКлиента", мЗаказКлиента);
	ПараметрыФормы.Вставить("ВариантКомплектации", Неопределено);
	ПараметрыФормы.Вставить("Номенклатура", Номенклатура);
	ПараметрыФормы.Вставить("Характеристика", Характеристика);
	ПараметрыФормы.Вставить("РезервыВКоробах", Ложь);
	ПараметрыФормы.Вставить("ПеренестиНовоеНазначение", Истина);
	Если ИмяФормы = "ВнешняяОбработка.гф_КорректировкаЗаказовРезервов.Форма.Форма" Тогда
		ОткрытьФорму("ВнешняяОбработка.гф_КорректировкаЗаказовРезервов.Форма.ФормаВыбораНазначения", ПараметрыФормы,
			ЭтотОбъект, , , , Оповещение);
	Иначе
		ОткрытьФорму("Обработка.гф_КорректировкаЗаказовРезервов.Форма.ФормаВыбораНазначения", ПараметрыФормы,
			ЭтотОбъект, , , , Оповещение);
	КонецЕсли;
	
КонецПроцедуры

//&НаКлиенте
//Процедура РезервыЗарезервироватьПриИзменении(Элемент)
//	ПересчитатьИтогПоСтрокеРезерва();
//КонецПроцедуры

//&НаКлиенте
//Процедура РезервыСнятьРезервПриИзменении(Элемент)
//	ПересчитатьИтогПоСтрокеРезерва();
//КонецПроцедуры

&НаКлиенте
Процедура РезервыПеренестиВДругойЗаказПриИзменении(Элемент)
	ПересчитатьИтогПоСтрокеРезерва();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьТаблицаЗаказы()
	
	// сначала заполним отборСтатус
	Если РежимРаботы = 0 Тогда
		отборСтатус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
	Иначе
		отборСтатус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
	КонецЕсли;
	
	ТаблицаЗаказы.Отбор.Элементы.Очистить();
	// отбор по Организации
	Если ЗначениеЗаполнено(отборОрганизация) Тогда
		ЭлементОтбора = ТаблицаЗаказы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Организация");
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование		= Истина;
		ЭлементОтбора.ПравоеЗначение	= отборОрганизация;
		ЭлементОтбора.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;
	// отбор по Складу
	Если ЗначениеЗаполнено(отборСклад) Тогда
		ЭлементОтбора = ТаблицаЗаказы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Склад");
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование		= Истина;
		ЭлементОтбора.ПравоеЗначение	= отборСклад;
		ЭлементОтбора.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;
	// отбор по Статусу
	Если ЗначениеЗаполнено(отборСтатус) Тогда
		ЭлементОтбора = ТаблицаЗаказы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Статус");
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование		= Истина;
		ЭлементОтбора.ПравоеЗначение	= отборСтатус;
		ЭлементОтбора.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;
	// отбор по Контрагенту
	Если ЗначениеЗаполнено(отборКонтрагент) Тогда
		ЭлементОтбора = ТаблицаЗаказы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Партнер");
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование		= Истина;
		ЭлементОтбора.ПравоеЗначение	= отборКонтрагент.Партнер;
		ЭлементОтбора.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;
	// отбор по Сезону
	Если ЗначениеЗаполнено(отборСезон) Тогда
		ЭлементОтбора = ТаблицаЗаказы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Договор.гф_Сезон");
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование		= Истина;
		ЭлементОтбора.ПравоеЗначение	= отборСезон;
		ЭлементОтбора.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;
	// отбор по Периоду
	Если ЗначениеЗаполнено(отборПериод.ДатаНачала) Тогда
		ЭлементОтбора = ТаблицаЗаказы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Дата");
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ЭлементОтбора.Использование		= Истина;
		ЭлементОтбора.ПравоеЗначение	= отборПериод.ДатаНачала;
		ЭлементОтбора.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;
	Если ЗначениеЗаполнено(отборПериод.ДатаОкончания) Тогда
		ЭлементОтбора = ТаблицаЗаказы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Дата");
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		ЭлементОтбора.Использование		= Истина;
		ЭлементОтбора.ПравоеЗначение	= отборПериод.ДатаОкончания;
		ЭлементОтбора.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросОчиститьСтрокиЗаказа(Ответ, ДопПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если	РежимРаботы = 1
			И НЕ флТоварыВКоробах Тогда
			Объект.Резервы.Очистить();
		ИначеЕсли	РежимРаботы = 1
				И		флТоварыВКоробах Тогда
			Объект.РезервыВКоробах.Очистить();
		ИначеЕсли флТоварыВКоробах Тогда
			Объект.ТоварыВКоробах.Очистить();
		Иначе
			Объект.Товары.Очистить();
		КонецЕсли;
		ТД = Элементы.ТаблицаЗаказы.ТекущиеДанные;
		Если ТД <> Неопределено Тогда
			мЗаказКлиента = ТД.Ссылка;
			мНазначение = ПолучитьНазначение(мЗаказКлиента);
			мКомментарий = _омОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(мЗаказКлиента,
				"Документ.ЗаказКлиента", "Комментарий");
			мДатаОбновленияИзИ5 = _омОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(мЗаказКлиента,
				"Документ.ЗаказКлиента", "гф_ДатаОбновленияИзИ5");
			мТекущаяСтрока = Элементы.ТаблицаЗаказы.ТекущаяСтрока;
			мСуммаЗаказа = _омОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(мЗаказКлиента,
				"Документ.ЗаказКлиента", "СуммаДокумента");
			мВидЦены = _омОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(мЗаказКлиента,
				"Документ.ЗаказКлиента", "гф_ВидЦены");
			ЗаполнитьЗаказИзменен();
			УправлениеДоступностьюЗаказыВКоробах();
			УправлениеДоступностьюРезервы();
			ЗаполнитьДанныеЗаказа(Неопределено);
		КонецЕсли;
	Иначе
		Элементы.ТаблицаЗаказы.ТекущаяСтрока = мТекущаяСтрока;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокОбъект()
	ЗаказОбъект = мЗаказКлиента.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(ЗаказОбъект, "ДокОбъект");
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеЗаказаНаСервере()
	
	Объект.Товары.Очистить();
	Объект.ТоварыВКоробах.Очистить();
	Объект.Резервы.Очистить();
	Объект.РезервыВКоробах.Очистить();
	
	мСуммаЗаказа = 0;
	мВидЦены = Справочники.ВидыЦен.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(мЗаказКлиента) Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимРаботы = 1 Тогда
		ЗаполнитьТЧРезервыНаСервере();
	Иначе
		ЗаполнитьТЧТоварыНаСервере();
	КонецЕсли;
	
	мСуммаЗаказа = мЗаказКлиента.СуммаДокумента;
	мВидЦены = мЗаказКлиента.гф_ВидЦены;
	флДанныеЗаказаЗаполнены = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧТоварыНаСервере()
			
	НомерВерсииЗаказа = НайтиНомерВерсииЗаказа(мЗаказКлиента);
	Если НомерВерсииЗаказа = Неопределено Тогда
		ТекстСообщения = "Для Заказа:" + мЗаказКлиента
			+ " НЕТ сохраненных ранее версий объекта. Заполнение не возможно!";
		СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	Если флТоварыВКоробах Тогда
		// здесь надо получить первоначальные данные заказа из регистра сведений ВерсииОбъектов и текущие данные заказа
		ЗаполнитьТЧВКоробах("ТоварыВКоробах");
		ЗаполнитьКоличествоПар("ТоварыВКоробах");
		
	Иначе	
		// здесь надо получить первоначальные данные заказа из регистра сведений ВерсииОбъектов и текущие данные заказа
		ЗаполнитьТЧВПарах("Товары");
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧРезервыНаСервере()
	
	НомерВерсииЗаказа = НайтиНомерВерсииЗаказаПоСтатусу(мЗаказКлиента, ВыборСтатуса);
	Если НомерВерсииЗаказа = Неопределено Тогда
		ТекстСообщения = "Для Заказа:" + мЗаказКлиента
			+ " НЕТ сохраненных ранее версий объекта. Заполнение не возможно!";
		СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	Если флТоварыВКоробах Тогда
		// здесь надо получить первоначальные данные заказа из регистра сведений ВерсииОбъектов и текущие данные заказа
		// в зависимости от переключателя: "На согласовании/К выполнению"
		ЗаполнитьТЧВКоробах("РезервыВКоробах", НомерВерсииЗаказа);
		ЗаполнитьКоличествоПар("РезервыВКоробах");
			
		ЗаполнитьРезервыВКоробахНаСервере();

	Иначе
		// здесь надо получить первоначальные данные заказа из регистра сведений ВерсииОбъектов и текущие данные заказа
		// в зависимости от переключателя: "На согласовании/К выполнению"
		ЗаполнитьТЧВПарах("Резервы", НомерВерсииЗаказа);
		
		ЗаполнитьРезервыНаСервере();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеЗаказа(Команда)
	ЗаполнитьУпаковочныеЛисты();
	ЗаполнитьДанныеЗаказаНаСервере();
	ЗаполнитьВариантыКомплектации();
	флЗаказИзменен = Ложь;
	УправлениеДоступностью();
	Если РежимРаботы = 1
		И флТоварыВКоробах Тогда
		Если флПоказатьПротоколРаспределенияРезервов И флПоказатьПротоколРапределения Тогда
			ТабДок = ПолучитьИзВременногоХранилища(РаспределениеРезервовАдресХранилища);
			ТабДок.Показать("Протокол распределения резервов");
		КонецЕсли;
		Если флПоказатьПротоколРаспределенияОстатков И флПоказатьПротоколРапределения Тогда
			ТабДок = ПолучитьИзВременногоХранилища(РаспределениеОстатковАдресХранилища);
			ТабДок.Показать("Протокол распределения свободных остатков");
		КонецЕсли;
	КонецЕсли;
	ПересчитатьСуммуЗаказаПредварительно();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИтогПоСтроке(СтрокаТаблицы = Неопределено)
	Если СтрокаТаблицы = Неопределено Тогда
		ТД = Элементы.Товары.ТекущиеДанные;
	Иначе
		ТД = СтрокаТаблицы;
	КонецЕсли;
	Если ТД <> Неопределено Тогда
		ТД.КоличествоУпаковок = ТД.КоличествоСИзменениями + ТД.Добавить - ТД.Удалить;
		Если ТД.Количество < 0 Тогда
			ТекстСообщения = "Отрицательный предварительный итог в строке заказа:" + ТД.НомерСтроки;
			СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТД.Добавить) ИЛИ ЗначениеЗаполнено(ТД.Удалить) Тогда
			ТД["Пометка"] = Истина;
		Иначе
			ТД["Пометка"] = Ложь;
		КонецЕсли;
		//СтруктураДействий = Новый Структура;
		//ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ДокОбъект);
		//ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТД, СтруктураДействий, Неопределено);
	КонецЕсли;
	ЗаполнитьЗаказИзменен();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаказИзменен()
	Если РежимРаботы = 1 Тогда
		Если	Объект.Резервы.Итог("ПеренестиВДругойЗаказ") <> 0
			ИЛИ	Объект.РезервыВКоробах.Итог("ПеренестиВДругойЗаказ") <> 0 Тогда
			флЗаказИзменен = Истина;
		Иначе
			флЗаказИзменен = Ложь;
		КонецЕсли;
	ИначеЕсли	Объект.Товары.Итог("Добавить") <> 0
			ИЛИ	Объект.Товары.Итог("Удалить") <> 0
			ИЛИ	Объект.ТоварыВКоробах.Итог("Добавить") <> 0
			ИЛИ	Объект.ТоварыВКоробах.Итог("Удалить") <> 0 Тогда
			флЗаказИзменен = Истина;
	Иначе
		флЗаказИзменен = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеПередЗаписьюРезервы()
	Если НЕ ЗначениеЗаполнено(мНазначение) Тогда
		СообщитьПользователю("Необходимо выбрать Текущее назначение.");
		флЕстьОшибкиЗаполнения = Истина;
	КонецЕсли;
	Если	Объект.Резервы.Итог("ПеренестиВДругойЗаказ") > 0
		И 	(НЕ ЗначениеЗаполнено(мПричинаДобавления)
		ИЛИ НЕ ЗначениеЗаполнено(мПричинаУдаления)) Тогда
		СообщитьПользователю("Необходимо указать Причину добавления и Причину удаления.");
		флЕстьОшибкиЗаполнения = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступноНаСкладеПоСтроке(СтрокаТЧ, ТекстОшибки)
	Если	ЗначениеЗаполнено(СтрокаТЧ["Зарезервировать"])
		И	СтрокаТЧ["Зарезервировать"] > СтрокаТЧ["ДоступноНаСкладе"] Тогда
		ТекстОшибки = ТекстОшибки + "Зарезервировать превышает Остатки на складе. ";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗарезервироватьСнятьРезервПоСтроке(СтрокаТЧ, ТекстОшибки)
	Если	ЗначениеЗаполнено(СтрокаТЧ["Зарезервировать"])
		И	ЗначениеЗаполнено(СтрокаТЧ["СнятьРезерв"]) Тогда
		ТекстОшибки = ТекстОшибки + "В строка указаны Зарезервировать и Снять резерв одновременно. ";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПеренестиРезервПоСтроке(СтрокаТЧ, ТекстОшибки)
	Если	ЗначениеЗаполнено(СтрокаТЧ["ПеренестиРезерв"])
		И	НЕ ЗначениеЗаполнено(СтрокаТЧ["НовоеНазначение"]) Тогда
		ТекстОшибки = ТекстОшибки + "Для переноса резерва надо указать Количество и Новое назначение одновременно. ";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПеренестиВДругойЗаказПоСтроке(СтрокаТЧ, ТекстОшибки)
	Если	ЗначениеЗаполнено(СтрокаТЧ["ПеренестиВДругойЗаказ"])
		И	НЕ ЗначениеЗаполнено(СтрокаТЧ["ПеренестиНовоеНазначение"]) Тогда
		ТекстОшибки = ТекстОшибки
		+ "Для переноса резерва в другой заказ надо указать Количество и Новое назначение одновременно. ";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКоличествоПоСтроке(СтрокаТЧ, ТекстОшибки)
	Если СтрокаТЧ["Количество"] < 0 Тогда
		ТекстОшибки = ТекстОшибки + "Отрицательный предварительный итог. ";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеПередЗаписьюТЧРезервы()
	Для Каждого СтрокаТЧ Из Объект.Резервы Цикл
		ТекстОшибки = "";
		ПроверитьДоступноНаСкладеПоСтроке(СтрокаТЧ, ТекстОшибки);
		ПроверитьЗарезервироватьСнятьРезервПоСтроке(СтрокаТЧ, ТекстОшибки);
		ПроверитьПеренестиРезервПоСтроке(СтрокаТЧ, ТекстОшибки);
		ПроверитьПеренестиВДругойЗаказПоСтроке(СтрокаТЧ, ТекстОшибки);
		ПроверитьКоличествоПоСтроке(СтрокаТЧ, ТекстОшибки);
		Если ТекстОшибки <> "" Тогда
			ТекстСообщения = ТекстОшибки + " в строке:" + СтрокаТЧ["НомерСтроки"];
			СообщитьПользователю(ТекстСообщения);
			флЕстьОшибкиЗаполнения = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеПередЗаписьюТЧРезервыВКоробах()
	Если Объект.РезервыВКоробах.Итог("ПеренестиВДругойЗаказ") > 0 Тогда
		Если Не ЗначениеЗаполнено(мПричинаУдаления)
			ИЛИ Не ЗначениеЗаполнено(мПричинаДобавления) Тогда
			ТекстСообщения = "Для переноса резерва в другой заказ надо указать Причину удаления и Причину добавления.";
			СообщитьПользователю(ТекстСообщения);
			флЕстьОшибкиЗаполнения = Истина;
		КонецЕсли;
	КонецЕсли;
	Для Каждого СтрокаТЧ Из Объект.РезервыВКоробах Цикл
		ТекстОшибки = "";
		ПроверитьПеренестиРезервПоСтроке(СтрокаТЧ, ТекстОшибки);
		ПроверитьПеренестиВДругойЗаказПоСтроке(СтрокаТЧ, ТекстОшибки);
		Если ТекстОшибки <> "" Тогда
			ТекстСообщения = ТекстОшибки + " в строке:" + СтрокаТЧ["НомерСтроки"];
			СообщитьПользователю(ТекстСообщения);
			флЕстьОшибкиЗаполнения = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеПередЗаписьюТЧТоварыВКоробах()
	Для Каждого СтрокаТЧ Из Объект.ТоварыВКоробах Цикл
		ПроверитьЗаполнениеСтрокиПередЗаписьюТЧТоварыВКоробах(СтрокаТЧ);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеСтрокиПередЗаписьюТЧТоварыВКоробах(СтрокаТЧ)
	ТекстОшибки = "";
	Если НЕ ЗначениеЗаполнено(СтрокаТЧ["ВариантКомплектации"]) Тогда
		ТекстОшибки = ТекстОшибки + "Не указан ВариантКомплектации. ";
	КонецЕсли;
	Если	ЗначениеЗаполнено(СтрокаТЧ["Добавить"])
		И	НЕ ЗначениеЗаполнено(СтрокаТЧ["ПричинаДобавления"]) Тогда
		ТекстОшибки = ТекстОшибки + "В строке НЕ указана Причина добавления. ";
	КонецЕсли;
	Если	ЗначениеЗаполнено(СтрокаТЧ["Добавить"])
		И	НЕ ЗначениеЗаполнено(СтрокаТЧ["ЦенаКоробаСоСкидкой"]) Тогда
		ТекстОшибки = ТекстОшибки + "В строке НЕ указана Цена короба со скидкой. ";
	КонецЕсли;
	Если	ЗначениеЗаполнено(СтрокаТЧ["Удалить"])
		И	НЕ ЗначениеЗаполнено(СтрокаТЧ["ПричинаОтмены"]) Тогда
		ТекстОшибки = ТекстОшибки + "В строке НЕ указана Причина отмены. ";
	КонецЕсли;
	Если	ЗначениеЗаполнено(СтрокаТЧ["Добавить"])
		И	ЗначениеЗаполнено(СтрокаТЧ["Удалить"]) Тогда
		ТекстОшибки = ТекстОшибки + "В строка указаны Добавить и Удалить одновременно. ";
	КонецЕсли;
	Если ТекстОшибки <> "" Тогда
		ТекстСообщения = ТекстОшибки + " в строке:" + СтрокаТЧ["НомерСтроки"];
		СообщитьПользователю(ТекстСообщения);
		флЕстьОшибкиЗаполнения = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеПередЗаписьюТЧТовары()
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		Если НЕ СтрокаТЧ["Пометка"] Тогда
			Продолжить;
		КонецЕсли;
		ТекстОшибки = "";
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ["Номенклатура"]) Тогда
			ТекстОшибки = ТекстОшибки + "Не указана Номенклатура. ";
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТЧ["Номенклатура"]) Тогда
			ПроверитьЗаполнениеХарактеристики(СтрокаТЧ["Номенклатура"], СтрокаТЧ["Характеристика"], ТекстОшибки);
		КонецЕсли;
		Если	ЗначениеЗаполнено(СтрокаТЧ["Количество"])
			И	НЕ ЗначениеЗаполнено(СтрокаТЧ["Цена"]) Тогда
			ТекстОшибки = ТекстОшибки + "Не указана Цена. ";
		КонецЕсли;
		Если	ЗначениеЗаполнено(СтрокаТЧ["Добавить"])
			И	НЕ ЗначениеЗаполнено(СтрокаТЧ["ПричинаДобавления"]) Тогда
			ТекстОшибки = ТекстОшибки + "В строке НЕ указана Причина добавления. ";
		КонецЕсли;
		Если	ЗначениеЗаполнено(СтрокаТЧ["Удалить"])
			И	НЕ ЗначениеЗаполнено(СтрокаТЧ["ПричинаУдаления"]) Тогда
			ТекстОшибки = ТекстОшибки + "В строке НЕ указана Причина удаления. ";
		КонецЕсли;
		Если	ЗначениеЗаполнено(СтрокаТЧ["Добавить"])
			И	ЗначениеЗаполнено(СтрокаТЧ["Удалить"]) Тогда
			ТекстОшибки = ТекстОшибки + "В строке указаны Добавить и Удалить одновременно. ";
		КонецЕсли;
		Если СтрокаТЧ["Количество"] < 0 Тогда
			ТекстОшибки = ТекстОшибки + "Отрицательный предварительный итог. ";
		КонецЕсли;
		Если ТекстОшибки <> "" Тогда
			ТекстСообщения = ТекстОшибки + " в строке:" + СтрокаТЧ["НомерСтроки"];
			СообщитьПользователю(ТекстСообщения);
			флЕстьОшибкиЗаполнения = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеПередЗаписью()
	флЕстьОшибкиЗаполнения = Ложь;
	Если РежимРаботы = 1 Тогда
		// Резервы по заказам
		Если флТоварыВКоробах Тогда
			ПроверитьЗаполнениеПередЗаписьюТЧРезервыВКоробах();
		Иначе
			ПроверитьЗаполнениеПередЗаписьюРезервы();
			ПроверитьЗаполнениеПередЗаписьюТЧРезервы();
		КонецЕсли;
	Иначе
		// Заказы на согласовании
		Если флТоварыВКоробах Тогда
			ПроверитьЗаполнениеПередЗаписьюТЧТоварыВКоробах();
		Иначе
			ПроверитьЗаполнениеПередЗаписьюТЧТовары();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьЗаказ(Ответ, ДопПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыполнитьСохранениеЗаказа();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	ПроверитьЗаполнениеПередЗаписью();
	Если флЕстьОшибкиЗаполнения Тогда
		Возврат;
	Иначе
		ВыполнитьСохранениеЗаказа();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТЧТоварыПоРезервам()
	МаксимальныйКодСтроки = МаксимальныйКодСтрокиВЗаказеКлиента(мЗаказКлиента);
	Для Каждого СтрокаТЧ Из Объект.Резервы Цикл
		флПродолжить = ПроверитьКоличествоНаличиеВЗаказе(СтрокаТЧ);
		Если флПродолжить Тогда
			// здесь строки нет в текущей версии заказа (была в первой версии) и количество не указано - пропускаем эту строку
			Продолжить;
		КонецЕсли;
		
		флПродолжить = ПроверитьЗарезервироватьСнятьРезервПеренестиВДругойЗаказ(СтрокаТЧ);
		Если флПродолжить Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТЧ["ПеренестиВДругойЗаказ"]) Тогда
			//
			// здесь готовим строки для удаления из текущего заказа
			//
			нс = тчТовары.Добавить();
			ЗаполнитьЗначенияСвойств(нс, СтрокаТЧ);
			нс.ИдентификаторСтроки = Новый УникальныйИдентификатор;
			нс.Количество = СтрокаТЧ["ПеренестиВДругойЗаказ"];
			нс.КоличествоУпаковок = нс.Количество;
			нс.гф_ДобавленоПоПричине = Ложь;
			нс.гф_ПричинаДобавления = Неопределено;
			нс.Отменено = Истина;
			нс.ПричинаОтмены = мПричинаУдаления;
			МаксимальныйКодСтроки = МаксимальныйКодСтроки + 1;
			нс.КодСтроки = МаксимальныйКодСтроки;
			нс.флПересчитатьСтроку = Истина;
			нс.Назначение = мНазначение;
		    //
			// здесь готовим строки для переноса в другие заказы
			//
			нс = тчТовары.Добавить();
			ЗаполнитьЗначенияСвойств(нс, СтрокаТЧ);
			нс.ИдентификаторСтроки = Новый УникальныйИдентификатор;
			нс.Количество = СтрокаТЧ["ПеренестиВДругойЗаказ"];
			нс.КоличествоУпаковок = нс.Количество;
			нс.гф_ДобавленоПоПричине = Истина;
			нс.гф_ПричинаДобавления = мПричинаДобавления;
			нс.Отменено = Ложь;
			нс.ПричинаОтмены = Неопределено;
			нс.флПересчитатьСтроку = Истина;
			нс.Назначение = СтрокаТЧ["ПеренестиНовоеНазначение"];
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПроверитьКоличествоНаличиеВЗаказе(СтрокаТЧ)
	Если Не ЗначениеЗаполнено(СтрокаТЧ["КоличествоУпаковок"]) И СтрокаТЧ["флНаличиеВЗаказе"] = Ложь Тогда
		// здесь строки нет в текущей версии заказа (была в первой версии) и количество не указано - пропускаем эту строку
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ПроверитьДобавитьУдалить(СтрокаТЧ)
	Если	Не ЗначениеЗаполнено(СтрокаТЧ["Добавить"])
		И	Не ЗначениеЗаполнено(СтрокаТЧ["Удалить"]) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ПроверитьЗарезервироватьСнятьРезервПеренестиВДругойЗаказ(СтрокаТЧ)
	Если Не ЗначениеЗаполнено(СтрокаТЧ["ПеренестиВДругойЗаказ"]) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция УдалитьВсеКоличествоИзЗаказа(СтрокаТЧ, УдалитьИзЗаказа)
	Если	ЗначениеЗаполнено(УдалитьИзЗаказа)
		И	СтрокаТЧ["Количество"] = 0
		И	СтрокаТЧ["КоличествоСИзменениями"] = УдалитьИзЗаказа Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьТЧТоварыПоТоварам()
	МаксимальныйКодСтроки = МаксимальныйКодСтрокиВЗаказеКлиента(мЗаказКлиента);
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		Если НЕ СтрокаТЧ["Пометка"] Тогда
			Продолжить;
		КонецЕсли;
		флПродолжить = ПроверитьКоличествоНаличиеВЗаказе(СтрокаТЧ);
		Если флПродолжить Тогда
			// здесь строки нет в текущей версии заказа (была в первой версии) и количество не указано - пропускаем эту строку
			Продолжить;
		КонецЕсли;
		
		флПродолжить = ПроверитьДобавитьУдалить(СтрокаТЧ);
		Если флПродолжить Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТЧ["Добавить"]) Тогда
			//
			// добавляем строку "добавлено"
			//
			нс = тчТовары.Добавить();
			ЗаполнитьЗначенияСвойств(нс, СтрокаТЧ);
			нс.ИдентификаторСтроки = Новый УникальныйИдентификатор;
			нс.Количество = СтрокаТЧ["Добавить"];
			нс.КоличествоУпаковок = нс.Количество;
			нс.гф_ДобавленоПоПричине = Истина;
			нс.гф_ПричинаДобавления = СтрокаТЧ["ПричинаДобавления"];
			нс.Отменено = Ложь;
			нс.ПричинаОтмены = Неопределено;
			нс.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.КОбеспечению");
			МаксимальныйКодСтроки = МаксимальныйКодСтроки + 1;
			нс.КодСтроки = МаксимальныйКодСтроки;
			нс.флПересчитатьСтроку = Истина;
			нс.Назначение = мНазначение;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТЧ["Удалить"]) Тогда
			//
			// корректируем "исходную" строку
			//
			Если СтрокаТЧ["КоличествоУпаковок"] = 0 Тогда
				// здесь отменяем ВСЕ исходные строки (Номенклатура/Характеристика)
				нс = тчТовары.Добавить();
				ЗаполнитьЗначенияСвойств(нс, СтрокаТЧ);
				нс.Количество = СтрокаТЧ["КоличествоСИзменениями"];
				нс.КоличествоУпаковок = нс.Количество;
				//нс.гф_ДобавленоПоПричине = Ложь;
				//нс.гф_ПричинаДобавления = Неопределено;
				нс.Отменено = Истина;
				нс.ПричинаОтмены = СтрокаТЧ["ПричинаУдаления"];
				нс.флПересчитатьСтроку = Ложь;
				нс.Назначение = мНазначение;
            Иначе
				// здесь исправляем Количество в "исходной" строке (Номенклатура/Характеристика)
				нс = тчТовары.Добавить();
				ЗаполнитьЗначенияСвойств(нс, СтрокаТЧ);
				нс.Количество = СтрокаТЧ["КоличествоУпаковок"];
				нс.КоличествоУпаковок = нс.Количество;
				//нс.гф_ДобавленоПоПричине = Ложь;
				//нс.гф_ПричинаДобавления = Неопределено;
				//нс.Отменено = Истина;
				//нс.ПричинаОтмены = СтрокаТЧ["ПричинаУдаления"];
				//МаксимальныйКодСтроки = МаксимальныйКодСтроки + 1;
				//нс.КодСтроки = МаксимальныйКодСтроки;
				нс.флПересчитатьСтроку = Истина;
				нс.Назначение = мНазначение;
				
				//
				// добавляем строку "отменено"
				//
				нс = тчТовары.Добавить();
				ЗаполнитьЗначенияСвойств(нс, СтрокаТЧ);
				нс.ИдентификаторСтроки = Новый УникальныйИдентификатор;
				нс.Количество = СтрокаТЧ["Удалить"];
				нс.КоличествоУпаковок = нс.Количество;
				//нс.гф_ДобавленоПоПричине = Ложь;
				//нс.гф_ПричинаДобавления = Неопределено;
				нс.Отменено = Истина;
				нс.ПричинаОтмены = СтрокаТЧ["ПричинаУдаления"];
				нс.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.КОбеспечению");
				МаксимальныйКодСтроки = МаксимальныйКодСтроки + 1;
				нс.КодСтроки = МаксимальныйКодСтроки;
				нс.флПересчитатьСтроку = Истина;
				нс.Назначение = мНазначение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция гф_ТекущаяДатаСеанса()
	Возврат ТекущаяДатаСеанса();
КонецФункции

&НаКлиенте
Процедура ПересчитатьТЧТовары(флЗаписатьЗаказ)
	ЗаполнитьДокОбъект();
	ЗначениеСто = 100;
	Для Каждого СтрокаТЧ Из тчТовары Цикл
		Если СтрокаТЧ.Отменено Тогда
			флЗаписатьЗаказ = Истина;
		КонецЕсли;
		Если Не СтрокаТЧ.флПересчитатьСтроку Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ДокОбъект);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, Неопределено);
		ТД = СтрокаТЧ;
		ДатаЗаказа = гф_ТекущаяДатаСеанса();
		ЗаполнитьВидЦеныПроцентРучнойСкидки(ТД, ДатаЗаказа);
		Если ЗначениеЗаполнено(ТД.ВидЦены) Тогда
			Отбор = Новый Структура;
			Отбор.Вставить("Номенклатура", ТД.Номенклатура);			
			Отбор.Вставить("ВидЦены", ТД.ВидЦены);
			ЗаполнитьЦену(ТД, Отбор, ДатаЗаказа);
		КонецЕсли;
		// Цена со скидкой
		ТД.гф_ЦенаСоСкидкой = ТД.Цена * (1 - ТД.ПроцентРучнойСкидки / ЗначениеСто);
		// Сумма с НДС
		Если НЕ ЗначениеЗаполнено(ТД.СтавкаНДС) Тогда
			ТД.СтавкаНДС = ПолучитьЗначениеРеквизита(ТД.Номенклатура, "СтавкаНДС");
		КонецЕсли;
		Ставка = 0;
		Если ЗначениеЗаполнено(ТД.СтавкаНДС) Тогда
			Ставка = ПолучитьЗначениеРеквизита(ТД.СтавкаНДС, "Ставка");
		КонецЕсли;
		ТД.Сумма = ТД.КоличествоУпаковок * ТД.гф_ЦенаСоСкидкой;
		// пересчет НДС с учетом скидки
		ТД.СуммаНДС = ТД.Сумма * (Ставка / ЗначениеСто);
		ТД.СуммаНДСБезВозвратнойТары = ТД.Сумма * (Ставка / ЗначениеСто);
		// пересчет Сумма с НДС с учетом скидки
		ТД.СуммаСНДС = ТД.Сумма + ТД.СуммаНДС;
		ТД.СуммаСНДСБезВозвратнойТары = ТД.Сумма + ТД.СуммаНДС;
		флЗаписатьЗаказ = Истина;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЦену(ДатаЗаказа, Отбор)
	Возврат РегистрыСведений.ЦеныНоменклатуры25.ПолучитьПоследнее(ДатаЗаказа, Отбор).Цена;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьЦену(ТД, Отбор, ДатаЗаказа)
	ТД.Цена = ПолучитьЦену(ДатаЗаказа, Отбор);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗаказ(Назначение)
	Возврат Назначение.Заказ;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВидЦены(Заказ)
	Возврат Заказ.гф_ВидЦены;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДату(Заказ)
	Возврат Заказ.Дата;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьВидЦеныПроцентРучнойСкидки(ТД, ДатаЗаказа, Заказ = Неопределено)
	Если Заказ = Неопределено Тогда
		Если Не ЗначениеЗаполнено(ТД.Назначение) Тогда
			Возврат;
		КонецЕсли;
		Заказ = ПолучитьЗаказ(ТД.Назначение);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Заказ) Тогда
		Возврат;
	КонецЕсли;
	ТД.ВидЦены = ПолучитьВидЦены(Заказ);
	ТД.ПроцентРучнойСкидки = РассчитатьСкидку(Заказ);
	ДатаЗаказа = ПолучитьДату(Заказ);
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеРеквизита(Ссылка, ИмяРеквизита)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);

КонецФункции	


&НаКлиенте
Процедура СохранитьРезервы(флЗаписатьЗаказ)
	
	Если Не ЗначениеЗаполнено(мНазначение) Тогда
		// здесь не заполнено Назначение - документ НЕ сохраняем
		ТекстСообщения = "Не удалось получить Назначение для Заказа:" + мЗаказКлиента;
		СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	тчТовары.Очистить();
	ЗаполнитьТЧТоварыПоРезервам();
		
	ПересчитатьТЧТовары(флЗаписатьЗаказ);
		
	Если Объект.Резервы.Итог("Зарезервировать") > 0 Тогда
		СоздатьКорректировкуРезервированиеНаСервереРезервы();
	КонецЕсли;
	Если Объект.Резервы.Итог("СнятьРезерв") > 0 Тогда
		СоздатьКорректировкуСнятиеРезерваНаСервереРезервы();
	КонецЕсли;
	Если Объект.Резервы.Итог("ПеренестиРезерв") > 0 Тогда
		// здесь надо создать столько документов - сколько различных новых назначений указано в таблице
		флОшибка = ПеренестиРезервНаСервере("ПеренестиРезерв", "НовоеНазначение");
	КонецЕсли;
	Если Объект.Резервы.Итог("ПеренестиВДругойЗаказ") > 0 Тогда
		// здесь надо создать столько документов - сколько различных новых назначений указано в таблице
		флОшибка = ПеренестиРезервНаСервере("ПеренестиВДругойЗаказ", "ПеренестиНовоеНазначение", Истина);
		// здесь вносим изменения в "исходный" Заказ
		Если Не флОшибка Тогда
			ИзменитьИсходныйЗаказ();
		КонецЕсли;
		флЗаписатьЗаказ = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУпаковочныеЛисты()
	мУпаковочныеЛисты.Очистить();
	Если ЗначениеЗаполнено(мЗаказКлиента) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	УпаковочныйЛист.Ссылка КАК УпаковочныйЛист,
		               |	УпаковочныйЛист.гф_Комплектация КАК ВариантКомплектации,
		               |	УпаковочныйЛист.ВсегоМест КАК ВсегоМест
		               |ИЗ
		               |	Документ.УпаковочныйЛист КАК УпаковочныйЛист
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК Штрихкоды
		               |		ПО (Штрихкоды.Ссылка = УпаковочныйЛист.гф_Агрегация)
		               |ГДЕ
		               |	УпаковочныйЛист.Проведен
		               |	И Штрихкоды.гф_Автодействие <> ЗНАЧЕНИЕ(Перечисление.гф_АвтодействияКМ.КОтгрузке)
		               |	И УпаковочныйЛист.гф_Заказ = &гф_Заказ";
		Запрос.УстановитьПараметр("гф_Заказ", мЗаказКлиента);
		Результат = Запрос.Выполнить();
		мУпаковочныеЛисты.Загрузить(Результат.Выгрузить());
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВариантыКомплектации()
	
	мВариантыКомплектации.Очистить();
	
	Если НЕ флТоварыВКоробах Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(мЗаказКлиента) Тогда
		ИмяТЧ = ?(РежимРаботы = 1, "РезервыВКоробах", "ТоварыВКоробах");
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	СУММА(ВариантыКомплектацииНоменклатурыТовары.Количество) КАК КоличествоПар,
		               |	ВариантыКомплектацииНоменклатурыТовары.Ссылка КАК ВариантКомплектации
		               |ИЗ
		               |	Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ВариантыКомплектацииНоменклатурыТовары
		               |ГДЕ
		               |	ВариантыКомплектацииНоменклатурыТовары.Ссылка В(&ВариантыКомплектации)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВариантыКомплектацииНоменклатурыТовары.Ссылка";
		Запрос.УстановитьПараметр("ВариантыКомплектации", Объект[ИмяТЧ].Выгрузить().ВыгрузитьКолонку("ВариантКомплектации"));
		Результат = Запрос.Выполнить();
		мВариантыКомплектации.Загрузить(Результат.Выгрузить());
		
		Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
			СтруктураОтбора = Новый Структура("ВариантКомплектации", СтрокаТЧ["ВариантКомплектации"]);
			Варианты = мВариантыКомплектации.НайтиСтроки(СтруктураОтбора);
			Для Каждого Вариант Из Варианты Цикл
				СтрокаТЧ["ВариантКомплектацииКоличествоПар"] = Вариант["КоличествоПар"];
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьРезервыВКоробах(флЗаписатьЗаказ)
	
	Если Не ЗначениеЗаполнено(мНазначение) Тогда
		// здесь не заполнено Назначение - документ НЕ сохраняем
		ТекстСообщения = "Не удалось получить Назначение для Заказа:" + мЗаказКлиента;
		СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Объект.РезервыВКоробах.Итог("Зарезервировать") > 0 Тогда
		СоздатьКорректировкуРезервированиеНаСервере("РезервыВКоробах");
	КонецЕсли;
	Если Объект.РезервыВКоробах.Итог("СнятьРезерв") > 0 Тогда
		СоздатьКорректировкуСнятиеРезерваНаСервере("РезервыВКоробах");
	КонецЕсли;
	Если Объект.РезервыВКоробах.Итог("ПеренестиРезерв") > 0 Тогда
		// здесь надо создать столько документов - сколько различных новых назначений указано в таблице
		ПеренестиРезервВКоробахНаСервере("ПеренестиРезерв", "НовоеНазначение");
	КонецЕсли;
	Если Объект.РезервыВКоробах.Итог("ПеренестиВДругойЗаказ") > 0 Тогда
		// здесь надо создать столько документов - сколько различных новых назначений указано в таблице
		ПеренестиРезервВКоробахНаСервере("ПеренестиВДругойЗаказ", "ПеренестиНовоеНазначение", Истина);
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьТЧТоварыКорректировкаНазначения(ДокОбъект, УпаковочныйЛист, ЗаказКлиента, Назначение)
	Для Каждого СтрокаТЧ Из УпаковочныйЛист.Товары Цикл
		нс = ДокОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(нс, СтрокаТЧ);
		Если ДокОбъект.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать Тогда
			// Резервирование и корректировка
			нс.ИсходноеНазначение = Назначение;
			нс.ИсходныйЗаказ = ЗаказКлиента;
			нс.НовоеНазначение = ДокОбъект.Назначение;
			нс.НовыйЗаказ = ДокОбъект.Назначение.Заказ;
		ИначеЕсли ДокОбъект.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв Тогда
			// Снятие резерва
			нс.ИсходноеНазначение = ДокОбъект.Назначение;
			нс.ИсходныйЗаказ = ДокОбъект.Назначение.Заказ;
		Иначе
			// Резервирование
			нс.НовоеНазначение = ДокОбъект.Назначение;
			нс.НовыйЗаказ = ДокОбъект.Назначение.Заказ;
		КонецЕсли;
		нс.ИсходноеНазначениеДвиженияПоСкладскимРегистрам = Истина;
		нс.Склад = ЗаказКлиента.Склад;
		нс.гф_IDкороба = УпаковочныйЛист;
		// Аналитика учета заполняется при проведении документа автоматически...
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДобавитьСтрокуТЧТоварыКорректировкаНазначения(ДокОбъект, СтрокаТЧ, ЗаказКлиента, Назначение)
	нс = ДокОбъект.Товары.Добавить();
	ЗаполнитьЗначенияСвойств(нс, СтрокаТЧ);
	Если ДокОбъект.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать Тогда
		// Резервирование и корректировка
		нс.ИсходноеНазначение = Назначение;
		нс.ИсходныйЗаказ = ЗаказКлиента;
		нс.НовоеНазначение = ДокОбъект.Назначение;
		нс.НовыйЗаказ = ДокОбъект.Назначение.Заказ;
	ИначеЕсли ДокОбъект.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв Тогда
		// Снятие резерва
		нс.ИсходноеНазначение = ДокОбъект.Назначение;
		нс.ИсходныйЗаказ = ДокОбъект.Назначение.Заказ;
	Иначе
		// Резервирование
		нс.НовоеНазначение = ДокОбъект.Назначение;
		нс.НовыйЗаказ = ДокОбъект.Назначение.Заказ;
	КонецЕсли;
	нс.ИсходноеНазначениеДвиженияПоСкладскимРегистрам = Истина;
	нс.Склад = ЗаказКлиента.Склад;
	// Аналитика учета заполняется при проведении документа автоматически...
	Возврат нс;
КонецФункции

&НаСервере
Процедура СоздатьКорректировкуСнятиеРезерваНаСервере(ИмяТЧ)
	ДокСнятиеРезерва = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
	ДокСнятиеРезерва.Автор = ПараметрыСеанса.ТекущийПользователь;
	ДокСнятиеРезерва.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ДокСнятиеРезерва.Организация = мЗаказКлиента.Организация;
	ДокСнятиеРезерва.Дата = ТекущаяДатаСеанса();
	ДокСнятиеРезерва.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв;
	ДокСнятиеРезерва.Комментарий = "Создан автоматически обработкой Корректировка заказов и резервов "
	+ ТекущаяДатаСеанса();
	ДокСнятиеРезерва.Назначение = мНазначение;
	МассивУпаковочныеЛисты = Новый Массив;
	// здесь заполняем тч документа
	Для Каждого СтрокаРезерва Из Объект[ИмяТЧ] Цикл
		Если Не ЗначениеЗаполнено(СтрокаРезерва["СнятьРезерв"]) Тогда
			Продолжить;
		КонецЕсли;
		// заполняем Номенклатуру из Упаковочных листов
		СтруктураПоиска = Новый Структура("ВариантКомплектации", СтрокаРезерва["ВариантКомплектации"]);
		УпаковочныеЛисты = мУпаковочныеЛисты.НайтиСтроки(СтруктураПоиска);
		ВсегоУпаковочныхЛистов = УпаковочныеЛисты.Количество();
		СнятьРезерв = СтрокаРезерва["СнятьРезерв"];
		Индекс = 0;
		Пока СнятьРезерв > 0 Цикл
			Если Индекс >= ВсегоУпаковочныхЛистов Тогда
				Прервать;
			КонецЕсли;
			УпаковочныйЛист = УпаковочныеЛисты[Индекс].УпаковочныйЛист;
			ЗаполнитьТЧТоварыКорректировкаНазначения(ДокСнятиеРезерва, УпаковочныйЛист, мЗаказКлиента, мНазначение);
			
			// в Упаковочном листе надо очистить Заказ и Назначение (в тч Товары)
			МассивУпаковочныеЛисты.Добавить(УпаковочныйЛист);
			
			СнятьРезерв = СнятьРезерв - 1;
			Индекс = Индекс + 1;
		КонецЦикла;
	КонецЦикла;
	флОшибка = Ложь;
	ЗаписатьДокументВПопытке(ДокСнятиеРезерва, "Проведен:", ТЗПротокол, "Создан и проведен", флОшибка);
	Если Не флОшибка Тогда
		ПустойЗаказ = Документы.ЗаказКлиента.ПустаяСсылка();
		ПустоеНазначение = Справочники.Назначения.ПустаяСсылка();
		Для Каждого УпаковочныйЛист Из МассивУпаковочныеЛисты Цикл
			// в Упаковочном листе надо очистить Заказ и Назначение (в тч Товары)
			ДокУпаковочныйЛист = ВнестиИзмененияВУпаковочныйЛист(УпаковочныйЛист, ПустойЗаказ, ПустоеНазначение);
			флОшибка = Ложь;
			ЗаписатьДокументВПопытке(ДокУпаковочныйЛист, "Проведен:", ТЗПротокол, "Изменен и проведен", флОшибка);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СоздатьКорректировкуРезервированиеНаСервере(ИмяТЧ)
	ДокРезервирование = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
	ДокРезервирование.Автор = ПараметрыСеанса.ТекущийПользователь;
	ДокРезервирование.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ДокРезервирование.Организация = мЗаказКлиента.Организация;
	ДокРезервирование.Дата = ТекущаяДатаСеанса();
	ДокРезервирование.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.Резервировать;
	ДокРезервирование.Комментарий = "Создан автоматически обработкой Корректировка заказов и резервов "
	+ ТекущаяДатаСеанса();
	ДокРезервирование.Назначение = мНазначение;
	МассивУпаковочныеЛисты = Новый Массив;
	// здесь заполняем тч документа
	Для Каждого СтрокаРезерва Из Объект[ИмяТЧ] Цикл
		Если Не ЗначениеЗаполнено(СтрокаРезерва["Зарезервировать"]) Тогда
			Продолжить;
		КонецЕсли;
		// заполняем Номенклатуру из "свободных" Упаковочных листов: мСвободныеУпаковочныеЛисты
		Зарезервировать = СтрокаРезерва["Зарезервировать"];
		СтруктураПоиска = Новый Структура("ВариантКомплектации", СтрокаРезерва["ВариантКомплектации"]);
		СтрокиУпаковочныхЛистов = мСвободныеУпаковочныеЛисты.НайтиСтроки(СтруктураПоиска);
		Сч = 0;
		Для Каждого СтрокаУпаковочногоЛиста Из СтрокиУпаковочныхЛистов Цикл
			УпаковочныйЛист = СтрокаУпаковочногоЛиста.УпаковочныйЛист;
			ЗаполнитьТЧТоварыКорректировкаНазначения(ДокРезервирование, УпаковочныйЛист, мЗаказКлиента, мНазначение);
			
			// в Упаковочном листе надо записать Заказ и Назначение (в тч Товары)
			МассивУпаковочныеЛисты.Добавить(УпаковочныйЛист);
			
			Сч = Сч + 1;
			Если Сч >= Зарезервировать Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	флОшибка = Ложь;
	ЗаписатьДокументВПопытке(ДокРезервирование, "Проведен:", ТЗПротокол, "Создан и проведен", флОшибка);
	Если Не флОшибка Тогда
		Для Каждого УпаковочныйЛист Из МассивУпаковочныеЛисты Цикл
			// в Упаковочном листе надо очистить Заказ и Назначение (в тч Товары)
			ДокУпаковочныйЛист = ВнестиИзмененияВУпаковочныйЛист(УпаковочныйЛист, мЗаказКлиента, мНазначение);
			флОшибка = Ложь;
			ЗаписатьДокументВПопытке(ДокУпаковочныйЛист, "Проведен:", ТЗПротокол, "Изменен и проведен", флОшибка);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СоздатьКорректировкуРезервированиеНаСервереРезервы()
	ДокРезервирование = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
	ДокРезервирование.Автор = ПараметрыСеанса.ТекущийПользователь;
	ДокРезервирование.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ДокРезервирование.Организация = мЗаказКлиента.Организация;
	ДокРезервирование.Дата = ТекущаяДатаСеанса();
	ДокРезервирование.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.Резервировать;
	ДокРезервирование.Комментарий = "Создан автоматически обработкой Корректировка заказов и резервов "
	+ ТекущаяДатаСеанса();
	ДокРезервирование.Назначение = мНазначение;
	// здесь заполняем тч документа
	Для Каждого СтрокаРезерва Из Объект.Резервы Цикл
		Если Не ЗначениеЗаполнено(СтрокаРезерва["Зарезервировать"]) Тогда
			Продолжить;
		КонецЕсли;
		нс = ДобавитьСтрокуТЧТоварыКорректировкаНазначения(ДокРезервирование, СтрокаРезерва, мЗаказКлиента, мНазначение);
		нс.Количество = СтрокаРезерва["Зарезервировать"];
		нс.КоличествоУпаковок = нс.Количество;
	КонецЦикла;
	флОшибка = Ложь;
	ЗаписатьДокументВПопытке(ДокРезервирование, "Проведен:", ТЗПротокол, "Создан и проведен", флОшибка);
КонецПроцедуры

&НаСервере
Процедура СоздатьКорректировкуСнятиеРезерваНаСервереРезервы()
	ДокСнятиеРезерва = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
	ДокСнятиеРезерва.Автор = ПараметрыСеанса.ТекущийПользователь;
	ДокСнятиеРезерва.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ДокСнятиеРезерва.Организация = мЗаказКлиента.Организация;
	ДокСнятиеРезерва.Дата = ТекущаяДатаСеанса();
	ДокСнятиеРезерва.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв;
	ДокСнятиеРезерва.Комментарий = "Создан автоматически обработкой Корректировка заказов и резервов "
	+ ТекущаяДатаСеанса();
	ДокСнятиеРезерва.Назначение = мНазначение;
	// здесь заполняем тч документа
	Для Каждого СтрокаРезерва Из Объект.Резервы Цикл
		Если Не ЗначениеЗаполнено(СтрокаРезерва["СнятьРезерв"]) Тогда
			Продолжить;
		КонецЕсли;
		нс = ДобавитьСтрокуТЧТоварыКорректировкаНазначения(ДокСнятиеРезерва, СтрокаРезерва, мЗаказКлиента, мНазначение);
		нс.Количество = СтрокаРезерва["СнятьРезерв"];
		нс.КоличествоУпаковок = нс.Количество;
	КонецЦикла;
	флОшибка = Ложь;
	ЗаписатьДокументВПопытке(ДокСнятиеРезерва, "Проведен:", ТЗПротокол, "Создан и проведен", флОшибка);
КонецПроцедуры

&НаКлиенте
Функция НадоЗаписатьЗаказВКоробах(ТоварыВКоробах)
			
	флЗаписатьЗаказ = Ложь;
	Для Каждого СтрокаТЧ Из ТоварыВКоробах Цикл
		Если	Не ЗначениеЗаполнено(СтрокаТЧ["Добавить"])
			И	Не ЗначениеЗаполнено(СтрокаТЧ["Удалить"]) Тогда
			Продолжить;
		КонецЕсли;
		флЗаписатьЗаказ = Истина;
		Прервать;
	КонецЦикла;
	Возврат флЗаписатьЗаказ;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьСохранениеЗаказа()
	мОшибка = Ложь;
	ТЗПротокол.Очистить();
	ОчиститьСообщения();
	флЗаписатьЗаказ = Ложь;
	флКомментарийСохранен = Ложь;
	Если РежимРаботы = 1 Тогда
		// Резервы по заказам
		Если флТоварыВКоробах Тогда
			СохранитьРезервыВКоробах(флЗаписатьЗаказ);
		Иначе
			СохранитьРезервы(флЗаписатьЗаказ);
		КонецЕсли;

	Иначе
		// Заказы на согласовании
		Если флТоварыВКоробах Тогда
			флЗаписатьЗаказ = НадоЗаписатьЗаказВКоробах(Объект.ТоварыВКоробах);
			
		Иначе
			тчТовары.Очистить();
			ЗаполнитьТЧТоварыПоТоварам();
		
			ПересчитатьТЧТовары(флЗаписатьЗаказ);
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если флЗаписатьЗаказ = Истина Тогда
		ЗаписатьЗаказНаСервере();
	КонецЕсли;
	СохранитьКомментарийВЗаказе();
	Если ТЗПротокол.Количество() > 0 Тогда
		ТабДок = ПодготовитьТабДокНаСервере();
		ТабДок.Показать("Протокол выполнения Корректировка заказов и резервов");
	КонецЕсли;
	
	ВыполнитьРаспределениеЗапасовНаСервере();
	
	ЗаполнитьДанныеЗаказаНаСервере();
	флЗаказИзменен = Ложь;
	УправлениеДоступностью();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыполнитьРаспределениеЗапасовНаСервере()
	РаспределениеЗапасов.ВыполнитьРаспределениеВФоне();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	// ++ 11.11.2022
	ЗаполнитьСтавкуНДС = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Объект, Истина);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ЗаполнитьСтавкуНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	// --
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗависимыеРеквизиты()
	
	Возврат Новый Структура(
		"БезВозвратнойТары,ОтмененоБезВозвратнойТары,Отменено",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаРучнойСкидки,СуммаАвтоматическойСкидки",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаРучнойСкидки,СуммаАвтоматическойСкидки",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаРучнойСкидки,СуммаАвтоматическойСкидки");
	
КонецФункции

&НаКлиенте
Процедура СкрытьОтборы(Команда)
	Если Элементы.Отборы.Видимость = Истина Тогда
		Элементы.Отборы.Видимость = Ложь;
		Элементы.ФормаСкрытьОтборы.Заголовок = "Показать отборы";
	Иначе
		Элементы.Отборы.Видимость = Истина;
		Элементы.ФормаСкрытьОтборы.Заголовок = "Скрыть отборы";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаказОбъектТовары(ЗаказОбъект, флПодтвердитьЗаписьЗаказа)
	Если Объект.Резервы.Итог("ПеренестиВДругойЗаказ") = 0 Тогда
		// условие для изменения "исходного" Заказа
		флПодтвердитьЗаписьЗаказа = Ложь;
		Возврат;
	КонецЕсли;
	Для Каждого СтрокаТЧ Из тчТовары Цикл
		
		Если СтрокаТЧ.Назначение <> мНазначение Тогда
			Продолжить;
		КонецЕсли;
		СтрокаЗаказа = ЗаказОбъект.Товары.Добавить();
			
		ЗаполнитьЗначенияСвойств(СтрокаЗаказа, СтрокаТЧ);
		
		Если ЗаказОбъект.МаксимальныйКодСтроки < СтрокаТЧ.КодСтроки Тогда
			ЗаказОбъект.МаксимальныйКодСтроки = СтрокаТЧ.КодСтроки;
		КонецЕсли;
		
	КонецЦикла;
	СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(ЗаказОбъект, "Товары");
КонецПроцедуры

&НаСервере
Процедура СоздатьДокЗарезервировать()
	Если Объект.Резервы.Итог("Зарезервировать") = 0 Тогда
		Возврат;
	КонецЕсли;
	ДокРезервирование = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
	ДокРезервирование.Автор = ПараметрыСеанса.ТекущийПользователь;
	ДокРезервирование.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ДокРезервирование.Организация = мЗаказКлиента.Организация;
	ДокРезервирование.Дата = ТекущаяДатаСеанса();
	ДокРезервирование.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать;
	ДокРезервирование.Комментарий = "Создан автоматически обработкой Корректировка заказов и резервов "
		+ ТекущаяДатаСеанса();
	ДокРезервирование.Назначение = мНазначение;
	Если Не ЗначениеЗаполнено(ДокРезервирование.Назначение) Тогда
		// здесь не заполнено Назначение - документ НЕ сохраняем
		ДокРезервирование = Неопределено;
		ТекстСообщения = "Не удалось получить Назначение для Заказа:" + мЗаказКлиента;
		СообщитьПользователю(ТекстСообщения);
	Иначе
		// здесь заполняем тч документа
		Для Каждого СтрокаТЧ Из Объект.Резервы Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ["Зарезервировать"]) Тогда
				нс = ДокРезервирование.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(нс, СтрокаТЧ);
				нс.Количество = СтрокаТЧ["Зарезервировать"];
				нс.КоличествоУпаковок = СтрокаТЧ["Зарезервировать"];
				нс.НовоеНазначение = ДокРезервирование.Назначение;
				нс.НовыйЗаказ = мЗаказКлиента;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	флОшибка = Ложь;
	ЗаписатьДокументВПопытке(ДокРезервирование, "Проведен:", ТЗПротокол, "Создан и проведен", флОшибка);
КонецПроцедуры

&НаСервере
Процедура СоздатьДокСнятьРезерв()
	Если Объект.Резервы.Итог("СнятьРезерв") = 0 Тогда
		Возврат;
	КонецЕсли;
	ДокСнятиеРезерва = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
	ДокСнятиеРезерва.Автор = ПараметрыСеанса.ТекущийПользователь;
	ДокСнятиеРезерва.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ДокСнятиеРезерва.Организация = мЗаказКлиента.Организация;
	ДокСнятиеРезерва.Дата = ТекущаяДатаСеанса();
	ДокСнятиеРезерва.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв;
	ДокСнятиеРезерва.Комментарий = "Создан автоматически обработкой Корректировка заказов и резервов "
	+ ТекущаяДатаСеанса();
	ДокСнятиеРезерва.Назначение = мНазначение;
	Если Не ЗначениеЗаполнено(ДокСнятиеРезерва.Назначение) Тогда
		// здесь не заполнено Назначение - документ НЕ сохраняем
		ДокСнятиеРезерва = Неопределено;
		ТекстСообщения = "Не удалось получить Назначение для Заказа:" + мЗаказКлиента;
		СообщитьПользователю(ТекстСообщения);
	Иначе
		// здесь заполняем тч документа
		Для Каждого СтрокаТЧ Из Объект.Резервы Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ["СнятьРезерв"]) Тогда
				нс = ДокСнятиеРезерва.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(нс, СтрокаТЧ);
				нс.Количество = СтрокаТЧ["СнятьРезерв"];
				нс.КоличествоУпаковок = СтрокаТЧ["СнятьРезерв"];
				нс.ИсходноеНазначение = ДокСнятиеРезерва.Назначение;
				нс.ИсходныйЗаказ = мЗаказКлиента;
				нс.ИсходноеНазначениеДвиженияПоСкладскимРегистрам = Истина;
				// Аналитика учета заполняется при проведении документа автоматически...
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	флОшибка = Ложь;
	ЗаписатьДокументВПопытке(ДокСнятиеРезерва, "Проведен:", ТЗПротокол, "Создан и проведен", флОшибка);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьЗаказОбъектТоварыНаСогласовании(ЗаказОбъект, тчТовары)
	Для Каждого СтрокаТЧ Из тчТовары Цикл
		Если СтрокаТЧ.флПересчитатьСтроку ИЛИ СтрокаТЧ.Отменено Тогда
			ЗаполнитьСтрокуЗаказа(ЗаказОбъект, СтрокаТЧ);
		КонецЕсли;
	КонецЦикла;
	СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(ЗаказОбъект, "Товары");
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСтрокуЗаказа(ЗаказОбъект, СтрокаТЧ)
	Если СтрокаТЧ.ИдентификаторСтроки = "" Тогда
		// здесь надо исправить "исходную" строку заказа
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЧ);
	Иначе
		СтруктураПоиска = Новый Структура("ИдентификаторСтроки", СтрокаТЧ.ИдентификаторСтроки);
	КонецЕсли;
	СтрокиЗаказа = ЗаказОбъект.Товары.НайтиСтроки(СтруктураПоиска);
	Если СтрокиЗаказа.Количество() > 0 Тогда
		Если СтрокаТЧ.Отменено Тогда
			// здесь отменяем строки заказа
			Для Каждого СтрокаЗаказа Из СтрокиЗаказа Цикл
				ЗаполнитьЗначенияСвойств(СтрокаЗаказа, СтрокаТЧ, "
				|Отменено,
				|ПричинаОтмены");
			КонецЦикла;
		Иначе
			СтрокаЗаказа = СтрокиЗаказа[0];
				
			ЗаполнитьЗначенияСвойств(СтрокаЗаказа, СтрокаТЧ, "
				|Отменено,
				|ПричинаОтмены,
				|КоличествоУпаковок,
				|Количество,
				|Сумма,
				|СтавкаНДС,
				|СуммаНДС,
				|СуммаСНДС");
		КонецЕсли;
	Иначе
		// здесь строка с идентификатором НЕ найдена
		СтрокаЗаказа = ЗаказОбъект.Товары.Добавить();
				
		ЗаполнитьЗначенияСвойств(СтрокаЗаказа, СтрокаТЧ);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СохранитьСтрокуЗаказа(СтрокаЗаказа)
	СтруктураСтрокиЗаказа = Новый Структура("Добавлено, Отменено, ПричинаДобавления, ПричинаОтмены");
	ЗаполнитьЗначенияСвойств(СтруктураСтрокиЗаказа, СтрокаЗаказа);
	Возврат СтруктураСтрокиЗаказа;
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьТЧТоварыВКоробахДобавить(СтрокаТЧ, ЗаказОбъект)
	ЗначениеСто = 100;
	// корректируем исходную строку заказа
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("ВариантКомплектации", СтрокаТЧ.ВариантКомплектации);
	СтруктураПоиска.Вставить("ВидЦены", СтрокаТЧ.ВидЦены);
	СтруктураПоиска.Вставить("Скидка", СтрокаТЧ.Скидка);
	СтруктураПоиска.Вставить("ЦенаКоробаСоСкидкой", СтрокаТЧ.ЦенаКоробаСоСкидкой);
	СтрокиЗаказа = ЗаказОбъект.гф_ТоварыВКоробах.НайтиСтроки(СтруктураПоиска);
	мКоличествоДоИзменения = Неопределено;
	Если СтрокиЗаказа.Количество() > 0 Тогда
		// здесь в исходном Заказе найдена строка с Вариантом комплектации
		СтрокаЗаказа = СтрокиЗаказа[0];
		мКоличествоДоИзменения = СтрокаЗаказа.Количество;
		// корректируем исходную строку заказа
		СтрокаЗаказа["Количество"] = СтрокаЗаказа["Количество"] + СтрокаТЧ["Добавить"];
	Иначе
		// добавляем строку
		СтрокаЗаказа = ЗаказОбъект.гф_ТоварыВКоробах.Добавить();
		мКоличествоДоИзменения = 0;
		ЗаполнитьЗначенияСвойств(СтрокаЗаказа, СтрокаТЧ);
		СтрокаЗаказа["Количество"] = СтрокаТЧ["Добавить"];
		СтрокаЗаказа["Добавлено"] = СтрокаТЧ["флДобавлено"];
		СтрокаЗаказа["Отменено"] = СтрокаТЧ["флОтменено"];
		СтрокаЗаказа["ВидЦены"] = ЗаказОбъект.гф_ВидЦены;
		СтрокаЗаказа["Скидка"] = РассчитатьСкидку(ЗаказОбъект.Ссылка);
		СтрокаЗаказа["ВариантОбеспечения"] = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.КОбеспечению");
		СтрокаЗаказа["ЦенаКоробаСоСкидкой"] = СтрокаЗаказа.ЦенаКороба * (1 - СтрокаЗаказа.Скидка / ЗначениеСто);
		//++СтрокаЗаказа["СтавкаНДС"] = гф_ЗаполнитьСтавкуНДС(СтрокаЗаказа["ВариантКомплектации"]);
	СтруктураДействий = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(ЗаказОбъект, Истина);
	СтрокаЗаказа["СтавкаНДС"] = гф_ЗаполнитьСтавкуНДС(СтрокаЗаказа["ВариантКомплектации"], СтруктураДействий);
		//--
		Уник = Новый УникальныйИдентификатор();
		СтрокаЗаказа["ИдентификаторСтроки"] = Строка(Уник);
	КонецЕсли;
	
	СтрокаЗаказа["Сумма"] = СтрокаЗаказа.Количество * СтрокаЗаказа.ЦенаКоробаСоСкидкой;
	Ставка = 0;
	Если ЗначениеЗаполнено(СтрокаЗаказа["СтавкаНДС"]) Тогда
		Ставка = СтрокаЗаказа["СтавкаНДС"].Ставка;
	КонецЕсли;
	СтрокаЗаказа["СуммаНДС"] = СтрокаЗаказа["Сумма"] * (Ставка / ЗначениеСто);
	СтрокаЗаказа["СуммаСНДС"] = СтрокаЗаказа["Сумма"] + СтрокаЗаказа["СуммаНДС"];
	// здесь добавляем строку в тч гф_ПричиныИзмененияТоваровВКоробах
	ДобавитьСтрокуПричиныИзменения(ЗаказОбъект, СтрокаЗаказа, мКоличествоДоИзменения, , СтрокаТЧ.ПричинаДобавления);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьТЧТоварыВКоробахУдалить(СтрокаТЧ, ЗаказОбъект)
	ЗначениеСто = 100;
	// корректируем исходную строку заказа
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("ВариантКомплектации", СтрокаТЧ.ВариантКомплектации);
	СтруктураПоиска.Вставить("ВидЦены", СтрокаТЧ.ВидЦены);
	СтруктураПоиска.Вставить("Скидка", СтрокаТЧ.Скидка);
	СтруктураПоиска.Вставить("ЦенаКоробаСоСкидкой", СтрокаТЧ.ЦенаКоробаСоСкидкой);
	СтрокиЗаказа = ЗаказОбъект.гф_ТоварыВКоробах.НайтиСтроки(СтруктураПоиска);
	Если СтрокиЗаказа.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СтрокаЗаказа = СтрокиЗаказа[0];
	// здесь в исходном Заказе найдена строка с Вариантом комплектации
	мКоличествоДоИзменения = СтрокаЗаказа.Количество;
	Если СтрокаЗаказа.Количество = СтрокаТЧ.Удалить Тогда
		// здесь в надо "удалить" все количество коробов - просто "отменяем" строку
		СтрокаЗаказа.Отменено = Истина;
		СтрокаЗаказа.ПричинаОтмены = СтрокаТЧ.ПричинаОтмены;
	Иначе
		// здесь корректируем количество и суммы в исходной строке
		СтрокаЗаказа.Количество = СтрокаТЧ.Количество;
		СтрокаЗаказа["Сумма"] = СтрокаЗаказа.Количество * СтрокаЗаказа.ЦенаКоробаСоСкидкой;
		Ставка = 0;
		Если ЗначениеЗаполнено(СтрокаЗаказа["СтавкаНДС"]) Тогда
			Ставка = СтрокаЗаказа["СтавкаНДС"].Ставка;
		КонецЕсли;
		СтрокаЗаказа["СуммаНДС"] = СтрокаЗаказа["Сумма"] * (Ставка / ЗначениеСто);
		СтрокаЗаказа["СуммаСНДС"] = СтрокаЗаказа["Сумма"] + СтрокаЗаказа["СуммаНДС"];
	КонецЕсли;
	// здесь добавляем строку в тч гф_ПричиныИзмененияТоваровВКоробах
	ДобавитьСтрокуПричиныИзменения(ЗаказОбъект, СтрокаЗаказа, мКоличествоДоИзменения, СтрокаТЧ.ПричинаОтмены);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧТоварыВКоробах(ЗаказОбъект, ТоварыВКоробах)
	Для Каждого СтрокаТЧ Из ТоварыВКоробах Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ["Добавить"]) Тогда
			ЗаполнитьТЧТоварыВКоробахДобавить(СтрокаТЧ, ЗаказОбъект);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЧ["Удалить"]) Тогда
			ЗаполнитьТЧТоварыВКоробахУдалить(СтрокаТЧ, ЗаказОбъект);
		КонецЕсли;
	КонецЦикла;
	// тч Товары перезаполняются перед записью документа
	//ЗаполнитьТоварыНаСервере(ЗаказОбъект);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьДокументВПопытке(ДокОбъект, ТекстСообщения, ТЗПротокол, Комментарий, флОшибка)
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ТекстСообщения = ТекстСообщения + ДокОбъект.Ссылка;
		СообщитьПользователю(ТекстСообщения);
		СтрокаПротокола = ТЗПротокол.Добавить();
		СтрокаПротокола.Документ = ДокОбъект.Ссылка;
		СтрокаПротокола.Комментарий = Комментарий;
	Исключение
		ТекстСообщения = "Ошибка при записи:" + ОписаниеОшибки();
		СообщитьПользователю(ТекстСообщения);
		СтрокаПротокола = ТЗПротокол.Добавить();
		СтрокаПротокола.Документ = ДокОбъект.Ссылка;
		СтрокаПротокола.Комментарий = ТекстСообщения;
		флОшибка = Истина;
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЗаказНаСервере()

	Если мОшибка Тогда
		Возврат;
	КонецЕсли;
	
	ЗаказОбъект = мЗаказКлиента.ПолучитьОбъект();
	Если ЗначениеЗаполнено(мКомментарий) Тогда
		ЗаказОбъект.Комментарий = мКомментарий;
	КонецЕсли;
	
	флПодтвердитьЗаписьЗаказа = Истина;
	Если РежимРаботы = 1 Тогда
		// Резервы по заказам
		Если Не флТоварыВКоробах Тогда
			ЗаполнитьЗаказОбъектТовары(ЗаказОбъект, флПодтвердитьЗаписьЗаказа);
		
			// здесь создаем документы Корректировка назначения товаров
			СоздатьДокЗарезервировать();
			СоздатьДокСнятьРезерв();
		КонецЕсли;
		
	Иначе
		// Заказы на согласовании
		Если флТоварыВКоробах Тогда
			ЗаполнитьТЧТоварыВКоробах(ЗаказОбъект, Объект.ТоварыВКоробах);
		
		Иначе
			ЗаполнитьЗаказОбъектТоварыНаСогласовании(ЗаказОбъект, тчТовары);
			
		КонецЕсли;
	КонецЕсли;

	флОшибка = Ложь;
	Если флПодтвердитьЗаписьЗаказа Тогда
		ЗаписатьДокументВПопытке(ЗаказОбъект, "Проведен:", ТЗПротокол, "Изменен и проведен", флОшибка);
		Если Не флОшибка Тогда
			флКомментарийСохранен = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьКомментарийВЗаказе()
	
	Если мОшибка Тогда
		Возврат;
	КонецЕсли;
	
	Если флКомментарийСохранен Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(мКомментарий) Тогда
		Возврат;
	КонецЕсли;
	ЗаказОбъект = мЗаказКлиента.ПолучитьОбъект();
	ЗаказОбъект.Комментарий = мКомментарий;
	
	флОшибка = Ложь;
	ЗаписатьДокументВПопытке(ЗаказОбъект, "Проведен:", ТЗПротокол, "Изменен комментарий и проведен", флОшибка);

КонецПроцедуры
	
// Копия процедуры из модуля формы документа Заказ клиента (расширение гф_ОсновныеДоработки)
// Изменения:
// - добавил параметр ЗаказОбъект
// - заремерил строки кода в конце процедуры

&НаСервере
Процедура ЗаполнитьТоварыНаСервере(ЗаказОбъект)
	
	ТипЦеныЗакупочная = ПланыВидовХарактеристик.гф_ГлобальныеЗначения.НайтиПоРеквизиту("Ключ",
														"гф_ГлобальныеЗначенияОптоваяЗакупочнаяЦена").Значение;

	ЗаказОбъект.Товары.Очистить();
		
	ВременнаяТаблицаТЧТовары = Новый ТаблицаЗначений;
	ВременнаяТаблицаТЧТовары.Колонки.Добавить("Номенклатура");
	ВременнаяТаблицаТЧТовары.Колонки.Добавить("Характеристика");
	ВременнаяТаблицаТЧТовары.Колонки.Добавить("КоличествоУпаковок"); 
	ВременнаяТаблицаТЧТовары.Колонки.Добавить("гф_ДобавленоПоПричине");
	ВременнаяТаблицаТЧТовары.Колонки.Добавить("гф_ПричинаДобавления");
	ВременнаяТаблицаТЧТовары.Колонки.Добавить("Отменено");
	ВременнаяТаблицаТЧТовары.Колонки.Добавить("ПричинаОтмены");
	// ++ Галфинд СадомцевСА 18.10.2022
	ВременнаяТаблицаТЧТовары.Колонки.Добавить("ВариантОбеспечения");
	ВременнаяТаблицаТЧТовары.Колонки.Добавить("ВидЦены");
	ВременнаяТаблицаТЧТовары.Колонки.Добавить("ПроцентРучнойСкидки");
	// -- Галфинд СадомцевСА 18.10.2022
	Для Каждого СтрокаТоварыВКоробах Из ЗаказОбъект.гф_ТоварыВКоробах Цикл
		
		Для каждого СтрокаСостава Из СтрокаТоварыВКоробах.ВариантКомплектации.Товары Цикл
			
			НоваяСтрока = ВременнаяТаблицаТЧТовары.Добавить();
			НоваяСтрока.Номенклатура = СтрокаСостава.Номенклатура;
			НоваяСтрока.Характеристика = СтрокаСостава.Характеристика;
			НоваяСтрока.КоличествоУпаковок = СтрокаТоварыВКоробах.Количество * СтрокаСостава.КоличествоУпаковок;			
			НоваяСтрока.гф_ДобавленоПоПричине = СтрокаТоварыВКоробах.Добавлено;
			НоваяСтрока.гф_ПричинаДобавления = СтрокаТоварыВКоробах.ПричинаДобавления;
			НоваяСтрока.Отменено = СтрокаТоварыВКоробах.Отменено;
			НоваяСтрока.ПричинаОтмены = СтрокаТоварыВКоробах.ПричинаОтмены;
			// ++ Галфинд СадомцевСА 18.10.2022
			НоваяСтрока.ВариантОбеспечения = СтрокаТоварыВКоробах.ВариантОбеспечения;
			НоваяСтрока.ВидЦены = СтрокаТоварыВКоробах.ВидЦены;
			НоваяСтрока.ПроцентРучнойСкидки = СтрокаТоварыВКоробах.Скидка;
			// -- Галфинд СадомцевСА 18.10.2022
		
		КонецЦикла;	
		
	КонецЦикла;	
	
	ПоляГруппировки = "Номенклатура,Характеристика,гф_ДобавленоПоПричине,гф_ПричинаДобавления,Отменено,ПричинаОтмены,
		|ВариантОбеспечения,ВидЦены,ПроцентРучнойСкидки";
	ВременнаяТаблицаТЧТовары.Свернуть(ПоляГруппировки, "КоличествоУпаковок");
	тчТовары.Очистить();
	НомерСтроки = 0;
	ЗначениеСто = 100;
	
	Для Каждого Строка Из ВременнаяТаблицаТЧТовары Цикл
		НоваяСтрока = тчТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", Строка.Номенклатура);			
		// ++ Галфинд СадомцевСА 18.10.2022 используем Вид цены из ТЧ Товары в коробах
		Отбор.Вставить("ВидЦены", Строка.ВидЦены);
		НоваяСтрока.Количество = Строка.КоличествоУпаковок;
		НоваяСтрока.Цена = РегистрыСведений.ЦеныНоменклатуры25.ПолучитьПоследнее(ТекущаяДатаСеанса(), Отбор).Цена;
		НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению;
		НоваяСтрока.Обособленно = Истина;		
		НоваяСтрока.гф_ЦенаСоСкидкой = НоваяСтрока.Цена * (1 - НоваяСтрока.ПроцентРучнойСкидки / ЗначениеСто);
		НомерСтроки = НомерСтроки + 1;
		НоваяСтрока.НомерСтроки = НомерСтроки;
	КонецЦикла;	  
	
	СтруктураНоменклатура = Новый Структура("Номенклатура", "ХарактеристикиИспользуются");
	ПараметрыЗаполненияРеквизитов = Новый Структура;	
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", СтруктураНоменклатура);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(тчТовары, ПараметрыЗаполненияРеквизитов);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЗаказОбъект);
	
	ПараметрыЗаполненияСтавкиНДС = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(ЗаказОбъект, Истина);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ПараметрыЗаполненияСтавкиНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
    // ++ Галфинд СадомцевСА 01.11.2022 Заполняем Товары на основании Коробов
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	// --
		
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(тчТовары, СтруктураДействий, Неопределено);
		
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(ЗаказОбъект.Склад);
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(ЗаказОбъект.Склад, СкладГруппа, тчТовары, Ложь);
	
	Для Каждого Строка Из тчТовары Цикл
		НоваяСтрока = ЗаказОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура ДобавитьСтрокуЗаказаНаСервере()
	СтрокаТаблицы = Объект.Товары.Добавить();
	СтрокаТаблицы.флДобавленаВручную	= Истина;
	
	СтрокаТаблицы.ИдентификаторСтроки	= Новый УникальныйИдентификатор();
	// здесь заполняем поля значениями из первой строки тч
	Если Объект.Товары.Количество() > 0 Тогда
		//СтрокаТаблицы.СтавкаНДС				= Объект.Товары[0].СтавкаНДС;
		СтрокаТаблицы.Склад					= Объект.Товары[0].Склад;
		СтрокаТаблицы.ДатаОтгрузки			= Объект.Товары[0].ДатаОтгрузки;
		СтрокаТаблицы.ВариантОбеспечения	= Объект.Товары[0].ВариантОбеспечения;
		СтрокаТаблицы.Упаковка				= Объект.Товары[0].Упаковка;
	КонецЕсли;
	СтрокаТаблицы.ВидЦены				= мЗаказКлиента.гф_ВидЦены;
	
	Идентификатор = СтрокаТаблицы.ПолучитьИдентификатор();
	
	ТекущийЭлемент = Элементы.Товары;
	Элементы.Товары.ТекущаяСтрока = Идентификатор;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуЗаказа(Команда)
	ДобавитьСтрокуЗаказаНаСервере();
	флЗаказИзменен = Истина;
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДоступностью()
	// Товары
	Элементы.ТоварыДобавитьСтрокуЗаказа.Доступность = Объект.Товары.Количество() > 0;
	Элементы.ТоварыУдалитьСтрокуЗаказа.Доступность = Ложь;
	ТД = Элементы.Товары.ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		Элементы.ТоварыУдалитьСтрокуЗаказа.Доступность = ТД.флДобавленаВручную;
	КонецЕсли;
	
	// Товары в коробах
	Элементы.ТоварыВКоробахДобавитьСтрокуВКоробах.Доступность = Объект.ТоварыВКоробах.Количество() > 0;
	Элементы.ТоварыВКоробахУдалитьСтрокуВКоробах.Доступность = Ложь;
	ТД = Элементы.ТоварыВКоробах.ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		Элементы.ТоварыВКоробахУдалитьСтрокуВКоробах.Доступность = ТД.флДобавленаВручную;
	КонецЕсли;
	
	Если РежимРаботы = 1 Тогда
		Элементы.ВыборСтатуса.Видимость = Истина;
	Иначе
		Элементы.ВыборСтатуса.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ТоварыТоварыЗагрузитьИзТабличногоДокумента.Доступность = флДанныеЗаказаЗаполнены;
	Элементы.ТоварыВКоробахТоварыВКоробахЗагрузитьИзТабличногоДокумента.Доступность = флДанныеЗаказаЗаполнены;
	Элементы.РезервыЗагрузитьИзТабличногоДокумента.Доступность = флДанныеЗаказаЗаполнены;
	Элементы.РезервыВКоробахЗагрузитьИзТабличногоДокумента.Доступность = флДанныеЗаказаЗаполнены;
	
	Элементы.РезервыЗаполнитьДоступными.Доступность = флДанныеЗаказаЗаполнены;
	Элементы.РезервыВКоробахЗаполнитьДоступными.Доступность = флДанныеЗаказаЗаполнены;
	Элементы.РезервыЗаполнитьЗарезервированными.Доступность = флДанныеЗаказаЗаполнены;
	Элементы.РезервыВКоробахЗаполнитьЗарезервированными.Доступность = флДанныеЗаказаЗаполнены;
	Элементы.РезервыЗаполнитьПереносРезерва.Доступность = флДанныеЗаказаЗаполнены;
	Элементы.РезервыВКоробахЗаполнитьПереносРезерва.Доступность = флДанныеЗаказаЗаполнены;
	Элементы.РезервыЗаполнитьПереносВДругойЗаказ.Доступность = флДанныеЗаказаЗаполнены;
	Элементы.РезервыВКоробахЗаполнитьПереносВДругойЗаказ.Доступность = флДанныеЗаказаЗаполнены;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(Команда)
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		СтрокаТЧ["Пометка"] = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		СтрокаТЧ["Пометка"] = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПричинуДобавления(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	ДополнительныеПараметры = Новый Структура("ИмяТЧ", "Товары");
	Оповещение = Новый ОписаниеОповещения("ВыборПричиныДобавленияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Справочник.ПричиныОтменыЗаказовКлиентов.Форма.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, , , ,
		Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПричинуДобавленияКороба(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	ДополнительныеПараметры = Новый Структура("ИмяТЧ", "ТоварыВКоробах");
	Оповещение = Новый ОписаниеОповещения("ВыборПричиныДобавленияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Справочник.ПричиныОтменыЗаказовКлиентов.Форма.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, , , ,
		Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ВыборПричиныДобавленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИмяТЧ = ДополнительныеПараметры["ИмяТЧ"];
	Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
		Если СтрокаТЧ["Пометка"] = Ложь Тогда
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТЧ["Добавить"]) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТЧ["ПричинаДобавления"] = Результат;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПричинуУдаления(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	ДополнительныеПараметры = Новый Структура("ИмяТЧ, ИмяРеквизита", "Товары", "ПричинаУдаления");
	Оповещение = Новый ОписаниеОповещения("ВыборПричиныУдаленияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Справочник.ПричиныОтменыЗаказовКлиентов.Форма.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, , , ,
		Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПричинуУдаленияКороба(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	ДополнительныеПараметры = Новый Структура("ИмяТЧ, ИмяРеквизита", "ТоварыВКоробах", "ПричинаОтмены");
	Оповещение = Новый ОписаниеОповещения("ВыборПричиныУдаленияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Справочник.ПричиныОтменыЗаказовКлиентов.Форма.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, , , ,
		Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ВыборПричиныУдаленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИмяТЧ = ДополнительныеПараметры["ИмяТЧ"];
	ИмяРеквизита = ДополнительныеПараметры["ИмяРеквизита"];
	Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
		Если СтрокаТЧ["Пометка"] = Ложь Тогда
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТЧ["Удалить"]) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТЧ[ИмяРеквизита] = Результат;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗаказа(Команда)
	ТД = Элементы.Товары.ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		ИдентификаторСтроки = ТД.ПолучитьИдентификатор();
		СтрокаЗаказа = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если СтрокаЗаказа <> Неопределено Тогда
			Индекс = Объект.Товары.Индекс(СтрокаЗаказа);
			Объект.Товары.Удалить(Индекс);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьТоварыВКоробах(ЗаказКлиента)
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",
		"гф_СкладыТоварыВКоробах");
	Если ЗначениеЗаполнено(Свойство) Тогда
		Если ЗначениеЗаполнено(ЗаказКлиента.Склад) Тогда
			Возврат ПолучитьЗначениеДопРеквизита(ЗаказКлиента.Склад, Свойство);
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеДопРеквизита(Ссылка, Свойство) Экспорт
    ПараметрыОтбора = Новый Структура;
    ПараметрыОтбора.Вставить("Свойство", Свойство);
    Массив = Ссылка.ДополнительныеРеквизиты.НайтиСтроки(ПараметрыОтбора);
    Если Массив.Количество() = 0 Тогда
        Возврат Ложь;
    Иначе
        Возврат Массив[0].Значение;
    КонецЕсли;
КонецФункции

&НаКлиенте
Процедура УправлениеДоступностьюРезервы()
	Элементы.РезервыЗарезервировать.Доступность = Истина;
	Элементы.РезервыСнятьРезерв.Доступность = Истина;
	Если ЗначениеЗаполнено(мЗаказКлиента) Тогда
		Если ЗначениеЗаполнено(мДатаОбновленияИзИ5) Тогда
			Элементы.РезервыЗарезервировать.Доступность = Ложь;
			Элементы.РезервыСнятьРезерв.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДоступностьюЗаказыВКоробах()
	Если ЗначениеЗаполнено(мЗаказКлиента) Тогда
		ТоварыВКоробах = ВернутьТоварыВКоробах(мЗаказКлиента);
		флТоварыВКоробах = ТоварыВКоробах;
	КонецЕсли;
	УправлениеДоступностьюТаблиц();
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДоступностьюТаблиц()
	Элементы.Товары.Видимость = Ложь;
	Элементы.ТоварыВКоробах.Видимость = Ложь;
	Элементы.Резервы.Видимость = Ложь;
	Элементы.РезервыВКоробах.Видимость = Ложь;
	Элементы.ГруппаПричины.Видимость = Ложь;
	Если РежимРаботы = 1 Тогда
		Элементы.Резервы.Видимость = НЕ флТоварыВКоробах;
		Элементы.РезервыВКоробах.Видимость = флТоварыВКоробах;
		Элементы.ГруппаПричины.Видимость = Истина;
	Иначе
		Элементы.Товары.Видимость = НЕ флТоварыВКоробах;
		Элементы.ТоварыВКоробах.Видимость = флТоварыВКоробах;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	Оповещение = Новый ОписаниеОповещения("ЗагрузкаИзФайлаЗавершение", ЭтотОбъект);
	ПараметрыФормы = Новый Структура("флТоварыВКоробах", флТоварыВКоробах);
	Если ИмяФормы = "ВнешняяОбработка.гф_КорректировкаЗаказовРезервов.Форма.Форма" Тогда
		ОткрытьФорму("ВнешняяОбработка.гф_КорректировкаЗаказовРезервов.Форма.ФормаЗагрузкиИзФайла", ПараметрыФормы,
			ЭтотОбъект, , , , Оповещение);
	Иначе
		ОткрытьФорму("Обработка.гф_КорректировкаЗаказовРезервов.Форма.ФормаЗагрузкиИзФайла", ПараметрыФормы,
			ЭтотОбъект, , , , Оповещение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьКоличествоТоварыВКоробах(Элемент, СтрокиЗаказа, ОсталосьДобавить, ОсталосьУдалить)
		ОсталосьДобавить = Элемент["Добавить"];
		ОсталосьУдалить = Элемент["Удалить"];
		Для Каждого ТД Из СтрокиЗаказа Цикл
			Если ОсталосьДобавить > 0 Тогда
				ТД["Добавить"] = Элемент["Добавить"];
				ОсталосьДобавить = ОсталосьДобавить - ТД["Добавить"];
			КонецЕсли;
			Если ОсталосьУдалить > 0 И ТД["Количество"] > 0 Тогда
				Удалить = Мин(ОсталосьУдалить, ТД["Количество"]);
				ТД["Удалить"] = Удалить;
				ОсталосьУдалить = ОсталосьУдалить - Удалить;
			КонецЕсли;
			// пересчитываем количество по строке заказа
			//ТД.Количество = ТД.КоличествоСИзменениями + ТД.Добавить - ТД.Удалить;
			//ТД.Сумма = ТД.Количество * ТД.ЦенаКороба;
			ПересчитатьКоличествоПоСтрокеВКоробах("ТоварыВКоробах", "Добавить", "Удалить", , ТД);
			Если ОсталосьДобавить = 0 И ОсталосьУдалить = 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаСтрокуТоварыВКоробах(Элемент, ОсталосьДобавить, ОсталосьУдалить)
	ЗначениеСто = 100;
	СтруктураПоиска = Новый Структура("ВариантКомплектации, флНаличиеВЗаказе", Элемент["ВариантКомплектации"], Истина);
	СтрокиЗаказа = Объект.ТоварыВКоробах.НайтиСтроки(СтруктураПоиска);
	Если СтрокиЗаказа.Количество() > 0 Тогда
		// здесь надо "распределить" количество Добавить/Удалить по строкам
		РаспределитьКоличествоТоварыВКоробах(Элемент, СтрокиЗаказа, ОсталосьДобавить, ОсталосьУдалить);
		
	Иначе
		// здесь не найдены строки для "ВариантКомплектации"
		ТД = Объект.ТоварыВКоробах.Добавить();
		ЗаполнитьЗначенияСвойств(ТД, Элемент);
		
		ТД.Скидка = РассчитатьСкидку(мЗаказКлиента);
		ТД.ВидЦены = _омОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(мЗаказКлиента,
			"Документ.ЗаказКлиента", "гф_ВидЦены");
	
		ТД.Артикул = "";
		Если ЗначениеЗаполнено(ТД.ВариантКомплектации) Тогда
			ТД.ВариантКомплектацииКоличествоПар = ЗаполнитьВариантКомплектацииКоличествоПар(ТД.ВариантКомплектации);
			ТД.Артикул = ПолучитьАртикул(ТД.ВариантКомплектации);
			ТД.ЦенаКороба = РассчитатьЦенуКороба(ТД.ВариантКомплектации);
			//++ТД.СтавкаНДС = гф_ЗаполнитьСтавкуНДС(ТД.ВариантКомплектации);
	ЗаполнитьДокОбъект();
	СтруктураДействий = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(ДокОбъект, Истина);
	ТД["СтавкаНДС"] = гф_ЗаполнитьСтавкуНДС(ТД["ВариантКомплектации"], СтруктураДействий);
	//--
		КонецЕсли;
		ТД.ЦенаКоробаСоСкидкой = ТД.ЦенаКороба * (1 - ТД.Скидка / ЗначениеСто);
		ПересчитатьКоличествоПоСтрокеВКоробах("ТоварыВКоробах", "Добавить", "Удалить", , ТД);
	КонецЕсли;
КонецПроцедуры					

&НаКлиенте
Процедура РаспределитьКоличествоТовары(Элемент, СтрокиЗаказа, ОсталосьДобавить, ОсталосьУдалить)
	ОсталосьДобавить = Элемент["Добавить"];
	ОсталосьУдалить = Элемент["Удалить"];
	Для Каждого ТД Из СтрокиЗаказа Цикл
		Если ОсталосьДобавить > 0 Тогда
			ТД["Добавить"] = Элемент["Добавить"];
			ОсталосьДобавить = ОсталосьДобавить - ТД["Добавить"];
		КонецЕсли;
		Если ОсталосьУдалить > 0 И ТД["Количество"] > 0 Тогда
			Удалить = Мин(ОсталосьУдалить, ТД["Количество"]);
			ТД["Удалить"] = Удалить;
			ОсталосьУдалить = ОсталосьУдалить - Удалить;
		КонецЕсли;
		// пересчитываем количество по строке заказа
		ТД.Количество = ТД.КоличествоСИзменениями + ТД.Добавить - ТД.Удалить;
		ТД.КоличествоУпаковок = ТД.Количество;
		Если ОсталосьДобавить = 0 И ОсталосьУдалить = 0 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры					

&НаКлиенте
Процедура ЗагрузитьИзФайлаСтрокуТовары(Элемент, ОсталосьДобавить, ОсталосьУдалить)
	ЗначениеСто = 100;
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, флНаличиеВЗаказе", Элемент["Номенклатура"],
		Элемент["Характеристика"], Истина);
	СтрокиЗаказа = Объект.Товары.НайтиСтроки(СтруктураПоиска);
	Если СтрокиЗаказа.Количество() > 0 Тогда
		// здесь надо "распределить" количество Добавить/Удалить по строкам
		РаспределитьКоличествоТовары(Элемент, СтрокиЗаказа, ОсталосьДобавить, ОсталосьУдалить);
		
	Иначе
		// здесь не найдены строки для "Номенклатуры - Характеристики"
		ТД = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТД, Элемент);
		
		ТД.Количество = ТД.КоличествоСИзменениями + ТД.Добавить - ТД.Удалить;
		ТД.КоличествоУпаковок = ТД.Количество;
		
		ТД.ИдентификаторСтроки	= Новый УникальныйИдентификатор();
		Если Объект.Товары.Количество() > 0 Тогда
			ТД.Склад				= Объект.Товары[0].Склад;
			ТД.ДатаОтгрузки			= Объект.Товары[0].ДатаОтгрузки;
			ТД.ВариантОбеспечения	= Объект.Товары[0].ВариантОбеспечения;
			ТД.Упаковка				= Объект.Товары[0].Упаковка;
		КонецЕсли;
		ЗаполнитьСтавкуНДСвСтрокеТаблицы("Товары", ТД);
		ДатаЗаказа = гф_ТекущаяДатаСеанса();
		ЗаполнитьВидЦеныПроцентРучнойСкидки(ТД, ДатаЗаказа, мЗаказКлиента);
		Если ЗначениеЗаполнено(ТД.ВидЦены) Тогда
			Отбор = Новый Структура;
			Отбор.Вставить("Номенклатура", ТД.Номенклатура);			
			Отбор.Вставить("ВидЦены", ТД.ВидЦены);
			ЗаполнитьЦену(ТД, Отбор, ДатаЗаказа);
		КонецЕсли;
		// Цена со скидкой
		ТД.гф_ЦенаСоСкидкой = ТД.Цена * (1 - ТД.ПроцентРучнойСкидки / ЗначениеСто);
	КонецЕсли;
КонецПроцедуры
		
&НаКлиенте
Процедура ЗагрузкаИзФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДанныеФайла.Очистить();
	ОчиститьСообщения();
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		Для Каждого Элемент Из Результат Цикл
			ОсталосьДобавить = 0;
			ОсталосьУдалить = 0;
			Если флТоварыВКоробах Тогда
				// Товары в коробах
				ЗагрузитьИзФайлаСтрокуТоварыВКоробах(Элемент, ОсталосьДобавить, ОсталосьУдалить);
				ПоказатьНеРаспределеноТоварыВКоробах(Элемент, ОсталосьДобавить, ОсталосьУдалить);
				
			Иначе
				// Товары в парах
				ЗагрузитьИзФайлаСтрокуТовары(Элемент, ОсталосьДобавить, ОсталосьУдалить);
				ПоказатьНеРаспределеноТовары(Элемент, ОсталосьДобавить, ОсталосьУдалить);
				
			КонецЕсли;
		КонецЦикла;
		
		ЗаполнитьЗаказИзменен();
		Если флТоварыВКоробах Тогда
			// Галфинд СадомцевСА 21.02.2023 Добавил процедуру ПересчитатьСуммуСНДСТоварыВКоробах()
			ПересчитатьСуммуСНДСТоварыВКоробах();
			//Для Каждого СтрокаТаблицы Из Объект.ТоварыВКоробах Цикл
			//	ПересчитатьСуммуСНДСвСтрокеТаблицыВКоробах("ТоварыВКоробах", СтрокаТаблицы);
			//КонецЦикла;
			ПроверитьОтрицательныйИтогТаблицы("ТоварыВКоробах");
			ПересчитатьСуммуЗаказаПредварительно("ТоварыВКоробах");
		Иначе
			// Галфинд СадомцевСА 21.02.2023 Добавил процедуру ПересчитатьСуммуСНДСТовары()
			ПересчитатьСуммуСНДСТовары();
			//Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
			//	ПересчитатьСуммуСНДСвСтрокеТаблицы("Товары", СтрокаТаблицы);
			//КонецЦикла;
			ПроверитьОтрицательныйИтогТаблицы("Товары");
			ПересчитатьСуммуЗаказаПредварительно("Товары");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуСНДСТоварыВКоробах()
	Для Каждого СтрокаТаблицы Из Объект.ТоварыВКоробах Цикл
		ПересчитатьСуммуСНДСвСтрокеТаблицыВКоробах("ТоварыВКоробах", СтрокаТаблицы);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуСНДСТовары()
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		ПересчитатьСуммуСНДСвСтрокеТаблицы("Товары", СтрокаТаблицы);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНеРаспределеноТоварыВКоробах(Элемент, ОсталосьДобавить, ОсталосьУдалить)
	НеРаспределено = "";
	Если ОсталосьДобавить > 0 Тогда
		НеРаспределено = НеРаспределено + "Не получилось добавить:"
		+ ОсталосьДобавить + ". ВариантКомплектации:"
		+ Элемент["ВариантКомплектации"];
	КонецЕсли;
	Если ОсталосьУдалить > 0 Тогда
		НеРаспределено = НеРаспределено + "Не получилось удалить:"
		+ ОсталосьУдалить + ". ВариантКомплектации:"
		+ Элемент["ВариантКомплектации"];
	КонецЕсли;
	Если НеРаспределено <> "" Тогда
		СообщитьПользователю(НеРаспределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНеРаспределеноТовары(Элемент, ОсталосьДобавить, ОсталосьУдалить)
	НеРаспределено = "";
	Если ОсталосьДобавить > 0 Тогда
		НеРаспределено = НеРаспределено + "Не получилось добавить:"	+ ОсталосьДобавить
		+ ". Номенклатура:" + Элемент["Номенклатура"]
		+ ". Характеристика:" + Элемент["Характеристика"];
	КонецЕсли;
	Если ОсталосьУдалить > 0 Тогда
		НеРаспределено = НеРаспределено + "Не получилось удалить:" + ОсталосьУдалить
		+ ". Номенклатура:" + Элемент["Номенклатура"]
		+ ". Характеристика:" + Элемент["Характеристика"];
	КонецЕсли;
	Если НеРаспределено <> "" Тогда
		СообщитьПользователю(НеРаспределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОтрицательныйИтогТаблицы(ИмяТЧ)
	Для Каждого ТД Из Объект[ИмяТЧ] Цикл
		Если ТД.Количество < 0 Тогда
			ТекстСообщения = "Отрицательный предварительный итог в строке заказа:" + ТД.НомерСтроки;
			СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если ИмяТЧ = "Товары" Тогда
			Если ЗначениеЗаполнено(ТД.Добавить) ИЛИ ЗначениеЗаполнено(ТД.Удалить) Тогда
				ТД["Пометка"] = Истина;
			Иначе
				ТД["Пометка"] = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуВКоробах(Команда)
	СтрокаТаблицы = Объект.ТоварыВКоробах.Добавить();
	СтрокаТаблицы.флДобавленаВручную	= Истина;
	СтрокаТаблицы.Скидка = РассчитатьСкидку(мЗаказКлиента);
	СтрокаТаблицы.ВидЦены = _омОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(мЗаказКлиента,
		"Документ.ЗаказКлиента", "гф_ВидЦены");
	
	Идентификатор = СтрокаТаблицы.ПолучитьИдентификатор();
	
	ТекущийЭлемент = Элементы.ТоварыВКоробах;
	Элементы.ТоварыВКоробах.ТекущаяСтрока = Идентификатор;
	флЗаказИзменен = Истина;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьАртикул(ВариантКомплектации)
	Возврат ВариантКомплектации.Владелец.Артикул;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьФлажкиДобавленоОтмененоПоСтрокеВКоробах(СтрокаТаблицы = Неопределено)
	Если СтрокаТаблицы = Неопределено Тогда
		ТД = Элементы["ТоварыВКоробах"].ТекущиеДанные;
	Иначе
		ТД = СтрокаТаблицы;
	КонецЕсли;
	Если ТД <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТД["Добавить"]) Тогда
			ТД["флДобавлено"] = Истина;
		Иначе
			ТД["флДобавлено"] = Ложь;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТД["Удалить"]) Тогда
			ТД["флОтменено"] = Истина;
		Иначе
			ТД["флОтменено"] = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКоличествоПоСтрокеВКоробах(ИмяТЧ, ПолеДобавить, ПолеУдалить, ПолеПеренестиВДругойЗаказ = "", СтрокаТаблицы = Неопределено)
	Если СтрокаТаблицы = Неопределено Тогда
		ТД = Элементы[ИмяТЧ].ТекущиеДанные;
	Иначе
		ТД = СтрокаТаблицы;
	КонецЕсли;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТД.Количество = ТД.КоличествоСИзменениями;
	Если ПолеДобавить <> "" Тогда
		ТД.Количество = ТД.Количество + ТД[ПолеДобавить];
	КонецЕсли;
	Если ПолеУдалить <> "" Тогда
		ТД.Количество = ТД.Количество - ТД[ПолеУдалить];
	КонецЕсли;
	Если ПолеПеренестиВДругойЗаказ <> "" Тогда
		ТД.Количество = ТД.Количество - ТД[ПолеПеренестиВДругойЗаказ];
	КонецЕсли;
	Если ТД.Количество < 0 Тогда
		ТекстСообщения = "Отрицательный предварительный итог в строке заказа:" + ТД.НомерСтроки;
		СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ЗаполнитьПометкуПоСтроке(ТД, ПолеДобавить, ПолеУдалить, ПолеПеренестиВДругойЗаказ);
	ЗаполнитьЗаказИзменен();
	ЗаполнитьКоличествоПар(ИмяТЧ);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПометкуПоСтроке(ТД, ПолеДобавить, ПолеУдалить, ПолеПеренестиВДругойЗаказ)
	ТД["Пометка"] = Ложь;
	Если ПолеДобавить <> ""	И ЗначениеЗаполнено(ТД[ПолеДобавить]) Тогда
		ТД["Пометка"] = Истина;
	КонецЕсли;
	Если ПолеУдалить <> "" И ЗначениеЗаполнено(ТД[ПолеУдалить]) Тогда
		ТД["Пометка"] = Истина;
	КонецЕсли;
	Если ПолеПеренестиВДругойЗаказ <> "" И ЗначениеЗаполнено(ТД[ПолеПеренестиВДругойЗаказ]) Тогда
		ТД["Пометка"] = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуВКоробах(Команда)
	ТД = Элементы.ТоварыВКоробах.ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		ИдентификаторСтроки = ТД.ПолучитьИдентификатор();
		СтрокаЗаказа = Объект.ТоварыВКоробах.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если СтрокаЗаказа <> Неопределено Тогда
			Индекс = Объект.ТоварыВКоробах.Индекс(СтрокаЗаказа);
			Объект.ТоварыВКоробах.Удалить(Индекс);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВКоробахПриАктивизацииСтроки(Элемент)
	Элементы.ТоварыВКоробахУдалитьСтрокуВКоробах.Доступность = Ложь;
	ТД = Элементы.ТоварыВКоробах.ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		Элементы.ТоварыВКоробахУдалитьСтрокуВКоробах.Доступность = ТД.флДобавленаВручную;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РежимРаботыПриИзменении(Элемент)
	ЗаполнитьТаблицаЗаказы();
	флДанныеЗаказаЗаполнены = Ложь;
	УправлениеДоступностьюТаблиц();
	Если РежимРаботы = 1 Тогда
		Элементы.ВыборСтатуса.Видимость = Истина;
		Элементы.флПоказатьПротоколРапределения.Видимость = Истина;
	Иначе
		Элементы.ВыборСтатуса.Видимость = Ложь;
		Элементы.флПоказатьПротоколРапределения.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРезервыНаСервере()
	
	СписокНоменклатуры = Объект.Резервы.Выгрузить().ВыгрузитьКолонку("Номенклатура");
	ТаблицаОстатки = ПолучитьТаблицуОстатков(СписокНоменклатуры, мЗаказКлиента, Истина,
		"Склад, Номенклатура, Характеристика, Назначение", "Доступно");
	
	СтруктураПоиска = Новый Структура("Склад, Номенклатура, Характеристика, Назначение");
	Для Каждого СтрокаТЧ Из Объект.Резервы Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЧ);
		СтруктураПоиска["Назначение"] = мНазначение;
		НайденныеСтроки = ТаблицаОстатки.НайтиСтроки(СтруктураПоиска);
		Доступно = 0;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Доступно = Доступно + НайденнаяСтрока["Доступно"];
		КонецЦикла;
		СтрокаТЧ["ТоварВРезерве"] = Доступно;
		
		СтруктураПоиска["Назначение"] = Неопределено;
		НайденныеСтроки = ТаблицаОстатки.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтруктураПоиска["Назначение"] = Справочники.Назначения.ПустаяСсылка();
			НайденныеСтроки = ТаблицаОстатки.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;
		Доступно = 0;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Доступно = Доступно + НайденнаяСтрока["Доступно"];
		КонецЦикла;
		СтрокаТЧ["ДоступноНаСкладе"] = Доступно;
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтобратьОстаткиПоЗаказу(ТаблицаОстатки, ЗаказКлиента)
	МассивУдалитьСтроки = Новый Массив;
	Для Каждого СтрокаТЗ Из ТаблицаОстатки Цикл
		Если СтрокаТЗ["ЗаказНаОтгрузку"] <> ЗаказКлиента Тогда
			МассивУдалитьСтроки.Добавить(СтрокаТЗ);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдалитьСтроку Из МассивУдалитьСтроки Цикл
		ТаблицаОстатки.Удалить(УдалитьСтроку);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтобратьОстаткиПоНазначению(ТаблицаОстатки, Назначение)
	МассивУдалитьСтроки = Новый Массив;
	Для Каждого СтрокаТЗ Из ТаблицаОстатки Цикл
		Если СтрокаТЗ["Назначение"] <> Назначение Тогда
			МассивУдалитьСтроки.Добавить(СтрокаТЗ);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдалитьСтроку Из МассивУдалитьСтроки Цикл
		ТаблицаОстатки.Удалить(УдалитьСтроку);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДоступныйОстатокНаСкладе(ТаблицаНоменклатуры, СтрокаУЛ, ТаблицаОстатки)
	Если ЗначениеЗаполнено(СтрокаУЛ.УпаковочныйЛист.гф_ТекущийОрдер) Тогда
		// при "распределении парных остаков" по коробам не учитываем "отгруженные" упаковочные листы
		Возврат;
	КонецЕсли;
	СтруктураПоиска = Новый Структура("ВариантКомплектации, УпаковочныйЛист");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаУЛ);
	СтрокиНоменклатуры = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
	СтруктураПоискаОстатков = Новый Структура("Номенклатура, Характеристика");
	Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоискаОстатков, СтрокаНоменклатуры);
		СтрокиОстатков = ТаблицаОстатки.НайтиСтроки(СтруктураПоискаОстатков);
		Если СтрокиОстатков.Количество() > 0 Тогда
			СтрокаОстатков = СтрокиОстатков[0];
			Доступно = Мин(СтрокаОстатков["Доступно"], СтрокаНоменклатуры["Количество"]);
			СтрокаНоменклатуры["ОстатокНаСкладе"] = Доступно;
			СтрокаНоменклатуры["Резерв"] = Доступно;
			СтрокаОстатков["Доступно"] = СтрокаОстатков["Доступно"] - Доступно;
		КонецЕсли;
		Если СтрокаНоменклатуры["Количество"] > СтрокаНоменклатуры["ОстатокНаСкладе"] Тогда
			СтрокаУЛ["флНеХватаетДоступныхОстатков"] = Истина;
		КонецЕсли;
	КонецЦикла;
	Если СтрокаУЛ["флНеХватаетДоступныхОстатков"] = Истина Тогда
		Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
			СтрокаНоменклатуры["ОстатокНаСкладе"] = 0;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСвободныйОстатокНаСкладе(ТаблицаНоменклатуры, ТаблицаОстатки)
	Для Каждого СтрокаОстатков Из ТаблицаОстатки Цикл
		Если ЗначениеЗаполнено(СтрокаОстатков["Доступно"]) Тогда
			нс = ТаблицаНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(нс, СтрокаОстатков);
			нс.ОстатокНаСкладе = СтрокаОстатков["Доступно"];
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СформироватьПротоколРаспределенияРезервов(ТаблицаНоменклатуры, УпаковочныеЛисты, ЭтоРезерв = Истина)
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ТолькоПросмотр = Истина;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Макет = ОбработкаОбъект.ПолучитьМакет("РаспределениеОстатков");
	
	ОбластьШапка	= Макет.ПолучитьОбласть("Шапка");
	ОбластьВК		= Макет.ПолучитьОбласть("ВариантКомплектации");
	ОбластьУЛ		= Макет.ПолучитьОбласть("УпаковочныйЛист");
	ОбластьСтрока	= Макет.ПолучитьОбласть("Строка");
	ОбластьИтог		= Макет.ПолучитьОбласть("Итог");
	
	СтруктураПоиска = Новый Структура("ВариантКомплектации, УпаковочныйЛист");
	ОбластьШапка.Параметры.Заказ = мЗаказКлиента;
	ТабДок.Вывести(ОбластьШапка);
	Для Каждого СтрокаУЛ Из УпаковочныеЛисты Цикл
		ОбластьВК.Параметры.Заполнить(СтрокаУЛ);
		ОбластьУЛ.Параметры.Заполнить(СтрокаУЛ);
		ОбластьУЛ.Параметры.РасходныйОрдер = СтрокаУЛ.УпаковочныйЛист.гф_ТекущийОрдер;
		ТабДок.Вывести(ОбластьВК);
		ТабДок.Вывести(ОбластьУЛ);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаУЛ);
		СтрокиНоменклатуры = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
			ОбластьСтрока.Параметры.Заполнить(СтрокаНоменклатуры);
			ТабДок.Вывести(ОбластьСтрока);
		КонецЦикла;
	КонецЦикла;
	// выводим в отчет "свободные" резервы
	СтруктураПоиска["ВариантКомплектации"] = Неопределено;
	СтруктураПоиска["УпаковочныйЛист"] = Неопределено;
	СтрокиНоменклатуры = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
	Если СтрокиНоменклатуры.Количество() > 0 Тогда
		ОбластьВК.Параметры.ВариантКомплектации = Неопределено;
		ОбластьУЛ.Параметры.УпаковочныйЛист = Неопределено;
		ОбластьУЛ.Параметры.РасходныйОрдер = Неопределено;
		ТабДок.Вывести(ОбластьВК);
		ТабДок.Вывести(ОбластьУЛ);
		Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
			ОбластьСтрока.Параметры.Заполнить(СтрокаНоменклатуры);
			ТабДок.Вывести(ОбластьСтрока);
		КонецЦикла;
	КонецЕсли;
	ВсегоОстатковНоменклатуры = ТаблицаНоменклатуры.Скопировать();
	ВсегоОстатковНоменклатуры.Свернуть("Номенклатура, Характеристика", "ОстатокНаСкладе");
	ТабДок.Вывести(ОбластьИтог);
	ОбластьСтрока.Параметры.Количество = 0;
	ОбластьСтрока.Параметры.Резерв = 0;
	Для Каждого СтрокаНоменклатуры Из ВсегоОстатковНоменклатуры Цикл
		ОбластьСтрока.Параметры.Заполнить(СтрокаНоменклатуры);
		ТабДок.Вывести(ОбластьСтрока);
	КонецЦикла;
	Если ЭтоРезерв Тогда
		РаспределениеРезервовАдресХранилища = ПоместитьВоВременноеХранилище(ТабДок, УникальныйИдентификатор);
	Иначе
		РаспределениеОстатковАдресХранилища = ПоместитьВоВременноеХранилище(ТабДок, УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстЗапросаОстаткиКоробов()
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	гф_ДвижениеКодовМаркировкиОрганизацииОстатки.Организация КАК Организация,
	        |	гф_ДвижениеКодовМаркировкиОрганизацииОстатки.Склад КАК Склад,
	        |	гф_ДвижениеКодовМаркировкиОрганизацииОстатки.КМ КАК КМ,
	        |	гф_ДвижениеКодовМаркировкиОрганизацииОстатки.КМ.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
	        |	гф_ДвижениеКодовМаркировкиОрганизацииОстатки.Резерв КАК Резерв,
	        |	гф_ДвижениеКодовМаркировкиОрганизацииОстатки.КоличествоОстаток КАК КоличествоОстаток
	        |ПОМЕСТИТЬ втОстаткиУпаковок
	        |ИЗ
	        |	РегистрНакопления.гф_ДвижениеКодовМаркировкиОрганизации.Остатки(
	        |			,
	        |			Организация = &Организация
	        |				И Склад = &Склад
	        |				И КМ.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка)) КАК гф_ДвижениеКодовМаркировкиОрганизацииОстатки
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	гф_ДвижениеКодовМаркировкиОрганизацииОстатки.Организация КАК Организация,
	        |	гф_ДвижениеКодовМаркировкиОрганизацииОстатки.Склад КАК Склад,
	        |	гф_ДвижениеКодовМаркировкиОрганизацииОстатки.КМ КАК КМ,
	        |	гф_ДвижениеКодовМаркировкиОрганизацииОстатки.КМ.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
	        |	гф_ДвижениеКодовМаркировкиОрганизацииОстатки.Резерв КАК Резерв,
	        |	гф_ДвижениеКодовМаркировкиОрганизацииОстатки.КоличествоОстаток КАК КоличествоОстаток,
	        |	УпаковочныйЛист.гф_Заказ КАК ЗаказКлиента,
	        |	УпаковочныйЛист.гф_Комплектация КАК ВариантКомплектации,
	        |	УпаковочныйЛист.Ссылка КАК УпаковочныйЛист
	        |ПОМЕСТИТЬ втОстаткиКоробов
	        |ИЗ
	        |	втОстаткиУпаковок КАК гф_ДвижениеКодовМаркировкиОрганизацииОстатки
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист КАК УпаковочныйЛист
	        |		ПО гф_ДвижениеКодовМаркировкиОрганизацииОстатки.КМ.ЗначениеШтрихкода = УпаковочныйЛист.Код
	        |			И (УпаковочныйЛист.Ссылка.Проведен)
	        |ГДЕ
	        |	УпаковочныйЛист.гф_Заказ = &гф_Заказ
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	СУММА(втОстаткиКоробов.КоличествоОстаток) КАК КоличествоОстаток,
	        |	втОстаткиКоробов.ВариантКомплектации КАК ВариантКомплектации
	        |ИЗ
	        |	втОстаткиКоробов КАК втОстаткиКоробов
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	втОстаткиКоробов.ВариантКомплектации";
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаСвободныеОстаткиКоробов()
	Возврат "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	        |	гф_ДвижениеКодовМаркировкиОрганизацииОстатки.КМ КАК КМ
	        |ПОМЕСТИТЬ втОстаткиКМ
	        |ИЗ
	        |	РегистрНакопления.гф_ДвижениеКодовМаркировкиОрганизации.Остатки(
	        |			,
	        |			Организация = &Организация
	        |				И Склад = &Склад
	        |				И КМ.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка)) КАК гф_ДвижениеКодовМаркировкиОрганизацииОстатки
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	1 КАК КоличествоОстаток,
	        |	УпаковочныйЛист.гф_Комплектация КАК ВариантКомплектации,
	        |	УпаковочныйЛист.Ссылка КАК УпаковочныйЛист
	        |ПОМЕСТИТЬ втСвободныеОстаткиКоробов
	        |ИЗ
	        |	втОстаткиКМ КАК гф_ДвижениеКодовМаркировкиОрганизацииОстатки
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист КАК УпаковочныйЛист
	        |		ПО гф_ДвижениеКодовМаркировкиОрганизацииОстатки.КМ.ЗначениеШтрихкода = УпаковочныйЛист.Код
	        |			И (УпаковочныйЛист.Ссылка.Проведен)
	        |ГДЕ
	        |	УпаковочныйЛист.гф_Заказ = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
	        |	И УпаковочныйЛист.гф_Комплектация В(&ВариантыКомплектации)
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	СУММА(втСвободныеОстаткиКоробов.КоличествоОстаток) КАК КоличествоОстаток,
	        |	втСвободныеОстаткиКоробов.ВариантКомплектации КАК ВариантКомплектации
	        |ИЗ
	        |	втСвободныеОстаткиКоробов КАК втСвободныеОстаткиКоробов
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	втСвободныеОстаткиКоробов.ВариантКомплектации";
КонецФункции

&НаСервере
Процедура ЗаполнитьРезервыВКоробахНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	// =============
	// ТоварВРезерве
	// =============
	Запрос.Текст = ТекстЗапросаОстаткиКоробов();
	Запрос.УстановитьПараметр("Организация", мЗаказКлиента.Организация);
	Запрос.УстановитьПараметр("Склад", мЗаказКлиента.Склад);
	Запрос.УстановитьПараметр("гф_Заказ", мЗаказКлиента);
	Результат = Запрос.Выполнить();
	//_омОтладка.ПолучитьСодержимоеВременнойТаблицы(Запрос, "втОстаткиУпаковок")
	//_омОтладка.ПолучитьСодержимоеВременнойТаблицы(Запрос, "втОстаткиКоробов")
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	втОстаткиКоробов.УпаковочныйЛист КАК УпаковочныйЛист,
	               |	втОстаткиКоробов.ВариантКомплектации КАК ВариантКомплектации,
	               |	Ложь КАК флНеХватаетДоступныхОстатков
	               |ИЗ
	               |	втОстаткиКоробов КАК втОстаткиКоробов";
	РезультатУпаковочныеЛисты = Запрос.Выполнить();
	УпаковочныеЛисты = РезультатУпаковочныеЛисты.Выгрузить();
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	втОстаткиКоробов.ВариантКомплектации КАК ВариантКомплектации,
	               |	втОстаткиКоробов.УпаковочныйЛист КАК УпаковочныйЛист,
	               |	УпаковочныйЛистТовары.Номенклатура КАК Номенклатура,
	               |	УпаковочныйЛистТовары.Характеристика КАК Характеристика,
	               |	СУММА(УпаковочныйЛистТовары.Количество) КАК Количество,
	               |	0 КАК ОстатокНаСкладе,
	               |	0 КАК Резерв
	               |ИЗ
	               |	втОстаткиКоробов КАК втОстаткиКоробов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
	               |		ПО втОстаткиКоробов.УпаковочныйЛист = УпаковочныйЛистТовары.Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втОстаткиКоробов.ВариантКомплектации,
	               |	втОстаткиКоробов.УпаковочныйЛист,
	               |	УпаковочныйЛистТовары.Номенклатура,
	               |	УпаковочныйЛистТовары.Характеристика";
	РезультатНоменклатура = Запрос.Выполнить();
	ТаблицаНоменклатуры = РезультатНоменклатура.Выгрузить();
		
	СписокНоменклатуры = ПолучитьСписокНоменклатуры(ТаблицаНоменклатуры);
	ТаблицаОстатки = ПолучитьТаблицуОстатков(СписокНоменклатуры, мЗаказКлиента, Истина,
				"Склад, Номенклатура, Характеристика, Назначение", "Доступно");
	ОтобратьОстаткиПоНазначению(ТаблицаОстатки, мНазначение);
	ТаблицаОстатки.Свернуть("Номенклатура, Характеристика", "Доступно");
	
	// распределим товарные остатки по упаковочным листам
	Для Каждого СтрокаУЛ Из УпаковочныеЛисты Цикл
		КопияТаблицаОстатки = ТаблицаОстатки.Скопировать();
		// проверяем хватит ли остатков для Упаковочного листа
		ЗаполнитьДоступныйОстатокНаСкладе(ТаблицаНоменклатуры, СтрокаУЛ, ТаблицаОстатки);
		Если СтрокаУЛ["флНеХватаетДоступныхОстатков"] Тогда
			// переписываем Таблицу остатков с учетом "резервов" для Упаковочного листа
			ТаблицаОстатки = КопияТаблицаОстатки.Скопировать();
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьСвободныйОстатокНаСкладе(ТаблицаНоменклатуры, ТаблицаОстатки);
	СформироватьПротоколРаспределенияРезервов(ТаблицаНоменклатуры, УпаковочныеЛисты);
	
	флПоказатьПротоколРаспределенияРезервов = Ложь;
	Выборка = Результат.Выбрать();
	Для Каждого СтрокаРезерва Из Объект.РезервыВКоробах Цикл
		Выборка.Сбросить();
		СтруктураПоиска = Новый Структура("ВариантКомплектации", СтрокаРезерва["ВариантКомплектации"]);
		Если Выборка.НайтиСледующий(СтруктураПоиска) Тогда
			// значение по-умолчанию
			СтрокаРезерва["ТоварВРезерве"] = Выборка.КоличествоОстаток;
			
			// проверка резервов коробов по Варианту комплектации
			ОтборПоВариантуКомплектации = Новый Структура("ВариантКомплектации, флНеХватаетДоступныхОстатков",
				СтрокаРезерва["ВариантКомплектации"], Ложь);
			СтрокиУЛ = УпаковочныеЛисты.НайтиСтроки(ОтборПоВариантуКомплектации);
			мДоступноКоробов = СтрокиУЛ.Количество();
			СтрокаРезерва["ТоварВРезерве"] = МИН(мДоступноКоробов, СтрокаРезерва["ТоварВРезерве"]);
			флПоказатьПротоколРаспределенияРезервов = Истина;
		КонецЕсли;
	КонецЦикла;

	// ================
	// ДоступноНаСкладе
	// ================
	Запрос.Текст = ТекстЗапросаСвободныеОстаткиКоробов();
	РезервыВКоробах = Объект.РезервыВКоробах.Выгрузить(, "ВариантКомплектации");
	ВариантыКомплектации = РезервыВКоробах.ВыгрузитьКолонку("ВариантКомплектации");
	Запрос.УстановитьПараметр("ВариантыКомплектации", ВариантыКомплектации);
	Результат = Запрос.Выполнить();
	//_омОтладка.ПолучитьСодержимоеВременнойТаблицы(Запрос, "втОстаткиКМ")
	//_омОтладка.ПолучитьСодержимоеВременнойТаблицы(Запрос, "втСвободныеОстаткиКоробов")
	СвободныеОстатки = Результат.Выгрузить();
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	втСвободныеОстаткиКоробов.УпаковочныйЛист КАК УпаковочныйЛист,
	               |	втСвободныеОстаткиКоробов.ВариантКомплектации КАК ВариантКомплектации,
	               |	Ложь КАК флНеХватаетДоступныхОстатков
	               |ИЗ
	               |	втСвободныеОстаткиКоробов КАК втСвободныеОстаткиКоробов";
	РезультатУпаковочныеЛисты = Запрос.Выполнить();
	УпаковочныеЛисты = РезультатУпаковочныеЛисты.Выгрузить();
	// "свободные" Упаковочные листы - служебная таблица
	// используется при создании Корректировки назначения с видом операции: Резервирование
	мСвободныеУпаковочныеЛисты.Загрузить(РезультатУпаковочныеЛисты.Выгрузить());

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	втСвободныеОстаткиКоробов.ВариантКомплектации КАК ВариантКомплектации,
	               |	втСвободныеОстаткиКоробов.УпаковочныйЛист КАК УпаковочныйЛист,
	               |	УпаковочныйЛистТовары.Номенклатура КАК Номенклатура,
	               |	УпаковочныйЛистТовары.Характеристика КАК Характеристика,
	               |	СУММА(УпаковочныйЛистТовары.Количество) КАК Количество,
	               |	0 КАК ОстатокНаСкладе,
	               |	0 КАК Резерв
	               |ИЗ
	               |	втСвободныеОстаткиКоробов КАК втСвободныеОстаткиКоробов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
	               |		ПО втСвободныеОстаткиКоробов.УпаковочныйЛист = УпаковочныйЛистТовары.Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втСвободныеОстаткиКоробов.ВариантКомплектации,
	               |	втСвободныеОстаткиКоробов.УпаковочныйЛист,
	               |	УпаковочныйЛистТовары.Номенклатура,
	               |	УпаковочныйЛистТовары.Характеристика";
	РезультатНоменклатура = Запрос.Выполнить();
	ТаблицаНоменклатуры = РезультатНоменклатура.Выгрузить();

	СписокНоменклатуры = ПолучитьСписокНоменклатуры(ТаблицаНоменклатуры);
	ТаблицаОстатки = ПолучитьТаблицуОстатков(СписокНоменклатуры, мЗаказКлиента, Ложь,
			"Номенклатура, Характеристика", "Доступно");
	
	// распределим товарные остатки по упаковочным листам
	Для Каждого СтрокаУЛ Из УпаковочныеЛисты Цикл
		КопияТаблицаОстатки = ТаблицаОстатки.Скопировать();
		// проверяем хватит ли остатков для Упаковочного листа
		ЗаполнитьДоступныйОстатокНаСкладе(ТаблицаНоменклатуры, СтрокаУЛ, ТаблицаОстатки);
		Если СтрокаУЛ["флНеХватаетДоступныхОстатков"] Тогда
			// переписываем Таблицу остатков с учетом "резервов" для Упаковочного листа
			ТаблицаОстатки = КопияТаблицаОстатки.Скопировать();
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьСвободныйОстатокНаСкладе(ТаблицаНоменклатуры, ТаблицаОстатки);
	СформироватьПротоколРаспределенияРезервов(ТаблицаНоменклатуры, УпаковочныеЛисты, Ложь);
	
	флПоказатьПротоколРаспределенияОстатков = Ложь;
	Для Каждого СтрокаРезерва Из Объект.РезервыВКоробах Цикл
		СтрокаСвободныхОстатков = СвободныеОстатки.Найти(СтрокаРезерва["ВариантКомплектации"], "ВариантКомплектации");
		Если СтрокаСвободныхОстатков = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		// значение по-умолчанию
		СтрокаРезерва["ДоступноНаСкладе"] = СтрокаСвободныхОстатков["КоличествоОстаток"];
		
		// проверка "свободных" коробов по Варианту комплектации
		ОтборПоВариантуКомплектации = Новый Структура("ВариантКомплектации, флНеХватаетДоступныхОстатков",
			СтрокаРезерва["ВариантКомплектации"], Ложь);
		СтрокиУЛ = УпаковочныеЛисты.НайтиСтроки(ОтборПоВариантуКомплектации);
		мДоступноКоробов = СтрокиУЛ.Количество();
		СтрокаРезерва["ДоступноНаСкладе"] = МИН(мДоступноКоробов, СтрокаРезерва["ДоступноНаСкладе"]);
		флПоказатьПротоколРаспределенияОстатков = Истина;
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокНоменклатуры(СтрокиНоменклатуры)
	СписокНоменклатуры = Новый Массив;
	Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
		Если СписокНоменклатуры.Найти(СтрокаНоменклатуры["Номенклатура"]) = Неопределено Тогда
			СписокНоменклатуры.Добавить(СтрокаНоменклатуры["Номенклатура"]);
		КонецЕсли;
	КонецЦикла;
	Возврат СписокНоменклатуры;
КонецФункции

&НаСервереБезКонтекста
Процедура ИсправитьДоступноНаСкладе(мДоступноНаСкладе, ТаблицаОстатки, СтрокаРезерва, ВариантКомплектации, ПолеОстатка)
	Для Каждого СтрокаКомплектации Из ВариантКомплектации.Товары Цикл
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика", СтрокаКомплектации["Номенклатура"],
		СтрокаКомплектации["Характеристика"]);
		СтрокиОстатковНоменклатуры = ТаблицаОстатки.НайтиСтроки(СтруктураПоиска);
		Если СтрокиОстатковНоменклатуры.Количество() > 0 Тогда
			ДоступноНаСкладе = СтрокаРезерва[ПолеОстатка];
			ТребуемыйОстатокНоменклатуры = СтрокаРезерва[ПолеОстатка] * СтрокаКомплектации.Количество;
			// здесь найдены свободные остатки по Номенклатуре
			СтрокаОстатковНоменклатуры = СтрокиОстатковНоменклатуры[0];
			НеХватает = ТребуемыйОстатокНоменклатуры - СтрокаОстатковНоменклатуры.Доступно;
			Пока НеХватает > 0 Цикл
				НеХватает = НеХватает - СтрокаКомплектации.Количество;
				ДоступноНаСкладе = ДоступноНаСкладе - 1;
			КонецЦикла;
			мДоступноНаСкладе = МИН(мДоступноНаСкладе, ДоступноНаСкладе);
		Иначе
			// здесь НЕ найдены свободные остатки по Номенклатуре
			СтрокаРезерва[ПолеОстатка] = 0;
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТаблицуОстатков(СписокНоменклатуры, мЗаказКлиента, парамОбособленныеТовары, ПоляГруппировки,
			ПоляСуммирования)
	
	СхемаКомпоновкиДанных = Отчеты.ОстаткиИДоступностьТоваров.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	НастройкиОтчета = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтчета);
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	
    ГруппировкаДетальныеПоля = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
    ГруппировкаДетальныеПоля.Использование = Истина;
    ГруппировкаДетальныеПоля.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	ПолеПараметрыДанных	= Новый ПолеКомпоновкиДанных("ПараметрыДанных");
	ПолеСистемныеПоля	= Новый ПолеКомпоновкиДанных("СистемныеПоля"); 
    Для Каждого ПолеВыбора Из КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		ВыбранноеПоле = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Использование	= Не (ПолеВыбора.Поле = ПолеПараметрыДанных ИЛИ ПолеВыбора.Поле = ПолеСистемныеПоля);
		ВыбранноеПоле.Поле			= ПолеВыбора.Поле;
	КонецЦикла;	 
	
	ПараметрОбособленныеТовары = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(
		"ПоказатьОбособленныеТовары");
	Если ПараметрОбособленныеТовары <> Неопределено Тогда
		ПараметрОбособленныеТовары.Значение = парамОбособленныеТовары;
	КонецЕсли;
	
	ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Номенклатура");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ПравоеЗначение	= СписокНоменклатуры;
	
	ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Склад");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ПравоеЗначение	= мЗаказКлиента.Склад;
	
	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);

	ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.Основной.Запрос;

	ТекстЗапросаВесУпаковки = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
		"Таблица.Номенклатура.ЕдиницаИзмерения", "Таблица.Номенклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаВесНоменклатуры", ТекстЗапросаВесУпаковки);
		
	ТекстЗапросаОбъемУпаковки = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки(
		"Таблица.Номенклатура.ЕдиницаИзмерения", "Таблица.Номенклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаОбъемНоменклатуры", ТекстЗапросаОбъемУпаковки);

	СхемаКомпоновкиДанных.НаборыДанных.Основной.Запрос = ТекстЗапроса;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();    
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	ТипГенератора = Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений");
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, , , ТипГенератора);
    
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
    
    Таблица = Новый ТаблицаЗначений;
    
    ПроцессорВыводаРезультатаКомпоновкиДанных = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ПроцессорВыводаРезультатаКомпоновкиДанных.УстановитьОбъект(Таблица);
    ПроцессорВыводаРезультатаКомпоновкиДанных.Вывести(ПроцессорКомпоновкиДанных);
	
	МассивУдалитьСтроки = Новый Массив;
	Для Каждого СтрокаТЗ Из Таблица Цикл
		Если СтрокаТЗ["ТипЗаписи"] <> "Сейчас" Тогда
			МассивУдалитьСтроки.Добавить(СтрокаТЗ);
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдалитьСтроку Из МассивУдалитьСтроки Цикл
		Таблица.Удалить(УдалитьСтроку);
	КонецЦикла;
	ТаблицаОстатки = Таблица.Скопировать();
	ТаблицаОстатки.Свернуть(ПоляГруппировки, ПоляСуммирования);
	
	Возврат ТаблицаОстатки;
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьИтогПоСтрокеРезерва(СтрокаТаблицы = Неопределено)
	Если СтрокаТаблицы = Неопределено Тогда
		ТД = Элементы.Резервы.ТекущиеДанные;
	Иначе
		ТД = СтрокаТаблицы;
	КонецЕсли;
	Если ТД <> Неопределено Тогда
		ТД.КоличествоУпаковок = ТД.КоличествоСИзменениями - ТД.ПеренестиВДругойЗаказ;
		Если ТД.Количество < 0 Тогда
			ТекстСообщения = "Отрицательный предварительный итог в строке заказа:" + ТД.НомерСтроки;
			СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		//СтруктураДействий = Новый Структура;
		//ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ДокОбъект);
		//ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТД, СтруктураДействий, Неопределено);
	КонецЕсли;
	ЗаполнитьЗаказИзменен();
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиНомерВерсииЗаказаПоСтатусу(мЗаказКлиента, ВыборСтатуса)
	
	НомерВерсииЗаказа = 1;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	ВерсииОбъектов.НомерВерсии КАК НомерВерсии,
	             |	ВерсииОбъектов.ВерсияОбъекта КАК ВерсияОбъекта,
	             |	ВерсииОбъектов.ЕстьДанныеВерсии КАК ЕстьДанныеВерсии
	             |ИЗ
	             |	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
	             |ГДЕ
	             |	ВерсииОбъектов.Объект = &Объект
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	НомерВерсии";
	Запрос.УстановитьПараметр("Объект", мЗаказКлиента);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если ВыборСтатуса = 0 Тогда
		Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
	ИначеЕсли ВыборСтатуса = 1 Тогда
		Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
	Иначе
		Статус = Перечисления.СтатусыЗаказовКлиентов.ПустаяСсылка();
	КонецЕсли;
	Если Статус = Перечисления.СтатусыЗаказовКлиентов.ПустаяСсылка() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ВерсияОбъекта  = ВерсионированиеОбъектов.РазборВерсии(мЗаказКлиента, Выборка.НомерВерсии);
		СтрокаСтатус = ВерсияОбъекта.Реквизиты.Найти("Статус", "НаименованиеРеквизита");
		Если СтрокаСтатус <> Неопределено Тогда
			Если СтрокаСтатус["ЗначениеРеквизита"] = Статус Тогда
				Возврат Выборка.НомерВерсии;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат НомерВерсииЗаказа;
КонецФункции

&НаСервереБезКонтекста
Функция НайтиНомерВерсииЗаказа(мЗаказКлиента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	ВерсииОбъектов.НомерВерсии КАК НомерВерсии,
	             |	ВерсииОбъектов.ВерсияОбъекта КАК ВерсияОбъекта,
	             |	ВерсииОбъектов.ЕстьДанныеВерсии КАК ЕстьДанныеВерсии
	             |ИЗ
	             |	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
	             |ГДЕ
	             |	ВерсииОбъектов.Объект = &Объект
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	НомерВерсии";
	Запрос.УстановитьПараметр("Объект", мЗаказКлиента);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.НомерВерсии;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ПеречитатьЗаказ(Команда)
	мДатаОбновленияИзИ5 = _омОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(мЗаказКлиента, "Документ.ЗаказКлиента",
		"гф_ДатаОбновленияИзИ5");
КонецПроцедуры

&НаСервере
Функция ПолучитьНазначение(Заказ)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Назначения.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Назначения КАК Назначения
	               |ГДЕ
	               |	Назначения.Заказ = &Заказ
	               |	И НЕ Назначения.ПометкаУдаления";
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Назначение = Справочники.Назначения.СоздатьЭлемент();
		Назначение.Заказ = Заказ;
		Назначение.ТипНазначения = Перечисления.ТипыНазначений.Собственное;
		Назначение.ВидДеятельностиНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
		Назначение.ДвиженияПоСкладскимРегистрам = Истина;
		Назначение.Записать();
		ТекстСообщения = "Создан Назначение:" + Назначение.Ссылка + " для Заказа" + Заказ;
		СообщитьПользователю(ТекстСообщения);
		Возврат Назначение.Ссылка;
	Иначе
		Выборка = Результат.Выбрать();
		Элементы.мНазначение.Доступность = Истина;
		Если Выборка.Количество() = 1 Тогда
			Если Выборка.Следующий() Тогда
				Возврат Выборка.Ссылка;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
			Элементы.мНазначение.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьАналитикуУчетаНоменклатуры(Номенклатура, Характеристика, Склад, Назначение)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	КлючиАналитикиУчетаНоменклатуры.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.КлючиАналитикиУчетаНоменклатуры КАК КлючиАналитикиУчетаНоменклатуры
	               |ГДЕ
	               |	КлючиАналитикиУчетаНоменклатуры.Номенклатура = &Номенклатура
	               |	И КлючиАналитикиУчетаНоменклатуры.Характеристика = &Характеристика
	               |	И КлючиАналитикиУчетаНоменклатуры.МестоХранения = &МестоХранения
	               |	И КлючиАналитикиУчетаНоменклатуры.Назначение = &Назначение
	               |	И НЕ КлючиАналитикиУчетаНоменклатуры.ПометкаУдаления";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("МестоХранения", Склад);
	Запрос.УстановитьПараметр("Назначение", Назначение);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Аналитика = Справочники.КлючиАналитикиУчетаНоменклатуры.СоздатьЭлемент();
		Аналитика.Номенклатура = Номенклатура;
		Аналитика.Характеристика = Характеристика;
		Аналитика.МестоХранения = Склад;
		Аналитика.СкладскаяТерритория = Склад;
		Аналитика.Назначение = Назначение;
		Аналитика.ТипМестаХранения = Перечисления.ТипыМестХранения.Склад;
		Аналитика.Записать();
		Возврат Аналитика.Ссылка;
	Иначе
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПодготовитьТабДокНаСервере()
	ТабПротокол = Новый ТабличныйДокумент;
	
	ТабПротокол.АвтоМасштаб = Истина;
	ТабПротокол.ОтображатьЗаголовки = Ложь;
	ТабПротокол.ОтображатьСетку = Ложь;
	ТабПротокол.ТолькоПросмотр = Истина;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Макет = ОбработкаОбъект.ПолучитьМакет("Протокол");
	
	ОбластьШапка	= Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока	= Макет.ПолучитьОбласть("Строка");
	
	ТабПротокол.Вывести(ОбластьШапка);
	Для Каждого СтрокаПротокола Из ТЗПротокол Цикл
		ОбластьСтрока.Параметры.Заполнить(СтрокаПротокола);
		ТабПротокол.Вывести(ОбластьСтрока);
	КонецЦикла;
		
	Возврат ТабПротокол;
	
КонецФункции

&НаСервереБезКонтекста
Функция МаксимальныйКодСтрокиВЗаказеКлиента(Заказ)
	МаксимальныйКодСтроки = 0;
	Для Каждого СтрокаТЧ Из Заказ.Товары Цикл
		Если МаксимальныйКодСтроки < СтрокаТЧ.КодСтроки Тогда
			МаксимальныйКодСтроки = СтрокаТЧ.КодСтроки;
		КонецЕсли;
	КонецЦикла;
	Возврат МаксимальныйКодСтроки;
КонецФункции

&НаСервере
Процедура ИзменитьЗаказНовоеНазначение(ИзменитьЗаказ, ДокКорректировка)
	Если ИзменитьЗаказ Тогда
		// здесь вносим изменения в Заказ (новое назначение)
		Если ЗначениеЗаполнено(ДокКорректировка.Назначение.Заказ) Тогда
			МаксимальныйКодСтроки = МаксимальныйКодСтрокиВЗаказеКлиента(ДокКорректировка.Назначение.Заказ);
			ДокЗаказ = ДокКорректировка.Назначение.Заказ.ПолучитьОбъект();
			СтруктураПоиска = Новый Структура("Назначение", ДокКорректировка.Назначение);
			СтрокиРезерва = тчТовары.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаТЧ Из СтрокиРезерва Цикл
				СтрокаЗаказа = ДокЗаказ.Товары.Добавить();
				МаксимальныйКодСтроки = МаксимальныйКодСтроки + 1;
				ЗаполнитьЗначенияСвойств(СтрокаЗаказа, СтрокаТЧ);
				СтрокаЗаказа.КодСтроки = МаксимальныйКодСтроки;
			КонецЦикла;
			СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(ДокЗаказ, "Товары");
		КонецЕсли;
		ДокЗаказ.МаксимальныйКодСтроки = МаксимальныйКодСтроки;
		флОшибка = Ложь;
		ЗаписатьДокументВПопытке(ДокЗаказ, "Проведен:", ТЗПротокол, "Изменен и проведен", флОшибка);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьИсходныйЗаказВКоробахПоСтрокеРезерва(СтрокаТЧ, ЗаказОбъект, мПричинаУдаления)
	ЗначениеСто = 100;
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("ВариантКомплектации", СтрокаТЧ.ВариантКомплектации);
	СтруктураПоиска.Вставить("ЦенаКоробаСоСкидкой", СтрокаТЧ.ЦенаКоробаСоСкидкой);
	СтрокиЗаказа = ЗаказОбъект.гф_ТоварыВКоробах.НайтиСтроки(СтруктураПоиска);
	Если СтрокиЗаказа.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	//СтрокаЗаказа = СтрокиЗаказа[0];
	ОсталосьУдалить = СтрокаТЧ.ПеренестиВДругойЗаказ;
	Для Каждого СтрокаЗаказа Из СтрокиЗаказа Цикл
		УдалитьПоСтроке = Мин(ОсталосьУдалить, СтрокаЗаказа.Количество);
		// здесь в исходном Заказе найдена строка с Вариантом комплектации
		Если СтрокаЗаказа.Количество = УдалитьПоСтроке Тогда
			// здесь надо перенести все количество коробов - просто "отменяем" строку
			мКоличествоДоИзменения = СтрокаЗаказа.Количество;
			СтрокаЗаказа.Отменено = Истина;
			СтрокаЗаказа.ПричинаОтмены = мПричинаУдаления;
		Иначе
			// здесь корректируем количество и суммы в исходной строке
			//ЗаполнитьЗначенияСвойств(СтрокаЗаказа, СтрокаТЧ, , "Добавлено, ПричинаДобавления, Отменено, ПричинаОтмены");
			мКоличествоДоИзменения = СтрокаЗаказа.Количество;
			СтрокаЗаказа.Количество = СтрокаЗаказа.Количество - УдалитьПоСтроке;
			СтрокаЗаказа["Сумма"] = СтрокаЗаказа.Количество * СтрокаЗаказа.ЦенаКоробаСоСкидкой;
			Ставка = 0;
			Если ЗначениеЗаполнено(СтрокаЗаказа["СтавкаНДС"]) Тогда
				Ставка = СтрокаЗаказа["СтавкаНДС"].Ставка;
			КонецЕсли;
			СтрокаЗаказа["СуммаНДС"] = СтрокаЗаказа["Сумма"] * (Ставка / ЗначениеСто);
			СтрокаЗаказа["СуммаСНДС"] = СтрокаЗаказа["Сумма"] + СтрокаЗаказа["СуммаНДС"];
			
			//// и добавляем новую с указанием причины отмены
			//СтрокаЗаказа = ЗаказОбъект.гф_ТоварыВКоробах.Добавить();
			//ЗаполнитьЗначенияСвойств(СтрокаЗаказа, СтрокаТЧ);
			//СтрокаЗаказа.Количество = СтрокаТЧ.ПеренестиВДругойЗаказ;
			//СтрокаЗаказа.Добавлено = Ложь;
			//СтрокаЗаказа.ПричинаДобавления = Справочники.ПричиныОтменыЗаказовКлиентов.ПустаяСсылка();
			//СтрокаЗаказа.Отменено = Истина;
			//СтрокаЗаказа.ПричинаОтмены = мПричинаУдаления;
			//// ++ СадомцевСА 22.11.2022 Заполняем "новые" реквизиты ТЧ гф_ТоварыВКоробах
			//СтрокаЗаказа["ВидЦены"] = ЗаказОбъект.гф_ВидЦены;
			//СтрокаЗаказа["Скидка"] = РассчитатьСкидку(ЗаказОбъект.Ссылка);
			//СтрокаЗаказа["ВариантОбеспечения"] = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.КОбеспечению");
			//СтрокаЗаказа["ЦенаКоробаСоСкидкой"] = СтрокаЗаказа.ЦенаКороба * (1 - СтрокаЗаказа.Скидка / ЗначениеСто);
			//СтрокаЗаказа["Сумма"] = СтрокаЗаказа.Количество * СтрокаЗаказа.ЦенаКоробаСоСкидкой;
			//СтрокаЗаказа["СтавкаНДС"] = гф_ЗаполнитьСтавкуНДС(СтрокаЗаказа["ВариантКомплектации"]);
			//Ставка = 0;
			//Если ЗначениеЗаполнено(СтрокаЗаказа["СтавкаНДС"]) Тогда
			//	Ставка = СтрокаЗаказа["СтавкаНДС"].Ставка;
			//КонецЕсли;
			//СтрокаЗаказа["СуммаНДС"] = СтрокаЗаказа["Сумма"] * (Ставка / ЗначениеСто);
			//СтрокаЗаказа["СуммаСНДС"] = СтрокаЗаказа["Сумма"] + СтрокаЗаказа["СуммаНДС"];
			// -- СадомцевСА 22.11.2022
		КонецЕсли;
		// здесь добавляем строку в тч гф_ПричиныИзмененияТоваровВКоробах
		ДобавитьСтрокуПричиныИзменения(ЗаказОбъект, СтрокаЗаказа, мКоличествоДоИзменения, мПричинаУдаления);
		
		ОсталосьУдалить = ОсталосьУдалить - УдалитьПоСтроке;
		Если ОсталосьУдалить = 0 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ИзменитьИсходныйЗаказВКоробах(ИзменитьЗаказ)
	Если Не ИзменитьЗаказ Тогда
		Возврат;
	КонецЕсли;
	// здесь вносим изменения в "исходный" Заказ
	ЗаказОбъект = мЗаказКлиента.ПолучитьОбъект();
	Если ЗначениеЗаполнено(мКомментарий) Тогда
		ЗаказОбъект.Комментарий = мКомментарий;
	КонецЕсли;
	Для Каждого СтрокаТЧ Из Объект.РезервыВКоробах Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ПеренестиВДругойЗаказ) Тогда
			Продолжить;
		КонецЕсли;
		ИзменитьИсходныйЗаказВКоробахПоСтрокеРезерва(СтрокаТЧ, ЗаказОбъект, мПричинаУдаления);
	КонецЦикла;
	// тч Товары перезаполняются перед записью документа
	//ЗаполнитьТоварыНаСервере(ЗаказОбъект);
	флОшибка = Ложь;
	ЗаписатьДокументВПопытке(ЗаказОбъект, "Проведен:", ТЗПротокол, "Изменен и проведен", флОшибка);
	Если Не флОшибка Тогда
		флКомментарийСохранен = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ИзменитьИсходныйЗаказ()
	ЗначениеСто = 100;
	// здесь вносим изменения в "исходный" Заказ
	ЗаказОбъект = мЗаказКлиента.ПолучитьОбъект();
	Если ЗначениеЗаполнено(мКомментарий) Тогда
		ЗаказОбъект.Комментарий = мКомментарий;
	КонецЕсли;
	МаксимальныйКодСтроки = МаксимальныйКодСтрокиВЗаказеКлиента(мЗаказКлиента);
	ДокЗаказ = мЗаказКлиента.ПолучитьОбъект();
	СтруктураПоиска = Новый Структура("Назначение", мНазначение);
	СтрокиРезерва = тчТовары.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаТЧ Из СтрокиРезерва Цикл
		// корректируем исходнные строки заказа
		ОсталосьОтменить = СтрокаТЧ.КоличествоУпаковок;
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтрокаТЧ.Характеристика);
		СтруктураПоиска.Вставить("Отменено", Ложь);
		СтруктураПоиска.Вставить("ВариантОбеспечения", Перечисления.ВариантыОбеспечения.КОбеспечению);
		СтруктураПоиска.Вставить("гф_ЦенаСоСкидкой", СтрокаТЧ.гф_ЦенаСоСкидкой);
		СтрокиЗаказа = ДокЗаказ.Товары.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаЗаказа Из СтрокиЗаказа Цикл
			ТекОтменить = Мин(ОсталосьОтменить, СтрокаЗаказа.КоличествоУпаковок);
			СтрокаЗаказа.КоличествоУпаковок = СтрокаЗаказа.КоличествоУпаковок - ТекОтменить;
			СтрокаЗаказа.Количество = СтрокаЗаказа.КоличествоУпаковок;
			// пересчет суммы в строке заказа
			ТД = СтрокаЗаказа;
			Ставка = 0;
			Если ЗначениеЗаполнено(ТД.СтавкаНДС) Тогда
				Ставка = ПолучитьЗначениеРеквизита(ТД.СтавкаНДС, "Ставка");
			КонецЕсли;
			ТД.Сумма = ТД.КоличествоУпаковок * ТД.гф_ЦенаСоСкидкой;
			// пересчет НДС с учетом скидки
			ТД.СуммаНДС = ТД.Сумма * (Ставка / ЗначениеСто);
			// пересчет Сумма с НДС с учетом скидки
			ТД.СуммаСНДС = ТД.Сумма + ТД.СуммаНДС;
			
			ОсталосьОтменить = ОсталосьОтменить - ТекОтменить;
			Если ОсталосьОтменить = 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		// добавляем строку "отменено"
		СтрокаЗаказа = ДокЗаказ.Товары.Добавить();
		МаксимальныйКодСтроки = МаксимальныйКодСтроки + 1;
		ЗаполнитьЗначенияСвойств(СтрокаЗаказа, СтрокаТЧ);
		СтрокаЗаказа.КодСтроки = МаксимальныйКодСтроки;
	КонецЦикла;
	СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(ДокЗаказ, "Товары");
	ДокЗаказ.МаксимальныйКодСтроки = МаксимальныйКодСтроки;
	флОшибка = Ложь;
	ЗаписатьДокументВПопытке(ДокЗаказ, "Проведен:", ТЗПротокол, "Изменен и проведен", флОшибка);
	Если Не флОшибка Тогда
		флКомментарийСохранен = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ИзменитьЗаказВКоробахНовоеНазначение(ИзменитьЗаказ, Назначение)
	ЗначениеСто = 100;
	Если ИзменитьЗаказ Тогда
		// здесь вносим изменения в Заказ (новое назначение)
		Если ЗначениеЗаполнено(Назначение.Заказ) Тогда
			ЗаказОбъект = Назначение.Заказ.ПолучитьОбъект();
			//++
			СтруктураДействий = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(ЗаказОбъект, Истина);
			//--
			СтруктураПоиска = Новый Структура("ПеренестиНовоеНазначение", Назначение);
			СтрокиРезерва = Объект.РезервыВКоробах.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаТЧ Из СтрокиРезерва Цикл
				СтрокаЗаказа = ЗаказОбъект.гф_ТоварыВКоробах.Добавить();
				СтрокаЗаказа["ВариантКомплектации"] = СтрокаТЧ.ВариантКомплектации;
				СтрокаЗаказа["ВидЦены"] = ЗаказОбъект.гф_ВидЦены;
				СтрокаЗаказа.ЦенаКороба = РассчитатьЦенуКороба(СтрокаЗаказа.ВариантКомплектации, СтрокаЗаказа.ВидЦены,
					ЗаказОбъект.Дата);
				СтрокаЗаказа["Количество"] = СтрокаТЧ.ПеренестиВДругойЗаказ;
				СтрокаЗаказа["Добавлено"] = Истина;
				СтрокаЗаказа["ПричинаДобавления"] = мПричинаДобавления;
				// ++ СадомцевСА 22.11.2022 Заполняем "новые" реквизиты ТЧ гф_ТоварыВКоробах
				СтрокаЗаказа["Скидка"] = РассчитатьСкидку(ЗаказОбъект.Ссылка);
				СтрокаЗаказа["ВариантОбеспечения"] = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.КОбеспечению");
				СтрокаЗаказа["ЦенаКоробаСоСкидкой"] = СтрокаЗаказа.ЦенаКороба * (1 - СтрокаЗаказа.Скидка / ЗначениеСто);
				СтрокаЗаказа["Сумма"] = СтрокаЗаказа.Количество * СтрокаЗаказа.ЦенаКоробаСоСкидкой;
				//++СтрокаЗаказа["СтавкаНДС"] = гф_ЗаполнитьСтавкуНДС(СтрокаЗаказа["ВариантКомплектации"]);
	СтрокаЗаказа.СтавкаНДС = гф_ЗаполнитьСтавкуНДС(СтрокаЗаказа.ВариантКомплектации, СтруктураДействий);
				//--
				Ставка = 0;
				Если ЗначениеЗаполнено(СтрокаЗаказа["СтавкаНДС"]) Тогда
					Ставка = СтрокаЗаказа["СтавкаНДС"].Ставка;
				КонецЕсли;
				СтрокаЗаказа["СуммаНДС"] = СтрокаЗаказа["Сумма"] * (Ставка / ЗначениеСто);
				СтрокаЗаказа["СуммаСНДС"] = СтрокаЗаказа["Сумма"] + СтрокаЗаказа["СуммаНДС"];
				// здесь добавляем строку в тч гф_ПричиныИзмененияТоваровВКоробах
				Уник = Новый УникальныйИдентификатор();
				СтрокаЗаказа["ИдентификаторСтроки"] = Строка(Уник);
				ДобавитьСтрокуПричиныИзменения(ЗаказОбъект, СтрокаЗаказа);
				// -- СадомцевСА 22.11.2022
			КонецЦикла;
			// тч Товары перезаполняются перед записью документа
			//ЗаполнитьТоварыНаСервере(ЗаказОбъект);
			флОшибка = Ложь;
			ЗаписатьДокументВПопытке(ЗаказОбъект, "Проведен:", ТЗПротокол, "Изменен и проведен", флОшибка);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьУникальныйИдентификатор(СтрокаЗаказа)
	Если Не ЗначениеЗаполнено(СтрокаЗаказа["ИдентификаторСтроки"]) Тогда
		Уник = Новый УникальныйИдентификатор();
		СтрокаЗаказа["ИдентификаторСтроки"] = Строка(Уник);
	КонецЕсли;
КонецПроцедуры
	
&НаСервереБезКонтекста
Процедура ЗаполнитьСтрокуПричиныИзменения(нс, СтрокаЗаказа, мКоличествоДоИзменения, мПричинаУдаления, мПричинаДобавления)
	// Причина, Количество
	Если мПричинаУдаления <> Неопределено Тогда
		нс.Причина = мПричинаУдаления;
		нс.Количество = СтрокаЗаказа["Количество"] - мКоличествоДоИзменения;
	ИначеЕсли мПричинаДобавления <> Неопределено Тогда
		нс.Причина = мПричинаДобавления;
		нс.Количество = СтрокаЗаказа["Количество"] - мКоличествоДоИзменения;
	ИначеЕсли СтрокаЗаказа.Добавлено Тогда
		нс.Причина = СтрокаЗаказа["ПричинаДобавления"];
		нс.Количество = СтрокаЗаказа["Количество"];
	Иначе
		нс.Причина = Справочники.ПричиныОтменыЗаказовКлиентов.ПустаяСсылка();
		нс.Количество = 0;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПервуюСтрокуОтменаПолностью(ПерваяСтрока, мПричинаУдаления)
	Если ПерваяСтрока <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(ПерваяСтрока.Причина) Тогда
			// 09.01.2022 заполняем причину в "первой" строке
			ПерваяСтрока.Причина = мПричинаУдаления;
			ПерваяСтрока.Дата = ТекущаяДатаСеанса();
			ПерваяСтрока.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьСтрокуПричиныИзменения(ЗаказОбъект, СтрокаЗаказа, мКоличествоДоИзменения = 0, мПричинаУдаления = Неопределено, мПричинаДобавления = Неопределено)
	ЗаполнитьУникальныйИдентификатор(СтрокаЗаказа);
	// при "удалении" добавляем первую строку при условии что ранее ее не было
	Если мПричинаУдаления <> Неопределено Тогда
		ПерваяСтрока = ЗаказОбъект.гф_ПричиныИзмененияТоваровВКоробах.Найти(СтрокаЗаказа["ИдентификаторСтроки"]);
		Если ПерваяСтрока = Неопределено Тогда
			нс = ЗаказОбъект.гф_ПричиныИзмененияТоваровВКоробах.Добавить();
			ЗаполнитьЗначенияСвойств(нс, СтрокаЗаказа);
			нс.Количество = мКоличествоДоИзменения;
			нс.Дата = ТекущаяДатаСеанса();
			нс.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		КонецЕсли;
		Если СтрокаЗаказа["Количество"] = мКоличествоДоИзменения Тогда
			// здесь строка заказа была отменена "полностью"
			// Галфинд СадомцевСА 21.02.2023 Добавил процедуру ЗаполнитьПервуюСтрокуОтменаПолностью(...)
			ЗаполнитьПервуюСтрокуОтменаПолностью(ПерваяСтрока, мПричинаУдаления);
			//Если ПерваяСтрока <> Неопределено Тогда
			//	Если Не ЗначениеЗаполнено(ПерваяСтрока.Причина) Тогда
			//		// 09.01.2022 заполняем причину в "первой" строке
			//		ПерваяСтрока.Причина = мПричинаУдаления;
			//		ПерваяСтрока.Дата = ТекущаяДатаСеанса();
			//		ПерваяСтрока.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			//	КонецЕсли;
			//КонецЕсли;
			Возврат;
		КонецЕсли;
	ИначеЕсли мПричинаДобавления <> Неопределено Тогда
		ПерваяСтрока = ЗаказОбъект.гф_ПричиныИзмененияТоваровВКоробах.Найти(СтрокаЗаказа["ИдентификаторСтроки"]);
		Если ПерваяСтрока = Неопределено И ЗначениеЗаполнено(мКоличествоДоИзменения) Тогда
			нс = ЗаказОбъект.гф_ПричиныИзмененияТоваровВКоробах.Добавить();
			ЗаполнитьЗначенияСвойств(нс, СтрокаЗаказа);
			нс.Количество = мКоличествоДоИзменения;
			нс.Дата = ТекущаяДатаСеанса();
			нс.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		КонецЕсли;
		Если СтрокаЗаказа["Количество"] = мКоличествоДоИзменения Тогда
			// здесь Количество в строке заказа не изменилась
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	нс = ЗаказОбъект.гф_ПричиныИзмененияТоваровВКоробах.Добавить();
	// ИдентификаторСтроки, ВариантКомплектации, ЦенаКороба, ЦенаКоробаСоСкидкой, Скидка
	ЗаполнитьЗначенияСвойств(нс, СтрокаЗаказа);
	// Причина, Количество
	ЗаполнитьСтрокуПричиныИзменения(нс, СтрокаЗаказа, мКоличествоДоИзменения, мПричинаУдаления, мПричинаДобавления);
	// Дата
	нс.Дата = ТекущаяДатаСеанса();
	// Ответственный
	нс.Ответственный = ПараметрыСеанса.ТекущийПользователь;
КонецПроцедуры

&НаСервере
Функция ПеренестиРезервНаСервере(ПолеКоличество, ПолеНазначение, ИзменитьЗаказ = Ложь)
	ТаблицаНазначений = Объект.Резервы.Выгрузить();
	ТаблицаНазначений.Свернуть(ПолеНазначение);
	ИсходноеНазначение = мНазначение;
	МассивКорректировок = Новый Массив;
	флОшибка = Ложь;
	Для Каждого СтрокаНазначение Из ТаблицаНазначений Цикл
		Если Не ЗначениеЗаполнено(СтрокаНазначение[ПолеНазначение]) Тогда
			Продолжить;
		КонецЕсли;
		ДокКорректировка = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
		ДокКорректировка.Автор = ПараметрыСеанса.ТекущийПользователь;
		ДокКорректировка.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ДокКорректировка.Организация = мЗаказКлиента.Организация;
		ДокКорректировка.Дата = ТекущаяДатаСеанса();
		ДокКорректировка.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать;
		ДокКорректировка.Комментарий = "Создан автоматически обработкой Корректировка заказов и резервов "
		+ ТекущаяДатаСеанса();
		ДокКорректировка.Назначение = СтрокаНазначение[ПолеНазначение];
		СтруктураПоиска = Новый Структура(ПолеНазначение, ДокКорректировка.Назначение);
		СтрокиРезерва = Объект.Резервы.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаТЧ Из СтрокиРезерва Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ[ПолеКоличество]) Тогда
				нс = ДокКорректировка.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(нс, СтрокаТЧ);
				нс.Количество = СтрокаТЧ[ПолеКоличество];
				нс.КоличествоУпаковок = СтрокаТЧ[ПолеКоличество];
				нс.ИсходноеНазначение = ИсходноеНазначение;
				нс.ИсходныйЗаказ = мЗаказКлиента;
				нс.ИсходноеНазначениеДвиженияПоСкладскимРегистрам = Истина;
				// Аналитика учета заполняется при проведении документа автоматически...
			КонецЕсли;
		КонецЦикла;
		ЗаписатьДокументВПопытке(ДокКорректировка, "Проведен:", ТЗПротокол, "Создан и проведен", флОшибка);
		Если флОшибка Тогда
			мОшибка = Истина;
			Прервать;
		КонецЕсли;
		// здесь вносим изменения в Заказ (новое назначение)
		МассивКорректировок.Добавить(ДокКорректировка.Ссылка);
	КонецЦикла;
	
	Если Не флОшибка Тогда
		Для Каждого ДокКорректировка Из МассивКорректировок Цикл
			// здесь вносим изменения в Заказ (новое назначение)
			ИзменитьЗаказНовоеНазначение(ИзменитьЗаказ, ДокКорректировка);
		КонецЦикла;
	КонецЕсли;
	Возврат флОшибка;
КонецФункции

&НаСервере
Процедура ПеренестиРезервВКоробахНаСервере(ПолеКоличество, ПолеНазначение, ИзменитьЗаказ = Ложь)
	ТаблицаНазначений = Объект.РезервыВКоробах.Выгрузить();
	ТаблицаНазначений.Свернуть(ПолеНазначение);
	ИсходноеНазначение = мНазначение;
	ТаблицаУпаковочныеЛисты = Новый ТаблицаЗначений;
	ТаблицаУпаковочныеЛисты.Колонки.Добавить("УпаковочныйЛист");
	ТаблицаУпаковочныеЛисты.Колонки.Добавить("Заказ");
	ТаблицаУпаковочныеЛисты.Колонки.Добавить("Назначение");
	МассивНазначения = Новый Массив;
	флОшибка = Ложь;
	Для Каждого СтрокаНазначение Из ТаблицаНазначений Цикл
		Если Не ЗначениеЗаполнено(СтрокаНазначение[ПолеНазначение]) Тогда
			Продолжить;
		КонецЕсли;
		ДокКорректировка = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
		ДокКорректировка.Автор = ПараметрыСеанса.ТекущийПользователь;
		ДокКорректировка.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ДокКорректировка.Организация = мЗаказКлиента.Организация;
		ДокКорректировка.Дата = ТекущаяДатаСеанса();
		ДокКорректировка.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать;
		ДокКорректировка.Комментарий = "Создан автоматически обработкой Корректировка заказов и резервов "
		+ ТекущаяДатаСеанса();
		ДокКорректировка.Назначение = СтрокаНазначение[ПолеНазначение];
		СтруктураПоиска = Новый Структура(ПолеНазначение, ДокКорректировка.Назначение);
		СтрокиРезерва = Объект.РезервыВКоробах.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаРезерва Из СтрокиРезерва Цикл
			Если Не ЗначениеЗаполнено(СтрокаРезерва[ПолеКоличество]) Тогда
				Продолжить;
			КонецЕсли;
			// заполняем Номенклатуру из Упаковочных листов
			СтруктураПоиска = Новый Структура("ВариантКомплектации", СтрокаРезерва["ВариантКомплектации"]);
			УпаковочныеЛисты = мУпаковочныеЛисты.НайтиСтроки(СтруктураПоиска);
			ВсегоУпаковочныхЛистов = УпаковочныеЛисты.Количество();
			СнятьРезерв = СтрокаРезерва[ПолеКоличество];
			Индекс = 0;
			Пока СнятьРезерв > 0 Цикл
				Если Индекс >= ВсегоУпаковочныхЛистов Тогда
					Прервать;
				КонецЕсли;
				УпаковочныйЛист = УпаковочныеЛисты[Индекс].УпаковочныйЛист;
				ЗаполнитьТЧТоварыКорректировкаНазначения(ДокКорректировка, УпаковочныйЛист, мЗаказКлиента, мНазначение);
				
				// в Упаковочном листе надо изменить Заказ и Назначение (в тч Товары)
				нс = ТаблицаУпаковочныеЛисты.Добавить();
				нс.УпаковочныйЛист = УпаковочныйЛист;
				нс.Заказ = СтрокаНазначение[ПолеНазначение].Заказ;
				нс.Назначение = СтрокаНазначение[ПолеНазначение];
				
				СнятьРезерв = СнятьРезерв - 1;
				Индекс = Индекс + 1;
			КонецЦикла;
		КонецЦикла;
		ЗаписатьДокументВПопытке(ДокКорректировка, "Проведен:", ТЗПротокол, "Создан и проведен", флОшибка);
		Если флОшибка Тогда
			мОшибка = Истина;
			Прервать;
		КонецЕсли;
		
		// здесь вносим изменения в Заказ (новое назначение)
		МассивНазначения.Добавить(ДокКорректировка.Назначение);
		
	КонецЦикла;
	
	Если Не флОшибка Тогда
		Для Каждого СтрокаТЗ Из ТаблицаУпаковочныеЛисты Цикл
			// в Упаковочном листе надо изменить Заказ и Назначение (в тч Товары)
			ДокУпаковочныйЛист = ВнестиИзмененияВУпаковочныйЛист(СтрокаТЗ.УпаковочныйЛист, СтрокаТЗ.Заказ, СтрокаТЗ.Назначение);
			флОшибка = Ложь;
			ЗаписатьДокументВПопытке(ДокУпаковочныйЛист, "Проведен:", ТЗПротокол, "Изменен и проведен", флОшибка);
		КонецЦикла;
		Для Каждого Назначение Из МассивНазначения Цикл
			// здесь вносим изменения в Заказ (новое назначение)
			ИзменитьЗаказВКоробахНовоеНазначение(ИзменитьЗаказ, Назначение);
		КонецЦикла;
		// здесь вносим изменения в "исходный" Заказ
		ИзменитьИсходныйЗаказВКоробах(ИзменитьЗаказ);
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВнестиИзмененияВУпаковочныйЛист(УпаковочныйЛист, Заказ, Назначение)
	ДокУпаковочныйЛист = УпаковочныйЛист.ПолучитьОбъект();
	ДокУпаковочныйЛист.гф_Заказ = Заказ;
	Для Каждого СтрокаТЧ Из ДокУпаковочныйЛист.Товары Цикл
		СтрокаТЧ.Назначение = Назначение;
	КонецЦикла;
	Возврат ДокУпаковочныйЛист;
КонецФункции
				
&НаСервере
Процедура ЗаполнитьКоличествоПар(ИмяТЧ)
	Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
		//СтруктураОтбора = Новый Структура("ВариантКомплектации", СтрокаТЧ["ВариантКомплектации"]);
		//Листы = мУпаковочныеЛисты.НайтиСтроки(СтруктураОтбора);
		//КоличествоПар = 0;
		//Сч = 0;
		//Для Каждого Лист Из Листы Цикл
		//	Если Сч >= СтрокаТЧ["Количество"] Тогда
		//		Прервать;
		//	КонецЕсли;
		//	КоличествоПар = КоличествоПар + Лист["ВсегоМест"];
		//	Сч = Сч + 1;
		//КонецЦикла;
		//СтрокаТЧ["КоличествоПар"] = КоличествоПар;
		Если ЗначениеЗаполнено(СтрокаТЧ.ВариантКомплектации) Тогда
			СтрокаТЧ["КоличествоПар"] = СтрокаТЧ.ВариантКомплектации.КоличествоУпаковок * СтрокаТЧ.Количество;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧВКоробах(ИмяТЧ, НомерВерсии = 1)
	// здесь надо получить первоначальные данные заказа из регистра сведений ВерсииОбъектов
	ВерсияОбъекта  = ВерсионированиеОбъектов.РазборВерсии(мЗаказКлиента, НомерВерсии);
	Если ТипЗнч(ВерсияОбъекта) = Тип("Структура") Тогда
		Для Каждого СтрокаТЧ Из ВерсияОбъекта.ТабличныеЧасти["гф_ТоварыВКоробах"] Цикл
			СтруктураОтменено = Новый Структура("Отменено", Неопределено);
			ЗаполнитьЗначенияСвойств(СтруктураОтменено, СтрокаТЧ);
			Если СтруктураОтменено["Отменено"] <> Неопределено Тогда
				Если СтрокаТЧ.Отменено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			нс = Объект[ИмяТЧ].Добавить();
			ЗаполнитьЗначенияСвойств(нс, СтрокаТЧ, "
			|ВариантКомплектации,
			|ЦенаКороба,
			|Скидка,
			|ВидЦены,
			|ЦенаКоробаСоСкидкой,
			|Сумма,
			|СтавкаНДС,
			|СуммаНДС,
			|СуммаСНДС,
			|IDКороба");
			нс.КоличествоПервоначально = СтрокаТЧ.Количество;
		КонецЦикла;
		ТЗ = Объект[ИмяТЧ].Выгрузить();
		ТЗ.Свернуть("ВариантКомплектации, Скидка, ВидЦены", "КоличествоПервоначально, Сумма");
		Объект[ИмяТЧ].Загрузить(ТЗ);
		Для Каждого нс Из Объект[ИмяТЧ] Цикл
			нс.Артикул = нс.ВариантКомплектации.Владелец.Артикул;
			нс.ЦенаКоробаСоСкидкой = ?(нс.КоличествоПервоначально = 0, 0, нс.Сумма / нс.КоличествоПервоначально);
			нс.ЦенаКороба = ?(нс.Скидка = 100, нс.ЦенаКоробаСоСкидкой, нс.ЦенаКоробаСоСкидкой / (1 - нс.Скидка / 100));
		КонецЦикла;
	КонецЕсли;
	
	// и текущие данные заказа
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗаказКлиентагф_ТоварыВКоробах.ВариантКомплектации КАК ВариантКомплектации,
	               |	ЗаказКлиентагф_ТоварыВКоробах.ЦенаКороба КАК ЦенаКороба,
	               |	ЗаказКлиентагф_ТоварыВКоробах.ЦенаКоробаСоСкидкой КАК ЦенаКоробаСоСкидкой,
	               |	ЗаказКлиентагф_ТоварыВКоробах.СтавкаНДС КАК СтавкаНДС,
	               |	ЗаказКлиентагф_ТоварыВКоробах.ВидЦены КАК ВидЦены,
	               |	СУММА(ЗаказКлиентагф_ТоварыВКоробах.Количество) КАК Количество,
	               |	СУММА(ЗаказКлиентагф_ТоварыВКоробах.Сумма) КАК Сумма,
	               |	СУММА(ЗаказКлиентагф_ТоварыВКоробах.СуммаНДС) КАК СуммаНДС,
	               |	СУММА(ЗаказКлиентагф_ТоварыВКоробах.СуммаСНДС) КАК СуммаСНДС
	               |ИЗ
	               |	Документ.ЗаказКлиента.гф_ТоварыВКоробах КАК ЗаказКлиентагф_ТоварыВКоробах
	               |ГДЕ
	               |	ЗаказКлиентагф_ТоварыВКоробах.Ссылка = &Ссылка
	               |	И НЕ ЗаказКлиентагф_ТоварыВКоробах.Отменено
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказКлиентагф_ТоварыВКоробах.ВариантКомплектации,
	               |	ЗаказКлиентагф_ТоварыВКоробах.ЦенаКороба,
	               |	ЗаказКлиентагф_ТоварыВКоробах.ЦенаКоробаСоСкидкой,
	               |	ЗаказКлиентагф_ТоварыВКоробах.СтавкаНДС,
	               |	ЗаказКлиентагф_ТоварыВКоробах.ВидЦены";
	Запрос.УстановитьПараметр("Ссылка", мЗаказКлиента);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("ВариантКомплектации", Выборка.ВариантКомплектации);
		СтруктураПоиска.Вставить("ЦенаКоробаСоСкидкой", Выборка.ЦенаКоробаСоСкидкой);
		СтруктураПоиска.Вставить("ВидЦены", Выборка.ВидЦены);
		СтрокиЗаказа = Объект[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
		Если СтрокиЗаказа.Количество() > 0 Тогда
			СтрокаЗаказа = СтрокиЗаказа[0];
		Иначе
			СтрокаЗаказа = Объект[ИмяТЧ].Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаЗаказа, Выборка);
		СтрокаЗаказа.Артикул = СтрокаЗаказа.ВариантКомплектации.Владелец.Артикул;
		СтрокаЗаказа.КоличествоСИзменениями = Выборка.Количество;
		//СтрокаЗаказа.ЦенаКороба = ?(Выборка.Количество = 0, 0, СтрокаЗаказа.Сумма / Выборка.Количество);
		СтрокаЗаказа.флНаличиеВЗаказе = Истина;
	КонецЦикла;
	
	Для Каждого СтрокаЗаказа Из Объект[ИмяТЧ] Цикл
		Если СтрокаЗаказа.КоличествоСИзменениями > СтрокаЗаказа.КоличествоПервоначально Тогда
			СтрокаЗаказа.Добавлено = СтрокаЗаказа.КоличествоСИзменениями - СтрокаЗаказа.КоличествоПервоначально;
		Иначе
			СтрокаЗаказа.Удалено = СтрокаЗаказа.КоличествоПервоначально - СтрокаЗаказа.КоличествоСИзменениями;
		КонецЕсли;
		СтрокаЗаказа.Сумма = ?(СтрокаЗаказа.флНаличиеВЗаказе, СтрокаЗаказа.Сумма, 0);
		СтрокаЗаказа.СуммаНДС = ?(СтрокаЗаказа.флНаличиеВЗаказе, СтрокаЗаказа.СуммаНДС, 0);
		СтрокаЗаказа.СуммаСНДС = ?(СтрокаЗаказа.флНаличиеВЗаказе, СтрокаЗаказа.СуммаСНДС, 0);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧВПарах(ИмяТЧ, НомерВерсии = 1)
	ЗначениеСто = 100;
	// здесь надо получить первоначальные данные заказа из регистра сведений ВерсииОбъектов
	ВерсияОбъекта  = ВерсионированиеОбъектов.РазборВерсии(мЗаказКлиента, НомерВерсии);
	Если ТипЗнч(ВерсияОбъекта) = Тип("Структура") Тогда
		Для Каждого СтрокаТЧ Из ВерсияОбъекта.ТабличныеЧасти["Товары"] Цикл
			нс = Объект[ИмяТЧ].Добавить();
			ЗаполнитьЗначенияСвойств(нс, СтрокаТЧ, "
			|Номенклатура,
			|Характеристика,
			|Упаковка,
			|Обособленно,
			|Отменено,
			|ПричинаОтмены,
			|гф_ДобавленоПоПричине,
			|гф_ПричинаДобавления,
			|ВидЦены,
			|Цена,
			|ПроцентРучнойСкидки,
			|Сумма,
			|СтавкаНДС,
			|СуммаНДС,
			|СуммаСНДС,
			|КодСтроки,
			|КлючСвязи,
			|Склад,
			|ДатаОтгрузки,
			|ВариантОбеспечения,
			|ИдентификаторСтроки");
			нс.гф_ЦенаСоСкидкой = нс.Цена * (1 - нс.ПроцентРучнойСкидки / ЗначениеСто);
			Если НЕ СтрокаТЧ.Отменено Тогда
				нс.КоличествоПервоначально = СтрокаТЧ.КоличествоУпаковок;
				// .. нс.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковок;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// и текущие данные заказа
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	               |	ЗаказКлиентаТовары.Характеристика КАК Характеристика,
				   |	ЗаказКлиентаТовары.Цена КАК Цена,
	               |	ЗаказКлиентаТовары.гф_ЦенаСоСкидкой КАК гф_ЦенаСоСкидкой,
	               |	ЗаказКлиентаТовары.СтавкаНДС КАК СтавкаНДС,
	               |	ЗаказКлиентаТовары.ВидЦены КАК ВидЦены,
	               |	СУММА(ЗаказКлиентаТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	               |	СУММА(ЗаказКлиентаТовары.Сумма) КАК Сумма,
	               |	СУММА(ЗаказКлиентаТовары.СуммаНДС) КАК СуммаНДС,
	               |	СУММА(ЗаказКлиентаТовары.СуммаСНДС) КАК СуммаСНДС,
	               |	ЗаказКлиентаТовары.Отменено КАК Отменено,
	               |	ЗаказКлиентаТовары.Склад КАК Склад
	               |ИЗ
	               |	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	               |ГДЕ
	               |	ЗаказКлиентаТовары.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказКлиентаТовары.Номенклатура,
	               |	ЗаказКлиентаТовары.Характеристика,
	               |	ЗаказКлиентаТовары.Цена,
	               |	ЗаказКлиентаТовары.гф_ЦенаСоСкидкой,
	               |	ЗаказКлиентаТовары.СтавкаНДС,
	               |	ЗаказКлиентаТовары.ВидЦены,
	               |	ЗаказКлиентаТовары.Отменено,
	               |	ЗаказКлиентаТовары.Склад";
	Запрос.УстановитьПараметр("Ссылка", мЗаказКлиента);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Отменено Тогда
			Продолжить;
		КонецЕсли;
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, гф_ЦенаСоСкидкой, СтавкаНДС, ВидЦены");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		//Если Не ЗначениеЗаполнено(СтруктураПоиска.гф_ЦенаСоСкидкой) Тогда
		//	СтруктураПоиска.гф_ЦенаСоСкидкой = Выборка.Цена;
		//КонецЕсли;
		СтрокиЗаказа = Объект[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
		Если СтрокиЗаказа.Количество() > 0 Тогда
			// здесь найдена строка заказа
			СтрокаЗаказа = СтрокиЗаказа[0];
		Иначе
			СтрокаЗаказа = Объект[ИмяТЧ].Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаЗаказа, Выборка);
		//Если Не ЗначениеЗаполнено(СтрокаЗаказа.гф_ЦенаСоСкидкой) Тогда
		//	СтрокаЗаказа.гф_ЦенаСоСкидкой = Выборка.Цена;
		//КонецЕсли;
		СтрокаЗаказа.КоличествоСИзменениями = СтрокаЗаказа.КоличествоУпаковок;
		СтрокаЗаказа.Количество = СтрокаЗаказа.КоличествоУпаковок;
		СтрокаЗаказа.флНаличиеВЗаказе = Истина;
	КонецЦикла;
	
	ЗаполнитьДобавленоУдалено(ИмяТЧ);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленоУдалено(ИмяТЧ)
	Для Каждого СтрокаЗаказа Из Объект[ИмяТЧ] Цикл
		Если СтрокаЗаказа.Отменено Тогда
			СтрокаЗаказа.Количество = 0;
			СтрокаЗаказа.КоличествоУпаковок = 0;
			СтрокаЗаказа.КоличествоСИзменениями = 0;
			СтрокаЗаказа.СуммаСНДС = 0;
			СтрокаЗаказа.флТолькоПросмотр = Истина;
		КонецЕсли;
		Если СтрокаЗаказа.КоличествоСИзменениями > СтрокаЗаказа.КоличествоПервоначально Тогда
			СтрокаЗаказа.Добавлено = СтрокаЗаказа.КоличествоСИзменениями - СтрокаЗаказа.КоличествоПервоначально;
		Иначе
			СтрокаЗаказа.Удалено = СтрокаЗаказа.КоличествоПервоначально - СтрокаЗаказа.КоличествоСИзменениями;
		КонецЕсли;
		Если СтрокаЗаказа.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда
			СтрокаЗаказа.флТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СообщитьПользователю(Текст)
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = Текст;
	Сообщение.Сообщить();
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура ПроверитьЗаполнениеХарактеристики(Номенклатура, Характеристика, ТекстОшибки)
	Если Номенклатура.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	Если Номенклатура.ИспользованиеХарактеристик
			= Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Характеристика) Тогда
		ТекстОшибки = ТекстОшибки + "Не указана Характеристика. ";
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура ЗакрытьСезон(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", отборОрганизация);
	ПараметрыФормы.Вставить("Склад", отборСклад);
	ПараметрыФормы.Вставить("Контрагент", отборКонтрагент);
	ПараметрыФормы.Вставить("Сезон", отборСезон);
	Если ИмяФормы = "ВнешняяОбработка.гф_КорректировкаЗаказовРезервов.Форма.Форма" Тогда
		ОткрытьФорму("ВнешняяОбработка.гф_КорректировкаЗаказовРезервов.Форма.ФормаЗакрытиеСезона", ПараметрыФормы,
			ЭтотОбъект);
	Иначе
		ОткрытьФорму("Обработка.гф_КорректировкаЗаказовРезервов.Форма.ФормаЗакрытиеСезона", ПараметрыФормы,
			ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РезервыВКоробахНовоеНазначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ДополнительныеПараметры = Новый Структура("ИмяТЧ, ИмяРеквизита", "РезервыВКоробах", "НовоеНазначение");
	Оповещение = Новый ОписаниеОповещения("РезервыВыборНазначенияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ВариантКомплектации = Неопределено;
	ТД = Элементы["РезервыВКоробах"].ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		ВариантКомплектации = ТД["ВариантКомплектации"];
	КонецЕсли;
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("мЗаказКлиента", мЗаказКлиента);
	ПараметрыФормы.Вставить("ВариантКомплектации", ВариантКомплектации);
	ПараметрыФормы.Вставить("Номенклатура", Неопределено);
	ПараметрыФормы.Вставить("Характеристика", Неопределено);
	ПараметрыФормы.Вставить("РезервыВКоробах", Истина);
	ПараметрыФормы.Вставить("ПеренестиНовоеНазначение", Ложь);
	Если ИмяФормы = "ВнешняяОбработка.гф_КорректировкаЗаказовРезервов.Форма.Форма" Тогда
		ОткрытьФорму("ВнешняяОбработка.гф_КорректировкаЗаказовРезервов.Форма.ФормаВыбораНазначения", ПараметрыФормы,
			ЭтотОбъект, , , , Оповещение);
	Иначе
		ОткрытьФорму("Обработка.гф_КорректировкаЗаказовРезервов.Форма.ФормаВыбораНазначения", ПараметрыФормы,
			ЭтотОбъект, , , , Оповещение);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура РезервыВКоробахПеренестиНовоеНазначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ДополнительныеПараметры = Новый Структура("ИмяТЧ, ИмяРеквизита", "РезервыВКоробах", "ПеренестиНовоеНазначение");
	Оповещение = Новый ОписаниеОповещения("РезервыВыборНазначенияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	// при переносе в другой заказ фильтр по Варианту комплектации не применяем
	ВариантКомплектации = Неопределено;
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("мЗаказКлиента", мЗаказКлиента);
	ПараметрыФормы.Вставить("ВариантКомплектации", ВариантКомплектации);
	ПараметрыФормы.Вставить("Номенклатура", Неопределено);
	ПараметрыФормы.Вставить("Характеристика", Неопределено);
	ПараметрыФормы.Вставить("РезервыВКоробах", Истина);
	ПараметрыФормы.Вставить("ПеренестиНовоеНазначение", Истина);
	Если ИмяФормы = "ВнешняяОбработка.гф_КорректировкаЗаказовРезервов.Форма.Форма" Тогда
		ОткрытьФорму("ВнешняяОбработка.гф_КорректировкаЗаказовРезервов.Форма.ФормаВыбораНазначения", ПараметрыФормы,
			ЭтотОбъект, , , , Оповещение);
	Иначе
		ОткрытьФорму("Обработка.гф_КорректировкаЗаказовРезервов.Форма.ФормаВыбораНазначения", ПараметрыФормы,
			ЭтотОбъект, , , , Оповещение);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВидимостьКолонок(Команда)
	
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("ВидимостьКолонокЗавершение", ЭтотОбъект);
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ВидимостьКонтрагент", ВидимостьКонтрагент);
	ПараметрыФормы.Вставить("ВидимостьСклад", ВидимостьСклад);
	ПараметрыФормы.Вставить("ВидимостьСумма", ВидимостьСумма);
	ПараметрыФормы.Вставить("ВидимостьКомментарий", ВидимостьКомментарий);
	Если ИмяФормы = "ВнешняяОбработка.гф_КорректировкаЗаказовРезервов.Форма.Форма" Тогда
		ОткрытьФорму("ВнешняяОбработка.гф_КорректировкаЗаказовРезервов.Форма.ФормаВидимостьКолонок", ПараметрыФормы,
			ЭтотОбъект, , , , Оповещение);
	Иначе
		ОткрытьФорму("Обработка.гф_КорректировкаЗаказовРезервов.Форма.ФормаВидимостьКолонок", ПараметрыФормы,
			ЭтотОбъект, , , , Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьКолонокЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ВидимостьКонтрагент = Результат["ВидимостьКонтрагент"];
	ВидимостьСклад = Результат["ВидимостьСклад"];
	ВидимостьСумма = Результат["ВидимостьСумма"];
	ВидимостьКомментарий = Результат["ВидимостьКомментарий"];
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьСкидку(Заказ)
	Организация = Заказ.Организация;
	Контрагент = Заказ.Контрагент;
	Договор = Заказ.Договор;
	Период = Заказ.Дата;
	ДатаОбновленияИзИ5 = Заказ.гф_ДатаОбновленияИзИ5;
	Если Не ЗначениеЗаполнено(Организация)
		ИЛИ Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат 0;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Договор)
		ИЛИ Не ЗначениеЗаполнено(ДатаОбновленияИзИ5) Тогда
		Возврат 0;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	гф_ИсторияИзмененияСкидокСрезПоследних.Организация КАК Организация,
	|	гф_ИсторияИзмененияСкидокСрезПоследних.Сезон КАК Сезон,
	|	гф_ИсторияИзмененияСкидокСрезПоследних.Контрагент КАК Контрагент,
	|	гф_ИсторияИзмененияСкидокСрезПоследних.Договор КАК Договор,
	|	гф_ИсторияИзмененияСкидокСрезПоследних.ВидСкидки КАК ВидСкидки,
	|	гф_ИсторияИзмененияСкидокСрезПоследних.Скидка КАК Скидка
	|ИЗ
	|	РегистрСведений.гф_ИсторияИзмененияСкидок.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И Контрагент = &Контрагент
	|				И Договор = &Договор
	|				И ВидСкидки В (&ВидыСкидок)) КАК гф_ИсторияИзмененияСкидокСрезПоследних";
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Договор", Договор);
	парамКлюч = "гф_ГлобальныеЗначенияСкидкиДляЗаказаКлиента";
	МассивВидыСкидок = _омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначениеМассив(парамКлюч);
	Запрос.УстановитьПараметр("ВидыСкидок", МассивВидыСкидок);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	Скидка = Результат.Выгрузить().Итог("Скидка");
	Возврат Скидка;
КонецФункции

&НаСервереБезКонтекста
Функция гф_ЗаполнитьСтавкуНДС(ВариантКомплектации, СтруктураПараметровДействия)
	СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
	Если ЗначениеЗаполнено(ВариантКомплектации) Тогда
		Если ЗначениеЗаполнено(ВариантКомплектации.Владелец) Тогда
			// ++ 27.01.2023 Галфинд СадомцевСА Исправил заполнение Ставки НДС для Варианта комплектации
			//СтавкаНДС = ВариантКомплектации.Владелец.СтавкаНДС;
			Номенклатура = ВариантКомплектации.Владелец;
			НалогообложениеНДС = СтруктураПараметровДействия.НалогообложениеНДС;
			Дата = СтруктураПараметровДействия.Дата;
			Организация = СтруктураПараметровДействия.Организация;
			СтавкаНДС = УчетНДСУП.СтавкаНДСПоНоменклатуреИНалогообложению(Номенклатура, НалогообложениеНДС, Организация, Дата);
			// -- 27.01.2023 Галфинд СадомцевСА
		КонецЕсли;
	КонецЕсли;
	Возврат СтавкаНДС;
КонецФункции

&НаСервере
Функция РассчитатьЦенуКороба(ВариантКомплектации, ВидЦены = Неопределено, Период = Неопределено)
	Если Не ЗначениеЗаполнено(ВариантКомплектации) Тогда
		Возврат 0;
	КонецЕсли;
	Если ВидЦены = Неопределено Тогда
		ВидЦены = мЗаказКлиента.гф_ВидЦены;
	КонецЕсли;
	Если Период = Неопределено Тогда
		Период = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура КАК Номенклатура,
		|	СУММА(ВариантыКомплектацииНоменклатурыТовары.Количество) КАК Количество
		|ИЗ
		|	Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ВариантыКомплектацииНоменклатурыТовары
		|ГДЕ
		|	ВариантыКомплектацииНоменклатурыТовары.Ссылка = &ВариантКомплектации
		|
		|СГРУППИРОВАТЬ ПО
		|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура";
	Запрос.УстановитьПараметр("ВариантКомплектации", ВариантКомплектации);
	Результат = Запрос.Выполнить();
	ТЗВариантКомплектации = Результат.Выгрузить();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЦеныНоменклатуры25СрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатуры25СрезПоследних.Цена КАК Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(&Период,
		|			Номенклатура В (&СписокНоменклатуры)
		|				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатуры25СрезПоследних";
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	Запрос.УстановитьПараметр("СписокНоменклатуры", ТЗВариантКомплектации.ВыгрузитьКолонку("Номенклатура"));
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ЦенаКороба = 0;
	Для Каждого СтрокаНоменклатуры Из ТЗВариантКомплектации Цикл
		СтруктураПоиска = Новый Структура("Номенклатура", СтрокаНоменклатуры.Номенклатура);
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(СтруктураПоиска) Тогда
			ЦенаКороба = ЦенаКороба + Выборка.Цена * СтрокаНоменклатуры.Количество;
		КонецЕсли;
	КонецЦикла;
	Возврат ЦенаКороба;
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьВариантКомплектацииКоличествоПар(ВариантКомплектации)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СУММА(ВариантыКомплектацииНоменклатурыТовары.Количество) КАК КоличествоПар,
	               |	ВариантыКомплектацииНоменклатурыТовары.Ссылка КАК ВариантКомплектации
	               |ИЗ
	               |	Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ВариантыКомплектацииНоменклатурыТовары
	               |ГДЕ
	               |	ВариантыКомплектацииНоменклатурыТовары.Ссылка = &ВариантКомплектации
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВариантыКомплектацииНоменклатурыТовары.Ссылка";
	Запрос.УстановитьПараметр("ВариантКомплектации", ВариантКомплектации);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КоличествоПар;
	КонецЕсли;
	Возврат 0;
	
КонецФункции

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	ПересчитатьСуммуСНДСвСтрокеТаблицы("Товары");
	ПересчитатьСуммуЗаказаПредварительно("Товары");
КонецПроцедуры

&НаКлиенте
Процедура РезервыПриИзменении(Элемент)
	ПересчитатьСуммуСНДСвСтрокеТаблицы("Резервы");
	ПересчитатьСуммуЗаказаПредварительно("Резервы");
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуЗаказаПредварительно(ИмяТЧ = Неопределено)
	Если ИмяТЧ = Неопределено Тогда
		ИмяТЧ = ОпределитьИмяТЧ();
	КонецЕсли;
	мСуммаЗаказаПредварительно = 0;
	Если Не ЗначениеЗаполнено(ИмяТЧ) Тогда
		Возврат;
	КонецЕсли;
	Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
		Если Не СтрокаТЧ.флНаличиеВЗаказе И Не СтрокаТЧ.флДобавленаВручную Тогда
			Продолжить;
		КонецЕсли;
		мСуммаЗаказаПредварительно = мСуммаЗаказаПредварительно + СтрокаТЧ.СуммаСНДС;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ОпределитьИмяТЧ()
	Если РежимРаботы = 1 Тогда
		// Резервы по заказам
		Если флТоварыВКоробах Тогда
			Возврат "РезервыВКоробах";
		Иначе
			Возврат "Резервы";
		КонецЕсли;
	Иначе
		// Заказы на согласовании
		Если флТоварыВКоробах Тогда
			Возврат "ТоварыВКоробах";
		Иначе
			Возврат "Товары";
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ПересчитатьСуммуСНДСвСтрокеТаблицы(ИмяТЧ, СтрокаТаблицы = Неопределено)
	Если СтрокаТаблицы = Неопределено Тогда
		ТД = Элементы[ИмяТЧ].ТекущиеДанные;
	Иначе
		ТД = СтрокаТаблицы;
	КонецЕсли;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТД.флДобавленаВручную Тогда
		ТД.гф_ЦенаСоСкидкой = ТД.Цена;
	КонецЕсли;
	Ставка = 0;
	Если ЗначениеЗаполнено(ТД.СтавкаНДС) Тогда
		Ставка = ПолучитьЗначениеРеквизита(ТД.СтавкаНДС, "Ставка");
	КонецЕсли;
	ТД.Сумма = ТД.КоличествоУпаковок * ТД.гф_ЦенаСоСкидкой;
	ТД.СуммаНДС = ТД.Сумма * (Ставка/100);
	ТД.СуммаСНДС = ТД.Сумма + ТД.СуммаНДС;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если флЗаказИзменен Тогда
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросВыйтиИзОбработки", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, "Текущий заказ был изменен. Выйти из обработки?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВопросВыйтиИзОбработки(Ответ, ДопПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		флЗаказИзменен = Ложь;
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	ЗаполнитьСтавкуНДСвСтрокеТаблицы("Товары");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтавкуНДСвСтрокеТаблицы(ИмяТЧ, СтрокаТаблицы = Неопределено)
	Если СтрокаТаблицы = Неопределено Тогда
		ТД = Элементы[ИмяТЧ].ТекущиеДанные;
	Иначе
		ТД = СтрокаТаблицы;
	КонецЕсли;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТД.СтавкаНДС = ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка");
	Если ЗначениеЗаполнено(ТД.Номенклатура) Тогда
		ТД.СтавкаНДС = ПолучитьЗначениеРеквизита(ТД.Номенклатура, "СтавкаНДС");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВКоробахПриИзменении(Элемент)
	ПересчитатьСуммуСНДСвСтрокеТаблицыВКоробах("ТоварыВКоробах");
	ПересчитатьСуммуЗаказаПредварительно("ТоварыВКоробах");
КонецПроцедуры

&НаКлиенте
Процедура РезервыВКоробахПриИзменении(Элемент)
	ПересчитатьСуммуСНДСвСтрокеТаблицыВКоробах("РезервыВКоробах");
	ПересчитатьСуммуЗаказаПредварительно("РезервыВКоробах");
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуСНДСвСтрокеТаблицыВКоробах(ИмяТЧ, СтрокаТаблицы = Неопределено)
	Если СтрокаТаблицы = Неопределено Тогда
		ТД = Элементы[ИмяТЧ].ТекущиеДанные;
	Иначе
		ТД = СтрокаТаблицы;
	КонецЕсли;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Ставка = 0;
	Если ЗначениеЗаполнено(ТД.СтавкаНДС) Тогда
		Ставка = ПолучитьЗначениеРеквизита(ТД.СтавкаНДС, "Ставка");
	КонецЕсли;
	ТД.Сумма = ТД.Количество * ТД.ЦенаКоробаСоСкидкой;
	ТД.СуммаНДС = ТД.Сумма * (Ставка/100);
	ТД.СуммаСНДС = ТД.Сумма + ТД.СуммаНДС;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВКоробахЦенаКоробаПриИзменении(Элемент)
	ЗначениеСто = 100;
	ТД = Элементы.ТоварыВКоробах.ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		ТД.ЦенаКоробаСоСкидкой = ТД.ЦенаКороба * (1 - ТД.Скидка / ЗначениеСто);
	КонецЕсли;
КонецПроцедуры

//&НаСервере
//Функция ПолучитьШапкуМакета(ИмяМакета)
//	ТабДок = Новый ТабличныйДокумент;
//	//ТабДок.АвтоМасштаб = Истина;
//	//ТабДок.ОтображатьЗаголовки = Ложь;
//	//ТабДок.ОтображатьСетку = Ложь;
//	//ТабДок.ТолькоПросмотр = Истина;
//	
//	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
//	Макет = ОбработкаОбъект.ПолучитьМакет(ИмяМакета);
//	ТабДок.Вывести(Макет);
//	Возврат ТабДок;
//КонецФункции

&НаКлиенте
Процедура ТоварыЗагрузитьИзТабличногоДокумента(Команда)
	ДополнительныеПараметры = Новый Структура("ИмяТЧ", "Товары");
	Оповещение = Новый ОписаниеОповещения("ПослеЗагрузкиИзТабличногоДокумента", ЭтотОбъект, ДополнительныеПараметры);
		
	ПараметрыФормы = Новый Структура();
		
	ПараметрыФормы.Вставить("Заголовок", "Загрузка товаров из табличного документа");
	ПараметрыФормы.Вставить("ИмяТЧ", "Товары");
	ПараметрыФормы.Вставить("РежимРаботы", РежимРаботы);
		
	Если ИмяФормы = "ВнешняяОбработка.гф_КорректировкаЗаказовРезервов.Форма.Форма" Тогда
		ОткрытьФорму("ВнешняяОбработка.гф_КорректировкаЗаказовРезервов.Форма.ФормаЗагрузкиДанныхИзТабличногоДокумента", ПараметрыФормы,
			ЭтотОбъект, , , , Оповещение);
	Иначе
		ОткрытьФорму("Обработка.гф_КорректировкаЗаказовРезервов.Форма.ФормаЗагрузкиДанныхИзТабличногоДокумента", ПараметрыФормы,
			ЭтотОбъект, , , , Оповещение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВКоробахЗагрузитьИзТабличногоДокумента(Команда)
	ДополнительныеПараметры = Новый Структура("ИмяТЧ", "ТоварыВКоробах");
	Оповещение = Новый ОписаниеОповещения("ПослеЗагрузкиИзТабличногоДокумента", ЭтотОбъект, ДополнительныеПараметры);
		
	ПараметрыФормы = Новый Структура();
		
	ПараметрыФормы.Вставить("Заголовок", "Загрузка товаров в коробах из табличного документа");
	ПараметрыФормы.Вставить("ИмяТЧ", "ТоварыВКоробах");
	ПараметрыФормы.Вставить("РежимРаботы", РежимРаботы);
		
	Если ИмяФормы = "ВнешняяОбработка.гф_КорректировкаЗаказовРезервов.Форма.Форма" Тогда
		ОткрытьФорму("ВнешняяОбработка.гф_КорректировкаЗаказовРезервов.Форма.ФормаЗагрузкиДанныхИзТабличногоДокумента", ПараметрыФормы,
			ЭтотОбъект, , , , Оповещение);
	Иначе
		ОткрытьФорму("Обработка.гф_КорректировкаЗаказовРезервов.Форма.ФормаЗагрузкиДанныхИзТабличногоДокумента", ПараметрыФормы,
			ЭтотОбъект, , , , Оповещение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РезервыЗагрузитьИзТабличногоДокумента(Команда)
	ДополнительныеПараметры = Новый Структура("ИмяТЧ", "Резервы");
	Оповещение = Новый ОписаниеОповещения("ПослеЗагрузкиИзТабличногоДокумента", ЭтотОбъект, ДополнительныеПараметры);
		
	ПараметрыФормы = Новый Структура();
		
	ПараметрыФормы.Вставить("Заголовок", "Загрузка резервов из табличного документа");
	ПараметрыФормы.Вставить("ИмяТЧ", "Резервы");
	ПараметрыФормы.Вставить("РежимРаботы", РежимРаботы);
		
	Если ИмяФормы = "ВнешняяОбработка.гф_КорректировкаЗаказовРезервов.Форма.Форма" Тогда
		ОткрытьФорму("ВнешняяОбработка.гф_КорректировкаЗаказовРезервов.Форма.ФормаЗагрузкиДанныхИзТабличногоДокумента", ПараметрыФормы,
			ЭтотОбъект, , , , Оповещение);
	Иначе
		ОткрытьФорму("Обработка.гф_КорректировкаЗаказовРезервов.Форма.ФормаЗагрузкиДанныхИзТабличногоДокумента", ПараметрыФормы,
			ЭтотОбъект, , , , Оповещение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РезервыВКоробахЗагрузитьИзТабличногоДокумента(Команда)
	ДополнительныеПараметры = Новый Структура("ИмяТЧ", "РезервыВКоробах");
	Оповещение = Новый ОписаниеОповещения("ПослеЗагрузкиИзТабличногоДокумента", ЭтотОбъект, ДополнительныеПараметры);
		
	ПараметрыФормы = Новый Структура();
		
	ПараметрыФормы.Вставить("Заголовок", "Загрузка резервов в коробах из табличного документа");
	ПараметрыФормы.Вставить("ИмяТЧ", "РезервыВКоробах");
	ПараметрыФормы.Вставить("РежимРаботы", РежимРаботы);
		
	Если ИмяФормы = "ВнешняяОбработка.гф_КорректировкаЗаказовРезервов.Форма.Форма" Тогда
		ОткрытьФорму("ВнешняяОбработка.гф_КорректировкаЗаказовРезервов.Форма.ФормаЗагрузкиДанныхИзТабличногоДокумента", ПараметрыФормы,
			ЭтотОбъект, , , , Оповещение);
	Иначе
		ОткрытьФорму("Обработка.гф_КорректировкаЗаказовРезервов.Форма.ФормаЗагрузкиДанныхИзТабличногоДокумента", ПараметрыФормы,
			ЭтотОбъект, , , , Оповещение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗагрузкиИзТабличногоДокумента(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// Результат.РежимРаботы: 0 - На согласовании, 1 - Резервы по заказам
	// Результат.ЗаказыНаСогласовании: 0 - Добавить, 1 - Удалить
	// Результат.РезервыПоЗаказам: 0 - Зарезервировать, 1 - СнятьРезерв, 2 - Перенести резерв, 3 - Перенести в другой заказ
	Если ДополнительныеПараметры.ИмяТЧ = "Товары" Тогда
		ПослеЗагрузкиИзТабличногоДокументаТовары(Результат);
	ИначеЕсли ДополнительныеПараметры.ИмяТЧ = "ТоварыВКоробах" Тогда
		ПослеЗагрузкиИзТабличногоДокументаТоварыВКоробах(Результат);
	ИначеЕсли ДополнительныеПараметры.ИмяТЧ = "Резервы" Тогда
		ПослеЗагрузкиИзТабличногоДокументаРезервы(Результат);
	ИначеЕсли ДополнительныеПараметры.ИмяТЧ = "РезервыВКоробах" Тогда
		ПослеЗагрузкиИзТабличногоДокументаРезервыВКоробах(Результат);
	Иначе
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСтрокуТабличногоДокументыТовары(ДанныеСтроки, Номенклатура)
	ЗначениеСто = 100;
	// 22.02.2023 СадомцевСА Добавил параметр Номенклатура
	Характеристика = НайтиХарактеристику(ДанныеСтроки.Характеристика, Номенклатура);
	СтруктураПоиска = Новый Структура("Номенклатура, флНаличиеВЗаказе, флТолькоПросмотр", Номенклатура, Истина, Ложь);
	Если ЗначениеЗаполнено(Характеристика) Тогда
		СтруктураПоиска.Вставить("Характеристика", Характеристика);
	КонецЕсли;
	СтрокиТаблицы = Объект.Товары.НайтиСтроки(СтруктураПоиска);
	Если СтрокиТаблицы.Количество() > 0 Тогда
		СтрокаТаблицы = СтрокиТаблицы[0];
	Иначе
		СтрокаТаблицы = Объект.Товары.Добавить();
		СтрокаТаблицы.флДобавленаВручную	= Истина;
		СтрокаТаблицы.Номенклатура = Номенклатура;
		СтрокаТаблицы.Характеристика = Характеристика;
		СтрокаТаблицы.ИдентификаторСтроки	= Новый УникальныйИдентификатор();
		// здесь заполняем поля значениями из первой строки тч
		Если Объект.Товары.Количество() > 1 Тогда
			//СтрокаТаблицы.СтавкаНДС				= Объект.Товары[0].СтавкаНДС;
			СтрокаТаблицы.Склад					= Объект.Товары[0].Склад;
			СтрокаТаблицы.ДатаОтгрузки			= Объект.Товары[0].ДатаОтгрузки;
			СтрокаТаблицы.ВариантОбеспечения	= Объект.Товары[0].ВариантОбеспечения;
			СтрокаТаблицы.Упаковка				= Объект.Товары[0].Упаковка;
		КонецЕсли;
		
		ДатаЗаказа = гф_ТекущаяДатаСеанса();
		ЗаполнитьВидЦеныПроцентРучнойСкидки(СтрокаТаблицы, ДатаЗаказа);
		Если ЗначениеЗаполнено(СтрокаТаблицы.ВидЦены) Тогда
			Отбор = Новый Структура;
			Отбор.Вставить("Номенклатура", СтрокаТаблицы.Номенклатура);			
			Отбор.Вставить("ВидЦены", СтрокаТаблицы.ВидЦены);
			ЗаполнитьЦену(СтрокаТаблицы, Отбор, ДатаЗаказа);
		КонецЕсли;
		// Цена со скидкой
		СтрокаТаблицы.гф_ЦенаСоСкидкой = СтрокаТаблицы.Цена * (1 - СтрокаТаблицы.ПроцентРучнойСкидки / ЗначениеСто);
		
		СтрокаТаблицы.СтавкаНДС = ПолучитьЗначениеРеквизита(СтрокаТаблицы.Номенклатура, "СтавкаНДС");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Добавить) Тогда
		//Попытка
		//	Добавить = Число(ДанныеСтроки.Добавить);
		//Исключение
		//	Добавить = 0;
		//КонецПопытки;
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		Добавить = ОписаниеТипа.ПривестиЗначение(ДанныеСтроки.Добавить);
		СтрокаТаблицы.Добавить = Добавить;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеСтроки.Удалить) Тогда
		//Попытка
		//	Удалить = Число(ДанныеСтроки.Удалить);
		//Исключение
		//	Удалить = 0;
		//КонецПопытки;
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		Удалить = ОписаниеТипа.ПривестиЗначение(ДанныеСтроки.Удалить);
		СтрокаТаблицы.Удалить = Удалить;
	КонецЕсли;
	
	ПересчитатьИтогПоСтроке(СтрокаТаблицы);
	ПересчитатьСуммуСНДСвСтрокеТаблицы("Товары", СтрокаТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗагрузкиИзТабличногоДокументаТовары(Результат)
	ЗначениеСто = 100;
	Для Каждого ДанныеСтроки Из Результат["Таблица"] Цикл
		Номенклатура = НайтиНоменклатуру(ДанныеСтроки.Артикул);
		Если Не ЗначениеЗаполнено(Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		ЗагрузитьСтрокуТабличногоДокументыТовары(ДанныеСтроки, Номенклатура);
	КонецЦикла;
	ПересчитатьСуммуЗаказаПредварительно("Товары");
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСтрокуТабличногоДокументыТоварыВКоробах(ДанныеСтроки, ВариантКомплектации);
	ЗначениеСто = 100;
	СтруктураПоиска = Новый Структура("ВариантКомплектации, флНаличиеВЗаказе", ВариантКомплектации, Истина);
	СтрокиТаблицы = Объект.ТоварыВКоробах.НайтиСтроки(СтруктураПоиска);
	Если СтрокиТаблицы.Количество() > 0 Тогда
		СтрокаТаблицы = СтрокиТаблицы[0];
	Иначе
		СтрокаТаблицы = Объект.ТоварыВКоробах.Добавить();
		СтрокаТаблицы.флДобавленаВручную	= Истина;
		СтрокаТаблицы.ВариантКомплектации = ВариантКомплектации;
		СтрокаТаблицы.Скидка = РассчитатьСкидку(мЗаказКлиента);
		СтрокаТаблицы.ВидЦены = _омОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(мЗаказКлиента,
		"Документ.ЗаказКлиента", "гф_ВидЦены");
		СтрокаТаблицы.ВариантКомплектацииКоличествоПар = ЗаполнитьВариантКомплектацииКоличествоПар(СтрокаТаблицы.ВариантКомплектации);
		СтрокаТаблицы.Артикул = ПолучитьАртикул(СтрокаТаблицы.ВариантКомплектации);
		СтрокаТаблицы.ЦенаКороба = РассчитатьЦенуКороба(СтрокаТаблицы.ВариантКомплектации);
		СтрокаТаблицы.ЦенаКоробаСоСкидкой = СтрокаТаблицы.ЦенаКороба * (1 - СтрокаТаблицы.Скидка / ЗначениеСто);
		//++СтрокаТаблицы.СтавкаНДС = гф_ЗаполнитьСтавкуНДС(СтрокаТаблицы.ВариантКомплектации);
	ЗаполнитьДокОбъект();
	СтруктураДействий = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(ДокОбъект, Истина);
	СтрокаТаблицы["СтавкаНДС"] = гф_ЗаполнитьСтавкуНДС(СтрокаТаблицы["ВариантКомплектации"], СтруктураДействий);
	//--
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеСтроки.Добавить) Тогда
		//Попытка
		//	Добавить = Число(ДанныеСтроки.Добавить);
		//Исключение
		//	Добавить = 0;
		//КонецПопытки;
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		Добавить = ОписаниеТипа.ПривестиЗначение(ДанныеСтроки.Добавить);
		СтрокаТаблицы.Добавить = Добавить;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеСтроки.Удалить) Тогда
		//Попытка
		//	Удалить = Число(ДанныеСтроки.Удалить);
		//Исключение
		//	Удалить = 0;
		//КонецПопытки;
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		Удалить = ОписаниеТипа.ПривестиЗначение(ДанныеСтроки.Удалить);
		СтрокаТаблицы.Удалить = Удалить;
	КонецЕсли;
	
	ПересчитатьКоличествоПоСтрокеВКоробах("ТоварыВКоробах", "Добавить", "Удалить", , СтрокаТаблицы);
	ЗаполнитьФлажкиДобавленоОтмененоПоСтрокеВКоробах(СтрокаТаблицы);
	ПересчитатьСуммуСНДСвСтрокеТаблицыВКоробах("ТоварыВКоробах", СтрокаТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗагрузкиИзТабличногоДокументаТоварыВКоробах(Результат)
	Для Каждого ДанныеСтроки Из Результат["Таблица"] Цикл
		ВариантКомплектации = НайтиВариантКомплектации(ДанныеСтроки.ВариантКомплектации);
		Если Не ЗначениеЗаполнено(ВариантКомплектации) Тогда
			Продолжить;
		КонецЕсли;
		ЗагрузитьСтрокуТабличногоДокументыТоварыВКоробах(ДанныеСтроки, ВариантКомплектации);
	КонецЦикла;
	ПересчитатьСуммуЗаказаПредварительно("ТоварыВКоробах");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПеренестиРезервНазначение(СтрокаТаблицы, ДанныеСтроки, ПараметрыОтбора)
	Если ЗначениеЗаполнено(ДанныеСтроки.ПеренестиРезерв) Тогда
		//Попытка
		//	ПеренестиРезерв = Число(ДанныеСтроки.ПеренестиРезерв);
		//Исключение
		//	ПеренестиРезерв = 0;
		//КонецПопытки;
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		ПеренестиРезерв = ОписаниеТипа.ПривестиЗначение(ДанныеСтроки.ПеренестиРезерв);
		СтрокаТаблицы.ПеренестиРезерв = ПеренестиРезерв;
		//СтрокаТаблицы.НовоеНазначение = НайтиНазначение(ДанныеСтроки.ПеренестиРезервНазначение, мЗаказКлиента, флТоварыВКоробах);
		СтрокаТаблицы.НовоеНазначение = НайтиНазначениеПараметрыОтбора(ПараметрыОтбора);
		ВывестиСообщениеНовоеНазначение(СтрокаТаблицы.НовоеНазначение, ПараметрыОтбора);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПеренестиВДругойЗаказНазначение(СтрокаТаблицы, ДанныеСтроки, ПараметрыОтбора)
	Если ЗначениеЗаполнено(ДанныеСтроки.ПеренестиВДругойЗаказ) Тогда
		//Попытка
		//	ПеренестиВДругойЗаказ = Число(ДанныеСтроки.ПеренестиВДругойЗаказ);
		//Исключение
		//	ПеренестиВДругойЗаказ = 0;
		//КонецПопытки;
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		ПеренестиВДругойЗаказ = ОписаниеТипа.ПривестиЗначение(ДанныеСтроки.ПеренестиВДругойЗаказ);
		СтрокаТаблицы.ПеренестиВДругойЗаказ = ПеренестиВДругойЗаказ;
		//СтрокаТаблицы.ПеренестиНовоеНазначение = НайтиНазначение(ДанныеСтроки.ПеренестиВДругойЗаказНазначение, мЗаказКлиента, флТоварыВКоробах);
		СтрокаТаблицы.ПеренестиНовоеНазначение = НайтиНазначениеПараметрыОтбора(ПараметрыОтбора);
		ВывестиСообщениеНовоеНазначение(СтрокаТаблицы.ПеренестиНовоеНазначение, ПараметрыОтбора);
	КонецЕсли;
КонецПроцедуры

// 22.02.2023 СадомцевСА Реализовал заполнение параметра Заказ
&НаКлиенте
Функция ЗаполнитьПарамЗаказ(РезервыПоЗаказам)
	// Результат.РезервыПоЗаказам: 0 - Зарезервировать, 1 - СнятьРезерв, 2 - Перенести резерв, 3 - Перенести в другой заказ
	парамЗаказ = Неопределено;
	Если РезервыПоЗаказам = 0 ИЛИ РезервыПоЗаказам = 1 Тогда
		парамЗаказ = мЗаказКлиента;
	КонецЕсли;
	Возврат парамЗаказ;
КонецФункции

// 22.02.2023 СадомцевСА Добавил параметр РезервыПоЗаказам
&НаКлиенте
Процедура ЗагрузитьСтрокуТабличногоДокументыРезервы(ДанныеСтроки, Номенклатура, РезервыПоЗаказам)
	ЗначениеСто = 100;
	// 22.02.2023 СадомцевСА Добавил параметр Номенклатура
	Характеристика = НайтиХарактеристику(ДанныеСтроки.Характеристика, Номенклатура);
	СтруктураПоиска = Новый Структура("Номенклатура, флНаличиеВЗаказе, флТолькоПросмотр", Номенклатура, Истина, Ложь);
	Если ЗначениеЗаполнено(Характеристика) Тогда
		СтруктураПоиска.Вставить("Характеристика", Характеристика);
	КонецЕсли;
	СтрокиТаблицы = Объект.Резервы.НайтиСтроки(СтруктураПоиска);
	Если СтрокиТаблицы.Количество() > 0 Тогда
		СтрокаТаблицы = СтрокиТаблицы[0];
	Иначе
		СтрокаТаблицы = Объект.Резервы.Добавить();
		СтрокаТаблицы.флДобавленаВручную	= Истина;
		СтрокаТаблицы.Номенклатура = Номенклатура;
		СтрокаТаблицы.Характеристика = Характеристика;
		СтрокаТаблицы.ИдентификаторСтроки	= Новый УникальныйИдентификатор();
		
		// здесь заполняем поля значениями из первой строки тч
		Если Объект.Резервы.Количество() > 1 Тогда
			//СтрокаТаблицы.СтавкаНДС				= Объект.Товары[0].СтавкаНДС;
			СтрокаТаблицы.Склад					= Объект.Резервы[0].Склад;
			СтрокаТаблицы.ДатаОтгрузки			= Объект.Резервы[0].ДатаОтгрузки;
			СтрокаТаблицы.ВариантОбеспечения	= Объект.Резервы[0].ВариантОбеспечения;
			СтрокаТаблицы.Упаковка				= Объект.Резервы[0].Упаковка;
		КонецЕсли;
		
		ДатаЗаказа = гф_ТекущаяДатаСеанса();
		// 22.02.2023 СадомцевСА Реализовал заполнение параметра Заказ
		парамЗаказ = ЗаполнитьПарамЗаказ(РезервыПоЗаказам);
		ЗаполнитьВидЦеныПроцентРучнойСкидки(СтрокаТаблицы, ДатаЗаказа, парамЗаказ);
		Если ЗначениеЗаполнено(СтрокаТаблицы.ВидЦены) Тогда
			Отбор = Новый Структура;
			Отбор.Вставить("Номенклатура", СтрокаТаблицы.Номенклатура);			
			Отбор.Вставить("ВидЦены", СтрокаТаблицы.ВидЦены);
			ЗаполнитьЦену(СтрокаТаблицы, Отбор, ДатаЗаказа);
		КонецЕсли;
		// Цена со скидкой
		СтрокаТаблицы.гф_ЦенаСоСкидкой = СтрокаТаблицы.Цена * (1 - СтрокаТаблицы.ПроцентРучнойСкидки / ЗначениеСто);
		
		СтрокаТаблицы.СтавкаНДС = ПолучитьЗначениеРеквизита(СтрокаТаблицы.Номенклатура, "СтавкаНДС");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Зарезервировать) Тогда
		//Попытка
		//	Зарезервировать = Число(ДанныеСтроки.Зарезервировать);
		//Исключение
		//	Зарезервировать = 0;
		//КонецПопытки;
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		Зарезервировать = ОписаниеТипа.ПривестиЗначение(ДанныеСтроки.Зарезервировать);
		СтрокаТаблицы.Зарезервировать = Зарезервировать;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеСтроки.СнятьРезерв) Тогда
		//Попытка
		//	СнятьРезерв = Число(ДанныеСтроки.СнятьРезерв);
		//Исключение
		//	СнятьРезерв = 0;
		//КонецПопытки;
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		СнятьРезерв = ОписаниеТипа.ПривестиЗначение(ДанныеСтроки.СнятьРезерв);
		СтрокаТаблицы.СнятьРезерв = СнятьРезерв;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("мЗаказКлиента", мЗаказКлиента);
	ПараметрыОтбора.Вставить("ВариантКомплектации", Неопределено);
	ПараметрыОтбора.Вставить("Номенклатура", СтрокаТаблицы.Номенклатура);
	ПараметрыОтбора.Вставить("Характеристика", СтрокаТаблицы.Характеристика);
	ПараметрыОтбора.Вставить("РезервыВКоробах", Ложь);
	ПараметрыОтбора.Вставить("ПеренестиНовоеНазначение", Ложь);
	ПараметрыОтбора.Вставить("НомерЗаказа", ДанныеСтроки.ПеренестиРезервНазначение);
	ЗаполнитьПеренестиРезервНазначение(СтрокаТаблицы, ДанныеСтроки, ПараметрыОтбора);
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("мЗаказКлиента", мЗаказКлиента);
	ПараметрыОтбора.Вставить("ВариантКомплектации", Неопределено);
	ПараметрыОтбора.Вставить("Номенклатура", СтрокаТаблицы.Номенклатура);
	ПараметрыОтбора.Вставить("Характеристика", СтрокаТаблицы.Характеристика);
	ПараметрыОтбора.Вставить("РезервыВКоробах", Ложь);
	ПараметрыОтбора.Вставить("ПеренестиНовоеНазначение", Истина);
	ПараметрыОтбора.Вставить("НомерЗаказа", ДанныеСтроки.ПеренестиВДругойЗаказНазначение);
	ЗаполнитьПеренестиВДругойЗаказНазначение(СтрокаТаблицы, ДанныеСтроки, ПараметрыОтбора);
	
	ПересчитатьИтогПоСтрокеРезерва(СтрокаТаблицы);
	ПересчитатьСуммуСНДСвСтрокеТаблицы("Резервы", СтрокаТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗагрузкиИзТабличногоДокументаРезервы(Результат)
	Для Каждого ДанныеСтроки Из Результат["Таблица"] Цикл
		Номенклатура = НайтиНоменклатуру(ДанныеСтроки.Артикул);
		Если Не ЗначениеЗаполнено(Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		// 22.02.2023 СадомцевСА Добавил параметр РезервыПоЗаказам
		// РезервыПоЗаказам: 0 - Зарезервировать, 1 - СнятьРезерв, 2 - Перенести резерв, 3 - Перенести в другой заказ
		ЗагрузитьСтрокуТабличногоДокументыРезервы(ДанныеСтроки, Номенклатура, Результат.РезервыПоЗаказам);
	КонецЦикла;
	ПересчитатьСуммуЗаказаПредварительно("Резервы");
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСтрокуТабличногоДокументыРезервыВКоробах(ДанныеСтроки, ВариантКомплектации)
	ЗначениеСто = 100;
	СтруктураПоиска = Новый Структура("ВариантКомплектации, флНаличиеВЗаказе", ВариантКомплектации, Истина);
	СтрокиТаблицы = Объект.РезервыВКоробах.НайтиСтроки(СтруктураПоиска);
	Если СтрокиТаблицы.Количество() > 0 Тогда
		СтрокаТаблицы = СтрокиТаблицы[0];
	Иначе
		СтрокаТаблицы = Объект.РезервыВКоробах.Добавить();
		СтрокаТаблицы.флДобавленаВручную	= Истина;
		СтрокаТаблицы.ВариантКомплектации = ВариантКомплектации;
		СтрокаТаблицы.Скидка = РассчитатьСкидку(мЗаказКлиента);
		СтрокаТаблицы.ВидЦены = _омОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(мЗаказКлиента,
		"Документ.ЗаказКлиента", "гф_ВидЦены");
		СтрокаТаблицы.ВариантКомплектацииКоличествоПар = ЗаполнитьВариантКомплектацииКоличествоПар(СтрокаТаблицы.ВариантКомплектации);
		СтрокаТаблицы.Артикул = ПолучитьАртикул(СтрокаТаблицы.ВариантКомплектации);
		СтрокаТаблицы.ЦенаКороба = РассчитатьЦенуКороба(СтрокаТаблицы.ВариантКомплектации);
		СтрокаТаблицы.ЦенаКоробаСоСкидкой = СтрокаТаблицы.ЦенаКороба * (1 - СтрокаТаблицы.Скидка / ЗначениеСто);
		//++СтрокаТаблицы.СтавкаНДС = гф_ЗаполнитьСтавкуНДС(СтрокаТаблицы.ВариантКомплектации);
	ЗаполнитьДокОбъект();
	СтруктураДействий = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(ДокОбъект, Истина);
	СтрокаТаблицы["СтавкаНДС"] = гф_ЗаполнитьСтавкуНДС(СтрокаТаблицы["ВариантКомплектации"], СтруктураДействий);
	//--
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Зарезервировать) Тогда
		//Попытка
		//	Зарезервировать = Число(ДанныеСтроки.Зарезервировать);
		//Исключение
		//	Зарезервировать = 0;
		//КонецПопытки;
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		Зарезервировать = ОписаниеТипа.ПривестиЗначение(ДанныеСтроки.Зарезервировать);
		СтрокаТаблицы.Зарезервировать = Зарезервировать;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеСтроки.СнятьРезерв) Тогда
		//Попытка
		//	СнятьРезерв = Число(ДанныеСтроки.СнятьРезерв);
		//Исключение
		//	СнятьРезерв = 0;
		//КонецПопытки;
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		СнятьРезерв = ОписаниеТипа.ПривестиЗначение(ДанныеСтроки.СнятьРезерв);
		СтрокаТаблицы.СнятьРезерв = СнятьРезерв;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("мЗаказКлиента", мЗаказКлиента);
	ПараметрыОтбора.Вставить("ВариантКомплектации", СтрокаТаблицы.ВариантКомплектации);
	ПараметрыОтбора.Вставить("Номенклатура", Неопределено);
	ПараметрыОтбора.Вставить("Характеристика", Неопределено);
	ПараметрыОтбора.Вставить("РезервыВКоробах", Истина);
	ПараметрыОтбора.Вставить("ПеренестиНовоеНазначение", Ложь);
	ПараметрыОтбора.Вставить("НомерЗаказа", ДанныеСтроки.ПеренестиРезервНазначение);
	ЗаполнитьПеренестиРезервНазначение(СтрокаТаблицы, ДанныеСтроки, ПараметрыОтбора);
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("мЗаказКлиента", мЗаказКлиента);
	ПараметрыОтбора.Вставить("ВариантКомплектации", СтрокаТаблицы.ВариантКомплектации);
	ПараметрыОтбора.Вставить("Номенклатура", Неопределено);
	ПараметрыОтбора.Вставить("Характеристика", Неопределено);
	ПараметрыОтбора.Вставить("РезервыВКоробах", Истина);
	ПараметрыОтбора.Вставить("ПеренестиНовоеНазначение", Истина);
	ПараметрыОтбора.Вставить("НомерЗаказа", ДанныеСтроки.ПеренестиВДругойЗаказНазначение);
	ЗаполнитьПеренестиВДругойЗаказНазначение(СтрокаТаблицы, ДанныеСтроки, ПараметрыОтбора);
	
	ПересчитатьКоличествоПоСтрокеВКоробах("РезервыВКоробах", "", "", "ПеренестиВДругойЗаказ", СтрокаТаблицы);
	ПересчитатьСуммуСНДСвСтрокеТаблицыВКоробах("РезервыВКоробах", СтрокаТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗагрузкиИзТабличногоДокументаРезервыВКоробах(Результат)
	Для Каждого ДанныеСтроки Из Результат["Таблица"] Цикл
		ВариантКомплектации = НайтиВариантКомплектации(ДанныеСтроки.ВариантКомплектации);
		Если Не ЗначениеЗаполнено(ВариантКомплектации) Тогда
			Продолжить;
		КонецЕсли;
		ЗагрузитьСтрокуТабличногоДокументыРезервыВКоробах(ДанныеСтроки, ВариантКомплектации);
	КонецЦикла;
	ПересчитатьСуммуЗаказаПредварительно("РезервыВКоробах");
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиВариантКомплектации(Наименование)
	Если Не ЗначениеЗаполнено(Наименование) Тогда
		Возврат Справочники.ВариантыКомплектацииНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВариантыКомплектацииНоменклатуры.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
	               |ГДЕ
	               |	ВариантыКомплектацииНоменклатуры.Наименование = &Наименование
	               |	И НЕ ВариантыКомплектацииНоменклатуры.ПометкаУдаления";
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.ВариантыКомплектацииНоменклатуры.ПустаяСсылка();
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция НайтиНоменклатуру(Артикул)
	Если Не ЗначениеЗаполнено(Артикул) Тогда
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Номенклатура.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.Артикул = &Артикул
	               |	И НЕ Номенклатура.ПометкаУдаления";
	Запрос.УстановитьПараметр("Артикул", Артикул);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	// 22.02.2023 СадомцевСА Добавил Сообщение о дублях Артикула
	Если Выборка.Количество() > 1 Тогда
		ТекстСообщения = "По Артикулу:" + Артикул
			+ " найдены дубли Номенклатуры!";
		СообщитьПользователю(ТекстСообщения);
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
КонецФункции

// 22.02.2023 СадомцевСА Добавил параметр Номенклатура
&НаСервереБезКонтекста
Функция НайтиХарактеристику(Наименование, Номенклатура)
	Если Не ЗначениеЗаполнено(Наименование) Тогда
		Возврат Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	               |ГДЕ
	               |	ХарактеристикиНоменклатуры.Наименование = &Наименование
	               |	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
	               |	И ХарактеристикиНоменклатуры.ВидНоменклатуры = &ВидНоменклатуры";
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("ВидНоменклатуры", Номенклатура.ВидНоменклатуры);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция НайтиНазначение(Номер, ИсключитьЗаказ, флТоварыВКоробах)
	Если Не ЗначениеЗаполнено(Номер) Тогда
		Возврат Справочники.Назначения.ПустаяСсылка();
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗаказКлиента.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.ЗаказКлиента КАК ЗаказКлиента
	               |ГДЕ
	               |	ЗаказКлиента.Номер = &Номер";
	Запрос.УстановитьПараметр("Номер", Номер);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	МассивЗаказы = Новый Массив;
	Пока Выборка.Следующий() Цикл
		ТоварыВКоробах = ВернутьТоварыВКоробах(Выборка.Ссылка);
		Если ТоварыВКоробах = флТоварыВКоробах Тогда
			МассивЗаказы.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	Запрос.УстановитьПараметр("МассивЗаказы", МассивЗаказы);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	МАКСИМУМ(Назначения.Ссылка) КАК Ссылка
	               |ИЗ
	               |	Справочник.Назначения КАК Назначения
	               |ГДЕ
	               |	Назначения.Заказ В(&МассивЗаказы)
	               |	И Назначения.Заказ <> &ИсключитьЗаказ";
	Запрос.УстановитьПараметр("ИсключитьЗаказ", ИсключитьЗаказ);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.Назначения.ПустаяСсылка();
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьСтрокиПустоеНазначение(ТаблицаОстатки)
	МассивУдалитьСтроки = Новый Массив;
	Для Каждого СтрокаТЗ Из ТаблицаОстатки Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЗ["Назначение"]) Тогда
			МассивУдалитьСтроки.Добавить(СтрокаТЗ);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдалитьСтроку Из МассивУдалитьСтроки Цикл
		ТаблицаОстатки.Удалить(УдалитьСтроку);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиНазначениеПараметрыОтбора(Параметры)
	мЗаказКлиента = Параметры["мЗаказКлиента"];
	отборОрганизация = мЗаказКлиента.Организация;
	отборСклад = мЗаказКлиента.Склад;
	отборВариантКомплектации = Параметры["ВариантКомплектации"];
	отборНоменклатура = Параметры["Номенклатура"];
	отборХарактеристика = Параметры["Характеристика"];
	флРезервыВКоробах = Параметры["РезервыВКоробах"];
	флПеренестиНовоеНазначение = Параметры["ПеренестиНовоеНазначение"];
	НомерЗаказа = Параметры["НомерЗаказа"];
	Если Не ЗначениеЗаполнено(НомерЗаказа) Тогда
		Возврат Справочники.Назначения.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	// 1. найдем все заказы по отборам
	Если флРезервыВКоробах Тогда
		Запрос.Текст = ТекстЗапросаВтЗаказыТоварыВКоробах(флПеренестиНовоеНазначение, отборВариантКомплектации);
	Иначе
		Запрос.Текст = ТекстЗапросаВтЗаказыТовары(флПеренестиНовоеНазначение, отборНоменклатура, отборХарактеристика);
	КонецЕсли;
	Если флПеренестиНовоеНазначение Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказКлиента.Проведен", "ИСТИНА");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НЕ ЗаказКлиента.ПометкаУдаления", "ИСТИНА");
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация", отборОрганизация);
	Запрос.УстановитьПараметр("Склад", отборСклад);
	//Запрос.УстановитьПараметр("Контрагент", отборКонтрагент);
	Запрос.УстановитьПараметр("ВариантКомплектации", отборВариантКомплектации);
	Запрос.УстановитьПараметр("Номенклатура", отборНоменклатура);
	Запрос.УстановитьПараметр("Характеристика", отборХарактеристика);
	//Запрос.УстановитьПараметр("ДатаНачала", отборПериод.ДатаНачала);
	//Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(отборПериод.ДатаОкончания));
	Запрос.Выполнить();
	// втЗаказы
	
	// 2. получим таблицу с товарами из заказов
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗаказКлиентаТовары.Ссылка КАК Заказ,
	               |	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	               |	ЗаказКлиентаТовары.Характеристика КАК Характеристика,
	               |	СУММА(ЗаказКлиентаТовары.Количество) КАК Количество
	               |ПОМЕСТИТЬ втЗаказыТовары
	               |ИЗ
	               |	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	               |ГДЕ
	               |	ЗаказКлиентаТовары.Ссылка В
	               |			(ВЫБРАТЬ
	               |				втЗаказы.Заказ
	               |			ИЗ
	               |				втЗаказы КАК втЗаказы)
	               |	И ЗаказКлиентаТовары.Номенклатура = &Номенклатура
	               |	И ЗаказКлиентаТовары.Характеристика = &Характеристика
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказКлиентаТовары.Ссылка,
	               |	ЗаказКлиентаТовары.Номенклатура,
	               |	ЗаказКлиентаТовары.Характеристика
	               |
	               |ИМЕЮЩИЕ
	               |	СУММА(ЗаказКлиентаТовары.Количество) <> 0";
		Если Не ЗначениеЗаполнено(отборНоменклатура) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказКлиентаТовары.Номенклатура = &Номенклатура", "ИСТИНА");
		КонецЕсли;
		Если Не ЗначениеЗаполнено(отборХарактеристика) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказКлиентаТовары.Характеристика = &Характеристика", "ИСТИНА");
		КонецЕсли;
	Запрос.Выполнить();
	// втЗаказыТовары
	
	// 3. найдем остатки номенклатуры
	//ЗаполнитьСписокНоменклатуры();
	СписокНоменклатуры = Новый СписокЗначений;
	Если флРезервыВКоробах Тогда
		Для Каждого СтрокаКомплектации Из отборВариантКомплектации.Товары Цикл
			СписокНоменклатуры.Добавить(СтрокаКомплектации.Номенклатура);
		КонецЦикла;
	Иначе
		СписокНоменклатуры.Добавить(отборНоменклатура);
	КонецЕсли;
	ТаблицаОстатки = ПолучитьТаблицуОстатков(СписокНоменклатуры, мЗаказКлиента, Истина,
		"Склад, Номенклатура, Характеристика, Назначение", "Доступно");
	УдалитьСтрокиПустоеНазначение(ТаблицаОстатки);
	// ТаблицаОстатки
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	т.Номенклатура КАК Номенклатура,
	               |	т.Характеристика КАК Характеристика,
	               |	т.Назначение КАК Назначение,
	               |	т.Доступно КАК Доступно
	               |ПОМЕСТИТЬ втОстатки
	               |ИЗ
	               |	&ТаблицаОстатки КАК т";
	Запрос.УстановитьПараметр("ТаблицаОстатки", ТаблицаОстатки);
	Запрос.Выполнить();
	// втОстатки
	
	// 4. найдем "не обеспеченные" остатки номенклатуры
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗаказКлиентаТовары.Заказ КАК Заказ,
	               |	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	               |	ЗаказКлиентаТовары.Характеристика КАК Характеристика,
	               |	ЗаказКлиентаТовары.Количество КАК Количество,
	               |	ЕСТЬNULL(втОстатки.Доступно, 0) КАК Доступно
	               |ПОМЕСТИТЬ втНеОбеспеченныеЗаказы
	               |ИЗ
	               |	втЗаказыТовары КАК ЗаказКлиентаТовары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК втОстатки
	               |		ПО ЗаказКлиентаТовары.Заказ = втОстатки.Назначение.Заказ
	               |			И ЗаказКлиентаТовары.Номенклатура = втОстатки.Номенклатура
	               |			И ЗаказКлиентаТовары.Характеристика = втОстатки.Характеристика
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА ЗаказКлиентаТовары.Количество > ЕСТЬNULL(втОстатки.Доступно, 0)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЛОЖЬ
	               |		КОНЕЦ";
	Запрос.Выполнить();
	// втНеОбеспеченныеЗаказы
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	МАКСИМУМ(Назначения.Ссылка) КАК Назначение,
	               |	ЗаказыКлиентов.Заказ КАК Заказ
	               |ИЗ
	               |	Справочник.Назначения КАК Назначения
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЗаказы КАК ЗаказыКлиентов
	               |		ПО (ЗаказыКлиентов.Заказ = Назначения.Заказ)
	               |			И (НЕ ЗаказыКлиентов.Заказ = &ТекущийЗаказ)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказыКлиентов.Заказ";
	Запрос.УстановитьПараметр("ТекущийЗаказ", мЗаказКлиента);
	Запрос.УстановитьПараметр("НомерЗаказа", НомерЗаказа);
	Результат = Запрос.Выполнить();
	СписокНазначений = Результат.Выгрузить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если СтрНайти(Выборка.Заказ.Номер, НомерЗаказа) > 0 Тогда
			Возврат Выборка.Назначение;
		КонецЕсли;
	КонецЦикла;
	Возврат Справочники.Назначения.ПустаяСсылка();
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаВтЗаказыТоварыВКоробах(флПеренестиНовоеНазначение, отборВариантКомплектации)
	Если флПеренестиНовоеНазначение Тогда
		Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		               |	ЗаказКлиента.Ссылка КАК Заказ
		               |ПОМЕСТИТЬ втЗаказы
		               |ИЗ
		               |	Документ.ЗаказКлиента КАК ЗаказКлиента
		               |ГДЕ
		               |	ЗаказКлиента.Проведен
		               |	И НЕ ЗаказКлиента.ПометкаУдаления
		               |	И ЗаказКлиента.Организация = &Организация
		               |	И ЗаказКлиента.Склад = &Склад
		               |	И ЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)";
	Иначе
		Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		               |	ЗаказКлиентаТоварыВКоробах.Ссылка КАК Заказ
		               |ПОМЕСТИТЬ втЗаказы
		               |ИЗ
		               |	Документ.ЗаказКлиента.гф_ТоварыВКоробах КАК ЗаказКлиентаТоварыВКоробах
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
		               |		ПО (ЗаказКлиента.Ссылка = ЗаказКлиентаТоварыВКоробах.Ссылка)
		               |ГДЕ
		               |	ЗаказКлиентаТоварыВКоробах.ВариантКомплектации = &ВариантКомплектации
		               |	И ЗаказКлиента.Проведен
		               |	И НЕ ЗаказКлиента.ПометкаУдаления
		               |	И ЗаказКлиента.Организация = &Организация
		               |	И ЗаказКлиента.Склад = &Склад
		               |	И ЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)";
		Если Не ЗначениеЗаполнено(отборВариантКомплектации) Тогда
			Текст = СтрЗаменить(Текст, "ЗаказКлиентаТоварыВКоробах.ВариантКомплектации = &ВариантКомплектации", "ИСТИНА");
		КонецЕсли;
	КонецЕсли;
	Возврат Текст;
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаВтЗаказыТовары(флПеренестиНовоеНазначение, отборНоменклатура, отборХарактеристика)
	Если флПеренестиНовоеНазначение Тогда
		Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ЗаказКлиента.Ссылка КАК Заказ
		               |ПОМЕСТИТЬ втЗаказы
		               |ИЗ
		               |	Документ.ЗаказКлиента КАК ЗаказКлиента
		               |ГДЕ
		               |	ЗаказКлиента.Проведен
		               |	И НЕ ЗаказКлиента.ПометкаУдаления
		               |	И ЗаказКлиента.Организация = &Организация
		               |	И ЗаказКлиента.Склад = &Склад
		               |	И ЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)";
	Иначе
		Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ЗаказКлиентаТовары.Ссылка КАК Заказ
		               |ПОМЕСТИТЬ втЗаказы
		               |ИЗ
		               |	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
		               |		ПО (ЗаказКлиента.Ссылка = ЗаказКлиентаТовары.Ссылка)
		               |ГДЕ
		               |	ЗаказКлиентаТовары.Номенклатура = &Номенклатура
		               |	И ЗаказКлиентаТовары.Характеристика = &Характеристика
		               |	И ЗаказКлиента.Проведен
		               |	И НЕ ЗаказКлиента.ПометкаУдаления
		               |	И ЗаказКлиента.Организация = &Организация
		               |	И ЗаказКлиента.Склад = &Склад
		               |	И ЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)";
		Если Не ЗначениеЗаполнено(отборНоменклатура) Тогда
			Текст = СтрЗаменить(Текст, "ЗаказКлиентаТовары.Номенклатура = &Номенклатура", "ИСТИНА");
		КонецЕсли;
		Если Не ЗначениеЗаполнено(отборХарактеристика) Тогда
			Текст = СтрЗаменить(Текст, "ЗаказКлиентаТовары.Характеристика = &Характеристика", "ИСТИНА");
		КонецЕсли;
	КонецЕсли;
	Возврат Текст;
КонецФункции

&НаКлиенте
Процедура ВывестиСообщениеНовоеНазначение(НовоеНазначение, ПараметрыОтбора)
	Если ЗначениеЗаполнено(НовоеНазначение) Тогда
		Возврат;
	КонецЕсли;
	Организация = _омОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(мЗаказКлиента,
		"Документ.ЗаказКлиента", "Организация");
	Склад = _омОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(мЗаказКлиента,
		"Документ.ЗаказКлиента", "Склад");
	Если ПараметрыОтбора.ПеренестиНовоеНазначение Тогда
		ТекстСообщения = "Не найден Заказ по Номеру:" + ПараметрыОтбора["НомерЗаказа"]
		+ " Параметры поиска:"
		+ Символы.ПС + " - Организация=" + Организация
		+ Символы.ПС + " - Склад=" + Склад;
	Иначе
		ТекстСообщения = "Не найден Заказ по Номеру:" + ПараметрыОтбора["НомерЗаказа"]
		+ " Параметры поиска:"
		+ Символы.ПС + " - ВариантКомплектации=" + ПараметрыОтбора["ВариантКомплектации"]
		+ Символы.ПС + " - Номенклатура=" + ПараметрыОтбора["Номенклатура"]
		+ Символы.ПС + " - Характеристика=" + ПараметрыОтбора["Характеристика"];
	КонецЕсли;
	СообщитьПользователю(ТекстСообщения);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДоступными(Команда)
	Если флТоварыВКоробах Тогда
		ИмяТЧ = "РезервыВКоробах";
	Иначе
		ИмяТЧ = "Резервы";
	КонецЕсли;
	Для Каждого СтрокаТЗ Из Объект[ИмяТЧ] Цикл
		СтрокаТЗ["Зарезервировать"] = СтрокаТЗ["КоличествоСИзменениями"] - СтрокаТЗ["ТоварВРезерве"];
		Если СтрокаТЗ["Зарезервировать"] > СтрокаТЗ["ДоступноНаСкладе"] Тогда
			СтрокаТЗ["Зарезервировать"] = СтрокаТЗ["ДоступноНаСкладе"];
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗарезервированными(Команда)
	Если флТоварыВКоробах Тогда
		ИмяТЧ = "РезервыВКоробах";
	Иначе
		ИмяТЧ = "Резервы";
	КонецЕсли;
	Для Каждого СтрокаТЗ Из Объект[ИмяТЧ] Цикл
		СтрокаТЗ["СнятьРезерв"] = СтрокаТЗ["ТоварВРезерве"];
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПереносРезерва(Команда)
	
	СтандартнаяОбработка = Ложь;
	Если флТоварыВКоробах Тогда
		ИмяТЧ = "РезервыВКоробах";
	Иначе
		ИмяТЧ = "Резервы";
	КонецЕсли;
	//ДополнительныеПараметры = Новый Структура("ИмяТЧ, ИмяРеквизита, ЗаполнитьПереносРезерва", ИмяТЧ, "НовоеНазначение", Истина);
	ДополнительныеПараметры = Новый Структура("ИмяТЧ, ИмяРеквизита", ИмяТЧ, "НовоеНазначение");
	Оповещение = Новый ОписаниеОповещения("РезервыВыборНазначенияПоКнопкеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("мЗаказКлиента", мЗаказКлиента);
	//ПараметрыФормы.Вставить("ВариантКомплектации", Неопределено);
	//ПараметрыФормы.Вставить("Номенклатура", Неопределено);
	//ПараметрыФормы.Вставить("Характеристика", Неопределено);
	ПараметрыФормы.Вставить("РезервыВКоробах", флТоварыВКоробах);
	ПараметрыФормы.Вставить("ПеренестиНовоеНазначение", Ложь);
	//ПараметрыФормы.Вставить("ЗаполнитьПереносРезерваПоКнопке", Истина);
	АдресХранилища = ПолучитьСтруктуруРезервов();
	ПараметрыФормы.Вставить("СтруктураРезервов", АдресХранилища);
	Если ИмяФормы = "ВнешняяОбработка.гф_КорректировкаЗаказовРезервов.Форма.Форма" Тогда
		ОткрытьФорму("ВнешняяОбработка.гф_КорректировкаЗаказовРезервов.Форма.ФормаВыбораНазначенияПоКнопке", ПараметрыФормы,
			ЭтотОбъект, , , , Оповещение);
	Иначе
		ОткрытьФорму("Обработка.гф_КорректировкаЗаказовРезервов.Форма.ФормаВыбораНазначенияПоКнопке", ПараметрыФормы,
			ЭтотОбъект, , , , Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруРезервов()
	СтруктураРезервов = Новый Структура("Резервы, РезервыВКоробах", Неопределено, Неопределено);
	Если флТоварыВКоробах Тогда
		ТаблицаВК = Новый ТаблицаЗначений;
		ТаблицаВК.Колонки.Добавить("ВариантКомплектации");
		ТаблицаВК.Колонки.Добавить("КоличествоСИзменениями");
		ТаблицаВК.Колонки.Добавить("ТоварВРезерве");
		ТаблицаВК.Колонки.Добавить("ДоступноНаСкладе");
		Для Каждого СтрокаТЧ Из Объект.РезервыВКоробах Цикл
			Если Не ЗначениеЗаполнено(СтрокаТЧ["ТоварВРезерве"]) Тогда
				Продолжить;
			КонецЕсли;
			нс = ТаблицаВК.Добавить();
			ЗаполнитьЗначенияСвойств(нс, СтрокаТЧ);
		КонецЦикла;
		СтруктураРезервов.РезервыВКоробах = ТаблицаВК.Скопировать();
	Иначе
		ТаблицаНоменклатуры = Новый ТаблицаЗначений;
		ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура");
		ТаблицаНоменклатуры.Колонки.Добавить("Характеристика");
		ТаблицаНоменклатуры.Колонки.Добавить("ТоварВРезерве");
		Для Каждого СтрокаТЧ Из Объект.Резервы Цикл
			Если Не ЗначениеЗаполнено(СтрокаТЧ["ТоварВРезерве"]) Тогда
				Продолжить;
			КонецЕсли;
			нс = ТаблицаНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(нс, СтрокаТЧ);
		КонецЦикла;
		СтруктураРезервов.Резервы = ТаблицаНоменклатуры.Скопировать();
	КонецЕсли;

	АдресХранилища = ПоместитьВоВременноеХранилище(СтруктураРезервов);
	
	Возврат АдресХранилища;
КонецФункции

&НаКлиенте
Процедура РезервыВыборНазначенияПоКнопкеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьРезультатНаСервере(Результат, ДополнительныеПараметры);
	
	ИмяТЧ = ДополнительныеПараметры.ИмяТЧ;
	ИмяРеквизита = ДополнительныеПараметры.ИмяРеквизита;
	Если ИмяТЧ = "Резервы"
		И ИмяРеквизита = "ПеренестиНовоеНазначение" Тогда
		Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
			ПересчитатьИтогПоСтрокеРезерва(СтрокаТЧ);
			ПересчитатьСуммуСНДСвСтрокеТаблицы("Резервы", СтрокаТЧ);
		КонецЦикла;
		ПересчитатьСуммуЗаказаПредварительно("Резервы");
		Возврат;
	КонецЕсли;
	Если ИмяТЧ = "РезервыВКоробах"
		И ИмяРеквизита = "ПеренестиНовоеНазначение" Тогда
		Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
			ПересчитатьКоличествоПоСтрокеВКоробах("РезервыВКоробах", "", "", "ПеренестиВДругойЗаказ", СтрокаТЧ);
			ПересчитатьСуммуСНДСвСтрокеТаблицыВКоробах("РезервыВКоробах", СтрокаТЧ);
		КонецЦикла;
		ПересчитатьСуммуЗаказаПредварительно("РезервыВКоробах");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПродолжитьПоУсловию(ИмяТЧ, СтрокаЗаказа, СтрокаТЧ)
	Если ИмяТЧ = "Резервы" Тогда
		Возврат СтрокаЗаказа.Номенклатура <> СтрокаТЧ.Номенклатура
			ИЛИ СтрокаЗаказа.Характеристика <> СтрокаТЧ.Характеристика;
	Иначе
		Возврат СтрокаЗаказа.ВариантКомплектации <> СтрокаТЧ.ВариантКомплектации;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ОбработатьРезультатНаСервере(Результат, ДополнительныеПараметры)
	ИмяТЧ = ДополнительныеПараметры.ИмяТЧ;
	ИмяРеквизита = ДополнительныеПараметры.ИмяРеквизита;
	Если ИмяРеквизита = "НовоеНазначение" Тогда
		ИмяРеквизитаКоличество = "ПеренестиРезерв";
	Иначе
		ИмяРеквизитаКоличество = "ПеренестиВДругойЗаказ";
	КонецЕсли;
	
	СтруктураВозврата = ПолучитьИзВременногоХранилища(Результат);
	
	Если ИмяРеквизита = "ПеренестиНовоеНазначение" Тогда
		Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
			СтрокаТЧ[ИмяРеквизита] = СтруктураВозврата.Назначение;
			СтрокаТЧ[ИмяРеквизитаКоличество] = СтрокаТЧ.ТоварВРезерве;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
		// переносим резерв только в строке где есть резерв
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ТоварВРезерве) Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаЗаказа Из СтруктураВозврата.СтрокиЗаказа Цикл
			Если ПродолжитьПоУсловию(ИмяТЧ, СтрокаЗаказа, СтрокаТЧ) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТЧ[ИмяРеквизита] = СтруктураВозврата.Назначение;
			СтрокаТЧ[ИмяРеквизитаКоличество] = Мин(СтрокаТЧ.ТоварВРезерве, СтрокаЗаказа.НеХватает);
			СтрокаТЧ["ПеренестиРезервМаксимум"] = СтрокаТЧ[ИмяРеквизитаКоличество];
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПереносВДругойЗаказ(Команда)
	
	СтандартнаяОбработка = Ложь;
	Если флТоварыВКоробах Тогда
		ИмяТЧ = "РезервыВКоробах";
	Иначе
		ИмяТЧ = "Резервы";
	КонецЕсли;
	//ДополнительныеПараметры = Новый Структура("ИмяТЧ, ИмяРеквизита, ЗаполнитьПереносРезерва", ИмяТЧ, "НовоеНазначение", Истина);
	ДополнительныеПараметры = Новый Структура("ИмяТЧ, ИмяРеквизита", ИмяТЧ, "ПеренестиНовоеНазначение");
	Оповещение = Новый ОписаниеОповещения("РезервыВыборНазначенияПоКнопкеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("мЗаказКлиента", мЗаказКлиента);
	//ПараметрыФормы.Вставить("ВариантКомплектации", Неопределено);
	//ПараметрыФормы.Вставить("Номенклатура", Неопределено);
	//ПараметрыФормы.Вставить("Характеристика", Неопределено);
	ПараметрыФормы.Вставить("РезервыВКоробах", флТоварыВКоробах);
	ПараметрыФормы.Вставить("ПеренестиНовоеНазначение", Истина);
	//ПараметрыФормы.Вставить("ЗаполнитьПереносРезерваПоКнопке", Истина);
	АдресХранилища = ПолучитьСтруктуруРезервов();
	ПараметрыФормы.Вставить("СтруктураРезервов", АдресХранилища);
	Если ИмяФормы = "ВнешняяОбработка.гф_КорректировкаЗаказовРезервов.Форма.Форма" Тогда
		ОткрытьФорму("ВнешняяОбработка.гф_КорректировкаЗаказовРезервов.Форма.ФормаВыбораНазначенияПоКнопке", ПараметрыФормы,
			ЭтотОбъект, , , , Оповещение);
	Иначе
		ОткрытьФорму("Обработка.гф_КорректировкаЗаказовРезервов.Форма.ФормаВыбораНазначенияПоКнопке", ПараметрыФормы,
			ЭтотОбъект, , , , Оповещение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
