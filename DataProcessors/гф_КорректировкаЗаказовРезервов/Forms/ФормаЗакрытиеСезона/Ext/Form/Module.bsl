
#Область ОбработчикиСобытийФормы 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПричиныОтменыЗаказовКлиентов.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ПричиныОтменыЗаказовКлиентов КАК ПричиныОтменыЗаказовКлиентов
	               |ГДЕ
	               |	НЕ ПричиныОтменыЗаказовКлиентов.ПометкаУдаления
	               |	И ПричиныОтменыЗаказовКлиентов.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Наименование", "Закрытие сезона");
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		ПричинаОтмены = Выборка.Ссылка;
	КонецЕсли;
	ЗаполнитьТаблицаЗаказы();
	АвтоЗаголовок = Ложь;
	Заголовок = "Закрытие сезона";
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьТаблицаЗаказы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	               |	ЛОЖЬ КАК Пометка,
	               |	ЗаказКлиентаТовары.Ссылка КАК ЗаказКлиента,
	               |	ЗаказКлиента.Статус КАК Статус,
	               |	ЗаказКлиента.Проведен КАК Проведен
	               |ИЗ
	               |	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
	               |		ПО (ЗаказКлиента.Ссылка = ЗаказКлиентаТовары.Ссылка)
	               |ГДЕ
	               |	НЕ ЗаказКлиентаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	               |	И ЗаказКлиента.Проведен
	               |	И ЗаказКлиента.Организация = &Организация
	               |	И ЗаказКлиента.Склад = &Склад
	               |	И ЗаказКлиента.Контрагент = &Контрагент
	               |	И ЗаказКлиента.Договор.гф_Сезон = &гф_Сезон";
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	Запрос.УстановитьПараметр("Склад", Параметры.Склад);
	Запрос.УстановитьПараметр("Контрагент", Параметры.Контрагент);
	Запрос.УстановитьПараметр("гф_Сезон", Параметры.Сезон);
	Если Не ЗначениеЗаполнено(Параметры.Склад) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказКлиента.Склад = &Склад", "ИСТИНА");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Параметры.Контрагент) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказКлиента.Контрагент = &Контрагент", "ИСТИНА");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Параметры.Сезон) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказКлиента.Договор.гф_Сезон = &гф_Сезон", "ИСТИНА");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	ЗаказыКлиентов.Загрузить(Результат.Выгрузить());
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	Для Каждого СтрокаТЧ Из ЗаказыКлиентов Цикл
		СтрокаТЧ["Пометка"] = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(Команда)
	Для Каждого СтрокаТЧ Из ЗаказыКлиентов Цикл
		СтрокаТЧ["Пометка"] = Истина;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗакрытьЗаказ(ЗаказКлиента)
	ДокОбъект = ЗаказКлиента.ПолучитьОбъект();
	ДокОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт;
	Для Каждого СтрокаТЧ Из ДокОбъект.Товары Цикл
		Если СтрокаТЧ["ВариантОбеспечения"] = Перечисления.ВариантыОбеспечения.Отгрузить Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТЧ["Отменено"] = Истина;
		СтрокаТЧ["ПричинаОтмены"] = ПричинаОтмены;
	КонецЦикла;
	ЗаписатьДокументВПопытке(ДокОбъект, "Проведен:", ТЗПротокол, "Изменен и проведен");
КонецПроцедуры

&НаСервере
Процедура СнятьРезервыПоЗаказу(ЗаказКлиента)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура
	               |ИЗ
	               |	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	               |ГДЕ
	               |	ЗаказКлиентаТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ЗаказКлиента);
	РезультатНоменклатура = Запрос.Выполнить();
	ТаблицаНоменклатуры = РезультатНоменклатура.Выгрузить();
		
	СписокНоменклатуры = ПолучитьСписокНоменклатуры(ТаблицаНоменклатуры);
	ТаблицаОстатки = ПолучитьТаблицуОстатков(СписокНоменклатуры, ЗаказКлиента, Истина,
				"Склад, Номенклатура, Характеристика, ЗаказНаОтгрузку", "Доступно");
	ОтобратьОстаткиПоЗаказу(ТаблицаОстатки, ЗаказКлиента);
	ТаблицаОстатки.Свернуть("Склад, Номенклатура, Характеристика", "Доступно");
	
	Назначение = ПолучитьНазначение(ЗаказКлиента);
	Если Не ЗначениеЗаполнено(Назначение) Тогда
		// здесь не заполнено Назначение - документ НЕ сохраняем
		ТекстСообщения = "Не удалось получить Назначение для Заказа:" + ЗаказКлиента;
		СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	СоздатьДокСнятьРезерв(ЗаказКлиента, Назначение, ТаблицаОстатки);
	
КонецПроцедуры

&НаСервере
Процедура ОсвободитьУпаковочныеЛисты(ЗаказКлиента)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	               |	УпаковочныйЛист.Ссылка КАК УпаковочныйЛист
	               |ИЗ
	               |	Документ.УпаковочныйЛист КАК УпаковочныйЛист
	               |ГДЕ
	               |	УпаковочныйЛист.гф_Заказ = &гф_Заказ
	               |	И УпаковочныйЛист.Проведен = &Проведен";
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ПустойЗаказ = Документы.ЗаказКлиента.ПустаяСсылка();
	ПустоеНазначение = Справочники.Назначения.ПустаяСсылка();
	Пока Выборка.Следующий() Цикл
		ДокУпаковочныйЛист = ВнестиИзмененияВУпаковочныйЛист(Выборка.УпаковочныйЛист, ПустойЗаказ, ПустоеНазначение);
		ЗаписатьДокументВПопытке(ДокУпаковочныйЛист, "Проведен:", ТЗПротокол, "Изменен и проведен");
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокНоменклатуры(СтрокиНоменклатуры)
	СписокНоменклатуры = Новый Массив;
	Для Каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
		Если СписокНоменклатуры.Найти(СтрокаНоменклатуры["Номенклатура"]) = Неопределено Тогда
			СписокНоменклатуры.Добавить(СтрокаНоменклатуры["Номенклатура"]);
		КонецЕсли;
	КонецЦикла;
	Возврат СписокНоменклатуры;
КонецФункции

&НаСервереБезКонтекста
Процедура ОтобратьОстаткиПоЗаказу(ТаблицаОстатки, ЗаказКлиента)
	МассивУдалитьСтроки = Новый Массив;
	Для Каждого СтрокаТЗ Из ТаблицаОстатки Цикл
		Если СтрокаТЗ["ЗаказНаОтгрузку"] <> ЗаказКлиента Тогда
			МассивУдалитьСтроки.Добавить(СтрокаТЗ);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдалитьСтроку Из МассивУдалитьСтроки Цикл
		ТаблицаОстатки.Удалить(УдалитьСтроку);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗакрытьСезонНаСервере()
	флОшибка = Ложь;
	Для Каждого СтрокаТЗ Из ЗаказыКлиентов Цикл
		Если Не СтрокаТЗ["Пометка"] Тогда
			Продолжить;
		КонецЕсли;
		СнятьРезервыПоЗаказу(СтрокаТЗ["ЗаказКлиента"]);
	КонецЦикла;
	Если флОшибка Тогда
		Возврат;
	КонецЕсли;
	Для Каждого СтрокаТЗ Из ЗаказыКлиентов Цикл
		Если Не СтрокаТЗ["Пометка"] Тогда
			Продолжить;
		КонецЕсли;
		ЗакрытьЗаказ(СтрокаТЗ["ЗаказКлиента"]);
		ОсвободитьУпаковочныеЛисты(СтрокаТЗ["ЗаказКлиента"]);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСезон(Команда)
	Если Не ЗначениеЗаполнено(ПричинаОтмены) Тогда
		ТекстСообщения = "Укажите Причину отмены!";
		СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	ТЗПротокол.Очистить();
	ОчиститьСообщения();
	ЗакрытьСезонНаСервере();
	Если ТЗПротокол.Количество() > 0 Тогда
		ТабДок = ПодготовитьТабДокНаСервере();
		ТабДок.Показать("Протокол выполнения процедуры Закрытия сезона");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПодготовитьТабДокНаСервере()
	ТабПротокол = Новый ТабличныйДокумент;
	
	ТабПротокол.АвтоМасштаб = Истина;
	ТабПротокол.ОтображатьЗаголовки = Ложь;
	ТабПротокол.ОтображатьСетку = Ложь;
	ТабПротокол.ТолькоПросмотр = Истина;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Макет = ОбработкаОбъект.ПолучитьМакет("Протокол");
	
	ОбластьШапка	= Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока	= Макет.ПолучитьОбласть("Строка");
	
	ТабПротокол.Вывести(ОбластьШапка);
	Для Каждого СтрокаПротокола Из ТЗПротокол Цикл
		ОбластьСтрока.Параметры.Заполнить(СтрокаПротокола);
		ТабПротокол.Вывести(ОбластьСтрока);
	КонецЦикла;
		
	Возврат ТабПротокол;
КонецФункции

&НаСервере
Процедура ЗаписатьДокументВПопытке(ДокОбъект, ТекстСообщения, ТЗПротокол, Комментарий)
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ТекстСообщения = ТекстСообщения + ДокОбъект.Ссылка;
		СообщитьПользователю(ТекстСообщения);
		СтрокаПротокола = ТЗПротокол.Добавить();
		СтрокаПротокола.Документ = ДокОбъект.Ссылка;
		СтрокаПротокола.Комментарий = Комментарий;
	Исключение
		ТекстСообщения = "Ошибка при записи:" + ОписаниеОшибки();
		СообщитьПользователю(ТекстСообщения);
		флОшибка = Истина;
	КонецПопытки;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СообщитьПользователю(Текст)
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = Текст;
	Сообщение.Сообщить();
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьТаблицуОстатков(СписокНоменклатуры, мЗаказКлиента, парамОбособленныеТовары, ПоляГруппировки,
			ПоляСуммирования)
	
	СхемаКомпоновкиДанных = Отчеты.ОстаткиИДоступностьТоваров.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	НастройкиОтчета = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтчета);
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	
    ГруппировкаДетальныеПоля = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
    ГруппировкаДетальныеПоля.Использование = Истина;
    ГруппировкаДетальныеПоля.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	ПолеПараметрыДанных	= Новый ПолеКомпоновкиДанных("ПараметрыДанных");
	ПолеСистемныеПоля	= Новый ПолеКомпоновкиДанных("СистемныеПоля"); 
    Для Каждого ПолеВыбора Из КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		ВыбранноеПоле = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Использование	= Не (ПолеВыбора.Поле = ПолеПараметрыДанных ИЛИ ПолеВыбора.Поле = ПолеСистемныеПоля);
		ВыбранноеПоле.Поле			= ПолеВыбора.Поле;
	КонецЦикла;	 
	
	ПараметрОбособленныеТовары = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(
		"ПоказатьОбособленныеТовары");
	Если ПараметрОбособленныеТовары <> Неопределено Тогда
		ПараметрОбособленныеТовары.Значение = парамОбособленныеТовары;
	КонецЕсли;
	
	ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Номенклатура");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ПравоеЗначение	= СписокНоменклатуры;
	
	ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Склад");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ПравоеЗначение	= мЗаказКлиента.Склад;
	
	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);

	ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.Основной.Запрос;

	ТекстЗапросаВесУпаковки = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
		"Таблица.Номенклатура.ЕдиницаИзмерения", "Таблица.Номенклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаВесНоменклатуры", ТекстЗапросаВесУпаковки);
		
	ТекстЗапросаОбъемУпаковки = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки(
		"Таблица.Номенклатура.ЕдиницаИзмерения", "Таблица.Номенклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаОбъемНоменклатуры", ТекстЗапросаОбъемУпаковки);

	СхемаКомпоновкиДанных.НаборыДанных.Основной.Запрос = ТекстЗапроса;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();    
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	ТипГенератора = Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений");
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, , , ТипГенератора);
    
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
    
    Таблица = Новый ТаблицаЗначений;
    
    ПроцессорВыводаРезультатаКомпоновкиДанных = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ПроцессорВыводаРезультатаКомпоновкиДанных.УстановитьОбъект(Таблица);
    ПроцессорВыводаРезультатаКомпоновкиДанных.Вывести(ПроцессорКомпоновкиДанных);
	
	МассивУдалитьСтроки = Новый Массив;
	Для Каждого СтрокаТЗ Из Таблица Цикл
		Если СтрокаТЗ["ТипЗаписи"] <> "Сейчас" Тогда
			МассивУдалитьСтроки.Добавить(СтрокаТЗ);
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдалитьСтроку Из МассивУдалитьСтроки Цикл
		Таблица.Удалить(УдалитьСтроку);
	КонецЦикла;
	ТаблицаОстатки = Таблица.Скопировать();
	ТаблицаОстатки.Свернуть(ПоляГруппировки, ПоляСуммирования);
	
	Возврат ТаблицаОстатки;
	
КонецФункции

&НаСервере
Процедура СоздатьДокСнятьРезерв(мЗаказКлиента, мНазначение, ТаблицаОстатки)
	ДокСнятиеРезерва = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
	ДокСнятиеРезерва.Автор = ПараметрыСеанса.ТекущийПользователь;
	ДокСнятиеРезерва.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ДокСнятиеРезерва.Организация = мЗаказКлиента.Организация;
	ДокСнятиеРезерва.Дата = ТекущаяДатаСеанса();
	ДокСнятиеРезерва.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв;
	ДокСнятиеРезерва.Комментарий = "Создан автоматически обработкой Закрытие сезона"
	+ ТекущаяДатаСеанса();
	ДокСнятиеРезерва.Назначение = мНазначение;
	Если Не ЗначениеЗаполнено(ДокСнятиеРезерва.Назначение) Тогда
		// здесь не заполнено Назначение - документ НЕ сохраняем
		ДокСнятиеРезерва = Неопределено;
		ТекстСообщения = "Не удалось получить Назначение для Заказа:" + мЗаказКлиента;
		СообщитьПользователю(ТекстСообщения);
	Иначе
		// здесь заполняем тч документа
		Для Каждого СтрокаТЧ Из ТаблицаОстатки Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ["Доступно"]) Тогда
				нс = ДокСнятиеРезерва.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(нс, СтрокаТЧ);
				нс.Количество = СтрокаТЧ["Доступно"];
				нс.КоличествоУпаковок = СтрокаТЧ["Доступно"];
				нс.ИсходноеНазначение = ДокСнятиеРезерва.Назначение;
				нс.ИсходныйЗаказ = мЗаказКлиента;
				нс.ИсходноеНазначениеДвиженияПоСкладскимРегистрам = Истина;
				// Аналитика учета заполняется при проведении документа автоматически...
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ЗаписатьДокументВПопытке(ДокСнятиеРезерва, "Проведен:", ТЗПротокол, "Создан и проведен");
КонецПроцедуры

&НаСервере
Функция ПолучитьНазначение(Заказ)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Назначения.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Назначения КАК Назначения
	               |ГДЕ
	               |	Назначения.Заказ = &Заказ
	               |	И НЕ Назначения.ПометкаУдаления";
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Назначение = Справочники.Назначения.СоздатьЭлемент();
		Назначение.Заказ = Заказ;
		Назначение.ТипНазначения = Перечисления.ТипыНазначений.Собственное;
		Назначение.ВидДеятельностиНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
		Назначение.ДвиженияПоСкладскимРегистрам = Истина;
		Назначение.Записать();
		ТекстСообщения = "Создан Назначение:" + Назначение.Ссылка + " для Заказа" + Заказ;
		СообщитьПользователю(ТекстСообщения);
		Возврат Назначение.Ссылка;
	Иначе
		Выборка = Результат.Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Если Выборка.Следующий() Тогда
				Возврат Выборка.Ссылка;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ВнестиИзмененияВУпаковочныйЛист(УпаковочныйЛист, Заказ, Назначение)
	ДокУпаковочныйЛист = УпаковочныйЛист.ПолучитьОбъект();
	ДокУпаковочныйЛист.гф_Заказ = Заказ;
	Для Каждого СтрокаТЧ Из ДокУпаковочныйЛист.Товары Цикл
		СтрокаТЧ.Назначение = Назначение;
	КонецЦикла;
	Возврат ДокУпаковочныйЛист;
КонецФункции
				
#КонецОбласти
