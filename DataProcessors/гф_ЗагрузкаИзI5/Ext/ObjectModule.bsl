#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем СозданныеДокументы; // Массив создаваемых документов гф_ДанныеЗагрузки
Перем ЗагружаемыеПоля; // ТЗ с полученными данными из справочника гф_НастройкаЗагружаемыхДанных

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// #wortmann { 
// Экспортная функция по загрузке полученных файлов 
// Галфинд_Домнышева 2022/09/19
//
// Параметры:
//  МассивЗагружаемыхФайлов - <Массив> - Массив полученных файлов из I5.
//
// Возвращаемое значение:
// <Массив> - Массив успешно загруженных файлов для их дальнейшей архивации.
//
Функция ВыполнитьОбменДанными(МассивЗагружаемыхФайлов) Экспорт
	
	СозданныеДокументы = Новый Массив;
	МассивФайловДляАрхивации = Новый Массив;

	Если МассивЗагружаемыхФайлов.Количество() > 0 Тогда
		Для каждого ФайлОбмена Из МассивЗагружаемыхФайлов Цикл
			Сообщение = Строка(ТекущаяДатаСеанса()) + " Начало загрузки файла " + ФайлОбмена.ИмяФайла;
			ЗагрузитьФайл(ФайлОбмена);
		КонецЦикла;
	КонецЕсли;

	// Доработка для последовательной загрузки (проведения интерфейсов "по ранжиру") включая ранее не проведенные документы!
	УпорядочитьПоИнтерфейсам(СозданныеДокументы);
	
	ИнтерфейсыНеПрикат = Новый Массив;
	ИнтерфейсыНеПрикат.Добавить(Перечисления.гф_Интерфейсы.ORDRSP);
	ИнтерфейсыНеПрикат.Добавить(Перечисления.гф_Интерфейсы.INVOICE);
	ИнтерфейсыНеПрикат.Добавить(Перечисления.гф_Интерфейсы.IС_INVOICE);
	ИнтерфейсыНеПрикат.Добавить(Перечисления.гф_Интерфейсы.SHIPPING_LIST);
	ИнтерфейсыНеПрикат.Добавить(Перечисления.гф_Интерфейсы.PRICAT_SORT);
	
	Для Каждого СозданныйДокумент Из СозданныеДокументы Цикл
		
		Попытка
			ДокументДанные = СозданныйДокумент.ПолучитьОбъект();
			
			Если ДокументДанные.Интерфейс = Перечисления.гф_Интерфейсы.PRICAT Тогда
				ДокументДанные.СоздатьНоменклатуру();
				Если ДокументДанные.СтатусДокумента = Перечисления.гф_СтатусыДокументовЗагрузки.НоменклатураЗагружена Тогда
					ДокументДанные.СоздатьНоменклатуру(, Ложь, Истина);
				КонецЕсли;
				ДокументДанные.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				МассивФайловДляАрхивации.Добавить(ДокументДанные.ПолноеИмяФайла);
			ИначеЕсли ИнтерфейсыНеПрикат.Найти(ДокументДанные.Интерфейс) <> Неопределено Тогда			
				ДокументДанные.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				МассивФайловДляАрхивации.Добавить(ДокументДанные.ПолноеИмяФайла);
			КонецЕсли;
			
		Исключение	
			СообщениеОбОшибке = "Произошли ошибки при проведении документа " + СозданныйДокумент + ".|" 
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()); 
			ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);
		КонецПопытки;
		
	КонецЦикла;
	Возврат МассивФайловДляАрхивации; 
	
КонецФункции// } #wortmann

// #wortmann { 
// Процедура создает документ гф_ДанныеЗагрузки и РС гф_СтрокиДокументаДанныеЗагрузки  
// Галфинд_Домнышева 2022/09/19
//
// Параметры:
//  ДанныеДляЗагрузки - <Структура> - данные файла из I5
Процедура ЗагрузитьФайл(ДанныеДляЗагрузки)
	
	ДокументДанные = Документы.гф_ДанныеЗагрузки.СоздатьДокумент(); 
		
	ДокументДанные.СтатусДокумента = Перечисления.гф_СтатусыДокументовЗагрузки.НеЗагружено;
	ДокументДанные.Дата = ТекущаяДата();
	ДокументДанные.ИмяФайла = ДанныеДляЗагрузки.ИмяФайла; 
	ДокументДанные.ПолноеИмяФайла = ДанныеДляЗагрузки.ПолноеИмяФайла;
	
	ДокументДанные.Записать(РежимЗаписиДокумента.Запись);
		
	НаборЗаписей = РегистрыСведений.гф_СтрокиДокументаДанныеЗагрузки.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Документ.Установить(ДокументДанные.Ссылка);
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеДляЗагрузки.Адрес);
	ИмяВременногоФайлаXML = ПолучитьИмяВременногоФайла("xml"); 
	ДвоичныеДанные.Записать(ИмяВременногоФайлаXML);	
	
	ЧтениеXML = Новый ЧтениеXML; 
	ЧтениеXML.ОткрытьФайл(ИмяВременногоФайлаXML);
	
    // Заполнение полей строк документа (регистр сведений) информацией из информацией из XML
	
	НомерСтроки = 0;
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Если ВРег(СокрЛП(ЧтениеXML.Имя)) = "PRICAT" Тогда
				ДокументДанные.Интерфейс = Перечисления.гф_Интерфейсы.PRICAT;
			ИначеЕсли ВРег(СокрЛП(ЧтениеXML.Имя)) = "ORDRSP" Тогда
				ДокументДанные.Интерфейс = Перечисления.гф_Интерфейсы.ORDRSP;
			ИначеЕсли ВРег(СокрЛП(ЧтениеXML.Имя)) = "INVOIC" Тогда
				ДокументДанные.Интерфейс = Перечисления.гф_Интерфейсы.INVOICE;
			ИначеЕсли ВРег(СокрЛП(ЧтениеXML.Имя)) = "SHIPPING_LIST" Тогда
				ДокументДанные.Интерфейс = Перечисления.гф_Интерфейсы.SHIPPING_LIST;
			Иначе
				Сообщение = Строка(ТекущаяДата()) + " Не удалось определить тип интерфейса файла " + ДанныеДляЗагрузки.ИмяФайла
				+ ". Настройки обмена в табличную часть не загружены!";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(ДокументДанные.Интерфейс) Тогда 
				ЗагружаемыеПоля = ПолучитьЗагружаемыеПоля(ДокументДанные.Интерфейс);
			КонецЕсли;
     
 			ДокументДанные.Записать(РежимЗаписиДокумента.Запись);
						
			НомерСтроки = НомерСтроки + 1;
			НоваяСтрока = НаборЗаписей.Добавить();
			НоваяСтрока.Тэг = ЧтениеXML.Имя;
			НоваяСтрока.ПорядковыйНомерСтроки = НомерСтроки;
			НоваяСтрока.Документ = ДокументДанные.Ссылка;
			
			ЗагрузитьВетку(ЧтениеXML, НоваяСтрока, ДокументДанные, НаборЗаписей, НомерСтроки);
			
		КонецЕсли;
		
	КонецЦикла;

	Попытка
		НаборЗаписей.Записать();
	Исключение
		
	  Сообщение = Строка(ТекущаяДатаСеанса()) + " Не удалось загрузить файл " + ДанныеДляЗагрузки.ИмяФайла
	  				+ " - ошибка записи в регистр сведений ""СтрокиДокументаДанныеЗагрузки""!";
	  ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);

		Возврат;
		
	КонецПопытки;
	
	// Уточним интерфейс для Инвойса (Это Проформа Инвойс или Интеркомпани Инвойс). 
	// Для этого попробуем найти строчку с Document_type = "380" (Интеркомпани Инвойс)
	Если ДокументДанные.Интерфейс = Перечисления.гф_Интерфейсы.INVOICE Тогда
		НаборЗаписей.Отбор.Тэг.Использование = Истина;
		НаборЗаписей.Отбор.Документ.Использование = Истина;
		НаборЗаписей.Отбор.Тэг.Значение = "Document_type";
		НаборЗаписей.Отбор.Документ.Значение = ДокументДанные.Ссылка;
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() > 0 И НаборЗаписей[0].Значение = "380" ИЛИ НаборЗаписей[0].Значение = "325" Тогда 
			НаборЗаписей.Отбор.Тэг.Использование = Истина;
			НаборЗаписей.Отбор.Документ.Использование = Истина;
			НаборЗаписей.Отбор.Тэг.Значение = "GLN_customer";
			НаборЗаписей.Отбор.Документ.Значение = ДокументДанные.Ссылка;
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() > 0 Тогда
				ОрганизацияДляОбмена = Константы.ОрганизацияДляОбменаДанными.Получить();
				
				Если ОрганизацияДляОбмена.RC_GLN_номер = СокрЛП(НаборЗаписей[0].Значение) Тогда
					ДокументДанные.Интерфейс = Перечисления.гф_Интерфейсы.IС_INVOICE;
				Иначе	
					ДокументДанные.Интерфейс = Перечисления.гф_Интерфейсы.INVOICE;
				КонецЕсли;	
			КонецЕсли;
		Иначе	
			Если НЕ (НаборЗаписей[0].Значение = "380" ИЛИ НаборЗаписей[0].Значение = "325") Тогда
				Сообщение = Строка(ТекущаяДатаСеанса()) + " Не удалось загрузить файл " + ДанныеДляЗагрузки.ИмяФайла
							+ " - Document_type для инвойса отличен от ""325"" и ""380"" " + СокрЛП(ДокументДанные.Ссылка);
				Возврат;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	// Заполнение полей строк документа (регистр сведений) информацией из настроек обмена
		
	ДокументДанные.СтатусДокумента = Перечисления.гф_СтатусыДокументовЗагрузки.Загружено;
	Попытка
		ДокументДанные.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		Возврат;
	КонецПопытки;
	СозданныеДокументы.Добавить(ДокументДанные.Ссылка);       	
	
КонецПроцедуры// } #wortmann

// #wortmann { 
// Функция получает ТЗ с данными по загружаемым полям  
// Галфинд_Домнышева 2022/10/17
//
// Параметры:
//  Интерфейс - <ПеречислениеСсылка.гф_Интерфейсы> - интерфейс создаваемого документа 
//
// Возвращаемое значение:
//  <ТаблицаЗначений> - ТЗ с полученными данными из справочника гф_НастройкаЗагружаемыхДанных
Функция ПолучитьЗагружаемыеПоля(Интерфейс)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	НастройкаЗагружаемыхДанных.СтатусПоля,
		|	НастройкаЗагружаемыхДанных.Ссылка,
		|	НастройкаЗагружаемыхДанных.Наименование
		|ИЗ
		|	Справочник.гф_НастройкаЗагружаемыхДанных КАК НастройкаЗагружаемыхДанных
		|ГДЕ
		|	НастройкаЗагружаемыхДанных.Интерфейс = &Интерфейс";
	
	Запрос.УстановитьПараметр("Интерфейс", Интерфейс);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции// } #wortmann

// #wortmann { 
// Процедура читает ветку XML файла и заполняет РС гф_СтрокиДокументаДанныеЗагрузки  
// Галфинд_Домнышева 2022/09/19
//
// Параметры:
//  Файл - <ЧтениеXML> - файл из I5 из Временного Хранилища 
//  Ветка - <РегистрСведенийЗапись.гф_СтрокиДокументаДанныеЗагрузки> - текущая строка (запись) в РС
//  ДокОбъект - <ДокументОбъект.гф_ДанныеЗагрузки> - создаваемый документ гф_ДанныеЗагрузки
//  НаборЗаписей - <РегистрСведенийНаборЗаписей.гф_СтрокиДокументаДанныеЗагрузки> 
//  НомерСтроки - <Число> - номер текущей строки.
Процедура ЗагрузитьВетку(Файл, Ветка, ДокОбъект, НаборЗаписей, НомерСтроки)
	Тэг = Файл.Имя;
	Родитель = Ветка;
	Пока Файл.Прочитать() Цикл
		Если Файл.ТипУзла = ТипУзлаXML.КонецЭлемента И Файл.Имя = Тэг Тогда
			Прервать;
		КонецЕсли;
		Если Файл.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			НомерСтроки = НомерСтроки + 1;
			НоваяСтрока = НаборЗаписей.Добавить();
			НоваяСтрока.Тэг = Файл.Имя;
			НоваяСтрока.ПорядковыйНомерСтроки = НомерСтроки;
			НоваяСтрока.НомерСтрокиРодителя = Родитель.ПорядковыйНомерСтроки;
			НоваяСтрока.Документ = ДокОбъект.Ссылка;
			Если ЗначениеЗаполнено(ЗагружаемыеПоля) Тогда
				НайденноеЗначение = ЗагружаемыеПоля.Найти(НоваяСтрока.Тэг, "Наименование");
				Если НайденноеЗначение <> Неопределено Тогда
					НоваяСтрока.ПолеЗагрузки = НайденноеЗначение.Ссылка;
					НоваяСтрока.СтатусПоля = НайденноеЗначение.СтатусПоля;
				КонецЕсли;
			КонецЕсли;
			ЗагрузитьВетку(Файл, НоваяСтрока, ДокОбъект, НаборЗаписей, НомерСтроки);
		Иначе
			Ветка.Значение = Файл.Значение;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры// } #wortmann

// #wortmann { 
// Доработка для последовательной загрузки (проведения интерфейсов "по ранжиру") 
// Галфинд_Домнышева 2022/09/19
//
// Параметры:
//  МассивДокументовДЗ - <Массив> - массив из созданных документов ДокументОбъект.гф_ДанныеЗагрузки. 
Процедура УпорядочитьПоИнтерфейсам(МассивДокументовДЗ) 
	
	Если НЕ ТипЗнч(МассивДокументовДЗ) = Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	// Соответствие определяет мэппинг интерфейсов. Интерфейс для ранжировки последовательности проведения
	// (Перечисление.RC_Интерфейс) - Ключ и значения реквизита Интерфейс у документов ДанныеЗагрузки 
	// (Перечисление.Интерфейсы)  - Значение
	Интерфейсы	= Новый Соответствие();	
	Интерфейсы.Вставить("PRICAT", "PRICAT");
	Интерфейсы.Вставить("PRICAT_SORT", "PRICAT");
	Интерфейсы.Вставить("ORDRSP", "ORDRSP");
	Интерфейсы.Вставить("INVOICE", "INVOIC");
	Интерфейсы.Вставить("IC_INVOICE", "IС_INVOIC");
	Интерфейсы.Вставить("SHIPPING_LIST", "SHIPPING_LIST");
	
	// Сортировка массива документов по ранжиру интерфейсов
	МассивДокументовДЗ = ОтсортироватьМассивПоРанжиру(МассивДокументовДЗ, Интерфейсы);

КонецПроцедуры// } #wortmann	

// #wortmann { 
// Функция сортирует документы в массиве по "по ранжиру" интерфейсов 
// Галфинд_Домнышева 2022/09/19
//
// Параметры:
//  МассивДокументовДЗ - <Массив> - массив из созданных документов ДокументОбъект.гф_ДанныеЗагрузки
//  Интерфейсы - <Соответствие> - из названий интерфейсов.
//
// Возвращаемое значение:
// 	МассивДокументовПоРанжиру - <Массив> - массив из отсортированных документов ДокументОбъект.гф_ДанныеЗагрузки.
Функция ОтсортироватьМассивПоРанжиру(МассивДокументовДЗ, Интерфейсы) 
	
	МассивДокументовПоРанжиру	= Новый Массив;
	
	// Запрос для получения последовательности Интерфейсов для ранжирования документов
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	гф_ПоследовательностьПроведения.Интерфейс КАК Интерфейс
		|ИЗ
		|	Справочник.гф_ПоследовательностьПроведения КАК гф_ПоследовательностьПроведения
		|
		|УПОРЯДОЧИТЬ ПО
		|	гф_ПоследовательностьПроведения.ПорядокОбработки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	// Массив документов ранжируется в порядке заданном выборкой
	Пока Выборка.Следующий() Цикл
		
		ТекущийИнтерфейсДокументаПоПриоритету	=  
				ПолучитьЗначениеПеречисленияИнтерфейсыПоИмени(Интерфейсы.Получить(СокрЛП(Выборка.Интерфейс)));
		// На всякий случай, если окажется что для такого интерфейса не было задано соответствие или не нашлось 
		// значение перечисления.
		Если ТекущийИнтерфейсДокументаПоПриоритету	= Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.Интерфейс = Перечисления.гф_Интерфейсы.PRICAT 
			ИЛИ Выборка.Интерфейс = Перечисления.гф_Интерфейсы.PRICAT_SORT Тогда
		   	МассивДокументовPRICAT = ОтобратьДокументыПоИнтерфейсу(МассивДокументовДЗ, ТекущийИнтерфейсДокументаПоПриоритету);
		КонецЕсли;
		
		// Отбор документов для Pricat_Sort и Pricat осуществляется особым образом
		Если Выборка.Интерфейс = Перечисления.гф_Интерфейсы.PRICAT Тогда
			МассивДокументовПоТекущемуИнтерфейсу	= ОтобратьPricat(МассивДокументовPRICAT);
		ИначеЕсли Выборка.Интерфейс = Перечисления.гф_Интерфейсы.PRICAT_SORT Тогда
			МассивДокументовПоТекущемуИнтерфейсу	= ОтобратьPricat_Sort(МассивДокументовPRICAT);
		Иначе		// Все остальные кроме  PRICAT'ов
			МассивДокументовПоТекущемуИнтерфейсу	= 
							ОтобратьДокументыПоИнтерфейсу(МассивДокументовДЗ, ТекущийИнтерфейсДокументаПоПриоритету);
		КонецЕсли;
				
		Для каждого ДокументМассива Из МассивДокументовПоТекущемуИнтерфейсу Цикл
			МассивДокументовПоРанжиру.Добавить(ДокументМассива);
		КонецЦикла;
	 
	КонецЦикла;
	
	Возврат МассивДокументовПоРанжиру;

КонецФункции// } #wortmann

// #wortmann { 
// Получает значение перечисления по его Наименованию 
// Галфинд_Домнышева 2022/09/19
//
// Параметры:
//  ИмяЗначения - <Строка> - наименование интерфейса.
//
// Возвращаемое значение:
// 	<ПеречислениеСсылка.гф_Интерфейсы> - если не найдено значение по Наименованию, то ПустаяСсылка()
//										иначе соответствующее значение.
Функция ПолучитьЗначениеПеречисленияИнтерфейсыПоИмени(ИмяЗначения)
	
	Результат =  Перечисления.гф_Интерфейсы.ПустаяСсылка();
	Для каждого ПеречислениеЗначение Из  Перечисления.гф_Интерфейсы Цикл
		Если СокрЛП(ПеречислениеЗначение) = ИмяЗначения Тогда
			Результат	= ПеречислениеЗначение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат	Результат;
	
КонецФункции// } #wortmann 

// #wortmann { 
// Функция сортирует документы в массиве по "по ранжиру" интерфейсов 
// Галфинд_Домнышева 2022/09/19
//
// Параметры:
//  МассивДокументовДЗ - <Массив> - массив из созданных документов ДокументОбъект.гф_ДанныеЗагрузки
//  ТекИнтерфейс - <ПеречислениеСсылка.гф_Интерфейсы> - Значение интерфеса 
//
// Возвращаемое значение:
// 	МассивДокументовПоИнтерфейсу - <Массив> - массив из документов ДокументОбъект.гф_ДанныеЗагрузки с ТекИнтерфейсом
Функция ОтобратьДокументыПоИнтерфейсу(МассивДокументовДЗ, ТекИнтерфейс)

	МассивДокументовПоИнтерфейсу	= Новый Массив;
	Для каждого ТекДокумент Из МассивДокументовДЗ Цикл
		Если ТекДокумент.Интерфейс = ТекИнтерфейс Тогда
			МассивДокументовПоИнтерфейсу.Добавить(ТекДокумент);	
		КонецЕсли;
	КонецЦикла;		
	Возврат МассивДокументовПоИнтерфейсу;

КонецФункции// } #wortmann

// #wortmann { 
// Функция отбирает документы с интерфейсом PRICAT_SORT и переустанавливает в документе 
// гф_ДанныеЗагрузки значение интерфейса
// Галфинд_Домнышева 2022/09/19
//
// Параметры:
//  МассивДокументовPRICAT - <Массив> - массив из созданных документов ДокументОбъект.гф_ДанныеЗагрузки 
//
// Возвращаемое значение:
// 	МассивДокументов - <Массив> - массив из документов ДокументОбъект.гф_ДанныеЗагрузки с интерфейсом PRICAT_SORT
Функция ОтобратьPricat_Sort(МассивДокументовPRICAT)
	
	МассивДокументов	= Новый Массив;
	// Выберем загружаемые поля для интерфейса PRICAT_SORT 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НастройкаЗагружаемыхДанных.СтатусПоля,
	|	НастройкаЗагружаемыхДанных.Ссылка,
	|	НастройкаЗагружаемыхДанных.Наименование
	|ИЗ
	|	Справочник.гф_НастройкаЗагружаемыхДанных КАК НастройкаЗагружаемыхДанных
	|ГДЕ
	|	НастройкаЗагружаемыхДанных.Интерфейс = &Интерфейс";
	Запрос.УстановитьПараметр("Интерфейс", Перечисления.гф_Интерфейсы.PRICAT_SORT);
	ЗагружаемыеПоля = Запрос.Выполнить().Выгрузить();
	
	// Запросом отбираем только Pricat_Sort
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Тэг_Group_type", "Group_type");
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументовPRICAT);
	Запрос.УстановитьПараметр("Pricat_Sort", "10E");
	Запрос.Текст = "ВЫБРАТЬ
	|	СтрокиДокументаДанныеЗагрузки.Документ КАК Ссылка
	|ИЗ
	|	РегистрСведений.гф_СтрокиДокументаДанныеЗагрузки КАК СтрокиДокументаДанныеЗагрузки
	|ГДЕ
	|	СтрокиДокументаДанныеЗагрузки.Документ В(&МассивДокументов)
	|	И СтрокиДокументаДанныеЗагрузки.Тэг = &Тэг_Group_type
	|	И СтрокиДокументаДанныеЗагрузки.Значение ПОДОБНО &Pricat_Sort";
	
	Результат			= Запрос.Выполнить();
	ВыборкаPRICAT_SORT 	= Результат.Выбрать();
	Пока ВыборкаPRICAT_SORT.Следующий() Цикл
		ДокументPRICAT_SORT = ВыборкаPRICAT_SORT.Ссылка.ПолучитьОбъект();
		ДокументPRICAT_SORT.Интерфейс = Перечисления.гф_Интерфейсы.PRICAT_SORT;
		ДокументPRICAT_SORT.Записать();
		МассивДокументов.Добавить(ДокументPRICAT_SORT.Ссылка);
		// Так как в Документы PRICAT_SORT установлены значения для PRICAT, меняем их на нужные
		НаборЗаписей = РегистрыСведений.гф_СтрокиДокументаДанныеЗагрузки.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Документ.Установить(ДокументPRICAT_SORT.Ссылка);
		НаборЗаписей.Прочитать();
		Для Индекс = 0 По НаборЗаписей.Количество() - 1 Цикл
			Запись = НаборЗаписей[Индекс];
			Запись.ПолеЗагрузки = "";
			Если ЗначениеЗаполнено(ЗагружаемыеПоля) Тогда
				НайденноеЗначение = ЗагружаемыеПоля.Найти(Запись.Тэг, "Наименование");
				Если НайденноеЗначение <> Неопределено Тогда
					Запись.ПолеЗагрузки = НайденноеЗначение.Ссылка;
					Запись.СтатусПоля = НайденноеЗначение.СтатусПоля;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	
	Возврат МассивДокументов;
	
КонецФункции// } #wortmann

// #wortmann { 
// Функция отбирает документы с интерфейсом PRICAT 
// Галфинд_Домнышева 2022/09/19
//
// Параметры:
//  МассивДокументовPRICAT - <Массив> - массив из созданных документов ДокументОбъект.гф_ДанныеЗагрузки 
//
// Возвращаемое значение:
// МассивДокументов - <Массив> - массив из документов ДокументОбъект.гф_ДанныеЗагрузки с интерфейсом PRICAT
Функция ОтобратьPricat(МассивДокументовPRICAT)
	
	МассивДокументов	= Новый Массив;
	
	// Запросом отбираем только Pricat
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Тэг_Group_type", "Group_type");
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументовPRICAT);
	Запрос.УстановитьПараметр("Pricat", "3");
	Запрос.Текст = "ВЫБРАТЬ
	|	СтрокиДокументаДанныеЗагрузки.Документ КАК Ссылка
	|ИЗ
	|	РегистрСведений.гф_СтрокиДокументаДанныеЗагрузки КАК СтрокиДокументаДанныеЗагрузки
	|ГДЕ
	|	СтрокиДокументаДанныеЗагрузки.Документ В(&МассивДокументов)
	|	И СтрокиДокументаДанныеЗагрузки.Тэг = &Тэг_Group_type
	|	И СтрокиДокументаДанныеЗагрузки.Значение ПОДОБНО &Pricat";
	
	Результат			= Запрос.Выполнить();
	ВыборкаPRICAT 	= Результат.Выбрать();
	Пока ВыборкаPRICAT.Следующий() Цикл
		МассивДокументов.Добавить(ВыборкаPRICAT.Ссылка);
	КонецЦикла;
	
	Возврат МассивДокументов;
  
КонецФункции// } #wortmann

#КонецОбласти

#Область Инициализация
//Этой переменной регулируем количество "холостых" итераций цикла -
//тем самым устанавливаем интервал задержки до повторной попытки соединения
//после разрыва почтового соединения с почтовым сервером извне.
ИнтервалЗадержкиПодключенияПослеНеудачи = 1000;  
#КонецОбласти

#КонецЕсли