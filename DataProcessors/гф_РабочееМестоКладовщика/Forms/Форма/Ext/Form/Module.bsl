
&НаКлиенте
Процедура ПечатьПоNVE(ИмяКоманды)
	ПоместитьВоВременноеХранилище(Неопределено, АдресРезультата);
	Если Объект.Товары.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не заполнены данные для печати!");
		Возврат;
	КонецЕсли;
	Если ИмяКоманды = "ПечатьБезNVEСПредварительнымПросмотром" 
		ИЛИ ИмяКоманды = "ПечатьСNVEСПредварительнымПросмотром" Тогда
		ПечатьЭтикеткиНаКлиенте(ИмяКоманды, Ложь);
	Иначе
		ПечатьЭтикеткиНаКлиенте(ИмяКоманды);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСNVE(Команда)
	ПечатьПоNVE(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСNVEСПредварительнымПросмотром(Команда)
	ПечатьПоNVE(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПечатьБезNVE(Команда)
	ПечатьПоNVE(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПечатьБезNVEСПредварительнымПросмотром(Команда)
	ПечатьПоNVE(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РаспечататьДокументыНаПринтер(ТабличныйДок)
	ТабличныеДокументы = Новый СписокЗначений();
	ТабличныеДокументы.Добавить(ТабличныйДок);
	УправлениеПечатьюКлиент.РаспечататьТабличныеДокументы(
	ТабличныеДокументы, Новый СписокЗначений, , 1);
КонецПроцедуры

&НаСервере
Функция ПараметрыЗаголовкаПечатьNVE(СтрТЗ)
	НаименованиеКлиента = 	ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрТЗ.Клиент, "НаименованиеПолное");
	ПараметрыЗаголовка = Новый Структура("NVE, АртикулУпаковки, Клиент, КодКлиента",
	СтрТЗ["NVE"], СтрТЗ["АртикулУпаковки"], НаименованиеКлиента, СтрТЗ["КодКлиента"]);
	Возврат ПараметрыЗаголовка;
КонецФункции 

&НаСервере
Функция ПроверитьЗаполнениеНеобходимыхДанных(Дерево)
	// оставлено для совместимости
	// ЭТОТ БЛОК ПРОВЕРКИ НЕ ВОСПРОИЗВОДИТСЯ В ГФ

	РезультатПроверки = Истина;

	Возврат РезультатПроверки;
	
КонецФункции

&НаСервере
Процедура ПечатьЭтикетки(МассивКМДляПечати = Неопределено, ИмяКоманды = Неопределено)
	
	обОбработка = РеквизитФормыВЗначение("Объект");
	тзТовары = Объект.Товары.Выгрузить();
	
	Если обОбработка.Номенклатура.Пустая() Тогда
		Сообщить("По NVE <" + Объект.NVE + "> не найдена номенклатура, печать невозможна");
		Возврат;
	КонецЕсли;
	
	Если тзТовары.Количество() = 0 Тогда
		Сообщить("По NVE <" + Объект.NVE + "> не найдены КМ, печать невозможна");
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаголовка = ПараметрыЗаголовкаПечатьNVE(тзТовары[0]);
	
	Если Не МассивКМДляПечати = Неопределено Тогда
		Для Каждого СтрокаТЧ Из тзТовары Цикл
			
			СтрокаТЧ.Пометка = Ложь;
			
			Если Не МассивКМДляПечати.Найти(СтрокаТЧ.КМ) = Неопределено Тогда
				СтрокаТЧ.Пометка = Истина;
			КонецЕсли;	
			
		КонецЦикла;
	КонецЕсли;
	
	ДеревоТовары = ПолучитьДеревоДанных(тзТовары);
	
	 Если Не ПроверитьЗаполнениеНеобходимыхДанных(ДеревоТовары) Тогда
		Возврат
	 КонецЕсли;
	
	ГраницаМакета 		= 13;
	КоличествоСтрок 	= 2;
	КоличествоКолонок 	= 6;
	ЭтикетокНаЛисте 	= КоличествоСтрок * КоличествоКолонок;
	ИндексЭтикетки 		= 0;
	ВсегоНужноНапечататьЭтикеток = тзТовары.Итог("КоличествоЭтикеток");
	
	ТД = Новый ТабличныйДокумент;

	// Получение дат изготовления КМ
	// ++ Галфинд_ДомнышеваКР_24_04_2023
	// Вынесла код в отдельную функцию ПолучитьДатуИзготовленияКМ() 
	// -- Галфинд_ДомнышеваКР_24_04_2023
	
	Макет = обОбработка.ПолучитьМакет("Этикетка_Декларация5");
	
	ПечатьЗаголовка(ТД, Макет, ПараметрыЗаголовка);
	
	ИндексСтроки = 1;
	ИндексКолонки = 1;
	
	ВывелиПодвал = Ложь;
	
	
	Для Каждого строка Из тзТовары Цикл
		
		Если Не Строка["Пометка"] Тогда
			Продолжить;
		КонецЕсли;		

		мНоменклатура = строка.Номенклатура;
		
		ОписаниеТовара = Строка(мНоменклатура) + " (" + строка.Артикул + ")";
		
		Нашли = ДеревоТовары.строки.Найти(мНоменклатура);
		Если Нашли = Неопределено Тогда
			Текст = "" + мНоменклатура + " не найдены свойства для печати этикетки!";
			ОбщегоНазначения.СообщитьПользователю(Текст);
			Продолжить;
		Иначе
			таб = Нашли.Строки;
		КонецЕсли;
		
		ОбластьОсновная = Макет.ПолучитьОбласть("ОбластьОсновная");
		ОбластьОсновная.Параметры.Размер = "" + Строка["Характеристика"];
		Этикетка = "";
		РисунокШтрихкод = ОбластьОсновная.Рисунки.Штрихкод;
		
		Если строка.КМ.Пустая() Тогда
			ОбластьОсновная.Рисунки.Удалить(РисунокШтрихкод);
		Иначе
			ОбластьОсновная.Рисунки.Удалить(ОбластьОсновная.Рисунки.eac);
			Штрихкод = строка["ПолныйКодМаркировки"];
			ШтрихКодНаПечать = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(строка.КМ, "ЗначениеШтрихкода");
			
			ТипКода = 24;
			Ширина = 220;
			Высота = 220;
			УголПоворота = 0;
			УровеньКоррекцииQR = 0;
			
			ПараметрыШтрихкода = ГенерацияШтрихкода.ПараметрыГенерацииШтрихкода();
			ПараметрыШтрихкода["Ширина"] = Ширина;
			ПараметрыШтрихкода["Высота"] = Высота;
			ПараметрыШтрихкода["ТипКода"] = ТипКода;
			ПараметрыШтрихКода["ОтображатьТекст"] = Истина;
			ПараметрыШтрихкода["РазмерШрифта"] = 10;
			ПараметрыШтрихкода["УголПоворота"] = УголПоворота;
			
			ПараметрыШтрихкода["Штрихкод"] = Штрихкод;
			ПараметрыШтрихкода["ПрозрачныйФон"] = Истина;
			ПараметрыШтрихкода["УровеньКоррекцииQR"] = УровеньКоррекцииQR;
			ПараметрыШтрихКода["ТипВходныхДанных"] = 1;
			СтруктураКартинки = ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыШтрихкода);    		
			
			// РисунокШтрихкод.Лево = 0;
			РисунокШтрихкод.Картинка = СтруктураКартинки.Картинка;
			// РисунокШтрихкод.Высота = 25;
			// РисунокШтрихкод.Ширина = 25;
			РисунокШтрихкод.ГраницаСверху = Ложь;
			РисунокШтрихкод.ГраницаСлева = Ложь;
			РисунокШтрихкод.ГраницаСнизу = Ложь;
			РисунокШтрихкод.ГраницаСправа = Ложь;
			РисунокШтрихкод.Защита = Ложь;
			// ++ Галфинд_ДомнышеваКР_28_07_2023
			// в КМ могут присутствовать символы ")" и "(" в хвосте, по этому преобразование
			// ++ Галфинд_ДомнышеваКР_05_04_2023
			Если   Лев(ШтрихКодНаПечать, 1) = "("  Тогда
				НовоеЗначение = Сред(ШтрихКодНаПечать, 2, 2) + Сред(ШтрихКодНаПечать, 5, 14)
								+ Сред(ШтрихКодНаПечать, 20, 2) + Сред(ШтрихКодНаПечать, 23);
				ШтрихКодНаПечать = НовоеЗначение;
			КонецЕсли;
			//ШтрихКодНаПечать = СтрЗаменить(ШтрихКодНаПечать, "(", "");
			//ШтрихКодНаПечать = СтрЗаменить(ШтрихКодНаПечать, ")", "");
            // -- Галфинд_ДомнышеваКР_05_04_2023
			// -- Галфинд_ДомнышеваКР_28_07_2023
			ОбластьОсновная.Параметры.КодМаркировки = ШтрихКодНаПечать;
			
		КонецЕсли;
		
		 ЕстьОписание = Ложь;
		 СтрокаОписание = Неопределено;
		 ЗначениеОписание = Неопределено;

		// ++ Галфинд_ДомнышеваКР_24_04_2023 
		ДатаИзготовления = ПолучитьДатуИзготовленияКМ(тзТовары, Строка); 
		
		// ++ Галфинд ВолковЕВ 15.06.2023
		//Этикетка = ПолучитьДанныеЭтикетки(мНоменклатура, ДатаИзготовления);
		Этикетка = ПолучитьДанныеЭтикетки(мНоменклатура, ДатаИзготовления, Строка.Характеристика);
		// -- Галфинд ВолковЕВ 15.06.2023
		
		//Этикетка = ПолучитьДанныеЭтикетки(мНоменклатура);
		// -- Галфинд_ДомнышеваКР_24_04_2023
		ОбластьОсновная.Параметры.Этикетка = Этикетка;
		
		ВывелиПодвал = Ложь; 
		
		Для а = 1 По строка.КоличествоЭтикеток Цикл
			
			ИндексЭтикетки = ИндексЭтикетки + 1;
			
			Если ИндексКолонки = 1 Тогда
				ТД.Вывести(ОбластьОсновная);
			Иначе	
				ТД.Присоединить(ОбластьОсновная);
			КонецЕсли;
			
			Если ИндексКолонки = КоличествоКолонок Тогда
				ИндексКолонки = 1;
				ИндексСтроки = ИндексСтроки + 1;
			Иначе
				ИндексКолонки = ИндексКолонки + 1;
			КонецЕсли;
			
			Если ИндексЭтикетки = ЭтикетокНаЛисте или ИндексСтроки > КоличествоСтрок Тогда
				
				ПечатьПодвала(ТД, Макет, ПараметрыЗаголовка, ИндексСтроки - 1);
				ВывелиПодвал = Истина;
				
				Если Не (ИндексЭтикетки  = ВсегоНужноНапечататьЭтикеток) Тогда
					ТД.ВывестиГоризонтальныйРазделительСтраниц();
					ПечатьЗаголовка(ТД, Макет, ПараметрыЗаголовка);
				КонецЕсли;
				
				ИндексСтроки = 1;
				ИндексЭтикетки = 0;
			Иначе
				ВывелиПодвал = Ложь;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Если НЕ ВывелиПодвал Тогда
		
		НадоСделатьВывод = Ложь;
		Если ИндексСтроки = 1 И ИндексЭтикетки < 6 Тогда
			
			ИндексЭтикетки = ИндексЭтикетки + 1;
			
			ОбластьОсновная = Макет.ПолучитьОбласть("ОбластьОсновная");
			ОбластьОсновная.Рисунки.Удалить(ОбластьОсновная.Рисунки.Штрихкод);
			ОбластьОсновная.Рисунки.Удалить(ОбластьОсновная.Рисунки.eac);
			
			Пока ИндексЭтикетки <= 6 Цикл
				ОбластьОсновная.Параметры.Размер 		= "";
				ОбластьОсновная.Параметры.Этикетка 		= "";
				ОбластьОсновная.Параметры.КодМаркировки = "";
				ТД.Присоединить(ОбластьОсновная);
				ИндексЭтикетки = ИндексЭтикетки + 1;
			КонецЦикла;
			
			ИндексСтроки = ИндексСтроки + 1;
			НадоСделатьВывод = Истина;
			
		ИначеЕсли ИндексСтроки = 2 И ИндексЭтикетки = 6 Тогда
			ИндексЭтикетки = ИндексЭтикетки + 1;
			НадоСделатьВывод = Истина;
		КонецЕсли;
		
		Если ИндексСтроки = 2 И ИндексЭтикетки < 12 Тогда
			
			ОбластьОсновная = Макет.ПолучитьОбласть("ОбластьОсновная");
			ОбластьОсновная.Рисунки.Удалить(ОбластьОсновная.Рисунки.Штрихкод);
			ОбластьОсновная.Рисунки.Удалить(ОбластьОсновная.Рисунки.eac);
			
			Если НадоСделатьВывод Тогда
				
				ОбластьОсновная.Параметры.Размер 		= "";
				ОбластьОсновная.Параметры.Этикетка 		= "";
				ОбластьОсновная.Параметры.КодМаркировки = "";
				ТД.Вывести(ОбластьОсновная);
				ИндексЭтикетки = ИндексЭтикетки + 1;
			КонецЕсли;
			
			Пока ИндексЭтикетки < 12 Цикл
				ОбластьОсновная.Параметры.Размер 		= "";
				ОбластьОсновная.Параметры.Этикетка 		= "";
				ОбластьОсновная.Параметры.КодМаркировки = "";
				ТД.Присоединить(ОбластьОсновная);
				ИндексЭтикетки = ИндексЭтикетки + 1;
			КонецЦикла;
		КонецЕсли;
		
		ПечатьПодвала(ТД, Макет, ПараметрыЗаголовка);
		ВывелиПодвал = Истина;
	КонецЕсли;	
	УстановитьПараметрыТабличногоДокумента(ТД);
	
	ПоместитьВоВременноеХранилище(ТД, АдресРезультата);
	
	Если Не(ИмяКоманды = "ПечатьБезNVEСПредварительнымПросмотром" 
		ИЛИ ИмяКоманды = "ПечатьСNVEСПредварительнымПросмотром"
		ИЛИ (ИмяКоманды = "ПечататьДобавленныеКМ" И РежимПечатиИслючаемыеКМ = 0)) Тогда
		ЗаписатьNVEПризнакРаспечатанНазначен(ПараметрыЗаголовка["NVE"], "гф_NVE_распечатан");
		
		ВыполнитьДействияБлокировкаАртикуловПоNVE("", "Удалить", Истина);
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеЭтикетки(Номенклатура, ДатаИзготовления, Характеристика)
	
	ПустоеСвойствоЭтикеткиСтрокой = "";
	
	//Запрос изменен в связи с задачей
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8132bcee7bda45d711edda03fa53bd76
	// Галфинд_Домнышева_24_04_2023
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(вз.Реквизит) = ТИП(СТРОКА)
		|			ТОГДА ВЫРАЗИТЬ(вз.Реквизит КАК СТРОКА(300))
		|		ИНАЧЕ вз.Реквизит
		|	КОНЕЦ КАК РеквизитСтрока,
		|	вз.ТипДопСведения КАК ТипДопСведения,
		|	вз.ПорядокПоТипуДопСведения КАК ПорядокПоТипуДопСведения,
		|	вз.Порядок КАК Порядок,
		|	ВЫРАЗИТЬ(ДополнительныеСведения.Значение КАК СТРОКА(300)) КАК ЗначениеСвойства
		|ПОМЕСТИТЬ БЕЗПЕРЕВОДА
		|ИЗ
		|	(ВЫБРАТЬ
		|		гф_НастройкиПечатиСвойствЭтикеток.Ссылка КАК Ссылка,
		|		гф_НастройкиПечатиСвойствЭтикетокРеквизиты.Реквизит КАК Реквизит,
		|		""Реквизит"" КАК ТипДопСведения,
		|		1 КАК ПорядокПоТипуДопСведения,
		|		гф_НастройкиПечатиСвойствЭтикетокРеквизиты.Порядок КАК Порядок
		|	ИЗ
		|		Справочник.гф_НастройкиПечатиСвойствЭтикеток КАК гф_НастройкиПечатиСвойствЭтикеток
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гф_НастройкиПечатиСвойствЭтикеток.Реквизиты КАК гф_НастройкиПечатиСвойствЭтикетокРеквизиты
		|			ПО гф_НастройкиПечатиСвойствЭтикеток.Ссылка = гф_НастройкиПечатиСвойствЭтикетокРеквизиты.Ссылка
		|	ГДЕ
		|		гф_НастройкиПечатиСвойствЭтикеток.Ссылка = &Ссылка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		гф_НастройкиПечатиСвойствЭтикеток.Ссылка,
		|		гф_НастройкиПечатиСвойствЭтикетокДополнительныеСведения.Свойство,
		|		""Свойство"",
		|		2,
		|		гф_НастройкиПечатиСвойствЭтикетокДополнительныеСведения.Порядок
		|	ИЗ
		|		Справочник.гф_НастройкиПечатиСвойствЭтикеток КАК гф_НастройкиПечатиСвойствЭтикеток
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гф_НастройкиПечатиСвойствЭтикеток.ДополнительныеСведения КАК гф_НастройкиПечатиСвойствЭтикетокДополнительныеСведения
		|			ПО гф_НастройкиПечатиСвойствЭтикеток.Ссылка = гф_НастройкиПечатиСвойствЭтикетокДополнительныеСведения.Ссылка
		|	ГДЕ
		|		гф_НастройкиПечатиСвойствЭтикеток.Ссылка = &Ссылка) КАК вз
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|		ПО (ДополнительныеСведения.Объект = &Ном)
		|			И вз.Реквизит = ДополнительныеСведения.Свойство
		|ГДЕ
		|	вз.Реквизит ЕСТЬ НЕ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БЕЗПЕРЕВОДА.РеквизитСтрока КАК РеквизитИлиСвойство,
		|	БЕЗПЕРЕВОДА.ТипДопСведения КАК ТипДопСведения,
		|	БЕЗПЕРЕВОДА.ПорядокПоТипуДопСведения КАК ПорядокПоТипуДопСведения,
		|	БЕЗПЕРЕВОДА.Порядок КАК Порядок,
		|	БЕЗПЕРЕВОДА.ЗначениеСвойства КАК ЗначениеСвойства,
		|	гф_ПереводЗначенийРеквизитовИСвойств.Значение КАК НаименованиеРеквизита
		|ПОМЕСТИТЬ ПереводНаименований
		|ИЗ
		|	БЕЗПЕРЕВОДА КАК БЕЗПЕРЕВОДА
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гф_ПереводЗначенийРеквизитовИСвойств КАК гф_ПереводЗначенийРеквизитовИСвойств
		|		ПО (гф_ПереводЗначенийРеквизитовИСвойств.Объект = БЕЗПЕРЕВОДА.РеквизитСтрока)
		|			И (гф_ПереводЗначенийРеквизитовИСвойств.Язык = &Этикетки)
		|ГДЕ
		|	БЕЗПЕРЕВОДА.ТипДопСведения = ""Свойство""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	БЕЗПЕРЕВОДА.РеквизитСтрока,
		|	БЕЗПЕРЕВОДА.ТипДопСведения,
		|	БЕЗПЕРЕВОДА.ПорядокПоТипуДопСведения,
		|	БЕЗПЕРЕВОДА.Порядок,
		|	БЕЗПЕРЕВОДА.ЗначениеСвойства,
		|	""""
		|ИЗ
		|	БЕЗПЕРЕВОДА КАК БЕЗПЕРЕВОДА
		|ГДЕ
		|	БЕЗПЕРЕВОДА.ТипДопСведения = ""Реквизит""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПереводНаименований.РеквизитИлиСвойство КАК РеквизитИлиСвойство,
		|	ПереводНаименований.ТипДопСведения КАК ТипДопСведения,
		|	ПереводНаименований.ПорядокПоТипуДопСведения КАК ПорядокПоТипуДопСведения,
		|	ПереводНаименований.Порядок КАК Порядок,
		|	ПереводНаименований.ЗначениеСвойства КАК ЗначениеСвойства,
		|	ВЫРАЗИТЬ(ПереводНаименований.НаименованиеРеквизита КАК СТРОКА(300)) КАК НаименованиеРеквизита,
		|	ВЫРАЗИТЬ(гф_ПереводЗначенийРеквизитовИСвойств.Значение КАК СТРОКА(300)) КАК Значение
		|ПОМЕСТИТЬ ИТОГО
		|ИЗ
		|	ПереводНаименований КАК ПереводНаименований
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гф_ПереводЗначенийРеквизитовИСвойств КАК гф_ПереводЗначенийРеквизитовИСвойств
		|		ПО (гф_ПереводЗначенийРеквизитовИСвойств.Объект = ПереводНаименований.ЗначениеСвойства)
		|			И (гф_ПереводЗначенийРеквизитовИСвойств.Язык = &НацКаталог)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ИТОГО.НаименованиеРеквизита <> """"
		|			ТОГДА ИТОГО.НаименованиеРеквизита
		|		ИНАЧЕ ИТОГО.РеквизитИлиСвойство
		|	КОНЕЦ КАК РеквизитИлиСвойство,
		|	ИТОГО.ТипДопСведения КАК ТипДопСведения,
		|	ИТОГО.ПорядокПоТипуДопСведения КАК ПорядокПоТипуДопСведения,
		|	ИТОГО.Порядок КАК Порядок,
		|	ВЫБОР
		|		КОГДА ИТОГО.Значение <> """"
		|			ТОГДА ИТОГО.Значение
		|		ИНАЧЕ ИТОГО.ЗначениеСвойства
		|	КОНЕЦ КАК ЗначениеСвойства
		|ИЗ
		|	ИТОГО КАК ИТОГО
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	ПорядокПоТипуДопСведения");
	
	Запрос.УстановитьПараметр("Ссылка", Объект.НастройкиПечати);
	Запрос.УстановитьПараметр("Ном", Номенклатура);
	Запрос.УстановитьПараметр("НацКаталог", Справочники.гф_ВидыЯзыков.НацКаталог);
	Запрос.УстановитьПараметр("Этикетки", Справочники.гф_ВидыЯзыков.Этикетки);

	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат ПустоеСвойствоЭтикеткиСтрокой;
	КонецЕсли;
	
	ЗапросТипаАдреса = Новый Запрос ("ВЫБРАТЬ
		|	гф_НастройкиПечатиСвойствЭтикеток.ТипАдреса КАК ТипАдреса
		|ИЗ
		|	Справочник.гф_НастройкиПечатиСвойствЭтикеток КАК гф_НастройкиПечатиСвойствЭтикеток
		|ГДЕ
		|	гф_НастройкиПечатиСвойствЭтикеток.Ссылка = &Ссылка");
	
	ЗапросТипаАдреса.УстановитьПараметр("Ссылка", Объект.НастройкиПечати);
	
	РезультатЗапроса = ЗапросТипаАдреса.Выполнить();
	
	ВыборкаТипаАдреса = РезультатЗапроса.Выбрать();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаТипаАдреса.Следующий();
		ТипАдреса = ВыборкаТипаАдреса.ТипАдреса;
	Иначе
		ТипАдреса = Неопределено;
	КонецЕсли;

	тз = Результат.Выгрузить();
	мСвойств = Новый Массив;
	Для каждого стрТЗ Из тз Цикл
		Если стрТЗ["ТипДопСведения"] = "Реквизит" Тогда 
			Если стрТЗ["РеквизитИлиСвойство"] = Null Тогда
				Продолжить;	
			Иначе
				// ++ Галфинд_ДомнышеваКР_24_04_2023
				Если стрТЗ["РеквизитИлиСвойство"] = "Производитель (импортер)" Тогда
					Реквизит = Метаданные.Справочники.Номенклатура.Реквизиты.ПроизводительИмпортерКонтрагент;
					Если ТипАдреса <> Неопределено Тогда
						
					КонецЕсли;
                Иначе
					Реквизит = ОпределитьРеквизит(стрТЗ["РеквизитИлиСвойство"]);
				КонецЕсли;	
				
				// ++ Галфинд ВолковЕВ 15.06.2023
				//стрТЗ["ЗначениеСвойства"] = Строка(Номенклатура[Реквизит.Имя]);
				
				Если стрТЗ["РеквизитИлиСвойство"] = "Артикул" Тогда  // В новом релизе синоним пишется без пробела в конце // ДомнышеваКР_27_09_2023
					стрТЗ["ЗначениеСвойства"] = Строка(Номенклатура[Реквизит.Имя]) + "/" + Характеристика;
				Иначе
				    стрТЗ["ЗначениеСвойства"] = Строка(Номенклатура[Реквизит.Имя]);
				КонецЕсли;
				// -- Галфинд ВолковЕВ 15.06.2023
				
				Перевод = ПереводРеквизита(стрТЗ["РеквизитИлиСвойство"]);
				Если ЗначениеЗаполнено(Перевод) Тогда
					стрТЗ["РеквизитИлиСвойство"] = Перевод;
				КонецЕсли;
				//стрТЗ["ЗначениеСвойства"] = Строка(Номенклатура[стрТЗ["РеквизитИлиСвойство"]]); 
				//СинонимРеквизита = Метаданные.Справочники.Номенклатура.Реквизиты[стрТЗ["РеквизитИлиСвойство"]].Синоним;
				//стрТЗ["РеквизитИлиСвойство"] = СинонимРеквизита;
				// -- Галфинд_ДомнышеваКР_24_04_2023
			КонецЕсли;
		КонецЕсли;
		
		ЗначениеСвойства = ?(ЗначениеЗаполнено(стрТЗ["ЗначениеСвойства"]), стрТЗ["ЗначениеСвойства"], "");
		мСвойств.Добавить("" + стрТЗ["РеквизитИлиСвойство"]	+ ": " + ЗначениеСвойства); 
		// ++ Галфинд_ДомнышеваКР_01_05_2023
		Если (СтрНачинаетсяС(стрТЗ["РеквизитИлиСвойство"], "Производитель")
			ИЛИ СтрНачинаетсяС(стрТЗ["РеквизитИлиСвойство"], "Импортер")) И ТипАдреса <> Неопределено Тогда 
			ЗначениеАдреса = ПолучитьАдрес(Номенклатура[Реквизит.Имя], ТипАдреса);
			мСвойств.Добавить("" + "Адрес" + ": " + ЗначениеАдреса);
			                                                                               
		КонецЕсли;
		// -- Галфинд_ДомнышеваКР_01_05_2023
	КонецЦикла;
	
	// ++ Галфинд_ДомнышеваКР_24_04_2023
	мСвойств.Добавить("" + "Дата Изготовления" + ": " + ДатаИзготовления);	            
	// -- Галфинд_ДомнышеваКР_24_04_2023
	
	// ++ Галфинд_ДомнышеваКР_05_04_2023
	// СвойствоЭтикеткиСтрокой = СтрСоединить(мСвойств, Символы.ПС);
	СвойствоЭтикеткиСтрокой = СтрСоединить(мСвойств, ", ");
	// ++ Галфинд_ДомнышеваКР_05_04_2023
	Возврат СвойствоЭтикеткиСтрокой + Символы.ПС; // ++ Галфинд_ДомнышеваКР_24_04_2023
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьПараметрыТабличногоДокумента(ТД)

	ТД.РазмерСтраницы = "A4";
	ТД.АвтоМасштаб = Ложь;
	ТД.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТД.ПолеСверху = 10; // Галфинд_ДомнышеваКР_02_05_2023 - изменено так как не влезало на лист
	ТД.ПолеСнизу = 10; // Галфинд_ДомнышеваКР_02_05_2023 - изменено так как не влезало на лист
	ТД.ПолеСлева = 21; 
	ТД.ПолеСправа = 20;
	ТД.КоличествоЭкземпляров = 1;
	ТД.Защита = Истина;
	
	ТД.ТолькоПросмотр = Истина;
	ТД.ОтображатьСетку = Ложь;
	ТД.ОтображатьЗаголовки = Ложь;
	ТД.КлючПараметровПечати = "ПЕЧАТЬ_ЭТИКЕТОК_РМК";

КонецПроцедуры


&НаСервере
Процедура ЗаписатьNVEПризнакРаспечатанНазначен(КодУпаковочногоЛиста, ИмяРеквизита)
	СтруктураШК_УЛ = НайтиШтрикходУпаковкиТоваровИУпаковочныйЛистПоNVE(КодУпаковочногоЛиста);
	УЛ = СтруктураШК_УЛ["УпаковочныйЛист"];
	УЛОбъект = УЛ.ПолучитьОбъект();
	УЛОбъект.ОбменДанными.Загрузка = Истина;
	УЛОбъект[ИмяРеквизита] = Истина;
	УЛОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	// vvv Галфинд \ Sakovich 27.06.2023
	Агрегат = СтруктураШК_УЛ["ШтрихкодУпаковки"];
	
	Если ИмяРеквизита = "гф_NVE_назначен" Тогда
		НЗ = РегистрыСведений.гф_ВремяПечатиNVE.СоздатьНаборЗаписей();
		НЗ.Отбор.NVE.Установить(Агрегат);
		НЗ.Прочитать();
		
		Если НЗ.Количество() > 0 Тогда
			НЗ[0].Назначен = Истина;
		Иначе
			НовСтр = НЗ.Добавить();
			НовСтр.NVE = Агрегат;
			НовСтр.ВремяПечати = ТекущаяДатаСеанса();
			НовСтр.Распечатан = Истина;
			НовСтр.Назначен = Истина;
		КонецЕсли;
		
		Попытка
			НЗ.Записать();
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю("Не удалось записать данные о времени печати NVE по причине: " + ОписаниеОшибки);
		КонецПопытки;
	КонецЕсли;
	// ^^^ Галфинд \ Sakovich 27.06.2023
	
КонецПроцедуры

&НаСервере
Процедура ДействияПриИзмененииNVE(ОчиститьТовары = Истина)
	
	Если ОчиститьТовары Тогда
		Объект.Товары.Очистить();
	КонецЕсли;
	
	Объект.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
	Если ПустаяСтрока(Объект.NVE) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураШтрихкодУпаковочныйЛист = НайтиШтрикходУпаковкиТоваровИУпаковочныйЛистПоNVE(Объект.NVE);
	
	Если СтруктураШтрихкодУпаковочныйЛист = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю("Не найдена мультитоварная упаковка по значению NVE: " 
		+ Объект.NVE);
		Возврат;
	КонецЕсли; 
	
	Если СтруктураШтрихкодУпаковочныйЛист["УпаковочныйЛист"].Пустая() Тогда
		ОбщегоНазначения.СообщитьПользователю("Не найден упаковочный лист по значению NVE: " 
		+ Объект.NVE);
		Возврат;
	КонецЕсли;
	
	// vvv Галфинд \ Sakovich 01.03.2023
	Если СписокСкладов.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю("В настройках не заполнено значение ""Склады""!");
		Возврат;
	КонецЕсли;
	ЕстьNVEСкладе = ПроверитьНаличиеNVEНаСкладе(СписокСкладов, СтруктураШтрихкодУпаковочныйЛист["ШтрихКодУпаковки"]);
	Если Не ЕстьNVEСкладе Тогда
		ОбщегоНазначения.СообщитьПользователю("На складах не найден NVE " + Объект.NVE);
		Возврат;
	КонецЕсли;
	// ^^^ Галфинд \ Sakovich 01.03.2023 
	
	// vvv Галфинд \ Sakovich 02.04.2023
	УлНазначен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураШтрихкодУпаковочныйЛист["УпаковочныйЛист"],
	"гф_NVE_назначен");
	Если Не УлНазначен Тогда
		Шаблон = "У данного NVE: %1 - нет признака ""NVE назначен"". Воспользуйтесь печатью без NVE.";
		ТекстСообщения = СтрШаблон(Шаблон, Объект.NVE);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;	
	КонецЕсли;
	// ^^^ Галфинд \ Sakovich 02.04.2023 
	
	Объект.Номенклатура = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураШтрихкодУпаковочныйЛист["УпаковочныйЛист"],
	"гф_Комплектация.Владелец");
	
	КромеКМ_Недостача = ОпределитьКМНедостачи(СтруктураШтрихкодУпаковочныйЛист["УпаковочныйЛист"]);
	
	ПересортицаИСтатус = ОпределитьЧтоПоУлЕстьПересортицаИКодыПолучены(СтруктураШтрихкодУпаковочныйЛист["ШтрихКодУпаковки"]);
	
	Если ПересортицаИСтатус  = Ложь Тогда
		ЗаполнитьТаблицуТоваров(СтруктураШтрихкодУпаковочныйЛист, , КромеКМ_Недостача);
	ИначеЕсли ПересортицаИСтатус["Статус"] = Перечисления.гф_СтатусыИсключений.КодыПолучены Тогда
		ЗаполнитьТаблицуТоваровПоДобавленнымКМ(СтруктураШтрихкодУпаковочныйЛист);
	ИначеЕсли ПересортицаИСтатус["Статус"] = Перечисления.гф_СтатусыИсключений.ЭтикеткиНаклеены Тогда
		Набор = РегистрыСведений.гф_ПересортицаУдаляемыеШК.СоздатьНаборЗаписей();
		Набор.Отбор.Пересортица.Установить(ПересортицаИСтатус["Пересортица"]);
		Набор.Отбор.НомерЗаписи.Установить(1);
		Набор.Прочитать();
		КромеКМ_Пересортица = Набор.ВыгрузитьКолонку("ШтрихкодУпаковки");
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КромеКМ_Пересортица, КромеКМ_Недостача, Истина);
		ЗаполнитьТаблицуТоваров(СтруктураШтрихкодУпаковочныйЛист, ,КромеКМ_Пересортица);
		ИсходнаяТаблица = Объект.Товары.Выгрузить();
		Запрос = Новый Запрос();
		Запрос.Текст = ТекстЗапросаПоДобавленнымКМ();
		Запрос.УстановитьПараметр("УпаковочныйЛист", СтруктураШтрихкодУпаковочныйЛист["УпаковочныйЛист"]);
		Запрос.УстановитьПараметр("Агрегат", СтруктураШтрихкодУпаковочныйЛист["ШтрихКодУпаковки"]);
		Результат = Запрос.Выполнить();
		ТаблицаДобавленных = Результат.Выгрузить();
		Для каждого стрТз Из ТаблицаДобавленных Цикл
			стрПоиска = Новый Структура("КМ", стрТз["КМ"]);
			мСтр = ИсходнаяТаблица.НайтиСтроки(стрПоиска);
			Если мСтр.Количество() = 0 Тогда
			нс = ИсходнаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(нс, стрТз);
			нс.Новый = Истина;// Галфинд_ДомнышеваКР_12_10_2023
			КонецЕсли;
		КонецЦикла;
		ИсходнаяТаблица.Сортировать("Характеристика");
		Объект.Товары.Загрузить(ИсходнаяТаблица);
		УсловноеОформлениеТоваров();// Галфинд_ДомнышеваКР_12_10_2023
	Иначе
		//
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьКМНедостачи(УЛ)
	
	мКМНедостачи = Новый Массив;
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	гф_ПересортицаУдаляемыеШК.ШтрихкодУпаковки КАК ШтрихкодУпаковки
	|ИЗ
	|	РегистрСведений.гф_ПересортицаУдаляемыеШК КАК гф_ПересортицаУдаляемыеШК
	|ГДЕ
	|	гф_ПересортицаУдаляемыеШК.ШтрихкодУпаковки.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар)
	|	И гф_ПересортицаУдаляемыеШК.Пересортица = &УпаковочныйЛист");
	Запрос.УстановитьПараметр("УпаковочныйЛист", УЛ);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат мКМНедостачи;
	КонецЕсли;
	мКМНедостачи = Результат.Выгрузить().ВыгрузитьКолонку("ШтрихкодУпаковки");
	Возврат мКМНедостачи;

КонецФункции // ()

&НаСервере
Функция ОпределитьЧтоПоУлЕстьПересортицаИКодыПолучены(Агрегат)
	Запрос = Новый Запрос ("
	|ВЫБРАТЬ
	|	гф_ОбработкаИсключенийСрезПоследних.NVE КАК NVE,
	|	гф_ОбработкаИсключенийСрезПоследних.Статус КАК Статус
	|ПОМЕСТИТЬ ИсключениеПоNVE
	|ИЗ
	|	РегистрСведений.гф_ОбработкаИсключений.СрезПоследних(, NVE = &NVE) КАК гф_ОбработкаИсключенийСрезПоследних
	|ГДЕ
	|	гф_ОбработкаИсключенийСрезПоследних.Статус В(&Статусы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПересортицаТоваров.Ссылка КАК Пересортица,
	|	ПересортицаТоваров.гф_IDКороба КАК УЛ,
	|	УЛ.гф_Агрегация КАК NVE
	|ПОМЕСТИТЬ ПересортицаПоNVE
	|ИЗ
	|	Документ.ПересортицаТоваров КАК ПересортицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист КАК УЛ
	|		ПО ПересортицаТоваров.гф_IDКороба = УЛ.Ссылка
	|			И (УЛ.гф_Агрегация = &NVE)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПересортицаТоваров.Дата УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПересортицаПоNVE.Пересортица КАК Пересортица,
	|	ИсключениеПоNVE.Статус КАК Статус,
	|	ЕСТЬNULL(гф_ВремяПечатиNVE.NVE, ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)) КАК NVE_ВремяПечати
	|ИЗ
	|	ИсключениеПоNVE КАК ИсключениеПоNVE
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПересортицаПоNVE КАК ПересортицаПоNVE
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гф_ВремяПечатиNVE КАК гф_ВремяПечатиNVE
	|			ПО (ПересортицаПоNVE.NVE = гф_ВремяПечатиNVE.NVE)
	|		ПО (ИсключениеПоNVE.NVE = ПересортицаПоNVE.NVE)");
	
	Запрос.УстановитьПараметр("NVE", Агрегат);
	мСтатусы = Новый Массив();
	мСтатусы.Добавить(Перечисления.гф_СтатусыИсключений.КодыПолучены);
	мСтатусы.Добавить(Перечисления.гф_СтатусыИсключений.ЭтикеткиНаклеены);
	Запрос.УстановитьПараметр("Статусы", мСтатусы);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		СтруктураВозврата = Новый Структура("Пересортица, Статус, Распечатан", 
		Выборка["Пересортица"],
		Выборка["Статус"],
		?(Выборка["NVE_ВремяПечати"].Пустая(), Ложь, Истина));
		Возврат СтруктураВозврата;
	КонецЕсли;
	
КонецФункции // ()

&НаСервере
Функция ПроверитьНаличиеNVEНаСкладе(Склады, Короб)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ОстаткиКМ.КМ КАК Короб,
	|	ОстаткиКМ.Склад КАК Склад,
	|	ОстаткиКМ.КоличествоОстаток КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.гф_ДвижениеКодовМаркировкиОрганизации.Остатки(
	|			,
	|			Склад В (&Склады)
	|				И КМ = &Короб) КАК ОстаткиКМ
	|ГДЕ
	|	ОстаткиКМ.КоличествоОстаток >= 1");
	мСклады = Склады.ВыгрузитьЗначения();
	Запрос.УстановитьПараметр("Склады", мСклады);
	Запрос.УстановитьПараметр("Короб", Короб);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции


// Параметры - Структура - содержит ссылку на УпаковочныйЛист и ссылку на агрегат ШтрихкодыУпаковокТоваров
//					* ШтрихКодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров
//					* УпаковочныйЛист - ДокументСсылка.УпаковочныйЛист
// ОтборКМ - Массив - содержит ссылки на элементы спр. Штрихкоды упаковок товаров (маркированный товар)
&НаСервере
Процедура ЗаполнитьТаблицуТоваров(Параметры, ОтборКМ = Неопределено, КромеКМ = Неопределено)
	ШтрихКод = Параметры["ШтрихКодУпаковки"];
	УпЛист = Параметры["УпаковочныйЛист"];
	Запрос = Новый Запрос;
	// ++ Галфинд ВолковЕВ 22.06.2023
	//Запрос.Текст = "ВЫБРАТЬ
	Запрос.Текст = "ВЫБРАТЬ Разрешенные
	// -- Галфинд ВолковЕВ 22.06.2023
	|	УпаковочныйЛист.Ссылка КАК УпаковочныйЛист,
	|	УпаковочныйЛист.гф_Комплектация КАК АртикулУпаковки,
	|	ЗаказКлиента.Контрагент КАК Клиент,
	|	Партнеры.Код КАК КодКлиента,
	|	УпаковочныйЛист.Код КАК КодУпЛиста,
	|	УпаковочныйЛист.гф_Агрегация КАК Агрегат
	|ПОМЕСТИТЬ УпЛист
	|ИЗ
	|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	|			ПО ЗаказКлиента.Партнер = Партнеры.Ссылка
	|		ПО УпаковочныйЛист.гф_Заказ = ЗаказКлиента.Ссылка
	|ГДЕ
	|	УпаковочныйЛист.Ссылка = &УпаковочныйЛист
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// ++ Галфинд ВолковЕВ 22.06.2023
	//|ВЫБРАТЬ
	|ВЫБРАТЬ Разрешенные
	// -- Галфинд ВолковЕВ 22.06.2023
	|	ТчВложенныеШтрихкоды.Ссылка КАК Агрегат,
	|	СпрНоменклатура.Артикул КАК Артикул,
	|	СпрШтрихкоды.Номенклатура КАК Номенклатура,
	|	СпрШтрихкоды.Характеристика КАК Характеристика,
	// #wortmann { 
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee224d0352ee32 
	// Галфинд_Домнышева 2023/07/19
	|	СпрШтрихкоды.гф_ПолныйКодМаркировки КАК ПолныйКМ,
	// } #wortmann
	|	1 КАК КоличествоБазЕдиниц,
	|	СпрНоменклатура.ЕдиницаИзмерения КАК ЕдИзмБазовая,
	|	СпрНоменклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|	СпрШтрихкоды.Ссылка КАК КМ
	|ПОМЕСТИТЬ Штрихкоды
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ТчВложенныеШтрихкоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК СпрШтрихкоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|			ПО (СпрНоменклатура.Ссылка = СпрШтрихкоды.Номенклатура)
	|		ПО ТчВложенныеШтрихкоды.Штрихкод = СпрШтрихкоды.Ссылка
	|ГДЕ
	|	ТчВложенныеШтрихкоды.Ссылка = &Агрегат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// ++ Галфинд ВолковЕВ 22.06.2023
	//|ВЫБРАТЬ
	|ВЫБРАТЬ Разрешенные
	// -- Галфинд ВолковЕВ 22.06.2023
	|	ИСТИНА КАК Пометка,
	|	УпЛист.АртикулУпаковки КАК АртикулУпаковки,
	|	Штрихкоды.Артикул КАК Артикул,
	|	Штрихкоды.Номенклатура КАК Номенклатура,
	|	Штрихкоды.Характеристика КАК Характеристика,
	|	Штрихкоды.КоличествоБазЕдиниц КАК КоличествоБазЕдиниц,
	|	Штрихкоды.ЕдИзмБазовая КАК ЕдИзмБазовая,
	|	Штрихкоды.Агрегат КАК NVE,
	|	Штрихкоды.СтранаПроисхождения КАК СтранаПроисхождения,
	|	Штрихкоды.КМ КАК КМ,
	|	УпЛист.Клиент КАК Клиент,
	|	УпЛист.КодКлиента КАК КодКлиента,
	|	1 КАК КоличествоЭтикеток,
	|	ВЫБОР
	// #wortmann { 
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee224d0352ee32 
	// Галфинд_Домнышева 2023/07/19
	|		КОГДА Штрихкоды.ПолныйКМ <> """" 
	|			ТОГДА Штрихкоды.ПолныйКМ
	|		ИНАЧЕ ВЫБОР
	// } #wortmann
	|		КОГДА ПулКодов.ПолныйКодМаркировки ЕСТЬ НЕ NULL 
	|			ТОГДА ПулКодов.ПолныйКодМаркировки
	|		ИНАЧЕ Штрихкоды.КМ.ЗначениеШтрихкода
	// #wortmann { 
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee224d0352ee32 
	// Галфинд_Домнышева 2023/07/19
	|		КОНЕЦ
	// } #wortmann
	|	КОНЕЦ КАК ПолныйКодМаркировки
	|ИЗ
	|	Штрихкоды КАК Штрихкоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ УпЛист КАК УпЛист
	|		ПО Штрихкоды.Агрегат = УпЛист.Агрегат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодов
	|		ПО Штрихкоды.КМ.ЗначениеШтрихкода = ПулКодов.КодМаркировки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Штрихкоды.Характеристика.Наименование";
	
	Запрос.УстановитьПараметр("УпаковочныйЛист", УпЛист);
	Запрос.УстановитьПараметр("Агрегат", ШтрихКод);
	Результат = Запрос.Выполнить();
	Таблица = Результат.Выгрузить();
	
	Если ОтборКМ <> Неопределено И КромеКМ = Неопределено Тогда
		ОтобранныеСтроки = Новый Массив;
		Для каждого Эл Из ОтборКМ Цикл
			мСтр = Таблица.НайтиСтроки(Новый Структура("КМ", Эл));
			Для каждого стр Из мСтр Цикл
				ОтобранныеСтроки.Добавить(стр);
			КонецЦикла;
		КонецЦикла;
		ТаблицаСОтбором = Таблица.Скопировать(ОтобранныеСтроки);
		Объект.Товары.Загрузить(ТаблицаСОтбором);
	
	ИначеЕсли ОтборКМ = Неопределено И КромеКМ <> Неопределено Тогда
		Для каждого Эл Из КромеКМ Цикл
			мСтр = Таблица.НайтиСтроки(Новый Структура("КМ", Эл));
			Для каждого стр Из мСтр Цикл
				Таблица.Удалить(стр);
			КонецЦикла;
		КонецЦикла;
		Объект.Товары.Загрузить(Таблица);
		
	ИначеЕсли ОтборКМ <> Неопределено И КромеКМ <> Неопределено Тогда	
		ОтобранныеСтроки = Новый Массив;
		Для каждого Эл Из ОтборКМ Цикл
			
			мСтр = Таблица.НайтиСтроки(Новый Структура("КМ", Эл));
			Для каждого стр Из мСтр Цикл
				ОтобранныеСтроки.Добавить(стр);
			КонецЦикла;
		КонецЦикла;
		ТаблицаСОтбором = Таблица.Скопировать(ОтобранныеСтроки);
		УдаляемыеСтроки = Новый Массив;
		Для каждого Эл Из КромеКМ Цикл
			мСтр = ТаблицаСОтбором.НайтиСтроки(Новый Структура("КМ", Эл));
			Для каждого стр Из мСтр Цикл
				ТаблицаСОтбором.Удалить(стр);
			КонецЦикла;
		КонецЦикла;
		Объект.Товары.Загрузить(ТаблицаСОтбором);
		
	Иначе
		
		Объект.Товары.Загрузить(Таблица);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуТоваровПоДобавленнымКМ(Параметры, ОтборКМ = Неопределено)
	
	ШтрихКод = Параметры["ШтрихКодУпаковки"];
	УпЛист = Параметры["УпаковочныйЛист"];
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоДобавленнымКМ();
	
	Запрос.УстановитьПараметр("УпаковочныйЛист", УпЛист);
	Запрос.УстановитьПараметр("Агрегат", ШтрихКод);
	Результат = Запрос.Выполнить();
	Таблица = Результат.Выгрузить();
	
	Объект.Товары.Загрузить(Таблица);
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаПоДобавленнымКМ()

	Возврат "ВЫБРАТЬ
	|	УпаковочныйЛист.Ссылка КАК УпаковочныйЛист,
	|	УпаковочныйЛист.гф_Комплектация КАК АртикулУпаковки,
	|	ЗаказКлиента.Контрагент КАК Клиент,
	|	Партнеры.Код КАК КодКлиента,
	|	УпаковочныйЛист.Код КАК КодУпЛиста,
	|	УпаковочныйЛист.гф_Агрегация КАК Агрегат
	|ПОМЕСТИТЬ УпЛист
	|ИЗ
	|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	|			ПО (ЗаказКлиента.Партнер = Партнеры.Ссылка)
	|		ПО (УпаковочныйЛист.гф_Заказ = ЗаказКлиента.Ссылка)
	|ГДЕ
	|	УпаковочныйЛист.Ссылка = &УпаковочныйЛист
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УпЛист.АртикулУпаковки КАК АртикулУпаковки,
	|	УпЛист.Агрегат КАК NVE,
	|	УпЛист.Клиент КАК Клиент,
	|	УпЛист.КодКлиента КАК КодКлиента,
	|	ИСТИНА КАК Пометка,
	|	1 КАК КоличествоЭтикеток,
	|	1 КАК КоличествоБазЕдиниц,
	|	ПересортицаТоваров.Ссылка КАК докПересортица,
	|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Ссылка КАК докЗаказНаЭмиссию
	|ПОМЕСТИТЬ ДобавленныеШК
	|ИЗ
	|	УпЛист КАК УпЛист
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПересортицаТоваров КАК ПересортицаТоваров
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ КАК ЗаказНаЭмиссиюКодовМаркировкиСУЗ
	|			ПО ПересортицаТоваров.Ссылка = ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ДокументОснование
	|		ПО УпЛист.УпаковочныйЛист = ПересортицаТоваров.гф_IDКороба
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДобавленныеШК.Пометка КАК Пометка,
	|	ДобавленныеШК.АртикулУпаковки КАК АртикулУпаковки,
	|	спрНоменклатура.Артикул КАК Артикул,
	|	ПулКодовМаркировкиСУЗ.Номенклатура КАК Номенклатура,
	|	ПулКодовМаркировкиСУЗ.Характеристика КАК Характеристика,
	|	ДобавленныеШК.КоличествоБазЕдиниц КАК КоличествоБазЕдиниц,
	|	спрНоменклатура.ЕдиницаИзмерения КАК ЕдИзмБазовая,
	|	ДобавленныеШК.NVE КАК NVE,
	|	спрНоменклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК КМ,
	|	ДобавленныеШК.Клиент КАК Клиент,
	|	ДобавленныеШК.КодКлиента КАК КодКлиента,
	|	ДобавленныеШК.КоличествоЭтикеток КАК КоличествоЭтикеток,
	|	ПулКодовМаркировкиСУЗ.ПолныйКодМаркировки КАК ПолныйКодМаркировки
	|ИЗ
	|	ДобавленныеШК КАК ДобавленныеШК
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спрНоменклатура
	|			ПО (ПулКодовМаркировкиСУЗ.Номенклатура = спрНоменклатура.Ссылка)
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|			ПО (ПулКодовМаркировкиСУЗ.КодМаркировки = ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода)
	|		ПО (ДобавленныеШК.докПересортица = ПулКодовМаркировкиСУЗ.ДокументОснование)
	|			И (ДобавленныеШК.докЗаказНаЭмиссию = ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию)";

КонецФункции // ()



&НаСервере
Функция НайтиШтрикходУпаковкиТоваровИУпаковочныйЛистПоNVE(Агрегат)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК ШтрихКодУпаковки,
	|	УпаковочныйЛист.Ссылка КАК УпаковочныйЛист
	|ИЗ
	|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО (УпаковочныйЛист.гф_Агрегация = ШтрихкодыУпаковокТоваров.Ссылка)
	|ГДЕ
	|	&УсловиеПоПТУ
	|	И ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода = &ЗначениеШтрихкода
	|	И ШтрихкодыУпаковокТоваров.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка)";
	
	Если ЗначениеЗаполнено(Объект.СсылкаНаПТУ) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоПТУ", "УпаковочныйЛист.гф_Поставка = &Поставка");
		Запрос.УстановитьПараметр("Поставка", Объект.СсылкаНаПТУ);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоПТУ", "ИСТИНА");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ЗначениеШтрихкода", Агрегат);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		СтруктураОтвета = Новый Структура("ШтрихКодУпаковки, УпаковочныйЛист", Выборка.ШтрихКодУпаковки, Выборка.УпаковочныйЛист);
		Возврат СтруктураОтвета;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура NVEПриИзмененииНаСервере()
	ДействияПриИзмененииNVE();
КонецПроцедуры

&НаСервере
Функция ПроверитьНаличиеЗаписейОПечати()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПулКодов.ШтрихкодУпаковки КАК NVE,
	|	ПулКодов.Номенклатура КАК Номенклатура,
	|	ПулКодов.ДатаПечатиУниверсальная КАК ВремяПечати
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодов
	|ГДЕ
	|	ПулКодов.ШтрихкодУпаковки.ЗначениеШтрихкода = &NVE
	|	И ПулКодов.Номенклатура = &Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВремяПечати УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	гф_ВремяПечатиNVE.NVE КАК Агрегат,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК КМ,
	|	гф_ВремяПечатиNVE.ВремяПечати КАК Период
	|ИЗ
	|	РегистрСведений.гф_ВремяПечатиNVE КАК гф_ВремяПечатиNVE
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО гф_ВремяПечатиNVE.NVE = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|ГДЕ
	|	гф_ВремяПечатиNVE.NVE.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка)
	|	И гф_ВремяПечатиNVE.NVE.ЗначениеШтрихкода = &NVE
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	Запрос.УстановитьПараметр("NVE", Объект.NVE);
	Запрос.УстановитьПараметр("Номенклатура", Объект.Номенклатура);
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	РС_Время 		= ПакетРезультатов[0].Выгрузить();
	РС_Агрегации 	= ПакетРезультатов[1].Выгрузить();
	
	РезультатПроверки = Новый Структура("ЕстьЗаписи, ПоследняяЗаписьВоВременахПечати, ПоследняяЗаписьВАгрегацииТоваров, СписокКМДляПечати",
	Ложь, Дата(1,1,1), Дата(1,1,1), Неопределено);
	
	Если РС_Время.Количество() = 0 Тогда
		РезультатПроверки.Вставить("ЕстьЗаписи", Ложь);
	Иначе
		РезультатПроверки.Вставить("ЕстьЗаписи", Истина);
		
		РезультатПроверки.Вставить("ПоследняяЗаписьВоВременахПечати", РС_Время[0].ВремяПечати);
		
		Если РС_Агрегации.Количество() > 0 Тогда
			РезультатПроверки.Вставить("ПоследняяЗаписьВАгрегацииТоваров", РС_Агрегации[0].Период);
		Иначе
			РезультатПроверки.Вставить("ПоследняяЗаписьВАгрегацииТоваров", Дата(1,1,1));
		КонецЕсли;
		
		// добавим список КМ, которые после даты печати сидят в Агрегации
		МассивСтруктур = Новый Массив;
		Для Каждого СтрокаТЗ_Агрегация Из РС_Агрегации Цикл
			
			Если СтрокаТЗ_Агрегация.Период >= РезультатПроверки.ПоследняяЗаписьВоВременахПечати Тогда
				
				ОднаСтруктура = Новый Структура("Агрегат, КМ, Период");
				ЗаполнитьЗначенияСвойств(ОднаСтруктура, СтрокаТЗ_Агрегация);
				МассивСтруктур.Добавить(ОднаСтруктура);
				
			Иначе
				Прервать;
			КонецЕсли;	
			
		КонецЦикла;	
		
		РезультатПроверки["СписокКМДляПечати"] = МассивСтруктур;
		
	КонецЕсли;
	
	Возврат РезультатПроверки;

КонецФункции 

&НаСервере
Процедура ЗанестиВРС_ВремяПечати()
	Если ПустаяСтрока(Объект.NVE) ИЛИ Объект.Номенклатура.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТекДата = ТекущаяДатаСеанса();

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Пул.ДокументОснование КАК ДокументОснование,
	|	Пул.ЗаказНаЭмиссию КАК ЗаказНаЭмиссию,
	|	Пул.КодМаркировки КАК КодМаркировки,
	|	Пул.ХешСуммаКодаМаркировки КАК ХешСуммаКодаМаркировки
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК Пул
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК Штрихкоды
	|		ПО Пул.ШтрихкодУпаковки = Штрихкоды.Ссылка
	|ГДЕ
	|	Пул.Номенклатура = &Номенклатура
	|	И Штрихкоды.ЗначениеШтрихкода = &NVE";
	Запрос.УстановитьПараметр("Номенклатура", Объект.Номенклатура);
	Запрос.УстановитьПараметр("NVE", Объект.NVE);
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Набор = РегистрыСведений.ПулКодовМаркировкиСУЗ.СоздатьНаборЗаписей();
			Отбор = Набор.Отбор;
			Для каждого Колонка Из Результат.Колонки Цикл
				ЭлОтбора = Отбор[Колонка.Имя];
				ЭлОтбора.Установить(Выборка[Колонка.Имя]);
			КонецЦикла;
			Набор.Прочитать();
			Для каждого Запись Из Набор Цикл
				Запись["ДатаПечатиУниверсальная"] = ТекДата;
			КонецЦикла;
			Попытка
				Набор.Записать();
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
				ОбщегоНазначения.СообщитьПользователю(
				"Не удалось записать сведения в ""Пул кодов маркировки"" о времени печати NVE по причине: " + ОписаниеОшибки);
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	// vvv Галфинд \ Sakovich 27.06.2023
	//Агрегат = Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту("ЗначениеШтрихкода", Объект.NVE);
	//Если Агрегат.Пустая() Тогда
	//	Возврат;
	//КонецЕсли;
	СтруктураШК_УЛ = НайтиШтрикходУпаковкиТоваровИУпаковочныйЛистПоNVE(Объект.NVE);
	Если СтруктураШК_УЛ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Агрегат = СтруктураШК_УЛ["ШтрихкодУпаковки"];
	УЛ = СтруктураШК_УЛ["УпаковочныйЛист"];
	ПризнакУЛНазначен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УЛ, "гф_NVE_назначен");
	// ^^^ Галфинд \ Sakovich 27.06.2023 
	
	НЗ = РегистрыСведений.гф_ВремяПечатиNVE.СоздатьНаборЗаписей();
	
	НЗ.Отбор.NVE.Установить(Агрегат);
	НовСтр = НЗ.Добавить();
	НовСтр.NVE = Агрегат;
	НовСтр.ВремяПечати 	= ТекДата;
	// vvv Галфинд \ Sakovich 27.06.2023
	НовСтр.Распечатан = Истина;
	НовСтр.Назначен = ПризнакУЛНазначен;
	// ^^^ Галфинд \ Sakovich 27.06.2023
	
	Попытка
		НЗ.Записать();
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю("Не удалось записать данные о времени печати NVE по причине: " + ОписаниеОшибки);
	КонецПопытки;

КонецПроцедуры

&НаСервере
Процедура ЗанестиВРС_ОбработкаИсключений(пNVE, СтатусОбработкиИсключения, ДатаЗаписи = Неопределено) Экспорт

	Если ТипЗнч(пNVE) = Тип("Строка") И ПустаяСтрока(пNVE) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(пNVE) = Тип("СправочникСсылка.ШтрихкодыУпаковокТоваров") И пNVE.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(пNVE) = Тип("Строка") Тогда
		Агрегат = Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту("ЗначениеШтрихкода", пNVE);
	КонецЕсли;
	
	Если ТипЗнч(пNVE) = Тип("СправочникСсылка.ШтрихкодыУпаковокТоваров") Тогда
		Агрегат = пNVE;
	КонецЕсли;
	
	Если Агрегат.Пустая() Тогда
		Возврат;	
	КонецЕсли;
	
	Если ДатаЗаписи = Неопределено Тогда
		ТекДата = ТекущаяДатаСеанса();
	Иначе
		ТекДата = ДатаЗаписи;
	КонецЕсли;
	
	НЗ = РегистрыСведений.гф_ОбработкаИсключений.СоздатьНаборЗаписей();
	Если Не Агрегат.Пустая() Тогда
		НЗ.Отбор.NVE.Установить(Агрегат);
		НЗ.Отбор.Период.Установить(ТекДата);
		
		НовЗапись = НЗ.Добавить();
		НовЗапись.Период = ТекДата;
		НовЗапись.NVE = Агрегат;
		НовЗапись.Статус = СтатусОбработкиИсключения;
		
		Попытка
			НЗ.Записать();
		Исключение
			Сообщить("Не удалось записать данные по штрихкоду " + пNVE + " в регистр ""ОбработкаИсключений""  по причине: " + ОписаниеОшибки());
		КонецПопытки;
	Иначе
		ОбщегоНазначения.СообщитьПользователю(
		"Не удалось записать данные в регистр ""ОбработкаИсключений"". Не найден агрегированный штрихкод упаковки " + пNVE);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеНастроекПечатиСвойствЭтикеток()
	ПроверкаПройдена = Истина;
	Если Не ЗначениеЗаполнено(Объект.НастройкиПечати) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
		НСтр("ru = 'Не заполнены настройки печати свойств этикеток.!'"), ,
		"НастройкиПечати",
		"Объект");
		ПроверкаПройдена = Ложь;
	КонецЕсли;
    Возврат ПроверкаПройдена;
КонецФункции

&НаСервере
Функция ПолучитьПризнакНВЕИзРегистра(Агрегат, Признак)
	NVE_Распечатан = Ложь;
	NVE_Назначен = Ложь;
	
	НЗВремяПечати = РегистрыСведений.гф_ВремяПечатиNVE.СоздатьНаборЗаписей();
	НЗВремяПечати.Отбор.NVE.Установить(Агрегат);
	НЗВремяПечати.Прочитать();
	
	Если НЗВремяПечати.Количество() > 0 Тогда
		NVE_Распечатан = Истина;
		NVE_Назначен = НЗВремяПечати[0].Назначен;
	КонецЕсли;
	
	Если Признак = "Распечатан" Тогда
		Возврат NVE_Распечатан;
	КонецЕсли;
	Если Признак = "Назначен" Тогда
		Возврат NVE_Назначен;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Асинх Процедура ПечатьЭтикеткиНаКлиенте(ИмяКоманды, ПисатьВРегистрВремениПечати = Истина)
	
	ЕстьНастройкиСвойствПечати = ПроверитьЗаполнениеНастроекПечатиСвойствЭтикеток();
	Если Не ЕстьНастройкиСвойствПечати Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураШК_УЛ = НайтиШтрикходУпаковкиТоваровИУпаковочныйЛистПоNVE(Объект.NVE);
	УЛ = СтруктураШК_УЛ["УпаковочныйЛист"];
	
	ПересортицаСтатус = Неопределено;
	Если ИмяКоманды = "ПечатьСNVE" 
		// ++ Галфинд_Домнышева_23_10_2023
		// Действия при автоматич. печати с NVE должны быть аналогичны
		ИЛИ (Объект.АвтоматическаяПечать И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПечатьСNVE) Тогда 
		// -- Галфинд_Домнышева_23_10_2023
		ПересортицаСтатус = ОпределитьЧтоПоУлЕстьПересортицаИКодыПолучены(СтруктураШК_УЛ["ШтрихКодУпаковки"]);
	КонецЕсли;
	
	// vvv Галфинд \ Sakovich 27.06.2023
	//NVE_Распечатан = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(УЛ, "гф_NVE_Распечатан");
	NVE_Распечатан = ПолучитьПризнакНВЕИзРегистра(СтруктураШК_УЛ["ШтрихКодУпаковки"], "Распечатан");
	// ^^^ Галфинд \ Sakovich 27.06.2023 
	
	// vvv Галфинд \ Sakovich 27.06.2023
	//Если NVE_Распечатан 
	//И (Не ИмяКоманды = "ПечататьДобавленныеКМ") Тогда
	НужноЗадаватьВопросОПовторнойПечатиПриЕН = Ложь;
	Если ИмяКоманды = "ПечатьСNVE" 
		// ++ Галфинд_Домнышева_23_10_2023
		// Действия при автоматич. печати с NVE должны быть аналогичны
		ИЛИ (Объект.АвтоматическаяПечать И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПечатьСNVE) Тогда 
		// -- Галфинд_Домнышева_23_10_2023
		Если ТипЗнч(ПересортицаСтатус) = Тип("Структура") 
			И ПересортицаСтатус["Статус"] = ПредопределенноеЗначение("Перечисление.гф_СтатусыИсключений.ЭтикеткиНаклеены") 
			И ПересортицаСтатус["Распечатан"] Тогда
			НужноЗадаватьВопросОПовторнойПечатиПриЕН = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ЗадатьВопросОПовторнойПечати = Ложь;
	// ++ Галфинд_Домнышева_23_10_2023
	//Если NVE_Распечатан И ИмяКоманды = "ПечатьСNVE" И ТипЗнч(ПересортицаСтатус) = Тип("Структура") Тогда
	// Действия при автоматич. печати с NVE должны быть аналогичны
	Если NVE_Распечатан И ТипЗнч(ПересортицаСтатус) = Тип("Структура")
		И (ИмяКоманды = "ПечатьСNVE" ИЛИ (Объект.АвтоматическаяПечать 
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПечатьСNVE)) Тогда
	// -- Галфинд_Домнышева_23_10_2023
		Если НужноЗадаватьВопросОПовторнойПечатиПриЕН Тогда
			ЗадатьВопросОПовторнойПечати = Истина;
		КонецЕсли;
	ИначеЕсли (NVE_Распечатан И Объект.АвтоматическаяПечать) Тогда
		ЗадатьВопросОПовторнойПечати = Истина;
	ИначеЕсли NVE_Распечатан
		И Не ИмяКоманды = "ПечататьДобавленныеКМ" 
		И Не ИмяКоманды = "ПечатьБезNVEСПредварительнымПросмотром"
		И Не ИмяКоманды = "ПечатьСNVEСПредварительнымПросмотром" Тогда
		ЗадатьВопросОПовторнойПечати = Истина;
	КонецЕсли;
	// ^^^ Галфинд \ Sakovich 27.06.2023
	
	// ++ ДомнышеваКР_02_10_2023 
	Если (СтрНайти(ИмяКоманды, "ПечатьБезNVE") > 0  
		И (Объект.АвтоматическаяПечать ИЛИ РаспечатанныйЭкземплярЕдинственный(NVE_Распечатан, УЛ)))
		ИЛИ (СтрНайти(ИмяКоманды, "АвтоматическаяПечать") > 0
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПечатьБезNVE)Тогда
		ЗадатьВопросОПовторнойПечати = Ложь;
	КонецЕсли;
	// -- ДомнышеваКР_02_10_2023
	
	Если ЗадатьВопросОПовторнойПечати Тогда
		Ответ = Ждать ВопросАсинх(
		НСтр("ru = 'Вы действительно хотите повторно распечатать NVE?'", "ru"),
		РежимДиалогаВопрос.ДаНетОтмена,
		30, 
		КодВозвратаДиалога.Нет, 
		"Повторная печать", 
		КодВозвратаДиалога.Нет);	
		
		Если  Ответ = КодВозвратаДиалога.Нет Тогда
			Объект.NVE = "";
			ДействияПриИзмененииNVE(); 
			ТекущийЭлемент = ?(Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПечатьСNVE,
								Элементы.NVE, Элементы.Артикул); // ДомнышеваКР_23_10_2023
			Возврат;
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Или Ответ = Неопределено 
			ИЛИ Ответ = КодВозвратаДиалога.Таймаут Тогда // ДомнышеваКР_23_10_2023
			Возврат;
		Иначе 
			//
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ПисатьВРегистрВремениПечати Тогда
		ЗанестиВРС_ВремяПечати();
	КонецЕсли;
	
	ПечатьЭтикетки(Неопределено, ИмяКоманды);
	
	Если ИмяКоманды = "ПечататьДобавленныеКМ" И РежимПечатиИслючаемыеКМ = 1 Тогда
		ЗанестиВРС_ОбработкаИсключений(Объект.NVE, ПредопределенноеЗначение("Перечисление.гф_СтатусыИсключений.ЭтикеткиНаклеены"));
		Возврат;
	КонецЕсли;
	
	Если ИмяКоманды = "ПечатьСNVE" 
		// ++ Галфинд_Домнышева_24_10_2023
		// Действия при автоматич. печати с NVE должны быть аналогичны
		ИЛИ (Объект.АвтоматическаяПечать И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПечатьСNVE) Тогда 
		// -- Галфинд_Домнышева_24_10_2023
		Если ТипЗнч(ПересортицаСтатус) = Тип("Структура") 
			И ПересортицаСтатус["Статус"] = ПредопределенноеЗначение("Перечисление.гф_СтатусыИсключений.КодыПолучены") Тогда
			ЗанестиВРС_ОбработкаИсключений(Объект.NVE, ПредопределенноеЗначение("Перечисление.гф_СтатусыИсключений.ЭтикеткиНаклеены"));
		КонецЕсли;
	КонецЕсли;
	
	ТабДок = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если ТабДок = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ТабДок.КоличествоЭкземпляров = 1; // Галфинд_ДомнышеваКР_03_10_2023
	
	//Если предварительный просмотр, то запрещаем вывод документа на печать:
	Если ИмяКоманды = "ПечатьСNVEСПредварительнымПросмотром" 
		Или ИмяКоманды = "ПечатьБезNVEСПредварительнымПросмотром" Тогда
		ТабДок.Вывод = ИспользованиеВывода.Запретить;
	КонецЕсли;
	
	Если Объект.АвтоматическаяПечать // Убрано "Тогда", добавлено условие Галфинд_ДомнышеваКР_03_10_2023
		ИЛИ СтрНайти(ИмяКоманды, "АвтоматическаяПечать") > 0 Тогда // Добавлено условие Галфинд_ДомнышеваКР_03_10_2023
		РаспечататьДокументыНаПринтер(ТабДок);
		
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПечатьСNVE Тогда
			ТекущийЭлемент = Элементы.NVE;
			Объект.Артикул = "";
			Объект.NVE = "";
			ДействияПриИзмененииNVE();
			Возврат;
		КонецЕсли;
		
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПечатьБезNVE Тогда
			ТекущийЭлемент = Элементы.Артикул;
			Парам = Новый Структура("ОбрабатываемыйNVE", Объект.NVE);
			ОповещениеОЗакрытии = Новый ОписаниеОповещения(
			"ФормаПодтвержденияNVEПриЗакрытии", ЭтотОбъект);
			ОткрытьФорму("Обработка.гф_РабочееМестоКладовщика.Форма.ФормаПодтвержденияNVE",
			Парам, ЭтотОбъект, , , ,ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ИмяКоманды = "ПечатьСNVEСПредварительнымПросмотром" Тогда
		// предварительный просмотр	
		ТабДок.Показать("Печать с NVE"); 
		ТекущийЭлемент = Элементы.NVE;
		Возврат;
		
	ИначеЕсли ИмяКоманды = "ПечатьСNVE" Тогда
		// напечатать с диалогом выбора принтера
		ТабДок.Вывод = ИспользованиеВывода.Разрешить;
		ТабДок.Напечатать(РежимИспользованияДиалогаПечати.Использовать);
		ТекущийЭлемент = Элементы.NVE;
		Объект.Артикул = "";
		Объект.NVE = "";
		ДействияПриИзмененииNVE();
		Возврат;
		
	ИначеЕсли ИмяКоманды = "ПечатьБезNVEСПредварительнымПросмотром" Тогда
		// предварительный просмотр	
		ТабДок.Показать("Печать без NVE"); 
		ТекущийЭлемент = Элементы.Артикул;
		Возврат;
		
	ИначеЕсли ИмяКоманды = "ПечатьБезNVE" Тогда
		// напечатать с диалогом выбора принтера
		ТабДок.Вывод = ИспользованиеВывода.Разрешить;
		ТабДок.Напечатать(РежимИспользованияДиалогаПечати.Использовать);
		ТекущийЭлемент = Элементы.Артикул;
		Парам = Новый Структура("ОбрабатываемыйNVE", Объект.NVE);
		ОповещениеОЗакрытии = Новый ОписаниеОповещения(
		"ФормаПодтвержденияNVEПриЗакрытии", ЭтотОбъект);
		ОткрытьФорму("Обработка.гф_РабочееМестоКладовщика.Форма.ФормаПодтвержденияNVE",
		Парам, ЭтотОбъект, , , ,ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
		
	Иначе
		Объект.Артикул = "";
		Объект.NVE = "";
		ДействияПриИзмененииNVE();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПризнакНазначенВРегистрВремяПечати()
	СтруктураШтрихкодУпаковочныйЛист = НайтиШтрикходУпаковкиТоваровИУпаковочныйЛистПоNVE(Объект.NVE);
	Набор = РегистрыСведений.гф_ВремяПечатиNVE.СоздатьНаборЗаписей();
	Набор.Отбор.NVE.Установить(СтруктураШтрихкодУпаковочныйЛист["ШтрихКодУпаковки"]);
	Набор.Прочитать();
	Для каждого Запись Из Набор Цикл
		Запись.Назначен = Истина;
	КонецЦикла;
	Набор.Записать();
КонецПроцедуры


&НаКлиенте
Процедура ФормаПодтвержденияNVEПриЗакрытии(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено И Результат["НазначениеПодтверждено"] Тогда
		ЗаписатьNVEПризнакРаспечатанНазначен(Объект.NVE, "гф_NVE_назначен");
		Объект.Артикул = "";
		Объект.NVE = "";
		ДействияПриИзмененииNVE();
		ЭтотОбъект.ТекущийЭлемент = Элементы.Артикул;
		
		// ++ Галфинд ВолковЕВ 26.06.2023 Для записи NVE в регистр необходимо значение, оно используется в процедуре ЗаписатьПризнакНазначенВРегистрВремяПечати() 
		Объект.NVE = Результат.NVE;
		// -- Галфинд ВолковЕВ 26.06.2023
		ЗаписатьПризнакНазначенВРегистрВремяПечати();
	Иначе
		//отменили подтверждение или просто закрыли форму подтверждения или не отсканировали NVE...
		//Результат = Неопределено ИЛИ Не Результат["НазначениеПодтверждено"]
		Если Результат <> Неопределено Тогда
			Шаблон = "NVE: %1 не подтвержден!";
			ТекстСообщения = СтрШаблон(Шаблон, ?(Результат["NVE"] = "", "<пустое значение NVE>", Результат["NVE"]));
			Если Результат["NVE"] <> Объект.NVE Тогда
				ТекстСообщения = ТекстСообщения + " Ожидается: " + Объект.NVE;
			КонецЕсли;
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ВопросПодтвердитьПовторноЗавершение",
		ЭтотОбъект);
		ПоказатьВопрос(ОповещениеОЗавершении, 
		"Подтвердить повторно?", РежимДиалогаВопрос.ДаНетОтмена, , 
		КодВозвратаДиалога.Да, "Повторное подтверждение");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросПодтвердитьПовторноЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Парам = Новый Структура("ОбрабатываемыйNVE", Объект.NVE);
		ОповещениеОЗакрытии = Новый ОписаниеОповещения(
		"ФормаПодтвержденияNVEПриЗакрытии", ЭтотОбъект);
		ОткрытьФорму("Обработка.гф_РабочееМестоКладовщика.Форма.ФормаПодтвержденияNVE",
		Парам, ЭтотОбъект, , , ,ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	Иначе
		//Запросить повторную печать
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ВопросЗапроситьПовторнуюПечатьЗавершение",
		ЭтотОбъект);
		ПоказатьВопрос(ОповещениеОЗавершении, 
		"Распечатать повторно?", РежимДиалогаВопрос.ДаНетОтмена, , 
		КодВозвратаДиалога.Да, "Повторная печать");
       	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗапроситьПовторнуюПечатьЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		//перезаполнить таблицу товары
		ЗаполнитьТоварыПоОдномуNVE();
		// ++ Галфинд_ДомнышеваКР_04_10_2023
		// при запросе повторной печати и положительном ответе нужно сразу отправлять на печать
		//Если Объект.АвтоматическаяПечать Тогда
			ПечатьЭтикеткиНаКлиенте("АвтоматическаяПечать");
		//КонецЕсли;
		// -- Галфинд_ДомнышеваКР_04_10_2023
	Иначе
		//вывести ошибку
		ОповещениеОЗавершении  = Новый ОписаниеОповещения("ПредупреждениеНеназначенныеNVEЗавершение", ЭтотОбъект);
		ПоказатьПредупреждение(ОповещениеОЗавершении, 
		"Назначение NVE не подтверждено.
		|Повторная печать не запрошена.", , "Ошибка");
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура NVEПриИзменении(Элемент)
	ПоместитьВоВременноеХранилище(Неопределено, АдресРезультата);
	NVEПриИзмененииНаСервере();
	
	Если Объект.Товары.Количество() = 0 
		ИЛИ Объект.Номенклатура.Пустая() Тогда
		Возврат;
	КонецЕсли;

	Если Объект.АвтоматическаяПечать Тогда
		ПечатьЭтикеткиНаКлиенте("АвтоматическаяПечать");
		// ++ Галфинд_Домнышева_10_10_2023 
		// Печать по команде "АвтоматическаяПечать" теперь выполняется из проц. ПечатьЭтикеткиНаКлиенте 
		//ТабДок = ПолучитьИзВременногоХранилища(АдресРезультата);
		//Если ТабДок <> Неопределено Тогда
		//	РаспечататьДокументыНаПринтер(ТабДок);
		//КонецЕсли;
		// -- Галфинд_Домнышева_10_10_2023
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеквизитыФормы(ТекущаяСтраница)
	Объект.Товары.Очистить();
	Объект.NVE = "";
	Объект.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	Объект.Артикул = "";
	Объект.СсылкаНаПТУ = ПредопределенноеЗначение("Документ.ПриобретениеТоваровУслуг.ПустаяСсылка");
	Объект.УпаковочныйЛист = ПредопределенноеЗначение("Документ.УпаковочныйЛист.ПустаяСсылка");
	УбратьТЧ_СканированиеКМ = "";
	ДобавитьТЧ_ОтсканируйтеШК = "";
	Объект.Товары_УправлениеПоставкой.Очистить();
	
	Если Не ТекущаяСтраница.Имя = "СтраницаУправлениеПоставкой" Тогда
		Объект.НомерИнвойса = "";
	Иначе
		Если ЗначениеЗаполнено(Объект.НомерИнвойса) Тогда
			ЗаполнениеУправлениеПоставкойПоНомеруИнвойсаИлиПТУАвто("Инвойс");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ВыполнитьДействияБлокировкаАртикуловПоNVE("", "Удалить", Истина);
	
	ОчиститьРеквизитыФормы(ТекущаяСтраница);
	
	Если ТекущаяСтраница.Имя = "СтраницаПечатьСNVE"
		ИЛИ ТекущаяСтраница.Имя = "СтраницаПечатьБезNVE" Тогда
		УстановитьВидимостьДоступностьПечатьСNVE();
	КонецЕсли;
	
	Если ТекущаяСтраница.Имя = "СтраницаПечатьСNVE" Тогда
		ЭтотОбъект.ТекущийЭлемент = Элементы.NVE;
	КонецЕсли;
	
	Если ТекущаяСтраница.Имя = "СтраницаПечатьБезNVE" Тогда
		ЭтотОбъект.ТекущийЭлемент = Элементы.НомерИнвойса;
	КонецЕсли;

	Если ТекущаяСтраница.Имя = "СтраницаОбработкаИсключений" Тогда
		ЭтотОбъект.ТекущийЭлемент = Элементы.NVE1;
		Элементы.СписокЗаказыНаЭмиссию.Обновить();
		ОбновитьСтатусыИсключений(Команды["ОбновитьСтатусыИсключений"]);
		ДоступностьРежимаПечатиИсключений();
		ПодключитьОбработчикОжидания("ОбработкаДанныхПоИсключениям", 1, Истина);
	Иначе
		ОтключитьОбработчикОжидания("ОбработкаДанныхПоИсключениям");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НомерИнвойсаПриИзмененииНаСервере()
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПриобретениеТоваровУслуг.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|ГДЕ
	|	ПриобретениеТоваровУслуг.Номер = &Номер");
	Запрос.УстановитьПараметр("Номер", Объект.НомерИнвойса);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		// ++ Галфинд_ДомнышеваКР_19_10_2023
		Если Выборка.Количество() > 1 Тогда
			Объект.СсылкаНаПТУ = Документы.ПриобретениеТоваровУслуг.ПустаяСсылка();
			СписокПТУ.ЗагрузитьЗначения(Результат.Выгрузить().ВыгрузитьКолонку("Ссылка"));
		Иначе 
		// -- Галфинд_ДомнышеваКР_19_10_2023
		Выборка.Следующий();
		Объект.СсылкаНаПТУ = Выборка.Ссылка;
		КонецЕсли; // Галфинд_ДомнышеваКР_19_10_2023
	Иначе
		Объект.СсылкаНаПТУ = Документы.ПриобретениеТоваровУслуг.ПустаяСсылка();
		Объект.Артикул = "";
		Объект.Товары.Очистить();
		Объект.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		Объект.NVE = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НомерИнвойсаПриИзменении(Элемент)
	
	СписокПТУ.Очистить(); // Галфинд_ДомнышеваКР_20_10_2023

	ВыполнитьДействияБлокировкаАртикуловПоNVE("", "Удалить", Истина);
	
	НомерИнвойсаПриИзмененииНаСервере(); 
	// ++ Галфинд_ДомнышеваКР_20_10_2023
	Если СписокПТУ.Количество() > 0 Тогда
		 ВыбратьПТУ();
	Иначе
	// -- Галфинд_ДомнышеваКР_20_10_2023
	Если ЗначениеЗаполнено(Объект.СсылкаНаПТУ) Тогда
		ТекущийЭлемент = Элементы.Артикул;
	Иначе
		ТекущийЭлемент = Элементы.НомерИнвойса;
		Возврат;
	КонецЕсли; 
	КонецЕсли; // Галфинд_ДомнышеваКР_20_10_2023
КонецПроцедуры

&НаСервере
Процедура ПривестиУбратьТЧ_СканированиеКМПоМаске()
	
	// "(01)04059256500501(21)(.Oz6yO<O*SC("  устанавливает "(01)04059256500501(21)(.Oz6yO<O*SC("
	// "010405925650050121(.Oz6yO<O*SC("      устанавливает "(01)04059256500501(21)(.Oz6yO<O*SC("
	// добавляются скобки у "(01)" и "(21)"
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СОКРЛП(&П) КАК КМ,
	|	ЛОЖЬ КАК Преобразован
	|ГДЕ
	|	СОКРЛП(&П) ПОДОБНО ""(01)[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9](21)%""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""(01)"" + (ВЫРАЗИТЬ(ПРАВ(ЛЕВ(СОКРЛП(&П), 16), 14) КАК СТРОКА(14))) + 
	// Галфинд_Домнышева_11_10_2023_Кол-во символов в штрихкоде всего 31, после "(21)" только 13 символов - поправила
	|	""(21)"" + (ВЫРАЗИТЬ(ПРАВ(&П, ДЛИНАСТРОКИ(&П) - 18) КАК СТРОКА(13))),
	|	ИСТИНА
	|ГДЕ
	|	СОКРЛП(&П) ПОДОБНО ""01[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]21%""
	|";
	Запрос.УстановитьПараметр("П", УбратьТЧ_СканированиеКМ);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		
		УбратьТЧ_СканированиеКМ = "";
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		УбратьТЧ_СканированиеКМ = Выборка["КМ"];
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПривестиАтрикулПоМаске()
	// "1-2-34567-89-012/345"  устанавливает "1-2-34567-89-012/345" (то есть ничего не изменяется)
	// "123456789012345"       устанавливает "1-2-34567-89-012/345" (добавляются знаки "-" и "/" в установленные позиции)
	
	// ++ Галфинд СадомцевСА 31.10.2023 Добавил маску для Артикула
	// "1-24435-41-001/220"
	// "12443541001220"
	// -- Галфинд СадомцевСА 31.10.2023
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СОКРЛП(&П) КАК Артикул,
	|	ЛОЖЬ КАК Преобразован
	|ГДЕ
	|	СОКРЛП(&П) ПОДОБНО ""[0-9]-[0-9]-[0-9][0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9]/[0-9][0-9][0-9]""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	(ВЫРАЗИТЬ(ЛЕВ(СОКРЛП(&П), 1) КАК СТРОКА(1))) + ""-"" + 
	|	(ВЫРАЗИТЬ(ПРАВ(ЛЕВ(СОКРЛП(&П), 2), 1) КАК СТРОКА(1))) + ""-"" + 
	|	(ВЫРАЗИТЬ(ПРАВ(ЛЕВ(СОКРЛП(&П), 7), 5) КАК СТРОКА(5))) + ""-"" + 
	|	(ВЫРАЗИТЬ(ПРАВ(ЛЕВ(СОКРЛП(&П), 9), 2) КАК СТРОКА(2))) + ""-"" + 
	|	(ВЫРАЗИТЬ(ПРАВ(ЛЕВ(СОКРЛП(&П), 12), 3) КАК СТРОКА(3))) + ""/"" + 
	|	(ВЫРАЗИТЬ(ПРАВ(ЛЕВ(СОКРЛП(&П), 15), 3) КАК СТРОКА(3))),
	|	ИСТИНА
	|ГДЕ
	|	СОКРЛП(&П) ПОДОБНО ""[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]""
	// ++ Галфинд СадомцевСА 31.10.2023 Добавил маску для Артикула
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СОКРЛП(&П),
	|	ЛОЖЬ
	|ГДЕ
	|	СОКРЛП(&П) ПОДОБНО ""[0-9]-[0-9][0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9]/[0-9][0-9][0-9]""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	(ВЫРАЗИТЬ(ЛЕВ(СОКРЛП(&П), 1) КАК СТРОКА(1))) + ""-"" + 
	|	(ВЫРАЗИТЬ(ПРАВ(ЛЕВ(СОКРЛП(&П), 6), 5) КАК СТРОКА(5))) + ""-"" + 
	|	(ВЫРАЗИТЬ(ПРАВ(ЛЕВ(СОКРЛП(&П), 8), 2) КАК СТРОКА(2))) + ""-"" + 
	|	(ВЫРАЗИТЬ(ПРАВ(ЛЕВ(СОКРЛП(&П), 11), 3) КАК СТРОКА(3))) + ""/"" + 
	|	(ВЫРАЗИТЬ(ПРАВ(ЛЕВ(СОКРЛП(&П), 14), 3) КАК СТРОКА(3))),
	|	ИСТИНА
	|ГДЕ
	|	СОКРЛП(&П) ПОДОБНО ""[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]""
	// -- Галфинд СадомцевСА 31.10.2023
	|";
	Запрос.УстановитьПараметр("П", Объект.Артикул);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		
		Объект.Артикул = "";
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Объект.Артикул = Выборка["Артикул"];
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьАртикулНаСервере()
	
	АртикулКандидат = Объект.Артикул;
	ПривестиАтрикулПоМаске();

	Если СокрЛП(Объект.Артикул = "") Тогда
		Объект.Артикул = "";
		Объект.Товары.Очистить();
		ОбщегоНазначения.СообщитьПользователю(
		"Ошибка. Не удалось распознать вариант комплектации по артикулу: " +
		АртикулКандидат);
		Возврат Ложь;
	КонецЕсли;
		
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВариантыКомплектацииНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
	|ГДЕ
	|	ВариантыКомплектацииНоменклатуры.Наименование = &Наименование");
	Запрос.УстановитьПараметр("Наименование", Объект.Артикул);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ОбщегоНазначения.СообщитьПользователю("Не найден вариант комлектации номенклаутры по артикулу " 
		+ Объект.Артикул);
		Возврат Ложь;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Вариант = Выборка["Ссылка"];
	Объект.Номенклатура = Вариант["Владелец"];
	
	ДокПТУ = Объект.СсылкаНаПТУ;
	
	тзПродукцияВКоробах = ДокПТУ.гф_ПродукцияВКоробах.Выгрузить();
	СтруктураПоиска = Новый Структура("ВариантКомплектации", Вариант);
	мСтрокПоВарианту = тзПродукцияВКоробах.НайтиСтроки(СтруктураПоиска);
	Если мСтрокПоВарианту.Количество() = 0  Тогда
		ОбщегоНазначения.СообщитьПользователю(
		"Отсутствует NVE с артикулом " + Вариант + " в данной поставке!");
		Возврат Ложь;	
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПолучитьМассивыНВЕСПризнакамиРаспечатанНазначен()
	СтруктураВозврата = Новый Структура("мНераспечатанных, мНеназначенных, мНВЕ");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Короба.IDКороба КАК NVE,
	// vvv Галфинд \ Sakovich 27.06.2023	
	//|	Короба.IDКороба.гф_NVE_распечатан КАК Распечатан,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(гф_ВремяПечатиNVE.NVE, ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Распечатан,
	// ^^^ Галфинд \ Sakovich 27.06.2023 
	|	Короба.IDКороба.гф_NVE_назначен КАК Назначен,
	|	Короба.IDКороба.Код КАК КодКороба
	|ПОМЕСТИТЬ Короба
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.гф_ПродукцияВКоробах КАК Короба
	// vvv Галфинд \ Sakovich 27.06.2023
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гф_ВремяПечатиNVE КАК гф_ВремяПечатиNVE
	|		ПО (Короба.IDКороба.гф_Агрегация = гф_ВремяПечатиNVE.NVE)
	// ^^^ Галфинд \ Sakovich 27.06.2023 
	|ГДЕ
	|	Короба.Ссылка = &Ссылка
	|	И Короба.ВариантКомплектации.Наименование = &Артикул
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////  
	|ВЫБРАТЬ
	|	Короба.NVE КАК NVE,
	|	Короба.Распечатан КАК Распечатан,
	|	Короба.Назначен КАК Назначен 
	|	Поместить Доступные
	|ИЗ
	|	Короба КАК Короба
	// vvv Галфинд \ Sakovich 27.06.2023
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гф_БлокировкаАртикуловПоNVE КАК гф_БлокировкаАртикуловПоNVE
	//|		ПО (Короба.КодКороба = гф_БлокировкаАртикуловПоNVE.NVE)
	//|			И (НЕ гф_БлокировкаАртикуловПоNVE.Пользователь = &Пользователь)
	//|ГДЕ
	//|	гф_БлокировкаАртикуловПоNVE.NVE ЕСТЬ NULL 
	// ^^^ Галфинд \ Sakovich 27.06.2023 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Короба.NVE КАК NVE,
	|	Короба.Распечатан КАК Распечатан,
	|	Короба.Назначен КАК Назначен
	|ИЗ
	|	Доступные КАК Короба
	|ГДЕ
	|	НЕ Короба.Распечатан
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Короба.NVE КАК NVE,
	|	Короба.Распечатан КАК Распечатан,
	|	Короба.Назначен КАК Назначен
	|ИЗ
	|	Доступные КАК Короба
	|ГДЕ
	|	НЕ Короба.Назначен";
	Запрос.УстановитьПараметр("Ссылка", Объект.СсылкаНаПТУ);
	Запрос.УстановитьПараметр("Артикул", Объект.Артикул);
	// vvv Галфинд \ Sakovich 27.06.2023
	//Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	// ^^^ Галфинд \ Sakovich 27.06.2023 
	ПакетРезультатов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	СтруктураВозврата["мНВЕ"] = ПакетРезультатов[1].Выгрузить().ВыгрузитьКолонку("NVE");
	СтруктураВозврата["мНераспечатанных"] = ПакетРезультатов[2].Выгрузить().ВыгрузитьКолонку("NVE");
	СтруктураВозврата["мНеназначенных"] = ПакетРезультатов[3].Выгрузить().ВыгрузитьКолонку("NVE");
	Возврат СтруктураВозврата;
КонецФункции

&НаКлиенте
Процедура ПредупреждениеНеназначенныеNVEЗавершение(ДополнительныеПараметры) Экспорт
	Объект.Товары.Очистить();
	Объект.Артикул = "";
	Объект.Номенклатура = "";
	ЭтотОбъект.ТекущийЭлемент = Элементы.Артикул;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТоварыПоОдномуNVE()

		СтруктураШтрихкодУпаковочныйЛист = НайтиШтрикходУпаковкиТоваровИУпаковочныйЛистПоNVE(Объект.NVE);
		
		Если СтруктураШтрихкодУпаковочныйЛист = Неопределено Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю("Не найдена мультитоварная упаковка по значению NVE: " 
			+ Объект.NVE);
			Возврат;
		КонецЕсли; 
		
		Если СтруктураШтрихкодУпаковочныйЛист["УпаковочныйЛист"].Пустая() Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю("Не найден упаковочный лист по значению NVE: " 
			+ Объект.NVE);
			Возврат;
		КонецЕсли;
		
		Объект.Номенклатура = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(
		СтруктураШтрихкодУпаковочныйЛист["УпаковочныйЛист"],
		"гф_Комплектация.Владелец");
		ЗаполнитьТаблицуТоваров(СтруктураШтрихкодУпаковочныйЛист);
		Если Объект.Товары.Количество() > 0 Тогда
			ЗанестиВРС_ВремяПечати();
		Иначе
			ПредупреждениеНеназначенныеNVEЗавершение(Неопределено);
		КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросОдинНеназначеныйNVEЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Товары.Очистить();
		Объект.NVE = ДополнительныеПараметры;
		ЗаполнитьТоварыПоОдномуNVE();
		
		Если Объект.Товары.Количество() = 0 
			ИЛИ Объект.Номенклатура.Пустая() Тогда
			Возврат;
		Иначе
			Если Объект.АвтоматическаяПечать Тогда
				ПечатьПоNVE("АвтоматическаяПечать");
			КонецЕсли
		КонецЕсли;
		
	Иначе
		ПредупреждениеНеназначенныеNVEЗавершение(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФормаВыбораНеназначенныхNVEПриЗакрытии(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		Объект.Товары.Очистить();
		Объект.NVE = Результат;
		ЗаполнитьТоварыПоОдномуNVE();
		
		Если Объект.Товары.Количество() = 0 
			ИЛИ Объект.Номенклатура.Пустая() Тогда
			Возврат;
		Иначе
			// ++ Галфинд_ДомнышеваКР_04_10_2023
			// Не нужно задавать вопрос по повторной печати после выбора подтвержденного NVE
			// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee60fe95ee4f46 
			//Если Объект.АвтоматическаяПечать Тогда
				ПечатьПоNVE("АвтоматическаяПечать");
			//КонецЕсли
			// -- Галфинд_ДомнышеваКР_04_10_2023
		КонецЕсли;	
	Иначе
		ПредупреждениеНеназначенныеNVEЗавершение(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АртикулПриИзменении(Элемент)
	
	ВыполнитьДействияБлокировкаАртикуловПоNVE("", "Удалить", Истина);
	
	Если Объект.СсылкаНаПТУ.Пустая() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не найден документ ""Приобретение товаров и услуг"" по номеру " 
		+ "инвойса " + Объект.НомерИнвойса, , "СсылкаНаПТУ", Объект);
		Возврат;
	КонецЕсли;
	ОчиститьСообщения();
	РезультатПроверкиАртикула = ПроверитьАртикулНаСервере();

	Если РезультатПроверкиАртикула Тогда
		
		Если ТекущийАртикулПечатьБезNVE <> Объект.Артикул Тогда
			ТекущийАртикулПечатьБезNVEСписокУжеВыведенныНаЭкранРанее.Очистить();
			ТекущийАртикулПечатьБезNVE = Объект.Артикул;
		КонецЕсли;
		
		СвойстваНВЕ = ПолучитьМассивыНВЕСПризнакамиРаспечатанНазначен();
		ЕстьНераспечатанные = СвойстваНВЕ["мНераспечатанных"].ВГраница() > -1;
		ЕстьНеназначенные =  СвойстваНВЕ["мНеназначенных"].ВГраница() > -1;
		
		// vvv Галфинд \ Sakovich 27.06.2023
		//// ++ Галфинд ВолковЕВ 26.06.2023
		////Если Не ЕстьНераспечатанные И Не ЕстьНеназначенные Тогда
		//Если Не ЕстьНеназначенные Или (Не ЕстьНераспечатанные И Не ЕстьНеназначенные) Тогда
		//// -- Галфинд ВолковЕВ 26.06.2023
		Если Не ЕстьНераспечатанные И Не ЕстьНеназначенные Тогда
		// ^^^ Галфинд \ Sakovich 27.06.2023 
		
			// все НВЕ по артикулу назначены и распечатаны
			ТекстПредупреждения = "Все NVE по варианту комплектации 
			|" + Объект.Артикул + " назначены.
			|Для повторной печати воспользуйтесь вкладкой ""Печать с NVE""";
			Оповещение = Новый ОписаниеОповещения("ПредупреждениеНеназначенныеNVEЗавершение", ЭтотОбъект, СвойстваНВЕ);
			ПоказатьПредупреждение(Оповещение, ТекстПредупреждения, , "Печать без NVE");
			Возврат;
		КонецЕсли;
		
		// vvv Галфинд \ Sakovich 27.06.2023
		//// ++ Галфинд ВолковЕВ 26.06.2023
		////Если Не ЕстьНераспечатанные И ЕстьНеназначенные Тогда
		//Если ЕстьНеназначенные Или (Не ЕстьНераспечатанные И ЕстьНеназначенные) Тогда
		//// -- Галфинд ВолковЕВ 26.06.2023
		Если Не ЕстьНераспечатанные И ЕстьНеназначенные Тогда
		// ^^^ Галфинд \ Sakovich 27.06.2023 
		
			// все НВЕ по артикулу распечатаны и есть неназначенные
			Если СвойстваНВЕ["мНеназначенных"].ВГраница() > 0 Тогда
				// неназначенных НВЕ больше одного,
				//показать форму выбора NVE		
				ОповещениеОЗакрытии = Новый ОписаниеОповещения("ФормаВыбораНеназначенныхNVEПриЗакрытии", ЭтотОбъект);
				Парам = Новый Структура("мНеназначенных", СвойстваНВЕ["мНеназначенных"]);
				ОткрытьФорму("Обработка.гф_РабочееМестоКладовщика.Форма.ФормаВыбораНеназначенныхNVE",
				Парам, ЭтотОбъект, , , , ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				Возврат;
			Иначе
				// Неназначенный NVE единственный, 
				// задать вопрос и если ОК, то заполнить по нему таб.часть Товары:
				КодNVE = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(
				СвойстваНВЕ["мНеназначенных"][0], "Код");
				// ++ Галфинд_ДомнышеваКР_03_10_2023
				// необходимо заполнятьТЧ и отправлять на печать без вопросов.
				// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee60fe95ee4f46
				//Оповещение = Новый ОписаниеОповещения("ВопросОдинНеназначеныйNVEЗавершение", ЭтотОбъект, КодNVE);
				//ПоказатьВопрос(Оповещение, "Вы хотите по неназначенному " + КодNVE + "
				//|повторно выполнить печать и подтвердить назначение NVE?",
				//РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да, "Действия с неназначенным NVE");
				ПечатьОдинНеназначеныйNVE(КодNVE);
				// -- Галфинд_ДомнышеваКР_03_10_2023
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьНераспечатанные Тогда
			
			NVEДляЗаполнения = Неопределено;
			ЭлСписка = Неопределено;
			ПроверенПоследнийЭлемент = Ложь;
			мНераспечатанные = СвойстваНВЕ["мНераспечатанных"];
			
			Для Индекс = 0 По мНераспечатанные.ВГраница()  Цикл
				NVEДляЗаполнения = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(мНераспечатанные[Индекс], "Код");
				ЭлСписка = ТекущийАртикулПечатьБезNVEСписокУжеВыведенныНаЭкранРанее.НайтиПоЗначению(NVEДляЗаполнения);
				
				Если Индекс = мНераспечатанные.ВГраница() Тогда
					ПроверенПоследнийЭлемент = Истина;
				КонецЕсли;

				Если ЭлСписка = Неопределено Тогда
					Прервать;	
				КонецЕсли;
			КонецЦикла;
			
			Если  ЭлСписка = Неопределено И NVEДляЗаполнения <>Неопределено Тогда
				Объект.NVE = NVEДляЗаполнения;
				
				ВыполнитьДействияБлокировкаАртикуловПоNVE(Объект.NVE, "Записать");
				
				ЗаполнитьТоварыПоОдномуNVE();
				
				ТекущийАртикулПечатьБезNVEСписокУжеВыведенныНаЭкранРанее.Добавить(NVEДляЗаполнения);
				Если Объект.Товары.Количество() = 0 
					ИЛИ Объект.Номенклатура.Пустая() Тогда
					Возврат;
				Иначе
					Если Объект.АвтоматическаяПечать Тогда
						ПечатьПоNVE("АвтоматическаяПечать");
					КонецЕсли
				КонецЕсли;
			КонецЕсли;
			
			Если ПроверенПоследнийЭлемент = Истина Тогда
				ТекущийАртикулПечатьБезNVEСписокУжеВыведенныНаЭкранРанее.Очистить();	
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПредупреждениеНеназначенныеNVEЗавершение(Неопределено);
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

// Параметры:
// NVE - строка
// Действие - строка - "Найти, "Записать", "Удалить"
//          - Неопределено
//          - УдалитьВсеЗаписиТекущегоПользователя - удаляет все записи текущего пользователя
// ВозвращаемоеЗначение - структура - содержит значение полей регистира
//                       - Булево - результат обработки (поиска, добавления или удаления записи в регистр)
&НаСервере
Функция ВыполнитьДействияБлокировкаАртикуловПоNVE(
	NVE,
	Действие = Неопределено,
	УдалитьВсеЗаписиТекущегоПользователя = Истина)
	
	// vvv Галфинд \ Sakovich 27.06.2023
	// не используется
	Возврат Истина;
	// ^^^ Галфинд \ Sakovich 27.06.2023 
	
	лПользователь = Пользователи.АвторизованныйПользователь();
	
	Если Действие = Неопределено Тогда
		Действие = "Найти";
	КонецЕсли;
	МенеджерЗаписи = РегистрыСведений.гф_БлокировкаАртикуловПоNVE.СоздатьМенеджерЗаписи();
	МенеджерЗаписи["NVE"] = NVE;
	МенеджерЗаписи.Прочитать();
	
	Если Действие = "Найти" Тогда
		Если МенеджерЗаписи.Выбран() Тогда
			СтруктураВозврата = Новый Структура("NVE, Пользователь, Дата",
			NVE, МенеджерЗаписи["Пользователь"], МенеджерЗаписи["Дата"]);
			Возврат СтруктураВозврата;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Действие = "Записать" Тогда
			Если Не(СокрЛП(NVE)) = "" Тогда
				МенеджерЗаписи["NVE"] = NVE;
				МенеджерЗаписи["Пользователь"] = лПользователь;
				МенеджерЗаписи["Дата"] = ТекущаяДатаСеанса();
			КонецЕсли;
		Попытка
			МенеджерЗаписи.Записать(Истина);
			Возврат Истина;
		Исключение
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Если Действие = "Удалить" И УдалитьВсеЗаписиТекущегоПользователя = Ложь Тогда
		Если МенеджерЗаписи.Выбран() Тогда
			Попытка
				МенеджерЗаписи.Удалить();
				Возврат Истина;
			Исключение
				Возврат Ложь;
			КонецПопытки;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Действие = "Удалить" И УдалитьВсеЗаписиТекущегоПользователя Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Блок.NVE КАК NVE,
		|	Блок.Пользователь КАК Пользователь
		|ИЗ
		|	РегистрСведений.гф_БлокировкаАртикуловПоNVE КАК Блок
		|ГДЕ
		|	Блок.Пользователь = &Пользователь";
		Запрос.УстановитьПараметр("Пользователь", лПользователь);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		РезультатУдаленияЗаписейПользователя = Истина;
		Пока Выборка.Следующий() Цикл
			Если Выборка["Пользователь"] = лПользователь Тогда
				МенеджерЗаписи["NVE"] = Выборка["NVE"];
				МенеджерЗаписи.Прочитать();
				Если МенеджерЗаписи.Выбран() Тогда
					Если МенеджерЗаписи["Пользователь"] = лПользователь Тогда
						Попытка
							МенеджерЗаписи.Удалить();
						Исключение
							РезультатУдаленияЗаписейПользователя = Ложь;
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		Возврат РезультатУдаленияЗаписейПользователя;
	КонецЕсли;

КонецФункции

#Область Обработка_исключений

&НаСервере
Функция ПроверитьДублиТЧНаСервере(ИмяТч, ИмяКолонки)
	ЕстьДубли = Ложь;
	тз = Объект[ИмяТч].Выгрузить();
	тз.Колонки.Добавить("_сч", Новый ОписаниеТипов("Число",
	Новый КвалификаторыЧисла(4, 0, ДопустимыйЗнак.Неотрицательный)));
	тз.ЗаполнитьЗначения(1, "_сч");
	тз.Свернуть(ИмяКолонки, "_сч");
	Для каждого стр Из тз Цикл
		Если стр["_сч"] > 1 Тогда
			ЕстьДубли = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	Возврат ЕстьДубли;
КонецФункции

&НаКлиенте
Процедура ГотовоУдалить(Команда)
	Если СокрЛП(Объект.NVE) = "" Тогда
		ПоказатьПредупреждение(, "Не заполнен NVE!", 10);
		Возврат;
	КонецЕсли;
	
	//Если Объект.ТЧ_Убрать.Количество() = 0 Тогда
	//	ПоказатьПредупреждение(, "Не заполнены удаляемые КМ!", 10);
	//	Возврат;
	//КонецЕсли;
	
	ЕстьДубли = ПроверитьДублиТЧНаСервере("ТЧ_Убрать", "КМ");
	
	Если ЕстьДубли Тогда
		ПоказатьПредупреждение(, "Удалите дублирующиеся КМ!", 10);
		Возврат;
	КонецЕсли;
	
	// #wortmann {
	// Проверка на наличие КМ в РС гф_ПересортицаУдаляемыеШК (защита от повторной записи)
	// Галфинд_Домнышева 2023/12/14
	ЕстьКМ = ПроверитьКМВПересортицаУдаляемыеШК();
	
	Если ЕстьКМ.ЕстьКМ Тогда
		ПоказатьПредупреждение(, "Данные КМ уже есть в РС ПересортицаУдаляемыеШК! " + ЕстьКМ.ПеречислениеКМ, 10);
		Возврат;
	КонецЕсли;
    // } #wortmann
	
	ДопПараметры = Новый Структура("ИмяКоманды", Команда.Имя);
	Оповещение = Новый ОписаниеОповещения("ВопросПредупреждениеУдалениеКМЗавершение", ЭтотОбъект, ДопПараметры);
	
	КоличествоУдаляемых = Объект.ТЧ_Убрать.Количество();
	Текст = "Подтвердите удаление " +КоличествоУдаляемых + " КМ.";
	ФорматированноеСообщение = Новый ФорматированнаяСтрока(Текст, Новый Шрифт(, 24, Истина));
	ПоказатьВопрос(Оповещение, 
		ФорматированноеСообщение, 
		РежимДиалогаВопрос.ДаНетОтмена, 
		30, 
		КодВозвратаДиалога.Нет, , КодВозвратаДиалога.Отмена);

КонецПроцедуры

&НаКлиенте
Процедура ВопросПредупреждениеУдалениеКМЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросЕстьНемаркированныйGTINЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, 
		НСтр("ru = 'Есть немаркированные GTIN?'"), 
		РежимДиалогаВопрос.ДаНетОтмена, 
		0, 
		КодВозвратаДиалога.Да);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЕстьНемаркированныйGTINЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Элементы.ДобавитьТЧ_ОтсканируйтеШК.ТолькоПросмотр = Ложь;
		Элементы.ДобавитьТЧ_ОтсканируйтеШК.Доступность = Истина;
		ЭтотОбъект.ТекущийЭлемент = Элементы.ДобавитьТЧ_ОтсканируйтеШК;
	Иначе
		ТекДата = ТекущаяДата();
		ЗанестиВРС_ОбработкаИсключений(Объект.NVE,
		ПредопределенноеЗначение("Перечисление.гф_СтатусыИсключений.ИсключениеСоздано"),
		ТекДата);
		сч=0;
		Для каждого стрКоллекции Из Объект.ТЧ_Убрать Цикл
			сч = сч + 1;
			ОбработатьУдаление(Объект.УпаковочныйЛист, стрКоллекции["КМ"], Ложь, сч);
		КонецЦикла;
		ТекДата = ТекущаяДата() + 1;
		ЗанестиВРС_ОбработкаИсключений(Объект.NVE,
		ПредопределенноеЗначение("Перечисление.гф_СтатусыИсключений.ЭтикеткиНаклеены"),
		ТекДата);
		
		// очищаем поля ввода и табличные части и переводим фокус на элемент NVE
		Объект.NVE = "";
		Объект.Номенклатура = "";
		УбратьТЧ_СканированиеКМ = "";
		ДобавитьТЧ_ОтсканируйтеШК = "";
		Объект.ТЧ_Убрать.Очистить();
		Объект.ТЧ_Добавить.Очистить();
		Объект.Товары.Очистить();
		ЭтотОбъект.ТекущийЭлемент = Элементы.NVE1;
		Элементы.УбратьТЧ_СканированиеКМ.ТолькоПросмотр = Истина;
		Элементы.ДобавитьТЧ_ОтсканируйтеШК.ТолькоПросмотр = Истина;
		Элементы.УбратьТЧ_СканированиеКМ.Доступность = Ложь;
		Элементы.ДобавитьТЧ_ОтсканируйтеШК.Доступность = Ложь;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработатьУдаление(УЛ, GTIN, ПризнакОтработан = Ложь, НомерЗаписи = 1)
	
	Набор = РегистрыСведений.гф_ПересортицаУдаляемыеШК.СоздатьНаборЗаписей();
	Набор.Отбор.Пересортица.Установить(УЛ);
	Набор.Отбор.ШтрихкодУпаковки.Установить(GTIN);
	Набор.Отбор.НомерЗаписи.Установить(НомерЗаписи);
	Запись = Набор.Добавить();
	Запись["Пересортица"] = УЛ;
	Запись["ШтрихкодУпаковки"] = GTIN;
	Запись["Обработан"] = ПризнакОтработан;
	Запись["НомерЗаписи"] = НомерЗаписи;
	Набор.Записать();
	// ++ Галфинд_Домнышева_14_12_2023 - Не верный подход к задаче (в РС так же могут создаться дубли, а вот по следующим строкам ТЧ хода нет
		// ++ Галфинд СадомцевСА 02.11.2023 Раб. место кладовщика: "удаляемый" код маркировки должен добавляться
		//// в регистр сведений гф_ПересортицаУдаляемыеШК только один раз
		//тчУбрать = Объект.ТЧ_Убрать.Выгрузить();
		//строкатч = тчУбрать.Найти(GTIN, "КМ");
		//Если строкатч <> Неопределено Тогда
		//	тчУбрать.Удалить(строкатч);
		//	Объект.ТЧ_Убрать.Загрузить(тчУбрать);
		//КонецЕсли;
		// -- Галфинд СадомцевСА 02.11.2023
	// -- Галфинд_Домнышева_14_12_2023
КонецПроцедуры

&НаКлиенте
Функция СоздатьЭмиссиюКодовИЗаказатьКодыМаркировки(Основание, РезультатПроверки = Неопределено)
	
	// создаем документ ЗаказЭмиссииКодовМаркировкиСУЗ
	СтруктураЗаказНаЭмиссиюКодовМаркировки = НовыйДокументЭмиссииНаСервере(Основание, РезультатПроверки);
	
	Возврат СтруктураЗаказНаЭмиссиюКодовМаркировки;
КонецФункции

&НаСервере
Процедура СоздатьДокументМаркировкиТоваров(ЗаказНаЭмиссию)
	
	ДокументМаркировки = Неопределено;
	ТЗ_Убрать = Объект.ТЧ_Убрать.Выгрузить();
	
	ДокументМаркировки = гф_ЭмиссияКодовМаркировкиВызовСервера.СоздатьДокументМаркировкиТоваров(
	ТЗ_Убрать,
	ЗаказНаЭмиссию, 
	Объект.NVE);

КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеТабличныхЧастей()
	
	СтруктураПроверки = Новый Структура("ЕстьОшибки, ОписаниеОшибок", Ложь, "");
	
	Если Объект.ТЧ_Добавить.Количество() <> Объект.ТЧ_Убрать.Количество() Тогда
		СтруктураПроверки["ЕстьОшибки"] = Истина;
		СтруктураПроверки["ОписаниеОшибок"] = "Ошибка: Количесто строк в табличных частях" + 
		" ""Убрать"" и ""Добавить"" - не совпадает!";
	КонецЕсли;
	
	мПроверки = Новый Массив;
	мАртикуловУбрать = Объект.ТЧ_Убрать.Выгрузить().ВыгрузитьКолонку("Артикул");
	мАртикуловДобавить = Объект.ТЧ_Добавить.Выгрузить().ВыгрузитьКолонку("Артикул");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(мПроверки, мАртикуловУбрать, Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(мПроверки, мАртикуловДобавить, Истина);
	
	Если мПроверки.Количество() > 1 Тогда
		СтруктураПроверки["ЕстьОшибки"] = Истина;
		СтруктураПроверки["ОписаниеОшибок"] = 		
		?(СтруктураПроверки["ОписаниеОшибок"] <> "", СтруктураПроверки["ОписаниеОшибок"] + Символы.ПС, "") + 
		"Номенклатура в табличных частях должна иметь одинаковый артикул!";
	КонецЕсли;
	
	тзУдалить = Объект.ТЧ_Убрать.выгрузить();
	тзДобавить = Объект.ТЧ_Добавить.Выгрузить();
	Запрос = Новый Запрос;
	
#Область текст_запроса
	
	Запрос.Текст = "
	|//{Запрос: 0, -13 ////////////////////////////////////////
	|ВЫБРАТЬ
	|	у.НомерСтроки КАК нУ,
	|	у.Артикул КАК аУ,
	|	у.КМ КАК КМ,
	|	у.Номенклатура КАК Номенклатура,
	|	у.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ у
	|ИЗ
	|	&Удалить КАК у
	|;
	|//{Запрос: 1, -12 ////////////////////////////////////////
	|ВЫБРАТЬ
	|	д.НомерСтроки КАК нД,
	|	д.Артикул КАК аД,
	|	д.GTIN КАК GTIN,
	|	д.Номенклатура КАК Номенклатура,
	|	д.Характеристика КАК Характеристика,
	|	д.СераяМетка КАК СераяМетка
	|ПОМЕСТИТЬ д
	|ИЗ
	|	&Добавить КАК д
	|;
	|//{Запрос: 2, -11 ////////////////////////////////////////
	|ВЫБРАТЬ
	|	у.нУ КАК нУ,
	|	у.аУ КАК аУ,
	|	д.нД КАК нД,
	|	д.аД КАК аД
	|ПОМЕСТИТЬ вт_полное
	|ИЗ
	|	д КАК д
	|	ПОЛНОЕ СОЕДИНЕНИЕ у КАК у
	|	ПО д.аД = у.аУ
	|СГРУППИРОВАТЬ ПО
	|	д.нД,
	|	у.нУ,
	|	д.аД,
	|	у.аУ
	|;
	|//{Запрос: 3, -10 ////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_полное.нД КАК нД,
	|	вт_полное.аД КАК аД
	|ПОМЕСТИТЬ несопоставленные_д_предв
	|ИЗ
	|	вт_полное КАК вт_полное
	|ГДЕ вт_полное.нУ ЕСТЬ NULL
	|;
	|//{Запрос: 4, -9 ////////////////////////////////////////
	|ВЫБРАТЬ
	|	т.нУ КАК ну,
	|	т.аУ КАК аУ,
	|	т.нД КАК нд,
	|	т.аД КАК аД
	|ПОМЕСТИТЬ соп_предв
	|ИЗ
	|	вт_полное КАК т
	|ГДЕ т.нУ ЕСТЬ НЕ NULL
	|;
	|//{Запрос: 5, -8 ////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	соп.ну КАК ну,
	|	соп.аУ КАК аУ
	|ПОМЕСТИТЬ соп_у_пред
	|ИЗ
	|	соп_предв КАК соп
	|;
	|//{Запрос: 6, -7 ////////////////////////////////////////
	|ВЫБРАТЬ
	|	т.ну КАК ну,
	|	т.аУ КАК аУ,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ т1.ну) КАК НПП
	|ПОМЕСТИТЬ соп_у
	|ИЗ
	|	соп_у_пред КАК т
	|	ЛЕВОЕ СОЕДИНЕНИЕ соп_у_пред КАК т1
	|	ПО т.ну > т1.ну
	|СГРУППИРОВАТЬ ПО
	|	т.ну,
	|	т.аУ
	|;
	|//{Запрос: 7, -6 ////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	соп.нд КАК нд,
	|	соп.аД КАК аД
	|ПОМЕСТИТЬ соп_д_предв
	|ИЗ
	|	соп_предв КАК соп
	|;
	|//{Запрос: 8, -5 ////////////////////////////////////////
	|ВЫБРАТЬ
	|	т.нд КАК нд,
	|	т.аД КАК ад,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ т1.нд) КАК НПП
	|ПОМЕСТИТЬ соп_д
	|ИЗ
	|	соп_д_предв КАК т
	|	ЛЕВОЕ СОЕДИНЕНИЕ соп_д_предв КАК т1
	|	ПО т.нд > т1.нд
	|СГРУППИРОВАТЬ ПО
	|	т.нд,
	|	т.аД
	|;
	|//{Запрос: 9, -4 ////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	соп_у.ну КАК ну,
	|	соп_у.аУ КАК аУ,
	|	соп_д.нд КАК нд,
	|	соп_д.ад КАК аД
	|ПОМЕСТИТЬ сопоставленные
	|ИЗ
	|	соп_у КАК соп_у
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ соп_д КАК соп_д
	|	ПО ИСТИНА
	|		И соп_у.ау = соп_д.ад
	|		И соп_у.НПП = соп_д.НПП
	|;
	|//{Запрос: 10, -3 ////////////////////////////////////////
	|ВЫБРАТЬ
	|	у.нУ КАК НомерСтроки,
	|	у.аУ КАК Артикул,
	|	у.КМ КАК КМ,
	|	у.Номенклатура КАК Номенклатура,
	|	у.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ НЕСОПОСТАВЛЕННЫЕ_У
	|ИЗ
	|	у КАК у
	|ГДЕ НЕ (у.нУ В (
	|	ВЫБРАТЬ
	|		т.ну КАК ну
	|	ИЗ
	|		сопоставленные КАК т))
	|;
	|//{Запрос: 11, -2 ////////////////////////////////////////
	|ВЫБРАТЬ
	|	д.нД КАК НомерСтроки,
	|	д.аД КАК Артикул,
	|	д.Номенклатура КАК Номенклатура,
	|	д.Характеристика КАК Характеристика,
	|	д.GTIN КАК GTIN,
	|	д.СераяМетка КАК СераяМетка
	|ПОМЕСТИТЬ НЕСОПОСТАВЛЕННЫЕ_Д
	|ИЗ
	|	д КАК д
	|ГДЕ НЕ (д.нД В (
	|	ВЫБРАТЬ
	|		т.нд КАК нд
	|	ИЗ
	|		сопоставленные КАК т))
	|;
	|//{Запрос: 12, -1 ////////////////////////////////////////
	|ВЫБРАТЬ
	|	сопоставленные.аУ КАК Артикул,
	|	д.нД КАК НомерДобавляемойСтроки,
	|	у.нУ КАК НомерУдаляемойСтроки,
	|	д.Номенклатура КАК ДобавляемаяНоменклатура,
	|	у.Номенклатура КАК УдаляемаяНоменклатура,
	|	д.Характеристика КАК ДобавляемаяХарактеристика,
	|	у.Характеристика КАК УдаляемаяХарактеристика,
	|	д.GTIN КАК ДобавляемыйGTIN,
	|	у.КМ КАК УдаляемыйКМ,
	|	д.СераяМетка КАК СераяМетка
	|ПОМЕСТИТЬ СОПОСТАВЛЕННЫЕ_ИТОГО
	|ИЗ
	|	сопоставленные КАК сопоставленные
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ у КАК у
	|	ПО ИСТИНА
	|		И сопоставленные.ну = у.нУ
	|		И сопоставленные.аУ = у.аУ
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ д КАК д
	|	ПО ИСТИНА
	|		И сопоставленные.нд = д.нД
	|		И сопоставленные.аУ = д.аД
	|";
#КонецОбласти

	Запрос.Параметры.Вставить("Удалить", тзУдалить); 
	Запрос.Параметры.Вставить("Добавить", тзДобавить);
	
	ПакетРезультатов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	Сопоставленные = ОбщегоНазначения.ТаблицаЗначенийВМассив(ПакетРезультатов[12].Выгрузить());
	Несопоставленные_Удалить = ОбщегоНазначения.ТаблицаЗначенийВМассив(ПакетРезультатов[10].Выгрузить());
	Несопоставленные_Добавить = ОбщегоНазначения.ТаблицаЗначенийВМассив(ПакетРезультатов[11].Выгрузить());

	СтруктураПроверки.Вставить("Сопоставленные", Сопоставленные);
	СтруктураПроверки.Вставить("Несопоставленные_Удалить", Несопоставленные_Удалить);
	СтруктураПроверки.Вставить("Несопоставленные_Добавить", Несопоставленные_Добавить);
	
	Возврат СтруктураПроверки;
КонецФункции

&НаСервере
Функция СоздатьДокументПересортицаТоваров(массивСопоставленныхУбратьДобавить = Неопределено)
	УЛ = Объект.УпаковочныйЛист;
	Если Не ЗначениеЗаполнено(УЛ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Поставка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УЛ, "гф_Поставка");
	Если Не ЗначениеЗаполнено(Поставка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДокПересортица = Неопределено;
	
	// vvv Галфинд \ Sakovich 29.05.2023
	// всегда создаем новый документ пересортицы для текущей обработки исключений:
	
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//|	ПересортицаТоваров.Ссылка КАК Ссылка
	//|ИЗ
	//|	Документ.ПересортицаТоваров КАК ПересортицаТоваров
	//|ГДЕ
	//|	НЕ ПересортицаТоваров.ПометкаУдаления
	//|	И ПересортицаТоваров.гф_IDКороба = &гф_IDКороба");
	//Запрос.УстановитьПараметр("гф_IDКороба", УЛ);
	//Результат = Запрос.Выполнить();
	//
	//Если Не Результат.Пустой() Тогда
	//	Выборка = Результат.Выбрать();
	//	Выборка.Следующий();
	//	обПересортица = Выборка["Ссылка"].ПолучитьОбъект();
	//Иначе
	//	обПересортица = Документы.ПересортицаТоваров.СоздатьДокумент();
	//КонецЕсли;
	обПересортица = Документы.ПересортицаТоваров.СоздатьДокумент();
	// ^^^ Галфинд \ Sakovich 29.05.2023 
	
	ДанныеЗаполнения = Новый Структура("Организация, Склад, Валюта");
	РеквизитыПоставки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Поставка, "Организация, Склад, Валюта");
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, РеквизитыПоставки);
	ДанныеЗаполнения.Вставить("ПриходоватьТоварыПоСебестоимостиСписания", Истина);
	ДанныеЗаполнения.Вставить("гф_IDКороба", УЛ);
	// ++ Галфинд_ДомнышеваКР_23_10_2023
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee717769c43153
	//ДанныеЗаполнения.Вставить("Ответственный", Пользователи.ТекущийПользователь());
	Ответственный = _омОбщегоНазначенияКлиентСервер.ПолучитьГлобальноеЗначение("гф_ОтветственныйПересортицаРМК");
	ДанныеЗаполнения.Вставить("Ответственный", Ответственный);
	// -- Галфинд_ДомнышеваКР_23_10_2023
	ДанныеЗаполнения.Вставить("Дата", ТекущаяДатаСеанса());
	обПересортица.Заполнить(ДанныеЗаполнения);
	тз_Убрать = Объект.ТЧ_Убрать.Выгрузить();
	тз_Добавить = Объект.ТЧ_Добавить.Выгрузить();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("тз_Убрать", тз_Убрать);
	Запрос.УстановитьПараметр("тз_Добавить", тз_Добавить);
	Запрос.УстановитьПараметр("Поставка", Поставка);
	Запрос.Текст = "ВЫБРАТЬ
	|	тз_Убрать.Номенклатура КАК Номенклатура,
	|	тз_Убрать.Характеристика КАК Характеристика,
	|	тз_Убрать.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ вт_Убрать
	|ИЗ
	|	&тз_Убрать КАК тз_Убрать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тз_Добавить.Номенклатура КАК Номенклатура,
	|	тз_Добавить.Характеристика КАК Характеристика,
	|	тз_Добавить.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ вт_Добавить
	|ИЗ
	|	&тз_Добавить КАК тз_Добавить
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриобретениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	ПриобретениеТоваровУслугТовары.Характеристика КАК Характеристика,
	|	МАКСИМУМ(ПриобретениеТоваровУслугТовары.Цена) КАК Цена
	|ПОМЕСТИТЬ ТоварыПоставки
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
	|ГДЕ
	|	ПриобретениеТоваровУслугТовары.Ссылка = &Поставка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриобретениеТоваровУслугТовары.Номенклатура,
	|	ПриобретениеТоваровУслугТовары.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_Убрать.Номенклатура КАК Номенклатура,
	|	вт_Убрать.Характеристика КАК Характеристика,
	|	вт_Добавить.Номенклатура КАК НоменклатураОприходование,
	|	вт_Добавить.Характеристика КАК ХарактеристикаОприходование,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.гф_Техническое) КАК Назначение,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.гф_Техническое) КАК НазначениеОприходование,
	|	ЕСТЬNULL(ТоварыПоставки.Цена, 0) КАК Цена,
	|	1 КАК Количество,
	|	1 КАК КоличествоПоРНПТ
	|ИЗ
	|	вт_Убрать КАК вт_Убрать
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_Добавить КАК вт_Добавить
	|		ПО вт_Убрать.НомерСтроки = вт_Добавить.НомерСтроки
	|			И вт_Убрать.Номенклатура = вт_Добавить.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыПоставки КАК ТоварыПоставки
	|		ПО вт_Убрать.Номенклатура = ТоварыПоставки.Номенклатура
	|			И вт_Убрать.Характеристика = ТоварыПоставки.Характеристика";
	
	Если массивСопоставленныхУбратьДобавить = Неопределено Тогда
		Результат = Запрос.Выполнить();
		тзТоварыПересортицы = Результат.Выгрузить();
		обПересортица.Товары.Загрузить(тзТоварыПересортицы);
	Иначе
		обПересортица.Товары.Очистить();
		Для каждого элИзСопоставленных Из массивСопоставленныхУбратьДобавить Цикл
			нс = обПересортица.Товары.Добавить();
			нс["Номенклатура"] = элИзСопоставленных["УдаляемаяНоменклатура"];
			нс["Характеристика"] = элИзСопоставленных["УдаляемаяХарактеристика"];
			нс["НоменклатураОприходование"] = элИзСопоставленных["ДобавляемаяНоменклатура"];
			нс["ХарактеристикаОприходование"] = элИзСопоставленных["ДобавляемаяХарактеристика"];
			нс["Назначение"] = Справочники.Назначения.гф_Техническое;
			нс["НазначениеОприходование"] = Справочники.Назначения.гф_Техническое;
			нс["Цена"] = 0;
			нс["Количество"] = 1;
			нс["КоличествоПоРНПТ"] = 1;
		КонецЦикла;
	КонецЕсли;
	НачатьТранзакцию();	
	Попытка
		
		// vvv Галфинд \ Sakovich 01.04.2023
		//обПересортица.Записать(РежимЗаписиДокумента.Проведение);
		обПересортица.Записать(РежимЗаписиДокумента.Запись);
		// ^^^ Галфинд \ Sakovich 01.04.2023 	
		
		ЗафиксироватьТранзакцию();
		Возврат обПересортица.Ссылка;
	Исключение
		ОтменитьТранзакцию();
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

&НаКлиенте
Процедура ПредупреждениеНанесениеСеройМеткиЗавершение(ДополнительныеПараметры) Экспорт
		НужноОбработатьСерыеМетки =Истина; 
		ГотовоДобавить(ЭтотОбъект.Команды.ГотовоДобавить);// Галфинд_Домнышева_13_10_23_Перенесла из команды
КонецПроцедуры

&НаСервере
Процедура ОбработатьСерыеМетки(РезультатПроверки)
	
	Если Не РезультатПроверки["ЕстьОшибки"] Тогда
		Возврат;
	КонецЕсли;
	
	сч = 1;
	Для каждого элИзДобавляемых Из РезультатПроверки["Несопоставленные_Добавить"] Цикл
		сч = сч +1;
		НомерЗаписи =  сч;
		ОбработатьУдаление(Объект.УпаковочныйЛист, элИзДобавляемых["GTIN"], Ложь, НомерЗаписи);
	КонецЦикла;
	
	сч = 1;
	Для каждого элИзУдаляемых Из РезультатПроверки["Несопоставленные_Удалить"] Цикл
		сч = сч + 1;
		НомерЗаписи =  сч;
		ОбработатьУдаление(Объект.УпаковочныйЛист, элИзУдаляемых["КМ"], Ложь, НомерЗаписи);
	КонецЦикла;
	
	Сопоставленные = РезультатПроверки["Сопоставленные"];
	
	Если Сопоставленные.Количество() = 0 Тогда
		ЗанестиВРС_ОбработкаИсключений(Объект.NVE, Перечисления.гф_СтатусыИсключений.ЭтикеткиНаклеены);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГотовоДобавить(Команда)
	
	Если Объект.ТЧ_Добавить.Количество() = 0 Тогда
		ПоказатьПредупреждение(, "Не заполнены добавляемые GTIN!", 10);
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = ПроверитьЗаполнениеТабличныхЧастей();

	Если НужноОбработатьСерыеМетки Тогда
		НужноОбработатьСерыеМетки =Ложь;

		ОбработатьСерыеМетки(РезультатПроверки);
		
		Сопоставленные = РезультатПроверки["Сопоставленные"];
		// Галфинд СадомцевСА 31.10.2023 e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee77e1ccfdd0b8
		// Добавил вопрос "Подтвердите добавление ... GTIN." при отсутствии сопоставленных и ничего не создавать
		// Заремарил 8 строк
		//// vvv Галфинд \ Sakovich 12.04.2023
		//Если Сопоставленные = Неопределено
		//	ИЛИ Сопоставленные.Количество() = 0 Тогда
		//	// очищаем поля ввода и табличные части и переводим фокус на элемент NVE
		//	ИнициализироватьНачалоВводаОбработкаИсключений();
		//	Возврат;
		//КонецЕсли;
		//// ^^^ Галфинд \ Sakovich 12.04.2023 
		
		// ++ Галфинд_ДомнышеваКР_23_10_2023
		// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee6e7f8eed5d96
		// В случае, если имеется "серая" метка, при добавлении GTIN после нажатия на кнопку "Готово"
		// должно выводиться сообщение подтвреждения GTIN, аналогично как без серой метки.
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ИмяКоманды", Команда.Имя);
		ДопПараметры.Вставить("Сопоставленные", Сопоставленные);
		Оповещение = Новый ОписаниеОповещения("ВопросПредупреждениеДобавлениеGTINЗавершение", ЭтотОбъект, ДопПараметры);
		
		КоличествоДобавляемых = Объект.ТЧ_Добавить.Количество();
		Текст = "Подтвердите добавление " + КоличествоДобавляемых + " GTIN.";
		ФорматированноеСообщение = Новый ФорматированнаяСтрока(Текст, Новый Шрифт(, 24, Истина));
		ПоказатьВопрос(Оповещение, 
		ФорматированноеСообщение, 
		РежимДиалогаВопрос.ДаНетОтмена, 
		30, 
		КодВозвратаДиалога.Нет, , КодВозвратаДиалога.Отмена);
		//// создать документ пересортицы по сопоставленным
		//ДокументПересортица = СоздатьДокументПересортицаТоваров(Сопоставленные);
		//Если ДокументПересортица = Неопределено Тогда
		//	// vvv Галфинд \ Sakovich 02.04.2023
		//	//ВызватьИсключение "Не удалось создать документ ""ПересортицаТоваров"" по NVE " + Объект.NVE;
		//	Шаблон = "Не удалось создать документ ""ПересортицаТоваров"" по NVE %1";
		//	ТекстСообщения =СтрШаблон(Шаблон, Объект.NVE);
		//	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		//	// ^^^ Галфинд \ Sakovich 02.04.2023 
		//	Возврат;
		//КонецЕсли;
		//// на основе пересортицы создать эмиссию кодов маркировки
		//СтруктураЭмиссии = СоздатьЭмиссиюКодовИЗаказатьКодыМаркировки(ДокументПересортица, РезультатПроверки);
		//
		//Если ЗначениеЗаполнено(СтруктураЭмиссии["ЗаказНаЭмиссиюКодовМаркировкиСУЗ"]) 
		//	И ЗначениеЗаполнено(ДокументПересортица)Тогда
		//	пNVE = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.УпаковочныйЛист, "гф_Агрегация.ЗначениеШтрихкода");
		//	Если Не ЗначениеЗаполнено(пNVE) Тогда
		//		пNVE = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.УпаковочныйЛист, "Код");
		//	КонецЕсли;	
		//	ЗанестиВРС_ОбработкаИсключений(пNVE, ПредопределенноеЗначение("Перечисление.гф_СтатусыИсключений.ИсключениеСоздано"));
		//	ЗанестиВРС_ПересортицаУдаляемыеШтрихкоды(ДокументПересортица, Сопоставленные);
		//КонецЕсли;
		//// очищаем поля ввода и табличные части и переводим фокус на элемент NVE
		//ИнициализироватьНачалоВводаОбработкаИсключений();
		//
		//// vvv Галфинд \ Sakovich 14.04.2023
		//Если ЗначениеЗаполнено(СтруктураЭмиссии["ЗаказНаЭмиссиюКодовМаркировкиСУЗ"]) Тогда
		//	МассивВходящихДанных = Новый Массив;
		//	МассивВходящихДанных.Добавить(СтруктураЭмиссии["ЗаказНаЭмиссиюКодовМаркировкиСУЗ"]);
		//	гф_ЭмиссияКодовМаркировкиВызовСервера.гф_ПодготовитьКПередачеИСМП(МассивВходящихДанных);
		//КонецЕсли;
		//// ^^^ Галфинд \ Sakovich 14.04.2023
		// -- Галфинд_ДомнышеваКР_23_10_2023
		
		Возврат;
	КонецЕсли;
	
	Если РезультатПроверки["ЕстьОшибки"] Тогда
		ДопПараметры = Новый Структура("ИмяКоманды, РезультатПроверки", Команда.Имя, РезультатПроверки);
		Оповещение = Новый ОписаниеОповещения("ПредупреждениеНанесениеСеройМеткиЗавершение", ЭтотОбъект, ДопПараметры);
		Текст = "Нанесите серую метку!";

		// vvv Галфинд \ Sakovich 29.05.2023
		стрПоиска = Новый Структура("СераяМетка", Истина);
		мСтрок = Объект.ТЧ_Добавить.НайтиСтроки(стрПоиска);
		Если мСтрок.Количество() >0 Тогда
			Текст = Текст + Символы.ПС + Символы.ПС;
			Для каждого Эл Из мСтрок Цикл
				Текст = Текст + Эл["GTIN"] + Символы.ПС;
			КонецЦикла;
				ФорматированноеСообщение = Новый ФорматированнаяСтрока(Текст, Новый Шрифт(, 24, Истина));
				ПоказатьПредупреждение(Оповещение, ФорматированноеСообщение);
			Иначе
				ПредупреждениеНанесениеСеройМеткиЗавершение(ДопПараметры);
				//ГотовоДобавить(Команда);// Галфинд_Домнышева_13_10_23_Перенесла в ПредупреждениеНанесениеСеройМеткиЗавершение
		КонецЕсли;
		// ^^^ Галфинд \ Sakovich 29.05.2023 
		
	Иначе
		ДопПараметры = Новый Структура("ИмяКоманды", Команда.Имя);
		Оповещение = Новый ОписаниеОповещения("ВопросПредупреждениеДобавлениеGTINЗавершение", ЭтотОбъект, ДопПараметры);
		
		КоличествоДобавляемых = Объект.ТЧ_Добавить.Количество();
		Текст = "Подтвердите добавление " +КоличествоДобавляемых + " GTIN.";
		ФорматированноеСообщение = Новый ФорматированнаяСтрока(Текст, Новый Шрифт(, 24, Истина));
		ПоказатьВопрос(Оповещение, 
		ФорматированноеСообщение, 
		РежимДиалогаВопрос.ДаНетОтмена, 
		30, 
		КодВозвратаДиалога.Нет, , КодВозвратаДиалога.Отмена);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиАгрегатШКпоКодуУЛ(КодУЛ)
	Возврат  Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту("ЗначениеШтрихкода", КодУЛ);
КонецФункции

&НаКлиенте
Процедура ВопросПредупреждениеДобавлениеGTINЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не  Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	Иначе	
		// Галфинд СадомцевСА 31.10.2023 e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee77e1ccfdd0b8
		// Добавил вопрос "Подтвердите добавление ... GTIN." при отсутствии сопоставленных и ничего не создавать
		Сопоставленные = Неопределено;
		Если  ДополнительныеПараметры.Свойство("Сопоставленные", Сопоставленные) Тогда	
			Если Сопоставленные = Неопределено
				ИЛИ Сопоставленные.Количество() = 0 Тогда
				// Галфинд СадомцевСА 02.11.2023 Очищаю таблицу "Добавить" и поле "NVE:"
				// на закладке "Обработка исключений"
				// при ответе "Да" на вопрос "Подтвердите добавление ... GTIN."
				Объект.ТЧ_Добавить.Очистить();
				Объект.NVE = "";
				Возврат;
			КонецЕсли;
		КонецЕсли;
		// -- Галфинд СадомцевСА 31.10.2023
		
		// создать документ пересортицы
		// ++ Галфинд_ДомнышеваКР_23_10_2023
		Если  ДополнительныеПараметры.Свойство("Сопоставленные") Тогда	
			ДокументПересортица = СоздатьДокументПересортицаТоваров(ДополнительныеПараметры.Сопоставленные);
        Иначе
		// -- Галфинд_ДомнышеваКР_23_10_2023
		ДокументПересортица = СоздатьДокументПересортицаТоваров();
		КонецЕсли;// Галфинд_ДомнышеваКР_23_10_2023
		Если ДокументПересортица = Неопределено Тогда
			ВызватьИсключение "Не удалось создать документ ""ПересортицаТоваров"" по NVE " + Объект.NVE;
			Возврат;
		КонецЕсли;
		
		// на основе пересортицы создать эмиссию кодов маркировки
		// ++ Галфинд_ДомнышеваКР_24_10_2023
		Если  ДополнительныеПараметры.Свойство("Сопоставленные") Тогда	
			СтруктураЭмиссии = СоздатьЭмиссиюКодовИЗаказатьКодыМаркировки(ДокументПересортица, ДополнительныеПараметры);
        Иначе
        // -- Галфинд_ДомнышеваКР_24_10_2023
		СтруктураЭмиссии = СоздатьЭмиссиюКодовИЗаказатьКодыМаркировки(ДокументПересортица);
		КонецЕсли;// Галфинд_ДомнышеваКР_24_10_2023
		
		Если ЗначениеЗаполнено(СтруктураЭмиссии["ЗаказНаЭмиссиюКодовМаркировкиСУЗ"]) 
			И ЗначениеЗаполнено(ДокументПересортица)Тогда
			пNVE = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.УпаковочныйЛист, "гф_Агрегация.ЗначениеШтрихкода");
			Если Не ЗначениеЗаполнено(пNVE) Тогда
				пNVE = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.УпаковочныйЛист, "Код");
			КонецЕсли;	
			ЗанестиВРС_ОбработкаИсключений(пNVE, ПредопределенноеЗначение("Перечисление.гф_СтатусыИсключений.ИсключениеСоздано"));
			ЗанестиВРС_ПересортицаУдаляемыеШтрихкоды(ДокументПересортица);
		КонецЕсли;
		
		// очищаем поля ввода и табличные части и переводим фокус на элемент NVE
		НужноОбработатьСерыеМетки = Ложь;	
		ИнициализироватьНачалоВводаОбработкаИсключений();
		
		// vvv Галфинд \ Sakovich 14.04.2023
		Если ЗначениеЗаполнено(СтруктураЭмиссии["ЗаказНаЭмиссиюКодовМаркировкиСУЗ"]) Тогда
			МассивВходящихДанных = Новый Массив;
			МассивВходящихДанных.Добавить(СтруктураЭмиссии["ЗаказНаЭмиссиюКодовМаркировкиСУЗ"]);
			гф_ЭмиссияКодовМаркировкиВызовСервера.гф_ПодготовитьКПередачеИСМП(МассивВходящихДанных);
		КонецЕсли;
		// ^^^ Галфинд \ Sakovich 14.04.2023

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьНачалоВводаОбработкаИсключений()
	
	Объект.NVE = "";
	Объект.Номенклатура = "";
	УбратьТЧ_СканированиеКМ = "";
	ДобавитьТЧ_ОтсканируйтеШК = "";
	Объект.ТЧ_Убрать.Очистить();
	Объект.ТЧ_Добавить.Очистить();
	Объект.Товары.Очистить();
	ЭтотОбъект.ТекущийЭлемент = Элементы.NVE1;
	Элементы.УбратьТЧ_СканированиеКМ.ТолькоПросмотр = Истина;
	Элементы.ДобавитьТЧ_ОтсканируйтеШК.ТолькоПросмотр = Истина;
	
	Элементы.СписокЗаказыНаЭмиссию.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ЗанестиВРС_ПересортицаУдаляемыеШтрихкоды(Пересортица, массивСопоставленныеУбратьДобавить = Неопределено)
	
	Если массивСопоставленныеУбратьДобавить = Неопределено Тогда
		тзУбрать = Объект.ТЧ_Убрать.Выгрузить();
		Для каждого стрТЗ Из тзУбрать Цикл
			Набор = РегистрыСведений.гф_ПересортицаУдаляемыеШК.СоздатьНаборЗаписей();
			Набор.Отбор.Пересортица.Установить(Пересортица);
			Набор.Отбор.ШтрихкодУпаковки.Установить(стрТЗ["КМ"]);
			Запись = Набор.Добавить();
			Запись["Пересортица"] = Пересортица;
			Запись["ШтрихкодУпаковки"] = стрТЗ["КМ"];
			Запись["НомерЗаписи"] = 1;
			Запись["Обработан"] = Ложь;
			Набор.Записать();
		КонецЦикла;
	Иначе
		Для каждого элМассива Из массивСопоставленныеУбратьДобавить Цикл
			Набор = РегистрыСведений.гф_ПересортицаУдаляемыеШК.СоздатьНаборЗаписей();
			Набор.Отбор.Пересортица.Установить(Пересортица);
			Набор.Отбор.ШтрихкодУпаковки.Установить(элМассива["УдаляемыйКМ"]);
			Запись = Набор.Добавить();
			Запись["Пересортица"] = Пересортица;
			Запись["ШтрихкодУпаковки"] = элМассива["УдаляемыйКМ"];
			Запись["НомерЗаписи"] = 1;
			Запись["Обработан"] = Ложь;
			Набор.Записать();
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//	Основание - ДокументСсылка.ПересортицаТоваров
// Возвращаемое значение - Структура - структура, содержащая данные создания документа эмиссии
//	см. гф_ЭмиссияКодовМаркировкиВызовСервера.гф_СоздатьЗаказНаЭмиссиюКодовМаркировки()
&НаСервере
Функция НовыйДокументЭмиссииНаСервере(Основание, РезультатПроверки = Неопределено)
	// создается документ ЗаказНаЭмиссиюКодовМаркировкиСУЗ
	
	Если РезультатПроверки = Неопределено Тогда
		ТоварыДобавить = Объект.ТЧ_Добавить.Выгрузить();
	Иначе
		Сопоставленные = РезультатПроверки["Сопоставленные"]; // тут массив структур
		ТоварыДобавить = Новый ТаблицаЗначений;
		Для каждого КлючЗначение Из Сопоставленные[0] Цикл
			мТипов = нОвЫЙ Массив;
			мТипов.Добавить(ТипЗнч(КлючЗначение.Значение));
			ТоварыДобавить.Колонки.Добавить(КлючЗначение.Ключ, Новый ОписаниеТипов(мТипов));
		КонецЦикла;
		
		Для каждого элСоп Из Сопоставленные Цикл
			нс = ТоварыДобавить.Добавить();
			Для каждого кз Из элСоп Цикл
				нс[кз.ключ] = кз.Значение;
			КонецЦикла;
		КонецЦикла;
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	т.ДобавляемыйGTIN КАК GTIN,
		|	т.Артикул КАК Артикул,
		|	т.ДобавляемаяНоменклатура КАК Номенклатура,
		|	т.СераяМетка КАК СераяМетка,
		|	т.ДобавляемаяХарактеристика КАК Характеристика
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&ТоварыДобавить КАК т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	т.GTIN КАК GTIN,
		|	т.Артикул КАК Артикул,
		|	т.Номенклатура КАК Номенклатура,
		|	т.СераяМетка КАК СераяМетка,
		|	т.Характеристика КАК Характеристика
		|ИЗ
		|	ВТ КАК т");
		Запрос.УстановитьПараметр("ТоварыДобавить", ТоварыДобавить);
		Результат = Запрос.Выполнить();
		ТоварыДобавить = Результат.Выгрузить();
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("Товары", ТоварыДобавить);
	СтруктураВозврата = гф_ЭмиссияКодовМаркировкиВызовСервера.гф_СоздатьЗаказНаЭмиссиюКодовМаркировки(
		Основание,
		ДополнительныеПараметры);
	
	Возврат СтруктураВозврата;
КонецФункции

&НаКлиенте
Процедура гф_ПодготовитьКПередаче(
	Форма, 
	Идентификатор, 
	ПараметрыОбработкиДокументов, 
	ОповещениеПриЗавершении = Неопределено)
	
	ВходящиеДанные = Новый Массив;
	ВходящиеДанные.Добавить(ПараметрыОбработкиДокументов);
	
	РезультатОбмена = ИнтеграцияИСМПВызовСервера.ПодготовитьКПередаче(
		ВходящиеДанные,
		Идентификатор);
	
	ИнтеграцияИСМПСлужебныйКлиент.ОбработатьРезультатОбмена(
		РезультатОбмена, Форма, Неопределено, ОповещениеПриЗавершении);

КонецПроцедуры

&НаКлиенте
Процедура NVE1ПриИзменении(Элемент)
	
	Если ПустаяСтрока(Объект.NVE) Тогда
		ИнициализироватьНачалоВводаОбработкаИсключений();
		Возврат;
	КонецЕсли;
		
	// vvv Галфинд \ Sakovich 01.03.2023
	Если СписокСкладов.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("В настройках не заполнено значение ""Склады""!");
		ИнициализироватьНачалоВводаОбработкаИсключений();
		Возврат;
	КонецЕсли;
	СтруктураШтрихкодУпаковочныйЛист = НайтиШтрикходУпаковкиТоваровИУпаковочныйЛистПоNVE(Объект.NVE);
	Если СтруктураШтрихкодУпаковочныйЛист = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не найдена мультитоварная упаковка по значению NVE: " 
		+ Объект.NVE);
		ИнициализироватьНачалоВводаОбработкаИсключений();
		Возврат;
	КонецЕсли; 
	
	Если СтруктураШтрихкодУпаковочныйЛист["УпаковочныйЛист"].Пустая() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не найден упаковочный лист по значению NVE: " 
		+ Объект.NVE);
		ИнициализироватьНачалоВводаОбработкаИсключений();
		Возврат;
	КонецЕсли;
	ЕстьNVEСкладе = ПроверитьНаличиеNVEНаСкладе(СписокСкладов, СтруктураШтрихкодУпаковочныйЛист["ШтрихКодУпаковки"]);
	Если Не ЕстьNVEСкладе Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("На складах не найден NVE " + Объект.NVE);
		ИнициализироватьНачалоВводаОбработкаИсключений();
		Возврат;
	КонецЕсли;
	// ^^^ Галфинд \ Sakovich 01.03.2023
	
	//++ Галфинд_ДомнышеваКР_24_10_2023
	ПТУЗакрыто = ПроверитьНаЗакрытостьПТиУ(СтруктураШтрихкодУпаковочныйЛист["УпаковочныйЛист"]);
	Если ПТУЗакрыто Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Поставка закрыта. Обработка исключений запрещена по данному NVE " + Объект.NVE);
		ИнициализироватьНачалоВводаОбработкаИсключений();
		Возврат;
	КонецЕсли;	
	//-- Галфинд_ДомнышеваКР_24_10_2023
	
	ОшибкаПодбораNVE = Ложь;
	NVE1ПриИзмененииНаСервере(ОшибкаПодбораNVE);
	
	Если Не ОшибкаПодбораNVE Тогда
		Элементы.УбратьТЧ_СканированиеКМ.ТолькоПросмотр = Ложь;
		Элементы.УбратьТЧ_СканированиеКМ.Доступность = Истина;
		
		//Элементы.ДобавитьТЧ_ОтсканируйтеШК.ТолькоПросмотр = Ложь;
		ЭтотОбъект.ТекущийЭлемент = Элементы.УбратьТЧ_СканированиеКМ;
	Иначе
		Элементы.УбратьТЧ_СканированиеКМ.ТолькоПросмотр = Истина;
		Элементы.ДобавитьТЧ_ОтсканируйтеШК.ТолькоПросмотр = Истина;
		Элементы.УбратьТЧ_СканированиеКМ.Доступность = Ложь;
		Элементы.ДобавитьТЧ_ОтсканируйтеШК.Доступность = Ложь;
		Объект.Номенклатура = "";
		УбратьТЧ_СканированиеКМ = "";
		ДобавитьТЧ_ОтсканируйтеШК = "";
		Объект.ТЧ_Добавить.Очистить();
		Объект.ТЧ_Убрать.Очистить();
		Объект.NVE = "";
		ЭтотОбъект.ТекущийЭлемент = Элементы.NVE1;
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура NVE1ПриИзмененииНаСервере(ОшибкаПодбораNVE)
	
	Запрос = Новый Запрос;
	
	#Область текст_запроса
	Запрос.Текст = 
	"////////////////////////////////////////////////////////////////////////////////0
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	УпаковочныйЛист.Ссылка КАК УпаковочныЛист,
	|	Номенклатура.Артикул КАК Артикул,
	|	ВариантыКомплектацииНоменклатуры.Владелец КАК Номенклатура,
	|	УпаковочныйЛист.гф_Агрегация КАК Агрегат
	|ПОМЕСТИТЬ вт_УпЛист
	|ИЗ
	|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|			ПО ВариантыКомплектацииНоменклатуры.Владелец = Номенклатура.Ссылка
	|		ПО УпаковочныйЛист.гф_Комплектация = ВариантыКомплектацииНоменклатуры.Ссылка
	|ГДЕ
	|	УпаковочныйЛист.Код = &NVE
	|	И НЕ УпаковочныйЛист.ПометкаУдаления
	|	И УпаковочныйЛист.Проведен
	|	И ВариантыКомплектацииНоменклатуры.Владелец ЕСТЬ НЕ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК Агрегат,
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
	|	ШтрихкодыУпаковокТоваров.ТипУпаковки КАК ТипУпаковки
	|ПОМЕСТИТЬ вт_Штрихкод
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода = &NVE
	|	И ШтрихкодыУпаковокТоваров.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////2
	|ВЫБРАТЬ
	|	вт_УпЛист.УпаковочныЛист КАК УпаковочныЛист,
	|	вт_УпЛист.Артикул КАК Артикул,
	|	вт_УпЛист.Номенклатура КАК Номенклатура,
	|	вт_УпЛист.Агрегат КАК Агрегат
	|ПОМЕСТИТЬ вт_УпаковочныйЛистАгрегат
	|ИЗ
	|	вт_УпЛист КАК вт_УпЛист
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_Штрихкод КАК вт_Штрихкод
	|		ПО вт_УпЛист.Агрегат = вт_Штрихкод.Агрегат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////3
	|ВЫБРАТЬ
	|	вт_УпаковочныйЛистАгрегат.УпаковочныЛист КАК УпаковочныЛистСсылка
	|ПОМЕСТИТЬ вт_NVEНазначен
	|ИЗ
	|	вт_УпаковочныйЛистАгрегат КАК вт_УпаковочныйЛистАгрегат
	|ГДЕ
	|	вт_УпаковочныйЛистАгрегат.УпаковочныЛист.гф_NVE_назначен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////4
	|ВЫБРАТЬ
	|	вт_УпаковочныйЛистАгрегат.УпаковочныЛист КАК УпаковочныЛистСсылка
	|ПОМЕСТИТЬ вт_NVEРаспечатан
	|ИЗ
	|	вт_УпаковочныйЛистАгрегат КАК вт_УпаковочныйЛистАгрегат
	|ГДЕ
	|	вт_УпаковочныйЛистАгрегат.УпаковочныЛист.гф_NVE_распечатан
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////5
	|ВЫБРАТЬ
	|	вт_УпаковочныйЛистАгрегат.Агрегат КАК Агрегат,
	|	гф_ВремяПечатиNVE.ВремяПечати КАК ВремяПечати
	|ПОМЕСТИТЬ вт_NVE_ВремяПечати
	|ИЗ
	|	вт_УпаковочныйЛистАгрегат КАК вт_УпаковочныйЛистАгрегат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.гф_ВремяПечатиNVE КАК гф_ВремяПечатиNVE
	|		ПО вт_УпаковочныйЛистАгрегат.Агрегат = гф_ВремяПечатиNVE.NVE
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////6
	|ВЫБРАТЬ
	|	вт_УпаковочныйЛистАгрегат.Агрегат КАК Агрегат,
	|	ЕСТЬNULL(гф_ОбработкаИсключенийСрезПоследних.Статус, ЗНАЧЕНИЕ(Перечисление.гф_СтатусыИсключений.ПустаяСсылка)) КАК Статус
	|ИЗ
	|	вт_УпаковочныйЛистАгрегат КАК вт_УпаковочныйЛистАгрегат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гф_ОбработкаИсключений.СрезПоследних(&Период, ) КАК гф_ОбработкаИсключенийСрезПоследних
	|		ПО вт_УпаковочныйЛистАгрегат.Агрегат = гф_ОбработкаИсключенийСрезПоследних.NVE
	|ГДЕ
	|	гф_ОбработкаИсключенийСрезПоследних.Статус ЕСТЬ НЕ NULL ";
	
	#КонецОбласти
	
	Запрос.УстановитьПараметр("NVE", Объект.NVE);
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	ПакетРезультатов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	РезультатУпаковочныйЛистАгрегат = ПакетРезультатов[2];
	
	Если РезультатУпаковочныйЛистАгрегат.Пустой() Тогда
		ОбщегоНазначения.СообщитьПользователю("По NVE = """ 
		+ Объект.NVE + """ не найдена серия короба");
		ОшибкаПодбораNVE = Истина;
		Возврат;
	Иначе
		Выборка = РезультатУпаковочныйЛистАгрегат.Выбрать();
		Выборка.Следующий();
		Объект.УпаковочныйЛист = Выборка["УпаковочныЛист"];
		Объект.Номенклатура = Выборка["Номенклатура"];
	КонецЕсли;
	
	NVEНазначен = ПакетРезультатов[3];
	Если NVEНазначен.Пустой() Тогда
		ОшибкаПодбораNVE = Истина;
		ОбщегоНазначения.СообщитьПользователю("NVE " + Объект.NVE + " не  назначен");
	КонецЕсли;
	
	NVEРаспечатан = ПакетРезультатов[4];
	Если NVEРаспечатан.Пустой() Тогда
		ОшибкаПодбораNVE = Истина;
		ОбщегоНазначения.СообщитьПользователю("NVE " + Объект.NVE + " не распечатан");
	КонецЕсли;
	
	NVE_ОбработкаИсключений = ПакетРезультатов[6];
	Если Не NVE_ОбработкаИсключений.Пустой() Тогда
		//ОшибкаПодбораNVE = Истина;
		Выборка = NVE_ОбработкаИсключений.Выбрать();
		Выборка.Следующий();

		Если Выборка["Статус"] = Перечисления.гф_СтатусыИсключений.ЭтикеткиНаклеены Тогда
			ОбщегоНазначения.СообщитьПользователю("По NVE " + Объект.NVE +
			" обработка исключений уже завершена ранее и будет выполнена еще раз");
			
		ИначеЕсли Выборка["Статус"] = Перечисления.гф_СтатусыИсключений.ИсключениеСоздано Тогда
			ОшибкаПодбораNVE = Истина;
			ОбщегоНазначения.СообщитьПользователю("Обработка исключений по NVE " + Объект.NVE + " не завершена, ожидается выпуск КМ");
			
		ИначеЕсли Выборка["Статус"] = Перечисления.гф_СтатусыИсключений.КодыПолучены Тогда
			ОшибкаПодбораNVE = Истина;
			ОбщегоНазначения.СообщитьПользователю("Обработка исключений по NVE " + Объект.NVE + " не завершена, ожидается печать/наклейка этикеток");
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьТЧ_СканированиеКМПриИзменении(Элемент)
	РезультатСканирования = УбратьТЧ_СканированиеКМПриИзмененииНаСервере();

	Если РезультатСканирования  = 3 Тогда
		ПоказатьПредупреждение(, "Данный КМ: <" + УбратьТЧ_СканированиеКМ + "> - не соответствует выбранному NVE",
		10, "Ошибка ввода!");
		УбратьТЧ_СканированиеКМ = "";
		ЭтотОбъект.ТекущийЭлемент = Элементы.УбратьТЧ_СканированиеКМ;
		Возврат;
	КонецЕсли;
	Если РезультатСканирования = 4 Тогда
		ПоказатьПредупреждение(, "Данный КМ: <" + УбратьТЧ_СканированиеКМ + "> - уже имеется в табличной части", 10, "Ошибка ввода!");
		УбратьТЧ_СканированиеКМ = "";	
		ЭтотОбъект.ТекущийЭлемент = Элементы.УбратьТЧ_СканированиеКМ;
		Возврат;
	КонецЕсли;
	
	УбратьТЧ_СканированиеКМ = "";
	ЭтотОбъект.ТекущийЭлемент = Элементы.УбратьТЧ_СканированиеКМ;

КонецПроцедуры

&НаСервере
Функция УбратьТЧ_СканированиеКМПриИзмененииНаСервере()
	
	ПривестиУбратьТЧ_СканированиеКМПоМаске();
	
	Если УбратьТЧ_СканированиеКМ = "" Тогда
		Возврат 1; // не удалось произвести сканирование КМ
	КонецЕсли;
	ТЧ_Убрать = Объект.ТЧ_Убрать;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК КМ,
	|	ШтрихкодыУпаковокТоваров.Номенклатура.Артикул КАК Артикул,
	|	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода = &КМ";
	Запрос.УстановитьПараметр("КМ", УбратьТЧ_СканированиеКМ);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат 2; // в базе не найден Штриход упаковки товаров
	КонецЕсли;
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();
	СтруктураШК_УЛ = НайтиШтрикходУпаковкиТоваровИУпаковочныйЛистПоNVE(Объект.NVE);
	Агрегат = СтруктураШк_УЛ["ШтрихКодУпаковки"];
	
	Если ЗначениеЗаполнено(Агрегат) Тогда
		мСтрокПоКМ = Агрегат["ВложенныеШтрихкоды"].НайтиСтроки(Новый Структура("Штрихкод", Выборка["КМ"]));
		Если мСтрокПоКМ.Количество() = 0 Тогда
			Возврат 3; // отсканированный штрихкод не принадлежит выбранному УЛ.
		КонецЕсли;
	КонецЕсли;	
	
	мСтрокТчПоКМ = ТЧ_Убрать.НайтиСтроки(Новый Структура("КМ",Выборка["КМ"]));
	Если мСтрокТчПоКМ.Количество() > 0 Тогда
		Возврат 4; // в табличной части "ТЧ_Убрать" уже присутствует отсканированный КМ
	КонецЕсли;

	нс = ТЧ_Убрать.Добавить();
	ЗаполнитьЗначенияСвойств(нс, Выборка);
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ДобавитьТЧ_ОтсканируйтеШКПриИзмененииНаСервере(Результат = Неопределено)
	
	Если ДобавитьТЧ_ОтсканируйтеШК = "" Тогда
		Возврат;
	КонецЕсли;

	//стрПоиска = Новый Структура("СераяМетка", Истина);
	//КоличествоУжеСуществующихСерыхМетокВсего = Объект.ТЧ_Добавить.НайтиСтроки(стрПоиска).Количество();
	//КоличествоУбираемых = Объект.ТЧ_Убрать.Количество();
	
	ТЧ_Добавить = Объект.ТЧ_Добавить;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод КАК GTIN,
	|	ШтрихкодыНоменклатуры.Номенклатура.Артикул КАК Артикул,
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	|	ЛОЖЬ КАК СераяМетка
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &ШК";
	Запрос.УстановитьПараметр("ШК", ДобавитьТЧ_ОтсканируйтеШК);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	стрПоиска = Новый Структура("Номенклатура, Характеристика", Выборка["Номенклатура"], Выборка["Характеристика"]);
	мСтрок = Объект.ТЧ_Убрать.НайтиСтроки(стрПоиска);
	Если мСтрок.Количество() > 0 Тогда
		// ++ Галфинд_ДомнышеваКР_23_10_2023
		Для Каждого Строка Из мСтрок Цикл 
			Объект.ТЧ_Убрать.Удалить(Строка);
		КонецЦикла;
		// -- Галфинд_ДомнышеваКР_23_10_2023

		Результат = Ложь;
		Возврат;
	КонецЕсли;
	
	АртикулNVE = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Номенклатура, "Артикул");
	
	стрПоиска = Новый Структура("СераяМетка, Артикул", Ложь, АртикулNVE);
	КоличествоБезСерыхМетокСвоих = Объект.ТЧ_Добавить.НайтиСтроки(стрПоиска).Количество();
	КоличествоУбираемых = Объект.ТЧ_Убрать.Количество();

	нс = ТЧ_Добавить.Добавить();
	ЗаполнитьЗначенияСвойств(нс, Выборка);
	
	Если АртикулNVE <> Выборка["Артикул"] Тогда
		// для чужого артикула всегда ставим серую метку
		нс["СераяМетка"] = Истина;
	Иначе
		Если КоличествоУбираемых - КоличествоБезСерыхМетокСвоих <= 0 Тогда
			// для своего атрикула ставим серую метку тогда, когда количество
			// своих добавляемых артикулов становится больше, чем удаляемых КМ
			нс["СераяМетка"] = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если КоличествоУбираемых = 0 Тогда
		// если ничего не удаляем, а лишь добавляем  - всегда ставим серую метку
		нс["СераяМетка"] = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТЧ_ОтсканируйтеШКПриИзменении(Элемент)
	Перем Результат;
	
	ДобавитьТЧ_ОтсканируйтеШКПриИзмененииНаСервере(Результат);
	Если Результат = Ложь Тогда
		ПоказатьПредупреждение(, "Среди удаляемых КМ – есть подходящий от отсканированной пары. 
		|Наклейте на пару и начните обработку заново", 30, "Ошибка ввода!");
	КонецЕсли;
	ДобавитьТЧ_ОтсканируйтеШК = "";
	ЭтотОбъект.ТекущийЭлемент = Элементы.ДобавитьТЧ_ОтсканируйтеШК;
КонецПроцедуры

&НаСервере
Функция ПолучитьДеревоДанных(ТаблицаТоваров = Неопределено)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Т
	|ГДЕ
	|	Т.Пометка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	С.Ссылка КАК Объект,
	|	С.Свойство КАК Свойство,
	|	С.Значение КАК Значение
	|ПОМЕСТИТЬ Свойства
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК С
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Товары КАК Товары
	|		ПО С.Ссылка = Товары.Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Номенклатура,
	|	ДополнительныеСведения.Свойство,
	|	ДополнительныеСведения.Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Товары КАК Товары
	|		ПО (Товары.Номенклатура = ДополнительныеСведения.Объект)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Свойства.Свойство КАК Свойство,
	|	Свойства.Значение КАК Значение
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Свойства КАК Свойства
	|		ПО Товары.Номенклатура = Свойства.Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Свойство
	|ИТОГИ ПО
	|	Номенклатура");
	
	Если ТаблицаТоваров = Неопределено Тогда
		тчТовары = Объект.Товары.Выгрузить();
		Запрос.УстановитьПараметр("Товары", тчТовары);
	Иначе
		Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

&НаСервере
Процедура ПечатьЗаголовка(ТД, Макет, ПараметрыЗаголовка)
	Область = Макет.ПолучитьОбласть("НомерСерии");
	Область.Параметры.НомерСерии = ПараметрыЗаголовка["NVE"];
	Область.Параметры.Артикул = ПараметрыЗаголовка["АртикулУпаковки"];
	ТД.Вывести(Область);
КонецПроцедуры

&НаСервере
Процедура ПечатьПодвала(ТД, Макет, ПараметрыЗаголовка, ЧислоЛинийQR = 2)
	ПустаяСтрока 	= Макет.ПолучитьОбласть("ПустаяСтрока");
	ТестоваяСтрока 	= Макет.ПолучитьОбласть("ТестоваяСтрока");
	
	Область = Макет.ПолучитьОбласть("НомерСерииПодвал");
	Область.Параметры.НомерСерии 				= ПараметрыЗаголовка["NVE"];
	Область.Параметры.ПоследниеПятьЦифрСерии 	= Прав(ПараметрыЗаголовка["NVE"], 5);
	Область.Параметры.Артикул 					= ПараметрыЗаголовка["АртикулУпаковки"];
	
	Область.Параметры.КодКонтрагентаИзЗаказа 			= ПараметрыЗаголовка["КодКлиента"];
	Область.Параметры.НаименованиеКонтрагентаИзЗаказа 	= ПараметрыЗаголовка["Клиент"];
	
	ПараметрыШтрихкода = ГенерацияШтрихкода.ПараметрыГенерацииШтрихкода();
	ПараметрыШтрихкода.ТипКода = 99;
	ПараметрыШтрихкода.Штрихкод = ПараметрыЗаголовка["NVE"];
	ПараметрыШтрихкода.Ширина = 350;
	ПараметрыШтрихкода.Высота = 150;
	ПараметрыШтрихкода.ПрозрачныйФон = Истина;
	ПараметрыШтрихкода.ОтображатьТекст = Ложь;
	СтруктураКартинки = ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыШтрихкода);
	Область.Рисунки.штрих_серии_подвал.Картинка = СтруктураКартинки.Картинка;
	
	Если ЧислоЛинийQR = 1 Тогда
		КолвоПустыхСтрок = 0;
		Пока ТД.ВысотаТаблицы % 37 <> 0 Цикл
			КолвоПустыхСтрок = КолвоПустыхСтрок + 1;
			ТД.Вывести(ПустаяСтрока);
		КонецЦикла;
	Иначе
		КолвоПустыхСтрок = 0;
		Пока ТД.ВысотаТаблицы % 40 <> 0 Цикл
			КолвоПустыхСтрок = КолвоПустыхСтрок + 1;
			ТД.Вывести(ПустаяСтрока);
		КонецЦикла;
	КонецЕсли;
	ТД.Вывести(Область);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//инициализация временного хранилища формы
	АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	Заголовок = "Рабочее место кладовщика (" + Пользователи.ТекущийПользователь().Наименование+ ")";
	
	// #wortmann {
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee1c9530c1660c
	// Определение КоличествоСтрокТЧ по умалчанию 
	// Галфинд_Домнышева 2023/07/17
	Если КоличествоСтрокТЧ = 0 Тогда 
		КоличествоСтрокТЧ = 12;
	КонецЕсли;
	// } #wortmann
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическаяПечатьПриИзменении(Элемент)
	УстановитьВидимостьДоступностьПечатьСNVE();
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическаяПечать1ПриИзменении(Элемент)
	УстановитьВидимостьДоступностьПечатьСNVE();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ВидимостьКонтрагента();
	УстановитьВидимостьДоступностьПечатьСNVE();
	//ПодключитьОбработчикОжидания("ОбработкаДанныхПоИсключениям", 1, Истина);
	ЗаполнитьСписокСкладовНаСервере();
	
	ВыполнитьДействияБлокировкаАртикуловПоNVE("", "Удалить", Истина);
	
	// ++ Галфинд ВолковЕВ 22.06.2023
	Элементы.Склады.Доступность = ДоступностьСклады();
	// -- Галфинд ВолковЕВ 22.06.2023
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокСкладовНаСервере()
	НельзяИспользоватьВсеСклады = Не Пользователи.ЭтоПолноправныйПользователь( , Ложь)
		И Не УправлениеДоступом.ЕстьРоль("гф_РабочееМестоКладовщикаИспользованиеВсехСкладов");
	
	Если НельзяИспользоватьВсеСклады Или СписокСкладов.Количество() = 0 Тогда
		мСклады = _омОбщегоНазначенияКлиентСервер.ПолучитьГлобальноеЗначениеМассив("гф_ГлобальныеЗначенияТаможенныйСклад");
		СписокСкладов.ЗагрузитьЗначения(мСклады);
	КонецЕсли;
	Если НельзяИспользоватьВсеСклады Тогда
		Элементы.Склады.ТолькоПросмотр = Истина;
	КонецЕсли;
КонецПроцедуры

#Область ОбработкаИсключенийВФоне

&НаКлиенте
Процедура ОбработкаДанныхПоИсключениям() Экспорт
	ОтключитьОбработчикОжидания("ОбработкаДанныхПоИсключениям");
	ДлительнаяОперация = НачатьВыполнениеВФоне();
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультатОбработкиИсключений", ЭтотОбъект);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
КонецПроцедуры

&НаСервере
Функция НачатьВыполнениеВФоне()
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения["ЗапуститьВФоне"] = Истина;
	Результат = ДлительныеОперации.ВыполнитьПроцедуру(
	ПараметрыВыполнения, "гф_ОбработкаИсключенийПоКоробамВызовСервера.ОбработатьИсключенияРМКладовщика");
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатОбработкиИсключений(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если Результат["Статус"] = "Выполнено" Тогда
		Элементы.СписокЗаказыНаЭмиссию.Обновить();	
		ВыполнитьОбновлениеСтатусовИсключенийКлиент();		
		ПодключитьОбработчикОжидания("ОбработкаДанныхПоИсключениям", 60);
	ИначеЕсли Результат["Статус"] <> "Ошибка" Тогда 
		ОтключитьОбработчикОжидания("ОбработкаДанныхПоИсключениям");
		ПодключитьОбработчикОжидания("ОбработкаДанныхПоИсключениям", 60);
	Иначе   // ошибка выполнения фонового задания
	    ОтключитьОбработчикОжидания("ОбработкаДанныхПоИсключениям");
		ПодключитьОбработчикОжидания("ОбработкаДанныхПоИсключениям", 60);
	КонецЕсли;
	
КонецПроцедуры 
 
 #КонецОбласти
 
&НаСервере
Процедура УстановитьВидимостьДоступностьПечатьСNVE()
	Элементы.ТоварыПечатьСNVE.Доступность = Не Объект.АвтоматическаяПечать;
	Элементы.ТоварыПечатьСNVEСПредварительнымПросмотром.Доступность = Не Объект.АвтоматическаяПечать;
	Элементы.Товары1ПечатьБезNVE.Доступность = Не Объект.АвтоматическаяПечать;
	Элементы.Товары1ПечатьБезNVEСПредварительнымПросмотром.Доступность = Не Объект.АвтоматическаяПечать;
КонецПроцедуры
	
&НаКлиенте
Процедура СпособВводаВОборотПриИзменении(Элемент)
	ВидимостьКонтрагента();
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьКонтрагента()
	ВидимостьКонтрагентаНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВидимостьКонтрагентаНаСервере()
	Элементы.Контрагент.Видимость = Объект.СпособВводаВОборот = 
	ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.ТрансграничнаяТорговля");
КонецПроцедуры

&НаКлиенте
Процедура СкладНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// ++ Галфинд ВолковЕВ 22.06.2023 Реализовано при открытии формы изменение доступности
	//ДанныеВыбора = СформироватьСписокВыбораСкладов();
	
	//Если ДанныеВыбора <> Неопределено Тогда
	//	СтандартнаяОбработка = Ложь;	
	//КонецЕсли;
	// -- Галфинд ВолковЕВ 22.06.2023
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьСписокВыбораСкладов()
	
	//Если РольДоступна("гф_РабочееМестоКладовщикаИспользованиеВсехСкладов") Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	//
	//мСкладыДляВыбора = _омОбщегоНазначенияКлиентСервер.ПолучитьГлобальноеЗначениеМассив("гф_ГлобальныеЗначенияТаможенныйСклад");
	//СписокСкладовДляВыбора = Новый СписокЗначений;
	//СписокСкладовДляВыбора.ЗагрузитьЗначения(мСкладыДляВыбора);
	//Возврат СписокСкладовДляВыбора;
	
	// ++ Галфинд ВолковЕВ 22.06.2023
	Если РольДоступна("ПолныеПрава") Или РольДоступна("гф_РабочееМестоКладовщикаИспользованиеВсехСкладов") Тогда
		
		мСкладыДляВыбора = _омОбщегоНазначенияКлиентСервер.ПолучитьГлобальноеЗначениеМассив("гф_ГлобальныеЗначенияТаможенныйСклад");
		СписокСкладовДляВыбора = Новый СписокЗначений;
		СписокСкладовДляВыбора.ЗагрузитьЗначения(мСкладыДляВыбора);
		Возврат СписокСкладовДляВыбора;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	// -- Галфинд ВолковЕВ 22.06.2023	
	
КонецФункции

&НаСервереБезКонтекста
Функция ДоступностьСклады()
	
	Если РольДоступна("ПолныеПрава") Или РольДоступна("гф_РабочееМестоКладовщикаИспользованиеВсехСкладов") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#Область Управление_поставкой

&НаКлиенте
Процедура УправлениеПоставкойОбновить(Команда)
	Если ЗначениеЗаполнено(Объект.СсылкаНаПТУ) Тогда
		ЗаполнитьУправлениеПоставкойТоварыНаСервере("ПТУ");
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.NVE) Тогда
		ЗаполнитьУправлениеПоставкойТоварыНаСервере("NVE");
		Возврат;
	КонецЕсли;
	ПоказатьПредупреждение(, "Для обновления данных должно быть заполнено поле ""ПТУ"" или ""NVE""!", 10, "Обновление данных");
КонецПроцедуры

// Параметры:
//	ВариантЗаполнения - Строка - может принимать значения "Инвойс", "ПТУ", "NVE"
&НаКлиенте
Процедура ЗаполнениеУправлениеПоставкойПоНомеруИнвойсаИлиПТУАвто(ВариантЗаполнения)
	ОчиститьСообщения();
	ЗаполнитьУправлениеПоставкойТоварыНаСервере(ВариантЗаполнения);
	// Галфинд_ДомнышеваКР_20_10_2023
	Если Элементы.СсылкаНаПТУ1.СписокВыбора.Количество()>1 Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Поставка", Истина);
		
		ОповещениеВыборЗначенияПТУ = Новый ОписаниеОповещения("ВыборЗначенияПТУ", ЭтотОбъект, ДополнительныеПараметры);
		Элементы.СсылкаНаПТУ1.СписокВыбора.ПоказатьВыборЭлемента(
		ОповещениеВыборЗначенияПТУ,	//Вызов процедуры оповещения
		"Выберите документ: ",	//Заголовок диалогового окна выбора типа
		Элементы.СсылкаНаПТУ1.СписокВыбора[0]				//Первоначально позиционирование на значение выбора
		);
	КонецЕсли;
	// Галфинд_ДомнышеваКР_20_10_2023
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУправлениеПоставкойТоварыНаСервере(ВариантЗаполнения)
	
	Если Не (ВариантЗаполнения = "Инвойс" ИЛИ ВариантЗаполнения = "ПТУ" ИЛИ ВариантЗаполнения = "NVE") Тогда
		Возврат;
	КонецЕсли;
		
	Объект.Товары_УправлениеПоставкой.Очистить();
	
	Элементы.NVE2.СписокВыбора.Очистить();
	Элементы.NVE2.КнопкаСпискаВыбора = Ложь;
	Элементы.NVE2.РежимВыбораИзСписка =Ложь;

	Элементы.СсылкаНаПТУ1.СписокВыбора.Очистить();
	Элементы.СсылкаНаПТУ1.КнопкаСпискаВыбора = Ложь;
	Элементы.СсылкаНаПТУ1.РежимВыбораИзСписка =Ложь;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЕСТЬNULL(ВариантыКомплектацииНоменклатуры.Владелец, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	|	ЕСТЬNULL(ВариантыКомплектацииНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ВариантыКомплектацииНоменклатуры.ПустаяСсылка)) КАК Комплектация,
	|	ЕСТЬNULL(УпаковочныйЛист.Код, """") КАК NVE,
	|	ЕСТЬNULL(гф_ОбработкаИсключенийСрезПоследних.Статус, ЗНАЧЕНИЕ(Перечисление.гф_СтатусыИсключений.ПустаяСсылка)) КАК СтатусЕН,
	|	ЕСТЬNULL(УпаковочныйЛист.гф_NVE_назначен, ЛОЖЬ) КАК Назначен,
	|	ЕСТЬNULL(гф_ВремяПечатиNVE.Распечатан, ЛОЖЬ) КАК РаспечатанПризнак,
	|	ЕСТЬNULL(гф_ВремяПечатиNVE.ВремяПечати, ДАТАВРЕМЯ(1, 1, 1)) КАК РаспечатанДата,
	|	ПриобретениеТоваровУслуг.Ссылка КАК ПТУ,
	|	ПриобретениеТоваровУслуг.Номер КАК НомерИнвойса,
	|	ПриобретениеТоваровУслуггф_ПродукцияВКоробах.IDКороба КАК докУпЛист
	|ПОМЕСТИТЬ вт_01
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.гф_ПродукцияВКоробах КАК ПриобретениеТоваровУслуггф_ПродукцияВКоробах
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист КАК УпаковочныйЛист
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
	|				ПО УпаковочныйЛист.гф_Комплектация = ВариантыКомплектацииНоменклатуры.Ссылка
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гф_ВремяПечатиNVE КАК гф_ВремяПечатиNVE
	|				ПО УпаковочныйЛист.гф_Агрегация = гф_ВремяПечатиNVE.NVE
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гф_ОбработкаИсключений.СрезПоследних КАК гф_ОбработкаИсключенийСрезПоследних
	|				ПО УпаковочныйЛист.гф_Агрегация = гф_ОбработкаИсключенийСрезПоследних.NVE
	|			ПО ПриобретениеТоваровУслуггф_ПродукцияВКоробах.IDКороба = УпаковочныйЛист.Ссылка
	|		ПО (ПриобретениеТоваровУслуггф_ПродукцияВКоробах.Ссылка = ПриобретениеТоваровУслуг.Ссылка)
	|ГДЕ
	|	&УсловиеПоИнвойсу
	|	И НЕ ПриобретениеТоваровУслуггф_ПродукцияВКоробах.IDКороба = ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ вт_01.ПТУ) КАК Количество
	|ПОМЕСТИТЬ КоличествоПТУ
	|ИЗ
	|	вт_01 КАК вт_01
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ вт_01.докУпЛист) КАК Количество
	|ИЗ
	|	вт_01 КАК вт_01";
	
	Если ВариантЗаполнения = "Инвойс" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоИнвойсу", " ПриобретениеТоваровУслуг.Номер = &НомерИнвойса ");
		Запрос.УстановитьПараметр("НомерИнвойса", Объект.НомерИнвойса);
	ИначеЕсли ВариантЗаполнения = "ПТУ" Тогда	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоИнвойсу", " ПриобретениеТоваровУслуг.Ссылка = &ПТУ ");
		Запрос.УстановитьПараметр("ПТУ", Объект.СсылкаНаПТУ);
	Иначе // ВариантЗаполнения: "NVE"
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоИнвойсу", " УпаковочныйЛист.Код = &NVE ");
		Запрос.УстановитьПараметр("NVE", Объект.NVE);
	КонецЕсли;	
	
	ПакетРезультатов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	Данные = ПакетРезультатов[0];
	КоличествоПТУ = ПакетРезультатов[1];
	КоличествоNVE =ПакетРезультатов[2];
	
	тзДанные = Данные.Выгрузить();

	Если Данные.Пустой() Тогда
		ОбщегоНазначения.СообщитьПользователю("Не найдены данные для заполнения таблицы управления доставкой");
		Возврат;
	КонецЕсли;
	
	ВыборкаДанных = Данные.Выбрать();
	ВыборкаДанных.Следующий();
	УникальностьПТУ = Ложь;
	УникальностьNVE = Ложь;
		
	ВыборкаКоличествоПТУ = КоличествоПТУ.Выбрать();
	ВыборкаКоличествоПТУ.Следующий();
	Если ВыборкаКоличествоПТУ["Количество"] = 1 Тогда
		УникальностьПТУ = Истина;
		Объект.СсылкаНаПТУ = ВыборкаДанных["ПТУ"];
		Если ВариантЗаполнения <> "Инвойс" Тогда
			Объект.НомерИнвойса = ВыборкаДанных["НомерИнвойса"];
		КонецЕсли;
	Иначе
		Объект.СсылкаНаПТУ = "";
		Если ВариантЗаполнения <> "Инвойс" Тогда
			Объект.НомерИнвойса = "";
		КонецЕсли;
		мПТУ = тзДанные.ВыгрузитьКолонку("ПТУ");
		мПТУУникальныеЗначения = Новый Массив;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(мПТУУникальныеЗначения, мПТУ, Истина);
		Элементы.СсылкаНаПТУ1.СписокВыбора.ЗагрузитьЗначения(мПТУУникальныеЗначения);
		Элементы.СсылкаНаПТУ1.КнопкаСпискаВыбора = Истина;
		Элементы.СсылкаНаПТУ1.РежимВыбораИзСписка =Истина;
	КонецЕсли;	

	ВыборкаКоличествоNVE = КоличествоNVE.Выбрать();
	ВыборкаКоличествоNVE.Следующий();
	Если ВыборкаКоличествоNVE["Количество"] = 1 Тогда
		УникальностьNVE = Истина;
		Объект.NVE = ВыборкаДанных["NVE"];
		Если УникальностьПТУ И ВариантЗаполнения = "NVE" Тогда
			ЗаполнитьУправлениеПоставкойТоварыНаСервере("ПТУ");
			Возврат;
		КонецЕсли;
	Иначе
		Объект.NVE = "";
	КонецЕсли;

	ВыборкаДанных.Сбросить();
	
	Если УникальностьПТУ 
		//И УникальностьNVE 
		Тогда
		Пока ВыборкаДанных.Следующий() Цикл
			нс = Объект.Товары_УправлениеПоставкой.Добавить();
			ЗаполнитьЗначенияСвойств(нс, ВыборкаДанных);
		КонецЦикла;
	КонецЕсли;
	
	ИнвертироватьКнопкиЗакрытияПоставкиНаСервере(Истина);

КонецПроцедуры

&НаСервере
Процедура ИнвертироватьКнопкиЗакрытияПоставкиНаСервере(Действие = Неопределено)
	Если Действие = Неопределено Тогда
		Элементы.Товары_УправлениеПоставкойЗакрытьПоставку.Доступность = 
		Не Элементы.Товары_УправлениеПоставкойЗакрытьПоставку.Доступность;
		Элементы.Товары_УправлениеПоставкойЗакрытьПоставкуПринудительно.Доступность = 
		Не Элементы.Товары_УправлениеПоставкойЗакрытьПоставкуПринудительно.Доступность;
	Иначе
		Элементы.Товары_УправлениеПоставкойЗакрытьПоставку.Доступность = Действие; 
		Элементы.Товары_УправлениеПоставкойЗакрытьПоставкуПринудительно.Доступность = Действие;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗакрытьПоставкуНаСервере()
	
	тзПоставка = Объект.Товары_УправлениеПоставкой.Выгрузить();
	ПроверкаПройдена = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	т.НомерСтроки КАК НомерСтроки,
	|	т.Номенклатура КАК Номенклатура,
	|	т.Комплектация КАК Комплектация,
	|	т.NVE КАК NVE,
	|	т.СтатусЕН КАК СтатусЕН,
	|	т.Назначен КАК Назначен,
	|	т.РаспечатанПризнак КАК РаспечатанПризнак,
	|	т.РаспечатанДата КАК РаспечатанДата
	|ПОМЕСТИТЬ тч
	|ИЗ
	|	&тч КАК т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	т.НомерСтроки КАК НомерСтроки,
	|	т.Номенклатура КАК Номенклатура,
	|	т.Комплектация КАК Комплектация,
	|	т.NVE КАК NVE,
	|	т.СтатусЕН КАК СтатусЕН,
	|	т.Назначен КАК Назначен,
	|	т.РаспечатанПризнак КАК РаспечатанПризнак,
	|	т.РаспечатанДата КАК РаспечатанДата
	|ИЗ
	|	тч КАК т
	|ГДЕ
	|	(НЕ т.Назначен
	|			ИЛИ НЕ т.РаспечатанПризнак
	|			ИЛИ НЕ т.СтатусЕН В (ЗНАЧЕНИЕ(Перечисление.гф_СтатусыИсключений.ПустаяСсылка), ЗНАЧЕНИЕ(Перечисление.гф_СтатусыИсключений.ЭтикеткиНаклеены)))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	Запрос.УстановитьПараметр("тч", тзПоставка);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ПроверкаПройдена = Истина;	
	КонецЕсли;
	
	Если ПроверкаПройдена Тогда
		Период = ТекущаяДатаСеанса();
		Пользователь =  Пользователи.ТекущийПользователь();
		
		Набор = РегистрыСведений.гф_СтатусОтгрузки.СоздатьНаборЗаписей();
		Набор.Отбор.Период.Установить(Период);
		Набор.Отбор.Документ.Установить(Объект.СсылкаНаПТУ);
		Набор.Отбор.Отгрузил.Установить(Пользователь);
		нс = Набор.Добавить();
		нс.Период = Период;
		нс.Отгрузил = Пользователь;
		нс.Документ = Объект.СсылкаНаПТУ;
		ТК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СсылкаНаПТУ, "Контрагент");
		нс.ТК = ТК;
		нс.ГотовоКПодачеГТД = Истина;
		Набор.Записать();
		ИнвертироватьКнопкиЗакрытияПоставкиНаСервере(Ложь);
	Иначе
		тчСОтбором = Результат.Выгрузить();
		Объект.Товары_УправлениеПоставкой.Загрузить(тчСОтбором);
		ОшибкиПоНазначению = Ложь;
		ОшибкиПоРаспечатыванию = Ложь;
		ОшибкиПоСтатусу = Ложь;
		Для каждого стрТч Из Объект.Товары_УправлениеПоставкой Цикл
			Если Не стрТч["Назначен"] Тогда
				ОшибкиПоНазначению = Истина;
			КонецЕсли;	
			Если Не стрТч["РаспечатанПризнак"] Тогда
				ОшибкиПоРаспечатыванию = Истина;
			КонецЕсли;	
			Если Не (стрТч["СтатусЕН"] = Перечисления.гф_СтатусыИсключений.ПустаяСсылка() ИЛИ 
				стрТч["СтатусЕН"] = Перечисления.гф_СтатусыИсключений.ЭтикеткиНаклеены) Тогда
				ОшибкиПоСтатусу = Истина;
			КонецЕсли;	
		КонецЦикла;
		Если ОшибкиПоНазначению Тогда
			ОбщегоНазначения.СообщитьПользователю("Не все NVE назначены");
		КонецЕсли;
		Если ОшибкиПоРаспечатыванию Тогда
			ОбщегоНазначения.СообщитьПользователю("Не все NVE распечатаны");
		КонецЕсли;
		Если ОшибкиПоСтатусу Тогда
			ОбщегоНазначения.СообщитьПользователю("Не все исключения обработаны");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПоставку(Команда)
	ОчиститьСообщения();
	// ++ Галфинд_ДомнышеваКР_24_10_2023
	Если НЕ ПриходныйОрдерВерный() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Приходный ордер на таможенный склад по данному ПТиУ " 
		+ Объект.СсылкаНаПТУ + " не принят. Требуется принять.");
		Возврат;
	КонецЕсли;
	// -- Галфинд_ДомнышеваКР_24_10_2023
	ЗакрытьПоставкуНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗакрытьПоставкуПринудительноНаСервере()
	ЕстьРольУправлениеПоставкой = Пользователи.ЭтоПолноправныйПользователь( , Ложь) 
		Или УправлениеДоступом.ЕстьРоль("гф_УправлениеПоставкой");

	Если ЕстьРольУправлениеПоставкой Тогда
		Период = ТекущаяДатаСеанса();
		Пользователь =  Пользователи.ТекущийПользователь();
		Набор = РегистрыСведений.гф_СтатусОтгрузки.СоздатьНаборЗаписей();
		Набор.Отбор.Период.Установить(Период);
		Набор.Отбор.Документ.Установить(Объект.СсылкаНаПТУ);
		Набор.Отбор.Отгрузил.Установить(Пользователь);
		нс = Набор.Добавить();
		нс.Период = Период;
		нс.Отгрузил = Пользователь;
		нс.Документ = Объект.СсылкаНаПТУ;
		ТК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СсылкаНаПТУ, "Контрагент");
		нс.ТК = ТК;
		нс.Статус = Истина;
		// vvv Галфинд \ Sakovich 24.04.2023
		нс.ГотовоКПодачеГТД = Истина;
		// ^^^ Галфинд \ Sakovich 24.04.2023 
		Набор.Записать();
		ИнвертироватьКнопкиЗакрытияПоставкиНаСервере(Ложь);
	Иначе
		ОбщегоНазначения.СообщитьПользователю("Нет прав для осуществления закрытия поставки принудительно!");
	КонецЕсли;

КонецПроцедуры
&НаКлиенте
Процедура ЗакрытьПоставкуПринудительно(Команда)
	ОчиститьСообщения();
	// ++ Галфинд_ДомнышеваКР_24_10_2023
	Если НЕ ПриходныйОрдерВерный() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Приходный ордер на таможенный склад по данному ПТиУ " 
		+ Объект.СсылкаНаПТУ + " не принят. Требуется принять.");
		Возврат;
	КонецЕсли;
	// -- Галфинд_ДомнышеваКР_24_10_2023
	ЗакрытьПоставкуПринудительноНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НомерИнвойса1ПриИзменении(Элемент)
	ЗаполнениеУправлениеПоставкойПоНомеруИнвойсаИлиПТУАвто("Инвойс");
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаПТУ1ПриИзменении(Элемент)
	ЗаполнениеУправлениеПоставкойПоНомеруИнвойсаИлиПТУАвто("ПТУ");
КонецПроцедуры

&НаКлиенте
Процедура NVE2ПриИзменении(Элемент)
	ЗаполнениеУправлениеПоставкойПоНомеруИнвойсаИлиПТУАвто("NVE");
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбновитьСтатусыИсключенийНаСервере()
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ИСТИНА КАК Пометка,
	|	гф_ОбработкаИсключенийСрезПоследних.NVE КАК NVE,
	|	гф_ОбработкаИсключенийСрезПоследних.Статус КАК Статус,
	|	гф_ОбработкаИсключенийСрезПоследних.Период КАК ДатаСтатуса
	|ИЗ
	|	РегистрСведений.гф_ОбработкаИсключений.СрезПоследних КАК гф_ОбработкаИсключенийСрезПоследних
	|ГДЕ
	|	гф_ОбработкаИсключенийСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.гф_СтатусыИсключений.КодыПолучены)");
	Результат = Запрос.Выполнить();
	ТабСтатусов = Результат.Выгрузить();
	ТаблицаСтатусовNVEДляПечати.Загрузить(ТабСтатусов);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбновлениеСтатусовИсключенийКлиент()
	ОбновитьСтатусыИсключенийНаСервере();
	Элементы.ТаблицаСтатусовNVEДляПечати.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусыИсключений(Команда)
	ВыполнитьОбновлениеСтатусовИсключенийКлиент();
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруПроверки()
	СтруктураВозврата = Новый Структура(
	"Статус,"
	+ "ДальнейшееДействие,"
	+ "ЗаказКодовВозможен");
	Возврат СтруктураВозврата;
КонецФункции

&НаСервере
Функция ПроверитьКодыПоЗаказуПолучены(Ссылка)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовИСМП КАК Статусы
	|		ПО (Статусы.Документ = Таблица.Ссылка)
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка
	|	И Таблица.Проведен
	|	И Таблица.ДокументОснование ССЫЛКА Документ.ПересортицаТоваров
	|	И ВЫРАЗИТЬ(Таблица.ДокументОснование КАК Документ.ПересортицаТоваров).Проведен
	|	И Статусы.ДальнейшееДействие1 = ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется)
	|	И Статусы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗКодыМаркировкиЭмитированы)";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Результат = Запрос.Выполнить();
	Возврат Не Результат.Пустой();
	
КонецФункции

&НаКлиенте
Процедура ПечататьДобавленныеКМ(Команда)
	
	текСтрока = Элементы.ТаблицаСтатусовNVEДляПечати.ТекущаяСтрока;
	Если текСтрока <> Неопределено Тогда
		ЭлКоллекции = ТаблицаСтатусовNVEДляПечати.НайтиПоИдентификатору(текСтрока);
		Если ЭлКоллекции <> Неопределено Тогда
			РезультирующийТабДок = Новый ТабличныйДокумент;
			УстановитьПараметрыТабличногоДокумента(РезультирующийТабДок);
			мТабДоков = Новый Массив;
			ПолучитьДанныеПечатиДобавленныхКМ(ЭлКоллекции["NVE"]);
			ПоместитьВоВременноеХранилище(Неопределено, АдресРезультата);
			ПечатьЭтикеткиНаКлиенте(Команда.Имя, Ложь);
			ТабДок = ПолучитьИзВременногоХранилища(АдресРезультата);
			Если ТабДок <> Неопределено Тогда
				мТабДоков.Добавить(ТабДок);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОчиститьРеквизитыФормы(Элементы.ГруппаСтраницы.ТекущаяСтраница);
	
	КоличествоТабДоков = мТабДоков.Количество();
	Если КоличествоТабДоков > 0 Тогда
		СформироватьРезультирующийТабДок(мТабДоков, РезультирующийТабДок);
		
		Если Объект.АвтоматическаяПечать Тогда
			// печать без предупреждений на принтер, установленный по умолчанию на клиенте 
			РаспечататьДокументыНаПринтер(РезультирующийТабДок);
		ИначеЕсли РежимПечатиИслючаемыеКМ = 0 Тогда	
			// предварительный просмотр
			РезультирующийТабДок.Вывод = ИспользованиеВывода.Запретить;//Галфинд_ДомнышеваКР_16_10_2023
			РезультирующийТабДок.Показать("Печать добавленных КМ");
		Иначе // РежимПечатиИслючаемыеКМ = 1
			// напечатать с диалогом выбора принтера
			РезультирующийТабДок.Вывод = ИспользованиеВывода.Разрешить;
			РезультирующийТабДок.Напечатать(РежимИспользованияДиалогаПечати.Использовать);
		КонецЕсли;	
	КонецЕсли;
	
	ВыполнитьОбновлениеСтатусовИсключенийКлиент();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьРезультирующийТабДок(мТабДоков, РезультирующийТабДок)
	КоличествоТабДоков = мТабДоков.Количество();
	Если КоличествоТабДоков > 0 Тогда
		Индекс = 0;
		Для каждого Эл Из мТабДоков Цикл
			РезультирующийТабДок.Вывести(Эл);
			Если Индекс < КоличествоТабДоков -1 Тогда
				РезультирующийТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
		КонецЦикла;
		Индекс = Индекс + 1;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеПечатиДобавленныхКМ(Агрегат)
	
	УпаковочныйЛист = Неопределено;
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	УпаковочныйЛист.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
	|ГДЕ
	|	УпаковочныйЛист.гф_Агрегация = &Агрегат");
	Запрос.УстановитьПараметр("Агрегат", Агрегат);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ВыборкаУл = Результат.Выбрать();
	ВыборкаУл.Следующий();
	УпаковочныйЛист = ВыборкаУл["Ссылка"];
	
	лПараметры = Новый Структура("ШтрихкодУпаковки, УпаковочныйЛист");
	мКМ = Новый Массив;
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	УпаковочныйЛист.Ссылка КАК УпаковочныйЛист,
	|	УпаковочныйЛист.гф_Агрегация КАК ШтрихкодУпаковки,
	|	ПересортицаТоваров.Ссылка КАК Пересортица,
	|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Ссылка КАК ЗаказНаЭмиссию
	|ПОМЕСТИТЬ ДанныеДокументовЭмиссии
	|ИЗ
	|	Документ.ПересортицаТоваров КАК ПересортицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист КАК УпаковочныйЛист
	|		ПО ПересортицаТоваров.гф_IDКороба = УпаковочныйЛист.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ КАК ЗаказНаЭмиссиюКодовМаркировкиСУЗ
	|		ПО ПересортицаТоваров.Ссылка = ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ДокументОснование
	|ГДЕ
	|	УпаковочныйЛист.Ссылка = &УпаковочныйЛист
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокументовЭмиссии.УпаковочныйЛист КАК УпаковочныйЛист,
	|	ДанныеДокументовЭмиссии.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК КМ
	|ИЗ
	|	ДанныеДокументовЭмиссии КАК ДанныеДокументовЭмиссии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|			ПО ПулКодовМаркировкиСУЗ.КодМаркировки = ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода
	|		ПО ДанныеДокументовЭмиссии.Пересортица = ПулКодовМаркировкиСУЗ.ДокументОснование
	|			И ДанныеДокументовЭмиссии.ЗаказНаЭмиссию = ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию
	|ИТОГИ ПО
	|	УпаковочныйЛист,
	|	ШтрихкодУпаковки");
	Запрос.УстановитьПараметр("УпаковочныйЛист", УпаковочныйЛист);
	Результат = Запрос.Выполнить();
	ВыборкаУЛ = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ВыборкаУЛ.Следующий() Тогда
		ВыборкаАгрегат = ВыборкаУЛ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если ВыборкаАгрегат.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(лПараметры, ВыборкаАгрегат);
			ВыборкаДетали = ВыборкаАгрегат.Выбрать();
			Пока ВыборкаДетали.Следующий() Цикл
				мКМ.Добавить(ВыборкаДетали["КМ"]);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если мКМ.Количество() > 0 Тогда
		Объект.УпаковочныйЛист = лПараметры["УпаковочныйЛист"];
		Объект.NVE = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(лПараметры["ШтрихкодУпаковки"], 
		"ЗначениеШтрихкода");
		Объект.Номенклатура = Общегоназначения.ЗначениеРеквизитаОбъекта(лПараметры["УпаковочныйЛист"],
		"гф_Комплектация.Владелец");
		ЗаполнитьТаблицуТоваровПоДобавленнымКМ(лПараметры, мКМ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура NVEДляПечатиИсключенияПриИзменении(Элемент)
	ВыполнитьОбновлениеСтатусовИсключенийКлиент();
	Если СокрЛП(NVEДляПечатиИсключения) = "" Тогда
		Возврат;
	КонецЕсли;
	СтруктураШК_УЛ = НайтиШтрикходУпаковкиТоваровИУпаковочныйЛистПоNVE(СокрЛП(NVEДляПечатиИсключения));
	СтрПоиска = Новый Структура("NVE", СтруктураШК_УЛ["ШтрихКодУпаковки"]);
	мСтрокПечатиИсключений = ТаблицаСтатусовNVEДляПечати.НайтиСтроки(СтрПоиска);

	РезультирующийТабДок = Новый ТабличныйДокумент;
	УстановитьПараметрыТабличногоДокумента(РезультирующийТабДок);
	мТабДоков = Новый Массив;
	Для каждого стрКоллекции Из мСтрокПечатиИсключений Цикл
			ПолучитьДанныеПечатиДобавленныхКМ(стрКоллекции["NVE"]);
			ПоместитьВоВременноеХранилище(Неопределено, АдресРезультата);
			
			// vvv Галфинд \ Sakovich 28.06.2023
			//ПечатьЭтикеткиНаКлиенте("ПечататьДобавленныеКМ", Ложь);
			ПечатьЭтикеткиНаКлиенте("ПечататьДобавленныеКМ", Истина);
			// ^^^ Галфинд \ Sakovich 28.06.2023 
			
			ТабДок = ПолучитьИзВременногоХранилища(АдресРезультата);
			Если ТабДок <> Неопределено Тогда
				мТабДоков.Добавить(ТабДок);
			КонецЕсли;
	КонецЦикла;
	
	ОчиститьРеквизитыФормы(Элементы.ГруппаСтраницы.ТекущаяСтраница);
	NVEДляПечатиИсключения = "";
	
	КоличествоТабДоков = мТабДоков.Количество();
	Если КоличествоТабДоков > 0 Тогда
		СформироватьРезультирующийТабДок(мТабДоков, РезультирующийТабДок);
		
		Если Объект.АвтоматическаяПечать Тогда
			// печать без предупреждений на принтер, установленный по умолчанию на клиенте 
			РаспечататьДокументыНаПринтер(РезультирующийТабДок);
		ИначеЕсли РежимПечатиИслючаемыеКМ = 0 Тогда	
			// предварительный просмотр
			РезультирующийТабДок.Вывод = ИспользованиеВывода.Запретить;//Галфинд_ДомнышеваКР_16_10_2023
			РезультирующийТабДок.Показать("Печать добавленных КМ");
		Иначе // РежимПечатиИслючаемыеКМ = 1
			// напечатать с диалогом выбора принтера
			РезультирующийТабДок.Вывод = ИспользованиеВывода.Разрешить;
			РезультирующийТабДок.Напечатать(РежимИспользованияДиалогаПечати.Использовать);
		КонецЕсли;	
	КонецЕсли;
	ВыполнитьОбновлениеСтатусовИсключенийКлиент();	
		
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическаяПечать2ПриИзменении(Элемент)
	ДоступностьРежимаПечатиИсключений();
КонецПроцедуры

&НаКлиенте
Процедура ДоступностьРежимаПечатиИсключений()
	Элементы.РежимПечатиИслючаемыеКМ.Доступность = Не Объект.АвтоматическаяПечать;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	ОтключитьОбработчикОжидания("ОбработкаДанныхПоИсключениям");
	
	// ++ Галфинд_ДомнышеваКР_27_09_2023
	// Отпала необходимость в блокировке
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee5d0632ae4f6e
	//ВыполнитьДействияБлокировкаАртикуловПоNVE("", "Удалить", Истина);
	// -- Галфинд_ДомнышеваКР_27_09_2023
КонецПроцедуры

// #wortmann { 
// Перенесла из ПечатьЭтикетки() в отдельную функцию с возвратом найденного значения 
// Галфинд_Домнышева 2023/04/24
&НаСервере
Функция ПолучитьДатуИзготовленияКМ(тзТовары, Строка)
	
	// Получение дат изготовления КМ
	ЗапросКМ = Новый Запрос;
	ЗапросКМ.Текст = 
	"ВЫБРАТЬ
	|	ТЧ.Номенклатура КАК Номенклатура,
	|	ТЧ.Характеристика КАК Характеристика,
	|	ТЧ.КМ КАК КМ
	|ПОМЕСТИТЬ ВТ_ТЧ
	|ИЗ
	|	&ТЧ КАК ТЧ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТЧ.Номенклатура КАК Номенклатура,
	|	ВТ_ТЧ.Характеристика КАК Характеристика,
	|	ВТ_ТЧ.КМ КАК КМ,
	|	ЕСТЬNULL(ПулКодовМаркировкиСУЗ.ДатаЭмиссииУниверсальная, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаИзготовленияКМ
	|ИЗ
	|	ВТ_ТЧ КАК ВТ_ТЧ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
	|			ПО (ПулКодовМаркировкиСУЗ.КодМаркировки = ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода)
	|		ПО ВТ_ТЧ.КМ = ШтрихкодыУпаковокТоваров.Ссылка";
	ЗапросКМ.УстановитьПараметр("ТЧ", тзТовары);
	
	ТаблицаСДатами = ЗапросКМ.Выполнить().Выгрузить();
	ТаблицаСДатами.Индексы.Добавить("Номенклатура, Характеристика, КМ");
	
	СтруктураПоискаДаты = Новый Структура("Номенклатура, Характеристика, КМ");
	
	// ++ Галфинд_ДомнышеваКР_24_04_2023
        СтруктураПоискаДаты.Номенклатура = Строка.Номенклатура;
		СтруктураПоискаДаты.Характеристика = Строка.Характеристика;
		СтруктураПоискаДаты.КМ = Строка.КМ;
		СтрокаСДатой = ТаблицаСДатами.НайтиСтроки(СтруктураПоискаДаты);
		Если СтрокаСДатой.Количество() > 0 Тогда
			// ++ Галфинд ВолковЕВ 15.06.2023
			//ДатаИзготовления = СтрокаСДатой[0].ДатаИзготовленияКМ;
			ДатаИзготовления = Формат(СтрокаСДатой[0].ДатаИзготовленияКМ, "ДЛФ=Д");
			// -- Галфинд ВолковЕВ 15.06.2023
		Иначе
			// ++ Галфинд ВолковЕВ 15.06.2023
			//ДатаИзготовления = Дата(1,1,1);
			ДатаИзготовления = Формат(Дата(1,1,1), "ДЛФ=Д");
			// -- Галфинд ВолковЕВ 15.06.2023
		КонецЕсли;
	// -- Галфинд_ДомнышеваКР_24_04_2023 
       Возврат ДатаИзготовления;
	
КонецФункции// } #wortmann

// #wortmann { 
// Получает перевод значения реквизита из РС гф_ПереводЗначенийРеквизитовИСвойств 
// Галфинд_Домнышева 2023/04/24
&НаСервере
Функция ПереводРеквизита(Реквизит)  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	гф_ПереводЗначенийРеквизитовИСвойств.Значение КАК Наименование
		|ИЗ
		|	РегистрСведений.гф_ПереводЗначенийРеквизитовИСвойств КАК гф_ПереводЗначенийРеквизитовИСвойств
		|ГДЕ
		|	гф_ПереводЗначенийРеквизитовИСвойств.Объект = &Реквизит
		|	И гф_ПереводЗначенийРеквизитовИСвойств.Язык = &Этикетки";
	
	Запрос.УстановитьПараметр("Реквизит", Реквизит);
	Запрос.УстановитьПараметр("Этикетки",  Справочники.гф_ВидыЯзыков.НайтиПоНаименованию("Этикетки"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка.Следующий();
		Возврат Выборка.Наименование;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции// } #wortmann

// #wortmann { 
// Получает Реквизит по Синониму 
// Галфинд_Домнышева 2023/04/24
&НаСервере
Функция ОпределитьРеквизит(Синоним) 
	
	Для каждого Реквизит Из Метаданные.Справочники.Номенклатура.Реквизиты Цикл
		Если Реквизит.Синоним = Синоним Тогда
			Возврат Реквизит;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции// } #wortmann

// #wortmann { 
// Получает соответствующего вида адрес для Контрагента  
// Галфинд_Домнышева 2023/04/24
&НаСервере
Функция ПолучитьАдрес(Получатель, ВидАдреса) 
	
	Если ТипЗнч(Получатель) = Тип("СправочникСсылка.Контрагенты") Тогда
		ИскомыйКонтрагент = Получатель;
	Иначе
		ИскомыйКонтрагент = ПолучитьКонтрагентПоПроизводителю(Получатель);
	КонецЕсли;	
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтрагентыКонтактнаяИнформация.Представление КАК Адрес
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|ГДЕ
		|	КонтрагентыКонтактнаяИнформация.Вид = &Вид
		|	И КонтрагентыКонтактнаяИнформация.Тип = &Тип
		|	И КонтрагентыКонтактнаяИнформация.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Вид", ВидАдреса);
	Запрос.УстановитьПараметр("Ссылка", ИскомыйКонтрагент);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка.Следующий();
		Возврат Выборка.Адрес;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции// } #wortmann

// #wortmann { 
// Получает Контрагента по Производителю. 
// Галфинд_Домнышева 2023/04/24
&НаСервере
Функция ПолучитьКонтрагентПоПроизводителю(Производитель)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	гф_СоответствиеОрганизацииГруппеДступаИСписка.Контрагент КАК Контрагент
		|ИЗ
		|	РегистрСведений.гф_СоответствиеОрганизацииГруппеДступаИСписка КАК гф_СоответствиеОрганизацииГруппеДступаИСписка
		|ГДЕ
		|	гф_СоответствиеОрганизацииГруппеДступаИСписка.Производитель = &Производитель";
	
	Запрос.УстановитьПараметр("Производитель", Производитель);

	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка.Следующий();
		Возврат Выборка.Контрагент;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции// } #wortmann 

#Область Перемаркировки

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee1c9530c1660c
// Ограничение ТЧ КМКПечати:
// Галфинд_Домнышева 2023/07/17
&НаКлиенте
Процедура КМКПечатиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Объект.КМКПечати.Количество() > КоличествоСтрокТЧ Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Установлено ограничение по строкам в ТЧ. Распечатайте сначала имеющиеся КМ!");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры// } #wortmann

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee1c9530c1660c
// Команда выбора документа для печати КМ:
// Галфинд_Домнышева 2023/07/17
&НаКлиенте
Процедура ВыбратьДокумент(Команда)
	
	Объект.ТоварыКПеремаркировке.Очистить();
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Команда", Команда);
	
    ВыбратьДокументДействие(ДопПараметры);
	
КонецПроцедуры// } #wortmann 

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee1c9530c1660c
// Выбор тип значения документа основания для печати КМ 
// Галфинд_Домнышева 2023/07/17
&НаКлиенте
Процедура ВыбратьДокументДействие(ДопПараметры)
	
	СтандартнаяОбработка = ЛОЖЬ;
	сзТипы = Новый СписокЗначений();
	сзТипы.Добавить(0, "Заявка на возврат товаров от клиента");
	сзТипы.Добавить(1, "Перемаркировка товаров ИС МП");
	ооВыборЗначенияТипа = Новый ОписаниеОповещения("ВыборЗначенияТипа", ЭтотОбъект, ДопПараметры);
	сзТипы.ПоказатьВыборЭлемента(
	ооВыборЗначенияТипа,	//Вызов процедуры оповещения
	"Выберите тип документа",	//Заголовок диалогового окна выбора типа
	сзТипы[1]				//Первоначально позиционирование на значение выбора
	);

КонецПроцедуры// } #wortmann 

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee1c9530c1660c
// Действия после выбора типа значения документа основания для печати КМ
// Галфинд_Домнышева 2023/07/17
&НаКлиенте
Процедура ВыборЗначенияТипа(Результат, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = ЛОЖЬ;
	Если Результат = Неопределено Тогда Возврат КонецЕсли;
	
	Отбор = Новый Структура();
    Оповещение = Новый ОписаниеОповещения("ПослеВыбораДокумента", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыОткрытия = Новый Структура("Значение", Результат.Значение);
	
	ОткрытьФорму("Обработка.гф_РабочееМестоКладовщика.Форма.ФормаВыбораДокументовОснования", ПараметрыОткрытия,
	ЭтотОбъект, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры// } #wortmann

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee1c9530c1660c
// Действия после выбора документа основания для печати КМ
// Галфинд_Домнышева 2023/07/17
&НаКлиенте
Процедура ПослеВыбораДокумента(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено Тогда 
		ОбработкаТЧПоВыбранномуДокументу(Результат.Значение);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не выбран документ-основание для заполнения!");
	КонецЕсли;

КонецПроцедуры// } #wortmann 

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee1c9530c1660c
// Обработка по заполнению ТЧ ТоварыКПеремаркировке
// Галфинд_Домнышева 2023/07/17 
//
// Параметры:
//  Документ - ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента, ДокументСсылка.ПеремаркировкаТоваровИСМП
&НаКлиенте
Процедура ОбработкаТЧПоВыбранномуДокументу(Документ)
	
	ДокументОснованиеПеремаркировки = Документ; // для удобства работы
	
	ОтветПоДокументуОснования = ЗаполнитьПоДокументу(Документ);
	
	Если ОтветПоДокументуОснования = "1" ИЛИ ОтветПоДокументуОснования = "2" Тогда
		
		ДополнительныеПараметры = Новый Структура();
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораКоманды", ЭтотОбъект, ДополнительныеПараметры);
		ПараметрыОткрытия = Новый Структура("Значение", ОтветПоДокументуОснования);
		
		ОткрытьФорму("Обработка.гф_РабочееМестоКладовщика.Форма.ФормаКоманд", ПараметрыОткрытия,
		ЭтотОбъект, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ОтветПоДокументуОснования = "3" Тогда
		
		ПоказатьПредупреждение(, "По выбранному документу все КМ распечатаны и подтверждены.", 10);
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ПослеОтменить", Истина);
		ВыбратьДокументДействие(ДопПараметры);
		
	Иначе
		
		ОбщегоНазначенияКлиент.СообщитьПользователю("Загружены все товары к перемаркирвке из выбранного документа.");
		
	КонецЕсли;
	
КонецПроцедуры// } #wortmann 

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee1c9530c1660c
// Действия после выбора команды в форме "ФормаКоманд"
// Галфинд_Домнышева 2023/07/17 
&НаКлиенте
Процедура ПослеВыбораКоманды(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено Тогда 
		
		Если Результат.Команда = "ОтменитьДействия" Тогда
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ПослеОтменить", Истина);
			ВыбратьДокументДействие(ДопПараметры);
			
		ИначеЕсли Результат.Команда = "НачатьЗаново" Тогда
			
			КомандаНачатьЗаново();
			
		ИначеЕсли Результат.Команда = "РаспечататьНеподтвержденные" Тогда
			
			КомандаРаспечататьНеподтвержденные();
			
		ИначеЕсли Результат.Команда = "ПодтвердитьНеподтверждённые" Тогда
			
			КомандаПодтвердитьНеподтверждённые();
			
		ИначеЕсли Результат.Команда = "ПовторитьПечать" Тогда
			
			КМКПечати_Печать(ЭтотОбъект.Команды.КМКПечати_Печать);
			
		ИначеЕсли Результат.Команда = "ПродолжитьПечать" Тогда
			
			Объект.КМКПечати.Очистить();
			ТекущийЭлемент = Элементы.ВводGTIN;
			
		ИначеЕсли Результат.Команда = "ПодтвердитьРаспечатанные" Тогда
			
			Оповещение = Новый ОписаниеОповещения("ПослеПодтверждения", ЭтотОбъект);
			ПараметрыОткрытия = Новый Структура("ДокументОснованиеПеремаркировки", ДокументОснованиеПеремаркировки);
			
			ОткрытьФорму("Обработка.гф_РабочееМестоКладовщика.Форма.ФормаПодтвержденияПеремаркировки", ПараметрыОткрытия,
			ЭтотОбъект, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Иначе       
			// не может быть, для чистоты кода
			ОбщегоНазначенияКлиент.СообщитьПользователю("Не выбрано дальнейшее действие.");		
		КонецЕсли;	
		
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не выбрано дальнейшее действие.");
	КонецЕсли;

КонецПроцедуры// } #wortmann 

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee1c9530c1660c
// Заполнение ТЧ ТоварыКПеремаркировке
// Галфинд_Домнышева 2023/07/17 
//
// Параметры:
//  Документ - ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента, ДокументСсылка.ПеремаркировкаТоваровИСМП
//
// Возвращаемое значение:
//	Строка -  "0, 1, 2, 3"
&НаСервере
Функция ЗаполнитьПоДокументу(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолныйТекстЗапросаТоваров();
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		Запрос.УстановитьПараметр("Заявка", Документ);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.Ссылка = &Заявка",
		"ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.гф_ПеремаркировкаТовара = &Перемаркировка");
		Запрос.УстановитьПараметр("Перемаркировка", Документ);
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Товары = РезультатЗапроса.Выгрузить();
		Если Товары.ВыгрузитьКолонку("Распечатан").Найти(Истина) <> Неопределено Тогда
			
			Отбор = Новый Структура;
			Отбор.Вставить("Распечатан", Истина);
			Отбор.Вставить("Подтвержден", Ложь);
			НеподтвержденныеТовары = Товары.Скопировать(Отбор);
			Если НеподтвержденныеТовары.Количество() > 0 Тогда
				Возврат "1";// вызов списка команд 1
				
			Иначе
				Отбор = Новый Структура;
				Отбор.Вставить("Распечатан", Ложь);
				НераспечатанныеТовары = Товары.Скопировать(Отбор);
				Если НераспечатанныеТовары.Количество() > 0 Тогда
					Возврат "2";// вызов списка команд 2
					
				Иначе 
					Возврат "3";// к выбору документа основания
				КонецЕсли; 
				
			КонецЕсли;
			
		Иначе 
			Объект.ТоварыКПеремаркировке.Загрузить(Товары);
		КонецЕсли;		
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("По выбранному документу не найдено данных.");
	КонецЕсли;
	
	Возврат "0";// или все загрузили или нет данных
	
КонецФункции// } #wortmann

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee1c9530c1660c
// Удаление записей из РС гф_КМДляПеремаркировки по документу Перемаркировки 
// Галфинд_Домнышева 2023/07/17 
&НаСервере
Процедура КомандаНачатьЗановоНаСервере()
	
	Если ТипЗнч(ДокументОснованиеПеремаркировки) = Тип("ДокументСсылка.ПеремаркировкаТоваровИСМП") Тогда
		МассивПеремаркировок = Новый Массив;
		МассивПеремаркировок.Добавить(ДокументОснованиеПеремаркировки);
	Иначе
		МассивПеремаркировок = ПолучитьПеремаркировки();
	КонецЕсли;
	
	Для каждого Перемаркировка Из МассивПеремаркировок Цикл
		НаборЗаписей = РегистрыСведений.гф_КМДляПеремаркировки.СоздатьНаборЗаписей();	
		НаборЗаписей.Отбор.Документ.Установить(Перемаркировка);
		НаборЗаписей.Записать(); 
	КонецЦикла;
	
КонецПроцедуры// } #wortmann 

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee1c9530c1660c
// Выполнение команды "НачатьЗаново" 
// Галфинд_Домнышева 2023/07/17
&НаКлиенте
Процедура КомандаНачатьЗаново()
	
	КомандаНачатьЗановоНаСервере();
	
	ОбработкаТЧПоВыбранномуДокументу(ДокументОснованиеПеремаркировки);
	
КонецПроцедуры// } #wortmann 

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee1c9530c1660c
// Получает документы Перемаркировки по документу основания "Заявка"
// Галфинд_Домнышева 2023/07/17 
//
// Возвращаемое значение:
//	Массив - Массив из элементов ДокументСсылка.ПеремаркировкаТоваровИСМП 
&НаСервере
Функция ПолучитьПеремаркировки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.Ссылка КАК Заявка,
	|	ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.гф_ПеремаркировкаТовара КАК ПеремаркировкаТовара
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары
	|ГДЕ
	|	ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.Ссылка = &Заявка
	|";
	
	Запрос.УстановитьПараметр("Заявка", ДокументОснованиеПеремаркировки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
    Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ПеремаркировкаТовара");
	
КонецФункции// } #wortmann

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee1c9530c1660c
// Команда по выводу неподтвержденных товаров для распечатки заново
// Галфинд_Домнышева 2023/07/17 
&НаСервере
Процедура КомандаРаспечататьНеподтвержденные()

	Если ТипЗнч(ДокументОснованиеПеремаркировки) = Тип("ДокументСсылка.ПеремаркировкаТоваровИСМП") Тогда
		МассивПеремаркировок = Новый Массив;
		МассивПеремаркировок.Добавить(ДокументОснованиеПеремаркировки);
	Иначе
		МассивПеремаркировок = ПолучитьПеремаркировки();
	КонецЕсли;
	
	Для каждого Перемаркировка Из МассивПеремаркировок Цикл
		НаборЗаписей = РегистрыСведений.гф_КМДляПеремаркировки.СоздатьНаборЗаписей();	
		НаборЗаписей.Отбор.Документ.Установить(Перемаркировка); 
        НаборЗаписей.Прочитать();
		
		ТекущиеЗначения = НаборЗаписей.Выгрузить(); 
		Для каждого Запись Из ТекущиеЗначения Цикл
			Если НЕ Запись.Подтвержден Тогда
				Запись.Распечатан = Ложь;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Загрузить(ТекущиеЗначения);
		НаборЗаписей.Записать();    
	КонецЦикла;

	ВывестиСписокНеподтвержденных();
	
КонецПроцедуры// } #wortmann 

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee1c9530c1660c
// Заполняет ТЧ ТоварыКПеремаркировке товарами из ДокОсн Не подтвержденных и не распечатанных
// Галфинд_Домнышева 2023/07/17
&НаСервере
Процедура ВывестиСписокНеподтвержденных()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолныйТекстЗапросаТоваров();
	
	Если ТипЗнч(ДокументОснованиеПеремаркировки) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		Запрос.УстановитьПараметр("Заявка", ДокументОснованиеПеремаркировки);	
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.Ссылка = &Заявка",
		"ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.гф_ПеремаркировкаТовара = &Перемаркировка");
		Запрос.УстановитьПараметр("Перемаркировка", ДокументОснованиеПеремаркировки);
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "КМДляПеремаркировки.ПеремаркированныйКМ",
	"КМДляПеремаркировки.ПеремаркированныйКМ" + Символы.ПС + "ГДЕ
	|	ЕСТЬNULL(КМДляПеремаркировки.Распечатан, ЛОЖЬ) = ЛОЖЬ
	|	И ЕСТЬNULL(КМДляПеремаркировки.Подтвержден, ЛОЖЬ) = ЛОЖЬ");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Объект.ТоварыКПеремаркировке.Загрузить(РезультатЗапроса.Выгрузить());
	Иначе			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("По выбранному документу не найдено данных.");
	КонецЕсли;
		
КонецПроцедуры// } #wortmann 

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee1c9530c1660c
// Возвращает полный текст первоначального заполнения ТЧ Товарами
// Галфинд_Домнышева 2023/07/17
//
// Возвращаемое значение:
//	Текст - Строка 
&НаСервере
Функция ПолныйТекстЗапросаТоваров()
	
	Текст =	"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.Ссылка КАК Заявка,
		|	ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.гф_ПеремаркировкаТовара КАК ПеремаркировкаТовара
		|ПОМЕСТИТЬ СоответствиеЗаявки
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары
		|ГДЕ
		|	ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.Ссылка = &Заявка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПеремаркировкаТоваровИСМПТовары.Ссылка КАК Перемаркировка,
		|	ПеремаркировкаТоваровИСМПТовары.НоваяНоменклатура КАК Номенклатура,
		|	ПеремаркировкаТоваровИСМПТовары.НоваяХарактеристика КАК Характеристика,
		|	ПеремаркировкаТоваровИСМПТовары.НовыйКодМаркировки КАК НовыйКодМаркировки,
		|	ПеремаркировкаТоваровИСМПТовары.НоваяНоменклатура.Артикул КАК Артикул
		|ПОМЕСТИТЬ ТоварыИзПеремаркировки
		|ИЗ
		|	Документ.ПеремаркировкаТоваровИСМП.Товары КАК ПеремаркировкаТоваровИСМПТовары
		|ГДЕ
		|	ПеремаркировкаТоваровИСМПТовары.Ссылка В
		|			(ВЫБРАТЬ
		|				СоответствиеЗаявки.ПеремаркировкаТовара
		|			ИЗ
		|				СоответствиеЗаявки КАК СоответствиеЗаявки)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыИзПеремаркировки.Перемаркировка КАК Перемаркировка,
		|	ТоварыИзПеремаркировки.Номенклатура КАК Номенклатура,
		|	ТоварыИзПеремаркировки.Характеристика КАК Характеристика,
		|	ТоварыИзПеремаркировки.Артикул КАК Артикул,
		|	ТоварыИзПеремаркировки.НовыйКодМаркировки КАК НовыйКодМаркировки,
		|	СоответствиеЗаявки.Заявка КАК Заявка,
		|	ШтрихкодыНоменклатуры.Штрихкод КАК GTIN
		|ПОМЕСТИТЬ ТоварыПолный
		|ИЗ
		|	ТоварыИзПеремаркировки КАК ТоварыИзПеремаркировки
		|		ЛЕВОЕ СОЕДИНЕНИЕ СоответствиеЗаявки КАК СоответствиеЗаявки
		|		ПО ТоварыИзПеремаркировки.Перемаркировка = СоответствиеЗаявки.ПеремаркировкаТовара
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ПО ТоварыИзПеремаркировки.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
		|			И ТоварыИзПеремаркировки.Характеристика = ШтрихкодыНоменклатуры.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыПолный.Перемаркировка КАК ДокументПеремаркировки,
		|	ТоварыПолный.Номенклатура КАК Номенклатура,
		|	ТоварыПолный.Характеристика КАК Характеристика,
		|	ТоварыПолный.Артикул КАК Артикул,
		|	ТоварыПолный.НовыйКодМаркировки КАК ПеремаркированныйКМ,
		|	ТоварыПолный.Заявка КАК ДокументВозврата,
		|	ТоварыПолный.GTIN КАК GTIN,
		|	ЕСТЬNULL(КМДляПеремаркировки.Распечатан, ЛОЖЬ) КАК Распечатан,
		|	ЕСТЬNULL(КМДляПеремаркировки.Подтвержден, ЛОЖЬ) КАК Подтвержден
		|ИЗ
		|	ТоварыПолный КАК ТоварыПолный
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гф_КМДляПеремаркировки КАК КМДляПеремаркировки
		|		ПО ТоварыПолный.Перемаркировка = КМДляПеремаркировки.Документ
		|			И ТоварыПолный.GTIN = КМДляПеремаркировки.GTIN
		|			И ТоварыПолный.НовыйКодМаркировки = КМДляПеремаркировки.ПеремаркированныйКМ"; 
	
	Возврат Текст;

КонецФункции// } #wortmann

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee1c9530c1660c
// Заполняет ТЧ ТоварыКПеремаркировке товарами из ДокОсн Не подтвержденных НО распечатанных
// Галфинд_Домнышева 2023/07/17
&НаСервере
Процедура КомандаПодтвердитьНеподтверждённыеНаСервере(Результат)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолныйТекстЗапросаТоваров();
	
	Если ТипЗнч(ДокументОснованиеПеремаркировки) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		Запрос.УстановитьПараметр("Заявка", ДокументОснованиеПеремаркировки);	
	Иначе
		МассивПеремаркировок = ПолучитьПеремаркировки();
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "КМДляПеремаркировки.ПеремаркированныйКМ",
	"КМДляПеремаркировки.ПеремаркированныйКМ" + Символы.ПС + "ГДЕ
	|	ЕСТЬNULL(КМДляПеремаркировки.Распечатан, ЛОЖЬ) = Истина
	|	И ЕСТЬNULL(КМДляПеремаркировки.Подтвержден, ЛОЖЬ) = ЛОЖЬ");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Объект.ТоварыКПеремаркировке.Загрузить(РезультатЗапроса.Выгрузить());
		Результат = Истина;
	Иначе			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("По выбранному документу не найдено данных.");
	КонецЕсли;

КонецПроцедуры// } #wortmann 

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee1c9530c1660c
// Команда при успешном подборе товаров не подтвержденных но распечатанных выводит форму подтверждения
// Галфинд_Домнышева 2023/07/17
&НаКлиенте
Процедура КомандаПодтвердитьНеподтверждённые()
	
	Результат = Ложь;
	КомандаПодтвердитьНеподтверждённыеНаСервере(Результат);	
	Если Результат Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеПодтверждения", ЭтотОбъект);
		ПараметрыОткрытия = Новый Структура("ДокументОснованиеПеремаркировки", ДокументОснованиеПеремаркировки);
		
		ОткрытьФорму("Обработка.гф_РабочееМестоКладовщика.Форма.ФормаПодтвержденияПеремаркировки", ПараметрыОткрытия,
		ЭтотОбъект, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе			
		ОбщегоНазначенияКлиент.СообщитьПользователю("По выбранному документу не найдено данных.");
	КонецЕсли;

КонецПроцедуры// } #wortmann 

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee1c9530c1660c
// После подтверждения товаров на форме "ФормаПодтвержденияПеремаркировки" вносятся изменения в
// ТЧ ТоварыКПеремаркировке и добавляются записи в ТЧ ПодтвержденныеКМ
// Галфинд_Домнышева 2023/07/17
&НаКлиенте
Процедура ПослеПодтверждения(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено Тогда
		
		Если Результат.ПодтвержденныеКМ <> Неопределено Тогда
			Для Каждого Строка Из Результат.ПодтвержденныеКМ  Цикл
				СтруПоиска = Новый Структура;
				СтруПоиска.Вставить("ПеремаркированныйКМ", Строка.Значение);
				
				Нашли = Объект.ТоварыКПеремаркировке.НайтиСтроки(СтруПоиска);
				
				Если Нашли.Количество() > 0 Тогда
					Нашли[0].Подтвержден = Истина;
					НоваяСтрока = Объект.ПодтвержденныеКМ.Добавить();
					НоваяСтрока.Номенклатура = Нашли[0].Номенклатура;
					НоваяСтрока.Характеристика = Нашли[0].Характеристика;
					НоваяСтрока.Артикул = Нашли[0].Артикул;
					НоваяСтрока.GTIN = Нашли[0].GTIN;
					НоваяСтрока.ПеремаркированныйКМ = Строка.Значение;
					НоваяСтрока.Подтвержден = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Результат.Команда = "Завершить" Тогда 
			ПроизвестиИтоговуюОбработку();
		КонецЕсли;
	Иначе	
		ОбщегоНазначенияКлиент.СообщитьПользователю(" Вы не ввели данные, подтверждение не выполнено.");	
	КонецЕсли;
	
КонецПроцедуры// } #wortmann 

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee1c9530c1660c
// При вводе "ВводGTIN" выполняется проверка на наличие этого GTIN в базе и в выбранном документе-основании
// если ок, добавляется запись в ТЧ КМКПечати
// Галфинд_Домнышева 2023/07/17
&НаСервере
Процедура ВводGTINПриИзмененииНаСервере()
	
	Если ВводGTIN = "" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Введите GTIN заново!");
		Возврат;
	КонецЕсли;

	КМКПечати = Объект.КМКПечати;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод КАК GTIN
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &ШК";
	Запрос.УстановитьПараметр("ШК", ВводGTIN);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В базе GTIN не найден. Введите другой GTIN.");
		Возврат;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	стрПоиска = Новый Структура; 
	стрПоиска.Вставить("GTIN", Выборка["GTIN"]);
	стрПоиска.Вставить("Занят", Ложь);
	
	мСтрок = Объект.ТоварыКПеремаркировке.НайтиСтроки(стрПоиска);
	Если мСтрок.Количество() > 0 Тогда
		НовСтр = Объект.КМКПечати.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, мСтрок[0]);
		НовСтр.КМ = мСтрок[0].ПеремаркированныйКМ;
		мСтрок[0].Занят = Истина;
		Возврат;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В выбранном документе GTIN не найден или КМ уже занят." 
														+ " Введите другой GTIN."); 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры// } #wortmann

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee1c9530c1660c
// При вводе "ВводGTIN" вызывается проверка и затем параметр очищается
// Галфинд_Домнышева 2023/07/17
&НаКлиенте
Процедура ВводGTINПриИзменении(Элемент)
	
	Если (Объект.КМКПечати.Количество() + 1) > КоличествоСтрокТЧ Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Установлено ограничение по строкам в ТЧ. Распечатайте сначала имеющиеся КМ!");
		Возврат;
	КонецЕсли;
	
	ВводGTINПриИзмененииНаСервере();
	ВводGTIN = "";
	ЭтотОбъект.ТекущийЭлемент = Элементы.ВводGTIN;
	
КонецПроцедуры// } #wortmann

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee1c9530c1660c
// Команда очистки ТЧ КМКПечати
// Галфинд_Домнышева 2023/07/17
&НаКлиенте
Процедура КМКПечати_Очистить(Команда)
	Объект.КМКПечати.Очистить();
КонецПроцедуры// } #wortmann

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee1c9530c1660c
// Команда печати по ТЧ КМКПечати
// Галфинд_Домнышева 2023/07/17
&НаКлиенте
Процедура КМКПечати_Печать(Команда)
	
	ПоместитьВоВременноеХранилище(Неопределено, АдресРезультата);
	Если Объект.КМКПечати.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не заполнены данные для печати!");
		Возврат;
	КонецЕсли;
	Если Команда.Имя = "КМКПечати_НаЭкран" Тогда 
		ПечатьЭтикеткиПеремаркировкиНаКлиенте(Команда.Имя, Ложь);
	Иначе
		ПечатьЭтикеткиПеремаркировкиНаКлиенте(Команда.Имя);
	КонецЕсли; 

КонецПроцедуры// } #wortmann

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee1c9530c1660c
// Процедура печати КМ по ТЧ КМКПечати (с учетом УЛ из ЗаявкиНаВозврат)
// Галфинд_Домнышева 2023/07/17
&НаКлиенте
Асинх Процедура ПечатьЭтикеткиПеремаркировкиНаКлиенте(ИмяКоманды, ПисатьВРегистрКМДляПеремаркировки = Истина)
	
	ЕстьНастройкиСвойствПечати = ПроверитьЗаполнениеНастроекПечатиСвойствЭтикеток();
	Если Не ЕстьНастройкиСвойствПечати Тогда
		Возврат;
	КонецЕсли;
		
	Если ПисатьВРегистрКМДляПеремаркировки Тогда
		ЗанестиВРС_КМДляПеремаркировки();
		РаспечатанВТЧТоварыКПеремаркировки();
	КонецЕсли;
	
	ПечатьЭтикеткиПеремаркировки(Неопределено, ИмяКоманды);
	
	ТабДок = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если ТабДок = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	Если ИмяКоманды = "КМКПечати_НаЭкран" Тогда
		// предварительный просмотр	
		ТабДок.Показать("Печать КМ Перемаркировки (только просмотр)");
		ТабДок.Вывод = ИспользованиеВывода.Запретить;
		ТекущийЭлемент = Элементы.ВводGTIN;
		Возврат;
		
	Иначе
		// напечатать с диалогом выбора принтера
		ТабДок.Вывод = ИспользованиеВывода.Разрешить;
		ТабДок.Напечатать(РежимИспользованияДиалогаПечати.Использовать);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеВыбораКоманды", ЭтотОбъект);
		ПараметрыОткрытия = Новый Структура("Значение", "5");
		
		ОткрытьФорму("Обработка.гф_РабочееМестоКладовщика.Форма.ФормаКоманд", ПараметрыОткрытия,
		ЭтотОбъект, , , , ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры// } #wortmann 

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee1c9530c1660c
// Запись флага "Распечатан" по определенным строкам в РС гф_КМДляПеремаркировки 
// Галфинд_Домнышева 2023/07/17
&НаСервере
Процедура ЗанестиВРС_КМДляПеремаркировки() 
	
	ТекДата = ТекущаяДатаСеанса();
	СтрокиДляЗаписи = ПодготовитьСтрокиДляЗаписи();
	
	Для каждого Строка Из СтрокиДляЗаписи Цикл
		
		МенеджерЗаписи = РегистрыСведений.гф_КМДляПеремаркировки.СоздатьМенеджерЗаписи();
		
		МенеджерЗаписи.GTIN = Строка.GTIN;
		МенеджерЗаписи.ПеремаркированныйКМ = Строка.ПеремаркированныйКМ;
		МенеджерЗаписи.Документ = Строка.ДокументПеремаркировки;
		МенеджерЗаписи.Распечатан = Истина;
		МенеджерЗаписи.ВремяПечати = ТекДата;
		
		МенеджерЗаписи.Записать();	
		
	КонецЦикла;
	
КонецПроцедуры// } #wortmann

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee1c9530c1660c
// Подбор данных из ТЧ ТоварыКПеремаркировке на основании выбранных штрихкодов из КМКПечати  
// Галфинд_Домнышева 2023/07/17
//
// Возвращаемое значение:
//	ТаблицаЗначений  
&НаСервере
Функция ПодготовитьСтрокиДляЗаписи()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварыКПеремаркировке.GTIN КАК GTIN,
		|	ТоварыКПеремаркировке.ПеремаркированныйКМ КАК ПеремаркированныйКМ,
		|	ТоварыКПеремаркировке.ДокументПеремаркировки КАК ДокументПеремаркировки
		|ПОМЕСТИТЬ ТКП
		|ИЗ
		|	&ТоварыКПеремаркировке КАК ТоварыКПеремаркировке
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТКП.GTIN КАК GTIN,
		|	ТКП.ПеремаркированныйКМ КАК ПеремаркированныйКМ,
		|	ТКП.ДокументПеремаркировки КАК ДокументПеремаркировки
		|ИЗ
		|	ТКП КАК ТКП
		|ГДЕ
		|	ТКП.GTIN В(&МассивШтрихкодов)";
	
	Запрос.УстановитьПараметр("ТоварыКПеремаркировке", Объект.ТоварыКПеремаркировке.Выгрузить());
	Запрос.УстановитьПараметр("МассивШтрихкодов", Объект.КМКПечати.Выгрузить().ВыгрузитьКолонку("GTIN"));
	
	РезультатЗапроса = Запрос.Выполнить();

	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции// } #wortmann

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee1c9530c1660c
// Переделана проц. ПечатьЭтикетки() для Перемаркировки  
// Галфинд_Домнышева 2023/07/17
 &НаСервере
Процедура ПечатьЭтикеткиПеремаркировки(МассивКМДляПечати = Неопределено, ИмяКоманды = Неопределено)
	
	обОбработка = РеквизитФормыВЗначение("Объект");
	тзТовары = ПреобразоватьТаблицуКПечати();
	
	Если Не МассивКМДляПечати = Неопределено Тогда
		Для Каждого СтрокаТЧ Из тзТовары Цикл
			
			СтрокаТЧ.Пометка = Ложь;
			
			Если Не МассивКМДляПечати.Найти(СтрокаТЧ.КМ) = Неопределено Тогда
				СтрокаТЧ.Пометка = Истина;
			КонецЕсли;	
			
		КонецЦикла;
	КонецЕсли;
	
	ДеревоТовары = ПолучитьДеревоДанных(тзТовары);
	
	Если Не ПроверитьЗаполнениеНеобходимыхДанных(ДеревоТовары) Тогда
		Возврат
	КонецЕсли;
	
	ГраницаМакета 		= 13;
	КоличествоСтрок 	= 2;
	КоличествоКолонок 	= 6;
	ЭтикетокНаЛисте 	= КоличествоСтрок * КоличествоКолонок;
	ИндексЭтикетки 		= 0;
	ВсегоНужноНапечататьЭтикеток = тзТовары.Количество();
	
	ТД = Новый ТабличныйДокумент;
	
	Макет = обОбработка.ПолучитьМакет("Этикетка_Декларация5");
	
	ИндексСтроки = 1;
	ИндексКолонки = 1;
	NVE = Неопределено;
	ВывелиПодвал = Ложь;	
	ВывелиРазделитель = Ложь;
	
	Для Каждого строка Из тзТовары Цикл
		
		Если NVE <> строка.NVE ИЛИ ВывелиРазделитель Тогда
			ПараметрыЗаголовка = ПараметрыЗаголовкаПечатьNVE(строка);
			ПечатьЗаголовка(ТД, Макет, ПараметрыЗаголовка);
			// Заново обозначим индексы для нового листа с новым NVE
			ИндексСтроки = 1;
			ИндексКолонки = 1;
			ВывелиПодвал = Ложь;
			ВывелиРазделитель = Ложь;
		КонецЕсли;
		
		NVE = строка.NVE;
		
		мНоменклатура = строка.Номенклатура;
		
		ОписаниеТовара = Строка(мНоменклатура) + " (" + строка.Артикул + ")";
		
		Нашли = ДеревоТовары.строки.Найти(мНоменклатура);
		Если Нашли = Неопределено Тогда
			Текст = "" + мНоменклатура + " не найдены свойства для печати этикетки!";
			ОбщегоНазначения.СообщитьПользователю(Текст);
			Продолжить;
		Иначе
			таб = Нашли.Строки;
		КонецЕсли;
		
		ОбластьОсновная = Макет.ПолучитьОбласть("ОбластьОсновная");
		ОбластьОсновная.Параметры.Размер = "" + Строка["Характеристика"];
		Этикетка = "";
		РисунокШтрихкод = ОбластьОсновная.Рисунки.Штрихкод;
		
		Если строка.КМ.Пустая() Тогда
			ОбластьОсновная.Рисунки.Удалить(РисунокШтрихкод);
		Иначе
			ОбластьОсновная.Рисунки.Удалить(ОбластьОсновная.Рисунки.eac);
			Штрихкод = строка["ПолныйКодМаркировки"];
			ШтрихКодНаПечать = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(строка.КМ, "ЗначениеШтрихкода");
			
			ТипКода = 24;
			Ширина = 220;
			Высота = 220;
			УголПоворота = 0;
			УровеньКоррекцииQR = 0;
			
			ПараметрыШтрихкода = ГенерацияШтрихкода.ПараметрыГенерацииШтрихкода();
			ПараметрыШтрихкода["Ширина"] = Ширина;
			ПараметрыШтрихкода["Высота"] = Высота;
			ПараметрыШтрихкода["ТипКода"] = ТипКода;
			ПараметрыШтрихКода["ОтображатьТекст"] = Истина;
			ПараметрыШтрихкода["РазмерШрифта"] = 10;
			ПараметрыШтрихкода["УголПоворота"] = УголПоворота;
			
			ПараметрыШтрихкода["Штрихкод"] = Штрихкод;
			ПараметрыШтрихкода["ПрозрачныйФон"] = Истина;
			ПараметрыШтрихкода["УровеньКоррекцииQR"] = УровеньКоррекцииQR;
			ПараметрыШтрихКода["ТипВходныхДанных"] = 1;
			СтруктураКартинки = ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыШтрихкода);    		
			
			РисунокШтрихкод.Картинка = СтруктураКартинки.Картинка;
			РисунокШтрихкод.ГраницаСверху = Ложь;
			РисунокШтрихкод.ГраницаСлева = Ложь;
			РисунокШтрихкод.ГраницаСнизу = Ложь;
			РисунокШтрихкод.ГраницаСправа = Ложь;
			РисунокШтрихкод.Защита = Ложь;
			ШтрихКодНаПечать = СтрЗаменить(ШтрихКодНаПечать, "(", "");
			ШтрихКодНаПечать = СтрЗаменить(ШтрихКодНаПечать, ")", "");
			ОбластьОсновная.Параметры.КодМаркировки = ШтрихКодНаПечать;
			
		КонецЕсли;
		
		 ЕстьОписание = Ложь;
		 СтрокаОписание = Неопределено;
		 ЗначениеОписание = Неопределено;

		ДатаИзготовления = ПолучитьДатуИзготовленияКМ(тзТовары, Строка); 
		
		Этикетка = ПолучитьДанныеЭтикетки(мНоменклатура, ДатаИзготовления, Строка.Характеристика);
		
		ОбластьОсновная.Параметры.Этикетка = Этикетка;
		
		ВывелиПодвал = Ложь; 
		
		Для а = 1 По строка.КоличествоЭтикеток Цикл
			
			ИндексЭтикетки = ИндексЭтикетки + 1;
			
			Если ИндексКолонки = 1 Тогда
				ТД.Вывести(ОбластьОсновная);
			Иначе	
				ТД.Присоединить(ОбластьОсновная);
			КонецЕсли;
			
			Если ИндексКолонки = КоличествоКолонок Тогда
				ИндексКолонки = 1;
				ИндексСтроки = ИндексСтроки + 1;
			Иначе
				ИндексКолонки = ИндексКолонки + 1;
			КонецЕсли;
			
			Если ИндексЭтикетки = строка.КоличествоЭтикеток
				ИЛИ ЭтикетокНаЛисте Или ИндексСтроки > КоличествоСтрок Тогда
				
				ПечатьПодвала(ТД, Макет, ПараметрыЗаголовка, ИндексСтроки - 1);
				ВывелиПодвал = Истина;
				
				Если Не (ИндексЭтикетки  = ВсегоНужноНапечататьЭтикеток) Тогда
					ТД.ВывестиГоризонтальныйРазделительСтраниц();
					ВывелиРазделитель = Истина;
				КонецЕсли;
				
				ИндексСтроки = 1;
				ИндексЭтикетки = 0;
			Иначе
				ВывелиПодвал = Ложь;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Если НЕ ВывелиПодвал Тогда
		
		НадоСделатьВывод = Ложь;
		Если ИндексСтроки = 1 И ИндексЭтикетки < 6 Тогда
			
			ИндексЭтикетки = ИндексЭтикетки + 1;
			
			ОбластьОсновная = Макет.ПолучитьОбласть("ОбластьОсновная");
			ОбластьОсновная.Рисунки.Удалить(ОбластьОсновная.Рисунки.Штрихкод);
			ОбластьОсновная.Рисунки.Удалить(ОбластьОсновная.Рисунки.eac);
			
			Пока ИндексЭтикетки <= 6 Цикл
				ОбластьОсновная.Параметры.Размер 		= "";
				ОбластьОсновная.Параметры.Этикетка 		= "";
				ОбластьОсновная.Параметры.КодМаркировки = "";
				ТД.Присоединить(ОбластьОсновная);
				ИндексЭтикетки = ИндексЭтикетки + 1;
			КонецЦикла;
			
			ИндексСтроки = ИндексСтроки + 1;
			НадоСделатьВывод = Истина;
			
		ИначеЕсли ИндексСтроки = 2 И ИндексЭтикетки = 6 Тогда
			ИндексЭтикетки = ИндексЭтикетки + 1;
			НадоСделатьВывод = Истина;
		КонецЕсли;
		
		Если ИндексСтроки = 2 И ИндексЭтикетки < 12 Тогда
			
			ОбластьОсновная = Макет.ПолучитьОбласть("ОбластьОсновная");
			ОбластьОсновная.Рисунки.Удалить(ОбластьОсновная.Рисунки.Штрихкод);
			ОбластьОсновная.Рисунки.Удалить(ОбластьОсновная.Рисунки.eac);
			
			Если НадоСделатьВывод Тогда
				
				ОбластьОсновная.Параметры.Размер 		= "";
				ОбластьОсновная.Параметры.Этикетка 		= "";
				ОбластьОсновная.Параметры.КодМаркировки = "";
				ТД.Вывести(ОбластьОсновная);
				ИндексЭтикетки = ИндексЭтикетки + 1;
			КонецЕсли;
			
			Пока ИндексЭтикетки < 12 Цикл
				ОбластьОсновная.Параметры.Размер 		= "";
				ОбластьОсновная.Параметры.Этикетка 		= "";
				ОбластьОсновная.Параметры.КодМаркировки = "";
				ТД.Присоединить(ОбластьОсновная);
				ИндексЭтикетки = ИндексЭтикетки + 1;
			КонецЦикла;
		КонецЕсли;
		
		ПечатьПодвала(ТД, Макет, ПараметрыЗаголовка);
		ВывелиПодвал = Истина;
	КонецЕсли;	
	УстановитьПараметрыТабличногоДокумента(ТД);
	
	ПоместитьВоВременноеХранилище(ТД, АдресРезультата);
	
КонецПроцедуры// } #wortmann 

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee1c9530c1660c
// Добавляет нужные данные для печати к данным из ТЧ КМКПечати   
// Галфинд_Домнышева 2023/07/17
//
// Возвращаемое значение:
//	Текст - Строка 
&НаСервере
Функция ПреобразоватьТаблицуКПечати() 
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КМКПечати.Номенклатура КАК Номенклатура,  
	|	КМКПечати.Характеристика КАК Характеристика,
	|	КМКПечати.Артикул КАК Артикул,
	|	КМКПечати.GTIN КАК GTIN,
	|	КМКПечати.КМ КАК КМ,
	|	КМКПечати.ДокументПеремаркировки КАК Перемаркировка
	|ПОМЕСТИТЬ ПечатьКМ
	|ИЗ
	|	&КМКПечати КАК КМКПечати 
	// #wortmann { 
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee224d0352ee32 
	// Галфинд_Домнышева 2023/07/19
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПечатьКМ.Номенклатура КАК Номенклатура,
	|	ПечатьКМ.Характеристика КАК Характеристика,
	|	ПечатьКМ.Артикул КАК Артикул,
	|	ПечатьКМ.GTIN КАК GTIN,
	|	ПечатьКМ.КМ КАК КМ,
	|	ПечатьКМ.Перемаркировка КАК Перемаркировка,
	|	СУММА(1) КАК КоличествоЭтикеток
	|ПОМЕСТИТЬ Печать
	|ИЗ
	|	ПечатьКМ КАК ПечатьКМ
	|
	|СГРУППИРОВАТЬ ПО
	|	ПечатьКМ.GTIN,
	|	ПечатьКМ.Артикул,
	|	ПечатьКМ.КМ,
	|	ПечатьКМ.Перемаркировка,
	|	ПечатьКМ.Номенклатура,
	|	ПечатьКМ.Характеристика
    	// } #wortmann
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	| ВЫБРАТЬ
	|	ЗаявкаНаВозвратВозвращаемыеТовары.гф_ПеремаркировкаТовара КАК Перемаркировка,
	|	ЗаявкаНаВозвратВозвращаемыеТовары.гф_ДокументВозврат.Партнер КАК Клиент,
	|	ЗаявкаНаВозвратВозвращаемыеТовары.гф_IDКороба КАК УпЛист,
	|	СУММА(1) КАК КоличествоЭтикеток
	|ПОМЕСТИТЬ ДляЗаголовка
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ЗаявкаНаВозвратВозвращаемыеТовары
	|ГДЕ
	|	ЗаявкаНаВозвратВозвращаемыеТовары.гф_ПеремаркировкаТовара В(Выбрать Печать.Перемаркировка Из Печать КАК Печать)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаявкаНаВозвратВозвращаемыеТовары.гф_ПеремаркировкаТовара,
	|	ЗаявкаНаВозвратВозвращаемыеТовары.гф_ДокументВозврат.Партнер,
	|	ЗаявкаНаВозвратВозвращаемыеТовары.гф_IDКороба
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Печать.Номенклатура КАК Номенклатура,  
	|	Печать.Характеристика КАК Характеристика,
	|	Печать.Артикул КАК Артикул,
	|	Печать.GTIN КАК GTIN,
	|	Печать.КМ КАК КМ,
	|   Истина КАК Пометка,
	// #wortmann { 
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee224d0352ee32 
	// Галфинд_Домнышева 2023/07/19
	|	ВЫБОР
	|		КОГДА Печать.КМ.гф_ПолныйКодМаркировки <> """" 
	|			ТОГДА Печать.КМ.гф_ПолныйКодМаркировки
	|		ИНАЧЕ ВЫБОР
	|		КОГДА ПулКодовМаркировкиСУЗ.ПолныйКодМаркировки ЕСТЬ НЕ NULL 
	|			ТОГДА ПулКодовМаркировкиСУЗ.ПолныйКодМаркировки
	|		ИНАЧЕ Печать.КМ.ЗначениеШтрихкода
	|		КОНЕЦ 
	|	КОНЕЦ КАК ПолныйКодМаркировки,
	//|	ПулКодовМаркировкиСУЗ.ПолныйКодМаркировки КАК ПолныйКодМаркировки,
	// } #wortmann
	|	ДляЗаголовка.УпЛист.гф_Комплектация КАК АртикулУпаковки,
	|	ДляЗаголовка.УпЛист.гф_Агрегация КАК NVE,
	|	ДляЗаголовка.Клиент КАК Клиент,
	|	ДляЗаголовка.Клиент.Код КАК КодКлиента,
	|	Печать.КоличествоЭтикеток КАК КоличествоЭтикеток
	|ИЗ
	|	Печать КАК Печать
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
	|			ПО (ПулКодовМаркировкиСУЗ.КодМаркировки = Печать.КМ.ЗначениеШтрихкода
	|				И Печать.Номенклатура = ПулКодовМаркировкиСУЗ.Номенклатура)
	|	ЛЕВОЕ СОЕДИНЕНИЕ ДляЗаголовка КАК ДляЗаголовка
	|			ПО (Печать.Перемаркировка = ДляЗаголовка.Перемаркировка)
	|	";
	Запрос.УстановитьПараметр("КМКПечати", Объект.КМКПечати.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	тзТовары = РезультатЗапроса.Выгрузить();
	Возврат тзТовары;
	
КонецФункции// } #wortmann

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee1c9530c1660c
// Выставляет флаг "Распечатан" в ТЧ ТоварыКПеремаркировке   
// Галфинд_Домнышева 2023/07/17
&НаСервере
Процедура РаспечатанВТЧТоварыКПеремаркировки() 
	
	Для каждого Строка Из Объект.КМКПечати Цикл
		
		СтруПоиска = Новый Структура;
		СтруПоиска.Вставить("GTIN", Строка.GTIN);
		СтруПоиска.Вставить("ПеремаркированныйКМ", Строка.КМ);
		
		Нашли = Объект.ТоварыКПеремаркировке.НайтиСтроки(СтруПоиска);
		
		Если Нашли.Количество() > 0 Тогда
			Нашли[0].Распечатан = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры// } #wortmann

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee1c9530c1660c
// Команда "Завершить" после подтверждения КМ   
// Галфинд_Домнышева 2023/07/17
&НаКлиенте
Процедура ПроизвестиИтоговуюОбработку()
	
	Действие = Неопределено;
	ПроизвестиИтоговуюОбработкуНаСервере(Действие);
	
	Если Действие <> Неопределено Тогда 
		Если Действие = "ОткрытьФормуПодтверждения" Тогда
			Оповещение = Новый ОписаниеОповещения("ПослеПодтверждения", ЭтотОбъект);
			ПараметрыОткрытия = Новый Структура("ДокументОснованиеПеремаркировки", ДокументОснованиеПеремаркировки);
			
			ОткрытьФорму("Обработка.гф_РабочееМестоКладовщика.Форма.ФормаПодтвержденияПеремаркировки", ПараметрыОткрытия,
			ЭтотОбъект, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе 
			Оповещение = Новый ОписаниеОповещения("ПослеВыбораКоманды", ЭтотОбъект);
			ПараметрыОткрытия = Новый Структура("Значение", "10");
			
			ОткрытьФорму("Обработка.гф_РабочееМестоКладовщика.Форма.ФормаКоманд", ПараметрыОткрытия,
			ЭтотОбъект, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
	КонецЕсли;
   
КонецПроцедуры// } #wortmann

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee1c9530c1660c
// Итоговая процедура обработки проверяющая наличие неподтвержденных КМ и принимающая решение
// по открытию определенной формы, в зависимости от результата.
// Галфинд_Домнышева 2023/07/17
&НаСервере
Процедура ПроизвестиИтоговуюОбработкуНаСервере(Действие)
	
	Если ОпределитьНеподтвержденные() Тогда
		
		ПроверитьТолькоРаспечатанные(Действие);
	Иначе
		Если ТипЗнч(ДокументОснованиеПеремаркировки) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
			ДокументОбъект = ДокументОснованиеПеремаркировки.ПолучитьОбъект();
			ДокументОбъект.Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.гф_ЗаявкаОбработанаВРМК;
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ " + ДокументОснованиеПеремаркировки 
				+ " проведен с новым статусом ""Заявка обработана в РМК"".");
			Исключение
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ " + ДокументОснованиеПеремаркировки 
				+ " записан с новым статусом ""Заявка обработана в РМК"".");
			КонецПопытки;
			
		Иначе
			ОбработатьСтатусЗаявкиПоПеремаркировке();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры// } #wortmann 

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee1c9530c1660c
// Определяет наличие неподтвержденных КМ по ДокументОснованиеПеремаркировки
// Галфинд_Домнышева 2023/07/17
&НаСервере
Функция  ОпределитьНеподтвержденные()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолныйТекстЗапросаТоваров();
	
	Если ТипЗнч(ДокументОснованиеПеремаркировки) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		Запрос.УстановитьПараметр("Заявка", ДокументОснованиеПеремаркировки);	
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.Ссылка = &Заявка",
		"ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.гф_ПеремаркировкаТовара = &Перемаркировка");
		Запрос.УстановитьПараметр("Перемаркировка", ДокументОснованиеПеремаркировки);
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "КМДляПеремаркировки.ПеремаркированныйКМ",
	"КМДляПеремаркировки.ПеремаркированныйКМ" + Символы.ПС + "ГДЕ
	//|	ЕСТЬNULL(КМДляПеремаркировки.Распечатан, ЛОЖЬ) = ЛОЖЬ // Галфинд_Домнышева_23_08_2023
	|	ЕСТЬNULL(КМДляПеремаркировки.Подтвержден, ЛОЖЬ) = ЛОЖЬ");

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции// } #wortmann

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee1c9530c1660c
// При ДокументОснованиеПеремаркировки = ДокументСсылка.ПеремаркировкаТоваровИСМП
// проверяет все ли товары к перемаркировки из связанной Заявки Распечатаны и Подтверждены,
// если да - меняет стаутс Заявки, нет - предлагает выбрать новый документ.
// Галфинд_Домнышева 2023/07/17
&НаСервере
Процедура ОбработатьСтатусЗаявкиПоПеремаркировке() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = ИтоговыйЗапрос();
	
	Запрос.УстановитьПараметр("Перемаркировка", ДокументОснованиеПеремаркировки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ПолнаяСводка = РезультатЗапроса.Выгрузить();
	
	РаспечатанЛи = ПолнаяСводка.ВыгрузитьКолонку("Распечатан");
	
	ПодтвержденЛи = ПолнаяСводка.ВыгрузитьКолонку("Подтвержден");
	
	Если РаспечатанЛи.Найти(Ложь) = Неопределено И ПодтвержденЛи.Найти(Ложь) = Неопределено Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Заявка = Выборка.Заявка;
		ЗаявкаОбъект = Заявка.ПолучитьОбъект(); 
		ЗаявкаОбъект.Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.гф_ЗаявкаОбработанаВРМК;
		Попытка
			ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ " + Заявка 
			+ " проведен с новым статусом ""Заявка обработана в РМК"".");
		Исключение
			ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Запись);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ " + Заявка 
			+ " записан с новым статусом ""Заявка обработана в РМК"".");
		КонецПопытки;
	Иначе
		
		ТекущийЭлемент = Элементы.ВыбратьДокумент;
		
	КонецЕсли;
	
КонецПроцедуры// } #wortmann 

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee1c9530c1660c
// Итоговый запрос для ДокументОснованиеПеремаркировки = ДокументСсылка.ПеремаркировкаТоваровИСМП
// Галфинд_Домнышева 2023/07/17
//
// Возвращаемое значение:
//	Текст - Строка 
&НаСервере
Функция ИтоговыйЗапрос()
	
	Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаВозвращаемыеТовары.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ Заявка
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ЗаявкаВозвращаемыеТовары
		|ГДЕ
		|	ЗаявкаВозвращаемыеТовары.гф_ПеремаркировкаТовара = &Перемаркировка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаявкаВозвращаемыеТовары.гф_ПеремаркировкаТовара КАК ПеремаркировкаТовара
		|ПОМЕСТИТЬ Документы
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ЗаявкаВозвращаемыеТовары
		|ГДЕ
		|	ЗаявкаВозвращаемыеТовары.Ссылка В
		|			(ВЫБРАТЬ
		|				Заявка.Ссылка
		|			ИЗ
		|				Заявка КАК Заявка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПеремаркировкаТоваровИСМПТовары.Ссылка КАК Перемаркировка,
		|	ПеремаркировкаТоваровИСМПТовары.НоваяНоменклатура КАК Номенклатура,
		|	ПеремаркировкаТоваровИСМПТовары.НоваяХарактеристика КАК Характеристика,
		|	ПеремаркировкаТоваровИСМПТовары.НовыйКодМаркировки КАК НовыйКодМаркировки,
		|	ПеремаркировкаТоваровИСМПТовары.НоваяНоменклатура.Артикул КАК Артикул
		|ПОМЕСТИТЬ ТоварыИзПеремаркировки
		|ИЗ
		|	Документ.ПеремаркировкаТоваровИСМП.Товары КАК ПеремаркировкаТоваровИСМПТовары
		|ГДЕ
		|	ПеремаркировкаТоваровИСМПТовары.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.ПеремаркировкаТовара
		|			ИЗ
		|				Документы КАК Документы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыИзПеремаркировки.Перемаркировка КАК Перемаркировка,
		|	ТоварыИзПеремаркировки.Номенклатура КАК Номенклатура,
		|	ТоварыИзПеремаркировки.Характеристика КАК Характеристика,
		|	ТоварыИзПеремаркировки.Артикул КАК Артикул,
		|	ТоварыИзПеремаркировки.НовыйКодМаркировки КАК НовыйКодМаркировки,
		|	Заявка.Ссылка КАК Заявка,
		|	ШтрихкодыНоменклатуры.Штрихкод КАК GTIN
		|ПОМЕСТИТЬ ТоварыПолный
		|ИЗ
		|	ТоварыИзПеремаркировки КАК ТоварыИзПеремаркировки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Заявка КАК Заявка
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ПО ТоварыИзПеремаркировки.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
		|			И ТоварыИзПеремаркировки.Характеристика = ШтрихкодыНоменклатуры.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыПолный.НовыйКодМаркировки КАК НовыйКодМаркировки,
		|	ТоварыПолный.Заявка КАК Заявка,
		|	ЕСТЬNULL(КМДляПеремаркировки.Распечатан, ЛОЖЬ) КАК Распечатан,
		|	ЕСТЬNULL(КМДляПеремаркировки.Подтвержден, ЛОЖЬ) КАК Подтвержден
		|ИЗ
		|	ТоварыПолный КАК ТоварыПолный
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гф_КМДляПеремаркировки КАК КМДляПеремаркировки
		|		ПО ТоварыПолный.Перемаркировка = КМДляПеремаркировки.Документ
		|			И ТоварыПолный.GTIN = КМДляПеремаркировки.GTIN
		|			И ТоварыПолный.НовыйКодМаркировки = КМДляПеремаркировки.ПеремаркированныйКМ";
	
	Возврат Текст;
	
КонецФункции// } #wortmann

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee1c9530c1660c
// Итоговый запрос для ДокументОснованиеПеремаркировки = ДокументСсылка.ПеремаркировкаТоваровИСМП
// Проверяет наличие распечатанных нго не подтвержденных товаров,
// если да - "ОткрытьФормуПодтверждения", нет - "ОткрытьФормуВыбораКоманд".
// Галфинд_Домнышева 2023/07/17
&НаСервере
Процедура ПроверитьТолькоРаспечатанные(Действие)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолныйТекстЗапросаТоваров();
	
	Если ТипЗнч(ДокументОснованиеПеремаркировки) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		Запрос.УстановитьПараметр("Заявка", ДокументОснованиеПеремаркировки);	
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.Ссылка = &Заявка",
		"ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.гф_ПеремаркировкаТовара = &Перемаркировка");
		Запрос.УстановитьПараметр("Перемаркировка", ДокументОснованиеПеремаркировки);
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "КМДляПеремаркировки.ПеремаркированныйКМ",
	"КМДляПеремаркировки.ПеремаркированныйКМ" + Символы.ПС + "ГДЕ
	|	ЕСТЬNULL(КМДляПеремаркировки.Распечатан, ЛОЖЬ) = Истина
	|	И ЕСТЬNULL(КМДляПеремаркировки.Подтвержден, ЛОЖЬ) = ЛОЖЬ");

	РезультатЗапроса = Запрос.Выполнить();

	Если Не РезультатЗапроса.Пустой() Тогда
		Действие = "ОткрытьФормуПодтверждения";
	Иначе
		Действие = "ОткрытьФормуВыбораКоманд";
	КонецЕсли;
	
КонецПроцедуры// } #wortmann

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee60fe95ee4f46
// Проверяет снова единственный ли экземпляр чтобы не задавать вопросов
// Галфинд_Домнышева 2023/10/03
&НаСервере
Функция РаспечатанныйЭкземплярЕдинственный(NVE_Распечатан, Агрегат)
	
	// Условие проверки на единичность варианта комплектации Распечатан но не Назначен
	Если Не NVE_Распечатан Тогда
		Возврат Ложь;
	КонецЕсли;
    NVE_Назначен = ПолучитьПризнакНВЕИзРегистра(Агрегат, "Назначен");
	Если NVE_Назначен Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПродукцияВКоробах.ВариантКомплектации КАК ВариантКомплектации,
		|	СУММА(ПродукцияВКоробах.КоличествоКоробов) КАК КоличествоКоробов
		|ПОМЕСТИТЬ ВременнаяТаблица
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг.гф_ПродукцияВКоробах КАК ПродукцияВКоробах
		|ГДЕ
		|	ПродукцияВКоробах.Ссылка = &Ссылка
		|	И ПродукцияВКоробах.ВариантКомплектации.Наименование = &ВариантКомплектации
		|
		|СГРУППИРОВАТЬ ПО
		|	ПродукцияВКоробах.ВариантКомплектации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблица.ВариантКомплектации КАК ВариантКомплектации
		|ИЗ
		|	ВременнаяТаблица КАК ВременнаяТаблица
		|ГДЕ
		|	ВременнаяТаблица.КоличествоКоробов = 1";
	
	Запрос.УстановитьПараметр("ВариантКомплектации", Объект.Артикул);
	Запрос.УстановитьПараметр("Ссылка", Объект.СсылкаНаПТУ);
	
	РезультатЗапроса = Запрос.Выполнить(); 
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции// } #wortmann

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee60fe95ee4f46
// Если незначенный и подтвержденный один Вариант из ПТУ, то печать сразу без вопроса
// Галфинд_Домнышева 2023/10/03
&НаКлиенте
Процедура ПечатьОдинНеназначеныйNVE(КодNVE)
	
	Объект.Товары.Очистить();
	Объект.NVE = КодNVE;
	ЗаполнитьТоварыПоОдномуNVE();
	
	Если Объект.Товары.Количество() = 0 
		ИЛИ Объект.Номенклатура.Пустая() Тогда
		Возврат;
	Иначе
		ПечатьПоNVE("ПечатьБезNVE");
	КонецЕсли;

КонецПроцедуры// } #wortmann  

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee68d1707d5389
// Добавлено условное оформление для строк по Пересортицы
// Галфинд_Домнышева 2023/10/12
&НаСервере
Процедура УсловноеОформлениеТоваров()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
    Элемент.Использование = Истина;
    Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона",  WebЦвета.СветлоСерый);
	
	ЭлементУсловияГолубой                = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементУсловияГолубой.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Товары.Новый");
    ЭлементУсловияГолубой.ПравоеЗначение = Истина; 
    ЭлементУсловияГолубой.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;   
    ЭлементУсловияГолубой.Использование  = Истина;
	
	ОформляемоеПоле      = Элемент.Поля.Элементы.Добавить();
    ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Элементы.Товары.Имя);
	
КонецПроцедуры// } #wortmann

&НаКлиенте
Процедура ТЧ_УбратьПриАктивизацииСтроки(Элемент)
	// #wortmann {
	// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee690c541eedee
	// Перехват текущего элемента при загрузке новой строки (из-за нового БСП не дает сделать это выше)
	// Галфинд_Домнышева 2023/10/13
	Если Не ПустаяСтрока(Объект.NVE) Тогда
		ЭтотОбъект.ТекущийЭлемент = Элементы.УбратьТЧ_СканированиеКМ;
	КонецЕсли;
	// } #wortmann
КонецПроцедуры

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee6ce6437e9d72
// Галфинд_Домнышева 2023/10/19
&НаКлиенте
Процедура ВыбратьПТУ()
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Поставка", Ложь);
	
	ОповещениеВыборЗначенияПТУ = Новый ОписаниеОповещения("ВыборЗначенияПТУ", ЭтотОбъект, ДополнительныеПараметры);
	СписокПТУ.ПоказатьВыборЭлемента(
	ОповещениеВыборЗначенияПТУ,	//Вызов процедуры оповещения
	"Выберите документ: ",	//Заголовок диалогового окна выбора типа
	СписокПТУ[0]				//Первоначально позиционирование на значение выбора
	);

КонецПроцедуры// } #wortmann 

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee6ce6437e9d72
// Галфинд_Домнышева 2023/10/19
&НаКлиенте
Процедура ВыборЗначенияПТУ(Результат, ДополнительныеПараметры) Экспорт
	
	Поставка = ДополнительныеПараметры.Поставка;
	Если Результат = Неопределено Тогда 
		ТекущийЭлемент = ?(Поставка, Элементы.НомерИнвойса1, Элементы.НомерИнвойса);
		Возврат 
	КонецЕсли;
	
	Объект.СсылкаНаПТУ = Результат.Значение;
   
	ТекущийЭлемент = ?(Поставка, Элементы.NVE2, Элементы.Артикул); 
	
КонецПроцедуры// } #wortmann

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee71ada382f14e
// Проверка ПТиУ на наличие записи в РС гф_СтатусОтгрузки
// Галфинд_Домнышева 2023/10/24
&НаСервере
Функция ПроверитьНаЗакрытостьПТиУ(УЛ) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриобретениеТоваровУслуггф_ПродукцияВКоробах.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ПТУ
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг.гф_ПродукцияВКоробах КАК ПриобретениеТоваровУслуггф_ПродукцияВКоробах
		|ГДЕ
		|	ПриобретениеТоваровУслуггф_ПродукцияВКоробах.IDКороба = &УЛ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	гф_СтатусОтгрузкиСрезПоследних.Период КАК Период,
		|	гф_СтатусОтгрузкиСрезПоследних.Документ КАК Документ,
		|	гф_СтатусОтгрузкиСрезПоследних.Отгрузил КАК Отгрузил,
		|	гф_СтатусОтгрузкиСрезПоследних.Статус КАК Статус
		|ИЗ
		|	РегистрСведений.гф_СтатусОтгрузки.СрезПоследних(
		|			&Дата,
		|			Документ В
		|				(ВЫБРАТЬ
		|					ПТУ.Ссылка
		|				ИЗ
		|					ПТУ КАК ПТУ)) КАК гф_СтатусОтгрузкиСрезПоследних";
	
	Запрос.УстановитьПараметр("УЛ", УЛ);
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ЗаписьСуществует = Истина;
	Иначе
		ЗаписьСуществует = Ложь;
	КонецЕсли;
     	
	Возврат ЗаписьСуществует;
	
КонецФункции// } #wortmann 

// #wortmann {
// e1cib/data/Задача.ЗадачаИсполнителя?ref=8eabb083fed1320811ee71ada382f14e
// Проверка ПО связанного с ПТиУ (ПО на таможенном складе, со статусом "Принят")
// Галфинд_Домнышева 2023/10/24
&НаСервере
Функция ПриходныйОрдерВерный()
	
	ТаможенныеСклады = 
					_омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначениеМассив("гф_ГлобальныеЗначенияТаможенныйСклад");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриходныйОрдерНаТовары.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
		|ГДЕ
		|	ПриходныйОрдерНаТовары.Склад В(&ТаможенныеСклады)
		|	И ПриходныйОрдерНаТовары.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриходныхОрдеров.Принят)
		|	И ПриходныйОрдерНаТовары.Распоряжение = &Распоряжение";
	
	Запрос.УстановитьПараметр("Распоряжение", Объект.СсылкаНаПТУ);
	Запрос.УстановитьПараметр("ТаможенныеСклады", ТаможенныеСклады);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции// } #wortmann

// #wortmann {
// Проверка на наличие КМ в РС гф_ПересортицаУдаляемыеШК (защита от повторной записи)
// Галфинд_Домнышева 2023/12/14
Функция ПроверитьКМВПересортицаУдаляемыеШК();
	
	ЕстьКМ = Новый Структура;
	ЕстьКМ.Вставить("ЕстьКМ", Ложь);
	ЕстьКМ.Вставить("ПеречислениеКМ");
	
	ПеречислениеКМ = "";
	
	Для каждого стрКоллекции Из Объект.ТЧ_Убрать Цикл
		Набор = РегистрыСведений.гф_ПересортицаУдаляемыеШК.СоздатьНаборЗаписей();
		Набор.Отбор.Пересортица.Установить(Объект.УпаковочныйЛист);
		Набор.Отбор.ШтрихкодУпаковки.Установить(стрКоллекции["КМ"]);
		//Набор.Отбор.НомерЗаписи.Установить(НомерЗаписи);
        Набор.Прочитать();
		Если Набор.Количество() > 0 Тогда
			ПеречислениеКМ = ПеречислениеКМ + стрКоллекции["КМ"] + Символы.ПС;
			ЕстьКМ.ЕстьКМ = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ЕстьКМ.ПеречислениеКМ = ПеречислениеКМ;
	
	Возврат ЕстьКМ; 
	
КонецФункции// } #wortmann

#КонецОбласти
