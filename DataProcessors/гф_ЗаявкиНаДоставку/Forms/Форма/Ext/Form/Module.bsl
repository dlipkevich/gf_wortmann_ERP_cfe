#Область ОбработчикиСобытийФормы

// #wortmann {
// #Заявки на доставку
// Галфинд Окунев 2022/07/20
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.ГруппаОбувь) Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		 |	ВидыНоменклатуры.Ссылка КАК Ссылка
		 |ИЗ
		 |	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		 |ГДЕ
		 |	ВидыНоменклатуры.Наименование = ""Обувь""
		 |	И ВидыНоменклатуры.ЭтоГруппа"; 
		
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			
			Выборка.Следующий();
			
			Объект.ГруппаОбувь = Выборка.Ссылка;
			
		КонецЕсли;	
		
	КонецЕсли;	 
	
	Объект.ДатаВыгрузки = ТекущаяДатаСеанса();   
	
	МассивОрдеров = Неопределено;
	
	Если Параметры.Свойство("МассивОрдеров", МассивОрдеров) Тогда 
		
		Для Каждого Ордер Из МассивОрдеров Цикл
			
			СтрокаДокумента = Объект.ДокументыКОтправке.Добавить();
			
			СтрокаДокумента.Документ	= Ордер.РасходныйОрдер;   
			СтрокаДокумента.ТК			= Ордер.ТК;
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Заявки на доставку
// Галфинд Окунев 2022/07/20
//
&НаКлиенте
Процедура ПриОткрытии(Отказ) 
	
	ОрганизацияПриИзмененииНаСервере();

	УстановитьЗначенияПоУмолчанию(); 
	
	СохранятьБезОтправкиПриИзменении();

	ОбновитьДанныеПоТКиЗаданиямНаПеревозку(); 
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Заявки на доставку
// Галфинд Окунев 2022/07/20
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_ЭлектронноеПисьмоИсходящее" Тогда 
		
		Для Каждого СтрокаСпискаДокументов Из СписокДокументов Цикл
					
			Если СтрокаСпискаДокументов.Письмо = Источник Тогда
				
				ОбновитьДанныеПисьмаНаСервере(Источник);
				
				Прервать;
				
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЕсли;	

КонецПроцедуры// } #wortmann

// #wortmann {
// #Заявки на доставку
// Галфинд Окунев 2022/07/20
//
&НаКлиенте
Процедура ДокументыКОтправкеПриИзменении(Элемент)
	
	ОбновитьДанныеПоТКиЗаданиямНаПеревозку();
	
КонецПроцедуры// } #wortmann

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// #wortmann {
// #Заявки на доставку
// Галфинд Окунев 2022/07/20
//
&НаКлиенте
Процедура КаталогВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("КаталогВыгрузкиЗавершение", ЭтотОбъект);
	
 Режим = РежимДиалогаВыбораФайла.ВыборКаталога; 
	
 ДиалогОткрытия = Новый ДиалогВыбораФайла(Режим); 
	
 ДиалогОткрытия.Каталог				= Объект.КаталогВыгрузки; 
 ДиалогОткрытия.Заголовок			= "Выберите каталог выгрузки файлов"; 	
	ДиалогОткрытия.МножественныйВыбор	= Ложь;
	
	ДиалогОткрытия.Показать(Оповещение);
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Заявки на доставку
// Галфинд Окунев 2022/07/20
//
&НаКлиенте
Процедура КаталогВыгрузкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) И Результат.Количество()>0 Тогда
		
		Объект.КаталогВыгрузки = Результат[0];
		
	КонецЕсли; 
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Заявки на доставку
// Галфинд Окунев 2022/07/20
//
&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	Объект.КодКомпании = Объект.Организация.Префикс;

КонецПроцедуры// } #wortmann

// #wortmann {
// #Заявки на доставку
// Галфинд Окунев 2022/07/20
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ОрганизацияПриИзмененииНаСервере();

КонецПроцедуры// } #wortmann

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыКОтправке

// #wortmann {
// #Заявки на доставку
// Галфинд Окунев 2022/07/20
//
&НаКлиенте
Процедура ДокументыКОтправкеДокументПриИзменении(Элемент)
	
	ОбновитьДанныеПоТКиЗаданиямНаПеревозку(); 

КонецПроцедуры// } #wortmann

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокДокументов

// #wortmann {
// #Заявки на доставку
// Галфинд Окунев 2022/07/20
//
&НаКлиенте
Процедура СписокДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли;	
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле.Имя = "СписокДокументовИмяФайла" Тогда 
		
		ЗапуститьПриложение(Объект.КаталогВыгрузки + "/" + ТекущиеДанные.ИмяФайла);
		
	ИначеЕсли Поле.Имя = "СписокДокументовТК" Тогда

		ПараметрыОткрытия = Новый Структура("Ключ", ТекущиеДанные.ТК);
			
		ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыОткрытия);
		
	ИначеЕсли Поле.Имя = "СписокДокументовПисьмо" 
				ИЛИ Поле.Имя = "СписокДокументовПисьмоСтатусПисьма" 
				ИЛИ Поле.Имя = "СписокДокументовПисьмоДата" 
				ИЛИ Поле.Имя = "СписокДокументовПисьмоДатаОтправления"
				ИЛИ Поле.Имя = "СписокДокументовТема" Тогда

		ПараметрыОткрытия = Новый Структура("Ключ", ТекущиеДанные.Письмо);
		
		ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыОткрытия);
		
	Иначе	
		
		СтандартнаяОбработка = Истина;
			
	КонецЕсли;	

КонецПроцедуры// } #wortmann

#КонецОбласти

#Область ОбработчикиКомандФормы

// #wortmann {
// #Заявки на доставку
// Галфинд Окунев 2022/07/20
//
&НаКлиенте
Процедура КомандаОтметитьВсе(Команда)
	
	Для Каждого СтрокаСписка Из СписокДокументов Цикл
		
		СтрокаСписка.Отметка = Истина;
		
	КонецЦикла;	
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Заявки на доставку
// Галфинд Окунев 2022/07/20
//
&НаКлиенте
Процедура КомандаСнятьОтметки(Команда)
	
	Для Каждого СтрокаСписка Из СписокДокументов Цикл
		
		СтрокаСписка.Отметка = Ложь;
		
	КонецЦикла;	
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Заявки на доставку
// Галфинд Окунев 2022/07/20
//
&НаКлиенте
Процедура КомандаСохранить(Команда)
	
	Файл = Новый Файл(Объект.КаталогВыгрузки);
	
	Если Не (Файл.Существует() И Файл.ЭтоКаталог()) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Каталог выгрузки " + Объект.КаталогВыгрузки + " не найден");
		
		Возврат;
		
	КонецЕсли;
	
	ПоместитьДокументыВХранилище(); 

	Для Каждого ВыгружаемаяСтрока Из СписокДокументов Цикл 
		
		Если ЗначениеЗаполнено(ВыгружаемаяСтрока.ИмяФайла) И ЭтоАдресВременногоХранилища(ВыгружаемаяСтрока.Адрес) Тогда
			
			ИмяФайла = Объект.КаталогВыгрузки + "/" + ВыгружаемаяСтрока.ИмяФайла;
			
			Данные = ПолучитьИзВременногоХранилища(ВыгружаемаяСтрока.Адрес);
			
			Данные.Записать(ИмяФайла); 
			
		КонецЕсли;
		
	КонецЦикла;	
	
	ОчиститьВременныеХранилища(); 
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Заявки на доставку
// Галфинд Окунев 2022/07/20
//
&НаСервере
Процедура КомандаОтправитьСейчасНаСервере()
	
	ОтборСтрок = Новый Структура("Отметка", Истина);
	
	СтрокиПисем = СписокДокументов.НайтиСтроки(ОтборСтрок);
	
	ПисьмаКОтправке = Новый Массив;
	
	Для Каждого СтрокаПисем Из СтрокиПисем Цикл
		
		Если СтрокаПисем.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик")
			ИЛИ СтрокаПисем.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Исходящее")
			Тогда
			
			Если ПисьмаКОтправке.Найти(СтрокаПисем.Письмо) = Неопределено Тогда
				
				ПисьмаКОтправке.Добавить(СтрокаПисем.Письмо);
				
			КонецЕсли;	
			
		КонецЕсли;		
		
	КонецЦикла; 
	
	Для Каждого ПисьмоКОтправке Из ПисьмаКОтправке Цикл 
		
		ПисьмоОбъект = ПисьмоКОтправке.ПолучитьОбъект();
		
		ПараметрыПисьма = Взаимодействия.ПараметрыПисьмаДляОтправки(ПисьмоОбъект);
		
		Письмо = РаботаСПочтовымиСообщениями.ПодготовитьПисьмо(ПисьмоОбъект.УчетнаяЗапись, ПараметрыПисьма);
		
		РезультатОтправки = РаботаСПочтовымиСообщениями.ОтправитьПисьмо(ПисьмоОбъект.УчетнаяЗапись, Письмо); 
		
		ПараметрыОбработкиОшибки = УправлениеЭлектроннойПочтой.ПараметрыОбработкиОшибкиОтправки();
		ПараметрыОбработкиОшибки.ПисьмоОбъект = ПисьмоОбъект;
		ПараметрыОбработкиОшибки.Ссылка = ПисьмоОбъект.Ссылка;
		ПараметрыОбработкиОшибки.ПредставлениеПисьма = Взаимодействия.ПредставлениеПисьма(ПисьмоОбъект.Тема, ПисьмоОбъект.Дата);
		ПараметрыОбработкиОшибки.КоличествоПопыток = 0;
		ПараметрыОбработкиОшибки.ИнкрементироватьКоличествоПопыток = Ложь;
		ПараметрыОбработкиОшибки.СообщатьПользователю = Истина;
		
		Если ЗначениеЗаполнено(РезультатОтправки.ОшибочныеПолучатели) Тогда
			
			Результат = УправлениеЭлектроннойПочтой.ОбработатьОшибкуОтправкиПисьма(ПараметрыОбработкиОшибки, РезультатОтправки.ОшибочныеПолучатели);
			
			Если Не Результат.ПисьмоОтправлено Тогда
				
				Продолжить;
				
			КонецЕсли;
		КонецЕсли;
	
		ПисьмоОбъект.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено");
		
		ПисьмоОбъект.Записать(); 
		
		ОбновитьДанныеПисьмаНаСервере(ПисьмоКОтправке);
		
	КонецЦикла;	
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Заявки на доставку
// Галфинд Окунев 2022/07/20
//
&НаКлиенте
Процедура КомандаОтправитьСейчас(Команда)
	
	КомандаОтправитьСейчасНаСервере();
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Заявки на доставку
// Галфинд Окунев 2022/07/20
//
&НаСервере
Процедура КомандаОтправитьПоПочтеНаСервере() 
	
	ТаблицаКонтрагентов = СписокДокументов.Выгрузить(, "ТК");
	
	ТаблицаКонтрагентов.Свернуть("ТК");
	
	Для Каждого СтрокаКонтрагента Из ТаблицаКонтрагентов Цикл
		
		ОтборСтрок = Новый Структура;
		
		ОтборСтрок.Вставить("ТК", СтрокаКонтрагента.ТК);
		
		МассивСтрок = СписокДокументов.НайтиСтроки(ОтборСтрок);
		
		Если МассивСтрок.Количество() Тогда
			
			СформироватьПисьмо(МассивСтрок);
			
		КонецЕсли;	
		
	КонецЦикла;	 
	
	ТабПисем = СписокДокументов.Выгрузить(); 
	
	ТабПисем.Свернуть("Отметка, ТК, Email, Письмо, СтатусПисьма, ДатаОтправления, Дата, Тема");
	
	СписокДокументов.Загрузить(ТабПисем);
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Заявки на доставку
// Галфинд Окунев 2022/07/20
//
&НаКлиенте
Процедура КомандаОтправитьПоПочте(Команда) 

	ПоместитьДокументыВХранилище();
	
	КонтрагентыБезАдресов = Новый Массив;
	
	Для Каждого СтрокаСписка Из СписокДокументов Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаСписка.Email) Тогда
			
			Контрагент = СтрокаСписка.ТК;
			
			Если КонтрагентыБезАдресов.Найти(Контрагент) = Неопределено Тогда
				
				КонтрагентыБезАдресов.Добавить(Контрагент);
				
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;	 
	
	Если КонтрагентыБезАдресов.Количество()>0 Тогда
		
		Для Каждого Контрагент Из КонтрагентыБезАдресов Цикл
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен Emai транспортной компании " + Контрагент);
			
		КонецЦикла;

		Возврат;
		
	КонецЕсли;	

	КомандаОтправитьПоПочтеНаСервере(); 
	
	ОбновитьДанныеПисем(); 
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Заявки на доставку
// Галфинд Окунев 2022/07/20
// Создает документы заявка на доставку по списку ордеров к отправке
// устанавливает реквизит "Заявка на доставку" в ордерах
//
&НаСервере
Процедура КомандаСоздатьЗаданияНаПеревозкуНаСервере()
	
	СтатусФормируется = ПредопределенноеЗначение("Перечисление.СтатусыЗаданийНаПеревозку.Формируется");
	
	ДанныеДокументов = ПолучитьДанныеДляФормированияДокументов();
	
	ТаблицаСкладТК = ДанныеДокументов.Скопировать(, "ТК, Склад");
	
	ТаблицаСкладТК.Свернуть("ТК, Склад");
	
	Для Каждого СтрокаСкладТК Из ТаблицаСкладТК Цикл

		ОтборПоСкладТК = Новый Структура("ТК, Склад", СтрокаСкладТК.ТК, СтрокаСкладТК.Склад);
		
		СтрокиДокумента = ДанныеДокументов.НайтиСтроки(ОтборПоСкладТК);
		
		ОтборДокументов = Новый Структура("Документ", СтрокиДокумента[0].Документ);
		
		НайденныеДокументы = Объект.ДокументыКОтправке.НайтиСтроки(ОтборДокументов);
		
		Если ЗначениеЗаполнено(НайденныеДокументы[0].ЗаданиеНаПеревозку) Тогда 
			
			Если НайденныеДокументы[0].СтатусЗаданияНаПеревозку <> СтатусФормируется Тогда
				
				Продолжить;
				
			Иначе	
				
				ЗаданиеНаПеревозку = НайденныеДокументы[0].ЗаданиеНаПеревозку.ПолучитьОбъект(); 
				
				ЗаданиеНаПеревозку.Маршрут.Очистить(); 
				
				ЗаданиеНаПеревозку.Дата = ТекущаяДатаСеанса(); 
				
			КонецЕсли;	
			
		Иначе	
			
			ЗаданиеНаПеревозку = Документы.ЗаданиеНаПеревозку.СоздатьДокумент();
			
			ЗаданиеНаПеревозку.Статус	= СтатусФормируется;
			
			ЗаданиеНаПеревозку.ОбменДанными.Загрузка = Истина;
			
		КонецЕсли;
		
		ЗаданиеНаПеревозку.Дата					= ТекущаяДатаСеанса(); 
		ЗаданиеНаПеревозку.ЗаданиеВыполняет		= 
		ПредопределенноеЗначение("Перечисление.ТипыИсполнителейЗаданийНаПеревозку.Перевозчик");
		ЗаданиеНаПеревозку.Перевозчик			= СтрокаСкладТК.ТК.Партнер;
		ЗаданиеНаПеревозку.Склад				= СтрокаСкладТК.Склад;
		ЗаданиеНаПеревозку.Операция				= ПредопределенноеЗначение("Перечисление.ВидыДоставки.НаСклад");
		ЗаданиеНаПеревозку.Контрагент			= СтрокиДокумента[0].Контрагент;			
		//ЗаданиеНаПеревозку.Распоряжения			= СтрокаДокумента.Документ.ЗаказКлиента;
		ЗаданиеНаПеревозку.Комментарий			= ?(Объект.СохранятьБезОтправки, "Excel", "Email");
		ЗаданиеНаПеревозку.ДатаВремяРейсаПланС	= Объект.ДатаВыгрузки;
		ЗаданиеНаПеревозку.ТранспортноеСредство	= ПолучитьСсылкуАвтотранспорт();
				
		Адреса = Новый Массив;
		
		Для Каждого СтрокаДокумента Из СтрокиДокумента Цикл
			
			Если Адреса.Найти(СтрокаДокумента.АдресДоставки) = Неопределено Тогда
				
				Адреса.Добавить(СтрокаДокумента.АдресДоставки);
				
			КонецЕсли;
			
		КонецЦикла;	
		
		Для Каждого Адрес Из Адреса Цикл
			
			СтрокаАдреса = ЗаданиеНаПеревозку.Маршрут.Добавить();
			
			СтрокаАдреса.Адрес = Адрес;
			
		КонецЦикла;	
		
		ЗаданиеНаПеревозку.ОбменДанными.Загрузка = Ложь;
		
		ЗаданиеНаПеревозку.Записать();
		
		Для Каждого СтрокаДокумента Из СтрокиДокумента Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаДокумента.Документ.ЗаданиеНаПеревозку) Тогда
				
				ДокументОрдер = СтрокаДокумента.Документ.ПолучитьОбъект();
				
				ДокументОрдер.ЗаданиеНаПеревозку = ЗаданиеНаПеревозку.Ссылка;
				
				ДокументОрдер.ОбменДанными.Загрузка = Истина;
				
				ДокументОрдер.Записать();
				
			КонецЕсли;	
			
		КонецЦикла;	
			
	КонецЦикла;

	ОбновитьДанныеПоТКиЗаданиямНаПеревозку();	
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Заявки на доставку
// Галфинд Окунев 2022/07/20
//
&НаКлиенте
Процедура КомандаСоздатьЗаданияНаПеревозку(Команда) 
	
	КомандаСоздатьЗаданияНаПеревозкуНаСервере();
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Заявки на доставку
// Галфинд Окунев 2022/07/20
//
&НаКлиенте
Процедура КомандаОбновитьДокументы(Команда) 
	
	ОбновитьДанныеПоТКиЗаданиямНаПеревозку();
	
КонецПроцедуры// } #wortmann

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// #wortmann {
// #Заявки на доставку
// Галфинд Окунев 2022/07/20
//
&НаКлиенте
Процедура УстановитьЗначенияПоУмолчанию()
	
	ЗначенияПоУмолчанию = Новый Структура;
	
	ЗначенияПоУмолчанию.Вставить("КонтактноеЛицо", "Леонов Игорь");
	ЗначенияПоУмолчанию.Вставить("ТелефонКонтактногоЛица", "79036669994");
	ЗначенияПоУмолчанию.Вставить("ВесКоробаДляТК", 9.3);
	ЗначенияПоУмолчанию.Вставить("ОбъемКоробаДляТК", 0.09);
	ЗначенияПоУмолчанию.Вставить("MAILTYPE", "41");
	ЗначенияПоУмолчанию.Вставить("INDEXFROM", "102001");
	ЗначенияПоУмолчанию.Вставить("СтранаДляТК", ПредопределенноеЗначение("Справочник.СтраныМира.Россия"));
	ЗначенияПоУмолчанию.Вставить("ФормаОплатыУслугиДляТК", ПредопределенноеЗначение("Перечисление.ФормыОплаты.Безналичная"));
	ЗначенияПоУмолчанию.Вставить("КодУслугиДляТК", "PCL");
	ЗначенияПоУмолчанию.Вставить("ВариантПеревозкиДляТК", "ДД");
	ЗначенияПоУмолчанию.Вставить("TRANSPORTMODE", "3");
	ЗначенияПоУмолчанию.Вставить("PREPOSTALPREPARATION", "1");
	ЗначенияПоУмолчанию.Вставить("АдресЗабораГрузаДляТК", "143980, Россия, обл Московская, мкр Жeлезнодорожный, ул Южная, дом 21, стр. 3");
	ЗначенияПоУмолчанию.Вставить("VSDДляЗаявокВТК", "0");

	Для Каждого Элемент Из ЗначенияПоУмолчанию Цикл
		
		Если Не ЗначениеЗаполнено(Объект[Элемент.Ключ]) Тогда
			
			Объект[Элемент.Ключ] = Элемент.Значение;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры// } #wortmann	

// #wortmann {
// #Заявки на доставку
// Галфинд Окунев 2022/07/20
//
&НаКлиенте
Процедура СохранятьБезОтправкиПриИзменении(Элемент = Неопределено)
	
	Элементы.ФормаКомандаСохранить.Видимость					= Объект.СохранятьБезОтправки; 
	Элементы.СписокДокументовИмяФайла.Видимость					= Объект.СохранятьБезОтправки; 
	Элементы.ФормаКомандаОтправитьПоПочте.Видимость				= Не Объект.СохранятьБезОтправки; 
	Элементы.ФормаКомандаПередатьЧерезAPI.Видимость				= Не Объект.СохранятьБезОтправки; 
	Элементы.СписокДокументовКомандаОтправитьСейчас.Видимость	= Не Объект.СохранятьБезОтправки; 
	Элементы.СписокДокументовОтметка.Видимость					= Не Объект.СохранятьБезОтправки; 
	Элементы.СписокДокументовEmail.Видимость					= Не Объект.СохранятьБезОтправки; 
	Элементы.СписокДокументовГруппаПисьмо.Видимость				= Не Объект.СохранятьБезОтправки; 
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Заявки на доставку
// Галфинд Окунев 2022/07/20
//
&НаСервере
Функция ПолучитьДанныеДляФормированияДокументов()
	
	Запрос = Новый Запрос; 
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаДокументов.Документ КАК Документ,
	               |	ТаблицаДокументов.ТК КАК ТК
	               |ПОМЕСТИТЬ ВТ_Таблица
	               |ИЗ
	               |	&ТаблицаДокументов КАК ТаблицаДокументов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаДокументов.Документ КАК Документ,
	               |	ТаблицаДокументов.ТК КАК ТК,
	               |	ЕСТЬNULL(КонтрагентыКонтактнаяИнформация.Представление, """") КАК Email
	               |ПОМЕСТИТЬ ВТ_ТаблицаДокументов
	               |ИЗ
	               |	ВТ_Таблица КАК ТаблицаДокументов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	               |			ПО (КонтрагентыКонтактнаяИнформация.Ссылка = Контрагенты.Ссылка)
	               |				И (КонтрагентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailКонтрагента))
	               |		ПО ТаблицаДокументов.ТК = Контрагенты.Ссылка
	               |;
				   |
				   // #wortmann {
				   // e1cib/data/Задача.ЗадачаИсполнителя?ref=8128bcee7bda45d711ed81267e7aad39
				   // Удалены временные реквизиты из спр Склады, добавляем заполнение из доп.реквизитов
				   // Галфинд Домнышева 2022/12/27
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	СкладыДополнительныеРеквизиты.Ссылка КАК Ссылка,
				   |	СкладыДополнительныеРеквизиты.Свойство КАК Свойство,
				   |	СкладыДополнительныеРеквизиты.Значение КАК Значение
				   |ПОМЕСТИТЬ ВТ_РеквизитВКоробах
				   |ИЗ
				   |	Справочник.Склады.ДополнительныеРеквизиты КАК СкладыДополнительныеРеквизиты
				   |ГДЕ
				   |	СкладыДополнительныеРеквизиты.Свойство.Имя = ""гф_СкладыТоварыВКоробах""
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	СкладыДополнительныеРеквизиты.Ссылка КАК Ссылка,
				   |	СкладыДополнительныеРеквизиты.Свойство КАК Свойство,
				   |	СкладыДополнительныеРеквизиты.Значение КАК Значение
				   |ПОМЕСТИТЬ ВТ_КодКлиентаТК
				   |ИЗ
				   |	Справочник.Склады.ДополнительныеРеквизиты КАК СкладыДополнительныеРеквизиты
				   |ГДЕ
				   |	СкладыДополнительныеРеквизиты.Свойство.Имя = ""гф_СкладыКодКлиентаТК""
				   |;
				   // } #wortmann
				   |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ТаблицаДокументов.Документ КАК Документ,
	               |	ВТ_ТаблицаДокументов.ТК КАК ТК,
	               |	РасходныйОрдерНаТовары.Номер КАК Номер,
	               |	РасходныйОрдерНаТовары.Склад КАК Склад,
	               |	РасходныйОрдерНаТоварыОтгружаемыеТовары.УпаковочныйЛистРодитель КАК УпаковочныйЛист,
	               |	РасходныйОрдерНаТовары.Получатель КАК Партнер,
	               |	0 КАК Сумма,
				   |	НоменклатураСправочник.ВидНоменклатуры В ИЕРАРХИИ (&Обувь) КАК ЭтоОбувь,
				   // #wortmann {
				   // e1cib/data/Задача.ЗадачаИсполнителя?ref=8128bcee7bda45d711ed81267e7aad39
				   // Удалены временные реквизиты из спр Склады, добавляем заполнение из доп.реквизитов
				   // Галфинд Домнышева 2022/12/27
				   //|	Склады.гф_ТоварыВКоробках КАК ТоварыВКоробках,
				   |	ЕСТЬNULL(ВТ_РеквизитВКоробах.Значение, ЛОЖЬ) КАК ТоварыВКоробках,
				   // } #wortmann
				   |	РасходныйОрдерНаТоварыОтгружаемыеТовары.УпаковочныйЛист.гф_Комплектация КАК ВариантКомплектации,
	               |	ВариантыКомплектацииНоменклатуры.гф_ВесКороба КАК ВесКороба,
				   |	ВариантыКомплектацииНоменклатуры.гф_ОбъемКороба КАК ОбъемКороба,
				   // #wortmann {
				   // e1cib/data/Задача.ЗадачаИсполнителя?ref=8128bcee7bda45d711ed81267e7aad39
				   // Удалены временные реквизиты из спр Склады, добавляем заполнение из доп.реквизитов
				   // Галфинд Домнышева 2022/12/27
				   //|	ЕСТЬNULL(Склады.гф_КодКлиентаТК, """") КАК КодКлиентаТК,
				   |	ЕСТЬNULL(ВТ_КодКлиентаТК.Значение, """") КАК КодКлиентаТК,
				   // } #wortmann
				   |	ВТ_ТаблицаДокументов.Email КАК Email,
				   |	НоменклатураСправочник.ВидНоменклатуры КАК ВидНоменклатуры
	               |ПОМЕСТИТЬ ВТ_Номенклатура
	               |ИЗ
	               |	ВТ_ТаблицаДокументов КАК ВТ_ТаблицаДокументов
				   |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
				   // #wortmann {
				   // e1cib/data/Задача.ЗадачаИсполнителя?ref=8128bcee7bda45d711ed81267e7aad39
				   // Удалены временные реквизиты из спр Склады, добавляем заполнение из доп.реквизитов
				   // Галфинд Домнышева 2022/12/27
				   //|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
				   //|			ПО РасходныйОрдерНаТовары.Склад = Склады.Ссылка 
				   |			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РеквизитВКоробах КАК ВТ_РеквизитВКоробах
				   |			ПО РасходныйОрдерНаТовары.Склад = ВТ_РеквизитВКоробах.Ссылка
				   |			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КодКлиентаТК КАК ВТ_КодКлиентаТК
				   |			ПО РасходныйОрдерНаТовары.Склад = ВТ_КодКлиентаТК.Ссылка
				   // } #wortmann
				   |		ПО ВТ_ТаблицаДокументов.Документ = РасходныйОрдерНаТовары.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары.ОтгружаемыеТовары КАК РасходныйОрдерНаТоварыОтгружаемыеТовары
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСправочник
	               |			ПО РасходныйОрдерНаТоварыОтгружаемыеТовары.Номенклатура = НоменклатураСправочник.Ссылка
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист КАК УпаковочныйЛистДокумент
	               |				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
	               |				ПО УпаковочныйЛистДокумент.гф_Комплектация = ВариантыКомплектацииНоменклатуры.Ссылка
	               |			ПО РасходныйОрдерНаТоварыОтгружаемыеТовары.УпаковочныйЛистРодитель = УпаковочныйЛистДокумент.Ссылка
	               |		ПО ВТ_ТаблицаДокументов.Документ = РасходныйОрдерНаТоварыОтгружаемыеТовары.Ссылка
	               |			И (НЕ РасходныйОрдерНаТоварыОтгружаемыеТовары.ЭтоУпаковочныйЛист)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Номенклатура.Документ КАК Документ,
	               |	ВТ_Номенклатура.ТК КАК ТК,
	               |	ВТ_Номенклатура.Номер КАК Номер,
	               |	ВТ_Номенклатура.Склад КАК Склад,
	               |	ВТ_Номенклатура.УпаковочныйЛист КАК УпаковочныйЛист,
	               |	ВТ_Номенклатура.Партнер КАК Партнер,
	               |	СУММА(ВТ_Номенклатура.Сумма) КАК Сумма,
	               |	МАКСИМУМ(ВТ_Номенклатура.ЭтоОбувь) КАК ЭтоОбувь,
	               |	МАКСИМУМ(ВТ_Номенклатура.ТоварыВКоробках) КАК ТоварыВКоробках,
	               |	МАКСИМУМ(ЕСТЬNULL(ВТ_Номенклатура.ВесКороба, &ВесКоробаДляТК)) КАК ВесКороба,
	               |	МАКСИМУМ(ЕСТЬNULL(ВТ_Номенклатура.ОбъемКороба, &ОбъемКоробаДляТК)) КАК ОбъемКороба,
	               |	ВТ_Номенклатура.КодКлиентаТК КАК КодКлиентаТК,
	               |	ВТ_Номенклатура.Email КАК Email,
	               |	МАКСИМУМ(ВТ_Номенклатура.ВидНоменклатуры) КАК ВидНоменклатуры,
	               |	Организации.Ссылка КАК Организация,
	               |	Организации.гф_УчетнаяЗаписьПочтыРоссии КАК УчетнаяЗаписьПР
	               |ПОМЕСТИТЬ ВТ_УпаковочныеЛисты
	               |ИЗ
	               |	ВТ_Номенклатура КАК ВТ_Номенклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	               |			ПО Склады.гф_Организация = Организации.Ссылка
	               |		ПО ВТ_Номенклатура.Склад = Склады.Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_Номенклатура.Склад,
	               |	ВТ_Номенклатура.Документ,
	               |	ВТ_Номенклатура.УпаковочныйЛист,
	               |	ВТ_Номенклатура.Номер,
	               |	ВТ_Номенклатура.Партнер,
	               |	ВТ_Номенклатура.ТК,
	               |	ВТ_Номенклатура.ВесКороба,
	               |	ВТ_Номенклатура.ОбъемКороба,
	               |	ВТ_Номенклатура.КодКлиентаТК,
	               |	ВТ_Номенклатура.Email,
	               |	Организации.Ссылка,
	               |	Организации.гф_УчетнаяЗаписьПочтыРоссии
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Подзапрос.Документ КАК Документ,
	               |	Подзапрос.УпаковочныйЛист КАК УпаковочныйЛист,
	               |	Подзапрос.гф_Заказ КАК гф_Заказ,
	               |	Подзапрос.Номенклатура КАК Номенклатура,
	               |	Подзапрос.Количество КАК Количество,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(СУММА(ЗаказКлиентаТовары.Количество), 0) = 0
	               |			ТОГДА ЕСТЬNULL(СУММА(ЗаказКлиентаТовары.СуммаСНДС), 0)
	               |		ИНАЧЕ ЕСТЬNULL(СУММА(ЗаказКлиентаТовары.СуммаСНДС), 0) / СУММА(ЗаказКлиентаТовары.Количество) * ЕСТЬNULL(Подзапрос.Количество, 0)
	               |	КОНЕЦ КАК Сумма,
	               |	ЕСТЬNULL(СУММА(ЗаказКлиентаТовары.Количество), 0) КАК КоличествоВЗаказе
	               |ПОМЕСТИТЬ ВТ_Суммы
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВТ_УпаковочныеЛисты.Документ КАК Документ,
	               |		ВТ_УпаковочныеЛисты.УпаковочныйЛист КАК УпаковочныйЛист,
	               |		УпаковочныйЛистДокумент.гф_Заказ КАК гф_Заказ,
	               |		УпаковочныйЛистТовары.Номенклатура КАК Номенклатура,
	               |		СУММА(УпаковочныйЛистТовары.Количество) КАК Количество
	               |	ИЗ
	               |		ВТ_УпаковочныеЛисты КАК ВТ_УпаковочныеЛисты
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист КАК УпаковочныйЛистДокумент
	               |			ПО ВТ_УпаковочныеЛисты.УпаковочныйЛист = УпаковочныйЛистДокумент.Ссылка
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
	               |			ПО ВТ_УпаковочныеЛисты.УпаковочныйЛист = УпаковочныйЛистТовары.Ссылка
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ВТ_УпаковочныеЛисты.Документ,
	               |		ВТ_УпаковочныеЛисты.УпаковочныйЛист,
	               |		УпаковочныйЛистДокумент.гф_Заказ,
	               |		УпаковочныйЛистТовары.Номенклатура) КАК Подзапрос
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	               |		ПО Подзапрос.гф_Заказ = ЗаказКлиентаТовары.Ссылка
	               |			И Подзапрос.Номенклатура = ЗаказКлиентаТовары.Номенклатура
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Подзапрос.Документ,
	               |	Подзапрос.УпаковочныйЛист,
	               |	Подзапрос.гф_Заказ,
	               |	Подзапрос.Номенклатура,
	               |	Подзапрос.Количество
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_УпаковочныеЛисты.Документ КАК Документ,
	               |	ВЫБОР
	               |		КОГДА ВТ_УпаковочныеЛисты.ТК = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |			ТОГДА СправочникАдресаДоставки.ТК
	               |		ИНАЧЕ ВТ_УпаковочныеЛисты.ТК
	               |	КОНЕЦ КАК ТК,
	               |	ВТ_УпаковочныеЛисты.Номер КАК Номер,
	               |	ВТ_УпаковочныеЛисты.Склад КАК Склад,
	               |	ВТ_УпаковочныеЛисты.УпаковочныйЛист КАК УпаковочныйЛист,
	               |	УпаковочныйЛистДокумент.Код КАК IDКороба,
	               |	ВТ_УпаковочныеЛисты.Партнер КАК Партнер,
	               |	Контрагенты.Ссылка КАК Контрагент,
	               |	СправочникАдресаДоставки.КонтактноеЛицо КАК КонтактноеЛицо,
	               |	Контрагенты.СтранаРегистрации КАК Страна,
	               |	ВТ_УпаковочныеЛисты.ТоварыВКоробках КАК ТоварыВКоробках,
	               |	ВТ_УпаковочныеЛисты.ЭтоОбувь КАК ЭтоОбувь,
	               |	ВЫБОР
	               |		КОГДА ВТ_УпаковочныеЛисты.ЭтоОбувь
	               |				И ВТ_УпаковочныеЛисты.ТоварыВКоробках = Истина
	               |			ТОГДА ВТ_УпаковочныеЛисты.ВесКороба
	               |		ИНАЧЕ &ВесКоробаДляТК
	               |	КОНЕЦ КАК Вес,
	               |	ВЫБОР
	               |		КОГДА ВТ_УпаковочныеЛисты.ЭтоОбувь
	               |				И ВТ_УпаковочныеЛисты.ТоварыВКоробках = Истина
	               |			ТОГДА ВТ_УпаковочныеЛисты.ОбъемКороба
	               |		ИНАЧЕ &ОбъемКоробаДляТК
	               |	КОНЕЦ КАК Объем,
	               |	ВТ_УпаковочныеЛисты.КодКлиентаТК КАК КодКлиентаТК,
	               |	0 КАК Длина,
	               |	0 КАК Ширина,
	               |	0 КАК Высота,
	               |	ВТ_УпаковочныеЛисты.Email КАК Email,
	               |	ЕСТЬNULL(Контрагенты.Представление, """") КАК КонтрагентПредставление,
	               |	1 КАК НомерАдреса,
	               |	ЕСТЬNULL(Партнеры.Код, """") КАК КодКлиента,
	               |	ВТ_УпаковочныеЛисты.ВидНоменклатуры КАК ВидНоменклатуры,
	               |	ВидыНоменклатуры.Представление КАК Содержимое,
	               |	КонтрагентыТелефон.Представление КАК НомерТелефона,
	               |	ЕСТЬNULL(ВТ_Суммы.Сумма, 0) КАК Сумма,
	               |	ВТ_УпаковочныеЛисты.Организация КАК Организация,
	               |	ВТ_УпаковочныеЛисты.УчетнаяЗаписьПР КАК УчетнаяЗаписьПР,
	               |	ЗаказКлиентаДокумент.Ссылка КАК ЗаказКлиента,
	               |	ISNULL(РеализацияТоваровУслуг.гф_АдресДоставки, ЗаказКлиентаДокумент.гф_АдресДоставки) КАК АдресДоставкиСсылка,
	               |	ISNULL(СправочникАдресаДоставкиРТУ.Представление, СправочникАдресаДоставки.Представление) КАК АдресДоставки
	               |ИЗ
	               |	ВТ_УпаковочныеЛисты КАК ВТ_УпаковочныеЛисты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист КАК УпаковочныйЛистДокумент
	               |			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Суммы КАК ВТ_Суммы
	               |			ПО УпаковочныйЛистДокумент.Ссылка = ВТ_Суммы.УпаковочныйЛист
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиентаДокумент
	               |			ПО УпаковочныйЛистДокумент.гф_Заказ = ЗаказКлиентаДокумент.Ссылка
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гф_АдресаДоставки КАК СправочникАдресаДоставки
	               |			ПО (ЗаказКлиентаДокумент.гф_АдресДоставки = СправочникАдресаДоставки.Ссылка)
	               |		ПО ВТ_УпаковочныеЛисты.УпаковочныйЛист = УпаковочныйЛистДокумент.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	               |			ПО Контрагенты.Партнер = Партнеры.Ссылка
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыТелефон
	               |			ПО (КонтрагентыТелефон.Ссылка = Контрагенты.Ссылка)
	               |				И (КонтрагентыТелефон.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента))
	               |		ПО ВТ_УпаковочныеЛисты.Партнер = Контрагенты.Партнер
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	               |		ПО ВТ_УпаковочныеЛисты.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
  	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.гф_АдресаДоставки КАК СправочникАдресаДоставкиРТУ
	               |			ПО (РеализацияТоваровУслуг.гф_АдресДоставки = СправочникАдресаДоставкиРТУ.Ссылка)
	               |		ПО ВТ_УпаковочныеЛисты.Документ = РеализацияТоваровУслуг.гф_РасходныйОрдер
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ТК,
	               |	Документ";

	Запрос.Параметры.Вставить("ТаблицаДокументов", Объект.ДокументыКОтправке.Выгрузить()); 
	Запрос.Параметры.Вставить("Обувь", Объект.ГруппаОбувь); 
	Запрос.Параметры.Вставить("ВесКоробаДляТК", Объект.ВесКоробаДляТК); 
	Запрос.Параметры.Вставить("ОбъемКоробаДляТК", Объект.ОбъемКоробаДляТК); 
	 
	Результат = Запрос.Выполнить().Выгрузить(); 
	
	Результат.Колонки.Добавить("ТелефонКонтактногоЛица");
	Результат.Колонки.Добавить("ЭлектроннаяПочта");
	
	Для Каждого СтрокаДанных Из Результат Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.КонтактноеЛицо) Тогда
			
			Продолжить;
			
		КонецЕсли;	
		
		Для Каждого СтрокаКонтактнойИнформации Из СтрокаДанных.КонтактноеЛицо.КонтактнаяИнформация Цикл
			
			Если СтрокаКонтактнойИнформации.Вид = 
				ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица") Тогда 
				
				СтрокаДанных.ТелефонКонтактногоЛица	= СтрокаКонтактнойИнформации.Представление;
				
			ИначеЕсли СтрокаКонтактнойИнформации.Вид = 
				ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailКонтактногоЛица") Тогда 
				
				СтрокаДанных.ЭлектроннаяПочта	= СтрокаКонтактнойИнформации.Представление;
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;	
			
		КонецЦикла;	 
		
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции// } #wortmann// } #wortmann	

// #wortmann {
// #Заявки на доставку
// Галфинд Окунев 2022/07/20
//
&НаСервере
Процедура ПоместитьДокументыВХранилище() 
	
	СписокДокументов.Очистить();
	
	ДанныеДокументов = ПолучитьДанныеДляФормированияДокументов();
	
	ТаблицаТК = ДанныеДокументов.Скопировать(, "ТК, Email");
	
	ТаблицаТК.Свернуть("ТК, Email");
	
	Для Каждого СтрокаТК Из ТаблицаТК Цикл 
		
		Для Каждого НастройкаТК Из НастройкиТК Цикл
			
			Если НастройкаТК.ТК = СтрокаТК.ТК Тогда
				
				Прервать;
				
			КонецЕсли;	
			
		КонецЦикла;	
		
		ОтборПоТК = Новый Структура("ТК", СтрокаТК.ТК);
		
		СтрокиПоТК = ДанныеДокументов.НайтиСтроки(ОтборПоТК);
		
		Если СтрокиПоТК.Количество() Тогда
			
			Если НастройкаТК.ПР Тогда
				
				ДокументПР = СформироватьДокументПР(СтрокиПоТК); 
			
				ПоместитьФайлВХранилище(СтрокаТК.ТК , СтрокаТК.Email, ДокументПР, "ПР");
				
			КонецЕсли;	
			
			Если НастройкаТК.DPD Тогда
				
				ДокументDPD = СформироватьДокументDPD(СтрокиПоТК); 
			
				ПоместитьФайлВХранилище(СтрокаТК.ТК , СтрокаТК.Email, ДокументDPD, "DPD");
				
			КонецЕсли;	
			
			Если НастройкаТК.Консолидированный Тогда
				
				ДокументКонсолидированный = СформироватьДокументКонсолидированный(СтрокиПоТК); 
			
				ПоместитьФайлВХранилище(СтрокаТК.ТК , СтрокаТК.Email, ДокументКонсолидированный, "Консолидированный");
				
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры// } #wortmann	

// #wortmann {
// #Заявки на доставку
// Галфинд Окунев 2022/07/20
//
&НаСервере
Функция СформироватьДокументПР(СтрокиПоТК)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Макет = ОбработкаОбъект.ПолучитьМакет("МакетПР");
	
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ОбластьШапкаТаблицы");
	ОбластьСтрока = Макет.ПолучитьОбласть("ОбластьСтрока"); 
	
	ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы); 
	
	Для Каждого СтрокаДанных Из СтрокиПоТК Цикл 
		
		ОбластьСтрока.Параметры.ADDRESSLINE 			= СтрокаДанных.АдресДоставки;
		ОбластьСтрока.Параметры.ADRESAT 	 			= СтрокаДанных.КонтрагентПредставление + ";" + СтрокаДанных.КодКлиентаТК + СтрокаДанных.Номер;
		ОбластьСтрока.Параметры.MASS 					= СтрокаДанных.Вес; 
		ОбластьСтрока.Параметры.VALUE	 				= СтрЗаменить(Формат(СтрокаДанных.Сумма, "ЧЦ=15; ЧДЦ=2; ЧРД=."), Символы.НПП, "");
		ОбластьСтрока.Параметры.COMMENT 				= СтрокаДанных.КодКлиентаТК + СтрокаДанных.Номер; 
		ОбластьСтрока.Параметры.MAILTYPE 				= Объект.MAILTYPE;
		ОбластьСтрока.Параметры.INDEXFROM 				= Объект.INDEXFROM;
		ОбластьСтрока.Параметры.VSD 					= Объект.VSDДляЗаявокВТК;
		ОбластьСтрока.Параметры.TRANSPORTMODE 			= Объект.TRANSPORTMODE;
		ОбластьСтрока.Параметры.COSTCENTER 				= СтрокаДанных.КодКлиентаТК;
		ОбластьСтрока.Параметры.PREPOSTALPREPARATION	= Объект.PREPOSTALPREPARATION;
		ОбластьСтрока.Параметры.ORDERNUM 				= СтрокаДанных.IDКороба; 
		ОбластьСтрока.Параметры.TELADDRESS				= СтрокаДанных.НомерТелефона;
		 
		ТабличныйДокумент.Вывести(ОбластьСтрока); 
		
	КонецЦикла; 
		
	Возврат ТабличныйДокумент;
	
КонецФункции// } #wortmann// } #wortmann	

// #wortmann {
// #Заявки на доставку
// Галфинд Окунев 2022/07/20
//
Функция СформироватьДокументDPD(СтрокиПоТК)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Макет = ОбработкаОбъект.ПолучитьМакет("МакетDPD");
	
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ОбластьШапкаТаблицы");
	ОбластьСтрока = Макет.ПолучитьОбласть("ОбластьСтрока"); 

	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
	
	Для Каждого СтрокаДанных Из СтрокиПоТК Цикл 
		
		ОбластьСтрока.Параметры.ДатаЗагрузки 		 	= Формат(Объект.ДатаВыгрузки, "ДФ=dd.MM.yyyy" );
		ОбластьСтрока.Параметры.ИНН			 		 	= СтрокаДанных.КодКлиентаТК;
		ОбластьСтрока.Параметры.НомерТТН 			 	= СтрокаДанных.КодКлиентаТК + СтрокаДанных.Номер;
		ОбластьСтрока.Параметры.НомерКороба 		 	= СтрокаДанных.IDКороба;
		ОбластьСтрока.Параметры.НомерАдреса 		 	= СтрокаДанных.НомерАдреса;
		ОбластьСтрока.Параметры.НазваниеКлиента 	 	= СтрокаДанных.Контрагент;
		ОбластьСтрока.Параметры.АдресКлиента 		 	= СтрокаДанных.АдресДоставки;
		ОбластьСтрока.Параметры.Вес 				 	= СтрокаДанных.Вес;;
		ОбластьСтрока.Параметры.Длина				 	= СтрокаДанных.Длина;
		ОбластьСтрока.Параметры.Ширина				 	= СтрокаДанных.Ширина;
		ОбластьСтрока.Параметры.Высота 				 	= СтрокаДанных.Высота;
		ОбластьСтрока.Параметры.Цена 				 	= СтрокаДанных.Сумма;
		ОбластьСтрока.Параметры.КодКлиента	 			= СокрЛП(СтрокаДанных.КодКлиента);
		ОбластьСтрока.Параметры.Объем 					= Формат(СтрокаДанных.Объем, "ЧЦ=15; ЧДЦ=2");
		ОбластьСтрока.Параметры.КонтактноеЛицо			= СтрокаДанных.КонтактноеЛицо; 
		ОбластьСтрока.Параметры.Страна					= СтрокаДанных.Страна;
		ОбластьСтрока.Параметры.ФормаОплатыУслуги		= Объект.ФормаОплатыУслугиДляТК;
		ОбластьСтрока.Параметры.КодУслуги				= Объект.КодУслугиДляТК;
		ОбластьСтрока.Параметры.ВариантПеревозки		= Объект.ВариантПеревозкиДляТК;
		ОбластьСтрока.Параметры.Содержимое				= ?(СтрокаДанных.Содержимое = "Accessories", "Аксессуары", СтрокаДанных.Содержимое); 
		ОбластьСтрока.Параметры.ТелефонКонтактногоЛица	= СтрокаДанных.НомерТелефона;
		ОбластьСтрока.Параметры.ЭлектроннаяПочта		= СтрокаДанных.ЭлектроннаяПочта;
		ОбластьСтрока.Параметры.Опции 					= ?(СтрокаДанных.Страна = ПредопределенноеЗначение("Справочник.СтраныМира.Россия"), 
															"ПРР_ДСД", "ПРД/ВДО_ДСД");

		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции// } #wortmann// } #wortmann

// #wortmann {
// #Заявки на доставку
// Галфинд Окунев 2022/07/20
//
Функция СформироватьДокументКонсолидированный(СтрокиПоТК); 
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Макет = ОбработкаОбъект.ПолучитьМакет("МакетКонсолидированный");
	
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ОбластьШапкаТаблицы");
	ОбластьСтрока = Макет.ПолучитьОбласть("ОбластьСтрока"); 

	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
	
	ПерваяСтрока = Истина;
	
	Документ = Неопределено;
	
	Для Каждого СтрокаДанных Из СтрокиПоТК Цикл 
		
		Если СтрокаДанных.Документ <> Документ Тогда
			
			Если Не ПерваяСтрока тогда
				
				ТабличныйДокумент.Вывести(ОбластьСтрока);
				
			КонецЕсли;
			
			ВесГруза = 0;
			ОбъемГруза = 0;
			КоличествоМест = 0;
			Сумма = 0;
			
			ОбластьСтрока.Параметры.ВремяОтправки 			 		 	= Объект.ДатаВыгрузки;
			ОбластьСтрока.Параметры.АдресЗабораГруза 		 		 	= Объект.АдресЗабораГрузаДляТК;
			ОбластьСтрока.Параметры.КонтактноеЛицоОтправителя		 	= Объект.КонтактноеЛицо;
			ОбластьСтрока.Параметры.ТелефонКонтактногоЛицаОтправителя	= Объект.ТелефонКонтактногоЛица;
			ОбластьСтрока.Параметры.КонтактноеЛицо 					 	= СтрокаДанных.КонтактноеЛицо;
			ОбластьСтрока.Параметры.ТелефонКонтактногоЛица				= СтрокаДанных.НомерТелефона;
			ОбластьСтрока.Параметры.ЭлектроннаяПочта					= СтрокаДанных.ЭлектроннаяПочта;
			ОбластьСтрока.Параметры.Грузополучатель 					= СтрокаДанных.Контрагент;
			ОбластьСтрока.Параметры.ТК 			 						= СтрокаДанных.ТК;
			ОбластьСтрока.Параметры.АдресДоставки 	 					= СтрокаДанных.АдресДоставки;
			ОбластьСтрока.Параметры.Водители 		 					= СтрокаДанных.ТК;
			ОбластьСтрока.Параметры.НомерЗаказа 						= СтрокаДанных.КодКлиентаТК + СтрокаДанных.Номер;
			ОбластьСтрока.Параметры.КодАдресаДоставки					= СтрокаДанных.НомерАдреса; 
			ОбластьСтрока.Параметры.Отправитель 						= Объект.Организация;
			ОбластьСтрока.Параметры.ДопПоле 							= Объект.Организация;
			ОбластьСтрока.Параметры.КодКлиента 							= СтрокаДанных.КодКлиента;
			ОбластьСтрока.Параметры.Страна 			 					= СтрокаДанных.Страна;
			ОбластьСтрока.Параметры.ФормаОплатыУслуги					= Объект.ФормаОплатыУслугиДляТК;
			ОбластьСтрока.Параметры.Содержимое 		 					= СтрокаДанных.Содержимое;
			ОбластьСтрока.Параметры.ID_номер 		 					= СтрокаДанных.КодКлиентаТК;
			ОбластьСтрока.Параметры.ДопПоле2 		 					= СтрокаДанных.КодКлиентаТК;
			ОбластьСтрока.Параметры.ID_номерCompany 					= СтрокаДанных.КодКлиентаТК+ "_" + Объект.Организация;
			
		КонецЕсли;
		
		КоличествоМест = КоличествоМест + 1;
		ВесГруза	 = ВесГруза + Число(СтрЗаменить(СтрокаДанных.Вес, ", ", "."));
		ОбъемГруза = ОбъемГруза + Число(СтрЗаменить(СтрокаДанных.Объем, ", ", "."));
		Сумма = Сумма + СтрокаДанных.Сумма; 

		ОбластьСтрока.Параметры.КоличествоМест	= КоличествоМест;
		ОбластьСтрока.Параметры.ВесГруза		= ВесГруза;
		ОбластьСтрока.Параметры.ОбъемГруза		= Формат(ОбъемГруза, "ЧЦ=15; ЧДЦ=2"); 
 		ОбластьСтрока.Параметры.Сумма			= СтрЗаменить(Формат(Сумма, "ЧЦ=15; ЧДЦ=2; ЧРД=."), Символы.НПП, "");

		Документ = СтрокаДанных.Документ;
		
		ПерваяСтрока = Ложь;
		
	КонецЦикла; 
	
	ТабличныйДокумент.Вывести(ОбластьСтрока);
	
	Возврат ТабличныйДокумент;
	
КонецФункции// } #wortmann// } #wortmann

// #wortmann {
// #Заявки на доставку
// Галфинд Окунев 2022/07/20
//
&НаСервере
Процедура ПоместитьФайлВХранилище(ТК, Email, ТабличныйДокумент, ВидФайла)
	
	ИмяФайла = Объект.КодКомпании + "_" + ТК.Наименование 
	+ "_" + Формат(Объект.ДатаВыгрузки, "ДФ=dd.MM.yy") + "_" + ВидФайла; 
	
	ИмяФайлаДляОтправки = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла + ".xls", "");
	
	ПутьКФайлу = КаталогВременныхФайлов() + ИмяФайлаДляОтправки;
	
	ТабличныйДокумент.Записать(ПутьКФайлу, ТипФайлаТабличногоДокумента.XLS);
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПутьКФайлу);
	
	СтрокаДокумента = СписокДокументов.Добавить();
	
	СтрокаДокумента.Отметка		= Истина;
	СтрокаДокумента.ТК			= ТК; 
	СтрокаДокумента.Email		= Email;
	СтрокаДокумента.ИмяФайла	= ИмяФайлаДляОтправки;
	СтрокаДокумента.Адрес		= ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	
	УдалитьФайлы(Объект.КаталогВыгрузки, "ПутьКФайлу");
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Заявки на доставку
// Галфинд Окунев 2022/07/20
//
&НаСервере
Процедура ОчиститьВременныеХранилища()
	
	Для Каждого СтрокаДокументов Из СписокДокументов Цикл
		
		Если ЭтоАдресВременногоХранилища(СтрокаДокументов.Адрес) Тогда 
			
			УдалитьИзВременногоХранилища(СтрокаДокументов.Адрес);
			
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры// } #wortmann	

// #wortmann {
// #Заявки на доставку
// Галфинд Окунев 2022/07/20
// Производит подстановку параметров в шаблон сообщения
//
// Параметры:
// Сообщение - Структрура - см. ШаблоныСообщений.СформироватьСообщение
//
Процедура ВставитьПараметрыВТекстСообщения(Сообщение, МассивСтрок)

	ФайлКартинки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ФайлЛоготип");
	
	ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(ФайлКартинки);
	
	АдресКартинки = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор);
	
	ВставитьКартинкуВТекстСообщения(Сообщение, "Лого", АдресКартинки);
	
	ВставитьПараметрВТекстСообщения(Сообщение, "Наименование организации", Объект.Организация.НаименованиеПолное); 
	
	СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Объект.Организация, ТекущаяДатаСеанса());
	
	ВставитьПараметрВТекстСообщения(Сообщение, "Адрес офиса", 
		ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ЮридическийАдрес"));
	
	ВставитьПараметрВТекстСообщения(Сообщение, "Телефон организации", 
		ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "Телефоны"));
		
КонецПроцедуры// } #wortmann // ВставитьПараметрыВТекстСообщения()

// #wortmann {
// #Заявки на доставку
// Галфинд Окунев 2022/07/20
//
&НаСервереБезКонтекста
Процедура ВставитьПараметрВТекстСообщения(Сообщение, ИмяПараметра, ЗначениеПараметра)
	
	Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "&lt;" + ИмяПараметра + "&gt;", ЗначениеПараметра);
	
КонецПроцедуры// } #wortmann	
 
// #wortmann {
// #Заявки на доставку
// Галфинд Окунев 2022/07/20
//
&НаСервереБезКонтекста
Процедура ВставитьКартинкуВТекстСообщения(Сообщение, ИмяПараметра, АдресКартинки)
	
	Идентификатор = Строка(Новый УникальныйИдентификатор());
	
	Вложение = Сообщение.Вложения.Добавить();
	
	Вложение.АдресВоВременномХранилище	= АдресКартинки;
	Вложение.Представление				= ИмяПараметра;
	Вложение.Идентификатор				= Идентификатор;
	
	Сообщение.Текст = СтрЗаменить(Сообщение.Текст, 
		"&lt;" + ИмяПараметра + "&gt;", 
		"<img src=""cid:" + Идентификатор + """ style=""border:none;""></img>");
	
КонецПроцедуры// } #wortmann	

// #wortmann {
// #Заявки на доставку
// Галфинд Окунев 2022/07/20
// Формирует письмо по строкам списка документов
//
// Параметры:
// МассивСтрок - Массив
//
&НаСервере
Процедура СформироватьПисьмо(МассивСтрок)
	
	ДополнительныеПараметры	= Новый Структура; 
	
	Предмет = МассивСтрок[0].ТК; 
	
	Письмо = МассивСтрок[0].Письмо; 
	
	Сообщение = ШаблоныСообщений.СформироватьСообщение(Объект.Шаблон, Предмет, УникальныйИдентификатор, ДополнительныеПараметры);
	
	ТемаСообщения = Объект.Организация.НаименованиеПолное + ". Документы на транспортировку";
	
	Сообщение.Тема = ТемаСообщения;
	
	ВставитьПараметрыВТекстСообщения(Сообщение, МассивСтрок);

	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		
		Вложение = Сообщение.Вложения.Добавить();
		
		Вложение.АдресВоВременномХранилище	= СтрокаМассива.Адрес;
		Вложение.Представление				= СтрокаМассива.ИмяФайла;
		
	КонецЦикла; 
	
	СоздатьИлиЗаполнитьПисьмо(Письмо, Сообщение, МассивСтрок);
	
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		
		СтрокаМассива.Письмо = Письмо;
		
	КонецЦикла; 
	
КонецПроцедуры// } #wortmann

// #wortmann {
// #Заявки на доставку
// Галфинд Окунев 2022/07/20
//
&НаСервере
Процедура СоздатьИлиЗаполнитьПисьмо(ПисьмоСсылка, Сообщение, МассивСтрок)
	
	Если ЗначениеЗаполнено(ПисьмоСсылка) Тогда
		
		Возврат;
		
	КонецЕсли;	
	
	Письмо = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент(); 
		
	Письмо.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Исходящее");
	
	ПисьмоHTML = (Сообщение.ДополнительныеПараметры.ФорматПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML);
		
	Письмо.Автор = Пользователи.ТекущийПользователь();
	Письмо.Ответственный = Пользователи.ТекущийПользователь();
	Письмо.Дата = ТекущаяДатаСеанса();
	Письмо.Важность = Перечисления.ВариантыВажностиВзаимодействия.Обычная;
	Письмо.Кодировка = "UTF-8";
	Письмо.ОтправительПредставление = Объект.Организация.НаименованиеПолное;
	Письмо.Дата						= ТекущаяДатаСеанса();
		
	Если ПисьмоHTML Тогда
		
		Письмо.ТекстHTML = Сообщение.Текст;
		Письмо.Текст = Взаимодействия.ПолучитьОбычныйТекстИзHTML(Сообщение.Текст);
		
	Иначе
		
		Письмо.Текст = Сообщение.Текст;
		
	КонецЕсли;
		
	Письмо.Тема = Сообщение.Тема;
	Письмо.ТипТекста = ?(ПисьмоHTML, Перечисления.ТипыТекстовЭлектронныхПисем.HTML, Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
	Письмо.УчетнаяЗапись = Объект.УчетнаяЗапись;
	Письмо.ВзаимодействиеОснование = Неопределено;
	
	НастройкиПользователя = Взаимодействия.ПолучитьПараметрыРаботыПользователяДляИсходящегоЭлектронногоПисьма(
	Объект.УчетнаяЗапись, Сообщение.ДополнительныеПараметры.ФорматПисьма, Истина);
	ЗаполнитьЗначенияСвойств(Письмо, НастройкиПользователя);
	
	Письмо.УдалятьПослеОтправки = Ложь;
	Письмо.Комментарий = "Создано и отправлено по шаблону" + " - " + Сообщение.ДополнительныеПараметры.Наименование;
		
	СписокПолучателейСпискомЗначений = (ТипЗнч(Сообщение.Получатель) = Тип("СписокЗначений"));
	
	Письмо["ПолучателиПисьма"].Очистить(); 
	
	Для Каждого ПолучательПисьма Из Сообщение.Получатель Цикл
		
		НоваяСтрока = Письмо["ПолучателиПисьма"].Добавить();
		
		Если СписокПолучателейСпискомЗначений Тогда 
			
			НоваяСтрока.Адрес = ПолучательПисьма.Значение;
			НоваяСтрока.Представление = ПолучательПисьма.Представление;
			
		Иначе
			
			НоваяСтрока.Адрес = ПолучательПисьма.Адрес;
			НоваяСтрока.Представление = ПолучательПисьма.Представление;
			НоваяСтрока.Контакт = ПолучательПисьма.ИсточникКонтактнойИнформации;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Письмо.СписокПолучателейПисьма = ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Письмо.ПолучателиПисьма, Ложь);
	
	Письмо.ЕстьВложения = (Сообщение.Вложения.Количество() > 0);
	
	РазмерВложений = 0;
	РазмерыВложений = Новый Соответствие; 
	
	Для Каждого Вложение Из Сообщение.Вложения Цикл
		
		Размер = ПолучитьИзВременногоХранилища(Вложение.АдресВоВременномХранилище).Размер() * 1.5;
		
		РазмерВложений = РазмерВложений + Размер;

		РазмерыВложений.Вставить(Вложение.АдресВоВременномХранилище, Размер);
		
		Если ЗначениеЗаполнено(Вложение.Идентификатор) Тогда
			
			Идентификатор = СтроковыеФункции.СтрокаЛатиницей(Вложение.Идентификатор);
			
			Письмо.ТекстHTML = СтрЗаменить(Письмо.ТекстHTML, "cid:" + Вложение.Идентификатор, "cid:" + Идентификатор);
			
			Вложение.Идентификатор = Идентификатор;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Письмо.Размер = РазмерВложений + СтрДлина(Письмо.Тема) * 2
	+ ?(ПисьмоHTML, СтрДлина(Письмо.ТекстHTML), СтрДлина(Письмо.Текст)) * 2; 
	
	Письмо.Записать(); 
	
	ПисьмоСсылка = Письмо.Ссылка; 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	 |	ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы.Ссылка КАК Ссылка
	 |ИЗ
	 |	Справочник.ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы КАК ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы
	 |ГДЕ
	 |	ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла";
	
	Запрос.Параметры.Вставить("ВладелецФайла", ПисьмоСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПрисоединеныйФайл = Выборка.Ссылка.ПолучитьОбъект();
		
		ПрисоединеныйФайл.Удалить();
		
	КонецЦикла;	
		
	Для Каждого Вложение Из Сообщение.Вложения Цикл
		
		ПараметрыВложения = Новый Структура;
		ПараметрыВложения.Вставить("ИмяФайла", Вложение.Представление);
		ПараметрыВложения.Вставить("Размер", РазмерыВложений[Вложение.АдресВоВременномХранилище]);
		
		Если ПустаяСтрока(Вложение.Идентификатор) Тогда
			
			УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(Письмо.Ссылка, 
			Вложение.АдресВоВременномХранилище, ПараметрыВложения);
			
		ИначеЕсли ПисьмоHTML Тогда
			
			ПараметрыВложения.Вставить("ИДФайлаЭлектронногоПисьма", Вложение.Идентификатор);
			
			УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(Письмо.Ссылка, 
			Вложение.АдресВоВременномХранилище, ПараметрыВложения);
			
		Иначе
			
			Продолжить; //Чтобы контроль кода не доколупался
			
		КонецЕсли;
						
	КонецЦикла;
	
КонецПроцедуры// } #wortmann	

// #wortmann {
// #Заявки на доставку
// Галфинд Окунев 2022/07/20
//
&НаКлиенте
Процедура ОбновитьДанныеПисем() 
	
	МассивОбновленныхПисем = Новый Массив;
	
	Для Каждого СтрокаПисем Из СписокДокументов Цикл
		
		Если ЗначениеЗаполнено(СтрокаПисем.Письмо) И МассивОбновленныхПисем.Найти(СтрокаПисем.Письмо) = Неопределено Тогда
			
			МассивОбновленныхПисем.Добавить(СтрокаПисем.Письмо);
			
			ОбновитьДанныеПисьмаНаСервере(СтрокаПисем.Письмо);
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры// } #wortmann	

// #wortmann {
// #Заявки на доставку
// Галфинд Окунев 2022/07/20
// Обновляет статус и даты письма в табличной части
//
// Параметры:
// Письмо - ДокументСсылка.ЭлектронноеПисьмоВходящее
//
&НаСервере
Процедура ОбновитьДанныеПисьмаНаСервере(Письмо)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	 |	ЭлектронноеПисьмоИсходящее.Дата КАК Дата, 
	 |	ЭлектронноеПисьмоИсходящее.ДатаОтправления КАК ДатаОтправления, 
	 |	ЭлектронноеПисьмоИсходящее.СтатусПисьма КАК СтатусПисьма, 
	 |	ЭлектронноеПисьмоИсходящее.Тема КАК Тема
	 |ИЗ
	 |	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	 |ГДЕ
	 |	ЭлектронноеПисьмоИсходящее.Ссылка = &Письмо";
	
	Запрос.Параметры.Вставить("Письмо", Письмо); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ОтборСтрок = Новый Структура("Письмо", Письмо);
		
		СтрокиПисем = СписокДокументов.НайтиСтроки(ОтборСтрок);
		
		Для Каждого СтрокаПисем Из СтрокиПисем Цикл
			
			ЗаполнитьЗначенияСвойств(СтрокаПисем, Выборка);
			
		КонецЦикла;	 
		
	КонецЕсли;

КонецПроцедуры// } #wortmann

// #wortmann {
// #Заявки на доставку
// Галфинд Окунев 2022/07/20
//
&НаСервере
Процедура ОбновитьДанныеПоТКиЗаданиямНаПеревозку();
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	 |	ТаблицаДокументов.Документ КАК Документ, 
	 |	ТаблицаДокументов.ТК КАК ТК
	 |ПОМЕСТИТЬ ВТ_Таблица
	 |ИЗ
	 |	&ТаблицаДокументов КАК ТаблицаДокументов
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ РАЗЛИЧНЫЕ
	 |	ВТ_Таблица.ТК КАК ТК, 
	 |	ЕСТЬNULL(гф_ТранспортныеКомпании.ПР, ЛОЖЬ) КАК ПР, 
	 |	ЕСТЬNULL(гф_ТранспортныеКомпании.DPD, ЛОЖЬ) КАК DPD, 
	 |	ЕСТЬNULL(гф_ТранспортныеКомпании.Консолидированный, ЛОЖЬ) КАК Консолидированный, 
	 |	ЕСТЬNULL(гф_ТранспортныеКомпании.СпособОтправки, ЛОЖЬ) КАК СпособОтправки
	 |ИЗ
	 |	ВТ_Таблица КАК ВТ_Таблица
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гф_ТранспортныеКомпании КАК гф_ТранспортныеКомпании
	 |		ПО ВТ_Таблица.ТК = гф_ТранспортныеКомпании.Контрагент
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ВТ_Таблица.Документ КАК Документ, 
	 |	ВТ_Таблица.ТК КАК ТК, 
	 |	РасходныйОрдерНаТовары.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку, 
	 |	ЕСТЬNULL(ЗаданиеНаПеревозкуДокумент.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.Формируется)) КАК СтатусЗаданияНаПеревозку
	 |ИЗ
	 |	ВТ_Таблица КАК ВТ_Таблица
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	 |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозкуДокумент
	 |			ПО РасходныйОрдерНаТовары.ЗаданиеНаПеревозку = ЗаданиеНаПеревозкуДокумент.Ссылка
	 |		ПО ВТ_Таблица.Документ = РасходныйОрдерНаТовары.Ссылка"; 
	
	Запрос.Параметры.Вставить("ТаблицаДокументов", Объект.ДокументыКОтправке.Выгрузить(, "Документ, ТК"));
	
	Пакет = Запрос.ВыполнитьПакет();
	
	ИндексТК = 1;
	ИндексДокументов = 2;
	
	НастройкиТК.Загрузить(Пакет[ИндексТК].Выгрузить()); 
	
	ВыборкаЗаданийНаПеревозку = Пакет[ИндексДокументов].Выбрать();
	
	ЕстьЗаданияНаПеревозку = Ложь;
	
	Пока ВыборкаЗаданийНаПеревозку.Следующий() Цикл
		
		ОтборСтрок = Новый Структура("Документ", ВыборкаЗаданийНаПеревозку.Документ);

		СтрокиПоДокументу = Объект.ДокументыКОтправке.НайтиСтроки(ОтборСтрок);
		
		Для Каждого СтрокаПоДокументу Из СтрокиПоДокументу Цикл
			
			ЗаполнитьЗначенияСвойств(СтрокаПоДокументу, ВыборкаЗаданийНаПеревозку);
			
			Если СтрокаПоДокументу.СтатусЗаданияНаПеревозку <> 
				ПредопределенноеЗначение("Перечисление.СтатусыЗаданийНаПеревозку.Формируется") Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("По документу " 
					+ ВыборкаЗаданийНаПеревозку.Документ
					+ " найдено задание на перевозку со статусом """
					+ СтрокаПоДокументу.СтатусЗаданияНаПеревозку + """"); 
					
				ЕстьЗаданияНаПеревозку = Истина;	
				
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЦикла;
	
	Если ЕстьЗаданияНаПеревозку Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Перезаполняются только задания на перевозку" 
			+ " со статусом ""Фомируется"".
			 |При необходимости заново заполнить задание смените его статус.");	
		
	КонецЕсли;	
	
	Для Каждого НастройкаТК Из НастройкиТК Цикл
		
		Если Не (НастройкаТК.ПР ИЛИ НастройкаТК.DPD ИЛИ НастройкаТК.Консолидированный) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("По транспортной компании " + НастройкаТК.ТК
								+ "не указано ни одного шаблона заявки.");
							
			
		КонецЕсли;	
		
	КонецЦикла;	 
	
КонецПроцедуры// } #wortmann	

// #wortmann {
// #Заявки на доставку
// Галфинд Окунев 2022/07/20
// Возвращает ссылку на тип транспортного средства "Автотранспорт"
// при отсутствии создает элемент справочника
//
&НаСервереБезКонтекста
Функция ПолучитьСсылкуАвтотранспорт()
	
	Автотранспорт = Справочники.ТипыТранспортныхСредств.НайтиПоНаименованию("Автотранспорт");
	
	Если Не ЗначениеЗаполнено(Автотранспорт) Тогда
		
		АвтотранспортОбъект = Справочники.ТипыТранспортныхСредств.СоздатьЭлемент();
		
		АвтотранспортОбъект.Наименование = "Автотранспорт";
		
		АвтотранспортОбъект.ОбменДанными.Загрузка = Истина;
		
		АвтотранспортОбъект.Записать();
		
		Автотранспорт = АвтотранспортОбъект.Ссылка;
		
	КонецЕсли;	
	
	Возврат Автотранспорт;
	
КонецФункции// } #wortmann		

&НаСервере
Процедура КомандаПередатьЧерезAPIНаСервере(Ошибки) 
	
	СписокДокументов.Очистить();
	
	ДанныеДокументов = ПолучитьДанныеДляФормированияДокументов();  
	
	Для Каждого СтрокаДокумента Из ДанныеДокументов Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаДокумента.ТК) Тогда
			
			Ошибки.Добавить("Не указана транспортная компания для ");
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	ТаблицаТК = ДанныеДокументов.Скопировать(, "ТК");
	
	ТаблицаТК.Свернуть("ТК");
	
	Для Каждого СтрокаТК Из ТаблицаТК Цикл 
		
		Для Каждого НастройкаТК Из НастройкиТК Цикл
			
			Если НастройкаТК.ТК = СтрокаТК.ТК Тогда
				
				Прервать;
				
			КонецЕсли;	
			
		КонецЦикла;	
		
		Если НастройкаТК.СпособОтправки <> "API" Тогда
			
			Продолжить;
		
		КонецЕсли;          
		
		ОтборПоТК = Новый Структура("ТК", СтрокаТК.ТК);
		
		СтрокиПоТК = ДанныеДокументов.НайтиСтроки(ОтборПоТК);
		
		Если СтрокиПоТК.Количество() Тогда  
			
			ТаблицаПоТК = ДанныеДокументов.Скопировать(СтрокиПоТК);
			
			СформироватьЗаказыПР(ТаблицаПоТК, Ошибки);
			
		КонецЕсли;		
		
	КонецЦикла;  
	
КонецПроцедуры

&НаСервере 
Процедура СформироватьЗаказыПР(ДанныеДокументов, Ошибки)
	       
	ТаблицаУчетныхЗаписей = ДанныеДокументов.Скопировать(, "УчетнаяЗаписьПР");
	
	ТаблицаУчетныхЗаписей.Свернуть("УчетнаяЗаписьПР");
	
	Для Каждого СтрокаУчетныхЗаписей Из ТаблицаУчетныхЗаписей Цикл 
		
		Если НЕ ЗначениеЗаполнено(СтрокаУчетныхЗаписей.УчетнаяЗаписьПР) Тогда
			
			Продолжить;	
			
		КонецЕсли;
		
		ОтборПоУчетнойЗаписи = Новый Структура("УчетнаяЗаписьПР", СтрокаУчетныхЗаписей.УчетнаяЗаписьПР);
		
		СтрокиПоУчетнойЗаписи = ДанныеДокументов.НайтиСтроки(ОтборПоУчетнойЗаписи);
		
		Если СтрокиПоУчетнойЗаписи.Количество() Тогда  

			ВыгрузитьЗаказыПоAPI(СтрокиПоУчетнойЗаписи, СтрокаУчетныхЗаписей.УчетнаяЗаписьПР, Ошибки); 
			
		КонецЕсли;	

	КонецЦикла;	
	
КонецПроцедуры

&НаСервере 
Процедура ВыгрузитьЗаказыПоAPI(СтрокиЗаказов, УчетнаяЗапись, Ошибки = Неопределено)
	
	МассивЗаказов = Новый Массив;
	
	Если Ошибки = Неопределено Тогда
		
		Ошибки = Новый Массив;
		
	КонецЕсли;	

	Для Каждого СтрокаЗаказа Из СтрокиЗаказов Цикл
		
		Адресат = СтрокаЗаказа.КонтрагентПредставление + ";" + СтрокаЗаказа.КодКлиентаТК + СтрокаЗаказа.Номер;	
		
		Комментарий = СтрокаЗаказа.КодКлиентаТК + СтрокаЗаказа.Номер; 
		
		НормализованныйАдрес = гф_ПочтаРоссии.ОтправкаЗапросНормализацииАдреса(
		УчетнаяЗапись, СтрокаЗаказа.АдресДоставки, Ошибки);  
		
		Если Ошибки.Количество() Тогда
			
			Ошибки.Добавить(Адресат);
			
			Возврат;
			
		КонецЕсли;	
		
		НормализованныйТелефон = гф_ПочтаРоссии.ОтправкаЗапросНормализацииТелефона(
		УчетнаяЗапись, СтрокаЗаказа.НомерТелефона, Ошибки);    
		
		Если Ошибки.Количество() Тогда
			
			Ошибки.Добавить(Адресат);
			
			Возврат;
			
		КонецЕсли;	
		
		//Если Ошибки.Количество() Тогда
		//	
		//	Продолжить;
		//	
		//КонецЕсли;	
		
		ЗаписьJSON = Новый ЗаписьJSON;
		
		ЗаписьJSON.УстановитьСтроку();
		
		ЗаписьJSON.ЗаписатьНачалоМассива();  
		
		ЗаписьJSON.ЗаписатьНачалоОбъекта();   
		
		гф_ПочтаРоссии.ЗаписатьСвойствоИЗначениеВJSON(ЗаписьJSON, "postoffice-code",	Объект.INDEXFROM);
		гф_ПочтаРоссии.ЗаписатьСвойствоИЗначениеВJSON(ЗаписьJSON, "mail-type",			"EMS_RT");
		гф_ПочтаРоссии.ЗаписатьСвойствоИЗначениеВJSON(ЗаписьJSON, "mail-category",		"WITH_DECLARED_VALUE");
		гф_ПочтаРоссии.ЗаписатьСвойствоИЗначениеВJSON(ЗаписьJSON, "mail-direct",		"643");
		гф_ПочтаРоссии.ЗаписатьСвойствоИЗначениеВJSON(ЗаписьJSON, "order-num",			СтрокаЗаказа.IDКороба);
		//гф_ПочтаРоссии.ЗаписатьСвойствоИЗначениеВJSON(ЗаписьJSON, "group-name",		"Имя группы");
		гф_ПочтаРоссии.ЗаписатьСвойствоИЗначениеВJSON(ЗаписьJSON, "comment",			Комментарий);
		гф_ПочтаРоссии.ЗаписатьСвойствоИЗначениеВJSON(ЗаписьJSON, "mass",				СтрокаЗаказа.Вес * 1000);
		гф_ПочтаРоссии.ЗаписатьСвойствоИЗначениеВJSON(ЗаписьJSON, "insr-value",			СтрокаЗаказа.Сумма); 
		гф_ПочтаРоссии.ЗаписатьСвойствоИЗначениеВJSON(ЗаписьJSON, "given-name",			Адресат);
		
		гф_ПочтаРоссии.ЗаписатьАдресПолучателя(ЗаписьJSON, НормализованныйАдрес);
		
		//гф_ПочтаРоссии.ЗаписатьФИОПолучателя(ЗаписьJSON, ТестовыйФИО());
		
		гф_ПочтаРоссии.ЗаписатьТелефонПолучателя(ЗаписьJSON, НормализованныйТелефон); 
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
		ЗаписьJSON.ЗаписатьКонецМассива();
		
		ТекстЗапроса = ЗаписьJSON.Закрыть();  
		
		ОтветОтСервера = гф_ПочтаРоссии.ОтправкаЗапросСозданиеЗаказа(УчетнаяЗапись, ТекстЗапроса, Ошибки);
		
		//Если Ошибки.Количество() Тогда
		//	
		//	Продолжить;
		//	
		//КонецЕсли;     
		
		ЧтениеJSON = Новый ЧтениеJSON; 
		
		ЧтениеJSON.УстановитьСтроку(ОтветОтСервера); 
		
		Ответ = ПрочитатьJSON(ЧтениеJSON, Истина);

		ОшибкиВЗаказе = Ответ["errors"];
		
		Если ОшибкиВЗаказе <> Неопределено Тогда
			
			Для Каждого Ошибка Из ОшибкиВЗаказе Цикл
				
				ТекстОшибки = Адресат + " Заказ " + СтрокаЗаказа.IDКороба + " " +
					Ошибка["error-codes"][0]["description"];
				
				
				Ошибки.Добавить(ТекстОшибки);
				
			КонецЦикла;	 
			
			Продолжить;
			
		КонецЕсли;
		
		СозданныеЗаказы = Ответ["orders"]; 
		
		Если СозданныеЗаказы = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;	
		
		Для Каждого НовыйЗаказ Из СозданныеЗаказы Цикл  
			
			СтруктураЗаказ = Новый Структура("Группа, НомерПартии, ТрекНомер, ИдентификаторПР, УпаковочныйЛист");
			
			СтруктураЗаказ.Группа			= НовыйЗаказ["group-name"];
			СтруктураЗаказ.ИдентификаторПР	= НовыйЗаказ["result-id"];
			СтруктураЗаказ.ТрекНомер		= НовыйЗаказ["barcode"];
			СтруктураЗаказ.УпаковочныйЛист	= СтрокаЗаказа.УпаковочныйЛист;
			
			МассивЗаказов.Добавить(СтруктураЗаказ);
			
		КонецЦикла;	
		
	КонецЦикла;	   
	
	Если МассивЗаказов.Количество() Тогда
		
		СоздатьПартиюЗаказов(МассивЗаказов, УчетнаяЗапись, Ошибки)
		
	КонецЕсли;	
	
КонецПроцедуры	    

&НаСервере 
Процедура СоздатьПартиюЗаказов(МассивЗаказов, УчетнаяЗапись, Ошибки = Неопределено)
	
	Если Ошибки = Неопределено Тогда
		
		Ошибки = Новый Массив;
		
	КонецЕсли;	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписьJSON.ЗаписатьНачалоМассива(); 
	
	Для Каждого НовыйЗаказ Из МассивЗаказов Цикл
		
		ЗаписьJSON.ЗаписатьЗначение(НовыйЗаказ.ИдентификаторПР);
		
	КонецЦикла;
	
	ЗаписьJSON.ЗаписатьКонецМассива();
	
	ТекстЗапроса = ЗаписьJSON.Закрыть();  
	
	ОтветОтСервера = гф_ПочтаРоссии.ОтправкаЗапросСозданиеПартии(УчетнаяЗапись, ТекстЗапроса, Ошибки);
	
	ЧтениеJSON = Новый ЧтениеJSON; 
	
	ЧтениеJSON.УстановитьСтроку(ОтветОтСервера); 
	
	Ответ = ПрочитатьJSON(ЧтениеJSON, Истина);    
	
	ОшибкиВПартии = Ответ["errors"];
	
	Если ОшибкиВПартии <> Неопределено Тогда
		
		Для Каждого Ошибка Из ОшибкиВПартии Цикл
			
			ТекстОшибки = "Ошибка при создании партии заказов.";
			
			Если Ошибка["error-codes"] <> Неопределено  Тогда
				
				ТекстОшибки = ТекстОшибки + Ошибка["error-codes"][0]["description"];
				
			Иначе
				
				ТекстОшибки = ТекстОшибки + Ошибка["error-description"];
				
			КонецЕсли;	
			
			Ошибки.Добавить(ТекстОшибки);
			
		КонецЦикла;	 
		
		Возврат;
		
	КонецЕсли;
	
	РезультатСозданияПартии = Ответ["batches"];  
	
	ТекстСообщенияОСозданииПартии = "";
	
	Если РезультатСозданияПартии <> Неопределено Тогда
		
		НомерПартии = РезультатСозданияПартии[0]["batch-name"];  
		
		ТекстСообщенияОСозданииПартии = "Создана партия заказов № " + НомерПартии;
		
		ТекстЗаказов = "";
		
		Для Каждого НовыйЗаказ Из МассивЗаказов Цикл
		
			НовыйЗаказ.НомерПартии = НомерПартии;
			
			ТекстЗаказов = ?(ТекстЗаказов = "", "", ТекстЗаказов + ", ") + НовыйЗаказ.УпаковочныйЛист; 
			
		КонецЦикла;  
		
	КонецЕсли;
	
	Если ТекстСообщенияОСозданииПартии <> "" Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОСозданииПартии);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстЗаказов);
		
	КонецЕсли;	

	ЗаписатьПочтовыеОтправления(МассивЗаказов);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПочтовыеОтправления(МассивЗаказов)
	
	Для Каждого Заказ Из МассивЗаказов Цикл
		
		Посылка = Справочники.гф_ПочтаРоссииПочтовыеОтправления.НайтиПоРеквизиту("УпаковочныйЛист", Заказ.УпаковочныйЛист);
		
		Если Посылка.Пустая() Тогда
			
			ПосылкаОбъект = Справочники.гф_ПочтаРоссииПочтовыеОтправления.СоздатьЭлемент();
			
		Иначе	         
			
			ПосылкаОбъект = Посылка.ПолучитьОбъект();
			
		КонецЕсли;	
		
		ПосылкаОбъект.ОбменДанными.Загрузка = Истина;
		
		ЗаполнитьЗначенияСвойств(ПосылкаОбъект, Заказ);
		
		ПосылкаОбъект.Отслеживать = Истина;
		
		ПосылкаОбъект.ДатаСоздания = ТекущаяДатаСеанса();
		
		ПосылкаОбъект.Записать();
		
	КонецЦикла;
	
	Элементы.ПочтовыеОтправления.Обновить();    
	
	ЗаписатьПочтовыеОтправленияВРеализации();
	
КонецПроцедуры   

&НаСервере
Процедура ЗаписатьПочтовыеОтправленияВРеализации()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	гф_ПочтаРоссииПочтовыеОтправления.Ссылка КАК ПочтовоеОтправление,
	|	РеализацияТоваровУслугДокумент.Ссылка КАК РТУ
	|ИЗ
	|	Справочник.гф_ПочтаРоссииПочтовыеОтправления КАК гф_ПочтаРоссииПочтовыеОтправления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист КАК УпаковочныйЛистДокумент
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиентаДокумент
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслугДокумент
	|				ПО ЗаказКлиентаДокумент.Ссылка = РеализацияТоваровУслугДокумент.ЗаказКлиента
	|			ПО УпаковочныйЛистДокумент.гф_Заказ = ЗаказКлиентаДокумент.Ссылка
	|		ПО гф_ПочтаРоссииПочтовыеОтправления.УпаковочныйЛист = УпаковочныйЛистДокумент.Ссылка
	|ГДЕ
	|	гф_ПочтаРоссииПочтовыеОтправления.Отслеживать
	|	И гф_ПочтаРоссииПочтовыеОтправления.УпаковочныйЛист <> ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
	|	И РеализацияТоваровУслугДокумент.Ссылка <> ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)
	|	И гф_ПочтаРоссииПочтовыеОтправления.Ссылка<> РеализацияТоваровУслугДокумент.гф_ПочтовоеОтправление
	|	И Не РеализацияТоваровУслугДокумент.ПометкаУдаления";      
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		РТУ = Выборка.РТУ.ПолучитьОбъект();
		
		РТУ["гф_ПочтовоеОтправление"] = Выборка.ПочтовоеОтправление;
		
		РТУ.ОбменДанными.Загрузка = Истина;
		
		РТУ.Записать();
		
	КонецЦикла;	
	
КонецПроцедуры   

&НаКлиенте
Процедура КомандаПередатьЧерезAPI(Команда, Ошибки)  
	
	Ошибки = Новый Массив;	
	
	КомандаПередатьЧерезAPIНаСервере(Ошибки);
	
	Если Ошибки.Количество() Тогда   
		
		Для Каждого Ошибка Из Ошибки Цикл
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ошибка);
			
		КонецЦикла;	
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Отправка по API не выполнена");
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ТестНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура Тест(Команда)
	ТестНаСервере();
КонецПроцедуры

#КонецОбласти
