#Область ОписаниеПеременных
Перем ЭтоРегламентныйЗапуск Экспорт; 
Перем МассивНепроведенныхДокументов Экспорт;
#КонецОбласти

#Область СведенияОВнешнейОбработке
Функция СведенияОВнешнейОбработке() Экспорт
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	
	ДобавитьКоманду(ТаблицаКоманд, 
					"Загрузка продаж Wildberries по API",
					"ЗагрузкаПродажWildberriesAPI", 
					ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода());
					
	ДобавитьКоманду(ТаблицаКоманд, 
					"Загрузка движений КМ Wildberries по API",
					"ЗагрузкаДвиженийКМWildberriesAPI", 
					ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода());
					
	ДобавитьКоманду(ТаблицаКоманд,
					"Выполнить в интерактивном режиме",
					"ВыполнитьИнтерактивныйРежим",
					"ОткрытиеФормы");
					
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Наименование", "Загрузка продаж и движений КМ по API Wildberries");
	ПараметрыРегистрации.Вставить("Информация", "Загрузка продаж и движений КМ по API Wildberries");
	ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	ПараметрыРегистрации.Вставить("Версия", "1.0.0");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	
	Возврат ПараметрыРегистрации;
	
 КонецФункции
 
 // Формирует таблицу значений с командами печати
//	
// Возвращаемое значение:
//		ТаблицаЗначений
//
Функция ПолучитьТаблицуКоманд()

	Команды = Новый ТаблицаЗначений;
	
	//Представление команды в пользовательском интерфейсе
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	//Уникальный идентификатор команды или имя макета печати
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	
	//Способ вызова команды: "ОткрытиеФормы", "ВызовКлиентскогоМетода", "ВызовСерверногоМетода"
	// "ОткрытиеФормы" - применяется только для отчетов и дополнительных отчетов
	// "ВызовКлиентскогоМетода" - вызов процедуры Печать(), определённой в модуле формы обработки
	// "ВызовСерверногоМетода" - вызов процедуры Печать(), определённой в модуле объекта обработки
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	
	//Показывать оповещение.
	//Если Истина, требуется показать оповещение при начале и при завершении работы обработки. 
	//Имеет смысл только при запуске обработки без открытия формы
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	
	//Дополнительный модификатор команды. 
	//Используется для дополнительных обработок печатных форм на основе табличных макетов.
	//Для таких команд должен содержать строку ПечатьMXL
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));

	Возврат Команды;

КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
    НоваяКоманда = ТаблицаКоманд.Добавить();
    НоваяКоманда.Представление = Представление;
    НоваяКоманда.Идентификатор = Идентификатор;
    НоваяКоманда.Использование = Использование;
    НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
    НоваяКоманда.Модификатор = Модификатор;
КонецПроцедуры

Процедура ВыполнитьКоманду(ИдентификаторКоманды) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ЭтоКопияИБ = ПараметрыСеанса.РаботаСВнешнимиРесурсамиЗаблокирована;
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЭтоКопияИБ Тогда
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон("Запуск команды '%1' в копии ИБ запрещена.", ИдентификаторКоманды));
		Возврат;
	КонецЕсли;
	
	мЭтоРегламентныйЗапуск = Истина;
	
	Если ИдентификаторКоманды = "ЗагрузкаПродажWildberriesAPI" Тогда
		ВыполнитьЗагрузкуДанныхПродажВБНаСервере(); 
	КонецЕсли;
	
	Если ИдентификаторКоманды = "ЗагрузкаДвиженийКМWildberriesAPI" Тогда
		//ВыполнитьЗагрузкуДвиженийКМВБНаСервере();
	КонецЕсли;

КонецПроцедуры
#КонецОбласти

#Область API
Процедура ВыполнитьЗагрузкуДанныхПродажВБНаСервере() Экспорт
	
	Если ЭтоРегламентныйЗапуск Тогда
		тзНастройкиОбработки = ЗаполнитьНастройкиОбработки();
	Иначе
		тзНастройкиОбработки = ЗаполнитьНастройкиОбработки(Организация);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Период.ДатаНачала) ИЛИ Не ЗначениеЗаполнено(Период.ДатаОкончания) Тогда
		//Период = предыдущая неделя
		Период.ДатаНачала = НачалоНедели(НачалоНедели(ТекущаяДатаСеанса())-1);
		Период.ДатаОкончания = НачалоНедели(ТекущаяДатаСеанса())-1;
	КонецЕсли;

	
	МассивПериодов = Новый Массив;
	//Разбиваем период на недели
	НомерНеделиНачалаПериода = НеделяГода(Период.ДатаНачала);
	НомерНеделиКонцаПериода  = НеделяГода(Период.ДатаОкончания);
	Если НомерНеделиНачалаПериода <> НомерНеделиКонцаПериода Тогда
		//Введенный период делится на недели
		ПериодНеРазделен = Истина;
		ДатаНачалаНедели = Период.ДатаНачала; //Задаем дату отсчета;
		Пока ПериодНеРазделен Цикл
			ПериодНеделя = Новый СтандартныйПериод;
			ПериодНеделя.ДатаНачала = ДатаНачалаНедели;
			ПериодНеделя.ДатаОкончания = КонецНедели(ДатаНачалаНедели);
			МассивПериодов.Добавить(ПериодНеделя);
			Если ПериодНеделя.ДатаОкончания = Период.ДатаОкончания Тогда
				ПериодНеРазделен = Ложь
			Иначе
				ДатаНачалаНедели = КонецНедели(ДатаНачалаНедели)+1;
			КонецЕсли;
		КонецЦикла
	Иначе
		ПериодНеделя = Новый СтандартныйПериод;
		ПериодНеделя.ДатаНачала = Период.ДатаНачала;
		ПериодНеделя.ДатаОкончания = Период.ДатаОкончания;
		МассивПериодов.Добавить(ПериодНеделя);
	КонецЕсли;
	
	Для Каждого Настройки из тзНастройкиОбработки Цикл
		
		МассивНепроведенныхДокументов = Новый Массив;
		
		Для каждого ЭлементМассива из МассивПериодов Цикл
			ВыполнитьЗапросВБСоздатьДокументы(Настройки, ЭлементМассива)
		КонецЦикла;
		
		//Отправка сообщений на почту
		Если МассивНепроведенныхДокументов.Количество() > 0 И Настройки.ОтправлятьСведенияОбОшибкахНаПочту И ЗначениеЗаполнено(Настройки.Получатели) Тогда
			ОтправитьСообщениеНаПочту(Настройки);		
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Функция ЗаполнитьНастройкиОбработки(Орг = Неопределено)
	
	мТиповПолучатели = Новый Массив;
	мТиповПолучатели.Добавить(Тип("Строка"));
	мТиповПолучатели.Добавить(Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты"));
	
	ТЗ = Новый ТаблицаЗначений;
	КолонкиТЗ = ТЗ.Колонки;
	КолонкиТЗ.Добавить("Организация", Новый ОписаниеТипов("СправочникССылка.Организации"));
	КолонкиТЗ.Добавить("ВнешняяСистема", Новый ОписаниеТипов("ПеречислениеСсылка.гф_ВнешниеСистемы"));
	КолонкиТЗ.Добавить("key", ОбщегоНазначения.ОписаниеТипаСтрока(300));
	//КолонкиТЗ.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	//КолонкиТЗ.Добавить("Договор", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	//КолонкиТЗ.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	КолонкиТЗ.Добавить("ВремяОжиданияМеждуПакетами", ОбщегоНазначения.ОписаниеТипаЧисло(4));
	КолонкиТЗ.Добавить("СтрокВПакете", ОбщегоНазначения.ОписаниеТипаЧисло(15));
	КолонкиТЗ.Добавить("ДатаЗапретаРедактирования", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	КолонкиТЗ.Добавить("ПредопределенныеЗначения", Новый ОписаниеТипов("Структура"));
	КолонкиТЗ.Добавить("ОтправлятьСведенияОбОшибкахНаПочту", Новый ОписаниеТипов("Булево"));
	КолонкиТЗ.Добавить("Получатели", Новый ОписаниеТипов(мТиповПолучатели));

	                                                                                              	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВнешняяСистема", Перечисления.гф_ВнешниеСистемы.Wildberries);
	Запрос.УстановитьПараметр("ОтборПоОрганизации", ЗначениеЗаполнено(Орг));
	Запрос.УстановитьПараметр("Организация", Орг);
	Запрос.Текст = "ВЫБРАТЬ
	               |	гф_НастройкиИнтеграцииСВнешнимиСистемами.Организация КАК Организация,
	               |	гф_НастройкиИнтеграцииСВнешнимиСистемами.ВнешняяСистема КАК ВнешняяСистема,
	               |	гф_НастройкиИнтеграцииСВнешнимиСистемами.НастройкиДоступа.(
	               |		Параметр КАК Параметр,
	               |		Значение КАК Значение
	               |	) КАК НастройкиДоступа,
	               |	гф_НастройкиИнтеграцииСВнешнимиСистемами.ПредопределенныеЗначения.(
	               |		Наименование КАК Наименование,
	               |		Значение КАК Значение
	               |	) КАК ПредопределенныеЗначения
	               |ИЗ
	               |	Справочник.гф_НастройкиИнтеграцииСВнешнимиСистемами КАК гф_НастройкиИнтеграцииСВнешнимиСистемами
	               |ГДЕ
	               |	НЕ гф_НастройкиИнтеграцииСВнешнимиСистемами.ПометкаУдаления
	               |	И гф_НастройкиИнтеграцииСВнешнимиСистемами.Использовать
	               |	И ВЫБОР
	               |			КОГДА &ОтборПоОрганизации
	               |				ТОГДА гф_НастройкиИнтеграцииСВнешнимиСистемами.Организация = &Организация
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |	И гф_НастройкиИнтеграцииСВнешнимиСистемами.ВнешняяСистема = &ВнешняяСистема";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		нСтрока = ТЗ.Добавить();
		нСтрока.Организация = Выборка.Организация;
		нСтрока.ВнешняяСистема = Выборка.ВнешняяСистема;
		//Заполняем ключ доступа
		тзНастройкиДоступа = Выборка.НастройкиДоступа.Выгрузить();
		тзЗначенияДляЗаполнения = Выборка.ПредопределенныеЗначения.Выгрузить();
		Для каждого стрНастройка из тзНастройкиДоступа Цикл
			ИмяНастройки = стрНастройка.Параметр;
			Если КолонкиТЗ.Найти(ИмяНастройки) <> Неопределено Тогда
				нСтрока[ИмяНастройки] = стрНастройка.Значение;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		СтруктураПредопределенные = Новый Структура;
		Для каждого стрЗначение из тзЗначенияДляЗаполнения Цикл
			ИмяЗначения = стрЗначение.Наименование;
			КлючСтруктуры = СокрЛП(СтрЗаменить(ИмяЗначения, " ",""));
			Если КолонкиТз.Найти(КлючСтруктуры) <> Неопределено Тогда
				Попытка
					нСтрока[КлючСтруктуры] = стрЗначение.Значение;
					Продолжить;
				Исключение
					ТекстОшибки = "Ошибка установки параметра """+ИмяЗначения+""" " + ОписаниеОшибки();
				КонецПопытки;
			КонецЕсли;
			СтруктураПредопределенные.Вставить(КлючСтруктуры, стрЗначение.Значение);
		КонецЦикла;
		//Получение границы запрета редактирования данных
		ДатаГраницыЗапрета = ПолучитьДатуЗапрета(Выборка.Организация, ПараметрыСеанса.ТекущийПользователь);
		нСтрока.ДатаЗапретаРедактирования = ДатаГраницыЗапрета;
		нСтрока.ПредопределенныеЗначения = СтруктураПредопределенные;
	КонецЦикла;
	
	Возврат ТЗ;
	
КонецФункции     

Процедура ВыполнитьЗапросВБСоздатьДокументы(Настройки, Интервал) Экспорт
	
	//Удаление данных в РС ОшибкиОбменаДаннымиСВнешнимиСистемами старше 90 дней
	ОчиститьДанныеОшибкиОбменаДаннымиСВнешнимиСистемами();
	
	ВремяОжиданияМеждуПакетами = Настройки.ВремяОжиданияМеждуПакетами;
	Если Не ЗначениеЗаполнено(ВремяОжиданияМеждуПакетами) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не установлен параметр ""ВремяОжиданияМеждуПакетами""");
	КонецЕсли;
	
	СтрокВпакете = Настройки.СтрокВПакете;
	Если НЕ ЗначениеЗаполнено(СтрокВПакете) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не установлен параметр ""СтрокВПакете"". Установлено значение 10000");
		СтрокВпакете = 10000;
	КонецЕсли;
	
	
	структураПараметрыЗапроса = Новый Структура;
	структураПараметрыЗапроса.Вставить("dateFrom", XMLСтрока(Интервал.ДатаНачала));
	структураПараметрыЗапроса.Вставить("dateTo", XMLСтрока(Интервал.ДатаОкончания));
	структураПараметрыЗапроса.Вставить("key", Настройки.key);
	структураПараметрыЗапроса.Вставить("limit", Формат(СтрокВпакете, "ЧГ=0"));
	
	Сервер = "suppliers-stats.wildberries.ru"; 
	
	Запрос = "api/v1/supplier/reportDetailByPeriod";
	
	Параметры = "?";
	
	Для Каждого Пар из структураПараметрыЗапроса Цикл
		
		Параметры = Параметры + Пар.Ключ + "=" + Пар.Значение + "&";
		
	КонецЦикла; 
	
	Параметры = Лев(Параметры, СтрДлина(Параметры)-1);
	
	МассивВходящихДанных = Новый Массив;
	ПродолжитьВыполнениеЗапроса = Истина;
	rrdid = 0;
	
	Пока ПродолжитьВыполнениеЗапроса Цикл
		
		ЕстьОшибка = Ложь;
		ТекстОшибки = "";
		Ожидать(ВремяОжиданияМеждуПакетами);  //Перед запросом таймаут
		
		СтрокаЗапроса = Запрос+Параметры+"&rrdid="+Формат(rrdid, "ЧГ=0");	
		РезультатЗапроса = ВыполнитьHTTPЗапросВБ(Сервер, СтрокаЗапроса, ЕстьОшибка, ТекстОшибки);
		
		Если ЕстьОшибка и ЗначениеЗаполнено(ТекстОшибки) Тогда
			ЗаписатьОшибкуВЛогОшибокОбменаСВнешнимиСистемами(Настройки.ВнешняяСистема, Настройки.Организация, "Запрос данных продаж WB",,ТекстОшибки, СтрокаЗапроса);	
		КонецЕсли;
		
		Если РезультатЗапроса = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		РезультатЧтения = ВыполнитьЧтениеJSON(РезультатЗапроса, ЕстьОшибка, ТекстОшибки);
		
		Если ЕстьОшибка и ЗначениеЗаполнено(ТекстОшибки) Тогда
			ЗаписатьОшибкуВЛогОшибокОбменаСВнешнимиСистемами(Настройки.ВнешняяСистема, Настройки.Организация, "Запрос данных продаж WB",,ТекстОшибки, СтрокаЗапроса);	
			Возврат;	
		КонецЕсли;	
		
		Если ТипЗнч(РезультатЧтения) = Тип("Массив") Тогда
			Если РезультатЧтения.Количество() = СтрокВпакете Тогда
				ПоследняяСтрокаМассива = РезультатЧтения.Получить(РезультатЧтения.Количество()-1);
				rrdid = ПоследняяСтрокаМассива.rrd_id;
			Иначе
				ПродолжитьВыполнениеЗапроса = Ложь;
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВходящихДанных, РезультатЧтения);
		Иначе
			ПродолжитьВыполнениеЗапроса = Ложь;
		КонецЕсли;

	КонецЦикла;
	
	Если МассивВходящихДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	тзВхДанные = ОбработатьВходящиеДанные(МассивВходящихДанных);
	
	СоздатьДокументы(тзВхДанные, Настройки, Интервал);
	
КонецПроцедуры     

Функция ВыполнитьHTTPЗапросВБ(Сервер, Запрос, ЕстьОшибка, ТекстОшибки)

	Попытка
		SSL = Новый ЗащищенноеСоединениеOpenSSL();
		HTTPConnect = Новый HTTPСоединение(Сервер,,,,,120,SSL);
		HTTPЗапрос  = Новый HTTPЗапрос(Запрос);
		ОтветСервера = HTTPConnect.Получить(HTTPЗапрос);
	Исключение
		ТекстОшибки = "Не удалось получить данные " + ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка соединения с wildberries " + ТекстОшибки);
		ЕстьОшибка = Истина;
		Возврат Неопределено;
	КонецПопытки;
	
	Если ОтветСервера.КодСостояния = 200 Тогда
		ОтветСтрока = ОтветСервера.ПолучитьТелоКакСтроку();
		Возврат ОтветСтрока;
	Иначе
		ТекстОшибки = "Код ответа " + ОтветСервера.КодСостояния + " " + ОтветСервера.ПолучитьТелоКакСтроку();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка соединения с wildberries " + ТекстОшибки);
		ЕстьОшибка = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции  

Функция ОбработатьВходящиеДанные(Массив)

	ТзВхДанные = СоздатьТзДляВходящихДанных();
	
	Для каждого элементМассива из Массив Цикл
		
		Основание = "";
		Если элементМассива.Свойство("supplier_oper_name") Тогда
			Основание = элементМассива.supplier_oper_name;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Основание) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ НеобходимоДобавлениеСтроки(Основание) Тогда
			Продолжить;
		КонецЕсли;
		
		нСтрока = ТзВхДанные.Добавить();
		Если элементМассива.Свойство("date_from") Тогда
			НачалоПериода = XMLЗначение(Тип("Дата"), элементМассива.date_from);
			нСтрока.НачалоПериода = НачалоПериода;
		КонецЕсли;
		Если элементМассива.Свойство("date_to") Тогда
			КонецПериода = XMLЗначение(Тип("Дата"), элементМассива.date_to);
			нСтрока.КонецПериода = КонецПериода;
		КонецЕсли;
		Если элементМассива.Свойство("order_dt") Тогда
			ДатаЗаказа = XMLЗначение(Тип("Дата"), элементМассива.order_dt);
			нСтрока.ДатаЗаказа = ДатаЗаказа;
		КонецЕсли;
		Если элементМассива.Свойство("sale_dt") Тогда
			ДатаПродажи = XMLЗначение(Тип("Дата"), элементМассива.sale_dt);
			нСтрока.ДатаПродажи = ДатаПродажи;
		КонецЕсли;
		Если элементМассива.Свойство("sa_name") Тогда
			Артикул =элементМассива.sa_name;
			нСтрока.Артикул = Артикул;
		КонецЕсли;
		Если элементМассива.Свойство("ts_name") Тогда
			ХарактеристикаСтрока = элементМассива.ts_name;
			нСтрока.ХарактеристикаСтрока = ХарактеристикаСтрока;
		КонецЕсли;
		Если элементМассива.Свойство("barcode") Тогда
			Штрихкод = элементМассива.barcode;
			нСтрока.Штрихкод = Штрихкод;
		КонецЕсли;
		Если элементМассива.Свойство("doc_type_name") Тогда
			ТипДокумента = элементМассива.doc_type_name;
			нСтрока.ТипДокумента = ТипДокумента;
		КонецЕсли;
		
		//Основание определено выше
		нСтрока.Основание = Основание;
		
		Если элементМассива.Свойство("quantity") Тогда
			Количество = элементМассива.quantity;
			нСтрока.Количество = Количество;
		КонецЕсли;
		Если элементМассива.Свойство("retail_price_withdisc_rub") Тогда
			ЦенаПродажи = элементМассива.retail_price_withdisc_rub;
			нСтрока.ЦенаПродажи = ЦенаПродажи;
		КонецЕсли;
		Если элементМассива.Свойство("srid") Тогда
			ИдентификаторСтроки = элементМассива.srid;
			нСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТзВхДанные;
	
КонецФункции
#КонецОбласти

#Область СозданиеДокументов 
Процедура СоздатьДокументы(ТЗ, Настройки, Интервал) 	
	
	//Осуществляем поиск номенклатуры
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТЗ", ТЗ);
	Запрос.Текст = ПолучитьЗапросПоискНоменклатуры();
	РезультатПакет = Запрос.ВыполнитьПакет();
	
	НенайденнаяНоменклатура = РезультатПакет.Получить(РезультатПакет.Количество()-3);
	//Вставить сообщение и запись в РС о ненайденной номенлкатуре 
	ОбработатьДанныеНенайденнаяНоменклатура(НенайденнаяНоменклатура, Настройки);
	
	//Выборка из запроса данных о реализациях и возвратах
	тзНоменклатураПродажи = РезультатПакет.Получить(РезультатПакет.Количество()-2);
	тзНоменклатураВозвраты = РезультатПакет.Получить(РезультатПакет.Количество()-1);

	//Создание документов Реализация товаров услуг
	СоздатьДокументыРеализации(тзНоменклатураПродажи, Настройки, Интервал);
	
	//Создание документов Возврат товара от клиента
	СоздатьДокументыВозврата(тзНоменклатураВозвраты, Настройки, Интервал);
	
КонецПроцедуры 

Процедура СоздатьДокументыРеализации(Данные, Настройки, Интервал)
	
	СтруктураШапкиДокумента = Новый Структура;
	СтруктураШапкиДокумента.Вставить("Организация", Настройки.Организация);
	СтруктураШапкиДокумента.Вставить("Автор", ПараметрыСеанса.ТекущийПользователь);
	СтруктураШапкиДокумента.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
	
	Предопределенные = Настройки.ПредопределенныеЗначения;
	Для Каждого ПредопрЗнач из Предопределенные Цикл
		СтруктураШапкиДокумента.Вставить(ПредопрЗнач.Ключ, ПредопрЗнач.Значение);
	КонецЦикла;
	
	Комментарий = "Отражение продаж Wildberries за ";
	ГраницаЗапрета = Настройки.ДатаЗапретаРедактирования;
	
	ВыборкаДата = Данные.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДата.Следующий() Цикл
		ДатаПродажи = ВыборкаДата.ДатаПродажи;
		ВыборкаДокумент = ВыборкаДата.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДокумент.Следующий() Цикл
			ДокументРеализации = ВыборкаДокумент.ДокументРеализации;
			//Проверка на ранее созданный документ
			Если ЗначениеЗаполнено(ДокументРеализации) Тогда
				ДатаРеализации = ДокументРеализации.Дата;
				//Если ранее созданный документ находится в закрытом периоде, то создаем новый на ближайшую открытую дату
				Если НачалоДня(ДатаРеализации) <= ГраницаЗапрета Тогда
					//Создаем документ РТиУ
					ДатаРеализации = КонецДня(ГраницаЗапрета+86400);
					тзДанныеДляРС = ПолучитьПустуюТзДляДобавленияВРС();
					ДокументОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
					ЗаполнитьЗначенияСвойств(ДокументОбъект, СтруктураШапкиДокумента);
					ДокументОбъект.Комментарий = Комментарий + Формат(ДатаПродажи,"ДЛФ=Д");
					ДокументОбъект.Дата = ДатаРеализации;
					тчТовары = ДокументОбъект.Товары;
					ВыборкаТовары = ВыборкаДокумент.Выбрать();
					Пока ВыборкаТовары.Следующий() Цикл
						СтрокаТчТовары = тчТовары.Добавить();
						нСтрокаДанныхРС = тзДанныеДляРС.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТчТовары, ВыборкаТовары);
						СтрокаТчТовары.КоличествоУпаковок = ВыборкаТовары.НеобходимоРеализовать;
						ЗаполнитьСтрокуДанныеРС(нСтрокаДанныхРС, ВыборкаТовары, СтрокаТчТовары, Настройки.ВнешняяСистема); 
					КонецЦикла;
					ПересчитатьТабличнуюЧасть(ДокументОбъект);
					
					ЗаписатьДокумент(ДокументОбъект);
					тзДанныеДляРС.ЗаполнитьЗначения(ДокументОбъект.Ссылка, "Документ");
					//Пишем в РС гф_ДокументыНаОснованииВнешнихЗаказов
					ЗаписатьДанныеРсДокументыНаОснованииВнешнихЗаказов(тзДанныеДляРС);
	
				//Дополняем ТЧ Товары	
				Иначе
					ДокументОбъект = ДокументРеализации.ПолучитьОбъект();
					тзДанныеДляРС = ПолучитьПустуюТзДляДобавленияВРС();
					тчТовары = ДокументОбъект.Товары;
					ВыборкаТовары = ВыборкаДокумент.Выбрать();
					Пока ВыборкаТовары.Следующий() Цикл 
						нСтрокаДанныхРС = тзДанныеДляРС.Добавить();
						Отбор = Новый Структура("Номенклатура, Характеристика, НомерСтроки", ВыборкаТовары.Номенклатура, ВыборкаТовары.Характеристика, ВыборкаТовары.НомерСтрокиДокумента);
						мСтрокТовары = тчТовары.НайтиСтроки(Отбор);
						Если мСтрокТовары.Количество() > 0 Тогда
							СтрокаТчТовары = мСтрокТовары[0];
							СтрокаТчТовары.КоличествоУпаковок = СтрокаТчТовары.КоличествоУпаковок + ВыборкаТовары.НеобходимоРеализовать;
							СтрокаТчТовары.Количество = СтрокаТчТовары.КоличествоУпаковок + ВыборкаТовары.НеобходимоРеализовать;
							ЗаполнитьСтрокуДанныеРС(нСтрокаДанныхРС, ВыборкаТовары, СтрокаТчТовары, Настройки.ВнешняяСистема); 
						Иначе
							СтрокаТчТовары = тчТовары.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаТчТовары, ВыборкаТовары,,"ИдентификаторСтроки");
							СтрокаТчТовары.КоличествоУпаковок = ВЫборкаТовары.НеобходимоРеализовать;
							СтрокаТчТовары.Количество = ВЫборкаТовары.НеобходимоРеализовать;
							СтрокаТчТовары.Склад = ДокументОбъект.Склад;
							ЗаполнитьСтрокуДанныеРС(нСтрокаДанныхРС, ВыборкаТовары, СтрокаТчТовары, Настройки.ВнешняяСистема); 
						КонецЕсли;	
					КонецЦикла;
					ПересчитатьТабличнуюЧасть(ДокументОбъект);
					
					ЗаписатьДокумент(ДокументОбъект);
					тзДанныеДляРС.ЗаполнитьЗначения(ДокументОбъект.Ссылка, "Документ");
					//Пишем в РС гф_ДокументыНаОснованииВнешнихЗаказов
					ЗаписатьДанныеРсДокументыНаОснованииВнешнихЗаказов(тзДанныеДляРС);
					
				КонецЕсли;
			//Если документ не найден, создаем новый документ	
			Иначе
				//Проверка на границу периода
				Если ДатаПродажи <= ГраницаЗапрета Тогда
					ДатаРеализации = КонецДня(ГраницаЗапрета+86400);
				Иначе
					ДатаРеализации = КонецДня(ДатаПродажи);
				КонецЕсли;
				ДокументОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
				ЗаполнитьЗначенияСвойств(ДокументОбъект, СтруктураШапкиДокумента);
				ДокументОбъект.Дата = ДатаРеализации;
				ДокументОбъект.Комментарий = Комментарий+Формат(ДатаПродажи,"ДЛФ=Д");
				тзДанныеДляРС = ПолучитьПустуюТзДляДобавленияВРС();
				тчТовары = ДокументОбъект.Товары;
				ВыборкаТовары = ВыборкаДокумент.Выбрать();
				Пока ВыборкаТовары.Следующий() Цикл
					СтрокаТчТовары = тчТовары.Добавить();
					нСтрокаДанныхРС = тзДанныеДляРС.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТчТовары, ВыборкаТовары,,"ИдентификаторСтроки");
					СтрокаТчТовары.КоличествоУпаковок = ВыборкаТовары.НеобходимоРеализовать;
					СтрокаТчТовары.Количество = ВыборкаТовары.НеобходимоРеализовать;
					СтрокаТчТовары.Склад = ДокументОбъект.Склад;
					ЗаполнитьСтрокуДанныеРС(нСтрокаДанныхРС, ВыборкаТовары, СтрокаТчТовары, Настройки.ВнешняяСистема);
				КонецЦикла;
				ПересчитатьТабличнуюЧасть(ДокументОбъект);
				
				ЗаписатьДокумент(ДокументОбъект);
				тзДанныеДляРС.ЗаполнитьЗначения(ДокументОбъект.Ссылка, "Документ");
				//Пишем в РС гф_ДокументыНаОснованииВнешнихЗаказов
				ЗаписатьДанныеРсДокументыНаОснованииВнешнихЗаказов(тзДанныеДляРС);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьДокументыВозврата(Данные, Настройки, Интервал)
	//Так как на текущий момент WB не передает дату возврата товара, все возвраты оформляются конечной датой периода
	СтруктураШапкиДокумента = Новый Структура;
	СтруктураШапкиДокумента.Вставить("Организация", Настройки.Организация);
	СтруктураШапкиДокумента.Вставить("Автор", ПараметрыСеанса.ТекущийПользователь);
	СтруктураШапкиДокумента.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента);
	
	Предопределенные = Настройки.ПредопределенныеЗначения;
	
	Для Каждого ПредопрЗнач из Предопределенные Цикл
		СтруктураШапкиДокумента.Вставить(ПредопрЗнач.Ключ, ПредопрЗнач.Значение);
	КонецЦикла;
	
	Комментарий = "Отражение возвратов Wildberries за период с "+Формат(Интервал.ДатаНачала, "ДЛФ=Д")+" по "+ Формат(Интервал.ДатаОкончания, "ДЛФ=Д");
	ГраницаЗапрета = Настройки.ДатаЗапретаРедактирования;
	
	ВыборкаДата = Данные.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДата.Следующий() Цикл
		ДатаВозврата = ВыборкаДата.КонецПериода;
		ВыборкаДокумент = ВыборкаДата.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДокумент.Следующий() Цикл
			ТекстСообщенияДопСвойства = "";
			ДокументВозврата = ВыборкаДокумент.ДокументВозврата;
			Если ЗначениеЗаполнено(ДокументВозврата) Тогда
				ДатаДокВозврата = ДокументВозврата.Дата;
				//Если ранее созданный документ находится в закрытом периоде, то создаем новый на ближайшую открытую дату
				Если НачалоДня(ДатаДокВозврата) <= ГраницаЗапрета Тогда
					//Создаем документ Возвтра товара от клиета
					ДатаДокВозврата = КонецДня(ГраницаЗапрета+86400);
					тзДанныеДляРС = ПолучитьПустуюТзДляДобавленияВРС();
					ДокументОбъект = Документы.ВозвратТоваровОтКлиента.СоздатьДокумент();
					ЗаполнитьЗначенияСвойств(ДокументОбъект, СтруктураШапкиДокумента);
					ДокументОбъект.Комментарий = Комментарий;
					ДокументОбъект.Дата = ДатаДокВозврата;
					тчТовары = ДокументОбъект.Товары;
					ВыборкаТовары = ВыборкаДокумент.Выбрать();
					Пока ВыборкаТовары.Следующий() Цикл
						СтрокаТчТовары = тчТовары.Добавить();
						нСтрокаДанныхРС = тзДанныеДляРС.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТчТовары, ВыборкаТовары,,"ИдентификаторСтроки");
						//СтрокаТчТовары.АналитикаУчетаНоменклатуры
						СтрокаТчТовары.СпособОпределенияСебестоимости = Перечисления.СпособыОпределенияСебестоимости.ИзДокументаПродажи;
						СтрокаТчТовары.КоличествоУпаковок = ВыборкаТовары.НеобходимоВернуть;
						СтрокаТчТовары.Количество = ВыборкаТовары.НеобходимоВернуть;
						ДокРеализацииНайден = Ложь;
						НайтиРеализациюТоваровУслугСкорректироватьСтрокуВозврата(СтрокаТчТовары, ВыборкаТовары, Настройки, ДокРеализацииНайден, ТекстСообщенияДопСвойства);
						Если Не ДокРеализацииНайден Тогда
							ДокументОбъект.ДополнительныеСвойства.Вставить("Проводить", Ложь);
						КонецЕсли;
						ЗаполнитьСтрокуДанныеРС(нСтрокаДанныхРС, ВыборкаТовары, СтрокаТчТовары, Настройки.ВнешняяСистема);
					КонецЦикла;
					ПересчитатьТабличнуюЧасть(ДокументОбъект);
					
					ДокументОбъект.ДополнительныеСвойства.Вставить("ТекстСообщения", ТекстСообщенияДопСвойства);
					
					ЗаписатьДокумент(ДокументОбъект);
					тзДанныеДляРС.ЗаполнитьЗначения(ДокументОбъект.Ссылка, "Документ");
					//Пишем в РС гф_ДокументыНаОснованииВнешнихЗаказов
					ЗаписатьДанныеРсДокументыНаОснованииВнешнихЗаказов(тзДанныеДляРС);
					
				Иначе
					ДокументОбъект = ДокументВозврата.ПолучитьОбъект();
					тзДанныеДляРС = ПолучитьПустуюТзДляДобавленияВРС();
					тчТовары = ДокументОбъект.Товары;
					ВыборкаТовары = ВыборкаДокумент.Выбрать();
					Пока ВыборкаТовары.Следующий() Цикл 
						нСтрокаДанныхРС = тзДанныеДляРС.Добавить();
						Отбор = Новый Структура("Номенклатура, Характеристика, НомерСтроки", ВыборкаТовары.Номенклатура, ВыборкаТовары.Характеристика, ВыборкаТовары.НомерСтрокиДокумента);
						мСтрокТовары = тчТовары.НайтиСтроки(Отбор);
						Если мСтрокТовары.Количество() > 0 Тогда
							СтрокаТчТовары = мСтрокТовары[0];
							СтрокаТчТовары.КоличествоУпаковок = СтрокаТчТовары.КоличествоУпаковок + ВыборкаТовары.НеобходимоВернуть;
							СтрокаТчТовары.Количество = СтрокаТчТовары.КоличествоУпаковок + ВыборкаТовары.НеобходимоВернуть;
							ЗаполнитьСтрокуДанныеРС(нСтрокаДанныхРС, ВыборкаТовары, СтрокаТчТовары, Настройки.ВнешняяСистема); 
						Иначе
							СтрокаТчТовары = тчТовары.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаТчТовары, ВыборкаТовары,,"ИдентификаторСтроки");
							СтрокаТчТовары.КоличествоУпаковок = ВЫборкаТовары.НеобходимоВернуть;
							СтрокаТчТовары.Количество = ВЫборкаТовары.НеобходимоВернуть;
							ДокРеализацииНайден = Ложь;
							НайтиРеализациюТоваровУслугСкорректироватьСтрокуВозврата(СтрокаТчТовары, ВыборкаТовары, Настройки, ДокРеализацииНайден, ТекстСообщенияДопСвойства);
							Если Не ДокРеализацииНайден Тогда
								ДокументОбъект.ДополнительныеСвойства.Вставить("Проводить", Ложь);
							КонецЕсли;
							ЗаполнитьСтрокуДанныеРС(нСтрокаДанныхРС, ВыборкаТовары, СтрокаТчТовары, Настройки.ВнешняяСистема); 
						КонецЕсли;	
					КонецЦикла;
					ПересчитатьТабличнуюЧасть(ДокументОбъект);
					
					ДокументОбъект.ДополнительныеСвойства.Вставить("ТекстСообщения", ТекстСообщенияДопСвойства);
					
					ЗаписатьДокумент(ДокументОбъект);
					тзДанныеДляРС.ЗаполнитьЗначения(ДокументОбъект.Ссылка, "Документ");
					//Пишем в РС гф_ДокументыНаОснованииВнешнихЗаказов
					ЗаписатьДанныеРсДокументыНаОснованииВнешнихЗаказов(тзДанныеДляРС);
				КонецЕсли;
			Иначе
				//Проверка на границу периода
				Если ДатаВозврата <= ГраницаЗапрета Тогда
					ДатаДокВозврата = КонецДня(ГраницаЗапрета+86400);
				Иначе
					ДатаДокВозврата = КонецДня(ДатаВозврата);
				КонецЕсли;
				тзДанныеДляРС = ПолучитьПустуюТзДляДобавленияВРС();
				ДокументОбъект = Документы.ВозвратТоваровОтКлиента.СоздатьДокумент();
				ЗаполнитьЗначенияСвойств(ДокументОбъект, СтруктураШапкиДокумента);
				ДокументОбъект.Комментарий = Комментарий;
				ДокументОбъект.Дата = ДатаДокВозврата;
				тчТовары = ДокументОбъект.Товары;
				ВыборкаТовары = ВыборкаДокумент.Выбрать();
				Пока ВыборкаТовары.Следующий() Цикл
					СтрокаТчТовары = тчТовары.Добавить();
					нСтрокаДанныхРС = тзДанныеДляРС.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТчТовары, ВыборкаТовары,,"ИдентификаторСтроки");
					//СтрокаТчТовары.АналитикаУчетаНоменклатуры
					СтрокаТчТовары.СпособОпределенияСебестоимости = Перечисления.СпособыОпределенияСебестоимости.ИзДокументаПродажи;
					СтрокаТчТовары.КоличествоУпаковок = ВыборкаТовары.НеобходимоВернуть;
					СтрокаТчТовары.Количество = ВыборкаТовары.НеобходимоВернуть;
					ДокРеализацииНайден = Ложь;
					НайтиРеализациюТоваровУслугСкорректироватьСтрокуВозврата(СтрокаТчТовары, ВыборкаТовары, Настройки, ДокРеализацииНайден, ТекстСообщенияДопСвойства);
					Если Не ДокРеализацииНайден Тогда
						ДокументОбъект.ДополнительныеСвойства.Вставить("Проводить", Ложь);
					КонецЕсли;
					ЗаполнитьСтрокуДанныеРС(нСтрокаДанныхРС, ВыборкаТовары, СтрокаТчТовары, Настройки.ВнешняяСистема);
				КонецЦикла;
				ПересчитатьТабличнуюЧасть(ДокументОбъект);  
				
				ДокументОбъект.ДополнительныеСвойства.Вставить("ТекстСообщения", ТекстСообщенияДопСвойства);
				
				ЗаписатьДокумент(ДокументОбъект);
				тзДанныеДляРС.ЗаполнитьЗначения(ДокументОбъект.Ссылка, "Документ");
				//Пишем в РС гф_ДокументыНаОснованииВнешнихЗаказов
				ЗаписатьДанныеРсДокументыНаОснованииВнешнихЗаказов(тзДанныеДляРС);
								
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
                                                                                                                        
	
КонецПроцедуры
#КонецОбласти

#Область ОбработкаНенайденнойНоменлклатуры
Процедура ОбработатьДанныеНенайденнаяНоменклатура(НенайденнаяНоменклатура, Настройки)
	
	ВнешняяСистема = Настройки.ВнешняяСистема;
	Организация = Настройки.Организация;
	
	Выборка = НенайденнаяНоменклатура.Выбрать();
	Сч = 1;
	Данные = "";
	Операция = "Поиск номенклатуры по штрихкоду";
		
	Пока Выборка.Следующий() Цикл
		//ТЕСТ
		//Если Сч = 5 Тогда Прервать КонецЕсли;
		//ТЕСТ  
		Данные = "sa_name:"+Выборка.Артикул+" ts_name:"+Выборка.ХарактеристикаСтрока+" barcode:"+Выборка.Штрихкод;
		ТекстОшибки = "По штрихкоду:"+Выборка.Штрихкод+" не найдена номенклатура. Строка пропущена";
		
		ЗаписатьОшибкуВЛогОшибокОбменаСВнешнимиСистемами(ВнешняяСистема, Организация,Операция,Сч,ТекстОшибки,Данные);
		
		Сч = Сч + 1;
	КонецЦикла;	

КонецПроцедуры
#КонецОбласти

#Область ОбработкаФайла
Процедура ВыполнитьЗагрузкуДанныхПродажИзФайла(АдресВХ) Экспорт
	
	//Читаем настройки для Организации
	тзНастройки = ЗаполнитьНастройкиОбработки(Организация);	
	Если тзНастройки.Количество() > 0 Тогда
		Настройки = тзНастройки[0];
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для организации "+Организация+" нет настроек. Загрузка отчета невозможна");
		Возврат;
	КонецЕсли;
	
	НомерСтрокиНачалаДанных = 2;
	НомКолонкиАртикул = 6;
	НомКолонкиХарактеристикаСтрока = 8;
	НомКолонкиШтрихКод = 9;
	НомКолонкиТипДокумента = 10;
	НомКолонкиОснование = 11;
	НомКолонкиДатаЗаказа = 12;
	НомКолонкиДатаПродажи = 13;
	НомКолонкиКоличество = 14;
	НомКолонкиЦенаПродажи = 20;
	НомКолонкиИндентификаторСтроки = 49;
	
	Расширение = Прав(ПутьКФайлу, 4);
	Расширение = СтрЗаменить(Расширение, ".", "");
	
	ВрФайл = ПолучитьИмяВременногоФайла(Расширение);
	ДанныеХранилища = ПолучитьИзВременногоХранилища(АдресВХ);
	ДанныеХранилища.Записать(ВрФайл);
	
	//Создание таблицы входящих данных
	тзВхДанные = СоздатьТзДляВходящихДанных();
	
	//Чтение файла из временного хранилища в табличный документ
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Очистить();
	ТабДок.Прочитать(ВрФайл, СпособЧтенияЗначенийТабличногоДокумента.Значение); 
	
	//Удаление временного файла
	ФайлДляУдаления = Новый Файл(ВрФайл);
	Если ФайлДляУдаления.Существует() Тогда
		УдалитьФайлы(ВрФайл);
	КонецЕсли;
	
	//Обработка табличного документа 
	КоличествоСтрок = ТабДок.ВысотаТаблицы - 1;
	Если КоличествоСтрок <= 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нет данных для загрузки",5);
		Возврат;
	КонецЕсли; 
	
	ИмяКолонкиАртикул = "C" + СокрЛП(Формат(НомКолонкиАртикул, "ЧГ=0"));
	ИмяКолонкиХарактеристикаСтрока = "C" + СокрЛП(Формат(НомКолонкиХарактеристикаСтрока, "ЧГ=0"));
	ИмяКолонкаШтрихкод = "C" + СокрЛП(Формат(НомКолонкиШтрихКод, "ЧГ=0"));
	ИмяКолонкиТипДокумента = "C" + СокрЛП(Формат(НомКолонкиТипДокумента, "ЧГ=0"));
	ИмяКолонкиОснование = "C" + СокрЛП(Формат(НомКолонкиОснование, "ЧГ=0"));
	ИмяКолонкиДатаЗаказа = "C" + СокрЛП(Формат(НомКолонкиДатаЗаказа, "ЧГ=0"));
	ИмяКолонкиДатаПродажи = "C" + СокрЛП(Формат(НомКолонкиДатаПродажи, "ЧГ=0"));
	ИмяКолонкиКоличество = "C" + СокрЛП(Формат(НомКолонкиКоличество, "ЧГ=0"));
	ИмяКолонкиЦенаПродажи = "C" + СокрЛП(Формат(НомКолонкиЦенаПродажи, "ЧГ=0"));
	ИмяКолонкиИндентификаторСтроки = "C" + СокрЛП(Формат(НомКолонкиИндентификаторСтроки, "ЧГ=0"));
	ИмяСтрока = "R";
	
	Для сч=НомерСтрокиНачалаДанных По ТабДок.ВысотаТаблицы Цикл
		//чтение Основание
		АдресЯчейки = ИмяСтрока + СОКРЛП(сч)+ ИмяКолонкиОснование;
        АдресЯчейки = СтрЗаменить(АдресЯчейки,Символы.НПП,"");
		Основание = СОКРЛП(ТабДок.Область(АдресЯчейки).Текст); 
		
		//Проверка Основание
		Если НЕ НеобходимоДобавлениеСтроки(Основание) Тогда
		   Продолжить;
	   КонецЕсли;
	   
	   	//чтение Артикул
		АдресЯчейки = ИмяСтрока + СОКРЛП(сч)+ ИмяКолонкиАртикул;
        АдресЯчейки = СтрЗаменить(АдресЯчейки,Символы.НПП,"");
		Артикул = СОКРЛП(ТабДок.Область(АдресЯчейки).Текст); 
		
		//чтение ХарактеристикаСтрока
		АдресЯчейки = ИмяСтрока + СОКРЛП(сч)+ ИмяКолонкиХарактеристикаСтрока;
        АдресЯчейки = СтрЗаменить(АдресЯчейки,Символы.НПП,"");
		ХарактеристикаСтрока = СОКРЛП(ТабДок.Область(АдресЯчейки).Текст);
		
		//чтение Штрихкод
		АдресЯчейки = ИмяСтрока + СОКРЛП(сч)+ ИмяКолонкаШтрихкод;
        АдресЯчейки = СтрЗаменить(АдресЯчейки,Символы.НПП,"");
		Штрихкод = СОКРЛП(ТабДок.Область(АдресЯчейки).Текст);	
		
		//чтение ТипДокумента
		АдресЯчейки = ИмяСтрока + СОКРЛП(сч)+ ИмяКолонкиТипДокумента;
        АдресЯчейки = СтрЗаменить(АдресЯчейки,Символы.НПП,"");
		ТипДокумента = СОКРЛП(ТабДок.Область(АдресЯчейки).Текст);
		
		//чтение ДатаЗаказа (тип Дата)
		АдресЯчейки = ИмяСтрока + СОКРЛП(сч)+ ИмяКолонкиДатаЗаказа;
        АдресЯчейки = СтрЗаменить(АдресЯчейки,Символы.НПП,"");
		ДатаЗаказа =  XMLЗначение(Тип("Дата"), СОКРЛП(ТабДок.Область(АдресЯчейки).Текст));         
		                                                                       
		//чтение ДатаПродажи (тип Дата)
		АдресЯчейки = ИмяСтрока + СОКРЛП(сч)+ ИмяКолонкиДатаПродажи;
        АдресЯчейки = СтрЗаменить(АдресЯчейки,Символы.НПП,"");
		ДатаПродажи = XMLЗначение(Тип("Дата"), СОКРЛП(ТабДок.Область(АдресЯчейки).Текст));
		
		//чтение Количество (тип Число)
		АдресЯчейки = ИмяСтрока + СОКРЛП(сч)+ ИмяКолонкиКоличество;
        АдресЯчейки = СтрЗаменить(АдресЯчейки,Символы.НПП,"");
		Количество = Число(СОКРЛП(ТабДок.Область(АдресЯчейки).Текст));
		
		//чтение ЦенаПродажи (тип Число)
		АдресЯчейки = ИмяСтрока + СОКРЛП(сч)+ ИмяКолонкиЦенаПродажи;
        АдресЯчейки = СтрЗаменить(АдресЯчейки,Символы.НПП,"");
		ЦенаПродажи = Число(СОКРЛП(ТабДок.Область(АдресЯчейки).Текст));
		
		//чтение ИндентификаторСтроки
		АдресЯчейки = ИмяСтрока + СОКРЛП(сч)+ ИмяКолонкиИндентификаторСтроки;
        АдресЯчейки = СтрЗаменить(АдресЯчейки,Символы.НПП,"");
		ИндентификаторСтроки = СОКРЛП(ТабДок.Область(АдресЯчейки).Текст);
		
		//Добавление строки в тзВхДанные
		нСтрока = тзВхДанные.Добавить();
		нСтрока.НачалоПериода = Период.ДатаНачала;
		нСтрока.КонецПериода = Период.ДатаОкончания;
		нСтрока.ДатаЗаказа    = ДатаЗаказа;
		нСтрока.ДатаПродажи   = ДатаПродажи;
		нСтрока.Артикул       = Артикул;
		нСтрока.ХарактеристикаСтрока = ХарактеристикаСтрока;
		нСтрока.Штрихкод      = Штрихкод;
		нСтрока.ТипДокумента  = ТипДокумента;
		нСтрока.Основание     = Основание;
		нСтрока.Количество    = Количество;
		нСтрока.ЦенаПродажи   = ЦенаПродажи;
		нСтрока.ИдентификаторСтроки = ИндентификаторСтроки;

	КонецЦикла;
	
	//Создание документов
	СоздатьДокументы(тзВхДанные, Настройки, Период);
	
КонецПроцедуры
#КонецОбласти

#Область Дополнительные
Функция НеобходимоДобавлениеСтроки(Элемент)
	
	мРазрешенныхОписаний = СтрРазделить("продажа,возврат,сторнопродаж", ",");
	
	Если мРазрешенныхОписаний.Найти(Нрег(Элемент)) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;	
	
КонецФункции

Функция ВыполнитьЧтениеJSON(данные, ЕстьОшибка, ТекстОшибки) Экспорт

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Данные);
	
	Попытка
		Результат = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();	
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка чтения ответа JSON " + ТекстОшибки);
		ЕстьОшибка = Истина;
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции  

Процедура Ожидать(ВремяОжидания) Экспорт
    
    Если ВремяОжидания <> 0 Тогда
        
        НастройкиПрокси = Новый ИнтернетПрокси(Ложь);
        НастройкиПрокси.НеИспользоватьПроксиДляЛокальныхАдресов = Истина;
        НастройкиПрокси.НеИспользоватьПроксиДляАдресов.Добавить("127.0.0.0");
        
        Попытка
            Loopback = Новый HTTPСоединение(
                "127.0.0.0",,,,НастройкиПрокси,
                ВремяОжидания);
            Loopback.Получить(Новый HTTPЗапрос());
		Исключение
            ОбщегоНазначения.СообщитьПользователю("Ожидание между запросами "+ВремяОжидания+" секунд");
        КонецПопытки;
        
    КонецЕсли;
    
КонецПроцедуры

Функция ПолучитьЗапросПоискНоменклатуры()

	Текст = "ВЫБРАТЬ
	        |	ТЗ.НачалоПериода КАК НачалоПериода,
	        |	ТЗ.КонецПериода КАК КонецПериода,
	        |	ТЗ.ДатаЗаказа КАК ДатаЗаказа,
	        |	ТЗ.ДатаПродажи КАК ДатаПродажи,
	        |	ТЗ.Артикул КАК Артикул,
	        |	ТЗ.ХарактеристикаСтрока КАК ХарактеристикаСтрока,
	        |	ТЗ.Штрихкод КАК Штрихкод,
	        |	ТЗ.ТипДокумента КАК ТипДокумента,
	        |	ТЗ.Основание КАК Основание,
	        |	ТЗ.Количество КАК Количество,
	        |	ТЗ.ЦенаПродажи КАК ЦенаПродажи,
	        |	ТЗ.ИдентификаторСтроки КАК ИдентификаторСтроки
	        |ПОМЕСТИТЬ ВТ_ТЗ
	        |ИЗ
	        |	&ТЗ КАК ТЗ
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВТ_ТЗ.ДатаЗаказа КАК ДатаЗаказа,
	        |	ВТ_ТЗ.ДатаПродажи КАК ДатаПродажи,
	        |	ВТ_ТЗ.Артикул КАК Артикул,
	        |	ВТ_ТЗ.ХарактеристикаСтрока КАК ХарактеристикаСтрока,
	        |	ВТ_ТЗ.Штрихкод КАК Штрихкод,
	        |	ВТ_ТЗ.ТипДокумента КАК ТипДокумента,
	        |	ВТ_ТЗ.Основание КАК Основание,
	        |	ВТ_ТЗ.Количество КАК Количество,
	        |	ВТ_ТЗ.ЦенаПродажи КАК ЦенаПродажи,
	        |	ВТ_ТЗ.ИдентификаторСтроки КАК ИдентификаторСтроки,
	        |	ЕСТЬNULL(ШтрихкодыНоменклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	        |	ЕСТЬNULL(ШтрихкодыНоменклатуры.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	        |	ЕСТЬNULL(ШтрихкодыНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяССылка)) КАК Упаковка,
	        |	ВТ_ТЗ.НачалоПериода КАК НачалоПериода,
	        |	ВТ_ТЗ.КонецПериода КАК КонецПериода,
	        |	ЕСТЬNULL(спрНоменклатура.СтавкаНДС, ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяССылка)) КАК СтавкаНДС
	        |ПОМЕСТИТЬ ВТ_ПоискНоменлкатуры
	        |ИЗ
	        |	ВТ_ТЗ КАК ВТ_ТЗ
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	        |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спрНоменклатура
	        |			ПО ШтрихкодыНоменклатуры.Номенклатура = спрНоменклатура.Ссылка
	        |		ПО ВТ_ТЗ.Штрихкод = ШтрихкодыНоменклатуры.Штрихкод
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВТ_ПоискНоменлкатуры.НачалоПериода КАК НачалоПериода,
	        |	ВТ_ПоискНоменлкатуры.КонецПериода КАК КонецПериода,
	        |	ВТ_ПоискНоменлкатуры.ДатаЗаказа КАК ДатаЗаказа,
	        |	ВТ_ПоискНоменлкатуры.ДатаПродажи КАК ДатаПродажи,
	        |	ВТ_ПоискНоменлкатуры.Артикул КАК Артикул,
	        |	ВТ_ПоискНоменлкатуры.ХарактеристикаСтрока КАК ХарактеристикаСтрока,
	        |	ВТ_ПоискНоменлкатуры.Штрихкод КАК Штрихкод,
	        |	ВТ_ПоискНоменлкатуры.ТипДокумента КАК ТипДокумента,
	        |	ВТ_ПоискНоменлкатуры.Основание КАК Основание,
	        |	ВТ_ПоискНоменлкатуры.Количество КАК Количество,
	        |	ВТ_ПоискНоменлкатуры.ЦенаПродажи КАК ЦенаПродажи,
	        |	ВТ_ПоискНоменлкатуры.ИдентификаторСтроки КАК ИдентификаторСтроки,
	        |	ВТ_ПоискНоменлкатуры.Номенклатура КАК Номенклатура,
	        |	ВТ_ПоискНоменлкатуры.Характеристика КАК Характеристика,
	        |	ВТ_ПоискНоменлкатуры.Упаковка КАК Упаковка,
	        |	ВТ_ПоискНоменлкатуры.СтавкаНДС КАК СтавкаНДС
	        |ПОМЕСТИТЬ ВТ_НайденныеПродажи
	        |ИЗ
	        |	ВТ_ПоискНоменлкатуры КАК ВТ_ПоискНоменлкатуры
	        |ГДЕ
	        |	ВТ_ПоискНоменлкатуры.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяССылка)
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	СУММА(ВЫБОР
	        |			КОГДА ВТ_НайденныеПродажи.ТипДокумента = ""Возврат""
	        |				ТОГДА ВТ_НайденныеПродажи.Количество * -1
	        |			ИНАЧЕ ВТ_НайденныеПродажи.Количество
	        |		КОНЕЦ) КАК СуммаКоличество,
	        |	ВТ_НайденныеПродажи.ИдентификаторСтроки КАК ИдентификаторСтроки,
	        |	МАКСИМУМ(ВТ_НайденныеПродажи.ДатаПродажи) КАК ДатаПродажи
	        |ПОМЕСТИТЬ ВТ_ВыборкаПоSRID
	        |ИЗ
	        |	ВТ_НайденныеПродажи КАК ВТ_НайденныеПродажи
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ВТ_НайденныеПродажи.ИдентификаторСтроки
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВТ_ВыборкаПоSRID.ИдентификаторСтроки КАК ИдентификаторСтроки,
	        |	ВТ_ВыборкаПоSRID.СуммаКоличество КАК СуммаКоличество,
	        |	ВТ_ВыборкаПоSRID.ДатаПродажи КАК ДатаПродажи
	        |ПОМЕСТИТЬ ВТ_СвернутыеПоSRID
	        |ИЗ
	        |	ВТ_ВыборкаПоSRID КАК ВТ_ВыборкаПоSRID
	        |ГДЕ
	        |	ВТ_ВыборкаПоSRID.СуммаКоличество <> 0
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВТ_НайденныеПродажи.НачалоПериода КАК НачалоПериода,
	        |	ВТ_НайденныеПродажи.КонецПериода КАК КонецПериода,
	        |	ВТ_НайденныеПродажи.ДатаЗаказа КАК ДатаЗаказа,
	        |	ВТ_НайденныеПродажи.ДатаПродажи КАК ДатаПродажи,
	        |	ВТ_НайденныеПродажи.Артикул КАК Артикул,
	        |	ВТ_НайденныеПродажи.ХарактеристикаСтрока КАК ХарактеристикаСтрока,
	        |	ВТ_НайденныеПродажи.Штрихкод КАК Штрихкод,
	        |	ВТ_НайденныеПродажи.ТипДокумента КАК ТипДокумента,
	        |	ВТ_НайденныеПродажи.Основание КАК Основание,
	        |	ВТ_НайденныеПродажи.Количество КАК Количество,
	        |	ВТ_НайденныеПродажи.ЦенаПродажи КАК ЦенаПродажи,
	        |	ВТ_НайденныеПродажи.ИдентификаторСтроки КАК ИдентификаторСтроки,
	        |	ВТ_НайденныеПродажи.Номенклатура КАК Номенклатура,
	        |	ВТ_НайденныеПродажи.Характеристика КАК Характеристика,
	        |	ВТ_НайденныеПродажи.Упаковка КАК Упаковка,
	        |	ВТ_НайденныеПродажи.СтавкаНДС КАК СтавкаНДС
	        |ПОМЕСТИТЬ ВТ_ДанныеПродаж
	        |ИЗ
	        |	ВТ_НайденныеПродажи КАК ВТ_НайденныеПродажи
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СвернутыеПоSRID КАК ВТ_СвернутыеПоSRID
	        |		ПО ВТ_НайденныеПродажи.ИдентификаторСтроки = ВТ_СвернутыеПоSRID.ИдентификаторСтроки
	        |			И ВТ_НайденныеПродажи.ДатаПродажи = ВТ_СвернутыеПоSRID.ДатаПродажи
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВТ_ДанныеПродаж.НачалоПериода КАК НачалоПериода,
	        |	ВТ_ДанныеПродаж.КонецПериода КАК КонецПериода,
	        |	ВТ_ДанныеПродаж.ДатаЗаказа КАК ДатаЗаказа,
	        |	ВТ_ДанныеПродаж.ДатаПродажи КАК ДатаПродажи,
	        |	ВТ_ДанныеПродаж.Артикул КАК Артикул,
	        |	ВТ_ДанныеПродаж.Штрихкод КАК Штрихкод,
	        |	ВТ_ДанныеПродаж.Номенклатура КАК Номенклатура,
	        |	ВТ_ДанныеПродаж.Характеристика КАК Характеристика,
	        |	ВТ_ДанныеПродаж.Упаковка КАК Упаковка,
	        |	ВТ_ДанныеПродаж.ТипДокумента КАК ТипДокумента,
	        |	ВТ_ДанныеПродаж.Количество КАК КоличествоЗаказ,
	        |	ВЫБОР
	        |		КОГДА ВТ_ДанныеПродаж.Основание = ""Продажа""
	        |			ТОГДА ВТ_ДанныеПродаж.Количество
	        |		ИНАЧЕ 0
	        |	КОНЕЦ КАК КоличествоВыданоЗаказ,
	        |	ВЫБОР
	        |		КОГДА ВТ_ДанныеПродаж.Основание = ""Возврат""
	        |			ТОГДА ВТ_ДанныеПродаж.Количество
	        |		ИНАЧЕ 0
	        |	КОНЕЦ КАК КоличествоВозвратЗаказ,
	        |	ЕСТЬNULL(РСДокументыРеализации.Документ, ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)) КАК ДокументРеализации,
	        |	ЕСТЬNULL(РСДокументыРеализации.Количество, 0) КАК КоличествоРеализация,
	        |	ВЫБОР
	        |		КОГДА ВТ_ДанныеПродаж.Основание = ""Продажа""
	        |			ТОГДА ВТ_ДанныеПродаж.Количество
	        |		ИНАЧЕ 0
	        |	КОНЕЦ - ЕСТЬNULL(РСДокументыРеализации.Количество, 0) КАК НеобходимоРеализовать,
	        |	ЕСТЬNULL(РСДокументыВозврата.Документ, ЗНАЧЕНИЕ(Документ.ВозвратТоваровОтКлиента.ПустаяССылка)) КАК ДокументВозврата,
	        |	ЕСТЬNULL(РСДокументыВозврата.Количество, 0) КАК КоличествоВозврат,
	        |	ВЫБОР
	        |		КОГДА ВТ_ДанныеПродаж.Основание = ""Возврат""
	        |			ТОГДА ВТ_ДанныеПродаж.Количество
	        |		ИНАЧЕ 0
	        |	КОНЕЦ - ЕСТЬNULL(РСДокументыВозврата.Количество, 0) КАК НеобходимоВернуть,
	        |	ВТ_ДанныеПродаж.СтавкаНДС КАК СтавкаНДС,
	        |	ВТ_ДанныеПродаж.ИдентификаторСтроки КАК ИдентификаторСтроки,
	        |	ВТ_ДанныеПродаж.ЦенаПродажи КАК ЦенаПродажи
	        |ПОМЕСТИТЬ ВТ_ИтоговыеДанные
	        |ИЗ
	        |	ВТ_ДанныеПродаж КАК ВТ_ДанныеПродаж
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гф_ДокументыНаОснованииВнешнихЗаказов КАК РСДокументыРеализации
	        |		ПО ВТ_ДанныеПродаж.ИдентификаторСтроки = РСДокументыРеализации.ИдентификаторСтроки
	        |			И (РСДокументыРеализации.Документ ССЫЛКА Документ.РеализацияТоваровУслуг)
	        |			И ВТ_ДанныеПродаж.Номенклатура = РСДокументыРеализации.Номенклатура
	        |			И ВТ_ДанныеПродаж.Характеристика = РСДокументыРеализации.Характеристика
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гф_ДокументыНаОснованииВнешнихЗаказов КАК РСДокументыВозврата
	        |		ПО ВТ_ДанныеПродаж.ИдентификаторСтроки = РСДокументыВозврата.ИдентификаторСтроки
	        |			И (РСДокументыРеализации.Документ ССЫЛКА Документ.ВозвратТоваровОтКлиента)
	        |			И ВТ_ДанныеПродаж.Номенклатура = РСДокументыВозврата.Номенклатура
	        |			И ВТ_ДанныеПродаж.Характеристика = РСДокументыВозврата.Характеристика
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВТ_ПоискНоменлкатуры.ДатаПродажи КАК ДатаПродажи,
	        |	ВТ_ПоискНоменлкатуры.Артикул КАК Артикул,
	        |	ВТ_ПоискНоменлкатуры.ХарактеристикаСтрока КАК ХарактеристикаСтрока,
	        |	ВТ_ПоискНоменлкатуры.Штрихкод КАК Штрихкод
	        |ИЗ
	        |	ВТ_ПоискНоменлкатуры КАК ВТ_ПоискНоменлкатуры
	        |ГДЕ
	        |	ВТ_ПоискНоменлкатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяССылка)
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВТ_ИтоговыеДанные.НачалоПериода КАК НачалоПериода,
	        |	ВТ_ИтоговыеДанные.КонецПериода КАК КонецПериода,
	        |	ВТ_ИтоговыеДанные.ДатаЗаказа КАК ДатаЗаказа,
	        |	ВТ_ИтоговыеДанные.ДатаПродажи КАК ДатаПродажи,
	        |	ВТ_ИтоговыеДанные.Артикул КАК Артикул,
	        |	ВТ_ИтоговыеДанные.Штрихкод КАК Штрихкод,
	        |	ВТ_ИтоговыеДанные.Номенклатура КАК Номенклатура,
	        |	ВТ_ИтоговыеДанные.Характеристика КАК Характеристика,
	        |	ВТ_ИтоговыеДанные.Упаковка КАК Упаковка,
	        |	ВТ_ИтоговыеДанные.ТипДокумента КАК ТипДокумента,
	        |	ВТ_ИтоговыеДанные.КоличествоЗаказ КАК КоличествоЗаказ,
	        |	ВТ_ИтоговыеДанные.КоличествоВыданоЗаказ КАК КоличествоВыданоЗаказ,
	        |	ВТ_ИтоговыеДанные.КоличествоВозвратЗаказ КАК КоличествоВозвратЗаказ,
	        |	ВТ_ИтоговыеДанные.ДокументРеализации КАК ДокументРеализации,
	        |	ВТ_ИтоговыеДанные.КоличествоРеализация КАК КоличествоРеализация,
	        |	ВТ_ИтоговыеДанные.НеобходимоРеализовать КАК НеобходимоРеализовать,
	        |	ВТ_ИтоговыеДанные.ДокументВозврата КАК ДокументВозврата,
	        |	ВТ_ИтоговыеДанные.КоличествоВозврат КАК КоличествоВозврат,
	        |	ВТ_ИтоговыеДанные.НеобходимоВернуть КАК НеобходимоВернуть,
	        |	ВТ_ИтоговыеДанные.СтавкаНДС КАК СтавкаНДС,
	        |	ВТ_ИтоговыеДанные.ИдентификаторСтроки КАК ИдентификаторСтроки,
	        |	ВТ_ИтоговыеДанные.ЦенаПродажи КАК Цена
	        |ИЗ
	        |	ВТ_ИтоговыеДанные КАК ВТ_ИтоговыеДанные
	        |ГДЕ
	        |	ВТ_ИтоговыеДанные.НеобходимоРеализовать > 0
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	ДатаПродажи
	        |ИТОГИ ПО
	        |	ДатаПродажи,
	        |	ДокументРеализации
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВТ_ИтоговыеДанные.НачалоПериода КАК НачалоПериода,
	        |	ВТ_ИтоговыеДанные.КонецПериода КАК КонецПериода,
	        |	ВТ_ИтоговыеДанные.ДатаЗаказа КАК ДатаЗаказа,
	        |	ВТ_ИтоговыеДанные.ДатаПродажи КАК ДатаПродажи,
	        |	ВТ_ИтоговыеДанные.Артикул КАК Артикул,
	        |	ВТ_ИтоговыеДанные.Штрихкод КАК Штрихкод,
	        |	ВТ_ИтоговыеДанные.Номенклатура КАК Номенклатура,
	        |	ВТ_ИтоговыеДанные.Характеристика КАК Характеристика,
	        |	ВТ_ИтоговыеДанные.Упаковка КАК Упаковка,
	        |	ВТ_ИтоговыеДанные.ТипДокумента КАК ТипДокумента,
	        |	ВТ_ИтоговыеДанные.КоличествоЗаказ КАК КоличествоЗаказ,
	        |	ВТ_ИтоговыеДанные.КоличествоВыданоЗаказ КАК КоличествоВыданоЗаказ,
	        |	ВТ_ИтоговыеДанные.КоличествоВозвратЗаказ КАК КоличествоВозвратЗаказ,
	        |	ВТ_ИтоговыеДанные.ДокументРеализации КАК ДокументРеализации,
	        |	ВТ_ИтоговыеДанные.КоличествоРеализация КАК КоличествоРеализация,
	        |	ВТ_ИтоговыеДанные.НеобходимоРеализовать КАК НеобходимоРеализовать,
	        |	ВТ_ИтоговыеДанные.ДокументВозврата КАК ДокументВозврата,
	        |	ВТ_ИтоговыеДанные.КоличествоВозврат КАК КоличествоВозврат,
	        |	ВТ_ИтоговыеДанные.НеобходимоВернуть КАК НеобходимоВернуть,
	        |	ВТ_ИтоговыеДанные.СтавкаНДС КАК СтавкаНДС,
	        |	ВТ_ИтоговыеДанные.ИдентификаторСтроки КАК ИдентификаторСтроки,
	        |	ВТ_ИтоговыеДанные.ЦенаПродажи КАК Цена
	        |ИЗ
	        |	ВТ_ИтоговыеДанные КАК ВТ_ИтоговыеДанные
	        |ГДЕ
	        |	ВТ_ИтоговыеДанные.НеобходимоВернуть > 0
	        |ИТОГИ ПО
	        |	КонецПериода,
	        |	ДокументВозврата"; 
	
	Возврат Текст;
	
КонецФункции  

Функция СоздатьТзДляВходящихДанных()
	
	ТЗ = Новый ТаблицаЗначений;
	КолонкиТЗ = тз.Колонки;
	КолонкиТЗ.Добавить("НачалоПериода", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	КолонкиТЗ.Добавить("КонецПериода", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	КолонкиТЗ.Добавить("ДатаЗаказа", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	КолонкиТЗ.Добавить("ДатаПродажи", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	КолонкиТЗ.Добавить("Артикул", ОбщегоНазначения.ОписаниеТипаСтрока("250"));
	КолонкиТЗ.Добавить("ХарактеристикаСтрока", ОбщегоНазначения.ОписаниеТипаСтрока("250"));
	КолонкиТЗ.Добавить("Штрихкод", ОбщегоНазначения.ОписаниеТипаСтрока("100"));
	КолонкиТЗ.Добавить("ТипДокумента", ОбщегоНазначения.ОписаниеТипаСтрока("250"));
	КолонкиТЗ.Добавить("Основание", ОбщегоНазначения.ОписаниеТипаСтрока("250"));
	КолонкиТЗ.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	КолонкиТЗ.Добавить("ЦенаПродажи", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	КолонкиТЗ.Добавить("ИдентификаторСтроки", ОбщегоНазначения.ОписаниеТипаСтрока("300"));	
	
	Возврат ТЗ;
	
КонецФункции

Функция ПолучитьПустуюТзДляДобавленияВРС()
	
	МассивТиповДокументов = Новый Массив;
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтКлиента"));
	
	ТЗ = Новый ТаблицаЗначений;
	КолонкиТЗ = ТЗ.Колонки;
	КолонкиТЗ.Добавить("ВнешняяСистема", Новый ОписаниеТипов("ПеречислениеСсылка.гф_ВнешниеСистемы"));
	КолонкиТЗ.Добавить("ДатаЗаказа", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	КолонкиТЗ.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	КолонкиТЗ.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КолонкиТЗ.Добавить("Документ", Новый ОписаниеТипов(МассивТиповДокументов));
	КолонкиТЗ.Добавить("НомерСтрокиДокумента", ОбщегоНазначения.ОписаниеТипаЧисло(15));
	КолонкиТЗ.Добавить("ИдентификаторСтроки", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	КолонкиТЗ.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(15));
	
	Возврат ТЗ;	
	
КонецФункции

Функция ПолучитьДатуЗапрета(Организация, Пользователь)
	
	// Приоритеты дат запрета изменения.
	// 1. Для раздела, объекта и пользователя.
	// 2. Для раздела, объекта и группы пользователей.
	// 3. Для раздела, объекта и любого пользователя.
	// 4. Для раздела, любого объекта (объект = раздел) и пользователя.
	// 5. Для раздела, любого объекта (объект = раздел) и группы пользователей.
	// 6. Для раздела, любого объекта (объект = раздел) и любого пользователя.
	// 7. Для любого раздела (пустой раздел), любого объекта (объект = раздел) и пользователя.
	// 8. Для любого раздела (пустой раздел), любого объекта (объект = раздел) и группы пользователей.
	// 9. Для любого раздела (пустой раздел), любого объекта (объект = раздел) и любого пользователя.
	
	ГруппаПользователя = Пользователь.Родитель;
	ПроверяемыйРаздел = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.НайтиПоНаименованию("Продажи");
	ПустойРазделСсылка = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка();
	ДляВсехПользователей = Перечисления.ВидыНазначенияДатЗапрета.ДляВсехПользователей;
	ПараметрыЗапрета = ПараметрыСеанса.ДействующиеДатыЗапретаИзменения;
	ДатаЗапрета = Дата(1,1,1,0,0,0);
	ЗапретВключен = ПараметрыЗапрета.ЗапретИзмененияИспользуется;
	Объект = Организация;
	
	Если ЗапретВключен Тогда
		ДляПользователей = ПараметрыЗапрета.ДляПользователей;
		РазделыПользователей = ДляПользователей.Разделы;
		ПустойРаздел = РазделыПользователей.Получить(ПустойРазделСсылка);
		ПустойОбъект = ПустойРаздел.Получить(ПустойРазделСсылка);
		// 9. Для любого раздела (пустой раздел), любого объекта (объект = раздел) и любого пользователя.
		ДатаЗапрета = ПустойОбъект.Получить(ДляВсехПользователей);
		// 8. Для любого раздела (пустой раздел), любого объекта (объект = раздел) и группы пользователей.
		Если ПустойОбъект.Получить(ГруппаПользователя) <> Неопределено Тогда
			ДатаЗапрета = ПустойОбъект.Получить(ГруппаПользователя);
		КонецЕсли;
		// 7. Для любого раздела (пустой раздел), любого объекта (объект = раздел) и пользователя.
		Если ПустойОбъект.Получить(Пользователь) <> Неопределено Тогда
			ДатаЗапрета = ПустойОбъект.Получить(Пользователь);
		КонецЕсли;
		// 6. Для раздела, любого объекта (объект = раздел) и любого пользователя.
		Если РазделыПользователей.Получить(ПроверяемыйРаздел) <> Неопределено Тогда 
			РазделПродажи = РазделыПользователей.Получить(ПроверяемыйРаздел);
			ПустойОбъектПродажи = РазделПродажи.Получить(ПроверяемыйРаздел);
			ДатаЗапрета = ПустойОбъектПродажи.Получить(ДляВсехПользователей);
			// 5. Для раздела, любого объекта (объект = раздел) и группы пользователей.
			Если ПустойОбъектПродажи.Получить(ГруппаПользователя) <> Неопределено Тогда
				ДатаЗапрета = ПустойОбъектПродажи.Получить(ГруппаПользователя);
			КонецЕсли;
			// 4. Для раздела, любого объекта (объект = раздел) и пользователя.
			Если ПустойОбъектПродажи.Получить(Пользователь) <> Неопределено Тогда
				ДатаЗапрета = ПустойОбъектПродажи.Получить(Пользователь);
			КонецЕсли;
			// 3. Для раздела, объекта и любого пользователя.
			Если РазделПродажи.Получить(Объект) <> Неопределено Тогда
				ПроверяемыйОбъект = РазделПродажи.Получить(Объект);
				ДатаЗапрета = ПроверяемыйОбъект.Получить(ДляВсехПользователей);
				// 2. Для раздела, объекта и группы пользователей.
				Если ПроверяемыйОбъект.Получить(ГруппаПользователя) <> Неопределено Тогда
					ДатаЗапрета = ПроверяемыйОбъект.Получить(ГруппаПользователя);
				КонецЕсли;
				// 1. Для раздела, объекта и пользователя.
				Если ПроверяемыйОбъект.Получить(Пользователь) <> Неопределено Тогда
					ДатаЗапрета = ПроверяемыйОбъект.Получить(Пользователь);
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
	
	Возврат ДатаЗапрета;
	
КонецФункции

Процедура ЗаполнитьСтрокуДанныеРС(нСтрока, ВыборкаТовары, СтрокаТовары, ВнешняяСистема);
	
	нСтрока.ВнешняяСистема = ВнешняяСистема;
	нСтрока.ДатаЗаказа = ВыборкаТовары.ДатаЗаказа;
	нСтрока.Номенклатура = ВыборкаТовары.Номенклатура;
	нСтрока.Характеристика = ВыборкаТовары.Характеристика;
	нСтрока.НомерСтрокиДокумента = СтрокаТовары.НомерСтроки;
	нСтрока.ИдентификаторСтроки = ВыборкаТовары.ИдентификаторСтроки;
	нСтрока.Количество = СтрокаТовары.Количество;
	
КонецПроцедуры

Процедура ПересчитатьТабличнуюЧасть(Объект)
	
	СтруктураПересчета = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Объект);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчета);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчета);
	СтруктураДействий.Вставить("ЗаполнитьКодТНВЭД", Объект.НалогообложениеНДС);
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	КонецЕсли;
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
	
КонецПроцедуры

Процедура ЗаписатьДокумент(Объект)
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		ТипДокумента = "Реализация товаров и услуг";
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ВозвратТоваровОтКлиента") Тогда
		ТипДокумента = "Возврат товаров от клиента";
	Иначе
		ТипДокумента = "Документ движения товаров";
	КонецЕсли;
	
	ДокументПроведен = Ложь;
	ТекстСообщения = "";
	ТекстСообщДопСвойства = "";
	
	РежПроведения = РежимЗаписиДокумента.Проведение;
	
	ДопСвойства = Объект.ДополнительныеСвойства;
	Если ДопСвойства.Свойство("Проводить") Тогда
		РежПроведения = ?(ДопСвойства.Проводить,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись);		    	
	КонецЕсли; 
	
	Если ДопСвойства.Свойство("ТекстСообщения") Тогда
		ТекстСообщДопСвойства = ДопСвойства.ТекстСообщения;
	КонецЕсли;
	
	Попытка 
		Объект.Записать(РежПроведения);
		ДокументПроведен = Объект.Проведен;
	Исключение
		ТекстСообщения = "Ошибка проведения документа """+ТипДокумента+""" "+ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Объект.Комментарий = Объект.Комментарий + ТекстСообщения;
		Объект.Записать(РежимЗаписиДокумента.Запись);
	КонецПопытки; 
	
	Если НЕ ДокументПроведен Тогда
		//Записать в ЖР и Лог Ошибок
		ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщДопСвойства),Символы.ПС+ТекстСообщДопСвойства,"");
		ЗаписатьОшибкуВЛогОшибокОбменаСВнешнимиСистемами(Перечисления.гф_ВнешниеСистемы.Wildberries, Объект.Организация, "Проведение документа", ,"Ошибка проведения документа", ТекстСообщения);
		ЗаписатьОшибкуВЖурналРегистрации(ТекстСообщения, Объект);
		СтруктураСообщения = Новый Структура;
		СтруктураСообщения.Вставить("Объект", Строка(Объект));
		СтруктураСообщения.Вставить("ТекстСообщения", ТекстСообщения);
		СтруктураСообщения.Вставить("Операция", "Проведение");
		МассивНепроведенныхДокументов.Добавить(СтруктураСообщения);
   КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДанныеРсДокументыНаОснованииВнешнихЗаказов(тзДанные)

	Для каждого Строка из тзДанные Цикл
		мз = РегистрыСведений.гф_ДокументыНаОснованииВнешнихЗаказов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(мз, строка);
		мз.Записать(Истина);		
	КонецЦикла;
	
КонецПроцедуры 

Процедура ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки, Объект = Неопределено)
	
	МетаданныеОбъект = "";
	Если Объект <> Неопределено Тогда
		МетаданныеОбъект = Объект.Метаданные();
	КонецЕсли; 
	
	ЗаписьЖурналаРегистрации("Обмен с внешними системами. Загрузка продаж Wildberries",УровеньЖурналаРегистрации.Ошибка,МетаданныеОбъект,?(Объект = Неопределено,NULL,Объект.Ссылка),ТекстОшибки);
	
конецПроцедуры

Процедура ЗаписатьОшибкуВЛогОшибокОбменаСВнешнимиСистемами(ВнешняяСистема, Организация, Операция, СтрокаНомер = 0, ТекстОшибки, Данные)

	мз = РегистрыСведений.гф_ОшибкиОбменаДаннымиСВнешнимиСистемами.СоздатьМенеджерЗаписи();
	мз.Дата = ТекущаяДатаСеанса();
	мз.Организация = Организация;
	мз.ВнешняяСистема = ВнешняяСистема;
	мз.Операция = Операция;
	мз.СтрокаНомер = СтрокаНомер;
	мз.ОписаниеОшибки = ТекстОшибки;
	мз.Данные = Данные;
	мз.Записать(Истина);
	
КонецПроцедуры

Процедура ОчиститьДанныеОшибкиОбменаДаннымиСВнешнимиСистемами() Экспорт
	
	//Очищаем данные старше 90 дней
	ВерхняяГраницаОчистки = НачалоДня(ТекущаяДатаСеанса()-86400*90);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ВерхняяГраницаОчистки);
	Запрос.Текст = "ВЫБРАТЬ
	               |	гф_ОшибкиОбменаДаннымиСВнешнимиСистемами.Дата КАК Дата
	               |ИЗ
	               |	РегистрСведений.гф_ОшибкиОбменаДаннымиСВнешнимиСистемами КАК гф_ОшибкиОбменаДаннымиСВнешнимиСистемами
	               |ГДЕ
	               |	гф_ОшибкиОбменаДаннымиСВнешнимиСистемами.Дата <= &Дата
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	гф_ОшибкиОбменаДаннымиСВнешнимиСистемами.Дата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.гф_ОшибкиОбменаДаннымиСВнешнимиСистемами.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Дата.Установить(Выборка.Дата);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		
		НачатьТранзакцию();
		Попытка		
			НаборЗаписей.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстОшибки = ОписаниеОшибки();
			ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		КонецПопытки;
		
	КонецЦикла;
	
	

КонецПроцедуры

Процедура НайтиРеализациюТоваровУслугСкорректироватьСтрокуВозврата(СтрокаТовары, ВыборкаТовары, Настройки, ДокументНайден = Ложь, ТекстСообщения = "")

	Если СтрокаТовары.СпособОпределенияСебестоимости = Перечисления.СпособыОпределенияСебестоимости.ИзДокументаПередачи И ЗначениеЗаполнено(СтрокаТовары.ДокументРеализации) Тогда
		ДокументНайден = Истина;
		Возврат;
	КонецЕсли;
	
	//Попытка повторно найти реализацию, т.к. документа может не быть на момент выполнения запроса
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВнешняяСистема", Настройки.ВнешняяСистема);
	Запрос.УстановитьПараметр("ДатаЗаказа", ВыборкаТовары.ДатаЗаказа);
	Запрос.УстановитьПараметр("Номенклатура", ВыборкаТовары.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", ВыборкаТовары.Характеристика);
	Запрос.УстановитьПараметр("ИдентификаторСтроки", ВыборкаТовары.ИдентификаторСтроки);
	Запрос.Текст ="ВЫБРАТЬ
	              |	гф_ДокументыНаОснованииВнешнихЗаказов.Документ КАК Документ
	              |ИЗ
	              |	РегистрСведений.гф_ДокументыНаОснованииВнешнихЗаказов КАК гф_ДокументыНаОснованииВнешнихЗаказов
	              |ГДЕ
	              |	гф_ДокументыНаОснованииВнешнихЗаказов.ВнешняяСистема = &ВнешняяСистема
	              |	И гф_ДокументыНаОснованииВнешнихЗаказов.ДатаЗаказа = &ДатаЗаказа
	              |	И гф_ДокументыНаОснованииВнешнихЗаказов.Номенклатура = &Номенклатура
	              |	И гф_ДокументыНаОснованииВнешнихЗаказов.Характеристика = &Характеристика
	              |	И гф_ДокументыНаОснованииВнешнихЗаказов.Документ ССЫЛКА Документ.РеализацияТоваровУслуг
	              |	И гф_ДокументыНаОснованииВнешнихЗаказов.ИдентификаторСтроки = &ИдентификаторСтроки
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	гф_ДокументыНаОснованииВнешнихЗаказов.Документ";
	Выборка = Запрос.Выполнить().Выбрать(); 
	
	Если Выборка.Следующий() Тогда
		СтрокаТовары.ДокументРеализации = Выборка.Документ;
		ДокументНайден = Истина;
		//Ссылку на док реализации установили, можно уходить;
		Возврат;
	КонецЕсли;
	
	//Не нашли реализацию. Меняем способ определения себестоимости
	СпособОпределенияСебестоимости = Перечисления.СпособыОпределенияСебестоимости.Вручную;
	СтрокаТовары.СпособОпределенияСебестоимости = СпособОпределенияСебестоимости;
	ТекстСообщения = ТекстСообщения + "Для строки "+СтрокаТовары.НомерСтроки+" установлен способ определения себестоимости "+ СпособОпределенияСебестоимости+Символы.ПС;
	
	//Пока нет информации как вручную устанавливать себестоимость, поэтому на этом пока всё.
	
КонецПроцедуры

Процедура ОтправитьСообщениеНаПочту(Настройки)
	
	ТемаПисьма = "Ошибки создания документов на основании данных внешней системы "+Настройки.ВнешняяСистема;
	
	ТекстПисьма = СформироватьТекстПисьма();
	УчетнаяЗапись = ПредопределенноеЗначение("Справочник.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты");
	
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Кому", Настройки.Получатели);
	ПараметрыПисьма.Вставить("УчетнаяЗапись", УчетнаяЗапись);                                                               
	ПараметрыПисьма.Вставить("Тема", ТемаПисьма);	
	ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
	ПараметрыПисьма.Вставить("ТипТекста", "ПростойТекст");
	
	Письмо = РаботаСПочтовымиСообщениями.ПодготовитьПисьмо(УчетнаяЗапись, ПараметрыПисьма);
	
	РезультатыОтправкиПисем = РаботаСПочтовымиСообщениями.ОтправитьПисьмо(УчетнаяЗапись, Письмо);
	
КонецПроцедуры

Функция СформироватьТекстПисьма()
	// МассивНепроведенныхДокументов - глобальная переменная	
	//Элемент массива должен содержать структуру
	//Объект - Строковое значение (представление объекта или свободный текст - Источник ошибки)
	//ТекстСообщения - Строковое значение, содержащее информацию об ошибке
	//Операция - строковое значение, содержащее тип операции, при которой возникла ошибка
	ТекстПисьма = "Во время обработки данных "+ТекущаяДатаСеанса()+" возникли следующие ошибки:"+Символы.ПС;
	
	Сч = 1;
	
	Для каждого элМассива из МассивНепроведенныхДокументов Цикл
		ТекстПисьма = ТекстПисьма + Сч +". Объект:" + элМассива.Объект + Символы.ПС +
					"Операция: "+элМассива.Операция+Символы.ПС +
					"Описание ошибки: "+элМассива.ТекстСообщения + Символы.ПС;
		Сч = Сч + 1;
	КонецЦикла;
	
	Возврат ТекстПисьма;
	                    	
КонецФункции
#КонецОбласти

МассивНепроведенныхДокументов = Новый Массив;