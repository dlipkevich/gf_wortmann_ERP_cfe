Перем МетаданныеПоДокументам Экспорт;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Объект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	Объект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ЗаполнитьСписокСчетовЗначениямиПоУмолчаниюНаСервере();	

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если Объект.КлиентыДоговоры.Количество() Тогда 
		ПоказатьВопрос(Новый ОписаниеОповещения("КонтрагентПриИзмененииЗавершение", ЭтотОбъект), 
			"Перед заполнением данные будут очищены. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	КонтрагентПриИзмененииЗавершение(КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры = Неопределено) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.КлиентыДоговоры.Очистить();
		Объект.ПоДаннымОрганизации.Очистить();
		Объект.ПоДаннымКонтрагента.Очистить();
		ПересчитатьОстатки();
	Иначе
		Объект.Контрагент = КонтрагентДоИзменения;
		Возврат;
	КонецЕсли;

	КонтрагентПриИзмененииНаСервере();

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	ЗапросКонтрагенты = Новый Запрос;
	ЗапросКонтрагенты.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Контрагент КАК Контрагент,
	|	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	(ДоговорыКонтрагентов.Контрагент.ГоловнойКонтрагент = &Контрагент
	|	ИЛИ ДоговорыКонтрагентов.Контрагент = &Контрагент)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент,
	|	ДоговорКонтрагента";
	
	ЗапросКонтрагенты.УстановитьПараметр("Контрагент", Объект.Контрагент);
	
	Объект.КлиентыДоговоры.Загрузить(ЗапросКонтрагенты.Выполнить().Выгрузить());
	
	Если НЕ КонтрагентДоИзменения = Объект.Контрагент Тогда
		Объект.ПредставительКонтрагента = Неопределено;
	КонецЕсли;
	
	КонтрагентДоИзменения = Объект.Контрагент;
	Объект.Партнер = Объект.Контрагент.Партнер;
	//Объект.ПредставительКонтрагента = 
	
КонецПроцедуры

&НаКлиенте
Процедура ПоДаннымОрганизацииКонтрагентаПослеУдаления(Элемент)
	ПересчитатьОстатки();
КонецПроцедуры

&НаКлиенте
Процедура ПоДаннымОрганизацииКонтрагентаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ПересчитатьОстатки();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокСчетовЗначениямиПоУмолчаниюНаСервере()
	
	//правка лысов
	//СчетаПоУмолчанию = Новый Массив();
	//СчетаПоУмолчанию.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками);
	//СчетаПоУмолчанию.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками);
	//СчетаПоУмолчанию.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам);
	//СчетаПоУмолчанию.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам);
	//СчетаПоУмолчанию.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами);
	//
	//Для Счетчик = 1  По СчетаПоУмолчанию.Количество() Цикл
	//	СтрокаСчета = СписокСчетов.Добавить();
	//	СтрокаСчета.УчаствуетВРасчетах = Истина;
	//КонецЦикла; 
	//
	//СписокСчетов.ЗагрузитьКолонку(СчетаПоУмолчанию,"Счет");
	
	СтрокаСчета = Объект.СписокСчетов.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками;
	СтрокаСчета.УчаствуетВРасчетах = Истина;
	
	СтрокаСчета = Объект.СписокСчетов.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками;
	СтрокаСчета.УчаствуетВРасчетах = Истина;
	
	СтрокаСчета = Объект.СписокСчетов.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам;
	СтрокаСчета.УчаствуетВРасчетах = Истина;
	
	СтрокаСчета = Объект.СписокСчетов.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам;
	СтрокаСчета.УчаствуетВРасчетах = Истина;
	
	СтрокаСчета = Объект.СписокСчетов.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами;
	//СтрокаСчета.УчаствуетВРасчетах = Истина;
	
	//!правка
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(Объект, 
		Новый Структура("ДатаНачала, ДатаОкончания", "ДатаНачала", "ДатаОкончания"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанные(Команда)
	
	Если Объект.КлиентыДоговоры.Количество() = 0 тогда
		Предупреждение("Не выбраны контрагенты и договоры!");
		Возврат;
	КонецЕсли;
	
	//Для каждого Стр из Объект.КлиентыДоговоры цикл
	//	Если НЕ ЗначениеЗаполнено(Стр.Контрагент) или НЕ ЗначениеЗаполнено(Стр.ДоговорКонтрагента) тогда 	
	//		Предупреждение("Обнаружены строки настройки отбора, в которых не выбран контрагент или договор!");
	//		Возврат;
	//	КонецЕсли;
	//КонецЦикла;
	
	Для каждого Стр из Объект.КлиентыДоговоры цикл
		Если НЕ ЗначениеЗаполнено(Стр.Контрагент) тогда 	
			Предупреждение("Обнаружены строки настройки отбора, в которых не выбран контрагент!");
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		Предупреждение("Не выбрана валюта документа!");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		Предупреждение("Не выбрана дата окончания периода сверки!");
		Возврат;
	КонецЕсли;
	
	Если Объект.ДатаОкончания < Объект.ДатаНачала Тогда
		Предупреждение("Неверно задан период сверки расчетов!");
		Возврат;
	КонецЕсли;
	
	КоличествоСчетов = Объект.СписокСчетов.Количество();
	
	ФильтрСписокСчетов = Новый массив();
	Для каждого СтрокаСчета Из Объект.СписокСчетов Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаСчета.Счет) или СтрокаСчета.УчаствуетВРасчетах = Ложь Тогда
			Продолжить;
		Иначе
			ФильтрСписокСчетов.Добавить(СтрокаСчета.Счет);
		КонецЕсли; 
	КонецЦикла; 
	
	Если ФильтрСписокСчетов.Количество() = 0 Тогда
		Предупреждение("Неверно задан список счетов, по которым производится сверка!");
		Возврат;
	КонецЕсли;
	
	Если Объект.ПоДаннымОрганизации.Количество() Тогда 
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьДанныеЗавершение", ЭтотОбъект, Новый Структура("ФильтрСписокСчетов", ФильтрСписокСчетов)),
			"Перед заполнением табличная часть будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеЗавершение(КодВозвратаДиалога.Да, Новый Структура("ФильтрСписокСчетов", ФильтрСписокСчетов));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеЗавершение(РезультатВопроса, ДополнительныеПараметры = Неопределено) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ПоДаннымОрганизации.Очистить();
	Иначе
		Возврат;
	КонецЕсли;

	ЗаполнитьДанныеНаСервере(ДополнительныеПараметры.ФильтрСписокСчетов);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеНаСервере(ФильтрСписокСчетов)
	
	ЗаполнитьПоДаннымБухгалтерскогоУчета(ФильтрСписокСчетов);
	
	ПересчитатьОстатки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуПоДаннымОрганизации(Команда)
	
	Если Объект.ПоДаннымКонтрагента.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		Объект.ПоДаннымКонтрагента.Очистить();
	КонецЕсли;
	
	ЗаполнитьПоДаннымОрганизации();
	
	ПересчитатьОстатки();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьОстатки()
	
	Объект.ОстатокНаКонец = Объект.ОстатокНаНачало + Объект.ПоДаннымОрганизации.Итог("Дебет") -  Объект.ПоДаннымОрганизации.Итог("Кредит");
	
	ОстатокНаНачалоКонтрагент = - Объект.ОстатокНаНачало;
	ОстатокНаКонецКонтрагент = ОстатокНаНачалоКонтрагент + Объект.ПоДаннымКонтрагента.Итог("Дебет") -  Объект.ПоДаннымКонтрагента.Итог("Кредит");
	
	Если Объект.Расхождение <> Объект.ОстатокНаКонец + ОстатокНаКонецКонтрагент Тогда
		Объект.Расхождение = Объект.ОстатокНаКонец + ОстатокНаКонецКонтрагент;
	КонецЕсли; 
	
	РасхождениеКонтрагент = Объект.Расхождение*(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПечатнуюФорму(Команда)
	
	//ПараметрыОткрытия                                         = Новый Структура("ИсточникДанных, ПараметрыИсточника");
	//ПараметрыОткрытия.ИсточникДанных                          = Параметры.ДополнительнаяОбработкаСсылка;
	//ПараметрыОткрытия.ПараметрыИсточника                      = Новый Структура("ИдентификаторКоманды, ОбъектыНазначения");
	//ПараметрыОткрытия.ПараметрыИсточника.ИдентификаторКоманды = "АКТСВЕРКИПОГРУППЕКЛИЕНТОВ";

	//ОбъектыНазначения = Новый Массив;
	//
	//ПараметрыОткрытия.ПараметрыИсточника.ОбъектыНазначения = ОбъектыНазначения;
	//
	//ДополнительныеПараметры = Новый Структура();
	//ДополнительныеПараметры.Вставить("Объект", Объект);
	//		
	//ОткрытьФорму("ОбщаяФорма.ПечатьДокументов", ПараметрыОткрытия);
	
    СформироватьПечатнуюФормуНаСервере();    
    КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм("АКТСВЕРКИПОГРУППЕКЛИЕНТОВ");
    ПечатнаяФорма = УправлениеПечатьюКлиент.ОписаниеПечатнойФормы(КоллекцияПечатныхФорм, "АКТСВЕРКИПОГРУППЕКЛИЕНТОВ");
    ПечатнаяФорма.СинонимМакета = "АКТСВЕРКИПОГРУППЕКЛИЕНТОВ";
    ПечатнаяФорма.ТабличныйДокумент = ТабличныйДокумент;
    ПечатнаяФорма.ИмяФайлаПечатнойФормы = "АКТСВЕРКИПОГРУППЕКЛИЕНТОВ";
    
    ОбластиОбъектов = Новый СписокЗначений;
    УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм, ОбластиОбъектов);

КонецПроцедуры

&НаСервере
Процедура СформироватьПечатнуюФормуНаСервере()
	
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	ТабличныйДокумент = ОбъектОбработки.ПечатьАктаСверки();
	
КонецПроцедуры

// Заполнение таблицы "По данным организации" по информации из бухгалтерского учета
&НаСервере
Процедура ЗаполнитьПоДаннымБухгалтерскогоУчета(ФильтрСписокСчетов = неопределено) Экспорт
	
	Если ФильтрСписокСчетов = Неопределено Тогда
		
		СписокСчетовСтрока = "";
		Для каждого СтрокаСчета Из Объект.СписокСчетов Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаСчета.Счет) или СтрокаСчета.УчаствуетВРасчетах = Ложь Тогда
				Продолжить;
			Иначе
				СписокСчетовСтрока = СписокСчетовСтрока + ?(ПустаяСтрока(СписокСчетовСтрока), "", ", ") + Строка(СтрокаСчета.Счет);
			КонецЕсли; 
		КонецЦикла; 
		
		ФильтрСписокСчетов = УПП_БухгалтерскийУчет_ПолучитьМассивСчетов("Хозрасчетный", СписокСчетовСтрока);
		
		Если ФильтрСписокСчетов.Количество() = 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Неверно задан список счетов, по которым производится сверка!",,,СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
	Иначе
		
		СписокСчетовСтрока = "";
		Для Каждого Счет ИЗ ФильтрСписокСчетов Цикл
			СписокСчетовСтрока = СписокСчетовСтрока + ?(ПустаяСтрока(СписокСчетовСтрока), "", ", ") + Строка(Счет);
		КонецЦикла;
		
		ФильтрСписокСчетов = УПП_БухгалтерскийУчет_ПолучитьМассивСчетов("Хозрасчетный", СписокСчетовСтрока);
		
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала",    ?(НЕ ЗначениеЗаполнено(Объект.ДатаНачала),    Неопределено, Объект.ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания", ?(НЕ ЗначениеЗаполнено(Объект.ДатаОкончания), Неопределено, КонецДня(Объект.ДатаОкончания)));
	Запрос.УстановитьПараметр("Организация",   Объект.Организация);
	Запрос.УстановитьПараметр("СписокКонтрагентов",  Объект.КлиентыДоговоры.Выгрузить(,"Контрагент").ВыгрузитьКолонку("Контрагент"));
	Запрос.УстановитьПараметр("Валюта",        ?(НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) или (Объект.ВалютаДокумента = ВалютаРегламентированногоУчета), неопределено, Объект.ВалютаДокумента));
	Запрос.УстановитьПараметр("ФильтрСписокСчетов", ФильтрСписокСчетов);
	
	АналитикаРасчетов = новый Массив();
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("АналитикаРасчетов",    АналитикаРасчетов);
	
	//Запрос.УстановитьПараметр("СписокДоговоровКонтрагентов", Объект.КлиентыДоговоры.Выгрузить(,"ДоговорКонтрагента").ВыгрузитьКолонку("ДоговорКонтрагента"));
	//делаем по всем договорам
	СписокДоговоровКонтрагентов = Новый СписокЗначений;	
	Для каждого Стр из Объект.КлиентыДоговоры цикл
		Если ЗначениеЗаполнено(Стр.ДоговорКонтрагента) тогда
			СписокДоговоровКонтрагентов.Добавить(Стр.ДоговорКонтрагента);	
		Иначе	
			ВыборкаДК = Справочники.ДоговорыКонтрагентов.Выбрать(, Стр.Контрагент);
			Пока ВыборкаДК.Следующий() цикл
				СписокДоговоровКонтрагентов.Добавить(ВыборкаДК.Ссылка);	
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Запрос.УстановитьПараметр("СписокДоговоровКонтрагентов", СписокДоговоровКонтрагентов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйОбороты.Регистратор.Дата КАК Дата,
	|	ХозрасчетныйОбороты.Регистратор.Номер КАК Номер,
	|	ХозрасчетныйОбороты.Регистратор КАК ДокументРегистратор,
	|	ХозрасчетныйОбороты.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОбороты.Субконто2 КАК Договор,
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
	|		ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт
	|	КОНЕЦ КАК Дебет,
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|		ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотКт
	|	КОНЕЦ КАК Кредит,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Регистратор.НомерВходящегоДокумента, НЕОПРЕДЕЛЕНО) КАК НомерВходящегоДокумента,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Регистратор.ДатаВходящегоДокумента, НЕОПРЕДЕЛЕНО) КАК ДатаВходящегоДокумента,
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ХозрасчетныйОбороты.КорСубконто2,
	|	ХозрасчетныйОбороты.КорСубконто3,
	|	ХозрасчетныйОбороты.Валюта,
	|	ХозрасчетныйОбороты.ВалютнаяСуммаОборот,
	|	ВЫБОР
	//|		КОГДА ХозрасчетныйОбороты.КорСубконто1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|		КОГДА (ХозрасчетныйОбороты.КорСубконто1 ССЫЛКА ПланВидовХарактеристик.СтатьиДоходов ИЛИ ХозрасчетныйОбороты.КорСубконто1 ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов)
	|			ТОГДА ХозрасчетныйОбороты.КорСубконто1.ВидПрочихДоходовИРасходов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидПрочихДоходовИРасходов,
	|	ХозрасчетныйОбороты.Счет
	|ПОМЕСТИТЬ ВременнаяТаблицаДанных
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНачала,
	|			&ДатаОкончания,
	|			Регистратор,
	|			Счет В (&ФильтрСписокСчетов),
	|			&АналитикаРасчетов,
	|			Организация = &Организация
	|				И ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Валюта = &Валюта
	|				КОНЕЦ
	|				И Субконто1 В (&СписокКонтрагентов)
	|				И (Субконто2 В (&СписокДоговоровКонтрагентов) ИЛИ Субконто2 = Неопределено)
	|				,
	|			,
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.КорСчет В (&ФильтрСписокСчетов)
	
	//Оставляем только проверку на договоры, т.к. список клиентов и договоров никогда не должен быть пустым 
	|				ТОГДА НЕ ЕСТЬNULL(ХозрасчетныйОбороты.КорСубконто2, НЕОПРЕДЕЛЕНО) В (&СписокДоговоровКонтрагентов)
	
	//|				ТОГДА ВЫБОР
	//|						КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	//|							ТОГДА НЕ ЕСТЬNULL(ХозрасчетныйОбороты.КорСубконто1, НЕОПРЕДЕЛЕНО) = &Контрагент
	//|						ИНАЧЕ НЕ(ЕСТЬNULL(ХозрасчетныйОбороты.КорСубконто1, НЕОПРЕДЕЛЕНО) = &Контрагент
	//|									И ЕСТЬNULL(ХозрасчетныйОбороты.КорСубконто2, НЕОПРЕДЕЛЕНО) = &ДоговорКонтрагента)
	//|					КОНЕЦ
	//
	
	
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И НЕ(ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
	|					ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт
	|				КОНЕЦ = 0
	|				И ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|					ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотКт
	|				КОНЕЦ = 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаДанных.Дата,
	|	ВременнаяТаблицаДанных.Номер,
	|	ВременнаяТаблицаДанных.ДокументРегистратор,
	|	ВременнаяТаблицаДанных.Контрагент,
	|	ВременнаяТаблицаДанных.Договор,
	|	СУММА(ВременнаяТаблицаДанных.Дебет) КАК Дебет,
	|	СУММА(ВременнаяТаблицаДанных.Кредит) КАК Кредит,
	|	ВременнаяТаблицаДанных.НомерВходящегоДокумента,
	|	ВременнаяТаблицаДанных.ДатаВходящегоДокумента,
	|	ВременнаяТаблицаДанных.КорСчет,
	//|	ВЫРАЗИТЬ(ВременнаяТаблицаДанных.КорСубконто1 КАК Справочник.ПрочиеДоходыИРасходы) КАК КорСубконто1,
	|	ВЫБОР
	|		КОГДА (ВременнаяТаблицаДанных.КорСубконто1 ССЫЛКА ПланВидовХарактеристик.СтатьиДоходов ИЛИ ВременнаяТаблицаДанных.КорСубконто1 ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов)
	|			ТОГДА ВременнаяТаблицаДанных.КорСубконто1
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КорСубконто1,
	|	ВременнаяТаблицаДанных.Валюта,
	|	СУММА(ВременнаяТаблицаДанных.ВалютнаяСуммаОборот) КАК ВалютнаяСуммаОборот,
	|	ВременнаяТаблицаДанных.ВидПрочихДоходовИРасходов,
	|	ВременнаяТаблицаДанных.Счет
	|ИЗ
	|	ВременнаяТаблицаДанных КАК ВременнаяТаблицаДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаДанных.Контрагент,
	|	ВременнаяТаблицаДанных.Договор,
	|	ВременнаяТаблицаДанных.НомерВходящегоДокумента,
	|	ВременнаяТаблицаДанных.ДатаВходящегоДокумента,
	|	ВременнаяТаблицаДанных.КорСчет,
	//|	ВЫРАЗИТЬ(ВременнаяТаблицаДанных.КорСубконто1 КАК Справочник.ПрочиеДоходыИРасходы),
	|	ВЫБОР
	|		КОГДА (ВременнаяТаблицаДанных.КорСубконто1 ССЫЛКА ПланВидовХарактеристик.СтатьиДоходов ИЛИ ВременнаяТаблицаДанных.КорСубконто1 ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов)
	|			ТОГДА ВременнаяТаблицаДанных.КорСубконто1
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВременнаяТаблицаДанных.Валюта,
	|	ВременнаяТаблицаДанных.ВидПрочихДоходовИРасходов,
	|	ВременнаяТаблицаДанных.Счет,
	|	ВременнаяТаблицаДанных.Дата,
	|	ВременнаяТаблицаДанных.Номер,
	|	ВременнаяТаблицаДанных.ДокументРегистратор
	|
	|ИМЕЮЩИЕ
	|	НЕ(СУММА(ВременнаяТаблицаДанных.Дебет) = 0
	|			И СУММА(ВременнаяТаблицаДанных.Кредит) = 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВременнаяТаблицаДанных.Дата,
	|	ВременнаяТаблицаДанных.ДокументРегистратор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборДвижений = Объект.ПоДаннымОрганизации.Выгрузить();
	НаборДвижений.Колонки.Добавить("Валюта", Новый описаниеТипов("СправочникСсылка.Валюты"));
	НаборДвижений.Колонки.Добавить("ВалютнаяСумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	//МассивПрефиксов = ОбщегоНазначения.СформироватьМассивПрефиксовДляРИБИОрганизации(Организация);
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Дебет = 0 И Выборка.Кредит = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = НаборДвижений.Добавить();
		НоваяСтрока.ДокументРегистратор= Выборка.ДокументРегистратор;
		НоваяСтрока.Дата               = Выборка.Дата;
		НоваяСтрока.Дебет              = Выборка.Дебет;
		НоваяСтрока.Кредит             = Выборка.Кредит;
		НоваяСтрока.Валюта             = Выборка.Валюта;
		НоваяСтрока.ВалютнаяСумма      = Выборка.ВалютнаяСуммаОборот;
		НоваяСтрока.ДоговорКонтрагента = Выборка.Договор;
		НоваяСтрока.Контрагент 		   = Выборка.Контрагент;
		
		МетаданныеДокумента = ПолучитьМетаданныеДокумента(Выборка.ДокументРегистратор);
		
		// Сформируем строку представления
		//Представление = "";
		//
		//Если Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) Тогда
		//	
		//	Если НЕ ЗначениеЗаполнено(Выборка.ВидпрочихДоходовИРасходов) Тогда
		//		
		//	ИначеЕсли Выборка.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы Тогда
		//		Представление = "Курсовые разницы";
		//	ИначеЕсли Выборка.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате Тогда
		//		Представление = "Санкции";
		//	//ИначеЕсли Выборка.КорСубконто1 = Справочники.ПрочиеДоходыИРасходы.СуммовыеРазницы Тогда
		//	ИначеЕсли Выборка.КорСубконто1 = ПланыВидовХарактеристик.СтатьиДоходов.ОтклонениеВСтоимостиТоваров
		//			ИЛИ Выборка.КорСубконто1 = ПланыВидовХарактеристик.СтатьиРасходов.ОтклонениеВСтоимостиТоваров Тогда
		//		Представление = "Суммовые разницы";
		//	//ИначеЕсли Выборка.КорСубконто1 = Справочники.ПрочиеДоходыИРасходы.КурсовыеРазницыПоРасчетамВУЕ Тогда
		//	ИначеЕсли Выборка.КорСубконто1 = ПланыВидовХарактеристик.СтатьиДоходов.ДоходыПриКонвертацииВалюты
		//			ИЛИ Выборка.КорСубконто1 = ПланыВидовХарактеристик.СтатьиРасходов.РасходыПриКонвертацииВалюты Тогда
		//		Представление = "Курсовые разницы по расчетам в у.е";
		//	КонецЕсли;
		//	
		//КонецЕсли;
		//
		//Если не ПустаяСтрока(Представление) Тогда
		//	// Строка уже отработана
		//	
		//ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам) 
		//	или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам) Тогда
		//	Если (Выборка.Дебет >0) Тогда
		//		Представление = "Возврат займа";
		//	ИначеЕсли (Выборка.Кредит >0)Тогда
		//		Представление = "Займ";
		//	Иначе
		//		Представление = "Операции по займам";
		//	КонецЕсли;
		//ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям) 
		//	или Выборка.Счет = ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям
		//	или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямВал) 
		//	или Выборка.Счет = ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямВал
		//	или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ) 
		//	или Выборка.Счет = ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ
		//	тогда
		//	Представление = "Претензия";
		//	
		//ИначеЕсли Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Касса) 
		//	или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетныеСчета) 
		//	или Выборка.КорСчет = ПланыСчетов.Хозрасчетный.РасчетныеСчета
		//	или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ВалютныеСчета) 
		//	или Выборка.КорСчет = ПланыСчетов.Хозрасчетный.ВалютныеСчета
		//	или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.СпециальныеСчета) 
		//	тогда
		//	
		//	Если (Выборка.Кредит >0) Тогда
		//		
		//		Если Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) Тогда
		//			Представление = "Возврат средств";
		//			
		//		ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
		//			Представление = "Оплата";
		//			
		//		Иначе
		//			Представление = "Перевод средств";
		//		КонецЕсли;
		//		
		//	ИначеЕсли (Выборка.Дебет >0) Тогда
		//		Если Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
		//			или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами)
		//			Тогда
		//			
		//			Представление = "Оплата";
		//			
		//		ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
		//			Представление = "Возврат средств";
		//			
		//		Иначе
		//			Представление = "Перевод средств";
		//		КонецЕсли;
		//	КонецЕсли;
		//ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) 
		//	или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами) 
		//	тогда
		//	Если Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) 
		//		или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Продажи) Тогда
		//		Если Выборка.Дебет <> 0 Тогда
		//			Представление = "Оплата";
		//		Иначе
		//			Если ТипЗнч(Выборка.ДокументРегистратор) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		//				Представление = "Корректировка прихода";
		//			Иначе
		//				Представление = "Приход";
		//			КонецЕсли;
		//		КонецЕсли;
		//	ИначеЕсли (Выборка.Кредит <>0) Тогда
		//		//Если ТипЗнч(Выборка.ДокументРегистратор) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		//		Если ТипЗнч(Выборка.ДокументРегистратор) = Тип("ДокументСсылка.КорректировкаПриобретения") Тогда
		//			Представление = "Корректировка прихода";
		//		Иначе
		//			Представление = "Приход";
		//		КонецЕсли;
		//	КонецЕсли;
		//ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
		//	Если Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) 
		//		или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Продажи) Тогда
		//		Если ЭтоДокументДвиженияДенежныхСредств(Выборка.ДокументРегистратор) Тогда
		//			Представление = "Суммовая разница";
		//		ИначеЕсли ТипЗнч(Выборка.ДокументРегистратор) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		//			Представление = "Корректировка продажи";
		//		ИначеЕсли ТипЗнч(Выборка.ДокументРегистратор) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И Выборка.Дебет <> 0 Тогда
		//			Представление = "Продажа";
		//		Иначе
		//			Если Выборка.Дебет > 0 Тогда
		//				Представление = "Продажа";
		//			ИначеЕсли Выборка.Дебет < 0 Тогда
		//				Представление = "Возврат";
		//			Иначе
		//				Представление = "Оплата";
		//			КонецЕсли;
		//		КонецЕсли;
		//	КонецЕсли;
		//КонецЕсли;
		//
		//Если ПустаяСтрока(Представление)Тогда
		//	Если Выборка.Дебет > 0 тогда
		//		Представление = "Принято";
		//	ИначеЕсли Выборка.Дебет < 0 тогда
		//		Представление = "Сторно: принято";
		//	ИначеЕсли Выборка.Кредит > 0 тогда
		//		Представление = "Передано";
		//	Иначе
		//		Представление = "Сторно: передано";
		//	КонецЕсли;
		//КонецЕсли;
		//
		//Если Выборка.НомерВходящегоДокумента = Неопределено тогда
		//	Если Представление = "Продажа" И ТипЗнч(Выборка.ДокументРегистратор) <> Тип("ДокументСсылка.ОперацияБух") Тогда
		//		//Представление = Представление + " (" + ОбщегоНазначения.ПолучитьНомерНаПечать(Выборка.ДокументРегистратор,МассивПрефиксов) + " от " + Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + ")";
		//		Представление = Представление + " (" + ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер) + " от " + Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + ")";
		//	Иначе
		//		Представление = Представление + " ("+Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + ")";
		//	КонецЕсли;
		//Иначе
		//	Представление = Представление +" ("+ ?(НЕ ЗначениеЗаполнено(Выборка.НомерВходящегоДокумента),"_______", Выборка.НомерВходящегоДокумента) +" от "+
		//	?(НЕ ЗначениеЗаполнено(Выборка.ДатаВходящегоДокумента), "'  .  .    '", Формат(Выборка.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy"))+")";
		//КонецЕсли;					  
		//
		//НоваяСтрока.Представление = Представление;

		НоваяСтрока.Представление = Документы.СверкаВзаиморасчетов.ОписаниеРасчетногоДокумента(Выборка.ДокументРегистратор,
			?(ЗначениеЗаполнено(Выборка.НомерВходящегоДокумента), Выборка.НомерВходящегоДокумента, Выборка.Номер),
			?(ЗначениеЗаполнено(Выборка.ДатаВходящегоДокумента), Выборка.ДатаВходящегоДокумента, Выборка.Дата),
			"");

	КонецЦикла;
	
	Если ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		
		Запрос.УстановитьПараметр("ДатаНачала", Объект.ДатаНачала);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
		|			ТОГДА ХозрасчетныйОстаткиНаНачало.СуммаОстаток
		|		ИНАЧЕ ХозрасчетныйОстаткиНаНачало.ВалютнаяСуммаОстаток
		|	КОНЕЦ КАК ОстатокНаНачало
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ДатаНачала,
		|			Счет В (&ФильтрСписокСчетов),
		|			&АналитикаРасчетов,
		|			Организация = &Организация
		|				И ВЫБОР
		|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ Валюта = &Валюта
		|				КОНЕЦ
		|				И Субконто1 В (&СписокКонтрагентов)
		|				И Субконто2 В (&СписокДоговоровКонтрагентов)
		|				) КАК ХозрасчетныйОстаткиНаНачало";
		
		ОстатокНаНачало = Запрос.Выполнить().Выгрузить().Итог("ОстатокНаНачало");
		
	Иначе
		
		ОстатокНаНачало = 0;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаОкончания", ?(ЗначениеЗаполнено(Объект.ДатаОкончания), 
	Новый Граница(КонецДня(Объект.ДатаОкончания), ВидГраницы.Включая), 
	Неопределено));
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОстаткиНаКонец.СуммаОстаток
	|		ИНАЧЕ ХозрасчетныйОстаткиНаКонец.ВалютнаяСуммаОстаток
	|	КОНЕЦ КАК ОстатокНаКонец
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОкончания,
	|			Счет В (&ФильтрСписокСчетов),
	|			&АналитикаРасчетов,
	|			Организация = &Организация
	|				И ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Валюта = &Валюта
	|				КОНЕЦ
	|				И Субконто1 В (&СписокКонтрагентов)
	|				И Субконто2 В (&СписокДоговоровКонтрагентов)
	|				) КАК ХозрасчетныйОстаткиНаКонец";
	
	ОстатокНаКонец = Запрос.Выполнить().Выгрузить().Итог("ОстатокНаКонец");
	
	Если Объект.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		
		НаборДвижений.Свернуть("Дата,ДокументРегистратор,Контрагент,ДоговорКонтрагента,Представление,Валюта","Дебет, Кредит, ВалютнаяСумма");
		
		Для каждого СтрокаДвижений Из НаборДвижений Цикл
			
			Если СтрокаДвижений.ВалютнаяСумма > 0 Тогда
				СтрокаДвижений.Представление = СтрокаДвижений.Представление 
				+ " (" + Формат(СтрокаДвижений.ВалютнаяСумма, "ЧЦ=15; ЧДЦ=2") + " " + Строка(СтрокаДвижений.Валюта) + ")";
			ИначеЕсли СтрокаДвижений.ВалютнаяСумма < 0 Тогда
				Множитель = ?( (СтрокаДвижений.Дебет + СтрокаДвижений.Кредит) > 0, -1, 1);
				СтрокаДвижений.Представление = СтрокаДвижений.Представление
				+ " (" + Формат(Множитель * СтрокаДвижений.ВалютнаяСумма, "ЧЦ=15; ЧДЦ=2") + " " + Строка(СтрокаДвижений.Валюта) + ")";
			КонецЕсли;
			
		КонецЦикла; 
		
	Иначе
		
		НаборДвижений.Свернуть("Дата,ДокументРегистратор,Контрагент,ДоговорКонтрагента,Представление","Дебет, Кредит"); 	
		
	КонецЕсли; 
	
	НаборДвижений.Сортировать("Дата,ДокументРегистратор,Представление");	
	
	Объект.ПоДаннымОрганизации.Загрузить(НаборДвижений);
	
	//Депозит
	ЗапросДепозит = Новый Запрос;
	ЗапросДепозит.УстановитьПараметр("СписокДоговоровКонтрагентов", СписокДоговоровКонтрагентов);
	СписокСчетовДепозит = Новый СписокЗначений;
	СписокСчетовДепозит.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами);
	ЗапросДепозит.УстановитьПараметр("СписокСчетовДепозит", СписокСчетовДепозит);
	
	ЗапросДепозит.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ХозрасчетныйОбороты.СуммаОстатокКт) КАК СуммаОстатокКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОкончания,
	|			Счет В (&СписокСчетовДепозит),
	|			,
	|			Организация = &Организация
	|				И Субконто2 В (&СписокДоговоровКонтрагентов)) КАК ХозрасчетныйОбороты
	|ИТОГИ
	|	СУММА(СуммаОстатокКт)
	|ПО
	|	ОБЩИЕ";
	
	ЗапросДепозит.УстановитьПараметр("ДатаОкончания", ?(НЕ ЗначениеЗаполнено(Объект.ДатаОкончания), Неопределено, КонецДня(Объект.ДатаОкончания)));
	ЗапросДепозит.УстановитьПараметр("Организация",   Объект.Организация);
	//ЗапросДепозит.УстановитьПараметр("Валюта",        ?(НЕ ЗначениеЗаполнено(ВалютаДокумента) или (ВалютаДокумента = мВалютаРегламентированногоУчета), неопределено,ВалютаДокумента));
	
	Объект.Депозит = 0;
	ВыборкаДепозит = ЗапросДепозит.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДепозит.Следующий() цикл
		Объект.Депозит = Объект.Депозит + ВыборкаДепозит.СуммаОстатокКт;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДаннымОрганизации() Экспорт
	
	ТабЗнач = Объект.ПоДаннымОрганизации.Выгрузить();
	
	ТабЗнач.Колонки.Дебет.Имя  = "КредитК";
	ТабЗнач.Колонки.Кредит.Имя = "Дебет";
	ТабЗнач.Колонки.КредитК.Имя= "Кредит";
	
	Для каждого СтрокаДвижений Из ТабЗнач Цикл
		Представление = СокрЛП(СтрокаДвижений.Представление);
		Если Лев(Представление, 8) = "Передано" Тогда
			Представление = "Принято" + Сред(Представление, 9);
			
		ИначеЕсли Лев(Представление, 7) = "Принято" Тогда
			Представление = "Передано" + Сред(Представление, 8);
			
		ИначеЕсли Лев(Представление, 7) = "Продажа" Тогда
			Представление = "Приход" + Сред(Представление, 8);
			
		ИначеЕсли Лев(Представление, 6) = "Приход" Тогда
			Представление = "Продажа" + Сред(Представление, 7);
			
		ИначеЕсли Лев(Представление, 21) = "Корректировка продажи" Тогда
			Представление = "Корректировка прихода" + Сред(Представление, 22);
			
		ИначеЕсли Лев(Представление, 21) = "Корректировка прихода" Тогда
			Представление = "Корректировка продажи" + Сред(Представление, 22);
			
		КонецЕсли;
		СтрокаДвижений.Представление = Представление;
	КонецЦикла;
	
	Объект.ПоДаннымКонтрагента.Загрузить(ТабЗнач);
	
КонецПроцедуры

// Функция формирует список счетов (список значений), включая субсчета, входящие в иерархию.
//
// Параметры
//  ПланСчетов      - имя плана счетов
//  СчетаСтрокой    - строка, содержащая список кодов счетов, разделенных запятыми
//  ИсключитьГруппы - булево, исключать из массива счетов счета-группы или нет
//	СообщатьОбОтсутствииСчета - булево, выдавать ли сообщение, если счет с таким кодом не найден
//
// Возвращаемое значение
//  Список значений, содержащий счета выбранного плана счетов
//
&НаСервере
Функция УПП_БухгалтерскийУчет_ПолучитьМассивСчетов(ИмяПланаСчетов, Знач СчетаСтрокой = "", ИсключитьГруппы = Ложь, СообщатьОбОтсутствииСчета = Истина) Экспорт

	МассивСчетов = Новый Массив;
	
	// Преобразуем переданную строку в массив ссылок на план счетов
	СчетаСтрокой = СтрЗаменить(СчетаСтрокой, " ", "");
	Пока Не ПустаяСтрока(СчетаСтрокой) Цикл

		// Определим код очередного счета
		Поз = Найти(СчетаСтрокой, ",");
		Если Поз = 0 Тогда
			Код = СчетаСтрокой;
			СчетаСтрокой = "";
		Иначе
			Код = Лев(СчетаСтрокой, Поз - 1);
			СчетаСтрокой = Сред(СчетаСтрокой, Поз + 1);
		КонецЕсли;

		// Определим ссылку на счет по коду
		Счет = ПланыСчетов[ИмяПланаСчетов].НайтиПоКоду(Код);
		Если НЕ ЗначениеЗаполнено(Счет) Тогда
			Если СообщатьОбОтсутствииСчета Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Не найден счет с кодом """ + Код + """ (план счетов - " + ИмяПланаСчетов + ")");
			КонецЕсли;
			Продолжить;
		КонецЕсли;

		МассивСчетов.Добавить(Счет);

	КонецЦикла;

	// Подготовим текст запроса
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПланСчетов.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.%ПланСчетов% КАК ПланСчетов
	|ГДЕ
	|	ПланСчетов.Ссылка В ИЕРАРХИИ (&МассивСчетов) И %ВключатьГруппы%
	|";
	
	Если ИсключитьГруппы Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВключатьГруппы%", 
		"ПланСчетов.Ссылка НЕ В (
		| 	ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|		ПланСчетов.Родитель
		|	ИЗ
		|		ПланСчетов.%ПланСчетов% КАК ПланСчетов
		|	ГДЕ
		|		ПланСчетов.Ссылка В ИЕРАРХИИ (&МассивСчетов)
		|)");
		
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВключатьГруппы%", "Истина");
		
	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПланСчетов%", ИмяПланаСчетов);
	
	Запрос = Новый Запрос(ТекстЗапроса);

	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);

	СписокЗначенийСчетов = Новый СписокЗначений;
	СписокЗначенийСчетов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет"));

	Возврат СписокЗначенийСчетов;

КонецФункции //ПолучитьМассивСчетов()

&НаСервере
Функция ЭтоДокументДвиженияДенежныхСредств(ДокументСсылка)
	
	ТипДокумента = ТипЗнч(ДокументСсылка);
	
	Результат = 
	ТипДокумента = Тип("ДокументСсылка.АвансовыйОтчет")
	//ИЛИ ТипДокумента = Тип("ДокументСсылка.АккредитивПереданный")
	//ИЛИ ТипДокумента = Тип("ДокументСсылка.АккредитивПолученный")
	ИЛИ ТипДокумента = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств")
	ИЛИ ТипДокумента = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств")
	//ИЛИ ТипДокумента = Тип("ДокументСсылка.ИнкассовоеПоручениеПереданное")
	//ИЛИ ТипДокумента = Тип("ДокументСсылка.ИнкассовоеПоручениеПолученное")
	//ИЛИ ТипДокумента = Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой")
	ИЛИ ТипДокумента = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте")
	ИЛИ ТипДокумента = Тип("ДокументСсылка.ОперацияПоЯндексКассе")
	ИЛИ ТипДокумента = Тип("ДокументСсылка.ОтчетБанкаПоОперациямЭквайринга")
	//ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")
	//ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее")
	//ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежноеТребованиеВыставленное")
	//ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежноеТребованиеПолученное")
	//ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств")
	//ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств")
	ИЛИ ТипДокумента = Тип("ДокументСсылка.СообщениеОбменСБанками")
	ИЛИ ТипДокумента = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
	ИЛИ ТипДокумента = Тип("ДокументСсылка.РасходныйКассовыйОрдер");
	
	Возврат Результат;
	
КонецФункции 

// Получение метаданных по документам
// Если метаданные по данному виду документа получались ранее - получаем из соответствия,
// иначе получаем метаданные и дополняем соответствие
// Параметры
//  ДокументСсылка  – <ДокументСсылка> – ссылка на документ
//
// Возвращаемое значение:
//   Структура метаданных
//
&НаСервере
Функция ПолучитьМетаданныеДокумента(ДокументСсылка)
	
	ТипДокумента = ТипЗнч(ДокументСсылка);
	Если МетаданныеПоДокументам[ТипДокумента] = Неопределено Тогда
		Если Документы.ТипВсеСсылки().СодержитТип(ТипДокумента) Тогда
			МетаданныеПоДокументам.Вставить(ТипДокумента, ДокументСсылка.Метаданные());
		Иначе
			МетаданныеПоДокументам.Вставить(ТипДокумента, Неопределено);
		КонецЕсли;
	КонецЕсли; 
	
	Возврат МетаданныеПоДокументам[ТипДокумента];
	
КонецФункции // ПолучитьМетаданныеДокумента()

МетаданныеПоДокументам = Новый Соответствие();
