#Область ОбработчикиСобытийФормы 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.НайтиПоРеквизиту("ИдентификаторДляФормул", "гф_РассылкаРасчетныхЛистков");
	
	ПрефиксПароля = ПланыВидовХарактеристик.гф_ГлобальныеЗначения.гф_ГлобальныеЗначенияПарольДляРЛ.Значение;

    СхемаКомпоновки = РеквизитФормыВЗначение("Объект").ПолучитьМакет("СхемаКомпоновки");    
	
	АдресСхемыКомпоновки = ПоместитьВоВременноеХранилище(СхемаКомпоновки , УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновки);
	
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Период.Вариант		= ВариантСтандартногоПериода.ПроизвольныйПериод;
	Период.ДатаНачала	= ПериодВариант.ДатаНачала;
	Период.ДатаОкончания	= ПериодВариант.ДатаОкончания;
	
	ТекстПериода = ПредставлениеПериода(Период.ДатаНачала, Период.ДатаОкончания, "ФП=Истина");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы  

&НаКлиенте
Процедура ПериодВариантПриИзменении(Элемент)   
	
	Период.Вариант		= ВариантСтандартногоПериода.ПроизвольныйПериод;
	Период.ДатаНачала	= ПериодВариант.ДатаНачала;
	Период.ДатаОкончания	= ПериодВариант.ДатаОкончания;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)      
	
	ПериодВариант.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыРасчетныеЛистки  

&НаКлиенте
Процедура РасчетныеЛисткиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.РасчетныеЛистки.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;	
	
	ПоказатьЗначение(, ТекущиеДанные.ФизическоеЛицо);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетныеЛисткиПриАктивизацииСтроки(Элемент)
	
	Для Каждого Область Из ПечатаемыйДокумент.Области Цикл
	
		Область.Обвести();
		Область.ЦветФона = Новый Цвет;
	
	КонецЦикла;
	
	ТекущиеДанные = Элементы.РасчетныеЛистки.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;            
	
	ЛинияВыделенная = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	
	ЕстьЛистки = Ложь;
		
	Для Каждого Область Из ПечатаемыйДокумент.Области Цикл
		
		ПерваяОбласть = Истина;  
		
		Если Сред(Область.Имя, 18, 32) = ТекущиеДанные.УИД Тогда   
			
			Если ПерваяОбласть Тогда
			
				Элементы.ПечатаемыйДокумент.ТекущаяОбласть = Область;   
				
				ПерваяОбласть = Ложь;
				
			КонецЕсли;	    
			
			ЕстьЛистки = Истина;
			
			Область.Обвести(ЛинияВыделенная, ЛинияВыделенная, ЛинияВыделенная, ЛинияВыделенная);
			Область.ЦветФона = WebЦвета.НейтральноЗеленый;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Если Не ЕстьЛистки Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекущиеДанные.Наименование + ". Нет расчетного листка");
		
	КонецЕсли;	
	
КонецПроцедуры


#КонецОбласти   

#Область ОбработчикиКомандФормы

&НаСервере
Процедура ПоместитьНастройкиВХранилище()    
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	Если ЭтоАдресВременногоХранилища(АдресНастроек) Тогда
		
		ПоместитьВоВременноеХранилище(Настройки, АдресНастроек);
		
	Иначе
		
		АдресНастроек = ПоместитьВоВременноеХранилище(Настройки, УникальныйИдентификатор);
	
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда) 
	
	ПоместитьНастройкиВХранилище();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкиЗавершение", ЭтотОбъект); 
	
	ПараметрыОткрытия = Новый Структура; 
	
	ПараметрыОткрытия.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	ПараметрыОткрытия.Вставить("АдресНастроек", АдресНастроек);
	
	ИмяФормыНастроек = СтрЗаменить(ЭтотОбъект.ИмяФормы, ".Форма.Форма", ".Форма.ФормаНастроек"); 
	
	ОткрытьФорму(ИмяФормыНастроек, ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры   

&НаСервере
Процедура ЗагрузитьНастройкиИзХранилища()

	КомпоновщикНастроек.ЗагрузитьНастройки(ПолучитьИзВременногоХранилища(АдресНастроек));
	
КонецПроцедуры
	
&НаКлиенте
Процедура НастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;	   
	
	ЗагрузитьНастройкиИзХранилища();
	
	УчетнаяЗапись	= Результат.УчетнаяЗапись;   

КонецПроцедуры

&НаСервере
Процедура СформироватьНаСервере()  
	
	СхемаКомпоновки     = РеквизитФормыВЗначение("Объект").ПолучитьМакет("СхемаКомпоновки");
	НастройкиКомпоновки = КомпоновщикНастроек.ПолучитьНастройки();
	
	НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаНачала",		Период.ДатаНачала);	
	НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаОкончания",	Период.ДатаОкончания);	
	
	КомпоновщикМакета 	= Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки 	= КомпоновщикМакета.Выполнить(СхемаКомпоновки, НастройкиКомпоновки,,,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ТаблицаФизЛиц = Новый ТаблицаЗначений;
	
	ПроцессорВывода.УстановитьОбъект(ТаблицаФизЛиц);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	РасчетныеЛистки.Очистить(); 
	ПечатаемыйДокумент.Очистить();
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Т.Организация КАК Организация,
	               |	Т.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	Т.ТабельныйНомер КАК ТабельныйНомер
	               |ПОМЕСТИТЬ ВТ_ФизическиеЛица
	               |ИЗ
	               |	&ТаблицаФизЛиц КАК Т
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ФизическиеЛица.Наименование КАК Наименование,
	               |	ФизическиеЛицаКонтактнаяИнформация.АдресЭП КАК ЭлектронныйАдрес,
	               |	ФизическиеЛица.СтраховойНомерПФР КАК СНИЛС,
	               |	ВТ_ФизическиеЛица.Организация КАК Организация,
	               |	ВТ_ФизическиеЛица.ТабельныйНомер КАК ТабельныйНомер,
	               |	Истина КАК Пометка
	               |ИЗ
	               |	ВТ_ФизическиеЛица КАК ВТ_ФизическиеЛица
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |		ПО ВТ_ФизическиеЛица.ФизическоеЛицо = ФизическиеЛица.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	               |		ПО ВТ_ФизическиеЛица.ФизическоеЛицо = ФизическиеЛицаКонтактнаяИнформация.Ссылка
	               |			И (ФизическиеЛицаКонтактнаяИнформация.Ссылка = ФизическиеЛица.Ссылка)
	               |			И (ФизическиеЛицаКонтактнаяИнформация.Вид = &ВидКонтактнойИнформации)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Наименование";    
	
	Запрос.Параметры.Вставить("ТаблицаФизЛиц", ТаблицаФизЛиц);
	Запрос.Параметры.Вставить("ВидКонтактнойИнформации", ВидКонтактнойИнформации);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;	 
	
	ТаблицаФизическихЛиц = Результат.Выгрузить();
	
	РасчетныеЛистки.Загрузить(ТаблицаФизическихЛиц);    
	
	ТаблицаОрганизаций = ТаблицаФизическихЛиц.Скопировать(, "Организация");
	
	ТаблицаОрганизаций.Свернуть("Организация");
	
	Для Каждого СтрокаОрганизации Из ТаблицаОрганизаций Цикл 
		
		Организация = СтрокаОрганизации.Организация;
		
		Отбор = Новый Структура;
		
		Отбор.Вставить("Организация", Организация);
		
		РасчетныеЛисткиПоОрганизации = РасчетныеЛистки.НайтиСтроки(Отбор);
		
		МассивОбъектов	= Новый Массив;
		ОбъектыПечати	= Новый Массив;
		
		Для Каждого Строка Из РасчетныеЛисткиПоОрганизации Цикл
			
			МассивОбъектов.Добавить(Строка.ФизическоеЛицо);
			
			Строка.УИД = СтрЗаменить(Строка(Строка.ФизическоеЛицо.УникальныйИдентификатор()), "-", "");
			
		КонецЦикла;	
		
		ПараметрыСтраницы = Новый Структура;
		
		УстановитьПривилегированныйРежим(Истина);
		
		ОтчетРасчетныйЛисток = ЗарплатаКадрыОтчеты.ОтчетРасчетныйЛисток();
		
		ОтчетРасчетныйЛисток.КомпоновщикНастроек.ПользовательскиеНастройки.
		ДополнительныеСвойства.Вставить("МакетПечатнойФормы", ПолучитьОбщийМакет("гф_ПФ_MXL_РасчетныйЛистокНастраиваемыйДляРассылки"));
		
		ДокументРезультат = ЗарплатаКадрыОтчеты.ДанныеРасчетныхЛистков(
		МассивОбъектов, Организация, Период.ДатаНачала, Период.ДатаОкончания, ОтчетРасчетныйЛисток, ПараметрыСтраницы).ДокументРезультат;  
		
		УстановитьПривилегированныйРежим(Ложь);
		
		ПечатаемыйДокумент.Вывести(ДокументРезультат);
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	
	СформироватьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьНаСервере(МассивПолучателей) 
	
	ИмяКаталога = КаталогВременныхФайлов() + "\гф_РассылкаЛистков";
	
	СоздатьКаталог(ИмяКаталога);
	
	Для Каждого Элемент Из МассивПолучателей Цикл
		
		УдалитьФайлы(ИмяКаталога + "\*.*");
		
		Отбор = Новый Структура("ФизическоеЛицо", Элемент.ФизическоеЛицо);
		
		Строки = РасчетныеЛистки.НайтиСтроки(Отбор);
		
		Если Не Строки.Количество() Тогда
			
			Продолжить;	 
		
		КонецЕсли;
		
		Строка = Строки[0];  
		
		Если НачалоМесяца(Период.ДатаНачала) = НачалоМесяца(Период.ДатаОкончания) Тогда
			
			ПериодСтрокой = Формат(Период.ДатаНачала, "ДФ=MMMM_yyyy");
			
		Иначе
			
			ПериодСтрокой = ПредставлениеПериода(Период.ДатаНачала, Период.ДатаОкончания, "ФП=Истина");
			
		КонецЕсли;	
		
		ИмяФайлаЗип = ИмяКаталога+ "\" 
				+ "Расчетный листок_" 
				+ СокрЛП(Строка.ФизическоеЛицо.Код) + "_" 
				+ ПериодСтрокой + ".zip";    
				
		СНИЛС = СтрЗаменить(Строка.СНИЛС," ", "");		
		
		ЗаписьZipФайла = Новый ЗаписьZipФайла(ИмяФайлаЗип, СокрЛП(ПрефиксПароля) + Прав(СНИЛС, 5)); 		
		
		Для Каждого Область Из ПечатаемыйДокумент.Области Цикл
		
			Если Сред(Область.Имя, 18, 32) = Строка.УИД Тогда   
			
				ТабличныйДокумент = ПечатаемыйДокумент.ПолучитьОбласть(Область.Имя); 
			
				ИмяФайла = ИмяКаталога+ "\" 
				+ "Расчетный листок_" 
				+ СокрЛП(Строка.ФизическоеЛицо.Код) + "_" 
				+ Сред(Область.Имя,9,6) + ".pdf";
				
				ТабличныйДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.PDF);
				
				ЗаписьZipФайла.Добавить(ИмяФайла, РежимСохраненияПутейZip.НеСохранятьПути);
				
			КонецЕсли;	
		
		КонецЦикла;	  
		
		ЗаписьZipФайла.Записать(); 
		
		Получатели = Новый Массив;
		
		Кому = Новый Структура("Адрес, Представление", Строка.ЭлектронныйАдрес, "");
		
		Получатели.Добавить(Кому);
		
		ПараметрыПисьма = Новый Структура;
		ПараметрыПисьма.Вставить("Кому", Получатели);													
		ПараметрыПисьма.Вставить("ПолучателиСообщения",Получатели);													
		ПараметрыПисьма.Вставить("Тема", "Расчетный листок за " + ПериодСтрокой);
		ПараметрыПисьма.Вставить("Тело", "Расчетный листок за " + ПериодСтрокой);
			
		Письмо = РаботаСПочтовымиСообщениями.ПодготовитьПисьмо(УчетнаяЗапись, ПараметрыПисьма);
		
		ФайлЗип = Новый Файл(ИмяФайлаЗип);
		
		ДанныеФайла = Новый ДвоичныеДанные(ИмяФайлаЗип);
		
		Письмо.Вложения.Добавить(ДанныеФайла, ФайлЗип.Имя);
		
		УстановитьПривилегированныйРежим(Истина);

		Попытка
			
			РаботаСПочтовымиСообщениями.ОтправитьПисьмо(УчетнаяЗапись, Письмо);   
			
			Запись = РегистрыСведений.гф_ЛогРассылкиРасчетныхЛистков.СоздатьМенеджерЗаписи();
			
			Запись.ТабельныйНомер = Строка.ТабельныйНомер;
			Запись.ПериодНачисления = ПериодСтрокой;
			Запись.НаименованиеФайла = ФайлЗип.Имя;
			Запись.ЭлектронныйАдресОтправителя	= УчетнаяЗапись.АдресЭлектроннойПочты;
			Запись.ЭлектронныйАдресПолучателя = Строка.ЭлектронныйАдрес;
			Запись.ДатаОтправки = ТекущаяДатаСеанса();
			
			Запись.Записать(Истина);
			
		Исключение   
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Строка.Наименование + ": " 
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки; 
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЦикла;	
	
	УдалитьФайлы(ИмяКаталога + "\*.*");
	УдалитьФайлы(ИмяКаталога);
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		
		ПоказатьПредупреждение(, "Не заполнена учетная запись электронной почты");
		
		Возврат;
		
	КонецЕсли;	
	
	МассивПолучателей = Новый Массив;
	
	Для Каждого Строка Из РасчетныеЛистки Цикл
		
		Если Не Строка.Пометка Тогда
			
			Продолжить;
			
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(Строка.ЭлектронныйАдрес) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Строка.Наименование 
			+ ": адрес получателя не указан, расчетный листок отправен не будет");
			
			Продолжить;
			
		КонецЕсли;	                 
		
		Если Не ЗначениеЗаполнено(Строка.СНИЛС) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Строка.Наименование 
			+ ": СНИЛС получателя не указан, расчетный листок отправен не будет");
			
			Продолжить;
			
		КонецЕсли;	                 
		
		ЕстьЛисток = Ложь;
		
		Для Каждого Область Из ПечатаемыйДокумент.Области Цикл
			
			Если Сред(Область.Имя, 18, 32) = Строка.УИД Тогда   
				
				ЕстьЛисток = Истина;
				
				Прервать;
				
			КонецЕсли;	
			
		КонецЦикла;	
		
		Если Не ЕстьЛисток Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Строка.Наименование 
			+ ": начислений не было. Расчетный листок отсутствует");
			
			Продолжить;
			
		КонецЕсли;	   
		
		Получатель = Новый Структура("ФизическоеЛицо,ЭлектронныйАдрес", Строка.ФизическоеЛицо, Строка.ЭлектронныйАдрес);
		
		МассивПолучателей.Добавить(Получатель);
		
	КонецЦикла;	                               
	
	Если Не МассивПолучателей.Количество() Тогда
		
		ПоказатьПредупреждение(, "Нет данных для отправки");
		
		Возврат;
		
	КонецЕсли;	 
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьПродолжение", ЭтотОбъект, МассивПолучателей);
	
	ПараметрыОткрытия = Новый Структура; 
	
	ПараметрыОткрытия.Вставить("МассивПолучателей",	МассивПолучателей);
	
	ИмяФормыОтправки = СтрЗаменить(ЭтотОбъект.ИмяФормы, ".Форма.Форма", ".Форма.ФормаОтправки"); 
	
	ОткрытьФорму(ИмяФормыОтправки, ПараметрыОткрытия, 
	ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;	  
	
	ОтправитьНаСервере(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(Команда)
	
	Пометка = Команда.Имя = "УстановитьПометки";
	
	Для Каждого Строка Из РасчетныеЛистки Цикл
		
		Строка.Пометка = Пометка;
		
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

