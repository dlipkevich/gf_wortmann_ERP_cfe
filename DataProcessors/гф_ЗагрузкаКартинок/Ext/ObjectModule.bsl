#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// #wortmann { 
// Загружает картинки в спр. НоменклатураПрисоединенныеФайлы из полученного массива файлов. 
// Галфинд_Домнышева 2022/11/20
//
// Параметры:
// МассивФайлов - Массив структур с данными помещенных файлов для загрузки
//
// Возвращаемое значение:
// ИменаЗагруженныхФайлов - Массив - массив из имен загруженных файлов.
//
Функция ЗагрузитьКартинкиИзКаталога(МассивФайлов) Экспорт
	
	ИменаЗагруженныхФайлов = Новый Массив;
	
	Если Не ЗначениеЗаполнено(МассивФайлов) Тогда
		Возврат ИменаЗагруженныхФайлов;
	КонецЕсли;
	
	ЗапросПрисоединенныхФайлов = Новый Запрос( 
	"ВЫБРАТЬ
	|	НоменклатураПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|	НоменклатураПрисоединенныеФайлы.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
	|ГДЕ
	|	НоменклатураПрисоединенныеФайлы.Наименование = &Наименование
	|	И НоменклатураПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПометкаУдаления УБЫВ");
	
	ЗапросНоменклатуры = новый Запрос(
	"ВЫБРАТЬ
		|	ДополнительныеСведения.Объект КАК Ссылка,
		|	ДополнительныеСведения.Объект.ФайлКартинки КАК ФайлКартинки,
		|	ДополнительныеСведения.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Объект ССЫЛКА Справочник.Номенклатура
		|	И ДополнительныеСведения.Свойство = &Свойство
		|	И ДополнительныеСведения.Значение = &Значение");
	ЗапросНоменклатуры.УстановитьПараметр("Свойство", НайтиДополнительноеСвойствоПоИмени());
	
	Для Каждого Файл Из МассивФайлов Цикл 
		
		ЗапросНоменклатуры.УстановитьПараметр("Значение", Файл.Имя);
		
		ВыборкаНоменклатуры = ЗапросНоменклатуры.Выполнить().Выбрать();
		Если ВыборкаНоменклатуры.Следующий() Тогда
			
			НоменклатураСсылка = ВыборкаНоменклатуры["Ссылка"];
			
			ПрисоединенныйФайл = Неопределено;
			
			ЗапросПрисоединенныхФайлов.УстановитьПараметр("Наименование", Файл.ИмяБезРасширения);
			ЗапросПрисоединенныхФайлов.УстановитьПараметр("ВладелецФайла", НоменклатураСсылка);
			ВыборкаПрисоединенныхФайлов = ЗапросПрисоединенныхФайлов.Выполнить().Выбрать();
			Пока ВыборкаПрисоединенныхФайлов.Следующий() Цикл
				Если Не ВыборкаПрисоединенныхФайлов["ПометкаУдаления"] Тогда
					ПрисоединенныйФайл = ВыборкаПрисоединенныхФайлов["Ссылка"];	
				КонецЕсли;
			КонецЦикла;
			
			Если Не ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
				
				ПараметрыФайла = Новый Структура("Автор, ВладелецФайлов, ВремяИзмененияУниверсальное, 
				|ГруппаФайлов, ИмяБезРасширения, РасширениеБезТочки, Служебный");
				ПараметрыФайла.Автор = "";
				ПараметрыФайла.ВладелецФайлов = НоменклатураСсылка;
				ПараметрыФайла.ВремяИзмененияУниверсальное = Файл.ВремяИзменения; 
				ПараметрыФайла.ГруппаФайлов = "";
				ПараметрыФайла.ИмяБезРасширения = Файл.ИмяБезРасширения;
				ПараметрыФайла.РасширениеБезТочки = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(Файл.Расширение);
				ПараметрыФайла.Служебный = Ложь;
				
				ПрисоединенныйФайл = РаботаСФайламиСлужебныйВызовСервера.ДобавитьФайл(ПараметрыФайла, Файл.Адрес, "");
				
			КонецЕсли;
				
			Если Не ЗначениеЗаполнено(ВыборкаНоменклатуры["ФайлКартинки"])
				Или ВыборкаНоменклатуры["ФайлКартинки"] <> ПрисоединенныйФайл Тогда 
			
				НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
				НоменклатураОбъект.ФайлКартинки = ПрисоединенныйФайл;
				НоменклатураОбъект.Записать();
				
				Сообщение = "Загружена картинка - " + ПрисоединенныйФайл;
				ЗаписатьВПротокол(Сообщение);
				
			Иначе 
				
				Сообщение = "Такая картинка уже есть: " + Файл.ИмяБезРасширения;
				ЗаписатьВПротокол(Сообщение, 2);
				
			КонецЕсли;
			
			ИменаЗагруженныхФайлов.Добавить(Файл.Имя);
			
		Иначе 
			
			Сообщение = "Не найдено название картинки: " + Файл.ИмяБезРасширения + " в дополнительных сведениях Номенклатуры.";
			ЗаписатьВПротокол(Сообщение, 3);
			
		КонецЕсли;
	КонецЦикла;
		
	Возврат ИменаЗагруженныхФайлов;
	
КонецФункции// } #wortmann

// #wortmann { 
// Загружает картинки с SFTP сервера. 
// Галфинд_Домнышева 2022/11/20
//
Процедура ЗагрузитьКартинкиSFTPСервера() Экспорт
	
	ЗаписатьВПротокол("Начало процедуры загрузки картинок номенклатуры с ftp-сервера");
	
	НастройкиFTPСоединения = _омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначениеFTP("FTP_НастройкиДляЗагрузкиКартинок");
	
	Если НастройкиFTPСоединения = Неопределено Тогда
		Сообщение = "Не заданы настройки подключния к ftp-серверу.";
		ЗаписатьВПротокол(Сообщение, 4);
		Возврат;
	КонецЕсли; 
	
	Отказ = Ложь;
	session = _омОбщегоНазначенияВызовСервера.ПолучитьСоединениеSFTP(НастройкиFTPСоединения, Отказ);
	
	Если session = Неопределено Тогда
		Сообщение = "Не удалось установить соединение, загрузка прекращена.";
		ЗаписатьВПротокол(Сообщение, 4);
		Возврат;
	КонецЕсли;
	
	ВременныйКаталог = КаталогВременныхФайлов();
	ДлинаПутиКаталога = СтрДлина(ВременныйКаталог);
	
    КаталогНаФТП = НастройкиFTPСоединения.Каталог;
	ПредставлениеКаталогаНаФТП = "/" + КаталогНаФТП + "/"; 
	
	//ЗАГРУЗКА
	Попытка 
		
		ЗаписатьВПротокол("GetFiles...");
		
        //Получаем файлы с удаленного сервера
        transferResult = session.GetFiles(КаталогНаФТП, ВременныйКаталог+"*");
        
        //Проверяем возможные ошибки
        transferResult.Check();
        
        //Обрабатываем результат
		ИменаПолученныхФайлов = Новый Массив;
		Для каждого ПолученныйФайл Из transferResult.Transfers Цикл 
			ПредставлениеФайла = ПолученныйФайл.FileName;
			ИмяФайла = СтрЗаменить(ПредставлениеФайла, ПредставлениеКаталогаНаФТП, "");
			ИменаПолученныхФайлов.Добавить(ИмяФайла);
		КонецЦикла; 
		
		ДанныеДляЗагрузки = Новый Массив;
		
		НайденныеФайлы = НайтиФайлы(ВременныйКаталог, "*.jpg", Истина);
		Для Каждого ТекущийФайл Из НайденныеФайлы Цикл
			
			Если ИменаПолученныхФайлов.Найти(ТекущийФайл.Имя) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыФайла = Новый Структура("Адрес, Имя, ПолноеИмя, ВремяИзменения, ИмяБезРасширения, Расширение, Размер, Путь");
			
			ДвоичныеДанные = Новый ДвоичныеДанные(ТекущийФайл.ПолноеИмя);
			АдресВВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
			ПараметрыФайла.Адрес = АдресВВременномХранилище;
			
			ПараметрыФайла.Имя              = ТекущийФайл.Имя;
			ПараметрыФайла.ПолноеИмя        = ТекущийФайл.ПолноеИмя;
			ПараметрыФайла.ВремяИзменения   = ТекущийФайл.ПолучитьУниверсальноеВремяИзменения();
	        ПараметрыФайла.ИмяБезРасширения = ТекущийФайл.ИмяБезРасширения;
			ПараметрыФайла.Размер           = ТекущийФайл.Размер(); 
			ПараметрыФайла.Путь             = ТекущийФайл.Путь;
			ПараметрыФайла.Расширение = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ТекущийФайл.Расширение);
			
			ДанныеДляЗагрузки.Добавить(ПараметрыФайла);
			
		КонецЦикла; 
		
		Если Не ЗначениеЗаполнено(ДанныеДляЗагрузки) Тогда
			ЗаписатьВПротокол("Файлы картинок в каталоге не найдены. Процедура загрузки завершена.", 2);	
		    session.Dispose();
			Возврат;
		КонецЕсли;
		
		ИменаЗагруженныхФайлов = ЗагрузитьКартинкиИзКаталога(ДанныеДляЗагрузки);
		
		// Удаляем файлы из верменного каталога
		Для Каждого ИмяФайла Из ИменаПолученныхФайлов Цикл 
			ПолноеИмяФайла = ВременныйКаталог + КаталогНаФТП + "\" + ИмяФайла;
			УдалитьФайлы(ПолноеИмяФайла);	
		КонецЦикла;
		
		// Удаляем загруженные в базу файлы
		Для Каждого ИмяФайла Из ИменаЗагруженныхФайлов Цикл 
			
			ПредставлениеФайла = ПредставлениеКаталогаНаФТП + ИмяФайла; 
			session.RemoveFiles(ПредставлениеФайла);
			
			Сообщение = "Удален файл: "+ ПредставлениеФайла;
			ЗаписатьВПротокол(Сообщение, 2);
			
		КонецЦикла;
        
	Исключение 
		Сообщение = "Ошибка получения файлов картинок. Описание ошибки: "+ ОписаниеОшибки();
		ЗаписатьВПротокол(Сообщение, 4);
		Возврат;
	КонецПопытки;
	
	//Разрываем соединение
    session.Dispose();  
	
	ЗаписатьВПротокол("Загрузка картинок завершена");
		
КонецПроцедуры// } #wortmann

// #wortmann { 
// Создает запись в ЖурналРегистрации и выдает сообщение пользователю 
// Галфинд_Домнышева 2022/11/20
//
// Параметры:
// Сообщение - Строка - сообщение об ошибки
// Уровень - Число - УровеньЖурналаРегистрации 
// ИмяСобытия - Строка
Процедура ЗаписатьВПротокол(Сообщение, Уровень = 1, ИмяСобытия = "Загрузка картинок номенклатуры")
	
	Если Уровень = 4 Тогда 
		УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
	ИначеЕсли Уровень = 3 Тогда	
		УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение;
	ИначеЕсли Уровень = 2 Тогда	
		УровеньЖурнала = УровеньЖурналаРегистрации.Примечание;
	Иначе
		УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурнала, , , Сообщение);
	ОбщегоНазначения.СообщитьПользователю(Формат(ТекущаяДатаСеанса(), "ДЛФ=T") + ". " + Сообщение);
	
КонецПроцедуры// } #wortmann

// #wortmann { 
// Находит ссылку на доплнительное свойство гф_НоменклатураPicture_Name 
// Галфинд_Домнышева 2022/11/20
//
Функция НайтиДополнительноеСвойствоПоИмени()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
		|ГДЕ
		|	ДополнительныеРеквизитыИСведения.Имя = &Имя";
	
	Запрос.УстановитьПараметр("Имя", "гф_НоменклатураPicture_Name");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции// } #wortmann

// #wortmann { 
// Загружает картинки с FTP сервера. 
// Галфинд_Домнышева 2022/11/20
//
Процедура ЗагрузитьКартинкиFTPСервера() Экспорт
	
	ЗаписатьВПротокол("Начало процедуры загрузки картинок номенклатуры с ftp-сервера");
	
	НастройкиFTPСоединения = _омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначениеFTP("FTP_НастройкиДляЗагрузкиКартинок");
	
	Если НастройкиFTPСоединения = Неопределено Тогда
		Сообщение = "Не заданы настройки подключния к ftp-серверу.";
		ЗаписатьВПротокол(Сообщение, 4);
		Возврат;
	КонецЕсли; 
	
	КаталогНаФТП = НастройкиFTPСоединения.Каталог;
	
	Попытка
		
		Соединение = _омОбщегоНазначенияВызовСервера.гф_ПолучитьСоединение(НастройкиFTPСоединения);
		НайденныеФайлы = Соединение.НайтиФайлы(НастройкиFTPСоединения.Каталог, "*.jpg");
		ДанныеДляЗагрузки = Новый Массив;

		Для Каждого ТекущийФайл Из НайденныеФайлы Цикл
						
			ПараметрыФайла = Новый Структура("Адрес, Имя, ПолноеИмя, ВремяИзменения, ИмяБезРасширения, Расширение, Размер, Путь");
			
			ДвоичныеДанные = Новый ДвоичныеДанные(ТекущийФайл.ПолноеИмя);
			АдресВВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
			ПараметрыФайла.Адрес = АдресВВременномХранилище;
			
			ПараметрыФайла.Имя              = ТекущийФайл.Имя;
			ПараметрыФайла.ПолноеИмя        = ТекущийФайл.ПолноеИмя;
			ПараметрыФайла.ВремяИзменения   = ТекущийФайл.ПолучитьУниверсальноеВремяИзменения();
	        ПараметрыФайла.ИмяБезРасширения = ТекущийФайл.ИмяБезРасширения;
			ПараметрыФайла.Размер           = ТекущийФайл.Размер(); 
			ПараметрыФайла.Путь             = ТекущийФайл.Путь;
			ПараметрыФайла.Расширение = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ТекущийФайл.Расширение);
			
			ДанныеДляЗагрузки.Добавить(ПараметрыФайла);
			
		КонецЦикла; 
		
		Если Не ЗначениеЗаполнено(ДанныеДляЗагрузки) Тогда
			ЗаписатьВПротокол("Файлы картинок в каталоге не найдены. Процедура загрузки завершена.", 2);	
			Возврат;
		КонецЕсли;
		
		ИменаЗагруженныхФайлов = ЗагрузитьКартинкиИзКаталога(ДанныеДляЗагрузки);

		Если ИменаЗагруженныхФайлов.Количество() > 0 Тогда
			
			КаталогПриемник = _омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначениеFTP("гф_КаталогЗагруженныхКартинок");
			
			Для Каждого Стр Из НайденныеФайлы Цикл
				ФайлНаДиске = Новый Файл(КаталогПриемник + Стр.Имя);
				ИмяФайла = КаталогПриемник + Стр.Имя;
				Соединение.Получить(Стр.ПолноеИмя, ИмяФайла);
				Если ФайлНаДиске.Существует() Тогда // Файл принят
					Сообщить("Принят файл " + ФайлНаДиске.ПолноеИмя);
					// Перемещаем полученный файл в каталог резервных копий на FTP-сервере
					FTPФайлРезернойКопии = КаталогНаФТП+"bak/"+Стр.Имя;        
					Соединение.Переместить(КаталогНаФТП + Стр.Имя, FTPФайлРезернойКопии);
					КопияФайла = Соединение.НайтиФайлы(FTPФайлРезернойКопии);
					Если КопияФайла.Количество()=0 Тогда
						Сообщить("Резервная копия "+FTPФайлРезернойКопии+ " не создана!!!");
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе    
			Сообщение = "В указанном FTP каталоге нет файлов!";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ТекущаяДата(), "ДЛФ=T") + ". " + Сообщение);
		КонецЕсли;             
	Исключение
		Сообщение = "Ошибка получения файлов картинок. Описание ошибки: "+ ОписаниеОшибки();
		ЗаписатьВПротокол(Сообщение, 4);
		Возврат;
	КонецПопытки;        
	
	ЗаписатьВПротокол("Загрузка картинок завершена");
		
КонецПроцедуры// } #wortmann

// #wortmann { 
// Загружает картинки номенклатуры с FTP сервера. 
// Галфинд_Сакович 2024/03/22
//
Процедура ЗагрузкаКартинокНоменклатурыFTPСервера() Экспорт
	Отладка = Ложь;
	
	КлючГлобальникаFTP = "FTP_НастройкиДляЗагрузкиКартинок";
	
	НастройкиFTPСоединения = _омОбщегоНазначенияКлиентСервер.ПолучитьГлобальноеЗначениеFTP(КлючГлобальникаFTP);
	
	Если НастройкиFTPСоединения = Неопределено 
		ИЛИ НастройкиFTPСоединения.Сервер = "" Тогда
		Сообщение = "Не заданы настройки подключния к ftp-серверу.";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ТекущаяДата(), "ДЛФ=T") + ". " + Сообщение);
		Возврат;
	КонецЕсли;
	
	IPCервера = НастройкиFTPСоединения.Сервер;
	Порт=НастройкиFTPСоединения.Порт;
	Пользователь=НастройкиFTPСоединения.Пользователь;
	Пароль=НастройкиFTPСоединения.Пароль;
	ПассивноеСоединение = НастройкиFTPСоединения.ПассивноеСоединение;
	Таймаут = НастройкиFTPСоединения.Таймаут;
	
	ЭтоЗащищенноеСоединение = НастройкиFTPСоединения.SSL;
	Если ЭтоЗащищенноеСоединение Тогда
		СисИнфо = Новый СистемнаяИнформация();
		Если (СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86) 
			Или (СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64) Тогда
			СертификатКлиента = Новый СертификатКлиентаWindows();
			СертификатыУдостоверяющихЦентров = Новый СертификатыУдостоверяющихЦентровWindows;
			ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(
			СертификатКлиента, 
			СертификатыУдостоверяющихЦентров);
		Иначе
			ЗащищенноеСоединение = Неопределено;
		КонецЕсли;
		
	Иначе
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Каталог) Тогда
		FTPКаталогИсточник = Каталог;
	ИначеЕсли ЗначениеЗаполнено(НастройкиFTPСоединения.Каталог) Тогда
		FTPКаталогИсточник = НастройкиFTPСоединения.Каталог;
	Иначе
		Сообщение = "Не заполнен каталог";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ТекущаяДата(), "ДЛФ=T") + ". " + Сообщение);
		Возврат;
	КонецЕсли;
	
	FTPКаталогИсточник = СтрЗаменить(FTPКаталогИсточник, "\", "/");
	Если СтрНачинаетсяС(FTPКаталогИсточник, "/") Тогда
		FTPКаталогИсточник = Сред(FTPКаталогИсточник, 2);
	КонецЕсли;
	Если СтрЗаканчиваетсяНа(FTPКаталогИсточник, "/") Тогда
		FTPКаталогИсточник = Лев(FTPКаталогИсточник, СтрДлина(FTPКаталогИсточник) - 1);
	КонецЕсли;
	
	Соединение = Новый FTPСоединение(IPCервера, Порт, Пользователь, Пароль, , ПассивноеСоединение, Таймаут, ЗащищенноеСоединение);
	
	Попытка
		МассивФайлов = Соединение.НайтиФайлы(FTPКаталогИсточник, "*.*");
	Исключение
		ПредствалениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначения.СообщитьПользователю("Не удалось получить файлы с с FTP-сервера по причине: " + 
		ПредствалениеОшибки);
		Возврат;
	КонецПопытки;
	
	Сообщение = "Начало процедуры загрузки картинок номенклатуры с ftp-сервера";
	ЗаписьЖурналаРегистрации("Примечание", УровеньЖурналаРегистрации.Примечание, ЭтотОбъект, ЭтотОбъект, Сообщение);
	
	ОбщегоНазначения.СообщитьПользователю(Формат(ТекущаяДатаСеанса(), "ДЛФ=T") + ". " + Сообщение);
	Если МассивФайлов.ВГраница() > -1 Тогда 
		ТаблицаФайлов = МассивФайловВТаблицуЗначений(МассивФайлов);
	Иначе
		ОбщегоНазначения.СообщитьПользователю(Формат(ТекущаяДата(), "ДЛФ=T") + ". " + 
		"Не найдены файлы на FTP-сервере.");
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	т.Имя КАК Имя,
	|	т.ИмяБезРасширения КАК ИмяБезРасширения,
	|	т.ПолноеИмя КАК ПолноеИмя,
	|	т.Путь КАК Путь,
	|	т.Расширение КАК Расширение,
	|	т.ВремяИзменения КАК ВремяИзменения,
	|	т.Размер КАК Размер,
	|	т.ЭтоФайл КАК ЭтоФайл
	|ПОМЕСТИТЬ вт_ТаблицаФайлов
	|ИЗ
	|	&ТаблицаФайлов КАК т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПВХ.Ссылка КАК СвойствоКартинка
	|ПОМЕСТИТЬ вт_свойства
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ПВХ
	|ГДЕ
	|	ПВХ.Имя = ""гф_НоменклатураPicture_Name""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.Номенклатура) КАК Объект,
	|	ВЫРАЗИТЬ(ДополнительныеСведения.Значение КАК СТРОКА(128)) КАК Значение
	|ПОМЕСТИТЬ вт_ДопСведения
	|ИЗ
	|	вт_свойства КАК свойства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ПО свойства.СвойствоКартинка = ДополнительныеСведения.Свойство
	|ГДЕ
	|	ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.Номенклатура) ЕСТЬ НЕ NULL 
	|	И НЕ (ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.Номенклатура)) = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Значение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ДопСведения.Объект КАК Объект,
	|	вт_ДопСведения.Объект.Артикул КАК Артикул,
	|	ВРЕГ(вт_ТаблицаФайлов.Имя) КАК Имя,
	|	вт_ТаблицаФайлов.ИмяБезРасширения КАК ИмяБезРасширения,
	|	вт_ТаблицаФайлов.ПолноеИмя КАК ПолноеИмя,
	|	вт_ТаблицаФайлов.Путь КАК Путь,
	|	вт_ТаблицаФайлов.Расширение КАК Расширение,
	|	вт_ТаблицаФайлов.ВремяИзменения КАК ВремяИзменения,
	|	вт_ТаблицаФайлов.Размер КАК Размер,
	|	вт_ТаблицаФайлов.ЭтоФайл КАК ЭтоФайл,
	|	вт_ДопСведения.Объект.гф_КартинкаЗагружена КАК КартинкаЗагружена,
	|	вт_ДопСведения.Объект.ФайлКартинки КАК ФайлКартинки,
	|	вт_ДопСведения.Объект.КоллекцияНоменклатуры КАК Сезон
	|ПОМЕСТИТЬ вт_ДанныеДляЗагрузки
	|ИЗ
	|	вт_ТаблицаФайлов КАК вт_ТаблицаФайлов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_ДопСведения КАК вт_ДопСведения
	|		ПО вт_ТаблицаФайлов.Имя = вт_ДопСведения.Значение
	|ГДЕ
	|	НЕ вт_ДопСведения.Объект.гф_КартинкаЗагружена";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТаблицаФайлов", ТаблицаФайлов);
	
	ПакетРезультатов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	тзДанныеДляЗагрузки = ПакетРезультатов[3].Выгрузить();
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("bvlg");
	ИмяВременногоКаталога = КаталогВременныхФайлов();
	//Возврат; // отладка
	Если Отладка Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Для каждого стрТз Из тзДанныеДляЗагрузки Цикл
		
		Если стрТЗ["ЭтоФайл"] Тогда
			ХранитьФайлыВТомах = Константы.ХранитьФайлыВТомахНаДиске.Получить();
			Создатель = Пользователи.АвторизованныйПользователь();
			Соединение.Получить(стрТз["ПолноеИмя"], ИмяВременногоФайла);
			обФайлКартинки = Справочники.НоменклатураПрисоединенныеФайлы.СоздатьЭлемент();
			обФайлКартинки.Автор = Создатель;
			обФайлКартинки.Изменил = Создатель;
			обФайлКартинки.ВладелецФайла = стрТЗ["Объект"];
			обФайлКартинки.ДатаМодификацииУниверсальная = НачалоДня(Дата(стрТЗ["ВремяИзменения"]));
			обФайлКартинки.ДатаСоздания = ТекущаяДатаСеанса();
			
			обФайлКартинки.ИндексКартинки =
			РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(стрТЗ["Расширение"]);
			обФайлКартинки.Размер = стрТз["Размер"];
			обФайлКартинки.Наименование = "" + стрТз["Артикул"] + " (" + стрТз["Имя"] + ")";
			обФайлКартинки.Расширение = СтрЗаменить(стрТз["Расширение"], ".", "");
			ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
			
			Если Не ХранитьФайлыВТомах Тогда
				обФайлКартинки.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
				
				НачатьТранзакцию();
				Попытка
					обФайлКартинки.Записать();
					НаборДД = РегистрыСведений.ДвоичныеДанныеФайлов.СоздатьНаборЗаписей();
					НаборДД.Отбор.Файл.Установить(обФайлКартинки.Ссылка);
					ЗаписьДД = НаборДД.Добавить();
					ЗаписьДД.ДвоичныеДанныеФайла = Новый ХранилищеЗначения(ДвоичныеДанные);
					ЗаписьДД.Файл = обФайлКартинки.Ссылка;
					НаборДД.Записать();
					обНоменклатура = стрТЗ["Объект"].ПолучитьОбъект();
					
					// это обязательно! (не проверяем дубли по наименованию, НЕ СЛЕТАЮТ ГРУППЫ ДОСТУПА НОМЕНКЛАТУРЫ)
					обНоменклатура.ОбменДанными.Загрузка = Истина;
					
					обНоменклатура["гф_КартинкаЗагружена"] = Истина;
					обНоменклатура["ФайлКартинки"] = обФайлКартинки.Ссылка;
					обНоменклатура.Записать();
				Исключение
					ОтменитьТранзакцию();
				КонецПопытки;
				
				Если Отладка Тогда
					Если ТранзакцияАктивна() Тогда
						ОтменитьТранзакцию();
					КонецЕсли;
				Иначе
					Если ТранзакцияАктивна() Тогда
						ЗафиксироватьТранзакцию();
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Запрос = Новый Запрос("
				|ВЫБРАТЬ
				|	ТомаХраненияФайлов.Ссылка КАК Ссылка,
				|	ТомаХраненияФайлов.ПолныйПутьWindows КАК ПолныйПутьWindows
				|ИЗ
				|	Справочник.ТомаХраненияФайлов КАК ТомаХраненияФайлов
				|ГДЕ
				|	НЕ ТомаХраненияФайлов.ПометкаУдаления
				|
				|УПОРЯДОЧИТЬ ПО
				|	ТомаХраненияФайлов.ПорядокЗаполнения");
				Результат = Запрос.Выполнить();
				Если Результат.Пустой() Тогда
					Прервать;
				КонецЕсли;
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				ТомХранения = Выборка["Ссылка"];
				обФайлКартинки.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске;
				обФайлКартинки.ПутьКФайлу = Формат(обФайлКартинки.ДатаМодификацииУниверсальная, "ДФ=ггггММдд") + 
				"\" + стрТз["Артикул"] + " (" + стрТз["Имя"] + ")" + стрТз["Расширение"];
				обФайлКартинки.Том = ТомХранения;
				
				НачатьТранзакцию();
				Попытка
					
					РаботаСФайламиВТомахСлужебный.ДобавитьФайл(обФайлКартинки, ДвоичныеДанные, , , ТомХранения);
					обФайлКартинки.Записать();
					обНоменклатура = стрТЗ["Объект"].ПолучитьОбъект();
					
					обНоменклатура.ОбменДанными.Загрузка = Истина;
					
					обНоменклатура["гф_КартинкаЗагружена"] = Истина;
					обНоменклатура["ФайлКартинки"] = обФайлКартинки.Ссылка;
					обНоменклатура.Записать();
				Исключение
					ОтменитьТранзакцию();
				КонецПопытки;
				
				Если Отладка Тогда
					Если ТранзакцияАктивна() Тогда
						ОтменитьТранзакцию();
					КонецЕсли;
				Иначе
					Если ТранзакцияАктивна() Тогда
						ЗафиксироватьТранзакцию();
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			УдалитьФайлы(ИмяВременногоКаталога, "*.bvlg");
		КонецЕсли;
		//Прервать; //отладка
	КонецЦикла;
	
	Если Отладка Тогда
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
	КонецЕсли;
	
	Сообщение = "Окончание загрузки картинок номенклатуры с ftp-сервера";
	ЗаписьЖурналаРегистрации("Примечание", УровеньЖурналаРегистрации.Примечание, ЭтотОбъект, ЭтотОбъект, Сообщение);
	
	ОбщегоНазначения.СообщитьПользователю(Формат(ТекущаяДатаСеанса(), "ДЛФ=T") + ". " + Сообщение);
	
КонецПроцедуры// } #wortmann
	
Функция МассивФайловВТаблицуЗначений(МассивФайлов)
	
	ТаблицаФайлов = ПолучитьПустуюТаблицуФайлов();
	
	Для каждого ЭлФайл Из МассивФайлов Цикл
		ЭтоФайл = ЭлФайл.ЭтоФайл();
		Если ЭтоФайл Тогда
			нс = ТаблицаФайлов.Добавить();
			ЗаполнитьЗначенияСвойств(нс, ЭлФайл);
			нс["ВремяИзменения"] = ЭлФайл.ПолучитьВремяИзменения();
			нс["Размер"] = ЭлФайл.Размер();
			нс["ЭтоФайл"] = ЭтоФайл;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаФайлов;
КонецФункции

Функция ПолучитьПустуюТаблицуФайлов()
	
	ОписаниеТипаСтрока128 = ОбщегоНазначения.ОписаниеТипаСтрока(128);
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	ОписаниеТипаЧисло = ОбщегоНазначения.ОписаниеТипаЧисло(10, 0, ДопустимыйЗнак.Неотрицательный);
	
	ТаблицаФайлов = Новый ТаблицаЗначений;
	
	ТаблицаФайлов.Колонки.Добавить("Имя", ОписаниеТипаСтрока128);
	ТаблицаФайлов.Колонки.Добавить("ИмяБезРасширения", ОписаниеТипаСтрока128);
	ТаблицаФайлов.Колонки.Добавить("ПолноеИмя", ОписаниеТипаСтрока128);
	ТаблицаФайлов.Колонки.Добавить("Путь", ОписаниеТипаСтрока128);
	ТаблицаФайлов.Колонки.Добавить("Расширение", ОписаниеТипаСтрока128);
	ТаблицаФайлов.Колонки.Добавить("ВремяИзменения", ОписаниеТипаСтрока128);
	ТаблицаФайлов.Колонки.Добавить("Размер", ОписаниеТипаЧисло);
	ТаблицаФайлов.Колонки.Добавить("ЭтоФайл", ОписаниеТипаБулево);
	
	Возврат ТаблицаФайлов;
КонецФункции // ()

#КонецЕсли
