#Область ОбработчикиКомандФормы

// #wortmann { 
// Команда по заполнению ТЧ Остатки
// Галфинд_Домнышева 2023/07/26
//
// Параметры:
//	Команда - КамандаФормы
&НаКлиенте
Процедура ВывестиОстатки(Команда)
	ВывестиОстаткиНаСервере();
КонецПроцедуры// } #wortmann  

// #wortmann { 
// Главная команда по созданию Табличного документа
// Галфинд_Домнышева 2023/07/26
//
// Параметры:
//	Команда - КамандаФормы
&НаКлиенте
Процедура ФормированиеТабличногоДокумента(Команда)
	
	АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ПоместитьВоВременноеХранилище(Неопределено, АдресРезультата);
	Если Объект.Остатки.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не заполнены данные для отправки!");
		Возврат;
	КонецЕсли;

	ПоказатьИЛИОтправитьНаКлиенте(Команда.Имя);
	
КонецПроцедуры// } #wortmann 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции 

// #wortmann { 
// Процедура заполняет ТЗ Остатки
// Галфинд_Домнышева 2023/07/26
//
// Параметры:
//	Команда - КамандаФормы
&НаСервере
Процедура ВывестиОстаткиНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена Дата для получения остатков");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Склад) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен Склад для получения остатков");
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен Тип Цен для получения остатков");		
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыНаСкладахОстатки.Номенклатура.Артикул КАК Артикул,
		|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
		|	ТоварыНаСкладахОстатки.Склад КАК Склад,
		|	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК Остаток
		|ПОМЕСТИТЬ Остатки
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(
		|			&Дата,
		|			Склад = &склад
		|				И Номенклатура.ВидНоменклатуры = &ВидНоменклатуры
		|				И Номенклатура.КоллекцияНоменклатуры = &Сезон) КАК ТоварыНаСкладахОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.Номенклатура КАК Номенклатура,
		|	Остатки.Артикул КАК Артикул,
		|	Остатки.Характеристика КАК Характеристика,
		|	Остатки.Склад КАК Склад,
		|	Остатки.Остаток КАК Остаток,
		|	ЦеныНоменклатуры.ВидЦены КАК ВидЦены,
		|	ЦеныНоменклатуры.Цена КАК Цена,
		|	ЕСТЬNULL(ЦеныНоменклатуры.Цена * Остатки.Остаток, 0) КАК Сумма,
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
		|ИЗ
		|	Остатки КАК Остатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(
		|				&Дата,
		|				Номенклатура В
		|						(ВЫБРАТЬ
		|							Остатки.Номенклатура КАК Номенклатура
		|						ИЗ
		|							Остатки КАК Остатки)
		|					И ВидЦены = &ТипЦены) КАК ЦеныНоменклатуры
		|		ПО Остатки.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ПО Остатки.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
		|			И Остатки.Характеристика = ШтрихкодыНоменклатуры.Характеристика";
	
	Запрос.УстановитьПараметр("Дата", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	Запрос.УстановитьПараметр("ТипЦены", Объект.ТипЦен);

	Если ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
		Запрос.УстановитьПараметр("ВидНоменклатуры", Объект.ВидНоменклатуры);
	Иначе	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Номенклатура.ВидНоменклатуры = &ВидНоменклатуры", "Истина");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Сезон) Тогда
		Запрос.УстановитьПараметр("Сезон", Объект.Сезон);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Номенклатура.КоллекцияНоменклатуры = &Сезон", "Истина");
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();
	
	Объект.Остатки.Загрузить(РезультатЗапроса.Выгрузить());	
	
КонецПроцедуры// } #wortmann

// #wortmann { 
// Процедура по заполнению Табличного документа
// Галфинд_Домнышева 2023/07/26
&НаСервере
Процедура ПоказатьИОтправитьНаСервере()
	
	КодКлиента = ПолучитьКодКлиента();
	
	ТабДок = Новый ТабличныйДокумент;
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");

	Макет = ОбработкаОбъект.ПолучитьМакет("МастерДанные");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	ТабДок.Вывести(ОбластьЗаголовок);
	
	Выборка = Объект.Остатки.Выгрузить();
	Выборка.Свернуть("Номенклатура, Характеристика, Артикул, Штрихкод, Цена", "Остаток");
	
	Для каждого Стр из Выборка цикл
		
		ОбластьСтрока.Параметры.КодСклада = "01";
		ОбластьСтрока.Параметры.КодКлиента = КодКлиента;
		ОбластьСтрока.Параметры.Артикул = Стр.Артикул + "/" + Стр.Характеристика;
		ОбластьСтрока.Параметры.КороткоеОписание = Стр.Номенклатура;
		ОбластьСтрока.Параметры.ЕдИзм = СокрЛП(Стр.Номенклатура.ЕдиницаИзмерения.Наименование);
		ОбластьСтрока.Параметры.Цена = СтрЗаменить(Стр.Цена, " ", "");
		ОбластьСтрока.Параметры.ШтрихКод = Стр.Штрихкод; 
		ОбластьСтрока.Параметры.Описание = Стр.Номенклатура.НаименованиеПолное;
		
		ТабДок.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
	ТабДок.ОтображатьГруппировки = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Вывод = ИспользованиеВывода.Разрешить; 
	
	ПоместитьВоВременноеХранилище(ТабДок, АдресРезультата);

КонецПроцедуры// } #wortmann

// #wortmann { 
// В зависмости от имени команды определяет дальнейшее действие с получаемым Таб.документом
// Галфинд_Домнышева 2023/07/26
//
// Параметры:
//	ИмяКоманды - Строка - имя текущей команды
&НаКлиенте
Процедура ПоказатьИЛИОтправитьНаКлиенте(ИмяКоманды)
	
	ПоказатьИОтправитьНаСервере();
	
	ТабДок = ПолучитьИзВременногоХранилища(АдресРезультата);
	КодКлиента = ПолучитьКодКлиента();

	Если ТабДок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла = "item_import_klient_" + КодКлиента + "_" + День(ТекущаяДата()) + "_" + Месяц(ТекущаяДата()) + "_" + Прав(Год(ТекущаяДата()),2)+".xls";
    Каталог = _омОбщегоНазначенияКлиентСервер.ПолучитьГлобальноеЗначение("гф_ПапкаДляВременнойВыгрузкиМастерДата");;
	ПолноеИмяФайла = Каталог + "/" + ИмяФайла;
	
	Если ИмяКоманды = "ПоказатьИОтправить" Тогда
		ТабДок.Показать(ИмяФайла, ПолноеИмяФайла);
		Сообщить("Имя файла МастерДанные: " + ИмяФайла);
	Иначе
		ТабДок.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.XLS); 
		ОтправкаНаFTP(ПолноеИмяФайла);
	КонецЕсли;
	
КонецПроцедуры// } #wortmann

// #wortmann { 
// Функция получает код клиента из дополнительных реквизитов Склада
// Галфинд_Домнышева 2023/07/26
//
// Возвращаемое значение:
//	Строка - код клиента Склада
&НаСервере
Функция ПолучитьКодКлиента()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СкладыДополнительныеРеквизиты.Свойство.Имя КАК Свойство,
		|	СкладыДополнительныеРеквизиты.Значение КАК Значение
		|ИЗ
		|	Справочник.Склады.ДополнительныеРеквизиты КАК СкладыДополнительныеРеквизиты
		|ГДЕ
		|	СкладыДополнительныеРеквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Свойство = "гф_СкладыКодКлиентаСклад" Тогда
				Возврат Выборка.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции// } #wortmann

// #wortmann { 
// Получает настройки для связи с FTP, при успешной отправки делает запись в РС 
// Галфинд_Домнышева КР 2023/07/26
//
// Параметры:
//	СообщениеОбОшибке - Строка - текущая ошибка
//  Ошибка - Булево
//	ПутьФайла - Строка
&НаСервере
Процедура ОтправкаНаFTP(ПолноеИмяФайла)
	
	Отказ = Ложь;
	
	НастройкиFTPСоединения = _омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначениеFTP("FTP_НастройкиДляЗагрузкиВыгрузкиВWMS");
	
	Если НастройкиFTPСоединения.ЕстьДанные <> Истина Тогда
		Сообщение = "Не заданы настройки подключения к ftp-серверу.";
		ЗаписьЖурналаРегистрации("ВыгрузкаMasterDataWMS", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, Сообщение);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ТекущаяДатаСеанса(), "ДЛФ=T") + ". " + Сообщение);
		Возврат;
	КонецЕсли;
	
	ОтправитьФайл(ПолноеИмяФайла, НастройкиFTPСоединения, Отказ);
	
	Если Не Отказ Тогда
		Запись = РегистрыСведений.гф_ДанныеВыгрузки.СоздатьМенеджерЗаписи();
		Запись.Период = ТекущаяДатаСеанса();
		Запись.НомерСообщения = "1";
		Запись.ВидДанных = Перечисления.гф_ВидыДанныхДляВыгрузки.МастераДатаТовары;
		Запись.Документ = Документы.РасходныйОрдерНаТовары.ПустаяСсылка();
		Запись.Состояние = Перечисления.гф_СтатусыВыгрузкиДанных.Отправлено;
		Запись.ИмяФайла = ПолноеИмяФайла;
		Запись.Записать();
	КонецЕсли;
	
	Если ТекстыОшибок.Количество() > 0 Тогда
		ЗаписатьОшибку(ТекстыОшибок);
	КонецЕсли;
   	ТекстыОшибок.Очистить();

КонецПроцедуры// } #wortmann 

// #wortmann { 
// Отправляет файл на выгрузку 
// Галфинд_Домнышева 2023/07/26
//
// Параметры:
//	ИмяФайла - строка
//	Настройки - Структура - Настройки для FTPСоединения
//	Отказ - параметр системы
//	Соединение -  FTPСоединение,  - Неопределено
&НаСервере
Процедура ОтправитьФайл(ИмяФайла, Настройки, Отказ, Соединение = Неопределено)
						
	Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
		ДобавитьСтрокуВТекстыОшибки("Не определен файл выгрузки", Истина, ИмяФайла.ПолноеИмя);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Настройки = Неопределено Тогда
		ДобавитьСтрокуВТекстыОшибки("Не определены настройки ftp-соединения", Истина, ИмяФайла.ПолноеИмя);
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	ВыгрузитьНаFTP(ИмяФайла, Настройки, Отказ, Соединение, Ложь);
	
КонецПроцедуры// } #wortmann 

// #wortmann { 
// Процедура получает соединение и отправляет файл 
// Галфинд_Домнышева 2023/07/26
//
// Параметры:
//	ФайлДляВыгрузки - строка
//	НастройкиFTPСоединения - Структура - Настройки для FTPСоединения
//	Отказ - параметр системы
//	Соединение -  FTPСоединение,  - Неопределено
//	ПомещатьСразуВАрхив - Булево
Процедура ВыгрузитьНаFTP(ФайлДляВыгрузки, НастройкиFTPСоединения, Отказ, Соединение = Неопределено, 
						ПомещатьСразуВАрхив = Истина) Экспорт

	Если Соединение = Неопределено Тогда
		Соединение = _омОбщегоНазначенияВызовСервера.гф_ПолучитьСоединение(НастройкиFTPСоединения);
	КонецЕсли;	
	
	Если Соединение = Неопределено Тогда
		ДобавитьСтрокуВТекстыОшибки("Соединение не установлено, проверьте настройки", Истина, ФайлДляВыгрузки.ПолноеИмя);
		Возврат;
	КонецЕсли;	
		
	Файл = Новый Файл(ФайлДляВыгрузки);
	Если Не Файл.ЭтоФайл() Тогда
		ДобавитьСтрокуВТекстыОшибки("Ошибка в чтении временного файла.", Истина, ФайлДляВыгрузки.ПолноеИмя);
		Возврат;
	КонецЕсли;
	СообщениеОбОшибке = "";
	СтрокаПутьНаFTP = _омОбщегоНазначенияВызовСервера.ПолучитьГлобальноеЗначение("гф_ПапкаДляВыгрузкиМастерДатаВWMS");
	ТекКаталог = СтрЗаменить(СтрЗаменить(СтрокаПутьНаFTP, "\", "/"), "//", "/");	
	Если Прав(ТекКаталог, 1) <> "/" Тогда
		ТекКаталог = ТекКаталог + "/";
	КонецЕсли;
	
	Попытка                                                                                               
		СообщениеОбОшибке = "Попытка установить каталог " + ТекКаталог + " - ";
		Соединение.УстановитьТекущийКаталог(ТекКаталог);
		ДобавитьСтрокуВТекстыОшибки("Установлен каталог: " + ТекКаталог, Ложь, Файл.ПолноеИмя);
		
		СообщениеОбОшибке = "Попытка записи файла " + Файл.ПолноеИмя + " - ";
		Если ПомещатьСразуВАрхив Тогда
			// узнать про архивную папку...
			ИмяАрхивнойПапки = СтрокаПутьНаFTP + "Archive";
			//////////
			СоздатьКаталог(ИмяАрхивнойПапки);
			
			КаталогАрхив = Новый Файл(ИмяАрхивнойПапки);
			Если Не КаталогАрхив.Существует() Тогда
				ДобавитьСтрокуВТекстыОшибки("Каталог для архивирования файлов задан неверно или не существует...",
											Истина, Файл.ПолноеИмя);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			КопироватьФайл(Файл.ПолноеИмя, ИмяАрхивнойПапки + "\" + Файл.Имя);
			Соединение.Записать(ИмяАрхивнойПапки + "\" + Файл.Имя, Файл.Имя);
			
		Иначе
			Соединение.Записать(Файл.ПолноеИмя, Файл.Имя);
		КонецЕсли;
		
		// Проверим записан ли файл на ftp
		Если Соединение.НайтиФайлы(ТекКаталог + Файл.Имя).Количество() > 0 Тогда
			
			ДобавитьСтрокуВТекстыОшибки("Файл успешно записан: " + ТекКаталог + Файл.Имя, Ложь, Файл.ПолноеИмя);
			
			СообщениеОбОшибке = "Попытка удаления файла " + Файл.ПолноеИмя + " - ";
			УдалитьФайлы(Файл.ПолноеИмя);
			
			// проверим удален ли с диска файл
			Если НайтиФайлы(Файл.ПолноеИмя).Количество() <> 0 Тогда
				ДобавитьСтрокуВТекстыОшибки("Ошибка удаления файла " + Файл.ПолноеИмя + " с диска! ", Истина, Файл.ПолноеИмя);
			КонецЕсли;
			
		Иначе // файл не записан
			ДобавитьСтрокуВТекстыОшибки("Файл не записан: " + ТекКаталог + Файл.Имя, Истина, Файл.ПолноеИмя);	
		КонецЕсли;	
		
	Исключение
		ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке + ОписаниеОшибки(), Истина, Файл.ПолноеИмя);
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
КонецПроцедуры// } #wortmann  

// #wortmann { 
// Заполняет ТЗ ТекстыОшибок 
// Галфинд_Домнышева КР 2023/07/26
//
// Параметры:
//	СообщениеОбОшибке - Строка - текущая ошибка
//  Ошибка - Булево
//	ПутьФайла - Строка
Процедура ДобавитьСтрокуВТекстыОшибки(СообщениеОбОшибке, Ошибка, ПутьФайла)

	СтрокаОшибки = ТекстыОшибок.Добавить();
	СтрокаОшибки.ПутьФайла = ПутьФайла;
	СтрокаОшибки.ТекстОшибки = СообщениеОбОшибке;
	СтрокаОшибки.Организация = Объект.Склад.гф_Организация;
	СтрокаОшибки.ТипИнформации = ?(Ошибка, "Ошибка", "Информация");
			
КонецПроцедуры// } #wortmann 

// #wortmann { 
// Заносит записи в РС гф_ОшибкиЗагрузки из ТЗ ТекстыОшибок 
// Галфинд_Домнышева КР 2023/07/26
//
// Параметры:
//	ТекстыОшибок - ТаблицаЗначений 
Процедура ЗаписатьОшибку(ТекстыОшибок)

	ТекущаяДата = ТекущаяДатаСеанса(); 
	Попытка	
		НаборЗаписей = РегистрыСведений.гф_ОшибкиЗагрузки.СоздатьНаборЗаписей(); 
		
		НаборЗаписей.Отбор.Интерфейс.Установить(Перечисления.гф_Интерфейсы.WMS);
		НаборЗаписей.Прочитать();
		
		ТекущиеЗначения = НаборЗаписей.Выгрузить();                             
		
		Для Каждого Строка Из ТекстыОшибок Цикл
				НоваяЗапись = ТекущиеЗначения.Добавить(); 
				НоваяЗапись.Дата = ТекущаяДата;
				НоваяЗапись.ПутьФайла = Строка.ПутьФайла; 
				НоваяЗапись.Номер =  Строка(ТекущиеЗначения.Количество());
				НоваяЗапись.ТекстОшибки = Строка.ТекстОшибки;
				НоваяЗапись.Организация = Строка.Организация;
				НоваяЗапись.Интерфейс = Перечисления.гф_Интерфейсы.WMS;
				НоваяЗапись.ТипИнформации = Строка.ТипИнформации;
		КонецЦикла;
		НаборЗаписей.Загрузить(ТекущиеЗначения);
		НаборЗаписей.Записать(); 
		
	Исключение
		СообщениеОбОшибке = "Ошибка при записи файла " + Строка.ПутьФайла  
		+ ". Описание ошибки: Не удалось загрузить ТекстОшибки в РС гф_ОшибкиЗагрузки. " + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ВыгрузкаMasterDataWMS", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект, ЭтотОбъект, СообщениеОбОшибке);		
	КонецПопытки;

КонецПроцедуры// } #wortmann

#КонецОбласти