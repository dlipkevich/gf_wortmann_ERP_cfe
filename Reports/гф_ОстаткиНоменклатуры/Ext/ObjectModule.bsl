Функция СведенияОВнешнейОбработке() Экспорт
    
    ИмяОтчета = ЭтотОбъект.Метаданные().Имя;
    Синоним = ЭтотОбъект.Метаданные().Синоним;
    Синоним = ?(ЗначениеЗаполнено(Синоним),Синоним, ИмяОтчета);
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
	
	ПараметрыРегистрации.Вид				= ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет();
	ПараметрыРегистрации.Наименование		= Синоним;
	ПараметрыРегистрации.Версия				= "3.2";
	ПараметрыРегистрации.БезопасныйРежим	= Истина;
	ПараметрыРегистрации.Информация			= "Отчет " + Синоним;
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	
	НоваяКоманда.Использование			= ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	НоваяКоманда.Представление			= Синоним;
	НоваяКоманда.Идентификатор			= ИмяОтчета;
	НоваяКоманда.ПоказыватьОповещение	= Истина;
	
    Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; // отключаем стандартный вывод отчета - будем выводить программно 		
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();// Получаем настройки отчета  
	//++ СадомцевСА 08.11.2022
	// Параметр ВидЦены
	ЗначениеПоиска = Новый ПараметрКомпоновкиДанных("ВидЦены");
	парамВидЦены = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ЗначениеПоиска);
	Если НЕ парамВидЦены.Использование Тогда
		Сообщить("Укажите Вид цены!");
		Возврат;
	КонецЕсли;
	
	// Параметр КоробнойСклад
	Если Настройки.ДополнительныеСвойства.КлючВарианта = "ОстаткиКоробнойСклад"
		ИЛИ Настройки.ДополнительныеСвойства.КлючВарианта = "ОстаткиНоменклатурыКоробнойСклад" Тогда
		КоробнойСклад = 1;
	Иначе
		КоробнойСклад = 0;
	КонецЕсли;
	ЗначениеПоиска = Новый ПараметрКомпоновкиДанных("КоробнойСклад");
	парамКоробнойСклад = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ЗначениеПоиска);
	парамКоробнойСклад.Использование = Истина;
	парамКоробнойСклад.Значение = ?(КоробнойСклад = 1, ИСТИНА, ЛОЖЬ);
	
	// Параметр ПоказатьЦенуЗаказа
	ЗначениеПоиска = Новый ПараметрКомпоновкиДанных("ПоказатьЦенуЗаказа");
	парамПоказатьЦенуЗаказа = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ЗначениеПоиска);
	парамПоказатьЦенуЗаказа.Значение = ?(парамПоказатьЦенуЗаказа.Значение = Неопределено, ЛОЖЬ, ?(парамПоказатьЦенуЗаказа.Значение = ИСТИНА, ИСТИНА, ЛОЖЬ));
	Если парамПоказатьЦенуЗаказа.Значение Тогда
		парамВидЦены.Использование = Ложь;
	КонецЕсли;
	
	// Внещний набор данных
	ВнешниеНаборыДанных = ПодготовитьВнешниеНаборыДанных();
	//--
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных; // Создаем данные расшифровки     		
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных; // Создаем компоновщик макета    	
	// Инициализируем макет компоновки используя схему компоновки данных 
	// и созданные ранее настройки и данные расшифровки
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	//++ СадомцевСА 08.11.2022
	Если НЕ парамВидЦены.Использование Тогда
		СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Запрос = СтрЗаменить(СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Запрос, "ВидЦены = &ВидЦены", "");
	КонецЕсли;
	//--
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	// Скомпонуем результат
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	ДокументРезультат.Очистить();
	
	// Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
			
	// Заполняем рисунки для полей, в данных расшифровки которых находятся элементы справочника 
	// "НоменклатураПрисоединенныеФайлы"
	КоличествоКолонокТаблицы = ДокументРезультат.ШиринаТаблицы; // Количество колонок в отчете
	КоличествоСтрокТаблицы = ДокументРезультат.ВысотаТаблицы; 	// Количество строк в отчете
	// Обходим все ячейки отчета
	Для Кл = 1 По КоличествоКолонокТаблицы Цикл 		
		Для Ст = 1 По КоличествоСтрокТаблицы Цикл  			
			ТекОбласть = ДокументРезультат.Область(Ст, Кл);  
			// Если имеется расшифровка ячейки, то проверям наличие полей расшифровки
			Если ТекОбласть.Расшифровка = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ПоляРасшифровки = ДанныеРасшифровки.Элементы[ТекОбласть.Расшифровка].ПолучитьПоля();
			Если ПоляРасшифровки.Количество() <= 0 Тогда
				Продолжить;
			КонецЕсли;
			// Если тип значения поля расшифровки соответствует справочнику прикрепленных файлов, то
			// выводим связанную картинку
			Рисунок = ПолучитьИзображение(ПоляРасшифровки.Получить(0).Значение);
			Если Рисунок <> Неопределено Тогда
				Рис = ДокументРезультат.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
				Рис.РазмерКартинки = РазмерКартинки.Пропорционально;
				Рис.Картинка = Рисунок;
				Рис.Расположить(ТекОбласть);						
			КонецЕсли;
		КонецЦикла;  		
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьИзображение(ПрисоединенныйФайл)
	
	КартинкаПоумолчанию = Неопределено;
	
	Если ТипЗнч(ПрисоединенныйФайл) = Тип("СправочникСсылка.НоменклатураПрисоединенныеФайлы") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДвоичныеДанныеФайлов.ДвоичныеДанныеФайла
		|ИЗ
		|	РегистрСведений.ДвоичныеДанныеФайлов КАК ДвоичныеДанныеФайлов
		|ГДЕ
		|	ДвоичныеДанныеФайлов.Файл = &Файл"; 		
		Запрос.УстановитьПараметр("Файл", ПрисоединенныйФайл); 		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий(); // Получаем двоичные данные катинки
			Возврат Новый Картинка(Выборка.ДвоичныеДанныеФайла.Получить(), Истина);
		//Иначе // Если данные отсутствуют, получаем стандартное изображение из 
		//	  // дополнительного макета внешнего отчета
		//	Возврат Новый Картинка(ПолучитьМакет("НетКартинки"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат КартинкаПоумолчанию;
	
КонецФункции

//++ СадомцевСА 08.11.2022
Функция ПодготовитьВнешниеНаборыДанных()
	ТоварыВКоробах = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("ИдентификаторДляФормул", "гф_СкладыТоварыВКоробах");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Склады.Ссылка КАК Склад,
	               |	ЛОЖЬ КАК ТоварыВКоробах
	               |ИЗ
	               |	Справочник.Склады КАК Склады";
	ТаблицаСклады = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТЗ Из ТаблицаСклады Цикл
		ТоварыВКоробахЗначение = УправлениеСвойствами.ЗначениеСвойства(СтрокаТЗ.Склад, ТоварыВКоробах);	
		Если ЗначениеЗаполнено(ТоварыВКоробахЗначение) И ТоварыВКоробахЗначение = Истина Тогда
			СтрокаТЗ.ТоварыВКоробах = Истина;
		КонецЕсли;
	КонецЦикла;
	ВнешниеНаборыДанных = Новый Структура();
	ВнешниеНаборыДанных.Вставить("ТаблицаСклады", ТаблицаСклады);
	Возврат ВнешниеНаборыДанных
КонецФункции
//--
