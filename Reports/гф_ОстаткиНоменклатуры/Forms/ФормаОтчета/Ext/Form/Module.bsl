///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

&НаКлиенте
Перем ОбработчикПослеФормированияНаКлиенте; // Описание переменной
&НаКлиенте
Перем ВыполнятьЗамеры; // Описание переменной
&НаКлиенте
Перем ИдентификаторЗамера; // Описание переменной
&НаКлиенте
Перем Непосредственно; // Описание переменной
&НаКлиенте
Перем ФормированиеПриОткрытии; // Описание переменной
&НаКлиенте
Перем ИнтервалОжидания; // Описание переменной
&НаКлиенте
Перем РезультатНастройки; // Описание переменной

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОпределитьПоведениеВМобильномКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ВыполнятьЗамеры = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(Результат, ПодчиненнаяФорма)
	РезультатОбработан = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ОповещениеОбработано = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойВариантаНаСервере(НовыеНастройкиКД)
	// Ничего не делать если отчет не на СКД и никаких настроек не загружено.
	Если НовыеНастройкиКД = Неопределено
		Или Не ВариантыОтчетовСлужебныйКлиентСервер.РежимВариантаОтчета(КлючТекущегоВарианта) Тогда
		
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(НовыеНастройкиКД)
	// Ничего не делать если отчет не на СКД и никаких настроек не загружено.
	Если Не ВариантыОтчетовСлужебныйКлиентСервер.РежимВариантаОтчета(КлючТекущегоВарианта)
		И НовыеНастройкиКД = Неопределено Тогда
		
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойПользовательскихНастроекНаСервере(НовыеПользовательскиеНастройкиКД)
	Если НастройкиОтчета.События.ПередЗагрузкойНастроекВКомпоновщик Тогда
		// Подготовка к переинициализации.
		Попытка
			НовыеПользовательскиеНастройкиXML = ОбщегоНазначения.ЗначениеВСтрокуXML(НовыеПользовательскиеНастройкиКД);
		Исключение
			НовыеПользовательскиеНастройкиXML = Неопределено;
		КонецПопытки;
		НастройкиОтчета.НовыеПользовательскиеНастройкиXML = НовыеПользовательскиеНастройкиXML;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(НовыеПользовательскиеНастройкиКД)
	Если Не ВариантыОтчетовСлужебныйКлиентСервер.РежимВариантаОтчета(КлючТекущегоВарианта) Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкиОтчета.События.ПриЗагрузкеПользовательскихНастроекНаСервере Тогда
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
		ОтчетОбъект.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтотОбъект, НовыеПользовательскиеНастройкиКД);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	КлючХраненияЗначения = КлючХраненияЗначенияВРамкахВариантаОтчета(НастройкиОтчета.ПолноеИмя, КлючТекущегоВарианта);
	ВосстановитьВыбранныйУровеньГруппировок(КлючХраненияЗначения, ВыбранныйУровеньГруппировок, РежимРасшифровки);
	
	Если Не ВариантыОтчетовСлужебныйКлиентСервер.РежимВариантаОтчета(КлючТекущегоВарианта) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ВариантМодифицирован Тогда 
		ВосстановитьСостояниеОпцииВыводитьЗаголовкиНастроек(КлючХраненияЗначения, ВыводитьЗаголовкиНастроек, РежимРасшифровки);
	КонецЕсли;
	
	ПараметрыОбновления = Новый Структура("ИмяСобытия", "ПриОбновленииСоставаПользовательскихНастроекНаСервере");
 	ОбновитьЭлементыФормыНастроекНаСервере(ПараметрыОбновления);
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Если Не ВариантыОтчетовСлужебныйКлиентСервер.РежимВариантаОтчета(КлючТекущегоВарианта) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	КлючХраненияЗначения = КлючХраненияЗначенияВРамкахВариантаОтчета(НастройкиОтчета.ПолноеИмя, КлючТекущегоВарианта);
	СохранитьВыбранныйУровеньГруппировок(КлючХраненияЗначения, ВыбранныйУровеньГруппировок, РежимРасшифровки);
	СохранитьСостояниеОпцииВыводитьЗаголовкиНастроек(КлючХраненияЗначения, ВыводитьЗаголовкиНастроек, РежимРасшифровки);
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииВариантаНаСервере(НастройкиКД)
	Если Не ВариантыОтчетовСлужебныйКлиентСервер.РежимВариантаОтчета(КлючТекущегоВарианта) Тогда
		Возврат;
	КонецЕсли;
	
	НовыеНастройкиКД = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	ОтчетыКлиентСервер.ЗагрузитьНастройки(Отчет.КомпоновщикНастроек, НовыеНастройкиКД);
	НастройкиКД.ДополнительныеСвойства.Вставить("Адрес", ПоместитьВоВременноеХранилище(НовыеНастройкиКД));
	НастройкиКД = НовыеНастройкиКД;
	ВариантыПанелиКлючТекущегоВарианта = ПустойКлючВарианта();
	ОбновитьИнформациюОВариантеОтчета();
	УстановитьВидимостьДоступность(Истина);
	
	Если ОбщегоНазначения.ЭтоВебКлиент() Тогда 
		КлючХраненияЗначения = КлючХраненияЗначенияВРамкахВариантаОтчета(НастройкиОтчета.ПолноеИмя, КлючТекущегоВарианта);
		СохранитьСостояниеОпцииВыводитьЗаголовкиНастроек(КлючХраненияЗначения, ВыводитьЗаголовкиНастроек, РежимРасшифровки);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(ПользовательскиеНастройкиКД)
	Если Не ВариантыОтчетовСлужебныйКлиентСервер.РежимВариантаОтчета(КлючТекущегоВарианта) Тогда
		Возврат;
	КонецЕсли;
	ВариантыОтчетов.ПриСохраненииПользовательскихНастроекНаСервере(ЭтотОбъект, ПользовательскиеНастройкиКД);
	ОбновитьКомандыВыбораВариантов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

////////////////////////////////////////////////////////////////////////////////
// Подключаемые

&НаКлиенте
Процедура Подключаемый_ЭлементНастройки_ПриИзменении(Элемент)
	КомпоновщикНастроек = Отчет.КомпоновщикНастроек;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлементНастройки_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПоказатьСписокВыбора(Элемент, СтандартнаяОбработка)
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Период_ПриИзменении(Элемент)
	ОтчетыКлиент.УстановитьПериод(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыбратьПериод(Команда)
	ОтчетыКлиент.ВыбратьПериод(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СдвинутьПериодНазад(Команда)
	ОтчетыКлиент.СдвинутьПериод(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СдвинутьПериодВперед(Команда)
	ОтчетыКлиент.СдвинутьПериод(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовУниверсальнойСтрокиПоиска

&НаКлиенте
Процедура ПоказательРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказательПриИзменении(Элемент)
	
	ПереходКНастройкамВыполнен();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Массив") Тогда
		
		СброситьУниверсальныйПоиск();
		Возврат;
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПрименитьЗначениеУниверсальногоПоиска(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказательАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Текст) Тогда 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийДокументаОтчетТабличныйДокумент

&НаКлиенте
Процедура ОтчетТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаРасшифровки = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	ИнтеграцияПодсистемБСПКлиент.ПриОбработкеРасшифровки(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка);
	ОтчетыКлиентПереопределяемый.ОбработкаРасшифровки(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда 
		ВариантыОтчетовСлужебныйКлиент.ОбработкаРасшифровки(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетТабличныйДокументОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.АнализЖурналаРегистрации") Тогда
		МодульАнализЖурналаРегистрацииКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("АнализЖурналаРегистрацииКлиент");
		МодульАнализЖурналаРегистрацииКлиент.ФормаОтчетаОбработкаДополнительнойРасшифровки(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетТабличныйДокументПриАктивизации(Элемент)
	
	ВариантыОтчетовСлужебныйКлиент.ПриАктивизацииРезультатаОтчета(ЭтотОбъект, Элементы.ОтчетТабличныйДокумент);
	
	ПодключитьОбработчикОжидания("РассчитатьПоказателиДинамически", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетТабличныйДокументПередЗаписью(Элемент, Копирование, Отказ)
	
	Отказ = Истина;
	СохранитьОтчет(Команды.Найти(Элементы.СохранитьОтчет.ИмяКоманды));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВсеНастройки(Команда)
	
	ПерейтиКНастройкам();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройкиИПереформироватьОтчет(Результат, ПараметрыВыполнения) Экспорт
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПоУмолчанию(Команда)
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ИмяСобытия", ОтчетыКлиентСервер.ИмяСобытияНастройкиПоУмолчанию());
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВариант(Команда)
	
	Если Не ВариантМодифицирован Тогда 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоПочте(Команда)
	ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетСкомпоноватьРезультат(Команда)
	ОчиститьСообщения();
	Сформировать();
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьСразу(Команда)
	ФормироватьСразу = Не Элементы.ФормироватьСразу.Пометка;
	Элементы.ФормироватьСразу.Пометка = ФормироватьСразу;
	
КонецПроцедуры

&НаКлиенте
Процедура ДругиеОтчеты(Команда)
	ОписаниеНастроекОтчета = ОписаниеНастроекОтчета(НастройкиОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСоставБыстрыхНастроек(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкиОтчета", НастройкиОтчета);
	ПараметрыФормы.Вставить("КомпоновщикНастроек", Отчет.КомпоновщикНастроек);
	ПараметрыФормы.Вставить("КлючТекущегоВарианта", КлючТекущегоВарианта);
	ПараметрыФормы.Вставить("ВыводитьЗаголовкиНастроек", ВыводитьЗаголовкиНастроек);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики команд модификации СКД.

&НаКлиенте
Процедура ЗагрузитьСхему(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьСхемуПослеПомещенияФайла", ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСхему(Команда)
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(НастройкиОтчета.АдресСхемы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьСтандартнуюСхему(Команда)
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Очистить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики команд обмена настройками (основными и пользовательскими).

&НаКлиенте
Процедура СохранитьВариантОтчетаВФайл(Команда)
	ОткрытьФорму(
		"ХранилищеНастроек.ХранилищеВариантовОтчетов.Форма.СохранениеВариантаОтчетаВФайл",
		ВариантыОтчетовСлужебныйКлиент.ПараметрыСохраненияВариантаОтчетаВФайл(ЭтотОбъект),
		ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВариантОтчетаИзФайла(Команда)
	СвойстваВариантаОтчета = ВариантыОтчетовКлиент.СвойстваВариантаОтчетаОснования();
	СвойстваВариантаОтчета.Ссылка = НастройкиОтчета.ВариантСсылка;
	СвойстваВариантаОтчета.ИмяОтчета = НастройкиОтчета.ПолноеИмя;
	СвойстваВариантаОтчета.ПредставлениеВарианта = ПредставлениеТекущегоВарианта;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоделитьсяНастройками(Команда)
	ОписаниеНастроек = Новый Структура();
	ОписаниеНастроек.Вставить("ВариантОтчета", НастройкиОтчета.ВариантСсылка);
	ОписаниеНастроек.Вставить("КлючОбъекта", НастройкиОтчета.ПолноеИмя + "/" + КлючТекущегоВарианта);
	ОписаниеНастроек.Вставить("КлючНастроек", КлючТекущихПользовательскихНастроек);
	ОписаниеНастроек.Вставить("Представление", ПредставлениеТекущихПользовательскихНастроек);
	ОписаниеНастроек.Вставить("Настройки", Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	ОписаниеНастроек.Вставить("ВариантМодифицирован", ВариантМодифицирован);
	
	ВариантыОтчетовКлиент.ПоделитьсяПользовательскимиНастройками(ОписаниеНастроек);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики команд сохранения результата отчета.

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Обработчик = Новый ОписаниеОповещения("ПослеУстановкиРасширенияРаботыСФайлами", ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики команд контекстного меню табличного документа - результат отчета.

&НаКлиенте
Процедура СгруппироватьПоВыбранномуПолю(Команда)
	
	ВариантыОтчетовСлужебныйКлиент.СгруппироватьПоВыбранномуПолю(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьПолеСлева(Команда)
	
	ВариантыОтчетовСлужебныйКлиент.ВставитьПолеСлева(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьПолеСправа(Команда)
	
	ВариантыОтчетовСлужебныйКлиент.ВставитьПолеСправа(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьГруппировкуВыше(Команда)
	
	ВариантыОтчетовСлужебныйКлиент.ВставитьГруппировкуВыше(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьГруппировкуНиже(Команда)
	
	ВариантыОтчетовСлужебныйКлиент.ВставитьГруппировкуНиже(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьПолеВлево(Команда)
	
	ВариантыОтчетовСлужебныйКлиент.ПереместитьПолеВлево(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьПолеВправо(Команда)
	
	ВариантыОтчетовСлужебныйКлиент.ПереместитьПолеВправо(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьПолеВыше(Команда)
	
	ВариантыОтчетовСлужебныйКлиент.ПереместитьПолеВыше(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьПолеНиже(Команда)
	
	ВариантыОтчетовСлужебныйКлиент.ПереместитьПолеНиже(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоле(Команда)
	
	ВариантыОтчетовСлужебныйКлиент.СкрытьПоле(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереименоватьПоле(Команда)
	
	ВариантыОтчетовСлужебныйКлиент.ПереименоватьПоле(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФильтр(Команда)
	
	ВариантыОтчетовСлужебныйКлиент.СнятьФильтр(ЭтотОбъект, СвойстваЗаголовка());
	
КонецПроцедуры

&НаКлиенте
Процедура Фильтровать(Команда)
	
	СвойстваРезультата = НастройкиОтчета.СвойстваРезультата; // см. ВариантыОтчетовСлужебный.СвойстваРезультатаОтчета
	СвойстваЗаголовка = СвойстваРезультата.Заголовки[ИмяТекущейОбластиЯчеек()];
	ВариантыОтчетовСлужебныйКлиент.ПоказатьРасширеннуюНастройкуФильтра(ЭтотОбъект, СвойстваЗаголовка);
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоВозрастанию(Команда)
	
	ВариантыОтчетовСлужебныйКлиент.Сортировать(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоУбыванию(Команда)
	
	ВариантыОтчетовСлужебныйКлиент.Сортировать(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОформление(Команда)
	
	ВариантыОтчетовСлужебныйКлиент.ОчиститьОформление(ЭтотОбъект, СвойстваЗаголовка());
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьОтрицательные(Команда)
	
	ВариантыОтчетовСлужебныйКлиент.ОформитьКрасным(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПоложительные(Команда)
	
	ВариантыОтчетовСлужебныйКлиент.ОформитьЗеленым(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВысотуСтроки(Команда)
	
	ВариантыОтчетовСлужебныйКлиент.УстановитьВысотуСтроки(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьШиринуКолонки(Команда)
	
	ВариантыОтчетовСлужебныйКлиент.УстановитьШиринуКолонки(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьЕще(Команда)
	
	ВариантыОтчетовСлужебныйКлиент.ОформитьЕще(ЭтотОбъект, Команда);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики команд расчета показателей.

&НаКлиенте
Процедура ВыбратьПоказательНажатие(Элемент)
	
	Меню = МенюВидовПоказателей(Элементы.КомандыВидовПоказателей);
	ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ПослеВыбораПоказателя", ЭтотОбъект), Меню, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСумму(Команда)
	РассчитатьПоказатели(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьКоличество(Команда)
	РассчитатьПоказатели(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСреднее(Команда)
	РассчитатьПоказатели(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьМинимум(Команда)
	РассчитатьПоказатели(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьМаксимум(Команда)
	РассчитатьПоказатели(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВсеПоказатели(Команда)
	РазвернутьОбластьПоказателей = Не Элементы.РассчитатьВсеПоказатели.Пометка;
	ОбщегоНазначенияСлужебныйКлиент.УстановитьВидимостьПанелиПоказателей(Элементы, РазвернутьОбластьПоказателей);
КонецПроцедуры

&НаКлиенте
Процедура СвернутьПоказатели(Команда)
	ОбщегоНазначенияСлужебныйКлиент.УстановитьВидимостьПанелиПоказателей(Элементы);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подключаемые

// Параметры:
//  Команда - КомандаФормы
//
&НаКлиенте
Процедура Подключаемый_Команда(Команда)
	ПостояннаяКоманда = ПостоянныеКоманды.НайтиПоЗначению(Команда.Имя);
КонецПроцедуры

// Параметры:
//  Команда - КомандаФормы
//
&НаКлиенте
Процедура Подключаемый_ЗагрузитьВариантОтчета(Команда)
	Найденные = ДобавленныеВарианты.НайтиСтроки(Новый Структура("ИмяКоманды", Команда.Имя));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоказатьУровеньГруппировок(Команда)
	
	УровеньГруппировкиСтрокой = СтрЗаменить(Команда.Имя, Элементы.ПоказатьУровеньГруппировок.Имя, "");
	
КонецПроцедуры

// Параметры:
//  Команда - КомандаФормы
//
&НаКлиенте
Процедура Подключаемый_ПерейтиМеждуИзменениямиНастроек(Команда)
	
	ПредставлениеПорядка = СтрЗаменить(Команда.Имя, ПрефиксИмениКомандыПереходаМеждуИзменениямиНастроек(), "");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Клиент

&НаКлиенте
Процедура ОпределитьПоведениеНаНачальнойСтранице()
	
	ОкноНачальнойСтраницы = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭлементыФормыНастроек(ПараметрыОбновления)
	ОбновитьЭлементыФормыНастроекНаСервере(ПараметрыОбновления);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭлементыФормыНастроекОтложенно()
	
	ОбновитьЭлементыФормыНастроек(РезультатНастройки);
	
КонецПроцедуры

#Область ФормированиеСОтправкойПоПочте

&НаКлиенте
Процедура СформироватьПередОтправкойПоПочте(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Обработчик = Новый ОписаниеОповещения("ОтправитьПоПочтеПослеФормирования", ЭтотОбъект);
		ОтчетыКлиент.СформироватьОтчет(ЭтотОбъект, Обработчик);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоПочтеПослеФормирования(ТабличныйДокументСформирован, ДополнительныеПараметры) Экспорт
	Если ТабличныйДокументСформирован Тогда
		ПоказатьДиалогОтправкиПоПочте();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Формирование

&НаКлиенте
Процедура Сформировать()
	
	НачатьЗамер();
	ПараметрыФормирования = Новый Структура("ВремяНачалаФормирования", ТекущаяУниверсальнаяДатаВМиллисекундах());
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПослеПредупреждения(Ответ, Контекст) Экспорт
	
	ПараметрыФормирования = Контекст.ПараметрыФормирования;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗамер()
	
	ВыполнятьЗамеры = НастройкиОтчета.ВыполнятьЗамеры И ЗначениеЗаполнено(НастройкиОтчета.КлючЗамеров);
	Если ВыполнятьЗамеры Тогда
		Комментарий = НастройкиОтчета.ПрефиксЗамеров + "; " + НСтр("ru = 'Непосредственно:';
																	|en = 'Directly:'") + " " + Строка(Непосредственно);
		МодульОценкаПроизводительностиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент");
		ИдентификаторЗамера = МодульОценкаПроизводительностиКлиент.ЗамерВремени(
			НастройкиОтчета.КлючЗамеров + ".Формирование",
			Ложь, Ложь);
		МодульОценкаПроизводительностиКлиент.УстановитьКомментарийЗамера(ИдентификаторЗамера, Комментарий);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеФормирования(Результат, ПараметрыФормирования) Экспорт 

	Если ФоновоеЗаданиеИдентификатор <> ПараметрыФормирования.ИдентификаторЗадания Тогда 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РезультатФормированияОтчета(Знач ФормированиеПриОткрытии, Непосредственно, ПослеПредупреждения)
	
	ИмяОтчета = СтрРазделить(НастройкиОтчета.ПолноеИмя, ".")[1];
КонецФункции

&НаСервере
Функция ПараметрыФормированияОтчета(ИмяОтчета, Непосредственно)
	ДополнительныеСвойства = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("ВариантМодифицирован", ВариантМодифицирован);
	ДополнительныеСвойства.Вставить("ПользовательскиеНастройкиМодифицированы", ПользовательскиеНастройкиМодифицированы);
	
	Возврат Неопределено;
КонецФункции

&НаСервере
Функция ПараметрыЗамеровФормированияОтчета(ИмяОтчета)
	ПараметрыЗамеров = Новый Структура("ИмяКлючевойОперации, КомментарийКлючевойОперации");
	
	Если Не НастройкиОтчета.ВыполнятьЗамеры
		Или Не ЗначениеЗаполнено(НастройкиОтчета.КлючЗамеров) Тогда
		Возврат ПараметрыЗамеров;
	КонецЕсли;
	
	КомментарийКлючевойОперации = Новый Соответствие;
	КомментарийКлючевойОперации.Вставить("ИмяОтчета", ИмяОтчета);
	КомментарийКлючевойОперации.Вставить("КлючПредопределенногоВарианта", НастройкиОтчета.КлючПредопределенногоВарианта);
	КомментарийКлючевойОперации.Вставить("Внешний", Число(НастройкиОтчета.Внешний));
	КомментарийКлючевойОперации.Вставить("Пользовательский", Число(НастройкиОтчета.Пользовательский));
	КомментарийКлючевойОперации.Вставить("Расшифровка", Число(РежимРасшифровки));
	КомментарийКлючевойОперации.Вставить("Модифицирован", Число(ВариантМодифицирован));
	
	ПараметрыЗамеров.ИмяКлючевойОперации = НастройкиОтчета.КлючЗамеров + ".Формирование";
	ПараметрыЗамеров.КомментарийКлючевойОперации = КомментарийКлючевойОперации;
	
	Возврат ПараметрыЗамеров;
КонецФункции

&НаСервере
Процедура ЗагрузитьРезультатФормированияОтчета()
	Если Не ЭтоАдресВременногоХранилища(ФоновоеЗаданиеАдресХранилища) Тогда 
		ПоказатьОшибкиФормирования(НСтр("ru = 'Не удалось сформировать отчет';
										|en = 'Cannot generate the report.'"));
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПоказатьДиалогОтправкиПоПочте()
	Вложение = Новый Структура;
	Вложение.Вставить("АдресВоВременномХранилище", ПоместитьВоВременноеХранилище(ОтчетТабличныйДокумент, УникальныйИдентификатор));
	Вложение.Вставить("Представление", ОтчетНаименованиеТекущегоВарианта);
	
	СписокВложений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Вложение);
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
		ПараметрыОтправки = МодульРаботаСПочтовымиСообщениямиКлиент.ПараметрыОтправкиПисьма();
		ПараметрыОтправки.Тема = ОтчетНаименованиеТекущегоВарианта;
		ПараметрыОтправки.Вложения = СписокВложений;
		МодульРаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыОтправки);
	КонецЕсли;
КонецПроцедуры

// Параметры:
//  Элемент - ПолеФормы
//  СтандартнаяОбработка - Булево
//
&НаКлиенте
Процедура ПоказатьСписокВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Функция ЗначенияДляВыбора(СписокВыбора, ЭлементНастройки, ДоступныеТипы, ДоступныеЗначения)
	ЗначенияДляВыбора = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(СписокВыбора);
	Если ЭлементНастройки = Неопределено Тогда 
		Возврат ЗначенияДляВыбора;
	КонецЕсли;
	
	ЗначенияДляВыбора.ТипЗначения = ДоступныеТипы;
	
	ЗначениеОтбора = ОтчетыКлиент.КэшЗначенияОтбора(Отчет.КомпоновщикНастроек, ЭлементНастройки);
	Если ЗначениеОтбора <> Неопределено Тогда 
		ОтчетыКлиентСервер.ДополнитьСписок(ЗначенияДляВыбора, ЗначениеОтбора);
	КонецЕсли;
	
	ОтчетыКлиент.ОбновитьПредставленияСписка(ЗначенияДляВыбора, ДоступныеЗначения);
	
	Возврат ЗначенияДляВыбора;
КонецФункции

// Параметры:
//  Список - СписокЗначений
//         - Массив из СправочникСсылка.Пользователи
//  ПараметрыВыбора - Структура:
//    * ЭлементПользовательскойНастройки - ЭлементОтбораКомпоновкиДанных
//                                       - ЗначениеПараметраНастроекКомпоновкиДанных
//    * ОграничиватьВыборУказаннымиЗначениями - Булево
//    * ИмяЭлемента - Строка
//
&НаКлиенте
Процедура ЗавершитьВыборИзСписка(Список, ПараметрыВыбора) Экспорт
	ВыбранныеЗначения = Новый СписокЗначений;
КонецПроцедуры

&НаКлиенте
Функция ПерейтиПоСсылке(АдресСсылки)
	Если ПустаяСтрока(АдресСсылки) Тогда
		Возврат Ложь;
	КонецЕсли;
	АдресСсылкиВРег = ВРег(АдресСсылки);
	Если СтрНачинаетсяС(АдресСсылкиВРег, ВРег("http://"))
		Или СтрНачинаетсяС(АдресСсылкиВРег, ВРег("https://"))
		Или СтрНачинаетсяС(АдресСсылкиВРег, ВРег("e1cib/"))
		Или СтрНачинаетсяС(АдресСсылкиВРег, ВРег("e1c://")) Тогда
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(АдресСсылки);
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура ЗагрузитьСхемуПослеПомещенияФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ВыбранныеФайлы.Хранение);
	
	ДополнительныеСвойства = Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Очистить();
	ДополнительныеСвойства.Вставить("СхемаКомпоновкиДанных", ДвоичныеДанные);
	ДополнительныеСвойства.Вставить("ОтчетИнициализирован", Ложь);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	ПараметрыЗаполнения.Вставить("КомпоновщикНастроекКД", Отчет.КомпоновщикНастроек);
	
	ОбновитьЭлементыФормыНастроек(ПараметрыЗаполнения);
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьПереданныеНастройки(ОписаниеНастроек)
	Если ВариантМодифицирован Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Вариант отчета был изменен.
			|Сохраните изменения перед применением настроек.';
			|en = 'The report option was changed.
			|Please save the changes before applying the settings.'"));
		Возврат;
	КонецЕсли;
	
	КлючТекущихПользовательскихНастроек = ОписаниеНастроек.КлючНастроек; // Строка
	ПредставлениеТекущихПользовательскихНастроек = ОписаниеНастроек.Представление;
	
	Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ОписаниеНастроек.Настройки);
	Сформировать();
КонецПроцедуры

#Область РасчетПоказателей

// Возвращает список значений.
// 
// Параметры:
//  Родитель - ГруппаФормы
//  Меню - Неопределено
// 
// Возвращаемое значение:
//  Меню - Список значений
//
&НаКлиенте
Функция МенюВидовПоказателей(Родитель, Меню = Неопределено)
	
	Если Меню = Неопределено Тогда 
		Меню = Новый СписокЗначений;
	КонецЕсли;
	
	ЭлементыМеню = Родитель.ПодчиненныеЭлементы; // ЭлементыФормы
	
	Для Каждого Элемент Из ЭлементыМеню Цикл 
		
		Если ТипЗнч(Элемент) <> Тип("ГруппаФормы") Тогда 
			Меню.Добавить(Элемент.Имя, Элемент.Заголовок, ОсновнойПоказатель = Элемент.Имя);
		Иначе
			МенюВидовПоказателей(Элемент, Меню);
		КонецЕсли;
		
	КонецЦикла;
	
	ЭлементМеню = Меню.НайтиПоЗначению(Элементы.РассчитатьВсеПоказатели.Имя);
	
	Если ЭлементМеню <> Неопределено Тогда 
		ЭлементМеню.Пометка = РазвернутьОбластьПоказателей;
	КонецЕсли;
	
	Возврат Меню;
	
КонецФункции

&НаКлиенте
Процедура ПослеВыбораПоказателя(ВыбранныйПоказатель, ДополнительныеПараметры) Экспорт 
	
	Если ТипЗнч(ВыбранныйПоказатель) <> Тип("ЭлементСпискаЗначений") Тогда 
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйПоказатель.Значение = Элементы.РассчитатьВсеПоказатели.Имя Тогда 
		
		РазвернутьОбластьПоказателей = Не Элементы.РассчитатьВсеПоказатели.Пометка;
		ОбщегоНазначенияСлужебныйКлиент.УстановитьВидимостьПанелиПоказателей(Элементы, РазвернутьОбластьПоказателей);
		
	Иначе
		РассчитатьПоказатели(ВыбранныйПоказатель.Значение);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет расчет и вывод показателей выделенной области ячеек.
// См. обработчик события ОтчетТабличныйДокументПриАктивизацииОбласти.
//
&НаКлиенте
Процедура РассчитатьПоказателиДинамически()
	
	РассчитатьПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПоказатели(ТекущаяКоманда = "")
	
	Если Не НастройкиОтчета.ВыводитьСуммуВыделенныхЯчеек Тогда 
		
		СохраняемыеВНастройкахДанныеМодифицированы = Истина;
		Возврат;
		
	КонецЕсли;
	
	Показатель = "";
	ОбщегоНазначенияСлужебныйКлиент.РассчитатьПоказатели(ЭтотОбъект, "ОтчетТабличныйДокумент", ТекущаяКоманда, 2);
	
КонецПроцедуры

#КонецОбласти

#Область УниверсальныйПоиск

&НаКлиенте
Процедура ПерейтиКНастройкам(РасширенныйРежим = Неопределено)
	
	ВыполнятьЗамеры = НастройкиОтчета.ВыполнятьЗамеры И ЗначениеЗаполнено(НастройкиОтчета.КлючЗамеров);
	Если ВыполнятьЗамеры Тогда
		МодульОценкаПроизводительностиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент");
		ИдентификаторЗамера = МодульОценкаПроизводительностиКлиент.ЗамерВремени(
			НастройкиОтчета.КлючЗамеров + ".Настройки",
			Ложь, Ложь);
		МодульОценкаПроизводительностиКлиент.УстановитьКомментарийЗамера(ИдентификаторЗамера, НастройкиОтчета.ПрефиксЗамеров);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыФормы, ФормаПараметры, Истина);
	
	Если РасширенныйРежим = Истина Тогда 
		
		НастройкиОтчета.ФормаНастроекРасширенныйРежим = 1;
		
		ПараметрыФормы.Вставить("ИмяСтраницы", "СтраницаОтборы");
		ПараметрыФормы.Вставить("СброситьПользовательскиеНастройки", Истина);
		
	КонецЕсли;
	
	ПараметрыФормы.Вставить("КлючВарианта", Строка(КлючТекущегоВарианта));
	ПараметрыФормы.Вставить("Вариант", Отчет.КомпоновщикНастроек.Настройки);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("НастройкиОтчета", НастройкиОтчета);
	ПараметрыФормы.Вставить("ВариантНаименование", Строка(ОтчетНаименованиеТекущегоВарианта));
	
	Обработчик = Новый ОписаниеОповещения("ПрименитьНастройкиИПереформироватьОтчет", ЭтотОбъект);
	ОткрытьФорму(НастройкиОтчета.ПолноеИмя + ".ФормаНастроек", ПараметрыФормы, ЭтотОбъект,,,, Обработчик);
	
	Если ВыполнятьЗамеры Тогда
		МодульОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамера);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПереходКНастройкамВыполнен(Запрос = Неопределено)
	
	ЗапросНормализованный = ВРег(?(ЗначениеЗаполнено(Запрос), Запрос, Показатель));
	
	Если ЗапросНормализованный = "СКД" Тогда
		
		СброситьУниверсальныйПоиск();
		ПерейтиКНастройкам(НастройкиОтчета.РазрешеноИзменятьВарианты);
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура СброситьУниверсальныйПоиск()
	
	Показатель = "";
	Элементы.Показатель.ОбновитьТекстРедактирования();
	
КонецПроцедуры

&НаКлиенте
Функция ПодходящиеЗначенияУниверсальногоПоиска(Запрос)
	
	ПодходящиеЗначения = Новый СписокЗначений;
	МаксимальноеКоличествоПодходящихЗначений = 50;
	
	ПараметрыПоиска = ПараметрыУниверсальногоПоиска(Запрос);
	
	Если Не ЗначениеЗаполнено(ПараметрыПоиска.СтрокаПоиска) Тогда 
		Возврат ПодходящиеЗначения;
	КонецЕсли;
	
	ОформитьПолеУниверсальногоПоиска(ПараметрыПоиска.УправляющиеСимволы);
	
	ПоляПоискаПоТипам = ПоляУниверсальногоПоискаПоТипам(
		НастройкиОтчета.АдресСхемы, Отчет.КомпоновщикНастроек.Настройки);
	
	Если ПоляПоискаПоТипам.Количество() = 0 Тогда 
		Возврат ПодходящиеЗначения;
	КонецЕсли;
	
	Если ПараметрыУниверсальногоПоискаПрименимыКСсылкам(ПараметрыПоиска) Тогда 
		НайтиПодходящиеЗначенияУниверсальногоПоиска(ПодходящиеЗначения, ПоляПоискаПоТипам, ПараметрыПоиска);
	КонецЕсли;
	
	НайтиПодходящиеЗначенияУниверсальногоПоискаЧисла(ПодходящиеЗначения, ПоляПоискаПоТипам, ПараметрыПоиска);
	
	Если ПодходящиеЗначения.Количество() = 0 Тогда 
		
		Если СтрДлина(ПараметрыПоиска.СтрокаПоиска) > 2 Тогда 
			Сообщение = НСтр("ru = 'Совпадений не найдено';
							|en = 'No matches found'");
		Иначе
			Сообщение = НСтр("ru = 'Продолжите ввод...';
							|en = 'Continue typing...'");
		КонецЕсли;
		
		СообщениеФорматированное = Новый ФорматированнаяСтрока(Сообщение,, WebЦвета.НейтральноСерый);
		ПодходящиеЗначения.Добавить("", СообщениеФорматированное);
		
	КонецЕсли;
	
	Если ПодходящиеЗначения.Количество() <= МаксимальноеКоличествоПодходящихЗначений Тогда 
		Возврат ПодходящиеЗначения;
	КонецЕсли;
	
	ПодходящиеЗначенияНормализованные = Новый СписокЗначений;
	
	Для НомерЭлемента = 1 По МаксимальноеКоличествоПодходящихЗначений Цикл 
		ЗаполнитьЗначенияСвойств(ПодходящиеЗначенияНормализованные.Добавить(), ПодходящиеЗначения[НомерЭлемента - 1]);
	КонецЦикла;
	
	Возврат ПодходящиеЗначенияНормализованные;
	
КонецФункции

&НаКлиенте
Функция ПараметрыУниверсальногоПоиска(Запрос)
	
	ПараметрыПоиска = Новый Структура;
	
	Возврат ПараметрыПоиска;
	
КонецФункции

&НаКлиенте
Процедура ОформитьПолеУниверсальногоПоиска(УправляющиеСимволы)
	
	ПолеЗапроса = Элементы.Показатель;
	
	Если УправляющиеСимволы = "-" Тогда
		
		ПолеЗапроса.ЦветТекста = WebЦвета.Красный;
		
	ИначеЕсли Не ПустаяСтрока(УправляющиеСимволы) Тогда
		
		ПолеЗапроса.ЦветТекста = WebЦвета.Зеленый;
		
	Иначе
		
		ПолеЗапроса.ЦветТекста = Новый Цвет;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыУниверсальногоПоискаПрименимыКСсылкам(ПараметрыПоиска)
	
	НедопустимыеУправляющиеСимволы = Новый Массив;
	НедопустимыеУправляющиеСимволы.Добавить(">");
	НедопустимыеУправляющиеСимволы.Добавить(">=");
	НедопустимыеУправляющиеСимволы.Добавить("<");
	НедопустимыеУправляющиеСимволы.Добавить("<=");
	
	Если НедопустимыеУправляющиеСимволы.Найти(ПараметрыПоиска.УправляющиеСимволы) <> Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СтрДлина(ПараметрыПоиска.СтрокаПоиска) > 2
		Или ОбщегоНазначенияКлиентСервер.ЭтоЧисло(ПараметрыПоиска.СтрокаПоиска);
	
КонецФункции

&НаКлиенте
Процедура НайтиПодходящиеЗначенияУниверсальногоПоискаЧисла(ПодходящиеЗначения, ПоляПоискаПоТипам, ПараметрыПоиска)
	
	Если Не ОбщегоНазначенияКлиентСервер.ЭтоЧисло(ПараметрыПоиска.СтрокаПоиска) Тогда 
		Возврат;
	КонецЕсли;
	
	ПоляПоиска = ПоляПоискаПоТипам[Тип("Число")];
	
	Если ПоляПоиска = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПодходящиеЗначенияДляЧисла = Новый СписокЗначений;
	
	ДоступныеПоляПоиска = ДоступныеПоляПоискаЧисла(ПоляПоиска, ПараметрыПоиска.ЧислоПоиска, ПараметрыПоиска.УправляющиеСимволы);
	
	Для Каждого ПолеПоиска Из ДоступныеПоляПоиска Цикл 
		
		СвойстваПоиска = СвойстваУниверсальногоПоиска(ПолеПоиска.Ключ, ПараметрыПоиска.ЧислоПоиска, ПараметрыПоиска.УправляющиеСимволы);
		ПредставлениеПоиска = ПредставлениеЗначенияУниверсальногоПоискаСтроки(
			ПолеПоиска.Значение, СвойстваПоиска.ВидСравнения, СвойстваПоиска.ПравоеЗначение);
		
		ВариантыПоиска = Новый Массив;
		ВариантыПоиска.Добавить(СвойстваПоиска);
		
		ПодходящиеЗначенияДляЧисла.Добавить(ВариантыПоиска, ПредставлениеПоиска);
		
	КонецЦикла;
	
	ПодходящиеЗначенияДляЧисла.СортироватьПоПредставлению();
	ОтчетыКлиентСервер.ДополнитьСписок(ПодходящиеЗначения, ПодходящиеЗначенияДляЧисла);
	
КонецПроцедуры

&НаКлиенте
Функция ДоступныеПоляПоискаЧисла(ПоляПоиска, ЗначениеПоиска, УправляющиеСимволы)
	
	Условие = УсловиеУниверсальногоПоиска(ЗначениеПоиска, УправляющиеСимволы);
	
	Если Условие = ВидСравненияКомпоновкиДанных.Равно Тогда  
		Возврат ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПоляПоиска);
	КонецЕсли;
	
	ДоступныеПоляПоиска = Новый Соответствие;
	ДоступныеПоляПараметров = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляПараметровДанных;
	
	Для Каждого ПолеПоиска Из ПоляПоиска Цикл 
		
		Если ДоступныеПоляПараметров.НайтиПоле(ПолеПоиска.Ключ) = Неопределено Тогда 
			ДоступныеПоляПоиска.Вставить(ПолеПоиска.Ключ, ПолеПоиска.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДоступныеПоляПоиска;
	
КонецФункции

&НаСервереБезКонтекста
Процедура НайтиПодходящиеЗначенияУниверсальногоПоиска(ПодходящиеЗначения, ПоляПоискаПоТипам, ПараметрыПоиска)
	
	Если Не ЗначениеЗаполнено(ПараметрыПоиска.СтрокаПоиска) Тогда 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстЗапросаПоОбъектуПоиска(Объект, ПараметрыПоиска)
	
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 5
	|	""&ПолноеИмяОбъекта"" КАК ПолноеИмяОбъекта,
	|	Ссылка КАК Ссылка,
	|	Представление КАК Представление,
	|	&ПолеПоУсловию КАК ПолеПоУсловию,
	|	&ДополнительныеДанные КАК ДополнительныеДанные
	|ИЗ
	|	&ПолноеИмяОбъекта
	|ГДЕ
	|	&Условие
	|";
	
	ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&ПолноеИмяОбъекта", Объект.ПолноеИмя());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеПоУсловию", ПолеТекстаЗапросаПоОбъектуПоиска(Объект, ПараметрыПоиска));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Условие", УсловиеТекстаЗапросаПоОбъектуПоиска(Объект, ПараметрыПоиска));
	
	Возврат СтрЗаменить(ТекстЗапроса, "&ДополнительныеДанные", ДополнительныеДанныеТекстаЗапросаПоОбъектуПоиска(Объект));
	
КонецФункции

// Параметры:
//  Объект - ОбъектМетаданных
//  ПараметрыПоиска - Структура:
//    * СтрокаПоискаНормализованная - Строка
// 
// Возвращаемое значение:
//  Строка - Строка
//
&НаСервереБезКонтекста
Функция ПолеТекстаЗапросаПоОбъектуПоиска(Объект, ПараметрыПоиска)
	
	ОписаниеПоляПоУсловию = Новый Массив;
	Поля = Объект.ВводПоСтроке; // СписокПолей
	
	Для Каждого Поле Из Поля Цикл
		
		ТипРеквизита = ТипРеквизитаПоиска(Объект, Поле);
		
		Если Не ТипРеквизита.СодержитТип(Тип("Строка")) Тогда 
			Продолжить;
		КонецЕсли;
		
		ПолеПоУсловию = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"КОГДА ВЫРАЗИТЬ(%1 КАК СТРОКА(150)) ПОДОБНО %2 ТОГДА ""%3""",
			Поле.Имя,
			"""%" + ПараметрыПоиска.СтрокаПоискаНормализованная + "%""",
			Поле.Имя);
		
		ОписаниеПоляПоУсловию.Добавить(ПолеПоУсловию);
		
	КонецЦикла;
	
	Если ОписаниеПоляПоУсловию.Количество() = 0 Тогда 
		Возврат """""";
	КонецЕсли;
	
	ОписаниеПоляПоУсловию.Вставить(0, "ВЫБОР");//@query-part
	ОписаниеПоляПоУсловию.Добавить("ИНАЧЕ """"");//@query-part
	ОписаниеПоляПоУсловию.Добавить("КОНЕЦ");//@query-part
	
	Возврат СтрСоединить(ОписаниеПоляПоУсловию, " ");
	
КонецФункции

// Параметры:
//  Объект - ОбъектМетаданных
//  ПараметрыПоиска - Структура:
//    * СтрокаПоискаНормализованная - Строка
// 
// Возвращаемое значение:
//  Строка - Строка
//
&НаСервереБезКонтекста
Функция УсловиеТекстаЗапросаПоОбъектуПоиска(Объект, ПараметрыПоиска)
	
	Условия = Новый Массив;
	Поля = Объект.ВводПоСтроке; // СписокПолей
	
	Для Каждого Поле Из Поля Цикл
		
		ТипРеквизита = ТипРеквизитаПоиска(Объект, Поле);
		
		Если ТипРеквизита.СодержитТип(Тип("Строка")) Тогда 
			
			Условие = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"ВЫРАЗИТЬ(%1 КАК СТРОКА(150)) ПОДОБНО %2",
				Поле.Имя,
				"""%" + ПараметрыПоиска.СтрокаПоискаНормализованная + "%""");
				
		ИначеЕсли ТипРеквизита.СодержитТип(Тип("Число"))
			И ПараметрыПоиска.ЧислоПоиска <> Неопределено Тогда  
			
			Условие = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"ВЫРАЗИТЬ(%1 КАК ЧИСЛО) = &ЧислоПоиска", Поле.Имя);//@query-part
			
		Иначе
			Продолжить;
		КонецЕсли;
		
		Условия.Добавить(Условие);
		
	КонецЦикла;
	
	Если Условия.Количество() = 0 Тогда 
		Возврат "ЛОЖЬ";
	КонецЕсли;
	
	Возврат СтрСоединить(Условия, " ИЛИ ");//@query-part
	
КонецФункции

// Параметры:
//  Объект - ОбъектМетаданных
// 
// Возвращаемое значение:
//  Строка - Строка
//
&НаСервереБезКонтекста
Функция ДополнительныеДанныеТекстаЗапросаПоОбъектуПоиска(Объект)
	
	ДополнительныеДанные = Новый Массив;
	
	Исключения = Новый Массив();
	Исключения.Добавить(НСтр("ru = 'Наименование';
							|en = 'Description'"));
	Исключения.Добавить(НСтр("ru = 'Номер';
							|en = 'Number'"));
	
	Поля = Объект.ВводПоСтроке; // СписокПолей
	
	Для Каждого Поле Из Поля Цикл
		
		Если Исключения.Найти(Поле.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТипРеквизита = ТипРеквизитаПоиска(Объект, Поле);
		
		Если Не ТипРеквизита.СодержитТип(Тип("Строка")) Тогда 
			Продолжить;
		КонецЕсли;
		
		Данные = """" + Поле.Имя + ": "" + " + Поле.Имя;
		ДополнительныеДанные.Добавить(Данные);
		
	КонецЦикла;
	
	Если ДополнительныеДанные.Количество() = 0 Тогда 
		Возврат """""";
	КонецЕсли;
	
	Возврат СтрСоединить(ДополнительныеДанные, " + "", """);
	
КонецФункции

// Параметры:
//  Объект - ОбъектМетаданных
//  Поле - Поле
// 
// Возвращаемое значение:
//  ОписаниеТипов - ОписаниеТипов
//
&НаСервереБезКонтекста
Функция ТипРеквизитаПоиска(Объект, Поле)
	
	Для Каждого ОписаниеРеквизита Из Объект.СтандартныеРеквизиты Цикл 
		
		Если ОписаниеРеквизита.Имя = Поле.Имя Тогда 
			Возврат ОписаниеРеквизита.Тип;
		КонецЕсли;
		
	КонецЦикла;
	
	ОписаниеРеквизита = Объект.Реквизиты.Найти(Поле.Имя);
	
	Если ОписаниеРеквизита <> Неопределено Тогда 
		Возврат ОписаниеРеквизита.Тип;
	КонецЕсли;
	
	Возврат Новый ОписаниеТипов();
	
КонецФункции

&НаСервереБезКонтекста
Процедура УточнитьТекстПервогоЗапросаУниверсальногоПоиска(ТекстыЗапросов)
	
	ТекстЗапроса = ТекстыЗапросов[0];
	
	Операторы = СтрПолучитьСтроку(ТекстЗапроса, 1);
	
	ОписаниеОператоров = СтрРазделить(Операторы, " ");
	ОписаниеОператоров.Вставить(1, НСтр("ru = 'РАЗРЕШЕННЫЕ';
										|en = 'ALLOWED'"));
	
	УточненныеОператоры = СтрСоединить(ОписаниеОператоров, " ");
	
	ТекстыЗапросов[0] = СтрЗаменить(ТекстЗапроса, Операторы, УточненныеОператоры);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеУниверсальногоПоискаСсылки(Данные, ПолеПоиска, Условие, СтрокаПоиска)
	
	ПредставлениеЗначения = Данные.Представление;
	
	СлужебныеСимволы = СтрРазделить("< >", " ");
	
	Для Каждого СлужебныйСимвол Из СлужебныеСимволы Цикл 
		ПредставлениеЗначения = СтрЗаменить(ПредставлениеЗначения, СлужебныйСимвол, "");
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Данные.ДополнительныеДанные) Тогда 
		
		ПредставлениеЗначения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 (%2)';
				|en = '%1 (%2)'"), Данные.Представление, Данные.ДополнительныеДанные);
		
	КонецЕсли;
	
	ФрагментУсловия = ФрагментУсловия(Условие);
	
	НачалоСтрокиПоиска = СтрНайти(ВРег(ПредставлениеЗначения), ВРег(СтрокаПоиска));
	КонецСтрокиПоиска = НачалоСтрокиПоиска + СтрДлина(СтрокаПоиска);
	ДлинаНайденногоФрагмента = ?(НачалоСтрокиПоиска = 0, 0, СтрДлина(СтрокаПоиска));
	
	ФрагментДоСтрокиПоиска = Лев(ПредставлениеЗначения, НачалоСтрокиПоиска - 1);
	ФрагментСтрокиПоиска = ФрагментСтрокиПоиска(
		Сред(ПредставлениеЗначения, НачалоСтрокиПоиска, ДлинаНайденногоФрагмента));
	
	ФрагментПослеСтрокиПоиска = Сред(ПредставлениеЗначения, КонецСтрокиПоиска);
	
	Возврат Новый ФорматированнаяСтрока(
		ПолеПоиска,
		ФрагментУсловия,
		ФрагментДоСтрокиПоиска,
		ФрагментСтрокиПоиска,
		ФрагментПослеСтрокиПоиска);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеЗначенияУниверсальногоПоискаСтроки(ПолеПоиска, Условие, ЗначениеПоиска)
	
	Если ТипЗнч(ЗначениеПоиска) = Тип("Число") Тогда 
		СтрокаУсловия = ОператорУниверсальногоПоиска(Условие);
	Иначе
		СтрокаУсловия = НРег(Условие);
	КонецЕсли;
	
	СтрокаПоиска = Строка(ЗначениеПоиска);
	
	ФрагментУсловия = ФрагментУсловия(СтрокаУсловия);
	ФрагментСтрокиПоиска = ФрагментСтрокиПоиска(СтрокаПоиска);
	
	Возврат Новый ФорматированнаяСтрока(ПолеПоиска, ФрагментУсловия, """", ФрагментСтрокиПоиска, """");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ФрагментУсловия(Условие, ОтступДоУсловия = " ", ОтступПослеУсловия = " ")
	
	УсловиеНормализованное = НРег(СтрЗаменить(Условие, "<", "&lt;"));
	
	ШаблонФрагментаУсловия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1<span style=""color: %2"">%3</span>%4';
			|en = '%1<span style=""color: %2"">%3</span>%4'"),
		ОтступДоУсловия,
		"СкрытыйВариантОтчетаЦвет",
		УсловиеНормализованное,
		ОтступПослеУсловия);
	
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	ФрагментУсловия = СтроковыеФункции.ФорматированнаяСтрока(ШаблонФрагментаУсловия);
#Иначе
	ФрагментУсловия = СтроковыеФункцииКлиент.ФорматированнаяСтрока(ШаблонФрагментаУсловия);
#КонецЕсли
	
	Возврат ФрагментУсловия;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ФрагментСтрокиПоиска(СтрокаПоиска)
	
//	ШаблонФрагментаСтрокиПоиска = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//		НСтр("ru = '<span style=""color: %1; font: %2"">%3</span>';
//			|en = '<span style=""color: %1; font: %2"">%3</span>'"),
//		"МоиВариантыОтчетовЦвет",
//		"ВажнаяНадписьШрифт",
//		СтрокаПоиска);
//	
//#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
//	ФрагментСтрокиПоиска = СтроковыеФункции.ФорматированнаяСтрока(ШаблонФрагментаСтрокиПоиска);
//#Иначе
//	ФрагментСтрокиПоиска = СтроковыеФункцииКлиент.ФорматированнаяСтрока(ШаблонФрагментаСтрокиПоиска);
//#КонецЕсли
	
	//Возврат ФрагментСтрокиПоиска;
	Возврат Неопределено;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СвойстваУниверсальногоПоиска(ПолеПоиска, ЗначениеПоиска, УправляющиеСимволы)
	
	Условие = УсловиеУниверсальногоПоиска(ЗначениеПоиска, УправляющиеСимволы);
	
	Свойства = Новый Структура;
	Свойства.Вставить("Использование", Истина);
	Свойства.Вставить("ЛевоеЗначение", ПолеПоиска);
	Свойства.Вставить("ВидСравнения", Условие);
	Свойства.Вставить("ПравоеЗначение", ЗначениеПоиска);
	
	Возврат Свойства;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция УсловиеУниверсальногоПоиска(ЗначениеПоиска, УправляющиеСимволы)
	
	Если ТипЗнч(ЗначениеПоиска) = Тип("Строка")
		И (Не ЗначениеЗаполнено(УправляющиеСимволы)
		Или УправляющиеСимволы = "=") Тогда 
		
		Условие = ВидСравненияКомпоновкиДанных.Содержит;
		
	ИначеЕсли ТипЗнч(ЗначениеПоиска) = Тип("Строка")
		И (УправляющиеСимволы = "-"
		Или УправляющиеСимволы = "<>") Тогда 
		
		Условие = ВидСравненияКомпоновкиДанных.НеСодержит;
		
	ИначеЕсли УправляющиеСимволы = "-"
		Или УправляющиеСимволы = "<>" Тогда 
		
		Условие = ВидСравненияКомпоновкиДанных.НеРавно;
		
	ИначеЕсли УправляющиеСимволы = ">" Тогда 
		
		Условие = ВидСравненияКомпоновкиДанных.Больше;
		
	ИначеЕсли УправляющиеСимволы = ">=" Тогда 
		
		Условие = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		
	ИначеЕсли УправляющиеСимволы = "<" Тогда 
		
		Условие = ВидСравненияКомпоновкиДанных.Меньше;
		
	ИначеЕсли УправляющиеСимволы = "<=" Тогда 
		
		Условие = ВидСравненияКомпоновкиДанных.Меньше;
		
	Иначе
		
		Условие = ВидСравненияКомпоновкиДанных.Равно;
		
	КонецЕсли;
	
	Возврат Условие;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОператорУниверсальногоПоиска(Условие)
	
	Операторы = Новый Соответствие;
	Операторы.Вставить(ВидСравненияКомпоновкиДанных.Равно, "=");
	Операторы.Вставить(ВидСравненияКомпоновкиДанных.НеРавно, "<>");
	Операторы.Вставить(ВидСравненияКомпоновкиДанных.Больше, ">");
	Операторы.Вставить(ВидСравненияКомпоновкиДанных.БольшеИлиРавно, ">=");
	Операторы.Вставить(ВидСравненияКомпоновкиДанных.Меньше, "<");
	Операторы.Вставить(ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, "<=");
	
	Оператор = Операторы[Условие];
	
	Возврат ?(Оператор = Неопределено, НРег(Условие), Оператор);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПоляУниверсальногоПоискаПоТипам(АдресСхемы, Знач Настройки)
	
	ПоляПоискаПоТипам = Новый Соответствие;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	ОтчетыСервер.ИнициализироватьКомпоновщикНастроек(КомпоновщикНастроек, АдресСхемы);
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
	Коллекции = Новый Массив;
	Коллекции.Добавить(ОписаниеПараметровОтчета(КомпоновщикНастроек));
	Коллекции.Добавить(ОписаниеОтборовОтчета(КомпоновщикНастроек));
	Коллекции.Добавить(ОписаниеПолейОтчета(КомпоновщикНастроек));
	
	Для Каждого Коллекция Из Коллекции Цикл 
		
		Для Каждого ОписаниеПоля Из Коллекция Цикл 
			
			Типы = ОписаниеПоля.ТипЗначения.Типы();
			
			Для Каждого Тип Из Типы Цикл
				
				ПоляПоТипу = ПоляПоискаПоТипам[Тип];
				
				Если ПоляПоТипу = Неопределено Тогда 
					ПоляПоТипу = Новый Соответствие;
				КонецЕсли;
				
				ПоляПоТипу.Вставить(ОписаниеПоля.Поле, ОписаниеПоля.Заголовок);
				ПоляПоискаПоТипам.Вставить(Тип, ПоляПоТипу);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ПоляПоискаПоТипам;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеПараметровОтчета(КомпоновщикНастроек)
	
	ОписаниеПараметров = Новый Массив;
	
	Настройки = КомпоновщикНастроек.Настройки;
	ПоляПараметровДанных = Настройки.ДоступныеПоляПараметровДанных.Элементы;
	ПараметрыДанных = Настройки.ПараметрыДанных;
	
	Для Каждого ПолеПараметровДанных Из ПоляПараметровДанных Цикл 
		
		Для Каждого Элемент Из ПолеПараметровДанных.Элементы Цикл 
			
			СтруктураПоля = СтрРазделить(Элемент.Поле, ".");
			
			Если СтруктураПоля.Количество() < 2 Тогда 
				Продолжить;
			КонецЕсли;
			
			ИмяПараметра = СтруктураПоля[1];
			
			Если ПараметрыДанных.Элементы.Найти(ИмяПараметра) = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			ОписаниеПараметра = ПараметрыДанных.ДоступныеПараметры.Элементы.Найти(ИмяПараметра);
			
			Если ОписаниеПараметра = Неопределено
				Или Не ОписаниеПараметра.Видимость Тогда 
				
				Продолжить;
			КонецЕсли;
			
			ОписаниеПараметров.Добавить(Элемент);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ОписаниеПараметров;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеОтборовОтчета(КомпоновщикНастроек, Отбор = Неопределено, ОписаниеОтборов = Неопределено)
	
	Если ОписаниеОтборов = Неопределено Тогда 
		ОписаниеОтборов = Новый Массив;
	КонецЕсли;
	
	Настройки = КомпоновщикНастроек.Настройки;
	
	Если Отбор = Неопределено Тогда 
		Отбор = Настройки.Отбор;
	КонецЕсли;
	
	Для Каждого Элемент Из Отбор.Элементы Цикл 
		
		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда 
			
			ОписаниеОтборовОтчета(КомпоновщикНастроек, Элемент, ОписаниеОтборов);
			
		Иначе
			
			ОписаниеПоля = Настройки.ДоступныеПоляОтбора.НайтиПоле(Элемент.ЛевоеЗначение);
			
			Если ОписаниеПоля <> Неопределено Тогда 
				ОписаниеОтборов.Добавить(ОписаниеПоля);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОписаниеОтборов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеПолейОтчета(КомпоновщикНастроек)
	
	ОписаниеПолей = Новый Массив;
	
	ИндексСтруктурыОтчета = ВариантыОтчетовСлужебный.ИндексСтруктурыОтчетаБезКонтекста(КомпоновщикНастроек);
	
	ИндексПолейОтчета = ИндексСтруктурыОтчета.Скопировать(, "Поле");
	ИндексПолейОтчета.Свернуть("Поле");
	
	ПоляОтчета = ИндексПолейОтчета.ВыгрузитьКолонку("Поле");
	Настройки = КомпоновщикНастроек.Настройки;
	
	Для Каждого ПолеОтчета Из ПоляОтчета Цикл 
		
		ОписаниеПоля = Настройки.ДоступныеПоляВыбора.НайтиПоле(ПолеОтчета);
		
		Если ОписаниеПоля = Неопределено Тогда 
			ОписаниеПоля = Настройки.ДоступныеПоляГруппировок.НайтиПоле(ПолеОтчета);
		КонецЕсли;
		
		Если ОписаниеПоля <> Неопределено Тогда 
			ОписаниеПолей.Добавить(ОписаниеПоля);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОписаниеПолей;
	
КонецФункции

&НаКлиенте
Процедура ПрименитьЗначениеУниверсальногоПоиска(ВариантыПоиска)
	
	ЭтоПользовательскийПоиск = Ложь;
	
КонецПроцедуры

&НаКлиенте
Функция ЗначениеУниверсальногоПоискаПримененоКПараметрам(ВариантыПоиска, ЭтоПользовательскийПоиск)
	
	КомпоновщикНастроек = Отчет.КомпоновщикНастроек;
	ПараметрыДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных;
	
	ПолеПараметра = Неопределено;
	ПодходящийВариантПоиска = Неопределено;
	
	Для Каждого ВариантПоиска Из ВариантыПоиска Цикл 
		
		ПолеПараметра = ПараметрыДанных.ДоступныеПоляПараметров.НайтиПоле(ВариантПоиска.ЛевоеЗначение);
		
		Если ПолеПараметра <> Неопределено Тогда 
			
			ПодходящийВариантПоиска = ВариантПоиска;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПолеПараметра = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ОписаниеИмениПоляПараметра = СтрРазделить(ПолеПараметра.Поле, ".");
	ОписаниеИмениПараметра = Новый Массив;
	
	Для Индекс = 1 По ОписаниеИмениПоляПараметра.ВГраница() Цикл 
		ОписаниеИмениПараметра.Добавить(ОписаниеИмениПоляПараметра[Индекс]);
	КонецЦикла;
	
	ИмяПараметра = СтрСоединить(ОписаниеИмениПараметра, ".");
	НайденныйПараметр = ПараметрыДанных.Элементы.Найти(ИмяПараметра);
	
	Если НайденныйПараметр = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ОписаниеПараметра = ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(НайденныйПараметр.Параметр);
	
	Если ОписаниеПараметра.ДоступенСписокЗначений Тогда 
		НайденныйПараметр.Значение = ОтчетыКлиентСервер.ЗначенияСписком(ПодходящийВариантПоиска.ПравоеЗначение);
	Иначе
		НайденныйПараметр.Значение = ПодходящийВариантПоиска.ПравоеЗначение;
	КонецЕсли;
	
	НайденныйПараметр.Использование = Истина;
	
	ЭтоПользовательскийПоиск = ЗначениеЗаполнено(НайденныйПараметр.ИдентификаторПользовательскойНастройки);
	
	Если Не ЭтоПользовательскийПоиск Тогда 
		НайденныйПараметр.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	НайденныйПараметр.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
	ПользовательскийПараметр = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(
		НайденныйПараметр.ИдентификаторПользовательскойНастройки);
	
	ПользовательскийПараметр.Значение = НайденныйПараметр.Значение;
	ПользовательскийПараметр.Использование = НайденныйПараметр.Использование;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПрименитьЗначениеУниверсальногоПоискаКОтборам(ВариантыПоиска, ЭтоПользовательскийПоиск)
	
	КомпоновщикНастроек = Отчет.КомпоновщикНастроек;
	Фильтры = КомпоновщикНастроек.Настройки.Отбор;
	Фильтр = Неопределено;
	ПодходящийВариантПоиска = ?(ВариантыПоиска.Количество() = 0, Неопределено, ВариантыПоиска[0]);
	
	Для Каждого ВариантПоиска Из ВариантыПоиска Цикл 
		
		Фильтр = ВариантыОтчетовСлужебныйКлиентСервер.ФильтрРазделаОтчета(Фильтры, ВариантПоиска.ЛевоеЗначение);
		
		Если Фильтр <> Неопределено Тогда 
			
			ПодходящийВариантПоиска = ВариантПоиска;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПодходящийВариантПоиска = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Фильтр = Неопределено Тогда 
		
		Фильтр = Фильтры.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Фильтр.ЛевоеЗначение = ПодходящийВариантПоиска.ЛевоеЗначение;
		
	КонецЕсли;
	
	ЭтоПользовательскийПоиск = ЗначениеЗаполнено(Фильтр.ИдентификаторПользовательскойНастройки);
	
	Если Не ЭтоПользовательскийПоиск Тогда 
		
		Фильтр.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
		УточнитьСвойстваФильтра(Фильтр, ПодходящийВариантПоиска);
		
	КонецЕсли;
	
	Фильтр.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
	ПользовательскийФильтр = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(
		Фильтр.ИдентификаторПользовательскойНастройки);
	
	УточнитьСвойстваФильтра(ПользовательскийФильтр, ПодходящийВариантПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура УточнитьСвойстваФильтра(Фильтр, Поиск)
	
	Если ТипЗнч(Фильтр) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда 
		Возврат;
	КонецЕсли;
	
	Значения = ОтчетыКлиентСервер.ЗначенияСписком(Фильтр.ПравоеЗначение);
	
	Если Значения.НайтиПоЗначению(Поиск.ПравоеЗначение) = Неопределено Тогда 
		Значения.Добавить(Поиск.ПравоеЗначение);
	КонецЕсли;
	
	Если Фильтр.Использование
		И Фильтр.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
		И Поиск.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
		И Значения.Количество() > 1 Тогда 
		
		Фильтр.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		Фильтр.ПравоеЗначение = Значения;
		
	ИначеЕсли Фильтр.Использование
		И Фильтр.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке
		И Поиск.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда 
		
		Фильтр.ПравоеЗначение = Значения;
		
	ИначеЕсли Фильтр.Использование
		И Фильтр.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно
		И Поиск.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно
		И Значения.Количество() > 1 Тогда 
		
		Фильтр.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
		Фильтр.ПравоеЗначение = Значения;
		
	ИначеЕсли Фильтр.Использование
		И Фильтр.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке
		И Поиск.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда 
		
		Фильтр.ПравоеЗначение = Значения;
		
	Иначе
		
		Фильтр.Использование = Поиск.Использование;
		Фильтр.ВидСравнения = Поиск.ВидСравнения;
		Фильтр.ПравоеЗначение = Поиск.ПравоеЗначение;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УровниГруппировок

&НаСервере
Процедура ИнициализироватьМенюУровнейГруппировок()
	
	АдресИндексаСтруктурыОтчета = НастройкиОтчета.СвойстваРезультата.АдресИндексаСтруктурыОтчета;
	ИндексСтруктурыОтчета = Неопределено;
	
	Если ЭтоАдресВременногоХранилища(АдресИндексаСтруктурыОтчета) Тогда 
		ИндексСтруктурыОтчета = ПолучитьИзВременногоХранилища(АдресИндексаСтруктурыОтчета);
	КонецЕсли;
	
	ОчиститьМенюУровнейГруппировок();
	ЗаполнитьМенюУровнейГруппировок(ИндексСтруктурыОтчета);
	
	УстановитьДоступностьМенюУровнейГруппировок();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьМенюУровнейГруппировок()
	
	Кнопки = Элементы.ГруппаУровниГруппировок.ПодчиненныеЭлементы;
	Индекс = Кнопки.Количество() - 1;
	
	Пока Индекс >= 0 Цикл 
		
		Кнопка = Кнопки[Индекс];
		Индекс = Индекс - 1;
		
		Если Кнопка = Элементы.ПоказатьУровеньГруппировок Тогда 
			Продолжить;
		КонецЕсли;
		
		ИмяДополнительнойКнопки = Кнопка.Имя + "Еще";
		ДополнительнаяКнопка = Элементы.Найти(ИмяДополнительнойКнопки);
		
		Если ДополнительнаяКнопка <> Неопределено Тогда 
			Элементы.Удалить(ДополнительнаяКнопка);
		КонецЕсли;
		
		ИмяКнопкиКонтекстного = Кнопка.Имя + "КонтекстноеМеню";
		КнопкаКонтекстногоМеню = Элементы.Найти(ИмяКнопкиКонтекстного);
		
		Если КнопкаКонтекстногоМеню <> Неопределено Тогда 
			Элементы.Удалить(КнопкаКонтекстногоМеню);
		КонецЕсли;
		
		Команда = Команды.Найти(Кнопка.Имя);
		
		Если Команда <> Неопределено Тогда 
			Команды.Удалить(Команда);
		КонецЕсли;
		
		Элементы.Удалить(Кнопка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМенюУровнейГруппировок(ИндексСтруктурыОтчета)
	
	Если ОтчетТабличныйДокумент.КоличествоУровнейГруппировокСтрок() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СвойстваМенюУровнейГруппировокСложногоОтчета(ИндексСтруктурыОтчета)
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция СвойстваМенюУровнейГруппировокПростогоОтчета(ИндексСтруктурыОтчета)
	
	ПоляСИерархическойГруппировкой = ПоляОтчетаСИерархическойГруппировкой(ИндексСтруктурыОтчета);
	
	Если ПоляСИерархическойГруппировкой.Количество() > 1 Тогда 
		Возврат СвойстваМенюУровнейГруппировокСложногоОтчета(ИндексСтруктурыОтчета);
	КонецЕсли;
	
	КоличествоУровнейГруппировок = ОтчетТабличныйДокумент.КоличествоУровнейГруппировокСтрок();
	
	ГруппировкиОтчета = ГруппировкиОтчетаСУчетомПоляСИерархическойГруппировкой(
		ИндексСтруктурыОтчета, ПоляСИерархическойГруппировкой, КоличествоУровнейГруппировок);
	
	СвойстваМеню = СвойстваМенюИзСтруктурыОтчета(ИндексСтруктурыОтчета);
	Для Индекс = 0 По Мин(ГруппировкиОтчета.Количество(), КоличествоУровнейГруппировок) - 1 Цикл 
		
		УровеньГруппировки = Индекс + 1;
		
		Свойства = СвойстваМеню.Добавить();
		Свойства.ПредставлениеУровняГруппировки = ГруппировкиОтчета[Индекс].ПредставлениеГруппировки;
		Свойства.ИмяКоманды = Элементы.ПоказатьУровеньГруппировок.Имя + УровеньГруппировки;
		Свойства.УровеньГруппировки = УровеньГруппировки;
		
	КонецЦикла;
	
	СвойстваМеню.Сортировать("УровеньГруппировки");	
	Возврат СвойстваМеню;
	
КонецФункции

// Возвращает таблицу значений
// 
// Параметры:
//  ИндексСтруктурыОтчета - Таблица значений
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//    * ИмяКоманды - Строка
//    * УровеньГруппировки - Число
//    * ПредставлениеУровняГруппировки - Строка
//
&НаСервереБезКонтекста
Функция СвойстваМенюИзСтруктурыОтчета(ИндексСтруктурыОтчета)

	СвойстваМеню = ИндексСтруктурыОтчета.СкопироватьКолонки("ПорядокГруппировки, ПредставлениеГруппировки"); // ТаблицаЗначений
	
	СвойстваМеню.Колонки.Вставить(1, "ИмяКоманды", Новый ОписаниеТипов("Строка"));
	
	Колонка = СвойстваМеню.Колонки.Найти("ПорядокГруппировки"); // КолонкаТаблицыЗначений
	Колонка.Имя = "УровеньГруппировки";
	
	Колонка = СвойстваМеню.Колонки.Найти("ПредставлениеГруппировки"); // КолонкаТаблицыЗначений
	Колонка.Имя = "ПредставлениеУровняГруппировки";
	
	Возврат СвойстваМеню;
	
КонецФункции

&НаСервере
Функция ПоляОтчетаСИерархическойГруппировкой(ИндексСтруктурыОтчета)
	
	Поиск = Новый Структура();
	Поиск.Вставить("ИспользуетсяВПоляхГруппировки", Истина);
	Поиск.Вставить("ТипГруппировки", ТипГруппировкиКомпоновкиДанных.Иерархия);
	
	Возврат ИндексСтруктурыОтчета.Скопировать(Поиск);
	
КонецФункции

&НаСервере
Функция ГруппировкиОтчетаСУчетомПоляСИерархическойГруппировкой(ИндексСтруктурыОтчета, ПоляСИерархическойГруппировкой, КоличествоУровнейГруппировок)
	
	ГруппировкиОтчета = ИндексСтруктурыОтчета.Скопировать(); // ТаблицаЗначений
	
	Индекс = ГруппировкиОтчета.Количество() - 1;
	
	Пока Индекс >= 0 Цикл 
		
		Если СтрНайти(ГруппировкиОтчета[Индекс].ИдентификаторГруппировки, "/column/") > 0 Тогда 
			ГруппировкиОтчета.Удалить(Индекс);
		КонецЕсли;
		
		Индекс = Индекс - 1;
		
	КонецЦикла;
	
	ГруппировкиОтчета.Свернуть("ПорядокГруппировки, ПредставлениеГруппировки");
	
	КолонкиГруппировкиОтчета = ГруппировкиОтчета.Колонки; // КоллекцияКолонокТаблицыЗначений
	КолонкиГруппировкиОтчета.Добавить("Уровень", Новый ОписаниеТипов("Число"));
	
	ГруппировкиОтчета.Сортировать("ПорядокГруппировки");
	
	КоличествоУровнейПоляСИерархическойГруппировкой = КоличествоУровнейГруппировок - ГруппировкиОтчета.Количество();
	
	Если ПоляСИерархическойГруппировкой.Количество() <> 1
		Или КоличествоУровнейПоляСИерархическойГруппировкой = 0 Тогда 
		
		Возврат ГруппировкиОтчета;
	КонецЕсли;
	
	Поиск = Новый Структура("ПорядокГруппировки, ПредставлениеГруппировки");
	ЗаполнитьЗначенияСвойств(Поиск, ПоляСИерархическойГруппировкой[0]);
	
	НайденнаяГруппировка = ГруппировкиОтчета.НайтиСтроки(Поиск)[0];
	ИндексНайденнойГруппировки = ГруппировкиОтчета.Индекс(НайденнаяГруппировка);
	
	ШаблонПредставленияГруппировки = НСтр("ru = '%1 - уровень %2';
											|en = '%1 - level %2'");
	УровеньПоляСИерархическойГруппировкой = 0;
	
	Пока КоличествоУровнейПоляСИерархическойГруппировкой > 0 Цикл 
		
		УровеньПоляСИерархическойГруппировкой = УровеньПоляСИерархическойГруппировкой + 1;
		
		ДополнительнаяГруппировка = ГруппировкиОтчета.Вставить(ИндексНайденнойГруппировки);
		ЗаполнитьЗначенияСвойств(ДополнительнаяГруппировка, НайденнаяГруппировка);
		
		ДополнительнаяГруппировка.Уровень = УровеньПоляСИерархическойГруппировкой;
		
		ДополнительнаяГруппировка.ПредставлениеГруппировки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонПредставленияГруппировки,
			ДополнительнаяГруппировка.ПредставлениеГруппировки,
			УровеньПоляСИерархическойГруппировкой);
		
		КоличествоУровнейПоляСИерархическойГруппировкой = КоличествоУровнейПоляСИерархическойГруппировкой - 1;
		
	КонецЦикла;
	
	УровеньПоляСИерархическойГруппировкой = УровеньПоляСИерархическойГруппировкой + 1;
	
	НайденнаяГруппировка.Уровень = УровеньПоляСИерархическойГруппировкой;
	
	НайденнаяГруппировка.ПредставлениеГруппировки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонПредставленияГруппировки,
		НайденнаяГруппировка.ПредставлениеГруппировки,
		УровеньПоляСИерархическойГруппировкой);
	
	ГруппировкиОтчета.Сортировать("ПорядокГруппировки, Уровень");
	
	Возврат ГруппировкиОтчета;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьМенюУровнейГруппировок()
	
	МенюЗаполнено = (Элементы.ГруппаУровниГруппировок.ПодчиненныеЭлементы.Количество() > 1);
	
	Элементы.ПоказатьУровеньГруппировок.Видимость = Не МенюЗаполнено;
	Элементы.ПоказатьУровеньГруппировокЕще.Видимость = Не МенюЗаполнено;
	Элементы.ПоказатьУровеньГруппировокКонтекстноеМеню.Видимость = Не МенюЗаполнено;
	
	Элементы.ГруппаУровниГруппировок.Видимость = МенюЗаполнено;
	Элементы.ГруппаУровниГруппировокЕще.Видимость = МенюЗаполнено;
	Элементы.ГруппаУровниГруппировокКонтекстноеМеню.Видимость = МенюЗаполнено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВыбранныйУровеньГруппировок(УровеньГруппировки = Неопределено)
	
	Если УровеньГруппировки = Неопределено Тогда 
		УровеньГруппировки = ?(РежимРасшифровки, НеопределенныйУровеньГруппировок(), ВыбранныйУровеньГруппировок);
	КонецЕсли;
	
	Индекс = УровеньГруппировки - 1;
	Граница = ОтчетТабличныйДокумент.КоличествоУровнейГруппировокСтрок() - 1;
	
	Пока Граница > Индекс Цикл 
		
		ОтчетТабличныйДокумент.ПоказатьУровеньГруппировокСтрок(Граница);
		Граница = Граница - 1;
		
	КонецЦикла;
	
	ОтчетТабличныйДокумент.ПоказатьУровеньГруппировокСтрок(Индекс);
	
	ВыбранныйУровеньГруппировок = УровеньГруппировки;
	
	ЭталонноеМеню = Элементы.ГруппаУровниГруппировок;
	ЭталоннаяКнопка = Элементы.ПоказатьУровеньГруппировок;
	
	ОбластиВыводаМеню = Новый Соответствие;
	ОбластиВыводаМеню.Вставить(ЭталонноеМеню, ЭталоннаяКнопка);
	ОбластиВыводаМеню.Вставить(Элементы.ГруппаУровниГруппировокЕще, Элементы.ПоказатьУровеньГруппировокЕще);
	ОбластиВыводаМеню.Вставить(Элементы.ГруппаУровниГруппировокКонтекстноеМеню, Элементы.ПоказатьУровеньГруппировокКонтекстноеМеню);
	
	Для Каждого Область Из ОбластиВыводаМеню Цикл 
		
		Кнопки = Область.Ключ.ПодчиненныеЭлементы;
		
		Для Каждого Кнопка Из Кнопки Цикл 
			Кнопка.Пометка = Ложь;
		КонецЦикла;
		
		ИмяКнопки = ЭталоннаяКнопка.Имя + УровеньГруппировки + СтрЗаменить(Область.Значение.Имя, ЭталоннаяКнопка.Имя, "");
		Кнопка = Кнопки.Найти(ИмяКнопки);
		
		Если Кнопка <> Неопределено Тогда 
			Кнопка.Пометка = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("СохранитьВыбранныйУровеньГруппировокОтложено", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВыбранныйУровеньГруппировокОтложено()
	
	Если Не ВариантыОтчетовСлужебныйКлиентСервер.РежимВариантаОтчета(КлючТекущегоВарианта) Тогда
		
		КлючХраненияЗначения = КлючХраненияЗначенияВРамкахВариантаОтчета(НастройкиОтчета.ПолноеИмя, КлючТекущегоВарианта);
		СохранитьВыбранныйУровеньГруппировок(КлючХраненияЗначения, ВыбранныйУровеньГруппировок, РежимРасшифровки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьВыбранныйУровеньГруппировок(КлючХраненияЗначения, ВыбранныйУровеньГруппировок, РежимРасшифровки)
	
	Если РежимРасшифровки Тогда 
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(
		КлючХраненияЗначения, "ВыбранныйУровеньГруппировок", ВыбранныйУровеньГруппировок);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВосстановитьВыбранныйУровеньГруппировок(КлючХраненияЗначения, ВыбранныйУровеньГруппировок, РежимРасшифровки)
	
	Если РежимРасшифровки Тогда 
		Возврат;
	КонецЕсли;
	
	СохраненноеЗначение = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(
		КлючХраненияЗначения, "ВыбранныйУровеньГруппировок");
	
	Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда 
		ВыбранныйУровеньГруппировок = СохраненноеЗначение;
	Иначе
		ВыбранныйУровеньГруппировок = НеопределенныйУровеньГруппировок();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьВыбранныйУровеньГруппировок()
	
	Если РежимРасшифровки Тогда 
		Возврат;
	КонецЕсли;
	
	ВыбранныйУровеньГруппировок = НеопределенныйУровеньГруппировок();
	
	Для Каждого Элемент Из Элементы.ГруппаУровниГруппировок.ПодчиненныеЭлементы Цикл 
		
		Если ТипЗнч(Элемент) = Тип("КнопкаФормы") Тогда 
			Элемент.Пометка = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("СохранитьВыбранныйУровеньГруппировокОтложено", 0.1, Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НеопределенныйУровеньГруппировок()
	Возврат 999;
КонецФункции

#КонецОбласти

#Область ВыводЗаголовковНастроек

&НаСервереБезКонтекста
Процедура СохранитьСостояниеОпцииВыводитьЗаголовкиНастроек(КлючХраненияЗначения, ВыводитьЗаголовкиНастроек, РежимРасшифровки)
	
	Если РежимРасшифровки Тогда 
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(
		КлючХраненияЗначения, "ВыводитьЗаголовкиНастроек", ВыводитьЗаголовкиНастроек);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВосстановитьСостояниеОпцииВыводитьЗаголовкиНастроек(КлючХраненияЗначения, ВыводитьЗаголовкиНастроек,
	РежимРасшифровки)
	
	Если РежимРасшифровки Тогда 
		Возврат;
	КонецЕсли;
	
	СохраненноеЗначение = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(
		КлючХраненияЗначения, "ВыводитьЗаголовкиНастроек");
	
	ВыводитьЗаголовкиНастроек = СохраненноеЗначение = Неопределено Или СохраненноеЗначение = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеРезультатаОтчета

&НаКлиенте
Процедура ПослеУстановкиРасширенияРаботыСФайлами(РасширениеПодключено, ДополнительныеПараметры) Экспорт 
	
	Контекст = Новый Структура;
	Контекст.Вставить("ИндексФорматовСохраненияОтчета", Новый Соответствие);
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Фильтр = ДоступныеФорматыСохраненияОтчета(Контекст.ИндексФорматовСохраненияОтчета);
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Заголовок = НСтр("ru = 'Сохранение результата отчета';
							|en = 'Save report result'");
	
	Обработчик = Новый ОписаниеОповещения("ПослеВыбораИмениФайла", ЭтотОбъект, Контекст);
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(Обработчик, Диалог);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИмениФайла(Результат, Контекст) Экспорт 
	
	Если ТипЗнч(Результат) = Тип("Массив")
		И Результат.Количество() > 0 Тогда 
		
		ПолноеИмяФайлаОтчета = Результат[0];
		
	ИначеЕсли ТипЗнч(Результат) = Тип("Строка") Тогда 
		
		ПолноеИмяФайлаОтчета = Результат;
	Иначе
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ПослеСохраненияРезультатаОтчета", ЭтотОбъект, ПолноеИмяФайлаОтчета);
	ФорматыСохранения = ФорматыСохраненияОтчета(ПолноеИмяФайлаОтчета,
		Контекст.ИндексФорматовСохраненияОтчета);
	
	СвойстваРезультата = НастройкиОтчета.СвойстваРезультата; // см. ВариантыОтчетовСлужебный.СвойстваРезультатаОтчета
	
	РезультатОтчета = РезультатОтчетаДляСохранения(ОтчетТабличныйДокумент, СвойстваРезультата.Заголовки);
	РезультатОтчета.НачатьЗапись(Обработчик, ПолноеИмяФайлаОтчета, ФорматыСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияРезультатаОтчета(Результат, ПолноеИмяФайлаОтчета) Экспорт 
	
	Если Результат <> Истина Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ПриВыбореИмениФайлаОтчета", ЭтотОбъект, ПолноеИмяФайлаОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореИмениФайлаОтчета(ПолноеИмяФайлаОтчета) Экспорт 
	
	ФайловаяСистемаКлиент.ОткрытьФайл(ПолноеИмяФайлаОтчета);
	
КонецПроцедуры

&НаКлиенте
Функция ФорматыСохраненияОтчета(Знач ПолноеИмяФайлаОтчета, ИндексФорматовСохраненияОтчета)
	
	ОписаниеПолногоИмениФайла = СтрРазделить(ПолноеИмяФайлаОтчета,  ПолучитьРазделительПути());
	ИмяФайлаОтчета = ОписаниеПолногоИмениФайла[ОписаниеПолногоИмениФайла.ВГраница()];
	
	ОписаниеИмениФайла = СтрРазделить(ИмяФайлаОтчета,  ".");
	РасширениеФайлаОтчета = ОписаниеИмениФайла[ОписаниеИмениФайла.ВГраница()];
	
	Возврат ИндексФорматовСохраненияОтчета[РасширениеФайлаОтчета];
	
КонецФункции

&НаСервереБезКонтекста
Функция ДоступныеФорматыСохраненияОтчета(ИндексФорматовСохраненияОтчета)
	
	ДоступныеФорматы = Новый Массив;
	
	
	Возврат СтрСоединить(ДоступныеФорматы, "|");
	
КонецФункции

&НаСервереБезКонтекста
Функция РезультатОтчетаДляСохранения(ОтчетТабличныйДокумент, Заголовки)
	
	РезультатОтчета = СкопироватьТабличныйДокумент(ОтчетТабличныйДокумент);
	
	Возврат РезультатОтчета;
	
КонецФункции

&НаСервереБезКонтекста
Функция СкопироватьТабличныйДокумент(ТабличныйДокумент)
	
	Результат = Новый ТабличныйДокумент;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Вызов сервера

&НаСервере
Процедура УстановитьВидимостьДоступность(ПриСохраненииВарианта = Ложь)
	ПоказыватьКомандыВыбораВариантов =
		ВариантыОтчетовСлужебныйКлиентСервер.РежимВариантаОтчета(КлючТекущегоВарианта)
		И НастройкиОтчета.РазрешеноВыбиратьВарианты;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДоступностьОбменаНастройкамиВарианта(МетаданныеОтчета)
	
	ОбменНастройкамиВариантаДоступен = ВариантыОтчетовСлужебныйКлиентСервер.РежимВариантаОтчета(КлючТекущегоВарианта)
		И ВариантыОтчетов.ОтчетПодключенКХранилищу(МетаданныеОтчета);
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьВариант(КлючВарианта, ОчиститьСтекНастроек = Истина)
	УстановитьТекущийВариант(КлючВарианта);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сервер

&НаСервере
Процедура ОпределитьПоведениеВМобильномКлиенте()
	Если Не ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда 
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция КонтекстВариантаОтчета()
	Если РежимРасшифровки Тогда 
		Возврат "";
	КонецЕсли;
	
	
	Возврат Неопределено;
КонецФункции

&НаСервере
Процедура УстановитьКлючНазначенияИспользования()
	Если ЗначениеЗаполнено(КлючНазначенияИспользования) Тогда 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПараметрыФормы()
	
	ФормаПараметры = ВариантыОтчетов.СохраняемыеПараметрыФормыОтчета(Параметры);
	ФормаПараметры.КлючНазначенияИспользования = КлючНазначенияИспользования;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКлючТекущегоВарианта(ОтчетПолноеИмя, ОтчетОбъект)
	ВариантыПанелиКлючТекущегоВарианта = ПустойКлючВарианта();
	
КонецПроцедуры

// Параметры:
//  ОтчетОбъект - ОтчетОбъект
//
// Возвращаемое значение:
//   см. ВариантыОтчетов.НастройкиФормыОтчета
//
&НаСервере
Функция НастройкиОтчета(ОтчетОбъект)
	
	Настройки = ВариантыОтчетов.НастройкиФормыОтчета(Параметры.Отчет, КлючТекущегоВарианта, ОтчетОбъект);
	Настройки.АдресСхемы = АдресСхемыОтчета(ОтчетОбъект);
	Настройки.Контекстный = ЗначениеЗаполнено(КонтекстВарианта);
	Настройки.Подсистема  = ФормаПараметры.Подсистема;
	Настройки.ИспользуемыеТаблицы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ИспользуемыеТаблицы");
	Настройки.СобытияНастроек = СобытияНастроек();
	
	Возврат Настройки;
КонецФункции

// Параметры:
//  Описание - см. НастройкиОтчета
//
// Возвращаемое значение:
//   см. НастройкиОтчета
//
&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеНастроекОтчета(Описание)
	
	Возврат Описание;
	
КонецФункции

&НаСервере
Функция АдресСхемыОтчета(ОтчетОбъект)
	АдресСхемы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "АдресСхемы", "");
	Возврат АдресСхемы;
КонецФункции

#Область СобытияНастроек

&НаСервере
Функция СобытияНастроек()
	
	СобытияНастроек = Новый Соответствие;
	
	Возврат СобытияНастроек;
	
КонецФункции

&НаСервере
Функция УточненияСобытийНастроек()
	
	Префиксы = Новый Соответствие;
	Возврат Префиксы;
	
КонецФункции

&НаСервере
Функция СобытияНастроекИсключения()
	
	Исключения = Новый Массив;
	Исключения.Добавить("Открыть");
	Исключения.Добавить("РасшифроватьПоДетальнымЗаписям");
	Исключения.Добавить("Расшифровать");
	Исключения.Добавить("Подключаемый_ПоказатьУровеньГруппировок");
	Исключения.Добавить("ОтчетСкомпоноватьРезультат");
	
	Возврат Исключения;
	
КонецФункции

&НаСервере
Процедура НайтиСобытияНастроек(Меню, Уточнения, Исключения, СобытияНастроек)
	а = 0;
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьРазрешенияПользователя()
	а = 0;
КонецПроцедуры

&НаСервере
Функция ДанныеЭлементаРасшифровки(Расшифровка)
	
	Возврат ВариантыОтчетовСлужебный.ДанныеЭлементаРасшифровки(ЭтотОбъект, Расшифровка);
	
КонецФункции

&НаСервере
Процедура ОбновитьЭлементыФормыНастроекНаСервере(ПараметрыОбновления = Неопределено)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиВКомпоновщик(ПараметрыЗагрузки)
	ПроверитьПараметрыЗагрузки(ПараметрыЗагрузки);
КонецПроцедуры

&НаСервере
Процедура ПроверитьПараметрыЗагрузки(ПараметрыЗагрузки)
	Если ТипЗнч(ПараметрыЗагрузки) <> Тип("Структура") Тогда 
		ПараметрыЗагрузки = Новый Структура;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПоказатьОшибкиФормирования(ИнформацияОбОшибке)
	а = 0;
КонецПроцедуры

&НаСервере
Процедура СохранитьТекущийВариантОтчета()
	
	КлючОтчета = НастройкиОтчета.ПолноеИмя;
	ОписаниеНастроек = ХранилищаНастроек.ХранилищеВариантовОтчетов.ПолучитьОписание(КлючОтчета, КлючТекущегоВарианта);
	
	ХранилищаНастроек.ХранилищеВариантовОтчетов.Сохранить(
		КлючОтчета,
		КлючТекущегоВарианта,
		Отчет.КомпоновщикНастроек.Настройки,
		ОписаниеНастроек);
	
	ВариантМодифицирован = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомандыВыбораВариантов()
	Если ОбщегоНазначения.РазделениеВключено()
		И Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда 
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОВариантеОтчета()
	ДополнительныеСвойства = Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("КлючВарианта", КлючТекущегоВарианта);
	ДополнительныеСвойства.Вставить("ВариантНаименование", ОтчетНаименованиеТекущегоВарианта);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВариантОтчетаПоСсылкеИКлючу(ОтчетСсылка, КлючВарианта = Неопределено)
	
	Запрос = Новый Запрос;
	Возврат Запрос;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПустойКлючВарианта()
	Возврат " - ";
КонецФункции

&НаКлиенте
Процедура ПраваПользователей(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступомСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеДоступомСлужебныйКлиент");
		МодульУправлениеДоступомСлужебныйКлиент.ПоказатьПраваПользователейОтчета(
			НастройкиОтчета.ОтчетСсылка, НастройкиОтчета.ИспользуемыеТаблицы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьСхемуИзКонструктора(Результат)
	
	Если ТипЗнч(Результат) <> Тип("СхемаКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройкиИзКонтекстногоМеню(Результат)
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораПоля(ВыбранноеПоле, ДополнительныеПараметры) Экспорт 
	
	ВариантыОтчетовСлужебныйКлиент.ПослеВыбораПоля(ВыбранноеПоле, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Функция СвойстваЗаголовка()
	
	СвойстваРезультата = НастройкиОтчета.СвойстваРезультата; // см. ВариантыОтчетовСлужебный.СвойстваРезультатаОтчета
	Возврат СвойстваРезультата.Заголовки[ИмяТекущейОбластиЯчеек()];
	
КонецФункции

// Возвращаемое значение:
//  Строка - Строка
//
&НаКлиенте
Функция ИмяТекущейОбластиЯчеек()
	
	Область = Элементы.ОтчетТабличныйДокумент.ТекущаяОбласть;
	
	Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда 
		Возврат Область.Имя;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаКлиенте
Процедура СброситьТекущуюОбласть()
	а = 0;	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияСоставаБыстрыхНастроек(Результат, ДополнительныеПараметры) Экспорт 
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючХраненияЗначенияВРамкахВариантаОтчета(ПолноеИмяОтчета, КлючВарианта)
	
	Возврат Неопределено;
	
КонецФункции

#Область ПереходМеждуНастройкамиСтека

&НаСервере
Процедура ОбновитьМенюПереходаМеждуИзменениямиНастроек()
	
	УдалитьКомандыМенюПереходаМеждуИзменениямиНастроек();
	ОпределитьДоступностьКомандПереходаМеждуИзменениямиНастроек();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьКомандыМенюПереходаМеждуИзменениямиНастроек()
	
	МаксимальныйРазмерСтекаНастроек = ВариантыОтчетовСлужебныйКлиентСервер.МаксимальныйРазмерСтекаНастроек();
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьДоступностьКомандПереходаМеждуИзменениямиНастроек()
	
	ТекущиеНастройкиСтека = ТекущиеНастройкиСтека();
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандуПереходаМеждуИзменениямиНастроек(ЗаписьСтекаНастроек, ГруппаДействий, СледующаяКоманда)
	
	ИмяКоманды = ИмяКомандыПереходаМеждуИзменениямиНастроек(ЗаписьСтекаНастроек.Порядок);
КонецПроцедуры

&НаСервере
Функция ИмяКомандыПереходаМеждуИзменениямиНастроек(Порядок)
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПрефиксИмениКомандыПереходаМеждуИзменениямиНастроек()
	
	Возврат "ПерейтиМеждуИзменениямиНастроек";
	
КонецФункции

&НаСервере
Процедура ОбновитьСочетаниеКлавишКомандПереходаМеждуИзменениямиНастроек()
	
а = 0;	

КонецПроцедуры

&НаСервере
Функция УстановитьСочетаниеКлавишКомандыПереходаМеждуИзменениямиНастроек(ПорядокКоманды, СочетаниеКлавиш)
	
	ИмяКоманды = ИмяКомандыПереходаМеждуИзменениямиНастроек(ПорядокКоманды);
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ТекущиеНастройкиСтека()
	
	Возврат СтекНастроек.НайтиСтроки(Новый Структура("Пометка", Истина));
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура УточнитьПризнакАвтоформированияОтчета(ПараметрыОбновления)
	
	Если Не ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОбновления, "Переформировать", Ложь) Тогда
		ДопустимоеВремяДляАвтоформированияОтчета = 5; // секунд
		ВремяФормированияОтчета = НастройкиОтчета.СвойстваРезультата.ВремяФормирования;
		ПараметрыОбновления.Вставить("Переформировать", ВремяФормированияОтчета <= ДопустимоеВремяДляАвтоформированияОтчета);
	КонецЕсли;
	 
КонецПроцедуры

#КонецОбласти
